
IMU_9DOF_2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083a8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  08008460  08008460  00018460  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a0c  08008a0c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008a0c  08008a0c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a0c  08008a0c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a0c  08008a0c  00018a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a10  08008a10  00018a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008a14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  200001dc  08008bf0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08008bf0  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b6d  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028f4  00000000  00000000  00032d71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00035668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  000362a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016efd  00000000  00000000  00036dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000125d5  00000000  00000000  0004dcbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087f59  00000000  00000000  00060292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e81eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b20  00000000  00000000  000e8240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001dc 	.word	0x200001dc
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08008448 	.word	0x08008448

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001e0 	.word	0x200001e0
 80000fc:	08008448 	.word	0x08008448

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			; (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	; 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	; 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	; 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	1c10      	adds	r0, r2, #0
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	1c19      	adds	r1, r3, #0
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 fb5b 	bl	8001af0 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 faa5 	bl	8001994 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 fb4d 	bl	8001af0 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fb43 	bl	8001af0 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fac7 	bl	8001a0c <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fabd 	bl	8001a0c <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_fadd>:
 80004a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a2:	4646      	mov	r6, r8
 80004a4:	46d6      	mov	lr, sl
 80004a6:	464f      	mov	r7, r9
 80004a8:	024d      	lsls	r5, r1, #9
 80004aa:	0242      	lsls	r2, r0, #9
 80004ac:	b5c0      	push	{r6, r7, lr}
 80004ae:	0a52      	lsrs	r2, r2, #9
 80004b0:	0a6e      	lsrs	r6, r5, #9
 80004b2:	0047      	lsls	r7, r0, #1
 80004b4:	46b0      	mov	r8, r6
 80004b6:	0e3f      	lsrs	r7, r7, #24
 80004b8:	004e      	lsls	r6, r1, #1
 80004ba:	0fc4      	lsrs	r4, r0, #31
 80004bc:	00d0      	lsls	r0, r2, #3
 80004be:	4694      	mov	ip, r2
 80004c0:	003b      	movs	r3, r7
 80004c2:	4682      	mov	sl, r0
 80004c4:	0e36      	lsrs	r6, r6, #24
 80004c6:	0fc9      	lsrs	r1, r1, #31
 80004c8:	09ad      	lsrs	r5, r5, #6
 80004ca:	428c      	cmp	r4, r1
 80004cc:	d06d      	beq.n	80005aa <__aeabi_fadd+0x10a>
 80004ce:	1bb8      	subs	r0, r7, r6
 80004d0:	4681      	mov	r9, r0
 80004d2:	2800      	cmp	r0, #0
 80004d4:	dd4d      	ble.n	8000572 <__aeabi_fadd+0xd2>
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	d100      	bne.n	80004dc <__aeabi_fadd+0x3c>
 80004da:	e088      	b.n	80005ee <__aeabi_fadd+0x14e>
 80004dc:	2fff      	cmp	r7, #255	; 0xff
 80004de:	d05a      	beq.n	8000596 <__aeabi_fadd+0xf6>
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	04db      	lsls	r3, r3, #19
 80004e4:	431d      	orrs	r5, r3
 80004e6:	464b      	mov	r3, r9
 80004e8:	2201      	movs	r2, #1
 80004ea:	2b1b      	cmp	r3, #27
 80004ec:	dc0a      	bgt.n	8000504 <__aeabi_fadd+0x64>
 80004ee:	002b      	movs	r3, r5
 80004f0:	464a      	mov	r2, r9
 80004f2:	4649      	mov	r1, r9
 80004f4:	40d3      	lsrs	r3, r2
 80004f6:	2220      	movs	r2, #32
 80004f8:	1a52      	subs	r2, r2, r1
 80004fa:	4095      	lsls	r5, r2
 80004fc:	002a      	movs	r2, r5
 80004fe:	1e55      	subs	r5, r2, #1
 8000500:	41aa      	sbcs	r2, r5
 8000502:	431a      	orrs	r2, r3
 8000504:	4653      	mov	r3, sl
 8000506:	1a9a      	subs	r2, r3, r2
 8000508:	0153      	lsls	r3, r2, #5
 800050a:	d400      	bmi.n	800050e <__aeabi_fadd+0x6e>
 800050c:	e0b9      	b.n	8000682 <__aeabi_fadd+0x1e2>
 800050e:	0192      	lsls	r2, r2, #6
 8000510:	0996      	lsrs	r6, r2, #6
 8000512:	0030      	movs	r0, r6
 8000514:	f002 fa04 	bl	8002920 <__clzsi2>
 8000518:	3805      	subs	r0, #5
 800051a:	4086      	lsls	r6, r0
 800051c:	4287      	cmp	r7, r0
 800051e:	dd00      	ble.n	8000522 <__aeabi_fadd+0x82>
 8000520:	e0d4      	b.n	80006cc <__aeabi_fadd+0x22c>
 8000522:	0033      	movs	r3, r6
 8000524:	1bc7      	subs	r7, r0, r7
 8000526:	2020      	movs	r0, #32
 8000528:	3701      	adds	r7, #1
 800052a:	40fb      	lsrs	r3, r7
 800052c:	1bc7      	subs	r7, r0, r7
 800052e:	40be      	lsls	r6, r7
 8000530:	0032      	movs	r2, r6
 8000532:	1e56      	subs	r6, r2, #1
 8000534:	41b2      	sbcs	r2, r6
 8000536:	2700      	movs	r7, #0
 8000538:	431a      	orrs	r2, r3
 800053a:	0753      	lsls	r3, r2, #29
 800053c:	d004      	beq.n	8000548 <__aeabi_fadd+0xa8>
 800053e:	230f      	movs	r3, #15
 8000540:	4013      	ands	r3, r2
 8000542:	2b04      	cmp	r3, #4
 8000544:	d000      	beq.n	8000548 <__aeabi_fadd+0xa8>
 8000546:	3204      	adds	r2, #4
 8000548:	0153      	lsls	r3, r2, #5
 800054a:	d400      	bmi.n	800054e <__aeabi_fadd+0xae>
 800054c:	e09c      	b.n	8000688 <__aeabi_fadd+0x1e8>
 800054e:	1c7b      	adds	r3, r7, #1
 8000550:	2ffe      	cmp	r7, #254	; 0xfe
 8000552:	d100      	bne.n	8000556 <__aeabi_fadd+0xb6>
 8000554:	e09a      	b.n	800068c <__aeabi_fadd+0x1ec>
 8000556:	0192      	lsls	r2, r2, #6
 8000558:	0a52      	lsrs	r2, r2, #9
 800055a:	4694      	mov	ip, r2
 800055c:	b2db      	uxtb	r3, r3
 800055e:	05d8      	lsls	r0, r3, #23
 8000560:	4663      	mov	r3, ip
 8000562:	07e4      	lsls	r4, r4, #31
 8000564:	4318      	orrs	r0, r3
 8000566:	4320      	orrs	r0, r4
 8000568:	bce0      	pop	{r5, r6, r7}
 800056a:	46ba      	mov	sl, r7
 800056c:	46b1      	mov	r9, r6
 800056e:	46a8      	mov	r8, r5
 8000570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000572:	2800      	cmp	r0, #0
 8000574:	d049      	beq.n	800060a <__aeabi_fadd+0x16a>
 8000576:	1bf3      	subs	r3, r6, r7
 8000578:	2f00      	cmp	r7, #0
 800057a:	d000      	beq.n	800057e <__aeabi_fadd+0xde>
 800057c:	e0b6      	b.n	80006ec <__aeabi_fadd+0x24c>
 800057e:	4652      	mov	r2, sl
 8000580:	2a00      	cmp	r2, #0
 8000582:	d060      	beq.n	8000646 <__aeabi_fadd+0x1a6>
 8000584:	3b01      	subs	r3, #1
 8000586:	2b00      	cmp	r3, #0
 8000588:	d100      	bne.n	800058c <__aeabi_fadd+0xec>
 800058a:	e0fc      	b.n	8000786 <__aeabi_fadd+0x2e6>
 800058c:	2eff      	cmp	r6, #255	; 0xff
 800058e:	d000      	beq.n	8000592 <__aeabi_fadd+0xf2>
 8000590:	e0b4      	b.n	80006fc <__aeabi_fadd+0x25c>
 8000592:	000c      	movs	r4, r1
 8000594:	4642      	mov	r2, r8
 8000596:	2a00      	cmp	r2, #0
 8000598:	d078      	beq.n	800068c <__aeabi_fadd+0x1ec>
 800059a:	2080      	movs	r0, #128	; 0x80
 800059c:	03c0      	lsls	r0, r0, #15
 800059e:	4310      	orrs	r0, r2
 80005a0:	0242      	lsls	r2, r0, #9
 80005a2:	0a53      	lsrs	r3, r2, #9
 80005a4:	469c      	mov	ip, r3
 80005a6:	23ff      	movs	r3, #255	; 0xff
 80005a8:	e7d9      	b.n	800055e <__aeabi_fadd+0xbe>
 80005aa:	1bb9      	subs	r1, r7, r6
 80005ac:	2900      	cmp	r1, #0
 80005ae:	dd71      	ble.n	8000694 <__aeabi_fadd+0x1f4>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d03f      	beq.n	8000634 <__aeabi_fadd+0x194>
 80005b4:	2fff      	cmp	r7, #255	; 0xff
 80005b6:	d0ee      	beq.n	8000596 <__aeabi_fadd+0xf6>
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	04db      	lsls	r3, r3, #19
 80005bc:	431d      	orrs	r5, r3
 80005be:	2201      	movs	r2, #1
 80005c0:	291b      	cmp	r1, #27
 80005c2:	dc07      	bgt.n	80005d4 <__aeabi_fadd+0x134>
 80005c4:	002a      	movs	r2, r5
 80005c6:	2320      	movs	r3, #32
 80005c8:	40ca      	lsrs	r2, r1
 80005ca:	1a59      	subs	r1, r3, r1
 80005cc:	408d      	lsls	r5, r1
 80005ce:	1e6b      	subs	r3, r5, #1
 80005d0:	419d      	sbcs	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	4452      	add	r2, sl
 80005d6:	0153      	lsls	r3, r2, #5
 80005d8:	d553      	bpl.n	8000682 <__aeabi_fadd+0x1e2>
 80005da:	3701      	adds	r7, #1
 80005dc:	2fff      	cmp	r7, #255	; 0xff
 80005de:	d055      	beq.n	800068c <__aeabi_fadd+0x1ec>
 80005e0:	2301      	movs	r3, #1
 80005e2:	497b      	ldr	r1, [pc, #492]	; (80007d0 <__aeabi_fadd+0x330>)
 80005e4:	4013      	ands	r3, r2
 80005e6:	0852      	lsrs	r2, r2, #1
 80005e8:	400a      	ands	r2, r1
 80005ea:	431a      	orrs	r2, r3
 80005ec:	e7a5      	b.n	800053a <__aeabi_fadd+0x9a>
 80005ee:	2d00      	cmp	r5, #0
 80005f0:	d02c      	beq.n	800064c <__aeabi_fadd+0x1ac>
 80005f2:	2301      	movs	r3, #1
 80005f4:	425b      	negs	r3, r3
 80005f6:	469c      	mov	ip, r3
 80005f8:	44e1      	add	r9, ip
 80005fa:	464b      	mov	r3, r9
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d100      	bne.n	8000602 <__aeabi_fadd+0x162>
 8000600:	e0ad      	b.n	800075e <__aeabi_fadd+0x2be>
 8000602:	2fff      	cmp	r7, #255	; 0xff
 8000604:	d000      	beq.n	8000608 <__aeabi_fadd+0x168>
 8000606:	e76e      	b.n	80004e6 <__aeabi_fadd+0x46>
 8000608:	e7c5      	b.n	8000596 <__aeabi_fadd+0xf6>
 800060a:	20fe      	movs	r0, #254	; 0xfe
 800060c:	1c7e      	adds	r6, r7, #1
 800060e:	4230      	tst	r0, r6
 8000610:	d160      	bne.n	80006d4 <__aeabi_fadd+0x234>
 8000612:	2f00      	cmp	r7, #0
 8000614:	d000      	beq.n	8000618 <__aeabi_fadd+0x178>
 8000616:	e093      	b.n	8000740 <__aeabi_fadd+0x2a0>
 8000618:	4652      	mov	r2, sl
 800061a:	2a00      	cmp	r2, #0
 800061c:	d100      	bne.n	8000620 <__aeabi_fadd+0x180>
 800061e:	e0b6      	b.n	800078e <__aeabi_fadd+0x2ee>
 8000620:	2d00      	cmp	r5, #0
 8000622:	d09c      	beq.n	800055e <__aeabi_fadd+0xbe>
 8000624:	1b52      	subs	r2, r2, r5
 8000626:	0150      	lsls	r0, r2, #5
 8000628:	d400      	bmi.n	800062c <__aeabi_fadd+0x18c>
 800062a:	e0c3      	b.n	80007b4 <__aeabi_fadd+0x314>
 800062c:	4653      	mov	r3, sl
 800062e:	000c      	movs	r4, r1
 8000630:	1aea      	subs	r2, r5, r3
 8000632:	e782      	b.n	800053a <__aeabi_fadd+0x9a>
 8000634:	2d00      	cmp	r5, #0
 8000636:	d009      	beq.n	800064c <__aeabi_fadd+0x1ac>
 8000638:	3901      	subs	r1, #1
 800063a:	2900      	cmp	r1, #0
 800063c:	d100      	bne.n	8000640 <__aeabi_fadd+0x1a0>
 800063e:	e08b      	b.n	8000758 <__aeabi_fadd+0x2b8>
 8000640:	2fff      	cmp	r7, #255	; 0xff
 8000642:	d1bc      	bne.n	80005be <__aeabi_fadd+0x11e>
 8000644:	e7a7      	b.n	8000596 <__aeabi_fadd+0xf6>
 8000646:	000c      	movs	r4, r1
 8000648:	4642      	mov	r2, r8
 800064a:	0037      	movs	r7, r6
 800064c:	2fff      	cmp	r7, #255	; 0xff
 800064e:	d0a2      	beq.n	8000596 <__aeabi_fadd+0xf6>
 8000650:	0252      	lsls	r2, r2, #9
 8000652:	0a53      	lsrs	r3, r2, #9
 8000654:	469c      	mov	ip, r3
 8000656:	b2fb      	uxtb	r3, r7
 8000658:	e781      	b.n	800055e <__aeabi_fadd+0xbe>
 800065a:	21fe      	movs	r1, #254	; 0xfe
 800065c:	3701      	adds	r7, #1
 800065e:	4239      	tst	r1, r7
 8000660:	d165      	bne.n	800072e <__aeabi_fadd+0x28e>
 8000662:	2b00      	cmp	r3, #0
 8000664:	d17e      	bne.n	8000764 <__aeabi_fadd+0x2c4>
 8000666:	2800      	cmp	r0, #0
 8000668:	d100      	bne.n	800066c <__aeabi_fadd+0x1cc>
 800066a:	e0aa      	b.n	80007c2 <__aeabi_fadd+0x322>
 800066c:	2d00      	cmp	r5, #0
 800066e:	d100      	bne.n	8000672 <__aeabi_fadd+0x1d2>
 8000670:	e775      	b.n	800055e <__aeabi_fadd+0xbe>
 8000672:	002a      	movs	r2, r5
 8000674:	4452      	add	r2, sl
 8000676:	2700      	movs	r7, #0
 8000678:	0153      	lsls	r3, r2, #5
 800067a:	d502      	bpl.n	8000682 <__aeabi_fadd+0x1e2>
 800067c:	4b55      	ldr	r3, [pc, #340]	; (80007d4 <__aeabi_fadd+0x334>)
 800067e:	3701      	adds	r7, #1
 8000680:	401a      	ands	r2, r3
 8000682:	0753      	lsls	r3, r2, #29
 8000684:	d000      	beq.n	8000688 <__aeabi_fadd+0x1e8>
 8000686:	e75a      	b.n	800053e <__aeabi_fadd+0x9e>
 8000688:	08d2      	lsrs	r2, r2, #3
 800068a:	e7df      	b.n	800064c <__aeabi_fadd+0x1ac>
 800068c:	2200      	movs	r2, #0
 800068e:	23ff      	movs	r3, #255	; 0xff
 8000690:	4694      	mov	ip, r2
 8000692:	e764      	b.n	800055e <__aeabi_fadd+0xbe>
 8000694:	2900      	cmp	r1, #0
 8000696:	d0e0      	beq.n	800065a <__aeabi_fadd+0x1ba>
 8000698:	1bf3      	subs	r3, r6, r7
 800069a:	2f00      	cmp	r7, #0
 800069c:	d03e      	beq.n	800071c <__aeabi_fadd+0x27c>
 800069e:	2eff      	cmp	r6, #255	; 0xff
 80006a0:	d100      	bne.n	80006a4 <__aeabi_fadd+0x204>
 80006a2:	e777      	b.n	8000594 <__aeabi_fadd+0xf4>
 80006a4:	2280      	movs	r2, #128	; 0x80
 80006a6:	0001      	movs	r1, r0
 80006a8:	04d2      	lsls	r2, r2, #19
 80006aa:	4311      	orrs	r1, r2
 80006ac:	468a      	mov	sl, r1
 80006ae:	2201      	movs	r2, #1
 80006b0:	2b1b      	cmp	r3, #27
 80006b2:	dc08      	bgt.n	80006c6 <__aeabi_fadd+0x226>
 80006b4:	4652      	mov	r2, sl
 80006b6:	2120      	movs	r1, #32
 80006b8:	4650      	mov	r0, sl
 80006ba:	40da      	lsrs	r2, r3
 80006bc:	1acb      	subs	r3, r1, r3
 80006be:	4098      	lsls	r0, r3
 80006c0:	1e43      	subs	r3, r0, #1
 80006c2:	4198      	sbcs	r0, r3
 80006c4:	4302      	orrs	r2, r0
 80006c6:	0037      	movs	r7, r6
 80006c8:	1952      	adds	r2, r2, r5
 80006ca:	e784      	b.n	80005d6 <__aeabi_fadd+0x136>
 80006cc:	4a41      	ldr	r2, [pc, #260]	; (80007d4 <__aeabi_fadd+0x334>)
 80006ce:	1a3f      	subs	r7, r7, r0
 80006d0:	4032      	ands	r2, r6
 80006d2:	e732      	b.n	800053a <__aeabi_fadd+0x9a>
 80006d4:	4653      	mov	r3, sl
 80006d6:	1b5e      	subs	r6, r3, r5
 80006d8:	0173      	lsls	r3, r6, #5
 80006da:	d42d      	bmi.n	8000738 <__aeabi_fadd+0x298>
 80006dc:	2e00      	cmp	r6, #0
 80006de:	d000      	beq.n	80006e2 <__aeabi_fadd+0x242>
 80006e0:	e717      	b.n	8000512 <__aeabi_fadd+0x72>
 80006e2:	2200      	movs	r2, #0
 80006e4:	2400      	movs	r4, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	4694      	mov	ip, r2
 80006ea:	e738      	b.n	800055e <__aeabi_fadd+0xbe>
 80006ec:	2eff      	cmp	r6, #255	; 0xff
 80006ee:	d100      	bne.n	80006f2 <__aeabi_fadd+0x252>
 80006f0:	e74f      	b.n	8000592 <__aeabi_fadd+0xf2>
 80006f2:	2280      	movs	r2, #128	; 0x80
 80006f4:	4650      	mov	r0, sl
 80006f6:	04d2      	lsls	r2, r2, #19
 80006f8:	4310      	orrs	r0, r2
 80006fa:	4682      	mov	sl, r0
 80006fc:	2201      	movs	r2, #1
 80006fe:	2b1b      	cmp	r3, #27
 8000700:	dc08      	bgt.n	8000714 <__aeabi_fadd+0x274>
 8000702:	4652      	mov	r2, sl
 8000704:	2420      	movs	r4, #32
 8000706:	4650      	mov	r0, sl
 8000708:	40da      	lsrs	r2, r3
 800070a:	1ae3      	subs	r3, r4, r3
 800070c:	4098      	lsls	r0, r3
 800070e:	1e43      	subs	r3, r0, #1
 8000710:	4198      	sbcs	r0, r3
 8000712:	4302      	orrs	r2, r0
 8000714:	000c      	movs	r4, r1
 8000716:	0037      	movs	r7, r6
 8000718:	1aaa      	subs	r2, r5, r2
 800071a:	e6f5      	b.n	8000508 <__aeabi_fadd+0x68>
 800071c:	2800      	cmp	r0, #0
 800071e:	d093      	beq.n	8000648 <__aeabi_fadd+0x1a8>
 8000720:	3b01      	subs	r3, #1
 8000722:	2b00      	cmp	r3, #0
 8000724:	d04f      	beq.n	80007c6 <__aeabi_fadd+0x326>
 8000726:	2eff      	cmp	r6, #255	; 0xff
 8000728:	d1c1      	bne.n	80006ae <__aeabi_fadd+0x20e>
 800072a:	4642      	mov	r2, r8
 800072c:	e733      	b.n	8000596 <__aeabi_fadd+0xf6>
 800072e:	2fff      	cmp	r7, #255	; 0xff
 8000730:	d0ac      	beq.n	800068c <__aeabi_fadd+0x1ec>
 8000732:	4455      	add	r5, sl
 8000734:	086a      	lsrs	r2, r5, #1
 8000736:	e7a4      	b.n	8000682 <__aeabi_fadd+0x1e2>
 8000738:	4653      	mov	r3, sl
 800073a:	000c      	movs	r4, r1
 800073c:	1aee      	subs	r6, r5, r3
 800073e:	e6e8      	b.n	8000512 <__aeabi_fadd+0x72>
 8000740:	4653      	mov	r3, sl
 8000742:	2b00      	cmp	r3, #0
 8000744:	d128      	bne.n	8000798 <__aeabi_fadd+0x2f8>
 8000746:	2d00      	cmp	r5, #0
 8000748:	d000      	beq.n	800074c <__aeabi_fadd+0x2ac>
 800074a:	e722      	b.n	8000592 <__aeabi_fadd+0xf2>
 800074c:	2380      	movs	r3, #128	; 0x80
 800074e:	03db      	lsls	r3, r3, #15
 8000750:	469c      	mov	ip, r3
 8000752:	2400      	movs	r4, #0
 8000754:	23ff      	movs	r3, #255	; 0xff
 8000756:	e702      	b.n	800055e <__aeabi_fadd+0xbe>
 8000758:	002a      	movs	r2, r5
 800075a:	4452      	add	r2, sl
 800075c:	e73b      	b.n	80005d6 <__aeabi_fadd+0x136>
 800075e:	4653      	mov	r3, sl
 8000760:	1b5a      	subs	r2, r3, r5
 8000762:	e6d1      	b.n	8000508 <__aeabi_fadd+0x68>
 8000764:	2800      	cmp	r0, #0
 8000766:	d100      	bne.n	800076a <__aeabi_fadd+0x2ca>
 8000768:	e714      	b.n	8000594 <__aeabi_fadd+0xf4>
 800076a:	2d00      	cmp	r5, #0
 800076c:	d100      	bne.n	8000770 <__aeabi_fadd+0x2d0>
 800076e:	e712      	b.n	8000596 <__aeabi_fadd+0xf6>
 8000770:	2380      	movs	r3, #128	; 0x80
 8000772:	03db      	lsls	r3, r3, #15
 8000774:	421a      	tst	r2, r3
 8000776:	d100      	bne.n	800077a <__aeabi_fadd+0x2da>
 8000778:	e70d      	b.n	8000596 <__aeabi_fadd+0xf6>
 800077a:	4641      	mov	r1, r8
 800077c:	4219      	tst	r1, r3
 800077e:	d000      	beq.n	8000782 <__aeabi_fadd+0x2e2>
 8000780:	e709      	b.n	8000596 <__aeabi_fadd+0xf6>
 8000782:	4642      	mov	r2, r8
 8000784:	e707      	b.n	8000596 <__aeabi_fadd+0xf6>
 8000786:	000c      	movs	r4, r1
 8000788:	0037      	movs	r7, r6
 800078a:	1aaa      	subs	r2, r5, r2
 800078c:	e6bc      	b.n	8000508 <__aeabi_fadd+0x68>
 800078e:	2d00      	cmp	r5, #0
 8000790:	d013      	beq.n	80007ba <__aeabi_fadd+0x31a>
 8000792:	000c      	movs	r4, r1
 8000794:	46c4      	mov	ip, r8
 8000796:	e6e2      	b.n	800055e <__aeabi_fadd+0xbe>
 8000798:	2d00      	cmp	r5, #0
 800079a:	d100      	bne.n	800079e <__aeabi_fadd+0x2fe>
 800079c:	e6fb      	b.n	8000596 <__aeabi_fadd+0xf6>
 800079e:	2380      	movs	r3, #128	; 0x80
 80007a0:	03db      	lsls	r3, r3, #15
 80007a2:	421a      	tst	r2, r3
 80007a4:	d100      	bne.n	80007a8 <__aeabi_fadd+0x308>
 80007a6:	e6f6      	b.n	8000596 <__aeabi_fadd+0xf6>
 80007a8:	4640      	mov	r0, r8
 80007aa:	4218      	tst	r0, r3
 80007ac:	d000      	beq.n	80007b0 <__aeabi_fadd+0x310>
 80007ae:	e6f2      	b.n	8000596 <__aeabi_fadd+0xf6>
 80007b0:	000c      	movs	r4, r1
 80007b2:	e6ef      	b.n	8000594 <__aeabi_fadd+0xf4>
 80007b4:	2a00      	cmp	r2, #0
 80007b6:	d000      	beq.n	80007ba <__aeabi_fadd+0x31a>
 80007b8:	e763      	b.n	8000682 <__aeabi_fadd+0x1e2>
 80007ba:	2200      	movs	r2, #0
 80007bc:	2400      	movs	r4, #0
 80007be:	4694      	mov	ip, r2
 80007c0:	e6cd      	b.n	800055e <__aeabi_fadd+0xbe>
 80007c2:	46c4      	mov	ip, r8
 80007c4:	e6cb      	b.n	800055e <__aeabi_fadd+0xbe>
 80007c6:	002a      	movs	r2, r5
 80007c8:	0037      	movs	r7, r6
 80007ca:	4452      	add	r2, sl
 80007cc:	e703      	b.n	80005d6 <__aeabi_fadd+0x136>
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	7dffffff 	.word	0x7dffffff
 80007d4:	fbffffff 	.word	0xfbffffff

080007d8 <__aeabi_fdiv>:
 80007d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007da:	464f      	mov	r7, r9
 80007dc:	4646      	mov	r6, r8
 80007de:	46d6      	mov	lr, sl
 80007e0:	0245      	lsls	r5, r0, #9
 80007e2:	b5c0      	push	{r6, r7, lr}
 80007e4:	0047      	lsls	r7, r0, #1
 80007e6:	1c0c      	adds	r4, r1, #0
 80007e8:	0a6d      	lsrs	r5, r5, #9
 80007ea:	0e3f      	lsrs	r7, r7, #24
 80007ec:	0fc6      	lsrs	r6, r0, #31
 80007ee:	2f00      	cmp	r7, #0
 80007f0:	d066      	beq.n	80008c0 <__aeabi_fdiv+0xe8>
 80007f2:	2fff      	cmp	r7, #255	; 0xff
 80007f4:	d06c      	beq.n	80008d0 <__aeabi_fdiv+0xf8>
 80007f6:	2300      	movs	r3, #0
 80007f8:	00ea      	lsls	r2, r5, #3
 80007fa:	2580      	movs	r5, #128	; 0x80
 80007fc:	4699      	mov	r9, r3
 80007fe:	469a      	mov	sl, r3
 8000800:	04ed      	lsls	r5, r5, #19
 8000802:	4315      	orrs	r5, r2
 8000804:	3f7f      	subs	r7, #127	; 0x7f
 8000806:	0260      	lsls	r0, r4, #9
 8000808:	0061      	lsls	r1, r4, #1
 800080a:	0a43      	lsrs	r3, r0, #9
 800080c:	4698      	mov	r8, r3
 800080e:	0e09      	lsrs	r1, r1, #24
 8000810:	0fe4      	lsrs	r4, r4, #31
 8000812:	2900      	cmp	r1, #0
 8000814:	d048      	beq.n	80008a8 <__aeabi_fdiv+0xd0>
 8000816:	29ff      	cmp	r1, #255	; 0xff
 8000818:	d010      	beq.n	800083c <__aeabi_fdiv+0x64>
 800081a:	2280      	movs	r2, #128	; 0x80
 800081c:	00d8      	lsls	r0, r3, #3
 800081e:	04d2      	lsls	r2, r2, #19
 8000820:	4302      	orrs	r2, r0
 8000822:	4690      	mov	r8, r2
 8000824:	2000      	movs	r0, #0
 8000826:	397f      	subs	r1, #127	; 0x7f
 8000828:	464a      	mov	r2, r9
 800082a:	0033      	movs	r3, r6
 800082c:	1a7f      	subs	r7, r7, r1
 800082e:	4302      	orrs	r2, r0
 8000830:	496c      	ldr	r1, [pc, #432]	; (80009e4 <__aeabi_fdiv+0x20c>)
 8000832:	0092      	lsls	r2, r2, #2
 8000834:	588a      	ldr	r2, [r1, r2]
 8000836:	4063      	eors	r3, r4
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4697      	mov	pc, r2
 800083c:	2b00      	cmp	r3, #0
 800083e:	d16d      	bne.n	800091c <__aeabi_fdiv+0x144>
 8000840:	2002      	movs	r0, #2
 8000842:	3fff      	subs	r7, #255	; 0xff
 8000844:	e033      	b.n	80008ae <__aeabi_fdiv+0xd6>
 8000846:	2300      	movs	r3, #0
 8000848:	4698      	mov	r8, r3
 800084a:	0026      	movs	r6, r4
 800084c:	4645      	mov	r5, r8
 800084e:	4682      	mov	sl, r0
 8000850:	4653      	mov	r3, sl
 8000852:	2b02      	cmp	r3, #2
 8000854:	d100      	bne.n	8000858 <__aeabi_fdiv+0x80>
 8000856:	e07f      	b.n	8000958 <__aeabi_fdiv+0x180>
 8000858:	2b03      	cmp	r3, #3
 800085a:	d100      	bne.n	800085e <__aeabi_fdiv+0x86>
 800085c:	e094      	b.n	8000988 <__aeabi_fdiv+0x1b0>
 800085e:	2b01      	cmp	r3, #1
 8000860:	d017      	beq.n	8000892 <__aeabi_fdiv+0xba>
 8000862:	0038      	movs	r0, r7
 8000864:	307f      	adds	r0, #127	; 0x7f
 8000866:	2800      	cmp	r0, #0
 8000868:	dd5f      	ble.n	800092a <__aeabi_fdiv+0x152>
 800086a:	076b      	lsls	r3, r5, #29
 800086c:	d004      	beq.n	8000878 <__aeabi_fdiv+0xa0>
 800086e:	230f      	movs	r3, #15
 8000870:	402b      	ands	r3, r5
 8000872:	2b04      	cmp	r3, #4
 8000874:	d000      	beq.n	8000878 <__aeabi_fdiv+0xa0>
 8000876:	3504      	adds	r5, #4
 8000878:	012b      	lsls	r3, r5, #4
 800087a:	d503      	bpl.n	8000884 <__aeabi_fdiv+0xac>
 800087c:	0038      	movs	r0, r7
 800087e:	4b5a      	ldr	r3, [pc, #360]	; (80009e8 <__aeabi_fdiv+0x210>)
 8000880:	3080      	adds	r0, #128	; 0x80
 8000882:	401d      	ands	r5, r3
 8000884:	28fe      	cmp	r0, #254	; 0xfe
 8000886:	dc67      	bgt.n	8000958 <__aeabi_fdiv+0x180>
 8000888:	01ad      	lsls	r5, r5, #6
 800088a:	0a6d      	lsrs	r5, r5, #9
 800088c:	b2c0      	uxtb	r0, r0
 800088e:	e002      	b.n	8000896 <__aeabi_fdiv+0xbe>
 8000890:	001e      	movs	r6, r3
 8000892:	2000      	movs	r0, #0
 8000894:	2500      	movs	r5, #0
 8000896:	05c0      	lsls	r0, r0, #23
 8000898:	4328      	orrs	r0, r5
 800089a:	07f6      	lsls	r6, r6, #31
 800089c:	4330      	orrs	r0, r6
 800089e:	bce0      	pop	{r5, r6, r7}
 80008a0:	46ba      	mov	sl, r7
 80008a2:	46b1      	mov	r9, r6
 80008a4:	46a8      	mov	r8, r5
 80008a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d12b      	bne.n	8000904 <__aeabi_fdiv+0x12c>
 80008ac:	2001      	movs	r0, #1
 80008ae:	464a      	mov	r2, r9
 80008b0:	0033      	movs	r3, r6
 80008b2:	494e      	ldr	r1, [pc, #312]	; (80009ec <__aeabi_fdiv+0x214>)
 80008b4:	4302      	orrs	r2, r0
 80008b6:	0092      	lsls	r2, r2, #2
 80008b8:	588a      	ldr	r2, [r1, r2]
 80008ba:	4063      	eors	r3, r4
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	4697      	mov	pc, r2
 80008c0:	2d00      	cmp	r5, #0
 80008c2:	d113      	bne.n	80008ec <__aeabi_fdiv+0x114>
 80008c4:	2304      	movs	r3, #4
 80008c6:	4699      	mov	r9, r3
 80008c8:	3b03      	subs	r3, #3
 80008ca:	2700      	movs	r7, #0
 80008cc:	469a      	mov	sl, r3
 80008ce:	e79a      	b.n	8000806 <__aeabi_fdiv+0x2e>
 80008d0:	2d00      	cmp	r5, #0
 80008d2:	d105      	bne.n	80008e0 <__aeabi_fdiv+0x108>
 80008d4:	2308      	movs	r3, #8
 80008d6:	4699      	mov	r9, r3
 80008d8:	3b06      	subs	r3, #6
 80008da:	27ff      	movs	r7, #255	; 0xff
 80008dc:	469a      	mov	sl, r3
 80008de:	e792      	b.n	8000806 <__aeabi_fdiv+0x2e>
 80008e0:	230c      	movs	r3, #12
 80008e2:	4699      	mov	r9, r3
 80008e4:	3b09      	subs	r3, #9
 80008e6:	27ff      	movs	r7, #255	; 0xff
 80008e8:	469a      	mov	sl, r3
 80008ea:	e78c      	b.n	8000806 <__aeabi_fdiv+0x2e>
 80008ec:	0028      	movs	r0, r5
 80008ee:	f002 f817 	bl	8002920 <__clzsi2>
 80008f2:	2776      	movs	r7, #118	; 0x76
 80008f4:	1f43      	subs	r3, r0, #5
 80008f6:	409d      	lsls	r5, r3
 80008f8:	2300      	movs	r3, #0
 80008fa:	427f      	negs	r7, r7
 80008fc:	4699      	mov	r9, r3
 80008fe:	469a      	mov	sl, r3
 8000900:	1a3f      	subs	r7, r7, r0
 8000902:	e780      	b.n	8000806 <__aeabi_fdiv+0x2e>
 8000904:	0018      	movs	r0, r3
 8000906:	f002 f80b 	bl	8002920 <__clzsi2>
 800090a:	4642      	mov	r2, r8
 800090c:	1f43      	subs	r3, r0, #5
 800090e:	2176      	movs	r1, #118	; 0x76
 8000910:	409a      	lsls	r2, r3
 8000912:	4249      	negs	r1, r1
 8000914:	1a09      	subs	r1, r1, r0
 8000916:	4690      	mov	r8, r2
 8000918:	2000      	movs	r0, #0
 800091a:	e785      	b.n	8000828 <__aeabi_fdiv+0x50>
 800091c:	21ff      	movs	r1, #255	; 0xff
 800091e:	2003      	movs	r0, #3
 8000920:	e782      	b.n	8000828 <__aeabi_fdiv+0x50>
 8000922:	001e      	movs	r6, r3
 8000924:	20ff      	movs	r0, #255	; 0xff
 8000926:	2500      	movs	r5, #0
 8000928:	e7b5      	b.n	8000896 <__aeabi_fdiv+0xbe>
 800092a:	2301      	movs	r3, #1
 800092c:	1a1b      	subs	r3, r3, r0
 800092e:	2b1b      	cmp	r3, #27
 8000930:	dcaf      	bgt.n	8000892 <__aeabi_fdiv+0xba>
 8000932:	379e      	adds	r7, #158	; 0x9e
 8000934:	0029      	movs	r1, r5
 8000936:	40bd      	lsls	r5, r7
 8000938:	40d9      	lsrs	r1, r3
 800093a:	1e6a      	subs	r2, r5, #1
 800093c:	4195      	sbcs	r5, r2
 800093e:	430d      	orrs	r5, r1
 8000940:	076b      	lsls	r3, r5, #29
 8000942:	d004      	beq.n	800094e <__aeabi_fdiv+0x176>
 8000944:	230f      	movs	r3, #15
 8000946:	402b      	ands	r3, r5
 8000948:	2b04      	cmp	r3, #4
 800094a:	d000      	beq.n	800094e <__aeabi_fdiv+0x176>
 800094c:	3504      	adds	r5, #4
 800094e:	016b      	lsls	r3, r5, #5
 8000950:	d544      	bpl.n	80009dc <__aeabi_fdiv+0x204>
 8000952:	2001      	movs	r0, #1
 8000954:	2500      	movs	r5, #0
 8000956:	e79e      	b.n	8000896 <__aeabi_fdiv+0xbe>
 8000958:	20ff      	movs	r0, #255	; 0xff
 800095a:	2500      	movs	r5, #0
 800095c:	e79b      	b.n	8000896 <__aeabi_fdiv+0xbe>
 800095e:	2580      	movs	r5, #128	; 0x80
 8000960:	2600      	movs	r6, #0
 8000962:	20ff      	movs	r0, #255	; 0xff
 8000964:	03ed      	lsls	r5, r5, #15
 8000966:	e796      	b.n	8000896 <__aeabi_fdiv+0xbe>
 8000968:	2300      	movs	r3, #0
 800096a:	4698      	mov	r8, r3
 800096c:	2080      	movs	r0, #128	; 0x80
 800096e:	03c0      	lsls	r0, r0, #15
 8000970:	4205      	tst	r5, r0
 8000972:	d009      	beq.n	8000988 <__aeabi_fdiv+0x1b0>
 8000974:	4643      	mov	r3, r8
 8000976:	4203      	tst	r3, r0
 8000978:	d106      	bne.n	8000988 <__aeabi_fdiv+0x1b0>
 800097a:	4645      	mov	r5, r8
 800097c:	4305      	orrs	r5, r0
 800097e:	026d      	lsls	r5, r5, #9
 8000980:	0026      	movs	r6, r4
 8000982:	20ff      	movs	r0, #255	; 0xff
 8000984:	0a6d      	lsrs	r5, r5, #9
 8000986:	e786      	b.n	8000896 <__aeabi_fdiv+0xbe>
 8000988:	2080      	movs	r0, #128	; 0x80
 800098a:	03c0      	lsls	r0, r0, #15
 800098c:	4305      	orrs	r5, r0
 800098e:	026d      	lsls	r5, r5, #9
 8000990:	20ff      	movs	r0, #255	; 0xff
 8000992:	0a6d      	lsrs	r5, r5, #9
 8000994:	e77f      	b.n	8000896 <__aeabi_fdiv+0xbe>
 8000996:	4641      	mov	r1, r8
 8000998:	016a      	lsls	r2, r5, #5
 800099a:	0148      	lsls	r0, r1, #5
 800099c:	4282      	cmp	r2, r0
 800099e:	d219      	bcs.n	80009d4 <__aeabi_fdiv+0x1fc>
 80009a0:	211b      	movs	r1, #27
 80009a2:	2500      	movs	r5, #0
 80009a4:	3f01      	subs	r7, #1
 80009a6:	2601      	movs	r6, #1
 80009a8:	0014      	movs	r4, r2
 80009aa:	006d      	lsls	r5, r5, #1
 80009ac:	0052      	lsls	r2, r2, #1
 80009ae:	2c00      	cmp	r4, #0
 80009b0:	db01      	blt.n	80009b6 <__aeabi_fdiv+0x1de>
 80009b2:	4290      	cmp	r0, r2
 80009b4:	d801      	bhi.n	80009ba <__aeabi_fdiv+0x1e2>
 80009b6:	1a12      	subs	r2, r2, r0
 80009b8:	4335      	orrs	r5, r6
 80009ba:	3901      	subs	r1, #1
 80009bc:	2900      	cmp	r1, #0
 80009be:	d1f3      	bne.n	80009a8 <__aeabi_fdiv+0x1d0>
 80009c0:	1e50      	subs	r0, r2, #1
 80009c2:	4182      	sbcs	r2, r0
 80009c4:	0038      	movs	r0, r7
 80009c6:	307f      	adds	r0, #127	; 0x7f
 80009c8:	001e      	movs	r6, r3
 80009ca:	4315      	orrs	r5, r2
 80009cc:	2800      	cmp	r0, #0
 80009ce:	dd00      	ble.n	80009d2 <__aeabi_fdiv+0x1fa>
 80009d0:	e74b      	b.n	800086a <__aeabi_fdiv+0x92>
 80009d2:	e7aa      	b.n	800092a <__aeabi_fdiv+0x152>
 80009d4:	211a      	movs	r1, #26
 80009d6:	2501      	movs	r5, #1
 80009d8:	1a12      	subs	r2, r2, r0
 80009da:	e7e4      	b.n	80009a6 <__aeabi_fdiv+0x1ce>
 80009dc:	01ad      	lsls	r5, r5, #6
 80009de:	2000      	movs	r0, #0
 80009e0:	0a6d      	lsrs	r5, r5, #9
 80009e2:	e758      	b.n	8000896 <__aeabi_fdiv+0xbe>
 80009e4:	08008460 	.word	0x08008460
 80009e8:	f7ffffff 	.word	0xf7ffffff
 80009ec:	080084a0 	.word	0x080084a0

080009f0 <__aeabi_fmul>:
 80009f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009f2:	4657      	mov	r7, sl
 80009f4:	464e      	mov	r6, r9
 80009f6:	4645      	mov	r5, r8
 80009f8:	46de      	mov	lr, fp
 80009fa:	0244      	lsls	r4, r0, #9
 80009fc:	b5e0      	push	{r5, r6, r7, lr}
 80009fe:	0045      	lsls	r5, r0, #1
 8000a00:	1c0f      	adds	r7, r1, #0
 8000a02:	0a64      	lsrs	r4, r4, #9
 8000a04:	0e2d      	lsrs	r5, r5, #24
 8000a06:	0fc6      	lsrs	r6, r0, #31
 8000a08:	2d00      	cmp	r5, #0
 8000a0a:	d047      	beq.n	8000a9c <__aeabi_fmul+0xac>
 8000a0c:	2dff      	cmp	r5, #255	; 0xff
 8000a0e:	d04d      	beq.n	8000aac <__aeabi_fmul+0xbc>
 8000a10:	2300      	movs	r3, #0
 8000a12:	2080      	movs	r0, #128	; 0x80
 8000a14:	469a      	mov	sl, r3
 8000a16:	469b      	mov	fp, r3
 8000a18:	00e4      	lsls	r4, r4, #3
 8000a1a:	04c0      	lsls	r0, r0, #19
 8000a1c:	4304      	orrs	r4, r0
 8000a1e:	3d7f      	subs	r5, #127	; 0x7f
 8000a20:	0278      	lsls	r0, r7, #9
 8000a22:	0a43      	lsrs	r3, r0, #9
 8000a24:	4699      	mov	r9, r3
 8000a26:	007a      	lsls	r2, r7, #1
 8000a28:	0ffb      	lsrs	r3, r7, #31
 8000a2a:	4698      	mov	r8, r3
 8000a2c:	0e12      	lsrs	r2, r2, #24
 8000a2e:	464b      	mov	r3, r9
 8000a30:	d044      	beq.n	8000abc <__aeabi_fmul+0xcc>
 8000a32:	2aff      	cmp	r2, #255	; 0xff
 8000a34:	d011      	beq.n	8000a5a <__aeabi_fmul+0x6a>
 8000a36:	00d8      	lsls	r0, r3, #3
 8000a38:	2380      	movs	r3, #128	; 0x80
 8000a3a:	04db      	lsls	r3, r3, #19
 8000a3c:	4303      	orrs	r3, r0
 8000a3e:	4699      	mov	r9, r3
 8000a40:	2000      	movs	r0, #0
 8000a42:	3a7f      	subs	r2, #127	; 0x7f
 8000a44:	18ad      	adds	r5, r5, r2
 8000a46:	4647      	mov	r7, r8
 8000a48:	4653      	mov	r3, sl
 8000a4a:	4077      	eors	r7, r6
 8000a4c:	1c69      	adds	r1, r5, #1
 8000a4e:	2b0f      	cmp	r3, #15
 8000a50:	d83f      	bhi.n	8000ad2 <__aeabi_fmul+0xe2>
 8000a52:	4a72      	ldr	r2, [pc, #456]	; (8000c1c <__aeabi_fmul+0x22c>)
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	58d3      	ldr	r3, [r2, r3]
 8000a58:	469f      	mov	pc, r3
 8000a5a:	35ff      	adds	r5, #255	; 0xff
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d000      	beq.n	8000a62 <__aeabi_fmul+0x72>
 8000a60:	e079      	b.n	8000b56 <__aeabi_fmul+0x166>
 8000a62:	4652      	mov	r2, sl
 8000a64:	2302      	movs	r3, #2
 8000a66:	431a      	orrs	r2, r3
 8000a68:	4692      	mov	sl, r2
 8000a6a:	2002      	movs	r0, #2
 8000a6c:	e7eb      	b.n	8000a46 <__aeabi_fmul+0x56>
 8000a6e:	4647      	mov	r7, r8
 8000a70:	464c      	mov	r4, r9
 8000a72:	4683      	mov	fp, r0
 8000a74:	465b      	mov	r3, fp
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d028      	beq.n	8000acc <__aeabi_fmul+0xdc>
 8000a7a:	2b03      	cmp	r3, #3
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_fmul+0x90>
 8000a7e:	e0c6      	b.n	8000c0e <__aeabi_fmul+0x21e>
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d14f      	bne.n	8000b24 <__aeabi_fmul+0x134>
 8000a84:	2000      	movs	r0, #0
 8000a86:	2400      	movs	r4, #0
 8000a88:	05c0      	lsls	r0, r0, #23
 8000a8a:	07ff      	lsls	r7, r7, #31
 8000a8c:	4320      	orrs	r0, r4
 8000a8e:	4338      	orrs	r0, r7
 8000a90:	bcf0      	pop	{r4, r5, r6, r7}
 8000a92:	46bb      	mov	fp, r7
 8000a94:	46b2      	mov	sl, r6
 8000a96:	46a9      	mov	r9, r5
 8000a98:	46a0      	mov	r8, r4
 8000a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a9c:	2c00      	cmp	r4, #0
 8000a9e:	d171      	bne.n	8000b84 <__aeabi_fmul+0x194>
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	469a      	mov	sl, r3
 8000aa4:	3b03      	subs	r3, #3
 8000aa6:	2500      	movs	r5, #0
 8000aa8:	469b      	mov	fp, r3
 8000aaa:	e7b9      	b.n	8000a20 <__aeabi_fmul+0x30>
 8000aac:	2c00      	cmp	r4, #0
 8000aae:	d163      	bne.n	8000b78 <__aeabi_fmul+0x188>
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	469a      	mov	sl, r3
 8000ab4:	3b06      	subs	r3, #6
 8000ab6:	25ff      	movs	r5, #255	; 0xff
 8000ab8:	469b      	mov	fp, r3
 8000aba:	e7b1      	b.n	8000a20 <__aeabi_fmul+0x30>
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d150      	bne.n	8000b62 <__aeabi_fmul+0x172>
 8000ac0:	4652      	mov	r2, sl
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	4692      	mov	sl, r2
 8000ac8:	2001      	movs	r0, #1
 8000aca:	e7bc      	b.n	8000a46 <__aeabi_fmul+0x56>
 8000acc:	20ff      	movs	r0, #255	; 0xff
 8000ace:	2400      	movs	r4, #0
 8000ad0:	e7da      	b.n	8000a88 <__aeabi_fmul+0x98>
 8000ad2:	4648      	mov	r0, r9
 8000ad4:	0c26      	lsrs	r6, r4, #16
 8000ad6:	0424      	lsls	r4, r4, #16
 8000ad8:	0c22      	lsrs	r2, r4, #16
 8000ada:	0404      	lsls	r4, r0, #16
 8000adc:	0c24      	lsrs	r4, r4, #16
 8000ade:	464b      	mov	r3, r9
 8000ae0:	0020      	movs	r0, r4
 8000ae2:	0c1b      	lsrs	r3, r3, #16
 8000ae4:	4350      	muls	r0, r2
 8000ae6:	4374      	muls	r4, r6
 8000ae8:	435a      	muls	r2, r3
 8000aea:	435e      	muls	r6, r3
 8000aec:	1912      	adds	r2, r2, r4
 8000aee:	0c03      	lsrs	r3, r0, #16
 8000af0:	189b      	adds	r3, r3, r2
 8000af2:	429c      	cmp	r4, r3
 8000af4:	d903      	bls.n	8000afe <__aeabi_fmul+0x10e>
 8000af6:	2280      	movs	r2, #128	; 0x80
 8000af8:	0252      	lsls	r2, r2, #9
 8000afa:	4694      	mov	ip, r2
 8000afc:	4466      	add	r6, ip
 8000afe:	0400      	lsls	r0, r0, #16
 8000b00:	041a      	lsls	r2, r3, #16
 8000b02:	0c00      	lsrs	r0, r0, #16
 8000b04:	1812      	adds	r2, r2, r0
 8000b06:	0194      	lsls	r4, r2, #6
 8000b08:	1e60      	subs	r0, r4, #1
 8000b0a:	4184      	sbcs	r4, r0
 8000b0c:	0c1b      	lsrs	r3, r3, #16
 8000b0e:	0e92      	lsrs	r2, r2, #26
 8000b10:	199b      	adds	r3, r3, r6
 8000b12:	4314      	orrs	r4, r2
 8000b14:	019b      	lsls	r3, r3, #6
 8000b16:	431c      	orrs	r4, r3
 8000b18:	011b      	lsls	r3, r3, #4
 8000b1a:	d572      	bpl.n	8000c02 <__aeabi_fmul+0x212>
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	0863      	lsrs	r3, r4, #1
 8000b20:	4004      	ands	r4, r0
 8000b22:	431c      	orrs	r4, r3
 8000b24:	0008      	movs	r0, r1
 8000b26:	307f      	adds	r0, #127	; 0x7f
 8000b28:	2800      	cmp	r0, #0
 8000b2a:	dd3c      	ble.n	8000ba6 <__aeabi_fmul+0x1b6>
 8000b2c:	0763      	lsls	r3, r4, #29
 8000b2e:	d004      	beq.n	8000b3a <__aeabi_fmul+0x14a>
 8000b30:	230f      	movs	r3, #15
 8000b32:	4023      	ands	r3, r4
 8000b34:	2b04      	cmp	r3, #4
 8000b36:	d000      	beq.n	8000b3a <__aeabi_fmul+0x14a>
 8000b38:	3404      	adds	r4, #4
 8000b3a:	0123      	lsls	r3, r4, #4
 8000b3c:	d503      	bpl.n	8000b46 <__aeabi_fmul+0x156>
 8000b3e:	3180      	adds	r1, #128	; 0x80
 8000b40:	0008      	movs	r0, r1
 8000b42:	4b37      	ldr	r3, [pc, #220]	; (8000c20 <__aeabi_fmul+0x230>)
 8000b44:	401c      	ands	r4, r3
 8000b46:	28fe      	cmp	r0, #254	; 0xfe
 8000b48:	dcc0      	bgt.n	8000acc <__aeabi_fmul+0xdc>
 8000b4a:	01a4      	lsls	r4, r4, #6
 8000b4c:	0a64      	lsrs	r4, r4, #9
 8000b4e:	b2c0      	uxtb	r0, r0
 8000b50:	e79a      	b.n	8000a88 <__aeabi_fmul+0x98>
 8000b52:	0037      	movs	r7, r6
 8000b54:	e78e      	b.n	8000a74 <__aeabi_fmul+0x84>
 8000b56:	4652      	mov	r2, sl
 8000b58:	2303      	movs	r3, #3
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	4692      	mov	sl, r2
 8000b5e:	2003      	movs	r0, #3
 8000b60:	e771      	b.n	8000a46 <__aeabi_fmul+0x56>
 8000b62:	4648      	mov	r0, r9
 8000b64:	f001 fedc 	bl	8002920 <__clzsi2>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1f43      	subs	r3, r0, #5
 8000b6c:	409a      	lsls	r2, r3
 8000b6e:	1a2d      	subs	r5, r5, r0
 8000b70:	4691      	mov	r9, r2
 8000b72:	2000      	movs	r0, #0
 8000b74:	3d76      	subs	r5, #118	; 0x76
 8000b76:	e766      	b.n	8000a46 <__aeabi_fmul+0x56>
 8000b78:	230c      	movs	r3, #12
 8000b7a:	469a      	mov	sl, r3
 8000b7c:	3b09      	subs	r3, #9
 8000b7e:	25ff      	movs	r5, #255	; 0xff
 8000b80:	469b      	mov	fp, r3
 8000b82:	e74d      	b.n	8000a20 <__aeabi_fmul+0x30>
 8000b84:	0020      	movs	r0, r4
 8000b86:	f001 fecb 	bl	8002920 <__clzsi2>
 8000b8a:	2576      	movs	r5, #118	; 0x76
 8000b8c:	1f43      	subs	r3, r0, #5
 8000b8e:	409c      	lsls	r4, r3
 8000b90:	2300      	movs	r3, #0
 8000b92:	426d      	negs	r5, r5
 8000b94:	469a      	mov	sl, r3
 8000b96:	469b      	mov	fp, r3
 8000b98:	1a2d      	subs	r5, r5, r0
 8000b9a:	e741      	b.n	8000a20 <__aeabi_fmul+0x30>
 8000b9c:	2480      	movs	r4, #128	; 0x80
 8000b9e:	2700      	movs	r7, #0
 8000ba0:	20ff      	movs	r0, #255	; 0xff
 8000ba2:	03e4      	lsls	r4, r4, #15
 8000ba4:	e770      	b.n	8000a88 <__aeabi_fmul+0x98>
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	1a1b      	subs	r3, r3, r0
 8000baa:	2b1b      	cmp	r3, #27
 8000bac:	dd00      	ble.n	8000bb0 <__aeabi_fmul+0x1c0>
 8000bae:	e769      	b.n	8000a84 <__aeabi_fmul+0x94>
 8000bb0:	319e      	adds	r1, #158	; 0x9e
 8000bb2:	0020      	movs	r0, r4
 8000bb4:	408c      	lsls	r4, r1
 8000bb6:	40d8      	lsrs	r0, r3
 8000bb8:	1e63      	subs	r3, r4, #1
 8000bba:	419c      	sbcs	r4, r3
 8000bbc:	4304      	orrs	r4, r0
 8000bbe:	0763      	lsls	r3, r4, #29
 8000bc0:	d004      	beq.n	8000bcc <__aeabi_fmul+0x1dc>
 8000bc2:	230f      	movs	r3, #15
 8000bc4:	4023      	ands	r3, r4
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	d000      	beq.n	8000bcc <__aeabi_fmul+0x1dc>
 8000bca:	3404      	adds	r4, #4
 8000bcc:	0163      	lsls	r3, r4, #5
 8000bce:	d51a      	bpl.n	8000c06 <__aeabi_fmul+0x216>
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	2400      	movs	r4, #0
 8000bd4:	e758      	b.n	8000a88 <__aeabi_fmul+0x98>
 8000bd6:	2080      	movs	r0, #128	; 0x80
 8000bd8:	03c0      	lsls	r0, r0, #15
 8000bda:	4204      	tst	r4, r0
 8000bdc:	d009      	beq.n	8000bf2 <__aeabi_fmul+0x202>
 8000bde:	464b      	mov	r3, r9
 8000be0:	4203      	tst	r3, r0
 8000be2:	d106      	bne.n	8000bf2 <__aeabi_fmul+0x202>
 8000be4:	464c      	mov	r4, r9
 8000be6:	4304      	orrs	r4, r0
 8000be8:	0264      	lsls	r4, r4, #9
 8000bea:	4647      	mov	r7, r8
 8000bec:	20ff      	movs	r0, #255	; 0xff
 8000bee:	0a64      	lsrs	r4, r4, #9
 8000bf0:	e74a      	b.n	8000a88 <__aeabi_fmul+0x98>
 8000bf2:	2080      	movs	r0, #128	; 0x80
 8000bf4:	03c0      	lsls	r0, r0, #15
 8000bf6:	4304      	orrs	r4, r0
 8000bf8:	0264      	lsls	r4, r4, #9
 8000bfa:	0037      	movs	r7, r6
 8000bfc:	20ff      	movs	r0, #255	; 0xff
 8000bfe:	0a64      	lsrs	r4, r4, #9
 8000c00:	e742      	b.n	8000a88 <__aeabi_fmul+0x98>
 8000c02:	0029      	movs	r1, r5
 8000c04:	e78e      	b.n	8000b24 <__aeabi_fmul+0x134>
 8000c06:	01a4      	lsls	r4, r4, #6
 8000c08:	2000      	movs	r0, #0
 8000c0a:	0a64      	lsrs	r4, r4, #9
 8000c0c:	e73c      	b.n	8000a88 <__aeabi_fmul+0x98>
 8000c0e:	2080      	movs	r0, #128	; 0x80
 8000c10:	03c0      	lsls	r0, r0, #15
 8000c12:	4304      	orrs	r4, r0
 8000c14:	0264      	lsls	r4, r4, #9
 8000c16:	20ff      	movs	r0, #255	; 0xff
 8000c18:	0a64      	lsrs	r4, r4, #9
 8000c1a:	e735      	b.n	8000a88 <__aeabi_fmul+0x98>
 8000c1c:	080084e0 	.word	0x080084e0
 8000c20:	f7ffffff 	.word	0xf7ffffff

08000c24 <__aeabi_f2iz>:
 8000c24:	0241      	lsls	r1, r0, #9
 8000c26:	0042      	lsls	r2, r0, #1
 8000c28:	0fc3      	lsrs	r3, r0, #31
 8000c2a:	0a49      	lsrs	r1, r1, #9
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	0e12      	lsrs	r2, r2, #24
 8000c30:	2a7e      	cmp	r2, #126	; 0x7e
 8000c32:	d903      	bls.n	8000c3c <__aeabi_f2iz+0x18>
 8000c34:	2a9d      	cmp	r2, #157	; 0x9d
 8000c36:	d902      	bls.n	8000c3e <__aeabi_f2iz+0x1a>
 8000c38:	4a09      	ldr	r2, [pc, #36]	; (8000c60 <__aeabi_f2iz+0x3c>)
 8000c3a:	1898      	adds	r0, r3, r2
 8000c3c:	4770      	bx	lr
 8000c3e:	2080      	movs	r0, #128	; 0x80
 8000c40:	0400      	lsls	r0, r0, #16
 8000c42:	4301      	orrs	r1, r0
 8000c44:	2a95      	cmp	r2, #149	; 0x95
 8000c46:	dc07      	bgt.n	8000c58 <__aeabi_f2iz+0x34>
 8000c48:	2096      	movs	r0, #150	; 0x96
 8000c4a:	1a82      	subs	r2, r0, r2
 8000c4c:	40d1      	lsrs	r1, r2
 8000c4e:	4248      	negs	r0, r1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d1f3      	bne.n	8000c3c <__aeabi_f2iz+0x18>
 8000c54:	0008      	movs	r0, r1
 8000c56:	e7f1      	b.n	8000c3c <__aeabi_f2iz+0x18>
 8000c58:	3a96      	subs	r2, #150	; 0x96
 8000c5a:	4091      	lsls	r1, r2
 8000c5c:	e7f7      	b.n	8000c4e <__aeabi_f2iz+0x2a>
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	7fffffff 	.word	0x7fffffff

08000c64 <__aeabi_i2f>:
 8000c64:	b570      	push	{r4, r5, r6, lr}
 8000c66:	2800      	cmp	r0, #0
 8000c68:	d013      	beq.n	8000c92 <__aeabi_i2f+0x2e>
 8000c6a:	17c3      	asrs	r3, r0, #31
 8000c6c:	18c5      	adds	r5, r0, r3
 8000c6e:	405d      	eors	r5, r3
 8000c70:	0fc4      	lsrs	r4, r0, #31
 8000c72:	0028      	movs	r0, r5
 8000c74:	f001 fe54 	bl	8002920 <__clzsi2>
 8000c78:	239e      	movs	r3, #158	; 0x9e
 8000c7a:	0001      	movs	r1, r0
 8000c7c:	1a1b      	subs	r3, r3, r0
 8000c7e:	2b96      	cmp	r3, #150	; 0x96
 8000c80:	dc0f      	bgt.n	8000ca2 <__aeabi_i2f+0x3e>
 8000c82:	2808      	cmp	r0, #8
 8000c84:	dd01      	ble.n	8000c8a <__aeabi_i2f+0x26>
 8000c86:	3908      	subs	r1, #8
 8000c88:	408d      	lsls	r5, r1
 8000c8a:	026d      	lsls	r5, r5, #9
 8000c8c:	0a6d      	lsrs	r5, r5, #9
 8000c8e:	b2d8      	uxtb	r0, r3
 8000c90:	e002      	b.n	8000c98 <__aeabi_i2f+0x34>
 8000c92:	2400      	movs	r4, #0
 8000c94:	2000      	movs	r0, #0
 8000c96:	2500      	movs	r5, #0
 8000c98:	05c0      	lsls	r0, r0, #23
 8000c9a:	4328      	orrs	r0, r5
 8000c9c:	07e4      	lsls	r4, r4, #31
 8000c9e:	4320      	orrs	r0, r4
 8000ca0:	bd70      	pop	{r4, r5, r6, pc}
 8000ca2:	2b99      	cmp	r3, #153	; 0x99
 8000ca4:	dd0b      	ble.n	8000cbe <__aeabi_i2f+0x5a>
 8000ca6:	2205      	movs	r2, #5
 8000ca8:	002e      	movs	r6, r5
 8000caa:	1a12      	subs	r2, r2, r0
 8000cac:	40d6      	lsrs	r6, r2
 8000cae:	0002      	movs	r2, r0
 8000cb0:	321b      	adds	r2, #27
 8000cb2:	4095      	lsls	r5, r2
 8000cb4:	0028      	movs	r0, r5
 8000cb6:	1e45      	subs	r5, r0, #1
 8000cb8:	41a8      	sbcs	r0, r5
 8000cba:	0035      	movs	r5, r6
 8000cbc:	4305      	orrs	r5, r0
 8000cbe:	2905      	cmp	r1, #5
 8000cc0:	dd01      	ble.n	8000cc6 <__aeabi_i2f+0x62>
 8000cc2:	1f4a      	subs	r2, r1, #5
 8000cc4:	4095      	lsls	r5, r2
 8000cc6:	002a      	movs	r2, r5
 8000cc8:	4e08      	ldr	r6, [pc, #32]	; (8000cec <__aeabi_i2f+0x88>)
 8000cca:	4032      	ands	r2, r6
 8000ccc:	0768      	lsls	r0, r5, #29
 8000cce:	d009      	beq.n	8000ce4 <__aeabi_i2f+0x80>
 8000cd0:	200f      	movs	r0, #15
 8000cd2:	4028      	ands	r0, r5
 8000cd4:	2804      	cmp	r0, #4
 8000cd6:	d005      	beq.n	8000ce4 <__aeabi_i2f+0x80>
 8000cd8:	3204      	adds	r2, #4
 8000cda:	0150      	lsls	r0, r2, #5
 8000cdc:	d502      	bpl.n	8000ce4 <__aeabi_i2f+0x80>
 8000cde:	239f      	movs	r3, #159	; 0x9f
 8000ce0:	4032      	ands	r2, r6
 8000ce2:	1a5b      	subs	r3, r3, r1
 8000ce4:	0192      	lsls	r2, r2, #6
 8000ce6:	0a55      	lsrs	r5, r2, #9
 8000ce8:	b2d8      	uxtb	r0, r3
 8000cea:	e7d5      	b.n	8000c98 <__aeabi_i2f+0x34>
 8000cec:	fbffffff 	.word	0xfbffffff

08000cf0 <__aeabi_dadd>:
 8000cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cf2:	464f      	mov	r7, r9
 8000cf4:	46d6      	mov	lr, sl
 8000cf6:	4646      	mov	r6, r8
 8000cf8:	000d      	movs	r5, r1
 8000cfa:	0001      	movs	r1, r0
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	b5c0      	push	{r6, r7, lr}
 8000d00:	0017      	movs	r7, r2
 8000d02:	032b      	lsls	r3, r5, #12
 8000d04:	0a5a      	lsrs	r2, r3, #9
 8000d06:	0f4b      	lsrs	r3, r1, #29
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	00ca      	lsls	r2, r1, #3
 8000d0c:	4691      	mov	r9, r2
 8000d0e:	0302      	lsls	r2, r0, #12
 8000d10:	006e      	lsls	r6, r5, #1
 8000d12:	0041      	lsls	r1, r0, #1
 8000d14:	0a52      	lsrs	r2, r2, #9
 8000d16:	0fec      	lsrs	r4, r5, #31
 8000d18:	0f7d      	lsrs	r5, r7, #29
 8000d1a:	4315      	orrs	r5, r2
 8000d1c:	0d76      	lsrs	r6, r6, #21
 8000d1e:	0d49      	lsrs	r1, r1, #21
 8000d20:	0fc0      	lsrs	r0, r0, #31
 8000d22:	4682      	mov	sl, r0
 8000d24:	46ac      	mov	ip, r5
 8000d26:	00ff      	lsls	r7, r7, #3
 8000d28:	1a72      	subs	r2, r6, r1
 8000d2a:	4284      	cmp	r4, r0
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_dadd+0x40>
 8000d2e:	e098      	b.n	8000e62 <__aeabi_dadd+0x172>
 8000d30:	2a00      	cmp	r2, #0
 8000d32:	dc00      	bgt.n	8000d36 <__aeabi_dadd+0x46>
 8000d34:	e081      	b.n	8000e3a <__aeabi_dadd+0x14a>
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d100      	bne.n	8000d3c <__aeabi_dadd+0x4c>
 8000d3a:	e0b6      	b.n	8000eaa <__aeabi_dadd+0x1ba>
 8000d3c:	49c9      	ldr	r1, [pc, #804]	; (8001064 <__aeabi_dadd+0x374>)
 8000d3e:	428e      	cmp	r6, r1
 8000d40:	d100      	bne.n	8000d44 <__aeabi_dadd+0x54>
 8000d42:	e172      	b.n	800102a <__aeabi_dadd+0x33a>
 8000d44:	2180      	movs	r1, #128	; 0x80
 8000d46:	0028      	movs	r0, r5
 8000d48:	0409      	lsls	r1, r1, #16
 8000d4a:	4308      	orrs	r0, r1
 8000d4c:	4684      	mov	ip, r0
 8000d4e:	2a38      	cmp	r2, #56	; 0x38
 8000d50:	dd00      	ble.n	8000d54 <__aeabi_dadd+0x64>
 8000d52:	e15e      	b.n	8001012 <__aeabi_dadd+0x322>
 8000d54:	2a1f      	cmp	r2, #31
 8000d56:	dd00      	ble.n	8000d5a <__aeabi_dadd+0x6a>
 8000d58:	e1ee      	b.n	8001138 <__aeabi_dadd+0x448>
 8000d5a:	2020      	movs	r0, #32
 8000d5c:	0039      	movs	r1, r7
 8000d5e:	4665      	mov	r5, ip
 8000d60:	1a80      	subs	r0, r0, r2
 8000d62:	4087      	lsls	r7, r0
 8000d64:	40d1      	lsrs	r1, r2
 8000d66:	4085      	lsls	r5, r0
 8000d68:	430d      	orrs	r5, r1
 8000d6a:	0039      	movs	r1, r7
 8000d6c:	1e4f      	subs	r7, r1, #1
 8000d6e:	41b9      	sbcs	r1, r7
 8000d70:	4667      	mov	r7, ip
 8000d72:	40d7      	lsrs	r7, r2
 8000d74:	4329      	orrs	r1, r5
 8000d76:	1bdb      	subs	r3, r3, r7
 8000d78:	464a      	mov	r2, r9
 8000d7a:	1a55      	subs	r5, r2, r1
 8000d7c:	45a9      	cmp	r9, r5
 8000d7e:	4189      	sbcs	r1, r1
 8000d80:	4249      	negs	r1, r1
 8000d82:	1a5b      	subs	r3, r3, r1
 8000d84:	4698      	mov	r8, r3
 8000d86:	4643      	mov	r3, r8
 8000d88:	021b      	lsls	r3, r3, #8
 8000d8a:	d400      	bmi.n	8000d8e <__aeabi_dadd+0x9e>
 8000d8c:	e0cc      	b.n	8000f28 <__aeabi_dadd+0x238>
 8000d8e:	4643      	mov	r3, r8
 8000d90:	025b      	lsls	r3, r3, #9
 8000d92:	0a5b      	lsrs	r3, r3, #9
 8000d94:	4698      	mov	r8, r3
 8000d96:	4643      	mov	r3, r8
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d100      	bne.n	8000d9e <__aeabi_dadd+0xae>
 8000d9c:	e12c      	b.n	8000ff8 <__aeabi_dadd+0x308>
 8000d9e:	4640      	mov	r0, r8
 8000da0:	f001 fdbe 	bl	8002920 <__clzsi2>
 8000da4:	0001      	movs	r1, r0
 8000da6:	3908      	subs	r1, #8
 8000da8:	2220      	movs	r2, #32
 8000daa:	0028      	movs	r0, r5
 8000dac:	4643      	mov	r3, r8
 8000dae:	1a52      	subs	r2, r2, r1
 8000db0:	408b      	lsls	r3, r1
 8000db2:	40d0      	lsrs	r0, r2
 8000db4:	408d      	lsls	r5, r1
 8000db6:	4303      	orrs	r3, r0
 8000db8:	428e      	cmp	r6, r1
 8000dba:	dd00      	ble.n	8000dbe <__aeabi_dadd+0xce>
 8000dbc:	e117      	b.n	8000fee <__aeabi_dadd+0x2fe>
 8000dbe:	1b8e      	subs	r6, r1, r6
 8000dc0:	1c72      	adds	r2, r6, #1
 8000dc2:	2a1f      	cmp	r2, #31
 8000dc4:	dd00      	ble.n	8000dc8 <__aeabi_dadd+0xd8>
 8000dc6:	e1a7      	b.n	8001118 <__aeabi_dadd+0x428>
 8000dc8:	2120      	movs	r1, #32
 8000dca:	0018      	movs	r0, r3
 8000dcc:	002e      	movs	r6, r5
 8000dce:	1a89      	subs	r1, r1, r2
 8000dd0:	408d      	lsls	r5, r1
 8000dd2:	4088      	lsls	r0, r1
 8000dd4:	40d6      	lsrs	r6, r2
 8000dd6:	40d3      	lsrs	r3, r2
 8000dd8:	1e69      	subs	r1, r5, #1
 8000dda:	418d      	sbcs	r5, r1
 8000ddc:	4330      	orrs	r0, r6
 8000dde:	4698      	mov	r8, r3
 8000de0:	2600      	movs	r6, #0
 8000de2:	4305      	orrs	r5, r0
 8000de4:	076b      	lsls	r3, r5, #29
 8000de6:	d009      	beq.n	8000dfc <__aeabi_dadd+0x10c>
 8000de8:	230f      	movs	r3, #15
 8000dea:	402b      	ands	r3, r5
 8000dec:	2b04      	cmp	r3, #4
 8000dee:	d005      	beq.n	8000dfc <__aeabi_dadd+0x10c>
 8000df0:	1d2b      	adds	r3, r5, #4
 8000df2:	42ab      	cmp	r3, r5
 8000df4:	41ad      	sbcs	r5, r5
 8000df6:	426d      	negs	r5, r5
 8000df8:	44a8      	add	r8, r5
 8000dfa:	001d      	movs	r5, r3
 8000dfc:	4643      	mov	r3, r8
 8000dfe:	021b      	lsls	r3, r3, #8
 8000e00:	d400      	bmi.n	8000e04 <__aeabi_dadd+0x114>
 8000e02:	e094      	b.n	8000f2e <__aeabi_dadd+0x23e>
 8000e04:	4b97      	ldr	r3, [pc, #604]	; (8001064 <__aeabi_dadd+0x374>)
 8000e06:	1c72      	adds	r2, r6, #1
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_dadd+0x11e>
 8000e0c:	e09d      	b.n	8000f4a <__aeabi_dadd+0x25a>
 8000e0e:	4641      	mov	r1, r8
 8000e10:	4b95      	ldr	r3, [pc, #596]	; (8001068 <__aeabi_dadd+0x378>)
 8000e12:	08ed      	lsrs	r5, r5, #3
 8000e14:	4019      	ands	r1, r3
 8000e16:	000b      	movs	r3, r1
 8000e18:	0552      	lsls	r2, r2, #21
 8000e1a:	0749      	lsls	r1, r1, #29
 8000e1c:	025b      	lsls	r3, r3, #9
 8000e1e:	4329      	orrs	r1, r5
 8000e20:	0b1b      	lsrs	r3, r3, #12
 8000e22:	0d52      	lsrs	r2, r2, #21
 8000e24:	0512      	lsls	r2, r2, #20
 8000e26:	4313      	orrs	r3, r2
 8000e28:	07e4      	lsls	r4, r4, #31
 8000e2a:	4323      	orrs	r3, r4
 8000e2c:	0008      	movs	r0, r1
 8000e2e:	0019      	movs	r1, r3
 8000e30:	bce0      	pop	{r5, r6, r7}
 8000e32:	46ba      	mov	sl, r7
 8000e34:	46b1      	mov	r9, r6
 8000e36:	46a8      	mov	r8, r5
 8000e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e3a:	2a00      	cmp	r2, #0
 8000e3c:	d043      	beq.n	8000ec6 <__aeabi_dadd+0x1d6>
 8000e3e:	1b8a      	subs	r2, r1, r6
 8000e40:	2e00      	cmp	r6, #0
 8000e42:	d000      	beq.n	8000e46 <__aeabi_dadd+0x156>
 8000e44:	e12a      	b.n	800109c <__aeabi_dadd+0x3ac>
 8000e46:	464c      	mov	r4, r9
 8000e48:	431c      	orrs	r4, r3
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_dadd+0x15e>
 8000e4c:	e1d1      	b.n	80011f2 <__aeabi_dadd+0x502>
 8000e4e:	1e54      	subs	r4, r2, #1
 8000e50:	2a01      	cmp	r2, #1
 8000e52:	d100      	bne.n	8000e56 <__aeabi_dadd+0x166>
 8000e54:	e21f      	b.n	8001296 <__aeabi_dadd+0x5a6>
 8000e56:	4d83      	ldr	r5, [pc, #524]	; (8001064 <__aeabi_dadd+0x374>)
 8000e58:	42aa      	cmp	r2, r5
 8000e5a:	d100      	bne.n	8000e5e <__aeabi_dadd+0x16e>
 8000e5c:	e272      	b.n	8001344 <__aeabi_dadd+0x654>
 8000e5e:	0022      	movs	r2, r4
 8000e60:	e123      	b.n	80010aa <__aeabi_dadd+0x3ba>
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	dc00      	bgt.n	8000e68 <__aeabi_dadd+0x178>
 8000e66:	e098      	b.n	8000f9a <__aeabi_dadd+0x2aa>
 8000e68:	2900      	cmp	r1, #0
 8000e6a:	d042      	beq.n	8000ef2 <__aeabi_dadd+0x202>
 8000e6c:	497d      	ldr	r1, [pc, #500]	; (8001064 <__aeabi_dadd+0x374>)
 8000e6e:	428e      	cmp	r6, r1
 8000e70:	d100      	bne.n	8000e74 <__aeabi_dadd+0x184>
 8000e72:	e0da      	b.n	800102a <__aeabi_dadd+0x33a>
 8000e74:	2180      	movs	r1, #128	; 0x80
 8000e76:	0028      	movs	r0, r5
 8000e78:	0409      	lsls	r1, r1, #16
 8000e7a:	4308      	orrs	r0, r1
 8000e7c:	4684      	mov	ip, r0
 8000e7e:	2a38      	cmp	r2, #56	; 0x38
 8000e80:	dd00      	ble.n	8000e84 <__aeabi_dadd+0x194>
 8000e82:	e129      	b.n	80010d8 <__aeabi_dadd+0x3e8>
 8000e84:	2a1f      	cmp	r2, #31
 8000e86:	dc00      	bgt.n	8000e8a <__aeabi_dadd+0x19a>
 8000e88:	e187      	b.n	800119a <__aeabi_dadd+0x4aa>
 8000e8a:	0011      	movs	r1, r2
 8000e8c:	4665      	mov	r5, ip
 8000e8e:	3920      	subs	r1, #32
 8000e90:	40cd      	lsrs	r5, r1
 8000e92:	2a20      	cmp	r2, #32
 8000e94:	d004      	beq.n	8000ea0 <__aeabi_dadd+0x1b0>
 8000e96:	2040      	movs	r0, #64	; 0x40
 8000e98:	4661      	mov	r1, ip
 8000e9a:	1a82      	subs	r2, r0, r2
 8000e9c:	4091      	lsls	r1, r2
 8000e9e:	430f      	orrs	r7, r1
 8000ea0:	0039      	movs	r1, r7
 8000ea2:	1e4f      	subs	r7, r1, #1
 8000ea4:	41b9      	sbcs	r1, r7
 8000ea6:	430d      	orrs	r5, r1
 8000ea8:	e11b      	b.n	80010e2 <__aeabi_dadd+0x3f2>
 8000eaa:	0029      	movs	r1, r5
 8000eac:	4339      	orrs	r1, r7
 8000eae:	d100      	bne.n	8000eb2 <__aeabi_dadd+0x1c2>
 8000eb0:	e0b5      	b.n	800101e <__aeabi_dadd+0x32e>
 8000eb2:	1e51      	subs	r1, r2, #1
 8000eb4:	2a01      	cmp	r2, #1
 8000eb6:	d100      	bne.n	8000eba <__aeabi_dadd+0x1ca>
 8000eb8:	e1ab      	b.n	8001212 <__aeabi_dadd+0x522>
 8000eba:	486a      	ldr	r0, [pc, #424]	; (8001064 <__aeabi_dadd+0x374>)
 8000ebc:	4282      	cmp	r2, r0
 8000ebe:	d100      	bne.n	8000ec2 <__aeabi_dadd+0x1d2>
 8000ec0:	e1b2      	b.n	8001228 <__aeabi_dadd+0x538>
 8000ec2:	000a      	movs	r2, r1
 8000ec4:	e743      	b.n	8000d4e <__aeabi_dadd+0x5e>
 8000ec6:	4969      	ldr	r1, [pc, #420]	; (800106c <__aeabi_dadd+0x37c>)
 8000ec8:	1c75      	adds	r5, r6, #1
 8000eca:	420d      	tst	r5, r1
 8000ecc:	d000      	beq.n	8000ed0 <__aeabi_dadd+0x1e0>
 8000ece:	e0cf      	b.n	8001070 <__aeabi_dadd+0x380>
 8000ed0:	2e00      	cmp	r6, #0
 8000ed2:	d000      	beq.n	8000ed6 <__aeabi_dadd+0x1e6>
 8000ed4:	e193      	b.n	80011fe <__aeabi_dadd+0x50e>
 8000ed6:	4649      	mov	r1, r9
 8000ed8:	4319      	orrs	r1, r3
 8000eda:	d100      	bne.n	8000ede <__aeabi_dadd+0x1ee>
 8000edc:	e1d1      	b.n	8001282 <__aeabi_dadd+0x592>
 8000ede:	4661      	mov	r1, ip
 8000ee0:	4339      	orrs	r1, r7
 8000ee2:	d000      	beq.n	8000ee6 <__aeabi_dadd+0x1f6>
 8000ee4:	e1e3      	b.n	80012ae <__aeabi_dadd+0x5be>
 8000ee6:	4649      	mov	r1, r9
 8000ee8:	0758      	lsls	r0, r3, #29
 8000eea:	08c9      	lsrs	r1, r1, #3
 8000eec:	4301      	orrs	r1, r0
 8000eee:	08db      	lsrs	r3, r3, #3
 8000ef0:	e026      	b.n	8000f40 <__aeabi_dadd+0x250>
 8000ef2:	0029      	movs	r1, r5
 8000ef4:	4339      	orrs	r1, r7
 8000ef6:	d100      	bne.n	8000efa <__aeabi_dadd+0x20a>
 8000ef8:	e091      	b.n	800101e <__aeabi_dadd+0x32e>
 8000efa:	1e51      	subs	r1, r2, #1
 8000efc:	2a01      	cmp	r2, #1
 8000efe:	d005      	beq.n	8000f0c <__aeabi_dadd+0x21c>
 8000f00:	4858      	ldr	r0, [pc, #352]	; (8001064 <__aeabi_dadd+0x374>)
 8000f02:	4282      	cmp	r2, r0
 8000f04:	d100      	bne.n	8000f08 <__aeabi_dadd+0x218>
 8000f06:	e18f      	b.n	8001228 <__aeabi_dadd+0x538>
 8000f08:	000a      	movs	r2, r1
 8000f0a:	e7b8      	b.n	8000e7e <__aeabi_dadd+0x18e>
 8000f0c:	003d      	movs	r5, r7
 8000f0e:	444d      	add	r5, r9
 8000f10:	454d      	cmp	r5, r9
 8000f12:	4189      	sbcs	r1, r1
 8000f14:	4463      	add	r3, ip
 8000f16:	4698      	mov	r8, r3
 8000f18:	4249      	negs	r1, r1
 8000f1a:	4488      	add	r8, r1
 8000f1c:	4643      	mov	r3, r8
 8000f1e:	2602      	movs	r6, #2
 8000f20:	021b      	lsls	r3, r3, #8
 8000f22:	d500      	bpl.n	8000f26 <__aeabi_dadd+0x236>
 8000f24:	e0eb      	b.n	80010fe <__aeabi_dadd+0x40e>
 8000f26:	3e01      	subs	r6, #1
 8000f28:	076b      	lsls	r3, r5, #29
 8000f2a:	d000      	beq.n	8000f2e <__aeabi_dadd+0x23e>
 8000f2c:	e75c      	b.n	8000de8 <__aeabi_dadd+0xf8>
 8000f2e:	4643      	mov	r3, r8
 8000f30:	08e9      	lsrs	r1, r5, #3
 8000f32:	075a      	lsls	r2, r3, #29
 8000f34:	4311      	orrs	r1, r2
 8000f36:	0032      	movs	r2, r6
 8000f38:	08db      	lsrs	r3, r3, #3
 8000f3a:	484a      	ldr	r0, [pc, #296]	; (8001064 <__aeabi_dadd+0x374>)
 8000f3c:	4282      	cmp	r2, r0
 8000f3e:	d021      	beq.n	8000f84 <__aeabi_dadd+0x294>
 8000f40:	031b      	lsls	r3, r3, #12
 8000f42:	0552      	lsls	r2, r2, #21
 8000f44:	0b1b      	lsrs	r3, r3, #12
 8000f46:	0d52      	lsrs	r2, r2, #21
 8000f48:	e76c      	b.n	8000e24 <__aeabi_dadd+0x134>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	e769      	b.n	8000e24 <__aeabi_dadd+0x134>
 8000f50:	002a      	movs	r2, r5
 8000f52:	433a      	orrs	r2, r7
 8000f54:	d069      	beq.n	800102a <__aeabi_dadd+0x33a>
 8000f56:	464a      	mov	r2, r9
 8000f58:	0758      	lsls	r0, r3, #29
 8000f5a:	08d1      	lsrs	r1, r2, #3
 8000f5c:	08da      	lsrs	r2, r3, #3
 8000f5e:	2380      	movs	r3, #128	; 0x80
 8000f60:	031b      	lsls	r3, r3, #12
 8000f62:	4308      	orrs	r0, r1
 8000f64:	421a      	tst	r2, r3
 8000f66:	d007      	beq.n	8000f78 <__aeabi_dadd+0x288>
 8000f68:	0029      	movs	r1, r5
 8000f6a:	08ed      	lsrs	r5, r5, #3
 8000f6c:	421d      	tst	r5, r3
 8000f6e:	d103      	bne.n	8000f78 <__aeabi_dadd+0x288>
 8000f70:	002a      	movs	r2, r5
 8000f72:	08ff      	lsrs	r7, r7, #3
 8000f74:	0748      	lsls	r0, r1, #29
 8000f76:	4338      	orrs	r0, r7
 8000f78:	0f43      	lsrs	r3, r0, #29
 8000f7a:	00c1      	lsls	r1, r0, #3
 8000f7c:	075b      	lsls	r3, r3, #29
 8000f7e:	08c9      	lsrs	r1, r1, #3
 8000f80:	4319      	orrs	r1, r3
 8000f82:	0013      	movs	r3, r2
 8000f84:	000a      	movs	r2, r1
 8000f86:	431a      	orrs	r2, r3
 8000f88:	d100      	bne.n	8000f8c <__aeabi_dadd+0x29c>
 8000f8a:	e213      	b.n	80013b4 <__aeabi_dadd+0x6c4>
 8000f8c:	2280      	movs	r2, #128	; 0x80
 8000f8e:	0312      	lsls	r2, r2, #12
 8000f90:	4313      	orrs	r3, r2
 8000f92:	031b      	lsls	r3, r3, #12
 8000f94:	4a33      	ldr	r2, [pc, #204]	; (8001064 <__aeabi_dadd+0x374>)
 8000f96:	0b1b      	lsrs	r3, r3, #12
 8000f98:	e744      	b.n	8000e24 <__aeabi_dadd+0x134>
 8000f9a:	2a00      	cmp	r2, #0
 8000f9c:	d04b      	beq.n	8001036 <__aeabi_dadd+0x346>
 8000f9e:	1b8a      	subs	r2, r1, r6
 8000fa0:	2e00      	cmp	r6, #0
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_dadd+0x2b6>
 8000fa4:	e0e7      	b.n	8001176 <__aeabi_dadd+0x486>
 8000fa6:	482f      	ldr	r0, [pc, #188]	; (8001064 <__aeabi_dadd+0x374>)
 8000fa8:	4281      	cmp	r1, r0
 8000faa:	d100      	bne.n	8000fae <__aeabi_dadd+0x2be>
 8000fac:	e195      	b.n	80012da <__aeabi_dadd+0x5ea>
 8000fae:	2080      	movs	r0, #128	; 0x80
 8000fb0:	0400      	lsls	r0, r0, #16
 8000fb2:	4303      	orrs	r3, r0
 8000fb4:	2a38      	cmp	r2, #56	; 0x38
 8000fb6:	dd00      	ble.n	8000fba <__aeabi_dadd+0x2ca>
 8000fb8:	e143      	b.n	8001242 <__aeabi_dadd+0x552>
 8000fba:	2a1f      	cmp	r2, #31
 8000fbc:	dd00      	ble.n	8000fc0 <__aeabi_dadd+0x2d0>
 8000fbe:	e1db      	b.n	8001378 <__aeabi_dadd+0x688>
 8000fc0:	2020      	movs	r0, #32
 8000fc2:	001d      	movs	r5, r3
 8000fc4:	464e      	mov	r6, r9
 8000fc6:	1a80      	subs	r0, r0, r2
 8000fc8:	4085      	lsls	r5, r0
 8000fca:	40d6      	lsrs	r6, r2
 8000fcc:	4335      	orrs	r5, r6
 8000fce:	464e      	mov	r6, r9
 8000fd0:	4086      	lsls	r6, r0
 8000fd2:	0030      	movs	r0, r6
 8000fd4:	40d3      	lsrs	r3, r2
 8000fd6:	1e46      	subs	r6, r0, #1
 8000fd8:	41b0      	sbcs	r0, r6
 8000fda:	449c      	add	ip, r3
 8000fdc:	4305      	orrs	r5, r0
 8000fde:	19ed      	adds	r5, r5, r7
 8000fe0:	42bd      	cmp	r5, r7
 8000fe2:	419b      	sbcs	r3, r3
 8000fe4:	425b      	negs	r3, r3
 8000fe6:	4463      	add	r3, ip
 8000fe8:	4698      	mov	r8, r3
 8000fea:	000e      	movs	r6, r1
 8000fec:	e07f      	b.n	80010ee <__aeabi_dadd+0x3fe>
 8000fee:	4a1e      	ldr	r2, [pc, #120]	; (8001068 <__aeabi_dadd+0x378>)
 8000ff0:	1a76      	subs	r6, r6, r1
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	4698      	mov	r8, r3
 8000ff6:	e6f5      	b.n	8000de4 <__aeabi_dadd+0xf4>
 8000ff8:	0028      	movs	r0, r5
 8000ffa:	f001 fc91 	bl	8002920 <__clzsi2>
 8000ffe:	0001      	movs	r1, r0
 8001000:	3118      	adds	r1, #24
 8001002:	291f      	cmp	r1, #31
 8001004:	dc00      	bgt.n	8001008 <__aeabi_dadd+0x318>
 8001006:	e6cf      	b.n	8000da8 <__aeabi_dadd+0xb8>
 8001008:	002b      	movs	r3, r5
 800100a:	3808      	subs	r0, #8
 800100c:	4083      	lsls	r3, r0
 800100e:	2500      	movs	r5, #0
 8001010:	e6d2      	b.n	8000db8 <__aeabi_dadd+0xc8>
 8001012:	4662      	mov	r2, ip
 8001014:	433a      	orrs	r2, r7
 8001016:	0011      	movs	r1, r2
 8001018:	1e4f      	subs	r7, r1, #1
 800101a:	41b9      	sbcs	r1, r7
 800101c:	e6ac      	b.n	8000d78 <__aeabi_dadd+0x88>
 800101e:	4649      	mov	r1, r9
 8001020:	0758      	lsls	r0, r3, #29
 8001022:	08c9      	lsrs	r1, r1, #3
 8001024:	4301      	orrs	r1, r0
 8001026:	08db      	lsrs	r3, r3, #3
 8001028:	e787      	b.n	8000f3a <__aeabi_dadd+0x24a>
 800102a:	4649      	mov	r1, r9
 800102c:	075a      	lsls	r2, r3, #29
 800102e:	08c9      	lsrs	r1, r1, #3
 8001030:	4311      	orrs	r1, r2
 8001032:	08db      	lsrs	r3, r3, #3
 8001034:	e7a6      	b.n	8000f84 <__aeabi_dadd+0x294>
 8001036:	490d      	ldr	r1, [pc, #52]	; (800106c <__aeabi_dadd+0x37c>)
 8001038:	1c70      	adds	r0, r6, #1
 800103a:	4208      	tst	r0, r1
 800103c:	d000      	beq.n	8001040 <__aeabi_dadd+0x350>
 800103e:	e0bb      	b.n	80011b8 <__aeabi_dadd+0x4c8>
 8001040:	2e00      	cmp	r6, #0
 8001042:	d000      	beq.n	8001046 <__aeabi_dadd+0x356>
 8001044:	e114      	b.n	8001270 <__aeabi_dadd+0x580>
 8001046:	4649      	mov	r1, r9
 8001048:	4319      	orrs	r1, r3
 800104a:	d100      	bne.n	800104e <__aeabi_dadd+0x35e>
 800104c:	e175      	b.n	800133a <__aeabi_dadd+0x64a>
 800104e:	0029      	movs	r1, r5
 8001050:	4339      	orrs	r1, r7
 8001052:	d000      	beq.n	8001056 <__aeabi_dadd+0x366>
 8001054:	e17e      	b.n	8001354 <__aeabi_dadd+0x664>
 8001056:	4649      	mov	r1, r9
 8001058:	0758      	lsls	r0, r3, #29
 800105a:	08c9      	lsrs	r1, r1, #3
 800105c:	4301      	orrs	r1, r0
 800105e:	08db      	lsrs	r3, r3, #3
 8001060:	e76e      	b.n	8000f40 <__aeabi_dadd+0x250>
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	000007ff 	.word	0x000007ff
 8001068:	ff7fffff 	.word	0xff7fffff
 800106c:	000007fe 	.word	0x000007fe
 8001070:	4649      	mov	r1, r9
 8001072:	1bcd      	subs	r5, r1, r7
 8001074:	4661      	mov	r1, ip
 8001076:	1a58      	subs	r0, r3, r1
 8001078:	45a9      	cmp	r9, r5
 800107a:	4189      	sbcs	r1, r1
 800107c:	4249      	negs	r1, r1
 800107e:	4688      	mov	r8, r1
 8001080:	0001      	movs	r1, r0
 8001082:	4640      	mov	r0, r8
 8001084:	1a09      	subs	r1, r1, r0
 8001086:	4688      	mov	r8, r1
 8001088:	0209      	lsls	r1, r1, #8
 800108a:	d500      	bpl.n	800108e <__aeabi_dadd+0x39e>
 800108c:	e0a6      	b.n	80011dc <__aeabi_dadd+0x4ec>
 800108e:	4641      	mov	r1, r8
 8001090:	4329      	orrs	r1, r5
 8001092:	d000      	beq.n	8001096 <__aeabi_dadd+0x3a6>
 8001094:	e67f      	b.n	8000d96 <__aeabi_dadd+0xa6>
 8001096:	2300      	movs	r3, #0
 8001098:	2400      	movs	r4, #0
 800109a:	e751      	b.n	8000f40 <__aeabi_dadd+0x250>
 800109c:	4cc7      	ldr	r4, [pc, #796]	; (80013bc <__aeabi_dadd+0x6cc>)
 800109e:	42a1      	cmp	r1, r4
 80010a0:	d100      	bne.n	80010a4 <__aeabi_dadd+0x3b4>
 80010a2:	e0c7      	b.n	8001234 <__aeabi_dadd+0x544>
 80010a4:	2480      	movs	r4, #128	; 0x80
 80010a6:	0424      	lsls	r4, r4, #16
 80010a8:	4323      	orrs	r3, r4
 80010aa:	2a38      	cmp	r2, #56	; 0x38
 80010ac:	dc54      	bgt.n	8001158 <__aeabi_dadd+0x468>
 80010ae:	2a1f      	cmp	r2, #31
 80010b0:	dd00      	ble.n	80010b4 <__aeabi_dadd+0x3c4>
 80010b2:	e0cc      	b.n	800124e <__aeabi_dadd+0x55e>
 80010b4:	2420      	movs	r4, #32
 80010b6:	4648      	mov	r0, r9
 80010b8:	1aa4      	subs	r4, r4, r2
 80010ba:	001d      	movs	r5, r3
 80010bc:	464e      	mov	r6, r9
 80010be:	40a0      	lsls	r0, r4
 80010c0:	40d6      	lsrs	r6, r2
 80010c2:	40a5      	lsls	r5, r4
 80010c4:	0004      	movs	r4, r0
 80010c6:	40d3      	lsrs	r3, r2
 80010c8:	4662      	mov	r2, ip
 80010ca:	4335      	orrs	r5, r6
 80010cc:	1e66      	subs	r6, r4, #1
 80010ce:	41b4      	sbcs	r4, r6
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	469c      	mov	ip, r3
 80010d4:	4325      	orrs	r5, r4
 80010d6:	e044      	b.n	8001162 <__aeabi_dadd+0x472>
 80010d8:	4662      	mov	r2, ip
 80010da:	433a      	orrs	r2, r7
 80010dc:	0015      	movs	r5, r2
 80010de:	1e6f      	subs	r7, r5, #1
 80010e0:	41bd      	sbcs	r5, r7
 80010e2:	444d      	add	r5, r9
 80010e4:	454d      	cmp	r5, r9
 80010e6:	4189      	sbcs	r1, r1
 80010e8:	4249      	negs	r1, r1
 80010ea:	4688      	mov	r8, r1
 80010ec:	4498      	add	r8, r3
 80010ee:	4643      	mov	r3, r8
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	d400      	bmi.n	80010f6 <__aeabi_dadd+0x406>
 80010f4:	e718      	b.n	8000f28 <__aeabi_dadd+0x238>
 80010f6:	4bb1      	ldr	r3, [pc, #708]	; (80013bc <__aeabi_dadd+0x6cc>)
 80010f8:	3601      	adds	r6, #1
 80010fa:	429e      	cmp	r6, r3
 80010fc:	d049      	beq.n	8001192 <__aeabi_dadd+0x4a2>
 80010fe:	4642      	mov	r2, r8
 8001100:	4baf      	ldr	r3, [pc, #700]	; (80013c0 <__aeabi_dadd+0x6d0>)
 8001102:	2101      	movs	r1, #1
 8001104:	401a      	ands	r2, r3
 8001106:	0013      	movs	r3, r2
 8001108:	086a      	lsrs	r2, r5, #1
 800110a:	400d      	ands	r5, r1
 800110c:	4315      	orrs	r5, r2
 800110e:	07d9      	lsls	r1, r3, #31
 8001110:	085b      	lsrs	r3, r3, #1
 8001112:	4698      	mov	r8, r3
 8001114:	430d      	orrs	r5, r1
 8001116:	e665      	b.n	8000de4 <__aeabi_dadd+0xf4>
 8001118:	0018      	movs	r0, r3
 800111a:	3e1f      	subs	r6, #31
 800111c:	40f0      	lsrs	r0, r6
 800111e:	2a20      	cmp	r2, #32
 8001120:	d003      	beq.n	800112a <__aeabi_dadd+0x43a>
 8001122:	2140      	movs	r1, #64	; 0x40
 8001124:	1a8a      	subs	r2, r1, r2
 8001126:	4093      	lsls	r3, r2
 8001128:	431d      	orrs	r5, r3
 800112a:	1e69      	subs	r1, r5, #1
 800112c:	418d      	sbcs	r5, r1
 800112e:	2300      	movs	r3, #0
 8001130:	2600      	movs	r6, #0
 8001132:	4698      	mov	r8, r3
 8001134:	4305      	orrs	r5, r0
 8001136:	e6f7      	b.n	8000f28 <__aeabi_dadd+0x238>
 8001138:	0011      	movs	r1, r2
 800113a:	4665      	mov	r5, ip
 800113c:	3920      	subs	r1, #32
 800113e:	40cd      	lsrs	r5, r1
 8001140:	2a20      	cmp	r2, #32
 8001142:	d004      	beq.n	800114e <__aeabi_dadd+0x45e>
 8001144:	2040      	movs	r0, #64	; 0x40
 8001146:	4661      	mov	r1, ip
 8001148:	1a82      	subs	r2, r0, r2
 800114a:	4091      	lsls	r1, r2
 800114c:	430f      	orrs	r7, r1
 800114e:	0039      	movs	r1, r7
 8001150:	1e4f      	subs	r7, r1, #1
 8001152:	41b9      	sbcs	r1, r7
 8001154:	4329      	orrs	r1, r5
 8001156:	e60f      	b.n	8000d78 <__aeabi_dadd+0x88>
 8001158:	464a      	mov	r2, r9
 800115a:	4313      	orrs	r3, r2
 800115c:	001d      	movs	r5, r3
 800115e:	1e6b      	subs	r3, r5, #1
 8001160:	419d      	sbcs	r5, r3
 8001162:	1b7d      	subs	r5, r7, r5
 8001164:	42af      	cmp	r7, r5
 8001166:	419b      	sbcs	r3, r3
 8001168:	4662      	mov	r2, ip
 800116a:	425b      	negs	r3, r3
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	4698      	mov	r8, r3
 8001170:	4654      	mov	r4, sl
 8001172:	000e      	movs	r6, r1
 8001174:	e607      	b.n	8000d86 <__aeabi_dadd+0x96>
 8001176:	4648      	mov	r0, r9
 8001178:	4318      	orrs	r0, r3
 800117a:	d100      	bne.n	800117e <__aeabi_dadd+0x48e>
 800117c:	e0b3      	b.n	80012e6 <__aeabi_dadd+0x5f6>
 800117e:	1e50      	subs	r0, r2, #1
 8001180:	2a01      	cmp	r2, #1
 8001182:	d100      	bne.n	8001186 <__aeabi_dadd+0x496>
 8001184:	e10d      	b.n	80013a2 <__aeabi_dadd+0x6b2>
 8001186:	4d8d      	ldr	r5, [pc, #564]	; (80013bc <__aeabi_dadd+0x6cc>)
 8001188:	42aa      	cmp	r2, r5
 800118a:	d100      	bne.n	800118e <__aeabi_dadd+0x49e>
 800118c:	e0a5      	b.n	80012da <__aeabi_dadd+0x5ea>
 800118e:	0002      	movs	r2, r0
 8001190:	e710      	b.n	8000fb4 <__aeabi_dadd+0x2c4>
 8001192:	0032      	movs	r2, r6
 8001194:	2300      	movs	r3, #0
 8001196:	2100      	movs	r1, #0
 8001198:	e644      	b.n	8000e24 <__aeabi_dadd+0x134>
 800119a:	2120      	movs	r1, #32
 800119c:	0038      	movs	r0, r7
 800119e:	1a89      	subs	r1, r1, r2
 80011a0:	4665      	mov	r5, ip
 80011a2:	408f      	lsls	r7, r1
 80011a4:	408d      	lsls	r5, r1
 80011a6:	40d0      	lsrs	r0, r2
 80011a8:	1e79      	subs	r1, r7, #1
 80011aa:	418f      	sbcs	r7, r1
 80011ac:	4305      	orrs	r5, r0
 80011ae:	433d      	orrs	r5, r7
 80011b0:	4667      	mov	r7, ip
 80011b2:	40d7      	lsrs	r7, r2
 80011b4:	19db      	adds	r3, r3, r7
 80011b6:	e794      	b.n	80010e2 <__aeabi_dadd+0x3f2>
 80011b8:	4a80      	ldr	r2, [pc, #512]	; (80013bc <__aeabi_dadd+0x6cc>)
 80011ba:	4290      	cmp	r0, r2
 80011bc:	d100      	bne.n	80011c0 <__aeabi_dadd+0x4d0>
 80011be:	e0ec      	b.n	800139a <__aeabi_dadd+0x6aa>
 80011c0:	0039      	movs	r1, r7
 80011c2:	4449      	add	r1, r9
 80011c4:	4549      	cmp	r1, r9
 80011c6:	4192      	sbcs	r2, r2
 80011c8:	4463      	add	r3, ip
 80011ca:	4252      	negs	r2, r2
 80011cc:	189b      	adds	r3, r3, r2
 80011ce:	07dd      	lsls	r5, r3, #31
 80011d0:	0849      	lsrs	r1, r1, #1
 80011d2:	085b      	lsrs	r3, r3, #1
 80011d4:	4698      	mov	r8, r3
 80011d6:	0006      	movs	r6, r0
 80011d8:	430d      	orrs	r5, r1
 80011da:	e6a5      	b.n	8000f28 <__aeabi_dadd+0x238>
 80011dc:	464a      	mov	r2, r9
 80011de:	1abd      	subs	r5, r7, r2
 80011e0:	42af      	cmp	r7, r5
 80011e2:	4189      	sbcs	r1, r1
 80011e4:	4662      	mov	r2, ip
 80011e6:	4249      	negs	r1, r1
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	1a5b      	subs	r3, r3, r1
 80011ec:	4698      	mov	r8, r3
 80011ee:	4654      	mov	r4, sl
 80011f0:	e5d1      	b.n	8000d96 <__aeabi_dadd+0xa6>
 80011f2:	076c      	lsls	r4, r5, #29
 80011f4:	08f9      	lsrs	r1, r7, #3
 80011f6:	4321      	orrs	r1, r4
 80011f8:	08eb      	lsrs	r3, r5, #3
 80011fa:	0004      	movs	r4, r0
 80011fc:	e69d      	b.n	8000f3a <__aeabi_dadd+0x24a>
 80011fe:	464a      	mov	r2, r9
 8001200:	431a      	orrs	r2, r3
 8001202:	d175      	bne.n	80012f0 <__aeabi_dadd+0x600>
 8001204:	4661      	mov	r1, ip
 8001206:	4339      	orrs	r1, r7
 8001208:	d114      	bne.n	8001234 <__aeabi_dadd+0x544>
 800120a:	2380      	movs	r3, #128	; 0x80
 800120c:	2400      	movs	r4, #0
 800120e:	031b      	lsls	r3, r3, #12
 8001210:	e6bc      	b.n	8000f8c <__aeabi_dadd+0x29c>
 8001212:	464a      	mov	r2, r9
 8001214:	1bd5      	subs	r5, r2, r7
 8001216:	45a9      	cmp	r9, r5
 8001218:	4189      	sbcs	r1, r1
 800121a:	4662      	mov	r2, ip
 800121c:	4249      	negs	r1, r1
 800121e:	1a9b      	subs	r3, r3, r2
 8001220:	1a5b      	subs	r3, r3, r1
 8001222:	4698      	mov	r8, r3
 8001224:	2601      	movs	r6, #1
 8001226:	e5ae      	b.n	8000d86 <__aeabi_dadd+0x96>
 8001228:	464a      	mov	r2, r9
 800122a:	08d1      	lsrs	r1, r2, #3
 800122c:	075a      	lsls	r2, r3, #29
 800122e:	4311      	orrs	r1, r2
 8001230:	08db      	lsrs	r3, r3, #3
 8001232:	e6a7      	b.n	8000f84 <__aeabi_dadd+0x294>
 8001234:	4663      	mov	r3, ip
 8001236:	08f9      	lsrs	r1, r7, #3
 8001238:	075a      	lsls	r2, r3, #29
 800123a:	4654      	mov	r4, sl
 800123c:	4311      	orrs	r1, r2
 800123e:	08db      	lsrs	r3, r3, #3
 8001240:	e6a0      	b.n	8000f84 <__aeabi_dadd+0x294>
 8001242:	464a      	mov	r2, r9
 8001244:	4313      	orrs	r3, r2
 8001246:	001d      	movs	r5, r3
 8001248:	1e6b      	subs	r3, r5, #1
 800124a:	419d      	sbcs	r5, r3
 800124c:	e6c7      	b.n	8000fde <__aeabi_dadd+0x2ee>
 800124e:	0014      	movs	r4, r2
 8001250:	001e      	movs	r6, r3
 8001252:	3c20      	subs	r4, #32
 8001254:	40e6      	lsrs	r6, r4
 8001256:	2a20      	cmp	r2, #32
 8001258:	d005      	beq.n	8001266 <__aeabi_dadd+0x576>
 800125a:	2440      	movs	r4, #64	; 0x40
 800125c:	1aa2      	subs	r2, r4, r2
 800125e:	4093      	lsls	r3, r2
 8001260:	464a      	mov	r2, r9
 8001262:	431a      	orrs	r2, r3
 8001264:	4691      	mov	r9, r2
 8001266:	464d      	mov	r5, r9
 8001268:	1e6b      	subs	r3, r5, #1
 800126a:	419d      	sbcs	r5, r3
 800126c:	4335      	orrs	r5, r6
 800126e:	e778      	b.n	8001162 <__aeabi_dadd+0x472>
 8001270:	464a      	mov	r2, r9
 8001272:	431a      	orrs	r2, r3
 8001274:	d000      	beq.n	8001278 <__aeabi_dadd+0x588>
 8001276:	e66b      	b.n	8000f50 <__aeabi_dadd+0x260>
 8001278:	076b      	lsls	r3, r5, #29
 800127a:	08f9      	lsrs	r1, r7, #3
 800127c:	4319      	orrs	r1, r3
 800127e:	08eb      	lsrs	r3, r5, #3
 8001280:	e680      	b.n	8000f84 <__aeabi_dadd+0x294>
 8001282:	4661      	mov	r1, ip
 8001284:	4339      	orrs	r1, r7
 8001286:	d054      	beq.n	8001332 <__aeabi_dadd+0x642>
 8001288:	4663      	mov	r3, ip
 800128a:	08f9      	lsrs	r1, r7, #3
 800128c:	075c      	lsls	r4, r3, #29
 800128e:	4321      	orrs	r1, r4
 8001290:	08db      	lsrs	r3, r3, #3
 8001292:	0004      	movs	r4, r0
 8001294:	e654      	b.n	8000f40 <__aeabi_dadd+0x250>
 8001296:	464a      	mov	r2, r9
 8001298:	1abd      	subs	r5, r7, r2
 800129a:	42af      	cmp	r7, r5
 800129c:	4189      	sbcs	r1, r1
 800129e:	4662      	mov	r2, ip
 80012a0:	4249      	negs	r1, r1
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	1a5b      	subs	r3, r3, r1
 80012a6:	4698      	mov	r8, r3
 80012a8:	0004      	movs	r4, r0
 80012aa:	2601      	movs	r6, #1
 80012ac:	e56b      	b.n	8000d86 <__aeabi_dadd+0x96>
 80012ae:	464a      	mov	r2, r9
 80012b0:	1bd5      	subs	r5, r2, r7
 80012b2:	45a9      	cmp	r9, r5
 80012b4:	4189      	sbcs	r1, r1
 80012b6:	4662      	mov	r2, ip
 80012b8:	4249      	negs	r1, r1
 80012ba:	1a9a      	subs	r2, r3, r2
 80012bc:	1a52      	subs	r2, r2, r1
 80012be:	4690      	mov	r8, r2
 80012c0:	0212      	lsls	r2, r2, #8
 80012c2:	d532      	bpl.n	800132a <__aeabi_dadd+0x63a>
 80012c4:	464a      	mov	r2, r9
 80012c6:	1abd      	subs	r5, r7, r2
 80012c8:	42af      	cmp	r7, r5
 80012ca:	4189      	sbcs	r1, r1
 80012cc:	4662      	mov	r2, ip
 80012ce:	4249      	negs	r1, r1
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	1a5b      	subs	r3, r3, r1
 80012d4:	4698      	mov	r8, r3
 80012d6:	0004      	movs	r4, r0
 80012d8:	e584      	b.n	8000de4 <__aeabi_dadd+0xf4>
 80012da:	4663      	mov	r3, ip
 80012dc:	08f9      	lsrs	r1, r7, #3
 80012de:	075a      	lsls	r2, r3, #29
 80012e0:	4311      	orrs	r1, r2
 80012e2:	08db      	lsrs	r3, r3, #3
 80012e4:	e64e      	b.n	8000f84 <__aeabi_dadd+0x294>
 80012e6:	08f9      	lsrs	r1, r7, #3
 80012e8:	0768      	lsls	r0, r5, #29
 80012ea:	4301      	orrs	r1, r0
 80012ec:	08eb      	lsrs	r3, r5, #3
 80012ee:	e624      	b.n	8000f3a <__aeabi_dadd+0x24a>
 80012f0:	4662      	mov	r2, ip
 80012f2:	433a      	orrs	r2, r7
 80012f4:	d100      	bne.n	80012f8 <__aeabi_dadd+0x608>
 80012f6:	e698      	b.n	800102a <__aeabi_dadd+0x33a>
 80012f8:	464a      	mov	r2, r9
 80012fa:	08d1      	lsrs	r1, r2, #3
 80012fc:	075a      	lsls	r2, r3, #29
 80012fe:	4311      	orrs	r1, r2
 8001300:	08da      	lsrs	r2, r3, #3
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	031b      	lsls	r3, r3, #12
 8001306:	421a      	tst	r2, r3
 8001308:	d008      	beq.n	800131c <__aeabi_dadd+0x62c>
 800130a:	4660      	mov	r0, ip
 800130c:	08c5      	lsrs	r5, r0, #3
 800130e:	421d      	tst	r5, r3
 8001310:	d104      	bne.n	800131c <__aeabi_dadd+0x62c>
 8001312:	4654      	mov	r4, sl
 8001314:	002a      	movs	r2, r5
 8001316:	08f9      	lsrs	r1, r7, #3
 8001318:	0743      	lsls	r3, r0, #29
 800131a:	4319      	orrs	r1, r3
 800131c:	0f4b      	lsrs	r3, r1, #29
 800131e:	00c9      	lsls	r1, r1, #3
 8001320:	075b      	lsls	r3, r3, #29
 8001322:	08c9      	lsrs	r1, r1, #3
 8001324:	4319      	orrs	r1, r3
 8001326:	0013      	movs	r3, r2
 8001328:	e62c      	b.n	8000f84 <__aeabi_dadd+0x294>
 800132a:	4641      	mov	r1, r8
 800132c:	4329      	orrs	r1, r5
 800132e:	d000      	beq.n	8001332 <__aeabi_dadd+0x642>
 8001330:	e5fa      	b.n	8000f28 <__aeabi_dadd+0x238>
 8001332:	2300      	movs	r3, #0
 8001334:	000a      	movs	r2, r1
 8001336:	2400      	movs	r4, #0
 8001338:	e602      	b.n	8000f40 <__aeabi_dadd+0x250>
 800133a:	076b      	lsls	r3, r5, #29
 800133c:	08f9      	lsrs	r1, r7, #3
 800133e:	4319      	orrs	r1, r3
 8001340:	08eb      	lsrs	r3, r5, #3
 8001342:	e5fd      	b.n	8000f40 <__aeabi_dadd+0x250>
 8001344:	4663      	mov	r3, ip
 8001346:	08f9      	lsrs	r1, r7, #3
 8001348:	075b      	lsls	r3, r3, #29
 800134a:	4319      	orrs	r1, r3
 800134c:	4663      	mov	r3, ip
 800134e:	0004      	movs	r4, r0
 8001350:	08db      	lsrs	r3, r3, #3
 8001352:	e617      	b.n	8000f84 <__aeabi_dadd+0x294>
 8001354:	003d      	movs	r5, r7
 8001356:	444d      	add	r5, r9
 8001358:	4463      	add	r3, ip
 800135a:	454d      	cmp	r5, r9
 800135c:	4189      	sbcs	r1, r1
 800135e:	4698      	mov	r8, r3
 8001360:	4249      	negs	r1, r1
 8001362:	4488      	add	r8, r1
 8001364:	4643      	mov	r3, r8
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	d400      	bmi.n	800136c <__aeabi_dadd+0x67c>
 800136a:	e5dd      	b.n	8000f28 <__aeabi_dadd+0x238>
 800136c:	4642      	mov	r2, r8
 800136e:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <__aeabi_dadd+0x6d0>)
 8001370:	2601      	movs	r6, #1
 8001372:	401a      	ands	r2, r3
 8001374:	4690      	mov	r8, r2
 8001376:	e5d7      	b.n	8000f28 <__aeabi_dadd+0x238>
 8001378:	0010      	movs	r0, r2
 800137a:	001e      	movs	r6, r3
 800137c:	3820      	subs	r0, #32
 800137e:	40c6      	lsrs	r6, r0
 8001380:	2a20      	cmp	r2, #32
 8001382:	d005      	beq.n	8001390 <__aeabi_dadd+0x6a0>
 8001384:	2040      	movs	r0, #64	; 0x40
 8001386:	1a82      	subs	r2, r0, r2
 8001388:	4093      	lsls	r3, r2
 800138a:	464a      	mov	r2, r9
 800138c:	431a      	orrs	r2, r3
 800138e:	4691      	mov	r9, r2
 8001390:	464d      	mov	r5, r9
 8001392:	1e6b      	subs	r3, r5, #1
 8001394:	419d      	sbcs	r5, r3
 8001396:	4335      	orrs	r5, r6
 8001398:	e621      	b.n	8000fde <__aeabi_dadd+0x2ee>
 800139a:	0002      	movs	r2, r0
 800139c:	2300      	movs	r3, #0
 800139e:	2100      	movs	r1, #0
 80013a0:	e540      	b.n	8000e24 <__aeabi_dadd+0x134>
 80013a2:	464a      	mov	r2, r9
 80013a4:	19d5      	adds	r5, r2, r7
 80013a6:	42bd      	cmp	r5, r7
 80013a8:	4189      	sbcs	r1, r1
 80013aa:	4463      	add	r3, ip
 80013ac:	4698      	mov	r8, r3
 80013ae:	4249      	negs	r1, r1
 80013b0:	4488      	add	r8, r1
 80013b2:	e5b3      	b.n	8000f1c <__aeabi_dadd+0x22c>
 80013b4:	2100      	movs	r1, #0
 80013b6:	4a01      	ldr	r2, [pc, #4]	; (80013bc <__aeabi_dadd+0x6cc>)
 80013b8:	000b      	movs	r3, r1
 80013ba:	e533      	b.n	8000e24 <__aeabi_dadd+0x134>
 80013bc:	000007ff 	.word	0x000007ff
 80013c0:	ff7fffff 	.word	0xff7fffff

080013c4 <__aeabi_ddiv>:
 80013c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c6:	4657      	mov	r7, sl
 80013c8:	464e      	mov	r6, r9
 80013ca:	4645      	mov	r5, r8
 80013cc:	46de      	mov	lr, fp
 80013ce:	b5e0      	push	{r5, r6, r7, lr}
 80013d0:	4681      	mov	r9, r0
 80013d2:	0005      	movs	r5, r0
 80013d4:	030c      	lsls	r4, r1, #12
 80013d6:	0048      	lsls	r0, r1, #1
 80013d8:	4692      	mov	sl, r2
 80013da:	001f      	movs	r7, r3
 80013dc:	b085      	sub	sp, #20
 80013de:	0b24      	lsrs	r4, r4, #12
 80013e0:	0d40      	lsrs	r0, r0, #21
 80013e2:	0fce      	lsrs	r6, r1, #31
 80013e4:	2800      	cmp	r0, #0
 80013e6:	d059      	beq.n	800149c <__aeabi_ddiv+0xd8>
 80013e8:	4b87      	ldr	r3, [pc, #540]	; (8001608 <__aeabi_ddiv+0x244>)
 80013ea:	4298      	cmp	r0, r3
 80013ec:	d100      	bne.n	80013f0 <__aeabi_ddiv+0x2c>
 80013ee:	e098      	b.n	8001522 <__aeabi_ddiv+0x15e>
 80013f0:	0f6b      	lsrs	r3, r5, #29
 80013f2:	00e4      	lsls	r4, r4, #3
 80013f4:	431c      	orrs	r4, r3
 80013f6:	2380      	movs	r3, #128	; 0x80
 80013f8:	041b      	lsls	r3, r3, #16
 80013fa:	4323      	orrs	r3, r4
 80013fc:	4698      	mov	r8, r3
 80013fe:	4b83      	ldr	r3, [pc, #524]	; (800160c <__aeabi_ddiv+0x248>)
 8001400:	00ed      	lsls	r5, r5, #3
 8001402:	469b      	mov	fp, r3
 8001404:	2300      	movs	r3, #0
 8001406:	4699      	mov	r9, r3
 8001408:	4483      	add	fp, r0
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	033c      	lsls	r4, r7, #12
 800140e:	007b      	lsls	r3, r7, #1
 8001410:	4650      	mov	r0, sl
 8001412:	0b24      	lsrs	r4, r4, #12
 8001414:	0d5b      	lsrs	r3, r3, #21
 8001416:	0fff      	lsrs	r7, r7, #31
 8001418:	2b00      	cmp	r3, #0
 800141a:	d067      	beq.n	80014ec <__aeabi_ddiv+0x128>
 800141c:	4a7a      	ldr	r2, [pc, #488]	; (8001608 <__aeabi_ddiv+0x244>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d018      	beq.n	8001454 <__aeabi_ddiv+0x90>
 8001422:	497a      	ldr	r1, [pc, #488]	; (800160c <__aeabi_ddiv+0x248>)
 8001424:	0f42      	lsrs	r2, r0, #29
 8001426:	468c      	mov	ip, r1
 8001428:	00e4      	lsls	r4, r4, #3
 800142a:	4659      	mov	r1, fp
 800142c:	4314      	orrs	r4, r2
 800142e:	2280      	movs	r2, #128	; 0x80
 8001430:	4463      	add	r3, ip
 8001432:	0412      	lsls	r2, r2, #16
 8001434:	1acb      	subs	r3, r1, r3
 8001436:	4314      	orrs	r4, r2
 8001438:	469b      	mov	fp, r3
 800143a:	00c2      	lsls	r2, r0, #3
 800143c:	2000      	movs	r0, #0
 800143e:	0033      	movs	r3, r6
 8001440:	407b      	eors	r3, r7
 8001442:	469a      	mov	sl, r3
 8001444:	464b      	mov	r3, r9
 8001446:	2b0f      	cmp	r3, #15
 8001448:	d900      	bls.n	800144c <__aeabi_ddiv+0x88>
 800144a:	e0ef      	b.n	800162c <__aeabi_ddiv+0x268>
 800144c:	4970      	ldr	r1, [pc, #448]	; (8001610 <__aeabi_ddiv+0x24c>)
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	58cb      	ldr	r3, [r1, r3]
 8001452:	469f      	mov	pc, r3
 8001454:	4b6f      	ldr	r3, [pc, #444]	; (8001614 <__aeabi_ddiv+0x250>)
 8001456:	4652      	mov	r2, sl
 8001458:	469c      	mov	ip, r3
 800145a:	4322      	orrs	r2, r4
 800145c:	44e3      	add	fp, ip
 800145e:	2a00      	cmp	r2, #0
 8001460:	d000      	beq.n	8001464 <__aeabi_ddiv+0xa0>
 8001462:	e095      	b.n	8001590 <__aeabi_ddiv+0x1cc>
 8001464:	4649      	mov	r1, r9
 8001466:	2302      	movs	r3, #2
 8001468:	4319      	orrs	r1, r3
 800146a:	4689      	mov	r9, r1
 800146c:	2400      	movs	r4, #0
 800146e:	2002      	movs	r0, #2
 8001470:	e7e5      	b.n	800143e <__aeabi_ddiv+0x7a>
 8001472:	2300      	movs	r3, #0
 8001474:	2400      	movs	r4, #0
 8001476:	2500      	movs	r5, #0
 8001478:	4652      	mov	r2, sl
 800147a:	051b      	lsls	r3, r3, #20
 800147c:	4323      	orrs	r3, r4
 800147e:	07d2      	lsls	r2, r2, #31
 8001480:	4313      	orrs	r3, r2
 8001482:	0028      	movs	r0, r5
 8001484:	0019      	movs	r1, r3
 8001486:	b005      	add	sp, #20
 8001488:	bcf0      	pop	{r4, r5, r6, r7}
 800148a:	46bb      	mov	fp, r7
 800148c:	46b2      	mov	sl, r6
 800148e:	46a9      	mov	r9, r5
 8001490:	46a0      	mov	r8, r4
 8001492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001494:	2400      	movs	r4, #0
 8001496:	2500      	movs	r5, #0
 8001498:	4b5b      	ldr	r3, [pc, #364]	; (8001608 <__aeabi_ddiv+0x244>)
 800149a:	e7ed      	b.n	8001478 <__aeabi_ddiv+0xb4>
 800149c:	464b      	mov	r3, r9
 800149e:	4323      	orrs	r3, r4
 80014a0:	4698      	mov	r8, r3
 80014a2:	d100      	bne.n	80014a6 <__aeabi_ddiv+0xe2>
 80014a4:	e089      	b.n	80015ba <__aeabi_ddiv+0x1f6>
 80014a6:	2c00      	cmp	r4, #0
 80014a8:	d100      	bne.n	80014ac <__aeabi_ddiv+0xe8>
 80014aa:	e1e0      	b.n	800186e <__aeabi_ddiv+0x4aa>
 80014ac:	0020      	movs	r0, r4
 80014ae:	f001 fa37 	bl	8002920 <__clzsi2>
 80014b2:	0001      	movs	r1, r0
 80014b4:	0002      	movs	r2, r0
 80014b6:	390b      	subs	r1, #11
 80014b8:	231d      	movs	r3, #29
 80014ba:	1a5b      	subs	r3, r3, r1
 80014bc:	4649      	mov	r1, r9
 80014be:	0010      	movs	r0, r2
 80014c0:	40d9      	lsrs	r1, r3
 80014c2:	3808      	subs	r0, #8
 80014c4:	4084      	lsls	r4, r0
 80014c6:	000b      	movs	r3, r1
 80014c8:	464d      	mov	r5, r9
 80014ca:	4323      	orrs	r3, r4
 80014cc:	4698      	mov	r8, r3
 80014ce:	4085      	lsls	r5, r0
 80014d0:	4851      	ldr	r0, [pc, #324]	; (8001618 <__aeabi_ddiv+0x254>)
 80014d2:	033c      	lsls	r4, r7, #12
 80014d4:	1a83      	subs	r3, r0, r2
 80014d6:	469b      	mov	fp, r3
 80014d8:	2300      	movs	r3, #0
 80014da:	4699      	mov	r9, r3
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	007b      	lsls	r3, r7, #1
 80014e0:	4650      	mov	r0, sl
 80014e2:	0b24      	lsrs	r4, r4, #12
 80014e4:	0d5b      	lsrs	r3, r3, #21
 80014e6:	0fff      	lsrs	r7, r7, #31
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d197      	bne.n	800141c <__aeabi_ddiv+0x58>
 80014ec:	4652      	mov	r2, sl
 80014ee:	4322      	orrs	r2, r4
 80014f0:	d055      	beq.n	800159e <__aeabi_ddiv+0x1da>
 80014f2:	2c00      	cmp	r4, #0
 80014f4:	d100      	bne.n	80014f8 <__aeabi_ddiv+0x134>
 80014f6:	e1ca      	b.n	800188e <__aeabi_ddiv+0x4ca>
 80014f8:	0020      	movs	r0, r4
 80014fa:	f001 fa11 	bl	8002920 <__clzsi2>
 80014fe:	0002      	movs	r2, r0
 8001500:	3a0b      	subs	r2, #11
 8001502:	231d      	movs	r3, #29
 8001504:	0001      	movs	r1, r0
 8001506:	1a9b      	subs	r3, r3, r2
 8001508:	4652      	mov	r2, sl
 800150a:	3908      	subs	r1, #8
 800150c:	40da      	lsrs	r2, r3
 800150e:	408c      	lsls	r4, r1
 8001510:	4314      	orrs	r4, r2
 8001512:	4652      	mov	r2, sl
 8001514:	408a      	lsls	r2, r1
 8001516:	4b41      	ldr	r3, [pc, #260]	; (800161c <__aeabi_ddiv+0x258>)
 8001518:	4458      	add	r0, fp
 800151a:	469b      	mov	fp, r3
 800151c:	4483      	add	fp, r0
 800151e:	2000      	movs	r0, #0
 8001520:	e78d      	b.n	800143e <__aeabi_ddiv+0x7a>
 8001522:	464b      	mov	r3, r9
 8001524:	4323      	orrs	r3, r4
 8001526:	4698      	mov	r8, r3
 8001528:	d140      	bne.n	80015ac <__aeabi_ddiv+0x1e8>
 800152a:	2308      	movs	r3, #8
 800152c:	4699      	mov	r9, r3
 800152e:	3b06      	subs	r3, #6
 8001530:	2500      	movs	r5, #0
 8001532:	4683      	mov	fp, r0
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	e769      	b.n	800140c <__aeabi_ddiv+0x48>
 8001538:	46b2      	mov	sl, r6
 800153a:	9b00      	ldr	r3, [sp, #0]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d0a9      	beq.n	8001494 <__aeabi_ddiv+0xd0>
 8001540:	2b03      	cmp	r3, #3
 8001542:	d100      	bne.n	8001546 <__aeabi_ddiv+0x182>
 8001544:	e211      	b.n	800196a <__aeabi_ddiv+0x5a6>
 8001546:	2b01      	cmp	r3, #1
 8001548:	d093      	beq.n	8001472 <__aeabi_ddiv+0xae>
 800154a:	4a35      	ldr	r2, [pc, #212]	; (8001620 <__aeabi_ddiv+0x25c>)
 800154c:	445a      	add	r2, fp
 800154e:	2a00      	cmp	r2, #0
 8001550:	dc00      	bgt.n	8001554 <__aeabi_ddiv+0x190>
 8001552:	e13c      	b.n	80017ce <__aeabi_ddiv+0x40a>
 8001554:	076b      	lsls	r3, r5, #29
 8001556:	d000      	beq.n	800155a <__aeabi_ddiv+0x196>
 8001558:	e1a7      	b.n	80018aa <__aeabi_ddiv+0x4e6>
 800155a:	08ed      	lsrs	r5, r5, #3
 800155c:	4643      	mov	r3, r8
 800155e:	01db      	lsls	r3, r3, #7
 8001560:	d506      	bpl.n	8001570 <__aeabi_ddiv+0x1ac>
 8001562:	4642      	mov	r2, r8
 8001564:	4b2f      	ldr	r3, [pc, #188]	; (8001624 <__aeabi_ddiv+0x260>)
 8001566:	401a      	ands	r2, r3
 8001568:	4690      	mov	r8, r2
 800156a:	2280      	movs	r2, #128	; 0x80
 800156c:	00d2      	lsls	r2, r2, #3
 800156e:	445a      	add	r2, fp
 8001570:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <__aeabi_ddiv+0x264>)
 8001572:	429a      	cmp	r2, r3
 8001574:	dc8e      	bgt.n	8001494 <__aeabi_ddiv+0xd0>
 8001576:	4643      	mov	r3, r8
 8001578:	0552      	lsls	r2, r2, #21
 800157a:	0758      	lsls	r0, r3, #29
 800157c:	025c      	lsls	r4, r3, #9
 800157e:	4305      	orrs	r5, r0
 8001580:	0b24      	lsrs	r4, r4, #12
 8001582:	0d53      	lsrs	r3, r2, #21
 8001584:	e778      	b.n	8001478 <__aeabi_ddiv+0xb4>
 8001586:	46ba      	mov	sl, r7
 8001588:	46a0      	mov	r8, r4
 800158a:	0015      	movs	r5, r2
 800158c:	9000      	str	r0, [sp, #0]
 800158e:	e7d4      	b.n	800153a <__aeabi_ddiv+0x176>
 8001590:	464a      	mov	r2, r9
 8001592:	2303      	movs	r3, #3
 8001594:	431a      	orrs	r2, r3
 8001596:	4691      	mov	r9, r2
 8001598:	2003      	movs	r0, #3
 800159a:	4652      	mov	r2, sl
 800159c:	e74f      	b.n	800143e <__aeabi_ddiv+0x7a>
 800159e:	4649      	mov	r1, r9
 80015a0:	2301      	movs	r3, #1
 80015a2:	4319      	orrs	r1, r3
 80015a4:	4689      	mov	r9, r1
 80015a6:	2400      	movs	r4, #0
 80015a8:	2001      	movs	r0, #1
 80015aa:	e748      	b.n	800143e <__aeabi_ddiv+0x7a>
 80015ac:	230c      	movs	r3, #12
 80015ae:	4699      	mov	r9, r3
 80015b0:	3b09      	subs	r3, #9
 80015b2:	46a0      	mov	r8, r4
 80015b4:	4683      	mov	fp, r0
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	e728      	b.n	800140c <__aeabi_ddiv+0x48>
 80015ba:	2304      	movs	r3, #4
 80015bc:	4699      	mov	r9, r3
 80015be:	2300      	movs	r3, #0
 80015c0:	469b      	mov	fp, r3
 80015c2:	3301      	adds	r3, #1
 80015c4:	2500      	movs	r5, #0
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	e720      	b.n	800140c <__aeabi_ddiv+0x48>
 80015ca:	2300      	movs	r3, #0
 80015cc:	2480      	movs	r4, #128	; 0x80
 80015ce:	469a      	mov	sl, r3
 80015d0:	2500      	movs	r5, #0
 80015d2:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <__aeabi_ddiv+0x244>)
 80015d4:	0324      	lsls	r4, r4, #12
 80015d6:	e74f      	b.n	8001478 <__aeabi_ddiv+0xb4>
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	4641      	mov	r1, r8
 80015dc:	031b      	lsls	r3, r3, #12
 80015de:	4219      	tst	r1, r3
 80015e0:	d008      	beq.n	80015f4 <__aeabi_ddiv+0x230>
 80015e2:	421c      	tst	r4, r3
 80015e4:	d106      	bne.n	80015f4 <__aeabi_ddiv+0x230>
 80015e6:	431c      	orrs	r4, r3
 80015e8:	0324      	lsls	r4, r4, #12
 80015ea:	46ba      	mov	sl, r7
 80015ec:	0015      	movs	r5, r2
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <__aeabi_ddiv+0x244>)
 80015f0:	0b24      	lsrs	r4, r4, #12
 80015f2:	e741      	b.n	8001478 <__aeabi_ddiv+0xb4>
 80015f4:	2480      	movs	r4, #128	; 0x80
 80015f6:	4643      	mov	r3, r8
 80015f8:	0324      	lsls	r4, r4, #12
 80015fa:	431c      	orrs	r4, r3
 80015fc:	0324      	lsls	r4, r4, #12
 80015fe:	46b2      	mov	sl, r6
 8001600:	4b01      	ldr	r3, [pc, #4]	; (8001608 <__aeabi_ddiv+0x244>)
 8001602:	0b24      	lsrs	r4, r4, #12
 8001604:	e738      	b.n	8001478 <__aeabi_ddiv+0xb4>
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	000007ff 	.word	0x000007ff
 800160c:	fffffc01 	.word	0xfffffc01
 8001610:	08008520 	.word	0x08008520
 8001614:	fffff801 	.word	0xfffff801
 8001618:	fffffc0d 	.word	0xfffffc0d
 800161c:	000003f3 	.word	0x000003f3
 8001620:	000003ff 	.word	0x000003ff
 8001624:	feffffff 	.word	0xfeffffff
 8001628:	000007fe 	.word	0x000007fe
 800162c:	4544      	cmp	r4, r8
 800162e:	d200      	bcs.n	8001632 <__aeabi_ddiv+0x26e>
 8001630:	e116      	b.n	8001860 <__aeabi_ddiv+0x49c>
 8001632:	d100      	bne.n	8001636 <__aeabi_ddiv+0x272>
 8001634:	e111      	b.n	800185a <__aeabi_ddiv+0x496>
 8001636:	2301      	movs	r3, #1
 8001638:	425b      	negs	r3, r3
 800163a:	469c      	mov	ip, r3
 800163c:	002e      	movs	r6, r5
 800163e:	4640      	mov	r0, r8
 8001640:	2500      	movs	r5, #0
 8001642:	44e3      	add	fp, ip
 8001644:	0223      	lsls	r3, r4, #8
 8001646:	0e14      	lsrs	r4, r2, #24
 8001648:	431c      	orrs	r4, r3
 800164a:	0c1b      	lsrs	r3, r3, #16
 800164c:	4699      	mov	r9, r3
 800164e:	0423      	lsls	r3, r4, #16
 8001650:	0c1f      	lsrs	r7, r3, #16
 8001652:	0212      	lsls	r2, r2, #8
 8001654:	4649      	mov	r1, r9
 8001656:	9200      	str	r2, [sp, #0]
 8001658:	9701      	str	r7, [sp, #4]
 800165a:	f7fe fdf3 	bl	8000244 <__aeabi_uidivmod>
 800165e:	0002      	movs	r2, r0
 8001660:	437a      	muls	r2, r7
 8001662:	040b      	lsls	r3, r1, #16
 8001664:	0c31      	lsrs	r1, r6, #16
 8001666:	4680      	mov	r8, r0
 8001668:	4319      	orrs	r1, r3
 800166a:	428a      	cmp	r2, r1
 800166c:	d90b      	bls.n	8001686 <__aeabi_ddiv+0x2c2>
 800166e:	2301      	movs	r3, #1
 8001670:	425b      	negs	r3, r3
 8001672:	469c      	mov	ip, r3
 8001674:	1909      	adds	r1, r1, r4
 8001676:	44e0      	add	r8, ip
 8001678:	428c      	cmp	r4, r1
 800167a:	d804      	bhi.n	8001686 <__aeabi_ddiv+0x2c2>
 800167c:	428a      	cmp	r2, r1
 800167e:	d902      	bls.n	8001686 <__aeabi_ddiv+0x2c2>
 8001680:	1e83      	subs	r3, r0, #2
 8001682:	4698      	mov	r8, r3
 8001684:	1909      	adds	r1, r1, r4
 8001686:	1a88      	subs	r0, r1, r2
 8001688:	4649      	mov	r1, r9
 800168a:	f7fe fddb 	bl	8000244 <__aeabi_uidivmod>
 800168e:	0409      	lsls	r1, r1, #16
 8001690:	468c      	mov	ip, r1
 8001692:	0431      	lsls	r1, r6, #16
 8001694:	4666      	mov	r6, ip
 8001696:	9a01      	ldr	r2, [sp, #4]
 8001698:	0c09      	lsrs	r1, r1, #16
 800169a:	4342      	muls	r2, r0
 800169c:	0003      	movs	r3, r0
 800169e:	4331      	orrs	r1, r6
 80016a0:	428a      	cmp	r2, r1
 80016a2:	d904      	bls.n	80016ae <__aeabi_ddiv+0x2ea>
 80016a4:	1909      	adds	r1, r1, r4
 80016a6:	3b01      	subs	r3, #1
 80016a8:	428c      	cmp	r4, r1
 80016aa:	d800      	bhi.n	80016ae <__aeabi_ddiv+0x2ea>
 80016ac:	e111      	b.n	80018d2 <__aeabi_ddiv+0x50e>
 80016ae:	1a89      	subs	r1, r1, r2
 80016b0:	4642      	mov	r2, r8
 80016b2:	9e00      	ldr	r6, [sp, #0]
 80016b4:	0412      	lsls	r2, r2, #16
 80016b6:	431a      	orrs	r2, r3
 80016b8:	0c33      	lsrs	r3, r6, #16
 80016ba:	001f      	movs	r7, r3
 80016bc:	0c10      	lsrs	r0, r2, #16
 80016be:	4690      	mov	r8, r2
 80016c0:	9302      	str	r3, [sp, #8]
 80016c2:	0413      	lsls	r3, r2, #16
 80016c4:	0432      	lsls	r2, r6, #16
 80016c6:	0c16      	lsrs	r6, r2, #16
 80016c8:	0032      	movs	r2, r6
 80016ca:	0c1b      	lsrs	r3, r3, #16
 80016cc:	435a      	muls	r2, r3
 80016ce:	9603      	str	r6, [sp, #12]
 80016d0:	437b      	muls	r3, r7
 80016d2:	4346      	muls	r6, r0
 80016d4:	4378      	muls	r0, r7
 80016d6:	0c17      	lsrs	r7, r2, #16
 80016d8:	46bc      	mov	ip, r7
 80016da:	199b      	adds	r3, r3, r6
 80016dc:	4463      	add	r3, ip
 80016de:	429e      	cmp	r6, r3
 80016e0:	d903      	bls.n	80016ea <__aeabi_ddiv+0x326>
 80016e2:	2680      	movs	r6, #128	; 0x80
 80016e4:	0276      	lsls	r6, r6, #9
 80016e6:	46b4      	mov	ip, r6
 80016e8:	4460      	add	r0, ip
 80016ea:	0c1e      	lsrs	r6, r3, #16
 80016ec:	1830      	adds	r0, r6, r0
 80016ee:	0416      	lsls	r6, r2, #16
 80016f0:	041b      	lsls	r3, r3, #16
 80016f2:	0c36      	lsrs	r6, r6, #16
 80016f4:	199e      	adds	r6, r3, r6
 80016f6:	4281      	cmp	r1, r0
 80016f8:	d200      	bcs.n	80016fc <__aeabi_ddiv+0x338>
 80016fa:	e09c      	b.n	8001836 <__aeabi_ddiv+0x472>
 80016fc:	d100      	bne.n	8001700 <__aeabi_ddiv+0x33c>
 80016fe:	e097      	b.n	8001830 <__aeabi_ddiv+0x46c>
 8001700:	1bae      	subs	r6, r5, r6
 8001702:	1a09      	subs	r1, r1, r0
 8001704:	42b5      	cmp	r5, r6
 8001706:	4180      	sbcs	r0, r0
 8001708:	4240      	negs	r0, r0
 800170a:	1a08      	subs	r0, r1, r0
 800170c:	4284      	cmp	r4, r0
 800170e:	d100      	bne.n	8001712 <__aeabi_ddiv+0x34e>
 8001710:	e111      	b.n	8001936 <__aeabi_ddiv+0x572>
 8001712:	4649      	mov	r1, r9
 8001714:	f7fe fd96 	bl	8000244 <__aeabi_uidivmod>
 8001718:	9a01      	ldr	r2, [sp, #4]
 800171a:	040b      	lsls	r3, r1, #16
 800171c:	4342      	muls	r2, r0
 800171e:	0c31      	lsrs	r1, r6, #16
 8001720:	0005      	movs	r5, r0
 8001722:	4319      	orrs	r1, r3
 8001724:	428a      	cmp	r2, r1
 8001726:	d907      	bls.n	8001738 <__aeabi_ddiv+0x374>
 8001728:	1909      	adds	r1, r1, r4
 800172a:	3d01      	subs	r5, #1
 800172c:	428c      	cmp	r4, r1
 800172e:	d803      	bhi.n	8001738 <__aeabi_ddiv+0x374>
 8001730:	428a      	cmp	r2, r1
 8001732:	d901      	bls.n	8001738 <__aeabi_ddiv+0x374>
 8001734:	1e85      	subs	r5, r0, #2
 8001736:	1909      	adds	r1, r1, r4
 8001738:	1a88      	subs	r0, r1, r2
 800173a:	4649      	mov	r1, r9
 800173c:	f7fe fd82 	bl	8000244 <__aeabi_uidivmod>
 8001740:	0409      	lsls	r1, r1, #16
 8001742:	468c      	mov	ip, r1
 8001744:	0431      	lsls	r1, r6, #16
 8001746:	4666      	mov	r6, ip
 8001748:	9a01      	ldr	r2, [sp, #4]
 800174a:	0c09      	lsrs	r1, r1, #16
 800174c:	4342      	muls	r2, r0
 800174e:	0003      	movs	r3, r0
 8001750:	4331      	orrs	r1, r6
 8001752:	428a      	cmp	r2, r1
 8001754:	d907      	bls.n	8001766 <__aeabi_ddiv+0x3a2>
 8001756:	1909      	adds	r1, r1, r4
 8001758:	3b01      	subs	r3, #1
 800175a:	428c      	cmp	r4, r1
 800175c:	d803      	bhi.n	8001766 <__aeabi_ddiv+0x3a2>
 800175e:	428a      	cmp	r2, r1
 8001760:	d901      	bls.n	8001766 <__aeabi_ddiv+0x3a2>
 8001762:	1e83      	subs	r3, r0, #2
 8001764:	1909      	adds	r1, r1, r4
 8001766:	9e03      	ldr	r6, [sp, #12]
 8001768:	1a89      	subs	r1, r1, r2
 800176a:	0032      	movs	r2, r6
 800176c:	042d      	lsls	r5, r5, #16
 800176e:	431d      	orrs	r5, r3
 8001770:	9f02      	ldr	r7, [sp, #8]
 8001772:	042b      	lsls	r3, r5, #16
 8001774:	0c1b      	lsrs	r3, r3, #16
 8001776:	435a      	muls	r2, r3
 8001778:	437b      	muls	r3, r7
 800177a:	469c      	mov	ip, r3
 800177c:	0c28      	lsrs	r0, r5, #16
 800177e:	4346      	muls	r6, r0
 8001780:	0c13      	lsrs	r3, r2, #16
 8001782:	44b4      	add	ip, r6
 8001784:	4463      	add	r3, ip
 8001786:	4378      	muls	r0, r7
 8001788:	429e      	cmp	r6, r3
 800178a:	d903      	bls.n	8001794 <__aeabi_ddiv+0x3d0>
 800178c:	2680      	movs	r6, #128	; 0x80
 800178e:	0276      	lsls	r6, r6, #9
 8001790:	46b4      	mov	ip, r6
 8001792:	4460      	add	r0, ip
 8001794:	0c1e      	lsrs	r6, r3, #16
 8001796:	0412      	lsls	r2, r2, #16
 8001798:	041b      	lsls	r3, r3, #16
 800179a:	0c12      	lsrs	r2, r2, #16
 800179c:	1830      	adds	r0, r6, r0
 800179e:	189b      	adds	r3, r3, r2
 80017a0:	4281      	cmp	r1, r0
 80017a2:	d306      	bcc.n	80017b2 <__aeabi_ddiv+0x3ee>
 80017a4:	d002      	beq.n	80017ac <__aeabi_ddiv+0x3e8>
 80017a6:	2301      	movs	r3, #1
 80017a8:	431d      	orrs	r5, r3
 80017aa:	e6ce      	b.n	800154a <__aeabi_ddiv+0x186>
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d100      	bne.n	80017b2 <__aeabi_ddiv+0x3ee>
 80017b0:	e6cb      	b.n	800154a <__aeabi_ddiv+0x186>
 80017b2:	1861      	adds	r1, r4, r1
 80017b4:	1e6e      	subs	r6, r5, #1
 80017b6:	42a1      	cmp	r1, r4
 80017b8:	d200      	bcs.n	80017bc <__aeabi_ddiv+0x3f8>
 80017ba:	e0a4      	b.n	8001906 <__aeabi_ddiv+0x542>
 80017bc:	4281      	cmp	r1, r0
 80017be:	d200      	bcs.n	80017c2 <__aeabi_ddiv+0x3fe>
 80017c0:	e0c9      	b.n	8001956 <__aeabi_ddiv+0x592>
 80017c2:	d100      	bne.n	80017c6 <__aeabi_ddiv+0x402>
 80017c4:	e0d9      	b.n	800197a <__aeabi_ddiv+0x5b6>
 80017c6:	0035      	movs	r5, r6
 80017c8:	e7ed      	b.n	80017a6 <__aeabi_ddiv+0x3e2>
 80017ca:	2501      	movs	r5, #1
 80017cc:	426d      	negs	r5, r5
 80017ce:	2101      	movs	r1, #1
 80017d0:	1a89      	subs	r1, r1, r2
 80017d2:	2938      	cmp	r1, #56	; 0x38
 80017d4:	dd00      	ble.n	80017d8 <__aeabi_ddiv+0x414>
 80017d6:	e64c      	b.n	8001472 <__aeabi_ddiv+0xae>
 80017d8:	291f      	cmp	r1, #31
 80017da:	dc00      	bgt.n	80017de <__aeabi_ddiv+0x41a>
 80017dc:	e07f      	b.n	80018de <__aeabi_ddiv+0x51a>
 80017de:	231f      	movs	r3, #31
 80017e0:	425b      	negs	r3, r3
 80017e2:	1a9a      	subs	r2, r3, r2
 80017e4:	4643      	mov	r3, r8
 80017e6:	40d3      	lsrs	r3, r2
 80017e8:	2920      	cmp	r1, #32
 80017ea:	d004      	beq.n	80017f6 <__aeabi_ddiv+0x432>
 80017ec:	4644      	mov	r4, r8
 80017ee:	4a65      	ldr	r2, [pc, #404]	; (8001984 <__aeabi_ddiv+0x5c0>)
 80017f0:	445a      	add	r2, fp
 80017f2:	4094      	lsls	r4, r2
 80017f4:	4325      	orrs	r5, r4
 80017f6:	1e6a      	subs	r2, r5, #1
 80017f8:	4195      	sbcs	r5, r2
 80017fa:	2207      	movs	r2, #7
 80017fc:	432b      	orrs	r3, r5
 80017fe:	0015      	movs	r5, r2
 8001800:	2400      	movs	r4, #0
 8001802:	401d      	ands	r5, r3
 8001804:	421a      	tst	r2, r3
 8001806:	d100      	bne.n	800180a <__aeabi_ddiv+0x446>
 8001808:	e0a1      	b.n	800194e <__aeabi_ddiv+0x58a>
 800180a:	220f      	movs	r2, #15
 800180c:	2400      	movs	r4, #0
 800180e:	401a      	ands	r2, r3
 8001810:	2a04      	cmp	r2, #4
 8001812:	d100      	bne.n	8001816 <__aeabi_ddiv+0x452>
 8001814:	e098      	b.n	8001948 <__aeabi_ddiv+0x584>
 8001816:	1d1a      	adds	r2, r3, #4
 8001818:	429a      	cmp	r2, r3
 800181a:	419b      	sbcs	r3, r3
 800181c:	425b      	negs	r3, r3
 800181e:	18e4      	adds	r4, r4, r3
 8001820:	0013      	movs	r3, r2
 8001822:	0222      	lsls	r2, r4, #8
 8001824:	d400      	bmi.n	8001828 <__aeabi_ddiv+0x464>
 8001826:	e08f      	b.n	8001948 <__aeabi_ddiv+0x584>
 8001828:	2301      	movs	r3, #1
 800182a:	2400      	movs	r4, #0
 800182c:	2500      	movs	r5, #0
 800182e:	e623      	b.n	8001478 <__aeabi_ddiv+0xb4>
 8001830:	42b5      	cmp	r5, r6
 8001832:	d300      	bcc.n	8001836 <__aeabi_ddiv+0x472>
 8001834:	e764      	b.n	8001700 <__aeabi_ddiv+0x33c>
 8001836:	4643      	mov	r3, r8
 8001838:	1e5a      	subs	r2, r3, #1
 800183a:	9b00      	ldr	r3, [sp, #0]
 800183c:	469c      	mov	ip, r3
 800183e:	4465      	add	r5, ip
 8001840:	001f      	movs	r7, r3
 8001842:	429d      	cmp	r5, r3
 8001844:	419b      	sbcs	r3, r3
 8001846:	425b      	negs	r3, r3
 8001848:	191b      	adds	r3, r3, r4
 800184a:	18c9      	adds	r1, r1, r3
 800184c:	428c      	cmp	r4, r1
 800184e:	d23a      	bcs.n	80018c6 <__aeabi_ddiv+0x502>
 8001850:	4288      	cmp	r0, r1
 8001852:	d863      	bhi.n	800191c <__aeabi_ddiv+0x558>
 8001854:	d060      	beq.n	8001918 <__aeabi_ddiv+0x554>
 8001856:	4690      	mov	r8, r2
 8001858:	e752      	b.n	8001700 <__aeabi_ddiv+0x33c>
 800185a:	42aa      	cmp	r2, r5
 800185c:	d900      	bls.n	8001860 <__aeabi_ddiv+0x49c>
 800185e:	e6ea      	b.n	8001636 <__aeabi_ddiv+0x272>
 8001860:	4643      	mov	r3, r8
 8001862:	07de      	lsls	r6, r3, #31
 8001864:	0858      	lsrs	r0, r3, #1
 8001866:	086b      	lsrs	r3, r5, #1
 8001868:	431e      	orrs	r6, r3
 800186a:	07ed      	lsls	r5, r5, #31
 800186c:	e6ea      	b.n	8001644 <__aeabi_ddiv+0x280>
 800186e:	4648      	mov	r0, r9
 8001870:	f001 f856 	bl	8002920 <__clzsi2>
 8001874:	0001      	movs	r1, r0
 8001876:	0002      	movs	r2, r0
 8001878:	3115      	adds	r1, #21
 800187a:	3220      	adds	r2, #32
 800187c:	291c      	cmp	r1, #28
 800187e:	dc00      	bgt.n	8001882 <__aeabi_ddiv+0x4be>
 8001880:	e61a      	b.n	80014b8 <__aeabi_ddiv+0xf4>
 8001882:	464b      	mov	r3, r9
 8001884:	3808      	subs	r0, #8
 8001886:	4083      	lsls	r3, r0
 8001888:	2500      	movs	r5, #0
 800188a:	4698      	mov	r8, r3
 800188c:	e620      	b.n	80014d0 <__aeabi_ddiv+0x10c>
 800188e:	f001 f847 	bl	8002920 <__clzsi2>
 8001892:	0003      	movs	r3, r0
 8001894:	001a      	movs	r2, r3
 8001896:	3215      	adds	r2, #21
 8001898:	3020      	adds	r0, #32
 800189a:	2a1c      	cmp	r2, #28
 800189c:	dc00      	bgt.n	80018a0 <__aeabi_ddiv+0x4dc>
 800189e:	e630      	b.n	8001502 <__aeabi_ddiv+0x13e>
 80018a0:	4654      	mov	r4, sl
 80018a2:	3b08      	subs	r3, #8
 80018a4:	2200      	movs	r2, #0
 80018a6:	409c      	lsls	r4, r3
 80018a8:	e635      	b.n	8001516 <__aeabi_ddiv+0x152>
 80018aa:	230f      	movs	r3, #15
 80018ac:	402b      	ands	r3, r5
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d100      	bne.n	80018b4 <__aeabi_ddiv+0x4f0>
 80018b2:	e652      	b.n	800155a <__aeabi_ddiv+0x196>
 80018b4:	2305      	movs	r3, #5
 80018b6:	425b      	negs	r3, r3
 80018b8:	42ab      	cmp	r3, r5
 80018ba:	419b      	sbcs	r3, r3
 80018bc:	3504      	adds	r5, #4
 80018be:	425b      	negs	r3, r3
 80018c0:	08ed      	lsrs	r5, r5, #3
 80018c2:	4498      	add	r8, r3
 80018c4:	e64a      	b.n	800155c <__aeabi_ddiv+0x198>
 80018c6:	428c      	cmp	r4, r1
 80018c8:	d1c5      	bne.n	8001856 <__aeabi_ddiv+0x492>
 80018ca:	42af      	cmp	r7, r5
 80018cc:	d9c0      	bls.n	8001850 <__aeabi_ddiv+0x48c>
 80018ce:	4690      	mov	r8, r2
 80018d0:	e716      	b.n	8001700 <__aeabi_ddiv+0x33c>
 80018d2:	428a      	cmp	r2, r1
 80018d4:	d800      	bhi.n	80018d8 <__aeabi_ddiv+0x514>
 80018d6:	e6ea      	b.n	80016ae <__aeabi_ddiv+0x2ea>
 80018d8:	1e83      	subs	r3, r0, #2
 80018da:	1909      	adds	r1, r1, r4
 80018dc:	e6e7      	b.n	80016ae <__aeabi_ddiv+0x2ea>
 80018de:	4a2a      	ldr	r2, [pc, #168]	; (8001988 <__aeabi_ddiv+0x5c4>)
 80018e0:	0028      	movs	r0, r5
 80018e2:	445a      	add	r2, fp
 80018e4:	4643      	mov	r3, r8
 80018e6:	4095      	lsls	r5, r2
 80018e8:	4093      	lsls	r3, r2
 80018ea:	40c8      	lsrs	r0, r1
 80018ec:	1e6a      	subs	r2, r5, #1
 80018ee:	4195      	sbcs	r5, r2
 80018f0:	4644      	mov	r4, r8
 80018f2:	4303      	orrs	r3, r0
 80018f4:	432b      	orrs	r3, r5
 80018f6:	40cc      	lsrs	r4, r1
 80018f8:	075a      	lsls	r2, r3, #29
 80018fa:	d092      	beq.n	8001822 <__aeabi_ddiv+0x45e>
 80018fc:	220f      	movs	r2, #15
 80018fe:	401a      	ands	r2, r3
 8001900:	2a04      	cmp	r2, #4
 8001902:	d188      	bne.n	8001816 <__aeabi_ddiv+0x452>
 8001904:	e78d      	b.n	8001822 <__aeabi_ddiv+0x45e>
 8001906:	0035      	movs	r5, r6
 8001908:	4281      	cmp	r1, r0
 800190a:	d000      	beq.n	800190e <__aeabi_ddiv+0x54a>
 800190c:	e74b      	b.n	80017a6 <__aeabi_ddiv+0x3e2>
 800190e:	9a00      	ldr	r2, [sp, #0]
 8001910:	4293      	cmp	r3, r2
 8001912:	d000      	beq.n	8001916 <__aeabi_ddiv+0x552>
 8001914:	e747      	b.n	80017a6 <__aeabi_ddiv+0x3e2>
 8001916:	e618      	b.n	800154a <__aeabi_ddiv+0x186>
 8001918:	42ae      	cmp	r6, r5
 800191a:	d99c      	bls.n	8001856 <__aeabi_ddiv+0x492>
 800191c:	2302      	movs	r3, #2
 800191e:	425b      	negs	r3, r3
 8001920:	469c      	mov	ip, r3
 8001922:	9b00      	ldr	r3, [sp, #0]
 8001924:	44e0      	add	r8, ip
 8001926:	469c      	mov	ip, r3
 8001928:	4465      	add	r5, ip
 800192a:	429d      	cmp	r5, r3
 800192c:	419b      	sbcs	r3, r3
 800192e:	425b      	negs	r3, r3
 8001930:	191b      	adds	r3, r3, r4
 8001932:	18c9      	adds	r1, r1, r3
 8001934:	e6e4      	b.n	8001700 <__aeabi_ddiv+0x33c>
 8001936:	4a15      	ldr	r2, [pc, #84]	; (800198c <__aeabi_ddiv+0x5c8>)
 8001938:	445a      	add	r2, fp
 800193a:	2a00      	cmp	r2, #0
 800193c:	dc00      	bgt.n	8001940 <__aeabi_ddiv+0x57c>
 800193e:	e744      	b.n	80017ca <__aeabi_ddiv+0x406>
 8001940:	2301      	movs	r3, #1
 8001942:	2500      	movs	r5, #0
 8001944:	4498      	add	r8, r3
 8001946:	e609      	b.n	800155c <__aeabi_ddiv+0x198>
 8001948:	0765      	lsls	r5, r4, #29
 800194a:	0264      	lsls	r4, r4, #9
 800194c:	0b24      	lsrs	r4, r4, #12
 800194e:	08db      	lsrs	r3, r3, #3
 8001950:	431d      	orrs	r5, r3
 8001952:	2300      	movs	r3, #0
 8001954:	e590      	b.n	8001478 <__aeabi_ddiv+0xb4>
 8001956:	9e00      	ldr	r6, [sp, #0]
 8001958:	3d02      	subs	r5, #2
 800195a:	0072      	lsls	r2, r6, #1
 800195c:	42b2      	cmp	r2, r6
 800195e:	41bf      	sbcs	r7, r7
 8001960:	427f      	negs	r7, r7
 8001962:	193c      	adds	r4, r7, r4
 8001964:	1909      	adds	r1, r1, r4
 8001966:	9200      	str	r2, [sp, #0]
 8001968:	e7ce      	b.n	8001908 <__aeabi_ddiv+0x544>
 800196a:	2480      	movs	r4, #128	; 0x80
 800196c:	4643      	mov	r3, r8
 800196e:	0324      	lsls	r4, r4, #12
 8001970:	431c      	orrs	r4, r3
 8001972:	0324      	lsls	r4, r4, #12
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <__aeabi_ddiv+0x5cc>)
 8001976:	0b24      	lsrs	r4, r4, #12
 8001978:	e57e      	b.n	8001478 <__aeabi_ddiv+0xb4>
 800197a:	9a00      	ldr	r2, [sp, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d3ea      	bcc.n	8001956 <__aeabi_ddiv+0x592>
 8001980:	0035      	movs	r5, r6
 8001982:	e7c4      	b.n	800190e <__aeabi_ddiv+0x54a>
 8001984:	0000043e 	.word	0x0000043e
 8001988:	0000041e 	.word	0x0000041e
 800198c:	000003ff 	.word	0x000003ff
 8001990:	000007ff 	.word	0x000007ff

08001994 <__eqdf2>:
 8001994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001996:	464f      	mov	r7, r9
 8001998:	4646      	mov	r6, r8
 800199a:	46d6      	mov	lr, sl
 800199c:	4694      	mov	ip, r2
 800199e:	4691      	mov	r9, r2
 80019a0:	031a      	lsls	r2, r3, #12
 80019a2:	0b12      	lsrs	r2, r2, #12
 80019a4:	4d18      	ldr	r5, [pc, #96]	; (8001a08 <__eqdf2+0x74>)
 80019a6:	b5c0      	push	{r6, r7, lr}
 80019a8:	004c      	lsls	r4, r1, #1
 80019aa:	030f      	lsls	r7, r1, #12
 80019ac:	4692      	mov	sl, r2
 80019ae:	005a      	lsls	r2, r3, #1
 80019b0:	0006      	movs	r6, r0
 80019b2:	4680      	mov	r8, r0
 80019b4:	0b3f      	lsrs	r7, r7, #12
 80019b6:	2001      	movs	r0, #1
 80019b8:	0d64      	lsrs	r4, r4, #21
 80019ba:	0fc9      	lsrs	r1, r1, #31
 80019bc:	0d52      	lsrs	r2, r2, #21
 80019be:	0fdb      	lsrs	r3, r3, #31
 80019c0:	42ac      	cmp	r4, r5
 80019c2:	d00a      	beq.n	80019da <__eqdf2+0x46>
 80019c4:	42aa      	cmp	r2, r5
 80019c6:	d003      	beq.n	80019d0 <__eqdf2+0x3c>
 80019c8:	4294      	cmp	r4, r2
 80019ca:	d101      	bne.n	80019d0 <__eqdf2+0x3c>
 80019cc:	4557      	cmp	r7, sl
 80019ce:	d00d      	beq.n	80019ec <__eqdf2+0x58>
 80019d0:	bce0      	pop	{r5, r6, r7}
 80019d2:	46ba      	mov	sl, r7
 80019d4:	46b1      	mov	r9, r6
 80019d6:	46a8      	mov	r8, r5
 80019d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019da:	003d      	movs	r5, r7
 80019dc:	4335      	orrs	r5, r6
 80019de:	d1f7      	bne.n	80019d0 <__eqdf2+0x3c>
 80019e0:	42a2      	cmp	r2, r4
 80019e2:	d1f5      	bne.n	80019d0 <__eqdf2+0x3c>
 80019e4:	4652      	mov	r2, sl
 80019e6:	4665      	mov	r5, ip
 80019e8:	432a      	orrs	r2, r5
 80019ea:	d1f1      	bne.n	80019d0 <__eqdf2+0x3c>
 80019ec:	2001      	movs	r0, #1
 80019ee:	45c8      	cmp	r8, r9
 80019f0:	d1ee      	bne.n	80019d0 <__eqdf2+0x3c>
 80019f2:	4299      	cmp	r1, r3
 80019f4:	d006      	beq.n	8001a04 <__eqdf2+0x70>
 80019f6:	2c00      	cmp	r4, #0
 80019f8:	d1ea      	bne.n	80019d0 <__eqdf2+0x3c>
 80019fa:	433e      	orrs	r6, r7
 80019fc:	0030      	movs	r0, r6
 80019fe:	1e46      	subs	r6, r0, #1
 8001a00:	41b0      	sbcs	r0, r6
 8001a02:	e7e5      	b.n	80019d0 <__eqdf2+0x3c>
 8001a04:	2000      	movs	r0, #0
 8001a06:	e7e3      	b.n	80019d0 <__eqdf2+0x3c>
 8001a08:	000007ff 	.word	0x000007ff

08001a0c <__gedf2>:
 8001a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a0e:	464e      	mov	r6, r9
 8001a10:	4645      	mov	r5, r8
 8001a12:	4657      	mov	r7, sl
 8001a14:	46de      	mov	lr, fp
 8001a16:	0004      	movs	r4, r0
 8001a18:	0018      	movs	r0, r3
 8001a1a:	b5e0      	push	{r5, r6, r7, lr}
 8001a1c:	0016      	movs	r6, r2
 8001a1e:	031b      	lsls	r3, r3, #12
 8001a20:	0b1b      	lsrs	r3, r3, #12
 8001a22:	4d32      	ldr	r5, [pc, #200]	; (8001aec <__gedf2+0xe0>)
 8001a24:	030f      	lsls	r7, r1, #12
 8001a26:	004a      	lsls	r2, r1, #1
 8001a28:	4699      	mov	r9, r3
 8001a2a:	0043      	lsls	r3, r0, #1
 8001a2c:	46a4      	mov	ip, r4
 8001a2e:	46b0      	mov	r8, r6
 8001a30:	0b3f      	lsrs	r7, r7, #12
 8001a32:	0d52      	lsrs	r2, r2, #21
 8001a34:	0fc9      	lsrs	r1, r1, #31
 8001a36:	0d5b      	lsrs	r3, r3, #21
 8001a38:	0fc0      	lsrs	r0, r0, #31
 8001a3a:	42aa      	cmp	r2, r5
 8001a3c:	d029      	beq.n	8001a92 <__gedf2+0x86>
 8001a3e:	42ab      	cmp	r3, r5
 8001a40:	d018      	beq.n	8001a74 <__gedf2+0x68>
 8001a42:	2a00      	cmp	r2, #0
 8001a44:	d12a      	bne.n	8001a9c <__gedf2+0x90>
 8001a46:	433c      	orrs	r4, r7
 8001a48:	46a3      	mov	fp, r4
 8001a4a:	4265      	negs	r5, r4
 8001a4c:	4165      	adcs	r5, r4
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d102      	bne.n	8001a58 <__gedf2+0x4c>
 8001a52:	464c      	mov	r4, r9
 8001a54:	4326      	orrs	r6, r4
 8001a56:	d027      	beq.n	8001aa8 <__gedf2+0x9c>
 8001a58:	2d00      	cmp	r5, #0
 8001a5a:	d115      	bne.n	8001a88 <__gedf2+0x7c>
 8001a5c:	4281      	cmp	r1, r0
 8001a5e:	d028      	beq.n	8001ab2 <__gedf2+0xa6>
 8001a60:	2002      	movs	r0, #2
 8001a62:	3901      	subs	r1, #1
 8001a64:	4008      	ands	r0, r1
 8001a66:	3801      	subs	r0, #1
 8001a68:	bcf0      	pop	{r4, r5, r6, r7}
 8001a6a:	46bb      	mov	fp, r7
 8001a6c:	46b2      	mov	sl, r6
 8001a6e:	46a9      	mov	r9, r5
 8001a70:	46a0      	mov	r8, r4
 8001a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a74:	464d      	mov	r5, r9
 8001a76:	432e      	orrs	r6, r5
 8001a78:	d12f      	bne.n	8001ada <__gedf2+0xce>
 8001a7a:	2a00      	cmp	r2, #0
 8001a7c:	d1ee      	bne.n	8001a5c <__gedf2+0x50>
 8001a7e:	433c      	orrs	r4, r7
 8001a80:	4265      	negs	r5, r4
 8001a82:	4165      	adcs	r5, r4
 8001a84:	2d00      	cmp	r5, #0
 8001a86:	d0e9      	beq.n	8001a5c <__gedf2+0x50>
 8001a88:	2800      	cmp	r0, #0
 8001a8a:	d1ed      	bne.n	8001a68 <__gedf2+0x5c>
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	4240      	negs	r0, r0
 8001a90:	e7ea      	b.n	8001a68 <__gedf2+0x5c>
 8001a92:	003d      	movs	r5, r7
 8001a94:	4325      	orrs	r5, r4
 8001a96:	d120      	bne.n	8001ada <__gedf2+0xce>
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d0eb      	beq.n	8001a74 <__gedf2+0x68>
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1dd      	bne.n	8001a5c <__gedf2+0x50>
 8001aa0:	464c      	mov	r4, r9
 8001aa2:	4326      	orrs	r6, r4
 8001aa4:	d1da      	bne.n	8001a5c <__gedf2+0x50>
 8001aa6:	e7db      	b.n	8001a60 <__gedf2+0x54>
 8001aa8:	465b      	mov	r3, fp
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0db      	beq.n	8001a68 <__gedf2+0x5c>
 8001ab0:	e7d6      	b.n	8001a60 <__gedf2+0x54>
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	dc0a      	bgt.n	8001acc <__gedf2+0xc0>
 8001ab6:	dbe7      	blt.n	8001a88 <__gedf2+0x7c>
 8001ab8:	454f      	cmp	r7, r9
 8001aba:	d8d1      	bhi.n	8001a60 <__gedf2+0x54>
 8001abc:	d010      	beq.n	8001ae0 <__gedf2+0xd4>
 8001abe:	2000      	movs	r0, #0
 8001ac0:	454f      	cmp	r7, r9
 8001ac2:	d2d1      	bcs.n	8001a68 <__gedf2+0x5c>
 8001ac4:	2900      	cmp	r1, #0
 8001ac6:	d0e1      	beq.n	8001a8c <__gedf2+0x80>
 8001ac8:	0008      	movs	r0, r1
 8001aca:	e7cd      	b.n	8001a68 <__gedf2+0x5c>
 8001acc:	4243      	negs	r3, r0
 8001ace:	4158      	adcs	r0, r3
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	4240      	negs	r0, r0
 8001ad4:	4018      	ands	r0, r3
 8001ad6:	3801      	subs	r0, #1
 8001ad8:	e7c6      	b.n	8001a68 <__gedf2+0x5c>
 8001ada:	2002      	movs	r0, #2
 8001adc:	4240      	negs	r0, r0
 8001ade:	e7c3      	b.n	8001a68 <__gedf2+0x5c>
 8001ae0:	45c4      	cmp	ip, r8
 8001ae2:	d8bd      	bhi.n	8001a60 <__gedf2+0x54>
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	45c4      	cmp	ip, r8
 8001ae8:	d2be      	bcs.n	8001a68 <__gedf2+0x5c>
 8001aea:	e7eb      	b.n	8001ac4 <__gedf2+0xb8>
 8001aec:	000007ff 	.word	0x000007ff

08001af0 <__ledf2>:
 8001af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001af2:	464e      	mov	r6, r9
 8001af4:	4645      	mov	r5, r8
 8001af6:	4657      	mov	r7, sl
 8001af8:	46de      	mov	lr, fp
 8001afa:	0004      	movs	r4, r0
 8001afc:	0018      	movs	r0, r3
 8001afe:	b5e0      	push	{r5, r6, r7, lr}
 8001b00:	0016      	movs	r6, r2
 8001b02:	031b      	lsls	r3, r3, #12
 8001b04:	0b1b      	lsrs	r3, r3, #12
 8001b06:	4d31      	ldr	r5, [pc, #196]	; (8001bcc <__ledf2+0xdc>)
 8001b08:	030f      	lsls	r7, r1, #12
 8001b0a:	004a      	lsls	r2, r1, #1
 8001b0c:	4699      	mov	r9, r3
 8001b0e:	0043      	lsls	r3, r0, #1
 8001b10:	46a4      	mov	ip, r4
 8001b12:	46b0      	mov	r8, r6
 8001b14:	0b3f      	lsrs	r7, r7, #12
 8001b16:	0d52      	lsrs	r2, r2, #21
 8001b18:	0fc9      	lsrs	r1, r1, #31
 8001b1a:	0d5b      	lsrs	r3, r3, #21
 8001b1c:	0fc0      	lsrs	r0, r0, #31
 8001b1e:	42aa      	cmp	r2, r5
 8001b20:	d011      	beq.n	8001b46 <__ledf2+0x56>
 8001b22:	42ab      	cmp	r3, r5
 8001b24:	d014      	beq.n	8001b50 <__ledf2+0x60>
 8001b26:	2a00      	cmp	r2, #0
 8001b28:	d12f      	bne.n	8001b8a <__ledf2+0x9a>
 8001b2a:	433c      	orrs	r4, r7
 8001b2c:	46a3      	mov	fp, r4
 8001b2e:	4265      	negs	r5, r4
 8001b30:	4165      	adcs	r5, r4
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d114      	bne.n	8001b60 <__ledf2+0x70>
 8001b36:	464c      	mov	r4, r9
 8001b38:	4326      	orrs	r6, r4
 8001b3a:	d111      	bne.n	8001b60 <__ledf2+0x70>
 8001b3c:	465b      	mov	r3, fp
 8001b3e:	2000      	movs	r0, #0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d017      	beq.n	8001b74 <__ledf2+0x84>
 8001b44:	e010      	b.n	8001b68 <__ledf2+0x78>
 8001b46:	003d      	movs	r5, r7
 8001b48:	4325      	orrs	r5, r4
 8001b4a:	d112      	bne.n	8001b72 <__ledf2+0x82>
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d11c      	bne.n	8001b8a <__ledf2+0x9a>
 8001b50:	464d      	mov	r5, r9
 8001b52:	432e      	orrs	r6, r5
 8001b54:	d10d      	bne.n	8001b72 <__ledf2+0x82>
 8001b56:	2a00      	cmp	r2, #0
 8001b58:	d104      	bne.n	8001b64 <__ledf2+0x74>
 8001b5a:	433c      	orrs	r4, r7
 8001b5c:	4265      	negs	r5, r4
 8001b5e:	4165      	adcs	r5, r4
 8001b60:	2d00      	cmp	r5, #0
 8001b62:	d10d      	bne.n	8001b80 <__ledf2+0x90>
 8001b64:	4281      	cmp	r1, r0
 8001b66:	d016      	beq.n	8001b96 <__ledf2+0xa6>
 8001b68:	2002      	movs	r0, #2
 8001b6a:	3901      	subs	r1, #1
 8001b6c:	4008      	ands	r0, r1
 8001b6e:	3801      	subs	r0, #1
 8001b70:	e000      	b.n	8001b74 <__ledf2+0x84>
 8001b72:	2002      	movs	r0, #2
 8001b74:	bcf0      	pop	{r4, r5, r6, r7}
 8001b76:	46bb      	mov	fp, r7
 8001b78:	46b2      	mov	sl, r6
 8001b7a:	46a9      	mov	r9, r5
 8001b7c:	46a0      	mov	r8, r4
 8001b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b80:	2800      	cmp	r0, #0
 8001b82:	d1f7      	bne.n	8001b74 <__ledf2+0x84>
 8001b84:	2001      	movs	r0, #1
 8001b86:	4240      	negs	r0, r0
 8001b88:	e7f4      	b.n	8001b74 <__ledf2+0x84>
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1ea      	bne.n	8001b64 <__ledf2+0x74>
 8001b8e:	464c      	mov	r4, r9
 8001b90:	4326      	orrs	r6, r4
 8001b92:	d1e7      	bne.n	8001b64 <__ledf2+0x74>
 8001b94:	e7e8      	b.n	8001b68 <__ledf2+0x78>
 8001b96:	429a      	cmp	r2, r3
 8001b98:	dd06      	ble.n	8001ba8 <__ledf2+0xb8>
 8001b9a:	4243      	negs	r3, r0
 8001b9c:	4158      	adcs	r0, r3
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	4240      	negs	r0, r0
 8001ba2:	4018      	ands	r0, r3
 8001ba4:	3801      	subs	r0, #1
 8001ba6:	e7e5      	b.n	8001b74 <__ledf2+0x84>
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	dbe9      	blt.n	8001b80 <__ledf2+0x90>
 8001bac:	454f      	cmp	r7, r9
 8001bae:	d8db      	bhi.n	8001b68 <__ledf2+0x78>
 8001bb0:	d006      	beq.n	8001bc0 <__ledf2+0xd0>
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	454f      	cmp	r7, r9
 8001bb6:	d2dd      	bcs.n	8001b74 <__ledf2+0x84>
 8001bb8:	2900      	cmp	r1, #0
 8001bba:	d0e3      	beq.n	8001b84 <__ledf2+0x94>
 8001bbc:	0008      	movs	r0, r1
 8001bbe:	e7d9      	b.n	8001b74 <__ledf2+0x84>
 8001bc0:	45c4      	cmp	ip, r8
 8001bc2:	d8d1      	bhi.n	8001b68 <__ledf2+0x78>
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	45c4      	cmp	ip, r8
 8001bc8:	d2d4      	bcs.n	8001b74 <__ledf2+0x84>
 8001bca:	e7f5      	b.n	8001bb8 <__ledf2+0xc8>
 8001bcc:	000007ff 	.word	0x000007ff

08001bd0 <__aeabi_dmul>:
 8001bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bd2:	4657      	mov	r7, sl
 8001bd4:	464e      	mov	r6, r9
 8001bd6:	4645      	mov	r5, r8
 8001bd8:	46de      	mov	lr, fp
 8001bda:	b5e0      	push	{r5, r6, r7, lr}
 8001bdc:	4698      	mov	r8, r3
 8001bde:	030c      	lsls	r4, r1, #12
 8001be0:	004b      	lsls	r3, r1, #1
 8001be2:	0006      	movs	r6, r0
 8001be4:	4692      	mov	sl, r2
 8001be6:	b087      	sub	sp, #28
 8001be8:	0b24      	lsrs	r4, r4, #12
 8001bea:	0d5b      	lsrs	r3, r3, #21
 8001bec:	0fcf      	lsrs	r7, r1, #31
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d06c      	beq.n	8001ccc <__aeabi_dmul+0xfc>
 8001bf2:	4add      	ldr	r2, [pc, #884]	; (8001f68 <__aeabi_dmul+0x398>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d100      	bne.n	8001bfa <__aeabi_dmul+0x2a>
 8001bf8:	e086      	b.n	8001d08 <__aeabi_dmul+0x138>
 8001bfa:	0f42      	lsrs	r2, r0, #29
 8001bfc:	00e4      	lsls	r4, r4, #3
 8001bfe:	4314      	orrs	r4, r2
 8001c00:	2280      	movs	r2, #128	; 0x80
 8001c02:	0412      	lsls	r2, r2, #16
 8001c04:	4314      	orrs	r4, r2
 8001c06:	4ad9      	ldr	r2, [pc, #868]	; (8001f6c <__aeabi_dmul+0x39c>)
 8001c08:	00c5      	lsls	r5, r0, #3
 8001c0a:	4694      	mov	ip, r2
 8001c0c:	4463      	add	r3, ip
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	2300      	movs	r3, #0
 8001c12:	4699      	mov	r9, r3
 8001c14:	469b      	mov	fp, r3
 8001c16:	4643      	mov	r3, r8
 8001c18:	4642      	mov	r2, r8
 8001c1a:	031e      	lsls	r6, r3, #12
 8001c1c:	0fd2      	lsrs	r2, r2, #31
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4650      	mov	r0, sl
 8001c22:	4690      	mov	r8, r2
 8001c24:	0b36      	lsrs	r6, r6, #12
 8001c26:	0d5b      	lsrs	r3, r3, #21
 8001c28:	d100      	bne.n	8001c2c <__aeabi_dmul+0x5c>
 8001c2a:	e078      	b.n	8001d1e <__aeabi_dmul+0x14e>
 8001c2c:	4ace      	ldr	r2, [pc, #824]	; (8001f68 <__aeabi_dmul+0x398>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d01d      	beq.n	8001c6e <__aeabi_dmul+0x9e>
 8001c32:	49ce      	ldr	r1, [pc, #824]	; (8001f6c <__aeabi_dmul+0x39c>)
 8001c34:	0f42      	lsrs	r2, r0, #29
 8001c36:	468c      	mov	ip, r1
 8001c38:	9900      	ldr	r1, [sp, #0]
 8001c3a:	4463      	add	r3, ip
 8001c3c:	00f6      	lsls	r6, r6, #3
 8001c3e:	468c      	mov	ip, r1
 8001c40:	4316      	orrs	r6, r2
 8001c42:	2280      	movs	r2, #128	; 0x80
 8001c44:	449c      	add	ip, r3
 8001c46:	0412      	lsls	r2, r2, #16
 8001c48:	4663      	mov	r3, ip
 8001c4a:	4316      	orrs	r6, r2
 8001c4c:	00c2      	lsls	r2, r0, #3
 8001c4e:	2000      	movs	r0, #0
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	9900      	ldr	r1, [sp, #0]
 8001c54:	4643      	mov	r3, r8
 8001c56:	3101      	adds	r1, #1
 8001c58:	468c      	mov	ip, r1
 8001c5a:	4649      	mov	r1, r9
 8001c5c:	407b      	eors	r3, r7
 8001c5e:	9301      	str	r3, [sp, #4]
 8001c60:	290f      	cmp	r1, #15
 8001c62:	d900      	bls.n	8001c66 <__aeabi_dmul+0x96>
 8001c64:	e07e      	b.n	8001d64 <__aeabi_dmul+0x194>
 8001c66:	4bc2      	ldr	r3, [pc, #776]	; (8001f70 <__aeabi_dmul+0x3a0>)
 8001c68:	0089      	lsls	r1, r1, #2
 8001c6a:	5859      	ldr	r1, [r3, r1]
 8001c6c:	468f      	mov	pc, r1
 8001c6e:	4652      	mov	r2, sl
 8001c70:	9b00      	ldr	r3, [sp, #0]
 8001c72:	4332      	orrs	r2, r6
 8001c74:	d000      	beq.n	8001c78 <__aeabi_dmul+0xa8>
 8001c76:	e156      	b.n	8001f26 <__aeabi_dmul+0x356>
 8001c78:	49bb      	ldr	r1, [pc, #748]	; (8001f68 <__aeabi_dmul+0x398>)
 8001c7a:	2600      	movs	r6, #0
 8001c7c:	468c      	mov	ip, r1
 8001c7e:	4463      	add	r3, ip
 8001c80:	4649      	mov	r1, r9
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	2302      	movs	r3, #2
 8001c86:	4319      	orrs	r1, r3
 8001c88:	4689      	mov	r9, r1
 8001c8a:	2002      	movs	r0, #2
 8001c8c:	e7e1      	b.n	8001c52 <__aeabi_dmul+0x82>
 8001c8e:	4643      	mov	r3, r8
 8001c90:	9301      	str	r3, [sp, #4]
 8001c92:	0034      	movs	r4, r6
 8001c94:	0015      	movs	r5, r2
 8001c96:	4683      	mov	fp, r0
 8001c98:	465b      	mov	r3, fp
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d05e      	beq.n	8001d5c <__aeabi_dmul+0x18c>
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_dmul+0xd4>
 8001ca2:	e1f3      	b.n	800208c <__aeabi_dmul+0x4bc>
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d000      	beq.n	8001caa <__aeabi_dmul+0xda>
 8001ca8:	e118      	b.n	8001edc <__aeabi_dmul+0x30c>
 8001caa:	2200      	movs	r2, #0
 8001cac:	2400      	movs	r4, #0
 8001cae:	2500      	movs	r5, #0
 8001cb0:	9b01      	ldr	r3, [sp, #4]
 8001cb2:	0512      	lsls	r2, r2, #20
 8001cb4:	4322      	orrs	r2, r4
 8001cb6:	07db      	lsls	r3, r3, #31
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	0028      	movs	r0, r5
 8001cbc:	0011      	movs	r1, r2
 8001cbe:	b007      	add	sp, #28
 8001cc0:	bcf0      	pop	{r4, r5, r6, r7}
 8001cc2:	46bb      	mov	fp, r7
 8001cc4:	46b2      	mov	sl, r6
 8001cc6:	46a9      	mov	r9, r5
 8001cc8:	46a0      	mov	r8, r4
 8001cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ccc:	0025      	movs	r5, r4
 8001cce:	4305      	orrs	r5, r0
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dmul+0x104>
 8001cd2:	e141      	b.n	8001f58 <__aeabi_dmul+0x388>
 8001cd4:	2c00      	cmp	r4, #0
 8001cd6:	d100      	bne.n	8001cda <__aeabi_dmul+0x10a>
 8001cd8:	e1ad      	b.n	8002036 <__aeabi_dmul+0x466>
 8001cda:	0020      	movs	r0, r4
 8001cdc:	f000 fe20 	bl	8002920 <__clzsi2>
 8001ce0:	0001      	movs	r1, r0
 8001ce2:	0002      	movs	r2, r0
 8001ce4:	390b      	subs	r1, #11
 8001ce6:	231d      	movs	r3, #29
 8001ce8:	0010      	movs	r0, r2
 8001cea:	1a5b      	subs	r3, r3, r1
 8001cec:	0031      	movs	r1, r6
 8001cee:	0035      	movs	r5, r6
 8001cf0:	3808      	subs	r0, #8
 8001cf2:	4084      	lsls	r4, r0
 8001cf4:	40d9      	lsrs	r1, r3
 8001cf6:	4085      	lsls	r5, r0
 8001cf8:	430c      	orrs	r4, r1
 8001cfa:	489e      	ldr	r0, [pc, #632]	; (8001f74 <__aeabi_dmul+0x3a4>)
 8001cfc:	1a83      	subs	r3, r0, r2
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2300      	movs	r3, #0
 8001d02:	4699      	mov	r9, r3
 8001d04:	469b      	mov	fp, r3
 8001d06:	e786      	b.n	8001c16 <__aeabi_dmul+0x46>
 8001d08:	0005      	movs	r5, r0
 8001d0a:	4325      	orrs	r5, r4
 8001d0c:	d000      	beq.n	8001d10 <__aeabi_dmul+0x140>
 8001d0e:	e11c      	b.n	8001f4a <__aeabi_dmul+0x37a>
 8001d10:	2208      	movs	r2, #8
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	2302      	movs	r3, #2
 8001d16:	2400      	movs	r4, #0
 8001d18:	4691      	mov	r9, r2
 8001d1a:	469b      	mov	fp, r3
 8001d1c:	e77b      	b.n	8001c16 <__aeabi_dmul+0x46>
 8001d1e:	4652      	mov	r2, sl
 8001d20:	4332      	orrs	r2, r6
 8001d22:	d100      	bne.n	8001d26 <__aeabi_dmul+0x156>
 8001d24:	e10a      	b.n	8001f3c <__aeabi_dmul+0x36c>
 8001d26:	2e00      	cmp	r6, #0
 8001d28:	d100      	bne.n	8001d2c <__aeabi_dmul+0x15c>
 8001d2a:	e176      	b.n	800201a <__aeabi_dmul+0x44a>
 8001d2c:	0030      	movs	r0, r6
 8001d2e:	f000 fdf7 	bl	8002920 <__clzsi2>
 8001d32:	0002      	movs	r2, r0
 8001d34:	3a0b      	subs	r2, #11
 8001d36:	231d      	movs	r3, #29
 8001d38:	0001      	movs	r1, r0
 8001d3a:	1a9b      	subs	r3, r3, r2
 8001d3c:	4652      	mov	r2, sl
 8001d3e:	3908      	subs	r1, #8
 8001d40:	40da      	lsrs	r2, r3
 8001d42:	408e      	lsls	r6, r1
 8001d44:	4316      	orrs	r6, r2
 8001d46:	4652      	mov	r2, sl
 8001d48:	408a      	lsls	r2, r1
 8001d4a:	9b00      	ldr	r3, [sp, #0]
 8001d4c:	4989      	ldr	r1, [pc, #548]	; (8001f74 <__aeabi_dmul+0x3a4>)
 8001d4e:	1a18      	subs	r0, r3, r0
 8001d50:	0003      	movs	r3, r0
 8001d52:	468c      	mov	ip, r1
 8001d54:	4463      	add	r3, ip
 8001d56:	2000      	movs	r0, #0
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	e77a      	b.n	8001c52 <__aeabi_dmul+0x82>
 8001d5c:	2400      	movs	r4, #0
 8001d5e:	2500      	movs	r5, #0
 8001d60:	4a81      	ldr	r2, [pc, #516]	; (8001f68 <__aeabi_dmul+0x398>)
 8001d62:	e7a5      	b.n	8001cb0 <__aeabi_dmul+0xe0>
 8001d64:	0c2f      	lsrs	r7, r5, #16
 8001d66:	042d      	lsls	r5, r5, #16
 8001d68:	0c2d      	lsrs	r5, r5, #16
 8001d6a:	002b      	movs	r3, r5
 8001d6c:	0c11      	lsrs	r1, r2, #16
 8001d6e:	0412      	lsls	r2, r2, #16
 8001d70:	0c12      	lsrs	r2, r2, #16
 8001d72:	4353      	muls	r3, r2
 8001d74:	4698      	mov	r8, r3
 8001d76:	0013      	movs	r3, r2
 8001d78:	0028      	movs	r0, r5
 8001d7a:	437b      	muls	r3, r7
 8001d7c:	4699      	mov	r9, r3
 8001d7e:	4348      	muls	r0, r1
 8001d80:	4448      	add	r0, r9
 8001d82:	4683      	mov	fp, r0
 8001d84:	4640      	mov	r0, r8
 8001d86:	000b      	movs	r3, r1
 8001d88:	0c00      	lsrs	r0, r0, #16
 8001d8a:	4682      	mov	sl, r0
 8001d8c:	4658      	mov	r0, fp
 8001d8e:	437b      	muls	r3, r7
 8001d90:	4450      	add	r0, sl
 8001d92:	9302      	str	r3, [sp, #8]
 8001d94:	4581      	cmp	r9, r0
 8001d96:	d906      	bls.n	8001da6 <__aeabi_dmul+0x1d6>
 8001d98:	469a      	mov	sl, r3
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	025b      	lsls	r3, r3, #9
 8001d9e:	4699      	mov	r9, r3
 8001da0:	44ca      	add	sl, r9
 8001da2:	4653      	mov	r3, sl
 8001da4:	9302      	str	r3, [sp, #8]
 8001da6:	0c03      	lsrs	r3, r0, #16
 8001da8:	469b      	mov	fp, r3
 8001daa:	4643      	mov	r3, r8
 8001dac:	041b      	lsls	r3, r3, #16
 8001dae:	0400      	lsls	r0, r0, #16
 8001db0:	0c1b      	lsrs	r3, r3, #16
 8001db2:	4698      	mov	r8, r3
 8001db4:	0003      	movs	r3, r0
 8001db6:	4443      	add	r3, r8
 8001db8:	9304      	str	r3, [sp, #16]
 8001dba:	0c33      	lsrs	r3, r6, #16
 8001dbc:	4699      	mov	r9, r3
 8001dbe:	002b      	movs	r3, r5
 8001dc0:	0436      	lsls	r6, r6, #16
 8001dc2:	0c36      	lsrs	r6, r6, #16
 8001dc4:	4373      	muls	r3, r6
 8001dc6:	4698      	mov	r8, r3
 8001dc8:	0033      	movs	r3, r6
 8001dca:	437b      	muls	r3, r7
 8001dcc:	469a      	mov	sl, r3
 8001dce:	464b      	mov	r3, r9
 8001dd0:	435d      	muls	r5, r3
 8001dd2:	435f      	muls	r7, r3
 8001dd4:	4643      	mov	r3, r8
 8001dd6:	4455      	add	r5, sl
 8001dd8:	0c18      	lsrs	r0, r3, #16
 8001dda:	1940      	adds	r0, r0, r5
 8001ddc:	4582      	cmp	sl, r0
 8001dde:	d903      	bls.n	8001de8 <__aeabi_dmul+0x218>
 8001de0:	2380      	movs	r3, #128	; 0x80
 8001de2:	025b      	lsls	r3, r3, #9
 8001de4:	469a      	mov	sl, r3
 8001de6:	4457      	add	r7, sl
 8001de8:	0c05      	lsrs	r5, r0, #16
 8001dea:	19eb      	adds	r3, r5, r7
 8001dec:	9305      	str	r3, [sp, #20]
 8001dee:	4643      	mov	r3, r8
 8001df0:	041d      	lsls	r5, r3, #16
 8001df2:	0c2d      	lsrs	r5, r5, #16
 8001df4:	0400      	lsls	r0, r0, #16
 8001df6:	1940      	adds	r0, r0, r5
 8001df8:	0c25      	lsrs	r5, r4, #16
 8001dfa:	0424      	lsls	r4, r4, #16
 8001dfc:	0c24      	lsrs	r4, r4, #16
 8001dfe:	0027      	movs	r7, r4
 8001e00:	4357      	muls	r7, r2
 8001e02:	436a      	muls	r2, r5
 8001e04:	4690      	mov	r8, r2
 8001e06:	002a      	movs	r2, r5
 8001e08:	0c3b      	lsrs	r3, r7, #16
 8001e0a:	469a      	mov	sl, r3
 8001e0c:	434a      	muls	r2, r1
 8001e0e:	4361      	muls	r1, r4
 8001e10:	4441      	add	r1, r8
 8001e12:	4451      	add	r1, sl
 8001e14:	4483      	add	fp, r0
 8001e16:	4588      	cmp	r8, r1
 8001e18:	d903      	bls.n	8001e22 <__aeabi_dmul+0x252>
 8001e1a:	2380      	movs	r3, #128	; 0x80
 8001e1c:	025b      	lsls	r3, r3, #9
 8001e1e:	4698      	mov	r8, r3
 8001e20:	4442      	add	r2, r8
 8001e22:	043f      	lsls	r7, r7, #16
 8001e24:	0c0b      	lsrs	r3, r1, #16
 8001e26:	0c3f      	lsrs	r7, r7, #16
 8001e28:	0409      	lsls	r1, r1, #16
 8001e2a:	19c9      	adds	r1, r1, r7
 8001e2c:	0027      	movs	r7, r4
 8001e2e:	4698      	mov	r8, r3
 8001e30:	464b      	mov	r3, r9
 8001e32:	4377      	muls	r7, r6
 8001e34:	435c      	muls	r4, r3
 8001e36:	436e      	muls	r6, r5
 8001e38:	435d      	muls	r5, r3
 8001e3a:	0c3b      	lsrs	r3, r7, #16
 8001e3c:	4699      	mov	r9, r3
 8001e3e:	19a4      	adds	r4, r4, r6
 8001e40:	444c      	add	r4, r9
 8001e42:	4442      	add	r2, r8
 8001e44:	9503      	str	r5, [sp, #12]
 8001e46:	42a6      	cmp	r6, r4
 8001e48:	d904      	bls.n	8001e54 <__aeabi_dmul+0x284>
 8001e4a:	2380      	movs	r3, #128	; 0x80
 8001e4c:	025b      	lsls	r3, r3, #9
 8001e4e:	4698      	mov	r8, r3
 8001e50:	4445      	add	r5, r8
 8001e52:	9503      	str	r5, [sp, #12]
 8001e54:	9b02      	ldr	r3, [sp, #8]
 8001e56:	043f      	lsls	r7, r7, #16
 8001e58:	445b      	add	r3, fp
 8001e5a:	001e      	movs	r6, r3
 8001e5c:	4283      	cmp	r3, r0
 8001e5e:	4180      	sbcs	r0, r0
 8001e60:	0423      	lsls	r3, r4, #16
 8001e62:	4698      	mov	r8, r3
 8001e64:	9b05      	ldr	r3, [sp, #20]
 8001e66:	0c3f      	lsrs	r7, r7, #16
 8001e68:	4447      	add	r7, r8
 8001e6a:	4698      	mov	r8, r3
 8001e6c:	1876      	adds	r6, r6, r1
 8001e6e:	428e      	cmp	r6, r1
 8001e70:	4189      	sbcs	r1, r1
 8001e72:	4447      	add	r7, r8
 8001e74:	4240      	negs	r0, r0
 8001e76:	183d      	adds	r5, r7, r0
 8001e78:	46a8      	mov	r8, r5
 8001e7a:	4693      	mov	fp, r2
 8001e7c:	4249      	negs	r1, r1
 8001e7e:	468a      	mov	sl, r1
 8001e80:	44c3      	add	fp, r8
 8001e82:	429f      	cmp	r7, r3
 8001e84:	41bf      	sbcs	r7, r7
 8001e86:	4580      	cmp	r8, r0
 8001e88:	4180      	sbcs	r0, r0
 8001e8a:	9b03      	ldr	r3, [sp, #12]
 8001e8c:	44da      	add	sl, fp
 8001e8e:	4698      	mov	r8, r3
 8001e90:	4653      	mov	r3, sl
 8001e92:	4240      	negs	r0, r0
 8001e94:	427f      	negs	r7, r7
 8001e96:	4307      	orrs	r7, r0
 8001e98:	0c24      	lsrs	r4, r4, #16
 8001e9a:	4593      	cmp	fp, r2
 8001e9c:	4192      	sbcs	r2, r2
 8001e9e:	458a      	cmp	sl, r1
 8001ea0:	4189      	sbcs	r1, r1
 8001ea2:	193f      	adds	r7, r7, r4
 8001ea4:	0ddc      	lsrs	r4, r3, #23
 8001ea6:	9b04      	ldr	r3, [sp, #16]
 8001ea8:	0275      	lsls	r5, r6, #9
 8001eaa:	431d      	orrs	r5, r3
 8001eac:	1e68      	subs	r0, r5, #1
 8001eae:	4185      	sbcs	r5, r0
 8001eb0:	4653      	mov	r3, sl
 8001eb2:	4252      	negs	r2, r2
 8001eb4:	4249      	negs	r1, r1
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	18bf      	adds	r7, r7, r2
 8001eba:	4447      	add	r7, r8
 8001ebc:	0df6      	lsrs	r6, r6, #23
 8001ebe:	027f      	lsls	r7, r7, #9
 8001ec0:	4335      	orrs	r5, r6
 8001ec2:	025a      	lsls	r2, r3, #9
 8001ec4:	433c      	orrs	r4, r7
 8001ec6:	4315      	orrs	r5, r2
 8001ec8:	01fb      	lsls	r3, r7, #7
 8001eca:	d400      	bmi.n	8001ece <__aeabi_dmul+0x2fe>
 8001ecc:	e0c1      	b.n	8002052 <__aeabi_dmul+0x482>
 8001ece:	2101      	movs	r1, #1
 8001ed0:	086a      	lsrs	r2, r5, #1
 8001ed2:	400d      	ands	r5, r1
 8001ed4:	4315      	orrs	r5, r2
 8001ed6:	07e2      	lsls	r2, r4, #31
 8001ed8:	4315      	orrs	r5, r2
 8001eda:	0864      	lsrs	r4, r4, #1
 8001edc:	4926      	ldr	r1, [pc, #152]	; (8001f78 <__aeabi_dmul+0x3a8>)
 8001ede:	4461      	add	r1, ip
 8001ee0:	2900      	cmp	r1, #0
 8001ee2:	dd56      	ble.n	8001f92 <__aeabi_dmul+0x3c2>
 8001ee4:	076b      	lsls	r3, r5, #29
 8001ee6:	d009      	beq.n	8001efc <__aeabi_dmul+0x32c>
 8001ee8:	220f      	movs	r2, #15
 8001eea:	402a      	ands	r2, r5
 8001eec:	2a04      	cmp	r2, #4
 8001eee:	d005      	beq.n	8001efc <__aeabi_dmul+0x32c>
 8001ef0:	1d2a      	adds	r2, r5, #4
 8001ef2:	42aa      	cmp	r2, r5
 8001ef4:	41ad      	sbcs	r5, r5
 8001ef6:	426d      	negs	r5, r5
 8001ef8:	1964      	adds	r4, r4, r5
 8001efa:	0015      	movs	r5, r2
 8001efc:	01e3      	lsls	r3, r4, #7
 8001efe:	d504      	bpl.n	8001f0a <__aeabi_dmul+0x33a>
 8001f00:	2180      	movs	r1, #128	; 0x80
 8001f02:	4a1e      	ldr	r2, [pc, #120]	; (8001f7c <__aeabi_dmul+0x3ac>)
 8001f04:	00c9      	lsls	r1, r1, #3
 8001f06:	4014      	ands	r4, r2
 8001f08:	4461      	add	r1, ip
 8001f0a:	4a1d      	ldr	r2, [pc, #116]	; (8001f80 <__aeabi_dmul+0x3b0>)
 8001f0c:	4291      	cmp	r1, r2
 8001f0e:	dd00      	ble.n	8001f12 <__aeabi_dmul+0x342>
 8001f10:	e724      	b.n	8001d5c <__aeabi_dmul+0x18c>
 8001f12:	0762      	lsls	r2, r4, #29
 8001f14:	08ed      	lsrs	r5, r5, #3
 8001f16:	0264      	lsls	r4, r4, #9
 8001f18:	0549      	lsls	r1, r1, #21
 8001f1a:	4315      	orrs	r5, r2
 8001f1c:	0b24      	lsrs	r4, r4, #12
 8001f1e:	0d4a      	lsrs	r2, r1, #21
 8001f20:	e6c6      	b.n	8001cb0 <__aeabi_dmul+0xe0>
 8001f22:	9701      	str	r7, [sp, #4]
 8001f24:	e6b8      	b.n	8001c98 <__aeabi_dmul+0xc8>
 8001f26:	4a10      	ldr	r2, [pc, #64]	; (8001f68 <__aeabi_dmul+0x398>)
 8001f28:	2003      	movs	r0, #3
 8001f2a:	4694      	mov	ip, r2
 8001f2c:	4463      	add	r3, ip
 8001f2e:	464a      	mov	r2, r9
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	2303      	movs	r3, #3
 8001f34:	431a      	orrs	r2, r3
 8001f36:	4691      	mov	r9, r2
 8001f38:	4652      	mov	r2, sl
 8001f3a:	e68a      	b.n	8001c52 <__aeabi_dmul+0x82>
 8001f3c:	4649      	mov	r1, r9
 8001f3e:	2301      	movs	r3, #1
 8001f40:	4319      	orrs	r1, r3
 8001f42:	4689      	mov	r9, r1
 8001f44:	2600      	movs	r6, #0
 8001f46:	2001      	movs	r0, #1
 8001f48:	e683      	b.n	8001c52 <__aeabi_dmul+0x82>
 8001f4a:	220c      	movs	r2, #12
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	2303      	movs	r3, #3
 8001f50:	0005      	movs	r5, r0
 8001f52:	4691      	mov	r9, r2
 8001f54:	469b      	mov	fp, r3
 8001f56:	e65e      	b.n	8001c16 <__aeabi_dmul+0x46>
 8001f58:	2304      	movs	r3, #4
 8001f5a:	4699      	mov	r9, r3
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	3301      	adds	r3, #1
 8001f62:	2400      	movs	r4, #0
 8001f64:	469b      	mov	fp, r3
 8001f66:	e656      	b.n	8001c16 <__aeabi_dmul+0x46>
 8001f68:	000007ff 	.word	0x000007ff
 8001f6c:	fffffc01 	.word	0xfffffc01
 8001f70:	08008560 	.word	0x08008560
 8001f74:	fffffc0d 	.word	0xfffffc0d
 8001f78:	000003ff 	.word	0x000003ff
 8001f7c:	feffffff 	.word	0xfeffffff
 8001f80:	000007fe 	.word	0x000007fe
 8001f84:	2300      	movs	r3, #0
 8001f86:	2480      	movs	r4, #128	; 0x80
 8001f88:	2500      	movs	r5, #0
 8001f8a:	4a44      	ldr	r2, [pc, #272]	; (800209c <__aeabi_dmul+0x4cc>)
 8001f8c:	9301      	str	r3, [sp, #4]
 8001f8e:	0324      	lsls	r4, r4, #12
 8001f90:	e68e      	b.n	8001cb0 <__aeabi_dmul+0xe0>
 8001f92:	2001      	movs	r0, #1
 8001f94:	1a40      	subs	r0, r0, r1
 8001f96:	2838      	cmp	r0, #56	; 0x38
 8001f98:	dd00      	ble.n	8001f9c <__aeabi_dmul+0x3cc>
 8001f9a:	e686      	b.n	8001caa <__aeabi_dmul+0xda>
 8001f9c:	281f      	cmp	r0, #31
 8001f9e:	dd5b      	ble.n	8002058 <__aeabi_dmul+0x488>
 8001fa0:	221f      	movs	r2, #31
 8001fa2:	0023      	movs	r3, r4
 8001fa4:	4252      	negs	r2, r2
 8001fa6:	1a51      	subs	r1, r2, r1
 8001fa8:	40cb      	lsrs	r3, r1
 8001faa:	0019      	movs	r1, r3
 8001fac:	2820      	cmp	r0, #32
 8001fae:	d003      	beq.n	8001fb8 <__aeabi_dmul+0x3e8>
 8001fb0:	4a3b      	ldr	r2, [pc, #236]	; (80020a0 <__aeabi_dmul+0x4d0>)
 8001fb2:	4462      	add	r2, ip
 8001fb4:	4094      	lsls	r4, r2
 8001fb6:	4325      	orrs	r5, r4
 8001fb8:	1e6a      	subs	r2, r5, #1
 8001fba:	4195      	sbcs	r5, r2
 8001fbc:	002a      	movs	r2, r5
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	2107      	movs	r1, #7
 8001fc2:	000d      	movs	r5, r1
 8001fc4:	2400      	movs	r4, #0
 8001fc6:	4015      	ands	r5, r2
 8001fc8:	4211      	tst	r1, r2
 8001fca:	d05b      	beq.n	8002084 <__aeabi_dmul+0x4b4>
 8001fcc:	210f      	movs	r1, #15
 8001fce:	2400      	movs	r4, #0
 8001fd0:	4011      	ands	r1, r2
 8001fd2:	2904      	cmp	r1, #4
 8001fd4:	d053      	beq.n	800207e <__aeabi_dmul+0x4ae>
 8001fd6:	1d11      	adds	r1, r2, #4
 8001fd8:	4291      	cmp	r1, r2
 8001fda:	4192      	sbcs	r2, r2
 8001fdc:	4252      	negs	r2, r2
 8001fde:	18a4      	adds	r4, r4, r2
 8001fe0:	000a      	movs	r2, r1
 8001fe2:	0223      	lsls	r3, r4, #8
 8001fe4:	d54b      	bpl.n	800207e <__aeabi_dmul+0x4ae>
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	2400      	movs	r4, #0
 8001fea:	2500      	movs	r5, #0
 8001fec:	e660      	b.n	8001cb0 <__aeabi_dmul+0xe0>
 8001fee:	2380      	movs	r3, #128	; 0x80
 8001ff0:	031b      	lsls	r3, r3, #12
 8001ff2:	421c      	tst	r4, r3
 8001ff4:	d009      	beq.n	800200a <__aeabi_dmul+0x43a>
 8001ff6:	421e      	tst	r6, r3
 8001ff8:	d107      	bne.n	800200a <__aeabi_dmul+0x43a>
 8001ffa:	4333      	orrs	r3, r6
 8001ffc:	031c      	lsls	r4, r3, #12
 8001ffe:	4643      	mov	r3, r8
 8002000:	0015      	movs	r5, r2
 8002002:	0b24      	lsrs	r4, r4, #12
 8002004:	4a25      	ldr	r2, [pc, #148]	; (800209c <__aeabi_dmul+0x4cc>)
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	e652      	b.n	8001cb0 <__aeabi_dmul+0xe0>
 800200a:	2280      	movs	r2, #128	; 0x80
 800200c:	0312      	lsls	r2, r2, #12
 800200e:	4314      	orrs	r4, r2
 8002010:	0324      	lsls	r4, r4, #12
 8002012:	4a22      	ldr	r2, [pc, #136]	; (800209c <__aeabi_dmul+0x4cc>)
 8002014:	0b24      	lsrs	r4, r4, #12
 8002016:	9701      	str	r7, [sp, #4]
 8002018:	e64a      	b.n	8001cb0 <__aeabi_dmul+0xe0>
 800201a:	f000 fc81 	bl	8002920 <__clzsi2>
 800201e:	0003      	movs	r3, r0
 8002020:	001a      	movs	r2, r3
 8002022:	3215      	adds	r2, #21
 8002024:	3020      	adds	r0, #32
 8002026:	2a1c      	cmp	r2, #28
 8002028:	dc00      	bgt.n	800202c <__aeabi_dmul+0x45c>
 800202a:	e684      	b.n	8001d36 <__aeabi_dmul+0x166>
 800202c:	4656      	mov	r6, sl
 800202e:	3b08      	subs	r3, #8
 8002030:	2200      	movs	r2, #0
 8002032:	409e      	lsls	r6, r3
 8002034:	e689      	b.n	8001d4a <__aeabi_dmul+0x17a>
 8002036:	f000 fc73 	bl	8002920 <__clzsi2>
 800203a:	0001      	movs	r1, r0
 800203c:	0002      	movs	r2, r0
 800203e:	3115      	adds	r1, #21
 8002040:	3220      	adds	r2, #32
 8002042:	291c      	cmp	r1, #28
 8002044:	dc00      	bgt.n	8002048 <__aeabi_dmul+0x478>
 8002046:	e64e      	b.n	8001ce6 <__aeabi_dmul+0x116>
 8002048:	0034      	movs	r4, r6
 800204a:	3808      	subs	r0, #8
 800204c:	2500      	movs	r5, #0
 800204e:	4084      	lsls	r4, r0
 8002050:	e653      	b.n	8001cfa <__aeabi_dmul+0x12a>
 8002052:	9b00      	ldr	r3, [sp, #0]
 8002054:	469c      	mov	ip, r3
 8002056:	e741      	b.n	8001edc <__aeabi_dmul+0x30c>
 8002058:	4912      	ldr	r1, [pc, #72]	; (80020a4 <__aeabi_dmul+0x4d4>)
 800205a:	0022      	movs	r2, r4
 800205c:	4461      	add	r1, ip
 800205e:	002e      	movs	r6, r5
 8002060:	408d      	lsls	r5, r1
 8002062:	408a      	lsls	r2, r1
 8002064:	40c6      	lsrs	r6, r0
 8002066:	1e69      	subs	r1, r5, #1
 8002068:	418d      	sbcs	r5, r1
 800206a:	4332      	orrs	r2, r6
 800206c:	432a      	orrs	r2, r5
 800206e:	40c4      	lsrs	r4, r0
 8002070:	0753      	lsls	r3, r2, #29
 8002072:	d0b6      	beq.n	8001fe2 <__aeabi_dmul+0x412>
 8002074:	210f      	movs	r1, #15
 8002076:	4011      	ands	r1, r2
 8002078:	2904      	cmp	r1, #4
 800207a:	d1ac      	bne.n	8001fd6 <__aeabi_dmul+0x406>
 800207c:	e7b1      	b.n	8001fe2 <__aeabi_dmul+0x412>
 800207e:	0765      	lsls	r5, r4, #29
 8002080:	0264      	lsls	r4, r4, #9
 8002082:	0b24      	lsrs	r4, r4, #12
 8002084:	08d2      	lsrs	r2, r2, #3
 8002086:	4315      	orrs	r5, r2
 8002088:	2200      	movs	r2, #0
 800208a:	e611      	b.n	8001cb0 <__aeabi_dmul+0xe0>
 800208c:	2280      	movs	r2, #128	; 0x80
 800208e:	0312      	lsls	r2, r2, #12
 8002090:	4314      	orrs	r4, r2
 8002092:	0324      	lsls	r4, r4, #12
 8002094:	4a01      	ldr	r2, [pc, #4]	; (800209c <__aeabi_dmul+0x4cc>)
 8002096:	0b24      	lsrs	r4, r4, #12
 8002098:	e60a      	b.n	8001cb0 <__aeabi_dmul+0xe0>
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	000007ff 	.word	0x000007ff
 80020a0:	0000043e 	.word	0x0000043e
 80020a4:	0000041e 	.word	0x0000041e

080020a8 <__aeabi_dsub>:
 80020a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020aa:	4657      	mov	r7, sl
 80020ac:	464e      	mov	r6, r9
 80020ae:	4645      	mov	r5, r8
 80020b0:	46de      	mov	lr, fp
 80020b2:	0004      	movs	r4, r0
 80020b4:	b5e0      	push	{r5, r6, r7, lr}
 80020b6:	001f      	movs	r7, r3
 80020b8:	0010      	movs	r0, r2
 80020ba:	030b      	lsls	r3, r1, #12
 80020bc:	0f62      	lsrs	r2, r4, #29
 80020be:	004e      	lsls	r6, r1, #1
 80020c0:	0fcd      	lsrs	r5, r1, #31
 80020c2:	0a5b      	lsrs	r3, r3, #9
 80020c4:	0339      	lsls	r1, r7, #12
 80020c6:	4313      	orrs	r3, r2
 80020c8:	0a49      	lsrs	r1, r1, #9
 80020ca:	00e2      	lsls	r2, r4, #3
 80020cc:	0f44      	lsrs	r4, r0, #29
 80020ce:	4321      	orrs	r1, r4
 80020d0:	4cc2      	ldr	r4, [pc, #776]	; (80023dc <__aeabi_dsub+0x334>)
 80020d2:	4691      	mov	r9, r2
 80020d4:	4692      	mov	sl, r2
 80020d6:	00c0      	lsls	r0, r0, #3
 80020d8:	007a      	lsls	r2, r7, #1
 80020da:	4680      	mov	r8, r0
 80020dc:	0d76      	lsrs	r6, r6, #21
 80020de:	0d52      	lsrs	r2, r2, #21
 80020e0:	0fff      	lsrs	r7, r7, #31
 80020e2:	42a2      	cmp	r2, r4
 80020e4:	d100      	bne.n	80020e8 <__aeabi_dsub+0x40>
 80020e6:	e0b4      	b.n	8002252 <__aeabi_dsub+0x1aa>
 80020e8:	2401      	movs	r4, #1
 80020ea:	4067      	eors	r7, r4
 80020ec:	46bb      	mov	fp, r7
 80020ee:	42bd      	cmp	r5, r7
 80020f0:	d100      	bne.n	80020f4 <__aeabi_dsub+0x4c>
 80020f2:	e088      	b.n	8002206 <__aeabi_dsub+0x15e>
 80020f4:	1ab4      	subs	r4, r6, r2
 80020f6:	46a4      	mov	ip, r4
 80020f8:	2c00      	cmp	r4, #0
 80020fa:	dc00      	bgt.n	80020fe <__aeabi_dsub+0x56>
 80020fc:	e0b2      	b.n	8002264 <__aeabi_dsub+0x1bc>
 80020fe:	2a00      	cmp	r2, #0
 8002100:	d100      	bne.n	8002104 <__aeabi_dsub+0x5c>
 8002102:	e0c5      	b.n	8002290 <__aeabi_dsub+0x1e8>
 8002104:	4ab5      	ldr	r2, [pc, #724]	; (80023dc <__aeabi_dsub+0x334>)
 8002106:	4296      	cmp	r6, r2
 8002108:	d100      	bne.n	800210c <__aeabi_dsub+0x64>
 800210a:	e28b      	b.n	8002624 <__aeabi_dsub+0x57c>
 800210c:	2280      	movs	r2, #128	; 0x80
 800210e:	0412      	lsls	r2, r2, #16
 8002110:	4311      	orrs	r1, r2
 8002112:	4662      	mov	r2, ip
 8002114:	2a38      	cmp	r2, #56	; 0x38
 8002116:	dd00      	ble.n	800211a <__aeabi_dsub+0x72>
 8002118:	e1a1      	b.n	800245e <__aeabi_dsub+0x3b6>
 800211a:	2a1f      	cmp	r2, #31
 800211c:	dd00      	ble.n	8002120 <__aeabi_dsub+0x78>
 800211e:	e216      	b.n	800254e <__aeabi_dsub+0x4a6>
 8002120:	2720      	movs	r7, #32
 8002122:	000c      	movs	r4, r1
 8002124:	1abf      	subs	r7, r7, r2
 8002126:	40bc      	lsls	r4, r7
 8002128:	0002      	movs	r2, r0
 800212a:	46a0      	mov	r8, r4
 800212c:	4664      	mov	r4, ip
 800212e:	40b8      	lsls	r0, r7
 8002130:	40e2      	lsrs	r2, r4
 8002132:	4644      	mov	r4, r8
 8002134:	4314      	orrs	r4, r2
 8002136:	0002      	movs	r2, r0
 8002138:	1e50      	subs	r0, r2, #1
 800213a:	4182      	sbcs	r2, r0
 800213c:	4660      	mov	r0, ip
 800213e:	40c1      	lsrs	r1, r0
 8002140:	4322      	orrs	r2, r4
 8002142:	1a5b      	subs	r3, r3, r1
 8002144:	4649      	mov	r1, r9
 8002146:	1a8c      	subs	r4, r1, r2
 8002148:	45a1      	cmp	r9, r4
 800214a:	4192      	sbcs	r2, r2
 800214c:	4252      	negs	r2, r2
 800214e:	1a9b      	subs	r3, r3, r2
 8002150:	4698      	mov	r8, r3
 8002152:	4643      	mov	r3, r8
 8002154:	021b      	lsls	r3, r3, #8
 8002156:	d400      	bmi.n	800215a <__aeabi_dsub+0xb2>
 8002158:	e117      	b.n	800238a <__aeabi_dsub+0x2e2>
 800215a:	4643      	mov	r3, r8
 800215c:	025b      	lsls	r3, r3, #9
 800215e:	0a5b      	lsrs	r3, r3, #9
 8002160:	4698      	mov	r8, r3
 8002162:	4643      	mov	r3, r8
 8002164:	2b00      	cmp	r3, #0
 8002166:	d100      	bne.n	800216a <__aeabi_dsub+0xc2>
 8002168:	e16c      	b.n	8002444 <__aeabi_dsub+0x39c>
 800216a:	4640      	mov	r0, r8
 800216c:	f000 fbd8 	bl	8002920 <__clzsi2>
 8002170:	0002      	movs	r2, r0
 8002172:	3a08      	subs	r2, #8
 8002174:	2120      	movs	r1, #32
 8002176:	0020      	movs	r0, r4
 8002178:	4643      	mov	r3, r8
 800217a:	1a89      	subs	r1, r1, r2
 800217c:	4093      	lsls	r3, r2
 800217e:	40c8      	lsrs	r0, r1
 8002180:	4094      	lsls	r4, r2
 8002182:	4303      	orrs	r3, r0
 8002184:	4296      	cmp	r6, r2
 8002186:	dd00      	ble.n	800218a <__aeabi_dsub+0xe2>
 8002188:	e157      	b.n	800243a <__aeabi_dsub+0x392>
 800218a:	1b96      	subs	r6, r2, r6
 800218c:	1c71      	adds	r1, r6, #1
 800218e:	291f      	cmp	r1, #31
 8002190:	dd00      	ble.n	8002194 <__aeabi_dsub+0xec>
 8002192:	e1cb      	b.n	800252c <__aeabi_dsub+0x484>
 8002194:	2220      	movs	r2, #32
 8002196:	0018      	movs	r0, r3
 8002198:	0026      	movs	r6, r4
 800219a:	1a52      	subs	r2, r2, r1
 800219c:	4094      	lsls	r4, r2
 800219e:	4090      	lsls	r0, r2
 80021a0:	40ce      	lsrs	r6, r1
 80021a2:	40cb      	lsrs	r3, r1
 80021a4:	1e62      	subs	r2, r4, #1
 80021a6:	4194      	sbcs	r4, r2
 80021a8:	4330      	orrs	r0, r6
 80021aa:	4698      	mov	r8, r3
 80021ac:	2600      	movs	r6, #0
 80021ae:	4304      	orrs	r4, r0
 80021b0:	0763      	lsls	r3, r4, #29
 80021b2:	d009      	beq.n	80021c8 <__aeabi_dsub+0x120>
 80021b4:	230f      	movs	r3, #15
 80021b6:	4023      	ands	r3, r4
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d005      	beq.n	80021c8 <__aeabi_dsub+0x120>
 80021bc:	1d23      	adds	r3, r4, #4
 80021be:	42a3      	cmp	r3, r4
 80021c0:	41a4      	sbcs	r4, r4
 80021c2:	4264      	negs	r4, r4
 80021c4:	44a0      	add	r8, r4
 80021c6:	001c      	movs	r4, r3
 80021c8:	4643      	mov	r3, r8
 80021ca:	021b      	lsls	r3, r3, #8
 80021cc:	d400      	bmi.n	80021d0 <__aeabi_dsub+0x128>
 80021ce:	e0df      	b.n	8002390 <__aeabi_dsub+0x2e8>
 80021d0:	4b82      	ldr	r3, [pc, #520]	; (80023dc <__aeabi_dsub+0x334>)
 80021d2:	3601      	adds	r6, #1
 80021d4:	429e      	cmp	r6, r3
 80021d6:	d100      	bne.n	80021da <__aeabi_dsub+0x132>
 80021d8:	e0fb      	b.n	80023d2 <__aeabi_dsub+0x32a>
 80021da:	4642      	mov	r2, r8
 80021dc:	4b80      	ldr	r3, [pc, #512]	; (80023e0 <__aeabi_dsub+0x338>)
 80021de:	08e4      	lsrs	r4, r4, #3
 80021e0:	401a      	ands	r2, r3
 80021e2:	0013      	movs	r3, r2
 80021e4:	0571      	lsls	r1, r6, #21
 80021e6:	0752      	lsls	r2, r2, #29
 80021e8:	025b      	lsls	r3, r3, #9
 80021ea:	4322      	orrs	r2, r4
 80021ec:	0b1b      	lsrs	r3, r3, #12
 80021ee:	0d49      	lsrs	r1, r1, #21
 80021f0:	0509      	lsls	r1, r1, #20
 80021f2:	07ed      	lsls	r5, r5, #31
 80021f4:	4319      	orrs	r1, r3
 80021f6:	4329      	orrs	r1, r5
 80021f8:	0010      	movs	r0, r2
 80021fa:	bcf0      	pop	{r4, r5, r6, r7}
 80021fc:	46bb      	mov	fp, r7
 80021fe:	46b2      	mov	sl, r6
 8002200:	46a9      	mov	r9, r5
 8002202:	46a0      	mov	r8, r4
 8002204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002206:	1ab4      	subs	r4, r6, r2
 8002208:	46a4      	mov	ip, r4
 800220a:	2c00      	cmp	r4, #0
 800220c:	dd58      	ble.n	80022c0 <__aeabi_dsub+0x218>
 800220e:	2a00      	cmp	r2, #0
 8002210:	d100      	bne.n	8002214 <__aeabi_dsub+0x16c>
 8002212:	e09e      	b.n	8002352 <__aeabi_dsub+0x2aa>
 8002214:	4a71      	ldr	r2, [pc, #452]	; (80023dc <__aeabi_dsub+0x334>)
 8002216:	4296      	cmp	r6, r2
 8002218:	d100      	bne.n	800221c <__aeabi_dsub+0x174>
 800221a:	e13b      	b.n	8002494 <__aeabi_dsub+0x3ec>
 800221c:	2280      	movs	r2, #128	; 0x80
 800221e:	0412      	lsls	r2, r2, #16
 8002220:	4311      	orrs	r1, r2
 8002222:	4662      	mov	r2, ip
 8002224:	2a38      	cmp	r2, #56	; 0x38
 8002226:	dd00      	ble.n	800222a <__aeabi_dsub+0x182>
 8002228:	e0c1      	b.n	80023ae <__aeabi_dsub+0x306>
 800222a:	2a1f      	cmp	r2, #31
 800222c:	dc00      	bgt.n	8002230 <__aeabi_dsub+0x188>
 800222e:	e1bb      	b.n	80025a8 <__aeabi_dsub+0x500>
 8002230:	000c      	movs	r4, r1
 8002232:	3a20      	subs	r2, #32
 8002234:	40d4      	lsrs	r4, r2
 8002236:	0022      	movs	r2, r4
 8002238:	4664      	mov	r4, ip
 800223a:	2c20      	cmp	r4, #32
 800223c:	d004      	beq.n	8002248 <__aeabi_dsub+0x1a0>
 800223e:	2740      	movs	r7, #64	; 0x40
 8002240:	1b3f      	subs	r7, r7, r4
 8002242:	40b9      	lsls	r1, r7
 8002244:	4308      	orrs	r0, r1
 8002246:	4680      	mov	r8, r0
 8002248:	4644      	mov	r4, r8
 800224a:	1e61      	subs	r1, r4, #1
 800224c:	418c      	sbcs	r4, r1
 800224e:	4314      	orrs	r4, r2
 8002250:	e0b1      	b.n	80023b6 <__aeabi_dsub+0x30e>
 8002252:	000c      	movs	r4, r1
 8002254:	4304      	orrs	r4, r0
 8002256:	d02a      	beq.n	80022ae <__aeabi_dsub+0x206>
 8002258:	46bb      	mov	fp, r7
 800225a:	42bd      	cmp	r5, r7
 800225c:	d02d      	beq.n	80022ba <__aeabi_dsub+0x212>
 800225e:	4c61      	ldr	r4, [pc, #388]	; (80023e4 <__aeabi_dsub+0x33c>)
 8002260:	46a4      	mov	ip, r4
 8002262:	44b4      	add	ip, r6
 8002264:	4664      	mov	r4, ip
 8002266:	2c00      	cmp	r4, #0
 8002268:	d05c      	beq.n	8002324 <__aeabi_dsub+0x27c>
 800226a:	1b94      	subs	r4, r2, r6
 800226c:	46a4      	mov	ip, r4
 800226e:	2e00      	cmp	r6, #0
 8002270:	d000      	beq.n	8002274 <__aeabi_dsub+0x1cc>
 8002272:	e115      	b.n	80024a0 <__aeabi_dsub+0x3f8>
 8002274:	464d      	mov	r5, r9
 8002276:	431d      	orrs	r5, r3
 8002278:	d100      	bne.n	800227c <__aeabi_dsub+0x1d4>
 800227a:	e1c3      	b.n	8002604 <__aeabi_dsub+0x55c>
 800227c:	1e65      	subs	r5, r4, #1
 800227e:	2c01      	cmp	r4, #1
 8002280:	d100      	bne.n	8002284 <__aeabi_dsub+0x1dc>
 8002282:	e20c      	b.n	800269e <__aeabi_dsub+0x5f6>
 8002284:	4e55      	ldr	r6, [pc, #340]	; (80023dc <__aeabi_dsub+0x334>)
 8002286:	42b4      	cmp	r4, r6
 8002288:	d100      	bne.n	800228c <__aeabi_dsub+0x1e4>
 800228a:	e1f8      	b.n	800267e <__aeabi_dsub+0x5d6>
 800228c:	46ac      	mov	ip, r5
 800228e:	e10e      	b.n	80024ae <__aeabi_dsub+0x406>
 8002290:	000a      	movs	r2, r1
 8002292:	4302      	orrs	r2, r0
 8002294:	d100      	bne.n	8002298 <__aeabi_dsub+0x1f0>
 8002296:	e136      	b.n	8002506 <__aeabi_dsub+0x45e>
 8002298:	0022      	movs	r2, r4
 800229a:	3a01      	subs	r2, #1
 800229c:	2c01      	cmp	r4, #1
 800229e:	d100      	bne.n	80022a2 <__aeabi_dsub+0x1fa>
 80022a0:	e1c6      	b.n	8002630 <__aeabi_dsub+0x588>
 80022a2:	4c4e      	ldr	r4, [pc, #312]	; (80023dc <__aeabi_dsub+0x334>)
 80022a4:	45a4      	cmp	ip, r4
 80022a6:	d100      	bne.n	80022aa <__aeabi_dsub+0x202>
 80022a8:	e0f4      	b.n	8002494 <__aeabi_dsub+0x3ec>
 80022aa:	4694      	mov	ip, r2
 80022ac:	e731      	b.n	8002112 <__aeabi_dsub+0x6a>
 80022ae:	2401      	movs	r4, #1
 80022b0:	4067      	eors	r7, r4
 80022b2:	46bb      	mov	fp, r7
 80022b4:	42bd      	cmp	r5, r7
 80022b6:	d000      	beq.n	80022ba <__aeabi_dsub+0x212>
 80022b8:	e71c      	b.n	80020f4 <__aeabi_dsub+0x4c>
 80022ba:	4c4a      	ldr	r4, [pc, #296]	; (80023e4 <__aeabi_dsub+0x33c>)
 80022bc:	46a4      	mov	ip, r4
 80022be:	44b4      	add	ip, r6
 80022c0:	4664      	mov	r4, ip
 80022c2:	2c00      	cmp	r4, #0
 80022c4:	d100      	bne.n	80022c8 <__aeabi_dsub+0x220>
 80022c6:	e0cf      	b.n	8002468 <__aeabi_dsub+0x3c0>
 80022c8:	1b94      	subs	r4, r2, r6
 80022ca:	46a4      	mov	ip, r4
 80022cc:	2e00      	cmp	r6, #0
 80022ce:	d100      	bne.n	80022d2 <__aeabi_dsub+0x22a>
 80022d0:	e15c      	b.n	800258c <__aeabi_dsub+0x4e4>
 80022d2:	4e42      	ldr	r6, [pc, #264]	; (80023dc <__aeabi_dsub+0x334>)
 80022d4:	42b2      	cmp	r2, r6
 80022d6:	d100      	bne.n	80022da <__aeabi_dsub+0x232>
 80022d8:	e1ec      	b.n	80026b4 <__aeabi_dsub+0x60c>
 80022da:	2680      	movs	r6, #128	; 0x80
 80022dc:	0436      	lsls	r6, r6, #16
 80022de:	4333      	orrs	r3, r6
 80022e0:	4664      	mov	r4, ip
 80022e2:	2c38      	cmp	r4, #56	; 0x38
 80022e4:	dd00      	ble.n	80022e8 <__aeabi_dsub+0x240>
 80022e6:	e1b3      	b.n	8002650 <__aeabi_dsub+0x5a8>
 80022e8:	2c1f      	cmp	r4, #31
 80022ea:	dd00      	ble.n	80022ee <__aeabi_dsub+0x246>
 80022ec:	e238      	b.n	8002760 <__aeabi_dsub+0x6b8>
 80022ee:	2620      	movs	r6, #32
 80022f0:	1b36      	subs	r6, r6, r4
 80022f2:	001c      	movs	r4, r3
 80022f4:	40b4      	lsls	r4, r6
 80022f6:	464f      	mov	r7, r9
 80022f8:	46a0      	mov	r8, r4
 80022fa:	4664      	mov	r4, ip
 80022fc:	40e7      	lsrs	r7, r4
 80022fe:	4644      	mov	r4, r8
 8002300:	433c      	orrs	r4, r7
 8002302:	464f      	mov	r7, r9
 8002304:	40b7      	lsls	r7, r6
 8002306:	003e      	movs	r6, r7
 8002308:	1e77      	subs	r7, r6, #1
 800230a:	41be      	sbcs	r6, r7
 800230c:	4334      	orrs	r4, r6
 800230e:	4666      	mov	r6, ip
 8002310:	40f3      	lsrs	r3, r6
 8002312:	18c9      	adds	r1, r1, r3
 8002314:	1824      	adds	r4, r4, r0
 8002316:	4284      	cmp	r4, r0
 8002318:	419b      	sbcs	r3, r3
 800231a:	425b      	negs	r3, r3
 800231c:	4698      	mov	r8, r3
 800231e:	0016      	movs	r6, r2
 8002320:	4488      	add	r8, r1
 8002322:	e04e      	b.n	80023c2 <__aeabi_dsub+0x31a>
 8002324:	4a30      	ldr	r2, [pc, #192]	; (80023e8 <__aeabi_dsub+0x340>)
 8002326:	1c74      	adds	r4, r6, #1
 8002328:	4214      	tst	r4, r2
 800232a:	d000      	beq.n	800232e <__aeabi_dsub+0x286>
 800232c:	e0d6      	b.n	80024dc <__aeabi_dsub+0x434>
 800232e:	464a      	mov	r2, r9
 8002330:	431a      	orrs	r2, r3
 8002332:	2e00      	cmp	r6, #0
 8002334:	d000      	beq.n	8002338 <__aeabi_dsub+0x290>
 8002336:	e15b      	b.n	80025f0 <__aeabi_dsub+0x548>
 8002338:	2a00      	cmp	r2, #0
 800233a:	d100      	bne.n	800233e <__aeabi_dsub+0x296>
 800233c:	e1a5      	b.n	800268a <__aeabi_dsub+0x5e2>
 800233e:	000a      	movs	r2, r1
 8002340:	4302      	orrs	r2, r0
 8002342:	d000      	beq.n	8002346 <__aeabi_dsub+0x29e>
 8002344:	e1bb      	b.n	80026be <__aeabi_dsub+0x616>
 8002346:	464a      	mov	r2, r9
 8002348:	0759      	lsls	r1, r3, #29
 800234a:	08d2      	lsrs	r2, r2, #3
 800234c:	430a      	orrs	r2, r1
 800234e:	08db      	lsrs	r3, r3, #3
 8002350:	e027      	b.n	80023a2 <__aeabi_dsub+0x2fa>
 8002352:	000a      	movs	r2, r1
 8002354:	4302      	orrs	r2, r0
 8002356:	d100      	bne.n	800235a <__aeabi_dsub+0x2b2>
 8002358:	e174      	b.n	8002644 <__aeabi_dsub+0x59c>
 800235a:	0022      	movs	r2, r4
 800235c:	3a01      	subs	r2, #1
 800235e:	2c01      	cmp	r4, #1
 8002360:	d005      	beq.n	800236e <__aeabi_dsub+0x2c6>
 8002362:	4c1e      	ldr	r4, [pc, #120]	; (80023dc <__aeabi_dsub+0x334>)
 8002364:	45a4      	cmp	ip, r4
 8002366:	d100      	bne.n	800236a <__aeabi_dsub+0x2c2>
 8002368:	e094      	b.n	8002494 <__aeabi_dsub+0x3ec>
 800236a:	4694      	mov	ip, r2
 800236c:	e759      	b.n	8002222 <__aeabi_dsub+0x17a>
 800236e:	4448      	add	r0, r9
 8002370:	4548      	cmp	r0, r9
 8002372:	4192      	sbcs	r2, r2
 8002374:	185b      	adds	r3, r3, r1
 8002376:	4698      	mov	r8, r3
 8002378:	0004      	movs	r4, r0
 800237a:	4252      	negs	r2, r2
 800237c:	4490      	add	r8, r2
 800237e:	4643      	mov	r3, r8
 8002380:	2602      	movs	r6, #2
 8002382:	021b      	lsls	r3, r3, #8
 8002384:	d500      	bpl.n	8002388 <__aeabi_dsub+0x2e0>
 8002386:	e0c4      	b.n	8002512 <__aeabi_dsub+0x46a>
 8002388:	3e01      	subs	r6, #1
 800238a:	0763      	lsls	r3, r4, #29
 800238c:	d000      	beq.n	8002390 <__aeabi_dsub+0x2e8>
 800238e:	e711      	b.n	80021b4 <__aeabi_dsub+0x10c>
 8002390:	4643      	mov	r3, r8
 8002392:	46b4      	mov	ip, r6
 8002394:	0759      	lsls	r1, r3, #29
 8002396:	08e2      	lsrs	r2, r4, #3
 8002398:	430a      	orrs	r2, r1
 800239a:	08db      	lsrs	r3, r3, #3
 800239c:	490f      	ldr	r1, [pc, #60]	; (80023dc <__aeabi_dsub+0x334>)
 800239e:	458c      	cmp	ip, r1
 80023a0:	d040      	beq.n	8002424 <__aeabi_dsub+0x37c>
 80023a2:	4661      	mov	r1, ip
 80023a4:	031b      	lsls	r3, r3, #12
 80023a6:	0549      	lsls	r1, r1, #21
 80023a8:	0b1b      	lsrs	r3, r3, #12
 80023aa:	0d49      	lsrs	r1, r1, #21
 80023ac:	e720      	b.n	80021f0 <__aeabi_dsub+0x148>
 80023ae:	4301      	orrs	r1, r0
 80023b0:	000c      	movs	r4, r1
 80023b2:	1e61      	subs	r1, r4, #1
 80023b4:	418c      	sbcs	r4, r1
 80023b6:	444c      	add	r4, r9
 80023b8:	454c      	cmp	r4, r9
 80023ba:	4192      	sbcs	r2, r2
 80023bc:	4252      	negs	r2, r2
 80023be:	4690      	mov	r8, r2
 80023c0:	4498      	add	r8, r3
 80023c2:	4643      	mov	r3, r8
 80023c4:	021b      	lsls	r3, r3, #8
 80023c6:	d5e0      	bpl.n	800238a <__aeabi_dsub+0x2e2>
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <__aeabi_dsub+0x334>)
 80023ca:	3601      	adds	r6, #1
 80023cc:	429e      	cmp	r6, r3
 80023ce:	d000      	beq.n	80023d2 <__aeabi_dsub+0x32a>
 80023d0:	e09f      	b.n	8002512 <__aeabi_dsub+0x46a>
 80023d2:	0031      	movs	r1, r6
 80023d4:	2300      	movs	r3, #0
 80023d6:	2200      	movs	r2, #0
 80023d8:	e70a      	b.n	80021f0 <__aeabi_dsub+0x148>
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	000007ff 	.word	0x000007ff
 80023e0:	ff7fffff 	.word	0xff7fffff
 80023e4:	fffff801 	.word	0xfffff801
 80023e8:	000007fe 	.word	0x000007fe
 80023ec:	2a00      	cmp	r2, #0
 80023ee:	d100      	bne.n	80023f2 <__aeabi_dsub+0x34a>
 80023f0:	e160      	b.n	80026b4 <__aeabi_dsub+0x60c>
 80023f2:	000a      	movs	r2, r1
 80023f4:	4302      	orrs	r2, r0
 80023f6:	d04d      	beq.n	8002494 <__aeabi_dsub+0x3ec>
 80023f8:	464a      	mov	r2, r9
 80023fa:	075c      	lsls	r4, r3, #29
 80023fc:	08d2      	lsrs	r2, r2, #3
 80023fe:	4322      	orrs	r2, r4
 8002400:	2480      	movs	r4, #128	; 0x80
 8002402:	08db      	lsrs	r3, r3, #3
 8002404:	0324      	lsls	r4, r4, #12
 8002406:	4223      	tst	r3, r4
 8002408:	d007      	beq.n	800241a <__aeabi_dsub+0x372>
 800240a:	08ce      	lsrs	r6, r1, #3
 800240c:	4226      	tst	r6, r4
 800240e:	d104      	bne.n	800241a <__aeabi_dsub+0x372>
 8002410:	465d      	mov	r5, fp
 8002412:	0033      	movs	r3, r6
 8002414:	08c2      	lsrs	r2, r0, #3
 8002416:	0749      	lsls	r1, r1, #29
 8002418:	430a      	orrs	r2, r1
 800241a:	0f51      	lsrs	r1, r2, #29
 800241c:	00d2      	lsls	r2, r2, #3
 800241e:	08d2      	lsrs	r2, r2, #3
 8002420:	0749      	lsls	r1, r1, #29
 8002422:	430a      	orrs	r2, r1
 8002424:	0011      	movs	r1, r2
 8002426:	4319      	orrs	r1, r3
 8002428:	d100      	bne.n	800242c <__aeabi_dsub+0x384>
 800242a:	e1c8      	b.n	80027be <__aeabi_dsub+0x716>
 800242c:	2180      	movs	r1, #128	; 0x80
 800242e:	0309      	lsls	r1, r1, #12
 8002430:	430b      	orrs	r3, r1
 8002432:	031b      	lsls	r3, r3, #12
 8002434:	49d5      	ldr	r1, [pc, #852]	; (800278c <__aeabi_dsub+0x6e4>)
 8002436:	0b1b      	lsrs	r3, r3, #12
 8002438:	e6da      	b.n	80021f0 <__aeabi_dsub+0x148>
 800243a:	49d5      	ldr	r1, [pc, #852]	; (8002790 <__aeabi_dsub+0x6e8>)
 800243c:	1ab6      	subs	r6, r6, r2
 800243e:	400b      	ands	r3, r1
 8002440:	4698      	mov	r8, r3
 8002442:	e6b5      	b.n	80021b0 <__aeabi_dsub+0x108>
 8002444:	0020      	movs	r0, r4
 8002446:	f000 fa6b 	bl	8002920 <__clzsi2>
 800244a:	0002      	movs	r2, r0
 800244c:	3218      	adds	r2, #24
 800244e:	2a1f      	cmp	r2, #31
 8002450:	dc00      	bgt.n	8002454 <__aeabi_dsub+0x3ac>
 8002452:	e68f      	b.n	8002174 <__aeabi_dsub+0xcc>
 8002454:	0023      	movs	r3, r4
 8002456:	3808      	subs	r0, #8
 8002458:	4083      	lsls	r3, r0
 800245a:	2400      	movs	r4, #0
 800245c:	e692      	b.n	8002184 <__aeabi_dsub+0xdc>
 800245e:	4308      	orrs	r0, r1
 8002460:	0002      	movs	r2, r0
 8002462:	1e50      	subs	r0, r2, #1
 8002464:	4182      	sbcs	r2, r0
 8002466:	e66d      	b.n	8002144 <__aeabi_dsub+0x9c>
 8002468:	4cca      	ldr	r4, [pc, #808]	; (8002794 <__aeabi_dsub+0x6ec>)
 800246a:	1c72      	adds	r2, r6, #1
 800246c:	4222      	tst	r2, r4
 800246e:	d000      	beq.n	8002472 <__aeabi_dsub+0x3ca>
 8002470:	e0ad      	b.n	80025ce <__aeabi_dsub+0x526>
 8002472:	464a      	mov	r2, r9
 8002474:	431a      	orrs	r2, r3
 8002476:	2e00      	cmp	r6, #0
 8002478:	d1b8      	bne.n	80023ec <__aeabi_dsub+0x344>
 800247a:	2a00      	cmp	r2, #0
 800247c:	d100      	bne.n	8002480 <__aeabi_dsub+0x3d8>
 800247e:	e158      	b.n	8002732 <__aeabi_dsub+0x68a>
 8002480:	000a      	movs	r2, r1
 8002482:	4302      	orrs	r2, r0
 8002484:	d000      	beq.n	8002488 <__aeabi_dsub+0x3e0>
 8002486:	e159      	b.n	800273c <__aeabi_dsub+0x694>
 8002488:	464a      	mov	r2, r9
 800248a:	0759      	lsls	r1, r3, #29
 800248c:	08d2      	lsrs	r2, r2, #3
 800248e:	430a      	orrs	r2, r1
 8002490:	08db      	lsrs	r3, r3, #3
 8002492:	e786      	b.n	80023a2 <__aeabi_dsub+0x2fa>
 8002494:	464a      	mov	r2, r9
 8002496:	0759      	lsls	r1, r3, #29
 8002498:	08d2      	lsrs	r2, r2, #3
 800249a:	430a      	orrs	r2, r1
 800249c:	08db      	lsrs	r3, r3, #3
 800249e:	e7c1      	b.n	8002424 <__aeabi_dsub+0x37c>
 80024a0:	4dba      	ldr	r5, [pc, #744]	; (800278c <__aeabi_dsub+0x6e4>)
 80024a2:	42aa      	cmp	r2, r5
 80024a4:	d100      	bne.n	80024a8 <__aeabi_dsub+0x400>
 80024a6:	e11e      	b.n	80026e6 <__aeabi_dsub+0x63e>
 80024a8:	2580      	movs	r5, #128	; 0x80
 80024aa:	042d      	lsls	r5, r5, #16
 80024ac:	432b      	orrs	r3, r5
 80024ae:	4664      	mov	r4, ip
 80024b0:	2c38      	cmp	r4, #56	; 0x38
 80024b2:	dc5d      	bgt.n	8002570 <__aeabi_dsub+0x4c8>
 80024b4:	2c1f      	cmp	r4, #31
 80024b6:	dd00      	ble.n	80024ba <__aeabi_dsub+0x412>
 80024b8:	e0d0      	b.n	800265c <__aeabi_dsub+0x5b4>
 80024ba:	2520      	movs	r5, #32
 80024bc:	4667      	mov	r7, ip
 80024be:	1b2d      	subs	r5, r5, r4
 80024c0:	464e      	mov	r6, r9
 80024c2:	001c      	movs	r4, r3
 80024c4:	40fe      	lsrs	r6, r7
 80024c6:	40ac      	lsls	r4, r5
 80024c8:	4334      	orrs	r4, r6
 80024ca:	464e      	mov	r6, r9
 80024cc:	40ae      	lsls	r6, r5
 80024ce:	0035      	movs	r5, r6
 80024d0:	40fb      	lsrs	r3, r7
 80024d2:	1e6e      	subs	r6, r5, #1
 80024d4:	41b5      	sbcs	r5, r6
 80024d6:	1ac9      	subs	r1, r1, r3
 80024d8:	432c      	orrs	r4, r5
 80024da:	e04e      	b.n	800257a <__aeabi_dsub+0x4d2>
 80024dc:	464a      	mov	r2, r9
 80024de:	1a14      	subs	r4, r2, r0
 80024e0:	45a1      	cmp	r9, r4
 80024e2:	4192      	sbcs	r2, r2
 80024e4:	4252      	negs	r2, r2
 80024e6:	4690      	mov	r8, r2
 80024e8:	1a5f      	subs	r7, r3, r1
 80024ea:	003a      	movs	r2, r7
 80024ec:	4647      	mov	r7, r8
 80024ee:	1bd2      	subs	r2, r2, r7
 80024f0:	4690      	mov	r8, r2
 80024f2:	0212      	lsls	r2, r2, #8
 80024f4:	d500      	bpl.n	80024f8 <__aeabi_dsub+0x450>
 80024f6:	e08b      	b.n	8002610 <__aeabi_dsub+0x568>
 80024f8:	4642      	mov	r2, r8
 80024fa:	4322      	orrs	r2, r4
 80024fc:	d000      	beq.n	8002500 <__aeabi_dsub+0x458>
 80024fe:	e630      	b.n	8002162 <__aeabi_dsub+0xba>
 8002500:	2300      	movs	r3, #0
 8002502:	2500      	movs	r5, #0
 8002504:	e74d      	b.n	80023a2 <__aeabi_dsub+0x2fa>
 8002506:	464a      	mov	r2, r9
 8002508:	0759      	lsls	r1, r3, #29
 800250a:	08d2      	lsrs	r2, r2, #3
 800250c:	430a      	orrs	r2, r1
 800250e:	08db      	lsrs	r3, r3, #3
 8002510:	e744      	b.n	800239c <__aeabi_dsub+0x2f4>
 8002512:	4642      	mov	r2, r8
 8002514:	4b9e      	ldr	r3, [pc, #632]	; (8002790 <__aeabi_dsub+0x6e8>)
 8002516:	0861      	lsrs	r1, r4, #1
 8002518:	401a      	ands	r2, r3
 800251a:	0013      	movs	r3, r2
 800251c:	2201      	movs	r2, #1
 800251e:	4014      	ands	r4, r2
 8002520:	430c      	orrs	r4, r1
 8002522:	07da      	lsls	r2, r3, #31
 8002524:	085b      	lsrs	r3, r3, #1
 8002526:	4698      	mov	r8, r3
 8002528:	4314      	orrs	r4, r2
 800252a:	e641      	b.n	80021b0 <__aeabi_dsub+0x108>
 800252c:	001a      	movs	r2, r3
 800252e:	3e1f      	subs	r6, #31
 8002530:	40f2      	lsrs	r2, r6
 8002532:	0016      	movs	r6, r2
 8002534:	2920      	cmp	r1, #32
 8002536:	d003      	beq.n	8002540 <__aeabi_dsub+0x498>
 8002538:	2240      	movs	r2, #64	; 0x40
 800253a:	1a51      	subs	r1, r2, r1
 800253c:	408b      	lsls	r3, r1
 800253e:	431c      	orrs	r4, r3
 8002540:	1e62      	subs	r2, r4, #1
 8002542:	4194      	sbcs	r4, r2
 8002544:	2300      	movs	r3, #0
 8002546:	4334      	orrs	r4, r6
 8002548:	4698      	mov	r8, r3
 800254a:	2600      	movs	r6, #0
 800254c:	e71d      	b.n	800238a <__aeabi_dsub+0x2e2>
 800254e:	000c      	movs	r4, r1
 8002550:	3a20      	subs	r2, #32
 8002552:	40d4      	lsrs	r4, r2
 8002554:	0022      	movs	r2, r4
 8002556:	4664      	mov	r4, ip
 8002558:	2c20      	cmp	r4, #32
 800255a:	d004      	beq.n	8002566 <__aeabi_dsub+0x4be>
 800255c:	2740      	movs	r7, #64	; 0x40
 800255e:	1b3f      	subs	r7, r7, r4
 8002560:	40b9      	lsls	r1, r7
 8002562:	4308      	orrs	r0, r1
 8002564:	4680      	mov	r8, r0
 8002566:	4644      	mov	r4, r8
 8002568:	1e61      	subs	r1, r4, #1
 800256a:	418c      	sbcs	r4, r1
 800256c:	4322      	orrs	r2, r4
 800256e:	e5e9      	b.n	8002144 <__aeabi_dsub+0x9c>
 8002570:	464c      	mov	r4, r9
 8002572:	4323      	orrs	r3, r4
 8002574:	001c      	movs	r4, r3
 8002576:	1e63      	subs	r3, r4, #1
 8002578:	419c      	sbcs	r4, r3
 800257a:	1b04      	subs	r4, r0, r4
 800257c:	42a0      	cmp	r0, r4
 800257e:	419b      	sbcs	r3, r3
 8002580:	425b      	negs	r3, r3
 8002582:	1acb      	subs	r3, r1, r3
 8002584:	4698      	mov	r8, r3
 8002586:	465d      	mov	r5, fp
 8002588:	0016      	movs	r6, r2
 800258a:	e5e2      	b.n	8002152 <__aeabi_dsub+0xaa>
 800258c:	464e      	mov	r6, r9
 800258e:	431e      	orrs	r6, r3
 8002590:	d100      	bne.n	8002594 <__aeabi_dsub+0x4ec>
 8002592:	e0ae      	b.n	80026f2 <__aeabi_dsub+0x64a>
 8002594:	1e66      	subs	r6, r4, #1
 8002596:	2c01      	cmp	r4, #1
 8002598:	d100      	bne.n	800259c <__aeabi_dsub+0x4f4>
 800259a:	e0fd      	b.n	8002798 <__aeabi_dsub+0x6f0>
 800259c:	4f7b      	ldr	r7, [pc, #492]	; (800278c <__aeabi_dsub+0x6e4>)
 800259e:	42bc      	cmp	r4, r7
 80025a0:	d100      	bne.n	80025a4 <__aeabi_dsub+0x4fc>
 80025a2:	e107      	b.n	80027b4 <__aeabi_dsub+0x70c>
 80025a4:	46b4      	mov	ip, r6
 80025a6:	e69b      	b.n	80022e0 <__aeabi_dsub+0x238>
 80025a8:	4664      	mov	r4, ip
 80025aa:	2220      	movs	r2, #32
 80025ac:	1b12      	subs	r2, r2, r4
 80025ae:	000c      	movs	r4, r1
 80025b0:	4094      	lsls	r4, r2
 80025b2:	0007      	movs	r7, r0
 80025b4:	4090      	lsls	r0, r2
 80025b6:	46a0      	mov	r8, r4
 80025b8:	4664      	mov	r4, ip
 80025ba:	1e42      	subs	r2, r0, #1
 80025bc:	4190      	sbcs	r0, r2
 80025be:	4662      	mov	r2, ip
 80025c0:	40e7      	lsrs	r7, r4
 80025c2:	4644      	mov	r4, r8
 80025c4:	40d1      	lsrs	r1, r2
 80025c6:	433c      	orrs	r4, r7
 80025c8:	4304      	orrs	r4, r0
 80025ca:	185b      	adds	r3, r3, r1
 80025cc:	e6f3      	b.n	80023b6 <__aeabi_dsub+0x30e>
 80025ce:	4c6f      	ldr	r4, [pc, #444]	; (800278c <__aeabi_dsub+0x6e4>)
 80025d0:	42a2      	cmp	r2, r4
 80025d2:	d100      	bne.n	80025d6 <__aeabi_dsub+0x52e>
 80025d4:	e0d5      	b.n	8002782 <__aeabi_dsub+0x6da>
 80025d6:	4448      	add	r0, r9
 80025d8:	185b      	adds	r3, r3, r1
 80025da:	4548      	cmp	r0, r9
 80025dc:	4189      	sbcs	r1, r1
 80025de:	4249      	negs	r1, r1
 80025e0:	185b      	adds	r3, r3, r1
 80025e2:	07dc      	lsls	r4, r3, #31
 80025e4:	0840      	lsrs	r0, r0, #1
 80025e6:	085b      	lsrs	r3, r3, #1
 80025e8:	4698      	mov	r8, r3
 80025ea:	0016      	movs	r6, r2
 80025ec:	4304      	orrs	r4, r0
 80025ee:	e6cc      	b.n	800238a <__aeabi_dsub+0x2e2>
 80025f0:	2a00      	cmp	r2, #0
 80025f2:	d000      	beq.n	80025f6 <__aeabi_dsub+0x54e>
 80025f4:	e082      	b.n	80026fc <__aeabi_dsub+0x654>
 80025f6:	000a      	movs	r2, r1
 80025f8:	4302      	orrs	r2, r0
 80025fa:	d140      	bne.n	800267e <__aeabi_dsub+0x5d6>
 80025fc:	2380      	movs	r3, #128	; 0x80
 80025fe:	2500      	movs	r5, #0
 8002600:	031b      	lsls	r3, r3, #12
 8002602:	e713      	b.n	800242c <__aeabi_dsub+0x384>
 8002604:	074b      	lsls	r3, r1, #29
 8002606:	08c2      	lsrs	r2, r0, #3
 8002608:	431a      	orrs	r2, r3
 800260a:	465d      	mov	r5, fp
 800260c:	08cb      	lsrs	r3, r1, #3
 800260e:	e6c5      	b.n	800239c <__aeabi_dsub+0x2f4>
 8002610:	464a      	mov	r2, r9
 8002612:	1a84      	subs	r4, r0, r2
 8002614:	42a0      	cmp	r0, r4
 8002616:	4192      	sbcs	r2, r2
 8002618:	1acb      	subs	r3, r1, r3
 800261a:	4252      	negs	r2, r2
 800261c:	1a9b      	subs	r3, r3, r2
 800261e:	4698      	mov	r8, r3
 8002620:	465d      	mov	r5, fp
 8002622:	e59e      	b.n	8002162 <__aeabi_dsub+0xba>
 8002624:	464a      	mov	r2, r9
 8002626:	0759      	lsls	r1, r3, #29
 8002628:	08d2      	lsrs	r2, r2, #3
 800262a:	430a      	orrs	r2, r1
 800262c:	08db      	lsrs	r3, r3, #3
 800262e:	e6f9      	b.n	8002424 <__aeabi_dsub+0x37c>
 8002630:	464a      	mov	r2, r9
 8002632:	1a14      	subs	r4, r2, r0
 8002634:	45a1      	cmp	r9, r4
 8002636:	4192      	sbcs	r2, r2
 8002638:	1a5b      	subs	r3, r3, r1
 800263a:	4252      	negs	r2, r2
 800263c:	1a9b      	subs	r3, r3, r2
 800263e:	4698      	mov	r8, r3
 8002640:	2601      	movs	r6, #1
 8002642:	e586      	b.n	8002152 <__aeabi_dsub+0xaa>
 8002644:	464a      	mov	r2, r9
 8002646:	0759      	lsls	r1, r3, #29
 8002648:	08d2      	lsrs	r2, r2, #3
 800264a:	430a      	orrs	r2, r1
 800264c:	08db      	lsrs	r3, r3, #3
 800264e:	e6a5      	b.n	800239c <__aeabi_dsub+0x2f4>
 8002650:	464c      	mov	r4, r9
 8002652:	4323      	orrs	r3, r4
 8002654:	001c      	movs	r4, r3
 8002656:	1e63      	subs	r3, r4, #1
 8002658:	419c      	sbcs	r4, r3
 800265a:	e65b      	b.n	8002314 <__aeabi_dsub+0x26c>
 800265c:	4665      	mov	r5, ip
 800265e:	001e      	movs	r6, r3
 8002660:	3d20      	subs	r5, #32
 8002662:	40ee      	lsrs	r6, r5
 8002664:	2c20      	cmp	r4, #32
 8002666:	d005      	beq.n	8002674 <__aeabi_dsub+0x5cc>
 8002668:	2540      	movs	r5, #64	; 0x40
 800266a:	1b2d      	subs	r5, r5, r4
 800266c:	40ab      	lsls	r3, r5
 800266e:	464c      	mov	r4, r9
 8002670:	431c      	orrs	r4, r3
 8002672:	46a2      	mov	sl, r4
 8002674:	4654      	mov	r4, sl
 8002676:	1e63      	subs	r3, r4, #1
 8002678:	419c      	sbcs	r4, r3
 800267a:	4334      	orrs	r4, r6
 800267c:	e77d      	b.n	800257a <__aeabi_dsub+0x4d2>
 800267e:	074b      	lsls	r3, r1, #29
 8002680:	08c2      	lsrs	r2, r0, #3
 8002682:	431a      	orrs	r2, r3
 8002684:	465d      	mov	r5, fp
 8002686:	08cb      	lsrs	r3, r1, #3
 8002688:	e6cc      	b.n	8002424 <__aeabi_dsub+0x37c>
 800268a:	000a      	movs	r2, r1
 800268c:	4302      	orrs	r2, r0
 800268e:	d100      	bne.n	8002692 <__aeabi_dsub+0x5ea>
 8002690:	e736      	b.n	8002500 <__aeabi_dsub+0x458>
 8002692:	074b      	lsls	r3, r1, #29
 8002694:	08c2      	lsrs	r2, r0, #3
 8002696:	431a      	orrs	r2, r3
 8002698:	465d      	mov	r5, fp
 800269a:	08cb      	lsrs	r3, r1, #3
 800269c:	e681      	b.n	80023a2 <__aeabi_dsub+0x2fa>
 800269e:	464a      	mov	r2, r9
 80026a0:	1a84      	subs	r4, r0, r2
 80026a2:	42a0      	cmp	r0, r4
 80026a4:	4192      	sbcs	r2, r2
 80026a6:	1acb      	subs	r3, r1, r3
 80026a8:	4252      	negs	r2, r2
 80026aa:	1a9b      	subs	r3, r3, r2
 80026ac:	4698      	mov	r8, r3
 80026ae:	465d      	mov	r5, fp
 80026b0:	2601      	movs	r6, #1
 80026b2:	e54e      	b.n	8002152 <__aeabi_dsub+0xaa>
 80026b4:	074b      	lsls	r3, r1, #29
 80026b6:	08c2      	lsrs	r2, r0, #3
 80026b8:	431a      	orrs	r2, r3
 80026ba:	08cb      	lsrs	r3, r1, #3
 80026bc:	e6b2      	b.n	8002424 <__aeabi_dsub+0x37c>
 80026be:	464a      	mov	r2, r9
 80026c0:	1a14      	subs	r4, r2, r0
 80026c2:	45a1      	cmp	r9, r4
 80026c4:	4192      	sbcs	r2, r2
 80026c6:	1a5f      	subs	r7, r3, r1
 80026c8:	4252      	negs	r2, r2
 80026ca:	1aba      	subs	r2, r7, r2
 80026cc:	4690      	mov	r8, r2
 80026ce:	0212      	lsls	r2, r2, #8
 80026d0:	d56b      	bpl.n	80027aa <__aeabi_dsub+0x702>
 80026d2:	464a      	mov	r2, r9
 80026d4:	1a84      	subs	r4, r0, r2
 80026d6:	42a0      	cmp	r0, r4
 80026d8:	4192      	sbcs	r2, r2
 80026da:	1acb      	subs	r3, r1, r3
 80026dc:	4252      	negs	r2, r2
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	4698      	mov	r8, r3
 80026e2:	465d      	mov	r5, fp
 80026e4:	e564      	b.n	80021b0 <__aeabi_dsub+0x108>
 80026e6:	074b      	lsls	r3, r1, #29
 80026e8:	08c2      	lsrs	r2, r0, #3
 80026ea:	431a      	orrs	r2, r3
 80026ec:	465d      	mov	r5, fp
 80026ee:	08cb      	lsrs	r3, r1, #3
 80026f0:	e698      	b.n	8002424 <__aeabi_dsub+0x37c>
 80026f2:	074b      	lsls	r3, r1, #29
 80026f4:	08c2      	lsrs	r2, r0, #3
 80026f6:	431a      	orrs	r2, r3
 80026f8:	08cb      	lsrs	r3, r1, #3
 80026fa:	e64f      	b.n	800239c <__aeabi_dsub+0x2f4>
 80026fc:	000a      	movs	r2, r1
 80026fe:	4302      	orrs	r2, r0
 8002700:	d090      	beq.n	8002624 <__aeabi_dsub+0x57c>
 8002702:	464a      	mov	r2, r9
 8002704:	075c      	lsls	r4, r3, #29
 8002706:	08d2      	lsrs	r2, r2, #3
 8002708:	4314      	orrs	r4, r2
 800270a:	2280      	movs	r2, #128	; 0x80
 800270c:	08db      	lsrs	r3, r3, #3
 800270e:	0312      	lsls	r2, r2, #12
 8002710:	4213      	tst	r3, r2
 8002712:	d008      	beq.n	8002726 <__aeabi_dsub+0x67e>
 8002714:	08ce      	lsrs	r6, r1, #3
 8002716:	4216      	tst	r6, r2
 8002718:	d105      	bne.n	8002726 <__aeabi_dsub+0x67e>
 800271a:	08c0      	lsrs	r0, r0, #3
 800271c:	0749      	lsls	r1, r1, #29
 800271e:	4308      	orrs	r0, r1
 8002720:	0004      	movs	r4, r0
 8002722:	465d      	mov	r5, fp
 8002724:	0033      	movs	r3, r6
 8002726:	0f61      	lsrs	r1, r4, #29
 8002728:	00e2      	lsls	r2, r4, #3
 800272a:	0749      	lsls	r1, r1, #29
 800272c:	08d2      	lsrs	r2, r2, #3
 800272e:	430a      	orrs	r2, r1
 8002730:	e678      	b.n	8002424 <__aeabi_dsub+0x37c>
 8002732:	074b      	lsls	r3, r1, #29
 8002734:	08c2      	lsrs	r2, r0, #3
 8002736:	431a      	orrs	r2, r3
 8002738:	08cb      	lsrs	r3, r1, #3
 800273a:	e632      	b.n	80023a2 <__aeabi_dsub+0x2fa>
 800273c:	4448      	add	r0, r9
 800273e:	185b      	adds	r3, r3, r1
 8002740:	4548      	cmp	r0, r9
 8002742:	4192      	sbcs	r2, r2
 8002744:	4698      	mov	r8, r3
 8002746:	4252      	negs	r2, r2
 8002748:	4490      	add	r8, r2
 800274a:	4643      	mov	r3, r8
 800274c:	0004      	movs	r4, r0
 800274e:	021b      	lsls	r3, r3, #8
 8002750:	d400      	bmi.n	8002754 <__aeabi_dsub+0x6ac>
 8002752:	e61a      	b.n	800238a <__aeabi_dsub+0x2e2>
 8002754:	4642      	mov	r2, r8
 8002756:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <__aeabi_dsub+0x6e8>)
 8002758:	2601      	movs	r6, #1
 800275a:	401a      	ands	r2, r3
 800275c:	4690      	mov	r8, r2
 800275e:	e614      	b.n	800238a <__aeabi_dsub+0x2e2>
 8002760:	4666      	mov	r6, ip
 8002762:	001f      	movs	r7, r3
 8002764:	3e20      	subs	r6, #32
 8002766:	40f7      	lsrs	r7, r6
 8002768:	2c20      	cmp	r4, #32
 800276a:	d005      	beq.n	8002778 <__aeabi_dsub+0x6d0>
 800276c:	2640      	movs	r6, #64	; 0x40
 800276e:	1b36      	subs	r6, r6, r4
 8002770:	40b3      	lsls	r3, r6
 8002772:	464c      	mov	r4, r9
 8002774:	431c      	orrs	r4, r3
 8002776:	46a2      	mov	sl, r4
 8002778:	4654      	mov	r4, sl
 800277a:	1e63      	subs	r3, r4, #1
 800277c:	419c      	sbcs	r4, r3
 800277e:	433c      	orrs	r4, r7
 8002780:	e5c8      	b.n	8002314 <__aeabi_dsub+0x26c>
 8002782:	0011      	movs	r1, r2
 8002784:	2300      	movs	r3, #0
 8002786:	2200      	movs	r2, #0
 8002788:	e532      	b.n	80021f0 <__aeabi_dsub+0x148>
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	000007ff 	.word	0x000007ff
 8002790:	ff7fffff 	.word	0xff7fffff
 8002794:	000007fe 	.word	0x000007fe
 8002798:	464a      	mov	r2, r9
 800279a:	1814      	adds	r4, r2, r0
 800279c:	4284      	cmp	r4, r0
 800279e:	4192      	sbcs	r2, r2
 80027a0:	185b      	adds	r3, r3, r1
 80027a2:	4698      	mov	r8, r3
 80027a4:	4252      	negs	r2, r2
 80027a6:	4490      	add	r8, r2
 80027a8:	e5e9      	b.n	800237e <__aeabi_dsub+0x2d6>
 80027aa:	4642      	mov	r2, r8
 80027ac:	4322      	orrs	r2, r4
 80027ae:	d100      	bne.n	80027b2 <__aeabi_dsub+0x70a>
 80027b0:	e6a6      	b.n	8002500 <__aeabi_dsub+0x458>
 80027b2:	e5ea      	b.n	800238a <__aeabi_dsub+0x2e2>
 80027b4:	074b      	lsls	r3, r1, #29
 80027b6:	08c2      	lsrs	r2, r0, #3
 80027b8:	431a      	orrs	r2, r3
 80027ba:	08cb      	lsrs	r3, r1, #3
 80027bc:	e632      	b.n	8002424 <__aeabi_dsub+0x37c>
 80027be:	2200      	movs	r2, #0
 80027c0:	4901      	ldr	r1, [pc, #4]	; (80027c8 <__aeabi_dsub+0x720>)
 80027c2:	0013      	movs	r3, r2
 80027c4:	e514      	b.n	80021f0 <__aeabi_dsub+0x148>
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	000007ff 	.word	0x000007ff

080027cc <__aeabi_dcmpun>:
 80027cc:	b570      	push	{r4, r5, r6, lr}
 80027ce:	0005      	movs	r5, r0
 80027d0:	480c      	ldr	r0, [pc, #48]	; (8002804 <__aeabi_dcmpun+0x38>)
 80027d2:	030c      	lsls	r4, r1, #12
 80027d4:	0016      	movs	r6, r2
 80027d6:	0049      	lsls	r1, r1, #1
 80027d8:	031a      	lsls	r2, r3, #12
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	0b24      	lsrs	r4, r4, #12
 80027de:	0d49      	lsrs	r1, r1, #21
 80027e0:	0b12      	lsrs	r2, r2, #12
 80027e2:	0d5b      	lsrs	r3, r3, #21
 80027e4:	4281      	cmp	r1, r0
 80027e6:	d008      	beq.n	80027fa <__aeabi_dcmpun+0x2e>
 80027e8:	4906      	ldr	r1, [pc, #24]	; (8002804 <__aeabi_dcmpun+0x38>)
 80027ea:	2000      	movs	r0, #0
 80027ec:	428b      	cmp	r3, r1
 80027ee:	d103      	bne.n	80027f8 <__aeabi_dcmpun+0x2c>
 80027f0:	4332      	orrs	r2, r6
 80027f2:	0010      	movs	r0, r2
 80027f4:	1e42      	subs	r2, r0, #1
 80027f6:	4190      	sbcs	r0, r2
 80027f8:	bd70      	pop	{r4, r5, r6, pc}
 80027fa:	2001      	movs	r0, #1
 80027fc:	432c      	orrs	r4, r5
 80027fe:	d1fb      	bne.n	80027f8 <__aeabi_dcmpun+0x2c>
 8002800:	e7f2      	b.n	80027e8 <__aeabi_dcmpun+0x1c>
 8002802:	46c0      	nop			; (mov r8, r8)
 8002804:	000007ff 	.word	0x000007ff

08002808 <__aeabi_d2iz>:
 8002808:	000a      	movs	r2, r1
 800280a:	b530      	push	{r4, r5, lr}
 800280c:	4c13      	ldr	r4, [pc, #76]	; (800285c <__aeabi_d2iz+0x54>)
 800280e:	0053      	lsls	r3, r2, #1
 8002810:	0309      	lsls	r1, r1, #12
 8002812:	0005      	movs	r5, r0
 8002814:	0b09      	lsrs	r1, r1, #12
 8002816:	2000      	movs	r0, #0
 8002818:	0d5b      	lsrs	r3, r3, #21
 800281a:	0fd2      	lsrs	r2, r2, #31
 800281c:	42a3      	cmp	r3, r4
 800281e:	dd04      	ble.n	800282a <__aeabi_d2iz+0x22>
 8002820:	480f      	ldr	r0, [pc, #60]	; (8002860 <__aeabi_d2iz+0x58>)
 8002822:	4283      	cmp	r3, r0
 8002824:	dd02      	ble.n	800282c <__aeabi_d2iz+0x24>
 8002826:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <__aeabi_d2iz+0x5c>)
 8002828:	18d0      	adds	r0, r2, r3
 800282a:	bd30      	pop	{r4, r5, pc}
 800282c:	2080      	movs	r0, #128	; 0x80
 800282e:	0340      	lsls	r0, r0, #13
 8002830:	4301      	orrs	r1, r0
 8002832:	480d      	ldr	r0, [pc, #52]	; (8002868 <__aeabi_d2iz+0x60>)
 8002834:	1ac0      	subs	r0, r0, r3
 8002836:	281f      	cmp	r0, #31
 8002838:	dd08      	ble.n	800284c <__aeabi_d2iz+0x44>
 800283a:	480c      	ldr	r0, [pc, #48]	; (800286c <__aeabi_d2iz+0x64>)
 800283c:	1ac3      	subs	r3, r0, r3
 800283e:	40d9      	lsrs	r1, r3
 8002840:	000b      	movs	r3, r1
 8002842:	4258      	negs	r0, r3
 8002844:	2a00      	cmp	r2, #0
 8002846:	d1f0      	bne.n	800282a <__aeabi_d2iz+0x22>
 8002848:	0018      	movs	r0, r3
 800284a:	e7ee      	b.n	800282a <__aeabi_d2iz+0x22>
 800284c:	4c08      	ldr	r4, [pc, #32]	; (8002870 <__aeabi_d2iz+0x68>)
 800284e:	40c5      	lsrs	r5, r0
 8002850:	46a4      	mov	ip, r4
 8002852:	4463      	add	r3, ip
 8002854:	4099      	lsls	r1, r3
 8002856:	000b      	movs	r3, r1
 8002858:	432b      	orrs	r3, r5
 800285a:	e7f2      	b.n	8002842 <__aeabi_d2iz+0x3a>
 800285c:	000003fe 	.word	0x000003fe
 8002860:	0000041d 	.word	0x0000041d
 8002864:	7fffffff 	.word	0x7fffffff
 8002868:	00000433 	.word	0x00000433
 800286c:	00000413 	.word	0x00000413
 8002870:	fffffbed 	.word	0xfffffbed

08002874 <__aeabi_i2d>:
 8002874:	b570      	push	{r4, r5, r6, lr}
 8002876:	2800      	cmp	r0, #0
 8002878:	d016      	beq.n	80028a8 <__aeabi_i2d+0x34>
 800287a:	17c3      	asrs	r3, r0, #31
 800287c:	18c5      	adds	r5, r0, r3
 800287e:	405d      	eors	r5, r3
 8002880:	0fc4      	lsrs	r4, r0, #31
 8002882:	0028      	movs	r0, r5
 8002884:	f000 f84c 	bl	8002920 <__clzsi2>
 8002888:	4a11      	ldr	r2, [pc, #68]	; (80028d0 <__aeabi_i2d+0x5c>)
 800288a:	1a12      	subs	r2, r2, r0
 800288c:	280a      	cmp	r0, #10
 800288e:	dc16      	bgt.n	80028be <__aeabi_i2d+0x4a>
 8002890:	0003      	movs	r3, r0
 8002892:	002e      	movs	r6, r5
 8002894:	3315      	adds	r3, #21
 8002896:	409e      	lsls	r6, r3
 8002898:	230b      	movs	r3, #11
 800289a:	1a18      	subs	r0, r3, r0
 800289c:	40c5      	lsrs	r5, r0
 800289e:	0553      	lsls	r3, r2, #21
 80028a0:	032d      	lsls	r5, r5, #12
 80028a2:	0b2d      	lsrs	r5, r5, #12
 80028a4:	0d5b      	lsrs	r3, r3, #21
 80028a6:	e003      	b.n	80028b0 <__aeabi_i2d+0x3c>
 80028a8:	2400      	movs	r4, #0
 80028aa:	2300      	movs	r3, #0
 80028ac:	2500      	movs	r5, #0
 80028ae:	2600      	movs	r6, #0
 80028b0:	051b      	lsls	r3, r3, #20
 80028b2:	432b      	orrs	r3, r5
 80028b4:	07e4      	lsls	r4, r4, #31
 80028b6:	4323      	orrs	r3, r4
 80028b8:	0030      	movs	r0, r6
 80028ba:	0019      	movs	r1, r3
 80028bc:	bd70      	pop	{r4, r5, r6, pc}
 80028be:	380b      	subs	r0, #11
 80028c0:	4085      	lsls	r5, r0
 80028c2:	0553      	lsls	r3, r2, #21
 80028c4:	032d      	lsls	r5, r5, #12
 80028c6:	2600      	movs	r6, #0
 80028c8:	0b2d      	lsrs	r5, r5, #12
 80028ca:	0d5b      	lsrs	r3, r3, #21
 80028cc:	e7f0      	b.n	80028b0 <__aeabi_i2d+0x3c>
 80028ce:	46c0      	nop			; (mov r8, r8)
 80028d0:	0000041e 	.word	0x0000041e

080028d4 <__aeabi_ui2d>:
 80028d4:	b510      	push	{r4, lr}
 80028d6:	1e04      	subs	r4, r0, #0
 80028d8:	d010      	beq.n	80028fc <__aeabi_ui2d+0x28>
 80028da:	f000 f821 	bl	8002920 <__clzsi2>
 80028de:	4b0f      	ldr	r3, [pc, #60]	; (800291c <__aeabi_ui2d+0x48>)
 80028e0:	1a1b      	subs	r3, r3, r0
 80028e2:	280a      	cmp	r0, #10
 80028e4:	dc11      	bgt.n	800290a <__aeabi_ui2d+0x36>
 80028e6:	220b      	movs	r2, #11
 80028e8:	0021      	movs	r1, r4
 80028ea:	1a12      	subs	r2, r2, r0
 80028ec:	40d1      	lsrs	r1, r2
 80028ee:	3015      	adds	r0, #21
 80028f0:	030a      	lsls	r2, r1, #12
 80028f2:	055b      	lsls	r3, r3, #21
 80028f4:	4084      	lsls	r4, r0
 80028f6:	0b12      	lsrs	r2, r2, #12
 80028f8:	0d5b      	lsrs	r3, r3, #21
 80028fa:	e001      	b.n	8002900 <__aeabi_ui2d+0x2c>
 80028fc:	2300      	movs	r3, #0
 80028fe:	2200      	movs	r2, #0
 8002900:	051b      	lsls	r3, r3, #20
 8002902:	4313      	orrs	r3, r2
 8002904:	0020      	movs	r0, r4
 8002906:	0019      	movs	r1, r3
 8002908:	bd10      	pop	{r4, pc}
 800290a:	0022      	movs	r2, r4
 800290c:	380b      	subs	r0, #11
 800290e:	4082      	lsls	r2, r0
 8002910:	055b      	lsls	r3, r3, #21
 8002912:	0312      	lsls	r2, r2, #12
 8002914:	2400      	movs	r4, #0
 8002916:	0b12      	lsrs	r2, r2, #12
 8002918:	0d5b      	lsrs	r3, r3, #21
 800291a:	e7f1      	b.n	8002900 <__aeabi_ui2d+0x2c>
 800291c:	0000041e 	.word	0x0000041e

08002920 <__clzsi2>:
 8002920:	211c      	movs	r1, #28
 8002922:	2301      	movs	r3, #1
 8002924:	041b      	lsls	r3, r3, #16
 8002926:	4298      	cmp	r0, r3
 8002928:	d301      	bcc.n	800292e <__clzsi2+0xe>
 800292a:	0c00      	lsrs	r0, r0, #16
 800292c:	3910      	subs	r1, #16
 800292e:	0a1b      	lsrs	r3, r3, #8
 8002930:	4298      	cmp	r0, r3
 8002932:	d301      	bcc.n	8002938 <__clzsi2+0x18>
 8002934:	0a00      	lsrs	r0, r0, #8
 8002936:	3908      	subs	r1, #8
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	4298      	cmp	r0, r3
 800293c:	d301      	bcc.n	8002942 <__clzsi2+0x22>
 800293e:	0900      	lsrs	r0, r0, #4
 8002940:	3904      	subs	r1, #4
 8002942:	a202      	add	r2, pc, #8	; (adr r2, 800294c <__clzsi2+0x2c>)
 8002944:	5c10      	ldrb	r0, [r2, r0]
 8002946:	1840      	adds	r0, r0, r1
 8002948:	4770      	bx	lr
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	02020304 	.word	0x02020304
 8002950:	01010101 	.word	0x01010101
	...

0800295c <MPU_I2C_Read>:
{
	HAL_I2C_Mem_Write(&_MPU9250_I2C,_dev_add,WriteAddr,I2C_MEMADD_SIZE_8BIT,pBuffer,NumByteToWrite,HAL_MAX_DELAY);
}

void MPU_I2C_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 800295c:	b590      	push	{r4, r7, lr}
 800295e:	b087      	sub	sp, #28
 8002960:	af02      	add	r7, sp, #8
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	0008      	movs	r0, r1
 8002966:	0011      	movs	r1, r2
 8002968:	1cfb      	adds	r3, r7, #3
 800296a:	1c02      	adds	r2, r0, #0
 800296c:	701a      	strb	r2, [r3, #0]
 800296e:	003b      	movs	r3, r7
 8002970:	1c0a      	adds	r2, r1, #0
 8002972:	801a      	strh	r2, [r3, #0]
	uint8_t data = ReadAddr | READWRITE_CMD;
 8002974:	2280      	movs	r2, #128	; 0x80
 8002976:	1cfb      	adds	r3, r7, #3
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	4313      	orrs	r3, r2
 800297c:	b2da      	uxtb	r2, r3
 800297e:	200f      	movs	r0, #15
 8002980:	183b      	adds	r3, r7, r0
 8002982:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&_MPU9250_I2C,_dev_add,&data,1,HAL_MAX_DELAY);
 8002984:	21d0      	movs	r1, #208	; 0xd0
 8002986:	183a      	adds	r2, r7, r0
 8002988:	480b      	ldr	r0, [pc, #44]	; (80029b8 <MPU_I2C_Read+0x5c>)
 800298a:	2301      	movs	r3, #1
 800298c:	425b      	negs	r3, r3
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	2301      	movs	r3, #1
 8002992:	f000 ffe3 	bl	800395c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&_MPU9250_I2C,_dev_add,pBuffer,NumByteToRead,HAL_MAX_DELAY);
 8002996:	24d0      	movs	r4, #208	; 0xd0
 8002998:	003b      	movs	r3, r7
 800299a:	8819      	ldrh	r1, [r3, #0]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	4806      	ldr	r0, [pc, #24]	; (80029b8 <MPU_I2C_Read+0x5c>)
 80029a0:	2301      	movs	r3, #1
 80029a2:	425b      	negs	r3, r3
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	000b      	movs	r3, r1
 80029a8:	0021      	movs	r1, r4
 80029aa:	f001 f8df 	bl	8003b6c <HAL_I2C_Master_Receive>
}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	46bd      	mov	sp, r7
 80029b2:	b005      	add	sp, #20
 80029b4:	bd90      	pop	{r4, r7, pc}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	20000220 	.word	0x20000220

080029bc <readRegisters>:
	#endif
	HAL_Delay(10);
}

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	603a      	str	r2, [r7, #0]
 80029c4:	1dfb      	adds	r3, r7, #7
 80029c6:	1c02      	adds	r2, r0, #0
 80029c8:	701a      	strb	r2, [r3, #0]
 80029ca:	1dbb      	adds	r3, r7, #6
 80029cc:	1c0a      	adds	r2, r1, #0
 80029ce:	701a      	strb	r2, [r3, #0]
	#ifdef USE_SPI
	MPU_SPI_Read(dest, subAddress, count);
	#else
	MPU_I2C_Read(dest, subAddress, count);
 80029d0:	1dbb      	adds	r3, r7, #6
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	1dfb      	adds	r3, r7, #7
 80029d8:	7819      	ldrb	r1, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	0018      	movs	r0, r3
 80029de:	f7ff ffbd 	bl	800295c <MPU_I2C_Read>
	#endif
}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b002      	add	sp, #8
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <MPU9250_GetData>:
	writeRegister(SMPDIV, srd);
}

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 80029ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
	// grab the data from the MPU9250
	readRegisters(ACCEL_OUT, 21, _buffer);
 80029f8:	203b      	movs	r0, #59	; 0x3b
 80029fa:	4b73      	ldr	r3, [pc, #460]	; (8002bc8 <MPU9250_GetData+0x1dc>)
 80029fc:	001a      	movs	r2, r3
 80029fe:	2115      	movs	r1, #21
 8002a00:	f7ff ffdc 	bl	80029bc <readRegisters>

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8002a04:	4b70      	ldr	r3, [pc, #448]	; (8002bc8 <MPU9250_GetData+0x1dc>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	021b      	lsls	r3, r3, #8
 8002a0a:	b21a      	sxth	r2, r3
 8002a0c:	4b6e      	ldr	r3, [pc, #440]	; (8002bc8 <MPU9250_GetData+0x1dc>)
 8002a0e:	785b      	ldrb	r3, [r3, #1]
 8002a10:	b21b      	sxth	r3, r3
 8002a12:	4313      	orrs	r3, r2
 8002a14:	b21a      	sxth	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	801a      	strh	r2, [r3, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 8002a1a:	4b6b      	ldr	r3, [pc, #428]	; (8002bc8 <MPU9250_GetData+0x1dc>)
 8002a1c:	789b      	ldrb	r3, [r3, #2]
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	b219      	sxth	r1, r3
 8002a22:	4b69      	ldr	r3, [pc, #420]	; (8002bc8 <MPU9250_GetData+0x1dc>)
 8002a24:	78db      	ldrb	r3, [r3, #3]
 8002a26:	b21a      	sxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	3302      	adds	r3, #2
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	b212      	sxth	r2, r2
 8002a30:	801a      	strh	r2, [r3, #0]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8002a32:	4b65      	ldr	r3, [pc, #404]	; (8002bc8 <MPU9250_GetData+0x1dc>)
 8002a34:	791b      	ldrb	r3, [r3, #4]
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	b219      	sxth	r1, r3
 8002a3a:	4b63      	ldr	r3, [pc, #396]	; (8002bc8 <MPU9250_GetData+0x1dc>)
 8002a3c:	795b      	ldrb	r3, [r3, #5]
 8002a3e:	b21a      	sxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	3304      	adds	r3, #4
 8002a44:	430a      	orrs	r2, r1
 8002a46:	b212      	sxth	r2, r2
 8002a48:	801a      	strh	r2, [r3, #0]
	GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 8002a4a:	4b5f      	ldr	r3, [pc, #380]	; (8002bc8 <MPU9250_GetData+0x1dc>)
 8002a4c:	7a1b      	ldrb	r3, [r3, #8]
 8002a4e:	021b      	lsls	r3, r3, #8
 8002a50:	b21a      	sxth	r2, r3
 8002a52:	4b5d      	ldr	r3, [pc, #372]	; (8002bc8 <MPU9250_GetData+0x1dc>)
 8002a54:	7a5b      	ldrb	r3, [r3, #9]
 8002a56:	b21b      	sxth	r3, r3
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	b21a      	sxth	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8002a60:	4b59      	ldr	r3, [pc, #356]	; (8002bc8 <MPU9250_GetData+0x1dc>)
 8002a62:	7a9b      	ldrb	r3, [r3, #10]
 8002a64:	021b      	lsls	r3, r3, #8
 8002a66:	b219      	sxth	r1, r3
 8002a68:	4b57      	ldr	r3, [pc, #348]	; (8002bc8 <MPU9250_GetData+0x1dc>)
 8002a6a:	7adb      	ldrb	r3, [r3, #11]
 8002a6c:	b21a      	sxth	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3302      	adds	r3, #2
 8002a72:	430a      	orrs	r2, r1
 8002a74:	b212      	sxth	r2, r2
 8002a76:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 8002a78:	4b53      	ldr	r3, [pc, #332]	; (8002bc8 <MPU9250_GetData+0x1dc>)
 8002a7a:	7b1b      	ldrb	r3, [r3, #12]
 8002a7c:	021b      	lsls	r3, r3, #8
 8002a7e:	b219      	sxth	r1, r3
 8002a80:	4b51      	ldr	r3, [pc, #324]	; (8002bc8 <MPU9250_GetData+0x1dc>)
 8002a82:	7b5b      	ldrb	r3, [r3, #13]
 8002a84:	b21a      	sxth	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	b212      	sxth	r2, r2
 8002a8e:	801a      	strh	r2, [r3, #0]

	int16_t magx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 8002a90:	4b4d      	ldr	r3, [pc, #308]	; (8002bc8 <MPU9250_GetData+0x1dc>)
 8002a92:	7bdb      	ldrb	r3, [r3, #15]
 8002a94:	021b      	lsls	r3, r3, #8
 8002a96:	b219      	sxth	r1, r3
 8002a98:	4b4b      	ldr	r3, [pc, #300]	; (8002bc8 <MPU9250_GetData+0x1dc>)
 8002a9a:	7b9b      	ldrb	r3, [r3, #14]
 8002a9c:	b21a      	sxth	r2, r3
 8002a9e:	2016      	movs	r0, #22
 8002aa0:	183b      	adds	r3, r7, r0
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	801a      	strh	r2, [r3, #0]
	int16_t magy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 8002aa6:	4b48      	ldr	r3, [pc, #288]	; (8002bc8 <MPU9250_GetData+0x1dc>)
 8002aa8:	7c5b      	ldrb	r3, [r3, #17]
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	b219      	sxth	r1, r3
 8002aae:	4b46      	ldr	r3, [pc, #280]	; (8002bc8 <MPU9250_GetData+0x1dc>)
 8002ab0:	7c1b      	ldrb	r3, [r3, #16]
 8002ab2:	b21a      	sxth	r2, r3
 8002ab4:	2514      	movs	r5, #20
 8002ab6:	197b      	adds	r3, r7, r5
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	801a      	strh	r2, [r3, #0]
	int16_t magz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 8002abc:	4b42      	ldr	r3, [pc, #264]	; (8002bc8 <MPU9250_GetData+0x1dc>)
 8002abe:	7cdb      	ldrb	r3, [r3, #19]
 8002ac0:	021b      	lsls	r3, r3, #8
 8002ac2:	b219      	sxth	r1, r3
 8002ac4:	4b40      	ldr	r3, [pc, #256]	; (8002bc8 <MPU9250_GetData+0x1dc>)
 8002ac6:	7c9b      	ldrb	r3, [r3, #18]
 8002ac8:	b21a      	sxth	r2, r3
 8002aca:	2612      	movs	r6, #18
 8002acc:	19bb      	adds	r3, r7, r6
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	801a      	strh	r2, [r3, #0]

	MagData[0] = (int16_t)((float)magx * ((float)(_mag_adjust[0] - 128) / 256.0f + 1.0f));
 8002ad2:	183b      	adds	r3, r7, r0
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	5e9b      	ldrsh	r3, [r3, r2]
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f7fe f8c3 	bl	8000c64 <__aeabi_i2f>
 8002ade:	1c04      	adds	r4, r0, #0
 8002ae0:	4b3a      	ldr	r3, [pc, #232]	; (8002bcc <MPU9250_GetData+0x1e0>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	3b80      	subs	r3, #128	; 0x80
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f7fe f8bc 	bl	8000c64 <__aeabi_i2f>
 8002aec:	1c03      	adds	r3, r0, #0
 8002aee:	2187      	movs	r1, #135	; 0x87
 8002af0:	05c9      	lsls	r1, r1, #23
 8002af2:	1c18      	adds	r0, r3, #0
 8002af4:	f7fd fe70 	bl	80007d8 <__aeabi_fdiv>
 8002af8:	1c03      	adds	r3, r0, #0
 8002afa:	21fe      	movs	r1, #254	; 0xfe
 8002afc:	0589      	lsls	r1, r1, #22
 8002afe:	1c18      	adds	r0, r3, #0
 8002b00:	f7fd fcce 	bl	80004a0 <__aeabi_fadd>
 8002b04:	1c03      	adds	r3, r0, #0
 8002b06:	1c19      	adds	r1, r3, #0
 8002b08:	1c20      	adds	r0, r4, #0
 8002b0a:	f7fd ff71 	bl	80009f0 <__aeabi_fmul>
 8002b0e:	1c03      	adds	r3, r0, #0
 8002b10:	1c18      	adds	r0, r3, #0
 8002b12:	f7fe f887 	bl	8000c24 <__aeabi_f2iz>
 8002b16:	0003      	movs	r3, r0
 8002b18:	b21a      	sxth	r2, r3
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	801a      	strh	r2, [r3, #0]
	MagData[1] = (int16_t)((float)magy * ((float)(_mag_adjust[1] - 128) / 256.0f + 1.0f));
 8002b1e:	197b      	adds	r3, r7, r5
 8002b20:	2200      	movs	r2, #0
 8002b22:	5e9b      	ldrsh	r3, [r3, r2]
 8002b24:	0018      	movs	r0, r3
 8002b26:	f7fe f89d 	bl	8000c64 <__aeabi_i2f>
 8002b2a:	1c04      	adds	r4, r0, #0
 8002b2c:	4b27      	ldr	r3, [pc, #156]	; (8002bcc <MPU9250_GetData+0x1e0>)
 8002b2e:	785b      	ldrb	r3, [r3, #1]
 8002b30:	3b80      	subs	r3, #128	; 0x80
 8002b32:	0018      	movs	r0, r3
 8002b34:	f7fe f896 	bl	8000c64 <__aeabi_i2f>
 8002b38:	1c03      	adds	r3, r0, #0
 8002b3a:	2187      	movs	r1, #135	; 0x87
 8002b3c:	05c9      	lsls	r1, r1, #23
 8002b3e:	1c18      	adds	r0, r3, #0
 8002b40:	f7fd fe4a 	bl	80007d8 <__aeabi_fdiv>
 8002b44:	1c03      	adds	r3, r0, #0
 8002b46:	21fe      	movs	r1, #254	; 0xfe
 8002b48:	0589      	lsls	r1, r1, #22
 8002b4a:	1c18      	adds	r0, r3, #0
 8002b4c:	f7fd fca8 	bl	80004a0 <__aeabi_fadd>
 8002b50:	1c03      	adds	r3, r0, #0
 8002b52:	1c19      	adds	r1, r3, #0
 8002b54:	1c20      	adds	r0, r4, #0
 8002b56:	f7fd ff4b 	bl	80009f0 <__aeabi_fmul>
 8002b5a:	1c03      	adds	r3, r0, #0
 8002b5c:	1c1a      	adds	r2, r3, #0
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	1c9c      	adds	r4, r3, #2
 8002b62:	1c10      	adds	r0, r2, #0
 8002b64:	f7fe f85e 	bl	8000c24 <__aeabi_f2iz>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	b21b      	sxth	r3, r3
 8002b6c:	8023      	strh	r3, [r4, #0]
	MagData[2] = (int16_t)((float)magz * ((float)(_mag_adjust[2] - 128) / 256.0f + 1.0f));
 8002b6e:	19bb      	adds	r3, r7, r6
 8002b70:	2200      	movs	r2, #0
 8002b72:	5e9b      	ldrsh	r3, [r3, r2]
 8002b74:	0018      	movs	r0, r3
 8002b76:	f7fe f875 	bl	8000c64 <__aeabi_i2f>
 8002b7a:	1c04      	adds	r4, r0, #0
 8002b7c:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <MPU9250_GetData+0x1e0>)
 8002b7e:	789b      	ldrb	r3, [r3, #2]
 8002b80:	3b80      	subs	r3, #128	; 0x80
 8002b82:	0018      	movs	r0, r3
 8002b84:	f7fe f86e 	bl	8000c64 <__aeabi_i2f>
 8002b88:	1c03      	adds	r3, r0, #0
 8002b8a:	2187      	movs	r1, #135	; 0x87
 8002b8c:	05c9      	lsls	r1, r1, #23
 8002b8e:	1c18      	adds	r0, r3, #0
 8002b90:	f7fd fe22 	bl	80007d8 <__aeabi_fdiv>
 8002b94:	1c03      	adds	r3, r0, #0
 8002b96:	21fe      	movs	r1, #254	; 0xfe
 8002b98:	0589      	lsls	r1, r1, #22
 8002b9a:	1c18      	adds	r0, r3, #0
 8002b9c:	f7fd fc80 	bl	80004a0 <__aeabi_fadd>
 8002ba0:	1c03      	adds	r3, r0, #0
 8002ba2:	1c19      	adds	r1, r3, #0
 8002ba4:	1c20      	adds	r0, r4, #0
 8002ba6:	f7fd ff23 	bl	80009f0 <__aeabi_fmul>
 8002baa:	1c03      	adds	r3, r0, #0
 8002bac:	1c1a      	adds	r2, r3, #0
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	1d1c      	adds	r4, r3, #4
 8002bb2:	1c10      	adds	r0, r2, #0
 8002bb4:	f7fe f836 	bl	8000c24 <__aeabi_f2iz>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	b21b      	sxth	r3, r3
 8002bbc:	8023      	strh	r3, [r4, #0]
}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	b007      	add	sp, #28
 8002bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bc6:	46c0      	nop			; (mov r8, r8)
 8002bc8:	200001f8 	.word	0x200001f8
 8002bcc:	20000210 	.word	0x20000210

08002bd0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd6:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <MX_GPIO_Init+0x28>)
 8002bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bda:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <MX_GPIO_Init+0x28>)
 8002bdc:	2101      	movs	r1, #1
 8002bde:	430a      	orrs	r2, r1
 8002be0:	635a      	str	r2, [r3, #52]	; 0x34
 8002be2:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <MX_GPIO_Init+0x28>)
 8002be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be6:	2201      	movs	r2, #1
 8002be8:	4013      	ands	r3, r2
 8002bea:	607b      	str	r3, [r7, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]

}
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	b002      	add	sp, #8
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	40021000 	.word	0x40021000

08002bfc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c00:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <MX_I2C1_Init+0x74>)
 8002c02:	4a1c      	ldr	r2, [pc, #112]	; (8002c74 <MX_I2C1_Init+0x78>)
 8002c04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 8002c06:	4b1a      	ldr	r3, [pc, #104]	; (8002c70 <MX_I2C1_Init+0x74>)
 8002c08:	4a1b      	ldr	r2, [pc, #108]	; (8002c78 <MX_I2C1_Init+0x7c>)
 8002c0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002c0c:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <MX_I2C1_Init+0x74>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c12:	4b17      	ldr	r3, [pc, #92]	; (8002c70 <MX_I2C1_Init+0x74>)
 8002c14:	2201      	movs	r2, #1
 8002c16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c18:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <MX_I2C1_Init+0x74>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002c1e:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <MX_I2C1_Init+0x74>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c24:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <MX_I2C1_Init+0x74>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c2a:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <MX_I2C1_Init+0x74>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c30:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <MX_I2C1_Init+0x74>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c36:	4b0e      	ldr	r3, [pc, #56]	; (8002c70 <MX_I2C1_Init+0x74>)
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f000 fdf9 	bl	8003830 <HAL_I2C_Init>
 8002c3e:	1e03      	subs	r3, r0, #0
 8002c40:	d001      	beq.n	8002c46 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002c42:	f000 f978 	bl	8002f36 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c46:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <MX_I2C1_Init+0x74>)
 8002c48:	2100      	movs	r1, #0
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f001 fa8e 	bl	800416c <HAL_I2CEx_ConfigAnalogFilter>
 8002c50:	1e03      	subs	r3, r0, #0
 8002c52:	d001      	beq.n	8002c58 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002c54:	f000 f96f 	bl	8002f36 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002c58:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <MX_I2C1_Init+0x74>)
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f001 fad1 	bl	8004204 <HAL_I2CEx_ConfigDigitalFilter>
 8002c62:	1e03      	subs	r3, r0, #0
 8002c64:	d001      	beq.n	8002c6a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002c66:	f000 f966 	bl	8002f36 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20000220 	.word	0x20000220
 8002c74:	40005400 	.word	0x40005400
 8002c78:	0010061a 	.word	0x0010061a

08002c7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002c7c:	b590      	push	{r4, r7, lr}
 8002c7e:	b08b      	sub	sp, #44	; 0x2c
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c84:	2414      	movs	r4, #20
 8002c86:	193b      	adds	r3, r7, r4
 8002c88:	0018      	movs	r0, r3
 8002c8a:	2314      	movs	r3, #20
 8002c8c:	001a      	movs	r2, r3
 8002c8e:	2100      	movs	r1, #0
 8002c90:	f002 fe4a 	bl	8005928 <memset>
  if(i2cHandle->Instance==I2C1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a1c      	ldr	r2, [pc, #112]	; (8002d0c <HAL_I2C_MspInit+0x90>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d131      	bne.n	8002d02 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c9e:	4b1c      	ldr	r3, [pc, #112]	; (8002d10 <HAL_I2C_MspInit+0x94>)
 8002ca0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ca2:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <HAL_I2C_MspInit+0x94>)
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	635a      	str	r2, [r3, #52]	; 0x34
 8002caa:	4b19      	ldr	r3, [pc, #100]	; (8002d10 <HAL_I2C_MspInit+0x94>)
 8002cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cae:	2201      	movs	r2, #1
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cb6:	193b      	adds	r3, r7, r4
 8002cb8:	22c0      	movs	r2, #192	; 0xc0
 8002cba:	00d2      	lsls	r2, r2, #3
 8002cbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cbe:	0021      	movs	r1, r4
 8002cc0:	187b      	adds	r3, r7, r1
 8002cc2:	2212      	movs	r2, #18
 8002cc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	187b      	adds	r3, r7, r1
 8002cc8:	2200      	movs	r2, #0
 8002cca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ccc:	187b      	adds	r3, r7, r1
 8002cce:	2200      	movs	r2, #0
 8002cd0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002cd2:	187b      	adds	r3, r7, r1
 8002cd4:	2206      	movs	r2, #6
 8002cd6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd8:	187a      	adds	r2, r7, r1
 8002cda:	23a0      	movs	r3, #160	; 0xa0
 8002cdc:	05db      	lsls	r3, r3, #23
 8002cde:	0011      	movs	r1, r2
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f000 fc41 	bl	8003568 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <HAL_I2C_MspInit+0x94>)
 8002ce8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cea:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <HAL_I2C_MspInit+0x94>)
 8002cec:	2180      	movs	r1, #128	; 0x80
 8002cee:	0389      	lsls	r1, r1, #14
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cf4:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <HAL_I2C_MspInit+0x94>)
 8002cf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cf8:	2380      	movs	r3, #128	; 0x80
 8002cfa:	039b      	lsls	r3, r3, #14
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b00b      	add	sp, #44	; 0x2c
 8002d08:	bd90      	pop	{r4, r7, pc}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	40005400 	.word	0x40005400
 8002d10:	40021000 	.word	0x40021000

08002d14 <imu_9dof_convert>:
	double acc_data_calc[3];
	double gyro_data_calc[3];
};

void imu_9dof_convert(struct imu_9dof * input, struct imu_9dof_calc * output)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
	output->acc_data_calc[0] = (double) input->acc_data[0] / 16384;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	5e9b      	ldrsh	r3, [r3, r2]
 8002d24:	0018      	movs	r0, r3
 8002d26:	f7ff fda5 	bl	8002874 <__aeabi_i2d>
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	4b37      	ldr	r3, [pc, #220]	; (8002e0c <imu_9dof_convert+0xf8>)
 8002d2e:	f7fe fb49 	bl	80013c4 <__aeabi_ddiv>
 8002d32:	0002      	movs	r2, r0
 8002d34:	000b      	movs	r3, r1
 8002d36:	6839      	ldr	r1, [r7, #0]
 8002d38:	600a      	str	r2, [r1, #0]
 8002d3a:	604b      	str	r3, [r1, #4]
	output->acc_data_calc[1] = (double) input->acc_data[1] / 16384;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	5e9b      	ldrsh	r3, [r3, r2]
 8002d42:	0018      	movs	r0, r3
 8002d44:	f7ff fd96 	bl	8002874 <__aeabi_i2d>
 8002d48:	2200      	movs	r2, #0
 8002d4a:	4b30      	ldr	r3, [pc, #192]	; (8002e0c <imu_9dof_convert+0xf8>)
 8002d4c:	f7fe fb3a 	bl	80013c4 <__aeabi_ddiv>
 8002d50:	0002      	movs	r2, r0
 8002d52:	000b      	movs	r3, r1
 8002d54:	6839      	ldr	r1, [r7, #0]
 8002d56:	608a      	str	r2, [r1, #8]
 8002d58:	60cb      	str	r3, [r1, #12]
	output->acc_data_calc[2] = (double) input->acc_data[2] / 16384;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2204      	movs	r2, #4
 8002d5e:	5e9b      	ldrsh	r3, [r3, r2]
 8002d60:	0018      	movs	r0, r3
 8002d62:	f7ff fd87 	bl	8002874 <__aeabi_i2d>
 8002d66:	2200      	movs	r2, #0
 8002d68:	4b28      	ldr	r3, [pc, #160]	; (8002e0c <imu_9dof_convert+0xf8>)
 8002d6a:	f7fe fb2b 	bl	80013c4 <__aeabi_ddiv>
 8002d6e:	0002      	movs	r2, r0
 8002d70:	000b      	movs	r3, r1
 8002d72:	6839      	ldr	r1, [r7, #0]
 8002d74:	610a      	str	r2, [r1, #16]
 8002d76:	614b      	str	r3, [r1, #20]
	output->gyro_data_calc[0] = (double) input->gyro_data[0] * 250 / 32768;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	220c      	movs	r2, #12
 8002d7c:	5e9b      	ldrsh	r3, [r3, r2]
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f7ff fd78 	bl	8002874 <__aeabi_i2d>
 8002d84:	2200      	movs	r2, #0
 8002d86:	4b22      	ldr	r3, [pc, #136]	; (8002e10 <imu_9dof_convert+0xfc>)
 8002d88:	f7fe ff22 	bl	8001bd0 <__aeabi_dmul>
 8002d8c:	0002      	movs	r2, r0
 8002d8e:	000b      	movs	r3, r1
 8002d90:	0010      	movs	r0, r2
 8002d92:	0019      	movs	r1, r3
 8002d94:	2200      	movs	r2, #0
 8002d96:	4b1f      	ldr	r3, [pc, #124]	; (8002e14 <imu_9dof_convert+0x100>)
 8002d98:	f7fe fb14 	bl	80013c4 <__aeabi_ddiv>
 8002d9c:	0002      	movs	r2, r0
 8002d9e:	000b      	movs	r3, r1
 8002da0:	6839      	ldr	r1, [r7, #0]
 8002da2:	618a      	str	r2, [r1, #24]
 8002da4:	61cb      	str	r3, [r1, #28]
	output->gyro_data_calc[1] = (double) input->gyro_data[1] * 250 / 32768;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	220e      	movs	r2, #14
 8002daa:	5e9b      	ldrsh	r3, [r3, r2]
 8002dac:	0018      	movs	r0, r3
 8002dae:	f7ff fd61 	bl	8002874 <__aeabi_i2d>
 8002db2:	2200      	movs	r2, #0
 8002db4:	4b16      	ldr	r3, [pc, #88]	; (8002e10 <imu_9dof_convert+0xfc>)
 8002db6:	f7fe ff0b 	bl	8001bd0 <__aeabi_dmul>
 8002dba:	0002      	movs	r2, r0
 8002dbc:	000b      	movs	r3, r1
 8002dbe:	0010      	movs	r0, r2
 8002dc0:	0019      	movs	r1, r3
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	4b13      	ldr	r3, [pc, #76]	; (8002e14 <imu_9dof_convert+0x100>)
 8002dc6:	f7fe fafd 	bl	80013c4 <__aeabi_ddiv>
 8002dca:	0002      	movs	r2, r0
 8002dcc:	000b      	movs	r3, r1
 8002dce:	6839      	ldr	r1, [r7, #0]
 8002dd0:	620a      	str	r2, [r1, #32]
 8002dd2:	624b      	str	r3, [r1, #36]	; 0x24
	output->gyro_data_calc[2] = (double) input->gyro_data[2] * 250 / 32768;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2210      	movs	r2, #16
 8002dd8:	5e9b      	ldrsh	r3, [r3, r2]
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f7ff fd4a 	bl	8002874 <__aeabi_i2d>
 8002de0:	2200      	movs	r2, #0
 8002de2:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <imu_9dof_convert+0xfc>)
 8002de4:	f7fe fef4 	bl	8001bd0 <__aeabi_dmul>
 8002de8:	0002      	movs	r2, r0
 8002dea:	000b      	movs	r3, r1
 8002dec:	0010      	movs	r0, r2
 8002dee:	0019      	movs	r1, r3
 8002df0:	2200      	movs	r2, #0
 8002df2:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <imu_9dof_convert+0x100>)
 8002df4:	f7fe fae6 	bl	80013c4 <__aeabi_ddiv>
 8002df8:	0002      	movs	r2, r0
 8002dfa:	000b      	movs	r3, r1
 8002dfc:	6839      	ldr	r1, [r7, #0]
 8002dfe:	628a      	str	r2, [r1, #40]	; 0x28
 8002e00:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	46bd      	mov	sp, r7
 8002e06:	b002      	add	sp, #8
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	40d00000 	.word	0x40d00000
 8002e10:	406f4000 	.word	0x406f4000
 8002e14:	40e00000 	.word	0x40e00000

08002e18 <imu_9dof_get_data>:

void imu_9dof_get_data(struct imu_9dof * imu_9dof_data, struct imu_9dof_calc * imu_9dof_calculated)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
    MPU9250_GetData(imu_9dof_data->acc_data, imu_9dof_data->mag_data, imu_9dof_data->gyro_data);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	0018      	movs	r0, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	1d99      	adds	r1, r3, #6
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	330c      	adds	r3, #12
 8002e2e:	001a      	movs	r2, r3
 8002e30:	f7ff fddc 	bl	80029ec <MPU9250_GetData>
    imu_9dof_convert(&imu_9dof_data, &imu_9dof_calculated);
 8002e34:	003a      	movs	r2, r7
 8002e36:	1d3b      	adds	r3, r7, #4
 8002e38:	0011      	movs	r1, r2
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f7ff ff6a 	bl	8002d14 <imu_9dof_convert>
}
 8002e40:	46c0      	nop			; (mov r8, r8)
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b002      	add	sp, #8
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b092      	sub	sp, #72	; 0x48
 8002e4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e4e:	f000 fa3b 	bl	80032c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e52:	f000 f80e 	bl	8002e72 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e56:	f7ff febb 	bl	8002bd0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002e5a:	f7ff fecf 	bl	8002bfc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002e5e:	f000 f971 	bl	8003144 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  	 imu_9dof_get_data(&imu_9dof_data, &imu_9dof_calculated);
 8002e62:	003a      	movs	r2, r7
 8002e64:	2334      	movs	r3, #52	; 0x34
 8002e66:	18fb      	adds	r3, r7, r3
 8002e68:	0011      	movs	r1, r2
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f7ff ffd4 	bl	8002e18 <imu_9dof_get_data>
 8002e70:	e7f7      	b.n	8002e62 <main+0x1a>

08002e72 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e72:	b590      	push	{r4, r7, lr}
 8002e74:	b099      	sub	sp, #100	; 0x64
 8002e76:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e78:	242c      	movs	r4, #44	; 0x2c
 8002e7a:	193b      	adds	r3, r7, r4
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	2334      	movs	r3, #52	; 0x34
 8002e80:	001a      	movs	r2, r3
 8002e82:	2100      	movs	r1, #0
 8002e84:	f002 fd50 	bl	8005928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e88:	231c      	movs	r3, #28
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	2310      	movs	r3, #16
 8002e90:	001a      	movs	r2, r3
 8002e92:	2100      	movs	r1, #0
 8002e94:	f002 fd48 	bl	8005928 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e98:	003b      	movs	r3, r7
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	231c      	movs	r3, #28
 8002e9e:	001a      	movs	r2, r3
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	f002 fd41 	bl	8005928 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ea6:	2380      	movs	r3, #128	; 0x80
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f001 f9f6 	bl	800429c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002eb0:	193b      	adds	r3, r7, r4
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002eb6:	193b      	adds	r3, r7, r4
 8002eb8:	2280      	movs	r2, #128	; 0x80
 8002eba:	0052      	lsls	r2, r2, #1
 8002ebc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002ebe:	193b      	adds	r3, r7, r4
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ec4:	193b      	adds	r3, r7, r4
 8002ec6:	2240      	movs	r2, #64	; 0x40
 8002ec8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002eca:	193b      	adds	r3, r7, r4
 8002ecc:	2200      	movs	r2, #0
 8002ece:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ed0:	193b      	adds	r3, r7, r4
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f001 fa2e 	bl	8004334 <HAL_RCC_OscConfig>
 8002ed8:	1e03      	subs	r3, r0, #0
 8002eda:	d001      	beq.n	8002ee0 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002edc:	f000 f82b 	bl	8002f36 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ee0:	211c      	movs	r1, #28
 8002ee2:	187b      	adds	r3, r7, r1
 8002ee4:	2207      	movs	r2, #7
 8002ee6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002ee8:	187b      	adds	r3, r7, r1
 8002eea:	2200      	movs	r2, #0
 8002eec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002eee:	187b      	adds	r3, r7, r1
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ef4:	187b      	adds	r3, r7, r1
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002efa:	187b      	adds	r3, r7, r1
 8002efc:	2100      	movs	r1, #0
 8002efe:	0018      	movs	r0, r3
 8002f00:	f001 fd2e 	bl	8004960 <HAL_RCC_ClockConfig>
 8002f04:	1e03      	subs	r3, r0, #0
 8002f06:	d001      	beq.n	8002f0c <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002f08:	f000 f815 	bl	8002f36 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8002f0c:	003b      	movs	r3, r7
 8002f0e:	2222      	movs	r2, #34	; 0x22
 8002f10:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002f12:	003b      	movs	r3, r7
 8002f14:	2200      	movs	r2, #0
 8002f16:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002f18:	003b      	movs	r3, r7
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f1e:	003b      	movs	r3, r7
 8002f20:	0018      	movs	r0, r3
 8002f22:	f001 fec7 	bl	8004cb4 <HAL_RCCEx_PeriphCLKConfig>
 8002f26:	1e03      	subs	r3, r0, #0
 8002f28:	d001      	beq.n	8002f2e <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002f2a:	f000 f804 	bl	8002f36 <Error_Handler>
  }
}
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	46bd      	mov	sp, r7
 8002f32:	b019      	add	sp, #100	; 0x64
 8002f34:	bd90      	pop	{r4, r7, pc}

08002f36 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f3a:	b672      	cpsid	i
}
 8002f3c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f3e:	e7fe      	b.n	8002f3e <Error_Handler+0x8>

08002f40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f46:	4b11      	ldr	r3, [pc, #68]	; (8002f8c <HAL_MspInit+0x4c>)
 8002f48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f4a:	4b10      	ldr	r3, [pc, #64]	; (8002f8c <HAL_MspInit+0x4c>)
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	641a      	str	r2, [r3, #64]	; 0x40
 8002f52:	4b0e      	ldr	r3, [pc, #56]	; (8002f8c <HAL_MspInit+0x4c>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	2201      	movs	r2, #1
 8002f58:	4013      	ands	r3, r2
 8002f5a:	607b      	str	r3, [r7, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f5e:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <HAL_MspInit+0x4c>)
 8002f60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f62:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <HAL_MspInit+0x4c>)
 8002f64:	2180      	movs	r1, #128	; 0x80
 8002f66:	0549      	lsls	r1, r1, #21
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f6c:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <HAL_MspInit+0x4c>)
 8002f6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f70:	2380      	movs	r3, #128	; 0x80
 8002f72:	055b      	lsls	r3, r3, #21
 8002f74:	4013      	ands	r3, r2
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8002f7a:	23c0      	movs	r3, #192	; 0xc0
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	0018      	movs	r0, r3
 8002f80:	f000 fa28 	bl	80033d4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f84:	46c0      	nop			; (mov r8, r8)
 8002f86:	46bd      	mov	sp, r7
 8002f88:	b002      	add	sp, #8
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40021000 	.word	0x40021000

08002f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f94:	e7fe      	b.n	8002f94 <NMI_Handler+0x4>

08002f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f9a:	e7fe      	b.n	8002f9a <HardFault_Handler+0x4>

08002f9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002fa0:	46c0      	nop			; (mov r8, r8)
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fb4:	f000 f9f2 	bl	800339c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fb8:	46c0      	nop			; (mov r8, r8)
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	af00      	add	r7, sp, #0
	return 1;
 8002fc2:	2301      	movs	r3, #1
}
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <_kill>:

int _kill(int pid, int sig)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002fd4:	f002 fc7e 	bl	80058d4 <__errno>
 8002fd8:	0003      	movs	r3, r0
 8002fda:	2216      	movs	r2, #22
 8002fdc:	601a      	str	r2, [r3, #0]
	return -1;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	425b      	negs	r3, r3
}
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	b002      	add	sp, #8
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <_exit>:

void _exit (int status)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	425a      	negs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	0011      	movs	r1, r2
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f7ff ffe5 	bl	8002fca <_kill>
	while (1) {}		/* Make sure we hang here */
 8003000:	e7fe      	b.n	8003000 <_exit+0x16>

08003002 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b086      	sub	sp, #24
 8003006:	af00      	add	r7, sp, #0
 8003008:	60f8      	str	r0, [r7, #12]
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	e00a      	b.n	800302a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003014:	e000      	b.n	8003018 <_read+0x16>
 8003016:	bf00      	nop
 8003018:	0001      	movs	r1, r0
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	1c5a      	adds	r2, r3, #1
 800301e:	60ba      	str	r2, [r7, #8]
 8003020:	b2ca      	uxtb	r2, r1
 8003022:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	3301      	adds	r3, #1
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	429a      	cmp	r2, r3
 8003030:	dbf0      	blt.n	8003014 <_read+0x12>
	}

return len;
 8003032:	687b      	ldr	r3, [r7, #4]
}
 8003034:	0018      	movs	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	b006      	add	sp, #24
 800303a:	bd80      	pop	{r7, pc}

0800303c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	e009      	b.n	8003062 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	60ba      	str	r2, [r7, #8]
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	0018      	movs	r0, r3
 8003058:	e000      	b.n	800305c <_write+0x20>
 800305a:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	3301      	adds	r3, #1
 8003060:	617b      	str	r3, [r7, #20]
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	429a      	cmp	r2, r3
 8003068:	dbf1      	blt.n	800304e <_write+0x12>
	}
	return len;
 800306a:	687b      	ldr	r3, [r7, #4]
}
 800306c:	0018      	movs	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	b006      	add	sp, #24
 8003072:	bd80      	pop	{r7, pc}

08003074 <_close>:

int _close(int file)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
	return -1;
 800307c:	2301      	movs	r3, #1
 800307e:	425b      	negs	r3, r3
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	b002      	add	sp, #8
 8003086:	bd80      	pop	{r7, pc}

08003088 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2280      	movs	r2, #128	; 0x80
 8003096:	0192      	lsls	r2, r2, #6
 8003098:	605a      	str	r2, [r3, #4]
	return 0;
 800309a:	2300      	movs	r3, #0
}
 800309c:	0018      	movs	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	b002      	add	sp, #8
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <_isatty>:

int _isatty(int file)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
	return 1;
 80030ac:	2301      	movs	r3, #1
}
 80030ae:	0018      	movs	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b002      	add	sp, #8
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b084      	sub	sp, #16
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	607a      	str	r2, [r7, #4]
	return 0;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	0018      	movs	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b004      	add	sp, #16
 80030ca:	bd80      	pop	{r7, pc}

080030cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030d4:	4a14      	ldr	r2, [pc, #80]	; (8003128 <_sbrk+0x5c>)
 80030d6:	4b15      	ldr	r3, [pc, #84]	; (800312c <_sbrk+0x60>)
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030e0:	4b13      	ldr	r3, [pc, #76]	; (8003130 <_sbrk+0x64>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d102      	bne.n	80030ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030e8:	4b11      	ldr	r3, [pc, #68]	; (8003130 <_sbrk+0x64>)
 80030ea:	4a12      	ldr	r2, [pc, #72]	; (8003134 <_sbrk+0x68>)
 80030ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030ee:	4b10      	ldr	r3, [pc, #64]	; (8003130 <_sbrk+0x64>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	18d3      	adds	r3, r2, r3
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d207      	bcs.n	800310c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030fc:	f002 fbea 	bl	80058d4 <__errno>
 8003100:	0003      	movs	r3, r0
 8003102:	220c      	movs	r2, #12
 8003104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003106:	2301      	movs	r3, #1
 8003108:	425b      	negs	r3, r3
 800310a:	e009      	b.n	8003120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800310c:	4b08      	ldr	r3, [pc, #32]	; (8003130 <_sbrk+0x64>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003112:	4b07      	ldr	r3, [pc, #28]	; (8003130 <_sbrk+0x64>)
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	18d2      	adds	r2, r2, r3
 800311a:	4b05      	ldr	r3, [pc, #20]	; (8003130 <_sbrk+0x64>)
 800311c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800311e:	68fb      	ldr	r3, [r7, #12]
}
 8003120:	0018      	movs	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	b006      	add	sp, #24
 8003126:	bd80      	pop	{r7, pc}
 8003128:	20009000 	.word	0x20009000
 800312c:	00000400 	.word	0x00000400
 8003130:	20000214 	.word	0x20000214
 8003134:	20000310 	.word	0x20000310

08003138 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800313c:	46c0      	nop			; (mov r8, r8)
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003148:	4b23      	ldr	r3, [pc, #140]	; (80031d8 <MX_USART2_UART_Init+0x94>)
 800314a:	4a24      	ldr	r2, [pc, #144]	; (80031dc <MX_USART2_UART_Init+0x98>)
 800314c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800314e:	4b22      	ldr	r3, [pc, #136]	; (80031d8 <MX_USART2_UART_Init+0x94>)
 8003150:	22e1      	movs	r2, #225	; 0xe1
 8003152:	0252      	lsls	r2, r2, #9
 8003154:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003156:	4b20      	ldr	r3, [pc, #128]	; (80031d8 <MX_USART2_UART_Init+0x94>)
 8003158:	2200      	movs	r2, #0
 800315a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800315c:	4b1e      	ldr	r3, [pc, #120]	; (80031d8 <MX_USART2_UART_Init+0x94>)
 800315e:	2200      	movs	r2, #0
 8003160:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003162:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <MX_USART2_UART_Init+0x94>)
 8003164:	2200      	movs	r2, #0
 8003166:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003168:	4b1b      	ldr	r3, [pc, #108]	; (80031d8 <MX_USART2_UART_Init+0x94>)
 800316a:	220c      	movs	r2, #12
 800316c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800316e:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <MX_USART2_UART_Init+0x94>)
 8003170:	2200      	movs	r2, #0
 8003172:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003174:	4b18      	ldr	r3, [pc, #96]	; (80031d8 <MX_USART2_UART_Init+0x94>)
 8003176:	2200      	movs	r2, #0
 8003178:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800317a:	4b17      	ldr	r3, [pc, #92]	; (80031d8 <MX_USART2_UART_Init+0x94>)
 800317c:	2200      	movs	r2, #0
 800317e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003180:	4b15      	ldr	r3, [pc, #84]	; (80031d8 <MX_USART2_UART_Init+0x94>)
 8003182:	2200      	movs	r2, #0
 8003184:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003186:	4b14      	ldr	r3, [pc, #80]	; (80031d8 <MX_USART2_UART_Init+0x94>)
 8003188:	2200      	movs	r2, #0
 800318a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800318c:	4b12      	ldr	r3, [pc, #72]	; (80031d8 <MX_USART2_UART_Init+0x94>)
 800318e:	0018      	movs	r0, r3
 8003190:	f001 fec4 	bl	8004f1c <HAL_UART_Init>
 8003194:	1e03      	subs	r3, r0, #0
 8003196:	d001      	beq.n	800319c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003198:	f7ff fecd 	bl	8002f36 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800319c:	4b0e      	ldr	r3, [pc, #56]	; (80031d8 <MX_USART2_UART_Init+0x94>)
 800319e:	2100      	movs	r1, #0
 80031a0:	0018      	movs	r0, r3
 80031a2:	f002 fab7 	bl	8005714 <HAL_UARTEx_SetTxFifoThreshold>
 80031a6:	1e03      	subs	r3, r0, #0
 80031a8:	d001      	beq.n	80031ae <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80031aa:	f7ff fec4 	bl	8002f36 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031ae:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <MX_USART2_UART_Init+0x94>)
 80031b0:	2100      	movs	r1, #0
 80031b2:	0018      	movs	r0, r3
 80031b4:	f002 faee 	bl	8005794 <HAL_UARTEx_SetRxFifoThreshold>
 80031b8:	1e03      	subs	r3, r0, #0
 80031ba:	d001      	beq.n	80031c0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80031bc:	f7ff febb 	bl	8002f36 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80031c0:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <MX_USART2_UART_Init+0x94>)
 80031c2:	0018      	movs	r0, r3
 80031c4:	f002 fa6c 	bl	80056a0 <HAL_UARTEx_DisableFifoMode>
 80031c8:	1e03      	subs	r3, r0, #0
 80031ca:	d001      	beq.n	80031d0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80031cc:	f7ff feb3 	bl	8002f36 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80031d0:	46c0      	nop			; (mov r8, r8)
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	2000026c 	.word	0x2000026c
 80031dc:	40004400 	.word	0x40004400

080031e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80031e0:	b590      	push	{r4, r7, lr}
 80031e2:	b08b      	sub	sp, #44	; 0x2c
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e8:	2414      	movs	r4, #20
 80031ea:	193b      	adds	r3, r7, r4
 80031ec:	0018      	movs	r0, r3
 80031ee:	2314      	movs	r3, #20
 80031f0:	001a      	movs	r2, r3
 80031f2:	2100      	movs	r1, #0
 80031f4:	f002 fb98 	bl	8005928 <memset>
  if(uartHandle->Instance==USART2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a1b      	ldr	r2, [pc, #108]	; (800326c <HAL_UART_MspInit+0x8c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d130      	bne.n	8003264 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003202:	4b1b      	ldr	r3, [pc, #108]	; (8003270 <HAL_UART_MspInit+0x90>)
 8003204:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003206:	4b1a      	ldr	r3, [pc, #104]	; (8003270 <HAL_UART_MspInit+0x90>)
 8003208:	2180      	movs	r1, #128	; 0x80
 800320a:	0289      	lsls	r1, r1, #10
 800320c:	430a      	orrs	r2, r1
 800320e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003210:	4b17      	ldr	r3, [pc, #92]	; (8003270 <HAL_UART_MspInit+0x90>)
 8003212:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003214:	2380      	movs	r3, #128	; 0x80
 8003216:	029b      	lsls	r3, r3, #10
 8003218:	4013      	ands	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800321e:	4b14      	ldr	r3, [pc, #80]	; (8003270 <HAL_UART_MspInit+0x90>)
 8003220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003222:	4b13      	ldr	r3, [pc, #76]	; (8003270 <HAL_UART_MspInit+0x90>)
 8003224:	2101      	movs	r1, #1
 8003226:	430a      	orrs	r2, r1
 8003228:	635a      	str	r2, [r3, #52]	; 0x34
 800322a:	4b11      	ldr	r3, [pc, #68]	; (8003270 <HAL_UART_MspInit+0x90>)
 800322c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322e:	2201      	movs	r2, #1
 8003230:	4013      	ands	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003236:	0021      	movs	r1, r4
 8003238:	187b      	adds	r3, r7, r1
 800323a:	220c      	movs	r2, #12
 800323c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323e:	187b      	adds	r3, r7, r1
 8003240:	2202      	movs	r2, #2
 8003242:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003244:	187b      	adds	r3, r7, r1
 8003246:	2200      	movs	r2, #0
 8003248:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324a:	187b      	adds	r3, r7, r1
 800324c:	2200      	movs	r2, #0
 800324e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003250:	187b      	adds	r3, r7, r1
 8003252:	2201      	movs	r2, #1
 8003254:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003256:	187a      	adds	r2, r7, r1
 8003258:	23a0      	movs	r3, #160	; 0xa0
 800325a:	05db      	lsls	r3, r3, #23
 800325c:	0011      	movs	r1, r2
 800325e:	0018      	movs	r0, r3
 8003260:	f000 f982 	bl	8003568 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003264:	46c0      	nop			; (mov r8, r8)
 8003266:	46bd      	mov	sp, r7
 8003268:	b00b      	add	sp, #44	; 0x2c
 800326a:	bd90      	pop	{r4, r7, pc}
 800326c:	40004400 	.word	0x40004400
 8003270:	40021000 	.word	0x40021000

08003274 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003274:	480d      	ldr	r0, [pc, #52]	; (80032ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003276:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003278:	f7ff ff5e 	bl	8003138 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800327c:	480c      	ldr	r0, [pc, #48]	; (80032b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800327e:	490d      	ldr	r1, [pc, #52]	; (80032b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003280:	4a0d      	ldr	r2, [pc, #52]	; (80032b8 <LoopForever+0xe>)
  movs r3, #0
 8003282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003284:	e002      	b.n	800328c <LoopCopyDataInit>

08003286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800328a:	3304      	adds	r3, #4

0800328c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800328c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800328e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003290:	d3f9      	bcc.n	8003286 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003292:	4a0a      	ldr	r2, [pc, #40]	; (80032bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003294:	4c0a      	ldr	r4, [pc, #40]	; (80032c0 <LoopForever+0x16>)
  movs r3, #0
 8003296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003298:	e001      	b.n	800329e <LoopFillZerobss>

0800329a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800329a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800329c:	3204      	adds	r2, #4

0800329e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800329e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032a0:	d3fb      	bcc.n	800329a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80032a2:	f002 fb1d 	bl	80058e0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80032a6:	f7ff fdcf 	bl	8002e48 <main>

080032aa <LoopForever>:

LoopForever:
  b LoopForever
 80032aa:	e7fe      	b.n	80032aa <LoopForever>
  ldr   r0, =_estack
 80032ac:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80032b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032b4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80032b8:	08008a14 	.word	0x08008a14
  ldr r2, =_sbss
 80032bc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80032c0:	20000310 	.word	0x20000310

080032c4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032c4:	e7fe      	b.n	80032c4 <ADC1_IRQHandler>
	...

080032c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032ce:	1dfb      	adds	r3, r7, #7
 80032d0:	2200      	movs	r2, #0
 80032d2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032d4:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <HAL_Init+0x3c>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <HAL_Init+0x3c>)
 80032da:	2180      	movs	r1, #128	; 0x80
 80032dc:	0049      	lsls	r1, r1, #1
 80032de:	430a      	orrs	r2, r1
 80032e0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032e2:	2003      	movs	r0, #3
 80032e4:	f000 f810 	bl	8003308 <HAL_InitTick>
 80032e8:	1e03      	subs	r3, r0, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80032ec:	1dfb      	adds	r3, r7, #7
 80032ee:	2201      	movs	r2, #1
 80032f0:	701a      	strb	r2, [r3, #0]
 80032f2:	e001      	b.n	80032f8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80032f4:	f7ff fe24 	bl	8002f40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032f8:	1dfb      	adds	r3, r7, #7
 80032fa:	781b      	ldrb	r3, [r3, #0]
}
 80032fc:	0018      	movs	r0, r3
 80032fe:	46bd      	mov	sp, r7
 8003300:	b002      	add	sp, #8
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40022000 	.word	0x40022000

08003308 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003308:	b590      	push	{r4, r7, lr}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003310:	230f      	movs	r3, #15
 8003312:	18fb      	adds	r3, r7, r3
 8003314:	2200      	movs	r2, #0
 8003316:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003318:	4b1d      	ldr	r3, [pc, #116]	; (8003390 <HAL_InitTick+0x88>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d02b      	beq.n	8003378 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003320:	4b1c      	ldr	r3, [pc, #112]	; (8003394 <HAL_InitTick+0x8c>)
 8003322:	681c      	ldr	r4, [r3, #0]
 8003324:	4b1a      	ldr	r3, [pc, #104]	; (8003390 <HAL_InitTick+0x88>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	0019      	movs	r1, r3
 800332a:	23fa      	movs	r3, #250	; 0xfa
 800332c:	0098      	lsls	r0, r3, #2
 800332e:	f7fc ff03 	bl	8000138 <__udivsi3>
 8003332:	0003      	movs	r3, r0
 8003334:	0019      	movs	r1, r3
 8003336:	0020      	movs	r0, r4
 8003338:	f7fc fefe 	bl	8000138 <__udivsi3>
 800333c:	0003      	movs	r3, r0
 800333e:	0018      	movs	r0, r3
 8003340:	f000 f905 	bl	800354e <HAL_SYSTICK_Config>
 8003344:	1e03      	subs	r3, r0, #0
 8003346:	d112      	bne.n	800336e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b03      	cmp	r3, #3
 800334c:	d80a      	bhi.n	8003364 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	2301      	movs	r3, #1
 8003352:	425b      	negs	r3, r3
 8003354:	2200      	movs	r2, #0
 8003356:	0018      	movs	r0, r3
 8003358:	f000 f8e4 	bl	8003524 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800335c:	4b0e      	ldr	r3, [pc, #56]	; (8003398 <HAL_InitTick+0x90>)
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	e00d      	b.n	8003380 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003364:	230f      	movs	r3, #15
 8003366:	18fb      	adds	r3, r7, r3
 8003368:	2201      	movs	r2, #1
 800336a:	701a      	strb	r2, [r3, #0]
 800336c:	e008      	b.n	8003380 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800336e:	230f      	movs	r3, #15
 8003370:	18fb      	adds	r3, r7, r3
 8003372:	2201      	movs	r2, #1
 8003374:	701a      	strb	r2, [r3, #0]
 8003376:	e003      	b.n	8003380 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003378:	230f      	movs	r3, #15
 800337a:	18fb      	adds	r3, r7, r3
 800337c:	2201      	movs	r2, #1
 800337e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003380:	230f      	movs	r3, #15
 8003382:	18fb      	adds	r3, r7, r3
 8003384:	781b      	ldrb	r3, [r3, #0]
}
 8003386:	0018      	movs	r0, r3
 8003388:	46bd      	mov	sp, r7
 800338a:	b005      	add	sp, #20
 800338c:	bd90      	pop	{r4, r7, pc}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	20000008 	.word	0x20000008
 8003394:	20000000 	.word	0x20000000
 8003398:	20000004 	.word	0x20000004

0800339c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <HAL_IncTick+0x1c>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	001a      	movs	r2, r3
 80033a6:	4b05      	ldr	r3, [pc, #20]	; (80033bc <HAL_IncTick+0x20>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	18d2      	adds	r2, r2, r3
 80033ac:	4b03      	ldr	r3, [pc, #12]	; (80033bc <HAL_IncTick+0x20>)
 80033ae:	601a      	str	r2, [r3, #0]
}
 80033b0:	46c0      	nop			; (mov r8, r8)
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	20000008 	.word	0x20000008
 80033bc:	200002fc 	.word	0x200002fc

080033c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  return uwTick;
 80033c4:	4b02      	ldr	r3, [pc, #8]	; (80033d0 <HAL_GetTick+0x10>)
 80033c6:	681b      	ldr	r3, [r3, #0]
}
 80033c8:	0018      	movs	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	200002fc 	.word	0x200002fc

080033d4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80033dc:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a06      	ldr	r2, [pc, #24]	; (80033fc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	0019      	movs	r1, r3
 80033e6:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	601a      	str	r2, [r3, #0]
}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	46bd      	mov	sp, r7
 80033f2:	b002      	add	sp, #8
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	40010000 	.word	0x40010000
 80033fc:	fffff9ff 	.word	0xfffff9ff

08003400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003400:	b590      	push	{r4, r7, lr}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	0002      	movs	r2, r0
 8003408:	6039      	str	r1, [r7, #0]
 800340a:	1dfb      	adds	r3, r7, #7
 800340c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800340e:	1dfb      	adds	r3, r7, #7
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b7f      	cmp	r3, #127	; 0x7f
 8003414:	d828      	bhi.n	8003468 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003416:	4a2f      	ldr	r2, [pc, #188]	; (80034d4 <__NVIC_SetPriority+0xd4>)
 8003418:	1dfb      	adds	r3, r7, #7
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	b25b      	sxtb	r3, r3
 800341e:	089b      	lsrs	r3, r3, #2
 8003420:	33c0      	adds	r3, #192	; 0xc0
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	589b      	ldr	r3, [r3, r2]
 8003426:	1dfa      	adds	r2, r7, #7
 8003428:	7812      	ldrb	r2, [r2, #0]
 800342a:	0011      	movs	r1, r2
 800342c:	2203      	movs	r2, #3
 800342e:	400a      	ands	r2, r1
 8003430:	00d2      	lsls	r2, r2, #3
 8003432:	21ff      	movs	r1, #255	; 0xff
 8003434:	4091      	lsls	r1, r2
 8003436:	000a      	movs	r2, r1
 8003438:	43d2      	mvns	r2, r2
 800343a:	401a      	ands	r2, r3
 800343c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	019b      	lsls	r3, r3, #6
 8003442:	22ff      	movs	r2, #255	; 0xff
 8003444:	401a      	ands	r2, r3
 8003446:	1dfb      	adds	r3, r7, #7
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	0018      	movs	r0, r3
 800344c:	2303      	movs	r3, #3
 800344e:	4003      	ands	r3, r0
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003454:	481f      	ldr	r0, [pc, #124]	; (80034d4 <__NVIC_SetPriority+0xd4>)
 8003456:	1dfb      	adds	r3, r7, #7
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	b25b      	sxtb	r3, r3
 800345c:	089b      	lsrs	r3, r3, #2
 800345e:	430a      	orrs	r2, r1
 8003460:	33c0      	adds	r3, #192	; 0xc0
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003466:	e031      	b.n	80034cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003468:	4a1b      	ldr	r2, [pc, #108]	; (80034d8 <__NVIC_SetPriority+0xd8>)
 800346a:	1dfb      	adds	r3, r7, #7
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	0019      	movs	r1, r3
 8003470:	230f      	movs	r3, #15
 8003472:	400b      	ands	r3, r1
 8003474:	3b08      	subs	r3, #8
 8003476:	089b      	lsrs	r3, r3, #2
 8003478:	3306      	adds	r3, #6
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	18d3      	adds	r3, r2, r3
 800347e:	3304      	adds	r3, #4
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	1dfa      	adds	r2, r7, #7
 8003484:	7812      	ldrb	r2, [r2, #0]
 8003486:	0011      	movs	r1, r2
 8003488:	2203      	movs	r2, #3
 800348a:	400a      	ands	r2, r1
 800348c:	00d2      	lsls	r2, r2, #3
 800348e:	21ff      	movs	r1, #255	; 0xff
 8003490:	4091      	lsls	r1, r2
 8003492:	000a      	movs	r2, r1
 8003494:	43d2      	mvns	r2, r2
 8003496:	401a      	ands	r2, r3
 8003498:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	019b      	lsls	r3, r3, #6
 800349e:	22ff      	movs	r2, #255	; 0xff
 80034a0:	401a      	ands	r2, r3
 80034a2:	1dfb      	adds	r3, r7, #7
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	0018      	movs	r0, r3
 80034a8:	2303      	movs	r3, #3
 80034aa:	4003      	ands	r3, r0
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034b0:	4809      	ldr	r0, [pc, #36]	; (80034d8 <__NVIC_SetPriority+0xd8>)
 80034b2:	1dfb      	adds	r3, r7, #7
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	001c      	movs	r4, r3
 80034b8:	230f      	movs	r3, #15
 80034ba:	4023      	ands	r3, r4
 80034bc:	3b08      	subs	r3, #8
 80034be:	089b      	lsrs	r3, r3, #2
 80034c0:	430a      	orrs	r2, r1
 80034c2:	3306      	adds	r3, #6
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	18c3      	adds	r3, r0, r3
 80034c8:	3304      	adds	r3, #4
 80034ca:	601a      	str	r2, [r3, #0]
}
 80034cc:	46c0      	nop			; (mov r8, r8)
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b003      	add	sp, #12
 80034d2:	bd90      	pop	{r4, r7, pc}
 80034d4:	e000e100 	.word	0xe000e100
 80034d8:	e000ed00 	.word	0xe000ed00

080034dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	1e5a      	subs	r2, r3, #1
 80034e8:	2380      	movs	r3, #128	; 0x80
 80034ea:	045b      	lsls	r3, r3, #17
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d301      	bcc.n	80034f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034f0:	2301      	movs	r3, #1
 80034f2:	e010      	b.n	8003516 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034f4:	4b0a      	ldr	r3, [pc, #40]	; (8003520 <SysTick_Config+0x44>)
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	3a01      	subs	r2, #1
 80034fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034fc:	2301      	movs	r3, #1
 80034fe:	425b      	negs	r3, r3
 8003500:	2103      	movs	r1, #3
 8003502:	0018      	movs	r0, r3
 8003504:	f7ff ff7c 	bl	8003400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <SysTick_Config+0x44>)
 800350a:	2200      	movs	r2, #0
 800350c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800350e:	4b04      	ldr	r3, [pc, #16]	; (8003520 <SysTick_Config+0x44>)
 8003510:	2207      	movs	r2, #7
 8003512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003514:	2300      	movs	r3, #0
}
 8003516:	0018      	movs	r0, r3
 8003518:	46bd      	mov	sp, r7
 800351a:	b002      	add	sp, #8
 800351c:	bd80      	pop	{r7, pc}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	e000e010 	.word	0xe000e010

08003524 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	607a      	str	r2, [r7, #4]
 800352e:	210f      	movs	r1, #15
 8003530:	187b      	adds	r3, r7, r1
 8003532:	1c02      	adds	r2, r0, #0
 8003534:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	187b      	adds	r3, r7, r1
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	b25b      	sxtb	r3, r3
 800353e:	0011      	movs	r1, r2
 8003540:	0018      	movs	r0, r3
 8003542:	f7ff ff5d 	bl	8003400 <__NVIC_SetPriority>
}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	46bd      	mov	sp, r7
 800354a:	b004      	add	sp, #16
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	0018      	movs	r0, r3
 800355a:	f7ff ffbf 	bl	80034dc <SysTick_Config>
 800355e:	0003      	movs	r3, r0
}
 8003560:	0018      	movs	r0, r3
 8003562:	46bd      	mov	sp, r7
 8003564:	b002      	add	sp, #8
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003576:	e147      	b.n	8003808 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2101      	movs	r1, #1
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	4091      	lsls	r1, r2
 8003582:	000a      	movs	r2, r1
 8003584:	4013      	ands	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d100      	bne.n	8003590 <HAL_GPIO_Init+0x28>
 800358e:	e138      	b.n	8003802 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2203      	movs	r2, #3
 8003596:	4013      	ands	r3, r2
 8003598:	2b01      	cmp	r3, #1
 800359a:	d005      	beq.n	80035a8 <HAL_GPIO_Init+0x40>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2203      	movs	r2, #3
 80035a2:	4013      	ands	r3, r2
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d130      	bne.n	800360a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	2203      	movs	r2, #3
 80035b4:	409a      	lsls	r2, r3
 80035b6:	0013      	movs	r3, r2
 80035b8:	43da      	mvns	r2, r3
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	4013      	ands	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	68da      	ldr	r2, [r3, #12]
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	409a      	lsls	r2, r3
 80035ca:	0013      	movs	r3, r2
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035de:	2201      	movs	r2, #1
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	409a      	lsls	r2, r3
 80035e4:	0013      	movs	r3, r2
 80035e6:	43da      	mvns	r2, r3
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4013      	ands	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	091b      	lsrs	r3, r3, #4
 80035f4:	2201      	movs	r2, #1
 80035f6:	401a      	ands	r2, r3
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	409a      	lsls	r2, r3
 80035fc:	0013      	movs	r3, r2
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2203      	movs	r2, #3
 8003610:	4013      	ands	r3, r2
 8003612:	2b03      	cmp	r3, #3
 8003614:	d017      	beq.n	8003646 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	2203      	movs	r2, #3
 8003622:	409a      	lsls	r2, r3
 8003624:	0013      	movs	r3, r2
 8003626:	43da      	mvns	r2, r3
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4013      	ands	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	409a      	lsls	r2, r3
 8003638:	0013      	movs	r3, r2
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2203      	movs	r2, #3
 800364c:	4013      	ands	r3, r2
 800364e:	2b02      	cmp	r3, #2
 8003650:	d123      	bne.n	800369a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	08da      	lsrs	r2, r3, #3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3208      	adds	r2, #8
 800365a:	0092      	lsls	r2, r2, #2
 800365c:	58d3      	ldr	r3, [r2, r3]
 800365e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	2207      	movs	r2, #7
 8003664:	4013      	ands	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	220f      	movs	r2, #15
 800366a:	409a      	lsls	r2, r3
 800366c:	0013      	movs	r3, r2
 800366e:	43da      	mvns	r2, r3
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	4013      	ands	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2107      	movs	r1, #7
 800367e:	400b      	ands	r3, r1
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	409a      	lsls	r2, r3
 8003684:	0013      	movs	r3, r2
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	08da      	lsrs	r2, r3, #3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3208      	adds	r2, #8
 8003694:	0092      	lsls	r2, r2, #2
 8003696:	6939      	ldr	r1, [r7, #16]
 8003698:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	2203      	movs	r2, #3
 80036a6:	409a      	lsls	r2, r3
 80036a8:	0013      	movs	r3, r2
 80036aa:	43da      	mvns	r2, r3
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	4013      	ands	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2203      	movs	r2, #3
 80036b8:	401a      	ands	r2, r3
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	409a      	lsls	r2, r3
 80036c0:	0013      	movs	r3, r2
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	23c0      	movs	r3, #192	; 0xc0
 80036d4:	029b      	lsls	r3, r3, #10
 80036d6:	4013      	ands	r3, r2
 80036d8:	d100      	bne.n	80036dc <HAL_GPIO_Init+0x174>
 80036da:	e092      	b.n	8003802 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80036dc:	4a50      	ldr	r2, [pc, #320]	; (8003820 <HAL_GPIO_Init+0x2b8>)
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	089b      	lsrs	r3, r3, #2
 80036e2:	3318      	adds	r3, #24
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	589b      	ldr	r3, [r3, r2]
 80036e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2203      	movs	r2, #3
 80036ee:	4013      	ands	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	220f      	movs	r2, #15
 80036f4:	409a      	lsls	r2, r3
 80036f6:	0013      	movs	r3, r2
 80036f8:	43da      	mvns	r2, r3
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4013      	ands	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	23a0      	movs	r3, #160	; 0xa0
 8003704:	05db      	lsls	r3, r3, #23
 8003706:	429a      	cmp	r2, r3
 8003708:	d013      	beq.n	8003732 <HAL_GPIO_Init+0x1ca>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a45      	ldr	r2, [pc, #276]	; (8003824 <HAL_GPIO_Init+0x2bc>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00d      	beq.n	800372e <HAL_GPIO_Init+0x1c6>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a44      	ldr	r2, [pc, #272]	; (8003828 <HAL_GPIO_Init+0x2c0>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d007      	beq.n	800372a <HAL_GPIO_Init+0x1c2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a43      	ldr	r2, [pc, #268]	; (800382c <HAL_GPIO_Init+0x2c4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d101      	bne.n	8003726 <HAL_GPIO_Init+0x1be>
 8003722:	2303      	movs	r3, #3
 8003724:	e006      	b.n	8003734 <HAL_GPIO_Init+0x1cc>
 8003726:	2305      	movs	r3, #5
 8003728:	e004      	b.n	8003734 <HAL_GPIO_Init+0x1cc>
 800372a:	2302      	movs	r3, #2
 800372c:	e002      	b.n	8003734 <HAL_GPIO_Init+0x1cc>
 800372e:	2301      	movs	r3, #1
 8003730:	e000      	b.n	8003734 <HAL_GPIO_Init+0x1cc>
 8003732:	2300      	movs	r3, #0
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	2103      	movs	r1, #3
 8003738:	400a      	ands	r2, r1
 800373a:	00d2      	lsls	r2, r2, #3
 800373c:	4093      	lsls	r3, r2
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003744:	4936      	ldr	r1, [pc, #216]	; (8003820 <HAL_GPIO_Init+0x2b8>)
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	089b      	lsrs	r3, r3, #2
 800374a:	3318      	adds	r3, #24
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003752:	4a33      	ldr	r2, [pc, #204]	; (8003820 <HAL_GPIO_Init+0x2b8>)
 8003754:	2380      	movs	r3, #128	; 0x80
 8003756:	58d3      	ldr	r3, [r2, r3]
 8003758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	43da      	mvns	r2, r3
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	4013      	ands	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	2380      	movs	r3, #128	; 0x80
 800376a:	025b      	lsls	r3, r3, #9
 800376c:	4013      	ands	r3, r2
 800376e:	d003      	beq.n	8003778 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4313      	orrs	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003778:	4929      	ldr	r1, [pc, #164]	; (8003820 <HAL_GPIO_Init+0x2b8>)
 800377a:	2280      	movs	r2, #128	; 0x80
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003780:	4a27      	ldr	r2, [pc, #156]	; (8003820 <HAL_GPIO_Init+0x2b8>)
 8003782:	2384      	movs	r3, #132	; 0x84
 8003784:	58d3      	ldr	r3, [r2, r3]
 8003786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	43da      	mvns	r2, r3
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4013      	ands	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	2380      	movs	r3, #128	; 0x80
 8003798:	029b      	lsls	r3, r3, #10
 800379a:	4013      	ands	r3, r2
 800379c:	d003      	beq.n	80037a6 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037a6:	491e      	ldr	r1, [pc, #120]	; (8003820 <HAL_GPIO_Init+0x2b8>)
 80037a8:	2284      	movs	r2, #132	; 0x84
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037ae:	4b1c      	ldr	r3, [pc, #112]	; (8003820 <HAL_GPIO_Init+0x2b8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	43da      	mvns	r2, r3
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	4013      	ands	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	2380      	movs	r3, #128	; 0x80
 80037c4:	035b      	lsls	r3, r3, #13
 80037c6:	4013      	ands	r3, r2
 80037c8:	d003      	beq.n	80037d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037d2:	4b13      	ldr	r3, [pc, #76]	; (8003820 <HAL_GPIO_Init+0x2b8>)
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80037d8:	4b11      	ldr	r3, [pc, #68]	; (8003820 <HAL_GPIO_Init+0x2b8>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	43da      	mvns	r2, r3
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	4013      	ands	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	2380      	movs	r3, #128	; 0x80
 80037ee:	039b      	lsls	r3, r3, #14
 80037f0:	4013      	ands	r3, r2
 80037f2:	d003      	beq.n	80037fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037fc:	4b08      	ldr	r3, [pc, #32]	; (8003820 <HAL_GPIO_Init+0x2b8>)
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	3301      	adds	r3, #1
 8003806:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	40da      	lsrs	r2, r3
 8003810:	1e13      	subs	r3, r2, #0
 8003812:	d000      	beq.n	8003816 <HAL_GPIO_Init+0x2ae>
 8003814:	e6b0      	b.n	8003578 <HAL_GPIO_Init+0x10>
  }
}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	46c0      	nop			; (mov r8, r8)
 800381a:	46bd      	mov	sp, r7
 800381c:	b006      	add	sp, #24
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40021800 	.word	0x40021800
 8003824:	50000400 	.word	0x50000400
 8003828:	50000800 	.word	0x50000800
 800382c:	50000c00 	.word	0x50000c00

08003830 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e082      	b.n	8003948 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2241      	movs	r2, #65	; 0x41
 8003846:	5c9b      	ldrb	r3, [r3, r2]
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d107      	bne.n	800385e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2240      	movs	r2, #64	; 0x40
 8003852:	2100      	movs	r1, #0
 8003854:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	0018      	movs	r0, r3
 800385a:	f7ff fa0f 	bl	8002c7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2241      	movs	r2, #65	; 0x41
 8003862:	2124      	movs	r1, #36	; 0x24
 8003864:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2101      	movs	r1, #1
 8003872:	438a      	bics	r2, r1
 8003874:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4934      	ldr	r1, [pc, #208]	; (8003950 <HAL_I2C_Init+0x120>)
 8003880:	400a      	ands	r2, r1
 8003882:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4931      	ldr	r1, [pc, #196]	; (8003954 <HAL_I2C_Init+0x124>)
 8003890:	400a      	ands	r2, r1
 8003892:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d108      	bne.n	80038ae <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2180      	movs	r1, #128	; 0x80
 80038a6:	0209      	lsls	r1, r1, #8
 80038a8:	430a      	orrs	r2, r1
 80038aa:	609a      	str	r2, [r3, #8]
 80038ac:	e007      	b.n	80038be <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2184      	movs	r1, #132	; 0x84
 80038b8:	0209      	lsls	r1, r1, #8
 80038ba:	430a      	orrs	r2, r1
 80038bc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d104      	bne.n	80038d0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2280      	movs	r2, #128	; 0x80
 80038cc:	0112      	lsls	r2, r2, #4
 80038ce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	491f      	ldr	r1, [pc, #124]	; (8003958 <HAL_I2C_Init+0x128>)
 80038dc:	430a      	orrs	r2, r1
 80038de:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	491a      	ldr	r1, [pc, #104]	; (8003954 <HAL_I2C_Init+0x124>)
 80038ec:	400a      	ands	r2, r1
 80038ee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	431a      	orrs	r2, r3
 80038fa:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69d9      	ldr	r1, [r3, #28]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1a      	ldr	r2, [r3, #32]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2101      	movs	r1, #1
 8003926:	430a      	orrs	r2, r1
 8003928:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2241      	movs	r2, #65	; 0x41
 8003934:	2120      	movs	r1, #32
 8003936:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2242      	movs	r2, #66	; 0x42
 8003942:	2100      	movs	r1, #0
 8003944:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	0018      	movs	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	b002      	add	sp, #8
 800394e:	bd80      	pop	{r7, pc}
 8003950:	f0ffffff 	.word	0xf0ffffff
 8003954:	ffff7fff 	.word	0xffff7fff
 8003958:	02008000 	.word	0x02008000

0800395c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size, uint32_t Timeout)
{
 800395c:	b590      	push	{r4, r7, lr}
 800395e:	b089      	sub	sp, #36	; 0x24
 8003960:	af02      	add	r7, sp, #8
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	0008      	movs	r0, r1
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	0019      	movs	r1, r3
 800396a:	230a      	movs	r3, #10
 800396c:	18fb      	adds	r3, r7, r3
 800396e:	1c02      	adds	r2, r0, #0
 8003970:	801a      	strh	r2, [r3, #0]
 8003972:	2308      	movs	r3, #8
 8003974:	18fb      	adds	r3, r7, r3
 8003976:	1c0a      	adds	r2, r1, #0
 8003978:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2241      	movs	r2, #65	; 0x41
 800397e:	5c9b      	ldrb	r3, [r3, r2]
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b20      	cmp	r3, #32
 8003984:	d000      	beq.n	8003988 <HAL_I2C_Master_Transmit+0x2c>
 8003986:	e0e7      	b.n	8003b58 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2240      	movs	r2, #64	; 0x40
 800398c:	5c9b      	ldrb	r3, [r3, r2]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d101      	bne.n	8003996 <HAL_I2C_Master_Transmit+0x3a>
 8003992:	2302      	movs	r3, #2
 8003994:	e0e1      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1fe>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2240      	movs	r2, #64	; 0x40
 800399a:	2101      	movs	r1, #1
 800399c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800399e:	f7ff fd0f 	bl	80033c0 <HAL_GetTick>
 80039a2:	0003      	movs	r3, r0
 80039a4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039a6:	2380      	movs	r3, #128	; 0x80
 80039a8:	0219      	lsls	r1, r3, #8
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	2319      	movs	r3, #25
 80039b2:	2201      	movs	r2, #1
 80039b4:	f000 fa04 	bl	8003dc0 <I2C_WaitOnFlagUntilTimeout>
 80039b8:	1e03      	subs	r3, r0, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0cc      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2241      	movs	r2, #65	; 0x41
 80039c4:	2121      	movs	r1, #33	; 0x21
 80039c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2242      	movs	r2, #66	; 0x42
 80039cc:	2110      	movs	r1, #16
 80039ce:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2208      	movs	r2, #8
 80039e0:	18ba      	adds	r2, r7, r2
 80039e2:	8812      	ldrh	r2, [r2, #0]
 80039e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2bff      	cmp	r3, #255	; 0xff
 80039f4:	d911      	bls.n	8003a1a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	22ff      	movs	r2, #255	; 0xff
 80039fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	2380      	movs	r3, #128	; 0x80
 8003a04:	045c      	lsls	r4, r3, #17
 8003a06:	230a      	movs	r3, #10
 8003a08:	18fb      	adds	r3, r7, r3
 8003a0a:	8819      	ldrh	r1, [r3, #0]
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	4b55      	ldr	r3, [pc, #340]	; (8003b64 <HAL_I2C_Master_Transmit+0x208>)
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	0023      	movs	r3, r4
 8003a14:	f000 fb74 	bl	8004100 <I2C_TransferConfig>
 8003a18:	e075      	b.n	8003b06 <HAL_I2C_Master_Transmit+0x1aa>
                            I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	2380      	movs	r3, #128	; 0x80
 8003a2c:	049c      	lsls	r4, r3, #18
 8003a2e:	230a      	movs	r3, #10
 8003a30:	18fb      	adds	r3, r7, r3
 8003a32:	8819      	ldrh	r1, [r3, #0]
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	4b4b      	ldr	r3, [pc, #300]	; (8003b64 <HAL_I2C_Master_Transmit+0x208>)
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	0023      	movs	r3, r4
 8003a3c:	f000 fb60 	bl	8004100 <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003a40:	e061      	b.n	8003b06 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	0018      	movs	r0, r3
 8003a4a:	f000 f9f8 	bl	8003e3e <I2C_WaitOnTXISFlagUntilTimeout>
 8003a4e:	1e03      	subs	r3, r0, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e081      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	781a      	ldrb	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d03a      	beq.n	8003b06 <HAL_I2C_Master_Transmit+0x1aa>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d136      	bne.n	8003b06 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	0013      	movs	r3, r2
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2180      	movs	r1, #128	; 0x80
 8003aa6:	f000 f98b 	bl	8003dc0 <I2C_WaitOnFlagUntilTimeout>
 8003aaa:	1e03      	subs	r3, r0, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e053      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	2bff      	cmp	r3, #255	; 0xff
 8003aba:	d911      	bls.n	8003ae0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	22ff      	movs	r2, #255	; 0xff
 8003ac0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	2380      	movs	r3, #128	; 0x80
 8003aca:	045c      	lsls	r4, r3, #17
 8003acc:	230a      	movs	r3, #10
 8003ace:	18fb      	adds	r3, r7, r3
 8003ad0:	8819      	ldrh	r1, [r3, #0]
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	0023      	movs	r3, r4
 8003ada:	f000 fb11 	bl	8004100 <I2C_TransferConfig>
 8003ade:	e012      	b.n	8003b06 <HAL_I2C_Master_Transmit+0x1aa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	2380      	movs	r3, #128	; 0x80
 8003af2:	049c      	lsls	r4, r3, #18
 8003af4:	230a      	movs	r3, #10
 8003af6:	18fb      	adds	r3, r7, r3
 8003af8:	8819      	ldrh	r1, [r3, #0]
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	2300      	movs	r3, #0
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	0023      	movs	r3, r4
 8003b02:	f000 fafd 	bl	8004100 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d198      	bne.n	8003a42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	0018      	movs	r0, r3
 8003b18:	f000 f9d0 	bl	8003ebc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b1c:	1e03      	subs	r3, r0, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e01a      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	490c      	ldr	r1, [pc, #48]	; (8003b68 <HAL_I2C_Master_Transmit+0x20c>)
 8003b38:	400a      	ands	r2, r1
 8003b3a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2241      	movs	r2, #65	; 0x41
 8003b40:	2120      	movs	r1, #32
 8003b42:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2242      	movs	r2, #66	; 0x42
 8003b48:	2100      	movs	r1, #0
 8003b4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2240      	movs	r2, #64	; 0x40
 8003b50:	2100      	movs	r1, #0
 8003b52:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	e000      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003b58:	2302      	movs	r3, #2
  }
}
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	b007      	add	sp, #28
 8003b60:	bd90      	pop	{r4, r7, pc}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	80002000 	.word	0x80002000
 8003b68:	fe00e800 	.word	0xfe00e800

08003b6c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size, uint32_t Timeout)
{
 8003b6c:	b590      	push	{r4, r7, lr}
 8003b6e:	b089      	sub	sp, #36	; 0x24
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	0008      	movs	r0, r1
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	0019      	movs	r1, r3
 8003b7a:	230a      	movs	r3, #10
 8003b7c:	18fb      	adds	r3, r7, r3
 8003b7e:	1c02      	adds	r2, r0, #0
 8003b80:	801a      	strh	r2, [r3, #0]
 8003b82:	2308      	movs	r3, #8
 8003b84:	18fb      	adds	r3, r7, r3
 8003b86:	1c0a      	adds	r2, r1, #0
 8003b88:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2241      	movs	r2, #65	; 0x41
 8003b8e:	5c9b      	ldrb	r3, [r3, r2]
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b20      	cmp	r3, #32
 8003b94:	d000      	beq.n	8003b98 <HAL_I2C_Master_Receive+0x2c>
 8003b96:	e0e8      	b.n	8003d6a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2240      	movs	r2, #64	; 0x40
 8003b9c:	5c9b      	ldrb	r3, [r3, r2]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_I2C_Master_Receive+0x3a>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e0e2      	b.n	8003d6c <HAL_I2C_Master_Receive+0x200>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2240      	movs	r2, #64	; 0x40
 8003baa:	2101      	movs	r1, #1
 8003bac:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bae:	f7ff fc07 	bl	80033c0 <HAL_GetTick>
 8003bb2:	0003      	movs	r3, r0
 8003bb4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bb6:	2380      	movs	r3, #128	; 0x80
 8003bb8:	0219      	lsls	r1, r3, #8
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	2319      	movs	r3, #25
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f000 f8fc 	bl	8003dc0 <I2C_WaitOnFlagUntilTimeout>
 8003bc8:	1e03      	subs	r3, r0, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0cd      	b.n	8003d6c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2241      	movs	r2, #65	; 0x41
 8003bd4:	2122      	movs	r1, #34	; 0x22
 8003bd6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2242      	movs	r2, #66	; 0x42
 8003bdc:	2110      	movs	r1, #16
 8003bde:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2208      	movs	r2, #8
 8003bf0:	18ba      	adds	r2, r7, r2
 8003bf2:	8812      	ldrh	r2, [r2, #0]
 8003bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2bff      	cmp	r3, #255	; 0xff
 8003c04:	d911      	bls.n	8003c2a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	22ff      	movs	r2, #255	; 0xff
 8003c0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	2380      	movs	r3, #128	; 0x80
 8003c14:	045c      	lsls	r4, r3, #17
 8003c16:	230a      	movs	r3, #10
 8003c18:	18fb      	adds	r3, r7, r3
 8003c1a:	8819      	ldrh	r1, [r3, #0]
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	4b55      	ldr	r3, [pc, #340]	; (8003d74 <HAL_I2C_Master_Receive+0x208>)
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	0023      	movs	r3, r4
 8003c24:	f000 fa6c 	bl	8004100 <I2C_TransferConfig>
 8003c28:	e076      	b.n	8003d18 <HAL_I2C_Master_Receive+0x1ac>
                            I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	2380      	movs	r3, #128	; 0x80
 8003c3c:	049c      	lsls	r4, r3, #18
 8003c3e:	230a      	movs	r3, #10
 8003c40:	18fb      	adds	r3, r7, r3
 8003c42:	8819      	ldrh	r1, [r3, #0]
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	4b4b      	ldr	r3, [pc, #300]	; (8003d74 <HAL_I2C_Master_Receive+0x208>)
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	0023      	movs	r3, r4
 8003c4c:	f000 fa58 	bl	8004100 <I2C_TransferConfig>
                            I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003c50:	e062      	b.n	8003d18 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	0018      	movs	r0, r3
 8003c5a:	f000 f96b 	bl	8003f34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c5e:	1e03      	subs	r3, r0, #0
 8003c60:	d001      	beq.n	8003c66 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e082      	b.n	8003d6c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	1c5a      	adds	r2, r3, #1
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d03a      	beq.n	8003d18 <HAL_I2C_Master_Receive+0x1ac>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d136      	bne.n	8003d18 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	0013      	movs	r3, r2
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2180      	movs	r1, #128	; 0x80
 8003cb8:	f000 f882 	bl	8003dc0 <I2C_WaitOnFlagUntilTimeout>
 8003cbc:	1e03      	subs	r3, r0, #0
 8003cbe:	d001      	beq.n	8003cc4 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e053      	b.n	8003d6c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2bff      	cmp	r3, #255	; 0xff
 8003ccc:	d911      	bls.n	8003cf2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	22ff      	movs	r2, #255	; 0xff
 8003cd2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	2380      	movs	r3, #128	; 0x80
 8003cdc:	045c      	lsls	r4, r3, #17
 8003cde:	230a      	movs	r3, #10
 8003ce0:	18fb      	adds	r3, r7, r3
 8003ce2:	8819      	ldrh	r1, [r3, #0]
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	0023      	movs	r3, r4
 8003cec:	f000 fa08 	bl	8004100 <I2C_TransferConfig>
 8003cf0:	e012      	b.n	8003d18 <HAL_I2C_Master_Receive+0x1ac>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	2380      	movs	r3, #128	; 0x80
 8003d04:	049c      	lsls	r4, r3, #18
 8003d06:	230a      	movs	r3, #10
 8003d08:	18fb      	adds	r3, r7, r3
 8003d0a:	8819      	ldrh	r1, [r3, #0]
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	0023      	movs	r3, r4
 8003d14:	f000 f9f4 	bl	8004100 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d197      	bne.n	8003c52 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f000 f8c7 	bl	8003ebc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d2e:	1e03      	subs	r3, r0, #0
 8003d30:	d001      	beq.n	8003d36 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e01a      	b.n	8003d6c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	490b      	ldr	r1, [pc, #44]	; (8003d78 <HAL_I2C_Master_Receive+0x20c>)
 8003d4a:	400a      	ands	r2, r1
 8003d4c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2241      	movs	r2, #65	; 0x41
 8003d52:	2120      	movs	r1, #32
 8003d54:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2242      	movs	r2, #66	; 0x42
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2240      	movs	r2, #64	; 0x40
 8003d62:	2100      	movs	r1, #0
 8003d64:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	e000      	b.n	8003d6c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003d6a:	2302      	movs	r3, #2
  }
}
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	b007      	add	sp, #28
 8003d72:	bd90      	pop	{r4, r7, pc}
 8003d74:	80002400 	.word	0x80002400
 8003d78:	fe00e800 	.word	0xfe00e800

08003d7c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d103      	bne.n	8003d9a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2200      	movs	r2, #0
 8003d98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	2201      	movs	r2, #1
 8003da2:	4013      	ands	r3, r2
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d007      	beq.n	8003db8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	699a      	ldr	r2, [r3, #24]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2101      	movs	r1, #1
 8003db4:	430a      	orrs	r2, r1
 8003db6:	619a      	str	r2, [r3, #24]
  }
}
 8003db8:	46c0      	nop			; (mov r8, r8)
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	b002      	add	sp, #8
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	603b      	str	r3, [r7, #0]
 8003dcc:	1dfb      	adds	r3, r7, #7
 8003dce:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dd0:	e021      	b.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	d01e      	beq.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd8:	f7ff faf2 	bl	80033c0 <HAL_GetTick>
 8003ddc:	0002      	movs	r2, r0
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d302      	bcc.n	8003dee <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d113      	bne.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df2:	2220      	movs	r2, #32
 8003df4:	431a      	orrs	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2241      	movs	r2, #65	; 0x41
 8003dfe:	2120      	movs	r1, #32
 8003e00:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2242      	movs	r2, #66	; 0x42
 8003e06:	2100      	movs	r1, #0
 8003e08:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2240      	movs	r2, #64	; 0x40
 8003e0e:	2100      	movs	r1, #0
 8003e10:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e00f      	b.n	8003e36 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	425a      	negs	r2, r3
 8003e26:	4153      	adcs	r3, r2
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	001a      	movs	r2, r3
 8003e2c:	1dfb      	adds	r3, r7, #7
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d0ce      	beq.n	8003dd2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	0018      	movs	r0, r3
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b004      	add	sp, #16
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b084      	sub	sp, #16
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e4a:	e02b      	b.n	8003ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	68b9      	ldr	r1, [r7, #8]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	0018      	movs	r0, r3
 8003e54:	f000 f8da 	bl	800400c <I2C_IsAcknowledgeFailed>
 8003e58:	1e03      	subs	r3, r0, #0
 8003e5a:	d001      	beq.n	8003e60 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e029      	b.n	8003eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	3301      	adds	r3, #1
 8003e64:	d01e      	beq.n	8003ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e66:	f7ff faab 	bl	80033c0 <HAL_GetTick>
 8003e6a:	0002      	movs	r2, r0
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d302      	bcc.n	8003e7c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d113      	bne.n	8003ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e80:	2220      	movs	r2, #32
 8003e82:	431a      	orrs	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2241      	movs	r2, #65	; 0x41
 8003e8c:	2120      	movs	r1, #32
 8003e8e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2242      	movs	r2, #66	; 0x42
 8003e94:	2100      	movs	r1, #0
 8003e96:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2240      	movs	r2, #64	; 0x40
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e007      	b.n	8003eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	4013      	ands	r3, r2
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d1cc      	bne.n	8003e4c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	b004      	add	sp, #16
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ec8:	e028      	b.n	8003f1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	68b9      	ldr	r1, [r7, #8]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f000 f89b 	bl	800400c <I2C_IsAcknowledgeFailed>
 8003ed6:	1e03      	subs	r3, r0, #0
 8003ed8:	d001      	beq.n	8003ede <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e026      	b.n	8003f2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ede:	f7ff fa6f 	bl	80033c0 <HAL_GetTick>
 8003ee2:	0002      	movs	r2, r0
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d302      	bcc.n	8003ef4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d113      	bne.n	8003f1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef8:	2220      	movs	r2, #32
 8003efa:	431a      	orrs	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2241      	movs	r2, #65	; 0x41
 8003f04:	2120      	movs	r1, #32
 8003f06:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2242      	movs	r2, #66	; 0x42
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2240      	movs	r2, #64	; 0x40
 8003f14:	2100      	movs	r1, #0
 8003f16:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e007      	b.n	8003f2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	2220      	movs	r2, #32
 8003f24:	4013      	ands	r3, r2
 8003f26:	2b20      	cmp	r3, #32
 8003f28:	d1cf      	bne.n	8003eca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	b004      	add	sp, #16
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f40:	e055      	b.n	8003fee <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	68b9      	ldr	r1, [r7, #8]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f000 f85f 	bl	800400c <I2C_IsAcknowledgeFailed>
 8003f4e:	1e03      	subs	r3, r0, #0
 8003f50:	d001      	beq.n	8003f56 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e053      	b.n	8003ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	4013      	ands	r3, r2
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d129      	bne.n	8003fb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	2204      	movs	r2, #4
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d105      	bne.n	8003f7e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	e03f      	b.n	8003ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2220      	movs	r2, #32
 8003f84:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	491d      	ldr	r1, [pc, #116]	; (8004008 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003f92:	400a      	ands	r2, r1
 8003f94:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2241      	movs	r2, #65	; 0x41
 8003fa0:	2120      	movs	r1, #32
 8003fa2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2242      	movs	r2, #66	; 0x42
 8003fa8:	2100      	movs	r1, #0
 8003faa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2240      	movs	r2, #64	; 0x40
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e022      	b.n	8003ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fb8:	f7ff fa02 	bl	80033c0 <HAL_GetTick>
 8003fbc:	0002      	movs	r2, r0
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d302      	bcc.n	8003fce <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10f      	bne.n	8003fee <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2241      	movs	r2, #65	; 0x41
 8003fde:	2120      	movs	r1, #32
 8003fe0:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2240      	movs	r2, #64	; 0x40
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e007      	b.n	8003ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	2204      	movs	r2, #4
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d1a2      	bne.n	8003f42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	0018      	movs	r0, r3
 8004000:	46bd      	mov	sp, r7
 8004002:	b004      	add	sp, #16
 8004004:	bd80      	pop	{r7, pc}
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	fe00e800 	.word	0xfe00e800

0800400c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	2210      	movs	r2, #16
 8004020:	4013      	ands	r3, r2
 8004022:	2b10      	cmp	r3, #16
 8004024:	d164      	bne.n	80040f0 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	2380      	movs	r3, #128	; 0x80
 800402e:	049b      	lsls	r3, r3, #18
 8004030:	401a      	ands	r2, r3
 8004032:	2380      	movs	r3, #128	; 0x80
 8004034:	049b      	lsls	r3, r3, #18
 8004036:	429a      	cmp	r2, r3
 8004038:	d02b      	beq.n	8004092 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2180      	movs	r1, #128	; 0x80
 8004046:	01c9      	lsls	r1, r1, #7
 8004048:	430a      	orrs	r2, r1
 800404a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800404c:	e021      	b.n	8004092 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	3301      	adds	r3, #1
 8004052:	d01e      	beq.n	8004092 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004054:	f7ff f9b4 	bl	80033c0 <HAL_GetTick>
 8004058:	0002      	movs	r2, r0
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	429a      	cmp	r2, r3
 8004062:	d302      	bcc.n	800406a <I2C_IsAcknowledgeFailed+0x5e>
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d113      	bne.n	8004092 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406e:	2220      	movs	r2, #32
 8004070:	431a      	orrs	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2241      	movs	r2, #65	; 0x41
 800407a:	2120      	movs	r1, #32
 800407c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2242      	movs	r2, #66	; 0x42
 8004082:	2100      	movs	r1, #0
 8004084:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2240      	movs	r2, #64	; 0x40
 800408a:	2100      	movs	r1, #0
 800408c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e02f      	b.n	80040f2 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	2220      	movs	r2, #32
 800409a:	4013      	ands	r3, r2
 800409c:	2b20      	cmp	r3, #32
 800409e:	d1d6      	bne.n	800404e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2210      	movs	r2, #16
 80040a6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2220      	movs	r2, #32
 80040ae:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	0018      	movs	r0, r3
 80040b4:	f7ff fe62 	bl	8003d7c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	490e      	ldr	r1, [pc, #56]	; (80040fc <I2C_IsAcknowledgeFailed+0xf0>)
 80040c4:	400a      	ands	r2, r1
 80040c6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040cc:	2204      	movs	r2, #4
 80040ce:	431a      	orrs	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2241      	movs	r2, #65	; 0x41
 80040d8:	2120      	movs	r1, #32
 80040da:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2242      	movs	r2, #66	; 0x42
 80040e0:	2100      	movs	r1, #0
 80040e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2240      	movs	r2, #64	; 0x40
 80040e8:	2100      	movs	r1, #0
 80040ea:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e000      	b.n	80040f2 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	0018      	movs	r0, r3
 80040f4:	46bd      	mov	sp, r7
 80040f6:	b004      	add	sp, #16
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	fe00e800 	.word	0xfe00e800

08004100 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004100:	b590      	push	{r4, r7, lr}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	0008      	movs	r0, r1
 800410a:	0011      	movs	r1, r2
 800410c:	607b      	str	r3, [r7, #4]
 800410e:	240a      	movs	r4, #10
 8004110:	193b      	adds	r3, r7, r4
 8004112:	1c02      	adds	r2, r0, #0
 8004114:	801a      	strh	r2, [r3, #0]
 8004116:	2009      	movs	r0, #9
 8004118:	183b      	adds	r3, r7, r0
 800411a:	1c0a      	adds	r2, r1, #0
 800411c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	6a3a      	ldr	r2, [r7, #32]
 8004126:	0d51      	lsrs	r1, r2, #21
 8004128:	2280      	movs	r2, #128	; 0x80
 800412a:	00d2      	lsls	r2, r2, #3
 800412c:	400a      	ands	r2, r1
 800412e:	490e      	ldr	r1, [pc, #56]	; (8004168 <I2C_TransferConfig+0x68>)
 8004130:	430a      	orrs	r2, r1
 8004132:	43d2      	mvns	r2, r2
 8004134:	401a      	ands	r2, r3
 8004136:	0011      	movs	r1, r2
 8004138:	193b      	adds	r3, r7, r4
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	059b      	lsls	r3, r3, #22
 800413e:	0d9a      	lsrs	r2, r3, #22
 8004140:	183b      	adds	r3, r7, r0
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	0418      	lsls	r0, r3, #16
 8004146:	23ff      	movs	r3, #255	; 0xff
 8004148:	041b      	lsls	r3, r3, #16
 800414a:	4003      	ands	r3, r0
 800414c:	431a      	orrs	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	431a      	orrs	r2, r3
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	431a      	orrs	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	46bd      	mov	sp, r7
 8004162:	b005      	add	sp, #20
 8004164:	bd90      	pop	{r4, r7, pc}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	03ff63ff 	.word	0x03ff63ff

0800416c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2241      	movs	r2, #65	; 0x41
 800417a:	5c9b      	ldrb	r3, [r3, r2]
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b20      	cmp	r3, #32
 8004180:	d138      	bne.n	80041f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2240      	movs	r2, #64	; 0x40
 8004186:	5c9b      	ldrb	r3, [r3, r2]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d101      	bne.n	8004190 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800418c:	2302      	movs	r3, #2
 800418e:	e032      	b.n	80041f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2240      	movs	r2, #64	; 0x40
 8004194:	2101      	movs	r1, #1
 8004196:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2241      	movs	r2, #65	; 0x41
 800419c:	2124      	movs	r1, #36	; 0x24
 800419e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2101      	movs	r1, #1
 80041ac:	438a      	bics	r2, r1
 80041ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4911      	ldr	r1, [pc, #68]	; (8004200 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80041bc:	400a      	ands	r2, r1
 80041be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6819      	ldr	r1, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2101      	movs	r1, #1
 80041dc:	430a      	orrs	r2, r1
 80041de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2241      	movs	r2, #65	; 0x41
 80041e4:	2120      	movs	r1, #32
 80041e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2240      	movs	r2, #64	; 0x40
 80041ec:	2100      	movs	r1, #0
 80041ee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	e000      	b.n	80041f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041f4:	2302      	movs	r3, #2
  }
}
 80041f6:	0018      	movs	r0, r3
 80041f8:	46bd      	mov	sp, r7
 80041fa:	b002      	add	sp, #8
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	46c0      	nop			; (mov r8, r8)
 8004200:	ffffefff 	.word	0xffffefff

08004204 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2241      	movs	r2, #65	; 0x41
 8004212:	5c9b      	ldrb	r3, [r3, r2]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b20      	cmp	r3, #32
 8004218:	d139      	bne.n	800428e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2240      	movs	r2, #64	; 0x40
 800421e:	5c9b      	ldrb	r3, [r3, r2]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d101      	bne.n	8004228 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004224:	2302      	movs	r3, #2
 8004226:	e033      	b.n	8004290 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2240      	movs	r2, #64	; 0x40
 800422c:	2101      	movs	r1, #1
 800422e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2241      	movs	r2, #65	; 0x41
 8004234:	2124      	movs	r1, #36	; 0x24
 8004236:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2101      	movs	r1, #1
 8004244:	438a      	bics	r2, r1
 8004246:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4a11      	ldr	r2, [pc, #68]	; (8004298 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004254:	4013      	ands	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	021b      	lsls	r3, r3, #8
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	4313      	orrs	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2101      	movs	r1, #1
 8004276:	430a      	orrs	r2, r1
 8004278:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2241      	movs	r2, #65	; 0x41
 800427e:	2120      	movs	r1, #32
 8004280:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2240      	movs	r2, #64	; 0x40
 8004286:	2100      	movs	r1, #0
 8004288:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800428a:	2300      	movs	r3, #0
 800428c:	e000      	b.n	8004290 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800428e:	2302      	movs	r3, #2
  }
}
 8004290:	0018      	movs	r0, r3
 8004292:	46bd      	mov	sp, r7
 8004294:	b004      	add	sp, #16
 8004296:	bd80      	pop	{r7, pc}
 8004298:	fffff0ff 	.word	0xfffff0ff

0800429c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80042a4:	4b19      	ldr	r3, [pc, #100]	; (800430c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a19      	ldr	r2, [pc, #100]	; (8004310 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80042aa:	4013      	ands	r3, r2
 80042ac:	0019      	movs	r1, r3
 80042ae:	4b17      	ldr	r3, [pc, #92]	; (800430c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	2380      	movs	r3, #128	; 0x80
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	429a      	cmp	r2, r3
 80042be:	d11f      	bne.n	8004300 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80042c0:	4b14      	ldr	r3, [pc, #80]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	0013      	movs	r3, r2
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	189b      	adds	r3, r3, r2
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	4912      	ldr	r1, [pc, #72]	; (8004318 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80042ce:	0018      	movs	r0, r3
 80042d0:	f7fb ff32 	bl	8000138 <__udivsi3>
 80042d4:	0003      	movs	r3, r0
 80042d6:	3301      	adds	r3, #1
 80042d8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042da:	e008      	b.n	80042ee <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	e001      	b.n	80042ee <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e009      	b.n	8004302 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042ee:	4b07      	ldr	r3, [pc, #28]	; (800430c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80042f0:	695a      	ldr	r2, [r3, #20]
 80042f2:	2380      	movs	r3, #128	; 0x80
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	401a      	ands	r2, r3
 80042f8:	2380      	movs	r3, #128	; 0x80
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d0ed      	beq.n	80042dc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	0018      	movs	r0, r3
 8004304:	46bd      	mov	sp, r7
 8004306:	b004      	add	sp, #16
 8004308:	bd80      	pop	{r7, pc}
 800430a:	46c0      	nop			; (mov r8, r8)
 800430c:	40007000 	.word	0x40007000
 8004310:	fffff9ff 	.word	0xfffff9ff
 8004314:	20000000 	.word	0x20000000
 8004318:	000f4240 	.word	0x000f4240

0800431c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004320:	4b03      	ldr	r3, [pc, #12]	; (8004330 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	23e0      	movs	r3, #224	; 0xe0
 8004326:	01db      	lsls	r3, r3, #7
 8004328:	4013      	ands	r3, r2
}
 800432a:	0018      	movs	r0, r3
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40021000 	.word	0x40021000

08004334 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e2f9      	b.n	800493a <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2201      	movs	r2, #1
 800434c:	4013      	ands	r3, r2
 800434e:	d100      	bne.n	8004352 <HAL_RCC_OscConfig+0x1e>
 8004350:	e07c      	b.n	800444c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004352:	4bc3      	ldr	r3, [pc, #780]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	2238      	movs	r2, #56	; 0x38
 8004358:	4013      	ands	r3, r2
 800435a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800435c:	4bc0      	ldr	r3, [pc, #768]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	2203      	movs	r2, #3
 8004362:	4013      	ands	r3, r2
 8004364:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	2b10      	cmp	r3, #16
 800436a:	d102      	bne.n	8004372 <HAL_RCC_OscConfig+0x3e>
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	2b03      	cmp	r3, #3
 8004370:	d002      	beq.n	8004378 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	2b08      	cmp	r3, #8
 8004376:	d10b      	bne.n	8004390 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004378:	4bb9      	ldr	r3, [pc, #740]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	2380      	movs	r3, #128	; 0x80
 800437e:	029b      	lsls	r3, r3, #10
 8004380:	4013      	ands	r3, r2
 8004382:	d062      	beq.n	800444a <HAL_RCC_OscConfig+0x116>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d15e      	bne.n	800444a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e2d4      	b.n	800493a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	2380      	movs	r3, #128	; 0x80
 8004396:	025b      	lsls	r3, r3, #9
 8004398:	429a      	cmp	r2, r3
 800439a:	d107      	bne.n	80043ac <HAL_RCC_OscConfig+0x78>
 800439c:	4bb0      	ldr	r3, [pc, #704]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	4baf      	ldr	r3, [pc, #700]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 80043a2:	2180      	movs	r1, #128	; 0x80
 80043a4:	0249      	lsls	r1, r1, #9
 80043a6:	430a      	orrs	r2, r1
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	e020      	b.n	80043ee <HAL_RCC_OscConfig+0xba>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	23a0      	movs	r3, #160	; 0xa0
 80043b2:	02db      	lsls	r3, r3, #11
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d10e      	bne.n	80043d6 <HAL_RCC_OscConfig+0xa2>
 80043b8:	4ba9      	ldr	r3, [pc, #676]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	4ba8      	ldr	r3, [pc, #672]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 80043be:	2180      	movs	r1, #128	; 0x80
 80043c0:	02c9      	lsls	r1, r1, #11
 80043c2:	430a      	orrs	r2, r1
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	4ba6      	ldr	r3, [pc, #664]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	4ba5      	ldr	r3, [pc, #660]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 80043cc:	2180      	movs	r1, #128	; 0x80
 80043ce:	0249      	lsls	r1, r1, #9
 80043d0:	430a      	orrs	r2, r1
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	e00b      	b.n	80043ee <HAL_RCC_OscConfig+0xba>
 80043d6:	4ba2      	ldr	r3, [pc, #648]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	4ba1      	ldr	r3, [pc, #644]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 80043dc:	49a1      	ldr	r1, [pc, #644]	; (8004664 <HAL_RCC_OscConfig+0x330>)
 80043de:	400a      	ands	r2, r1
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	4b9f      	ldr	r3, [pc, #636]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	4b9e      	ldr	r3, [pc, #632]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 80043e8:	499f      	ldr	r1, [pc, #636]	; (8004668 <HAL_RCC_OscConfig+0x334>)
 80043ea:	400a      	ands	r2, r1
 80043ec:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d014      	beq.n	8004420 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f6:	f7fe ffe3 	bl	80033c0 <HAL_GetTick>
 80043fa:	0003      	movs	r3, r0
 80043fc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004400:	f7fe ffde 	bl	80033c0 <HAL_GetTick>
 8004404:	0002      	movs	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b64      	cmp	r3, #100	; 0x64
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e293      	b.n	800493a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004412:	4b93      	ldr	r3, [pc, #588]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	2380      	movs	r3, #128	; 0x80
 8004418:	029b      	lsls	r3, r3, #10
 800441a:	4013      	ands	r3, r2
 800441c:	d0f0      	beq.n	8004400 <HAL_RCC_OscConfig+0xcc>
 800441e:	e015      	b.n	800444c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004420:	f7fe ffce 	bl	80033c0 <HAL_GetTick>
 8004424:	0003      	movs	r3, r0
 8004426:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800442a:	f7fe ffc9 	bl	80033c0 <HAL_GetTick>
 800442e:	0002      	movs	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b64      	cmp	r3, #100	; 0x64
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e27e      	b.n	800493a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800443c:	4b88      	ldr	r3, [pc, #544]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	2380      	movs	r3, #128	; 0x80
 8004442:	029b      	lsls	r3, r3, #10
 8004444:	4013      	ands	r3, r2
 8004446:	d1f0      	bne.n	800442a <HAL_RCC_OscConfig+0xf6>
 8004448:	e000      	b.n	800444c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800444a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2202      	movs	r2, #2
 8004452:	4013      	ands	r3, r2
 8004454:	d100      	bne.n	8004458 <HAL_RCC_OscConfig+0x124>
 8004456:	e099      	b.n	800458c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004458:	4b81      	ldr	r3, [pc, #516]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	2238      	movs	r2, #56	; 0x38
 800445e:	4013      	ands	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004462:	4b7f      	ldr	r3, [pc, #508]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	2203      	movs	r2, #3
 8004468:	4013      	ands	r3, r2
 800446a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	2b10      	cmp	r3, #16
 8004470:	d102      	bne.n	8004478 <HAL_RCC_OscConfig+0x144>
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2b02      	cmp	r3, #2
 8004476:	d002      	beq.n	800447e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d135      	bne.n	80044ea <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800447e:	4b78      	ldr	r3, [pc, #480]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	2380      	movs	r3, #128	; 0x80
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	4013      	ands	r3, r2
 8004488:	d005      	beq.n	8004496 <HAL_RCC_OscConfig+0x162>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e251      	b.n	800493a <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004496:	4b72      	ldr	r3, [pc, #456]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	4a74      	ldr	r2, [pc, #464]	; (800466c <HAL_RCC_OscConfig+0x338>)
 800449c:	4013      	ands	r3, r2
 800449e:	0019      	movs	r1, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	021a      	lsls	r2, r3, #8
 80044a6:	4b6e      	ldr	r3, [pc, #440]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 80044a8:	430a      	orrs	r2, r1
 80044aa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d112      	bne.n	80044d8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80044b2:	4b6b      	ldr	r3, [pc, #428]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a6e      	ldr	r2, [pc, #440]	; (8004670 <HAL_RCC_OscConfig+0x33c>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	0019      	movs	r1, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	4b67      	ldr	r3, [pc, #412]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 80044c2:	430a      	orrs	r2, r1
 80044c4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80044c6:	4b66      	ldr	r3, [pc, #408]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	0adb      	lsrs	r3, r3, #11
 80044cc:	2207      	movs	r2, #7
 80044ce:	4013      	ands	r3, r2
 80044d0:	4a68      	ldr	r2, [pc, #416]	; (8004674 <HAL_RCC_OscConfig+0x340>)
 80044d2:	40da      	lsrs	r2, r3
 80044d4:	4b68      	ldr	r3, [pc, #416]	; (8004678 <HAL_RCC_OscConfig+0x344>)
 80044d6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80044d8:	4b68      	ldr	r3, [pc, #416]	; (800467c <HAL_RCC_OscConfig+0x348>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	0018      	movs	r0, r3
 80044de:	f7fe ff13 	bl	8003308 <HAL_InitTick>
 80044e2:	1e03      	subs	r3, r0, #0
 80044e4:	d051      	beq.n	800458a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e227      	b.n	800493a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d030      	beq.n	8004554 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80044f2:	4b5b      	ldr	r3, [pc, #364]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a5e      	ldr	r2, [pc, #376]	; (8004670 <HAL_RCC_OscConfig+0x33c>)
 80044f8:	4013      	ands	r3, r2
 80044fa:	0019      	movs	r1, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691a      	ldr	r2, [r3, #16]
 8004500:	4b57      	ldr	r3, [pc, #348]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 8004502:	430a      	orrs	r2, r1
 8004504:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004506:	4b56      	ldr	r3, [pc, #344]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	4b55      	ldr	r3, [pc, #340]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 800450c:	2180      	movs	r1, #128	; 0x80
 800450e:	0049      	lsls	r1, r1, #1
 8004510:	430a      	orrs	r2, r1
 8004512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004514:	f7fe ff54 	bl	80033c0 <HAL_GetTick>
 8004518:	0003      	movs	r3, r0
 800451a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800451c:	e008      	b.n	8004530 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800451e:	f7fe ff4f 	bl	80033c0 <HAL_GetTick>
 8004522:	0002      	movs	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e204      	b.n	800493a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004530:	4b4b      	ldr	r3, [pc, #300]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	2380      	movs	r3, #128	; 0x80
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	4013      	ands	r3, r2
 800453a:	d0f0      	beq.n	800451e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800453c:	4b48      	ldr	r3, [pc, #288]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	4a4a      	ldr	r2, [pc, #296]	; (800466c <HAL_RCC_OscConfig+0x338>)
 8004542:	4013      	ands	r3, r2
 8004544:	0019      	movs	r1, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	021a      	lsls	r2, r3, #8
 800454c:	4b44      	ldr	r3, [pc, #272]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 800454e:	430a      	orrs	r2, r1
 8004550:	605a      	str	r2, [r3, #4]
 8004552:	e01b      	b.n	800458c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004554:	4b42      	ldr	r3, [pc, #264]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	4b41      	ldr	r3, [pc, #260]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 800455a:	4949      	ldr	r1, [pc, #292]	; (8004680 <HAL_RCC_OscConfig+0x34c>)
 800455c:	400a      	ands	r2, r1
 800455e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7fe ff2e 	bl	80033c0 <HAL_GetTick>
 8004564:	0003      	movs	r3, r0
 8004566:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800456a:	f7fe ff29 	bl	80033c0 <HAL_GetTick>
 800456e:	0002      	movs	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e1de      	b.n	800493a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800457c:	4b38      	ldr	r3, [pc, #224]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	2380      	movs	r3, #128	; 0x80
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	4013      	ands	r3, r2
 8004586:	d1f0      	bne.n	800456a <HAL_RCC_OscConfig+0x236>
 8004588:	e000      	b.n	800458c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800458a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2208      	movs	r2, #8
 8004592:	4013      	ands	r3, r2
 8004594:	d047      	beq.n	8004626 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004596:	4b32      	ldr	r3, [pc, #200]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	2238      	movs	r2, #56	; 0x38
 800459c:	4013      	ands	r3, r2
 800459e:	2b18      	cmp	r3, #24
 80045a0:	d10a      	bne.n	80045b8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80045a2:	4b2f      	ldr	r3, [pc, #188]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 80045a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a6:	2202      	movs	r2, #2
 80045a8:	4013      	ands	r3, r2
 80045aa:	d03c      	beq.n	8004626 <HAL_RCC_OscConfig+0x2f2>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d138      	bne.n	8004626 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e1c0      	b.n	800493a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d019      	beq.n	80045f4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80045c0:	4b27      	ldr	r3, [pc, #156]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 80045c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80045c4:	4b26      	ldr	r3, [pc, #152]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 80045c6:	2101      	movs	r1, #1
 80045c8:	430a      	orrs	r2, r1
 80045ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045cc:	f7fe fef8 	bl	80033c0 <HAL_GetTick>
 80045d0:	0003      	movs	r3, r0
 80045d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045d6:	f7fe fef3 	bl	80033c0 <HAL_GetTick>
 80045da:	0002      	movs	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e1a8      	b.n	800493a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045e8:	4b1d      	ldr	r3, [pc, #116]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 80045ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ec:	2202      	movs	r2, #2
 80045ee:	4013      	ands	r3, r2
 80045f0:	d0f1      	beq.n	80045d6 <HAL_RCC_OscConfig+0x2a2>
 80045f2:	e018      	b.n	8004626 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80045f4:	4b1a      	ldr	r3, [pc, #104]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 80045f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80045f8:	4b19      	ldr	r3, [pc, #100]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 80045fa:	2101      	movs	r1, #1
 80045fc:	438a      	bics	r2, r1
 80045fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004600:	f7fe fede 	bl	80033c0 <HAL_GetTick>
 8004604:	0003      	movs	r3, r0
 8004606:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004608:	e008      	b.n	800461c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800460a:	f7fe fed9 	bl	80033c0 <HAL_GetTick>
 800460e:	0002      	movs	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e18e      	b.n	800493a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800461c:	4b10      	ldr	r3, [pc, #64]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 800461e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004620:	2202      	movs	r2, #2
 8004622:	4013      	ands	r3, r2
 8004624:	d1f1      	bne.n	800460a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2204      	movs	r2, #4
 800462c:	4013      	ands	r3, r2
 800462e:	d100      	bne.n	8004632 <HAL_RCC_OscConfig+0x2fe>
 8004630:	e0c6      	b.n	80047c0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004632:	231f      	movs	r3, #31
 8004634:	18fb      	adds	r3, r7, r3
 8004636:	2200      	movs	r2, #0
 8004638:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800463a:	4b09      	ldr	r3, [pc, #36]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	2238      	movs	r2, #56	; 0x38
 8004640:	4013      	ands	r3, r2
 8004642:	2b20      	cmp	r3, #32
 8004644:	d11e      	bne.n	8004684 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004646:	4b06      	ldr	r3, [pc, #24]	; (8004660 <HAL_RCC_OscConfig+0x32c>)
 8004648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800464a:	2202      	movs	r2, #2
 800464c:	4013      	ands	r3, r2
 800464e:	d100      	bne.n	8004652 <HAL_RCC_OscConfig+0x31e>
 8004650:	e0b6      	b.n	80047c0 <HAL_RCC_OscConfig+0x48c>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d000      	beq.n	800465c <HAL_RCC_OscConfig+0x328>
 800465a:	e0b1      	b.n	80047c0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e16c      	b.n	800493a <HAL_RCC_OscConfig+0x606>
 8004660:	40021000 	.word	0x40021000
 8004664:	fffeffff 	.word	0xfffeffff
 8004668:	fffbffff 	.word	0xfffbffff
 800466c:	ffff80ff 	.word	0xffff80ff
 8004670:	ffffc7ff 	.word	0xffffc7ff
 8004674:	00f42400 	.word	0x00f42400
 8004678:	20000000 	.word	0x20000000
 800467c:	20000004 	.word	0x20000004
 8004680:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004684:	4baf      	ldr	r3, [pc, #700]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 8004686:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004688:	2380      	movs	r3, #128	; 0x80
 800468a:	055b      	lsls	r3, r3, #21
 800468c:	4013      	ands	r3, r2
 800468e:	d101      	bne.n	8004694 <HAL_RCC_OscConfig+0x360>
 8004690:	2301      	movs	r3, #1
 8004692:	e000      	b.n	8004696 <HAL_RCC_OscConfig+0x362>
 8004694:	2300      	movs	r3, #0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d011      	beq.n	80046be <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800469a:	4baa      	ldr	r3, [pc, #680]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 800469c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800469e:	4ba9      	ldr	r3, [pc, #676]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 80046a0:	2180      	movs	r1, #128	; 0x80
 80046a2:	0549      	lsls	r1, r1, #21
 80046a4:	430a      	orrs	r2, r1
 80046a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80046a8:	4ba6      	ldr	r3, [pc, #664]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 80046aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046ac:	2380      	movs	r3, #128	; 0x80
 80046ae:	055b      	lsls	r3, r3, #21
 80046b0:	4013      	ands	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80046b6:	231f      	movs	r3, #31
 80046b8:	18fb      	adds	r3, r7, r3
 80046ba:	2201      	movs	r2, #1
 80046bc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046be:	4ba2      	ldr	r3, [pc, #648]	; (8004948 <HAL_RCC_OscConfig+0x614>)
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	2380      	movs	r3, #128	; 0x80
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	4013      	ands	r3, r2
 80046c8:	d11a      	bne.n	8004700 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046ca:	4b9f      	ldr	r3, [pc, #636]	; (8004948 <HAL_RCC_OscConfig+0x614>)
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	4b9e      	ldr	r3, [pc, #632]	; (8004948 <HAL_RCC_OscConfig+0x614>)
 80046d0:	2180      	movs	r1, #128	; 0x80
 80046d2:	0049      	lsls	r1, r1, #1
 80046d4:	430a      	orrs	r2, r1
 80046d6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80046d8:	f7fe fe72 	bl	80033c0 <HAL_GetTick>
 80046dc:	0003      	movs	r3, r0
 80046de:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e2:	f7fe fe6d 	bl	80033c0 <HAL_GetTick>
 80046e6:	0002      	movs	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e122      	b.n	800493a <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046f4:	4b94      	ldr	r3, [pc, #592]	; (8004948 <HAL_RCC_OscConfig+0x614>)
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	2380      	movs	r3, #128	; 0x80
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	4013      	ands	r3, r2
 80046fe:	d0f0      	beq.n	80046e2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d106      	bne.n	8004716 <HAL_RCC_OscConfig+0x3e2>
 8004708:	4b8e      	ldr	r3, [pc, #568]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 800470a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800470c:	4b8d      	ldr	r3, [pc, #564]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 800470e:	2101      	movs	r1, #1
 8004710:	430a      	orrs	r2, r1
 8004712:	65da      	str	r2, [r3, #92]	; 0x5c
 8004714:	e01c      	b.n	8004750 <HAL_RCC_OscConfig+0x41c>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b05      	cmp	r3, #5
 800471c:	d10c      	bne.n	8004738 <HAL_RCC_OscConfig+0x404>
 800471e:	4b89      	ldr	r3, [pc, #548]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 8004720:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004722:	4b88      	ldr	r3, [pc, #544]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 8004724:	2104      	movs	r1, #4
 8004726:	430a      	orrs	r2, r1
 8004728:	65da      	str	r2, [r3, #92]	; 0x5c
 800472a:	4b86      	ldr	r3, [pc, #536]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 800472c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800472e:	4b85      	ldr	r3, [pc, #532]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 8004730:	2101      	movs	r1, #1
 8004732:	430a      	orrs	r2, r1
 8004734:	65da      	str	r2, [r3, #92]	; 0x5c
 8004736:	e00b      	b.n	8004750 <HAL_RCC_OscConfig+0x41c>
 8004738:	4b82      	ldr	r3, [pc, #520]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 800473a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800473c:	4b81      	ldr	r3, [pc, #516]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 800473e:	2101      	movs	r1, #1
 8004740:	438a      	bics	r2, r1
 8004742:	65da      	str	r2, [r3, #92]	; 0x5c
 8004744:	4b7f      	ldr	r3, [pc, #508]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 8004746:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004748:	4b7e      	ldr	r3, [pc, #504]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 800474a:	2104      	movs	r1, #4
 800474c:	438a      	bics	r2, r1
 800474e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d014      	beq.n	8004782 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004758:	f7fe fe32 	bl	80033c0 <HAL_GetTick>
 800475c:	0003      	movs	r3, r0
 800475e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004760:	e009      	b.n	8004776 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004762:	f7fe fe2d 	bl	80033c0 <HAL_GetTick>
 8004766:	0002      	movs	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	4a77      	ldr	r2, [pc, #476]	; (800494c <HAL_RCC_OscConfig+0x618>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e0e1      	b.n	800493a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004776:	4b73      	ldr	r3, [pc, #460]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 8004778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477a:	2202      	movs	r2, #2
 800477c:	4013      	ands	r3, r2
 800477e:	d0f0      	beq.n	8004762 <HAL_RCC_OscConfig+0x42e>
 8004780:	e013      	b.n	80047aa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004782:	f7fe fe1d 	bl	80033c0 <HAL_GetTick>
 8004786:	0003      	movs	r3, r0
 8004788:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800478a:	e009      	b.n	80047a0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800478c:	f7fe fe18 	bl	80033c0 <HAL_GetTick>
 8004790:	0002      	movs	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	4a6d      	ldr	r2, [pc, #436]	; (800494c <HAL_RCC_OscConfig+0x618>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e0cc      	b.n	800493a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047a0:	4b68      	ldr	r3, [pc, #416]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 80047a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a4:	2202      	movs	r2, #2
 80047a6:	4013      	ands	r3, r2
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80047aa:	231f      	movs	r3, #31
 80047ac:	18fb      	adds	r3, r7, r3
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d105      	bne.n	80047c0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80047b4:	4b63      	ldr	r3, [pc, #396]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 80047b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047b8:	4b62      	ldr	r3, [pc, #392]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 80047ba:	4965      	ldr	r1, [pc, #404]	; (8004950 <HAL_RCC_OscConfig+0x61c>)
 80047bc:	400a      	ands	r2, r1
 80047be:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	69db      	ldr	r3, [r3, #28]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d100      	bne.n	80047ca <HAL_RCC_OscConfig+0x496>
 80047c8:	e0b6      	b.n	8004938 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047ca:	4b5e      	ldr	r3, [pc, #376]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	2238      	movs	r2, #56	; 0x38
 80047d0:	4013      	ands	r3, r2
 80047d2:	2b10      	cmp	r3, #16
 80047d4:	d100      	bne.n	80047d8 <HAL_RCC_OscConfig+0x4a4>
 80047d6:	e07e      	b.n	80048d6 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d153      	bne.n	8004888 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e0:	4b58      	ldr	r3, [pc, #352]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	4b57      	ldr	r3, [pc, #348]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 80047e6:	495b      	ldr	r1, [pc, #364]	; (8004954 <HAL_RCC_OscConfig+0x620>)
 80047e8:	400a      	ands	r2, r1
 80047ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ec:	f7fe fde8 	bl	80033c0 <HAL_GetTick>
 80047f0:	0003      	movs	r3, r0
 80047f2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047f4:	e008      	b.n	8004808 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f6:	f7fe fde3 	bl	80033c0 <HAL_GetTick>
 80047fa:	0002      	movs	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e098      	b.n	800493a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004808:	4b4e      	ldr	r3, [pc, #312]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	2380      	movs	r3, #128	; 0x80
 800480e:	049b      	lsls	r3, r3, #18
 8004810:	4013      	ands	r3, r2
 8004812:	d1f0      	bne.n	80047f6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004814:	4b4b      	ldr	r3, [pc, #300]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	4a4f      	ldr	r2, [pc, #316]	; (8004958 <HAL_RCC_OscConfig+0x624>)
 800481a:	4013      	ands	r3, r2
 800481c:	0019      	movs	r1, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1a      	ldr	r2, [r3, #32]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482c:	021b      	lsls	r3, r3, #8
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004834:	431a      	orrs	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483a:	431a      	orrs	r2, r3
 800483c:	4b41      	ldr	r3, [pc, #260]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 800483e:	430a      	orrs	r2, r1
 8004840:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004842:	4b40      	ldr	r3, [pc, #256]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	4b3f      	ldr	r3, [pc, #252]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 8004848:	2180      	movs	r1, #128	; 0x80
 800484a:	0449      	lsls	r1, r1, #17
 800484c:	430a      	orrs	r2, r1
 800484e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004850:	4b3c      	ldr	r3, [pc, #240]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 8004852:	68da      	ldr	r2, [r3, #12]
 8004854:	4b3b      	ldr	r3, [pc, #236]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 8004856:	2180      	movs	r1, #128	; 0x80
 8004858:	0549      	lsls	r1, r1, #21
 800485a:	430a      	orrs	r2, r1
 800485c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485e:	f7fe fdaf 	bl	80033c0 <HAL_GetTick>
 8004862:	0003      	movs	r3, r0
 8004864:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004868:	f7fe fdaa 	bl	80033c0 <HAL_GetTick>
 800486c:	0002      	movs	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e05f      	b.n	800493a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800487a:	4b32      	ldr	r3, [pc, #200]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	2380      	movs	r3, #128	; 0x80
 8004880:	049b      	lsls	r3, r3, #18
 8004882:	4013      	ands	r3, r2
 8004884:	d0f0      	beq.n	8004868 <HAL_RCC_OscConfig+0x534>
 8004886:	e057      	b.n	8004938 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004888:	4b2e      	ldr	r3, [pc, #184]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	4b2d      	ldr	r3, [pc, #180]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 800488e:	4931      	ldr	r1, [pc, #196]	; (8004954 <HAL_RCC_OscConfig+0x620>)
 8004890:	400a      	ands	r2, r1
 8004892:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004894:	4b2b      	ldr	r3, [pc, #172]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	4b2a      	ldr	r3, [pc, #168]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 800489a:	2103      	movs	r1, #3
 800489c:	438a      	bics	r2, r1
 800489e:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80048a0:	4b28      	ldr	r3, [pc, #160]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 80048a2:	68da      	ldr	r2, [r3, #12]
 80048a4:	4b27      	ldr	r3, [pc, #156]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 80048a6:	492d      	ldr	r1, [pc, #180]	; (800495c <HAL_RCC_OscConfig+0x628>)
 80048a8:	400a      	ands	r2, r1
 80048aa:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ac:	f7fe fd88 	bl	80033c0 <HAL_GetTick>
 80048b0:	0003      	movs	r3, r0
 80048b2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048b4:	e008      	b.n	80048c8 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b6:	f7fe fd83 	bl	80033c0 <HAL_GetTick>
 80048ba:	0002      	movs	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e038      	b.n	800493a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048c8:	4b1e      	ldr	r3, [pc, #120]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	2380      	movs	r3, #128	; 0x80
 80048ce:	049b      	lsls	r3, r3, #18
 80048d0:	4013      	ands	r3, r2
 80048d2:	d1f0      	bne.n	80048b6 <HAL_RCC_OscConfig+0x582>
 80048d4:	e030      	b.n	8004938 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d101      	bne.n	80048e2 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e02b      	b.n	800493a <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80048e2:	4b18      	ldr	r3, [pc, #96]	; (8004944 <HAL_RCC_OscConfig+0x610>)
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	2203      	movs	r2, #3
 80048ec:	401a      	ands	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d11e      	bne.n	8004934 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2270      	movs	r2, #112	; 0x70
 80048fa:	401a      	ands	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004900:	429a      	cmp	r2, r3
 8004902:	d117      	bne.n	8004934 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	23fe      	movs	r3, #254	; 0xfe
 8004908:	01db      	lsls	r3, r3, #7
 800490a:	401a      	ands	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004910:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004912:	429a      	cmp	r2, r3
 8004914:	d10e      	bne.n	8004934 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	23f8      	movs	r3, #248	; 0xf8
 800491a:	039b      	lsls	r3, r3, #14
 800491c:	401a      	ands	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004922:	429a      	cmp	r2, r3
 8004924:	d106      	bne.n	8004934 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	0f5b      	lsrs	r3, r3, #29
 800492a:	075a      	lsls	r2, r3, #29
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004930:	429a      	cmp	r2, r3
 8004932:	d001      	beq.n	8004938 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e000      	b.n	800493a <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	0018      	movs	r0, r3
 800493c:	46bd      	mov	sp, r7
 800493e:	b008      	add	sp, #32
 8004940:	bd80      	pop	{r7, pc}
 8004942:	46c0      	nop			; (mov r8, r8)
 8004944:	40021000 	.word	0x40021000
 8004948:	40007000 	.word	0x40007000
 800494c:	00001388 	.word	0x00001388
 8004950:	efffffff 	.word	0xefffffff
 8004954:	feffffff 	.word	0xfeffffff
 8004958:	1fc1808c 	.word	0x1fc1808c
 800495c:	effeffff 	.word	0xeffeffff

08004960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e0e9      	b.n	8004b48 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004974:	4b76      	ldr	r3, [pc, #472]	; (8004b50 <HAL_RCC_ClockConfig+0x1f0>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2207      	movs	r2, #7
 800497a:	4013      	ands	r3, r2
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	429a      	cmp	r2, r3
 8004980:	d91e      	bls.n	80049c0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004982:	4b73      	ldr	r3, [pc, #460]	; (8004b50 <HAL_RCC_ClockConfig+0x1f0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2207      	movs	r2, #7
 8004988:	4393      	bics	r3, r2
 800498a:	0019      	movs	r1, r3
 800498c:	4b70      	ldr	r3, [pc, #448]	; (8004b50 <HAL_RCC_ClockConfig+0x1f0>)
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	430a      	orrs	r2, r1
 8004992:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004994:	f7fe fd14 	bl	80033c0 <HAL_GetTick>
 8004998:	0003      	movs	r3, r0
 800499a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800499c:	e009      	b.n	80049b2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800499e:	f7fe fd0f 	bl	80033c0 <HAL_GetTick>
 80049a2:	0002      	movs	r2, r0
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	4a6a      	ldr	r2, [pc, #424]	; (8004b54 <HAL_RCC_ClockConfig+0x1f4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e0ca      	b.n	8004b48 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049b2:	4b67      	ldr	r3, [pc, #412]	; (8004b50 <HAL_RCC_ClockConfig+0x1f0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2207      	movs	r2, #7
 80049b8:	4013      	ands	r3, r2
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d1ee      	bne.n	800499e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2202      	movs	r2, #2
 80049c6:	4013      	ands	r3, r2
 80049c8:	d015      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2204      	movs	r2, #4
 80049d0:	4013      	ands	r3, r2
 80049d2:	d006      	beq.n	80049e2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80049d4:	4b60      	ldr	r3, [pc, #384]	; (8004b58 <HAL_RCC_ClockConfig+0x1f8>)
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	4b5f      	ldr	r3, [pc, #380]	; (8004b58 <HAL_RCC_ClockConfig+0x1f8>)
 80049da:	21e0      	movs	r1, #224	; 0xe0
 80049dc:	01c9      	lsls	r1, r1, #7
 80049de:	430a      	orrs	r2, r1
 80049e0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049e2:	4b5d      	ldr	r3, [pc, #372]	; (8004b58 <HAL_RCC_ClockConfig+0x1f8>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	4a5d      	ldr	r2, [pc, #372]	; (8004b5c <HAL_RCC_ClockConfig+0x1fc>)
 80049e8:	4013      	ands	r3, r2
 80049ea:	0019      	movs	r1, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	4b59      	ldr	r3, [pc, #356]	; (8004b58 <HAL_RCC_ClockConfig+0x1f8>)
 80049f2:	430a      	orrs	r2, r1
 80049f4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2201      	movs	r2, #1
 80049fc:	4013      	ands	r3, r2
 80049fe:	d057      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d107      	bne.n	8004a18 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a08:	4b53      	ldr	r3, [pc, #332]	; (8004b58 <HAL_RCC_ClockConfig+0x1f8>)
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	2380      	movs	r3, #128	; 0x80
 8004a0e:	029b      	lsls	r3, r3, #10
 8004a10:	4013      	ands	r3, r2
 8004a12:	d12b      	bne.n	8004a6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e097      	b.n	8004b48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d107      	bne.n	8004a30 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a20:	4b4d      	ldr	r3, [pc, #308]	; (8004b58 <HAL_RCC_ClockConfig+0x1f8>)
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	2380      	movs	r3, #128	; 0x80
 8004a26:	049b      	lsls	r3, r3, #18
 8004a28:	4013      	ands	r3, r2
 8004a2a:	d11f      	bne.n	8004a6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e08b      	b.n	8004b48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d107      	bne.n	8004a48 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a38:	4b47      	ldr	r3, [pc, #284]	; (8004b58 <HAL_RCC_ClockConfig+0x1f8>)
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	2380      	movs	r3, #128	; 0x80
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	4013      	ands	r3, r2
 8004a42:	d113      	bne.n	8004a6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e07f      	b.n	8004b48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2b03      	cmp	r3, #3
 8004a4e:	d106      	bne.n	8004a5e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a50:	4b41      	ldr	r3, [pc, #260]	; (8004b58 <HAL_RCC_ClockConfig+0x1f8>)
 8004a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a54:	2202      	movs	r2, #2
 8004a56:	4013      	ands	r3, r2
 8004a58:	d108      	bne.n	8004a6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e074      	b.n	8004b48 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a5e:	4b3e      	ldr	r3, [pc, #248]	; (8004b58 <HAL_RCC_ClockConfig+0x1f8>)
 8004a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a62:	2202      	movs	r2, #2
 8004a64:	4013      	ands	r3, r2
 8004a66:	d101      	bne.n	8004a6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e06d      	b.n	8004b48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a6c:	4b3a      	ldr	r3, [pc, #232]	; (8004b58 <HAL_RCC_ClockConfig+0x1f8>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	2207      	movs	r2, #7
 8004a72:	4393      	bics	r3, r2
 8004a74:	0019      	movs	r1, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	4b37      	ldr	r3, [pc, #220]	; (8004b58 <HAL_RCC_ClockConfig+0x1f8>)
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a80:	f7fe fc9e 	bl	80033c0 <HAL_GetTick>
 8004a84:	0003      	movs	r3, r0
 8004a86:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a88:	e009      	b.n	8004a9e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a8a:	f7fe fc99 	bl	80033c0 <HAL_GetTick>
 8004a8e:	0002      	movs	r2, r0
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	4a2f      	ldr	r2, [pc, #188]	; (8004b54 <HAL_RCC_ClockConfig+0x1f4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e054      	b.n	8004b48 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a9e:	4b2e      	ldr	r3, [pc, #184]	; (8004b58 <HAL_RCC_ClockConfig+0x1f8>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	2238      	movs	r2, #56	; 0x38
 8004aa4:	401a      	ands	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d1ec      	bne.n	8004a8a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ab0:	4b27      	ldr	r3, [pc, #156]	; (8004b50 <HAL_RCC_ClockConfig+0x1f0>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2207      	movs	r2, #7
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d21e      	bcs.n	8004afc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004abe:	4b24      	ldr	r3, [pc, #144]	; (8004b50 <HAL_RCC_ClockConfig+0x1f0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2207      	movs	r2, #7
 8004ac4:	4393      	bics	r3, r2
 8004ac6:	0019      	movs	r1, r3
 8004ac8:	4b21      	ldr	r3, [pc, #132]	; (8004b50 <HAL_RCC_ClockConfig+0x1f0>)
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ad0:	f7fe fc76 	bl	80033c0 <HAL_GetTick>
 8004ad4:	0003      	movs	r3, r0
 8004ad6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ad8:	e009      	b.n	8004aee <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ada:	f7fe fc71 	bl	80033c0 <HAL_GetTick>
 8004ade:	0002      	movs	r2, r0
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	4a1b      	ldr	r2, [pc, #108]	; (8004b54 <HAL_RCC_ClockConfig+0x1f4>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e02c      	b.n	8004b48 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004aee:	4b18      	ldr	r3, [pc, #96]	; (8004b50 <HAL_RCC_ClockConfig+0x1f0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2207      	movs	r2, #7
 8004af4:	4013      	ands	r3, r2
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d1ee      	bne.n	8004ada <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2204      	movs	r2, #4
 8004b02:	4013      	ands	r3, r2
 8004b04:	d009      	beq.n	8004b1a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004b06:	4b14      	ldr	r3, [pc, #80]	; (8004b58 <HAL_RCC_ClockConfig+0x1f8>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	4a15      	ldr	r2, [pc, #84]	; (8004b60 <HAL_RCC_ClockConfig+0x200>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	0019      	movs	r1, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68da      	ldr	r2, [r3, #12]
 8004b14:	4b10      	ldr	r3, [pc, #64]	; (8004b58 <HAL_RCC_ClockConfig+0x1f8>)
 8004b16:	430a      	orrs	r2, r1
 8004b18:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004b1a:	f000 f829 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 8004b1e:	0001      	movs	r1, r0
 8004b20:	4b0d      	ldr	r3, [pc, #52]	; (8004b58 <HAL_RCC_ClockConfig+0x1f8>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	0a1b      	lsrs	r3, r3, #8
 8004b26:	220f      	movs	r2, #15
 8004b28:	401a      	ands	r2, r3
 8004b2a:	4b0e      	ldr	r3, [pc, #56]	; (8004b64 <HAL_RCC_ClockConfig+0x204>)
 8004b2c:	0092      	lsls	r2, r2, #2
 8004b2e:	58d3      	ldr	r3, [r2, r3]
 8004b30:	221f      	movs	r2, #31
 8004b32:	4013      	ands	r3, r2
 8004b34:	000a      	movs	r2, r1
 8004b36:	40da      	lsrs	r2, r3
 8004b38:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <HAL_RCC_ClockConfig+0x208>)
 8004b3a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <HAL_RCC_ClockConfig+0x20c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	0018      	movs	r0, r3
 8004b42:	f7fe fbe1 	bl	8003308 <HAL_InitTick>
 8004b46:	0003      	movs	r3, r0
}
 8004b48:	0018      	movs	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	b004      	add	sp, #16
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	40022000 	.word	0x40022000
 8004b54:	00001388 	.word	0x00001388
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	fffff0ff 	.word	0xfffff0ff
 8004b60:	ffff8fff 	.word	0xffff8fff
 8004b64:	080085a0 	.word	0x080085a0
 8004b68:	20000000 	.word	0x20000000
 8004b6c:	20000004 	.word	0x20000004

08004b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b76:	4b3c      	ldr	r3, [pc, #240]	; (8004c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	2238      	movs	r2, #56	; 0x38
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	d10f      	bne.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004b80:	4b39      	ldr	r3, [pc, #228]	; (8004c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	0adb      	lsrs	r3, r3, #11
 8004b86:	2207      	movs	r2, #7
 8004b88:	4013      	ands	r3, r2
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	409a      	lsls	r2, r3
 8004b8e:	0013      	movs	r3, r2
 8004b90:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004b92:	6839      	ldr	r1, [r7, #0]
 8004b94:	4835      	ldr	r0, [pc, #212]	; (8004c6c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004b96:	f7fb facf 	bl	8000138 <__udivsi3>
 8004b9a:	0003      	movs	r3, r0
 8004b9c:	613b      	str	r3, [r7, #16]
 8004b9e:	e05d      	b.n	8004c5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ba0:	4b31      	ldr	r3, [pc, #196]	; (8004c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	2238      	movs	r2, #56	; 0x38
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d102      	bne.n	8004bb2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bac:	4b30      	ldr	r3, [pc, #192]	; (8004c70 <HAL_RCC_GetSysClockFreq+0x100>)
 8004bae:	613b      	str	r3, [r7, #16]
 8004bb0:	e054      	b.n	8004c5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bb2:	4b2d      	ldr	r3, [pc, #180]	; (8004c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	2238      	movs	r2, #56	; 0x38
 8004bb8:	4013      	ands	r3, r2
 8004bba:	2b10      	cmp	r3, #16
 8004bbc:	d138      	bne.n	8004c30 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004bbe:	4b2a      	ldr	r3, [pc, #168]	; (8004c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	2203      	movs	r2, #3
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bc8:	4b27      	ldr	r3, [pc, #156]	; (8004c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	091b      	lsrs	r3, r3, #4
 8004bce:	2207      	movs	r2, #7
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2b03      	cmp	r3, #3
 8004bda:	d10d      	bne.n	8004bf8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bdc:	68b9      	ldr	r1, [r7, #8]
 8004bde:	4824      	ldr	r0, [pc, #144]	; (8004c70 <HAL_RCC_GetSysClockFreq+0x100>)
 8004be0:	f7fb faaa 	bl	8000138 <__udivsi3>
 8004be4:	0003      	movs	r3, r0
 8004be6:	0019      	movs	r1, r3
 8004be8:	4b1f      	ldr	r3, [pc, #124]	; (8004c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	0a1b      	lsrs	r3, r3, #8
 8004bee:	227f      	movs	r2, #127	; 0x7f
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	434b      	muls	r3, r1
 8004bf4:	617b      	str	r3, [r7, #20]
        break;
 8004bf6:	e00d      	b.n	8004c14 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004bf8:	68b9      	ldr	r1, [r7, #8]
 8004bfa:	481c      	ldr	r0, [pc, #112]	; (8004c6c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004bfc:	f7fb fa9c 	bl	8000138 <__udivsi3>
 8004c00:	0003      	movs	r3, r0
 8004c02:	0019      	movs	r1, r3
 8004c04:	4b18      	ldr	r3, [pc, #96]	; (8004c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	0a1b      	lsrs	r3, r3, #8
 8004c0a:	227f      	movs	r2, #127	; 0x7f
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	434b      	muls	r3, r1
 8004c10:	617b      	str	r3, [r7, #20]
        break;
 8004c12:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004c14:	4b14      	ldr	r3, [pc, #80]	; (8004c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	0f5b      	lsrs	r3, r3, #29
 8004c1a:	2207      	movs	r2, #7
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	3301      	adds	r3, #1
 8004c20:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	6978      	ldr	r0, [r7, #20]
 8004c26:	f7fb fa87 	bl	8000138 <__udivsi3>
 8004c2a:	0003      	movs	r3, r0
 8004c2c:	613b      	str	r3, [r7, #16]
 8004c2e:	e015      	b.n	8004c5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004c30:	4b0d      	ldr	r3, [pc, #52]	; (8004c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	2238      	movs	r2, #56	; 0x38
 8004c36:	4013      	ands	r3, r2
 8004c38:	2b20      	cmp	r3, #32
 8004c3a:	d103      	bne.n	8004c44 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004c3c:	2380      	movs	r3, #128	; 0x80
 8004c3e:	021b      	lsls	r3, r3, #8
 8004c40:	613b      	str	r3, [r7, #16]
 8004c42:	e00b      	b.n	8004c5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004c44:	4b08      	ldr	r3, [pc, #32]	; (8004c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	2238      	movs	r2, #56	; 0x38
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2b18      	cmp	r3, #24
 8004c4e:	d103      	bne.n	8004c58 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004c50:	23fa      	movs	r3, #250	; 0xfa
 8004c52:	01db      	lsls	r3, r3, #7
 8004c54:	613b      	str	r3, [r7, #16]
 8004c56:	e001      	b.n	8004c5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004c5c:	693b      	ldr	r3, [r7, #16]
}
 8004c5e:	0018      	movs	r0, r3
 8004c60:	46bd      	mov	sp, r7
 8004c62:	b006      	add	sp, #24
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	46c0      	nop			; (mov r8, r8)
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	00f42400 	.word	0x00f42400
 8004c70:	007a1200 	.word	0x007a1200

08004c74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c78:	4b02      	ldr	r3, [pc, #8]	; (8004c84 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
}
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	20000000 	.word	0x20000000

08004c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c88:	b5b0      	push	{r4, r5, r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004c8c:	f7ff fff2 	bl	8004c74 <HAL_RCC_GetHCLKFreq>
 8004c90:	0004      	movs	r4, r0
 8004c92:	f7ff fb43 	bl	800431c <LL_RCC_GetAPB1Prescaler>
 8004c96:	0003      	movs	r3, r0
 8004c98:	0b1a      	lsrs	r2, r3, #12
 8004c9a:	4b05      	ldr	r3, [pc, #20]	; (8004cb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c9c:	0092      	lsls	r2, r2, #2
 8004c9e:	58d3      	ldr	r3, [r2, r3]
 8004ca0:	221f      	movs	r2, #31
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	40dc      	lsrs	r4, r3
 8004ca6:	0023      	movs	r3, r4
}
 8004ca8:	0018      	movs	r0, r3
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bdb0      	pop	{r4, r5, r7, pc}
 8004cae:	46c0      	nop			; (mov r8, r8)
 8004cb0:	080085e0 	.word	0x080085e0

08004cb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004cbc:	2313      	movs	r3, #19
 8004cbe:	18fb      	adds	r3, r7, r3
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cc4:	2312      	movs	r3, #18
 8004cc6:	18fb      	adds	r3, r7, r3
 8004cc8:	2200      	movs	r2, #0
 8004cca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	2380      	movs	r3, #128	; 0x80
 8004cd2:	029b      	lsls	r3, r3, #10
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	d100      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004cd8:	e0a3      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cda:	2011      	movs	r0, #17
 8004cdc:	183b      	adds	r3, r7, r0
 8004cde:	2200      	movs	r2, #0
 8004ce0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ce2:	4b86      	ldr	r3, [pc, #536]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004ce4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ce6:	2380      	movs	r3, #128	; 0x80
 8004ce8:	055b      	lsls	r3, r3, #21
 8004cea:	4013      	ands	r3, r2
 8004cec:	d110      	bne.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cee:	4b83      	ldr	r3, [pc, #524]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004cf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cf2:	4b82      	ldr	r3, [pc, #520]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004cf4:	2180      	movs	r1, #128	; 0x80
 8004cf6:	0549      	lsls	r1, r1, #21
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	63da      	str	r2, [r3, #60]	; 0x3c
 8004cfc:	4b7f      	ldr	r3, [pc, #508]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004cfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d00:	2380      	movs	r3, #128	; 0x80
 8004d02:	055b      	lsls	r3, r3, #21
 8004d04:	4013      	ands	r3, r2
 8004d06:	60bb      	str	r3, [r7, #8]
 8004d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d0a:	183b      	adds	r3, r7, r0
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d10:	4b7b      	ldr	r3, [pc, #492]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	4b7a      	ldr	r3, [pc, #488]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004d16:	2180      	movs	r1, #128	; 0x80
 8004d18:	0049      	lsls	r1, r1, #1
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d1e:	f7fe fb4f 	bl	80033c0 <HAL_GetTick>
 8004d22:	0003      	movs	r3, r0
 8004d24:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d26:	e00b      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d28:	f7fe fb4a 	bl	80033c0 <HAL_GetTick>
 8004d2c:	0002      	movs	r2, r0
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d904      	bls.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004d36:	2313      	movs	r3, #19
 8004d38:	18fb      	adds	r3, r7, r3
 8004d3a:	2203      	movs	r2, #3
 8004d3c:	701a      	strb	r2, [r3, #0]
        break;
 8004d3e:	e005      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d40:	4b6f      	ldr	r3, [pc, #444]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	2380      	movs	r3, #128	; 0x80
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	4013      	ands	r3, r2
 8004d4a:	d0ed      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004d4c:	2313      	movs	r3, #19
 8004d4e:	18fb      	adds	r3, r7, r3
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d154      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d56:	4b69      	ldr	r3, [pc, #420]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d5a:	23c0      	movs	r3, #192	; 0xc0
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4013      	ands	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d019      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d014      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d72:	4b62      	ldr	r3, [pc, #392]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d76:	4a63      	ldr	r2, [pc, #396]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004d78:	4013      	ands	r3, r2
 8004d7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d7c:	4b5f      	ldr	r3, [pc, #380]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d80:	4b5e      	ldr	r3, [pc, #376]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d82:	2180      	movs	r1, #128	; 0x80
 8004d84:	0249      	lsls	r1, r1, #9
 8004d86:	430a      	orrs	r2, r1
 8004d88:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d8a:	4b5c      	ldr	r3, [pc, #368]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d8e:	4b5b      	ldr	r3, [pc, #364]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d90:	495d      	ldr	r1, [pc, #372]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004d92:	400a      	ands	r2, r1
 8004d94:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d96:	4b59      	ldr	r3, [pc, #356]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	4013      	ands	r3, r2
 8004da2:	d016      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da4:	f7fe fb0c 	bl	80033c0 <HAL_GetTick>
 8004da8:	0003      	movs	r3, r0
 8004daa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dac:	e00c      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dae:	f7fe fb07 	bl	80033c0 <HAL_GetTick>
 8004db2:	0002      	movs	r2, r0
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	4a54      	ldr	r2, [pc, #336]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d904      	bls.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004dbe:	2313      	movs	r3, #19
 8004dc0:	18fb      	adds	r3, r7, r3
 8004dc2:	2203      	movs	r2, #3
 8004dc4:	701a      	strb	r2, [r3, #0]
            break;
 8004dc6:	e004      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dc8:	4b4c      	ldr	r3, [pc, #304]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dcc:	2202      	movs	r2, #2
 8004dce:	4013      	ands	r3, r2
 8004dd0:	d0ed      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004dd2:	2313      	movs	r3, #19
 8004dd4:	18fb      	adds	r3, r7, r3
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10a      	bne.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ddc:	4b47      	ldr	r3, [pc, #284]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004de0:	4a48      	ldr	r2, [pc, #288]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004de2:	4013      	ands	r3, r2
 8004de4:	0019      	movs	r1, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	699a      	ldr	r2, [r3, #24]
 8004dea:	4b44      	ldr	r3, [pc, #272]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004dec:	430a      	orrs	r2, r1
 8004dee:	65da      	str	r2, [r3, #92]	; 0x5c
 8004df0:	e00c      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004df2:	2312      	movs	r3, #18
 8004df4:	18fb      	adds	r3, r7, r3
 8004df6:	2213      	movs	r2, #19
 8004df8:	18ba      	adds	r2, r7, r2
 8004dfa:	7812      	ldrb	r2, [r2, #0]
 8004dfc:	701a      	strb	r2, [r3, #0]
 8004dfe:	e005      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e00:	2312      	movs	r3, #18
 8004e02:	18fb      	adds	r3, r7, r3
 8004e04:	2213      	movs	r2, #19
 8004e06:	18ba      	adds	r2, r7, r2
 8004e08:	7812      	ldrb	r2, [r2, #0]
 8004e0a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e0c:	2311      	movs	r3, #17
 8004e0e:	18fb      	adds	r3, r7, r3
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d105      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e16:	4b39      	ldr	r3, [pc, #228]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004e18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e1a:	4b38      	ldr	r3, [pc, #224]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004e1c:	493c      	ldr	r1, [pc, #240]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004e1e:	400a      	ands	r2, r1
 8004e20:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2201      	movs	r2, #1
 8004e28:	4013      	ands	r3, r2
 8004e2a:	d009      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e2c:	4b33      	ldr	r3, [pc, #204]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e30:	2203      	movs	r2, #3
 8004e32:	4393      	bics	r3, r2
 8004e34:	0019      	movs	r1, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	4b30      	ldr	r3, [pc, #192]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2202      	movs	r2, #2
 8004e46:	4013      	ands	r3, r2
 8004e48:	d009      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e4a:	4b2c      	ldr	r3, [pc, #176]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4e:	220c      	movs	r2, #12
 8004e50:	4393      	bics	r3, r2
 8004e52:	0019      	movs	r1, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	4b28      	ldr	r3, [pc, #160]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2220      	movs	r2, #32
 8004e64:	4013      	ands	r3, r2
 8004e66:	d009      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e68:	4b24      	ldr	r3, [pc, #144]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6c:	4a29      	ldr	r2, [pc, #164]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e6e:	4013      	ands	r3, r2
 8004e70:	0019      	movs	r1, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	4b21      	ldr	r3, [pc, #132]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	2380      	movs	r3, #128	; 0x80
 8004e82:	01db      	lsls	r3, r3, #7
 8004e84:	4013      	ands	r3, r2
 8004e86:	d015      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e88:	4b1c      	ldr	r3, [pc, #112]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	0899      	lsrs	r1, r3, #2
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	695a      	ldr	r2, [r3, #20]
 8004e94:	4b19      	ldr	r3, [pc, #100]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004e96:	430a      	orrs	r2, r1
 8004e98:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	695a      	ldr	r2, [r3, #20]
 8004e9e:	2380      	movs	r3, #128	; 0x80
 8004ea0:	05db      	lsls	r3, r3, #23
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d106      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004ea6:	4b15      	ldr	r3, [pc, #84]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	4b14      	ldr	r3, [pc, #80]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004eac:	2180      	movs	r1, #128	; 0x80
 8004eae:	0249      	lsls	r1, r1, #9
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	2380      	movs	r3, #128	; 0x80
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	d016      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004ec0:	4b0e      	ldr	r3, [pc, #56]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec4:	4a14      	ldr	r2, [pc, #80]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	0019      	movs	r1, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691a      	ldr	r2, [r3, #16]
 8004ece:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	2380      	movs	r3, #128	; 0x80
 8004eda:	01db      	lsls	r3, r3, #7
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d106      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004ee0:	4b06      	ldr	r3, [pc, #24]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004ee2:	68da      	ldr	r2, [r3, #12]
 8004ee4:	4b05      	ldr	r3, [pc, #20]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004ee6:	2180      	movs	r1, #128	; 0x80
 8004ee8:	0249      	lsls	r1, r1, #9
 8004eea:	430a      	orrs	r2, r1
 8004eec:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004eee:	2312      	movs	r3, #18
 8004ef0:	18fb      	adds	r3, r7, r3
 8004ef2:	781b      	ldrb	r3, [r3, #0]
}
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	b006      	add	sp, #24
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	40021000 	.word	0x40021000
 8004f00:	40007000 	.word	0x40007000
 8004f04:	fffffcff 	.word	0xfffffcff
 8004f08:	fffeffff 	.word	0xfffeffff
 8004f0c:	00001388 	.word	0x00001388
 8004f10:	efffffff 	.word	0xefffffff
 8004f14:	ffffcfff 	.word	0xffffcfff
 8004f18:	ffff3fff 	.word	0xffff3fff

08004f1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e046      	b.n	8004fbc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2284      	movs	r2, #132	; 0x84
 8004f32:	589b      	ldr	r3, [r3, r2]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d107      	bne.n	8004f48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2280      	movs	r2, #128	; 0x80
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	0018      	movs	r0, r3
 8004f44:	f7fe f94c 	bl	80031e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2284      	movs	r2, #132	; 0x84
 8004f4c:	2124      	movs	r1, #36	; 0x24
 8004f4e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	438a      	bics	r2, r1
 8004f5e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	0018      	movs	r0, r3
 8004f64:	f000 f830 	bl	8004fc8 <UART_SetConfig>
 8004f68:	0003      	movs	r3, r0
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d101      	bne.n	8004f72 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e024      	b.n	8004fbc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	f000 f9c9 	bl	8005314 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	490d      	ldr	r1, [pc, #52]	; (8004fc4 <HAL_UART_Init+0xa8>)
 8004f8e:	400a      	ands	r2, r1
 8004f90:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	212a      	movs	r1, #42	; 0x2a
 8004f9e:	438a      	bics	r2, r1
 8004fa0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2101      	movs	r1, #1
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	f000 fa61 	bl	800547c <UART_CheckIdleState>
 8004fba:	0003      	movs	r3, r0
}
 8004fbc:	0018      	movs	r0, r3
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	b002      	add	sp, #8
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	ffffb7ff 	.word	0xffffb7ff

08004fc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fd0:	231a      	movs	r3, #26
 8004fd2:	18fb      	adds	r3, r7, r3
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	69db      	ldr	r3, [r3, #28]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4abd      	ldr	r2, [pc, #756]	; (80052ec <UART_SetConfig+0x324>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	0019      	movs	r1, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	69fa      	ldr	r2, [r7, #28]
 8005002:	430a      	orrs	r2, r1
 8005004:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	4ab8      	ldr	r2, [pc, #736]	; (80052f0 <UART_SetConfig+0x328>)
 800500e:	4013      	ands	r3, r2
 8005010:	0019      	movs	r1, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	69fa      	ldr	r2, [r7, #28]
 800502a:	4313      	orrs	r3, r2
 800502c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	4aaf      	ldr	r2, [pc, #700]	; (80052f4 <UART_SetConfig+0x32c>)
 8005036:	4013      	ands	r3, r2
 8005038:	0019      	movs	r1, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	69fa      	ldr	r2, [r7, #28]
 8005040:	430a      	orrs	r2, r1
 8005042:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504a:	220f      	movs	r2, #15
 800504c:	4393      	bics	r3, r2
 800504e:	0019      	movs	r1, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4aa5      	ldr	r2, [pc, #660]	; (80052f8 <UART_SetConfig+0x330>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d127      	bne.n	80050b6 <UART_SetConfig+0xee>
 8005066:	4ba5      	ldr	r3, [pc, #660]	; (80052fc <UART_SetConfig+0x334>)
 8005068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506a:	2203      	movs	r2, #3
 800506c:	4013      	ands	r3, r2
 800506e:	2b03      	cmp	r3, #3
 8005070:	d017      	beq.n	80050a2 <UART_SetConfig+0xda>
 8005072:	d81b      	bhi.n	80050ac <UART_SetConfig+0xe4>
 8005074:	2b02      	cmp	r3, #2
 8005076:	d00a      	beq.n	800508e <UART_SetConfig+0xc6>
 8005078:	d818      	bhi.n	80050ac <UART_SetConfig+0xe4>
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <UART_SetConfig+0xbc>
 800507e:	2b01      	cmp	r3, #1
 8005080:	d00a      	beq.n	8005098 <UART_SetConfig+0xd0>
 8005082:	e013      	b.n	80050ac <UART_SetConfig+0xe4>
 8005084:	231b      	movs	r3, #27
 8005086:	18fb      	adds	r3, r7, r3
 8005088:	2200      	movs	r2, #0
 800508a:	701a      	strb	r2, [r3, #0]
 800508c:	e058      	b.n	8005140 <UART_SetConfig+0x178>
 800508e:	231b      	movs	r3, #27
 8005090:	18fb      	adds	r3, r7, r3
 8005092:	2202      	movs	r2, #2
 8005094:	701a      	strb	r2, [r3, #0]
 8005096:	e053      	b.n	8005140 <UART_SetConfig+0x178>
 8005098:	231b      	movs	r3, #27
 800509a:	18fb      	adds	r3, r7, r3
 800509c:	2204      	movs	r2, #4
 800509e:	701a      	strb	r2, [r3, #0]
 80050a0:	e04e      	b.n	8005140 <UART_SetConfig+0x178>
 80050a2:	231b      	movs	r3, #27
 80050a4:	18fb      	adds	r3, r7, r3
 80050a6:	2208      	movs	r2, #8
 80050a8:	701a      	strb	r2, [r3, #0]
 80050aa:	e049      	b.n	8005140 <UART_SetConfig+0x178>
 80050ac:	231b      	movs	r3, #27
 80050ae:	18fb      	adds	r3, r7, r3
 80050b0:	2210      	movs	r2, #16
 80050b2:	701a      	strb	r2, [r3, #0]
 80050b4:	e044      	b.n	8005140 <UART_SetConfig+0x178>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a91      	ldr	r2, [pc, #580]	; (8005300 <UART_SetConfig+0x338>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d127      	bne.n	8005110 <UART_SetConfig+0x148>
 80050c0:	4b8e      	ldr	r3, [pc, #568]	; (80052fc <UART_SetConfig+0x334>)
 80050c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c4:	220c      	movs	r2, #12
 80050c6:	4013      	ands	r3, r2
 80050c8:	2b0c      	cmp	r3, #12
 80050ca:	d017      	beq.n	80050fc <UART_SetConfig+0x134>
 80050cc:	d81b      	bhi.n	8005106 <UART_SetConfig+0x13e>
 80050ce:	2b08      	cmp	r3, #8
 80050d0:	d00a      	beq.n	80050e8 <UART_SetConfig+0x120>
 80050d2:	d818      	bhi.n	8005106 <UART_SetConfig+0x13e>
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d002      	beq.n	80050de <UART_SetConfig+0x116>
 80050d8:	2b04      	cmp	r3, #4
 80050da:	d00a      	beq.n	80050f2 <UART_SetConfig+0x12a>
 80050dc:	e013      	b.n	8005106 <UART_SetConfig+0x13e>
 80050de:	231b      	movs	r3, #27
 80050e0:	18fb      	adds	r3, r7, r3
 80050e2:	2200      	movs	r2, #0
 80050e4:	701a      	strb	r2, [r3, #0]
 80050e6:	e02b      	b.n	8005140 <UART_SetConfig+0x178>
 80050e8:	231b      	movs	r3, #27
 80050ea:	18fb      	adds	r3, r7, r3
 80050ec:	2202      	movs	r2, #2
 80050ee:	701a      	strb	r2, [r3, #0]
 80050f0:	e026      	b.n	8005140 <UART_SetConfig+0x178>
 80050f2:	231b      	movs	r3, #27
 80050f4:	18fb      	adds	r3, r7, r3
 80050f6:	2204      	movs	r2, #4
 80050f8:	701a      	strb	r2, [r3, #0]
 80050fa:	e021      	b.n	8005140 <UART_SetConfig+0x178>
 80050fc:	231b      	movs	r3, #27
 80050fe:	18fb      	adds	r3, r7, r3
 8005100:	2208      	movs	r2, #8
 8005102:	701a      	strb	r2, [r3, #0]
 8005104:	e01c      	b.n	8005140 <UART_SetConfig+0x178>
 8005106:	231b      	movs	r3, #27
 8005108:	18fb      	adds	r3, r7, r3
 800510a:	2210      	movs	r2, #16
 800510c:	701a      	strb	r2, [r3, #0]
 800510e:	e017      	b.n	8005140 <UART_SetConfig+0x178>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a7b      	ldr	r2, [pc, #492]	; (8005304 <UART_SetConfig+0x33c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d104      	bne.n	8005124 <UART_SetConfig+0x15c>
 800511a:	231b      	movs	r3, #27
 800511c:	18fb      	adds	r3, r7, r3
 800511e:	2200      	movs	r2, #0
 8005120:	701a      	strb	r2, [r3, #0]
 8005122:	e00d      	b.n	8005140 <UART_SetConfig+0x178>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a77      	ldr	r2, [pc, #476]	; (8005308 <UART_SetConfig+0x340>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d104      	bne.n	8005138 <UART_SetConfig+0x170>
 800512e:	231b      	movs	r3, #27
 8005130:	18fb      	adds	r3, r7, r3
 8005132:	2200      	movs	r2, #0
 8005134:	701a      	strb	r2, [r3, #0]
 8005136:	e003      	b.n	8005140 <UART_SetConfig+0x178>
 8005138:	231b      	movs	r3, #27
 800513a:	18fb      	adds	r3, r7, r3
 800513c:	2210      	movs	r2, #16
 800513e:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	69da      	ldr	r2, [r3, #28]
 8005144:	2380      	movs	r3, #128	; 0x80
 8005146:	021b      	lsls	r3, r3, #8
 8005148:	429a      	cmp	r2, r3
 800514a:	d000      	beq.n	800514e <UART_SetConfig+0x186>
 800514c:	e066      	b.n	800521c <UART_SetConfig+0x254>
  {
    switch (clocksource)
 800514e:	231b      	movs	r3, #27
 8005150:	18fb      	adds	r3, r7, r3
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	2b08      	cmp	r3, #8
 8005156:	d015      	beq.n	8005184 <UART_SetConfig+0x1bc>
 8005158:	dc18      	bgt.n	800518c <UART_SetConfig+0x1c4>
 800515a:	2b04      	cmp	r3, #4
 800515c:	d00d      	beq.n	800517a <UART_SetConfig+0x1b2>
 800515e:	dc15      	bgt.n	800518c <UART_SetConfig+0x1c4>
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <UART_SetConfig+0x1a2>
 8005164:	2b02      	cmp	r3, #2
 8005166:	d005      	beq.n	8005174 <UART_SetConfig+0x1ac>
 8005168:	e010      	b.n	800518c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800516a:	f7ff fd8d 	bl	8004c88 <HAL_RCC_GetPCLK1Freq>
 800516e:	0003      	movs	r3, r0
 8005170:	617b      	str	r3, [r7, #20]
        break;
 8005172:	e012      	b.n	800519a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005174:	4b65      	ldr	r3, [pc, #404]	; (800530c <UART_SetConfig+0x344>)
 8005176:	617b      	str	r3, [r7, #20]
        break;
 8005178:	e00f      	b.n	800519a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800517a:	f7ff fcf9 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 800517e:	0003      	movs	r3, r0
 8005180:	617b      	str	r3, [r7, #20]
        break;
 8005182:	e00a      	b.n	800519a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005184:	2380      	movs	r3, #128	; 0x80
 8005186:	021b      	lsls	r3, r3, #8
 8005188:	617b      	str	r3, [r7, #20]
        break;
 800518a:	e006      	b.n	800519a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005190:	231a      	movs	r3, #26
 8005192:	18fb      	adds	r3, r7, r3
 8005194:	2201      	movs	r2, #1
 8005196:	701a      	strb	r2, [r3, #0]
        break;
 8005198:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d100      	bne.n	80051a2 <UART_SetConfig+0x1da>
 80051a0:	e08e      	b.n	80052c0 <UART_SetConfig+0x2f8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051a6:	4b5a      	ldr	r3, [pc, #360]	; (8005310 <UART_SetConfig+0x348>)
 80051a8:	0052      	lsls	r2, r2, #1
 80051aa:	5ad3      	ldrh	r3, [r2, r3]
 80051ac:	0019      	movs	r1, r3
 80051ae:	6978      	ldr	r0, [r7, #20]
 80051b0:	f7fa ffc2 	bl	8000138 <__udivsi3>
 80051b4:	0003      	movs	r3, r0
 80051b6:	005a      	lsls	r2, r3, #1
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	085b      	lsrs	r3, r3, #1
 80051be:	18d2      	adds	r2, r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	0019      	movs	r1, r3
 80051c6:	0010      	movs	r0, r2
 80051c8:	f7fa ffb6 	bl	8000138 <__udivsi3>
 80051cc:	0003      	movs	r3, r0
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	2b0f      	cmp	r3, #15
 80051d6:	d91c      	bls.n	8005212 <UART_SetConfig+0x24a>
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	2380      	movs	r3, #128	; 0x80
 80051dc:	025b      	lsls	r3, r3, #9
 80051de:	429a      	cmp	r2, r3
 80051e0:	d217      	bcs.n	8005212 <UART_SetConfig+0x24a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	200e      	movs	r0, #14
 80051e8:	183b      	adds	r3, r7, r0
 80051ea:	210f      	movs	r1, #15
 80051ec:	438a      	bics	r2, r1
 80051ee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	085b      	lsrs	r3, r3, #1
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2207      	movs	r2, #7
 80051f8:	4013      	ands	r3, r2
 80051fa:	b299      	uxth	r1, r3
 80051fc:	183b      	adds	r3, r7, r0
 80051fe:	183a      	adds	r2, r7, r0
 8005200:	8812      	ldrh	r2, [r2, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	183a      	adds	r2, r7, r0
 800520c:	8812      	ldrh	r2, [r2, #0]
 800520e:	60da      	str	r2, [r3, #12]
 8005210:	e056      	b.n	80052c0 <UART_SetConfig+0x2f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005212:	231a      	movs	r3, #26
 8005214:	18fb      	adds	r3, r7, r3
 8005216:	2201      	movs	r2, #1
 8005218:	701a      	strb	r2, [r3, #0]
 800521a:	e051      	b.n	80052c0 <UART_SetConfig+0x2f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800521c:	231b      	movs	r3, #27
 800521e:	18fb      	adds	r3, r7, r3
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	2b08      	cmp	r3, #8
 8005224:	d015      	beq.n	8005252 <UART_SetConfig+0x28a>
 8005226:	dc18      	bgt.n	800525a <UART_SetConfig+0x292>
 8005228:	2b04      	cmp	r3, #4
 800522a:	d00d      	beq.n	8005248 <UART_SetConfig+0x280>
 800522c:	dc15      	bgt.n	800525a <UART_SetConfig+0x292>
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <UART_SetConfig+0x270>
 8005232:	2b02      	cmp	r3, #2
 8005234:	d005      	beq.n	8005242 <UART_SetConfig+0x27a>
 8005236:	e010      	b.n	800525a <UART_SetConfig+0x292>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005238:	f7ff fd26 	bl	8004c88 <HAL_RCC_GetPCLK1Freq>
 800523c:	0003      	movs	r3, r0
 800523e:	617b      	str	r3, [r7, #20]
        break;
 8005240:	e012      	b.n	8005268 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005242:	4b32      	ldr	r3, [pc, #200]	; (800530c <UART_SetConfig+0x344>)
 8005244:	617b      	str	r3, [r7, #20]
        break;
 8005246:	e00f      	b.n	8005268 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005248:	f7ff fc92 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 800524c:	0003      	movs	r3, r0
 800524e:	617b      	str	r3, [r7, #20]
        break;
 8005250:	e00a      	b.n	8005268 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005252:	2380      	movs	r3, #128	; 0x80
 8005254:	021b      	lsls	r3, r3, #8
 8005256:	617b      	str	r3, [r7, #20]
        break;
 8005258:	e006      	b.n	8005268 <UART_SetConfig+0x2a0>
      default:
        pclk = 0U;
 800525a:	2300      	movs	r3, #0
 800525c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800525e:	231a      	movs	r3, #26
 8005260:	18fb      	adds	r3, r7, r3
 8005262:	2201      	movs	r2, #1
 8005264:	701a      	strb	r2, [r3, #0]
        break;
 8005266:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d028      	beq.n	80052c0 <UART_SetConfig+0x2f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005272:	4b27      	ldr	r3, [pc, #156]	; (8005310 <UART_SetConfig+0x348>)
 8005274:	0052      	lsls	r2, r2, #1
 8005276:	5ad3      	ldrh	r3, [r2, r3]
 8005278:	0019      	movs	r1, r3
 800527a:	6978      	ldr	r0, [r7, #20]
 800527c:	f7fa ff5c 	bl	8000138 <__udivsi3>
 8005280:	0003      	movs	r3, r0
 8005282:	001a      	movs	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	085b      	lsrs	r3, r3, #1
 800528a:	18d2      	adds	r2, r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	0019      	movs	r1, r3
 8005292:	0010      	movs	r0, r2
 8005294:	f7fa ff50 	bl	8000138 <__udivsi3>
 8005298:	0003      	movs	r3, r0
 800529a:	b29b      	uxth	r3, r3
 800529c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b0f      	cmp	r3, #15
 80052a2:	d909      	bls.n	80052b8 <UART_SetConfig+0x2f0>
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	2380      	movs	r3, #128	; 0x80
 80052a8:	025b      	lsls	r3, r3, #9
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d204      	bcs.n	80052b8 <UART_SetConfig+0x2f0>
      {
        huart->Instance->BRR = usartdiv;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	60da      	str	r2, [r3, #12]
 80052b6:	e003      	b.n	80052c0 <UART_SetConfig+0x2f8>
      }
      else
      {
        ret = HAL_ERROR;
 80052b8:	231a      	movs	r3, #26
 80052ba:	18fb      	adds	r3, r7, r3
 80052bc:	2201      	movs	r2, #1
 80052be:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	226a      	movs	r2, #106	; 0x6a
 80052c4:	2101      	movs	r1, #1
 80052c6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2268      	movs	r2, #104	; 0x68
 80052cc:	2101      	movs	r1, #1
 80052ce:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80052dc:	231a      	movs	r3, #26
 80052de:	18fb      	adds	r3, r7, r3
 80052e0:	781b      	ldrb	r3, [r3, #0]
}
 80052e2:	0018      	movs	r0, r3
 80052e4:	46bd      	mov	sp, r7
 80052e6:	b008      	add	sp, #32
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	46c0      	nop			; (mov r8, r8)
 80052ec:	cfff69f3 	.word	0xcfff69f3
 80052f0:	ffffcfff 	.word	0xffffcfff
 80052f4:	11fff4ff 	.word	0x11fff4ff
 80052f8:	40013800 	.word	0x40013800
 80052fc:	40021000 	.word	0x40021000
 8005300:	40004400 	.word	0x40004400
 8005304:	40004800 	.word	0x40004800
 8005308:	40004c00 	.word	0x40004c00
 800530c:	00f42400 	.word	0x00f42400
 8005310:	08008600 	.word	0x08008600

08005314 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005320:	2201      	movs	r2, #1
 8005322:	4013      	ands	r3, r2
 8005324:	d00b      	beq.n	800533e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	4a4a      	ldr	r2, [pc, #296]	; (8005458 <UART_AdvFeatureConfig+0x144>)
 800532e:	4013      	ands	r3, r2
 8005330:	0019      	movs	r1, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005342:	2202      	movs	r2, #2
 8005344:	4013      	ands	r3, r2
 8005346:	d00b      	beq.n	8005360 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	4a43      	ldr	r2, [pc, #268]	; (800545c <UART_AdvFeatureConfig+0x148>)
 8005350:	4013      	ands	r3, r2
 8005352:	0019      	movs	r1, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005364:	2204      	movs	r2, #4
 8005366:	4013      	ands	r3, r2
 8005368:	d00b      	beq.n	8005382 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	4a3b      	ldr	r2, [pc, #236]	; (8005460 <UART_AdvFeatureConfig+0x14c>)
 8005372:	4013      	ands	r3, r2
 8005374:	0019      	movs	r1, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005386:	2208      	movs	r2, #8
 8005388:	4013      	ands	r3, r2
 800538a:	d00b      	beq.n	80053a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	4a34      	ldr	r2, [pc, #208]	; (8005464 <UART_AdvFeatureConfig+0x150>)
 8005394:	4013      	ands	r3, r2
 8005396:	0019      	movs	r1, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a8:	2210      	movs	r2, #16
 80053aa:	4013      	ands	r3, r2
 80053ac:	d00b      	beq.n	80053c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	4a2c      	ldr	r2, [pc, #176]	; (8005468 <UART_AdvFeatureConfig+0x154>)
 80053b6:	4013      	ands	r3, r2
 80053b8:	0019      	movs	r1, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ca:	2220      	movs	r2, #32
 80053cc:	4013      	ands	r3, r2
 80053ce:	d00b      	beq.n	80053e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	4a25      	ldr	r2, [pc, #148]	; (800546c <UART_AdvFeatureConfig+0x158>)
 80053d8:	4013      	ands	r3, r2
 80053da:	0019      	movs	r1, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ec:	2240      	movs	r2, #64	; 0x40
 80053ee:	4013      	ands	r3, r2
 80053f0:	d01d      	beq.n	800542e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	4a1d      	ldr	r2, [pc, #116]	; (8005470 <UART_AdvFeatureConfig+0x15c>)
 80053fa:	4013      	ands	r3, r2
 80053fc:	0019      	movs	r1, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	430a      	orrs	r2, r1
 8005408:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800540e:	2380      	movs	r3, #128	; 0x80
 8005410:	035b      	lsls	r3, r3, #13
 8005412:	429a      	cmp	r2, r3
 8005414:	d10b      	bne.n	800542e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	4a15      	ldr	r2, [pc, #84]	; (8005474 <UART_AdvFeatureConfig+0x160>)
 800541e:	4013      	ands	r3, r2
 8005420:	0019      	movs	r1, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005432:	2280      	movs	r2, #128	; 0x80
 8005434:	4013      	ands	r3, r2
 8005436:	d00b      	beq.n	8005450 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	4a0e      	ldr	r2, [pc, #56]	; (8005478 <UART_AdvFeatureConfig+0x164>)
 8005440:	4013      	ands	r3, r2
 8005442:	0019      	movs	r1, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	605a      	str	r2, [r3, #4]
  }
}
 8005450:	46c0      	nop			; (mov r8, r8)
 8005452:	46bd      	mov	sp, r7
 8005454:	b002      	add	sp, #8
 8005456:	bd80      	pop	{r7, pc}
 8005458:	fffdffff 	.word	0xfffdffff
 800545c:	fffeffff 	.word	0xfffeffff
 8005460:	fffbffff 	.word	0xfffbffff
 8005464:	ffff7fff 	.word	0xffff7fff
 8005468:	ffffefff 	.word	0xffffefff
 800546c:	ffffdfff 	.word	0xffffdfff
 8005470:	ffefffff 	.word	0xffefffff
 8005474:	ff9fffff 	.word	0xff9fffff
 8005478:	fff7ffff 	.word	0xfff7ffff

0800547c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af02      	add	r7, sp, #8
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	228c      	movs	r2, #140	; 0x8c
 8005488:	2100      	movs	r1, #0
 800548a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800548c:	f7fd ff98 	bl	80033c0 <HAL_GetTick>
 8005490:	0003      	movs	r3, r0
 8005492:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2208      	movs	r2, #8
 800549c:	4013      	ands	r3, r2
 800549e:	2b08      	cmp	r3, #8
 80054a0:	d10c      	bne.n	80054bc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2280      	movs	r2, #128	; 0x80
 80054a6:	0391      	lsls	r1, r2, #14
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	4a18      	ldr	r2, [pc, #96]	; (800550c <UART_CheckIdleState+0x90>)
 80054ac:	9200      	str	r2, [sp, #0]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f000 f82e 	bl	8005510 <UART_WaitOnFlagUntilTimeout>
 80054b4:	1e03      	subs	r3, r0, #0
 80054b6:	d001      	beq.n	80054bc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e023      	b.n	8005504 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2204      	movs	r2, #4
 80054c4:	4013      	ands	r3, r2
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	d10c      	bne.n	80054e4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2280      	movs	r2, #128	; 0x80
 80054ce:	03d1      	lsls	r1, r2, #15
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	4a0e      	ldr	r2, [pc, #56]	; (800550c <UART_CheckIdleState+0x90>)
 80054d4:	9200      	str	r2, [sp, #0]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f000 f81a 	bl	8005510 <UART_WaitOnFlagUntilTimeout>
 80054dc:	1e03      	subs	r3, r0, #0
 80054de:	d001      	beq.n	80054e4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e00f      	b.n	8005504 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2284      	movs	r2, #132	; 0x84
 80054e8:	2120      	movs	r1, #32
 80054ea:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2288      	movs	r2, #136	; 0x88
 80054f0:	2120      	movs	r1, #32
 80054f2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2280      	movs	r2, #128	; 0x80
 80054fe:	2100      	movs	r1, #0
 8005500:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	0018      	movs	r0, r3
 8005506:	46bd      	mov	sp, r7
 8005508:	b004      	add	sp, #16
 800550a:	bd80      	pop	{r7, pc}
 800550c:	01ffffff 	.word	0x01ffffff

08005510 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b094      	sub	sp, #80	; 0x50
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	603b      	str	r3, [r7, #0]
 800551c:	1dfb      	adds	r3, r7, #7
 800551e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005520:	e0a7      	b.n	8005672 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005522:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005524:	3301      	adds	r3, #1
 8005526:	d100      	bne.n	800552a <UART_WaitOnFlagUntilTimeout+0x1a>
 8005528:	e0a3      	b.n	8005672 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800552a:	f7fd ff49 	bl	80033c0 <HAL_GetTick>
 800552e:	0002      	movs	r2, r0
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005536:	429a      	cmp	r2, r3
 8005538:	d302      	bcc.n	8005540 <UART_WaitOnFlagUntilTimeout+0x30>
 800553a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800553c:	2b00      	cmp	r3, #0
 800553e:	d13f      	bne.n	80055c0 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005540:	f3ef 8310 	mrs	r3, PRIMASK
 8005544:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005546:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005548:	647b      	str	r3, [r7, #68]	; 0x44
 800554a:	2301      	movs	r3, #1
 800554c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800554e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005550:	f383 8810 	msr	PRIMASK, r3
}
 8005554:	46c0      	nop			; (mov r8, r8)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	494e      	ldr	r1, [pc, #312]	; (800569c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005562:	400a      	ands	r2, r1
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005568:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	f383 8810 	msr	PRIMASK, r3
}
 8005570:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005572:	f3ef 8310 	mrs	r3, PRIMASK
 8005576:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800557a:	643b      	str	r3, [r7, #64]	; 0x40
 800557c:	2301      	movs	r3, #1
 800557e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005582:	f383 8810 	msr	PRIMASK, r3
}
 8005586:	46c0      	nop			; (mov r8, r8)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689a      	ldr	r2, [r3, #8]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2101      	movs	r1, #1
 8005594:	438a      	bics	r2, r1
 8005596:	609a      	str	r2, [r3, #8]
 8005598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800559a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800559c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800559e:	f383 8810 	msr	PRIMASK, r3
}
 80055a2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2284      	movs	r2, #132	; 0x84
 80055a8:	2120      	movs	r1, #32
 80055aa:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2288      	movs	r2, #136	; 0x88
 80055b0:	2120      	movs	r1, #32
 80055b2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2280      	movs	r2, #128	; 0x80
 80055b8:	2100      	movs	r1, #0
 80055ba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e069      	b.n	8005694 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2204      	movs	r2, #4
 80055c8:	4013      	ands	r3, r2
 80055ca:	d052      	beq.n	8005672 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	69da      	ldr	r2, [r3, #28]
 80055d2:	2380      	movs	r3, #128	; 0x80
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	401a      	ands	r2, r3
 80055d8:	2380      	movs	r3, #128	; 0x80
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	429a      	cmp	r2, r3
 80055de:	d148      	bne.n	8005672 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2280      	movs	r2, #128	; 0x80
 80055e6:	0112      	lsls	r2, r2, #4
 80055e8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ea:	f3ef 8310 	mrs	r3, PRIMASK
 80055ee:	613b      	str	r3, [r7, #16]
  return(result);
 80055f0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80055f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055f4:	2301      	movs	r3, #1
 80055f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f383 8810 	msr	PRIMASK, r3
}
 80055fe:	46c0      	nop			; (mov r8, r8)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4924      	ldr	r1, [pc, #144]	; (800569c <UART_WaitOnFlagUntilTimeout+0x18c>)
 800560c:	400a      	ands	r2, r1
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005612:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	f383 8810 	msr	PRIMASK, r3
}
 800561a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800561c:	f3ef 8310 	mrs	r3, PRIMASK
 8005620:	61fb      	str	r3, [r7, #28]
  return(result);
 8005622:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005624:	64bb      	str	r3, [r7, #72]	; 0x48
 8005626:	2301      	movs	r3, #1
 8005628:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	f383 8810 	msr	PRIMASK, r3
}
 8005630:	46c0      	nop			; (mov r8, r8)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2101      	movs	r1, #1
 800563e:	438a      	bics	r2, r1
 8005640:	609a      	str	r2, [r3, #8]
 8005642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005644:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	f383 8810 	msr	PRIMASK, r3
}
 800564c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2284      	movs	r2, #132	; 0x84
 8005652:	2120      	movs	r1, #32
 8005654:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2288      	movs	r2, #136	; 0x88
 800565a:	2120      	movs	r1, #32
 800565c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	228c      	movs	r2, #140	; 0x8c
 8005662:	2120      	movs	r1, #32
 8005664:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2280      	movs	r2, #128	; 0x80
 800566a:	2100      	movs	r1, #0
 800566c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e010      	b.n	8005694 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	4013      	ands	r3, r2
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	425a      	negs	r2, r3
 8005682:	4153      	adcs	r3, r2
 8005684:	b2db      	uxtb	r3, r3
 8005686:	001a      	movs	r2, r3
 8005688:	1dfb      	adds	r3, r7, #7
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	429a      	cmp	r2, r3
 800568e:	d100      	bne.n	8005692 <UART_WaitOnFlagUntilTimeout+0x182>
 8005690:	e747      	b.n	8005522 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	0018      	movs	r0, r3
 8005696:	46bd      	mov	sp, r7
 8005698:	b014      	add	sp, #80	; 0x50
 800569a:	bd80      	pop	{r7, pc}
 800569c:	fffffe5f 	.word	0xfffffe5f

080056a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2280      	movs	r2, #128	; 0x80
 80056ac:	5c9b      	ldrb	r3, [r3, r2]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d101      	bne.n	80056b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80056b2:	2302      	movs	r3, #2
 80056b4:	e027      	b.n	8005706 <HAL_UARTEx_DisableFifoMode+0x66>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2280      	movs	r2, #128	; 0x80
 80056ba:	2101      	movs	r1, #1
 80056bc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2284      	movs	r2, #132	; 0x84
 80056c2:	2124      	movs	r1, #36	; 0x24
 80056c4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2101      	movs	r1, #1
 80056da:	438a      	bics	r2, r1
 80056dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	4a0b      	ldr	r2, [pc, #44]	; (8005710 <HAL_UARTEx_DisableFifoMode+0x70>)
 80056e2:	4013      	ands	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2284      	movs	r2, #132	; 0x84
 80056f8:	2120      	movs	r1, #32
 80056fa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2280      	movs	r2, #128	; 0x80
 8005700:	2100      	movs	r1, #0
 8005702:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	0018      	movs	r0, r3
 8005708:	46bd      	mov	sp, r7
 800570a:	b004      	add	sp, #16
 800570c:	bd80      	pop	{r7, pc}
 800570e:	46c0      	nop			; (mov r8, r8)
 8005710:	dfffffff 	.word	0xdfffffff

08005714 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2280      	movs	r2, #128	; 0x80
 8005722:	5c9b      	ldrb	r3, [r3, r2]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d101      	bne.n	800572c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005728:	2302      	movs	r3, #2
 800572a:	e02e      	b.n	800578a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2280      	movs	r2, #128	; 0x80
 8005730:	2101      	movs	r1, #1
 8005732:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2284      	movs	r2, #132	; 0x84
 8005738:	2124      	movs	r1, #36	; 0x24
 800573a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2101      	movs	r1, #1
 8005750:	438a      	bics	r2, r1
 8005752:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	08d9      	lsrs	r1, r3, #3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	0018      	movs	r0, r3
 800576c:	f000 f854 	bl	8005818 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2284      	movs	r2, #132	; 0x84
 800577c:	2120      	movs	r1, #32
 800577e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2280      	movs	r2, #128	; 0x80
 8005784:	2100      	movs	r1, #0
 8005786:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	0018      	movs	r0, r3
 800578c:	46bd      	mov	sp, r7
 800578e:	b004      	add	sp, #16
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2280      	movs	r2, #128	; 0x80
 80057a2:	5c9b      	ldrb	r3, [r3, r2]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d101      	bne.n	80057ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80057a8:	2302      	movs	r3, #2
 80057aa:	e02f      	b.n	800580c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2280      	movs	r2, #128	; 0x80
 80057b0:	2101      	movs	r1, #1
 80057b2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2284      	movs	r2, #132	; 0x84
 80057b8:	2124      	movs	r1, #36	; 0x24
 80057ba:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2101      	movs	r1, #1
 80057d0:	438a      	bics	r2, r1
 80057d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	4a0e      	ldr	r2, [pc, #56]	; (8005814 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80057dc:	4013      	ands	r3, r2
 80057de:	0019      	movs	r1, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	0018      	movs	r0, r3
 80057ee:	f000 f813 	bl	8005818 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2284      	movs	r2, #132	; 0x84
 80057fe:	2120      	movs	r1, #32
 8005800:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2280      	movs	r2, #128	; 0x80
 8005806:	2100      	movs	r1, #0
 8005808:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	0018      	movs	r0, r3
 800580e:	46bd      	mov	sp, r7
 8005810:	b004      	add	sp, #16
 8005812:	bd80      	pop	{r7, pc}
 8005814:	f1ffffff 	.word	0xf1ffffff

08005818 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005824:	2b00      	cmp	r3, #0
 8005826:	d108      	bne.n	800583a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	226a      	movs	r2, #106	; 0x6a
 800582c:	2101      	movs	r1, #1
 800582e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2268      	movs	r2, #104	; 0x68
 8005834:	2101      	movs	r1, #1
 8005836:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005838:	e043      	b.n	80058c2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800583a:	260f      	movs	r6, #15
 800583c:	19bb      	adds	r3, r7, r6
 800583e:	2208      	movs	r2, #8
 8005840:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005842:	200e      	movs	r0, #14
 8005844:	183b      	adds	r3, r7, r0
 8005846:	2208      	movs	r2, #8
 8005848:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	0e5b      	lsrs	r3, r3, #25
 8005852:	b2da      	uxtb	r2, r3
 8005854:	240d      	movs	r4, #13
 8005856:	193b      	adds	r3, r7, r4
 8005858:	2107      	movs	r1, #7
 800585a:	400a      	ands	r2, r1
 800585c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	0f5b      	lsrs	r3, r3, #29
 8005866:	b2da      	uxtb	r2, r3
 8005868:	250c      	movs	r5, #12
 800586a:	197b      	adds	r3, r7, r5
 800586c:	2107      	movs	r1, #7
 800586e:	400a      	ands	r2, r1
 8005870:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005872:	183b      	adds	r3, r7, r0
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	197a      	adds	r2, r7, r5
 8005878:	7812      	ldrb	r2, [r2, #0]
 800587a:	4914      	ldr	r1, [pc, #80]	; (80058cc <UARTEx_SetNbDataToProcess+0xb4>)
 800587c:	5c8a      	ldrb	r2, [r1, r2]
 800587e:	435a      	muls	r2, r3
 8005880:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005882:	197b      	adds	r3, r7, r5
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	4a12      	ldr	r2, [pc, #72]	; (80058d0 <UARTEx_SetNbDataToProcess+0xb8>)
 8005888:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800588a:	0019      	movs	r1, r3
 800588c:	f7fa fcde 	bl	800024c <__divsi3>
 8005890:	0003      	movs	r3, r0
 8005892:	b299      	uxth	r1, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	226a      	movs	r2, #106	; 0x6a
 8005898:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800589a:	19bb      	adds	r3, r7, r6
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	193a      	adds	r2, r7, r4
 80058a0:	7812      	ldrb	r2, [r2, #0]
 80058a2:	490a      	ldr	r1, [pc, #40]	; (80058cc <UARTEx_SetNbDataToProcess+0xb4>)
 80058a4:	5c8a      	ldrb	r2, [r1, r2]
 80058a6:	435a      	muls	r2, r3
 80058a8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80058aa:	193b      	adds	r3, r7, r4
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	4a08      	ldr	r2, [pc, #32]	; (80058d0 <UARTEx_SetNbDataToProcess+0xb8>)
 80058b0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058b2:	0019      	movs	r1, r3
 80058b4:	f7fa fcca 	bl	800024c <__divsi3>
 80058b8:	0003      	movs	r3, r0
 80058ba:	b299      	uxth	r1, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2268      	movs	r2, #104	; 0x68
 80058c0:	5299      	strh	r1, [r3, r2]
}
 80058c2:	46c0      	nop			; (mov r8, r8)
 80058c4:	46bd      	mov	sp, r7
 80058c6:	b005      	add	sp, #20
 80058c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058ca:	46c0      	nop			; (mov r8, r8)
 80058cc:	08008618 	.word	0x08008618
 80058d0:	08008620 	.word	0x08008620

080058d4 <__errno>:
 80058d4:	4b01      	ldr	r3, [pc, #4]	; (80058dc <__errno+0x8>)
 80058d6:	6818      	ldr	r0, [r3, #0]
 80058d8:	4770      	bx	lr
 80058da:	46c0      	nop			; (mov r8, r8)
 80058dc:	2000000c 	.word	0x2000000c

080058e0 <__libc_init_array>:
 80058e0:	b570      	push	{r4, r5, r6, lr}
 80058e2:	2600      	movs	r6, #0
 80058e4:	4d0c      	ldr	r5, [pc, #48]	; (8005918 <__libc_init_array+0x38>)
 80058e6:	4c0d      	ldr	r4, [pc, #52]	; (800591c <__libc_init_array+0x3c>)
 80058e8:	1b64      	subs	r4, r4, r5
 80058ea:	10a4      	asrs	r4, r4, #2
 80058ec:	42a6      	cmp	r6, r4
 80058ee:	d109      	bne.n	8005904 <__libc_init_array+0x24>
 80058f0:	2600      	movs	r6, #0
 80058f2:	f002 fda9 	bl	8008448 <_init>
 80058f6:	4d0a      	ldr	r5, [pc, #40]	; (8005920 <__libc_init_array+0x40>)
 80058f8:	4c0a      	ldr	r4, [pc, #40]	; (8005924 <__libc_init_array+0x44>)
 80058fa:	1b64      	subs	r4, r4, r5
 80058fc:	10a4      	asrs	r4, r4, #2
 80058fe:	42a6      	cmp	r6, r4
 8005900:	d105      	bne.n	800590e <__libc_init_array+0x2e>
 8005902:	bd70      	pop	{r4, r5, r6, pc}
 8005904:	00b3      	lsls	r3, r6, #2
 8005906:	58eb      	ldr	r3, [r5, r3]
 8005908:	4798      	blx	r3
 800590a:	3601      	adds	r6, #1
 800590c:	e7ee      	b.n	80058ec <__libc_init_array+0xc>
 800590e:	00b3      	lsls	r3, r6, #2
 8005910:	58eb      	ldr	r3, [r5, r3]
 8005912:	4798      	blx	r3
 8005914:	3601      	adds	r6, #1
 8005916:	e7f2      	b.n	80058fe <__libc_init_array+0x1e>
 8005918:	08008a0c 	.word	0x08008a0c
 800591c:	08008a0c 	.word	0x08008a0c
 8005920:	08008a0c 	.word	0x08008a0c
 8005924:	08008a10 	.word	0x08008a10

08005928 <memset>:
 8005928:	0003      	movs	r3, r0
 800592a:	1882      	adds	r2, r0, r2
 800592c:	4293      	cmp	r3, r2
 800592e:	d100      	bne.n	8005932 <memset+0xa>
 8005930:	4770      	bx	lr
 8005932:	7019      	strb	r1, [r3, #0]
 8005934:	3301      	adds	r3, #1
 8005936:	e7f9      	b.n	800592c <memset+0x4>

08005938 <__cvt>:
 8005938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800593a:	001e      	movs	r6, r3
 800593c:	2300      	movs	r3, #0
 800593e:	0014      	movs	r4, r2
 8005940:	b08b      	sub	sp, #44	; 0x2c
 8005942:	429e      	cmp	r6, r3
 8005944:	da04      	bge.n	8005950 <__cvt+0x18>
 8005946:	2180      	movs	r1, #128	; 0x80
 8005948:	0609      	lsls	r1, r1, #24
 800594a:	1873      	adds	r3, r6, r1
 800594c:	001e      	movs	r6, r3
 800594e:	232d      	movs	r3, #45	; 0x2d
 8005950:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005952:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005954:	7013      	strb	r3, [r2, #0]
 8005956:	2320      	movs	r3, #32
 8005958:	2203      	movs	r2, #3
 800595a:	439f      	bics	r7, r3
 800595c:	2f46      	cmp	r7, #70	; 0x46
 800595e:	d007      	beq.n	8005970 <__cvt+0x38>
 8005960:	003b      	movs	r3, r7
 8005962:	3b45      	subs	r3, #69	; 0x45
 8005964:	4259      	negs	r1, r3
 8005966:	414b      	adcs	r3, r1
 8005968:	9910      	ldr	r1, [sp, #64]	; 0x40
 800596a:	3a01      	subs	r2, #1
 800596c:	18cb      	adds	r3, r1, r3
 800596e:	9310      	str	r3, [sp, #64]	; 0x40
 8005970:	ab09      	add	r3, sp, #36	; 0x24
 8005972:	9304      	str	r3, [sp, #16]
 8005974:	ab08      	add	r3, sp, #32
 8005976:	9303      	str	r3, [sp, #12]
 8005978:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800597a:	9200      	str	r2, [sp, #0]
 800597c:	9302      	str	r3, [sp, #8]
 800597e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005980:	0022      	movs	r2, r4
 8005982:	9301      	str	r3, [sp, #4]
 8005984:	0033      	movs	r3, r6
 8005986:	f000 fcdd 	bl	8006344 <_dtoa_r>
 800598a:	0005      	movs	r5, r0
 800598c:	2f47      	cmp	r7, #71	; 0x47
 800598e:	d102      	bne.n	8005996 <__cvt+0x5e>
 8005990:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005992:	07db      	lsls	r3, r3, #31
 8005994:	d528      	bpl.n	80059e8 <__cvt+0xb0>
 8005996:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005998:	18eb      	adds	r3, r5, r3
 800599a:	9307      	str	r3, [sp, #28]
 800599c:	2f46      	cmp	r7, #70	; 0x46
 800599e:	d114      	bne.n	80059ca <__cvt+0x92>
 80059a0:	782b      	ldrb	r3, [r5, #0]
 80059a2:	2b30      	cmp	r3, #48	; 0x30
 80059a4:	d10c      	bne.n	80059c0 <__cvt+0x88>
 80059a6:	2200      	movs	r2, #0
 80059a8:	2300      	movs	r3, #0
 80059aa:	0020      	movs	r0, r4
 80059ac:	0031      	movs	r1, r6
 80059ae:	f7fa fd49 	bl	8000444 <__aeabi_dcmpeq>
 80059b2:	2800      	cmp	r0, #0
 80059b4:	d104      	bne.n	80059c0 <__cvt+0x88>
 80059b6:	2301      	movs	r3, #1
 80059b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80059ba:	1a9b      	subs	r3, r3, r2
 80059bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80059be:	6013      	str	r3, [r2, #0]
 80059c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80059c2:	9a07      	ldr	r2, [sp, #28]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	18d3      	adds	r3, r2, r3
 80059c8:	9307      	str	r3, [sp, #28]
 80059ca:	2200      	movs	r2, #0
 80059cc:	2300      	movs	r3, #0
 80059ce:	0020      	movs	r0, r4
 80059d0:	0031      	movs	r1, r6
 80059d2:	f7fa fd37 	bl	8000444 <__aeabi_dcmpeq>
 80059d6:	2800      	cmp	r0, #0
 80059d8:	d001      	beq.n	80059de <__cvt+0xa6>
 80059da:	9b07      	ldr	r3, [sp, #28]
 80059dc:	9309      	str	r3, [sp, #36]	; 0x24
 80059de:	2230      	movs	r2, #48	; 0x30
 80059e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059e2:	9907      	ldr	r1, [sp, #28]
 80059e4:	428b      	cmp	r3, r1
 80059e6:	d306      	bcc.n	80059f6 <__cvt+0xbe>
 80059e8:	0028      	movs	r0, r5
 80059ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80059ee:	1b5b      	subs	r3, r3, r5
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	b00b      	add	sp, #44	; 0x2c
 80059f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059f6:	1c59      	adds	r1, r3, #1
 80059f8:	9109      	str	r1, [sp, #36]	; 0x24
 80059fa:	701a      	strb	r2, [r3, #0]
 80059fc:	e7f0      	b.n	80059e0 <__cvt+0xa8>

080059fe <__exponent>:
 80059fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a00:	1c83      	adds	r3, r0, #2
 8005a02:	b087      	sub	sp, #28
 8005a04:	9303      	str	r3, [sp, #12]
 8005a06:	0005      	movs	r5, r0
 8005a08:	000c      	movs	r4, r1
 8005a0a:	232b      	movs	r3, #43	; 0x2b
 8005a0c:	7002      	strb	r2, [r0, #0]
 8005a0e:	2900      	cmp	r1, #0
 8005a10:	da01      	bge.n	8005a16 <__exponent+0x18>
 8005a12:	424c      	negs	r4, r1
 8005a14:	3302      	adds	r3, #2
 8005a16:	706b      	strb	r3, [r5, #1]
 8005a18:	2c09      	cmp	r4, #9
 8005a1a:	dd31      	ble.n	8005a80 <__exponent+0x82>
 8005a1c:	270a      	movs	r7, #10
 8005a1e:	ab04      	add	r3, sp, #16
 8005a20:	1dde      	adds	r6, r3, #7
 8005a22:	0020      	movs	r0, r4
 8005a24:	0039      	movs	r1, r7
 8005a26:	9601      	str	r6, [sp, #4]
 8005a28:	f7fa fcf6 	bl	8000418 <__aeabi_idivmod>
 8005a2c:	3e01      	subs	r6, #1
 8005a2e:	3130      	adds	r1, #48	; 0x30
 8005a30:	0020      	movs	r0, r4
 8005a32:	7031      	strb	r1, [r6, #0]
 8005a34:	0039      	movs	r1, r7
 8005a36:	9402      	str	r4, [sp, #8]
 8005a38:	f7fa fc08 	bl	800024c <__divsi3>
 8005a3c:	9b02      	ldr	r3, [sp, #8]
 8005a3e:	0004      	movs	r4, r0
 8005a40:	2b63      	cmp	r3, #99	; 0x63
 8005a42:	dcee      	bgt.n	8005a22 <__exponent+0x24>
 8005a44:	9b01      	ldr	r3, [sp, #4]
 8005a46:	3430      	adds	r4, #48	; 0x30
 8005a48:	1e9a      	subs	r2, r3, #2
 8005a4a:	0013      	movs	r3, r2
 8005a4c:	9903      	ldr	r1, [sp, #12]
 8005a4e:	7014      	strb	r4, [r2, #0]
 8005a50:	a804      	add	r0, sp, #16
 8005a52:	3007      	adds	r0, #7
 8005a54:	4298      	cmp	r0, r3
 8005a56:	d80e      	bhi.n	8005a76 <__exponent+0x78>
 8005a58:	ab04      	add	r3, sp, #16
 8005a5a:	3307      	adds	r3, #7
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d804      	bhi.n	8005a6c <__exponent+0x6e>
 8005a62:	ab04      	add	r3, sp, #16
 8005a64:	3009      	adds	r0, #9
 8005a66:	18c0      	adds	r0, r0, r3
 8005a68:	9b01      	ldr	r3, [sp, #4]
 8005a6a:	1ac0      	subs	r0, r0, r3
 8005a6c:	9b03      	ldr	r3, [sp, #12]
 8005a6e:	1818      	adds	r0, r3, r0
 8005a70:	1b40      	subs	r0, r0, r5
 8005a72:	b007      	add	sp, #28
 8005a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a76:	7818      	ldrb	r0, [r3, #0]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	7008      	strb	r0, [r1, #0]
 8005a7c:	3101      	adds	r1, #1
 8005a7e:	e7e7      	b.n	8005a50 <__exponent+0x52>
 8005a80:	2330      	movs	r3, #48	; 0x30
 8005a82:	18e4      	adds	r4, r4, r3
 8005a84:	70ab      	strb	r3, [r5, #2]
 8005a86:	1d28      	adds	r0, r5, #4
 8005a88:	70ec      	strb	r4, [r5, #3]
 8005a8a:	e7f1      	b.n	8005a70 <__exponent+0x72>

08005a8c <_printf_float>:
 8005a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a8e:	b095      	sub	sp, #84	; 0x54
 8005a90:	000c      	movs	r4, r1
 8005a92:	9208      	str	r2, [sp, #32]
 8005a94:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005a96:	9309      	str	r3, [sp, #36]	; 0x24
 8005a98:	0007      	movs	r7, r0
 8005a9a:	f001 fa71 	bl	8006f80 <_localeconv_r>
 8005a9e:	6803      	ldr	r3, [r0, #0]
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005aa4:	f7fa fb2c 	bl	8000100 <strlen>
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	9312      	str	r3, [sp, #72]	; 0x48
 8005aac:	7e23      	ldrb	r3, [r4, #24]
 8005aae:	2207      	movs	r2, #7
 8005ab0:	001e      	movs	r6, r3
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	900d      	str	r0, [sp, #52]	; 0x34
 8005ab6:	930c      	str	r3, [sp, #48]	; 0x30
 8005ab8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005aba:	682b      	ldr	r3, [r5, #0]
 8005abc:	05c9      	lsls	r1, r1, #23
 8005abe:	d547      	bpl.n	8005b50 <_printf_float+0xc4>
 8005ac0:	189b      	adds	r3, r3, r2
 8005ac2:	4393      	bics	r3, r2
 8005ac4:	001a      	movs	r2, r3
 8005ac6:	3208      	adds	r2, #8
 8005ac8:	602a      	str	r2, [r5, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	64a2      	str	r2, [r4, #72]	; 0x48
 8005ad0:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005ad6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005ad8:	930a      	str	r3, [sp, #40]	; 0x28
 8005ada:	006b      	lsls	r3, r5, #1
 8005adc:	085b      	lsrs	r3, r3, #1
 8005ade:	930e      	str	r3, [sp, #56]	; 0x38
 8005ae0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005ae2:	4ba8      	ldr	r3, [pc, #672]	; (8005d84 <_printf_float+0x2f8>)
 8005ae4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005ae6:	4252      	negs	r2, r2
 8005ae8:	f7fc fe70 	bl	80027cc <__aeabi_dcmpun>
 8005aec:	2800      	cmp	r0, #0
 8005aee:	d131      	bne.n	8005b54 <_printf_float+0xc8>
 8005af0:	2201      	movs	r2, #1
 8005af2:	4ba4      	ldr	r3, [pc, #656]	; (8005d84 <_printf_float+0x2f8>)
 8005af4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005af6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005af8:	4252      	negs	r2, r2
 8005afa:	f7fa fcb3 	bl	8000464 <__aeabi_dcmple>
 8005afe:	2800      	cmp	r0, #0
 8005b00:	d128      	bne.n	8005b54 <_printf_float+0xc8>
 8005b02:	2200      	movs	r2, #0
 8005b04:	2300      	movs	r3, #0
 8005b06:	0029      	movs	r1, r5
 8005b08:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005b0a:	f7fa fca1 	bl	8000450 <__aeabi_dcmplt>
 8005b0e:	2800      	cmp	r0, #0
 8005b10:	d003      	beq.n	8005b1a <_printf_float+0x8e>
 8005b12:	0023      	movs	r3, r4
 8005b14:	222d      	movs	r2, #45	; 0x2d
 8005b16:	3343      	adds	r3, #67	; 0x43
 8005b18:	701a      	strb	r2, [r3, #0]
 8005b1a:	4d9b      	ldr	r5, [pc, #620]	; (8005d88 <_printf_float+0x2fc>)
 8005b1c:	2e47      	cmp	r6, #71	; 0x47
 8005b1e:	d900      	bls.n	8005b22 <_printf_float+0x96>
 8005b20:	4d9a      	ldr	r5, [pc, #616]	; (8005d8c <_printf_float+0x300>)
 8005b22:	2303      	movs	r3, #3
 8005b24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b26:	6123      	str	r3, [r4, #16]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	439a      	bics	r2, r3
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	6022      	str	r2, [r4, #0]
 8005b30:	930a      	str	r3, [sp, #40]	; 0x28
 8005b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b34:	0021      	movs	r1, r4
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	0038      	movs	r0, r7
 8005b3a:	9b08      	ldr	r3, [sp, #32]
 8005b3c:	aa13      	add	r2, sp, #76	; 0x4c
 8005b3e:	f000 f9f3 	bl	8005f28 <_printf_common>
 8005b42:	1c43      	adds	r3, r0, #1
 8005b44:	d000      	beq.n	8005b48 <_printf_float+0xbc>
 8005b46:	e09e      	b.n	8005c86 <_printf_float+0x1fa>
 8005b48:	2001      	movs	r0, #1
 8005b4a:	4240      	negs	r0, r0
 8005b4c:	b015      	add	sp, #84	; 0x54
 8005b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b50:	3307      	adds	r3, #7
 8005b52:	e7b6      	b.n	8005ac2 <_printf_float+0x36>
 8005b54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b56:	002b      	movs	r3, r5
 8005b58:	0010      	movs	r0, r2
 8005b5a:	0029      	movs	r1, r5
 8005b5c:	f7fc fe36 	bl	80027cc <__aeabi_dcmpun>
 8005b60:	2800      	cmp	r0, #0
 8005b62:	d00a      	beq.n	8005b7a <_printf_float+0xee>
 8005b64:	2d00      	cmp	r5, #0
 8005b66:	da03      	bge.n	8005b70 <_printf_float+0xe4>
 8005b68:	0023      	movs	r3, r4
 8005b6a:	222d      	movs	r2, #45	; 0x2d
 8005b6c:	3343      	adds	r3, #67	; 0x43
 8005b6e:	701a      	strb	r2, [r3, #0]
 8005b70:	4d87      	ldr	r5, [pc, #540]	; (8005d90 <_printf_float+0x304>)
 8005b72:	2e47      	cmp	r6, #71	; 0x47
 8005b74:	d9d5      	bls.n	8005b22 <_printf_float+0x96>
 8005b76:	4d87      	ldr	r5, [pc, #540]	; (8005d94 <_printf_float+0x308>)
 8005b78:	e7d3      	b.n	8005b22 <_printf_float+0x96>
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	0031      	movs	r1, r6
 8005b7e:	6863      	ldr	r3, [r4, #4]
 8005b80:	4391      	bics	r1, r2
 8005b82:	910e      	str	r1, [sp, #56]	; 0x38
 8005b84:	1c5a      	adds	r2, r3, #1
 8005b86:	d147      	bne.n	8005c18 <_printf_float+0x18c>
 8005b88:	3307      	adds	r3, #7
 8005b8a:	6063      	str	r3, [r4, #4]
 8005b8c:	2380      	movs	r3, #128	; 0x80
 8005b8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	4313      	orrs	r3, r2
 8005b94:	2200      	movs	r2, #0
 8005b96:	9206      	str	r2, [sp, #24]
 8005b98:	aa12      	add	r2, sp, #72	; 0x48
 8005b9a:	9205      	str	r2, [sp, #20]
 8005b9c:	aa11      	add	r2, sp, #68	; 0x44
 8005b9e:	9203      	str	r2, [sp, #12]
 8005ba0:	2223      	movs	r2, #35	; 0x23
 8005ba2:	a908      	add	r1, sp, #32
 8005ba4:	6023      	str	r3, [r4, #0]
 8005ba6:	9301      	str	r3, [sp, #4]
 8005ba8:	6863      	ldr	r3, [r4, #4]
 8005baa:	1852      	adds	r2, r2, r1
 8005bac:	9202      	str	r2, [sp, #8]
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	0038      	movs	r0, r7
 8005bb2:	002b      	movs	r3, r5
 8005bb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bb6:	9604      	str	r6, [sp, #16]
 8005bb8:	f7ff febe 	bl	8005938 <__cvt>
 8005bbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bbe:	0005      	movs	r5, r0
 8005bc0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005bc2:	2b47      	cmp	r3, #71	; 0x47
 8005bc4:	d108      	bne.n	8005bd8 <_printf_float+0x14c>
 8005bc6:	1ccb      	adds	r3, r1, #3
 8005bc8:	db02      	blt.n	8005bd0 <_printf_float+0x144>
 8005bca:	6863      	ldr	r3, [r4, #4]
 8005bcc:	4299      	cmp	r1, r3
 8005bce:	dd46      	ble.n	8005c5e <_printf_float+0x1d2>
 8005bd0:	0033      	movs	r3, r6
 8005bd2:	3b02      	subs	r3, #2
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	001e      	movs	r6, r3
 8005bd8:	2e65      	cmp	r6, #101	; 0x65
 8005bda:	d824      	bhi.n	8005c26 <_printf_float+0x19a>
 8005bdc:	0020      	movs	r0, r4
 8005bde:	0032      	movs	r2, r6
 8005be0:	3901      	subs	r1, #1
 8005be2:	3050      	adds	r0, #80	; 0x50
 8005be4:	9111      	str	r1, [sp, #68]	; 0x44
 8005be6:	f7ff ff0a 	bl	80059fe <__exponent>
 8005bea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005bec:	900a      	str	r0, [sp, #40]	; 0x28
 8005bee:	1813      	adds	r3, r2, r0
 8005bf0:	6123      	str	r3, [r4, #16]
 8005bf2:	2a01      	cmp	r2, #1
 8005bf4:	dc02      	bgt.n	8005bfc <_printf_float+0x170>
 8005bf6:	6822      	ldr	r2, [r4, #0]
 8005bf8:	07d2      	lsls	r2, r2, #31
 8005bfa:	d501      	bpl.n	8005c00 <_printf_float+0x174>
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	6123      	str	r3, [r4, #16]
 8005c00:	2323      	movs	r3, #35	; 0x23
 8005c02:	aa08      	add	r2, sp, #32
 8005c04:	189b      	adds	r3, r3, r2
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d100      	bne.n	8005c0e <_printf_float+0x182>
 8005c0c:	e791      	b.n	8005b32 <_printf_float+0xa6>
 8005c0e:	0023      	movs	r3, r4
 8005c10:	222d      	movs	r2, #45	; 0x2d
 8005c12:	3343      	adds	r3, #67	; 0x43
 8005c14:	701a      	strb	r2, [r3, #0]
 8005c16:	e78c      	b.n	8005b32 <_printf_float+0xa6>
 8005c18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c1a:	2a47      	cmp	r2, #71	; 0x47
 8005c1c:	d1b6      	bne.n	8005b8c <_printf_float+0x100>
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1b4      	bne.n	8005b8c <_printf_float+0x100>
 8005c22:	3301      	adds	r3, #1
 8005c24:	e7b1      	b.n	8005b8a <_printf_float+0xfe>
 8005c26:	2e66      	cmp	r6, #102	; 0x66
 8005c28:	d11b      	bne.n	8005c62 <_printf_float+0x1d6>
 8005c2a:	6863      	ldr	r3, [r4, #4]
 8005c2c:	2900      	cmp	r1, #0
 8005c2e:	dd0d      	ble.n	8005c4c <_printf_float+0x1c0>
 8005c30:	6121      	str	r1, [r4, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d102      	bne.n	8005c3c <_printf_float+0x1b0>
 8005c36:	6822      	ldr	r2, [r4, #0]
 8005c38:	07d2      	lsls	r2, r2, #31
 8005c3a:	d502      	bpl.n	8005c42 <_printf_float+0x1b6>
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	1859      	adds	r1, r3, r1
 8005c40:	6121      	str	r1, [r4, #16]
 8005c42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c44:	65a3      	str	r3, [r4, #88]	; 0x58
 8005c46:	2300      	movs	r3, #0
 8005c48:	930a      	str	r3, [sp, #40]	; 0x28
 8005c4a:	e7d9      	b.n	8005c00 <_printf_float+0x174>
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d103      	bne.n	8005c58 <_printf_float+0x1cc>
 8005c50:	2201      	movs	r2, #1
 8005c52:	6821      	ldr	r1, [r4, #0]
 8005c54:	4211      	tst	r1, r2
 8005c56:	d000      	beq.n	8005c5a <_printf_float+0x1ce>
 8005c58:	1c9a      	adds	r2, r3, #2
 8005c5a:	6122      	str	r2, [r4, #16]
 8005c5c:	e7f1      	b.n	8005c42 <_printf_float+0x1b6>
 8005c5e:	2367      	movs	r3, #103	; 0x67
 8005c60:	001e      	movs	r6, r3
 8005c62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c66:	4293      	cmp	r3, r2
 8005c68:	db06      	blt.n	8005c78 <_printf_float+0x1ec>
 8005c6a:	6822      	ldr	r2, [r4, #0]
 8005c6c:	6123      	str	r3, [r4, #16]
 8005c6e:	07d2      	lsls	r2, r2, #31
 8005c70:	d5e7      	bpl.n	8005c42 <_printf_float+0x1b6>
 8005c72:	3301      	adds	r3, #1
 8005c74:	6123      	str	r3, [r4, #16]
 8005c76:	e7e4      	b.n	8005c42 <_printf_float+0x1b6>
 8005c78:	2101      	movs	r1, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	dc01      	bgt.n	8005c82 <_printf_float+0x1f6>
 8005c7e:	1849      	adds	r1, r1, r1
 8005c80:	1ac9      	subs	r1, r1, r3
 8005c82:	1852      	adds	r2, r2, r1
 8005c84:	e7e9      	b.n	8005c5a <_printf_float+0x1ce>
 8005c86:	6822      	ldr	r2, [r4, #0]
 8005c88:	0553      	lsls	r3, r2, #21
 8005c8a:	d408      	bmi.n	8005c9e <_printf_float+0x212>
 8005c8c:	6923      	ldr	r3, [r4, #16]
 8005c8e:	002a      	movs	r2, r5
 8005c90:	0038      	movs	r0, r7
 8005c92:	9908      	ldr	r1, [sp, #32]
 8005c94:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005c96:	47a8      	blx	r5
 8005c98:	1c43      	adds	r3, r0, #1
 8005c9a:	d129      	bne.n	8005cf0 <_printf_float+0x264>
 8005c9c:	e754      	b.n	8005b48 <_printf_float+0xbc>
 8005c9e:	2e65      	cmp	r6, #101	; 0x65
 8005ca0:	d800      	bhi.n	8005ca4 <_printf_float+0x218>
 8005ca2:	e0ec      	b.n	8005e7e <_printf_float+0x3f2>
 8005ca4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005ca6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005ca8:	2200      	movs	r2, #0
 8005caa:	2300      	movs	r3, #0
 8005cac:	f7fa fbca 	bl	8000444 <__aeabi_dcmpeq>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	d034      	beq.n	8005d1e <_printf_float+0x292>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	0038      	movs	r0, r7
 8005cb8:	4a37      	ldr	r2, [pc, #220]	; (8005d98 <_printf_float+0x30c>)
 8005cba:	9908      	ldr	r1, [sp, #32]
 8005cbc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005cbe:	47a8      	blx	r5
 8005cc0:	1c43      	adds	r3, r0, #1
 8005cc2:	d100      	bne.n	8005cc6 <_printf_float+0x23a>
 8005cc4:	e740      	b.n	8005b48 <_printf_float+0xbc>
 8005cc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005cc8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	db02      	blt.n	8005cd4 <_printf_float+0x248>
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	07db      	lsls	r3, r3, #31
 8005cd2:	d50d      	bpl.n	8005cf0 <_printf_float+0x264>
 8005cd4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005cd6:	0038      	movs	r0, r7
 8005cd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005cdc:	9908      	ldr	r1, [sp, #32]
 8005cde:	47a8      	blx	r5
 8005ce0:	2500      	movs	r5, #0
 8005ce2:	1c43      	adds	r3, r0, #1
 8005ce4:	d100      	bne.n	8005ce8 <_printf_float+0x25c>
 8005ce6:	e72f      	b.n	8005b48 <_printf_float+0xbc>
 8005ce8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005cea:	3b01      	subs	r3, #1
 8005cec:	42ab      	cmp	r3, r5
 8005cee:	dc0a      	bgt.n	8005d06 <_printf_float+0x27a>
 8005cf0:	6823      	ldr	r3, [r4, #0]
 8005cf2:	079b      	lsls	r3, r3, #30
 8005cf4:	d500      	bpl.n	8005cf8 <_printf_float+0x26c>
 8005cf6:	e114      	b.n	8005f22 <_printf_float+0x496>
 8005cf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005cfa:	68e0      	ldr	r0, [r4, #12]
 8005cfc:	4298      	cmp	r0, r3
 8005cfe:	db00      	blt.n	8005d02 <_printf_float+0x276>
 8005d00:	e724      	b.n	8005b4c <_printf_float+0xc0>
 8005d02:	0018      	movs	r0, r3
 8005d04:	e722      	b.n	8005b4c <_printf_float+0xc0>
 8005d06:	0022      	movs	r2, r4
 8005d08:	2301      	movs	r3, #1
 8005d0a:	0038      	movs	r0, r7
 8005d0c:	9908      	ldr	r1, [sp, #32]
 8005d0e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005d10:	321a      	adds	r2, #26
 8005d12:	47b0      	blx	r6
 8005d14:	1c43      	adds	r3, r0, #1
 8005d16:	d100      	bne.n	8005d1a <_printf_float+0x28e>
 8005d18:	e716      	b.n	8005b48 <_printf_float+0xbc>
 8005d1a:	3501      	adds	r5, #1
 8005d1c:	e7e4      	b.n	8005ce8 <_printf_float+0x25c>
 8005d1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	dc3b      	bgt.n	8005d9c <_printf_float+0x310>
 8005d24:	2301      	movs	r3, #1
 8005d26:	0038      	movs	r0, r7
 8005d28:	4a1b      	ldr	r2, [pc, #108]	; (8005d98 <_printf_float+0x30c>)
 8005d2a:	9908      	ldr	r1, [sp, #32]
 8005d2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005d2e:	47b0      	blx	r6
 8005d30:	1c43      	adds	r3, r0, #1
 8005d32:	d100      	bne.n	8005d36 <_printf_float+0x2aa>
 8005d34:	e708      	b.n	8005b48 <_printf_float+0xbc>
 8005d36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d38:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	d102      	bne.n	8005d44 <_printf_float+0x2b8>
 8005d3e:	6823      	ldr	r3, [r4, #0]
 8005d40:	07db      	lsls	r3, r3, #31
 8005d42:	d5d5      	bpl.n	8005cf0 <_printf_float+0x264>
 8005d44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d46:	0038      	movs	r0, r7
 8005d48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d4a:	9908      	ldr	r1, [sp, #32]
 8005d4c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005d4e:	47b0      	blx	r6
 8005d50:	1c43      	adds	r3, r0, #1
 8005d52:	d100      	bne.n	8005d56 <_printf_float+0x2ca>
 8005d54:	e6f8      	b.n	8005b48 <_printf_float+0xbc>
 8005d56:	2300      	movs	r3, #0
 8005d58:	930a      	str	r3, [sp, #40]	; 0x28
 8005d5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d5e:	425b      	negs	r3, r3
 8005d60:	4293      	cmp	r3, r2
 8005d62:	dc01      	bgt.n	8005d68 <_printf_float+0x2dc>
 8005d64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d66:	e792      	b.n	8005c8e <_printf_float+0x202>
 8005d68:	0022      	movs	r2, r4
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	0038      	movs	r0, r7
 8005d6e:	9908      	ldr	r1, [sp, #32]
 8005d70:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005d72:	321a      	adds	r2, #26
 8005d74:	47b0      	blx	r6
 8005d76:	1c43      	adds	r3, r0, #1
 8005d78:	d100      	bne.n	8005d7c <_printf_float+0x2f0>
 8005d7a:	e6e5      	b.n	8005b48 <_printf_float+0xbc>
 8005d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d7e:	3301      	adds	r3, #1
 8005d80:	e7ea      	b.n	8005d58 <_printf_float+0x2cc>
 8005d82:	46c0      	nop			; (mov r8, r8)
 8005d84:	7fefffff 	.word	0x7fefffff
 8005d88:	0800862c 	.word	0x0800862c
 8005d8c:	08008630 	.word	0x08008630
 8005d90:	08008634 	.word	0x08008634
 8005d94:	08008638 	.word	0x08008638
 8005d98:	0800863c 	.word	0x0800863c
 8005d9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005da0:	920a      	str	r2, [sp, #40]	; 0x28
 8005da2:	429a      	cmp	r2, r3
 8005da4:	dd00      	ble.n	8005da8 <_printf_float+0x31c>
 8005da6:	930a      	str	r3, [sp, #40]	; 0x28
 8005da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	dc3d      	bgt.n	8005e2a <_printf_float+0x39e>
 8005dae:	2300      	movs	r3, #0
 8005db0:	930e      	str	r3, [sp, #56]	; 0x38
 8005db2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005db4:	43db      	mvns	r3, r3
 8005db6:	17db      	asrs	r3, r3, #31
 8005db8:	930f      	str	r3, [sp, #60]	; 0x3c
 8005dba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005dbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005dbe:	930c      	str	r3, [sp, #48]	; 0x30
 8005dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	dc36      	bgt.n	8005e3c <_printf_float+0x3b0>
 8005dce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005dd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	db40      	blt.n	8005e58 <_printf_float+0x3cc>
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	07db      	lsls	r3, r3, #31
 8005dda:	d43d      	bmi.n	8005e58 <_printf_float+0x3cc>
 8005ddc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005dde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005de0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	1a52      	subs	r2, r2, r1
 8005de6:	920a      	str	r2, [sp, #40]	; 0x28
 8005de8:	429a      	cmp	r2, r3
 8005dea:	dd00      	ble.n	8005dee <_printf_float+0x362>
 8005dec:	930a      	str	r3, [sp, #40]	; 0x28
 8005dee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	dc3a      	bgt.n	8005e6a <_printf_float+0x3de>
 8005df4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005df6:	2500      	movs	r5, #0
 8005df8:	43db      	mvns	r3, r3
 8005dfa:	17db      	asrs	r3, r3, #31
 8005dfc:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dfe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005e00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e04:	1a9b      	subs	r3, r3, r2
 8005e06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e08:	400a      	ands	r2, r1
 8005e0a:	1a9b      	subs	r3, r3, r2
 8005e0c:	42ab      	cmp	r3, r5
 8005e0e:	dc00      	bgt.n	8005e12 <_printf_float+0x386>
 8005e10:	e76e      	b.n	8005cf0 <_printf_float+0x264>
 8005e12:	0022      	movs	r2, r4
 8005e14:	2301      	movs	r3, #1
 8005e16:	0038      	movs	r0, r7
 8005e18:	9908      	ldr	r1, [sp, #32]
 8005e1a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005e1c:	321a      	adds	r2, #26
 8005e1e:	47b0      	blx	r6
 8005e20:	1c43      	adds	r3, r0, #1
 8005e22:	d100      	bne.n	8005e26 <_printf_float+0x39a>
 8005e24:	e690      	b.n	8005b48 <_printf_float+0xbc>
 8005e26:	3501      	adds	r5, #1
 8005e28:	e7e9      	b.n	8005dfe <_printf_float+0x372>
 8005e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e2c:	002a      	movs	r2, r5
 8005e2e:	0038      	movs	r0, r7
 8005e30:	9908      	ldr	r1, [sp, #32]
 8005e32:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005e34:	47b0      	blx	r6
 8005e36:	1c43      	adds	r3, r0, #1
 8005e38:	d1b9      	bne.n	8005dae <_printf_float+0x322>
 8005e3a:	e685      	b.n	8005b48 <_printf_float+0xbc>
 8005e3c:	0022      	movs	r2, r4
 8005e3e:	2301      	movs	r3, #1
 8005e40:	0038      	movs	r0, r7
 8005e42:	9908      	ldr	r1, [sp, #32]
 8005e44:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005e46:	321a      	adds	r2, #26
 8005e48:	47b0      	blx	r6
 8005e4a:	1c43      	adds	r3, r0, #1
 8005e4c:	d100      	bne.n	8005e50 <_printf_float+0x3c4>
 8005e4e:	e67b      	b.n	8005b48 <_printf_float+0xbc>
 8005e50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e52:	3301      	adds	r3, #1
 8005e54:	930e      	str	r3, [sp, #56]	; 0x38
 8005e56:	e7b0      	b.n	8005dba <_printf_float+0x32e>
 8005e58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e5a:	0038      	movs	r0, r7
 8005e5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e5e:	9908      	ldr	r1, [sp, #32]
 8005e60:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005e62:	47b0      	blx	r6
 8005e64:	1c43      	adds	r3, r0, #1
 8005e66:	d1b9      	bne.n	8005ddc <_printf_float+0x350>
 8005e68:	e66e      	b.n	8005b48 <_printf_float+0xbc>
 8005e6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e6c:	0038      	movs	r0, r7
 8005e6e:	18ea      	adds	r2, r5, r3
 8005e70:	9908      	ldr	r1, [sp, #32]
 8005e72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e74:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005e76:	47a8      	blx	r5
 8005e78:	1c43      	adds	r3, r0, #1
 8005e7a:	d1bb      	bne.n	8005df4 <_printf_float+0x368>
 8005e7c:	e664      	b.n	8005b48 <_printf_float+0xbc>
 8005e7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	dc02      	bgt.n	8005e8a <_printf_float+0x3fe>
 8005e84:	2301      	movs	r3, #1
 8005e86:	421a      	tst	r2, r3
 8005e88:	d038      	beq.n	8005efc <_printf_float+0x470>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	002a      	movs	r2, r5
 8005e8e:	0038      	movs	r0, r7
 8005e90:	9908      	ldr	r1, [sp, #32]
 8005e92:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005e94:	47b0      	blx	r6
 8005e96:	1c43      	adds	r3, r0, #1
 8005e98:	d100      	bne.n	8005e9c <_printf_float+0x410>
 8005e9a:	e655      	b.n	8005b48 <_printf_float+0xbc>
 8005e9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e9e:	0038      	movs	r0, r7
 8005ea0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ea2:	9908      	ldr	r1, [sp, #32]
 8005ea4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005ea6:	47b0      	blx	r6
 8005ea8:	1c43      	adds	r3, r0, #1
 8005eaa:	d100      	bne.n	8005eae <_printf_float+0x422>
 8005eac:	e64c      	b.n	8005b48 <_printf_float+0xbc>
 8005eae:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005eb0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f7fa fac5 	bl	8000444 <__aeabi_dcmpeq>
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	d11c      	bne.n	8005ef8 <_printf_float+0x46c>
 8005ebe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ec0:	1c6a      	adds	r2, r5, #1
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	0038      	movs	r0, r7
 8005ec6:	9908      	ldr	r1, [sp, #32]
 8005ec8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005eca:	47a8      	blx	r5
 8005ecc:	1c43      	adds	r3, r0, #1
 8005ece:	d10f      	bne.n	8005ef0 <_printf_float+0x464>
 8005ed0:	e63a      	b.n	8005b48 <_printf_float+0xbc>
 8005ed2:	0022      	movs	r2, r4
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	0038      	movs	r0, r7
 8005ed8:	9908      	ldr	r1, [sp, #32]
 8005eda:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005edc:	321a      	adds	r2, #26
 8005ede:	47b0      	blx	r6
 8005ee0:	1c43      	adds	r3, r0, #1
 8005ee2:	d100      	bne.n	8005ee6 <_printf_float+0x45a>
 8005ee4:	e630      	b.n	8005b48 <_printf_float+0xbc>
 8005ee6:	3501      	adds	r5, #1
 8005ee8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005eea:	3b01      	subs	r3, #1
 8005eec:	42ab      	cmp	r3, r5
 8005eee:	dcf0      	bgt.n	8005ed2 <_printf_float+0x446>
 8005ef0:	0022      	movs	r2, r4
 8005ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ef4:	3250      	adds	r2, #80	; 0x50
 8005ef6:	e6cb      	b.n	8005c90 <_printf_float+0x204>
 8005ef8:	2500      	movs	r5, #0
 8005efa:	e7f5      	b.n	8005ee8 <_printf_float+0x45c>
 8005efc:	002a      	movs	r2, r5
 8005efe:	e7e1      	b.n	8005ec4 <_printf_float+0x438>
 8005f00:	0022      	movs	r2, r4
 8005f02:	2301      	movs	r3, #1
 8005f04:	0038      	movs	r0, r7
 8005f06:	9908      	ldr	r1, [sp, #32]
 8005f08:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005f0a:	3219      	adds	r2, #25
 8005f0c:	47b0      	blx	r6
 8005f0e:	1c43      	adds	r3, r0, #1
 8005f10:	d100      	bne.n	8005f14 <_printf_float+0x488>
 8005f12:	e619      	b.n	8005b48 <_printf_float+0xbc>
 8005f14:	3501      	adds	r5, #1
 8005f16:	68e3      	ldr	r3, [r4, #12]
 8005f18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005f1a:	1a9b      	subs	r3, r3, r2
 8005f1c:	42ab      	cmp	r3, r5
 8005f1e:	dcef      	bgt.n	8005f00 <_printf_float+0x474>
 8005f20:	e6ea      	b.n	8005cf8 <_printf_float+0x26c>
 8005f22:	2500      	movs	r5, #0
 8005f24:	e7f7      	b.n	8005f16 <_printf_float+0x48a>
 8005f26:	46c0      	nop			; (mov r8, r8)

08005f28 <_printf_common>:
 8005f28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f2a:	0015      	movs	r5, r2
 8005f2c:	9301      	str	r3, [sp, #4]
 8005f2e:	688a      	ldr	r2, [r1, #8]
 8005f30:	690b      	ldr	r3, [r1, #16]
 8005f32:	000c      	movs	r4, r1
 8005f34:	9000      	str	r0, [sp, #0]
 8005f36:	4293      	cmp	r3, r2
 8005f38:	da00      	bge.n	8005f3c <_printf_common+0x14>
 8005f3a:	0013      	movs	r3, r2
 8005f3c:	0022      	movs	r2, r4
 8005f3e:	602b      	str	r3, [r5, #0]
 8005f40:	3243      	adds	r2, #67	; 0x43
 8005f42:	7812      	ldrb	r2, [r2, #0]
 8005f44:	2a00      	cmp	r2, #0
 8005f46:	d001      	beq.n	8005f4c <_printf_common+0x24>
 8005f48:	3301      	adds	r3, #1
 8005f4a:	602b      	str	r3, [r5, #0]
 8005f4c:	6823      	ldr	r3, [r4, #0]
 8005f4e:	069b      	lsls	r3, r3, #26
 8005f50:	d502      	bpl.n	8005f58 <_printf_common+0x30>
 8005f52:	682b      	ldr	r3, [r5, #0]
 8005f54:	3302      	adds	r3, #2
 8005f56:	602b      	str	r3, [r5, #0]
 8005f58:	6822      	ldr	r2, [r4, #0]
 8005f5a:	2306      	movs	r3, #6
 8005f5c:	0017      	movs	r7, r2
 8005f5e:	401f      	ands	r7, r3
 8005f60:	421a      	tst	r2, r3
 8005f62:	d027      	beq.n	8005fb4 <_printf_common+0x8c>
 8005f64:	0023      	movs	r3, r4
 8005f66:	3343      	adds	r3, #67	; 0x43
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	1e5a      	subs	r2, r3, #1
 8005f6c:	4193      	sbcs	r3, r2
 8005f6e:	6822      	ldr	r2, [r4, #0]
 8005f70:	0692      	lsls	r2, r2, #26
 8005f72:	d430      	bmi.n	8005fd6 <_printf_common+0xae>
 8005f74:	0022      	movs	r2, r4
 8005f76:	9901      	ldr	r1, [sp, #4]
 8005f78:	9800      	ldr	r0, [sp, #0]
 8005f7a:	9e08      	ldr	r6, [sp, #32]
 8005f7c:	3243      	adds	r2, #67	; 0x43
 8005f7e:	47b0      	blx	r6
 8005f80:	1c43      	adds	r3, r0, #1
 8005f82:	d025      	beq.n	8005fd0 <_printf_common+0xa8>
 8005f84:	2306      	movs	r3, #6
 8005f86:	6820      	ldr	r0, [r4, #0]
 8005f88:	682a      	ldr	r2, [r5, #0]
 8005f8a:	68e1      	ldr	r1, [r4, #12]
 8005f8c:	2500      	movs	r5, #0
 8005f8e:	4003      	ands	r3, r0
 8005f90:	2b04      	cmp	r3, #4
 8005f92:	d103      	bne.n	8005f9c <_printf_common+0x74>
 8005f94:	1a8d      	subs	r5, r1, r2
 8005f96:	43eb      	mvns	r3, r5
 8005f98:	17db      	asrs	r3, r3, #31
 8005f9a:	401d      	ands	r5, r3
 8005f9c:	68a3      	ldr	r3, [r4, #8]
 8005f9e:	6922      	ldr	r2, [r4, #16]
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	dd01      	ble.n	8005fa8 <_printf_common+0x80>
 8005fa4:	1a9b      	subs	r3, r3, r2
 8005fa6:	18ed      	adds	r5, r5, r3
 8005fa8:	2700      	movs	r7, #0
 8005faa:	42bd      	cmp	r5, r7
 8005fac:	d120      	bne.n	8005ff0 <_printf_common+0xc8>
 8005fae:	2000      	movs	r0, #0
 8005fb0:	e010      	b.n	8005fd4 <_printf_common+0xac>
 8005fb2:	3701      	adds	r7, #1
 8005fb4:	68e3      	ldr	r3, [r4, #12]
 8005fb6:	682a      	ldr	r2, [r5, #0]
 8005fb8:	1a9b      	subs	r3, r3, r2
 8005fba:	42bb      	cmp	r3, r7
 8005fbc:	ddd2      	ble.n	8005f64 <_printf_common+0x3c>
 8005fbe:	0022      	movs	r2, r4
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	9901      	ldr	r1, [sp, #4]
 8005fc4:	9800      	ldr	r0, [sp, #0]
 8005fc6:	9e08      	ldr	r6, [sp, #32]
 8005fc8:	3219      	adds	r2, #25
 8005fca:	47b0      	blx	r6
 8005fcc:	1c43      	adds	r3, r0, #1
 8005fce:	d1f0      	bne.n	8005fb2 <_printf_common+0x8a>
 8005fd0:	2001      	movs	r0, #1
 8005fd2:	4240      	negs	r0, r0
 8005fd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005fd6:	2030      	movs	r0, #48	; 0x30
 8005fd8:	18e1      	adds	r1, r4, r3
 8005fda:	3143      	adds	r1, #67	; 0x43
 8005fdc:	7008      	strb	r0, [r1, #0]
 8005fde:	0021      	movs	r1, r4
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	3145      	adds	r1, #69	; 0x45
 8005fe4:	7809      	ldrb	r1, [r1, #0]
 8005fe6:	18a2      	adds	r2, r4, r2
 8005fe8:	3243      	adds	r2, #67	; 0x43
 8005fea:	3302      	adds	r3, #2
 8005fec:	7011      	strb	r1, [r2, #0]
 8005fee:	e7c1      	b.n	8005f74 <_printf_common+0x4c>
 8005ff0:	0022      	movs	r2, r4
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	9901      	ldr	r1, [sp, #4]
 8005ff6:	9800      	ldr	r0, [sp, #0]
 8005ff8:	9e08      	ldr	r6, [sp, #32]
 8005ffa:	321a      	adds	r2, #26
 8005ffc:	47b0      	blx	r6
 8005ffe:	1c43      	adds	r3, r0, #1
 8006000:	d0e6      	beq.n	8005fd0 <_printf_common+0xa8>
 8006002:	3701      	adds	r7, #1
 8006004:	e7d1      	b.n	8005faa <_printf_common+0x82>
	...

08006008 <_printf_i>:
 8006008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800600a:	b08b      	sub	sp, #44	; 0x2c
 800600c:	9206      	str	r2, [sp, #24]
 800600e:	000a      	movs	r2, r1
 8006010:	3243      	adds	r2, #67	; 0x43
 8006012:	9307      	str	r3, [sp, #28]
 8006014:	9005      	str	r0, [sp, #20]
 8006016:	9204      	str	r2, [sp, #16]
 8006018:	7e0a      	ldrb	r2, [r1, #24]
 800601a:	000c      	movs	r4, r1
 800601c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800601e:	2a78      	cmp	r2, #120	; 0x78
 8006020:	d806      	bhi.n	8006030 <_printf_i+0x28>
 8006022:	2a62      	cmp	r2, #98	; 0x62
 8006024:	d808      	bhi.n	8006038 <_printf_i+0x30>
 8006026:	2a00      	cmp	r2, #0
 8006028:	d100      	bne.n	800602c <_printf_i+0x24>
 800602a:	e0c0      	b.n	80061ae <_printf_i+0x1a6>
 800602c:	2a58      	cmp	r2, #88	; 0x58
 800602e:	d052      	beq.n	80060d6 <_printf_i+0xce>
 8006030:	0026      	movs	r6, r4
 8006032:	3642      	adds	r6, #66	; 0x42
 8006034:	7032      	strb	r2, [r6, #0]
 8006036:	e022      	b.n	800607e <_printf_i+0x76>
 8006038:	0010      	movs	r0, r2
 800603a:	3863      	subs	r0, #99	; 0x63
 800603c:	2815      	cmp	r0, #21
 800603e:	d8f7      	bhi.n	8006030 <_printf_i+0x28>
 8006040:	f7fa f870 	bl	8000124 <__gnu_thumb1_case_shi>
 8006044:	001f0016 	.word	0x001f0016
 8006048:	fff6fff6 	.word	0xfff6fff6
 800604c:	fff6fff6 	.word	0xfff6fff6
 8006050:	fff6001f 	.word	0xfff6001f
 8006054:	fff6fff6 	.word	0xfff6fff6
 8006058:	00a8fff6 	.word	0x00a8fff6
 800605c:	009a0036 	.word	0x009a0036
 8006060:	fff6fff6 	.word	0xfff6fff6
 8006064:	fff600b9 	.word	0xfff600b9
 8006068:	fff60036 	.word	0xfff60036
 800606c:	009efff6 	.word	0x009efff6
 8006070:	0026      	movs	r6, r4
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	3642      	adds	r6, #66	; 0x42
 8006076:	1d11      	adds	r1, r2, #4
 8006078:	6019      	str	r1, [r3, #0]
 800607a:	6813      	ldr	r3, [r2, #0]
 800607c:	7033      	strb	r3, [r6, #0]
 800607e:	2301      	movs	r3, #1
 8006080:	e0a7      	b.n	80061d2 <_printf_i+0x1ca>
 8006082:	6808      	ldr	r0, [r1, #0]
 8006084:	6819      	ldr	r1, [r3, #0]
 8006086:	1d0a      	adds	r2, r1, #4
 8006088:	0605      	lsls	r5, r0, #24
 800608a:	d50b      	bpl.n	80060a4 <_printf_i+0x9c>
 800608c:	680d      	ldr	r5, [r1, #0]
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	2d00      	cmp	r5, #0
 8006092:	da03      	bge.n	800609c <_printf_i+0x94>
 8006094:	232d      	movs	r3, #45	; 0x2d
 8006096:	9a04      	ldr	r2, [sp, #16]
 8006098:	426d      	negs	r5, r5
 800609a:	7013      	strb	r3, [r2, #0]
 800609c:	4b61      	ldr	r3, [pc, #388]	; (8006224 <_printf_i+0x21c>)
 800609e:	270a      	movs	r7, #10
 80060a0:	9303      	str	r3, [sp, #12]
 80060a2:	e032      	b.n	800610a <_printf_i+0x102>
 80060a4:	680d      	ldr	r5, [r1, #0]
 80060a6:	601a      	str	r2, [r3, #0]
 80060a8:	0641      	lsls	r1, r0, #25
 80060aa:	d5f1      	bpl.n	8006090 <_printf_i+0x88>
 80060ac:	b22d      	sxth	r5, r5
 80060ae:	e7ef      	b.n	8006090 <_printf_i+0x88>
 80060b0:	680d      	ldr	r5, [r1, #0]
 80060b2:	6819      	ldr	r1, [r3, #0]
 80060b4:	1d08      	adds	r0, r1, #4
 80060b6:	6018      	str	r0, [r3, #0]
 80060b8:	062e      	lsls	r6, r5, #24
 80060ba:	d501      	bpl.n	80060c0 <_printf_i+0xb8>
 80060bc:	680d      	ldr	r5, [r1, #0]
 80060be:	e003      	b.n	80060c8 <_printf_i+0xc0>
 80060c0:	066d      	lsls	r5, r5, #25
 80060c2:	d5fb      	bpl.n	80060bc <_printf_i+0xb4>
 80060c4:	680d      	ldr	r5, [r1, #0]
 80060c6:	b2ad      	uxth	r5, r5
 80060c8:	4b56      	ldr	r3, [pc, #344]	; (8006224 <_printf_i+0x21c>)
 80060ca:	270a      	movs	r7, #10
 80060cc:	9303      	str	r3, [sp, #12]
 80060ce:	2a6f      	cmp	r2, #111	; 0x6f
 80060d0:	d117      	bne.n	8006102 <_printf_i+0xfa>
 80060d2:	2708      	movs	r7, #8
 80060d4:	e015      	b.n	8006102 <_printf_i+0xfa>
 80060d6:	3145      	adds	r1, #69	; 0x45
 80060d8:	700a      	strb	r2, [r1, #0]
 80060da:	4a52      	ldr	r2, [pc, #328]	; (8006224 <_printf_i+0x21c>)
 80060dc:	9203      	str	r2, [sp, #12]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	6821      	ldr	r1, [r4, #0]
 80060e2:	ca20      	ldmia	r2!, {r5}
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	0608      	lsls	r0, r1, #24
 80060e8:	d550      	bpl.n	800618c <_printf_i+0x184>
 80060ea:	07cb      	lsls	r3, r1, #31
 80060ec:	d502      	bpl.n	80060f4 <_printf_i+0xec>
 80060ee:	2320      	movs	r3, #32
 80060f0:	4319      	orrs	r1, r3
 80060f2:	6021      	str	r1, [r4, #0]
 80060f4:	2710      	movs	r7, #16
 80060f6:	2d00      	cmp	r5, #0
 80060f8:	d103      	bne.n	8006102 <_printf_i+0xfa>
 80060fa:	2320      	movs	r3, #32
 80060fc:	6822      	ldr	r2, [r4, #0]
 80060fe:	439a      	bics	r2, r3
 8006100:	6022      	str	r2, [r4, #0]
 8006102:	0023      	movs	r3, r4
 8006104:	2200      	movs	r2, #0
 8006106:	3343      	adds	r3, #67	; 0x43
 8006108:	701a      	strb	r2, [r3, #0]
 800610a:	6863      	ldr	r3, [r4, #4]
 800610c:	60a3      	str	r3, [r4, #8]
 800610e:	2b00      	cmp	r3, #0
 8006110:	db03      	blt.n	800611a <_printf_i+0x112>
 8006112:	2204      	movs	r2, #4
 8006114:	6821      	ldr	r1, [r4, #0]
 8006116:	4391      	bics	r1, r2
 8006118:	6021      	str	r1, [r4, #0]
 800611a:	2d00      	cmp	r5, #0
 800611c:	d102      	bne.n	8006124 <_printf_i+0x11c>
 800611e:	9e04      	ldr	r6, [sp, #16]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00c      	beq.n	800613e <_printf_i+0x136>
 8006124:	9e04      	ldr	r6, [sp, #16]
 8006126:	0028      	movs	r0, r5
 8006128:	0039      	movs	r1, r7
 800612a:	f7fa f88b 	bl	8000244 <__aeabi_uidivmod>
 800612e:	9b03      	ldr	r3, [sp, #12]
 8006130:	3e01      	subs	r6, #1
 8006132:	5c5b      	ldrb	r3, [r3, r1]
 8006134:	7033      	strb	r3, [r6, #0]
 8006136:	002b      	movs	r3, r5
 8006138:	0005      	movs	r5, r0
 800613a:	429f      	cmp	r7, r3
 800613c:	d9f3      	bls.n	8006126 <_printf_i+0x11e>
 800613e:	2f08      	cmp	r7, #8
 8006140:	d109      	bne.n	8006156 <_printf_i+0x14e>
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	07db      	lsls	r3, r3, #31
 8006146:	d506      	bpl.n	8006156 <_printf_i+0x14e>
 8006148:	6863      	ldr	r3, [r4, #4]
 800614a:	6922      	ldr	r2, [r4, #16]
 800614c:	4293      	cmp	r3, r2
 800614e:	dc02      	bgt.n	8006156 <_printf_i+0x14e>
 8006150:	2330      	movs	r3, #48	; 0x30
 8006152:	3e01      	subs	r6, #1
 8006154:	7033      	strb	r3, [r6, #0]
 8006156:	9b04      	ldr	r3, [sp, #16]
 8006158:	1b9b      	subs	r3, r3, r6
 800615a:	6123      	str	r3, [r4, #16]
 800615c:	9b07      	ldr	r3, [sp, #28]
 800615e:	0021      	movs	r1, r4
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	9805      	ldr	r0, [sp, #20]
 8006164:	9b06      	ldr	r3, [sp, #24]
 8006166:	aa09      	add	r2, sp, #36	; 0x24
 8006168:	f7ff fede 	bl	8005f28 <_printf_common>
 800616c:	1c43      	adds	r3, r0, #1
 800616e:	d135      	bne.n	80061dc <_printf_i+0x1d4>
 8006170:	2001      	movs	r0, #1
 8006172:	4240      	negs	r0, r0
 8006174:	b00b      	add	sp, #44	; 0x2c
 8006176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006178:	2220      	movs	r2, #32
 800617a:	6809      	ldr	r1, [r1, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	6022      	str	r2, [r4, #0]
 8006180:	0022      	movs	r2, r4
 8006182:	2178      	movs	r1, #120	; 0x78
 8006184:	3245      	adds	r2, #69	; 0x45
 8006186:	7011      	strb	r1, [r2, #0]
 8006188:	4a27      	ldr	r2, [pc, #156]	; (8006228 <_printf_i+0x220>)
 800618a:	e7a7      	b.n	80060dc <_printf_i+0xd4>
 800618c:	0648      	lsls	r0, r1, #25
 800618e:	d5ac      	bpl.n	80060ea <_printf_i+0xe2>
 8006190:	b2ad      	uxth	r5, r5
 8006192:	e7aa      	b.n	80060ea <_printf_i+0xe2>
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	680d      	ldr	r5, [r1, #0]
 8006198:	1d10      	adds	r0, r2, #4
 800619a:	6949      	ldr	r1, [r1, #20]
 800619c:	6018      	str	r0, [r3, #0]
 800619e:	6813      	ldr	r3, [r2, #0]
 80061a0:	062e      	lsls	r6, r5, #24
 80061a2:	d501      	bpl.n	80061a8 <_printf_i+0x1a0>
 80061a4:	6019      	str	r1, [r3, #0]
 80061a6:	e002      	b.n	80061ae <_printf_i+0x1a6>
 80061a8:	066d      	lsls	r5, r5, #25
 80061aa:	d5fb      	bpl.n	80061a4 <_printf_i+0x19c>
 80061ac:	8019      	strh	r1, [r3, #0]
 80061ae:	2300      	movs	r3, #0
 80061b0:	9e04      	ldr	r6, [sp, #16]
 80061b2:	6123      	str	r3, [r4, #16]
 80061b4:	e7d2      	b.n	800615c <_printf_i+0x154>
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	1d11      	adds	r1, r2, #4
 80061ba:	6019      	str	r1, [r3, #0]
 80061bc:	6816      	ldr	r6, [r2, #0]
 80061be:	2100      	movs	r1, #0
 80061c0:	0030      	movs	r0, r6
 80061c2:	6862      	ldr	r2, [r4, #4]
 80061c4:	f000 feea 	bl	8006f9c <memchr>
 80061c8:	2800      	cmp	r0, #0
 80061ca:	d001      	beq.n	80061d0 <_printf_i+0x1c8>
 80061cc:	1b80      	subs	r0, r0, r6
 80061ce:	6060      	str	r0, [r4, #4]
 80061d0:	6863      	ldr	r3, [r4, #4]
 80061d2:	6123      	str	r3, [r4, #16]
 80061d4:	2300      	movs	r3, #0
 80061d6:	9a04      	ldr	r2, [sp, #16]
 80061d8:	7013      	strb	r3, [r2, #0]
 80061da:	e7bf      	b.n	800615c <_printf_i+0x154>
 80061dc:	6923      	ldr	r3, [r4, #16]
 80061de:	0032      	movs	r2, r6
 80061e0:	9906      	ldr	r1, [sp, #24]
 80061e2:	9805      	ldr	r0, [sp, #20]
 80061e4:	9d07      	ldr	r5, [sp, #28]
 80061e6:	47a8      	blx	r5
 80061e8:	1c43      	adds	r3, r0, #1
 80061ea:	d0c1      	beq.n	8006170 <_printf_i+0x168>
 80061ec:	6823      	ldr	r3, [r4, #0]
 80061ee:	079b      	lsls	r3, r3, #30
 80061f0:	d415      	bmi.n	800621e <_printf_i+0x216>
 80061f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061f4:	68e0      	ldr	r0, [r4, #12]
 80061f6:	4298      	cmp	r0, r3
 80061f8:	dabc      	bge.n	8006174 <_printf_i+0x16c>
 80061fa:	0018      	movs	r0, r3
 80061fc:	e7ba      	b.n	8006174 <_printf_i+0x16c>
 80061fe:	0022      	movs	r2, r4
 8006200:	2301      	movs	r3, #1
 8006202:	9906      	ldr	r1, [sp, #24]
 8006204:	9805      	ldr	r0, [sp, #20]
 8006206:	9e07      	ldr	r6, [sp, #28]
 8006208:	3219      	adds	r2, #25
 800620a:	47b0      	blx	r6
 800620c:	1c43      	adds	r3, r0, #1
 800620e:	d0af      	beq.n	8006170 <_printf_i+0x168>
 8006210:	3501      	adds	r5, #1
 8006212:	68e3      	ldr	r3, [r4, #12]
 8006214:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006216:	1a9b      	subs	r3, r3, r2
 8006218:	42ab      	cmp	r3, r5
 800621a:	dcf0      	bgt.n	80061fe <_printf_i+0x1f6>
 800621c:	e7e9      	b.n	80061f2 <_printf_i+0x1ea>
 800621e:	2500      	movs	r5, #0
 8006220:	e7f7      	b.n	8006212 <_printf_i+0x20a>
 8006222:	46c0      	nop			; (mov r8, r8)
 8006224:	0800863e 	.word	0x0800863e
 8006228:	0800864f 	.word	0x0800864f

0800622c <quorem>:
 800622c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800622e:	0006      	movs	r6, r0
 8006230:	690d      	ldr	r5, [r1, #16]
 8006232:	6933      	ldr	r3, [r6, #16]
 8006234:	b087      	sub	sp, #28
 8006236:	2000      	movs	r0, #0
 8006238:	9102      	str	r1, [sp, #8]
 800623a:	42ab      	cmp	r3, r5
 800623c:	db6b      	blt.n	8006316 <quorem+0xea>
 800623e:	000b      	movs	r3, r1
 8006240:	3d01      	subs	r5, #1
 8006242:	00ac      	lsls	r4, r5, #2
 8006244:	3314      	adds	r3, #20
 8006246:	9305      	str	r3, [sp, #20]
 8006248:	191b      	adds	r3, r3, r4
 800624a:	9303      	str	r3, [sp, #12]
 800624c:	0033      	movs	r3, r6
 800624e:	3314      	adds	r3, #20
 8006250:	9301      	str	r3, [sp, #4]
 8006252:	191c      	adds	r4, r3, r4
 8006254:	9b03      	ldr	r3, [sp, #12]
 8006256:	6827      	ldr	r7, [r4, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	0038      	movs	r0, r7
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	3301      	adds	r3, #1
 8006260:	0019      	movs	r1, r3
 8006262:	9304      	str	r3, [sp, #16]
 8006264:	f7f9 ff68 	bl	8000138 <__udivsi3>
 8006268:	9b04      	ldr	r3, [sp, #16]
 800626a:	9000      	str	r0, [sp, #0]
 800626c:	429f      	cmp	r7, r3
 800626e:	d329      	bcc.n	80062c4 <quorem+0x98>
 8006270:	2300      	movs	r3, #0
 8006272:	469c      	mov	ip, r3
 8006274:	9801      	ldr	r0, [sp, #4]
 8006276:	9f05      	ldr	r7, [sp, #20]
 8006278:	9304      	str	r3, [sp, #16]
 800627a:	cf08      	ldmia	r7!, {r3}
 800627c:	9a00      	ldr	r2, [sp, #0]
 800627e:	b299      	uxth	r1, r3
 8006280:	4351      	muls	r1, r2
 8006282:	0c1b      	lsrs	r3, r3, #16
 8006284:	4353      	muls	r3, r2
 8006286:	4461      	add	r1, ip
 8006288:	0c0a      	lsrs	r2, r1, #16
 800628a:	189b      	adds	r3, r3, r2
 800628c:	0c1a      	lsrs	r2, r3, #16
 800628e:	9305      	str	r3, [sp, #20]
 8006290:	6803      	ldr	r3, [r0, #0]
 8006292:	4694      	mov	ip, r2
 8006294:	b29a      	uxth	r2, r3
 8006296:	9b04      	ldr	r3, [sp, #16]
 8006298:	b289      	uxth	r1, r1
 800629a:	18d2      	adds	r2, r2, r3
 800629c:	6803      	ldr	r3, [r0, #0]
 800629e:	1a52      	subs	r2, r2, r1
 80062a0:	0c19      	lsrs	r1, r3, #16
 80062a2:	466b      	mov	r3, sp
 80062a4:	8a9b      	ldrh	r3, [r3, #20]
 80062a6:	1acb      	subs	r3, r1, r3
 80062a8:	1411      	asrs	r1, r2, #16
 80062aa:	185b      	adds	r3, r3, r1
 80062ac:	1419      	asrs	r1, r3, #16
 80062ae:	b292      	uxth	r2, r2
 80062b0:	041b      	lsls	r3, r3, #16
 80062b2:	431a      	orrs	r2, r3
 80062b4:	9b03      	ldr	r3, [sp, #12]
 80062b6:	9104      	str	r1, [sp, #16]
 80062b8:	c004      	stmia	r0!, {r2}
 80062ba:	42bb      	cmp	r3, r7
 80062bc:	d2dd      	bcs.n	800627a <quorem+0x4e>
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d02e      	beq.n	8006322 <quorem+0xf6>
 80062c4:	0030      	movs	r0, r6
 80062c6:	9902      	ldr	r1, [sp, #8]
 80062c8:	f001 f902 	bl	80074d0 <__mcmp>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	db21      	blt.n	8006314 <quorem+0xe8>
 80062d0:	0030      	movs	r0, r6
 80062d2:	2400      	movs	r4, #0
 80062d4:	9b00      	ldr	r3, [sp, #0]
 80062d6:	9902      	ldr	r1, [sp, #8]
 80062d8:	3301      	adds	r3, #1
 80062da:	9300      	str	r3, [sp, #0]
 80062dc:	3014      	adds	r0, #20
 80062de:	3114      	adds	r1, #20
 80062e0:	6802      	ldr	r2, [r0, #0]
 80062e2:	c908      	ldmia	r1!, {r3}
 80062e4:	b292      	uxth	r2, r2
 80062e6:	1914      	adds	r4, r2, r4
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	1aa2      	subs	r2, r4, r2
 80062ec:	6804      	ldr	r4, [r0, #0]
 80062ee:	0c1b      	lsrs	r3, r3, #16
 80062f0:	0c24      	lsrs	r4, r4, #16
 80062f2:	1ae3      	subs	r3, r4, r3
 80062f4:	1414      	asrs	r4, r2, #16
 80062f6:	191b      	adds	r3, r3, r4
 80062f8:	141c      	asrs	r4, r3, #16
 80062fa:	b292      	uxth	r2, r2
 80062fc:	041b      	lsls	r3, r3, #16
 80062fe:	4313      	orrs	r3, r2
 8006300:	c008      	stmia	r0!, {r3}
 8006302:	9b03      	ldr	r3, [sp, #12]
 8006304:	428b      	cmp	r3, r1
 8006306:	d2eb      	bcs.n	80062e0 <quorem+0xb4>
 8006308:	9a01      	ldr	r2, [sp, #4]
 800630a:	00ab      	lsls	r3, r5, #2
 800630c:	18d3      	adds	r3, r2, r3
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	2a00      	cmp	r2, #0
 8006312:	d010      	beq.n	8006336 <quorem+0x10a>
 8006314:	9800      	ldr	r0, [sp, #0]
 8006316:	b007      	add	sp, #28
 8006318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d104      	bne.n	800632a <quorem+0xfe>
 8006320:	3d01      	subs	r5, #1
 8006322:	9b01      	ldr	r3, [sp, #4]
 8006324:	3c04      	subs	r4, #4
 8006326:	42a3      	cmp	r3, r4
 8006328:	d3f7      	bcc.n	800631a <quorem+0xee>
 800632a:	6135      	str	r5, [r6, #16]
 800632c:	e7ca      	b.n	80062c4 <quorem+0x98>
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	2a00      	cmp	r2, #0
 8006332:	d104      	bne.n	800633e <quorem+0x112>
 8006334:	3d01      	subs	r5, #1
 8006336:	9a01      	ldr	r2, [sp, #4]
 8006338:	3b04      	subs	r3, #4
 800633a:	429a      	cmp	r2, r3
 800633c:	d3f7      	bcc.n	800632e <quorem+0x102>
 800633e:	6135      	str	r5, [r6, #16]
 8006340:	e7e8      	b.n	8006314 <quorem+0xe8>
	...

08006344 <_dtoa_r>:
 8006344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006346:	b09d      	sub	sp, #116	; 0x74
 8006348:	9202      	str	r2, [sp, #8]
 800634a:	9303      	str	r3, [sp, #12]
 800634c:	9b02      	ldr	r3, [sp, #8]
 800634e:	9c03      	ldr	r4, [sp, #12]
 8006350:	930a      	str	r3, [sp, #40]	; 0x28
 8006352:	940b      	str	r4, [sp, #44]	; 0x2c
 8006354:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006356:	0007      	movs	r7, r0
 8006358:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800635a:	2c00      	cmp	r4, #0
 800635c:	d10e      	bne.n	800637c <_dtoa_r+0x38>
 800635e:	2010      	movs	r0, #16
 8006360:	f000 fe12 	bl	8006f88 <malloc>
 8006364:	1e02      	subs	r2, r0, #0
 8006366:	6278      	str	r0, [r7, #36]	; 0x24
 8006368:	d104      	bne.n	8006374 <_dtoa_r+0x30>
 800636a:	21ea      	movs	r1, #234	; 0xea
 800636c:	4bc0      	ldr	r3, [pc, #768]	; (8006670 <_dtoa_r+0x32c>)
 800636e:	48c1      	ldr	r0, [pc, #772]	; (8006674 <_dtoa_r+0x330>)
 8006370:	f001 fa8e 	bl	8007890 <__assert_func>
 8006374:	6044      	str	r4, [r0, #4]
 8006376:	6084      	str	r4, [r0, #8]
 8006378:	6004      	str	r4, [r0, #0]
 800637a:	60c4      	str	r4, [r0, #12]
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637e:	6819      	ldr	r1, [r3, #0]
 8006380:	2900      	cmp	r1, #0
 8006382:	d00a      	beq.n	800639a <_dtoa_r+0x56>
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	2301      	movs	r3, #1
 8006388:	4093      	lsls	r3, r2
 800638a:	604a      	str	r2, [r1, #4]
 800638c:	608b      	str	r3, [r1, #8]
 800638e:	0038      	movs	r0, r7
 8006390:	f000 fe5c 	bl	800704c <_Bfree>
 8006394:	2200      	movs	r2, #0
 8006396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	9b03      	ldr	r3, [sp, #12]
 800639c:	2b00      	cmp	r3, #0
 800639e:	da21      	bge.n	80063e4 <_dtoa_r+0xa0>
 80063a0:	2301      	movs	r3, #1
 80063a2:	602b      	str	r3, [r5, #0]
 80063a4:	9b03      	ldr	r3, [sp, #12]
 80063a6:	005b      	lsls	r3, r3, #1
 80063a8:	085b      	lsrs	r3, r3, #1
 80063aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80063ac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80063ae:	4bb2      	ldr	r3, [pc, #712]	; (8006678 <_dtoa_r+0x334>)
 80063b0:	002a      	movs	r2, r5
 80063b2:	9318      	str	r3, [sp, #96]	; 0x60
 80063b4:	401a      	ands	r2, r3
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d117      	bne.n	80063ea <_dtoa_r+0xa6>
 80063ba:	4bb0      	ldr	r3, [pc, #704]	; (800667c <_dtoa_r+0x338>)
 80063bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80063be:	0328      	lsls	r0, r5, #12
 80063c0:	6013      	str	r3, [r2, #0]
 80063c2:	9b02      	ldr	r3, [sp, #8]
 80063c4:	0b00      	lsrs	r0, r0, #12
 80063c6:	4318      	orrs	r0, r3
 80063c8:	d101      	bne.n	80063ce <_dtoa_r+0x8a>
 80063ca:	f000 fdc3 	bl	8006f54 <_dtoa_r+0xc10>
 80063ce:	48ac      	ldr	r0, [pc, #688]	; (8006680 <_dtoa_r+0x33c>)
 80063d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80063d2:	9005      	str	r0, [sp, #20]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <_dtoa_r+0x9a>
 80063d8:	4baa      	ldr	r3, [pc, #680]	; (8006684 <_dtoa_r+0x340>)
 80063da:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80063dc:	6013      	str	r3, [r2, #0]
 80063de:	9805      	ldr	r0, [sp, #20]
 80063e0:	b01d      	add	sp, #116	; 0x74
 80063e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063e4:	2300      	movs	r3, #0
 80063e6:	602b      	str	r3, [r5, #0]
 80063e8:	e7e0      	b.n	80063ac <_dtoa_r+0x68>
 80063ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063ec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80063ee:	9312      	str	r3, [sp, #72]	; 0x48
 80063f0:	9413      	str	r4, [sp, #76]	; 0x4c
 80063f2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80063f4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80063f6:	2200      	movs	r2, #0
 80063f8:	2300      	movs	r3, #0
 80063fa:	f7fa f823 	bl	8000444 <__aeabi_dcmpeq>
 80063fe:	1e04      	subs	r4, r0, #0
 8006400:	d00b      	beq.n	800641a <_dtoa_r+0xd6>
 8006402:	2301      	movs	r3, #1
 8006404:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006406:	6013      	str	r3, [r2, #0]
 8006408:	4b9f      	ldr	r3, [pc, #636]	; (8006688 <_dtoa_r+0x344>)
 800640a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800640c:	9305      	str	r3, [sp, #20]
 800640e:	2a00      	cmp	r2, #0
 8006410:	d0e5      	beq.n	80063de <_dtoa_r+0x9a>
 8006412:	4a9e      	ldr	r2, [pc, #632]	; (800668c <_dtoa_r+0x348>)
 8006414:	9926      	ldr	r1, [sp, #152]	; 0x98
 8006416:	600a      	str	r2, [r1, #0]
 8006418:	e7e1      	b.n	80063de <_dtoa_r+0x9a>
 800641a:	ab1a      	add	r3, sp, #104	; 0x68
 800641c:	9301      	str	r3, [sp, #4]
 800641e:	ab1b      	add	r3, sp, #108	; 0x6c
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	0038      	movs	r0, r7
 8006424:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006426:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006428:	f001 f906 	bl	8007638 <__d2b>
 800642c:	006e      	lsls	r6, r5, #1
 800642e:	9004      	str	r0, [sp, #16]
 8006430:	0d76      	lsrs	r6, r6, #21
 8006432:	d100      	bne.n	8006436 <_dtoa_r+0xf2>
 8006434:	e07c      	b.n	8006530 <_dtoa_r+0x1ec>
 8006436:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006438:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800643a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800643c:	4a94      	ldr	r2, [pc, #592]	; (8006690 <_dtoa_r+0x34c>)
 800643e:	031b      	lsls	r3, r3, #12
 8006440:	0b1b      	lsrs	r3, r3, #12
 8006442:	431a      	orrs	r2, r3
 8006444:	0011      	movs	r1, r2
 8006446:	4b93      	ldr	r3, [pc, #588]	; (8006694 <_dtoa_r+0x350>)
 8006448:	9416      	str	r4, [sp, #88]	; 0x58
 800644a:	18f6      	adds	r6, r6, r3
 800644c:	2200      	movs	r2, #0
 800644e:	4b92      	ldr	r3, [pc, #584]	; (8006698 <_dtoa_r+0x354>)
 8006450:	f7fb fe2a 	bl	80020a8 <__aeabi_dsub>
 8006454:	4a91      	ldr	r2, [pc, #580]	; (800669c <_dtoa_r+0x358>)
 8006456:	4b92      	ldr	r3, [pc, #584]	; (80066a0 <_dtoa_r+0x35c>)
 8006458:	f7fb fbba 	bl	8001bd0 <__aeabi_dmul>
 800645c:	4a91      	ldr	r2, [pc, #580]	; (80066a4 <_dtoa_r+0x360>)
 800645e:	4b92      	ldr	r3, [pc, #584]	; (80066a8 <_dtoa_r+0x364>)
 8006460:	f7fa fc46 	bl	8000cf0 <__aeabi_dadd>
 8006464:	0004      	movs	r4, r0
 8006466:	0030      	movs	r0, r6
 8006468:	000d      	movs	r5, r1
 800646a:	f7fc fa03 	bl	8002874 <__aeabi_i2d>
 800646e:	4a8f      	ldr	r2, [pc, #572]	; (80066ac <_dtoa_r+0x368>)
 8006470:	4b8f      	ldr	r3, [pc, #572]	; (80066b0 <_dtoa_r+0x36c>)
 8006472:	f7fb fbad 	bl	8001bd0 <__aeabi_dmul>
 8006476:	0002      	movs	r2, r0
 8006478:	000b      	movs	r3, r1
 800647a:	0020      	movs	r0, r4
 800647c:	0029      	movs	r1, r5
 800647e:	f7fa fc37 	bl	8000cf0 <__aeabi_dadd>
 8006482:	0004      	movs	r4, r0
 8006484:	000d      	movs	r5, r1
 8006486:	f7fc f9bf 	bl	8002808 <__aeabi_d2iz>
 800648a:	2200      	movs	r2, #0
 800648c:	9002      	str	r0, [sp, #8]
 800648e:	2300      	movs	r3, #0
 8006490:	0020      	movs	r0, r4
 8006492:	0029      	movs	r1, r5
 8006494:	f7f9 ffdc 	bl	8000450 <__aeabi_dcmplt>
 8006498:	2800      	cmp	r0, #0
 800649a:	d00b      	beq.n	80064b4 <_dtoa_r+0x170>
 800649c:	9802      	ldr	r0, [sp, #8]
 800649e:	f7fc f9e9 	bl	8002874 <__aeabi_i2d>
 80064a2:	002b      	movs	r3, r5
 80064a4:	0022      	movs	r2, r4
 80064a6:	f7f9 ffcd 	bl	8000444 <__aeabi_dcmpeq>
 80064aa:	4243      	negs	r3, r0
 80064ac:	4158      	adcs	r0, r3
 80064ae:	9b02      	ldr	r3, [sp, #8]
 80064b0:	1a1b      	subs	r3, r3, r0
 80064b2:	9302      	str	r3, [sp, #8]
 80064b4:	2301      	movs	r3, #1
 80064b6:	9315      	str	r3, [sp, #84]	; 0x54
 80064b8:	9b02      	ldr	r3, [sp, #8]
 80064ba:	2b16      	cmp	r3, #22
 80064bc:	d80f      	bhi.n	80064de <_dtoa_r+0x19a>
 80064be:	9812      	ldr	r0, [sp, #72]	; 0x48
 80064c0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80064c2:	00da      	lsls	r2, r3, #3
 80064c4:	4b7b      	ldr	r3, [pc, #492]	; (80066b4 <_dtoa_r+0x370>)
 80064c6:	189b      	adds	r3, r3, r2
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f7f9 ffc0 	bl	8000450 <__aeabi_dcmplt>
 80064d0:	2800      	cmp	r0, #0
 80064d2:	d049      	beq.n	8006568 <_dtoa_r+0x224>
 80064d4:	9b02      	ldr	r3, [sp, #8]
 80064d6:	3b01      	subs	r3, #1
 80064d8:	9302      	str	r3, [sp, #8]
 80064da:	2300      	movs	r3, #0
 80064dc:	9315      	str	r3, [sp, #84]	; 0x54
 80064de:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80064e0:	1b9e      	subs	r6, r3, r6
 80064e2:	2300      	movs	r3, #0
 80064e4:	9308      	str	r3, [sp, #32]
 80064e6:	0033      	movs	r3, r6
 80064e8:	3b01      	subs	r3, #1
 80064ea:	930d      	str	r3, [sp, #52]	; 0x34
 80064ec:	d504      	bpl.n	80064f8 <_dtoa_r+0x1b4>
 80064ee:	2301      	movs	r3, #1
 80064f0:	1b9b      	subs	r3, r3, r6
 80064f2:	9308      	str	r3, [sp, #32]
 80064f4:	2300      	movs	r3, #0
 80064f6:	930d      	str	r3, [sp, #52]	; 0x34
 80064f8:	9b02      	ldr	r3, [sp, #8]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	db36      	blt.n	800656c <_dtoa_r+0x228>
 80064fe:	9a02      	ldr	r2, [sp, #8]
 8006500:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006502:	4694      	mov	ip, r2
 8006504:	4463      	add	r3, ip
 8006506:	930d      	str	r3, [sp, #52]	; 0x34
 8006508:	2300      	movs	r3, #0
 800650a:	9214      	str	r2, [sp, #80]	; 0x50
 800650c:	930e      	str	r3, [sp, #56]	; 0x38
 800650e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006510:	2401      	movs	r4, #1
 8006512:	2b09      	cmp	r3, #9
 8006514:	d862      	bhi.n	80065dc <_dtoa_r+0x298>
 8006516:	2b05      	cmp	r3, #5
 8006518:	dd02      	ble.n	8006520 <_dtoa_r+0x1dc>
 800651a:	2400      	movs	r4, #0
 800651c:	3b04      	subs	r3, #4
 800651e:	9322      	str	r3, [sp, #136]	; 0x88
 8006520:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006522:	1e98      	subs	r0, r3, #2
 8006524:	2803      	cmp	r0, #3
 8006526:	d862      	bhi.n	80065ee <_dtoa_r+0x2aa>
 8006528:	f7f9 fdf2 	bl	8000110 <__gnu_thumb1_case_uqi>
 800652c:	56343629 	.word	0x56343629
 8006530:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006532:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006534:	189e      	adds	r6, r3, r2
 8006536:	4b60      	ldr	r3, [pc, #384]	; (80066b8 <_dtoa_r+0x374>)
 8006538:	18f2      	adds	r2, r6, r3
 800653a:	2a20      	cmp	r2, #32
 800653c:	dd0f      	ble.n	800655e <_dtoa_r+0x21a>
 800653e:	2340      	movs	r3, #64	; 0x40
 8006540:	1a9b      	subs	r3, r3, r2
 8006542:	409d      	lsls	r5, r3
 8006544:	4b5d      	ldr	r3, [pc, #372]	; (80066bc <_dtoa_r+0x378>)
 8006546:	9802      	ldr	r0, [sp, #8]
 8006548:	18f3      	adds	r3, r6, r3
 800654a:	40d8      	lsrs	r0, r3
 800654c:	4328      	orrs	r0, r5
 800654e:	f7fc f9c1 	bl	80028d4 <__aeabi_ui2d>
 8006552:	2301      	movs	r3, #1
 8006554:	4c5a      	ldr	r4, [pc, #360]	; (80066c0 <_dtoa_r+0x37c>)
 8006556:	3e01      	subs	r6, #1
 8006558:	1909      	adds	r1, r1, r4
 800655a:	9316      	str	r3, [sp, #88]	; 0x58
 800655c:	e776      	b.n	800644c <_dtoa_r+0x108>
 800655e:	2320      	movs	r3, #32
 8006560:	9802      	ldr	r0, [sp, #8]
 8006562:	1a9b      	subs	r3, r3, r2
 8006564:	4098      	lsls	r0, r3
 8006566:	e7f2      	b.n	800654e <_dtoa_r+0x20a>
 8006568:	9015      	str	r0, [sp, #84]	; 0x54
 800656a:	e7b8      	b.n	80064de <_dtoa_r+0x19a>
 800656c:	9b08      	ldr	r3, [sp, #32]
 800656e:	9a02      	ldr	r2, [sp, #8]
 8006570:	1a9b      	subs	r3, r3, r2
 8006572:	9308      	str	r3, [sp, #32]
 8006574:	4253      	negs	r3, r2
 8006576:	930e      	str	r3, [sp, #56]	; 0x38
 8006578:	2300      	movs	r3, #0
 800657a:	9314      	str	r3, [sp, #80]	; 0x50
 800657c:	e7c7      	b.n	800650e <_dtoa_r+0x1ca>
 800657e:	2300      	movs	r3, #0
 8006580:	930f      	str	r3, [sp, #60]	; 0x3c
 8006582:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006584:	2b00      	cmp	r3, #0
 8006586:	dc36      	bgt.n	80065f6 <_dtoa_r+0x2b2>
 8006588:	2301      	movs	r3, #1
 800658a:	001a      	movs	r2, r3
 800658c:	930c      	str	r3, [sp, #48]	; 0x30
 800658e:	9306      	str	r3, [sp, #24]
 8006590:	9223      	str	r2, [sp, #140]	; 0x8c
 8006592:	e00d      	b.n	80065b0 <_dtoa_r+0x26c>
 8006594:	2301      	movs	r3, #1
 8006596:	e7f3      	b.n	8006580 <_dtoa_r+0x23c>
 8006598:	2300      	movs	r3, #0
 800659a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800659c:	930f      	str	r3, [sp, #60]	; 0x3c
 800659e:	4694      	mov	ip, r2
 80065a0:	9b02      	ldr	r3, [sp, #8]
 80065a2:	4463      	add	r3, ip
 80065a4:	930c      	str	r3, [sp, #48]	; 0x30
 80065a6:	3301      	adds	r3, #1
 80065a8:	9306      	str	r3, [sp, #24]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	dc00      	bgt.n	80065b0 <_dtoa_r+0x26c>
 80065ae:	2301      	movs	r3, #1
 80065b0:	2200      	movs	r2, #0
 80065b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065b4:	6042      	str	r2, [r0, #4]
 80065b6:	3204      	adds	r2, #4
 80065b8:	0015      	movs	r5, r2
 80065ba:	3514      	adds	r5, #20
 80065bc:	6841      	ldr	r1, [r0, #4]
 80065be:	429d      	cmp	r5, r3
 80065c0:	d91d      	bls.n	80065fe <_dtoa_r+0x2ba>
 80065c2:	0038      	movs	r0, r7
 80065c4:	f000 fcfe 	bl	8006fc4 <_Balloc>
 80065c8:	9005      	str	r0, [sp, #20]
 80065ca:	2800      	cmp	r0, #0
 80065cc:	d11b      	bne.n	8006606 <_dtoa_r+0x2c2>
 80065ce:	21d5      	movs	r1, #213	; 0xd5
 80065d0:	0002      	movs	r2, r0
 80065d2:	4b3c      	ldr	r3, [pc, #240]	; (80066c4 <_dtoa_r+0x380>)
 80065d4:	0049      	lsls	r1, r1, #1
 80065d6:	e6ca      	b.n	800636e <_dtoa_r+0x2a>
 80065d8:	2301      	movs	r3, #1
 80065da:	e7de      	b.n	800659a <_dtoa_r+0x256>
 80065dc:	2300      	movs	r3, #0
 80065de:	940f      	str	r4, [sp, #60]	; 0x3c
 80065e0:	9322      	str	r3, [sp, #136]	; 0x88
 80065e2:	3b01      	subs	r3, #1
 80065e4:	930c      	str	r3, [sp, #48]	; 0x30
 80065e6:	9306      	str	r3, [sp, #24]
 80065e8:	2200      	movs	r2, #0
 80065ea:	3313      	adds	r3, #19
 80065ec:	e7d0      	b.n	8006590 <_dtoa_r+0x24c>
 80065ee:	2301      	movs	r3, #1
 80065f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80065f2:	3b02      	subs	r3, #2
 80065f4:	e7f6      	b.n	80065e4 <_dtoa_r+0x2a0>
 80065f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065f8:	930c      	str	r3, [sp, #48]	; 0x30
 80065fa:	9306      	str	r3, [sp, #24]
 80065fc:	e7d8      	b.n	80065b0 <_dtoa_r+0x26c>
 80065fe:	3101      	adds	r1, #1
 8006600:	6041      	str	r1, [r0, #4]
 8006602:	0052      	lsls	r2, r2, #1
 8006604:	e7d8      	b.n	80065b8 <_dtoa_r+0x274>
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	9a05      	ldr	r2, [sp, #20]
 800660a:	601a      	str	r2, [r3, #0]
 800660c:	9b06      	ldr	r3, [sp, #24]
 800660e:	2b0e      	cmp	r3, #14
 8006610:	d900      	bls.n	8006614 <_dtoa_r+0x2d0>
 8006612:	e0eb      	b.n	80067ec <_dtoa_r+0x4a8>
 8006614:	2c00      	cmp	r4, #0
 8006616:	d100      	bne.n	800661a <_dtoa_r+0x2d6>
 8006618:	e0e8      	b.n	80067ec <_dtoa_r+0x4a8>
 800661a:	9b02      	ldr	r3, [sp, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	dd68      	ble.n	80066f2 <_dtoa_r+0x3ae>
 8006620:	001a      	movs	r2, r3
 8006622:	210f      	movs	r1, #15
 8006624:	4b23      	ldr	r3, [pc, #140]	; (80066b4 <_dtoa_r+0x370>)
 8006626:	400a      	ands	r2, r1
 8006628:	00d2      	lsls	r2, r2, #3
 800662a:	189b      	adds	r3, r3, r2
 800662c:	681d      	ldr	r5, [r3, #0]
 800662e:	685e      	ldr	r6, [r3, #4]
 8006630:	9b02      	ldr	r3, [sp, #8]
 8006632:	111c      	asrs	r4, r3, #4
 8006634:	2302      	movs	r3, #2
 8006636:	9310      	str	r3, [sp, #64]	; 0x40
 8006638:	9b02      	ldr	r3, [sp, #8]
 800663a:	05db      	lsls	r3, r3, #23
 800663c:	d50b      	bpl.n	8006656 <_dtoa_r+0x312>
 800663e:	4b22      	ldr	r3, [pc, #136]	; (80066c8 <_dtoa_r+0x384>)
 8006640:	400c      	ands	r4, r1
 8006642:	6a1a      	ldr	r2, [r3, #32]
 8006644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006646:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006648:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800664a:	f7fa febb 	bl	80013c4 <__aeabi_ddiv>
 800664e:	2303      	movs	r3, #3
 8006650:	900a      	str	r0, [sp, #40]	; 0x28
 8006652:	910b      	str	r1, [sp, #44]	; 0x2c
 8006654:	9310      	str	r3, [sp, #64]	; 0x40
 8006656:	4b1c      	ldr	r3, [pc, #112]	; (80066c8 <_dtoa_r+0x384>)
 8006658:	9307      	str	r3, [sp, #28]
 800665a:	2c00      	cmp	r4, #0
 800665c:	d136      	bne.n	80066cc <_dtoa_r+0x388>
 800665e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006660:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006662:	002a      	movs	r2, r5
 8006664:	0033      	movs	r3, r6
 8006666:	f7fa fead 	bl	80013c4 <__aeabi_ddiv>
 800666a:	900a      	str	r0, [sp, #40]	; 0x28
 800666c:	910b      	str	r1, [sp, #44]	; 0x2c
 800666e:	e05c      	b.n	800672a <_dtoa_r+0x3e6>
 8006670:	0800866d 	.word	0x0800866d
 8006674:	08008684 	.word	0x08008684
 8006678:	7ff00000 	.word	0x7ff00000
 800667c:	0000270f 	.word	0x0000270f
 8006680:	08008669 	.word	0x08008669
 8006684:	0800866c 	.word	0x0800866c
 8006688:	0800863c 	.word	0x0800863c
 800668c:	0800863d 	.word	0x0800863d
 8006690:	3ff00000 	.word	0x3ff00000
 8006694:	fffffc01 	.word	0xfffffc01
 8006698:	3ff80000 	.word	0x3ff80000
 800669c:	636f4361 	.word	0x636f4361
 80066a0:	3fd287a7 	.word	0x3fd287a7
 80066a4:	8b60c8b3 	.word	0x8b60c8b3
 80066a8:	3fc68a28 	.word	0x3fc68a28
 80066ac:	509f79fb 	.word	0x509f79fb
 80066b0:	3fd34413 	.word	0x3fd34413
 80066b4:	08008780 	.word	0x08008780
 80066b8:	00000432 	.word	0x00000432
 80066bc:	00000412 	.word	0x00000412
 80066c0:	fe100000 	.word	0xfe100000
 80066c4:	080086e3 	.word	0x080086e3
 80066c8:	08008758 	.word	0x08008758
 80066cc:	2301      	movs	r3, #1
 80066ce:	421c      	tst	r4, r3
 80066d0:	d00b      	beq.n	80066ea <_dtoa_r+0x3a6>
 80066d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80066d4:	0028      	movs	r0, r5
 80066d6:	3301      	adds	r3, #1
 80066d8:	9310      	str	r3, [sp, #64]	; 0x40
 80066da:	9b07      	ldr	r3, [sp, #28]
 80066dc:	0031      	movs	r1, r6
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f7fb fa75 	bl	8001bd0 <__aeabi_dmul>
 80066e6:	0005      	movs	r5, r0
 80066e8:	000e      	movs	r6, r1
 80066ea:	9b07      	ldr	r3, [sp, #28]
 80066ec:	1064      	asrs	r4, r4, #1
 80066ee:	3308      	adds	r3, #8
 80066f0:	e7b2      	b.n	8006658 <_dtoa_r+0x314>
 80066f2:	2302      	movs	r3, #2
 80066f4:	9310      	str	r3, [sp, #64]	; 0x40
 80066f6:	9b02      	ldr	r3, [sp, #8]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d016      	beq.n	800672a <_dtoa_r+0x3e6>
 80066fc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80066fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006700:	425c      	negs	r4, r3
 8006702:	230f      	movs	r3, #15
 8006704:	4ab5      	ldr	r2, [pc, #724]	; (80069dc <_dtoa_r+0x698>)
 8006706:	4023      	ands	r3, r4
 8006708:	00db      	lsls	r3, r3, #3
 800670a:	18d3      	adds	r3, r2, r3
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f7fb fa5e 	bl	8001bd0 <__aeabi_dmul>
 8006714:	2601      	movs	r6, #1
 8006716:	2300      	movs	r3, #0
 8006718:	900a      	str	r0, [sp, #40]	; 0x28
 800671a:	910b      	str	r1, [sp, #44]	; 0x2c
 800671c:	4db0      	ldr	r5, [pc, #704]	; (80069e0 <_dtoa_r+0x69c>)
 800671e:	1124      	asrs	r4, r4, #4
 8006720:	2c00      	cmp	r4, #0
 8006722:	d000      	beq.n	8006726 <_dtoa_r+0x3e2>
 8006724:	e094      	b.n	8006850 <_dtoa_r+0x50c>
 8006726:	2b00      	cmp	r3, #0
 8006728:	d19f      	bne.n	800666a <_dtoa_r+0x326>
 800672a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800672c:	2b00      	cmp	r3, #0
 800672e:	d100      	bne.n	8006732 <_dtoa_r+0x3ee>
 8006730:	e09b      	b.n	800686a <_dtoa_r+0x526>
 8006732:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006734:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006736:	2200      	movs	r2, #0
 8006738:	0020      	movs	r0, r4
 800673a:	0029      	movs	r1, r5
 800673c:	4ba9      	ldr	r3, [pc, #676]	; (80069e4 <_dtoa_r+0x6a0>)
 800673e:	f7f9 fe87 	bl	8000450 <__aeabi_dcmplt>
 8006742:	2800      	cmp	r0, #0
 8006744:	d100      	bne.n	8006748 <_dtoa_r+0x404>
 8006746:	e090      	b.n	800686a <_dtoa_r+0x526>
 8006748:	9b06      	ldr	r3, [sp, #24]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d100      	bne.n	8006750 <_dtoa_r+0x40c>
 800674e:	e08c      	b.n	800686a <_dtoa_r+0x526>
 8006750:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006752:	2b00      	cmp	r3, #0
 8006754:	dd46      	ble.n	80067e4 <_dtoa_r+0x4a0>
 8006756:	9b02      	ldr	r3, [sp, #8]
 8006758:	2200      	movs	r2, #0
 800675a:	0020      	movs	r0, r4
 800675c:	0029      	movs	r1, r5
 800675e:	1e5e      	subs	r6, r3, #1
 8006760:	4ba1      	ldr	r3, [pc, #644]	; (80069e8 <_dtoa_r+0x6a4>)
 8006762:	f7fb fa35 	bl	8001bd0 <__aeabi_dmul>
 8006766:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006768:	900a      	str	r0, [sp, #40]	; 0x28
 800676a:	910b      	str	r1, [sp, #44]	; 0x2c
 800676c:	3301      	adds	r3, #1
 800676e:	9310      	str	r3, [sp, #64]	; 0x40
 8006770:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006772:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006774:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006776:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006778:	9307      	str	r3, [sp, #28]
 800677a:	f7fc f87b 	bl	8002874 <__aeabi_i2d>
 800677e:	0022      	movs	r2, r4
 8006780:	002b      	movs	r3, r5
 8006782:	f7fb fa25 	bl	8001bd0 <__aeabi_dmul>
 8006786:	2200      	movs	r2, #0
 8006788:	4b98      	ldr	r3, [pc, #608]	; (80069ec <_dtoa_r+0x6a8>)
 800678a:	f7fa fab1 	bl	8000cf0 <__aeabi_dadd>
 800678e:	9010      	str	r0, [sp, #64]	; 0x40
 8006790:	9111      	str	r1, [sp, #68]	; 0x44
 8006792:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006794:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006796:	920a      	str	r2, [sp, #40]	; 0x28
 8006798:	930b      	str	r3, [sp, #44]	; 0x2c
 800679a:	4a95      	ldr	r2, [pc, #596]	; (80069f0 <_dtoa_r+0x6ac>)
 800679c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800679e:	4694      	mov	ip, r2
 80067a0:	4463      	add	r3, ip
 80067a2:	9317      	str	r3, [sp, #92]	; 0x5c
 80067a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80067a6:	9b07      	ldr	r3, [sp, #28]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d161      	bne.n	8006870 <_dtoa_r+0x52c>
 80067ac:	2200      	movs	r2, #0
 80067ae:	0020      	movs	r0, r4
 80067b0:	0029      	movs	r1, r5
 80067b2:	4b90      	ldr	r3, [pc, #576]	; (80069f4 <_dtoa_r+0x6b0>)
 80067b4:	f7fb fc78 	bl	80020a8 <__aeabi_dsub>
 80067b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067bc:	0004      	movs	r4, r0
 80067be:	000d      	movs	r5, r1
 80067c0:	f7f9 fe5a 	bl	8000478 <__aeabi_dcmpgt>
 80067c4:	2800      	cmp	r0, #0
 80067c6:	d000      	beq.n	80067ca <_dtoa_r+0x486>
 80067c8:	e2b5      	b.n	8006d36 <_dtoa_r+0x9f2>
 80067ca:	488b      	ldr	r0, [pc, #556]	; (80069f8 <_dtoa_r+0x6b4>)
 80067cc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80067ce:	4684      	mov	ip, r0
 80067d0:	4461      	add	r1, ip
 80067d2:	000b      	movs	r3, r1
 80067d4:	0020      	movs	r0, r4
 80067d6:	0029      	movs	r1, r5
 80067d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067da:	f7f9 fe39 	bl	8000450 <__aeabi_dcmplt>
 80067de:	2800      	cmp	r0, #0
 80067e0:	d000      	beq.n	80067e4 <_dtoa_r+0x4a0>
 80067e2:	e2a5      	b.n	8006d30 <_dtoa_r+0x9ec>
 80067e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067e6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80067e8:	930a      	str	r3, [sp, #40]	; 0x28
 80067ea:	940b      	str	r4, [sp, #44]	; 0x2c
 80067ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	da00      	bge.n	80067f4 <_dtoa_r+0x4b0>
 80067f2:	e171      	b.n	8006ad8 <_dtoa_r+0x794>
 80067f4:	9a02      	ldr	r2, [sp, #8]
 80067f6:	2a0e      	cmp	r2, #14
 80067f8:	dd00      	ble.n	80067fc <_dtoa_r+0x4b8>
 80067fa:	e16d      	b.n	8006ad8 <_dtoa_r+0x794>
 80067fc:	4b77      	ldr	r3, [pc, #476]	; (80069dc <_dtoa_r+0x698>)
 80067fe:	00d2      	lsls	r2, r2, #3
 8006800:	189b      	adds	r3, r3, r2
 8006802:	685c      	ldr	r4, [r3, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	9308      	str	r3, [sp, #32]
 8006808:	9409      	str	r4, [sp, #36]	; 0x24
 800680a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800680c:	2b00      	cmp	r3, #0
 800680e:	db00      	blt.n	8006812 <_dtoa_r+0x4ce>
 8006810:	e0f6      	b.n	8006a00 <_dtoa_r+0x6bc>
 8006812:	9b06      	ldr	r3, [sp, #24]
 8006814:	2b00      	cmp	r3, #0
 8006816:	dd00      	ble.n	800681a <_dtoa_r+0x4d6>
 8006818:	e0f2      	b.n	8006a00 <_dtoa_r+0x6bc>
 800681a:	d000      	beq.n	800681e <_dtoa_r+0x4da>
 800681c:	e288      	b.n	8006d30 <_dtoa_r+0x9ec>
 800681e:	9808      	ldr	r0, [sp, #32]
 8006820:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006822:	2200      	movs	r2, #0
 8006824:	4b73      	ldr	r3, [pc, #460]	; (80069f4 <_dtoa_r+0x6b0>)
 8006826:	f7fb f9d3 	bl	8001bd0 <__aeabi_dmul>
 800682a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800682c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800682e:	f7f9 fe2d 	bl	800048c <__aeabi_dcmpge>
 8006832:	9e06      	ldr	r6, [sp, #24]
 8006834:	0035      	movs	r5, r6
 8006836:	2800      	cmp	r0, #0
 8006838:	d000      	beq.n	800683c <_dtoa_r+0x4f8>
 800683a:	e25f      	b.n	8006cfc <_dtoa_r+0x9b8>
 800683c:	9b05      	ldr	r3, [sp, #20]
 800683e:	9a05      	ldr	r2, [sp, #20]
 8006840:	3301      	adds	r3, #1
 8006842:	9307      	str	r3, [sp, #28]
 8006844:	2331      	movs	r3, #49	; 0x31
 8006846:	7013      	strb	r3, [r2, #0]
 8006848:	9b02      	ldr	r3, [sp, #8]
 800684a:	3301      	adds	r3, #1
 800684c:	9302      	str	r3, [sp, #8]
 800684e:	e25a      	b.n	8006d06 <_dtoa_r+0x9c2>
 8006850:	4234      	tst	r4, r6
 8006852:	d007      	beq.n	8006864 <_dtoa_r+0x520>
 8006854:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006856:	3301      	adds	r3, #1
 8006858:	9310      	str	r3, [sp, #64]	; 0x40
 800685a:	682a      	ldr	r2, [r5, #0]
 800685c:	686b      	ldr	r3, [r5, #4]
 800685e:	f7fb f9b7 	bl	8001bd0 <__aeabi_dmul>
 8006862:	0033      	movs	r3, r6
 8006864:	1064      	asrs	r4, r4, #1
 8006866:	3508      	adds	r5, #8
 8006868:	e75a      	b.n	8006720 <_dtoa_r+0x3dc>
 800686a:	9e02      	ldr	r6, [sp, #8]
 800686c:	9b06      	ldr	r3, [sp, #24]
 800686e:	e780      	b.n	8006772 <_dtoa_r+0x42e>
 8006870:	9b07      	ldr	r3, [sp, #28]
 8006872:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006874:	1e5a      	subs	r2, r3, #1
 8006876:	4b59      	ldr	r3, [pc, #356]	; (80069dc <_dtoa_r+0x698>)
 8006878:	00d2      	lsls	r2, r2, #3
 800687a:	189b      	adds	r3, r3, r2
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	2900      	cmp	r1, #0
 8006882:	d051      	beq.n	8006928 <_dtoa_r+0x5e4>
 8006884:	2000      	movs	r0, #0
 8006886:	495d      	ldr	r1, [pc, #372]	; (80069fc <_dtoa_r+0x6b8>)
 8006888:	f7fa fd9c 	bl	80013c4 <__aeabi_ddiv>
 800688c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800688e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006890:	f7fb fc0a 	bl	80020a8 <__aeabi_dsub>
 8006894:	9a05      	ldr	r2, [sp, #20]
 8006896:	9b05      	ldr	r3, [sp, #20]
 8006898:	4694      	mov	ip, r2
 800689a:	9310      	str	r3, [sp, #64]	; 0x40
 800689c:	9b07      	ldr	r3, [sp, #28]
 800689e:	900a      	str	r0, [sp, #40]	; 0x28
 80068a0:	910b      	str	r1, [sp, #44]	; 0x2c
 80068a2:	4463      	add	r3, ip
 80068a4:	9319      	str	r3, [sp, #100]	; 0x64
 80068a6:	0029      	movs	r1, r5
 80068a8:	0020      	movs	r0, r4
 80068aa:	f7fb ffad 	bl	8002808 <__aeabi_d2iz>
 80068ae:	9017      	str	r0, [sp, #92]	; 0x5c
 80068b0:	f7fb ffe0 	bl	8002874 <__aeabi_i2d>
 80068b4:	0002      	movs	r2, r0
 80068b6:	000b      	movs	r3, r1
 80068b8:	0020      	movs	r0, r4
 80068ba:	0029      	movs	r1, r5
 80068bc:	f7fb fbf4 	bl	80020a8 <__aeabi_dsub>
 80068c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068c4:	3301      	adds	r3, #1
 80068c6:	9307      	str	r3, [sp, #28]
 80068c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068ca:	0004      	movs	r4, r0
 80068cc:	3330      	adds	r3, #48	; 0x30
 80068ce:	7013      	strb	r3, [r2, #0]
 80068d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068d4:	000d      	movs	r5, r1
 80068d6:	f7f9 fdbb 	bl	8000450 <__aeabi_dcmplt>
 80068da:	2800      	cmp	r0, #0
 80068dc:	d175      	bne.n	80069ca <_dtoa_r+0x686>
 80068de:	0022      	movs	r2, r4
 80068e0:	002b      	movs	r3, r5
 80068e2:	2000      	movs	r0, #0
 80068e4:	493f      	ldr	r1, [pc, #252]	; (80069e4 <_dtoa_r+0x6a0>)
 80068e6:	f7fb fbdf 	bl	80020a8 <__aeabi_dsub>
 80068ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068ee:	f7f9 fdaf 	bl	8000450 <__aeabi_dcmplt>
 80068f2:	2800      	cmp	r0, #0
 80068f4:	d000      	beq.n	80068f8 <_dtoa_r+0x5b4>
 80068f6:	e0d1      	b.n	8006a9c <_dtoa_r+0x758>
 80068f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068fa:	9a07      	ldr	r2, [sp, #28]
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d100      	bne.n	8006902 <_dtoa_r+0x5be>
 8006900:	e770      	b.n	80067e4 <_dtoa_r+0x4a0>
 8006902:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006904:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006906:	2200      	movs	r2, #0
 8006908:	4b37      	ldr	r3, [pc, #220]	; (80069e8 <_dtoa_r+0x6a4>)
 800690a:	f7fb f961 	bl	8001bd0 <__aeabi_dmul>
 800690e:	4b36      	ldr	r3, [pc, #216]	; (80069e8 <_dtoa_r+0x6a4>)
 8006910:	900a      	str	r0, [sp, #40]	; 0x28
 8006912:	910b      	str	r1, [sp, #44]	; 0x2c
 8006914:	2200      	movs	r2, #0
 8006916:	0020      	movs	r0, r4
 8006918:	0029      	movs	r1, r5
 800691a:	f7fb f959 	bl	8001bd0 <__aeabi_dmul>
 800691e:	9b07      	ldr	r3, [sp, #28]
 8006920:	0004      	movs	r4, r0
 8006922:	000d      	movs	r5, r1
 8006924:	9310      	str	r3, [sp, #64]	; 0x40
 8006926:	e7be      	b.n	80068a6 <_dtoa_r+0x562>
 8006928:	980a      	ldr	r0, [sp, #40]	; 0x28
 800692a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800692c:	f7fb f950 	bl	8001bd0 <__aeabi_dmul>
 8006930:	9a05      	ldr	r2, [sp, #20]
 8006932:	9b05      	ldr	r3, [sp, #20]
 8006934:	4694      	mov	ip, r2
 8006936:	930a      	str	r3, [sp, #40]	; 0x28
 8006938:	9b07      	ldr	r3, [sp, #28]
 800693a:	9010      	str	r0, [sp, #64]	; 0x40
 800693c:	9111      	str	r1, [sp, #68]	; 0x44
 800693e:	4463      	add	r3, ip
 8006940:	9319      	str	r3, [sp, #100]	; 0x64
 8006942:	0029      	movs	r1, r5
 8006944:	0020      	movs	r0, r4
 8006946:	f7fb ff5f 	bl	8002808 <__aeabi_d2iz>
 800694a:	9017      	str	r0, [sp, #92]	; 0x5c
 800694c:	f7fb ff92 	bl	8002874 <__aeabi_i2d>
 8006950:	0002      	movs	r2, r0
 8006952:	000b      	movs	r3, r1
 8006954:	0020      	movs	r0, r4
 8006956:	0029      	movs	r1, r5
 8006958:	f7fb fba6 	bl	80020a8 <__aeabi_dsub>
 800695c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800695e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006960:	3330      	adds	r3, #48	; 0x30
 8006962:	7013      	strb	r3, [r2, #0]
 8006964:	0013      	movs	r3, r2
 8006966:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006968:	3301      	adds	r3, #1
 800696a:	0004      	movs	r4, r0
 800696c:	000d      	movs	r5, r1
 800696e:	930a      	str	r3, [sp, #40]	; 0x28
 8006970:	4293      	cmp	r3, r2
 8006972:	d12c      	bne.n	80069ce <_dtoa_r+0x68a>
 8006974:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006976:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006978:	9a05      	ldr	r2, [sp, #20]
 800697a:	9b07      	ldr	r3, [sp, #28]
 800697c:	4694      	mov	ip, r2
 800697e:	4463      	add	r3, ip
 8006980:	2200      	movs	r2, #0
 8006982:	9307      	str	r3, [sp, #28]
 8006984:	4b1d      	ldr	r3, [pc, #116]	; (80069fc <_dtoa_r+0x6b8>)
 8006986:	f7fa f9b3 	bl	8000cf0 <__aeabi_dadd>
 800698a:	0002      	movs	r2, r0
 800698c:	000b      	movs	r3, r1
 800698e:	0020      	movs	r0, r4
 8006990:	0029      	movs	r1, r5
 8006992:	f7f9 fd71 	bl	8000478 <__aeabi_dcmpgt>
 8006996:	2800      	cmp	r0, #0
 8006998:	d000      	beq.n	800699c <_dtoa_r+0x658>
 800699a:	e07f      	b.n	8006a9c <_dtoa_r+0x758>
 800699c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800699e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069a0:	2000      	movs	r0, #0
 80069a2:	4916      	ldr	r1, [pc, #88]	; (80069fc <_dtoa_r+0x6b8>)
 80069a4:	f7fb fb80 	bl	80020a8 <__aeabi_dsub>
 80069a8:	0002      	movs	r2, r0
 80069aa:	000b      	movs	r3, r1
 80069ac:	0020      	movs	r0, r4
 80069ae:	0029      	movs	r1, r5
 80069b0:	f7f9 fd4e 	bl	8000450 <__aeabi_dcmplt>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	d100      	bne.n	80069ba <_dtoa_r+0x676>
 80069b8:	e714      	b.n	80067e4 <_dtoa_r+0x4a0>
 80069ba:	9b07      	ldr	r3, [sp, #28]
 80069bc:	001a      	movs	r2, r3
 80069be:	3a01      	subs	r2, #1
 80069c0:	9207      	str	r2, [sp, #28]
 80069c2:	7812      	ldrb	r2, [r2, #0]
 80069c4:	2a30      	cmp	r2, #48	; 0x30
 80069c6:	d0f8      	beq.n	80069ba <_dtoa_r+0x676>
 80069c8:	9307      	str	r3, [sp, #28]
 80069ca:	9602      	str	r6, [sp, #8]
 80069cc:	e054      	b.n	8006a78 <_dtoa_r+0x734>
 80069ce:	2200      	movs	r2, #0
 80069d0:	4b05      	ldr	r3, [pc, #20]	; (80069e8 <_dtoa_r+0x6a4>)
 80069d2:	f7fb f8fd 	bl	8001bd0 <__aeabi_dmul>
 80069d6:	0004      	movs	r4, r0
 80069d8:	000d      	movs	r5, r1
 80069da:	e7b2      	b.n	8006942 <_dtoa_r+0x5fe>
 80069dc:	08008780 	.word	0x08008780
 80069e0:	08008758 	.word	0x08008758
 80069e4:	3ff00000 	.word	0x3ff00000
 80069e8:	40240000 	.word	0x40240000
 80069ec:	401c0000 	.word	0x401c0000
 80069f0:	fcc00000 	.word	0xfcc00000
 80069f4:	40140000 	.word	0x40140000
 80069f8:	7cc00000 	.word	0x7cc00000
 80069fc:	3fe00000 	.word	0x3fe00000
 8006a00:	9b06      	ldr	r3, [sp, #24]
 8006a02:	9e05      	ldr	r6, [sp, #20]
 8006a04:	3b01      	subs	r3, #1
 8006a06:	199b      	adds	r3, r3, r6
 8006a08:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006a0a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006a0c:	930a      	str	r3, [sp, #40]	; 0x28
 8006a0e:	9a08      	ldr	r2, [sp, #32]
 8006a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a12:	0020      	movs	r0, r4
 8006a14:	0029      	movs	r1, r5
 8006a16:	f7fa fcd5 	bl	80013c4 <__aeabi_ddiv>
 8006a1a:	f7fb fef5 	bl	8002808 <__aeabi_d2iz>
 8006a1e:	9006      	str	r0, [sp, #24]
 8006a20:	f7fb ff28 	bl	8002874 <__aeabi_i2d>
 8006a24:	9a08      	ldr	r2, [sp, #32]
 8006a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a28:	f7fb f8d2 	bl	8001bd0 <__aeabi_dmul>
 8006a2c:	0002      	movs	r2, r0
 8006a2e:	000b      	movs	r3, r1
 8006a30:	0020      	movs	r0, r4
 8006a32:	0029      	movs	r1, r5
 8006a34:	f7fb fb38 	bl	80020a8 <__aeabi_dsub>
 8006a38:	0033      	movs	r3, r6
 8006a3a:	9a06      	ldr	r2, [sp, #24]
 8006a3c:	3601      	adds	r6, #1
 8006a3e:	3230      	adds	r2, #48	; 0x30
 8006a40:	701a      	strb	r2, [r3, #0]
 8006a42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a44:	9607      	str	r6, [sp, #28]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d139      	bne.n	8006abe <_dtoa_r+0x77a>
 8006a4a:	0002      	movs	r2, r0
 8006a4c:	000b      	movs	r3, r1
 8006a4e:	f7fa f94f 	bl	8000cf0 <__aeabi_dadd>
 8006a52:	9a08      	ldr	r2, [sp, #32]
 8006a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a56:	0004      	movs	r4, r0
 8006a58:	000d      	movs	r5, r1
 8006a5a:	f7f9 fd0d 	bl	8000478 <__aeabi_dcmpgt>
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	d11b      	bne.n	8006a9a <_dtoa_r+0x756>
 8006a62:	9a08      	ldr	r2, [sp, #32]
 8006a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a66:	0020      	movs	r0, r4
 8006a68:	0029      	movs	r1, r5
 8006a6a:	f7f9 fceb 	bl	8000444 <__aeabi_dcmpeq>
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	d002      	beq.n	8006a78 <_dtoa_r+0x734>
 8006a72:	9b06      	ldr	r3, [sp, #24]
 8006a74:	07db      	lsls	r3, r3, #31
 8006a76:	d410      	bmi.n	8006a9a <_dtoa_r+0x756>
 8006a78:	0038      	movs	r0, r7
 8006a7a:	9904      	ldr	r1, [sp, #16]
 8006a7c:	f000 fae6 	bl	800704c <_Bfree>
 8006a80:	2300      	movs	r3, #0
 8006a82:	9a07      	ldr	r2, [sp, #28]
 8006a84:	9802      	ldr	r0, [sp, #8]
 8006a86:	7013      	strb	r3, [r2, #0]
 8006a88:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	6018      	str	r0, [r3, #0]
 8006a8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d100      	bne.n	8006a96 <_dtoa_r+0x752>
 8006a94:	e4a3      	b.n	80063de <_dtoa_r+0x9a>
 8006a96:	601a      	str	r2, [r3, #0]
 8006a98:	e4a1      	b.n	80063de <_dtoa_r+0x9a>
 8006a9a:	9e02      	ldr	r6, [sp, #8]
 8006a9c:	9b07      	ldr	r3, [sp, #28]
 8006a9e:	9307      	str	r3, [sp, #28]
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	781a      	ldrb	r2, [r3, #0]
 8006aa4:	2a39      	cmp	r2, #57	; 0x39
 8006aa6:	d106      	bne.n	8006ab6 <_dtoa_r+0x772>
 8006aa8:	9a05      	ldr	r2, [sp, #20]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d1f7      	bne.n	8006a9e <_dtoa_r+0x75a>
 8006aae:	2230      	movs	r2, #48	; 0x30
 8006ab0:	9905      	ldr	r1, [sp, #20]
 8006ab2:	3601      	adds	r6, #1
 8006ab4:	700a      	strb	r2, [r1, #0]
 8006ab6:	781a      	ldrb	r2, [r3, #0]
 8006ab8:	3201      	adds	r2, #1
 8006aba:	701a      	strb	r2, [r3, #0]
 8006abc:	e785      	b.n	80069ca <_dtoa_r+0x686>
 8006abe:	2200      	movs	r2, #0
 8006ac0:	4bad      	ldr	r3, [pc, #692]	; (8006d78 <_dtoa_r+0xa34>)
 8006ac2:	f7fb f885 	bl	8001bd0 <__aeabi_dmul>
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	2300      	movs	r3, #0
 8006aca:	0004      	movs	r4, r0
 8006acc:	000d      	movs	r5, r1
 8006ace:	f7f9 fcb9 	bl	8000444 <__aeabi_dcmpeq>
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	d09b      	beq.n	8006a0e <_dtoa_r+0x6ca>
 8006ad6:	e7cf      	b.n	8006a78 <_dtoa_r+0x734>
 8006ad8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ada:	2a00      	cmp	r2, #0
 8006adc:	d100      	bne.n	8006ae0 <_dtoa_r+0x79c>
 8006ade:	e082      	b.n	8006be6 <_dtoa_r+0x8a2>
 8006ae0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006ae2:	2a01      	cmp	r2, #1
 8006ae4:	dc66      	bgt.n	8006bb4 <_dtoa_r+0x870>
 8006ae6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006ae8:	2a00      	cmp	r2, #0
 8006aea:	d05f      	beq.n	8006bac <_dtoa_r+0x868>
 8006aec:	4aa3      	ldr	r2, [pc, #652]	; (8006d7c <_dtoa_r+0xa38>)
 8006aee:	189b      	adds	r3, r3, r2
 8006af0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006af2:	9c08      	ldr	r4, [sp, #32]
 8006af4:	9a08      	ldr	r2, [sp, #32]
 8006af6:	2101      	movs	r1, #1
 8006af8:	18d2      	adds	r2, r2, r3
 8006afa:	9208      	str	r2, [sp, #32]
 8006afc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006afe:	0038      	movs	r0, r7
 8006b00:	18d3      	adds	r3, r2, r3
 8006b02:	930d      	str	r3, [sp, #52]	; 0x34
 8006b04:	f000 fb52 	bl	80071ac <__i2b>
 8006b08:	0005      	movs	r5, r0
 8006b0a:	2c00      	cmp	r4, #0
 8006b0c:	dd0e      	ble.n	8006b2c <_dtoa_r+0x7e8>
 8006b0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	dd0b      	ble.n	8006b2c <_dtoa_r+0x7e8>
 8006b14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b16:	0023      	movs	r3, r4
 8006b18:	4294      	cmp	r4, r2
 8006b1a:	dd00      	ble.n	8006b1e <_dtoa_r+0x7da>
 8006b1c:	0013      	movs	r3, r2
 8006b1e:	9a08      	ldr	r2, [sp, #32]
 8006b20:	1ae4      	subs	r4, r4, r3
 8006b22:	1ad2      	subs	r2, r2, r3
 8006b24:	9208      	str	r2, [sp, #32]
 8006b26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	930d      	str	r3, [sp, #52]	; 0x34
 8006b2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d01f      	beq.n	8006b72 <_dtoa_r+0x82e>
 8006b32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d05a      	beq.n	8006bee <_dtoa_r+0x8aa>
 8006b38:	2e00      	cmp	r6, #0
 8006b3a:	dd11      	ble.n	8006b60 <_dtoa_r+0x81c>
 8006b3c:	0029      	movs	r1, r5
 8006b3e:	0032      	movs	r2, r6
 8006b40:	0038      	movs	r0, r7
 8006b42:	f000 fbf9 	bl	8007338 <__pow5mult>
 8006b46:	9a04      	ldr	r2, [sp, #16]
 8006b48:	0001      	movs	r1, r0
 8006b4a:	0005      	movs	r5, r0
 8006b4c:	0038      	movs	r0, r7
 8006b4e:	f000 fb43 	bl	80071d8 <__multiply>
 8006b52:	9904      	ldr	r1, [sp, #16]
 8006b54:	9007      	str	r0, [sp, #28]
 8006b56:	0038      	movs	r0, r7
 8006b58:	f000 fa78 	bl	800704c <_Bfree>
 8006b5c:	9b07      	ldr	r3, [sp, #28]
 8006b5e:	9304      	str	r3, [sp, #16]
 8006b60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b62:	1b9a      	subs	r2, r3, r6
 8006b64:	42b3      	cmp	r3, r6
 8006b66:	d004      	beq.n	8006b72 <_dtoa_r+0x82e>
 8006b68:	0038      	movs	r0, r7
 8006b6a:	9904      	ldr	r1, [sp, #16]
 8006b6c:	f000 fbe4 	bl	8007338 <__pow5mult>
 8006b70:	9004      	str	r0, [sp, #16]
 8006b72:	2101      	movs	r1, #1
 8006b74:	0038      	movs	r0, r7
 8006b76:	f000 fb19 	bl	80071ac <__i2b>
 8006b7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b7c:	0006      	movs	r6, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	dd37      	ble.n	8006bf2 <_dtoa_r+0x8ae>
 8006b82:	001a      	movs	r2, r3
 8006b84:	0001      	movs	r1, r0
 8006b86:	0038      	movs	r0, r7
 8006b88:	f000 fbd6 	bl	8007338 <__pow5mult>
 8006b8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b8e:	0006      	movs	r6, r0
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	dd33      	ble.n	8006bfc <_dtoa_r+0x8b8>
 8006b94:	2300      	movs	r3, #0
 8006b96:	9307      	str	r3, [sp, #28]
 8006b98:	6933      	ldr	r3, [r6, #16]
 8006b9a:	3303      	adds	r3, #3
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	18f3      	adds	r3, r6, r3
 8006ba0:	6858      	ldr	r0, [r3, #4]
 8006ba2:	f000 fabb 	bl	800711c <__hi0bits>
 8006ba6:	2320      	movs	r3, #32
 8006ba8:	1a18      	subs	r0, r3, r0
 8006baa:	e03f      	b.n	8006c2c <_dtoa_r+0x8e8>
 8006bac:	2336      	movs	r3, #54	; 0x36
 8006bae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006bb0:	1a9b      	subs	r3, r3, r2
 8006bb2:	e79d      	b.n	8006af0 <_dtoa_r+0x7ac>
 8006bb4:	9b06      	ldr	r3, [sp, #24]
 8006bb6:	1e5e      	subs	r6, r3, #1
 8006bb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bba:	42b3      	cmp	r3, r6
 8006bbc:	db08      	blt.n	8006bd0 <_dtoa_r+0x88c>
 8006bbe:	1b9e      	subs	r6, r3, r6
 8006bc0:	9b06      	ldr	r3, [sp, #24]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	da0c      	bge.n	8006be0 <_dtoa_r+0x89c>
 8006bc6:	9b08      	ldr	r3, [sp, #32]
 8006bc8:	9a06      	ldr	r2, [sp, #24]
 8006bca:	1a9c      	subs	r4, r3, r2
 8006bcc:	2300      	movs	r3, #0
 8006bce:	e791      	b.n	8006af4 <_dtoa_r+0x7b0>
 8006bd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bd2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006bd4:	1af3      	subs	r3, r6, r3
 8006bd6:	18d3      	adds	r3, r2, r3
 8006bd8:	960e      	str	r6, [sp, #56]	; 0x38
 8006bda:	9314      	str	r3, [sp, #80]	; 0x50
 8006bdc:	2600      	movs	r6, #0
 8006bde:	e7ef      	b.n	8006bc0 <_dtoa_r+0x87c>
 8006be0:	9c08      	ldr	r4, [sp, #32]
 8006be2:	9b06      	ldr	r3, [sp, #24]
 8006be4:	e786      	b.n	8006af4 <_dtoa_r+0x7b0>
 8006be6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006be8:	9c08      	ldr	r4, [sp, #32]
 8006bea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006bec:	e78d      	b.n	8006b0a <_dtoa_r+0x7c6>
 8006bee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bf0:	e7ba      	b.n	8006b68 <_dtoa_r+0x824>
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	9307      	str	r3, [sp, #28]
 8006bf6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	dc13      	bgt.n	8006c24 <_dtoa_r+0x8e0>
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	9307      	str	r3, [sp, #28]
 8006c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10e      	bne.n	8006c24 <_dtoa_r+0x8e0>
 8006c06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c08:	031b      	lsls	r3, r3, #12
 8006c0a:	d10b      	bne.n	8006c24 <_dtoa_r+0x8e0>
 8006c0c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006c0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c10:	4213      	tst	r3, r2
 8006c12:	d007      	beq.n	8006c24 <_dtoa_r+0x8e0>
 8006c14:	9b08      	ldr	r3, [sp, #32]
 8006c16:	3301      	adds	r3, #1
 8006c18:	9308      	str	r3, [sp, #32]
 8006c1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	930d      	str	r3, [sp, #52]	; 0x34
 8006c20:	2301      	movs	r3, #1
 8006c22:	9307      	str	r3, [sp, #28]
 8006c24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c26:	2001      	movs	r0, #1
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1b5      	bne.n	8006b98 <_dtoa_r+0x854>
 8006c2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c2e:	221f      	movs	r2, #31
 8006c30:	1818      	adds	r0, r3, r0
 8006c32:	0003      	movs	r3, r0
 8006c34:	4013      	ands	r3, r2
 8006c36:	4210      	tst	r0, r2
 8006c38:	d046      	beq.n	8006cc8 <_dtoa_r+0x984>
 8006c3a:	3201      	adds	r2, #1
 8006c3c:	1ad2      	subs	r2, r2, r3
 8006c3e:	2a04      	cmp	r2, #4
 8006c40:	dd3f      	ble.n	8006cc2 <_dtoa_r+0x97e>
 8006c42:	221c      	movs	r2, #28
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	9a08      	ldr	r2, [sp, #32]
 8006c48:	18e4      	adds	r4, r4, r3
 8006c4a:	18d2      	adds	r2, r2, r3
 8006c4c:	9208      	str	r2, [sp, #32]
 8006c4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c50:	18d3      	adds	r3, r2, r3
 8006c52:	930d      	str	r3, [sp, #52]	; 0x34
 8006c54:	9b08      	ldr	r3, [sp, #32]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	dd05      	ble.n	8006c66 <_dtoa_r+0x922>
 8006c5a:	001a      	movs	r2, r3
 8006c5c:	0038      	movs	r0, r7
 8006c5e:	9904      	ldr	r1, [sp, #16]
 8006c60:	f000 fbc6 	bl	80073f0 <__lshift>
 8006c64:	9004      	str	r0, [sp, #16]
 8006c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	dd05      	ble.n	8006c78 <_dtoa_r+0x934>
 8006c6c:	0031      	movs	r1, r6
 8006c6e:	001a      	movs	r2, r3
 8006c70:	0038      	movs	r0, r7
 8006c72:	f000 fbbd 	bl	80073f0 <__lshift>
 8006c76:	0006      	movs	r6, r0
 8006c78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d026      	beq.n	8006ccc <_dtoa_r+0x988>
 8006c7e:	0031      	movs	r1, r6
 8006c80:	9804      	ldr	r0, [sp, #16]
 8006c82:	f000 fc25 	bl	80074d0 <__mcmp>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	da20      	bge.n	8006ccc <_dtoa_r+0x988>
 8006c8a:	9b02      	ldr	r3, [sp, #8]
 8006c8c:	220a      	movs	r2, #10
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	9302      	str	r3, [sp, #8]
 8006c92:	0038      	movs	r0, r7
 8006c94:	2300      	movs	r3, #0
 8006c96:	9904      	ldr	r1, [sp, #16]
 8006c98:	f000 f9fc 	bl	8007094 <__multadd>
 8006c9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c9e:	9004      	str	r0, [sp, #16]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d100      	bne.n	8006ca6 <_dtoa_r+0x962>
 8006ca4:	e160      	b.n	8006f68 <_dtoa_r+0xc24>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	0029      	movs	r1, r5
 8006caa:	220a      	movs	r2, #10
 8006cac:	0038      	movs	r0, r7
 8006cae:	f000 f9f1 	bl	8007094 <__multadd>
 8006cb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cb4:	0005      	movs	r5, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	dc47      	bgt.n	8006d4a <_dtoa_r+0xa06>
 8006cba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	dc0d      	bgt.n	8006cdc <_dtoa_r+0x998>
 8006cc0:	e043      	b.n	8006d4a <_dtoa_r+0xa06>
 8006cc2:	2a04      	cmp	r2, #4
 8006cc4:	d0c6      	beq.n	8006c54 <_dtoa_r+0x910>
 8006cc6:	0013      	movs	r3, r2
 8006cc8:	331c      	adds	r3, #28
 8006cca:	e7bc      	b.n	8006c46 <_dtoa_r+0x902>
 8006ccc:	9b06      	ldr	r3, [sp, #24]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	dc35      	bgt.n	8006d3e <_dtoa_r+0x9fa>
 8006cd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	dd32      	ble.n	8006d3e <_dtoa_r+0x9fa>
 8006cd8:	9b06      	ldr	r3, [sp, #24]
 8006cda:	930c      	str	r3, [sp, #48]	; 0x30
 8006cdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10c      	bne.n	8006cfc <_dtoa_r+0x9b8>
 8006ce2:	0031      	movs	r1, r6
 8006ce4:	2205      	movs	r2, #5
 8006ce6:	0038      	movs	r0, r7
 8006ce8:	f000 f9d4 	bl	8007094 <__multadd>
 8006cec:	0006      	movs	r6, r0
 8006cee:	0001      	movs	r1, r0
 8006cf0:	9804      	ldr	r0, [sp, #16]
 8006cf2:	f000 fbed 	bl	80074d0 <__mcmp>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	dd00      	ble.n	8006cfc <_dtoa_r+0x9b8>
 8006cfa:	e59f      	b.n	800683c <_dtoa_r+0x4f8>
 8006cfc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006cfe:	43db      	mvns	r3, r3
 8006d00:	9302      	str	r3, [sp, #8]
 8006d02:	9b05      	ldr	r3, [sp, #20]
 8006d04:	9307      	str	r3, [sp, #28]
 8006d06:	2400      	movs	r4, #0
 8006d08:	0031      	movs	r1, r6
 8006d0a:	0038      	movs	r0, r7
 8006d0c:	f000 f99e 	bl	800704c <_Bfree>
 8006d10:	2d00      	cmp	r5, #0
 8006d12:	d100      	bne.n	8006d16 <_dtoa_r+0x9d2>
 8006d14:	e6b0      	b.n	8006a78 <_dtoa_r+0x734>
 8006d16:	2c00      	cmp	r4, #0
 8006d18:	d005      	beq.n	8006d26 <_dtoa_r+0x9e2>
 8006d1a:	42ac      	cmp	r4, r5
 8006d1c:	d003      	beq.n	8006d26 <_dtoa_r+0x9e2>
 8006d1e:	0021      	movs	r1, r4
 8006d20:	0038      	movs	r0, r7
 8006d22:	f000 f993 	bl	800704c <_Bfree>
 8006d26:	0029      	movs	r1, r5
 8006d28:	0038      	movs	r0, r7
 8006d2a:	f000 f98f 	bl	800704c <_Bfree>
 8006d2e:	e6a3      	b.n	8006a78 <_dtoa_r+0x734>
 8006d30:	2600      	movs	r6, #0
 8006d32:	0035      	movs	r5, r6
 8006d34:	e7e2      	b.n	8006cfc <_dtoa_r+0x9b8>
 8006d36:	9602      	str	r6, [sp, #8]
 8006d38:	9e07      	ldr	r6, [sp, #28]
 8006d3a:	0035      	movs	r5, r6
 8006d3c:	e57e      	b.n	800683c <_dtoa_r+0x4f8>
 8006d3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d100      	bne.n	8006d46 <_dtoa_r+0xa02>
 8006d44:	e0c8      	b.n	8006ed8 <_dtoa_r+0xb94>
 8006d46:	9b06      	ldr	r3, [sp, #24]
 8006d48:	930c      	str	r3, [sp, #48]	; 0x30
 8006d4a:	2c00      	cmp	r4, #0
 8006d4c:	dd05      	ble.n	8006d5a <_dtoa_r+0xa16>
 8006d4e:	0029      	movs	r1, r5
 8006d50:	0022      	movs	r2, r4
 8006d52:	0038      	movs	r0, r7
 8006d54:	f000 fb4c 	bl	80073f0 <__lshift>
 8006d58:	0005      	movs	r5, r0
 8006d5a:	9b07      	ldr	r3, [sp, #28]
 8006d5c:	0028      	movs	r0, r5
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d01f      	beq.n	8006da2 <_dtoa_r+0xa5e>
 8006d62:	0038      	movs	r0, r7
 8006d64:	6869      	ldr	r1, [r5, #4]
 8006d66:	f000 f92d 	bl	8006fc4 <_Balloc>
 8006d6a:	1e04      	subs	r4, r0, #0
 8006d6c:	d10c      	bne.n	8006d88 <_dtoa_r+0xa44>
 8006d6e:	0002      	movs	r2, r0
 8006d70:	4b03      	ldr	r3, [pc, #12]	; (8006d80 <_dtoa_r+0xa3c>)
 8006d72:	4904      	ldr	r1, [pc, #16]	; (8006d84 <_dtoa_r+0xa40>)
 8006d74:	f7ff fafb 	bl	800636e <_dtoa_r+0x2a>
 8006d78:	40240000 	.word	0x40240000
 8006d7c:	00000433 	.word	0x00000433
 8006d80:	080086e3 	.word	0x080086e3
 8006d84:	000002ea 	.word	0x000002ea
 8006d88:	0029      	movs	r1, r5
 8006d8a:	692b      	ldr	r3, [r5, #16]
 8006d8c:	310c      	adds	r1, #12
 8006d8e:	1c9a      	adds	r2, r3, #2
 8006d90:	0092      	lsls	r2, r2, #2
 8006d92:	300c      	adds	r0, #12
 8006d94:	f000 f90d 	bl	8006fb2 <memcpy>
 8006d98:	2201      	movs	r2, #1
 8006d9a:	0021      	movs	r1, r4
 8006d9c:	0038      	movs	r0, r7
 8006d9e:	f000 fb27 	bl	80073f0 <__lshift>
 8006da2:	002c      	movs	r4, r5
 8006da4:	0005      	movs	r5, r0
 8006da6:	9b05      	ldr	r3, [sp, #20]
 8006da8:	9308      	str	r3, [sp, #32]
 8006daa:	0031      	movs	r1, r6
 8006dac:	9804      	ldr	r0, [sp, #16]
 8006dae:	f7ff fa3d 	bl	800622c <quorem>
 8006db2:	0003      	movs	r3, r0
 8006db4:	0021      	movs	r1, r4
 8006db6:	3330      	adds	r3, #48	; 0x30
 8006db8:	900e      	str	r0, [sp, #56]	; 0x38
 8006dba:	9804      	ldr	r0, [sp, #16]
 8006dbc:	9306      	str	r3, [sp, #24]
 8006dbe:	f000 fb87 	bl	80074d0 <__mcmp>
 8006dc2:	002a      	movs	r2, r5
 8006dc4:	900f      	str	r0, [sp, #60]	; 0x3c
 8006dc6:	0031      	movs	r1, r6
 8006dc8:	0038      	movs	r0, r7
 8006dca:	f000 fb9d 	bl	8007508 <__mdiff>
 8006dce:	68c3      	ldr	r3, [r0, #12]
 8006dd0:	9007      	str	r0, [sp, #28]
 8006dd2:	9310      	str	r3, [sp, #64]	; 0x40
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	930d      	str	r3, [sp, #52]	; 0x34
 8006dd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d104      	bne.n	8006de8 <_dtoa_r+0xaa4>
 8006dde:	0001      	movs	r1, r0
 8006de0:	9804      	ldr	r0, [sp, #16]
 8006de2:	f000 fb75 	bl	80074d0 <__mcmp>
 8006de6:	900d      	str	r0, [sp, #52]	; 0x34
 8006de8:	0038      	movs	r0, r7
 8006dea:	9907      	ldr	r1, [sp, #28]
 8006dec:	f000 f92e 	bl	800704c <_Bfree>
 8006df0:	2301      	movs	r3, #1
 8006df2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006df4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006df6:	4018      	ands	r0, r3
 8006df8:	9b08      	ldr	r3, [sp, #32]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	9307      	str	r3, [sp, #28]
 8006dfe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e00:	4313      	orrs	r3, r2
 8006e02:	4303      	orrs	r3, r0
 8006e04:	d10c      	bne.n	8006e20 <_dtoa_r+0xadc>
 8006e06:	9b06      	ldr	r3, [sp, #24]
 8006e08:	2b39      	cmp	r3, #57	; 0x39
 8006e0a:	d025      	beq.n	8006e58 <_dtoa_r+0xb14>
 8006e0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	dd02      	ble.n	8006e18 <_dtoa_r+0xad4>
 8006e12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e14:	3331      	adds	r3, #49	; 0x31
 8006e16:	9306      	str	r3, [sp, #24]
 8006e18:	9b08      	ldr	r3, [sp, #32]
 8006e1a:	9a06      	ldr	r2, [sp, #24]
 8006e1c:	701a      	strb	r2, [r3, #0]
 8006e1e:	e773      	b.n	8006d08 <_dtoa_r+0x9c4>
 8006e20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	db03      	blt.n	8006e2e <_dtoa_r+0xaea>
 8006e26:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	4303      	orrs	r3, r0
 8006e2c:	d11f      	bne.n	8006e6e <_dtoa_r+0xb2a>
 8006e2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	ddf1      	ble.n	8006e18 <_dtoa_r+0xad4>
 8006e34:	9904      	ldr	r1, [sp, #16]
 8006e36:	2201      	movs	r2, #1
 8006e38:	0038      	movs	r0, r7
 8006e3a:	f000 fad9 	bl	80073f0 <__lshift>
 8006e3e:	0031      	movs	r1, r6
 8006e40:	9004      	str	r0, [sp, #16]
 8006e42:	f000 fb45 	bl	80074d0 <__mcmp>
 8006e46:	2800      	cmp	r0, #0
 8006e48:	dc03      	bgt.n	8006e52 <_dtoa_r+0xb0e>
 8006e4a:	d1e5      	bne.n	8006e18 <_dtoa_r+0xad4>
 8006e4c:	9b06      	ldr	r3, [sp, #24]
 8006e4e:	07db      	lsls	r3, r3, #31
 8006e50:	d5e2      	bpl.n	8006e18 <_dtoa_r+0xad4>
 8006e52:	9b06      	ldr	r3, [sp, #24]
 8006e54:	2b39      	cmp	r3, #57	; 0x39
 8006e56:	d1dc      	bne.n	8006e12 <_dtoa_r+0xace>
 8006e58:	2339      	movs	r3, #57	; 0x39
 8006e5a:	9a08      	ldr	r2, [sp, #32]
 8006e5c:	7013      	strb	r3, [r2, #0]
 8006e5e:	9b07      	ldr	r3, [sp, #28]
 8006e60:	9307      	str	r3, [sp, #28]
 8006e62:	3b01      	subs	r3, #1
 8006e64:	781a      	ldrb	r2, [r3, #0]
 8006e66:	2a39      	cmp	r2, #57	; 0x39
 8006e68:	d06c      	beq.n	8006f44 <_dtoa_r+0xc00>
 8006e6a:	3201      	adds	r2, #1
 8006e6c:	e7d6      	b.n	8006e1c <_dtoa_r+0xad8>
 8006e6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	dd07      	ble.n	8006e84 <_dtoa_r+0xb40>
 8006e74:	9b06      	ldr	r3, [sp, #24]
 8006e76:	2b39      	cmp	r3, #57	; 0x39
 8006e78:	d0ee      	beq.n	8006e58 <_dtoa_r+0xb14>
 8006e7a:	9b06      	ldr	r3, [sp, #24]
 8006e7c:	9a08      	ldr	r2, [sp, #32]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	7013      	strb	r3, [r2, #0]
 8006e82:	e741      	b.n	8006d08 <_dtoa_r+0x9c4>
 8006e84:	9b08      	ldr	r3, [sp, #32]
 8006e86:	9a06      	ldr	r2, [sp, #24]
 8006e88:	701a      	strb	r2, [r3, #0]
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	9a05      	ldr	r2, [sp, #20]
 8006e8e:	1a9b      	subs	r3, r3, r2
 8006e90:	9a08      	ldr	r2, [sp, #32]
 8006e92:	189b      	adds	r3, r3, r2
 8006e94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d03e      	beq.n	8006f18 <_dtoa_r+0xbd4>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	220a      	movs	r2, #10
 8006e9e:	9904      	ldr	r1, [sp, #16]
 8006ea0:	0038      	movs	r0, r7
 8006ea2:	f000 f8f7 	bl	8007094 <__multadd>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	9004      	str	r0, [sp, #16]
 8006eaa:	220a      	movs	r2, #10
 8006eac:	0021      	movs	r1, r4
 8006eae:	0038      	movs	r0, r7
 8006eb0:	42ac      	cmp	r4, r5
 8006eb2:	d106      	bne.n	8006ec2 <_dtoa_r+0xb7e>
 8006eb4:	f000 f8ee 	bl	8007094 <__multadd>
 8006eb8:	0004      	movs	r4, r0
 8006eba:	0005      	movs	r5, r0
 8006ebc:	9b07      	ldr	r3, [sp, #28]
 8006ebe:	9308      	str	r3, [sp, #32]
 8006ec0:	e773      	b.n	8006daa <_dtoa_r+0xa66>
 8006ec2:	f000 f8e7 	bl	8007094 <__multadd>
 8006ec6:	0029      	movs	r1, r5
 8006ec8:	0004      	movs	r4, r0
 8006eca:	2300      	movs	r3, #0
 8006ecc:	220a      	movs	r2, #10
 8006ece:	0038      	movs	r0, r7
 8006ed0:	f000 f8e0 	bl	8007094 <__multadd>
 8006ed4:	0005      	movs	r5, r0
 8006ed6:	e7f1      	b.n	8006ebc <_dtoa_r+0xb78>
 8006ed8:	9b06      	ldr	r3, [sp, #24]
 8006eda:	930c      	str	r3, [sp, #48]	; 0x30
 8006edc:	2400      	movs	r4, #0
 8006ede:	0031      	movs	r1, r6
 8006ee0:	9804      	ldr	r0, [sp, #16]
 8006ee2:	f7ff f9a3 	bl	800622c <quorem>
 8006ee6:	9b05      	ldr	r3, [sp, #20]
 8006ee8:	3030      	adds	r0, #48	; 0x30
 8006eea:	5518      	strb	r0, [r3, r4]
 8006eec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006eee:	3401      	adds	r4, #1
 8006ef0:	9006      	str	r0, [sp, #24]
 8006ef2:	42a3      	cmp	r3, r4
 8006ef4:	dd07      	ble.n	8006f06 <_dtoa_r+0xbc2>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	220a      	movs	r2, #10
 8006efa:	0038      	movs	r0, r7
 8006efc:	9904      	ldr	r1, [sp, #16]
 8006efe:	f000 f8c9 	bl	8007094 <__multadd>
 8006f02:	9004      	str	r0, [sp, #16]
 8006f04:	e7eb      	b.n	8006ede <_dtoa_r+0xb9a>
 8006f06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f08:	2001      	movs	r0, #1
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	dd00      	ble.n	8006f10 <_dtoa_r+0xbcc>
 8006f0e:	0018      	movs	r0, r3
 8006f10:	2400      	movs	r4, #0
 8006f12:	9b05      	ldr	r3, [sp, #20]
 8006f14:	181b      	adds	r3, r3, r0
 8006f16:	9307      	str	r3, [sp, #28]
 8006f18:	9904      	ldr	r1, [sp, #16]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	0038      	movs	r0, r7
 8006f1e:	f000 fa67 	bl	80073f0 <__lshift>
 8006f22:	0031      	movs	r1, r6
 8006f24:	9004      	str	r0, [sp, #16]
 8006f26:	f000 fad3 	bl	80074d0 <__mcmp>
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	dc97      	bgt.n	8006e5e <_dtoa_r+0xb1a>
 8006f2e:	d102      	bne.n	8006f36 <_dtoa_r+0xbf2>
 8006f30:	9b06      	ldr	r3, [sp, #24]
 8006f32:	07db      	lsls	r3, r3, #31
 8006f34:	d493      	bmi.n	8006e5e <_dtoa_r+0xb1a>
 8006f36:	9b07      	ldr	r3, [sp, #28]
 8006f38:	9307      	str	r3, [sp, #28]
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	781a      	ldrb	r2, [r3, #0]
 8006f3e:	2a30      	cmp	r2, #48	; 0x30
 8006f40:	d0fa      	beq.n	8006f38 <_dtoa_r+0xbf4>
 8006f42:	e6e1      	b.n	8006d08 <_dtoa_r+0x9c4>
 8006f44:	9a05      	ldr	r2, [sp, #20]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d18a      	bne.n	8006e60 <_dtoa_r+0xb1c>
 8006f4a:	9b02      	ldr	r3, [sp, #8]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	9302      	str	r3, [sp, #8]
 8006f50:	2331      	movs	r3, #49	; 0x31
 8006f52:	e795      	b.n	8006e80 <_dtoa_r+0xb3c>
 8006f54:	4b08      	ldr	r3, [pc, #32]	; (8006f78 <_dtoa_r+0xc34>)
 8006f56:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006f58:	9305      	str	r3, [sp, #20]
 8006f5a:	4b08      	ldr	r3, [pc, #32]	; (8006f7c <_dtoa_r+0xc38>)
 8006f5c:	2a00      	cmp	r2, #0
 8006f5e:	d001      	beq.n	8006f64 <_dtoa_r+0xc20>
 8006f60:	f7ff fa3b 	bl	80063da <_dtoa_r+0x96>
 8006f64:	f7ff fa3b 	bl	80063de <_dtoa_r+0x9a>
 8006f68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	dcb6      	bgt.n	8006edc <_dtoa_r+0xb98>
 8006f6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	dd00      	ble.n	8006f76 <_dtoa_r+0xc32>
 8006f74:	e6b2      	b.n	8006cdc <_dtoa_r+0x998>
 8006f76:	e7b1      	b.n	8006edc <_dtoa_r+0xb98>
 8006f78:	08008660 	.word	0x08008660
 8006f7c:	08008668 	.word	0x08008668

08006f80 <_localeconv_r>:
 8006f80:	4800      	ldr	r0, [pc, #0]	; (8006f84 <_localeconv_r+0x4>)
 8006f82:	4770      	bx	lr
 8006f84:	20000160 	.word	0x20000160

08006f88 <malloc>:
 8006f88:	b510      	push	{r4, lr}
 8006f8a:	4b03      	ldr	r3, [pc, #12]	; (8006f98 <malloc+0x10>)
 8006f8c:	0001      	movs	r1, r0
 8006f8e:	6818      	ldr	r0, [r3, #0]
 8006f90:	f000 fc0e 	bl	80077b0 <_malloc_r>
 8006f94:	bd10      	pop	{r4, pc}
 8006f96:	46c0      	nop			; (mov r8, r8)
 8006f98:	2000000c 	.word	0x2000000c

08006f9c <memchr>:
 8006f9c:	b2c9      	uxtb	r1, r1
 8006f9e:	1882      	adds	r2, r0, r2
 8006fa0:	4290      	cmp	r0, r2
 8006fa2:	d101      	bne.n	8006fa8 <memchr+0xc>
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	4770      	bx	lr
 8006fa8:	7803      	ldrb	r3, [r0, #0]
 8006faa:	428b      	cmp	r3, r1
 8006fac:	d0fb      	beq.n	8006fa6 <memchr+0xa>
 8006fae:	3001      	adds	r0, #1
 8006fb0:	e7f6      	b.n	8006fa0 <memchr+0x4>

08006fb2 <memcpy>:
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	b510      	push	{r4, lr}
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d100      	bne.n	8006fbc <memcpy+0xa>
 8006fba:	bd10      	pop	{r4, pc}
 8006fbc:	5ccc      	ldrb	r4, [r1, r3]
 8006fbe:	54c4      	strb	r4, [r0, r3]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	e7f8      	b.n	8006fb6 <memcpy+0x4>

08006fc4 <_Balloc>:
 8006fc4:	b570      	push	{r4, r5, r6, lr}
 8006fc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006fc8:	0006      	movs	r6, r0
 8006fca:	000c      	movs	r4, r1
 8006fcc:	2d00      	cmp	r5, #0
 8006fce:	d10e      	bne.n	8006fee <_Balloc+0x2a>
 8006fd0:	2010      	movs	r0, #16
 8006fd2:	f7ff ffd9 	bl	8006f88 <malloc>
 8006fd6:	1e02      	subs	r2, r0, #0
 8006fd8:	6270      	str	r0, [r6, #36]	; 0x24
 8006fda:	d104      	bne.n	8006fe6 <_Balloc+0x22>
 8006fdc:	2166      	movs	r1, #102	; 0x66
 8006fde:	4b19      	ldr	r3, [pc, #100]	; (8007044 <_Balloc+0x80>)
 8006fe0:	4819      	ldr	r0, [pc, #100]	; (8007048 <_Balloc+0x84>)
 8006fe2:	f000 fc55 	bl	8007890 <__assert_func>
 8006fe6:	6045      	str	r5, [r0, #4]
 8006fe8:	6085      	str	r5, [r0, #8]
 8006fea:	6005      	str	r5, [r0, #0]
 8006fec:	60c5      	str	r5, [r0, #12]
 8006fee:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8006ff0:	68eb      	ldr	r3, [r5, #12]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d013      	beq.n	800701e <_Balloc+0x5a>
 8006ff6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006ff8:	00a2      	lsls	r2, r4, #2
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	189b      	adds	r3, r3, r2
 8006ffe:	6818      	ldr	r0, [r3, #0]
 8007000:	2800      	cmp	r0, #0
 8007002:	d118      	bne.n	8007036 <_Balloc+0x72>
 8007004:	2101      	movs	r1, #1
 8007006:	000d      	movs	r5, r1
 8007008:	40a5      	lsls	r5, r4
 800700a:	1d6a      	adds	r2, r5, #5
 800700c:	0030      	movs	r0, r6
 800700e:	0092      	lsls	r2, r2, #2
 8007010:	f000 fb76 	bl	8007700 <_calloc_r>
 8007014:	2800      	cmp	r0, #0
 8007016:	d00c      	beq.n	8007032 <_Balloc+0x6e>
 8007018:	6044      	str	r4, [r0, #4]
 800701a:	6085      	str	r5, [r0, #8]
 800701c:	e00d      	b.n	800703a <_Balloc+0x76>
 800701e:	2221      	movs	r2, #33	; 0x21
 8007020:	2104      	movs	r1, #4
 8007022:	0030      	movs	r0, r6
 8007024:	f000 fb6c 	bl	8007700 <_calloc_r>
 8007028:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800702a:	60e8      	str	r0, [r5, #12]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1e1      	bne.n	8006ff6 <_Balloc+0x32>
 8007032:	2000      	movs	r0, #0
 8007034:	bd70      	pop	{r4, r5, r6, pc}
 8007036:	6802      	ldr	r2, [r0, #0]
 8007038:	601a      	str	r2, [r3, #0]
 800703a:	2300      	movs	r3, #0
 800703c:	6103      	str	r3, [r0, #16]
 800703e:	60c3      	str	r3, [r0, #12]
 8007040:	e7f8      	b.n	8007034 <_Balloc+0x70>
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	0800866d 	.word	0x0800866d
 8007048:	080086f4 	.word	0x080086f4

0800704c <_Bfree>:
 800704c:	b570      	push	{r4, r5, r6, lr}
 800704e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007050:	0005      	movs	r5, r0
 8007052:	000c      	movs	r4, r1
 8007054:	2e00      	cmp	r6, #0
 8007056:	d10e      	bne.n	8007076 <_Bfree+0x2a>
 8007058:	2010      	movs	r0, #16
 800705a:	f7ff ff95 	bl	8006f88 <malloc>
 800705e:	1e02      	subs	r2, r0, #0
 8007060:	6268      	str	r0, [r5, #36]	; 0x24
 8007062:	d104      	bne.n	800706e <_Bfree+0x22>
 8007064:	218a      	movs	r1, #138	; 0x8a
 8007066:	4b09      	ldr	r3, [pc, #36]	; (800708c <_Bfree+0x40>)
 8007068:	4809      	ldr	r0, [pc, #36]	; (8007090 <_Bfree+0x44>)
 800706a:	f000 fc11 	bl	8007890 <__assert_func>
 800706e:	6046      	str	r6, [r0, #4]
 8007070:	6086      	str	r6, [r0, #8]
 8007072:	6006      	str	r6, [r0, #0]
 8007074:	60c6      	str	r6, [r0, #12]
 8007076:	2c00      	cmp	r4, #0
 8007078:	d007      	beq.n	800708a <_Bfree+0x3e>
 800707a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800707c:	6862      	ldr	r2, [r4, #4]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	0092      	lsls	r2, r2, #2
 8007082:	189b      	adds	r3, r3, r2
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	6022      	str	r2, [r4, #0]
 8007088:	601c      	str	r4, [r3, #0]
 800708a:	bd70      	pop	{r4, r5, r6, pc}
 800708c:	0800866d 	.word	0x0800866d
 8007090:	080086f4 	.word	0x080086f4

08007094 <__multadd>:
 8007094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007096:	000e      	movs	r6, r1
 8007098:	9001      	str	r0, [sp, #4]
 800709a:	000c      	movs	r4, r1
 800709c:	001d      	movs	r5, r3
 800709e:	2000      	movs	r0, #0
 80070a0:	690f      	ldr	r7, [r1, #16]
 80070a2:	3614      	adds	r6, #20
 80070a4:	6833      	ldr	r3, [r6, #0]
 80070a6:	3001      	adds	r0, #1
 80070a8:	b299      	uxth	r1, r3
 80070aa:	4351      	muls	r1, r2
 80070ac:	0c1b      	lsrs	r3, r3, #16
 80070ae:	4353      	muls	r3, r2
 80070b0:	1949      	adds	r1, r1, r5
 80070b2:	0c0d      	lsrs	r5, r1, #16
 80070b4:	195b      	adds	r3, r3, r5
 80070b6:	0c1d      	lsrs	r5, r3, #16
 80070b8:	b289      	uxth	r1, r1
 80070ba:	041b      	lsls	r3, r3, #16
 80070bc:	185b      	adds	r3, r3, r1
 80070be:	c608      	stmia	r6!, {r3}
 80070c0:	4287      	cmp	r7, r0
 80070c2:	dcef      	bgt.n	80070a4 <__multadd+0x10>
 80070c4:	2d00      	cmp	r5, #0
 80070c6:	d022      	beq.n	800710e <__multadd+0x7a>
 80070c8:	68a3      	ldr	r3, [r4, #8]
 80070ca:	42bb      	cmp	r3, r7
 80070cc:	dc19      	bgt.n	8007102 <__multadd+0x6e>
 80070ce:	6863      	ldr	r3, [r4, #4]
 80070d0:	9801      	ldr	r0, [sp, #4]
 80070d2:	1c59      	adds	r1, r3, #1
 80070d4:	f7ff ff76 	bl	8006fc4 <_Balloc>
 80070d8:	1e06      	subs	r6, r0, #0
 80070da:	d105      	bne.n	80070e8 <__multadd+0x54>
 80070dc:	0002      	movs	r2, r0
 80070de:	21b5      	movs	r1, #181	; 0xb5
 80070e0:	4b0c      	ldr	r3, [pc, #48]	; (8007114 <__multadd+0x80>)
 80070e2:	480d      	ldr	r0, [pc, #52]	; (8007118 <__multadd+0x84>)
 80070e4:	f000 fbd4 	bl	8007890 <__assert_func>
 80070e8:	0021      	movs	r1, r4
 80070ea:	6923      	ldr	r3, [r4, #16]
 80070ec:	310c      	adds	r1, #12
 80070ee:	1c9a      	adds	r2, r3, #2
 80070f0:	0092      	lsls	r2, r2, #2
 80070f2:	300c      	adds	r0, #12
 80070f4:	f7ff ff5d 	bl	8006fb2 <memcpy>
 80070f8:	0021      	movs	r1, r4
 80070fa:	9801      	ldr	r0, [sp, #4]
 80070fc:	f7ff ffa6 	bl	800704c <_Bfree>
 8007100:	0034      	movs	r4, r6
 8007102:	1d3b      	adds	r3, r7, #4
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	18e3      	adds	r3, r4, r3
 8007108:	605d      	str	r5, [r3, #4]
 800710a:	1c7b      	adds	r3, r7, #1
 800710c:	6123      	str	r3, [r4, #16]
 800710e:	0020      	movs	r0, r4
 8007110:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007112:	46c0      	nop			; (mov r8, r8)
 8007114:	080086e3 	.word	0x080086e3
 8007118:	080086f4 	.word	0x080086f4

0800711c <__hi0bits>:
 800711c:	0003      	movs	r3, r0
 800711e:	0c02      	lsrs	r2, r0, #16
 8007120:	2000      	movs	r0, #0
 8007122:	4282      	cmp	r2, r0
 8007124:	d101      	bne.n	800712a <__hi0bits+0xe>
 8007126:	041b      	lsls	r3, r3, #16
 8007128:	3010      	adds	r0, #16
 800712a:	0e1a      	lsrs	r2, r3, #24
 800712c:	d101      	bne.n	8007132 <__hi0bits+0x16>
 800712e:	3008      	adds	r0, #8
 8007130:	021b      	lsls	r3, r3, #8
 8007132:	0f1a      	lsrs	r2, r3, #28
 8007134:	d101      	bne.n	800713a <__hi0bits+0x1e>
 8007136:	3004      	adds	r0, #4
 8007138:	011b      	lsls	r3, r3, #4
 800713a:	0f9a      	lsrs	r2, r3, #30
 800713c:	d101      	bne.n	8007142 <__hi0bits+0x26>
 800713e:	3002      	adds	r0, #2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	2b00      	cmp	r3, #0
 8007144:	db03      	blt.n	800714e <__hi0bits+0x32>
 8007146:	3001      	adds	r0, #1
 8007148:	005b      	lsls	r3, r3, #1
 800714a:	d400      	bmi.n	800714e <__hi0bits+0x32>
 800714c:	2020      	movs	r0, #32
 800714e:	4770      	bx	lr

08007150 <__lo0bits>:
 8007150:	6803      	ldr	r3, [r0, #0]
 8007152:	0002      	movs	r2, r0
 8007154:	2107      	movs	r1, #7
 8007156:	0018      	movs	r0, r3
 8007158:	4008      	ands	r0, r1
 800715a:	420b      	tst	r3, r1
 800715c:	d00d      	beq.n	800717a <__lo0bits+0x2a>
 800715e:	3906      	subs	r1, #6
 8007160:	2000      	movs	r0, #0
 8007162:	420b      	tst	r3, r1
 8007164:	d105      	bne.n	8007172 <__lo0bits+0x22>
 8007166:	3002      	adds	r0, #2
 8007168:	4203      	tst	r3, r0
 800716a:	d003      	beq.n	8007174 <__lo0bits+0x24>
 800716c:	40cb      	lsrs	r3, r1
 800716e:	0008      	movs	r0, r1
 8007170:	6013      	str	r3, [r2, #0]
 8007172:	4770      	bx	lr
 8007174:	089b      	lsrs	r3, r3, #2
 8007176:	6013      	str	r3, [r2, #0]
 8007178:	e7fb      	b.n	8007172 <__lo0bits+0x22>
 800717a:	b299      	uxth	r1, r3
 800717c:	2900      	cmp	r1, #0
 800717e:	d101      	bne.n	8007184 <__lo0bits+0x34>
 8007180:	2010      	movs	r0, #16
 8007182:	0c1b      	lsrs	r3, r3, #16
 8007184:	b2d9      	uxtb	r1, r3
 8007186:	2900      	cmp	r1, #0
 8007188:	d101      	bne.n	800718e <__lo0bits+0x3e>
 800718a:	3008      	adds	r0, #8
 800718c:	0a1b      	lsrs	r3, r3, #8
 800718e:	0719      	lsls	r1, r3, #28
 8007190:	d101      	bne.n	8007196 <__lo0bits+0x46>
 8007192:	3004      	adds	r0, #4
 8007194:	091b      	lsrs	r3, r3, #4
 8007196:	0799      	lsls	r1, r3, #30
 8007198:	d101      	bne.n	800719e <__lo0bits+0x4e>
 800719a:	3002      	adds	r0, #2
 800719c:	089b      	lsrs	r3, r3, #2
 800719e:	07d9      	lsls	r1, r3, #31
 80071a0:	d4e9      	bmi.n	8007176 <__lo0bits+0x26>
 80071a2:	3001      	adds	r0, #1
 80071a4:	085b      	lsrs	r3, r3, #1
 80071a6:	d1e6      	bne.n	8007176 <__lo0bits+0x26>
 80071a8:	2020      	movs	r0, #32
 80071aa:	e7e2      	b.n	8007172 <__lo0bits+0x22>

080071ac <__i2b>:
 80071ac:	b510      	push	{r4, lr}
 80071ae:	000c      	movs	r4, r1
 80071b0:	2101      	movs	r1, #1
 80071b2:	f7ff ff07 	bl	8006fc4 <_Balloc>
 80071b6:	2800      	cmp	r0, #0
 80071b8:	d106      	bne.n	80071c8 <__i2b+0x1c>
 80071ba:	21a0      	movs	r1, #160	; 0xa0
 80071bc:	0002      	movs	r2, r0
 80071be:	4b04      	ldr	r3, [pc, #16]	; (80071d0 <__i2b+0x24>)
 80071c0:	4804      	ldr	r0, [pc, #16]	; (80071d4 <__i2b+0x28>)
 80071c2:	0049      	lsls	r1, r1, #1
 80071c4:	f000 fb64 	bl	8007890 <__assert_func>
 80071c8:	2301      	movs	r3, #1
 80071ca:	6144      	str	r4, [r0, #20]
 80071cc:	6103      	str	r3, [r0, #16]
 80071ce:	bd10      	pop	{r4, pc}
 80071d0:	080086e3 	.word	0x080086e3
 80071d4:	080086f4 	.word	0x080086f4

080071d8 <__multiply>:
 80071d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071da:	690b      	ldr	r3, [r1, #16]
 80071dc:	0014      	movs	r4, r2
 80071de:	6912      	ldr	r2, [r2, #16]
 80071e0:	000d      	movs	r5, r1
 80071e2:	b089      	sub	sp, #36	; 0x24
 80071e4:	4293      	cmp	r3, r2
 80071e6:	da01      	bge.n	80071ec <__multiply+0x14>
 80071e8:	0025      	movs	r5, r4
 80071ea:	000c      	movs	r4, r1
 80071ec:	692f      	ldr	r7, [r5, #16]
 80071ee:	6926      	ldr	r6, [r4, #16]
 80071f0:	6869      	ldr	r1, [r5, #4]
 80071f2:	19bb      	adds	r3, r7, r6
 80071f4:	9302      	str	r3, [sp, #8]
 80071f6:	68ab      	ldr	r3, [r5, #8]
 80071f8:	19ba      	adds	r2, r7, r6
 80071fa:	4293      	cmp	r3, r2
 80071fc:	da00      	bge.n	8007200 <__multiply+0x28>
 80071fe:	3101      	adds	r1, #1
 8007200:	f7ff fee0 	bl	8006fc4 <_Balloc>
 8007204:	9001      	str	r0, [sp, #4]
 8007206:	2800      	cmp	r0, #0
 8007208:	d106      	bne.n	8007218 <__multiply+0x40>
 800720a:	215e      	movs	r1, #94	; 0x5e
 800720c:	0002      	movs	r2, r0
 800720e:	4b48      	ldr	r3, [pc, #288]	; (8007330 <__multiply+0x158>)
 8007210:	4848      	ldr	r0, [pc, #288]	; (8007334 <__multiply+0x15c>)
 8007212:	31ff      	adds	r1, #255	; 0xff
 8007214:	f000 fb3c 	bl	8007890 <__assert_func>
 8007218:	9b01      	ldr	r3, [sp, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	3314      	adds	r3, #20
 800721e:	469c      	mov	ip, r3
 8007220:	19bb      	adds	r3, r7, r6
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4463      	add	r3, ip
 8007226:	9303      	str	r3, [sp, #12]
 8007228:	4663      	mov	r3, ip
 800722a:	9903      	ldr	r1, [sp, #12]
 800722c:	428b      	cmp	r3, r1
 800722e:	d32c      	bcc.n	800728a <__multiply+0xb2>
 8007230:	002b      	movs	r3, r5
 8007232:	0022      	movs	r2, r4
 8007234:	3314      	adds	r3, #20
 8007236:	00bf      	lsls	r7, r7, #2
 8007238:	3214      	adds	r2, #20
 800723a:	9306      	str	r3, [sp, #24]
 800723c:	00b6      	lsls	r6, r6, #2
 800723e:	19db      	adds	r3, r3, r7
 8007240:	9304      	str	r3, [sp, #16]
 8007242:	1993      	adds	r3, r2, r6
 8007244:	9307      	str	r3, [sp, #28]
 8007246:	2304      	movs	r3, #4
 8007248:	9305      	str	r3, [sp, #20]
 800724a:	002b      	movs	r3, r5
 800724c:	9904      	ldr	r1, [sp, #16]
 800724e:	3315      	adds	r3, #21
 8007250:	9200      	str	r2, [sp, #0]
 8007252:	4299      	cmp	r1, r3
 8007254:	d305      	bcc.n	8007262 <__multiply+0x8a>
 8007256:	1b4b      	subs	r3, r1, r5
 8007258:	3b15      	subs	r3, #21
 800725a:	089b      	lsrs	r3, r3, #2
 800725c:	3301      	adds	r3, #1
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	9305      	str	r3, [sp, #20]
 8007262:	9b07      	ldr	r3, [sp, #28]
 8007264:	9a00      	ldr	r2, [sp, #0]
 8007266:	429a      	cmp	r2, r3
 8007268:	d311      	bcc.n	800728e <__multiply+0xb6>
 800726a:	9b02      	ldr	r3, [sp, #8]
 800726c:	2b00      	cmp	r3, #0
 800726e:	dd06      	ble.n	800727e <__multiply+0xa6>
 8007270:	9b03      	ldr	r3, [sp, #12]
 8007272:	3b04      	subs	r3, #4
 8007274:	9303      	str	r3, [sp, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d054      	beq.n	8007328 <__multiply+0x150>
 800727e:	9b01      	ldr	r3, [sp, #4]
 8007280:	9a02      	ldr	r2, [sp, #8]
 8007282:	0018      	movs	r0, r3
 8007284:	611a      	str	r2, [r3, #16]
 8007286:	b009      	add	sp, #36	; 0x24
 8007288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800728a:	c304      	stmia	r3!, {r2}
 800728c:	e7cd      	b.n	800722a <__multiply+0x52>
 800728e:	9b00      	ldr	r3, [sp, #0]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	b298      	uxth	r0, r3
 8007294:	2800      	cmp	r0, #0
 8007296:	d01c      	beq.n	80072d2 <__multiply+0xfa>
 8007298:	4667      	mov	r7, ip
 800729a:	2400      	movs	r4, #0
 800729c:	9e06      	ldr	r6, [sp, #24]
 800729e:	ce02      	ldmia	r6!, {r1}
 80072a0:	683a      	ldr	r2, [r7, #0]
 80072a2:	b28b      	uxth	r3, r1
 80072a4:	4343      	muls	r3, r0
 80072a6:	0c09      	lsrs	r1, r1, #16
 80072a8:	4341      	muls	r1, r0
 80072aa:	b292      	uxth	r2, r2
 80072ac:	189b      	adds	r3, r3, r2
 80072ae:	191b      	adds	r3, r3, r4
 80072b0:	000c      	movs	r4, r1
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	0c11      	lsrs	r1, r2, #16
 80072b6:	1861      	adds	r1, r4, r1
 80072b8:	0c1c      	lsrs	r4, r3, #16
 80072ba:	1909      	adds	r1, r1, r4
 80072bc:	0c0c      	lsrs	r4, r1, #16
 80072be:	b29b      	uxth	r3, r3
 80072c0:	0409      	lsls	r1, r1, #16
 80072c2:	430b      	orrs	r3, r1
 80072c4:	c708      	stmia	r7!, {r3}
 80072c6:	9b04      	ldr	r3, [sp, #16]
 80072c8:	42b3      	cmp	r3, r6
 80072ca:	d8e8      	bhi.n	800729e <__multiply+0xc6>
 80072cc:	4663      	mov	r3, ip
 80072ce:	9a05      	ldr	r2, [sp, #20]
 80072d0:	509c      	str	r4, [r3, r2]
 80072d2:	9b00      	ldr	r3, [sp, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	0c1e      	lsrs	r6, r3, #16
 80072d8:	d020      	beq.n	800731c <__multiply+0x144>
 80072da:	4663      	mov	r3, ip
 80072dc:	002c      	movs	r4, r5
 80072de:	4660      	mov	r0, ip
 80072e0:	2700      	movs	r7, #0
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	3414      	adds	r4, #20
 80072e6:	6822      	ldr	r2, [r4, #0]
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	b291      	uxth	r1, r2
 80072ec:	4371      	muls	r1, r6
 80072ee:	6802      	ldr	r2, [r0, #0]
 80072f0:	0c12      	lsrs	r2, r2, #16
 80072f2:	1889      	adds	r1, r1, r2
 80072f4:	19cf      	adds	r7, r1, r7
 80072f6:	0439      	lsls	r1, r7, #16
 80072f8:	430b      	orrs	r3, r1
 80072fa:	6003      	str	r3, [r0, #0]
 80072fc:	cc02      	ldmia	r4!, {r1}
 80072fe:	6843      	ldr	r3, [r0, #4]
 8007300:	0c09      	lsrs	r1, r1, #16
 8007302:	4371      	muls	r1, r6
 8007304:	b29b      	uxth	r3, r3
 8007306:	0c3f      	lsrs	r7, r7, #16
 8007308:	18cb      	adds	r3, r1, r3
 800730a:	9a04      	ldr	r2, [sp, #16]
 800730c:	19db      	adds	r3, r3, r7
 800730e:	0c1f      	lsrs	r7, r3, #16
 8007310:	3004      	adds	r0, #4
 8007312:	42a2      	cmp	r2, r4
 8007314:	d8e7      	bhi.n	80072e6 <__multiply+0x10e>
 8007316:	4662      	mov	r2, ip
 8007318:	9905      	ldr	r1, [sp, #20]
 800731a:	5053      	str	r3, [r2, r1]
 800731c:	9b00      	ldr	r3, [sp, #0]
 800731e:	3304      	adds	r3, #4
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	2304      	movs	r3, #4
 8007324:	449c      	add	ip, r3
 8007326:	e79c      	b.n	8007262 <__multiply+0x8a>
 8007328:	9b02      	ldr	r3, [sp, #8]
 800732a:	3b01      	subs	r3, #1
 800732c:	9302      	str	r3, [sp, #8]
 800732e:	e79c      	b.n	800726a <__multiply+0x92>
 8007330:	080086e3 	.word	0x080086e3
 8007334:	080086f4 	.word	0x080086f4

08007338 <__pow5mult>:
 8007338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800733a:	2303      	movs	r3, #3
 800733c:	0015      	movs	r5, r2
 800733e:	0007      	movs	r7, r0
 8007340:	000e      	movs	r6, r1
 8007342:	401a      	ands	r2, r3
 8007344:	421d      	tst	r5, r3
 8007346:	d008      	beq.n	800735a <__pow5mult+0x22>
 8007348:	4925      	ldr	r1, [pc, #148]	; (80073e0 <__pow5mult+0xa8>)
 800734a:	3a01      	subs	r2, #1
 800734c:	0092      	lsls	r2, r2, #2
 800734e:	5852      	ldr	r2, [r2, r1]
 8007350:	2300      	movs	r3, #0
 8007352:	0031      	movs	r1, r6
 8007354:	f7ff fe9e 	bl	8007094 <__multadd>
 8007358:	0006      	movs	r6, r0
 800735a:	10ad      	asrs	r5, r5, #2
 800735c:	d03d      	beq.n	80073da <__pow5mult+0xa2>
 800735e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8007360:	2c00      	cmp	r4, #0
 8007362:	d10f      	bne.n	8007384 <__pow5mult+0x4c>
 8007364:	2010      	movs	r0, #16
 8007366:	f7ff fe0f 	bl	8006f88 <malloc>
 800736a:	1e02      	subs	r2, r0, #0
 800736c:	6278      	str	r0, [r7, #36]	; 0x24
 800736e:	d105      	bne.n	800737c <__pow5mult+0x44>
 8007370:	21d7      	movs	r1, #215	; 0xd7
 8007372:	4b1c      	ldr	r3, [pc, #112]	; (80073e4 <__pow5mult+0xac>)
 8007374:	481c      	ldr	r0, [pc, #112]	; (80073e8 <__pow5mult+0xb0>)
 8007376:	0049      	lsls	r1, r1, #1
 8007378:	f000 fa8a 	bl	8007890 <__assert_func>
 800737c:	6044      	str	r4, [r0, #4]
 800737e:	6084      	str	r4, [r0, #8]
 8007380:	6004      	str	r4, [r0, #0]
 8007382:	60c4      	str	r4, [r0, #12]
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	689c      	ldr	r4, [r3, #8]
 8007388:	9301      	str	r3, [sp, #4]
 800738a:	2c00      	cmp	r4, #0
 800738c:	d108      	bne.n	80073a0 <__pow5mult+0x68>
 800738e:	0038      	movs	r0, r7
 8007390:	4916      	ldr	r1, [pc, #88]	; (80073ec <__pow5mult+0xb4>)
 8007392:	f7ff ff0b 	bl	80071ac <__i2b>
 8007396:	9b01      	ldr	r3, [sp, #4]
 8007398:	0004      	movs	r4, r0
 800739a:	6098      	str	r0, [r3, #8]
 800739c:	2300      	movs	r3, #0
 800739e:	6003      	str	r3, [r0, #0]
 80073a0:	2301      	movs	r3, #1
 80073a2:	421d      	tst	r5, r3
 80073a4:	d00a      	beq.n	80073bc <__pow5mult+0x84>
 80073a6:	0031      	movs	r1, r6
 80073a8:	0022      	movs	r2, r4
 80073aa:	0038      	movs	r0, r7
 80073ac:	f7ff ff14 	bl	80071d8 <__multiply>
 80073b0:	0031      	movs	r1, r6
 80073b2:	9001      	str	r0, [sp, #4]
 80073b4:	0038      	movs	r0, r7
 80073b6:	f7ff fe49 	bl	800704c <_Bfree>
 80073ba:	9e01      	ldr	r6, [sp, #4]
 80073bc:	106d      	asrs	r5, r5, #1
 80073be:	d00c      	beq.n	80073da <__pow5mult+0xa2>
 80073c0:	6820      	ldr	r0, [r4, #0]
 80073c2:	2800      	cmp	r0, #0
 80073c4:	d107      	bne.n	80073d6 <__pow5mult+0x9e>
 80073c6:	0022      	movs	r2, r4
 80073c8:	0021      	movs	r1, r4
 80073ca:	0038      	movs	r0, r7
 80073cc:	f7ff ff04 	bl	80071d8 <__multiply>
 80073d0:	2300      	movs	r3, #0
 80073d2:	6020      	str	r0, [r4, #0]
 80073d4:	6003      	str	r3, [r0, #0]
 80073d6:	0004      	movs	r4, r0
 80073d8:	e7e2      	b.n	80073a0 <__pow5mult+0x68>
 80073da:	0030      	movs	r0, r6
 80073dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80073de:	46c0      	nop			; (mov r8, r8)
 80073e0:	08008848 	.word	0x08008848
 80073e4:	0800866d 	.word	0x0800866d
 80073e8:	080086f4 	.word	0x080086f4
 80073ec:	00000271 	.word	0x00000271

080073f0 <__lshift>:
 80073f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073f2:	000c      	movs	r4, r1
 80073f4:	0017      	movs	r7, r2
 80073f6:	6923      	ldr	r3, [r4, #16]
 80073f8:	1155      	asrs	r5, r2, #5
 80073fa:	b087      	sub	sp, #28
 80073fc:	18eb      	adds	r3, r5, r3
 80073fe:	9302      	str	r3, [sp, #8]
 8007400:	3301      	adds	r3, #1
 8007402:	9301      	str	r3, [sp, #4]
 8007404:	6849      	ldr	r1, [r1, #4]
 8007406:	68a3      	ldr	r3, [r4, #8]
 8007408:	9004      	str	r0, [sp, #16]
 800740a:	9a01      	ldr	r2, [sp, #4]
 800740c:	4293      	cmp	r3, r2
 800740e:	db11      	blt.n	8007434 <__lshift+0x44>
 8007410:	9804      	ldr	r0, [sp, #16]
 8007412:	f7ff fdd7 	bl	8006fc4 <_Balloc>
 8007416:	0002      	movs	r2, r0
 8007418:	2300      	movs	r3, #0
 800741a:	3214      	adds	r2, #20
 800741c:	0006      	movs	r6, r0
 800741e:	0011      	movs	r1, r2
 8007420:	9203      	str	r2, [sp, #12]
 8007422:	4298      	cmp	r0, r3
 8007424:	d10d      	bne.n	8007442 <__lshift+0x52>
 8007426:	21da      	movs	r1, #218	; 0xda
 8007428:	0002      	movs	r2, r0
 800742a:	4b27      	ldr	r3, [pc, #156]	; (80074c8 <__lshift+0xd8>)
 800742c:	4827      	ldr	r0, [pc, #156]	; (80074cc <__lshift+0xdc>)
 800742e:	31ff      	adds	r1, #255	; 0xff
 8007430:	f000 fa2e 	bl	8007890 <__assert_func>
 8007434:	3101      	adds	r1, #1
 8007436:	005b      	lsls	r3, r3, #1
 8007438:	e7e7      	b.n	800740a <__lshift+0x1a>
 800743a:	2200      	movs	r2, #0
 800743c:	0098      	lsls	r0, r3, #2
 800743e:	500a      	str	r2, [r1, r0]
 8007440:	3301      	adds	r3, #1
 8007442:	42ab      	cmp	r3, r5
 8007444:	dbf9      	blt.n	800743a <__lshift+0x4a>
 8007446:	43eb      	mvns	r3, r5
 8007448:	17db      	asrs	r3, r3, #31
 800744a:	401d      	ands	r5, r3
 800744c:	9b03      	ldr	r3, [sp, #12]
 800744e:	00ad      	lsls	r5, r5, #2
 8007450:	211f      	movs	r1, #31
 8007452:	0038      	movs	r0, r7
 8007454:	195d      	adds	r5, r3, r5
 8007456:	0023      	movs	r3, r4
 8007458:	6922      	ldr	r2, [r4, #16]
 800745a:	3314      	adds	r3, #20
 800745c:	0092      	lsls	r2, r2, #2
 800745e:	4008      	ands	r0, r1
 8007460:	4684      	mov	ip, r0
 8007462:	189a      	adds	r2, r3, r2
 8007464:	420f      	tst	r7, r1
 8007466:	d02a      	beq.n	80074be <__lshift+0xce>
 8007468:	3101      	adds	r1, #1
 800746a:	1a09      	subs	r1, r1, r0
 800746c:	9105      	str	r1, [sp, #20]
 800746e:	2100      	movs	r1, #0
 8007470:	9503      	str	r5, [sp, #12]
 8007472:	4667      	mov	r7, ip
 8007474:	6818      	ldr	r0, [r3, #0]
 8007476:	40b8      	lsls	r0, r7
 8007478:	4301      	orrs	r1, r0
 800747a:	9803      	ldr	r0, [sp, #12]
 800747c:	c002      	stmia	r0!, {r1}
 800747e:	cb02      	ldmia	r3!, {r1}
 8007480:	9003      	str	r0, [sp, #12]
 8007482:	9805      	ldr	r0, [sp, #20]
 8007484:	40c1      	lsrs	r1, r0
 8007486:	429a      	cmp	r2, r3
 8007488:	d8f3      	bhi.n	8007472 <__lshift+0x82>
 800748a:	0020      	movs	r0, r4
 800748c:	3015      	adds	r0, #21
 800748e:	2304      	movs	r3, #4
 8007490:	4282      	cmp	r2, r0
 8007492:	d304      	bcc.n	800749e <__lshift+0xae>
 8007494:	1b13      	subs	r3, r2, r4
 8007496:	3b15      	subs	r3, #21
 8007498:	089b      	lsrs	r3, r3, #2
 800749a:	3301      	adds	r3, #1
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	50e9      	str	r1, [r5, r3]
 80074a0:	2900      	cmp	r1, #0
 80074a2:	d002      	beq.n	80074aa <__lshift+0xba>
 80074a4:	9b02      	ldr	r3, [sp, #8]
 80074a6:	3302      	adds	r3, #2
 80074a8:	9301      	str	r3, [sp, #4]
 80074aa:	9b01      	ldr	r3, [sp, #4]
 80074ac:	9804      	ldr	r0, [sp, #16]
 80074ae:	3b01      	subs	r3, #1
 80074b0:	0021      	movs	r1, r4
 80074b2:	6133      	str	r3, [r6, #16]
 80074b4:	f7ff fdca 	bl	800704c <_Bfree>
 80074b8:	0030      	movs	r0, r6
 80074ba:	b007      	add	sp, #28
 80074bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074be:	cb02      	ldmia	r3!, {r1}
 80074c0:	c502      	stmia	r5!, {r1}
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d8fb      	bhi.n	80074be <__lshift+0xce>
 80074c6:	e7f0      	b.n	80074aa <__lshift+0xba>
 80074c8:	080086e3 	.word	0x080086e3
 80074cc:	080086f4 	.word	0x080086f4

080074d0 <__mcmp>:
 80074d0:	6902      	ldr	r2, [r0, #16]
 80074d2:	690b      	ldr	r3, [r1, #16]
 80074d4:	b530      	push	{r4, r5, lr}
 80074d6:	0004      	movs	r4, r0
 80074d8:	1ad0      	subs	r0, r2, r3
 80074da:	429a      	cmp	r2, r3
 80074dc:	d10d      	bne.n	80074fa <__mcmp+0x2a>
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	3414      	adds	r4, #20
 80074e2:	3114      	adds	r1, #20
 80074e4:	18e2      	adds	r2, r4, r3
 80074e6:	18c9      	adds	r1, r1, r3
 80074e8:	3a04      	subs	r2, #4
 80074ea:	3904      	subs	r1, #4
 80074ec:	6815      	ldr	r5, [r2, #0]
 80074ee:	680b      	ldr	r3, [r1, #0]
 80074f0:	429d      	cmp	r5, r3
 80074f2:	d003      	beq.n	80074fc <__mcmp+0x2c>
 80074f4:	2001      	movs	r0, #1
 80074f6:	429d      	cmp	r5, r3
 80074f8:	d303      	bcc.n	8007502 <__mcmp+0x32>
 80074fa:	bd30      	pop	{r4, r5, pc}
 80074fc:	4294      	cmp	r4, r2
 80074fe:	d3f3      	bcc.n	80074e8 <__mcmp+0x18>
 8007500:	e7fb      	b.n	80074fa <__mcmp+0x2a>
 8007502:	4240      	negs	r0, r0
 8007504:	e7f9      	b.n	80074fa <__mcmp+0x2a>
	...

08007508 <__mdiff>:
 8007508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800750a:	000e      	movs	r6, r1
 800750c:	0007      	movs	r7, r0
 800750e:	0011      	movs	r1, r2
 8007510:	0030      	movs	r0, r6
 8007512:	b087      	sub	sp, #28
 8007514:	0014      	movs	r4, r2
 8007516:	f7ff ffdb 	bl	80074d0 <__mcmp>
 800751a:	1e05      	subs	r5, r0, #0
 800751c:	d110      	bne.n	8007540 <__mdiff+0x38>
 800751e:	0001      	movs	r1, r0
 8007520:	0038      	movs	r0, r7
 8007522:	f7ff fd4f 	bl	8006fc4 <_Balloc>
 8007526:	1e02      	subs	r2, r0, #0
 8007528:	d104      	bne.n	8007534 <__mdiff+0x2c>
 800752a:	4b40      	ldr	r3, [pc, #256]	; (800762c <__mdiff+0x124>)
 800752c:	4940      	ldr	r1, [pc, #256]	; (8007630 <__mdiff+0x128>)
 800752e:	4841      	ldr	r0, [pc, #260]	; (8007634 <__mdiff+0x12c>)
 8007530:	f000 f9ae 	bl	8007890 <__assert_func>
 8007534:	2301      	movs	r3, #1
 8007536:	6145      	str	r5, [r0, #20]
 8007538:	6103      	str	r3, [r0, #16]
 800753a:	0010      	movs	r0, r2
 800753c:	b007      	add	sp, #28
 800753e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007540:	2301      	movs	r3, #1
 8007542:	9301      	str	r3, [sp, #4]
 8007544:	2800      	cmp	r0, #0
 8007546:	db04      	blt.n	8007552 <__mdiff+0x4a>
 8007548:	0023      	movs	r3, r4
 800754a:	0034      	movs	r4, r6
 800754c:	001e      	movs	r6, r3
 800754e:	2300      	movs	r3, #0
 8007550:	9301      	str	r3, [sp, #4]
 8007552:	0038      	movs	r0, r7
 8007554:	6861      	ldr	r1, [r4, #4]
 8007556:	f7ff fd35 	bl	8006fc4 <_Balloc>
 800755a:	1e02      	subs	r2, r0, #0
 800755c:	d103      	bne.n	8007566 <__mdiff+0x5e>
 800755e:	2190      	movs	r1, #144	; 0x90
 8007560:	4b32      	ldr	r3, [pc, #200]	; (800762c <__mdiff+0x124>)
 8007562:	0089      	lsls	r1, r1, #2
 8007564:	e7e3      	b.n	800752e <__mdiff+0x26>
 8007566:	9b01      	ldr	r3, [sp, #4]
 8007568:	2700      	movs	r7, #0
 800756a:	60c3      	str	r3, [r0, #12]
 800756c:	6920      	ldr	r0, [r4, #16]
 800756e:	3414      	adds	r4, #20
 8007570:	9401      	str	r4, [sp, #4]
 8007572:	9b01      	ldr	r3, [sp, #4]
 8007574:	0084      	lsls	r4, r0, #2
 8007576:	191b      	adds	r3, r3, r4
 8007578:	0034      	movs	r4, r6
 800757a:	9302      	str	r3, [sp, #8]
 800757c:	6933      	ldr	r3, [r6, #16]
 800757e:	3414      	adds	r4, #20
 8007580:	0099      	lsls	r1, r3, #2
 8007582:	1863      	adds	r3, r4, r1
 8007584:	9303      	str	r3, [sp, #12]
 8007586:	0013      	movs	r3, r2
 8007588:	3314      	adds	r3, #20
 800758a:	469c      	mov	ip, r3
 800758c:	9305      	str	r3, [sp, #20]
 800758e:	9b01      	ldr	r3, [sp, #4]
 8007590:	9304      	str	r3, [sp, #16]
 8007592:	9b04      	ldr	r3, [sp, #16]
 8007594:	cc02      	ldmia	r4!, {r1}
 8007596:	cb20      	ldmia	r3!, {r5}
 8007598:	9304      	str	r3, [sp, #16]
 800759a:	b2ab      	uxth	r3, r5
 800759c:	19df      	adds	r7, r3, r7
 800759e:	b28b      	uxth	r3, r1
 80075a0:	1afb      	subs	r3, r7, r3
 80075a2:	0c2d      	lsrs	r5, r5, #16
 80075a4:	0c09      	lsrs	r1, r1, #16
 80075a6:	1a69      	subs	r1, r5, r1
 80075a8:	141d      	asrs	r5, r3, #16
 80075aa:	1949      	adds	r1, r1, r5
 80075ac:	140f      	asrs	r7, r1, #16
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	0409      	lsls	r1, r1, #16
 80075b2:	430b      	orrs	r3, r1
 80075b4:	4661      	mov	r1, ip
 80075b6:	c108      	stmia	r1!, {r3}
 80075b8:	9b03      	ldr	r3, [sp, #12]
 80075ba:	468c      	mov	ip, r1
 80075bc:	42a3      	cmp	r3, r4
 80075be:	d8e8      	bhi.n	8007592 <__mdiff+0x8a>
 80075c0:	0031      	movs	r1, r6
 80075c2:	9c03      	ldr	r4, [sp, #12]
 80075c4:	3115      	adds	r1, #21
 80075c6:	2304      	movs	r3, #4
 80075c8:	428c      	cmp	r4, r1
 80075ca:	d304      	bcc.n	80075d6 <__mdiff+0xce>
 80075cc:	1ba3      	subs	r3, r4, r6
 80075ce:	3b15      	subs	r3, #21
 80075d0:	089b      	lsrs	r3, r3, #2
 80075d2:	3301      	adds	r3, #1
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	9901      	ldr	r1, [sp, #4]
 80075d8:	18cc      	adds	r4, r1, r3
 80075da:	9905      	ldr	r1, [sp, #20]
 80075dc:	0026      	movs	r6, r4
 80075de:	18cb      	adds	r3, r1, r3
 80075e0:	469c      	mov	ip, r3
 80075e2:	9902      	ldr	r1, [sp, #8]
 80075e4:	428e      	cmp	r6, r1
 80075e6:	d310      	bcc.n	800760a <__mdiff+0x102>
 80075e8:	9e02      	ldr	r6, [sp, #8]
 80075ea:	1ee5      	subs	r5, r4, #3
 80075ec:	2100      	movs	r1, #0
 80075ee:	42ae      	cmp	r6, r5
 80075f0:	d304      	bcc.n	80075fc <__mdiff+0xf4>
 80075f2:	0031      	movs	r1, r6
 80075f4:	3103      	adds	r1, #3
 80075f6:	1b09      	subs	r1, r1, r4
 80075f8:	0889      	lsrs	r1, r1, #2
 80075fa:	0089      	lsls	r1, r1, #2
 80075fc:	185b      	adds	r3, r3, r1
 80075fe:	3b04      	subs	r3, #4
 8007600:	6819      	ldr	r1, [r3, #0]
 8007602:	2900      	cmp	r1, #0
 8007604:	d00f      	beq.n	8007626 <__mdiff+0x11e>
 8007606:	6110      	str	r0, [r2, #16]
 8007608:	e797      	b.n	800753a <__mdiff+0x32>
 800760a:	ce02      	ldmia	r6!, {r1}
 800760c:	b28d      	uxth	r5, r1
 800760e:	19ed      	adds	r5, r5, r7
 8007610:	0c0f      	lsrs	r7, r1, #16
 8007612:	1429      	asrs	r1, r5, #16
 8007614:	1879      	adds	r1, r7, r1
 8007616:	140f      	asrs	r7, r1, #16
 8007618:	b2ad      	uxth	r5, r5
 800761a:	0409      	lsls	r1, r1, #16
 800761c:	430d      	orrs	r5, r1
 800761e:	4661      	mov	r1, ip
 8007620:	c120      	stmia	r1!, {r5}
 8007622:	468c      	mov	ip, r1
 8007624:	e7dd      	b.n	80075e2 <__mdiff+0xda>
 8007626:	3801      	subs	r0, #1
 8007628:	e7e9      	b.n	80075fe <__mdiff+0xf6>
 800762a:	46c0      	nop			; (mov r8, r8)
 800762c:	080086e3 	.word	0x080086e3
 8007630:	00000232 	.word	0x00000232
 8007634:	080086f4 	.word	0x080086f4

08007638 <__d2b>:
 8007638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800763a:	2101      	movs	r1, #1
 800763c:	0014      	movs	r4, r2
 800763e:	001e      	movs	r6, r3
 8007640:	9f08      	ldr	r7, [sp, #32]
 8007642:	f7ff fcbf 	bl	8006fc4 <_Balloc>
 8007646:	1e05      	subs	r5, r0, #0
 8007648:	d105      	bne.n	8007656 <__d2b+0x1e>
 800764a:	0002      	movs	r2, r0
 800764c:	4b26      	ldr	r3, [pc, #152]	; (80076e8 <__d2b+0xb0>)
 800764e:	4927      	ldr	r1, [pc, #156]	; (80076ec <__d2b+0xb4>)
 8007650:	4827      	ldr	r0, [pc, #156]	; (80076f0 <__d2b+0xb8>)
 8007652:	f000 f91d 	bl	8007890 <__assert_func>
 8007656:	0333      	lsls	r3, r6, #12
 8007658:	0076      	lsls	r6, r6, #1
 800765a:	0b1b      	lsrs	r3, r3, #12
 800765c:	0d76      	lsrs	r6, r6, #21
 800765e:	d124      	bne.n	80076aa <__d2b+0x72>
 8007660:	9301      	str	r3, [sp, #4]
 8007662:	2c00      	cmp	r4, #0
 8007664:	d027      	beq.n	80076b6 <__d2b+0x7e>
 8007666:	4668      	mov	r0, sp
 8007668:	9400      	str	r4, [sp, #0]
 800766a:	f7ff fd71 	bl	8007150 <__lo0bits>
 800766e:	9c00      	ldr	r4, [sp, #0]
 8007670:	2800      	cmp	r0, #0
 8007672:	d01e      	beq.n	80076b2 <__d2b+0x7a>
 8007674:	9b01      	ldr	r3, [sp, #4]
 8007676:	2120      	movs	r1, #32
 8007678:	001a      	movs	r2, r3
 800767a:	1a09      	subs	r1, r1, r0
 800767c:	408a      	lsls	r2, r1
 800767e:	40c3      	lsrs	r3, r0
 8007680:	4322      	orrs	r2, r4
 8007682:	616a      	str	r2, [r5, #20]
 8007684:	9301      	str	r3, [sp, #4]
 8007686:	9c01      	ldr	r4, [sp, #4]
 8007688:	61ac      	str	r4, [r5, #24]
 800768a:	1e63      	subs	r3, r4, #1
 800768c:	419c      	sbcs	r4, r3
 800768e:	3401      	adds	r4, #1
 8007690:	612c      	str	r4, [r5, #16]
 8007692:	2e00      	cmp	r6, #0
 8007694:	d018      	beq.n	80076c8 <__d2b+0x90>
 8007696:	4b17      	ldr	r3, [pc, #92]	; (80076f4 <__d2b+0xbc>)
 8007698:	18f6      	adds	r6, r6, r3
 800769a:	2335      	movs	r3, #53	; 0x35
 800769c:	1836      	adds	r6, r6, r0
 800769e:	1a18      	subs	r0, r3, r0
 80076a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076a2:	603e      	str	r6, [r7, #0]
 80076a4:	6018      	str	r0, [r3, #0]
 80076a6:	0028      	movs	r0, r5
 80076a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80076aa:	2280      	movs	r2, #128	; 0x80
 80076ac:	0352      	lsls	r2, r2, #13
 80076ae:	4313      	orrs	r3, r2
 80076b0:	e7d6      	b.n	8007660 <__d2b+0x28>
 80076b2:	616c      	str	r4, [r5, #20]
 80076b4:	e7e7      	b.n	8007686 <__d2b+0x4e>
 80076b6:	a801      	add	r0, sp, #4
 80076b8:	f7ff fd4a 	bl	8007150 <__lo0bits>
 80076bc:	2401      	movs	r4, #1
 80076be:	9b01      	ldr	r3, [sp, #4]
 80076c0:	612c      	str	r4, [r5, #16]
 80076c2:	616b      	str	r3, [r5, #20]
 80076c4:	3020      	adds	r0, #32
 80076c6:	e7e4      	b.n	8007692 <__d2b+0x5a>
 80076c8:	4b0b      	ldr	r3, [pc, #44]	; (80076f8 <__d2b+0xc0>)
 80076ca:	18c0      	adds	r0, r0, r3
 80076cc:	4b0b      	ldr	r3, [pc, #44]	; (80076fc <__d2b+0xc4>)
 80076ce:	6038      	str	r0, [r7, #0]
 80076d0:	18e3      	adds	r3, r4, r3
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	18eb      	adds	r3, r5, r3
 80076d6:	6958      	ldr	r0, [r3, #20]
 80076d8:	f7ff fd20 	bl	800711c <__hi0bits>
 80076dc:	0164      	lsls	r4, r4, #5
 80076de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e0:	1a24      	subs	r4, r4, r0
 80076e2:	601c      	str	r4, [r3, #0]
 80076e4:	e7df      	b.n	80076a6 <__d2b+0x6e>
 80076e6:	46c0      	nop			; (mov r8, r8)
 80076e8:	080086e3 	.word	0x080086e3
 80076ec:	0000030a 	.word	0x0000030a
 80076f0:	080086f4 	.word	0x080086f4
 80076f4:	fffffbcd 	.word	0xfffffbcd
 80076f8:	fffffbce 	.word	0xfffffbce
 80076fc:	3fffffff 	.word	0x3fffffff

08007700 <_calloc_r>:
 8007700:	434a      	muls	r2, r1
 8007702:	b570      	push	{r4, r5, r6, lr}
 8007704:	0011      	movs	r1, r2
 8007706:	0015      	movs	r5, r2
 8007708:	f000 f852 	bl	80077b0 <_malloc_r>
 800770c:	1e04      	subs	r4, r0, #0
 800770e:	d003      	beq.n	8007718 <_calloc_r+0x18>
 8007710:	002a      	movs	r2, r5
 8007712:	2100      	movs	r1, #0
 8007714:	f7fe f908 	bl	8005928 <memset>
 8007718:	0020      	movs	r0, r4
 800771a:	bd70      	pop	{r4, r5, r6, pc}

0800771c <_free_r>:
 800771c:	b570      	push	{r4, r5, r6, lr}
 800771e:	0005      	movs	r5, r0
 8007720:	2900      	cmp	r1, #0
 8007722:	d010      	beq.n	8007746 <_free_r+0x2a>
 8007724:	1f0c      	subs	r4, r1, #4
 8007726:	6823      	ldr	r3, [r4, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	da00      	bge.n	800772e <_free_r+0x12>
 800772c:	18e4      	adds	r4, r4, r3
 800772e:	0028      	movs	r0, r5
 8007730:	f000 f8ee 	bl	8007910 <__malloc_lock>
 8007734:	4a1d      	ldr	r2, [pc, #116]	; (80077ac <_free_r+0x90>)
 8007736:	6813      	ldr	r3, [r2, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d105      	bne.n	8007748 <_free_r+0x2c>
 800773c:	6063      	str	r3, [r4, #4]
 800773e:	6014      	str	r4, [r2, #0]
 8007740:	0028      	movs	r0, r5
 8007742:	f000 f8ed 	bl	8007920 <__malloc_unlock>
 8007746:	bd70      	pop	{r4, r5, r6, pc}
 8007748:	42a3      	cmp	r3, r4
 800774a:	d908      	bls.n	800775e <_free_r+0x42>
 800774c:	6821      	ldr	r1, [r4, #0]
 800774e:	1860      	adds	r0, r4, r1
 8007750:	4283      	cmp	r3, r0
 8007752:	d1f3      	bne.n	800773c <_free_r+0x20>
 8007754:	6818      	ldr	r0, [r3, #0]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	1841      	adds	r1, r0, r1
 800775a:	6021      	str	r1, [r4, #0]
 800775c:	e7ee      	b.n	800773c <_free_r+0x20>
 800775e:	001a      	movs	r2, r3
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d001      	beq.n	800776a <_free_r+0x4e>
 8007766:	42a3      	cmp	r3, r4
 8007768:	d9f9      	bls.n	800775e <_free_r+0x42>
 800776a:	6811      	ldr	r1, [r2, #0]
 800776c:	1850      	adds	r0, r2, r1
 800776e:	42a0      	cmp	r0, r4
 8007770:	d10b      	bne.n	800778a <_free_r+0x6e>
 8007772:	6820      	ldr	r0, [r4, #0]
 8007774:	1809      	adds	r1, r1, r0
 8007776:	1850      	adds	r0, r2, r1
 8007778:	6011      	str	r1, [r2, #0]
 800777a:	4283      	cmp	r3, r0
 800777c:	d1e0      	bne.n	8007740 <_free_r+0x24>
 800777e:	6818      	ldr	r0, [r3, #0]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	1841      	adds	r1, r0, r1
 8007784:	6011      	str	r1, [r2, #0]
 8007786:	6053      	str	r3, [r2, #4]
 8007788:	e7da      	b.n	8007740 <_free_r+0x24>
 800778a:	42a0      	cmp	r0, r4
 800778c:	d902      	bls.n	8007794 <_free_r+0x78>
 800778e:	230c      	movs	r3, #12
 8007790:	602b      	str	r3, [r5, #0]
 8007792:	e7d5      	b.n	8007740 <_free_r+0x24>
 8007794:	6821      	ldr	r1, [r4, #0]
 8007796:	1860      	adds	r0, r4, r1
 8007798:	4283      	cmp	r3, r0
 800779a:	d103      	bne.n	80077a4 <_free_r+0x88>
 800779c:	6818      	ldr	r0, [r3, #0]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	1841      	adds	r1, r0, r1
 80077a2:	6021      	str	r1, [r4, #0]
 80077a4:	6063      	str	r3, [r4, #4]
 80077a6:	6054      	str	r4, [r2, #4]
 80077a8:	e7ca      	b.n	8007740 <_free_r+0x24>
 80077aa:	46c0      	nop			; (mov r8, r8)
 80077ac:	20000218 	.word	0x20000218

080077b0 <_malloc_r>:
 80077b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b2:	2303      	movs	r3, #3
 80077b4:	1ccd      	adds	r5, r1, #3
 80077b6:	439d      	bics	r5, r3
 80077b8:	3508      	adds	r5, #8
 80077ba:	0006      	movs	r6, r0
 80077bc:	2d0c      	cmp	r5, #12
 80077be:	d21f      	bcs.n	8007800 <_malloc_r+0x50>
 80077c0:	250c      	movs	r5, #12
 80077c2:	42a9      	cmp	r1, r5
 80077c4:	d81e      	bhi.n	8007804 <_malloc_r+0x54>
 80077c6:	0030      	movs	r0, r6
 80077c8:	f000 f8a2 	bl	8007910 <__malloc_lock>
 80077cc:	4925      	ldr	r1, [pc, #148]	; (8007864 <_malloc_r+0xb4>)
 80077ce:	680a      	ldr	r2, [r1, #0]
 80077d0:	0014      	movs	r4, r2
 80077d2:	2c00      	cmp	r4, #0
 80077d4:	d11a      	bne.n	800780c <_malloc_r+0x5c>
 80077d6:	4f24      	ldr	r7, [pc, #144]	; (8007868 <_malloc_r+0xb8>)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d104      	bne.n	80077e8 <_malloc_r+0x38>
 80077de:	0021      	movs	r1, r4
 80077e0:	0030      	movs	r0, r6
 80077e2:	f000 f843 	bl	800786c <_sbrk_r>
 80077e6:	6038      	str	r0, [r7, #0]
 80077e8:	0029      	movs	r1, r5
 80077ea:	0030      	movs	r0, r6
 80077ec:	f000 f83e 	bl	800786c <_sbrk_r>
 80077f0:	1c43      	adds	r3, r0, #1
 80077f2:	d12b      	bne.n	800784c <_malloc_r+0x9c>
 80077f4:	230c      	movs	r3, #12
 80077f6:	0030      	movs	r0, r6
 80077f8:	6033      	str	r3, [r6, #0]
 80077fa:	f000 f891 	bl	8007920 <__malloc_unlock>
 80077fe:	e003      	b.n	8007808 <_malloc_r+0x58>
 8007800:	2d00      	cmp	r5, #0
 8007802:	dade      	bge.n	80077c2 <_malloc_r+0x12>
 8007804:	230c      	movs	r3, #12
 8007806:	6033      	str	r3, [r6, #0]
 8007808:	2000      	movs	r0, #0
 800780a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800780c:	6823      	ldr	r3, [r4, #0]
 800780e:	1b5b      	subs	r3, r3, r5
 8007810:	d419      	bmi.n	8007846 <_malloc_r+0x96>
 8007812:	2b0b      	cmp	r3, #11
 8007814:	d903      	bls.n	800781e <_malloc_r+0x6e>
 8007816:	6023      	str	r3, [r4, #0]
 8007818:	18e4      	adds	r4, r4, r3
 800781a:	6025      	str	r5, [r4, #0]
 800781c:	e003      	b.n	8007826 <_malloc_r+0x76>
 800781e:	6863      	ldr	r3, [r4, #4]
 8007820:	42a2      	cmp	r2, r4
 8007822:	d10e      	bne.n	8007842 <_malloc_r+0x92>
 8007824:	600b      	str	r3, [r1, #0]
 8007826:	0030      	movs	r0, r6
 8007828:	f000 f87a 	bl	8007920 <__malloc_unlock>
 800782c:	0020      	movs	r0, r4
 800782e:	2207      	movs	r2, #7
 8007830:	300b      	adds	r0, #11
 8007832:	1d23      	adds	r3, r4, #4
 8007834:	4390      	bics	r0, r2
 8007836:	1ac2      	subs	r2, r0, r3
 8007838:	4298      	cmp	r0, r3
 800783a:	d0e6      	beq.n	800780a <_malloc_r+0x5a>
 800783c:	1a1b      	subs	r3, r3, r0
 800783e:	50a3      	str	r3, [r4, r2]
 8007840:	e7e3      	b.n	800780a <_malloc_r+0x5a>
 8007842:	6053      	str	r3, [r2, #4]
 8007844:	e7ef      	b.n	8007826 <_malloc_r+0x76>
 8007846:	0022      	movs	r2, r4
 8007848:	6864      	ldr	r4, [r4, #4]
 800784a:	e7c2      	b.n	80077d2 <_malloc_r+0x22>
 800784c:	2303      	movs	r3, #3
 800784e:	1cc4      	adds	r4, r0, #3
 8007850:	439c      	bics	r4, r3
 8007852:	42a0      	cmp	r0, r4
 8007854:	d0e1      	beq.n	800781a <_malloc_r+0x6a>
 8007856:	1a21      	subs	r1, r4, r0
 8007858:	0030      	movs	r0, r6
 800785a:	f000 f807 	bl	800786c <_sbrk_r>
 800785e:	1c43      	adds	r3, r0, #1
 8007860:	d1db      	bne.n	800781a <_malloc_r+0x6a>
 8007862:	e7c7      	b.n	80077f4 <_malloc_r+0x44>
 8007864:	20000218 	.word	0x20000218
 8007868:	2000021c 	.word	0x2000021c

0800786c <_sbrk_r>:
 800786c:	2300      	movs	r3, #0
 800786e:	b570      	push	{r4, r5, r6, lr}
 8007870:	4d06      	ldr	r5, [pc, #24]	; (800788c <_sbrk_r+0x20>)
 8007872:	0004      	movs	r4, r0
 8007874:	0008      	movs	r0, r1
 8007876:	602b      	str	r3, [r5, #0]
 8007878:	f7fb fc28 	bl	80030cc <_sbrk>
 800787c:	1c43      	adds	r3, r0, #1
 800787e:	d103      	bne.n	8007888 <_sbrk_r+0x1c>
 8007880:	682b      	ldr	r3, [r5, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d000      	beq.n	8007888 <_sbrk_r+0x1c>
 8007886:	6023      	str	r3, [r4, #0]
 8007888:	bd70      	pop	{r4, r5, r6, pc}
 800788a:	46c0      	nop			; (mov r8, r8)
 800788c:	20000300 	.word	0x20000300

08007890 <__assert_func>:
 8007890:	b530      	push	{r4, r5, lr}
 8007892:	0014      	movs	r4, r2
 8007894:	001a      	movs	r2, r3
 8007896:	4b09      	ldr	r3, [pc, #36]	; (80078bc <__assert_func+0x2c>)
 8007898:	0005      	movs	r5, r0
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	b085      	sub	sp, #20
 800789e:	68d8      	ldr	r0, [r3, #12]
 80078a0:	4b07      	ldr	r3, [pc, #28]	; (80078c0 <__assert_func+0x30>)
 80078a2:	2c00      	cmp	r4, #0
 80078a4:	d101      	bne.n	80078aa <__assert_func+0x1a>
 80078a6:	4b07      	ldr	r3, [pc, #28]	; (80078c4 <__assert_func+0x34>)
 80078a8:	001c      	movs	r4, r3
 80078aa:	9301      	str	r3, [sp, #4]
 80078ac:	9100      	str	r1, [sp, #0]
 80078ae:	002b      	movs	r3, r5
 80078b0:	4905      	ldr	r1, [pc, #20]	; (80078c8 <__assert_func+0x38>)
 80078b2:	9402      	str	r4, [sp, #8]
 80078b4:	f000 f80a 	bl	80078cc <fiprintf>
 80078b8:	f000 fa78 	bl	8007dac <abort>
 80078bc:	2000000c 	.word	0x2000000c
 80078c0:	08008854 	.word	0x08008854
 80078c4:	0800888f 	.word	0x0800888f
 80078c8:	08008861 	.word	0x08008861

080078cc <fiprintf>:
 80078cc:	b40e      	push	{r1, r2, r3}
 80078ce:	b503      	push	{r0, r1, lr}
 80078d0:	0001      	movs	r1, r0
 80078d2:	ab03      	add	r3, sp, #12
 80078d4:	4804      	ldr	r0, [pc, #16]	; (80078e8 <fiprintf+0x1c>)
 80078d6:	cb04      	ldmia	r3!, {r2}
 80078d8:	6800      	ldr	r0, [r0, #0]
 80078da:	9301      	str	r3, [sp, #4]
 80078dc:	f000 f850 	bl	8007980 <_vfiprintf_r>
 80078e0:	b002      	add	sp, #8
 80078e2:	bc08      	pop	{r3}
 80078e4:	b003      	add	sp, #12
 80078e6:	4718      	bx	r3
 80078e8:	2000000c 	.word	0x2000000c

080078ec <__ascii_mbtowc>:
 80078ec:	b082      	sub	sp, #8
 80078ee:	2900      	cmp	r1, #0
 80078f0:	d100      	bne.n	80078f4 <__ascii_mbtowc+0x8>
 80078f2:	a901      	add	r1, sp, #4
 80078f4:	1e10      	subs	r0, r2, #0
 80078f6:	d006      	beq.n	8007906 <__ascii_mbtowc+0x1a>
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d006      	beq.n	800790a <__ascii_mbtowc+0x1e>
 80078fc:	7813      	ldrb	r3, [r2, #0]
 80078fe:	600b      	str	r3, [r1, #0]
 8007900:	7810      	ldrb	r0, [r2, #0]
 8007902:	1e43      	subs	r3, r0, #1
 8007904:	4198      	sbcs	r0, r3
 8007906:	b002      	add	sp, #8
 8007908:	4770      	bx	lr
 800790a:	2002      	movs	r0, #2
 800790c:	4240      	negs	r0, r0
 800790e:	e7fa      	b.n	8007906 <__ascii_mbtowc+0x1a>

08007910 <__malloc_lock>:
 8007910:	b510      	push	{r4, lr}
 8007912:	4802      	ldr	r0, [pc, #8]	; (800791c <__malloc_lock+0xc>)
 8007914:	f000 fc21 	bl	800815a <__retarget_lock_acquire_recursive>
 8007918:	bd10      	pop	{r4, pc}
 800791a:	46c0      	nop			; (mov r8, r8)
 800791c:	20000308 	.word	0x20000308

08007920 <__malloc_unlock>:
 8007920:	b510      	push	{r4, lr}
 8007922:	4802      	ldr	r0, [pc, #8]	; (800792c <__malloc_unlock+0xc>)
 8007924:	f000 fc1a 	bl	800815c <__retarget_lock_release_recursive>
 8007928:	bd10      	pop	{r4, pc}
 800792a:	46c0      	nop			; (mov r8, r8)
 800792c:	20000308 	.word	0x20000308

08007930 <__sfputc_r>:
 8007930:	6893      	ldr	r3, [r2, #8]
 8007932:	b510      	push	{r4, lr}
 8007934:	3b01      	subs	r3, #1
 8007936:	6093      	str	r3, [r2, #8]
 8007938:	2b00      	cmp	r3, #0
 800793a:	da04      	bge.n	8007946 <__sfputc_r+0x16>
 800793c:	6994      	ldr	r4, [r2, #24]
 800793e:	42a3      	cmp	r3, r4
 8007940:	db07      	blt.n	8007952 <__sfputc_r+0x22>
 8007942:	290a      	cmp	r1, #10
 8007944:	d005      	beq.n	8007952 <__sfputc_r+0x22>
 8007946:	6813      	ldr	r3, [r2, #0]
 8007948:	1c58      	adds	r0, r3, #1
 800794a:	6010      	str	r0, [r2, #0]
 800794c:	7019      	strb	r1, [r3, #0]
 800794e:	0008      	movs	r0, r1
 8007950:	bd10      	pop	{r4, pc}
 8007952:	f000 f94f 	bl	8007bf4 <__swbuf_r>
 8007956:	0001      	movs	r1, r0
 8007958:	e7f9      	b.n	800794e <__sfputc_r+0x1e>

0800795a <__sfputs_r>:
 800795a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795c:	0006      	movs	r6, r0
 800795e:	000f      	movs	r7, r1
 8007960:	0014      	movs	r4, r2
 8007962:	18d5      	adds	r5, r2, r3
 8007964:	42ac      	cmp	r4, r5
 8007966:	d101      	bne.n	800796c <__sfputs_r+0x12>
 8007968:	2000      	movs	r0, #0
 800796a:	e007      	b.n	800797c <__sfputs_r+0x22>
 800796c:	7821      	ldrb	r1, [r4, #0]
 800796e:	003a      	movs	r2, r7
 8007970:	0030      	movs	r0, r6
 8007972:	f7ff ffdd 	bl	8007930 <__sfputc_r>
 8007976:	3401      	adds	r4, #1
 8007978:	1c43      	adds	r3, r0, #1
 800797a:	d1f3      	bne.n	8007964 <__sfputs_r+0xa>
 800797c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007980 <_vfiprintf_r>:
 8007980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007982:	b0a1      	sub	sp, #132	; 0x84
 8007984:	0006      	movs	r6, r0
 8007986:	000c      	movs	r4, r1
 8007988:	001f      	movs	r7, r3
 800798a:	9203      	str	r2, [sp, #12]
 800798c:	2800      	cmp	r0, #0
 800798e:	d004      	beq.n	800799a <_vfiprintf_r+0x1a>
 8007990:	6983      	ldr	r3, [r0, #24]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d101      	bne.n	800799a <_vfiprintf_r+0x1a>
 8007996:	f000 fb3f 	bl	8008018 <__sinit>
 800799a:	4b8e      	ldr	r3, [pc, #568]	; (8007bd4 <_vfiprintf_r+0x254>)
 800799c:	429c      	cmp	r4, r3
 800799e:	d11c      	bne.n	80079da <_vfiprintf_r+0x5a>
 80079a0:	6874      	ldr	r4, [r6, #4]
 80079a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079a4:	07db      	lsls	r3, r3, #31
 80079a6:	d405      	bmi.n	80079b4 <_vfiprintf_r+0x34>
 80079a8:	89a3      	ldrh	r3, [r4, #12]
 80079aa:	059b      	lsls	r3, r3, #22
 80079ac:	d402      	bmi.n	80079b4 <_vfiprintf_r+0x34>
 80079ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079b0:	f000 fbd3 	bl	800815a <__retarget_lock_acquire_recursive>
 80079b4:	89a3      	ldrh	r3, [r4, #12]
 80079b6:	071b      	lsls	r3, r3, #28
 80079b8:	d502      	bpl.n	80079c0 <_vfiprintf_r+0x40>
 80079ba:	6923      	ldr	r3, [r4, #16]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d11d      	bne.n	80079fc <_vfiprintf_r+0x7c>
 80079c0:	0021      	movs	r1, r4
 80079c2:	0030      	movs	r0, r6
 80079c4:	f000 f97a 	bl	8007cbc <__swsetup_r>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	d017      	beq.n	80079fc <_vfiprintf_r+0x7c>
 80079cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079ce:	07db      	lsls	r3, r3, #31
 80079d0:	d50d      	bpl.n	80079ee <_vfiprintf_r+0x6e>
 80079d2:	2001      	movs	r0, #1
 80079d4:	4240      	negs	r0, r0
 80079d6:	b021      	add	sp, #132	; 0x84
 80079d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079da:	4b7f      	ldr	r3, [pc, #508]	; (8007bd8 <_vfiprintf_r+0x258>)
 80079dc:	429c      	cmp	r4, r3
 80079de:	d101      	bne.n	80079e4 <_vfiprintf_r+0x64>
 80079e0:	68b4      	ldr	r4, [r6, #8]
 80079e2:	e7de      	b.n	80079a2 <_vfiprintf_r+0x22>
 80079e4:	4b7d      	ldr	r3, [pc, #500]	; (8007bdc <_vfiprintf_r+0x25c>)
 80079e6:	429c      	cmp	r4, r3
 80079e8:	d1db      	bne.n	80079a2 <_vfiprintf_r+0x22>
 80079ea:	68f4      	ldr	r4, [r6, #12]
 80079ec:	e7d9      	b.n	80079a2 <_vfiprintf_r+0x22>
 80079ee:	89a3      	ldrh	r3, [r4, #12]
 80079f0:	059b      	lsls	r3, r3, #22
 80079f2:	d4ee      	bmi.n	80079d2 <_vfiprintf_r+0x52>
 80079f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079f6:	f000 fbb1 	bl	800815c <__retarget_lock_release_recursive>
 80079fa:	e7ea      	b.n	80079d2 <_vfiprintf_r+0x52>
 80079fc:	2300      	movs	r3, #0
 80079fe:	ad08      	add	r5, sp, #32
 8007a00:	616b      	str	r3, [r5, #20]
 8007a02:	3320      	adds	r3, #32
 8007a04:	766b      	strb	r3, [r5, #25]
 8007a06:	3310      	adds	r3, #16
 8007a08:	76ab      	strb	r3, [r5, #26]
 8007a0a:	9707      	str	r7, [sp, #28]
 8007a0c:	9f03      	ldr	r7, [sp, #12]
 8007a0e:	783b      	ldrb	r3, [r7, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d001      	beq.n	8007a18 <_vfiprintf_r+0x98>
 8007a14:	2b25      	cmp	r3, #37	; 0x25
 8007a16:	d14e      	bne.n	8007ab6 <_vfiprintf_r+0x136>
 8007a18:	9b03      	ldr	r3, [sp, #12]
 8007a1a:	1afb      	subs	r3, r7, r3
 8007a1c:	9305      	str	r3, [sp, #20]
 8007a1e:	9b03      	ldr	r3, [sp, #12]
 8007a20:	429f      	cmp	r7, r3
 8007a22:	d00d      	beq.n	8007a40 <_vfiprintf_r+0xc0>
 8007a24:	9b05      	ldr	r3, [sp, #20]
 8007a26:	0021      	movs	r1, r4
 8007a28:	0030      	movs	r0, r6
 8007a2a:	9a03      	ldr	r2, [sp, #12]
 8007a2c:	f7ff ff95 	bl	800795a <__sfputs_r>
 8007a30:	1c43      	adds	r3, r0, #1
 8007a32:	d100      	bne.n	8007a36 <_vfiprintf_r+0xb6>
 8007a34:	e0b5      	b.n	8007ba2 <_vfiprintf_r+0x222>
 8007a36:	696a      	ldr	r2, [r5, #20]
 8007a38:	9b05      	ldr	r3, [sp, #20]
 8007a3a:	4694      	mov	ip, r2
 8007a3c:	4463      	add	r3, ip
 8007a3e:	616b      	str	r3, [r5, #20]
 8007a40:	783b      	ldrb	r3, [r7, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d100      	bne.n	8007a48 <_vfiprintf_r+0xc8>
 8007a46:	e0ac      	b.n	8007ba2 <_vfiprintf_r+0x222>
 8007a48:	2201      	movs	r2, #1
 8007a4a:	1c7b      	adds	r3, r7, #1
 8007a4c:	9303      	str	r3, [sp, #12]
 8007a4e:	2300      	movs	r3, #0
 8007a50:	4252      	negs	r2, r2
 8007a52:	606a      	str	r2, [r5, #4]
 8007a54:	a904      	add	r1, sp, #16
 8007a56:	3254      	adds	r2, #84	; 0x54
 8007a58:	1852      	adds	r2, r2, r1
 8007a5a:	602b      	str	r3, [r5, #0]
 8007a5c:	60eb      	str	r3, [r5, #12]
 8007a5e:	60ab      	str	r3, [r5, #8]
 8007a60:	7013      	strb	r3, [r2, #0]
 8007a62:	65ab      	str	r3, [r5, #88]	; 0x58
 8007a64:	9b03      	ldr	r3, [sp, #12]
 8007a66:	2205      	movs	r2, #5
 8007a68:	7819      	ldrb	r1, [r3, #0]
 8007a6a:	485d      	ldr	r0, [pc, #372]	; (8007be0 <_vfiprintf_r+0x260>)
 8007a6c:	f7ff fa96 	bl	8006f9c <memchr>
 8007a70:	9b03      	ldr	r3, [sp, #12]
 8007a72:	1c5f      	adds	r7, r3, #1
 8007a74:	2800      	cmp	r0, #0
 8007a76:	d120      	bne.n	8007aba <_vfiprintf_r+0x13a>
 8007a78:	682a      	ldr	r2, [r5, #0]
 8007a7a:	06d3      	lsls	r3, r2, #27
 8007a7c:	d504      	bpl.n	8007a88 <_vfiprintf_r+0x108>
 8007a7e:	2353      	movs	r3, #83	; 0x53
 8007a80:	a904      	add	r1, sp, #16
 8007a82:	185b      	adds	r3, r3, r1
 8007a84:	2120      	movs	r1, #32
 8007a86:	7019      	strb	r1, [r3, #0]
 8007a88:	0713      	lsls	r3, r2, #28
 8007a8a:	d504      	bpl.n	8007a96 <_vfiprintf_r+0x116>
 8007a8c:	2353      	movs	r3, #83	; 0x53
 8007a8e:	a904      	add	r1, sp, #16
 8007a90:	185b      	adds	r3, r3, r1
 8007a92:	212b      	movs	r1, #43	; 0x2b
 8007a94:	7019      	strb	r1, [r3, #0]
 8007a96:	9b03      	ldr	r3, [sp, #12]
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	2b2a      	cmp	r3, #42	; 0x2a
 8007a9c:	d016      	beq.n	8007acc <_vfiprintf_r+0x14c>
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	68eb      	ldr	r3, [r5, #12]
 8007aa2:	9f03      	ldr	r7, [sp, #12]
 8007aa4:	783a      	ldrb	r2, [r7, #0]
 8007aa6:	1c78      	adds	r0, r7, #1
 8007aa8:	3a30      	subs	r2, #48	; 0x30
 8007aaa:	4684      	mov	ip, r0
 8007aac:	2a09      	cmp	r2, #9
 8007aae:	d94f      	bls.n	8007b50 <_vfiprintf_r+0x1d0>
 8007ab0:	2900      	cmp	r1, #0
 8007ab2:	d111      	bne.n	8007ad8 <_vfiprintf_r+0x158>
 8007ab4:	e017      	b.n	8007ae6 <_vfiprintf_r+0x166>
 8007ab6:	3701      	adds	r7, #1
 8007ab8:	e7a9      	b.n	8007a0e <_vfiprintf_r+0x8e>
 8007aba:	4b49      	ldr	r3, [pc, #292]	; (8007be0 <_vfiprintf_r+0x260>)
 8007abc:	682a      	ldr	r2, [r5, #0]
 8007abe:	1ac0      	subs	r0, r0, r3
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	4083      	lsls	r3, r0
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	602b      	str	r3, [r5, #0]
 8007ac8:	9703      	str	r7, [sp, #12]
 8007aca:	e7cb      	b.n	8007a64 <_vfiprintf_r+0xe4>
 8007acc:	9b07      	ldr	r3, [sp, #28]
 8007ace:	1d19      	adds	r1, r3, #4
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	9107      	str	r1, [sp, #28]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	db01      	blt.n	8007adc <_vfiprintf_r+0x15c>
 8007ad8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ada:	e004      	b.n	8007ae6 <_vfiprintf_r+0x166>
 8007adc:	425b      	negs	r3, r3
 8007ade:	60eb      	str	r3, [r5, #12]
 8007ae0:	2302      	movs	r3, #2
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	602b      	str	r3, [r5, #0]
 8007ae6:	783b      	ldrb	r3, [r7, #0]
 8007ae8:	2b2e      	cmp	r3, #46	; 0x2e
 8007aea:	d10a      	bne.n	8007b02 <_vfiprintf_r+0x182>
 8007aec:	787b      	ldrb	r3, [r7, #1]
 8007aee:	2b2a      	cmp	r3, #42	; 0x2a
 8007af0:	d137      	bne.n	8007b62 <_vfiprintf_r+0x1e2>
 8007af2:	9b07      	ldr	r3, [sp, #28]
 8007af4:	3702      	adds	r7, #2
 8007af6:	1d1a      	adds	r2, r3, #4
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	9207      	str	r2, [sp, #28]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	db2d      	blt.n	8007b5c <_vfiprintf_r+0x1dc>
 8007b00:	9309      	str	r3, [sp, #36]	; 0x24
 8007b02:	2203      	movs	r2, #3
 8007b04:	7839      	ldrb	r1, [r7, #0]
 8007b06:	4837      	ldr	r0, [pc, #220]	; (8007be4 <_vfiprintf_r+0x264>)
 8007b08:	f7ff fa48 	bl	8006f9c <memchr>
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	d007      	beq.n	8007b20 <_vfiprintf_r+0x1a0>
 8007b10:	4b34      	ldr	r3, [pc, #208]	; (8007be4 <_vfiprintf_r+0x264>)
 8007b12:	682a      	ldr	r2, [r5, #0]
 8007b14:	1ac0      	subs	r0, r0, r3
 8007b16:	2340      	movs	r3, #64	; 0x40
 8007b18:	4083      	lsls	r3, r0
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	3701      	adds	r7, #1
 8007b1e:	602b      	str	r3, [r5, #0]
 8007b20:	7839      	ldrb	r1, [r7, #0]
 8007b22:	1c7b      	adds	r3, r7, #1
 8007b24:	2206      	movs	r2, #6
 8007b26:	4830      	ldr	r0, [pc, #192]	; (8007be8 <_vfiprintf_r+0x268>)
 8007b28:	9303      	str	r3, [sp, #12]
 8007b2a:	7629      	strb	r1, [r5, #24]
 8007b2c:	f7ff fa36 	bl	8006f9c <memchr>
 8007b30:	2800      	cmp	r0, #0
 8007b32:	d045      	beq.n	8007bc0 <_vfiprintf_r+0x240>
 8007b34:	4b2d      	ldr	r3, [pc, #180]	; (8007bec <_vfiprintf_r+0x26c>)
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d127      	bne.n	8007b8a <_vfiprintf_r+0x20a>
 8007b3a:	2207      	movs	r2, #7
 8007b3c:	9b07      	ldr	r3, [sp, #28]
 8007b3e:	3307      	adds	r3, #7
 8007b40:	4393      	bics	r3, r2
 8007b42:	3308      	adds	r3, #8
 8007b44:	9307      	str	r3, [sp, #28]
 8007b46:	696b      	ldr	r3, [r5, #20]
 8007b48:	9a04      	ldr	r2, [sp, #16]
 8007b4a:	189b      	adds	r3, r3, r2
 8007b4c:	616b      	str	r3, [r5, #20]
 8007b4e:	e75d      	b.n	8007a0c <_vfiprintf_r+0x8c>
 8007b50:	210a      	movs	r1, #10
 8007b52:	434b      	muls	r3, r1
 8007b54:	4667      	mov	r7, ip
 8007b56:	189b      	adds	r3, r3, r2
 8007b58:	3909      	subs	r1, #9
 8007b5a:	e7a3      	b.n	8007aa4 <_vfiprintf_r+0x124>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	425b      	negs	r3, r3
 8007b60:	e7ce      	b.n	8007b00 <_vfiprintf_r+0x180>
 8007b62:	2300      	movs	r3, #0
 8007b64:	001a      	movs	r2, r3
 8007b66:	3701      	adds	r7, #1
 8007b68:	606b      	str	r3, [r5, #4]
 8007b6a:	7839      	ldrb	r1, [r7, #0]
 8007b6c:	1c78      	adds	r0, r7, #1
 8007b6e:	3930      	subs	r1, #48	; 0x30
 8007b70:	4684      	mov	ip, r0
 8007b72:	2909      	cmp	r1, #9
 8007b74:	d903      	bls.n	8007b7e <_vfiprintf_r+0x1fe>
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d0c3      	beq.n	8007b02 <_vfiprintf_r+0x182>
 8007b7a:	9209      	str	r2, [sp, #36]	; 0x24
 8007b7c:	e7c1      	b.n	8007b02 <_vfiprintf_r+0x182>
 8007b7e:	230a      	movs	r3, #10
 8007b80:	435a      	muls	r2, r3
 8007b82:	4667      	mov	r7, ip
 8007b84:	1852      	adds	r2, r2, r1
 8007b86:	3b09      	subs	r3, #9
 8007b88:	e7ef      	b.n	8007b6a <_vfiprintf_r+0x1ea>
 8007b8a:	ab07      	add	r3, sp, #28
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	0022      	movs	r2, r4
 8007b90:	0029      	movs	r1, r5
 8007b92:	0030      	movs	r0, r6
 8007b94:	4b16      	ldr	r3, [pc, #88]	; (8007bf0 <_vfiprintf_r+0x270>)
 8007b96:	f7fd ff79 	bl	8005a8c <_printf_float>
 8007b9a:	9004      	str	r0, [sp, #16]
 8007b9c:	9b04      	ldr	r3, [sp, #16]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	d1d1      	bne.n	8007b46 <_vfiprintf_r+0x1c6>
 8007ba2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ba4:	07db      	lsls	r3, r3, #31
 8007ba6:	d405      	bmi.n	8007bb4 <_vfiprintf_r+0x234>
 8007ba8:	89a3      	ldrh	r3, [r4, #12]
 8007baa:	059b      	lsls	r3, r3, #22
 8007bac:	d402      	bmi.n	8007bb4 <_vfiprintf_r+0x234>
 8007bae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bb0:	f000 fad4 	bl	800815c <__retarget_lock_release_recursive>
 8007bb4:	89a3      	ldrh	r3, [r4, #12]
 8007bb6:	065b      	lsls	r3, r3, #25
 8007bb8:	d500      	bpl.n	8007bbc <_vfiprintf_r+0x23c>
 8007bba:	e70a      	b.n	80079d2 <_vfiprintf_r+0x52>
 8007bbc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007bbe:	e70a      	b.n	80079d6 <_vfiprintf_r+0x56>
 8007bc0:	ab07      	add	r3, sp, #28
 8007bc2:	9300      	str	r3, [sp, #0]
 8007bc4:	0022      	movs	r2, r4
 8007bc6:	0029      	movs	r1, r5
 8007bc8:	0030      	movs	r0, r6
 8007bca:	4b09      	ldr	r3, [pc, #36]	; (8007bf0 <_vfiprintf_r+0x270>)
 8007bcc:	f7fe fa1c 	bl	8006008 <_printf_i>
 8007bd0:	e7e3      	b.n	8007b9a <_vfiprintf_r+0x21a>
 8007bd2:	46c0      	nop			; (mov r8, r8)
 8007bd4:	080089cc 	.word	0x080089cc
 8007bd8:	080089ec 	.word	0x080089ec
 8007bdc:	080089ac 	.word	0x080089ac
 8007be0:	0800889a 	.word	0x0800889a
 8007be4:	080088a0 	.word	0x080088a0
 8007be8:	080088a4 	.word	0x080088a4
 8007bec:	08005a8d 	.word	0x08005a8d
 8007bf0:	0800795b 	.word	0x0800795b

08007bf4 <__swbuf_r>:
 8007bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf6:	0005      	movs	r5, r0
 8007bf8:	000e      	movs	r6, r1
 8007bfa:	0014      	movs	r4, r2
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	d004      	beq.n	8007c0a <__swbuf_r+0x16>
 8007c00:	6983      	ldr	r3, [r0, #24]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d101      	bne.n	8007c0a <__swbuf_r+0x16>
 8007c06:	f000 fa07 	bl	8008018 <__sinit>
 8007c0a:	4b22      	ldr	r3, [pc, #136]	; (8007c94 <__swbuf_r+0xa0>)
 8007c0c:	429c      	cmp	r4, r3
 8007c0e:	d12e      	bne.n	8007c6e <__swbuf_r+0x7a>
 8007c10:	686c      	ldr	r4, [r5, #4]
 8007c12:	69a3      	ldr	r3, [r4, #24]
 8007c14:	60a3      	str	r3, [r4, #8]
 8007c16:	89a3      	ldrh	r3, [r4, #12]
 8007c18:	071b      	lsls	r3, r3, #28
 8007c1a:	d532      	bpl.n	8007c82 <__swbuf_r+0x8e>
 8007c1c:	6923      	ldr	r3, [r4, #16]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d02f      	beq.n	8007c82 <__swbuf_r+0x8e>
 8007c22:	6823      	ldr	r3, [r4, #0]
 8007c24:	6922      	ldr	r2, [r4, #16]
 8007c26:	b2f7      	uxtb	r7, r6
 8007c28:	1a98      	subs	r0, r3, r2
 8007c2a:	6963      	ldr	r3, [r4, #20]
 8007c2c:	b2f6      	uxtb	r6, r6
 8007c2e:	4283      	cmp	r3, r0
 8007c30:	dc05      	bgt.n	8007c3e <__swbuf_r+0x4a>
 8007c32:	0021      	movs	r1, r4
 8007c34:	0028      	movs	r0, r5
 8007c36:	f000 f94d 	bl	8007ed4 <_fflush_r>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	d127      	bne.n	8007c8e <__swbuf_r+0x9a>
 8007c3e:	68a3      	ldr	r3, [r4, #8]
 8007c40:	3001      	adds	r0, #1
 8007c42:	3b01      	subs	r3, #1
 8007c44:	60a3      	str	r3, [r4, #8]
 8007c46:	6823      	ldr	r3, [r4, #0]
 8007c48:	1c5a      	adds	r2, r3, #1
 8007c4a:	6022      	str	r2, [r4, #0]
 8007c4c:	701f      	strb	r7, [r3, #0]
 8007c4e:	6963      	ldr	r3, [r4, #20]
 8007c50:	4283      	cmp	r3, r0
 8007c52:	d004      	beq.n	8007c5e <__swbuf_r+0x6a>
 8007c54:	89a3      	ldrh	r3, [r4, #12]
 8007c56:	07db      	lsls	r3, r3, #31
 8007c58:	d507      	bpl.n	8007c6a <__swbuf_r+0x76>
 8007c5a:	2e0a      	cmp	r6, #10
 8007c5c:	d105      	bne.n	8007c6a <__swbuf_r+0x76>
 8007c5e:	0021      	movs	r1, r4
 8007c60:	0028      	movs	r0, r5
 8007c62:	f000 f937 	bl	8007ed4 <_fflush_r>
 8007c66:	2800      	cmp	r0, #0
 8007c68:	d111      	bne.n	8007c8e <__swbuf_r+0x9a>
 8007c6a:	0030      	movs	r0, r6
 8007c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c6e:	4b0a      	ldr	r3, [pc, #40]	; (8007c98 <__swbuf_r+0xa4>)
 8007c70:	429c      	cmp	r4, r3
 8007c72:	d101      	bne.n	8007c78 <__swbuf_r+0x84>
 8007c74:	68ac      	ldr	r4, [r5, #8]
 8007c76:	e7cc      	b.n	8007c12 <__swbuf_r+0x1e>
 8007c78:	4b08      	ldr	r3, [pc, #32]	; (8007c9c <__swbuf_r+0xa8>)
 8007c7a:	429c      	cmp	r4, r3
 8007c7c:	d1c9      	bne.n	8007c12 <__swbuf_r+0x1e>
 8007c7e:	68ec      	ldr	r4, [r5, #12]
 8007c80:	e7c7      	b.n	8007c12 <__swbuf_r+0x1e>
 8007c82:	0021      	movs	r1, r4
 8007c84:	0028      	movs	r0, r5
 8007c86:	f000 f819 	bl	8007cbc <__swsetup_r>
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	d0c9      	beq.n	8007c22 <__swbuf_r+0x2e>
 8007c8e:	2601      	movs	r6, #1
 8007c90:	4276      	negs	r6, r6
 8007c92:	e7ea      	b.n	8007c6a <__swbuf_r+0x76>
 8007c94:	080089cc 	.word	0x080089cc
 8007c98:	080089ec 	.word	0x080089ec
 8007c9c:	080089ac 	.word	0x080089ac

08007ca0 <__ascii_wctomb>:
 8007ca0:	0003      	movs	r3, r0
 8007ca2:	1e08      	subs	r0, r1, #0
 8007ca4:	d005      	beq.n	8007cb2 <__ascii_wctomb+0x12>
 8007ca6:	2aff      	cmp	r2, #255	; 0xff
 8007ca8:	d904      	bls.n	8007cb4 <__ascii_wctomb+0x14>
 8007caa:	228a      	movs	r2, #138	; 0x8a
 8007cac:	2001      	movs	r0, #1
 8007cae:	601a      	str	r2, [r3, #0]
 8007cb0:	4240      	negs	r0, r0
 8007cb2:	4770      	bx	lr
 8007cb4:	2001      	movs	r0, #1
 8007cb6:	700a      	strb	r2, [r1, #0]
 8007cb8:	e7fb      	b.n	8007cb2 <__ascii_wctomb+0x12>
	...

08007cbc <__swsetup_r>:
 8007cbc:	4b37      	ldr	r3, [pc, #220]	; (8007d9c <__swsetup_r+0xe0>)
 8007cbe:	b570      	push	{r4, r5, r6, lr}
 8007cc0:	681d      	ldr	r5, [r3, #0]
 8007cc2:	0006      	movs	r6, r0
 8007cc4:	000c      	movs	r4, r1
 8007cc6:	2d00      	cmp	r5, #0
 8007cc8:	d005      	beq.n	8007cd6 <__swsetup_r+0x1a>
 8007cca:	69ab      	ldr	r3, [r5, #24]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d102      	bne.n	8007cd6 <__swsetup_r+0x1a>
 8007cd0:	0028      	movs	r0, r5
 8007cd2:	f000 f9a1 	bl	8008018 <__sinit>
 8007cd6:	4b32      	ldr	r3, [pc, #200]	; (8007da0 <__swsetup_r+0xe4>)
 8007cd8:	429c      	cmp	r4, r3
 8007cda:	d10f      	bne.n	8007cfc <__swsetup_r+0x40>
 8007cdc:	686c      	ldr	r4, [r5, #4]
 8007cde:	230c      	movs	r3, #12
 8007ce0:	5ee2      	ldrsh	r2, [r4, r3]
 8007ce2:	b293      	uxth	r3, r2
 8007ce4:	0711      	lsls	r1, r2, #28
 8007ce6:	d42d      	bmi.n	8007d44 <__swsetup_r+0x88>
 8007ce8:	06d9      	lsls	r1, r3, #27
 8007cea:	d411      	bmi.n	8007d10 <__swsetup_r+0x54>
 8007cec:	2309      	movs	r3, #9
 8007cee:	2001      	movs	r0, #1
 8007cf0:	6033      	str	r3, [r6, #0]
 8007cf2:	3337      	adds	r3, #55	; 0x37
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	81a3      	strh	r3, [r4, #12]
 8007cf8:	4240      	negs	r0, r0
 8007cfa:	bd70      	pop	{r4, r5, r6, pc}
 8007cfc:	4b29      	ldr	r3, [pc, #164]	; (8007da4 <__swsetup_r+0xe8>)
 8007cfe:	429c      	cmp	r4, r3
 8007d00:	d101      	bne.n	8007d06 <__swsetup_r+0x4a>
 8007d02:	68ac      	ldr	r4, [r5, #8]
 8007d04:	e7eb      	b.n	8007cde <__swsetup_r+0x22>
 8007d06:	4b28      	ldr	r3, [pc, #160]	; (8007da8 <__swsetup_r+0xec>)
 8007d08:	429c      	cmp	r4, r3
 8007d0a:	d1e8      	bne.n	8007cde <__swsetup_r+0x22>
 8007d0c:	68ec      	ldr	r4, [r5, #12]
 8007d0e:	e7e6      	b.n	8007cde <__swsetup_r+0x22>
 8007d10:	075b      	lsls	r3, r3, #29
 8007d12:	d513      	bpl.n	8007d3c <__swsetup_r+0x80>
 8007d14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d16:	2900      	cmp	r1, #0
 8007d18:	d008      	beq.n	8007d2c <__swsetup_r+0x70>
 8007d1a:	0023      	movs	r3, r4
 8007d1c:	3344      	adds	r3, #68	; 0x44
 8007d1e:	4299      	cmp	r1, r3
 8007d20:	d002      	beq.n	8007d28 <__swsetup_r+0x6c>
 8007d22:	0030      	movs	r0, r6
 8007d24:	f7ff fcfa 	bl	800771c <_free_r>
 8007d28:	2300      	movs	r3, #0
 8007d2a:	6363      	str	r3, [r4, #52]	; 0x34
 8007d2c:	2224      	movs	r2, #36	; 0x24
 8007d2e:	89a3      	ldrh	r3, [r4, #12]
 8007d30:	4393      	bics	r3, r2
 8007d32:	81a3      	strh	r3, [r4, #12]
 8007d34:	2300      	movs	r3, #0
 8007d36:	6063      	str	r3, [r4, #4]
 8007d38:	6923      	ldr	r3, [r4, #16]
 8007d3a:	6023      	str	r3, [r4, #0]
 8007d3c:	2308      	movs	r3, #8
 8007d3e:	89a2      	ldrh	r2, [r4, #12]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	81a3      	strh	r3, [r4, #12]
 8007d44:	6923      	ldr	r3, [r4, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10b      	bne.n	8007d62 <__swsetup_r+0xa6>
 8007d4a:	21a0      	movs	r1, #160	; 0xa0
 8007d4c:	2280      	movs	r2, #128	; 0x80
 8007d4e:	89a3      	ldrh	r3, [r4, #12]
 8007d50:	0089      	lsls	r1, r1, #2
 8007d52:	0092      	lsls	r2, r2, #2
 8007d54:	400b      	ands	r3, r1
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d003      	beq.n	8007d62 <__swsetup_r+0xa6>
 8007d5a:	0021      	movs	r1, r4
 8007d5c:	0030      	movs	r0, r6
 8007d5e:	f000 fa27 	bl	80081b0 <__smakebuf_r>
 8007d62:	220c      	movs	r2, #12
 8007d64:	5ea3      	ldrsh	r3, [r4, r2]
 8007d66:	2001      	movs	r0, #1
 8007d68:	001a      	movs	r2, r3
 8007d6a:	b299      	uxth	r1, r3
 8007d6c:	4002      	ands	r2, r0
 8007d6e:	4203      	tst	r3, r0
 8007d70:	d00f      	beq.n	8007d92 <__swsetup_r+0xd6>
 8007d72:	2200      	movs	r2, #0
 8007d74:	60a2      	str	r2, [r4, #8]
 8007d76:	6962      	ldr	r2, [r4, #20]
 8007d78:	4252      	negs	r2, r2
 8007d7a:	61a2      	str	r2, [r4, #24]
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	6922      	ldr	r2, [r4, #16]
 8007d80:	4282      	cmp	r2, r0
 8007d82:	d1ba      	bne.n	8007cfa <__swsetup_r+0x3e>
 8007d84:	060a      	lsls	r2, r1, #24
 8007d86:	d5b8      	bpl.n	8007cfa <__swsetup_r+0x3e>
 8007d88:	2240      	movs	r2, #64	; 0x40
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	81a3      	strh	r3, [r4, #12]
 8007d8e:	3801      	subs	r0, #1
 8007d90:	e7b3      	b.n	8007cfa <__swsetup_r+0x3e>
 8007d92:	0788      	lsls	r0, r1, #30
 8007d94:	d400      	bmi.n	8007d98 <__swsetup_r+0xdc>
 8007d96:	6962      	ldr	r2, [r4, #20]
 8007d98:	60a2      	str	r2, [r4, #8]
 8007d9a:	e7ef      	b.n	8007d7c <__swsetup_r+0xc0>
 8007d9c:	2000000c 	.word	0x2000000c
 8007da0:	080089cc 	.word	0x080089cc
 8007da4:	080089ec 	.word	0x080089ec
 8007da8:	080089ac 	.word	0x080089ac

08007dac <abort>:
 8007dac:	2006      	movs	r0, #6
 8007dae:	b510      	push	{r4, lr}
 8007db0:	f000 fa6c 	bl	800828c <raise>
 8007db4:	2001      	movs	r0, #1
 8007db6:	f7fb f918 	bl	8002fea <_exit>
	...

08007dbc <__sflush_r>:
 8007dbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dbe:	898b      	ldrh	r3, [r1, #12]
 8007dc0:	0005      	movs	r5, r0
 8007dc2:	000c      	movs	r4, r1
 8007dc4:	071a      	lsls	r2, r3, #28
 8007dc6:	d45f      	bmi.n	8007e88 <__sflush_r+0xcc>
 8007dc8:	684a      	ldr	r2, [r1, #4]
 8007dca:	2a00      	cmp	r2, #0
 8007dcc:	dc04      	bgt.n	8007dd8 <__sflush_r+0x1c>
 8007dce:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8007dd0:	2a00      	cmp	r2, #0
 8007dd2:	dc01      	bgt.n	8007dd8 <__sflush_r+0x1c>
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007dd8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007dda:	2f00      	cmp	r7, #0
 8007ddc:	d0fa      	beq.n	8007dd4 <__sflush_r+0x18>
 8007dde:	2200      	movs	r2, #0
 8007de0:	2180      	movs	r1, #128	; 0x80
 8007de2:	682e      	ldr	r6, [r5, #0]
 8007de4:	602a      	str	r2, [r5, #0]
 8007de6:	001a      	movs	r2, r3
 8007de8:	0149      	lsls	r1, r1, #5
 8007dea:	400a      	ands	r2, r1
 8007dec:	420b      	tst	r3, r1
 8007dee:	d034      	beq.n	8007e5a <__sflush_r+0x9e>
 8007df0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007df2:	89a3      	ldrh	r3, [r4, #12]
 8007df4:	075b      	lsls	r3, r3, #29
 8007df6:	d506      	bpl.n	8007e06 <__sflush_r+0x4a>
 8007df8:	6863      	ldr	r3, [r4, #4]
 8007dfa:	1ac0      	subs	r0, r0, r3
 8007dfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d001      	beq.n	8007e06 <__sflush_r+0x4a>
 8007e02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e04:	1ac0      	subs	r0, r0, r3
 8007e06:	0002      	movs	r2, r0
 8007e08:	6a21      	ldr	r1, [r4, #32]
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	0028      	movs	r0, r5
 8007e0e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007e10:	47b8      	blx	r7
 8007e12:	89a1      	ldrh	r1, [r4, #12]
 8007e14:	1c43      	adds	r3, r0, #1
 8007e16:	d106      	bne.n	8007e26 <__sflush_r+0x6a>
 8007e18:	682b      	ldr	r3, [r5, #0]
 8007e1a:	2b1d      	cmp	r3, #29
 8007e1c:	d831      	bhi.n	8007e82 <__sflush_r+0xc6>
 8007e1e:	4a2c      	ldr	r2, [pc, #176]	; (8007ed0 <__sflush_r+0x114>)
 8007e20:	40da      	lsrs	r2, r3
 8007e22:	07d3      	lsls	r3, r2, #31
 8007e24:	d52d      	bpl.n	8007e82 <__sflush_r+0xc6>
 8007e26:	2300      	movs	r3, #0
 8007e28:	6063      	str	r3, [r4, #4]
 8007e2a:	6923      	ldr	r3, [r4, #16]
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	04cb      	lsls	r3, r1, #19
 8007e30:	d505      	bpl.n	8007e3e <__sflush_r+0x82>
 8007e32:	1c43      	adds	r3, r0, #1
 8007e34:	d102      	bne.n	8007e3c <__sflush_r+0x80>
 8007e36:	682b      	ldr	r3, [r5, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d100      	bne.n	8007e3e <__sflush_r+0x82>
 8007e3c:	6560      	str	r0, [r4, #84]	; 0x54
 8007e3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e40:	602e      	str	r6, [r5, #0]
 8007e42:	2900      	cmp	r1, #0
 8007e44:	d0c6      	beq.n	8007dd4 <__sflush_r+0x18>
 8007e46:	0023      	movs	r3, r4
 8007e48:	3344      	adds	r3, #68	; 0x44
 8007e4a:	4299      	cmp	r1, r3
 8007e4c:	d002      	beq.n	8007e54 <__sflush_r+0x98>
 8007e4e:	0028      	movs	r0, r5
 8007e50:	f7ff fc64 	bl	800771c <_free_r>
 8007e54:	2000      	movs	r0, #0
 8007e56:	6360      	str	r0, [r4, #52]	; 0x34
 8007e58:	e7bd      	b.n	8007dd6 <__sflush_r+0x1a>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	0028      	movs	r0, r5
 8007e5e:	6a21      	ldr	r1, [r4, #32]
 8007e60:	47b8      	blx	r7
 8007e62:	1c43      	adds	r3, r0, #1
 8007e64:	d1c5      	bne.n	8007df2 <__sflush_r+0x36>
 8007e66:	682b      	ldr	r3, [r5, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d0c2      	beq.n	8007df2 <__sflush_r+0x36>
 8007e6c:	2b1d      	cmp	r3, #29
 8007e6e:	d001      	beq.n	8007e74 <__sflush_r+0xb8>
 8007e70:	2b16      	cmp	r3, #22
 8007e72:	d101      	bne.n	8007e78 <__sflush_r+0xbc>
 8007e74:	602e      	str	r6, [r5, #0]
 8007e76:	e7ad      	b.n	8007dd4 <__sflush_r+0x18>
 8007e78:	2340      	movs	r3, #64	; 0x40
 8007e7a:	89a2      	ldrh	r2, [r4, #12]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	81a3      	strh	r3, [r4, #12]
 8007e80:	e7a9      	b.n	8007dd6 <__sflush_r+0x1a>
 8007e82:	2340      	movs	r3, #64	; 0x40
 8007e84:	430b      	orrs	r3, r1
 8007e86:	e7fa      	b.n	8007e7e <__sflush_r+0xc2>
 8007e88:	690f      	ldr	r7, [r1, #16]
 8007e8a:	2f00      	cmp	r7, #0
 8007e8c:	d0a2      	beq.n	8007dd4 <__sflush_r+0x18>
 8007e8e:	680a      	ldr	r2, [r1, #0]
 8007e90:	600f      	str	r7, [r1, #0]
 8007e92:	1bd2      	subs	r2, r2, r7
 8007e94:	9201      	str	r2, [sp, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	079b      	lsls	r3, r3, #30
 8007e9a:	d100      	bne.n	8007e9e <__sflush_r+0xe2>
 8007e9c:	694a      	ldr	r2, [r1, #20]
 8007e9e:	60a2      	str	r2, [r4, #8]
 8007ea0:	9b01      	ldr	r3, [sp, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	dc00      	bgt.n	8007ea8 <__sflush_r+0xec>
 8007ea6:	e795      	b.n	8007dd4 <__sflush_r+0x18>
 8007ea8:	003a      	movs	r2, r7
 8007eaa:	0028      	movs	r0, r5
 8007eac:	9b01      	ldr	r3, [sp, #4]
 8007eae:	6a21      	ldr	r1, [r4, #32]
 8007eb0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007eb2:	47b0      	blx	r6
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	dc06      	bgt.n	8007ec6 <__sflush_r+0x10a>
 8007eb8:	2340      	movs	r3, #64	; 0x40
 8007eba:	2001      	movs	r0, #1
 8007ebc:	89a2      	ldrh	r2, [r4, #12]
 8007ebe:	4240      	negs	r0, r0
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	81a3      	strh	r3, [r4, #12]
 8007ec4:	e787      	b.n	8007dd6 <__sflush_r+0x1a>
 8007ec6:	9b01      	ldr	r3, [sp, #4]
 8007ec8:	183f      	adds	r7, r7, r0
 8007eca:	1a1b      	subs	r3, r3, r0
 8007ecc:	9301      	str	r3, [sp, #4]
 8007ece:	e7e7      	b.n	8007ea0 <__sflush_r+0xe4>
 8007ed0:	20400001 	.word	0x20400001

08007ed4 <_fflush_r>:
 8007ed4:	690b      	ldr	r3, [r1, #16]
 8007ed6:	b570      	push	{r4, r5, r6, lr}
 8007ed8:	0005      	movs	r5, r0
 8007eda:	000c      	movs	r4, r1
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d102      	bne.n	8007ee6 <_fflush_r+0x12>
 8007ee0:	2500      	movs	r5, #0
 8007ee2:	0028      	movs	r0, r5
 8007ee4:	bd70      	pop	{r4, r5, r6, pc}
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	d004      	beq.n	8007ef4 <_fflush_r+0x20>
 8007eea:	6983      	ldr	r3, [r0, #24]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d101      	bne.n	8007ef4 <_fflush_r+0x20>
 8007ef0:	f000 f892 	bl	8008018 <__sinit>
 8007ef4:	4b14      	ldr	r3, [pc, #80]	; (8007f48 <_fflush_r+0x74>)
 8007ef6:	429c      	cmp	r4, r3
 8007ef8:	d11b      	bne.n	8007f32 <_fflush_r+0x5e>
 8007efa:	686c      	ldr	r4, [r5, #4]
 8007efc:	220c      	movs	r2, #12
 8007efe:	5ea3      	ldrsh	r3, [r4, r2]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d0ed      	beq.n	8007ee0 <_fflush_r+0xc>
 8007f04:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f06:	07d2      	lsls	r2, r2, #31
 8007f08:	d404      	bmi.n	8007f14 <_fflush_r+0x40>
 8007f0a:	059b      	lsls	r3, r3, #22
 8007f0c:	d402      	bmi.n	8007f14 <_fflush_r+0x40>
 8007f0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f10:	f000 f923 	bl	800815a <__retarget_lock_acquire_recursive>
 8007f14:	0028      	movs	r0, r5
 8007f16:	0021      	movs	r1, r4
 8007f18:	f7ff ff50 	bl	8007dbc <__sflush_r>
 8007f1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f1e:	0005      	movs	r5, r0
 8007f20:	07db      	lsls	r3, r3, #31
 8007f22:	d4de      	bmi.n	8007ee2 <_fflush_r+0xe>
 8007f24:	89a3      	ldrh	r3, [r4, #12]
 8007f26:	059b      	lsls	r3, r3, #22
 8007f28:	d4db      	bmi.n	8007ee2 <_fflush_r+0xe>
 8007f2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f2c:	f000 f916 	bl	800815c <__retarget_lock_release_recursive>
 8007f30:	e7d7      	b.n	8007ee2 <_fflush_r+0xe>
 8007f32:	4b06      	ldr	r3, [pc, #24]	; (8007f4c <_fflush_r+0x78>)
 8007f34:	429c      	cmp	r4, r3
 8007f36:	d101      	bne.n	8007f3c <_fflush_r+0x68>
 8007f38:	68ac      	ldr	r4, [r5, #8]
 8007f3a:	e7df      	b.n	8007efc <_fflush_r+0x28>
 8007f3c:	4b04      	ldr	r3, [pc, #16]	; (8007f50 <_fflush_r+0x7c>)
 8007f3e:	429c      	cmp	r4, r3
 8007f40:	d1dc      	bne.n	8007efc <_fflush_r+0x28>
 8007f42:	68ec      	ldr	r4, [r5, #12]
 8007f44:	e7da      	b.n	8007efc <_fflush_r+0x28>
 8007f46:	46c0      	nop			; (mov r8, r8)
 8007f48:	080089cc 	.word	0x080089cc
 8007f4c:	080089ec 	.word	0x080089ec
 8007f50:	080089ac 	.word	0x080089ac

08007f54 <std>:
 8007f54:	2300      	movs	r3, #0
 8007f56:	b510      	push	{r4, lr}
 8007f58:	0004      	movs	r4, r0
 8007f5a:	6003      	str	r3, [r0, #0]
 8007f5c:	6043      	str	r3, [r0, #4]
 8007f5e:	6083      	str	r3, [r0, #8]
 8007f60:	8181      	strh	r1, [r0, #12]
 8007f62:	6643      	str	r3, [r0, #100]	; 0x64
 8007f64:	0019      	movs	r1, r3
 8007f66:	81c2      	strh	r2, [r0, #14]
 8007f68:	6103      	str	r3, [r0, #16]
 8007f6a:	6143      	str	r3, [r0, #20]
 8007f6c:	6183      	str	r3, [r0, #24]
 8007f6e:	2208      	movs	r2, #8
 8007f70:	305c      	adds	r0, #92	; 0x5c
 8007f72:	f7fd fcd9 	bl	8005928 <memset>
 8007f76:	4b05      	ldr	r3, [pc, #20]	; (8007f8c <std+0x38>)
 8007f78:	6263      	str	r3, [r4, #36]	; 0x24
 8007f7a:	4b05      	ldr	r3, [pc, #20]	; (8007f90 <std+0x3c>)
 8007f7c:	6224      	str	r4, [r4, #32]
 8007f7e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f80:	4b04      	ldr	r3, [pc, #16]	; (8007f94 <std+0x40>)
 8007f82:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f84:	4b04      	ldr	r3, [pc, #16]	; (8007f98 <std+0x44>)
 8007f86:	6323      	str	r3, [r4, #48]	; 0x30
 8007f88:	bd10      	pop	{r4, pc}
 8007f8a:	46c0      	nop			; (mov r8, r8)
 8007f8c:	080082cd 	.word	0x080082cd
 8007f90:	080082f5 	.word	0x080082f5
 8007f94:	0800832d 	.word	0x0800832d
 8007f98:	08008359 	.word	0x08008359

08007f9c <_cleanup_r>:
 8007f9c:	b510      	push	{r4, lr}
 8007f9e:	4902      	ldr	r1, [pc, #8]	; (8007fa8 <_cleanup_r+0xc>)
 8007fa0:	f000 f8ba 	bl	8008118 <_fwalk_reent>
 8007fa4:	bd10      	pop	{r4, pc}
 8007fa6:	46c0      	nop			; (mov r8, r8)
 8007fa8:	08007ed5 	.word	0x08007ed5

08007fac <__sfmoreglue>:
 8007fac:	b570      	push	{r4, r5, r6, lr}
 8007fae:	2568      	movs	r5, #104	; 0x68
 8007fb0:	1e4a      	subs	r2, r1, #1
 8007fb2:	4355      	muls	r5, r2
 8007fb4:	000e      	movs	r6, r1
 8007fb6:	0029      	movs	r1, r5
 8007fb8:	3174      	adds	r1, #116	; 0x74
 8007fba:	f7ff fbf9 	bl	80077b0 <_malloc_r>
 8007fbe:	1e04      	subs	r4, r0, #0
 8007fc0:	d008      	beq.n	8007fd4 <__sfmoreglue+0x28>
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	002a      	movs	r2, r5
 8007fc6:	6001      	str	r1, [r0, #0]
 8007fc8:	6046      	str	r6, [r0, #4]
 8007fca:	300c      	adds	r0, #12
 8007fcc:	60a0      	str	r0, [r4, #8]
 8007fce:	3268      	adds	r2, #104	; 0x68
 8007fd0:	f7fd fcaa 	bl	8005928 <memset>
 8007fd4:	0020      	movs	r0, r4
 8007fd6:	bd70      	pop	{r4, r5, r6, pc}

08007fd8 <__sfp_lock_acquire>:
 8007fd8:	b510      	push	{r4, lr}
 8007fda:	4802      	ldr	r0, [pc, #8]	; (8007fe4 <__sfp_lock_acquire+0xc>)
 8007fdc:	f000 f8bd 	bl	800815a <__retarget_lock_acquire_recursive>
 8007fe0:	bd10      	pop	{r4, pc}
 8007fe2:	46c0      	nop			; (mov r8, r8)
 8007fe4:	2000030c 	.word	0x2000030c

08007fe8 <__sfp_lock_release>:
 8007fe8:	b510      	push	{r4, lr}
 8007fea:	4802      	ldr	r0, [pc, #8]	; (8007ff4 <__sfp_lock_release+0xc>)
 8007fec:	f000 f8b6 	bl	800815c <__retarget_lock_release_recursive>
 8007ff0:	bd10      	pop	{r4, pc}
 8007ff2:	46c0      	nop			; (mov r8, r8)
 8007ff4:	2000030c 	.word	0x2000030c

08007ff8 <__sinit_lock_acquire>:
 8007ff8:	b510      	push	{r4, lr}
 8007ffa:	4802      	ldr	r0, [pc, #8]	; (8008004 <__sinit_lock_acquire+0xc>)
 8007ffc:	f000 f8ad 	bl	800815a <__retarget_lock_acquire_recursive>
 8008000:	bd10      	pop	{r4, pc}
 8008002:	46c0      	nop			; (mov r8, r8)
 8008004:	20000307 	.word	0x20000307

08008008 <__sinit_lock_release>:
 8008008:	b510      	push	{r4, lr}
 800800a:	4802      	ldr	r0, [pc, #8]	; (8008014 <__sinit_lock_release+0xc>)
 800800c:	f000 f8a6 	bl	800815c <__retarget_lock_release_recursive>
 8008010:	bd10      	pop	{r4, pc}
 8008012:	46c0      	nop			; (mov r8, r8)
 8008014:	20000307 	.word	0x20000307

08008018 <__sinit>:
 8008018:	b513      	push	{r0, r1, r4, lr}
 800801a:	0004      	movs	r4, r0
 800801c:	f7ff ffec 	bl	8007ff8 <__sinit_lock_acquire>
 8008020:	69a3      	ldr	r3, [r4, #24]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d002      	beq.n	800802c <__sinit+0x14>
 8008026:	f7ff ffef 	bl	8008008 <__sinit_lock_release>
 800802a:	bd13      	pop	{r0, r1, r4, pc}
 800802c:	64a3      	str	r3, [r4, #72]	; 0x48
 800802e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008030:	6523      	str	r3, [r4, #80]	; 0x50
 8008032:	4b13      	ldr	r3, [pc, #76]	; (8008080 <__sinit+0x68>)
 8008034:	4a13      	ldr	r2, [pc, #76]	; (8008084 <__sinit+0x6c>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	62a2      	str	r2, [r4, #40]	; 0x28
 800803a:	9301      	str	r3, [sp, #4]
 800803c:	42a3      	cmp	r3, r4
 800803e:	d101      	bne.n	8008044 <__sinit+0x2c>
 8008040:	2301      	movs	r3, #1
 8008042:	61a3      	str	r3, [r4, #24]
 8008044:	0020      	movs	r0, r4
 8008046:	f000 f81f 	bl	8008088 <__sfp>
 800804a:	6060      	str	r0, [r4, #4]
 800804c:	0020      	movs	r0, r4
 800804e:	f000 f81b 	bl	8008088 <__sfp>
 8008052:	60a0      	str	r0, [r4, #8]
 8008054:	0020      	movs	r0, r4
 8008056:	f000 f817 	bl	8008088 <__sfp>
 800805a:	2200      	movs	r2, #0
 800805c:	2104      	movs	r1, #4
 800805e:	60e0      	str	r0, [r4, #12]
 8008060:	6860      	ldr	r0, [r4, #4]
 8008062:	f7ff ff77 	bl	8007f54 <std>
 8008066:	2201      	movs	r2, #1
 8008068:	2109      	movs	r1, #9
 800806a:	68a0      	ldr	r0, [r4, #8]
 800806c:	f7ff ff72 	bl	8007f54 <std>
 8008070:	2202      	movs	r2, #2
 8008072:	2112      	movs	r1, #18
 8008074:	68e0      	ldr	r0, [r4, #12]
 8008076:	f7ff ff6d 	bl	8007f54 <std>
 800807a:	2301      	movs	r3, #1
 800807c:	61a3      	str	r3, [r4, #24]
 800807e:	e7d2      	b.n	8008026 <__sinit+0xe>
 8008080:	08008628 	.word	0x08008628
 8008084:	08007f9d 	.word	0x08007f9d

08008088 <__sfp>:
 8008088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808a:	0007      	movs	r7, r0
 800808c:	f7ff ffa4 	bl	8007fd8 <__sfp_lock_acquire>
 8008090:	4b1f      	ldr	r3, [pc, #124]	; (8008110 <__sfp+0x88>)
 8008092:	681e      	ldr	r6, [r3, #0]
 8008094:	69b3      	ldr	r3, [r6, #24]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d102      	bne.n	80080a0 <__sfp+0x18>
 800809a:	0030      	movs	r0, r6
 800809c:	f7ff ffbc 	bl	8008018 <__sinit>
 80080a0:	3648      	adds	r6, #72	; 0x48
 80080a2:	68b4      	ldr	r4, [r6, #8]
 80080a4:	6873      	ldr	r3, [r6, #4]
 80080a6:	3b01      	subs	r3, #1
 80080a8:	d504      	bpl.n	80080b4 <__sfp+0x2c>
 80080aa:	6833      	ldr	r3, [r6, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d022      	beq.n	80080f6 <__sfp+0x6e>
 80080b0:	6836      	ldr	r6, [r6, #0]
 80080b2:	e7f6      	b.n	80080a2 <__sfp+0x1a>
 80080b4:	220c      	movs	r2, #12
 80080b6:	5ea5      	ldrsh	r5, [r4, r2]
 80080b8:	2d00      	cmp	r5, #0
 80080ba:	d11a      	bne.n	80080f2 <__sfp+0x6a>
 80080bc:	0020      	movs	r0, r4
 80080be:	4b15      	ldr	r3, [pc, #84]	; (8008114 <__sfp+0x8c>)
 80080c0:	3058      	adds	r0, #88	; 0x58
 80080c2:	60e3      	str	r3, [r4, #12]
 80080c4:	6665      	str	r5, [r4, #100]	; 0x64
 80080c6:	f000 f847 	bl	8008158 <__retarget_lock_init_recursive>
 80080ca:	f7ff ff8d 	bl	8007fe8 <__sfp_lock_release>
 80080ce:	0020      	movs	r0, r4
 80080d0:	2208      	movs	r2, #8
 80080d2:	0029      	movs	r1, r5
 80080d4:	6025      	str	r5, [r4, #0]
 80080d6:	60a5      	str	r5, [r4, #8]
 80080d8:	6065      	str	r5, [r4, #4]
 80080da:	6125      	str	r5, [r4, #16]
 80080dc:	6165      	str	r5, [r4, #20]
 80080de:	61a5      	str	r5, [r4, #24]
 80080e0:	305c      	adds	r0, #92	; 0x5c
 80080e2:	f7fd fc21 	bl	8005928 <memset>
 80080e6:	6365      	str	r5, [r4, #52]	; 0x34
 80080e8:	63a5      	str	r5, [r4, #56]	; 0x38
 80080ea:	64a5      	str	r5, [r4, #72]	; 0x48
 80080ec:	64e5      	str	r5, [r4, #76]	; 0x4c
 80080ee:	0020      	movs	r0, r4
 80080f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080f2:	3468      	adds	r4, #104	; 0x68
 80080f4:	e7d7      	b.n	80080a6 <__sfp+0x1e>
 80080f6:	2104      	movs	r1, #4
 80080f8:	0038      	movs	r0, r7
 80080fa:	f7ff ff57 	bl	8007fac <__sfmoreglue>
 80080fe:	1e04      	subs	r4, r0, #0
 8008100:	6030      	str	r0, [r6, #0]
 8008102:	d1d5      	bne.n	80080b0 <__sfp+0x28>
 8008104:	f7ff ff70 	bl	8007fe8 <__sfp_lock_release>
 8008108:	230c      	movs	r3, #12
 800810a:	603b      	str	r3, [r7, #0]
 800810c:	e7ef      	b.n	80080ee <__sfp+0x66>
 800810e:	46c0      	nop			; (mov r8, r8)
 8008110:	08008628 	.word	0x08008628
 8008114:	ffff0001 	.word	0xffff0001

08008118 <_fwalk_reent>:
 8008118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800811a:	0004      	movs	r4, r0
 800811c:	0006      	movs	r6, r0
 800811e:	2700      	movs	r7, #0
 8008120:	9101      	str	r1, [sp, #4]
 8008122:	3448      	adds	r4, #72	; 0x48
 8008124:	6863      	ldr	r3, [r4, #4]
 8008126:	68a5      	ldr	r5, [r4, #8]
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	9b00      	ldr	r3, [sp, #0]
 800812c:	3b01      	subs	r3, #1
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	d504      	bpl.n	800813c <_fwalk_reent+0x24>
 8008132:	6824      	ldr	r4, [r4, #0]
 8008134:	2c00      	cmp	r4, #0
 8008136:	d1f5      	bne.n	8008124 <_fwalk_reent+0xc>
 8008138:	0038      	movs	r0, r7
 800813a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800813c:	89ab      	ldrh	r3, [r5, #12]
 800813e:	2b01      	cmp	r3, #1
 8008140:	d908      	bls.n	8008154 <_fwalk_reent+0x3c>
 8008142:	220e      	movs	r2, #14
 8008144:	5eab      	ldrsh	r3, [r5, r2]
 8008146:	3301      	adds	r3, #1
 8008148:	d004      	beq.n	8008154 <_fwalk_reent+0x3c>
 800814a:	0029      	movs	r1, r5
 800814c:	0030      	movs	r0, r6
 800814e:	9b01      	ldr	r3, [sp, #4]
 8008150:	4798      	blx	r3
 8008152:	4307      	orrs	r7, r0
 8008154:	3568      	adds	r5, #104	; 0x68
 8008156:	e7e8      	b.n	800812a <_fwalk_reent+0x12>

08008158 <__retarget_lock_init_recursive>:
 8008158:	4770      	bx	lr

0800815a <__retarget_lock_acquire_recursive>:
 800815a:	4770      	bx	lr

0800815c <__retarget_lock_release_recursive>:
 800815c:	4770      	bx	lr
	...

08008160 <__swhatbuf_r>:
 8008160:	b570      	push	{r4, r5, r6, lr}
 8008162:	000e      	movs	r6, r1
 8008164:	001d      	movs	r5, r3
 8008166:	230e      	movs	r3, #14
 8008168:	5ec9      	ldrsh	r1, [r1, r3]
 800816a:	0014      	movs	r4, r2
 800816c:	b096      	sub	sp, #88	; 0x58
 800816e:	2900      	cmp	r1, #0
 8008170:	da07      	bge.n	8008182 <__swhatbuf_r+0x22>
 8008172:	2300      	movs	r3, #0
 8008174:	602b      	str	r3, [r5, #0]
 8008176:	89b3      	ldrh	r3, [r6, #12]
 8008178:	061b      	lsls	r3, r3, #24
 800817a:	d411      	bmi.n	80081a0 <__swhatbuf_r+0x40>
 800817c:	2380      	movs	r3, #128	; 0x80
 800817e:	00db      	lsls	r3, r3, #3
 8008180:	e00f      	b.n	80081a2 <__swhatbuf_r+0x42>
 8008182:	466a      	mov	r2, sp
 8008184:	f000 f914 	bl	80083b0 <_fstat_r>
 8008188:	2800      	cmp	r0, #0
 800818a:	dbf2      	blt.n	8008172 <__swhatbuf_r+0x12>
 800818c:	23f0      	movs	r3, #240	; 0xf0
 800818e:	9901      	ldr	r1, [sp, #4]
 8008190:	021b      	lsls	r3, r3, #8
 8008192:	4019      	ands	r1, r3
 8008194:	4b05      	ldr	r3, [pc, #20]	; (80081ac <__swhatbuf_r+0x4c>)
 8008196:	18c9      	adds	r1, r1, r3
 8008198:	424b      	negs	r3, r1
 800819a:	4159      	adcs	r1, r3
 800819c:	6029      	str	r1, [r5, #0]
 800819e:	e7ed      	b.n	800817c <__swhatbuf_r+0x1c>
 80081a0:	2340      	movs	r3, #64	; 0x40
 80081a2:	2000      	movs	r0, #0
 80081a4:	6023      	str	r3, [r4, #0]
 80081a6:	b016      	add	sp, #88	; 0x58
 80081a8:	bd70      	pop	{r4, r5, r6, pc}
 80081aa:	46c0      	nop			; (mov r8, r8)
 80081ac:	ffffe000 	.word	0xffffe000

080081b0 <__smakebuf_r>:
 80081b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081b2:	2602      	movs	r6, #2
 80081b4:	898b      	ldrh	r3, [r1, #12]
 80081b6:	0005      	movs	r5, r0
 80081b8:	000c      	movs	r4, r1
 80081ba:	4233      	tst	r3, r6
 80081bc:	d006      	beq.n	80081cc <__smakebuf_r+0x1c>
 80081be:	0023      	movs	r3, r4
 80081c0:	3347      	adds	r3, #71	; 0x47
 80081c2:	6023      	str	r3, [r4, #0]
 80081c4:	6123      	str	r3, [r4, #16]
 80081c6:	2301      	movs	r3, #1
 80081c8:	6163      	str	r3, [r4, #20]
 80081ca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80081cc:	466a      	mov	r2, sp
 80081ce:	ab01      	add	r3, sp, #4
 80081d0:	f7ff ffc6 	bl	8008160 <__swhatbuf_r>
 80081d4:	9900      	ldr	r1, [sp, #0]
 80081d6:	0007      	movs	r7, r0
 80081d8:	0028      	movs	r0, r5
 80081da:	f7ff fae9 	bl	80077b0 <_malloc_r>
 80081de:	2800      	cmp	r0, #0
 80081e0:	d108      	bne.n	80081f4 <__smakebuf_r+0x44>
 80081e2:	220c      	movs	r2, #12
 80081e4:	5ea3      	ldrsh	r3, [r4, r2]
 80081e6:	059a      	lsls	r2, r3, #22
 80081e8:	d4ef      	bmi.n	80081ca <__smakebuf_r+0x1a>
 80081ea:	2203      	movs	r2, #3
 80081ec:	4393      	bics	r3, r2
 80081ee:	431e      	orrs	r6, r3
 80081f0:	81a6      	strh	r6, [r4, #12]
 80081f2:	e7e4      	b.n	80081be <__smakebuf_r+0xe>
 80081f4:	4b0f      	ldr	r3, [pc, #60]	; (8008234 <__smakebuf_r+0x84>)
 80081f6:	62ab      	str	r3, [r5, #40]	; 0x28
 80081f8:	2380      	movs	r3, #128	; 0x80
 80081fa:	89a2      	ldrh	r2, [r4, #12]
 80081fc:	6020      	str	r0, [r4, #0]
 80081fe:	4313      	orrs	r3, r2
 8008200:	81a3      	strh	r3, [r4, #12]
 8008202:	9b00      	ldr	r3, [sp, #0]
 8008204:	6120      	str	r0, [r4, #16]
 8008206:	6163      	str	r3, [r4, #20]
 8008208:	9b01      	ldr	r3, [sp, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00d      	beq.n	800822a <__smakebuf_r+0x7a>
 800820e:	0028      	movs	r0, r5
 8008210:	230e      	movs	r3, #14
 8008212:	5ee1      	ldrsh	r1, [r4, r3]
 8008214:	f000 f8de 	bl	80083d4 <_isatty_r>
 8008218:	2800      	cmp	r0, #0
 800821a:	d006      	beq.n	800822a <__smakebuf_r+0x7a>
 800821c:	2203      	movs	r2, #3
 800821e:	89a3      	ldrh	r3, [r4, #12]
 8008220:	4393      	bics	r3, r2
 8008222:	001a      	movs	r2, r3
 8008224:	2301      	movs	r3, #1
 8008226:	4313      	orrs	r3, r2
 8008228:	81a3      	strh	r3, [r4, #12]
 800822a:	89a0      	ldrh	r0, [r4, #12]
 800822c:	4307      	orrs	r7, r0
 800822e:	81a7      	strh	r7, [r4, #12]
 8008230:	e7cb      	b.n	80081ca <__smakebuf_r+0x1a>
 8008232:	46c0      	nop			; (mov r8, r8)
 8008234:	08007f9d 	.word	0x08007f9d

08008238 <_raise_r>:
 8008238:	b570      	push	{r4, r5, r6, lr}
 800823a:	0004      	movs	r4, r0
 800823c:	000d      	movs	r5, r1
 800823e:	291f      	cmp	r1, #31
 8008240:	d904      	bls.n	800824c <_raise_r+0x14>
 8008242:	2316      	movs	r3, #22
 8008244:	6003      	str	r3, [r0, #0]
 8008246:	2001      	movs	r0, #1
 8008248:	4240      	negs	r0, r0
 800824a:	bd70      	pop	{r4, r5, r6, pc}
 800824c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800824e:	2b00      	cmp	r3, #0
 8008250:	d004      	beq.n	800825c <_raise_r+0x24>
 8008252:	008a      	lsls	r2, r1, #2
 8008254:	189b      	adds	r3, r3, r2
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	2a00      	cmp	r2, #0
 800825a:	d108      	bne.n	800826e <_raise_r+0x36>
 800825c:	0020      	movs	r0, r4
 800825e:	f000 f831 	bl	80082c4 <_getpid_r>
 8008262:	002a      	movs	r2, r5
 8008264:	0001      	movs	r1, r0
 8008266:	0020      	movs	r0, r4
 8008268:	f000 f81a 	bl	80082a0 <_kill_r>
 800826c:	e7ed      	b.n	800824a <_raise_r+0x12>
 800826e:	2000      	movs	r0, #0
 8008270:	2a01      	cmp	r2, #1
 8008272:	d0ea      	beq.n	800824a <_raise_r+0x12>
 8008274:	1c51      	adds	r1, r2, #1
 8008276:	d103      	bne.n	8008280 <_raise_r+0x48>
 8008278:	2316      	movs	r3, #22
 800827a:	3001      	adds	r0, #1
 800827c:	6023      	str	r3, [r4, #0]
 800827e:	e7e4      	b.n	800824a <_raise_r+0x12>
 8008280:	2400      	movs	r4, #0
 8008282:	0028      	movs	r0, r5
 8008284:	601c      	str	r4, [r3, #0]
 8008286:	4790      	blx	r2
 8008288:	0020      	movs	r0, r4
 800828a:	e7de      	b.n	800824a <_raise_r+0x12>

0800828c <raise>:
 800828c:	b510      	push	{r4, lr}
 800828e:	4b03      	ldr	r3, [pc, #12]	; (800829c <raise+0x10>)
 8008290:	0001      	movs	r1, r0
 8008292:	6818      	ldr	r0, [r3, #0]
 8008294:	f7ff ffd0 	bl	8008238 <_raise_r>
 8008298:	bd10      	pop	{r4, pc}
 800829a:	46c0      	nop			; (mov r8, r8)
 800829c:	2000000c 	.word	0x2000000c

080082a0 <_kill_r>:
 80082a0:	2300      	movs	r3, #0
 80082a2:	b570      	push	{r4, r5, r6, lr}
 80082a4:	4d06      	ldr	r5, [pc, #24]	; (80082c0 <_kill_r+0x20>)
 80082a6:	0004      	movs	r4, r0
 80082a8:	0008      	movs	r0, r1
 80082aa:	0011      	movs	r1, r2
 80082ac:	602b      	str	r3, [r5, #0]
 80082ae:	f7fa fe8c 	bl	8002fca <_kill>
 80082b2:	1c43      	adds	r3, r0, #1
 80082b4:	d103      	bne.n	80082be <_kill_r+0x1e>
 80082b6:	682b      	ldr	r3, [r5, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d000      	beq.n	80082be <_kill_r+0x1e>
 80082bc:	6023      	str	r3, [r4, #0]
 80082be:	bd70      	pop	{r4, r5, r6, pc}
 80082c0:	20000300 	.word	0x20000300

080082c4 <_getpid_r>:
 80082c4:	b510      	push	{r4, lr}
 80082c6:	f7fa fe7a 	bl	8002fbe <_getpid>
 80082ca:	bd10      	pop	{r4, pc}

080082cc <__sread>:
 80082cc:	b570      	push	{r4, r5, r6, lr}
 80082ce:	000c      	movs	r4, r1
 80082d0:	250e      	movs	r5, #14
 80082d2:	5f49      	ldrsh	r1, [r1, r5]
 80082d4:	f000 f8a4 	bl	8008420 <_read_r>
 80082d8:	2800      	cmp	r0, #0
 80082da:	db03      	blt.n	80082e4 <__sread+0x18>
 80082dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80082de:	181b      	adds	r3, r3, r0
 80082e0:	6563      	str	r3, [r4, #84]	; 0x54
 80082e2:	bd70      	pop	{r4, r5, r6, pc}
 80082e4:	89a3      	ldrh	r3, [r4, #12]
 80082e6:	4a02      	ldr	r2, [pc, #8]	; (80082f0 <__sread+0x24>)
 80082e8:	4013      	ands	r3, r2
 80082ea:	81a3      	strh	r3, [r4, #12]
 80082ec:	e7f9      	b.n	80082e2 <__sread+0x16>
 80082ee:	46c0      	nop			; (mov r8, r8)
 80082f0:	ffffefff 	.word	0xffffefff

080082f4 <__swrite>:
 80082f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f6:	001f      	movs	r7, r3
 80082f8:	898b      	ldrh	r3, [r1, #12]
 80082fa:	0005      	movs	r5, r0
 80082fc:	000c      	movs	r4, r1
 80082fe:	0016      	movs	r6, r2
 8008300:	05db      	lsls	r3, r3, #23
 8008302:	d505      	bpl.n	8008310 <__swrite+0x1c>
 8008304:	230e      	movs	r3, #14
 8008306:	5ec9      	ldrsh	r1, [r1, r3]
 8008308:	2200      	movs	r2, #0
 800830a:	2302      	movs	r3, #2
 800830c:	f000 f874 	bl	80083f8 <_lseek_r>
 8008310:	89a3      	ldrh	r3, [r4, #12]
 8008312:	4a05      	ldr	r2, [pc, #20]	; (8008328 <__swrite+0x34>)
 8008314:	0028      	movs	r0, r5
 8008316:	4013      	ands	r3, r2
 8008318:	81a3      	strh	r3, [r4, #12]
 800831a:	0032      	movs	r2, r6
 800831c:	230e      	movs	r3, #14
 800831e:	5ee1      	ldrsh	r1, [r4, r3]
 8008320:	003b      	movs	r3, r7
 8008322:	f000 f81f 	bl	8008364 <_write_r>
 8008326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008328:	ffffefff 	.word	0xffffefff

0800832c <__sseek>:
 800832c:	b570      	push	{r4, r5, r6, lr}
 800832e:	000c      	movs	r4, r1
 8008330:	250e      	movs	r5, #14
 8008332:	5f49      	ldrsh	r1, [r1, r5]
 8008334:	f000 f860 	bl	80083f8 <_lseek_r>
 8008338:	89a3      	ldrh	r3, [r4, #12]
 800833a:	1c42      	adds	r2, r0, #1
 800833c:	d103      	bne.n	8008346 <__sseek+0x1a>
 800833e:	4a05      	ldr	r2, [pc, #20]	; (8008354 <__sseek+0x28>)
 8008340:	4013      	ands	r3, r2
 8008342:	81a3      	strh	r3, [r4, #12]
 8008344:	bd70      	pop	{r4, r5, r6, pc}
 8008346:	2280      	movs	r2, #128	; 0x80
 8008348:	0152      	lsls	r2, r2, #5
 800834a:	4313      	orrs	r3, r2
 800834c:	81a3      	strh	r3, [r4, #12]
 800834e:	6560      	str	r0, [r4, #84]	; 0x54
 8008350:	e7f8      	b.n	8008344 <__sseek+0x18>
 8008352:	46c0      	nop			; (mov r8, r8)
 8008354:	ffffefff 	.word	0xffffefff

08008358 <__sclose>:
 8008358:	b510      	push	{r4, lr}
 800835a:	230e      	movs	r3, #14
 800835c:	5ec9      	ldrsh	r1, [r1, r3]
 800835e:	f000 f815 	bl	800838c <_close_r>
 8008362:	bd10      	pop	{r4, pc}

08008364 <_write_r>:
 8008364:	b570      	push	{r4, r5, r6, lr}
 8008366:	0004      	movs	r4, r0
 8008368:	0008      	movs	r0, r1
 800836a:	0011      	movs	r1, r2
 800836c:	001a      	movs	r2, r3
 800836e:	2300      	movs	r3, #0
 8008370:	4d05      	ldr	r5, [pc, #20]	; (8008388 <_write_r+0x24>)
 8008372:	602b      	str	r3, [r5, #0]
 8008374:	f7fa fe62 	bl	800303c <_write>
 8008378:	1c43      	adds	r3, r0, #1
 800837a:	d103      	bne.n	8008384 <_write_r+0x20>
 800837c:	682b      	ldr	r3, [r5, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d000      	beq.n	8008384 <_write_r+0x20>
 8008382:	6023      	str	r3, [r4, #0]
 8008384:	bd70      	pop	{r4, r5, r6, pc}
 8008386:	46c0      	nop			; (mov r8, r8)
 8008388:	20000300 	.word	0x20000300

0800838c <_close_r>:
 800838c:	2300      	movs	r3, #0
 800838e:	b570      	push	{r4, r5, r6, lr}
 8008390:	4d06      	ldr	r5, [pc, #24]	; (80083ac <_close_r+0x20>)
 8008392:	0004      	movs	r4, r0
 8008394:	0008      	movs	r0, r1
 8008396:	602b      	str	r3, [r5, #0]
 8008398:	f7fa fe6c 	bl	8003074 <_close>
 800839c:	1c43      	adds	r3, r0, #1
 800839e:	d103      	bne.n	80083a8 <_close_r+0x1c>
 80083a0:	682b      	ldr	r3, [r5, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d000      	beq.n	80083a8 <_close_r+0x1c>
 80083a6:	6023      	str	r3, [r4, #0]
 80083a8:	bd70      	pop	{r4, r5, r6, pc}
 80083aa:	46c0      	nop			; (mov r8, r8)
 80083ac:	20000300 	.word	0x20000300

080083b0 <_fstat_r>:
 80083b0:	2300      	movs	r3, #0
 80083b2:	b570      	push	{r4, r5, r6, lr}
 80083b4:	4d06      	ldr	r5, [pc, #24]	; (80083d0 <_fstat_r+0x20>)
 80083b6:	0004      	movs	r4, r0
 80083b8:	0008      	movs	r0, r1
 80083ba:	0011      	movs	r1, r2
 80083bc:	602b      	str	r3, [r5, #0]
 80083be:	f7fa fe63 	bl	8003088 <_fstat>
 80083c2:	1c43      	adds	r3, r0, #1
 80083c4:	d103      	bne.n	80083ce <_fstat_r+0x1e>
 80083c6:	682b      	ldr	r3, [r5, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d000      	beq.n	80083ce <_fstat_r+0x1e>
 80083cc:	6023      	str	r3, [r4, #0]
 80083ce:	bd70      	pop	{r4, r5, r6, pc}
 80083d0:	20000300 	.word	0x20000300

080083d4 <_isatty_r>:
 80083d4:	2300      	movs	r3, #0
 80083d6:	b570      	push	{r4, r5, r6, lr}
 80083d8:	4d06      	ldr	r5, [pc, #24]	; (80083f4 <_isatty_r+0x20>)
 80083da:	0004      	movs	r4, r0
 80083dc:	0008      	movs	r0, r1
 80083de:	602b      	str	r3, [r5, #0]
 80083e0:	f7fa fe60 	bl	80030a4 <_isatty>
 80083e4:	1c43      	adds	r3, r0, #1
 80083e6:	d103      	bne.n	80083f0 <_isatty_r+0x1c>
 80083e8:	682b      	ldr	r3, [r5, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d000      	beq.n	80083f0 <_isatty_r+0x1c>
 80083ee:	6023      	str	r3, [r4, #0]
 80083f0:	bd70      	pop	{r4, r5, r6, pc}
 80083f2:	46c0      	nop			; (mov r8, r8)
 80083f4:	20000300 	.word	0x20000300

080083f8 <_lseek_r>:
 80083f8:	b570      	push	{r4, r5, r6, lr}
 80083fa:	0004      	movs	r4, r0
 80083fc:	0008      	movs	r0, r1
 80083fe:	0011      	movs	r1, r2
 8008400:	001a      	movs	r2, r3
 8008402:	2300      	movs	r3, #0
 8008404:	4d05      	ldr	r5, [pc, #20]	; (800841c <_lseek_r+0x24>)
 8008406:	602b      	str	r3, [r5, #0]
 8008408:	f7fa fe55 	bl	80030b6 <_lseek>
 800840c:	1c43      	adds	r3, r0, #1
 800840e:	d103      	bne.n	8008418 <_lseek_r+0x20>
 8008410:	682b      	ldr	r3, [r5, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d000      	beq.n	8008418 <_lseek_r+0x20>
 8008416:	6023      	str	r3, [r4, #0]
 8008418:	bd70      	pop	{r4, r5, r6, pc}
 800841a:	46c0      	nop			; (mov r8, r8)
 800841c:	20000300 	.word	0x20000300

08008420 <_read_r>:
 8008420:	b570      	push	{r4, r5, r6, lr}
 8008422:	0004      	movs	r4, r0
 8008424:	0008      	movs	r0, r1
 8008426:	0011      	movs	r1, r2
 8008428:	001a      	movs	r2, r3
 800842a:	2300      	movs	r3, #0
 800842c:	4d05      	ldr	r5, [pc, #20]	; (8008444 <_read_r+0x24>)
 800842e:	602b      	str	r3, [r5, #0]
 8008430:	f7fa fde7 	bl	8003002 <_read>
 8008434:	1c43      	adds	r3, r0, #1
 8008436:	d103      	bne.n	8008440 <_read_r+0x20>
 8008438:	682b      	ldr	r3, [r5, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d000      	beq.n	8008440 <_read_r+0x20>
 800843e:	6023      	str	r3, [r4, #0]
 8008440:	bd70      	pop	{r4, r5, r6, pc}
 8008442:	46c0      	nop			; (mov r8, r8)
 8008444:	20000300 	.word	0x20000300

08008448 <_init>:
 8008448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800844a:	46c0      	nop			; (mov r8, r8)
 800844c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800844e:	bc08      	pop	{r3}
 8008450:	469e      	mov	lr, r3
 8008452:	4770      	bx	lr

08008454 <_fini>:
 8008454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008456:	46c0      	nop			; (mov r8, r8)
 8008458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800845a:	bc08      	pop	{r3}
 800845c:	469e      	mov	lr, r3
 800845e:	4770      	bx	lr
