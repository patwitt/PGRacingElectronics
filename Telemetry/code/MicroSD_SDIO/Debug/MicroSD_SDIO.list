
MicroSD_SDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000165b8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020e8  080167b8  080167b8  000267b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080188a0  080188a0  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  080188a0  080188a0  000288a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080188a8  080188a8  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080188a8  080188a8  000288a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080188ac  080188ac  000288ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080188b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005638  200001e0  08018a90  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005818  08018a90  00035818  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cf12  00000000  00000000  0003020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005db8  00000000  00000000  0005d120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002030  00000000  00000000  00062ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d88  00000000  00000000  00064f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030802  00000000  00000000  00066c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002dbb9  00000000  00000000  00097492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114e84  00000000  00000000  000c504b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d9ecf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ccc  00000000  00000000  001d9f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	080167a0 	.word	0x080167a0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	080167a0 	.word	0x080167a0

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_uldivmod>:
 8000688:	b953      	cbnz	r3, 80006a0 <__aeabi_uldivmod+0x18>
 800068a:	b94a      	cbnz	r2, 80006a0 <__aeabi_uldivmod+0x18>
 800068c:	2900      	cmp	r1, #0
 800068e:	bf08      	it	eq
 8000690:	2800      	cmpeq	r0, #0
 8000692:	bf1c      	itt	ne
 8000694:	f04f 31ff 	movne.w	r1, #4294967295
 8000698:	f04f 30ff 	movne.w	r0, #4294967295
 800069c:	f000 b9ac 	b.w	80009f8 <__aeabi_idiv0>
 80006a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a8:	f000 f83e 	bl	8000728 <__udivmoddi4>
 80006ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b4:	b004      	add	sp, #16
 80006b6:	4770      	bx	lr

080006b8 <__aeabi_d2lz>:
 80006b8:	b508      	push	{r3, lr}
 80006ba:	4602      	mov	r2, r0
 80006bc:	460b      	mov	r3, r1
 80006be:	ec43 2b17 	vmov	d7, r2, r3
 80006c2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ca:	d403      	bmi.n	80006d4 <__aeabi_d2lz+0x1c>
 80006cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006d0:	f000 b80a 	b.w	80006e8 <__aeabi_d2ulz>
 80006d4:	eeb1 7b47 	vneg.f64	d7, d7
 80006d8:	ec51 0b17 	vmov	r0, r1, d7
 80006dc:	f000 f804 	bl	80006e8 <__aeabi_d2ulz>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	bd08      	pop	{r3, pc}

080006e8 <__aeabi_d2ulz>:
 80006e8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000718 <__aeabi_d2ulz+0x30>
 80006ec:	ec41 0b17 	vmov	d7, r0, r1
 80006f0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000720 <__aeabi_d2ulz+0x38>
 80006f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006f8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006fc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000700:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000704:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000708:	ee16 1a10 	vmov	r1, s12
 800070c:	ee17 0a90 	vmov	r0, s15
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	f3af 8000 	nop.w
 8000718:	00000000 	.word	0x00000000
 800071c:	3df00000 	.word	0x3df00000
 8000720:	00000000 	.word	0x00000000
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	4604      	mov	r4, r0
 8000730:	468e      	mov	lr, r1
 8000732:	2b00      	cmp	r3, #0
 8000734:	d14d      	bne.n	80007d2 <__udivmoddi4+0xaa>
 8000736:	428a      	cmp	r2, r1
 8000738:	4694      	mov	ip, r2
 800073a:	d969      	bls.n	8000810 <__udivmoddi4+0xe8>
 800073c:	fab2 f282 	clz	r2, r2
 8000740:	b152      	cbz	r2, 8000758 <__udivmoddi4+0x30>
 8000742:	fa01 f302 	lsl.w	r3, r1, r2
 8000746:	f1c2 0120 	rsb	r1, r2, #32
 800074a:	fa20 f101 	lsr.w	r1, r0, r1
 800074e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000752:	ea41 0e03 	orr.w	lr, r1, r3
 8000756:	4094      	lsls	r4, r2
 8000758:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800075c:	0c21      	lsrs	r1, r4, #16
 800075e:	fbbe f6f8 	udiv	r6, lr, r8
 8000762:	fa1f f78c 	uxth.w	r7, ip
 8000766:	fb08 e316 	mls	r3, r8, r6, lr
 800076a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800076e:	fb06 f107 	mul.w	r1, r6, r7
 8000772:	4299      	cmp	r1, r3
 8000774:	d90a      	bls.n	800078c <__udivmoddi4+0x64>
 8000776:	eb1c 0303 	adds.w	r3, ip, r3
 800077a:	f106 30ff 	add.w	r0, r6, #4294967295
 800077e:	f080 811f 	bcs.w	80009c0 <__udivmoddi4+0x298>
 8000782:	4299      	cmp	r1, r3
 8000784:	f240 811c 	bls.w	80009c0 <__udivmoddi4+0x298>
 8000788:	3e02      	subs	r6, #2
 800078a:	4463      	add	r3, ip
 800078c:	1a5b      	subs	r3, r3, r1
 800078e:	b2a4      	uxth	r4, r4
 8000790:	fbb3 f0f8 	udiv	r0, r3, r8
 8000794:	fb08 3310 	mls	r3, r8, r0, r3
 8000798:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800079c:	fb00 f707 	mul.w	r7, r0, r7
 80007a0:	42a7      	cmp	r7, r4
 80007a2:	d90a      	bls.n	80007ba <__udivmoddi4+0x92>
 80007a4:	eb1c 0404 	adds.w	r4, ip, r4
 80007a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80007ac:	f080 810a 	bcs.w	80009c4 <__udivmoddi4+0x29c>
 80007b0:	42a7      	cmp	r7, r4
 80007b2:	f240 8107 	bls.w	80009c4 <__udivmoddi4+0x29c>
 80007b6:	4464      	add	r4, ip
 80007b8:	3802      	subs	r0, #2
 80007ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007be:	1be4      	subs	r4, r4, r7
 80007c0:	2600      	movs	r6, #0
 80007c2:	b11d      	cbz	r5, 80007cc <__udivmoddi4+0xa4>
 80007c4:	40d4      	lsrs	r4, r2
 80007c6:	2300      	movs	r3, #0
 80007c8:	e9c5 4300 	strd	r4, r3, [r5]
 80007cc:	4631      	mov	r1, r6
 80007ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d909      	bls.n	80007ea <__udivmoddi4+0xc2>
 80007d6:	2d00      	cmp	r5, #0
 80007d8:	f000 80ef 	beq.w	80009ba <__udivmoddi4+0x292>
 80007dc:	2600      	movs	r6, #0
 80007de:	e9c5 0100 	strd	r0, r1, [r5]
 80007e2:	4630      	mov	r0, r6
 80007e4:	4631      	mov	r1, r6
 80007e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ea:	fab3 f683 	clz	r6, r3
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d14a      	bne.n	8000888 <__udivmoddi4+0x160>
 80007f2:	428b      	cmp	r3, r1
 80007f4:	d302      	bcc.n	80007fc <__udivmoddi4+0xd4>
 80007f6:	4282      	cmp	r2, r0
 80007f8:	f200 80f9 	bhi.w	80009ee <__udivmoddi4+0x2c6>
 80007fc:	1a84      	subs	r4, r0, r2
 80007fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000802:	2001      	movs	r0, #1
 8000804:	469e      	mov	lr, r3
 8000806:	2d00      	cmp	r5, #0
 8000808:	d0e0      	beq.n	80007cc <__udivmoddi4+0xa4>
 800080a:	e9c5 4e00 	strd	r4, lr, [r5]
 800080e:	e7dd      	b.n	80007cc <__udivmoddi4+0xa4>
 8000810:	b902      	cbnz	r2, 8000814 <__udivmoddi4+0xec>
 8000812:	deff      	udf	#255	; 0xff
 8000814:	fab2 f282 	clz	r2, r2
 8000818:	2a00      	cmp	r2, #0
 800081a:	f040 8092 	bne.w	8000942 <__udivmoddi4+0x21a>
 800081e:	eba1 010c 	sub.w	r1, r1, ip
 8000822:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000826:	fa1f fe8c 	uxth.w	lr, ip
 800082a:	2601      	movs	r6, #1
 800082c:	0c20      	lsrs	r0, r4, #16
 800082e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000832:	fb07 1113 	mls	r1, r7, r3, r1
 8000836:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800083a:	fb0e f003 	mul.w	r0, lr, r3
 800083e:	4288      	cmp	r0, r1
 8000840:	d908      	bls.n	8000854 <__udivmoddi4+0x12c>
 8000842:	eb1c 0101 	adds.w	r1, ip, r1
 8000846:	f103 38ff 	add.w	r8, r3, #4294967295
 800084a:	d202      	bcs.n	8000852 <__udivmoddi4+0x12a>
 800084c:	4288      	cmp	r0, r1
 800084e:	f200 80cb 	bhi.w	80009e8 <__udivmoddi4+0x2c0>
 8000852:	4643      	mov	r3, r8
 8000854:	1a09      	subs	r1, r1, r0
 8000856:	b2a4      	uxth	r4, r4
 8000858:	fbb1 f0f7 	udiv	r0, r1, r7
 800085c:	fb07 1110 	mls	r1, r7, r0, r1
 8000860:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000864:	fb0e fe00 	mul.w	lr, lr, r0
 8000868:	45a6      	cmp	lr, r4
 800086a:	d908      	bls.n	800087e <__udivmoddi4+0x156>
 800086c:	eb1c 0404 	adds.w	r4, ip, r4
 8000870:	f100 31ff 	add.w	r1, r0, #4294967295
 8000874:	d202      	bcs.n	800087c <__udivmoddi4+0x154>
 8000876:	45a6      	cmp	lr, r4
 8000878:	f200 80bb 	bhi.w	80009f2 <__udivmoddi4+0x2ca>
 800087c:	4608      	mov	r0, r1
 800087e:	eba4 040e 	sub.w	r4, r4, lr
 8000882:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000886:	e79c      	b.n	80007c2 <__udivmoddi4+0x9a>
 8000888:	f1c6 0720 	rsb	r7, r6, #32
 800088c:	40b3      	lsls	r3, r6
 800088e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000892:	ea4c 0c03 	orr.w	ip, ip, r3
 8000896:	fa20 f407 	lsr.w	r4, r0, r7
 800089a:	fa01 f306 	lsl.w	r3, r1, r6
 800089e:	431c      	orrs	r4, r3
 80008a0:	40f9      	lsrs	r1, r7
 80008a2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008a6:	fa00 f306 	lsl.w	r3, r0, r6
 80008aa:	fbb1 f8f9 	udiv	r8, r1, r9
 80008ae:	0c20      	lsrs	r0, r4, #16
 80008b0:	fa1f fe8c 	uxth.w	lr, ip
 80008b4:	fb09 1118 	mls	r1, r9, r8, r1
 80008b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008bc:	fb08 f00e 	mul.w	r0, r8, lr
 80008c0:	4288      	cmp	r0, r1
 80008c2:	fa02 f206 	lsl.w	r2, r2, r6
 80008c6:	d90b      	bls.n	80008e0 <__udivmoddi4+0x1b8>
 80008c8:	eb1c 0101 	adds.w	r1, ip, r1
 80008cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80008d0:	f080 8088 	bcs.w	80009e4 <__udivmoddi4+0x2bc>
 80008d4:	4288      	cmp	r0, r1
 80008d6:	f240 8085 	bls.w	80009e4 <__udivmoddi4+0x2bc>
 80008da:	f1a8 0802 	sub.w	r8, r8, #2
 80008de:	4461      	add	r1, ip
 80008e0:	1a09      	subs	r1, r1, r0
 80008e2:	b2a4      	uxth	r4, r4
 80008e4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008e8:	fb09 1110 	mls	r1, r9, r0, r1
 80008ec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f4:	458e      	cmp	lr, r1
 80008f6:	d908      	bls.n	800090a <__udivmoddi4+0x1e2>
 80008f8:	eb1c 0101 	adds.w	r1, ip, r1
 80008fc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000900:	d26c      	bcs.n	80009dc <__udivmoddi4+0x2b4>
 8000902:	458e      	cmp	lr, r1
 8000904:	d96a      	bls.n	80009dc <__udivmoddi4+0x2b4>
 8000906:	3802      	subs	r0, #2
 8000908:	4461      	add	r1, ip
 800090a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800090e:	fba0 9402 	umull	r9, r4, r0, r2
 8000912:	eba1 010e 	sub.w	r1, r1, lr
 8000916:	42a1      	cmp	r1, r4
 8000918:	46c8      	mov	r8, r9
 800091a:	46a6      	mov	lr, r4
 800091c:	d356      	bcc.n	80009cc <__udivmoddi4+0x2a4>
 800091e:	d053      	beq.n	80009c8 <__udivmoddi4+0x2a0>
 8000920:	b15d      	cbz	r5, 800093a <__udivmoddi4+0x212>
 8000922:	ebb3 0208 	subs.w	r2, r3, r8
 8000926:	eb61 010e 	sbc.w	r1, r1, lr
 800092a:	fa01 f707 	lsl.w	r7, r1, r7
 800092e:	fa22 f306 	lsr.w	r3, r2, r6
 8000932:	40f1      	lsrs	r1, r6
 8000934:	431f      	orrs	r7, r3
 8000936:	e9c5 7100 	strd	r7, r1, [r5]
 800093a:	2600      	movs	r6, #0
 800093c:	4631      	mov	r1, r6
 800093e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000942:	f1c2 0320 	rsb	r3, r2, #32
 8000946:	40d8      	lsrs	r0, r3
 8000948:	fa0c fc02 	lsl.w	ip, ip, r2
 800094c:	fa21 f303 	lsr.w	r3, r1, r3
 8000950:	4091      	lsls	r1, r2
 8000952:	4301      	orrs	r1, r0
 8000954:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000958:	fa1f fe8c 	uxth.w	lr, ip
 800095c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000960:	fb07 3610 	mls	r6, r7, r0, r3
 8000964:	0c0b      	lsrs	r3, r1, #16
 8000966:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800096a:	fb00 f60e 	mul.w	r6, r0, lr
 800096e:	429e      	cmp	r6, r3
 8000970:	fa04 f402 	lsl.w	r4, r4, r2
 8000974:	d908      	bls.n	8000988 <__udivmoddi4+0x260>
 8000976:	eb1c 0303 	adds.w	r3, ip, r3
 800097a:	f100 38ff 	add.w	r8, r0, #4294967295
 800097e:	d22f      	bcs.n	80009e0 <__udivmoddi4+0x2b8>
 8000980:	429e      	cmp	r6, r3
 8000982:	d92d      	bls.n	80009e0 <__udivmoddi4+0x2b8>
 8000984:	3802      	subs	r0, #2
 8000986:	4463      	add	r3, ip
 8000988:	1b9b      	subs	r3, r3, r6
 800098a:	b289      	uxth	r1, r1
 800098c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000990:	fb07 3316 	mls	r3, r7, r6, r3
 8000994:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000998:	fb06 f30e 	mul.w	r3, r6, lr
 800099c:	428b      	cmp	r3, r1
 800099e:	d908      	bls.n	80009b2 <__udivmoddi4+0x28a>
 80009a0:	eb1c 0101 	adds.w	r1, ip, r1
 80009a4:	f106 38ff 	add.w	r8, r6, #4294967295
 80009a8:	d216      	bcs.n	80009d8 <__udivmoddi4+0x2b0>
 80009aa:	428b      	cmp	r3, r1
 80009ac:	d914      	bls.n	80009d8 <__udivmoddi4+0x2b0>
 80009ae:	3e02      	subs	r6, #2
 80009b0:	4461      	add	r1, ip
 80009b2:	1ac9      	subs	r1, r1, r3
 80009b4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80009b8:	e738      	b.n	800082c <__udivmoddi4+0x104>
 80009ba:	462e      	mov	r6, r5
 80009bc:	4628      	mov	r0, r5
 80009be:	e705      	b.n	80007cc <__udivmoddi4+0xa4>
 80009c0:	4606      	mov	r6, r0
 80009c2:	e6e3      	b.n	800078c <__udivmoddi4+0x64>
 80009c4:	4618      	mov	r0, r3
 80009c6:	e6f8      	b.n	80007ba <__udivmoddi4+0x92>
 80009c8:	454b      	cmp	r3, r9
 80009ca:	d2a9      	bcs.n	8000920 <__udivmoddi4+0x1f8>
 80009cc:	ebb9 0802 	subs.w	r8, r9, r2
 80009d0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009d4:	3801      	subs	r0, #1
 80009d6:	e7a3      	b.n	8000920 <__udivmoddi4+0x1f8>
 80009d8:	4646      	mov	r6, r8
 80009da:	e7ea      	b.n	80009b2 <__udivmoddi4+0x28a>
 80009dc:	4620      	mov	r0, r4
 80009de:	e794      	b.n	800090a <__udivmoddi4+0x1e2>
 80009e0:	4640      	mov	r0, r8
 80009e2:	e7d1      	b.n	8000988 <__udivmoddi4+0x260>
 80009e4:	46d0      	mov	r8, sl
 80009e6:	e77b      	b.n	80008e0 <__udivmoddi4+0x1b8>
 80009e8:	3b02      	subs	r3, #2
 80009ea:	4461      	add	r1, ip
 80009ec:	e732      	b.n	8000854 <__udivmoddi4+0x12c>
 80009ee:	4630      	mov	r0, r6
 80009f0:	e709      	b.n	8000806 <__udivmoddi4+0xde>
 80009f2:	4464      	add	r4, ip
 80009f4:	3802      	subs	r0, #2
 80009f6:	e742      	b.n	800087e <__udivmoddi4+0x156>

080009f8 <__aeabi_idiv0>:
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <MLX90640_DumpEE>:
int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2);  
float GetMedian(float *values, int n);
int IsPixelBad(uint16_t pixel,paramsMLX90640 *params);
  
int MLX90640_DumpEE(uint8_t slaveAddr, uint16_t *eeData,I2C_HandleTypeDef * i2c)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af02      	add	r7, sp, #8
 8000a02:	4603      	mov	r3, r0
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
 8000a08:	73fb      	strb	r3, [r7, #15]
     return MLX90640_I2CRead(slaveAddr, 0x2400, 832, eeData,i2c);
 8000a0a:	7bf8      	ldrb	r0, [r7, #15]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	f44f 7250 	mov.w	r2, #832	; 0x340
 8000a16:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8000a1a:	f001 ffa5 	bl	8002968 <MLX90640_I2CRead>
 8000a1e:	4603      	mov	r3, r0
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <MLX90640_ExtractParameters>:
    printf("%d \n", frameData[833]);
    return frameData[833];    
}

int MLX90640_ExtractParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
    int error = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
    
    ExtractVDDParameters(eeData, mlx90640);
 8000a36:	6839      	ldr	r1, [r7, #0]
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f000 f894 	bl	8000b66 <ExtractVDDParameters>
    ExtractPTATParameters(eeData, mlx90640);
 8000a3e:	6839      	ldr	r1, [r7, #0]
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f000 f8c9 	bl	8000bd8 <ExtractPTATParameters>
    ExtractGainParameters(eeData, mlx90640);
 8000a46:	6839      	ldr	r1, [r7, #0]
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f000 f949 	bl	8000ce0 <ExtractGainParameters>
    ExtractTgcParameters(eeData, mlx90640);
 8000a4e:	6839      	ldr	r1, [r7, #0]
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f000 f957 	bl	8000d04 <ExtractTgcParameters>
    ExtractResolutionParameters(eeData, mlx90640);
 8000a56:	6839      	ldr	r1, [r7, #0]
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f000 f98b 	bl	8000d74 <ExtractResolutionParameters>
    ExtractKsTaParameters(eeData, mlx90640);
 8000a5e:	6839      	ldr	r1, [r7, #0]
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f000 f99f 	bl	8000da4 <ExtractKsTaParameters>
    ExtractKsToParameters(eeData, mlx90640);
 8000a66:	6839      	ldr	r1, [r7, #0]
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f000 f9d3 	bl	8000e14 <ExtractKsToParameters>
    ExtractCPParameters(eeData, mlx90640);
 8000a6e:	6839      	ldr	r1, [r7, #0]
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f001 fc69 	bl	8002348 <ExtractCPParameters>
    ExtractAlphaParameters(eeData, mlx90640);
 8000a76:	6839      	ldr	r1, [r7, #0]
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f000 fab1 	bl	8000fe0 <ExtractAlphaParameters>
    ExtractOffsetParameters(eeData, mlx90640);
 8000a7e:	6839      	ldr	r1, [r7, #0]
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f000 fe0b 	bl	800169c <ExtractOffsetParameters>
    ExtractKtaPixelParameters(eeData, mlx90640);
 8000a86:	6839      	ldr	r1, [r7, #0]
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f001 f841 	bl	8001b10 <ExtractKtaPixelParameters>
    ExtractKvPixelParameters(eeData, mlx90640);
 8000a8e:	6839      	ldr	r1, [r7, #0]
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f001 fa71 	bl	8001f78 <ExtractKvPixelParameters>
    ExtractCILCParameters(eeData, mlx90640);
 8000a96:	6839      	ldr	r1, [r7, #0]
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f001 fd99 	bl	80025d0 <ExtractCILCParameters>
    error = ExtractDeviatingPixels(eeData, mlx90640);  
 8000a9e:	6839      	ldr	r1, [r7, #0]
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f001 fe35 	bl	8002710 <ExtractDeviatingPixels>
 8000aa6:	60f8      	str	r0, [r7, #12]
    
    return error;
 8000aa8:	68fb      	ldr	r3, [r7, #12]

}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <MLX90640_SetRefreshRate>:
}

//------------------------------------------------------------------------------

int MLX90640_SetRefreshRate(uint8_t slaveAddr, uint8_t refreshRate,I2C_HandleTypeDef * i2c)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b088      	sub	sp, #32
 8000ab6:	af02      	add	r7, sp, #8
 8000ab8:	4603      	mov	r3, r0
 8000aba:	603a      	str	r2, [r7, #0]
 8000abc:	71fb      	strb	r3, [r7, #7]
 8000abe:	460b      	mov	r3, r1
 8000ac0:	71bb      	strb	r3, [r7, #6]
    uint16_t controlRegister1;
    int value;
    int error;
    
    value = (refreshRate & 0x07)<<7;
 8000ac2:	79bb      	ldrb	r3, [r7, #6]
 8000ac4:	01db      	lsls	r3, r3, #7
 8000ac6:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000aca:	613b      	str	r3, [r7, #16]
    
    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1,i2c);
 8000acc:	f107 020e 	add.w	r2, r7, #14
 8000ad0:	79f8      	ldrb	r0, [r7, #7]
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f248 010d 	movw	r1, #32781	; 0x800d
 8000ade:	f001 ff43 	bl	8002968 <MLX90640_I2CRead>
 8000ae2:	6178      	str	r0, [r7, #20]
    if(error == 0)
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d110      	bne.n	8000b0c <MLX90640_SetRefreshRate+0x5a>
    {
        value = (controlRegister1 & 0xFC7F) | value;
 8000aea:	89fb      	ldrh	r3, [r7, #14]
 8000aec:	461a      	mov	r2, r3
 8000aee:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 8000af2:	4013      	ands	r3, r2
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        error = MLX90640_I2CWrite(slaveAddr, 0x800D, value,i2c);
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	79f8      	ldrb	r0, [r7, #7]
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	f248 010d 	movw	r1, #32781	; 0x800d
 8000b06:	f001 ff7f 	bl	8002a08 <MLX90640_I2CWrite>
 8000b0a:	6178      	str	r0, [r7, #20]
    }    
    
    return error;
 8000b0c:	697b      	ldr	r3, [r7, #20]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <MLX90640_SetChessMode>:
}

//------------------------------------------------------------------------------

int MLX90640_SetChessMode(uint8_t slaveAddr,I2C_HandleTypeDef * i2c)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b088      	sub	sp, #32
 8000b1a:	af02      	add	r7, sp, #8
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	6039      	str	r1, [r7, #0]
 8000b20:	71fb      	strb	r3, [r7, #7]
    uint16_t controlRegister1;
    int value;
    int error;
        
    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1,i2c);
 8000b22:	f107 020e 	add.w	r2, r7, #14
 8000b26:	79f8      	ldrb	r0, [r7, #7]
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f248 010d 	movw	r1, #32781	; 0x800d
 8000b34:	f001 ff18 	bl	8002968 <MLX90640_I2CRead>
 8000b38:	6178      	str	r0, [r7, #20]
    
    if(error == 0)
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d10d      	bne.n	8000b5c <MLX90640_SetChessMode+0x46>
    {
        value = (controlRegister1 | 0x1000);
 8000b40:	89fb      	ldrh	r3, [r7, #14]
 8000b42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	613b      	str	r3, [r7, #16]
        error = MLX90640_I2CWrite(slaveAddr, 0x800D, value,i2c);
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	79f8      	ldrb	r0, [r7, #7]
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	f248 010d 	movw	r1, #32781	; 0x800d
 8000b56:	f001 ff57 	bl	8002a08 <MLX90640_I2CWrite>
 8000b5a:	6178      	str	r0, [r7, #20]
    }    
    
    return error;
 8000b5c:	697b      	ldr	r3, [r7, #20]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <ExtractVDDParameters>:
}

//------------------------------------------------------------------------------

void ExtractVDDParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b085      	sub	sp, #20
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
 8000b6e:	6039      	str	r1, [r7, #0]
    int16_t kVdd;
    int16_t vdd25;
    
    kVdd = eeData[51];
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3366      	adds	r3, #102	; 0x66
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	81fb      	strh	r3, [r7, #14]
    
    kVdd = (eeData[51] & 0xFF00) >> 8;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3366      	adds	r3, #102	; 0x66
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	0a1b      	lsrs	r3, r3, #8
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	81fb      	strh	r3, [r7, #14]
    if(kVdd > 127)
 8000b84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b88:	2b7f      	cmp	r3, #127	; 0x7f
 8000b8a:	dd04      	ble.n	8000b96 <ExtractVDDParameters+0x30>
    {
        kVdd = kVdd - 256;
 8000b8c:	89fb      	ldrh	r3, [r7, #14]
 8000b8e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	81fb      	strh	r3, [r7, #14]
    }
    kVdd = 32 * kVdd;
 8000b96:	89fb      	ldrh	r3, [r7, #14]
 8000b98:	015b      	lsls	r3, r3, #5
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	81fb      	strh	r3, [r7, #14]
    vdd25 = eeData[51] & 0x00FF;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	3366      	adds	r3, #102	; 0x66
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	b21b      	sxth	r3, r3
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	81bb      	strh	r3, [r7, #12]
    vdd25 = ((vdd25 - 256) << 5) - 8192;
 8000baa:	89bb      	ldrh	r3, [r7, #12]
 8000bac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	015b      	lsls	r3, r3, #5
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	81bb      	strh	r3, [r7, #12]
    
    mlx90640->kVdd = kVdd;
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	89fa      	ldrh	r2, [r7, #14]
 8000bc2:	801a      	strh	r2, [r3, #0]
    mlx90640->vdd25 = vdd25; 
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	89ba      	ldrh	r2, [r7, #12]
 8000bc8:	805a      	strh	r2, [r3, #2]
}
 8000bca:	bf00      	nop
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <ExtractPTATParameters>:

//------------------------------------------------------------------------------

void ExtractPTATParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b087      	sub	sp, #28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
    float KvPTAT;
    float KtPTAT;
    int16_t vPTAT25;
    float alphaPTAT;
    
    KvPTAT = (eeData[50] & 0xFC00) >> 10;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	3364      	adds	r3, #100	; 0x64
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	0a9b      	lsrs	r3, r3, #10
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	ee07 3a90 	vmov	s15, r3
 8000bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bf4:	edc7 7a05 	vstr	s15, [r7, #20]
    if(KvPTAT > 31)
 8000bf8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bfc:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8000c00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c08:	dd07      	ble.n	8000c1a <ExtractPTATParameters+0x42>
    {
        KvPTAT = KvPTAT - 64;
 8000c0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c0e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000cd0 <ExtractPTATParameters+0xf8>
 8000c12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c16:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    KvPTAT = KvPTAT/4096;
 8000c1a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c1e:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8000cd4 <ExtractPTATParameters+0xfc>
 8000c22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c26:	edc7 7a05 	vstr	s15, [r7, #20]
    
    KtPTAT = eeData[50] & 0x03FF;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	3364      	adds	r3, #100	; 0x64
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c34:	ee07 3a90 	vmov	s15, r3
 8000c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c3c:	edc7 7a04 	vstr	s15, [r7, #16]
    if(KtPTAT > 511)
 8000c40:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c44:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000cd8 <ExtractPTATParameters+0x100>
 8000c48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c50:	dd07      	ble.n	8000c62 <ExtractPTATParameters+0x8a>
    {
        KtPTAT = KtPTAT - 1024;
 8000c52:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c56:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8000cdc <ExtractPTATParameters+0x104>
 8000c5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c5e:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    KtPTAT = KtPTAT/8;
 8000c62:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c66:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8000c6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c6e:	edc7 7a04 	vstr	s15, [r7, #16]
    
    vPTAT25 = eeData[49];
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	3362      	adds	r3, #98	; 0x62
 8000c76:	881b      	ldrh	r3, [r3, #0]
 8000c78:	81fb      	strh	r3, [r7, #14]
    
    alphaPTAT = (eeData[16] & 0xF000) / pow(2, (double)14) + 8.0f;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	3320      	adds	r3, #32
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8000c84:	ee07 3a90 	vmov	s15, r3
 8000c88:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c8c:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8000cc8 <ExtractPTATParameters+0xf0>
 8000c90:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c94:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 8000c98:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000c9c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ca0:	edc7 7a02 	vstr	s15, [r7, #8]
    
    mlx90640->KvPTAT = KvPTAT;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	697a      	ldr	r2, [r7, #20]
 8000ca8:	605a      	str	r2, [r3, #4]
    mlx90640->KtPTAT = KtPTAT;    
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	609a      	str	r2, [r3, #8]
    mlx90640->vPTAT25 = vPTAT25;
 8000cb0:	89fa      	ldrh	r2, [r7, #14]
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	819a      	strh	r2, [r3, #12]
    mlx90640->alphaPTAT = alphaPTAT;   
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	68ba      	ldr	r2, [r7, #8]
 8000cba:	611a      	str	r2, [r3, #16]
}
 8000cbc:	bf00      	nop
 8000cbe:	371c      	adds	r7, #28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	00000000 	.word	0x00000000
 8000ccc:	40d00000 	.word	0x40d00000
 8000cd0:	42800000 	.word	0x42800000
 8000cd4:	45800000 	.word	0x45800000
 8000cd8:	43ff8000 	.word	0x43ff8000
 8000cdc:	44800000 	.word	0x44800000

08000ce0 <ExtractGainParameters>:

//------------------------------------------------------------------------------

void ExtractGainParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
    int16_t gainEE;
    
    gainEE = eeData[48];
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3360      	adds	r3, #96	; 0x60
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	81fb      	strh	r3, [r7, #14]
    if(gainEE > 32767)
    {
        gainEE = gainEE -65536;
    }
    
    mlx90640->gainEE = gainEE;    
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	89fa      	ldrh	r2, [r7, #14]
 8000cf6:	829a      	strh	r2, [r3, #20]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <ExtractTgcParameters>:

//------------------------------------------------------------------------------

void ExtractTgcParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
    float tgc;
    tgc = eeData[60] & 0x00FF;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3378      	adds	r3, #120	; 0x78
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	ee07 3a90 	vmov	s15, r3
 8000d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d1e:	edc7 7a03 	vstr	s15, [r7, #12]
    if(tgc > 127)
 8000d22:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d26:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000d68 <ExtractTgcParameters+0x64>
 8000d2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d32:	dd07      	ble.n	8000d44 <ExtractTgcParameters+0x40>
    {
        tgc = tgc - 256;
 8000d34:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d38:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000d6c <ExtractTgcParameters+0x68>
 8000d3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d40:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    tgc = tgc / 32.0f;
 8000d44:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d48:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000d70 <ExtractTgcParameters+0x6c>
 8000d4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d50:	edc7 7a03 	vstr	s15, [r7, #12]
    
    mlx90640->tgc = tgc;        
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	619a      	str	r2, [r3, #24]
}
 8000d5a:	bf00      	nop
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	42fe0000 	.word	0x42fe0000
 8000d6c:	43800000 	.word	0x43800000
 8000d70:	42000000 	.word	0x42000000

08000d74 <ExtractResolutionParameters>:

//------------------------------------------------------------------------------

void ExtractResolutionParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
    uint8_t resolutionEE;
    resolutionEE = (eeData[56] & 0x3000) >> 12;    
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3370      	adds	r3, #112	; 0x70
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	131b      	asrs	r3, r3, #12
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	73fb      	strb	r3, [r7, #15]
    
    mlx90640->resolutionEE = resolutionEE;
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	7bfa      	ldrb	r2, [r7, #15]
 8000d92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8000d96:	bf00      	nop
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <ExtractKsTaParameters>:

//------------------------------------------------------------------------------

void ExtractKsTaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
    float KsTa;
    KsTa = (eeData[60] & 0xFF00) >> 8;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3378      	adds	r3, #120	; 0x78
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	ee07 3a90 	vmov	s15, r3
 8000dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dc0:	edc7 7a03 	vstr	s15, [r7, #12]
    if(KsTa > 127)
 8000dc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dc8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000e08 <ExtractKsTaParameters+0x64>
 8000dcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd4:	dd07      	ble.n	8000de6 <ExtractKsTaParameters+0x42>
    {
        KsTa = KsTa -256;
 8000dd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dda:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000e0c <ExtractKsTaParameters+0x68>
 8000dde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000de2:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    KsTa = KsTa / 8192.0f;
 8000de6:	ed97 7a03 	vldr	s14, [r7, #12]
 8000dea:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000e10 <ExtractKsTaParameters+0x6c>
 8000dee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000df2:	edc7 7a03 	vstr	s15, [r7, #12]
    
    mlx90640->KsTa = KsTa;
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	42fe0000 	.word	0x42fe0000
 8000e0c:	43800000 	.word	0x43800000
 8000e10:	46000000 	.word	0x46000000

08000e14 <ExtractKsToParameters>:

//------------------------------------------------------------------------------

void ExtractKsToParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b087      	sub	sp, #28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
    int KsToScale;
    int8_t step;
    
    step = ((eeData[63] & 0x3000) >> 12) * 10;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	337e      	adds	r3, #126	; 0x7e
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	131b      	asrs	r3, r3, #12
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	461a      	mov	r2, r3
 8000e30:	0092      	lsls	r2, r2, #2
 8000e32:	4413      	add	r3, r2
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	74fb      	strb	r3, [r7, #19]
    
    mlx90640->ct[0] = -40;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	f64f 72d8 	movw	r2, #65496	; 0xffd8
 8000e40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    mlx90640->ct[1] = 0;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	2200      	movs	r2, #0
 8000e48:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    mlx90640->ct[2] = (eeData[63] & 0x00F0) >> 4;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	337e      	adds	r3, #126	; 0x7e
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	111b      	asrs	r3, r3, #4
 8000e54:	b21b      	sxth	r3, r3
 8000e56:	f003 030f 	and.w	r3, r3, #15
 8000e5a:	b21a      	sxth	r2, r3
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    mlx90640->ct[3] = (eeData[63] & 0x0F00) >> 8;    
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	337e      	adds	r3, #126	; 0x7e
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	121b      	asrs	r3, r3, #8
 8000e6a:	b21b      	sxth	r3, r3
 8000e6c:	f003 030f 	and.w	r3, r3, #15
 8000e70:	b21a      	sxth	r2, r3
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    
    mlx90640->ct[2] = mlx90640->ct[2]*step;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	fb12 f303 	smulbb	r3, r2, r3
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	b21a      	sxth	r2, r3
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    mlx90640->ct[3] = mlx90640->ct[2] + mlx90640->ct[3]*step;
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8000ea2:	b299      	uxth	r1, r3
 8000ea4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	fb11 f303 	smulbb	r3, r1, r3
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	4413      	add	r3, r2
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	b21a      	sxth	r2, r3
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    mlx90640->ct[4] = 400;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000ec2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    
    KsToScale = (eeData[63] & 0x000F) + 8;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	337e      	adds	r3, #126	; 0x7e
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	f003 030f 	and.w	r3, r3, #15
 8000ed0:	3308      	adds	r3, #8
 8000ed2:	60fb      	str	r3, [r7, #12]
    KsToScale = 1 << KsToScale;
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	60fb      	str	r3, [r7, #12]
    
    mlx90640->ksTo[0] = eeData[61] & 0x00FF;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	337a      	adds	r3, #122	; 0x7a
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	ee07 3a90 	vmov	s15, r3
 8000eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    mlx90640->ksTo[1] = (eeData[61] & 0xFF00) >> 8;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	337a      	adds	r3, #122	; 0x7a
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	0a1b      	lsrs	r3, r3, #8
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	ee07 3a90 	vmov	s15, r3
 8000f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    mlx90640->ksTo[2] = eeData[62] & 0x00FF;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	337c      	adds	r3, #124	; 0x7c
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	ee07 3a90 	vmov	s15, r3
 8000f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    mlx90640->ksTo[3] = (eeData[62] & 0xFF00) >> 8;      
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	337c      	adds	r3, #124	; 0x7c
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	ee07 3a90 	vmov	s15, r3
 8000f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    
    for(int i = 0; i < 4; i++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	e03c      	b.n	8000fba <ExtractKsToParameters+0x1a6>
    {
        if(mlx90640->ksTo[i] > 127)
 8000f40:	683a      	ldr	r2, [r7, #0]
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	330a      	adds	r3, #10
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	4413      	add	r3, r2
 8000f4a:	3304      	adds	r3, #4
 8000f4c:	edd3 7a00 	vldr	s15, [r3]
 8000f50:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000fd4 <ExtractKsToParameters+0x1c0>
 8000f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f5c:	dd13      	ble.n	8000f86 <ExtractKsToParameters+0x172>
        {
            mlx90640->ksTo[i] = mlx90640->ksTo[i] - 256;
 8000f5e:	683a      	ldr	r2, [r7, #0]
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	330a      	adds	r3, #10
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	3304      	adds	r3, #4
 8000f6a:	edd3 7a00 	vldr	s15, [r3]
 8000f6e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000fd8 <ExtractKsToParameters+0x1c4>
 8000f72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	330a      	adds	r3, #10
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	3304      	adds	r3, #4
 8000f82:	edc3 7a00 	vstr	s15, [r3]
        }
        mlx90640->ksTo[i] = mlx90640->ksTo[i] / KsToScale;
 8000f86:	683a      	ldr	r2, [r7, #0]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	330a      	adds	r3, #10
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	3304      	adds	r3, #4
 8000f92:	edd3 6a00 	vldr	s13, [r3]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	ee07 3a90 	vmov	s15, r3
 8000f9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	330a      	adds	r3, #10
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4413      	add	r3, r2
 8000fae:	3304      	adds	r3, #4
 8000fb0:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < 4; i++)
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	ddbf      	ble.n	8000f40 <ExtractKsToParameters+0x12c>
    } 
    
    mlx90640->ksTo[4] = -0.0002;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <ExtractKsToParameters+0x1c8>)
 8000fc4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000fc6:	bf00      	nop
 8000fc8:	371c      	adds	r7, #28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	42fe0000 	.word	0x42fe0000
 8000fd8:	43800000 	.word	0x43800000
 8000fdc:	b951b717 	.word	0xb951b717

08000fe0 <ExtractAlphaParameters>:

//------------------------------------------------------------------------------

void ExtractAlphaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	ed2d 8b02 	vpush	{d8}
 8000fe6:	f5ad 6d52 	sub.w	sp, sp, #3360	; 0xd20
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8000ff0:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8000ff4:	6018      	str	r0, [r3, #0]
 8000ff6:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8000ffa:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8000ffe:	6019      	str	r1, [r3, #0]
    int accRow[24];
    int accColumn[32];
    int p = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
    uint8_t accRemScale;
    float alphaTemp[768];
    float temp;
    

    accRemScale = eeData[32] & 0x000F;
 8001006:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800100a:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	3340      	adds	r3, #64	; 0x40
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	f003 030f 	and.w	r3, r3, #15
 800101a:	f887 3cf3 	strb.w	r3, [r7, #3315]	; 0xcf3
    accColumnScale = (eeData[32] & 0x00F0) >> 4;
 800101e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001022:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	3340      	adds	r3, #64	; 0x40
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	111b      	asrs	r3, r3, #4
 800102e:	b2db      	uxtb	r3, r3
 8001030:	f003 030f 	and.w	r3, r3, #15
 8001034:	f887 3cf2 	strb.w	r3, [r7, #3314]	; 0xcf2
    accRowScale = (eeData[32] & 0x0F00) >> 8;
 8001038:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800103c:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3340      	adds	r3, #64	; 0x40
 8001044:	881b      	ldrh	r3, [r3, #0]
 8001046:	121b      	asrs	r3, r3, #8
 8001048:	b2db      	uxtb	r3, r3
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	f887 3cf1 	strb.w	r3, [r7, #3313]	; 0xcf1
    alphaScale = ((eeData[32] & 0xF000) >> 12) + 30;
 8001052:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001056:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	3340      	adds	r3, #64	; 0x40
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	0b1b      	lsrs	r3, r3, #12
 8001062:	b29b      	uxth	r3, r3
 8001064:	b2db      	uxtb	r3, r3
 8001066:	331e      	adds	r3, #30
 8001068:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    alphaRef = eeData[33];
 800106c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001070:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	3342      	adds	r3, #66	; 0x42
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	f8c7 3cec 	str.w	r3, [r7, #3308]	; 0xcec
    
    for(int i = 0; i < 6; i++)
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 3d14 	str.w	r3, [r7, #3348]	; 0xd14
 8001084:	e062      	b.n	800114c <ExtractAlphaParameters+0x16c>
    {
        p = i * 4;
 8001086:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
        accRow[p + 0] = (eeData[34 + i] & 0x000F);
 8001090:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8001094:	3322      	adds	r3, #34	; 0x22
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 800109c:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80010a0:	6812      	ldr	r2, [r2, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	f003 020f 	and.w	r2, r3, #15
 80010aa:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 80010b4:	443b      	add	r3, r7
 80010b6:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 1] = (eeData[34 + i] & 0x00F0) >> 4;
 80010ba:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 80010be:	3322      	adds	r3, #34	; 0x22
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80010c6:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80010ca:	6812      	ldr	r2, [r2, #0]
 80010cc:	4413      	add	r3, r2
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	111a      	asrs	r2, r3, #4
 80010d2:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80010d6:	3301      	adds	r3, #1
 80010d8:	f002 020f 	and.w	r2, r2, #15
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 80010e2:	443b      	add	r3, r7
 80010e4:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 2] = (eeData[34 + i] & 0x0F00) >> 8;
 80010e8:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 80010ec:	3322      	adds	r3, #34	; 0x22
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80010f4:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80010f8:	6812      	ldr	r2, [r2, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	121a      	asrs	r2, r3, #8
 8001100:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001104:	3302      	adds	r3, #2
 8001106:	f002 020f 	and.w	r2, r2, #15
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001110:	443b      	add	r3, r7
 8001112:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 3] = (eeData[34 + i] & 0xF000) >> 12;
 8001116:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 800111a:	3322      	adds	r3, #34	; 0x22
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001122:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001126:	6812      	ldr	r2, [r2, #0]
 8001128:	4413      	add	r3, r2
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	0b1b      	lsrs	r3, r3, #12
 800112e:	b29a      	uxth	r2, r3
 8001130:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001134:	3303      	adds	r3, #3
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 800113c:	443b      	add	r3, r7
 800113e:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < 6; i++)
 8001142:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8001146:	3301      	adds	r3, #1
 8001148:	f8c7 3d14 	str.w	r3, [r7, #3348]	; 0xd14
 800114c:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8001150:	2b05      	cmp	r3, #5
 8001152:	dd98      	ble.n	8001086 <ExtractAlphaParameters+0xa6>
    }
    
    for(int i = 0; i < 24; i++)
 8001154:	2300      	movs	r3, #0
 8001156:	f8c7 3d10 	str.w	r3, [r7, #3344]	; 0xd10
 800115a:	e020      	b.n	800119e <ExtractAlphaParameters+0x1be>
    {
        if (accRow[i] > 7)
 800115c:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001166:	443b      	add	r3, r7
 8001168:	f853 3c94 	ldr.w	r3, [r3, #-148]
 800116c:	2b07      	cmp	r3, #7
 800116e:	dd11      	ble.n	8001194 <ExtractAlphaParameters+0x1b4>
        {
            accRow[i] = accRow[i] - 16;
 8001170:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 800117a:	443b      	add	r3, r7
 800117c:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8001180:	f1a3 0210 	sub.w	r2, r3, #16
 8001184:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 800118e:	443b      	add	r3, r7
 8001190:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < 24; i++)
 8001194:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8001198:	3301      	adds	r3, #1
 800119a:	f8c7 3d10 	str.w	r3, [r7, #3344]	; 0xd10
 800119e:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 80011a2:	2b17      	cmp	r3, #23
 80011a4:	ddda      	ble.n	800115c <ExtractAlphaParameters+0x17c>
        }
    }
    
    for(int i = 0; i < 8; i++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 80011ac:	e062      	b.n	8001274 <ExtractAlphaParameters+0x294>
    {
        p = i * 4;
 80011ae:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
        accColumn[p + 0] = (eeData[40 + i] & 0x000F);
 80011b8:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80011bc:	3328      	adds	r3, #40	; 0x28
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80011c4:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80011c8:	6812      	ldr	r2, [r2, #0]
 80011ca:	4413      	add	r3, r2
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	f003 010f 	and.w	r1, r3, #15
 80011d2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80011d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80011da:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 80011de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 1] = (eeData[40 + i] & 0x00F0) >> 4;
 80011e2:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80011e6:	3328      	adds	r3, #40	; 0x28
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80011ee:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80011f2:	6812      	ldr	r2, [r2, #0]
 80011f4:	4413      	add	r3, r2
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	111b      	asrs	r3, r3, #4
 80011fa:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 80011fe:	3201      	adds	r2, #1
 8001200:	f003 010f 	and.w	r1, r3, #15
 8001204:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001208:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800120c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 2] = (eeData[40 + i] & 0x0F00) >> 8;
 8001210:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001214:	3328      	adds	r3, #40	; 0x28
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 800121c:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001220:	6812      	ldr	r2, [r2, #0]
 8001222:	4413      	add	r3, r2
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	121b      	asrs	r3, r3, #8
 8001228:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 800122c:	3202      	adds	r2, #2
 800122e:	f003 010f 	and.w	r1, r3, #15
 8001232:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001236:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800123a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 3] = (eeData[40 + i] & 0xF000) >> 12;
 800123e:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001242:	3328      	adds	r3, #40	; 0x28
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 800124a:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 800124e:	6812      	ldr	r2, [r2, #0]
 8001250:	4413      	add	r3, r2
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	0b1b      	lsrs	r3, r3, #12
 8001256:	b299      	uxth	r1, r3
 8001258:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800125c:	1cda      	adds	r2, r3, #3
 800125e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001262:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001266:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 800126a:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 800126e:	3301      	adds	r3, #1
 8001270:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 8001274:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001278:	2b07      	cmp	r3, #7
 800127a:	dd98      	ble.n	80011ae <ExtractAlphaParameters+0x1ce>
    }
    
    for(int i = 0; i < 32; i ++)
 800127c:	2300      	movs	r3, #0
 800127e:	f8c7 3d08 	str.w	r3, [r7, #3336]	; 0xd08
 8001282:	e020      	b.n	80012c6 <ExtractAlphaParameters+0x2e6>
    {
        if (accColumn[i] > 7)
 8001284:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001288:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800128c:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 8001290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001294:	2b07      	cmp	r3, #7
 8001296:	dd11      	ble.n	80012bc <ExtractAlphaParameters+0x2dc>
        {
            accColumn[i] = accColumn[i] - 16;
 8001298:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800129c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80012a0:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 80012a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a8:	f1a3 0110 	sub.w	r1, r3, #16
 80012ac:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80012b0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80012b4:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 80012b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 32; i ++)
 80012bc:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 80012c0:	3301      	adds	r3, #1
 80012c2:	f8c7 3d08 	str.w	r3, [r7, #3336]	; 0xd08
 80012c6:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 80012ca:	2b1f      	cmp	r3, #31
 80012cc:	ddda      	ble.n	8001284 <ExtractAlphaParameters+0x2a4>
        }
    }

    for(int i = 0; i < 24; i++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 80012d4:	e12a      	b.n	800152c <ExtractAlphaParameters+0x54c>
    {
        for(int j = 0; j < 32; j ++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 80012dc:	e11c      	b.n	8001518 <ExtractAlphaParameters+0x538>
        {
            p = 32 * i +j;
 80012de:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80012e2:	015b      	lsls	r3, r3, #5
 80012e4:	f8d7 2d00 	ldr.w	r2, [r7, #3328]	; 0xd00
 80012e8:	4413      	add	r3, r2
 80012ea:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
            alphaTemp[p] = (eeData[64 + p] & 0x03F0) >> 4;
 80012ee:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80012f2:	3340      	adds	r3, #64	; 0x40
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80012fa:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	4413      	add	r3, r2
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	111b      	asrs	r3, r3, #4
 8001306:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001312:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001316:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800131a:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	edc3 7a00 	vstr	s15, [r3]
            if (alphaTemp[p] > 31)
 8001326:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800132a:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800132e:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	edd3 7a00 	vldr	s15, [r3]
 800133a:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 800133e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001346:	dd17      	ble.n	8001378 <ExtractAlphaParameters+0x398>
            {
                alphaTemp[p] = alphaTemp[p] - 64;
 8001348:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800134c:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001350:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	edd3 7a00 	vldr	s15, [r3]
 800135c:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8001690 <ExtractAlphaParameters+0x6b0>
 8001360:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001364:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001368:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800136c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	edc3 7a00 	vstr	s15, [r3]
            }
            alphaTemp[p] = alphaTemp[p]*(1 << accRemScale);
 8001378:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800137c:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001380:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	ed93 7a00 	vldr	s14, [r3]
 800138c:	f897 3cf3 	ldrb.w	r3, [r7, #3315]	; 0xcf3
 8001390:	2201      	movs	r2, #1
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800139e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80013a6:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80013aa:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
 80013b6:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 80013c0:	443b      	add	r3, r7
 80013c2:	f853 2c94 	ldr.w	r2, [r3, #-148]
 80013c6:	f897 3cf1 	ldrb.w	r3, [r7, #3313]	; 0xcf1
 80013ca:	409a      	lsls	r2, r3
 80013cc:	f8d7 3cec 	ldr.w	r3, [r7, #3308]	; 0xcec
 80013d0:	441a      	add	r2, r3
 80013d2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80013d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013da:	f8d7 1d00 	ldr.w	r1, [r7, #3328]	; 0xd00
 80013de:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80013e2:	f897 3cf2 	ldrb.w	r3, [r7, #3314]	; 0xcf2
 80013e6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ea:	4413      	add	r3, r2
 80013ec:	ee07 3a90 	vmov	s15, r3
 80013f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f4:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80013f8:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80013fc:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	edd3 7a00 	vldr	s15, [r3]
 8001408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800140c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001410:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001414:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = alphaTemp[p] / pow(2,(double)alphaScale);
 8001420:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001424:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001428:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	edd3 7a00 	vldr	s15, [r3]
 8001434:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001438:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 800143c:	ee07 3a90 	vmov	s15, r3
 8001440:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001444:	eeb0 1b47 	vmov.f64	d1, d7
 8001448:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800144c:	f014 fee4 	bl	8016218 <pow>
 8001450:	eeb0 6b40 	vmov.f64	d6, d0
 8001454:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001458:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800145c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001460:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001464:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = alphaTemp[p] - mlx90640->tgc * (mlx90640->cpAlpha[0] + mlx90640->cpAlpha[1])/2;
 8001470:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001474:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001478:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	ed93 7a00 	vldr	s14, [r3]
 8001484:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001488:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	edd3 6a06 	vldr	s13, [r3, #24]
 8001492:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001496:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014a0:	ed93 6a94 	vldr	s12, [r3, #592]	; 0x250
 80014a4:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80014a8:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014b2:	edd3 7a95 	vldr	s15, [r3, #596]	; 0x254
 80014b6:	ee76 7a27 	vadd.f32	s15, s12, s15
 80014ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014be:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80014c2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80014c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ca:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80014ce:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80014d2:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = SCALEALPHA/alphaTemp[p];
 80014de:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80014e2:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80014e6:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	ed93 7a00 	vldr	s14, [r3]
 80014f2:	eddf 6a68 	vldr	s13, [pc, #416]	; 8001694 <ExtractAlphaParameters+0x6b4>
 80014f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014fa:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80014fe:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001502:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < 32; j ++)
 800150e:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8001512:	3301      	adds	r3, #1
 8001514:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 8001518:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 800151c:	2b1f      	cmp	r3, #31
 800151e:	f77f aede 	ble.w	80012de <ExtractAlphaParameters+0x2fe>
    for(int i = 0; i < 24; i++)
 8001522:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8001526:	3301      	adds	r3, #1
 8001528:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 800152c:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8001530:	2b17      	cmp	r3, #23
 8001532:	f77f aed0 	ble.w	80012d6 <ExtractAlphaParameters+0x2f6>
        }
    }
    
    temp = alphaTemp[0];
 8001536:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800153a:	f6a3 5314 	subw	r3, r3, #3348	; 0xd14
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8001544:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < 768; i++)
 8001546:	2301      	movs	r3, #1
 8001548:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 800154c:	e023      	b.n	8001596 <ExtractAlphaParameters+0x5b6>
    {
        if (alphaTemp[i] > temp)
 800154e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001552:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001556:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	edd3 7a00 	vldr	s15, [r3]
 8001562:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8001566:	ed93 7a00 	vldr	s14, [r3]
 800156a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800156e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001572:	d50b      	bpl.n	800158c <ExtractAlphaParameters+0x5ac>
        {
            temp = alphaTemp[i];
 8001574:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001578:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800157c:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 800158a:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < 768; i++)
 800158c:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8001590:	3301      	adds	r3, #1
 8001592:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 8001596:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800159a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800159e:	dbd6      	blt.n	800154e <ExtractAlphaParameters+0x56e>
        }
    }
    
    alphaScale = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    while(temp < 32768)
 80015a6:	e00e      	b.n	80015c6 <ExtractAlphaParameters+0x5e6>
    {
        temp = temp*2;
 80015a8:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80015ac:	edd3 7a00 	vldr	s15, [r3]
 80015b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015b4:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80015b8:	edc3 7a00 	vstr	s15, [r3]
        alphaScale = alphaScale + 1;
 80015bc:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 80015c0:	3301      	adds	r3, #1
 80015c2:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    while(temp < 32768)
 80015c6:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80015ca:	edd3 7a00 	vldr	s15, [r3]
 80015ce:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001698 <ExtractAlphaParameters+0x6b8>
 80015d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015da:	d4e5      	bmi.n	80015a8 <ExtractAlphaParameters+0x5c8>
    } 
    
    for(int i = 0; i < 768; i++)
 80015dc:	2300      	movs	r3, #0
 80015de:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
 80015e2:	e03f      	b.n	8001664 <ExtractAlphaParameters+0x684>
    {
        temp = alphaTemp[i] * pow(2,(double)alphaScale);        
 80015e4:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80015e8:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80015ec:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	edd3 7a00 	vldr	s15, [r3]
 80015f8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80015fc:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 8001600:	ee07 3a90 	vmov	s15, r3
 8001604:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001608:	eeb0 1b47 	vmov.f64	d1, d7
 800160c:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001610:	f014 fe02 	bl	8016218 <pow>
 8001614:	eeb0 7b40 	vmov.f64	d7, d0
 8001618:	ee28 7b07 	vmul.f64	d7, d8, d7
 800161c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001620:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8001624:	edc3 7a00 	vstr	s15, [r3]
        mlx90640->alpha[i] = (temp + 0.5f);        
 8001628:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 800162c:	edd3 7a00 	vldr	s15, [r3]
 8001630:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001634:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001638:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800163c:	ee17 3a90 	vmov	r3, s15
 8001640:	b299      	uxth	r1, r3
 8001642:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001646:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8001650:	3324      	adds	r3, #36	; 0x24
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4413      	add	r3, r2
 8001656:	460a      	mov	r2, r1
 8001658:	805a      	strh	r2, [r3, #2]
    for(int i = 0; i < 768; i++)
 800165a:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 800165e:	3301      	adds	r3, #1
 8001660:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
 8001664:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8001668:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800166c:	dbba      	blt.n	80015e4 <ExtractAlphaParameters+0x604>
        
    } 
    
    mlx90640->alphaScale = alphaScale;      
 800166e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001672:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f897 2d1f 	ldrb.w	r2, [r7, #3359]	; 0xd1f
 800167c:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
   
}
 8001680:	bf00      	nop
 8001682:	f507 6752 	add.w	r7, r7, #3360	; 0xd20
 8001686:	46bd      	mov	sp, r7
 8001688:	ecbd 8b02 	vpop	{d8}
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	42800000 	.word	0x42800000
 8001694:	358637bd 	.word	0x358637bd
 8001698:	47000000 	.word	0x47000000

0800169c <ExtractOffsetParameters>:

//------------------------------------------------------------------------------

void ExtractOffsetParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 800169c:	b480      	push	{r7}
 800169e:	b0c5      	sub	sp, #276	; 0x114
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016aa:	6018      	str	r0, [r3, #0]
 80016ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80016b4:	6019      	str	r1, [r3, #0]
    int occRow[24];
    int occColumn[32];
    int p = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    uint8_t occRowScale;
    uint8_t occColumnScale;
    uint8_t occRemScale;
    

    occRemScale = (eeData[16] & 0x000F);
 80016bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	3320      	adds	r3, #32
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	f003 030f 	and.w	r3, r3, #15
 80016d0:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
    occColumnScale = (eeData[16] & 0x00F0) >> 4;
 80016d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	3320      	adds	r3, #32
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	111b      	asrs	r3, r3, #4
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    occRowScale = (eeData[16] & 0x0F00) >> 8;
 80016ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	3320      	adds	r3, #32
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	121b      	asrs	r3, r3, #8
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	f003 030f 	and.w	r3, r3, #15
 8001704:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
    offsetRef = eeData[17];
 8001708:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800170c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	3322      	adds	r3, #34	; 0x22
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
    if (offsetRef > 32767)
    {
        offsetRef = offsetRef - 65536;
    }
    
    for(int i = 0; i < 6; i++)
 800171a:	2300      	movs	r3, #0
 800171c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001720:	e062      	b.n	80017e8 <ExtractOffsetParameters+0x14c>
    {
        p = i * 4;
 8001722:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        occRow[p + 0] = (eeData[18 + i] & 0x000F);
 800172c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001730:	3312      	adds	r3, #18
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001738:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800173c:	6812      	ldr	r2, [r2, #0]
 800173e:	4413      	add	r3, r2
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	f003 020f 	and.w	r2, r3, #15
 8001746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001750:	443b      	add	r3, r7
 8001752:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 1] = (eeData[18 + i] & 0x00F0) >> 4;
 8001756:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800175a:	3312      	adds	r3, #18
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001762:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001766:	6812      	ldr	r2, [r2, #0]
 8001768:	4413      	add	r3, r2
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	111a      	asrs	r2, r3, #4
 800176e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001772:	3301      	adds	r3, #1
 8001774:	f002 020f 	and.w	r2, r2, #15
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800177e:	443b      	add	r3, r7
 8001780:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 2] = (eeData[18 + i] & 0x0F00) >> 8;
 8001784:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001788:	3312      	adds	r3, #18
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001790:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	4413      	add	r3, r2
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	121a      	asrs	r2, r3, #8
 800179c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80017a0:	3302      	adds	r3, #2
 80017a2:	f002 020f 	and.w	r2, r2, #15
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80017ac:	443b      	add	r3, r7
 80017ae:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 3] = (eeData[18 + i] & 0xF000) >> 12;
 80017b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017b6:	3312      	adds	r3, #18
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80017be:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	4413      	add	r3, r2
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	0b1b      	lsrs	r3, r3, #12
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80017d0:	3303      	adds	r3, #3
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80017d8:	443b      	add	r3, r7
 80017da:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 6; i++)
 80017de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017e2:	3301      	adds	r3, #1
 80017e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80017e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017ec:	2b05      	cmp	r3, #5
 80017ee:	dd98      	ble.n	8001722 <ExtractOffsetParameters+0x86>
    }
    
    for(int i = 0; i < 24; i++)
 80017f0:	2300      	movs	r3, #0
 80017f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80017f6:	e020      	b.n	800183a <ExtractOffsetParameters+0x19e>
    {
        if (occRow[i] > 7)
 80017f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001802:	443b      	add	r3, r7
 8001804:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8001808:	2b07      	cmp	r3, #7
 800180a:	dd11      	ble.n	8001830 <ExtractOffsetParameters+0x194>
        {
            occRow[i] = occRow[i] - 16;
 800180c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001816:	443b      	add	r3, r7
 8001818:	f853 3c84 	ldr.w	r3, [r3, #-132]
 800181c:	f1a3 0210 	sub.w	r2, r3, #16
 8001820:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800182a:	443b      	add	r3, r7
 800182c:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 24; i++)
 8001830:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001834:	3301      	adds	r3, #1
 8001836:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800183a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800183e:	2b17      	cmp	r3, #23
 8001840:	ddda      	ble.n	80017f8 <ExtractOffsetParameters+0x15c>
        }
    }
    
    for(int i = 0; i < 8; i++)
 8001842:	2300      	movs	r3, #0
 8001844:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001848:	e062      	b.n	8001910 <ExtractOffsetParameters+0x274>
    {
        p = i * 4;
 800184a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        occColumn[p + 0] = (eeData[24 + i] & 0x000F);
 8001854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001858:	3318      	adds	r3, #24
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001860:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001864:	6812      	ldr	r2, [r2, #0]
 8001866:	4413      	add	r3, r2
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	f003 010f 	and.w	r1, r3, #15
 800186e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001872:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001876:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800187a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 1] = (eeData[24 + i] & 0x00F0) >> 4;
 800187e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001882:	3318      	adds	r3, #24
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800188a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	4413      	add	r3, r2
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	111b      	asrs	r3, r3, #4
 8001896:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800189a:	3201      	adds	r2, #1
 800189c:	f003 010f 	and.w	r1, r3, #15
 80018a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80018a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 2] = (eeData[24 + i] & 0x0F00) >> 8;
 80018ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80018b0:	3318      	adds	r3, #24
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80018b8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80018bc:	6812      	ldr	r2, [r2, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	121b      	asrs	r3, r3, #8
 80018c4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80018c8:	3202      	adds	r2, #2
 80018ca:	f003 010f 	and.w	r1, r3, #15
 80018ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80018d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 3] = (eeData[24 + i] & 0xF000) >> 12;
 80018da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80018de:	3318      	adds	r3, #24
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80018e6:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	4413      	add	r3, r2
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	0b1b      	lsrs	r3, r3, #12
 80018f2:	b299      	uxth	r1, r3
 80018f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80018f8:	1cda      	adds	r2, r3, #3
 80018fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 8001906:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800190a:	3301      	adds	r3, #1
 800190c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001914:	2b07      	cmp	r3, #7
 8001916:	dd98      	ble.n	800184a <ExtractOffsetParameters+0x1ae>
    }
    
    for(int i = 0; i < 32; i ++)
 8001918:	2300      	movs	r3, #0
 800191a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800191e:	e020      	b.n	8001962 <ExtractOffsetParameters+0x2c6>
    {
        if (occColumn[i] > 7)
 8001920:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001924:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001928:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800192c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001930:	2b07      	cmp	r3, #7
 8001932:	dd11      	ble.n	8001958 <ExtractOffsetParameters+0x2bc>
        {
            occColumn[i] = occColumn[i] - 16;
 8001934:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001938:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800193c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001944:	f1a3 0110 	sub.w	r1, r3, #16
 8001948:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800194c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001950:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 32; i ++)
 8001958:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800195c:	3301      	adds	r3, #1
 800195e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001962:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001966:	2b1f      	cmp	r3, #31
 8001968:	ddda      	ble.n	8001920 <ExtractOffsetParameters+0x284>
        }
    }

    for(int i = 0; i < 24; i++)
 800196a:	2300      	movs	r3, #0
 800196c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001970:	e0c0      	b.n	8001af4 <ExtractOffsetParameters+0x458>
    {
        for(int j = 0; j < 32; j ++)
 8001972:	2300      	movs	r3, #0
 8001974:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001978:	e0b2      	b.n	8001ae0 <ExtractOffsetParameters+0x444>
        {
            p = 32 * i +j;
 800197a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800197e:	015b      	lsls	r3, r3, #5
 8001980:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8001984:	4413      	add	r3, r2
 8001986:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
            mlx90640->offset[p] = (eeData[64 + p] & 0xFC00) >> 10;
 800198a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800198e:	3340      	adds	r3, #64	; 0x40
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001996:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	4413      	add	r3, r2
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	0a9b      	lsrs	r3, r3, #10
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	b219      	sxth	r1, r3
 80019a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019aa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019b4:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	4413      	add	r3, r2
 80019bc:	460a      	mov	r2, r1
 80019be:	809a      	strh	r2, [r3, #4]
            if (mlx90640->offset[p] > 31)
 80019c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019ce:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	4413      	add	r3, r2
 80019d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019da:	2b1f      	cmp	r3, #31
 80019dc:	dd1d      	ble.n	8001a1a <ExtractOffsetParameters+0x37e>
            {
                mlx90640->offset[p] = mlx90640->offset[p] - 64;
 80019de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019e2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019ec:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4413      	add	r3, r2
 80019f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	3b40      	subs	r3, #64	; 0x40
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	b219      	sxth	r1, r3
 8001a00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a04:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a0e:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	4413      	add	r3, r2
 8001a16:	460a      	mov	r2, r1
 8001a18:	809a      	strh	r2, [r3, #4]
            }
            mlx90640->offset[p] = mlx90640->offset[p]*(1 << occRemScale);
 8001a1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a1e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a28:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a34:	461a      	mov	r2, r3
 8001a36:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	b219      	sxth	r1, r3
 8001a40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a44:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a4e:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4413      	add	r3, r2
 8001a56:	460a      	mov	r2, r1
 8001a58:	809a      	strh	r2, [r3, #4]
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
 8001a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001a64:	443b      	add	r3, r7
 8001a66:	f853 2c84 	ldr.w	r2, [r3, #-132]
 8001a6a:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8001a78:	4413      	add	r3, r2
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a84:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8001a88:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001a8c:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8001a90:	fa01 f303 	lsl.w	r3, r1, r3
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a9e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001aa2:	6819      	ldr	r1, [r3, #0]
 8001aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001aa8:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	440b      	add	r3, r1
 8001ab0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	b219      	sxth	r1, r3
 8001abc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001ac0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001aca:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	4413      	add	r3, r2
 8001ad2:	460a      	mov	r2, r1
 8001ad4:	809a      	strh	r2, [r3, #4]
        for(int j = 0; j < 32; j ++)
 8001ad6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001ada:	3301      	adds	r3, #1
 8001adc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001ae0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001ae4:	2b1f      	cmp	r3, #31
 8001ae6:	f77f af48 	ble.w	800197a <ExtractOffsetParameters+0x2de>
    for(int i = 0; i < 24; i++)
 8001aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001aee:	3301      	adds	r3, #1
 8001af0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001af4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001af8:	2b17      	cmp	r3, #23
 8001afa:	f77f af3a 	ble.w	8001972 <ExtractOffsetParameters+0x2d6>
        }
    }
}
 8001afe:	bf00      	nop
 8001b00:	bf00      	nop
 8001b02:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <ExtractKtaPixelParameters>:

//------------------------------------------------------------------------------

void ExtractKtaPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	ed2d 8b02 	vpush	{d8}
 8001b16:	f6ad 4d38 	subw	sp, sp, #3128	; 0xc38
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001b20:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8001b24:	6018      	str	r0, [r3, #0]
 8001b26:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001b2a:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8001b2e:	6019      	str	r1, [r3, #0]
    int p = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
    uint8_t ktaScale2;
    uint8_t split;
    float ktaTemp[768];
    float temp;
    
    KtaRoCo = (eeData[54] & 0xFF00) >> 8;
 8001b36:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001b3a:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	336c      	adds	r3, #108	; 0x6c
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	0a1b      	lsrs	r3, r3, #8
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	f887 3c1b 	strb.w	r3, [r7, #3099]	; 0xc1b
    if (KtaRoCo > 127)
    {
        KtaRoCo = KtaRoCo - 256;
    }
    KtaRC[0] = KtaRoCo;
 8001b4c:	f897 3c1b 	ldrb.w	r3, [r7, #3099]	; 0xc1b
 8001b50:	f887 3c10 	strb.w	r3, [r7, #3088]	; 0xc10
    
    KtaReCo = (eeData[54] & 0x00FF);
 8001b54:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001b58:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	336c      	adds	r3, #108	; 0x6c
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	f887 3c1a 	strb.w	r3, [r7, #3098]	; 0xc1a
    if (KtaReCo > 127)
    {
        KtaReCo = KtaReCo - 256;
    }
    KtaRC[2] = KtaReCo;
 8001b66:	f897 3c1a 	ldrb.w	r3, [r7, #3098]	; 0xc1a
 8001b6a:	f887 3c12 	strb.w	r3, [r7, #3090]	; 0xc12
      
    KtaRoCe = (eeData[55] & 0xFF00) >> 8;
 8001b6e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001b72:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	336e      	adds	r3, #110	; 0x6e
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	f887 3c19 	strb.w	r3, [r7, #3097]	; 0xc19
    if (KtaRoCe > 127)
    {
        KtaRoCe = KtaRoCe - 256;
    }
    KtaRC[1] = KtaRoCe;
 8001b84:	f897 3c19 	ldrb.w	r3, [r7, #3097]	; 0xc19
 8001b88:	f887 3c11 	strb.w	r3, [r7, #3089]	; 0xc11
      
    KtaReCe = (eeData[55] & 0x00FF);
 8001b8c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001b90:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	336e      	adds	r3, #110	; 0x6e
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	f887 3c18 	strb.w	r3, [r7, #3096]	; 0xc18
    if (KtaReCe > 127)
    {
        KtaReCe = KtaReCe - 256;
    }
    KtaRC[3] = KtaReCe;
 8001b9e:	f897 3c18 	ldrb.w	r3, [r7, #3096]	; 0xc18
 8001ba2:	f887 3c13 	strb.w	r3, [r7, #3091]	; 0xc13
  
    ktaScale1 = ((eeData[56] & 0x00F0) >> 4) + 8;
 8001ba6:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001baa:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	3370      	adds	r3, #112	; 0x70
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	111b      	asrs	r3, r3, #4
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	3308      	adds	r3, #8
 8001bc0:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    ktaScale2 = (eeData[56] & 0x000F);
 8001bc4:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001bc8:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	3370      	adds	r3, #112	; 0x70
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	f003 030f 	and.w	r3, r3, #15
 8001bd8:	f887 3c17 	strb.w	r3, [r7, #3095]	; 0xc17

    for(int i = 0; i < 24; i++)
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 8001be2:	e0e6      	b.n	8001db2 <ExtractKtaPixelParameters+0x2a2>
    {
        for(int j = 0; j < 32; j ++)
 8001be4:	2300      	movs	r3, #0
 8001be6:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8001bea:	e0d8      	b.n	8001d9e <ExtractKtaPixelParameters+0x28e>
        {
            p = 32 * i +j;
 8001bec:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 8001bf0:	015b      	lsls	r3, r3, #5
 8001bf2:	f8d7 2c28 	ldr.w	r2, [r7, #3112]	; 0xc28
 8001bf6:	4413      	add	r3, r2
 8001bf8:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
            split = 2*(p/32 - (p/64)*2) + p%2;
 8001bfc:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	da00      	bge.n	8001c06 <ExtractKtaPixelParameters+0xf6>
 8001c04:	331f      	adds	r3, #31
 8001c06:	115b      	asrs	r3, r3, #5
 8001c08:	461a      	mov	r2, r3
 8001c0a:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	da00      	bge.n	8001c14 <ExtractKtaPixelParameters+0x104>
 8001c12:	333f      	adds	r3, #63	; 0x3f
 8001c14:	119b      	asrs	r3, r3, #6
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	bfb8      	it	lt
 8001c2c:	425b      	neglt	r3, r3
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	4413      	add	r3, r2
 8001c32:	f887 3c16 	strb.w	r3, [r7, #3094]	; 0xc16
            ktaTemp[p] = (eeData[64 + p] & 0x000E) >> 1;
 8001c36:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001c3a:	3340      	adds	r3, #64	; 0x40
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	f607 4238 	addw	r2, r7, #3128	; 0xc38
 8001c42:	f6a2 422c 	subw	r2, r2, #3116	; 0xc2c
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	4413      	add	r3, r2
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	105b      	asrs	r3, r3, #1
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	ee07 3a90 	vmov	s15, r3
 8001c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c5a:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001c5e:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001c62:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	edc3 7a00 	vstr	s15, [r3]
            if (ktaTemp[p] > 3)
 8001c6e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001c72:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001c76:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	edd3 7a00 	vldr	s15, [r3]
 8001c82:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001c86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8e:	dd17      	ble.n	8001cc0 <ExtractKtaPixelParameters+0x1b0>
            {
                ktaTemp[p] = ktaTemp[p] - 8;
 8001c90:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001c94:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001c98:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	edd3 7a00 	vldr	s15, [r3]
 8001ca4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001ca8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001cac:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001cb0:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001cb4:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	edc3 7a00 	vstr	s15, [r3]
            }
            ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
 8001cc0:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001cc4:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001cc8:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	ed93 7a00 	vldr	s14, [r3]
 8001cd4:	f897 3c17 	ldrb.w	r3, [r7, #3095]	; 0xc17
 8001cd8:	2201      	movs	r2, #1
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	ee07 3a90 	vmov	s15, r3
 8001ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cea:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001cee:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001cf2:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = KtaRC[split] + ktaTemp[p];
 8001cfe:	f897 3c16 	ldrb.w	r3, [r7, #3094]	; 0xc16
 8001d02:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8001d06:	f107 0208 	add.w	r2, r7, #8
 8001d0a:	4413      	add	r3, r2
 8001d0c:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 8001d10:	ee07 3a90 	vmov	s15, r3
 8001d14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d18:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001d1c:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001d20:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	edd3 7a00 	vldr	s15, [r3]
 8001d2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d30:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001d34:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001d38:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = ktaTemp[p] / pow(2,(double)ktaScale1);
 8001d44:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001d48:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001d4c:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	edd3 7a00 	vldr	s15, [r3]
 8001d58:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001d5c:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8001d60:	ee07 3a90 	vmov	s15, r3
 8001d64:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001d68:	eeb0 1b47 	vmov.f64	d1, d7
 8001d6c:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001d70:	f014 fa52 	bl	8016218 <pow>
 8001d74:	eeb0 6b40 	vmov.f64	d6, d0
 8001d78:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001d7c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d80:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001d84:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001d88:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < 32; j ++)
 8001d94:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8001d98:	3301      	adds	r3, #1
 8001d9a:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8001d9e:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8001da2:	2b1f      	cmp	r3, #31
 8001da4:	f77f af22 	ble.w	8001bec <ExtractKtaPixelParameters+0xdc>
    for(int i = 0; i < 24; i++)
 8001da8:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 8001dac:	3301      	adds	r3, #1
 8001dae:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 8001db2:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 8001db6:	2b17      	cmp	r3, #23
 8001db8:	f77f af14 	ble.w	8001be4 <ExtractKtaPixelParameters+0xd4>
            //ktaTemp[p] = ktaTemp[p] * mlx90640->offset[p];
        }
    }
    
    temp = fabs(ktaTemp[0]);
 8001dbc:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001dc0:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8001dc4:	edd3 7a00 	vldr	s15, [r3]
 8001dc8:	eef0 7ae7 	vabs.f32	s15, s15
 8001dcc:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8001dd0:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8001dda:	e029      	b.n	8001e30 <ExtractKtaPixelParameters+0x320>
    {
        if (fabs(ktaTemp[i]) > temp)
 8001ddc:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001de0:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001de4:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	edd3 7a00 	vldr	s15, [r3]
 8001df0:	eef0 7ae7 	vabs.f32	s15, s15
 8001df4:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8001df8:	ed93 7a00 	vldr	s14, [r3]
 8001dfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e04:	d50f      	bpl.n	8001e26 <ExtractKtaPixelParameters+0x316>
        {
            temp = fabs(ktaTemp[i]);
 8001e06:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001e0a:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001e0e:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	edd3 7a00 	vldr	s15, [r3]
 8001e1a:	eef0 7ae7 	vabs.f32	s15, s15
 8001e1e:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8001e22:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 8001e26:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8001e30:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8001e34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e38:	dbd0      	blt.n	8001ddc <ExtractKtaPixelParameters+0x2cc>
        }
    }
    
    ktaScale1 = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    while(temp < 64)
 8001e40:	e00e      	b.n	8001e60 <ExtractKtaPixelParameters+0x350>
    {
        temp = temp*2;
 8001e42:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8001e46:	edd3 7a00 	vldr	s15, [r3]
 8001e4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e4e:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8001e52:	edc3 7a00 	vstr	s15, [r3]
        ktaScale1 = ktaScale1 + 1;
 8001e56:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    while(temp < 64)
 8001e60:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8001e64:	edd3 7a00 	vldr	s15, [r3]
 8001e68:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001f74 <ExtractKtaPixelParameters+0x464>
 8001e6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e74:	d4e5      	bmi.n	8001e42 <ExtractKtaPixelParameters+0x332>
    }    
     
    for(int i = 0; i < 768; i++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8001e7c:	e064      	b.n	8001f48 <ExtractKtaPixelParameters+0x438>
    {
        temp = ktaTemp[i] * pow(2,(double)ktaScale1);
 8001e7e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001e82:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001e86:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	edd3 7a00 	vldr	s15, [r3]
 8001e92:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001e96:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001ea2:	eeb0 1b47 	vmov.f64	d1, d7
 8001ea6:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001eaa:	f014 f9b5 	bl	8016218 <pow>
 8001eae:	eeb0 7b40 	vmov.f64	d7, d0
 8001eb2:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001eb6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001eba:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8001ebe:	edc3 7a00 	vstr	s15, [r3]
        if (temp < 0)
 8001ec2:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8001ec6:	edd3 7a00 	vldr	s15, [r3]
 8001eca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed2:	d51a      	bpl.n	8001f0a <ExtractKtaPixelParameters+0x3fa>
        {
            mlx90640->kta[i] = (temp - 0.5f);
 8001ed4:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8001ed8:	edd3 7a00 	vldr	s15, [r3]
 8001edc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ee0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ee8:	edc7 7a01 	vstr	s15, [r7, #4]
 8001eec:	793b      	ldrb	r3, [r7, #4]
 8001eee:	b259      	sxtb	r1, r3
 8001ef0:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001ef4:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8001efe:	4413      	add	r3, r2
 8001f00:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8001f04:	460a      	mov	r2, r1
 8001f06:	701a      	strb	r2, [r3, #0]
 8001f08:	e019      	b.n	8001f3e <ExtractKtaPixelParameters+0x42e>
        }
        else
        {
            mlx90640->kta[i] = (temp + 0.5f);
 8001f0a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8001f0e:	edd3 7a00 	vldr	s15, [r3]
 8001f12:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001f16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f1e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001f22:	793b      	ldrb	r3, [r7, #4]
 8001f24:	b259      	sxtb	r1, r3
 8001f26:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001f2a:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8001f34:	4413      	add	r3, r2
 8001f36:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8001f3a:	460a      	mov	r2, r1
 8001f3c:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 768; i++)
 8001f3e:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8001f42:	3301      	adds	r3, #1
 8001f44:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8001f48:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8001f4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f50:	db95      	blt.n	8001e7e <ExtractKtaPixelParameters+0x36e>
        }        
        
    } 
    
    mlx90640->ktaScale = ktaScale1;           
 8001f52:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001f56:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f897 2c37 	ldrb.w	r2, [r7, #3127]	; 0xc37
 8001f60:	f883 2f4c 	strb.w	r2, [r3, #3916]	; 0xf4c
}
 8001f64:	bf00      	nop
 8001f66:	f607 4738 	addw	r7, r7, #3128	; 0xc38
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	ecbd 8b02 	vpop	{d8}
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	42800000 	.word	0x42800000

08001f78 <ExtractKvPixelParameters>:


//------------------------------------------------------------------------------

void ExtractKvPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	ed2d 8b02 	vpush	{d8}
 8001f7e:	f6ad 4d38 	subw	sp, sp, #3128	; 0xc38
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001f88:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8001f8c:	6018      	str	r0, [r3, #0]
 8001f8e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001f92:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8001f96:	6019      	str	r1, [r3, #0]
    int p = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
    uint8_t kvScale;
    uint8_t split;
    float kvTemp[768];
    float temp;

    KvRoCo = (eeData[52] & 0xF000) >> 12;
 8001f9e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001fa2:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	3368      	adds	r3, #104	; 0x68
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	0b1b      	lsrs	r3, r3, #12
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    if (KvRoCo > 7)
 8001fb4:	f997 3c37 	ldrsb.w	r3, [r7, #3127]	; 0xc37
 8001fb8:	2b07      	cmp	r3, #7
 8001fba:	dd05      	ble.n	8001fc8 <ExtractKvPixelParameters+0x50>
    {
        KvRoCo = KvRoCo - 16;
 8001fbc:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8001fc0:	3b10      	subs	r3, #16
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    }
    KvT[0] = KvRoCo;
 8001fc8:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8001fcc:	f887 3c10 	strb.w	r3, [r7, #3088]	; 0xc10
    
    KvReCo = (eeData[52] & 0x0F00) >> 8;
 8001fd0:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001fd4:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	3368      	adds	r3, #104	; 0x68
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	121b      	asrs	r3, r3, #8
 8001fe0:	b25b      	sxtb	r3, r3
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	f887 3c35 	strb.w	r3, [r7, #3125]	; 0xc35
    if (KvReCo > 7)
 8001fea:	f997 3c35 	ldrsb.w	r3, [r7, #3125]	; 0xc35
 8001fee:	2b07      	cmp	r3, #7
 8001ff0:	dd05      	ble.n	8001ffe <ExtractKvPixelParameters+0x86>
    {
        KvReCo = KvReCo - 16;
 8001ff2:	f897 3c35 	ldrb.w	r3, [r7, #3125]	; 0xc35
 8001ff6:	3b10      	subs	r3, #16
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	f887 3c35 	strb.w	r3, [r7, #3125]	; 0xc35
    }
    KvT[2] = KvReCo;
 8001ffe:	f897 3c35 	ldrb.w	r3, [r7, #3125]	; 0xc35
 8002002:	f887 3c12 	strb.w	r3, [r7, #3090]	; 0xc12
      
    KvRoCe = (eeData[52] & 0x00F0) >> 4;
 8002006:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800200a:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	3368      	adds	r3, #104	; 0x68
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	111b      	asrs	r3, r3, #4
 8002016:	b25b      	sxtb	r3, r3
 8002018:	f003 030f 	and.w	r3, r3, #15
 800201c:	f887 3c36 	strb.w	r3, [r7, #3126]	; 0xc36
    if (KvRoCe > 7)
 8002020:	f997 3c36 	ldrsb.w	r3, [r7, #3126]	; 0xc36
 8002024:	2b07      	cmp	r3, #7
 8002026:	dd05      	ble.n	8002034 <ExtractKvPixelParameters+0xbc>
    {
        KvRoCe = KvRoCe - 16;
 8002028:	f897 3c36 	ldrb.w	r3, [r7, #3126]	; 0xc36
 800202c:	3b10      	subs	r3, #16
 800202e:	b2db      	uxtb	r3, r3
 8002030:	f887 3c36 	strb.w	r3, [r7, #3126]	; 0xc36
    }
    KvT[1] = KvRoCe;
 8002034:	f897 3c36 	ldrb.w	r3, [r7, #3126]	; 0xc36
 8002038:	f887 3c11 	strb.w	r3, [r7, #3089]	; 0xc11
      
    KvReCe = (eeData[52] & 0x000F);
 800203c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002040:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	3368      	adds	r3, #104	; 0x68
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	b25b      	sxtb	r3, r3
 800204c:	f003 030f 	and.w	r3, r3, #15
 8002050:	f887 3c34 	strb.w	r3, [r7, #3124]	; 0xc34
    if (KvReCe > 7)
 8002054:	f997 3c34 	ldrsb.w	r3, [r7, #3124]	; 0xc34
 8002058:	2b07      	cmp	r3, #7
 800205a:	dd05      	ble.n	8002068 <ExtractKvPixelParameters+0xf0>
    {
        KvReCe = KvReCe - 16;
 800205c:	f897 3c34 	ldrb.w	r3, [r7, #3124]	; 0xc34
 8002060:	3b10      	subs	r3, #16
 8002062:	b2db      	uxtb	r3, r3
 8002064:	f887 3c34 	strb.w	r3, [r7, #3124]	; 0xc34
    }
    KvT[3] = KvReCe;
 8002068:	f897 3c34 	ldrb.w	r3, [r7, #3124]	; 0xc34
 800206c:	f887 3c13 	strb.w	r3, [r7, #3091]	; 0xc13
  
    kvScale = (eeData[56] & 0x0F00) >> 8;
 8002070:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002074:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	3370      	adds	r3, #112	; 0x70
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	121b      	asrs	r3, r3, #8
 8002080:	b2db      	uxtb	r3, r3
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33


    for(int i = 0; i < 24; i++)
 800208a:	2300      	movs	r3, #0
 800208c:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8002090:	e075      	b.n	800217e <ExtractKvPixelParameters+0x206>
    {
        for(int j = 0; j < 32; j ++)
 8002092:	2300      	movs	r3, #0
 8002094:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8002098:	e068      	b.n	800216c <ExtractKvPixelParameters+0x1f4>
        {
            p = 32 * i +j;
 800209a:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 800209e:	015b      	lsls	r3, r3, #5
 80020a0:	f8d7 2c24 	ldr.w	r2, [r7, #3108]	; 0xc24
 80020a4:	4413      	add	r3, r2
 80020a6:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
            split = 2*(p/32 - (p/64)*2) + p%2;
 80020aa:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	da00      	bge.n	80020b4 <ExtractKvPixelParameters+0x13c>
 80020b2:	331f      	adds	r3, #31
 80020b4:	115b      	asrs	r3, r3, #5
 80020b6:	461a      	mov	r2, r3
 80020b8:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 80020bc:	2b00      	cmp	r3, #0
 80020be:	da00      	bge.n	80020c2 <ExtractKvPixelParameters+0x14a>
 80020c0:	333f      	adds	r3, #63	; 0x3f
 80020c2:	119b      	asrs	r3, r3, #6
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	bfb8      	it	lt
 80020da:	425b      	neglt	r3, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	4413      	add	r3, r2
 80020e0:	f887 3c17 	strb.w	r3, [r7, #3095]	; 0xc17
            kvTemp[p] = KvT[split];
 80020e4:	f897 3c17 	ldrb.w	r3, [r7, #3095]	; 0xc17
 80020e8:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 80020ec:	f107 0208 	add.w	r2, r7, #8
 80020f0:	4413      	add	r3, r2
 80020f2:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 80020f6:	ee07 3a90 	vmov	s15, r3
 80020fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020fe:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002102:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002106:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	edc3 7a00 	vstr	s15, [r3]
            kvTemp[p] = kvTemp[p] / pow(2,(double)kvScale);
 8002112:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002116:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800211a:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	edd3 7a00 	vldr	s15, [r3]
 8002126:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800212a:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 800212e:	ee07 3a90 	vmov	s15, r3
 8002132:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002136:	eeb0 1b47 	vmov.f64	d1, d7
 800213a:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800213e:	f014 f86b 	bl	8016218 <pow>
 8002142:	eeb0 6b40 	vmov.f64	d6, d0
 8002146:	ee88 7b06 	vdiv.f64	d7, d8, d6
 800214a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800214e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002152:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002156:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < 32; j ++)
 8002162:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8002166:	3301      	adds	r3, #1
 8002168:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 800216c:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8002170:	2b1f      	cmp	r3, #31
 8002172:	dd92      	ble.n	800209a <ExtractKvPixelParameters+0x122>
    for(int i = 0; i < 24; i++)
 8002174:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8002178:	3301      	adds	r3, #1
 800217a:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 800217e:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8002182:	2b17      	cmp	r3, #23
 8002184:	dd85      	ble.n	8002092 <ExtractKvPixelParameters+0x11a>
            //kvTemp[p] = kvTemp[p] * mlx90640->offset[p];
        }
    }
    
    temp = fabs(kvTemp[0]);
 8002186:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800218a:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 800218e:	edd3 7a00 	vldr	s15, [r3]
 8002192:	eef0 7ae7 	vabs.f32	s15, s15
 8002196:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 800219a:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 800219e:	2301      	movs	r3, #1
 80021a0:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 80021a4:	e029      	b.n	80021fa <ExtractKvPixelParameters+0x282>
    {
        if (fabs(kvTemp[i]) > temp)
 80021a6:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80021aa:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80021ae:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	edd3 7a00 	vldr	s15, [r3]
 80021ba:	eef0 7ae7 	vabs.f32	s15, s15
 80021be:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 80021c2:	ed93 7a00 	vldr	s14, [r3]
 80021c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ce:	d50f      	bpl.n	80021f0 <ExtractKvPixelParameters+0x278>
        {
            temp = fabs(kvTemp[i]);
 80021d0:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80021d4:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80021d8:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	edd3 7a00 	vldr	s15, [r3]
 80021e4:	eef0 7ae7 	vabs.f32	s15, s15
 80021e8:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 80021ec:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 80021f0:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80021f4:	3301      	adds	r3, #1
 80021f6:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 80021fa:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80021fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002202:	dbd0      	blt.n	80021a6 <ExtractKvPixelParameters+0x22e>
        }
    }
    
    kvScale = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33
    while(temp < 64)
 800220a:	e00e      	b.n	800222a <ExtractKvPixelParameters+0x2b2>
    {
        temp = temp*2;
 800220c:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002210:	edd3 7a00 	vldr	s15, [r3]
 8002214:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002218:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 800221c:	edc3 7a00 	vstr	s15, [r3]
        kvScale = kvScale + 1;
 8002220:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 8002224:	3301      	adds	r3, #1
 8002226:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33
    while(temp < 64)
 800222a:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 800222e:	edd3 7a00 	vldr	s15, [r3]
 8002232:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002344 <ExtractKvPixelParameters+0x3cc>
 8002236:	eef4 7ac7 	vcmpe.f32	s15, s14
 800223a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223e:	d4e5      	bmi.n	800220c <ExtractKvPixelParameters+0x294>
    }    
     
    for(int i = 0; i < 768; i++)
 8002240:	2300      	movs	r3, #0
 8002242:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8002246:	e064      	b.n	8002312 <ExtractKvPixelParameters+0x39a>
    {
        temp = kvTemp[i] * pow(2,(double)kvScale);
 8002248:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800224c:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002250:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	edd3 7a00 	vldr	s15, [r3]
 800225c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002260:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 8002264:	ee07 3a90 	vmov	s15, r3
 8002268:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800226c:	eeb0 1b47 	vmov.f64	d1, d7
 8002270:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002274:	f013 ffd0 	bl	8016218 <pow>
 8002278:	eeb0 7b40 	vmov.f64	d7, d0
 800227c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002280:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002284:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002288:	edc3 7a00 	vstr	s15, [r3]
        if (temp < 0)
 800228c:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002290:	edd3 7a00 	vldr	s15, [r3]
 8002294:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800229c:	d51a      	bpl.n	80022d4 <ExtractKvPixelParameters+0x35c>
        {
            mlx90640->kv[i] = (temp - 0.5f);
 800229e:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 80022a2:	edd3 7a00 	vldr	s15, [r3]
 80022a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022b2:	edc7 7a01 	vstr	s15, [r7, #4]
 80022b6:	793b      	ldrb	r3, [r7, #4]
 80022b8:	b259      	sxtb	r1, r3
 80022ba:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80022be:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80022c8:	4413      	add	r3, r2
 80022ca:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 80022ce:	460a      	mov	r2, r1
 80022d0:	701a      	strb	r2, [r3, #0]
 80022d2:	e019      	b.n	8002308 <ExtractKvPixelParameters+0x390>
        }
        else
        {
            mlx90640->kv[i] = (temp + 0.5f);
 80022d4:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 80022d8:	edd3 7a00 	vldr	s15, [r3]
 80022dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022e8:	edc7 7a01 	vstr	s15, [r7, #4]
 80022ec:	793b      	ldrb	r3, [r7, #4]
 80022ee:	b259      	sxtb	r1, r3
 80022f0:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80022f4:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80022fe:	4413      	add	r3, r2
 8002300:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 8002304:	460a      	mov	r2, r1
 8002306:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 768; i++)
 8002308:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800230c:	3301      	adds	r3, #1
 800230e:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8002312:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002316:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800231a:	db95      	blt.n	8002248 <ExtractKvPixelParameters+0x2d0>
        }        
        
    } 
    
    mlx90640->kvScale = kvScale;        
 800231c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002320:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800232a:	461a      	mov	r2, r3
 800232c:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 8002330:	f882 324d 	strb.w	r3, [r2, #589]	; 0x24d
}
 8002334:	bf00      	nop
 8002336:	f607 4738 	addw	r7, r7, #3128	; 0xc38
 800233a:	46bd      	mov	sp, r7
 800233c:	ecbd 8b02 	vpop	{d8}
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	42800000 	.word	0x42800000

08002348 <ExtractCPParameters>:

//------------------------------------------------------------------------------

void ExtractCPParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	ed2d 8b02 	vpush	{d8}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
    float cpKta;
    uint8_t alphaScale;
    uint8_t ktaScale1;
    uint8_t kvScale;

    alphaScale = ((eeData[32] & 0xF000) >> 12) + 27;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3340      	adds	r3, #64	; 0x40
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	0b1b      	lsrs	r3, r3, #12
 800235e:	b29b      	uxth	r3, r3
 8002360:	b2db      	uxtb	r3, r3
 8002362:	331b      	adds	r3, #27
 8002364:	75fb      	strb	r3, [r7, #23]
    
    offsetSP[0] = (eeData[58] & 0x03FF);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3374      	adds	r3, #116	; 0x74
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	b21b      	sxth	r3, r3
 800236e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002372:	b21b      	sxth	r3, r3
 8002374:	813b      	strh	r3, [r7, #8]
    if (offsetSP[0] > 511)
 8002376:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800237a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800237e:	db07      	blt.n	8002390 <ExtractCPParameters+0x48>
    {
        offsetSP[0] = offsetSP[0] - 1024;
 8002380:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002384:	b29b      	uxth	r3, r3
 8002386:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800238a:	b29b      	uxth	r3, r3
 800238c:	b21b      	sxth	r3, r3
 800238e:	813b      	strh	r3, [r7, #8]
    }
    
    offsetSP[1] = (eeData[58] & 0xFC00) >> 10;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3374      	adds	r3, #116	; 0x74
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	0a9b      	lsrs	r3, r3, #10
 8002398:	b29b      	uxth	r3, r3
 800239a:	b21b      	sxth	r3, r3
 800239c:	817b      	strh	r3, [r7, #10]
    if (offsetSP[1] > 31)
 800239e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80023a2:	2b1f      	cmp	r3, #31
 80023a4:	dd06      	ble.n	80023b4 <ExtractCPParameters+0x6c>
    {
        offsetSP[1] = offsetSP[1] - 64;
 80023a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3b40      	subs	r3, #64	; 0x40
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	b21b      	sxth	r3, r3
 80023b2:	817b      	strh	r3, [r7, #10]
    }
    offsetSP[1] = offsetSP[1] + offsetSP[0]; 
 80023b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	4413      	add	r3, r2
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	b21b      	sxth	r3, r3
 80023c6:	817b      	strh	r3, [r7, #10]
    
    alphaSP[0] = (eeData[57] & 0x03FF);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3372      	adds	r3, #114	; 0x72
 80023cc:	881b      	ldrh	r3, [r3, #0]
 80023ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023d2:	ee07 3a90 	vmov	s15, r3
 80023d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023da:	edc7 7a03 	vstr	s15, [r7, #12]
    if (alphaSP[0] > 511)
 80023de:	edd7 7a03 	vldr	s15, [r7, #12]
 80023e2:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80025b8 <ExtractCPParameters+0x270>
 80023e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ee:	dd07      	ble.n	8002400 <ExtractCPParameters+0xb8>
    {
        alphaSP[0] = alphaSP[0] - 1024;
 80023f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80023f4:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80025bc <ExtractCPParameters+0x274>
 80023f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023fc:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    alphaSP[0] = alphaSP[0] /  pow(2,(double)alphaScale);
 8002400:	edd7 7a03 	vldr	s15, [r7, #12]
 8002404:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002408:	7dfb      	ldrb	r3, [r7, #23]
 800240a:	ee07 3a90 	vmov	s15, r3
 800240e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002412:	eeb0 1b47 	vmov.f64	d1, d7
 8002416:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800241a:	f013 fefd 	bl	8016218 <pow>
 800241e:	eeb0 6b40 	vmov.f64	d6, d0
 8002422:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002426:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800242a:	edc7 7a03 	vstr	s15, [r7, #12]
    
    alphaSP[1] = (eeData[57] & 0xFC00) >> 10;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3372      	adds	r3, #114	; 0x72
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	0a9b      	lsrs	r3, r3, #10
 8002436:	b29b      	uxth	r3, r3
 8002438:	ee07 3a90 	vmov	s15, r3
 800243c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002440:	edc7 7a04 	vstr	s15, [r7, #16]
    if (alphaSP[1] > 31)
 8002444:	edd7 7a04 	vldr	s15, [r7, #16]
 8002448:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 800244c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002454:	dd07      	ble.n	8002466 <ExtractCPParameters+0x11e>
    {
        alphaSP[1] = alphaSP[1] - 64;
 8002456:	edd7 7a04 	vldr	s15, [r7, #16]
 800245a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80025c0 <ExtractCPParameters+0x278>
 800245e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002462:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    alphaSP[1] = (1 + alphaSP[1]/128) * alphaSP[0];
 8002466:	ed97 7a04 	vldr	s14, [r7, #16]
 800246a:	eddf 6a56 	vldr	s13, [pc, #344]	; 80025c4 <ExtractCPParameters+0x27c>
 800246e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002472:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002476:	ee37 7a87 	vadd.f32	s14, s15, s14
 800247a:	edd7 7a03 	vldr	s15, [r7, #12]
 800247e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002482:	edc7 7a04 	vstr	s15, [r7, #16]
    
    cpKta = (eeData[59] & 0x00FF);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3376      	adds	r3, #118	; 0x76
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	ee07 3a90 	vmov	s15, r3
 8002492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002496:	edc7 7a06 	vstr	s15, [r7, #24]
    if (cpKta > 127)
 800249a:	edd7 7a06 	vldr	s15, [r7, #24]
 800249e:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80025c8 <ExtractCPParameters+0x280>
 80024a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024aa:	dd07      	ble.n	80024bc <ExtractCPParameters+0x174>
    {
        cpKta = cpKta - 256;
 80024ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80024b0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80025cc <ExtractCPParameters+0x284>
 80024b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024b8:	edc7 7a06 	vstr	s15, [r7, #24]
    }
    ktaScale1 = ((eeData[56] & 0x00F0) >> 4) + 8;    
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3370      	adds	r3, #112	; 0x70
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	111b      	asrs	r3, r3, #4
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	3308      	adds	r3, #8
 80024ce:	75bb      	strb	r3, [r7, #22]
    mlx90640->cpKta = cpKta / pow(2,(double)ktaScale1);
 80024d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80024d4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80024d8:	7dbb      	ldrb	r3, [r7, #22]
 80024da:	ee07 3a90 	vmov	s15, r3
 80024de:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80024e2:	eeb0 1b47 	vmov.f64	d1, d7
 80024e6:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80024ea:	f013 fe95 	bl	8016218 <pow>
 80024ee:	eeb0 6b40 	vmov.f64	d6, d0
 80024f2:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80024f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	edc3 7a08 	vstr	s15, [r3, #32]
    
    cpKv = (eeData[59] & 0xFF00) >> 8;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3376      	adds	r3, #118	; 0x76
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	0a1b      	lsrs	r3, r3, #8
 8002508:	b29b      	uxth	r3, r3
 800250a:	ee07 3a90 	vmov	s15, r3
 800250e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002512:	edc7 7a07 	vstr	s15, [r7, #28]
    if (cpKv > 127)
 8002516:	edd7 7a07 	vldr	s15, [r7, #28]
 800251a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80025c8 <ExtractCPParameters+0x280>
 800251e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002526:	dd07      	ble.n	8002538 <ExtractCPParameters+0x1f0>
    {
        cpKv = cpKv - 256;
 8002528:	edd7 7a07 	vldr	s15, [r7, #28]
 800252c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80025cc <ExtractCPParameters+0x284>
 8002530:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002534:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    kvScale = (eeData[56] & 0x0F00) >> 8;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3370      	adds	r3, #112	; 0x70
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	121b      	asrs	r3, r3, #8
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	757b      	strb	r3, [r7, #21]
    mlx90640->cpKv = cpKv / pow(2,(double)kvScale);
 8002548:	edd7 7a07 	vldr	s15, [r7, #28]
 800254c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002550:	7d7b      	ldrb	r3, [r7, #21]
 8002552:	ee07 3a90 	vmov	s15, r3
 8002556:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800255a:	eeb0 1b47 	vmov.f64	d1, d7
 800255e:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002562:	f013 fe59 	bl	8016218 <pow>
 8002566:	eeb0 6b40 	vmov.f64	d6, d0
 800256a:	ee88 7b06 	vdiv.f64	d7, d8, d6
 800256e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	edc3 7a07 	vstr	s15, [r3, #28]
       
    mlx90640->cpAlpha[0] = alphaSP[0];
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002580:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    mlx90640->cpAlpha[1] = alphaSP[1];
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800258c:	f8c2 3254 	str.w	r3, [r2, #596]	; 0x254
    mlx90640->cpOffset[0] = offsetSP[0];
 8002590:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800259a:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
    mlx90640->cpOffset[1] = offsetSP[1];  
 800259e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025a8:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
}
 80025ac:	bf00      	nop
 80025ae:	3720      	adds	r7, #32
 80025b0:	46bd      	mov	sp, r7
 80025b2:	ecbd 8b02 	vpop	{d8}
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	43ff8000 	.word	0x43ff8000
 80025bc:	44800000 	.word	0x44800000
 80025c0:	42800000 	.word	0x42800000
 80025c4:	43000000 	.word	0x43000000
 80025c8:	42fe0000 	.word	0x42fe0000
 80025cc:	43800000 	.word	0x43800000

080025d0 <ExtractCILCParameters>:

//------------------------------------------------------------------------------

void ExtractCILCParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
    float ilChessC[3];
    uint8_t calibrationModeEE;
    
    calibrationModeEE = (eeData[10] & 0x0800) >> 4;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3314      	adds	r3, #20
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	111b      	asrs	r3, r3, #4
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80025e8:	75fb      	strb	r3, [r7, #23]
    calibrationModeEE = calibrationModeEE ^ 0x80;
 80025ea:	7dfb      	ldrb	r3, [r7, #23]
 80025ec:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 80025f0:	43db      	mvns	r3, r3
 80025f2:	75fb      	strb	r3, [r7, #23]

    ilChessC[0] = (eeData[53] & 0x003F);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	336a      	adds	r3, #106	; 0x6a
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025fe:	ee07 3a90 	vmov	s15, r3
 8002602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002606:	edc7 7a02 	vstr	s15, [r7, #8]
    if (ilChessC[0] > 31)
 800260a:	edd7 7a02 	vldr	s15, [r7, #8]
 800260e:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8002612:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800261a:	dd07      	ble.n	800262c <ExtractCILCParameters+0x5c>
    {
        ilChessC[0] = ilChessC[0] - 64;
 800261c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002620:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002708 <ExtractCILCParameters+0x138>
 8002624:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002628:	edc7 7a02 	vstr	s15, [r7, #8]
    }
    ilChessC[0] = ilChessC[0] / 16.0f;
 800262c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002630:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002634:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002638:	edc7 7a02 	vstr	s15, [r7, #8]
    
    ilChessC[1] = (eeData[53] & 0x07C0) >> 6;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	336a      	adds	r3, #106	; 0x6a
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	119b      	asrs	r3, r3, #6
 8002644:	f003 031f 	and.w	r3, r3, #31
 8002648:	ee07 3a90 	vmov	s15, r3
 800264c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002650:	edc7 7a03 	vstr	s15, [r7, #12]
    if (ilChessC[1] > 15)
 8002654:	edd7 7a03 	vldr	s15, [r7, #12]
 8002658:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800265c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002664:	dd07      	ble.n	8002676 <ExtractCILCParameters+0xa6>
    {
        ilChessC[1] = ilChessC[1] - 32;
 8002666:	edd7 7a03 	vldr	s15, [r7, #12]
 800266a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800270c <ExtractCILCParameters+0x13c>
 800266e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002672:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    ilChessC[1] = ilChessC[1] / 2.0f;
 8002676:	ed97 7a03 	vldr	s14, [r7, #12]
 800267a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800267e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002682:	edc7 7a03 	vstr	s15, [r7, #12]
    
    ilChessC[2] = (eeData[53] & 0xF800) >> 11;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	336a      	adds	r3, #106	; 0x6a
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	0adb      	lsrs	r3, r3, #11
 800268e:	b29b      	uxth	r3, r3
 8002690:	ee07 3a90 	vmov	s15, r3
 8002694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002698:	edc7 7a04 	vstr	s15, [r7, #16]
    if (ilChessC[2] > 15)
 800269c:	edd7 7a04 	vldr	s15, [r7, #16]
 80026a0:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80026a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ac:	dd07      	ble.n	80026be <ExtractCILCParameters+0xee>
    {
        ilChessC[2] = ilChessC[2] - 32;
 80026ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80026b2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800270c <ExtractCILCParameters+0x13c>
 80026b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80026ba:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    ilChessC[2] = ilChessC[2] / 8.0f;
 80026be:	ed97 7a04 	vldr	s14, [r7, #16]
 80026c2:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80026c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026ca:	edc7 7a04 	vstr	s15, [r7, #16]
    
    mlx90640->calibrationModeEE = calibrationModeEE;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	7dfa      	ldrb	r2, [r7, #23]
 80026d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    mlx90640->ilChessC[0] = ilChessC[0];
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026de:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
    mlx90640->ilChessC[1] = ilChessC[1];
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026ea:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
    mlx90640->ilChessC[2] = ilChessC[2];
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026f6:	f8c2 3264 	str.w	r3, [r2, #612]	; 0x264
}
 80026fa:	bf00      	nop
 80026fc:	371c      	adds	r7, #28
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	42800000 	.word	0x42800000
 800270c:	42000000 	.word	0x42000000

08002710 <ExtractDeviatingPixels>:

//------------------------------------------------------------------------------

int ExtractDeviatingPixels(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
    uint16_t pixCnt = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	82fb      	strh	r3, [r7, #22]
    uint16_t brokenPixCnt = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	82bb      	strh	r3, [r7, #20]
    uint16_t outlierPixCnt = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	827b      	strh	r3, [r7, #18]
    int warn = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
    int i;
    
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 800272a:	2300      	movs	r3, #0
 800272c:	82fb      	strh	r3, [r7, #22]
 800272e:	e013      	b.n	8002758 <ExtractDeviatingPixels+0x48>
    {
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
 8002730:	8afa      	ldrh	r2, [r7, #22]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8002738:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800273c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        mlx90640->outlierPixels[pixCnt] = 0xFFFF;
 8002740:	8afb      	ldrh	r3, [r7, #22]
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	4413      	add	r3, r2
 800274c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002750:	805a      	strh	r2, [r3, #2]
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 8002752:	8afb      	ldrh	r3, [r7, #22]
 8002754:	3301      	adds	r3, #1
 8002756:	82fb      	strh	r3, [r7, #22]
 8002758:	8afb      	ldrh	r3, [r7, #22]
 800275a:	2b04      	cmp	r3, #4
 800275c:	d9e8      	bls.n	8002730 <ExtractDeviatingPixels+0x20>
    }
        
    pixCnt = 0;    
 800275e:	2300      	movs	r3, #0
 8002760:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < 768 && brokenPixCnt < 5 && outlierPixCnt < 5)
 8002762:	e02a      	b.n	80027ba <ExtractDeviatingPixels+0xaa>
    {
        if(eeData[pixCnt+64] == 0)
 8002764:	8afb      	ldrh	r3, [r7, #22]
 8002766:	3340      	adds	r3, #64	; 0x40
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10a      	bne.n	800278a <ExtractDeviatingPixels+0x7a>
        {
            mlx90640->brokenPixels[brokenPixCnt] = pixCnt;
 8002774:	8aba      	ldrh	r2, [r7, #20]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	f602 1234 	addw	r2, r2, #2356	; 0x934
 800277c:	8af9      	ldrh	r1, [r7, #22]
 800277e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            brokenPixCnt = brokenPixCnt + 1;
 8002782:	8abb      	ldrh	r3, [r7, #20]
 8002784:	3301      	adds	r3, #1
 8002786:	82bb      	strh	r3, [r7, #20]
 8002788:	e014      	b.n	80027b4 <ExtractDeviatingPixels+0xa4>
        }    
        else if((eeData[pixCnt+64] & 0x0001) != 0)
 800278a:	8afb      	ldrh	r3, [r7, #22]
 800278c:	3340      	adds	r3, #64	; 0x40
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	4413      	add	r3, r2
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00a      	beq.n	80027b4 <ExtractDeviatingPixels+0xa4>
        {
            mlx90640->outlierPixels[outlierPixCnt] = pixCnt;
 800279e:	8a7b      	ldrh	r3, [r7, #18]
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	f603 1338 	addw	r3, r3, #2360	; 0x938
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	4413      	add	r3, r2
 80027aa:	8afa      	ldrh	r2, [r7, #22]
 80027ac:	805a      	strh	r2, [r3, #2]
            outlierPixCnt = outlierPixCnt + 1;
 80027ae:	8a7b      	ldrh	r3, [r7, #18]
 80027b0:	3301      	adds	r3, #1
 80027b2:	827b      	strh	r3, [r7, #18]
        }    
        
        pixCnt = pixCnt + 1;
 80027b4:	8afb      	ldrh	r3, [r7, #22]
 80027b6:	3301      	adds	r3, #1
 80027b8:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < 768 && brokenPixCnt < 5 && outlierPixCnt < 5)
 80027ba:	8afb      	ldrh	r3, [r7, #22]
 80027bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027c0:	d205      	bcs.n	80027ce <ExtractDeviatingPixels+0xbe>
 80027c2:	8abb      	ldrh	r3, [r7, #20]
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d802      	bhi.n	80027ce <ExtractDeviatingPixels+0xbe>
 80027c8:	8a7b      	ldrh	r3, [r7, #18]
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d9ca      	bls.n	8002764 <ExtractDeviatingPixels+0x54>
        
    } 
    
    if(brokenPixCnt > 4)  
 80027ce:	8abb      	ldrh	r3, [r7, #20]
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d903      	bls.n	80027dc <ExtractDeviatingPixels+0xcc>
    {
        warn = -3;
 80027d4:	f06f 0302 	mvn.w	r3, #2
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	e08f      	b.n	80028fc <ExtractDeviatingPixels+0x1ec>
    }         
    else if(outlierPixCnt > 4)  
 80027dc:	8a7b      	ldrh	r3, [r7, #18]
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d903      	bls.n	80027ea <ExtractDeviatingPixels+0xda>
    {
        warn = -4;
 80027e2:	f06f 0303 	mvn.w	r3, #3
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	e088      	b.n	80028fc <ExtractDeviatingPixels+0x1ec>
    }
    else if((brokenPixCnt + outlierPixCnt) > 4)  
 80027ea:	8aba      	ldrh	r2, [r7, #20]
 80027ec:	8a7b      	ldrh	r3, [r7, #18]
 80027ee:	4413      	add	r3, r2
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	dd03      	ble.n	80027fc <ExtractDeviatingPixels+0xec>
    {
        warn = -5;
 80027f4:	f06f 0304 	mvn.w	r3, #4
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	e07f      	b.n	80028fc <ExtractDeviatingPixels+0x1ec>
    } 
    else
    {
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 80027fc:	2300      	movs	r3, #0
 80027fe:	82fb      	strh	r3, [r7, #22]
 8002800:	e022      	b.n	8002848 <ExtractDeviatingPixels+0x138>
        {
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 8002802:	8afb      	ldrh	r3, [r7, #22]
 8002804:	3301      	adds	r3, #1
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	e017      	b.n	800283a <ExtractDeviatingPixels+0x12a>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->brokenPixels[i]);
 800280a:	8afa      	ldrh	r2, [r7, #22]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8002812:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	f602 1234 	addw	r2, r2, #2356	; 0x934
 800281e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002822:	4619      	mov	r1, r3
 8002824:	f000 f86f 	bl	8002906 <CheckAdjacentPixels>
 8002828:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <ExtractDeviatingPixels+0x124>
                {
                    return warn;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	e064      	b.n	80028fe <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	3301      	adds	r3, #1
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	8abb      	ldrh	r3, [r7, #20]
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	429a      	cmp	r2, r3
 8002840:	dbe3      	blt.n	800280a <ExtractDeviatingPixels+0xfa>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8002842:	8afb      	ldrh	r3, [r7, #22]
 8002844:	3301      	adds	r3, #1
 8002846:	82fb      	strh	r3, [r7, #22]
 8002848:	8afa      	ldrh	r2, [r7, #22]
 800284a:	8abb      	ldrh	r3, [r7, #20]
 800284c:	429a      	cmp	r2, r3
 800284e:	d3d8      	bcc.n	8002802 <ExtractDeviatingPixels+0xf2>
                }    
            }    
        }
        
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 8002850:	2300      	movs	r3, #0
 8002852:	82fb      	strh	r3, [r7, #22]
 8002854:	e024      	b.n	80028a0 <ExtractDeviatingPixels+0x190>
        {
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 8002856:	8afb      	ldrh	r3, [r7, #22]
 8002858:	3301      	adds	r3, #1
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	e019      	b.n	8002892 <ExtractDeviatingPixels+0x182>
            {
                warn = CheckAdjacentPixels(mlx90640->outlierPixels[pixCnt],mlx90640->outlierPixels[i]);
 800285e:	8afb      	ldrh	r3, [r7, #22]
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	4413      	add	r3, r2
 800286a:	8858      	ldrh	r0, [r3, #2]
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	4413      	add	r3, r2
 8002878:	885b      	ldrh	r3, [r3, #2]
 800287a:	4619      	mov	r1, r3
 800287c:	f000 f843 	bl	8002906 <CheckAdjacentPixels>
 8002880:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <ExtractDeviatingPixels+0x17c>
                {
                    return warn;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	e038      	b.n	80028fe <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	3301      	adds	r3, #1
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	8a7b      	ldrh	r3, [r7, #18]
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	429a      	cmp	r2, r3
 8002898:	dbe1      	blt.n	800285e <ExtractDeviatingPixels+0x14e>
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 800289a:	8afb      	ldrh	r3, [r7, #22]
 800289c:	3301      	adds	r3, #1
 800289e:	82fb      	strh	r3, [r7, #22]
 80028a0:	8afa      	ldrh	r2, [r7, #22]
 80028a2:	8a7b      	ldrh	r3, [r7, #18]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d3d6      	bcc.n	8002856 <ExtractDeviatingPixels+0x146>
                }    
            }    
        } 
        
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 80028a8:	2300      	movs	r3, #0
 80028aa:	82fb      	strh	r3, [r7, #22]
 80028ac:	e022      	b.n	80028f4 <ExtractDeviatingPixels+0x1e4>
        {
            for(i=0; i<outlierPixCnt; i++)
 80028ae:	2300      	movs	r3, #0
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	e018      	b.n	80028e6 <ExtractDeviatingPixels+0x1d6>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->outlierPixels[i]);
 80028b4:	8afa      	ldrh	r2, [r7, #22]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	f602 1234 	addw	r2, r2, #2356	; 0x934
 80028bc:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	f603 1338 	addw	r3, r3, #2360	; 0x938
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	4413      	add	r3, r2
 80028cc:	885b      	ldrh	r3, [r3, #2]
 80028ce:	4619      	mov	r1, r3
 80028d0:	f000 f819 	bl	8002906 <CheckAdjacentPixels>
 80028d4:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <ExtractDeviatingPixels+0x1d0>
                {
                    return warn;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	e00e      	b.n	80028fe <ExtractDeviatingPixels+0x1ee>
            for(i=0; i<outlierPixCnt; i++)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	3301      	adds	r3, #1
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	8a7b      	ldrh	r3, [r7, #18]
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	dbe2      	blt.n	80028b4 <ExtractDeviatingPixels+0x1a4>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 80028ee:	8afb      	ldrh	r3, [r7, #22]
 80028f0:	3301      	adds	r3, #1
 80028f2:	82fb      	strh	r3, [r7, #22]
 80028f4:	8afa      	ldrh	r2, [r7, #22]
 80028f6:	8abb      	ldrh	r3, [r7, #20]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d3d8      	bcc.n	80028ae <ExtractDeviatingPixels+0x19e>
        }    
        
    }    
    
    
    return warn;
 80028fc:	68fb      	ldr	r3, [r7, #12]
       
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <CheckAdjacentPixels>:

//------------------------------------------------------------------------------

 int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2)
 {
 8002906:	b480      	push	{r7}
 8002908:	b085      	sub	sp, #20
 800290a:	af00      	add	r7, sp, #0
 800290c:	4603      	mov	r3, r0
 800290e:	460a      	mov	r2, r1
 8002910:	80fb      	strh	r3, [r7, #6]
 8002912:	4613      	mov	r3, r2
 8002914:	80bb      	strh	r3, [r7, #4]
     int pixPosDif;
     
     pixPosDif = pix1 - pix2;
 8002916:	88fa      	ldrh	r2, [r7, #6]
 8002918:	88bb      	ldrh	r3, [r7, #4]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	60fb      	str	r3, [r7, #12]
     if(pixPosDif > -34 && pixPosDif < -30)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f113 0f21 	cmn.w	r3, #33	; 0x21
 8002924:	db06      	blt.n	8002934 <CheckAdjacentPixels+0x2e>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f113 0f1e 	cmn.w	r3, #30
 800292c:	da02      	bge.n	8002934 <CheckAdjacentPixels+0x2e>
     {
         return -6;
 800292e:	f06f 0305 	mvn.w	r3, #5
 8002932:	e013      	b.n	800295c <CheckAdjacentPixels+0x56>
     } 
     if(pixPosDif > -2 && pixPosDif < 2)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293a:	db05      	blt.n	8002948 <CheckAdjacentPixels+0x42>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b01      	cmp	r3, #1
 8002940:	dc02      	bgt.n	8002948 <CheckAdjacentPixels+0x42>
     {
         return -6;
 8002942:	f06f 0305 	mvn.w	r3, #5
 8002946:	e009      	b.n	800295c <CheckAdjacentPixels+0x56>
     } 
     if(pixPosDif > 30 && pixPosDif < 34)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2b1e      	cmp	r3, #30
 800294c:	dd05      	ble.n	800295a <CheckAdjacentPixels+0x54>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2b21      	cmp	r3, #33	; 0x21
 8002952:	dc02      	bgt.n	800295a <CheckAdjacentPixels+0x54>
     {
         return -6;
 8002954:	f06f 0305 	mvn.w	r3, #5
 8002958:	e000      	b.n	800295c <CheckAdjacentPixels+0x56>
     }
     
     return 0;    
 800295a:	2300      	movs	r3, #0
 }
 800295c:	4618      	mov	r0, r3
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <MLX90640_I2CRead>:
	MX_I2C1_Init();
}


int MLX90640_I2CRead(uint8_t slaveAddr, uint16_t startAddress, uint16_t nMemAddressRead, uint16_t *data,I2C_HandleTypeDef * i2c)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08c      	sub	sp, #48	; 0x30
 800296c:	af04      	add	r7, sp, #16
 800296e:	607b      	str	r3, [r7, #4]
 8002970:	4603      	mov	r3, r0
 8002972:	73fb      	strb	r3, [r7, #15]
 8002974:	460b      	mov	r3, r1
 8002976:	81bb      	strh	r3, [r7, #12]
 8002978:	4613      	mov	r3, r2
 800297a:	817b      	strh	r3, [r7, #10]

	uint8_t* p = (uint8_t*) data;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	61bb      	str	r3, [r7, #24]

	int ack = 0;                               
 8002980:	2300      	movs	r3, #0
 8002982:	617b      	str	r3, [r7, #20]
	int cnt = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	61fb      	str	r3, [r7, #28]
	
	ack = HAL_I2C_Mem_Read(&hi2c1, (slaveAddr<<1), startAddress, I2C_MEMADD_SIZE_16BIT, p, nMemAddressRead*2, 500);
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	b29b      	uxth	r3, r3
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	b299      	uxth	r1, r3
 8002990:	897b      	ldrh	r3, [r7, #10]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	b29b      	uxth	r3, r3
 8002996:	89ba      	ldrh	r2, [r7, #12]
 8002998:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800299c:	9002      	str	r0, [sp, #8]
 800299e:	9301      	str	r3, [sp, #4]
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	2302      	movs	r3, #2
 80029a6:	4817      	ldr	r0, [pc, #92]	; (8002a04 <MLX90640_I2CRead+0x9c>)
 80029a8:	f005 f900 	bl	8007bac <HAL_I2C_Mem_Read>
 80029ac:	4603      	mov	r3, r0
 80029ae:	617b      	str	r3, [r7, #20]

	if (ack != HAL_OK)
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <MLX90640_I2CRead+0x54>
	{
			return -1;
 80029b6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ba:	e01f      	b.n	80029fc <MLX90640_I2CRead+0x94>
	}
	

	for(cnt=0; cnt < nMemAddressRead*2; cnt+=2) {
 80029bc:	2300      	movs	r3, #0
 80029be:	61fb      	str	r3, [r7, #28]
 80029c0:	e016      	b.n	80029f0 <MLX90640_I2CRead+0x88>
		uint8_t tempBuffer = p[cnt+1];
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3301      	adds	r3, #1
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4413      	add	r3, r2
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	74fb      	strb	r3, [r7, #19]
		p[cnt+1] = p[cnt];
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	441a      	add	r2, r3
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	3301      	adds	r3, #1
 80029d8:	69b9      	ldr	r1, [r7, #24]
 80029da:	440b      	add	r3, r1
 80029dc:	7812      	ldrb	r2, [r2, #0]
 80029de:	701a      	strb	r2, [r3, #0]
		p[cnt] = tempBuffer;
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4413      	add	r3, r2
 80029e6:	7cfa      	ldrb	r2, [r7, #19]
 80029e8:	701a      	strb	r2, [r3, #0]
	for(cnt=0; cnt < nMemAddressRead*2; cnt+=2) {
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3302      	adds	r3, #2
 80029ee:	61fb      	str	r3, [r7, #28]
 80029f0:	897b      	ldrh	r3, [r7, #10]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	69fa      	ldr	r2, [r7, #28]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	dbe3      	blt.n	80029c2 <MLX90640_I2CRead+0x5a>
	}

	return 0;   
 80029fa:	2300      	movs	r3, #0
} 
 80029fc:	4618      	mov	r0, r3
 80029fe:	3720      	adds	r7, #32
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20000348 	.word	0x20000348

08002a08 <MLX90640_I2CWrite>:


int MLX90640_I2CWrite(uint8_t slaveAddr, uint16_t writeAddress, uint16_t data,I2C_HandleTypeDef * i2c)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	; 0x28
 8002a0c:	af04      	add	r7, sp, #16
 8002a0e:	607b      	str	r3, [r7, #4]
 8002a10:	4603      	mov	r3, r0
 8002a12:	73fb      	strb	r3, [r7, #15]
 8002a14:	460b      	mov	r3, r1
 8002a16:	81bb      	strh	r3, [r7, #12]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	817b      	strh	r3, [r7, #10]

	uint8_t sa;
	int ack = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
	uint8_t cmd[2];
	static uint16_t dataCheck;

	sa = (slaveAddr << 1);
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	74fb      	strb	r3, [r7, #19]

	cmd[0] = data >> 8;
 8002a26:	897b      	ldrh	r3, [r7, #10]
 8002a28:	0a1b      	lsrs	r3, r3, #8
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	743b      	strb	r3, [r7, #16]
	cmd[1] = data & 0x00FF;
 8002a30:	897b      	ldrh	r3, [r7, #10]
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	747b      	strb	r3, [r7, #17]


	ack = HAL_I2C_Mem_Write(&hi2c1, sa, writeAddress, I2C_MEMADD_SIZE_16BIT, cmd, sizeof(cmd), 500);
 8002a36:	7cfb      	ldrb	r3, [r7, #19]
 8002a38:	b299      	uxth	r1, r3
 8002a3a:	89ba      	ldrh	r2, [r7, #12]
 8002a3c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002a40:	9302      	str	r3, [sp, #8]
 8002a42:	2302      	movs	r3, #2
 8002a44:	9301      	str	r3, [sp, #4]
 8002a46:	f107 0310 	add.w	r3, r7, #16
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	4810      	ldr	r0, [pc, #64]	; (8002a90 <MLX90640_I2CWrite+0x88>)
 8002a50:	f004 ff98 	bl	8007984 <HAL_I2C_Mem_Write>
 8002a54:	4603      	mov	r3, r0
 8002a56:	617b      	str	r3, [r7, #20]

	if (ack != HAL_OK)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <MLX90640_I2CWrite+0x5c>
	{
			return -1;
 8002a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a62:	e010      	b.n	8002a86 <MLX90640_I2CWrite+0x7e>
	}         
	
	MLX90640_I2CRead(slaveAddr,writeAddress,1, &dataCheck,i2c);
 8002a64:	89b9      	ldrh	r1, [r7, #12]
 8002a66:	7bf8      	ldrb	r0, [r7, #15]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <MLX90640_I2CWrite+0x8c>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f7ff ff7a 	bl	8002968 <MLX90640_I2CRead>
	
	if ( dataCheck != data)
 8002a74:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <MLX90640_I2CWrite+0x8c>)
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	897a      	ldrh	r2, [r7, #10]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d002      	beq.n	8002a84 <MLX90640_I2CWrite+0x7c>
	{
			return -2;
 8002a7e:	f06f 0301 	mvn.w	r3, #1
 8002a82:	e000      	b.n	8002a86 <MLX90640_I2CWrite+0x7e>
	}    
	
	return 0;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000348 	.word	0x20000348
 8002a94:	200001fc 	.word	0x200001fc

08002a98 <MPU9250_IsConnected>:
__weak void MPU9250_OnActivate()
{
}
#ifndef USE_SPI
bool MPU9250_IsConnected()
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&_MPU9250_I2C,_dev_add,1,HAL_MAX_DELAY)==HAL_OK)
 8002a9c:	21d0      	movs	r1, #208	; 0xd0
 8002a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	4805      	ldr	r0, [pc, #20]	; (8002abc <MPU9250_IsConnected+0x24>)
 8002aa6:	f005 f99b 	bl	8007de0 <HAL_I2C_IsDeviceReady>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <MPU9250_IsConnected+0x1c>
		return true;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <MPU9250_IsConnected+0x1e>
	else
		return false;	
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20000394 	.word	0x20000394

08002ac0 <MPU_I2C_Write>:

void MPU_I2C_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af04      	add	r7, sp, #16
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	70fb      	strb	r3, [r7, #3]
 8002acc:	4613      	mov	r3, r2
 8002ace:	803b      	strh	r3, [r7, #0]
	HAL_I2C_Mem_Write(&_MPU9250_I2C,_dev_add,WriteAddr,I2C_MEMADD_SIZE_8BIT,pBuffer,NumByteToWrite,HAL_MAX_DELAY);
 8002ad0:	21d0      	movs	r1, #208	; 0xd0
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ada:	9302      	str	r3, [sp, #8]
 8002adc:	883b      	ldrh	r3, [r7, #0]
 8002ade:	9301      	str	r3, [sp, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	4803      	ldr	r0, [pc, #12]	; (8002af4 <MPU_I2C_Write+0x34>)
 8002ae8:	f004 ff4c 	bl	8007984 <HAL_I2C_Mem_Write>
}
 8002aec:	bf00      	nop
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	20000394 	.word	0x20000394

08002af8 <MPU_I2C_Read>:

void MPU_I2C_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	70fb      	strb	r3, [r7, #3]
 8002b04:	4613      	mov	r3, r2
 8002b06:	803b      	strh	r3, [r7, #0]
	uint8_t data = ReadAddr | READWRITE_CMD;
 8002b08:	2280      	movs	r2, #128	; 0x80
 8002b0a:	78fb      	ldrb	r3, [r7, #3]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&_MPU9250_I2C,_dev_add,&data,1,HAL_MAX_DELAY);
 8002b12:	21d0      	movs	r1, #208	; 0xd0
 8002b14:	f107 020f 	add.w	r2, r7, #15
 8002b18:	f04f 33ff 	mov.w	r3, #4294967295
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	2301      	movs	r3, #1
 8002b20:	4807      	ldr	r0, [pc, #28]	; (8002b40 <MPU_I2C_Read+0x48>)
 8002b22:	f004 fd45 	bl	80075b0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&_MPU9250_I2C,_dev_add,pBuffer,NumByteToRead,HAL_MAX_DELAY);
 8002b26:	21d0      	movs	r1, #208	; 0xd0
 8002b28:	883b      	ldrh	r3, [r7, #0]
 8002b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b2e:	9200      	str	r2, [sp, #0]
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	4803      	ldr	r0, [pc, #12]	; (8002b40 <MPU_I2C_Read+0x48>)
 8002b34:	f004 fe30 	bl	8007798 <HAL_I2C_Master_Receive>
}
 8002b38:	bf00      	nop
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	20000394 	.word	0x20000394

08002b44 <writeRegister>:
	MPU9250_Deactivate();
}
#endif
/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	460a      	mov	r2, r1
 8002b4e:	71fb      	strb	r3, [r7, #7]
 8002b50:	4613      	mov	r3, r2
 8002b52:	71bb      	strb	r3, [r7, #6]
	#ifdef USE_SPI
	MPU_SPI_Write(&data, subAddress, 1);
	#else
	MPU_I2C_Write(&data, subAddress, 1);
 8002b54:	79f9      	ldrb	r1, [r7, #7]
 8002b56:	1dbb      	adds	r3, r7, #6
 8002b58:	2201      	movs	r2, #1
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff ffb0 	bl	8002ac0 <MPU_I2C_Write>
	#endif
	HAL_Delay(10);
 8002b60:	200a      	movs	r0, #10
 8002b62:	f002 ff6f 	bl	8005a44 <HAL_Delay>
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	4603      	mov	r3, r0
 8002b76:	603a      	str	r2, [r7, #0]
 8002b78:	71fb      	strb	r3, [r7, #7]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	71bb      	strb	r3, [r7, #6]
	#ifdef USE_SPI
	MPU_SPI_Read(dest, subAddress, count);
	#else
	MPU_I2C_Read(dest, subAddress, count);
 8002b7e:	79bb      	ldrb	r3, [r7, #6]
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	4619      	mov	r1, r3
 8002b86:	6838      	ldr	r0, [r7, #0]
 8002b88:	f7ff ffb6 	bl	8002af8 <MPU_I2C_Read>
	#endif
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	460a      	mov	r2, r1
 8002b9e:	71fb      	strb	r3, [r7, #7]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for write
	writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 8002ba4:	2325      	movs	r3, #37	; 0x25
 8002ba6:	220c      	movs	r2, #12
 8002ba8:	4611      	mov	r1, r2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff ffca 	bl	8002b44 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8002bb0:	2226      	movs	r2, #38	; 0x26
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	f7ff ffc4 	bl	8002b44 <writeRegister>

	// store the data for write
	writeRegister(I2C_SLV0_DO,data);
 8002bbc:	2263      	movs	r2, #99	; 0x63
 8002bbe:	79bb      	ldrb	r3, [r7, #6]
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4610      	mov	r0, r2
 8002bc4:	f7ff ffbe 	bl	8002b44 <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 8002bc8:	2227      	movs	r2, #39	; 0x27
 8002bca:	2380      	movs	r3, #128	; 0x80
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	f7ff ffb5 	bl	8002b44 <writeRegister>
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	4603      	mov	r3, r0
 8002bea:	603a      	str	r2, [r7, #0]
 8002bec:	71fb      	strb	r3, [r7, #7]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 8002bf2:	2025      	movs	r0, #37	; 0x25
 8002bf4:	220c      	movs	r2, #12
 8002bf6:	2380      	movs	r3, #128	; 0x80
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	f7ff ffa1 	bl	8002b44 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8002c02:	2226      	movs	r2, #38	; 0x26
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	4619      	mov	r1, r3
 8002c08:	4610      	mov	r0, r2
 8002c0a:	f7ff ff9b 	bl	8002b44 <writeRegister>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 8002c0e:	2027      	movs	r0, #39	; 0x27
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	79bb      	ldrb	r3, [r7, #6]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	4619      	mov	r1, r3
 8002c1a:	f7ff ff93 	bl	8002b44 <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 8002c1e:	2001      	movs	r0, #1
 8002c20:	f002 ff10 	bl	8005a44 <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
 8002c24:	2049      	movs	r0, #73	; 0x49
 8002c26:	79bb      	ldrb	r3, [r7, #6]
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	f7ff ff9f 	bl	8002b6e <readRegisters>
}
 8002c30:	bf00      	nop
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(){
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I,1,_buffer);
 8002c3c:	2375      	movs	r3, #117	; 0x75
 8002c3e:	4a04      	ldr	r2, [pc, #16]	; (8002c50 <whoAmI+0x18>)
 8002c40:	2101      	movs	r1, #1
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff ff93 	bl	8002b6e <readRegisters>

	// return the register value
	return _buffer[0];
 8002c48:	4b01      	ldr	r3, [pc, #4]	; (8002c50 <whoAmI+0x18>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20000200 	.word	0x20000200

08002c54 <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(){
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readAK8963Registers(AK8963_WHO_AM_I,1,_buffer);
 8002c58:	2300      	movs	r3, #0
 8002c5a:	4a04      	ldr	r2, [pc, #16]	; (8002c6c <whoAmIAK8963+0x18>)
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff ffbf 	bl	8002be2 <readAK8963Registers>
	// return the register value
	return _buffer[0];
 8002c64:	4b01      	ldr	r3, [pc, #4]	; (8002c6c <whoAmIAK8963+0x18>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	20000200 	.word	0x20000200

08002c70 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init()
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
	#ifndef USE_SPI
	int tries = 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	607b      	str	r3, [r7, #4]
	while(MPU9250_IsConnected() == false && tries < 5)
 8002c7a:	e005      	b.n	8002c88 <MPU9250_Init+0x18>
	{
		tries++;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	607b      	str	r3, [r7, #4]
		HAL_Delay(100);
 8002c82:	2064      	movs	r0, #100	; 0x64
 8002c84:	f002 fede 	bl	8005a44 <HAL_Delay>
	while(MPU9250_IsConnected() == false && tries < 5)
 8002c88:	f7ff ff06 	bl	8002a98 <MPU9250_IsConnected>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f083 0301 	eor.w	r3, r3, #1
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d002      	beq.n	8002c9e <MPU9250_Init+0x2e>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	ddee      	ble.n	8002c7c <MPU9250_Init+0xc>
	}
	if(tries == 5)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b05      	cmp	r3, #5
 8002ca2:	d101      	bne.n	8002ca8 <MPU9250_Init+0x38>
	{
		return 1;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0a5      	b.n	8002df4 <MPU9250_Init+0x184>
	}
	#endif
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 8002ca8:	236b      	movs	r3, #107	; 0x6b
 8002caa:	2201      	movs	r2, #1
 8002cac:	4611      	mov	r1, r2
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff ff48 	bl	8002b44 <writeRegister>
	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 8002cb4:	236a      	movs	r3, #106	; 0x6a
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	4611      	mov	r1, r2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff ff42 	bl	8002b44 <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 8002cc0:	2324      	movs	r3, #36	; 0x24
 8002cc2:	220d      	movs	r2, #13
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff ff3c 	bl	8002b44 <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8002ccc:	230a      	movs	r3, #10
 8002cce:	2200      	movs	r2, #0
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff ff5e 	bl	8002b94 <writeAK8963Register>
	// reset the MPU9250
	writeRegister(PWR_MGMNT_1,PWR_RESET);
 8002cd8:	236b      	movs	r3, #107	; 0x6b
 8002cda:	2280      	movs	r2, #128	; 0x80
 8002cdc:	4611      	mov	r1, r2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff ff30 	bl	8002b44 <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 8002ce4:	200a      	movs	r0, #10
 8002ce6:	f002 fead 	bl	8005a44 <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
 8002cea:	230b      	movs	r3, #11
 8002cec:	2201      	movs	r2, #1
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff4f 	bl	8002b94 <writeAK8963Register>
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 8002cf6:	236b      	movs	r3, #107	; 0x6b
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff ff21 	bl	8002b44 <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI();
 8002d02:	f7ff ff99 	bl	8002c38 <whoAmI>
 8002d06:	4603      	mov	r3, r0
 8002d08:	70fb      	strb	r3, [r7, #3]
	if((who != 0x71) && ( who != 0x73))
 8002d0a:	78fb      	ldrb	r3, [r7, #3]
 8002d0c:	2b71      	cmp	r3, #113	; 0x71
 8002d0e:	d004      	beq.n	8002d1a <MPU9250_Init+0xaa>
 8002d10:	78fb      	ldrb	r3, [r7, #3]
 8002d12:	2b73      	cmp	r3, #115	; 0x73
 8002d14:	d001      	beq.n	8002d1a <MPU9250_Init+0xaa>
	{
		return 1;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e06c      	b.n	8002df4 <MPU9250_Init+0x184>
	}

	// enable accelerometer and gyro
	writeRegister(PWR_MGMNT_2,SEN_ENABLE);
 8002d1a:	236c      	movs	r3, #108	; 0x6c
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff ff0f 	bl	8002b44 <writeRegister>

	// setting accel range to 16G as default
	writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_2G);
 8002d26:	231c      	movs	r3, #28
 8002d28:	2200      	movs	r2, #0
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ff09 	bl	8002b44 <writeRegister>

	// setting the gyro range to 2000DPS as default
	writeRegister(GYRO_CONFIG,GYRO_FS_SEL_250DPS);
 8002d32:	231b      	movs	r3, #27
 8002d34:	2200      	movs	r2, #0
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff ff03 	bl	8002b44 <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(ACCEL_CONFIG2,DLPF_184);
 8002d3e:	231d      	movs	r3, #29
 8002d40:	2201      	movs	r2, #1
 8002d42:	4611      	mov	r1, r2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff fefd 	bl	8002b44 <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(CONFIG,DLPF_184);
 8002d4a:	231a      	movs	r3, #26
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	4611      	mov	r1, r2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff fef7 	bl	8002b44 <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(SMPDIV,0x00);
 8002d56:	2319      	movs	r3, #25
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fef2 	bl	8002b44 <writeRegister>

	// enable I2C master mode
	writeRegister(USER_CTRL,I2C_MST_EN);
 8002d60:	236a      	movs	r3, #106	; 0x6a
 8002d62:	2220      	movs	r2, #32
 8002d64:	4611      	mov	r1, r2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff feec 	bl	8002b44 <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL,I2C_MST_CLK);
 8002d6c:	2324      	movs	r3, #36	; 0x24
 8002d6e:	220d      	movs	r2, #13
 8002d70:	4611      	mov	r1, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff fee6 	bl	8002b44 <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 0x48 )
 8002d78:	f7ff ff6c 	bl	8002c54 <whoAmIAK8963>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b48      	cmp	r3, #72	; 0x48
 8002d80:	d001      	beq.n	8002d86 <MPU9250_Init+0x116>
	{
		return 1;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e036      	b.n	8002df4 <MPU9250_Init+0x184>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8002d86:	230a      	movs	r3, #10
 8002d88:	2200      	movs	r2, #0
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff ff01 	bl	8002b94 <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 8002d92:	2064      	movs	r0, #100	; 0x64
 8002d94:	f002 fe56 	bl	8005a44 <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM);
 8002d98:	230a      	movs	r3, #10
 8002d9a:	220f      	movs	r2, #15
 8002d9c:	4611      	mov	r1, r2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fef8 	bl	8002b94 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8002da4:	2064      	movs	r0, #100	; 0x64
 8002da6:	f002 fe4d 	bl	8005a44 <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 8002daa:	2310      	movs	r3, #16
 8002dac:	4a13      	ldr	r2, [pc, #76]	; (8002dfc <MPU9250_Init+0x18c>)
 8002dae:	2103      	movs	r1, #3
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff ff16 	bl	8002be2 <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8002db6:	230a      	movs	r3, #10
 8002db8:	2200      	movs	r2, #0
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff fee9 	bl	8002b94 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8002dc2:	2064      	movs	r0, #100	; 0x64
 8002dc4:	f002 fe3e 	bl	8005a44 <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2);
 8002dc8:	230a      	movs	r3, #10
 8002dca:	2216      	movs	r2, #22
 8002dcc:	4611      	mov	r1, r2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff fee0 	bl	8002b94 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8002dd4:	2064      	movs	r0, #100	; 0x64
 8002dd6:	f002 fe35 	bl	8005a44 <HAL_Delay>

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 8002dda:	236b      	movs	r3, #107	; 0x6b
 8002ddc:	2201      	movs	r2, #1
 8002dde:	4611      	mov	r1, r2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff feaf 	bl	8002b44 <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(AK8963_HXL,7,_buffer);
 8002de6:	2303      	movs	r3, #3
 8002de8:	4a05      	ldr	r2, [pc, #20]	; (8002e00 <MPU9250_Init+0x190>)
 8002dea:	2107      	movs	r1, #7
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff fef8 	bl	8002be2 <readAK8963Registers>

	// successful init, return 0
	return 0;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20000218 	.word	0x20000218
 8002e00:	20000200 	.word	0x20000200

08002e04 <MPU9250_GetData>:
	writeRegister(SMPDIV, srd);
}

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
	// grab the data from the MPU9250
	readRegisters(ACCEL_OUT, 21, _buffer);
 8002e10:	233b      	movs	r3, #59	; 0x3b
 8002e12:	4a63      	ldr	r2, [pc, #396]	; (8002fa0 <MPU9250_GetData+0x19c>)
 8002e14:	2115      	movs	r1, #21
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff fea9 	bl	8002b6e <readRegisters>

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8002e1c:	4b60      	ldr	r3, [pc, #384]	; (8002fa0 <MPU9250_GetData+0x19c>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	021b      	lsls	r3, r3, #8
 8002e22:	b21a      	sxth	r2, r3
 8002e24:	4b5e      	ldr	r3, [pc, #376]	; (8002fa0 <MPU9250_GetData+0x19c>)
 8002e26:	785b      	ldrb	r3, [r3, #1]
 8002e28:	b21b      	sxth	r3, r3
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	b21a      	sxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	801a      	strh	r2, [r3, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 8002e32:	4b5b      	ldr	r3, [pc, #364]	; (8002fa0 <MPU9250_GetData+0x19c>)
 8002e34:	789b      	ldrb	r3, [r3, #2]
 8002e36:	021b      	lsls	r3, r3, #8
 8002e38:	b219      	sxth	r1, r3
 8002e3a:	4b59      	ldr	r3, [pc, #356]	; (8002fa0 <MPU9250_GetData+0x19c>)
 8002e3c:	78db      	ldrb	r3, [r3, #3]
 8002e3e:	b21a      	sxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3302      	adds	r3, #2
 8002e44:	430a      	orrs	r2, r1
 8002e46:	b212      	sxth	r2, r2
 8002e48:	801a      	strh	r2, [r3, #0]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8002e4a:	4b55      	ldr	r3, [pc, #340]	; (8002fa0 <MPU9250_GetData+0x19c>)
 8002e4c:	791b      	ldrb	r3, [r3, #4]
 8002e4e:	021b      	lsls	r3, r3, #8
 8002e50:	b219      	sxth	r1, r3
 8002e52:	4b53      	ldr	r3, [pc, #332]	; (8002fa0 <MPU9250_GetData+0x19c>)
 8002e54:	795b      	ldrb	r3, [r3, #5]
 8002e56:	b21a      	sxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	b212      	sxth	r2, r2
 8002e60:	801a      	strh	r2, [r3, #0]
	GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 8002e62:	4b4f      	ldr	r3, [pc, #316]	; (8002fa0 <MPU9250_GetData+0x19c>)
 8002e64:	7a1b      	ldrb	r3, [r3, #8]
 8002e66:	021b      	lsls	r3, r3, #8
 8002e68:	b21a      	sxth	r2, r3
 8002e6a:	4b4d      	ldr	r3, [pc, #308]	; (8002fa0 <MPU9250_GetData+0x19c>)
 8002e6c:	7a5b      	ldrb	r3, [r3, #9]
 8002e6e:	b21b      	sxth	r3, r3
 8002e70:	4313      	orrs	r3, r2
 8002e72:	b21a      	sxth	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8002e78:	4b49      	ldr	r3, [pc, #292]	; (8002fa0 <MPU9250_GetData+0x19c>)
 8002e7a:	7a9b      	ldrb	r3, [r3, #10]
 8002e7c:	021b      	lsls	r3, r3, #8
 8002e7e:	b219      	sxth	r1, r3
 8002e80:	4b47      	ldr	r3, [pc, #284]	; (8002fa0 <MPU9250_GetData+0x19c>)
 8002e82:	7adb      	ldrb	r3, [r3, #11]
 8002e84:	b21a      	sxth	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3302      	adds	r3, #2
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	b212      	sxth	r2, r2
 8002e8e:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 8002e90:	4b43      	ldr	r3, [pc, #268]	; (8002fa0 <MPU9250_GetData+0x19c>)
 8002e92:	7b1b      	ldrb	r3, [r3, #12]
 8002e94:	021b      	lsls	r3, r3, #8
 8002e96:	b219      	sxth	r1, r3
 8002e98:	4b41      	ldr	r3, [pc, #260]	; (8002fa0 <MPU9250_GetData+0x19c>)
 8002e9a:	7b5b      	ldrb	r3, [r3, #13]
 8002e9c:	b21a      	sxth	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	b212      	sxth	r2, r2
 8002ea6:	801a      	strh	r2, [r3, #0]

	int16_t magx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 8002ea8:	4b3d      	ldr	r3, [pc, #244]	; (8002fa0 <MPU9250_GetData+0x19c>)
 8002eaa:	7bdb      	ldrb	r3, [r3, #15]
 8002eac:	021b      	lsls	r3, r3, #8
 8002eae:	b21a      	sxth	r2, r3
 8002eb0:	4b3b      	ldr	r3, [pc, #236]	; (8002fa0 <MPU9250_GetData+0x19c>)
 8002eb2:	7b9b      	ldrb	r3, [r3, #14]
 8002eb4:	b21b      	sxth	r3, r3
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	82fb      	strh	r3, [r7, #22]
	int16_t magy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 8002eba:	4b39      	ldr	r3, [pc, #228]	; (8002fa0 <MPU9250_GetData+0x19c>)
 8002ebc:	7c5b      	ldrb	r3, [r3, #17]
 8002ebe:	021b      	lsls	r3, r3, #8
 8002ec0:	b21a      	sxth	r2, r3
 8002ec2:	4b37      	ldr	r3, [pc, #220]	; (8002fa0 <MPU9250_GetData+0x19c>)
 8002ec4:	7c1b      	ldrb	r3, [r3, #16]
 8002ec6:	b21b      	sxth	r3, r3
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	82bb      	strh	r3, [r7, #20]
	int16_t magz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 8002ecc:	4b34      	ldr	r3, [pc, #208]	; (8002fa0 <MPU9250_GetData+0x19c>)
 8002ece:	7cdb      	ldrb	r3, [r3, #19]
 8002ed0:	021b      	lsls	r3, r3, #8
 8002ed2:	b21a      	sxth	r2, r3
 8002ed4:	4b32      	ldr	r3, [pc, #200]	; (8002fa0 <MPU9250_GetData+0x19c>)
 8002ed6:	7c9b      	ldrb	r3, [r3, #18]
 8002ed8:	b21b      	sxth	r3, r3
 8002eda:	4313      	orrs	r3, r2
 8002edc:	827b      	strh	r3, [r7, #18]

	MagData[0] = (int16_t)((float)magx * ((float)(_mag_adjust[0] - 128) / 256.0f + 1.0f));
 8002ede:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002ee2:	ee07 3a90 	vmov	s15, r3
 8002ee6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002eea:	4b2e      	ldr	r3, [pc, #184]	; (8002fa4 <MPU9250_GetData+0x1a0>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	3b80      	subs	r3, #128	; 0x80
 8002ef0:	ee07 3a90 	vmov	s15, r3
 8002ef4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ef8:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 8002fa8 <MPU9250_GetData+0x1a4>
 8002efc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f10:	ee17 3a90 	vmov	r3, s15
 8002f14:	b21a      	sxth	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	801a      	strh	r2, [r3, #0]
	MagData[1] = (int16_t)((float)magy * ((float)(_mag_adjust[1] - 128) / 256.0f + 1.0f));
 8002f1a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002f1e:	ee07 3a90 	vmov	s15, r3
 8002f22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f26:	4b1f      	ldr	r3, [pc, #124]	; (8002fa4 <MPU9250_GetData+0x1a0>)
 8002f28:	785b      	ldrb	r3, [r3, #1]
 8002f2a:	3b80      	subs	r3, #128	; 0x80
 8002f2c:	ee07 3a90 	vmov	s15, r3
 8002f30:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f34:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8002fa8 <MPU9250_GetData+0x1a4>
 8002f38:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	3302      	adds	r3, #2
 8002f4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f50:	ee17 2a90 	vmov	r2, s15
 8002f54:	b212      	sxth	r2, r2
 8002f56:	801a      	strh	r2, [r3, #0]
	MagData[2] = (int16_t)((float)magz * ((float)(_mag_adjust[2] - 128) / 256.0f + 1.0f));
 8002f58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002f5c:	ee07 3a90 	vmov	s15, r3
 8002f60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f64:	4b0f      	ldr	r3, [pc, #60]	; (8002fa4 <MPU9250_GetData+0x1a0>)
 8002f66:	789b      	ldrb	r3, [r3, #2]
 8002f68:	3b80      	subs	r3, #128	; 0x80
 8002f6a:	ee07 3a90 	vmov	s15, r3
 8002f6e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f72:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8002fa8 <MPU9250_GetData+0x1a4>
 8002f76:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	3304      	adds	r3, #4
 8002f8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f8e:	ee17 2a90 	vmov	r2, s15
 8002f92:	b212      	sxth	r2, r2
 8002f94:	801a      	strh	r2, [r3, #0]
}
 8002f96:	bf00      	nop
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000200 	.word	0x20000200
 8002fa4:	20000218 	.word	0x20000218
 8002fa8:	43800000 	.word	0x43800000

08002fac <sdInit>:
	  {
		  statusRegister.SDCARD = SENSOR_OFF;
	  }
}
void sdInit(FATFS* fs)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
	  if (f_mount(fs, "", 0) == FR_OK)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	490d      	ldr	r1, [pc, #52]	; (8002fec <sdInit+0x40>)
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f00d fe19 	bl	8010bf0 <f_mount>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d109      	bne.n	8002fd8 <sdInit+0x2c>
	  {
		  statusRegister.SDCARD = SENSOR_OK;
 8002fc4:	4a0a      	ldr	r2, [pc, #40]	; (8002ff0 <sdInit+0x44>)
 8002fc6:	7813      	ldrb	r3, [r2, #0]
 8002fc8:	2101      	movs	r1, #1
 8002fca:	f361 0302 	bfi	r3, r1, #0, #3
 8002fce:	7013      	strb	r3, [r2, #0]
		  if (DEBUG)
			  printf("SDCard mounting success!\n");
 8002fd0:	4808      	ldr	r0, [pc, #32]	; (8002ff4 <sdInit+0x48>)
 8002fd2:	f00f fc4d 	bl	8012870 <puts>
	  }else
	  {
		  statusRegister.SDCARD = SENSOR_INIT_FAIL;
		  //sdMountFailHandler();
	  }
}
 8002fd6:	e004      	b.n	8002fe2 <sdInit+0x36>
		  statusRegister.SDCARD = SENSOR_INIT_FAIL;
 8002fd8:	4a05      	ldr	r2, [pc, #20]	; (8002ff0 <sdInit+0x44>)
 8002fda:	7813      	ldrb	r3, [r2, #0]
 8002fdc:	f043 0307 	orr.w	r3, r3, #7
 8002fe0:	7013      	strb	r3, [r2, #0]
}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	080167b8 	.word	0x080167b8
 8002ff0:	200014ac 	.word	0x200014ac
 8002ff4:	080167bc 	.word	0x080167bc

08002ff8 <openAllFiles>:
void openAllFiles()
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
	if(statusRegister.SDCARD == SENSOR_OK)
 8002ffc:	4b19      	ldr	r3, [pc, #100]	; (8003064 <openAllFiles+0x6c>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b01      	cmp	r3, #1
 8003008:	d129      	bne.n	800305e <openAllFiles+0x66>
	{
		if(statusRegister.GYRO == SENSOR_OK){
 800300a:	4b16      	ldr	r3, [pc, #88]	; (8003064 <openAllFiles+0x6c>)
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b40      	cmp	r3, #64	; 0x40
 8003016:	d106      	bne.n	8003026 <openAllFiles+0x2e>
			openFile(gyro.File, gyro.path, FILE_DEFAULT_MODE);
 8003018:	4b13      	ldr	r3, [pc, #76]	; (8003068 <openAllFiles+0x70>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2232      	movs	r2, #50	; 0x32
 800301e:	4913      	ldr	r1, [pc, #76]	; (800306c <openAllFiles+0x74>)
 8003020:	4618      	mov	r0, r3
 8003022:	f000 f91f 	bl	8003264 <openFile>
		}
		if(statusRegister.MLXLF == SENSOR_OK){
 8003026:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <openAllFiles+0x6c>)
 8003028:	785b      	ldrb	r3, [r3, #1]
 800302a:	f003 030e 	and.w	r3, r3, #14
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d106      	bne.n	8003042 <openAllFiles+0x4a>
			openFile(mlxLFSensor.File, mlxLFSensor.path, FILE_DEFAULT_MODE);
 8003034:	4b0e      	ldr	r3, [pc, #56]	; (8003070 <openAllFiles+0x78>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2232      	movs	r2, #50	; 0x32
 800303a:	490e      	ldr	r1, [pc, #56]	; (8003074 <openAllFiles+0x7c>)
 800303c:	4618      	mov	r0, r3
 800303e:	f000 f911 	bl	8003264 <openFile>
		}
		if(statusRegister.VSSLF == SENSOR_OK){
 8003042:	4b08      	ldr	r3, [pc, #32]	; (8003064 <openAllFiles+0x6c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800304a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800304e:	d106      	bne.n	800305e <openAllFiles+0x66>
			openFile(absLFSensor.File, absLFSensor.path, FILE_DEFAULT_MODE);
 8003050:	4b09      	ldr	r3, [pc, #36]	; (8003078 <openAllFiles+0x80>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2232      	movs	r2, #50	; 0x32
 8003056:	4909      	ldr	r1, [pc, #36]	; (800307c <openAllFiles+0x84>)
 8003058:	4618      	mov	r0, r3
 800305a:	f000 f903 	bl	8003264 <openFile>
		}
		if(statusRegister.DamperLF == SENSOR_OK){

		}
	}
}
 800305e:	bf00      	nop
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	200014ac 	.word	0x200014ac
 8003068:	200054c0 	.word	0x200054c0
 800306c:	200054c4 	.word	0x200054c4
 8003070:	20001758 	.word	0x20001758
 8003074:	2000175c 	.word	0x2000175c
 8003078:	20005568 	.word	0x20005568
 800307c:	2000556c 	.word	0x2000556c

08003080 <createHeaders>:
int createHeaders(FIL * file,char * path)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08c      	sub	sp, #48	; 0x30
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
	FRESULT fres;
	UINT bytesWritten = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	627b      	str	r3, [r7, #36]	; 0x24

	fres = f_write(file,"timestamp,",strlen("timestamp,"),&bytesWritten);
 800308e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003092:	220a      	movs	r2, #10
 8003094:	4963      	ldr	r1, [pc, #396]	; (8003224 <createHeaders+0x1a4>)
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f00e f91b 	bl	80112d2 <f_write>
 800309c:	4603      	mov	r3, r0
 800309e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(fres != FR_OK){
 80030a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d006      	beq.n	80030b8 <createHeaders+0x38>
		printf("Error while creating %s header",path);
 80030aa:	6839      	ldr	r1, [r7, #0]
 80030ac:	485e      	ldr	r0, [pc, #376]	; (8003228 <createHeaders+0x1a8>)
 80030ae:	f00f fb43 	bl	8012738 <iprintf>
		return -1;
 80030b2:	f04f 33ff 	mov.w	r3, #4294967295
 80030b6:	e0b1      	b.n	800321c <createHeaders+0x19c>
	}

	if(strstr(path,"GYRO") != NULL){
 80030b8:	495c      	ldr	r1, [pc, #368]	; (800322c <createHeaders+0x1ac>)
 80030ba:	6838      	ldr	r0, [r7, #0]
 80030bc:	f00f fc16 	bl	80128ec <strstr>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <createHeaders+0x5c>
		fres = f_write(file, "gyro_x,gyro_y,gyro_z,acc_x,acc_y,acc_z\r\n", strlen("gyro_x,gyro_y,gyro_z,acc_x,acc_y,acc_z\r\n"), &bytesWritten);
 80030c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ca:	2228      	movs	r2, #40	; 0x28
 80030cc:	4958      	ldr	r1, [pc, #352]	; (8003230 <createHeaders+0x1b0>)
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f00e f8ff 	bl	80112d2 <f_write>
 80030d4:	4603      	mov	r3, r0
 80030d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80030da:	e089      	b.n	80031f0 <createHeaders+0x170>

	}else if(strstr(path,"MLX")!= NULL){
 80030dc:	4955      	ldr	r1, [pc, #340]	; (8003234 <createHeaders+0x1b4>)
 80030de:	6838      	ldr	r0, [r7, #0]
 80030e0:	f00f fc04 	bl	80128ec <strstr>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d049      	beq.n	800317e <createHeaders+0xfe>
		char headerData[25];
		fres =  f_write(file, "ID,", strlen("ID,"), &bytesWritten);
 80030ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ee:	2203      	movs	r2, #3
 80030f0:	4951      	ldr	r1, [pc, #324]	; (8003238 <createHeaders+0x1b8>)
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f00e f8ed 	bl	80112d2 <f_write>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for(int i=0;i<784;i++){
 80030fe:	2300      	movs	r3, #0
 8003100:	62bb      	str	r3, [r7, #40]	; 0x28
 8003102:	e037      	b.n	8003174 <createHeaders+0xf4>
			sprintf(headerData,"float_%d,", i);
 8003104:	f107 0308 	add.w	r3, r7, #8
 8003108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800310a:	494c      	ldr	r1, [pc, #304]	; (800323c <createHeaders+0x1bc>)
 800310c:	4618      	mov	r0, r3
 800310e:	f00f fbcd 	bl	80128ac <siprintf>
			fres = fres | f_write(file, headerData, strlen(headerData), &bytesWritten);
 8003112:	f107 0308 	add.w	r3, r7, #8
 8003116:	4618      	mov	r0, r3
 8003118:	f7fd f89c 	bl	8000254 <strlen>
 800311c:	4602      	mov	r2, r0
 800311e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003122:	f107 0108 	add.w	r1, r7, #8
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f00e f8d3 	bl	80112d2 <f_write>
 800312c:	4603      	mov	r3, r0
 800312e:	461a      	mov	r2, r3
 8003130:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003134:	4313      	orrs	r3, r2
 8003136:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			sprintf(headerData,"id,");
 800313a:	f107 0308 	add.w	r3, r7, #8
 800313e:	4940      	ldr	r1, [pc, #256]	; (8003240 <createHeaders+0x1c0>)
 8003140:	4618      	mov	r0, r3
 8003142:	f00f fbb3 	bl	80128ac <siprintf>
			fres =  fres | f_write(file, headerData, strlen(headerData), &bytesWritten);
 8003146:	f107 0308 	add.w	r3, r7, #8
 800314a:	4618      	mov	r0, r3
 800314c:	f7fd f882 	bl	8000254 <strlen>
 8003150:	4602      	mov	r2, r0
 8003152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003156:	f107 0108 	add.w	r1, r7, #8
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f00e f8b9 	bl	80112d2 <f_write>
 8003160:	4603      	mov	r3, r0
 8003162:	461a      	mov	r2, r3
 8003164:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003168:	4313      	orrs	r3, r2
 800316a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for(int i=0;i<784;i++){
 800316e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003170:	3301      	adds	r3, #1
 8003172:	62bb      	str	r3, [r7, #40]	; 0x28
 8003174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003176:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 800317a:	dbc3      	blt.n	8003104 <createHeaders+0x84>
 800317c:	e038      	b.n	80031f0 <createHeaders+0x170>
		}

	}else if(strstr(path,"ABS")!= NULL){
 800317e:	4931      	ldr	r1, [pc, #196]	; (8003244 <createHeaders+0x1c4>)
 8003180:	6838      	ldr	r0, [r7, #0]
 8003182:	f00f fbb3 	bl	80128ec <strstr>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00a      	beq.n	80031a2 <createHeaders+0x122>
		fres = f_write(file, "ID,speed\r\n", strlen("ID,speed\r\n"), &bytesWritten);
 800318c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003190:	220a      	movs	r2, #10
 8003192:	492d      	ldr	r1, [pc, #180]	; (8003248 <createHeaders+0x1c8>)
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f00e f89c 	bl	80112d2 <f_write>
 800319a:	4603      	mov	r3, r0
 800319c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80031a0:	e026      	b.n	80031f0 <createHeaders+0x170>
	}else if(strstr(path,"DAMP")!= NULL){
 80031a2:	492a      	ldr	r1, [pc, #168]	; (800324c <createHeaders+0x1cc>)
 80031a4:	6838      	ldr	r0, [r7, #0]
 80031a6:	f00f fba1 	bl	80128ec <strstr>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00a      	beq.n	80031c6 <createHeaders+0x146>
		fres = f_write(file, "ID,length\r\n", strlen("ID,length\r\n"), &bytesWritten);
 80031b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031b4:	220b      	movs	r2, #11
 80031b6:	4926      	ldr	r1, [pc, #152]	; (8003250 <createHeaders+0x1d0>)
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f00e f88a 	bl	80112d2 <f_write>
 80031be:	4603      	mov	r3, r0
 80031c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80031c4:	e014      	b.n	80031f0 <createHeaders+0x170>
	}else if(strstr(path,"WHEEL")!= NULL){
 80031c6:	4923      	ldr	r1, [pc, #140]	; (8003254 <createHeaders+0x1d4>)
 80031c8:	6838      	ldr	r0, [r7, #0]
 80031ca:	f00f fb8f 	bl	80128ec <strstr>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <createHeaders+0x16a>
		fres = f_write(file, "ID,angle\r\n", strlen("ID,angle\r\n"), &bytesWritten);
 80031d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031d8:	220a      	movs	r2, #10
 80031da:	491f      	ldr	r1, [pc, #124]	; (8003258 <createHeaders+0x1d8>)
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f00e f878 	bl	80112d2 <f_write>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80031e8:	e002      	b.n	80031f0 <createHeaders+0x170>
	}else
	{
		return -2;
 80031ea:	f06f 0301 	mvn.w	r3, #1
 80031ee:	e015      	b.n	800321c <createHeaders+0x19c>
	}

	if(fres != FR_OK){
 80031f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d006      	beq.n	8003206 <createHeaders+0x186>
		printf("Error while creating %s header\n",path);
 80031f8:	6839      	ldr	r1, [r7, #0]
 80031fa:	4818      	ldr	r0, [pc, #96]	; (800325c <createHeaders+0x1dc>)
 80031fc:	f00f fa9c 	bl	8012738 <iprintf>
		return -1;
 8003200:	f04f 33ff 	mov.w	r3, #4294967295
 8003204:	e00a      	b.n	800321c <createHeaders+0x19c>
	}
	fres =  f_write(file, "\n", strlen("\n"), &bytesWritten);
 8003206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800320a:	2201      	movs	r2, #1
 800320c:	4914      	ldr	r1, [pc, #80]	; (8003260 <createHeaders+0x1e0>)
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f00e f85f 	bl	80112d2 <f_write>
 8003214:	4603      	mov	r3, r0
 8003216:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	return 1;
 800321a:	2301      	movs	r3, #1

}
 800321c:	4618      	mov	r0, r3
 800321e:	3730      	adds	r7, #48	; 0x30
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	080167d8 	.word	0x080167d8
 8003228:	080167e4 	.word	0x080167e4
 800322c:	08016804 	.word	0x08016804
 8003230:	0801680c 	.word	0x0801680c
 8003234:	08016838 	.word	0x08016838
 8003238:	0801683c 	.word	0x0801683c
 800323c:	08016840 	.word	0x08016840
 8003240:	0801684c 	.word	0x0801684c
 8003244:	08016850 	.word	0x08016850
 8003248:	08016854 	.word	0x08016854
 800324c:	08016860 	.word	0x08016860
 8003250:	08016868 	.word	0x08016868
 8003254:	08016874 	.word	0x08016874
 8003258:	0801687c 	.word	0x0801687c
 800325c:	08016888 	.word	0x08016888
 8003260:	080168a8 	.word	0x080168a8

08003264 <openFile>:


int openFile(FIL * file, char * path, BYTE mode)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b08c      	sub	sp, #48	; 0x30
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	4613      	mov	r3, r2
 8003270:	71fb      	strb	r3, [r7, #7]
	FILINFO fInfo;
	FRESULT fres = f_stat(path, &fInfo);
 8003272:	f107 0310 	add.w	r3, r7, #16
 8003276:	4619      	mov	r1, r3
 8003278:	68b8      	ldr	r0, [r7, #8]
 800327a:	f00e fa66 	bl	801174a <f_stat>
 800327e:	4603      	mov	r3, r0
 8003280:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(fres == FR_OK)
 8003284:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003288:	2b00      	cmp	r3, #0
 800328a:	d114      	bne.n	80032b6 <openFile+0x52>
	{

		fres = f_open(file, _TEXT(path), mode);
 800328c:	79fb      	ldrb	r3, [r7, #7]
 800328e:	461a      	mov	r2, r3
 8003290:	68b9      	ldr	r1, [r7, #8]
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f00d fcf2 	bl	8010c7c <f_open>
 8003298:	4603      	mov	r3, r0
 800329a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(fres == FR_OK)
 800329e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d104      	bne.n	80032b0 <openFile+0x4c>
		{
			printf("Opening file: %s succeeded\n", path);
 80032a6:	68b9      	ldr	r1, [r7, #8]
 80032a8:	4818      	ldr	r0, [pc, #96]	; (800330c <openFile+0xa8>)
 80032aa:	f00f fa45 	bl	8012738 <iprintf>
 80032ae:	e025      	b.n	80032fc <openFile+0x98>
		}else
		{
			return -1;
 80032b0:	f04f 33ff 	mov.w	r3, #4294967295
 80032b4:	e026      	b.n	8003304 <openFile+0xa0>
		}
	}else if(fres == FR_NO_FILE)
 80032b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d11e      	bne.n	80032fc <openFile+0x98>
	{
		fres = f_open(file, _TEXT(path), mode);
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	461a      	mov	r2, r3
 80032c2:	68b9      	ldr	r1, [r7, #8]
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f00d fcd9 	bl	8010c7c <f_open>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(fres == FR_OK)
 80032d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10e      	bne.n	80032f6 <openFile+0x92>
		{
			int res = createHeaders(file,path);
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f7ff fed0 	bl	8003080 <createHeaders>
 80032e0:	62b8      	str	r0, [r7, #40]	; 0x28
			if(res != 1)
 80032e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d001      	beq.n	80032ec <openFile+0x88>
			{
				return res;
 80032e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ea:	e00b      	b.n	8003304 <openFile+0xa0>
			}

			printf("No file: %s, created new\n", path);
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	4808      	ldr	r0, [pc, #32]	; (8003310 <openFile+0xac>)
 80032f0:	f00f fa22 	bl	8012738 <iprintf>
 80032f4:	e002      	b.n	80032fc <openFile+0x98>

		}else
		{
			return -1;
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295
 80032fa:	e003      	b.n	8003304 <openFile+0xa0>
		}
	}
	f_sync(file);
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f00e f97c 	bl	80115fa <f_sync>
	return 1;
 8003302:	2301      	movs	r3, #1


}
 8003304:	4618      	mov	r0, r3
 8003306:	3730      	adds	r7, #48	; 0x30
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	080168ac 	.word	0x080168ac
 8003310:	080168c8 	.word	0x080168c8

08003314 <gyroSaveData>:

void gyroSaveData(GyroSensor* sens)
{
 8003314:	b590      	push	{r4, r7, lr}
 8003316:	b0c7      	sub	sp, #284	; 0x11c
 8003318:	af00      	add	r7, sp, #0
 800331a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800331e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003322:	6018      	str	r0, [r3, #0]
	char dataBuffer[255];
	int writedBytes;
	FRESULT status = 0;
 8003324:	2300      	movs	r3, #0
 8003326:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	//Save time stamp
	sprintf(dataBuffer, "%d,", HAL_GetTick());
 800332a:	f002 fb7f 	bl	8005a2c <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	f107 030c 	add.w	r3, r7, #12
 8003334:	496c      	ldr	r1, [pc, #432]	; (80034e8 <gyroSaveData+0x1d4>)
 8003336:	4618      	mov	r0, r3
 8003338:	f00f fab8 	bl	80128ac <siprintf>
	status = f_write(sens->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 800333c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003340:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681c      	ldr	r4, [r3, #0]
 8003348:	f107 030c 	add.w	r3, r7, #12
 800334c:	4618      	mov	r0, r3
 800334e:	f7fc ff81 	bl	8000254 <strlen>
 8003352:	4602      	mov	r2, r0
 8003354:	f107 0308 	add.w	r3, r7, #8
 8003358:	f107 010c 	add.w	r1, r7, #12
 800335c:	4620      	mov	r0, r4
 800335e:	f00d ffb8 	bl	80112d2 <f_write>
 8003362:	4603      	mov	r3, r0
 8003364:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	for (int i = 0; i < 3; i++)
 8003368:	2300      	movs	r3, #0
 800336a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800336e:	e02f      	b.n	80033d0 <gyroSaveData+0xbc>
	{
		sprintf(dataBuffer, "%f,", sens->data.gyro_data_calc[i]);
 8003370:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003374:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800337e:	3308      	adds	r3, #8
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4413      	add	r3, r2
 8003384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003388:	f107 000c 	add.w	r0, r7, #12
 800338c:	4957      	ldr	r1, [pc, #348]	; (80034ec <gyroSaveData+0x1d8>)
 800338e:	f00f fa8d 	bl	80128ac <siprintf>
		status = status | f_write(sens->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 8003392:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003396:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681c      	ldr	r4, [r3, #0]
 800339e:	f107 030c 	add.w	r3, r7, #12
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fc ff56 	bl	8000254 <strlen>
 80033a8:	4602      	mov	r2, r0
 80033aa:	f107 0308 	add.w	r3, r7, #8
 80033ae:	f107 010c 	add.w	r1, r7, #12
 80033b2:	4620      	mov	r0, r4
 80033b4:	f00d ff8d 	bl	80112d2 <f_write>
 80033b8:	4603      	mov	r3, r0
 80033ba:	461a      	mov	r2, r3
 80033bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	for (int i = 0; i < 3; i++)
 80033c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80033ca:	3301      	adds	r3, #1
 80033cc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80033d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	ddcb      	ble.n	8003370 <gyroSaveData+0x5c>

	}
	for (int i = 0; i < 3; i++)
 80033d8:	2300      	movs	r3, #0
 80033da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80033de:	e02f      	b.n	8003440 <gyroSaveData+0x12c>
	{
		sprintf(dataBuffer, "%f,", sens->data.acc_data_calc[i]);
 80033e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80033e4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ee:	3305      	adds	r3, #5
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4413      	add	r3, r2
 80033f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f8:	f107 000c 	add.w	r0, r7, #12
 80033fc:	493b      	ldr	r1, [pc, #236]	; (80034ec <gyroSaveData+0x1d8>)
 80033fe:	f00f fa55 	bl	80128ac <siprintf>
		status = status | f_write(sens->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 8003402:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003406:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681c      	ldr	r4, [r3, #0]
 800340e:	f107 030c 	add.w	r3, r7, #12
 8003412:	4618      	mov	r0, r3
 8003414:	f7fc ff1e 	bl	8000254 <strlen>
 8003418:	4602      	mov	r2, r0
 800341a:	f107 0308 	add.w	r3, r7, #8
 800341e:	f107 010c 	add.w	r1, r7, #12
 8003422:	4620      	mov	r0, r4
 8003424:	f00d ff55 	bl	80112d2 <f_write>
 8003428:	4603      	mov	r3, r0
 800342a:	461a      	mov	r2, r3
 800342c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003430:	4313      	orrs	r3, r2
 8003432:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	for (int i = 0; i < 3; i++)
 8003436:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800343a:	3301      	adds	r3, #1
 800343c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003440:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003444:	2b02      	cmp	r3, #2
 8003446:	ddcb      	ble.n	80033e0 <gyroSaveData+0xcc>
	}

	sprintf(dataBuffer, "\r\n ");
 8003448:	f107 030c 	add.w	r3, r7, #12
 800344c:	4928      	ldr	r1, [pc, #160]	; (80034f0 <gyroSaveData+0x1dc>)
 800344e:	4618      	mov	r0, r3
 8003450:	f00f fa2c 	bl	80128ac <siprintf>

	status = status | f_write(sens->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 8003454:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003458:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681c      	ldr	r4, [r3, #0]
 8003460:	f107 030c 	add.w	r3, r7, #12
 8003464:	4618      	mov	r0, r3
 8003466:	f7fc fef5 	bl	8000254 <strlen>
 800346a:	4602      	mov	r2, r0
 800346c:	f107 0308 	add.w	r3, r7, #8
 8003470:	f107 010c 	add.w	r1, r7, #12
 8003474:	4620      	mov	r0, r4
 8003476:	f00d ff2c 	bl	80112d2 <f_write>
 800347a:	4603      	mov	r3, r0
 800347c:	461a      	mov	r2, r3
 800347e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003482:	4313      	orrs	r3, r2
 8003484:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	if(status != 0 && statusRegister.SDCARD < SENSOR_FAIL && statusRegister.SDCARD > SENSOR_OFF)
 8003488:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800348c:	2b00      	cmp	r3, #0
 800348e:	d01c      	beq.n	80034ca <gyroSaveData+0x1b6>
 8003490:	4b18      	ldr	r3, [pc, #96]	; (80034f4 <gyroSaveData+0x1e0>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b03      	cmp	r3, #3
 800349c:	d815      	bhi.n	80034ca <gyroSaveData+0x1b6>
 800349e:	4b15      	ldr	r3, [pc, #84]	; (80034f4 <gyroSaveData+0x1e0>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00e      	beq.n	80034ca <gyroSaveData+0x1b6>
	{
		statusRegister.SDCARD += 1;
 80034ac:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <gyroSaveData+0x1e0>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	3301      	adds	r3, #1
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	b2d9      	uxtb	r1, r3
 80034c0:	4a0c      	ldr	r2, [pc, #48]	; (80034f4 <gyroSaveData+0x1e0>)
 80034c2:	7813      	ldrb	r3, [r2, #0]
 80034c4:	f361 0302 	bfi	r3, r1, #0, #3
 80034c8:	7013      	strb	r3, [r2, #0]
	}
	f_sync(sens->File);
 80034ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80034ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f00e f88f 	bl	80115fa <f_sync>

}
 80034dc:	bf00      	nop
 80034de:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd90      	pop	{r4, r7, pc}
 80034e6:	bf00      	nop
 80034e8:	080168e4 	.word	0x080168e4
 80034ec:	080168e8 	.word	0x080168e8
 80034f0:	080168ec 	.word	0x080168ec
 80034f4:	200014ac 	.word	0x200014ac

080034f8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80034fe:	463b      	mov	r3, r7
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	605a      	str	r2, [r3, #4]
 8003506:	609a      	str	r2, [r3, #8]
 8003508:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800350a:	4b21      	ldr	r3, [pc, #132]	; (8003590 <MX_ADC1_Init+0x98>)
 800350c:	4a21      	ldr	r2, [pc, #132]	; (8003594 <MX_ADC1_Init+0x9c>)
 800350e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003510:	4b1f      	ldr	r3, [pc, #124]	; (8003590 <MX_ADC1_Init+0x98>)
 8003512:	2200      	movs	r2, #0
 8003514:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003516:	4b1e      	ldr	r3, [pc, #120]	; (8003590 <MX_ADC1_Init+0x98>)
 8003518:	2200      	movs	r2, #0
 800351a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800351c:	4b1c      	ldr	r3, [pc, #112]	; (8003590 <MX_ADC1_Init+0x98>)
 800351e:	2200      	movs	r2, #0
 8003520:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003522:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <MX_ADC1_Init+0x98>)
 8003524:	2200      	movs	r2, #0
 8003526:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003528:	4b19      	ldr	r3, [pc, #100]	; (8003590 <MX_ADC1_Init+0x98>)
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003530:	4b17      	ldr	r3, [pc, #92]	; (8003590 <MX_ADC1_Init+0x98>)
 8003532:	2200      	movs	r2, #0
 8003534:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003536:	4b16      	ldr	r3, [pc, #88]	; (8003590 <MX_ADC1_Init+0x98>)
 8003538:	4a17      	ldr	r2, [pc, #92]	; (8003598 <MX_ADC1_Init+0xa0>)
 800353a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800353c:	4b14      	ldr	r3, [pc, #80]	; (8003590 <MX_ADC1_Init+0x98>)
 800353e:	2200      	movs	r2, #0
 8003540:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003542:	4b13      	ldr	r3, [pc, #76]	; (8003590 <MX_ADC1_Init+0x98>)
 8003544:	2201      	movs	r2, #1
 8003546:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003548:	4b11      	ldr	r3, [pc, #68]	; (8003590 <MX_ADC1_Init+0x98>)
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003550:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <MX_ADC1_Init+0x98>)
 8003552:	2201      	movs	r2, #1
 8003554:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003556:	480e      	ldr	r0, [pc, #56]	; (8003590 <MX_ADC1_Init+0x98>)
 8003558:	f002 fa98 	bl	8005a8c <HAL_ADC_Init>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8003562:	f001 f91f 	bl	80047a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003566:	2300      	movs	r3, #0
 8003568:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800356a:	2301      	movs	r3, #1
 800356c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800356e:	2300      	movs	r3, #0
 8003570:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003572:	463b      	mov	r3, r7
 8003574:	4619      	mov	r1, r3
 8003576:	4806      	ldr	r0, [pc, #24]	; (8003590 <MX_ADC1_Init+0x98>)
 8003578:	f002 fd60 	bl	800603c <HAL_ADC_ConfigChannel>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8003582:	f001 f90f 	bl	80047a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003586:	bf00      	nop
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	2000021c 	.word	0x2000021c
 8003594:	40012000 	.word	0x40012000
 8003598:	0f000001 	.word	0x0f000001

0800359c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80035a2:	463b      	mov	r3, r7
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	609a      	str	r2, [r3, #8]
 80035ac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80035ae:	4b21      	ldr	r3, [pc, #132]	; (8003634 <MX_ADC2_Init+0x98>)
 80035b0:	4a21      	ldr	r2, [pc, #132]	; (8003638 <MX_ADC2_Init+0x9c>)
 80035b2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80035b4:	4b1f      	ldr	r3, [pc, #124]	; (8003634 <MX_ADC2_Init+0x98>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80035ba:	4b1e      	ldr	r3, [pc, #120]	; (8003634 <MX_ADC2_Init+0x98>)
 80035bc:	2200      	movs	r2, #0
 80035be:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80035c0:	4b1c      	ldr	r3, [pc, #112]	; (8003634 <MX_ADC2_Init+0x98>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80035c6:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <MX_ADC2_Init+0x98>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80035cc:	4b19      	ldr	r3, [pc, #100]	; (8003634 <MX_ADC2_Init+0x98>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80035d4:	4b17      	ldr	r3, [pc, #92]	; (8003634 <MX_ADC2_Init+0x98>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80035da:	4b16      	ldr	r3, [pc, #88]	; (8003634 <MX_ADC2_Init+0x98>)
 80035dc:	4a17      	ldr	r2, [pc, #92]	; (800363c <MX_ADC2_Init+0xa0>)
 80035de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80035e0:	4b14      	ldr	r3, [pc, #80]	; (8003634 <MX_ADC2_Init+0x98>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80035e6:	4b13      	ldr	r3, [pc, #76]	; (8003634 <MX_ADC2_Init+0x98>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80035ec:	4b11      	ldr	r3, [pc, #68]	; (8003634 <MX_ADC2_Init+0x98>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80035f4:	4b0f      	ldr	r3, [pc, #60]	; (8003634 <MX_ADC2_Init+0x98>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80035fa:	480e      	ldr	r0, [pc, #56]	; (8003634 <MX_ADC2_Init+0x98>)
 80035fc:	f002 fa46 	bl	8005a8c <HAL_ADC_Init>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8003606:	f001 f8cd 	bl	80047a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800360a:	2301      	movs	r3, #1
 800360c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800360e:	2301      	movs	r3, #1
 8003610:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003612:	2300      	movs	r3, #0
 8003614:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003616:	463b      	mov	r3, r7
 8003618:	4619      	mov	r1, r3
 800361a:	4806      	ldr	r0, [pc, #24]	; (8003634 <MX_ADC2_Init+0x98>)
 800361c:	f002 fd0e 	bl	800603c <HAL_ADC_ConfigChannel>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8003626:	f001 f8bd 	bl	80047a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800362a:	bf00      	nop
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	20000264 	.word	0x20000264
 8003638:	40012100 	.word	0x40012100
 800363c:	0f000001 	.word	0x0f000001

08003640 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003646:	463b      	mov	r3, r7
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	605a      	str	r2, [r3, #4]
 800364e:	609a      	str	r2, [r3, #8]
 8003650:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8003652:	4b21      	ldr	r3, [pc, #132]	; (80036d8 <MX_ADC3_Init+0x98>)
 8003654:	4a21      	ldr	r2, [pc, #132]	; (80036dc <MX_ADC3_Init+0x9c>)
 8003656:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003658:	4b1f      	ldr	r3, [pc, #124]	; (80036d8 <MX_ADC3_Init+0x98>)
 800365a:	2200      	movs	r2, #0
 800365c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800365e:	4b1e      	ldr	r3, [pc, #120]	; (80036d8 <MX_ADC3_Init+0x98>)
 8003660:	2200      	movs	r2, #0
 8003662:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003664:	4b1c      	ldr	r3, [pc, #112]	; (80036d8 <MX_ADC3_Init+0x98>)
 8003666:	2200      	movs	r2, #0
 8003668:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800366a:	4b1b      	ldr	r3, [pc, #108]	; (80036d8 <MX_ADC3_Init+0x98>)
 800366c:	2200      	movs	r2, #0
 800366e:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003670:	4b19      	ldr	r3, [pc, #100]	; (80036d8 <MX_ADC3_Init+0x98>)
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003678:	4b17      	ldr	r3, [pc, #92]	; (80036d8 <MX_ADC3_Init+0x98>)
 800367a:	2200      	movs	r2, #0
 800367c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800367e:	4b16      	ldr	r3, [pc, #88]	; (80036d8 <MX_ADC3_Init+0x98>)
 8003680:	4a17      	ldr	r2, [pc, #92]	; (80036e0 <MX_ADC3_Init+0xa0>)
 8003682:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003684:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <MX_ADC3_Init+0x98>)
 8003686:	2200      	movs	r2, #0
 8003688:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800368a:	4b13      	ldr	r3, [pc, #76]	; (80036d8 <MX_ADC3_Init+0x98>)
 800368c:	2201      	movs	r2, #1
 800368e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8003690:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <MX_ADC3_Init+0x98>)
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003698:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <MX_ADC3_Init+0x98>)
 800369a:	2201      	movs	r2, #1
 800369c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800369e:	480e      	ldr	r0, [pc, #56]	; (80036d8 <MX_ADC3_Init+0x98>)
 80036a0:	f002 f9f4 	bl	8005a8c <HAL_ADC_Init>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 80036aa:	f001 f87b 	bl	80047a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80036ae:	2309      	movs	r3, #9
 80036b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80036b2:	2301      	movs	r3, #1
 80036b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80036b6:	2307      	movs	r3, #7
 80036b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80036ba:	463b      	mov	r3, r7
 80036bc:	4619      	mov	r1, r3
 80036be:	4806      	ldr	r0, [pc, #24]	; (80036d8 <MX_ADC3_Init+0x98>)
 80036c0:	f002 fcbc 	bl	800603c <HAL_ADC_ConfigChannel>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 80036ca:	f001 f86b 	bl	80047a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80036ce:	bf00      	nop
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	200002ac 	.word	0x200002ac
 80036dc:	40012200 	.word	0x40012200
 80036e0:	0f000001 	.word	0x0f000001

080036e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08e      	sub	sp, #56	; 0x38
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	605a      	str	r2, [r3, #4]
 80036f6:	609a      	str	r2, [r3, #8]
 80036f8:	60da      	str	r2, [r3, #12]
 80036fa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a57      	ldr	r2, [pc, #348]	; (8003860 <HAL_ADC_MspInit+0x17c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d12c      	bne.n	8003760 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003706:	4b57      	ldr	r3, [pc, #348]	; (8003864 <HAL_ADC_MspInit+0x180>)
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	4a56      	ldr	r2, [pc, #344]	; (8003864 <HAL_ADC_MspInit+0x180>)
 800370c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003710:	6453      	str	r3, [r2, #68]	; 0x44
 8003712:	4b54      	ldr	r3, [pc, #336]	; (8003864 <HAL_ADC_MspInit+0x180>)
 8003714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371a:	623b      	str	r3, [r7, #32]
 800371c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800371e:	4b51      	ldr	r3, [pc, #324]	; (8003864 <HAL_ADC_MspInit+0x180>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	4a50      	ldr	r2, [pc, #320]	; (8003864 <HAL_ADC_MspInit+0x180>)
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	6313      	str	r3, [r2, #48]	; 0x30
 800372a:	4b4e      	ldr	r3, [pc, #312]	; (8003864 <HAL_ADC_MspInit+0x180>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	61fb      	str	r3, [r7, #28]
 8003734:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003736:	2301      	movs	r3, #1
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800373a:	2303      	movs	r3, #3
 800373c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373e:	2300      	movs	r3, #0
 8003740:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003746:	4619      	mov	r1, r3
 8003748:	4847      	ldr	r0, [pc, #284]	; (8003868 <HAL_ADC_MspInit+0x184>)
 800374a:	f003 fcf5 	bl	8007138 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800374e:	2200      	movs	r2, #0
 8003750:	2100      	movs	r1, #0
 8003752:	2012      	movs	r0, #18
 8003754:	f003 f8a3 	bl	800689e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003758:	2012      	movs	r0, #18
 800375a:	f003 f8bc 	bl	80068d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800375e:	e07a      	b.n	8003856 <HAL_ADC_MspInit+0x172>
  else if(adcHandle->Instance==ADC2)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a41      	ldr	r2, [pc, #260]	; (800386c <HAL_ADC_MspInit+0x188>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d12c      	bne.n	80037c4 <HAL_ADC_MspInit+0xe0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800376a:	4b3e      	ldr	r3, [pc, #248]	; (8003864 <HAL_ADC_MspInit+0x180>)
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	4a3d      	ldr	r2, [pc, #244]	; (8003864 <HAL_ADC_MspInit+0x180>)
 8003770:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003774:	6453      	str	r3, [r2, #68]	; 0x44
 8003776:	4b3b      	ldr	r3, [pc, #236]	; (8003864 <HAL_ADC_MspInit+0x180>)
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800377e:	61bb      	str	r3, [r7, #24]
 8003780:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003782:	4b38      	ldr	r3, [pc, #224]	; (8003864 <HAL_ADC_MspInit+0x180>)
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	4a37      	ldr	r2, [pc, #220]	; (8003864 <HAL_ADC_MspInit+0x180>)
 8003788:	f043 0301 	orr.w	r3, r3, #1
 800378c:	6313      	str	r3, [r2, #48]	; 0x30
 800378e:	4b35      	ldr	r3, [pc, #212]	; (8003864 <HAL_ADC_MspInit+0x180>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800379a:	2302      	movs	r3, #2
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800379e:	2303      	movs	r3, #3
 80037a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a2:	2300      	movs	r3, #0
 80037a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037aa:	4619      	mov	r1, r3
 80037ac:	482e      	ldr	r0, [pc, #184]	; (8003868 <HAL_ADC_MspInit+0x184>)
 80037ae:	f003 fcc3 	bl	8007138 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80037b2:	2200      	movs	r2, #0
 80037b4:	2100      	movs	r1, #0
 80037b6:	2012      	movs	r0, #18
 80037b8:	f003 f871 	bl	800689e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80037bc:	2012      	movs	r0, #18
 80037be:	f003 f88a 	bl	80068d6 <HAL_NVIC_EnableIRQ>
}
 80037c2:	e048      	b.n	8003856 <HAL_ADC_MspInit+0x172>
  else if(adcHandle->Instance==ADC3)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a29      	ldr	r2, [pc, #164]	; (8003870 <HAL_ADC_MspInit+0x18c>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d143      	bne.n	8003856 <HAL_ADC_MspInit+0x172>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80037ce:	4b25      	ldr	r3, [pc, #148]	; (8003864 <HAL_ADC_MspInit+0x180>)
 80037d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d2:	4a24      	ldr	r2, [pc, #144]	; (8003864 <HAL_ADC_MspInit+0x180>)
 80037d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037d8:	6453      	str	r3, [r2, #68]	; 0x44
 80037da:	4b22      	ldr	r3, [pc, #136]	; (8003864 <HAL_ADC_MspInit+0x180>)
 80037dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80037e6:	4b1f      	ldr	r3, [pc, #124]	; (8003864 <HAL_ADC_MspInit+0x180>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	4a1e      	ldr	r2, [pc, #120]	; (8003864 <HAL_ADC_MspInit+0x180>)
 80037ec:	f043 0320 	orr.w	r3, r3, #32
 80037f0:	6313      	str	r3, [r2, #48]	; 0x30
 80037f2:	4b1c      	ldr	r3, [pc, #112]	; (8003864 <HAL_ADC_MspInit+0x180>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	f003 0320 	and.w	r3, r3, #32
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037fe:	4b19      	ldr	r3, [pc, #100]	; (8003864 <HAL_ADC_MspInit+0x180>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	4a18      	ldr	r2, [pc, #96]	; (8003864 <HAL_ADC_MspInit+0x180>)
 8003804:	f043 0304 	orr.w	r3, r3, #4
 8003808:	6313      	str	r3, [r2, #48]	; 0x30
 800380a:	4b16      	ldr	r3, [pc, #88]	; (8003864 <HAL_ADC_MspInit+0x180>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	f003 0304 	and.w	r3, r3, #4
 8003812:	60bb      	str	r3, [r7, #8]
 8003814:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003816:	2328      	movs	r3, #40	; 0x28
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800381a:	2303      	movs	r3, #3
 800381c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381e:	2300      	movs	r3, #0
 8003820:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003826:	4619      	mov	r1, r3
 8003828:	4812      	ldr	r0, [pc, #72]	; (8003874 <HAL_ADC_MspInit+0x190>)
 800382a:	f003 fc85 	bl	8007138 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800382e:	230c      	movs	r3, #12
 8003830:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003832:	2303      	movs	r3, #3
 8003834:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003836:	2300      	movs	r3, #0
 8003838:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800383a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800383e:	4619      	mov	r1, r3
 8003840:	480d      	ldr	r0, [pc, #52]	; (8003878 <HAL_ADC_MspInit+0x194>)
 8003842:	f003 fc79 	bl	8007138 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003846:	2200      	movs	r2, #0
 8003848:	2100      	movs	r1, #0
 800384a:	2012      	movs	r0, #18
 800384c:	f003 f827 	bl	800689e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003850:	2012      	movs	r0, #18
 8003852:	f003 f840 	bl	80068d6 <HAL_NVIC_EnableIRQ>
}
 8003856:	bf00      	nop
 8003858:	3738      	adds	r7, #56	; 0x38
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40012000 	.word	0x40012000
 8003864:	40023800 	.word	0x40023800
 8003868:	40020000 	.word	0x40020000
 800386c:	40012100 	.word	0x40012100
 8003870:	40012200 	.word	0x40012200
 8003874:	40021400 	.word	0x40021400
 8003878:	40020800 	.word	0x40020800

0800387c <__io_putchar>:
			}
	}
		HAL_UART_Transmit(&huart7, EndMSG, sizeof(EndMSG), 10000);
};

int __io_putchar(int ch){
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
	if(ch == '\n')
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b0a      	cmp	r3, #10
 8003888:	d106      	bne.n	8003898 <__io_putchar+0x1c>
	{
		HAL_UART_Transmit(&huart7, (uint8_t*)"\r", 1, HAL_MAX_DELAY);
 800388a:	f04f 33ff 	mov.w	r3, #4294967295
 800388e:	2201      	movs	r2, #1
 8003890:	4907      	ldr	r1, [pc, #28]	; (80038b0 <__io_putchar+0x34>)
 8003892:	4808      	ldr	r0, [pc, #32]	; (80038b4 <__io_putchar+0x38>)
 8003894:	f009 f8d0 	bl	800ca38 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&huart7, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8003898:	1d39      	adds	r1, r7, #4
 800389a:	f04f 33ff 	mov.w	r3, #4294967295
 800389e:	2201      	movs	r2, #1
 80038a0:	4804      	ldr	r0, [pc, #16]	; (80038b4 <__io_putchar+0x38>)
 80038a2:	f009 f8c9 	bl	800ca38 <HAL_UART_Transmit>
	return 1;
 80038a6:	2301      	movs	r3, #1
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	08016958 	.word	0x08016958
 80038b4:	200056b8 	.word	0x200056b8

080038b8 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80038bc:	4b16      	ldr	r3, [pc, #88]	; (8003918 <MX_CAN1_Init+0x60>)
 80038be:	4a17      	ldr	r2, [pc, #92]	; (800391c <MX_CAN1_Init+0x64>)
 80038c0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80038c2:	4b15      	ldr	r3, [pc, #84]	; (8003918 <MX_CAN1_Init+0x60>)
 80038c4:	2210      	movs	r2, #16
 80038c6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80038c8:	4b13      	ldr	r3, [pc, #76]	; (8003918 <MX_CAN1_Init+0x60>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80038ce:	4b12      	ldr	r3, [pc, #72]	; (8003918 <MX_CAN1_Init+0x60>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80038d4:	4b10      	ldr	r3, [pc, #64]	; (8003918 <MX_CAN1_Init+0x60>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80038da:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <MX_CAN1_Init+0x60>)
 80038dc:	2200      	movs	r2, #0
 80038de:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80038e0:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <MX_CAN1_Init+0x60>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80038e6:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <MX_CAN1_Init+0x60>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80038ec:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <MX_CAN1_Init+0x60>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80038f2:	4b09      	ldr	r3, [pc, #36]	; (8003918 <MX_CAN1_Init+0x60>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80038f8:	4b07      	ldr	r3, [pc, #28]	; (8003918 <MX_CAN1_Init+0x60>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80038fe:	4b06      	ldr	r3, [pc, #24]	; (8003918 <MX_CAN1_Init+0x60>)
 8003900:	2200      	movs	r2, #0
 8003902:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003904:	4804      	ldr	r0, [pc, #16]	; (8003918 <MX_CAN1_Init+0x60>)
 8003906:	f002 fdf3 	bl	80064f0 <HAL_CAN_Init>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8003910:	f000 ff48 	bl	80047a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003914:	bf00      	nop
 8003916:	bd80      	pop	{r7, pc}
 8003918:	200002f4 	.word	0x200002f4
 800391c:	40006400 	.word	0x40006400

08003920 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8003924:	4b16      	ldr	r3, [pc, #88]	; (8003980 <MX_CAN2_Init+0x60>)
 8003926:	4a17      	ldr	r2, [pc, #92]	; (8003984 <MX_CAN2_Init+0x64>)
 8003928:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800392a:	4b15      	ldr	r3, [pc, #84]	; (8003980 <MX_CAN2_Init+0x60>)
 800392c:	2210      	movs	r2, #16
 800392e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8003930:	4b13      	ldr	r3, [pc, #76]	; (8003980 <MX_CAN2_Init+0x60>)
 8003932:	2200      	movs	r2, #0
 8003934:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003936:	4b12      	ldr	r3, [pc, #72]	; (8003980 <MX_CAN2_Init+0x60>)
 8003938:	2200      	movs	r2, #0
 800393a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 800393c:	4b10      	ldr	r3, [pc, #64]	; (8003980 <MX_CAN2_Init+0x60>)
 800393e:	2200      	movs	r2, #0
 8003940:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003942:	4b0f      	ldr	r3, [pc, #60]	; (8003980 <MX_CAN2_Init+0x60>)
 8003944:	2200      	movs	r2, #0
 8003946:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8003948:	4b0d      	ldr	r3, [pc, #52]	; (8003980 <MX_CAN2_Init+0x60>)
 800394a:	2200      	movs	r2, #0
 800394c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800394e:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <MX_CAN2_Init+0x60>)
 8003950:	2200      	movs	r2, #0
 8003952:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8003954:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <MX_CAN2_Init+0x60>)
 8003956:	2200      	movs	r2, #0
 8003958:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800395a:	4b09      	ldr	r3, [pc, #36]	; (8003980 <MX_CAN2_Init+0x60>)
 800395c:	2200      	movs	r2, #0
 800395e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8003960:	4b07      	ldr	r3, [pc, #28]	; (8003980 <MX_CAN2_Init+0x60>)
 8003962:	2200      	movs	r2, #0
 8003964:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8003966:	4b06      	ldr	r3, [pc, #24]	; (8003980 <MX_CAN2_Init+0x60>)
 8003968:	2200      	movs	r2, #0
 800396a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800396c:	4804      	ldr	r0, [pc, #16]	; (8003980 <MX_CAN2_Init+0x60>)
 800396e:	f002 fdbf 	bl	80064f0 <HAL_CAN_Init>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8003978:	f000 ff14 	bl	80047a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800397c:	bf00      	nop
 800397e:	bd80      	pop	{r7, pc}
 8003980:	2000031c 	.word	0x2000031c
 8003984:	40006800 	.word	0x40006800

08003988 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08e      	sub	sp, #56	; 0x38
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	605a      	str	r2, [r3, #4]
 800399a:	609a      	str	r2, [r3, #8]
 800399c:	60da      	str	r2, [r3, #12]
 800399e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a43      	ldr	r2, [pc, #268]	; (8003ab4 <HAL_CAN_MspInit+0x12c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d131      	bne.n	8003a0e <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80039aa:	4b43      	ldr	r3, [pc, #268]	; (8003ab8 <HAL_CAN_MspInit+0x130>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3301      	adds	r3, #1
 80039b0:	4a41      	ldr	r2, [pc, #260]	; (8003ab8 <HAL_CAN_MspInit+0x130>)
 80039b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80039b4:	4b40      	ldr	r3, [pc, #256]	; (8003ab8 <HAL_CAN_MspInit+0x130>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d10b      	bne.n	80039d4 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80039bc:	4b3f      	ldr	r3, [pc, #252]	; (8003abc <HAL_CAN_MspInit+0x134>)
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	4a3e      	ldr	r2, [pc, #248]	; (8003abc <HAL_CAN_MspInit+0x134>)
 80039c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039c6:	6413      	str	r3, [r2, #64]	; 0x40
 80039c8:	4b3c      	ldr	r3, [pc, #240]	; (8003abc <HAL_CAN_MspInit+0x134>)
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d0:	623b      	str	r3, [r7, #32]
 80039d2:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039d4:	4b39      	ldr	r3, [pc, #228]	; (8003abc <HAL_CAN_MspInit+0x134>)
 80039d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d8:	4a38      	ldr	r2, [pc, #224]	; (8003abc <HAL_CAN_MspInit+0x134>)
 80039da:	f043 0308 	orr.w	r3, r3, #8
 80039de:	6313      	str	r3, [r2, #48]	; 0x30
 80039e0:	4b36      	ldr	r3, [pc, #216]	; (8003abc <HAL_CAN_MspInit+0x134>)
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	61fb      	str	r3, [r7, #28]
 80039ea:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80039ec:	2303      	movs	r3, #3
 80039ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f0:	2302      	movs	r3, #2
 80039f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f4:	2300      	movs	r3, #0
 80039f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f8:	2303      	movs	r3, #3
 80039fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80039fc:	2309      	movs	r3, #9
 80039fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a04:	4619      	mov	r1, r3
 8003a06:	482e      	ldr	r0, [pc, #184]	; (8003ac0 <HAL_CAN_MspInit+0x138>)
 8003a08:	f003 fb96 	bl	8007138 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8003a0c:	e04e      	b.n	8003aac <HAL_CAN_MspInit+0x124>
  else if(canHandle->Instance==CAN2)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a2c      	ldr	r2, [pc, #176]	; (8003ac4 <HAL_CAN_MspInit+0x13c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d149      	bne.n	8003aac <HAL_CAN_MspInit+0x124>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8003a18:	4b28      	ldr	r3, [pc, #160]	; (8003abc <HAL_CAN_MspInit+0x134>)
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	4a27      	ldr	r2, [pc, #156]	; (8003abc <HAL_CAN_MspInit+0x134>)
 8003a1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a22:	6413      	str	r3, [r2, #64]	; 0x40
 8003a24:	4b25      	ldr	r3, [pc, #148]	; (8003abc <HAL_CAN_MspInit+0x134>)
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a2c:	61bb      	str	r3, [r7, #24]
 8003a2e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003a30:	4b22      	ldr	r3, [pc, #136]	; (8003abc <HAL_CAN_MspInit+0x134>)
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	4a21      	ldr	r2, [pc, #132]	; (8003abc <HAL_CAN_MspInit+0x134>)
 8003a36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8003a3c:	4b1f      	ldr	r3, [pc, #124]	; (8003abc <HAL_CAN_MspInit+0x134>)
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003a48:	4b1b      	ldr	r3, [pc, #108]	; (8003ab8 <HAL_CAN_MspInit+0x130>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	4a1a      	ldr	r2, [pc, #104]	; (8003ab8 <HAL_CAN_MspInit+0x130>)
 8003a50:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003a52:	4b19      	ldr	r3, [pc, #100]	; (8003ab8 <HAL_CAN_MspInit+0x130>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d10b      	bne.n	8003a72 <HAL_CAN_MspInit+0xea>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003a5a:	4b18      	ldr	r3, [pc, #96]	; (8003abc <HAL_CAN_MspInit+0x134>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	4a17      	ldr	r2, [pc, #92]	; (8003abc <HAL_CAN_MspInit+0x134>)
 8003a60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a64:	6413      	str	r3, [r2, #64]	; 0x40
 8003a66:	4b15      	ldr	r3, [pc, #84]	; (8003abc <HAL_CAN_MspInit+0x134>)
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6e:	613b      	str	r3, [r7, #16]
 8003a70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a72:	4b12      	ldr	r3, [pc, #72]	; (8003abc <HAL_CAN_MspInit+0x134>)
 8003a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a76:	4a11      	ldr	r2, [pc, #68]	; (8003abc <HAL_CAN_MspInit+0x134>)
 8003a78:	f043 0302 	orr.w	r3, r3, #2
 8003a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a7e:	4b0f      	ldr	r3, [pc, #60]	; (8003abc <HAL_CAN_MspInit+0x134>)
 8003a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003a8a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003a8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a90:	2302      	movs	r3, #2
 8003a92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003a9c:	2309      	movs	r3, #9
 8003a9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4808      	ldr	r0, [pc, #32]	; (8003ac8 <HAL_CAN_MspInit+0x140>)
 8003aa8:	f003 fb46 	bl	8007138 <HAL_GPIO_Init>
}
 8003aac:	bf00      	nop
 8003aae:	3738      	adds	r7, #56	; 0x38
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40006400 	.word	0x40006400
 8003ab8:	20000344 	.word	0x20000344
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	40020c00 	.word	0x40020c00
 8003ac4:	40006800 	.word	0x40006800
 8003ac8:	40020400 	.word	0x40020400

08003acc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003ad2:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <MX_DMA_Init+0x48>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	4a0f      	ldr	r2, [pc, #60]	; (8003b14 <MX_DMA_Init+0x48>)
 8003ad8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003adc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ade:	4b0d      	ldr	r3, [pc, #52]	; (8003b14 <MX_DMA_Init+0x48>)
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae6:	607b      	str	r3, [r7, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003aea:	2200      	movs	r2, #0
 8003aec:	2100      	movs	r1, #0
 8003aee:	2038      	movs	r0, #56	; 0x38
 8003af0:	f002 fed5 	bl	800689e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003af4:	2038      	movs	r0, #56	; 0x38
 8003af6:	f002 feee 	bl	80068d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8003afa:	2200      	movs	r2, #0
 8003afc:	2100      	movs	r1, #0
 8003afe:	2044      	movs	r0, #68	; 0x44
 8003b00:	f002 fecd 	bl	800689e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8003b04:	2044      	movs	r0, #68	; 0x44
 8003b06:	f002 fee6 	bl	80068d6 <HAL_NVIC_EnableIRQ>

}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40023800 	.word	0x40023800

08003b18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b089      	sub	sp, #36	; 0x24
 8003b1c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b1e:	4b33      	ldr	r3, [pc, #204]	; (8003bec <MX_GPIO_Init+0xd4>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	4a32      	ldr	r2, [pc, #200]	; (8003bec <MX_GPIO_Init+0xd4>)
 8003b24:	f043 0304 	orr.w	r3, r3, #4
 8003b28:	6313      	str	r3, [r2, #48]	; 0x30
 8003b2a:	4b30      	ldr	r3, [pc, #192]	; (8003bec <MX_GPIO_Init+0xd4>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	61fb      	str	r3, [r7, #28]
 8003b34:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b36:	4b2d      	ldr	r3, [pc, #180]	; (8003bec <MX_GPIO_Init+0xd4>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	4a2c      	ldr	r2, [pc, #176]	; (8003bec <MX_GPIO_Init+0xd4>)
 8003b3c:	f043 0320 	orr.w	r3, r3, #32
 8003b40:	6313      	str	r3, [r2, #48]	; 0x30
 8003b42:	4b2a      	ldr	r3, [pc, #168]	; (8003bec <MX_GPIO_Init+0xd4>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	f003 0320 	and.w	r3, r3, #32
 8003b4a:	61bb      	str	r3, [r7, #24]
 8003b4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b4e:	4b27      	ldr	r3, [pc, #156]	; (8003bec <MX_GPIO_Init+0xd4>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	4a26      	ldr	r2, [pc, #152]	; (8003bec <MX_GPIO_Init+0xd4>)
 8003b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b58:	6313      	str	r3, [r2, #48]	; 0x30
 8003b5a:	4b24      	ldr	r3, [pc, #144]	; (8003bec <MX_GPIO_Init+0xd4>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b66:	4b21      	ldr	r3, [pc, #132]	; (8003bec <MX_GPIO_Init+0xd4>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	4a20      	ldr	r2, [pc, #128]	; (8003bec <MX_GPIO_Init+0xd4>)
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	6313      	str	r3, [r2, #48]	; 0x30
 8003b72:	4b1e      	ldr	r3, [pc, #120]	; (8003bec <MX_GPIO_Init+0xd4>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	613b      	str	r3, [r7, #16]
 8003b7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b7e:	4b1b      	ldr	r3, [pc, #108]	; (8003bec <MX_GPIO_Init+0xd4>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	4a1a      	ldr	r2, [pc, #104]	; (8003bec <MX_GPIO_Init+0xd4>)
 8003b84:	f043 0310 	orr.w	r3, r3, #16
 8003b88:	6313      	str	r3, [r2, #48]	; 0x30
 8003b8a:	4b18      	ldr	r3, [pc, #96]	; (8003bec <MX_GPIO_Init+0xd4>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	f003 0310 	and.w	r3, r3, #16
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b96:	4b15      	ldr	r3, [pc, #84]	; (8003bec <MX_GPIO_Init+0xd4>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	4a14      	ldr	r2, [pc, #80]	; (8003bec <MX_GPIO_Init+0xd4>)
 8003b9c:	f043 0302 	orr.w	r3, r3, #2
 8003ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ba2:	4b12      	ldr	r3, [pc, #72]	; (8003bec <MX_GPIO_Init+0xd4>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	60bb      	str	r3, [r7, #8]
 8003bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bae:	4b0f      	ldr	r3, [pc, #60]	; (8003bec <MX_GPIO_Init+0xd4>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	4a0e      	ldr	r2, [pc, #56]	; (8003bec <MX_GPIO_Init+0xd4>)
 8003bb4:	f043 0308 	orr.w	r3, r3, #8
 8003bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bba:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <MX_GPIO_Init+0xd4>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	607b      	str	r3, [r7, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003bc6:	4b09      	ldr	r3, [pc, #36]	; (8003bec <MX_GPIO_Init+0xd4>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	4a08      	ldr	r2, [pc, #32]	; (8003bec <MX_GPIO_Init+0xd4>)
 8003bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <MX_GPIO_Init+0xd4>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bda:	603b      	str	r3, [r7, #0]
 8003bdc:	683b      	ldr	r3, [r7, #0]

}
 8003bde:	bf00      	nop
 8003be0:	3724      	adds	r7, #36	; 0x24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40023800 	.word	0x40023800

08003bf0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c3;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003bf4:	4b1b      	ldr	r3, [pc, #108]	; (8003c64 <MX_I2C1_Init+0x74>)
 8003bf6:	4a1c      	ldr	r2, [pc, #112]	; (8003c68 <MX_I2C1_Init+0x78>)
 8003bf8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8003bfa:	4b1a      	ldr	r3, [pc, #104]	; (8003c64 <MX_I2C1_Init+0x74>)
 8003bfc:	4a1b      	ldr	r2, [pc, #108]	; (8003c6c <MX_I2C1_Init+0x7c>)
 8003bfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003c00:	4b18      	ldr	r3, [pc, #96]	; (8003c64 <MX_I2C1_Init+0x74>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c06:	4b17      	ldr	r3, [pc, #92]	; (8003c64 <MX_I2C1_Init+0x74>)
 8003c08:	2201      	movs	r2, #1
 8003c0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c0c:	4b15      	ldr	r3, [pc, #84]	; (8003c64 <MX_I2C1_Init+0x74>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003c12:	4b14      	ldr	r3, [pc, #80]	; (8003c64 <MX_I2C1_Init+0x74>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003c18:	4b12      	ldr	r3, [pc, #72]	; (8003c64 <MX_I2C1_Init+0x74>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c1e:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <MX_I2C1_Init+0x74>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c24:	4b0f      	ldr	r3, [pc, #60]	; (8003c64 <MX_I2C1_Init+0x74>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c2a:	480e      	ldr	r0, [pc, #56]	; (8003c64 <MX_I2C1_Init+0x74>)
 8003c2c:	f003 fc30 	bl	8007490 <HAL_I2C_Init>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003c36:	f000 fdb5 	bl	80047a4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	4809      	ldr	r0, [pc, #36]	; (8003c64 <MX_I2C1_Init+0x74>)
 8003c3e:	f004 fcf7 	bl	8008630 <HAL_I2CEx_ConfigAnalogFilter>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003c48:	f000 fdac 	bl	80047a4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	4805      	ldr	r0, [pc, #20]	; (8003c64 <MX_I2C1_Init+0x74>)
 8003c50:	f004 fd39 	bl	80086c6 <HAL_I2CEx_ConfigDigitalFilter>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003c5a:	f000 fda3 	bl	80047a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003c5e:	bf00      	nop
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20000348 	.word	0x20000348
 8003c68:	40005400 	.word	0x40005400
 8003c6c:	00300f38 	.word	0x00300f38

08003c70 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003c74:	4b1b      	ldr	r3, [pc, #108]	; (8003ce4 <MX_I2C2_Init+0x74>)
 8003c76:	4a1c      	ldr	r2, [pc, #112]	; (8003ce8 <MX_I2C2_Init+0x78>)
 8003c78:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00300F38;
 8003c7a:	4b1a      	ldr	r3, [pc, #104]	; (8003ce4 <MX_I2C2_Init+0x74>)
 8003c7c:	4a1b      	ldr	r2, [pc, #108]	; (8003cec <MX_I2C2_Init+0x7c>)
 8003c7e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003c80:	4b18      	ldr	r3, [pc, #96]	; (8003ce4 <MX_I2C2_Init+0x74>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c86:	4b17      	ldr	r3, [pc, #92]	; (8003ce4 <MX_I2C2_Init+0x74>)
 8003c88:	2201      	movs	r2, #1
 8003c8a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c8c:	4b15      	ldr	r3, [pc, #84]	; (8003ce4 <MX_I2C2_Init+0x74>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003c92:	4b14      	ldr	r3, [pc, #80]	; (8003ce4 <MX_I2C2_Init+0x74>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003c98:	4b12      	ldr	r3, [pc, #72]	; (8003ce4 <MX_I2C2_Init+0x74>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c9e:	4b11      	ldr	r3, [pc, #68]	; (8003ce4 <MX_I2C2_Init+0x74>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ca4:	4b0f      	ldr	r3, [pc, #60]	; (8003ce4 <MX_I2C2_Init+0x74>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003caa:	480e      	ldr	r0, [pc, #56]	; (8003ce4 <MX_I2C2_Init+0x74>)
 8003cac:	f003 fbf0 	bl	8007490 <HAL_I2C_Init>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003cb6:	f000 fd75 	bl	80047a4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003cba:	2100      	movs	r1, #0
 8003cbc:	4809      	ldr	r0, [pc, #36]	; (8003ce4 <MX_I2C2_Init+0x74>)
 8003cbe:	f004 fcb7 	bl	8008630 <HAL_I2CEx_ConfigAnalogFilter>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003cc8:	f000 fd6c 	bl	80047a4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4805      	ldr	r0, [pc, #20]	; (8003ce4 <MX_I2C2_Init+0x74>)
 8003cd0:	f004 fcf9 	bl	80086c6 <HAL_I2CEx_ConfigDigitalFilter>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003cda:	f000 fd63 	bl	80047a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003cde:	bf00      	nop
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000394 	.word	0x20000394
 8003ce8:	40005800 	.word	0x40005800
 8003cec:	00300f38 	.word	0x00300f38

08003cf0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003cf4:	4b1b      	ldr	r3, [pc, #108]	; (8003d64 <MX_I2C3_Init+0x74>)
 8003cf6:	4a1c      	ldr	r2, [pc, #112]	; (8003d68 <MX_I2C3_Init+0x78>)
 8003cf8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00300F38;
 8003cfa:	4b1a      	ldr	r3, [pc, #104]	; (8003d64 <MX_I2C3_Init+0x74>)
 8003cfc:	4a1b      	ldr	r2, [pc, #108]	; (8003d6c <MX_I2C3_Init+0x7c>)
 8003cfe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8003d00:	4b18      	ldr	r3, [pc, #96]	; (8003d64 <MX_I2C3_Init+0x74>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d06:	4b17      	ldr	r3, [pc, #92]	; (8003d64 <MX_I2C3_Init+0x74>)
 8003d08:	2201      	movs	r2, #1
 8003d0a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d0c:	4b15      	ldr	r3, [pc, #84]	; (8003d64 <MX_I2C3_Init+0x74>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8003d12:	4b14      	ldr	r3, [pc, #80]	; (8003d64 <MX_I2C3_Init+0x74>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003d18:	4b12      	ldr	r3, [pc, #72]	; (8003d64 <MX_I2C3_Init+0x74>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d1e:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <MX_I2C3_Init+0x74>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d24:	4b0f      	ldr	r3, [pc, #60]	; (8003d64 <MX_I2C3_Init+0x74>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003d2a:	480e      	ldr	r0, [pc, #56]	; (8003d64 <MX_I2C3_Init+0x74>)
 8003d2c:	f003 fbb0 	bl	8007490 <HAL_I2C_Init>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8003d36:	f000 fd35 	bl	80047a4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	4809      	ldr	r0, [pc, #36]	; (8003d64 <MX_I2C3_Init+0x74>)
 8003d3e:	f004 fc77 	bl	8008630 <HAL_I2CEx_ConfigAnalogFilter>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8003d48:	f000 fd2c 	bl	80047a4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	4805      	ldr	r0, [pc, #20]	; (8003d64 <MX_I2C3_Init+0x74>)
 8003d50:	f004 fcb9 	bl	80086c6 <HAL_I2CEx_ConfigDigitalFilter>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8003d5a:	f000 fd23 	bl	80047a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003d5e:	bf00      	nop
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	200003e0 	.word	0x200003e0
 8003d68:	40005c00 	.word	0x40005c00
 8003d6c:	00300f38 	.word	0x00300f38

08003d70 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8003d74:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <MX_I2C4_Init+0x74>)
 8003d76:	4a1c      	ldr	r2, [pc, #112]	; (8003de8 <MX_I2C4_Init+0x78>)
 8003d78:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00300F38;
 8003d7a:	4b1a      	ldr	r3, [pc, #104]	; (8003de4 <MX_I2C4_Init+0x74>)
 8003d7c:	4a1b      	ldr	r2, [pc, #108]	; (8003dec <MX_I2C4_Init+0x7c>)
 8003d7e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8003d80:	4b18      	ldr	r3, [pc, #96]	; (8003de4 <MX_I2C4_Init+0x74>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d86:	4b17      	ldr	r3, [pc, #92]	; (8003de4 <MX_I2C4_Init+0x74>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d8c:	4b15      	ldr	r3, [pc, #84]	; (8003de4 <MX_I2C4_Init+0x74>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8003d92:	4b14      	ldr	r3, [pc, #80]	; (8003de4 <MX_I2C4_Init+0x74>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003d98:	4b12      	ldr	r3, [pc, #72]	; (8003de4 <MX_I2C4_Init+0x74>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d9e:	4b11      	ldr	r3, [pc, #68]	; (8003de4 <MX_I2C4_Init+0x74>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003da4:	4b0f      	ldr	r3, [pc, #60]	; (8003de4 <MX_I2C4_Init+0x74>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8003daa:	480e      	ldr	r0, [pc, #56]	; (8003de4 <MX_I2C4_Init+0x74>)
 8003dac:	f003 fb70 	bl	8007490 <HAL_I2C_Init>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8003db6:	f000 fcf5 	bl	80047a4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003dba:	2100      	movs	r1, #0
 8003dbc:	4809      	ldr	r0, [pc, #36]	; (8003de4 <MX_I2C4_Init+0x74>)
 8003dbe:	f004 fc37 	bl	8008630 <HAL_I2CEx_ConfigAnalogFilter>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8003dc8:	f000 fcec 	bl	80047a4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8003dcc:	2100      	movs	r1, #0
 8003dce:	4805      	ldr	r0, [pc, #20]	; (8003de4 <MX_I2C4_Init+0x74>)
 8003dd0:	f004 fc79 	bl	80086c6 <HAL_I2CEx_ConfigDigitalFilter>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8003dda:	f000 fce3 	bl	80047a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8003dde:	bf00      	nop
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	2000042c 	.word	0x2000042c
 8003de8:	40006000 	.word	0x40006000
 8003dec:	00300f38 	.word	0x00300f38

08003df0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b090      	sub	sp, #64	; 0x40
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	605a      	str	r2, [r3, #4]
 8003e02:	609a      	str	r2, [r3, #8]
 8003e04:	60da      	str	r2, [r3, #12]
 8003e06:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a6b      	ldr	r2, [pc, #428]	; (8003fbc <HAL_I2C_MspInit+0x1cc>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d128      	bne.n	8003e64 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e12:	4b6b      	ldr	r3, [pc, #428]	; (8003fc0 <HAL_I2C_MspInit+0x1d0>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	4a6a      	ldr	r2, [pc, #424]	; (8003fc0 <HAL_I2C_MspInit+0x1d0>)
 8003e18:	f043 0302 	orr.w	r3, r3, #2
 8003e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e1e:	4b68      	ldr	r3, [pc, #416]	; (8003fc0 <HAL_I2C_MspInit+0x1d0>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MLX2_SCL_Pin|MLX2_SDA_Pin;
 8003e2a:	23c0      	movs	r3, #192	; 0xc0
 8003e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e2e:	2312      	movs	r3, #18
 8003e30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e36:	2303      	movs	r3, #3
 8003e38:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e3a:	2304      	movs	r3, #4
 8003e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e42:	4619      	mov	r1, r3
 8003e44:	485f      	ldr	r0, [pc, #380]	; (8003fc4 <HAL_I2C_MspInit+0x1d4>)
 8003e46:	f003 f977 	bl	8007138 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e4a:	4b5d      	ldr	r3, [pc, #372]	; (8003fc0 <HAL_I2C_MspInit+0x1d0>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	4a5c      	ldr	r2, [pc, #368]	; (8003fc0 <HAL_I2C_MspInit+0x1d0>)
 8003e50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e54:	6413      	str	r3, [r2, #64]	; 0x40
 8003e56:	4b5a      	ldr	r3, [pc, #360]	; (8003fc0 <HAL_I2C_MspInit+0x1d0>)
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8003e62:	e0a7      	b.n	8003fb4 <HAL_I2C_MspInit+0x1c4>
  else if(i2cHandle->Instance==I2C2)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a57      	ldr	r2, [pc, #348]	; (8003fc8 <HAL_I2C_MspInit+0x1d8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d128      	bne.n	8003ec0 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e6e:	4b54      	ldr	r3, [pc, #336]	; (8003fc0 <HAL_I2C_MspInit+0x1d0>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	4a53      	ldr	r2, [pc, #332]	; (8003fc0 <HAL_I2C_MspInit+0x1d0>)
 8003e74:	f043 0320 	orr.w	r3, r3, #32
 8003e78:	6313      	str	r3, [r2, #48]	; 0x30
 8003e7a:	4b51      	ldr	r3, [pc, #324]	; (8003fc0 <HAL_I2C_MspInit+0x1d0>)
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	f003 0320 	and.w	r3, r3, #32
 8003e82:	623b      	str	r3, [r7, #32]
 8003e84:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GYRO_SDA_Pin|GYRO_SCL_Pin;
 8003e86:	2303      	movs	r3, #3
 8003e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e8a:	2312      	movs	r3, #18
 8003e8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e92:	2303      	movs	r3, #3
 8003e94:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003e96:	2304      	movs	r3, #4
 8003e98:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	484a      	ldr	r0, [pc, #296]	; (8003fcc <HAL_I2C_MspInit+0x1dc>)
 8003ea2:	f003 f949 	bl	8007138 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003ea6:	4b46      	ldr	r3, [pc, #280]	; (8003fc0 <HAL_I2C_MspInit+0x1d0>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	4a45      	ldr	r2, [pc, #276]	; (8003fc0 <HAL_I2C_MspInit+0x1d0>)
 8003eac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb2:	4b43      	ldr	r3, [pc, #268]	; (8003fc0 <HAL_I2C_MspInit+0x1d0>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eba:	61fb      	str	r3, [r7, #28]
 8003ebc:	69fb      	ldr	r3, [r7, #28]
}
 8003ebe:	e079      	b.n	8003fb4 <HAL_I2C_MspInit+0x1c4>
  else if(i2cHandle->Instance==I2C3)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a42      	ldr	r2, [pc, #264]	; (8003fd0 <HAL_I2C_MspInit+0x1e0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d146      	bne.n	8003f58 <HAL_I2C_MspInit+0x168>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eca:	4b3d      	ldr	r3, [pc, #244]	; (8003fc0 <HAL_I2C_MspInit+0x1d0>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	4a3c      	ldr	r2, [pc, #240]	; (8003fc0 <HAL_I2C_MspInit+0x1d0>)
 8003ed0:	f043 0304 	orr.w	r3, r3, #4
 8003ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ed6:	4b3a      	ldr	r3, [pc, #232]	; (8003fc0 <HAL_I2C_MspInit+0x1d0>)
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	61bb      	str	r3, [r7, #24]
 8003ee0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ee2:	4b37      	ldr	r3, [pc, #220]	; (8003fc0 <HAL_I2C_MspInit+0x1d0>)
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee6:	4a36      	ldr	r2, [pc, #216]	; (8003fc0 <HAL_I2C_MspInit+0x1d0>)
 8003ee8:	f043 0301 	orr.w	r3, r3, #1
 8003eec:	6313      	str	r3, [r2, #48]	; 0x30
 8003eee:	4b34      	ldr	r3, [pc, #208]	; (8003fc0 <HAL_I2C_MspInit+0x1d0>)
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MLX1_SDA_Pin;
 8003efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f00:	2312      	movs	r3, #18
 8003f02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f04:	2300      	movs	r3, #0
 8003f06:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003f0c:	2304      	movs	r3, #4
 8003f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(MLX1_SDA_GPIO_Port, &GPIO_InitStruct);
 8003f10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f14:	4619      	mov	r1, r3
 8003f16:	482f      	ldr	r0, [pc, #188]	; (8003fd4 <HAL_I2C_MspInit+0x1e4>)
 8003f18:	f003 f90e 	bl	8007138 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MLX1_SCL_Pin;
 8003f1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f22:	2312      	movs	r3, #18
 8003f24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f26:	2300      	movs	r3, #0
 8003f28:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003f2e:	2304      	movs	r3, #4
 8003f30:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(MLX1_SCL_GPIO_Port, &GPIO_InitStruct);
 8003f32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f36:	4619      	mov	r1, r3
 8003f38:	4827      	ldr	r0, [pc, #156]	; (8003fd8 <HAL_I2C_MspInit+0x1e8>)
 8003f3a:	f003 f8fd 	bl	8007138 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003f3e:	4b20      	ldr	r3, [pc, #128]	; (8003fc0 <HAL_I2C_MspInit+0x1d0>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	4a1f      	ldr	r2, [pc, #124]	; (8003fc0 <HAL_I2C_MspInit+0x1d0>)
 8003f44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f48:	6413      	str	r3, [r2, #64]	; 0x40
 8003f4a:	4b1d      	ldr	r3, [pc, #116]	; (8003fc0 <HAL_I2C_MspInit+0x1d0>)
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f52:	613b      	str	r3, [r7, #16]
 8003f54:	693b      	ldr	r3, [r7, #16]
}
 8003f56:	e02d      	b.n	8003fb4 <HAL_I2C_MspInit+0x1c4>
  else if(i2cHandle->Instance==I2C4)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a1f      	ldr	r2, [pc, #124]	; (8003fdc <HAL_I2C_MspInit+0x1ec>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d128      	bne.n	8003fb4 <HAL_I2C_MspInit+0x1c4>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f62:	4b17      	ldr	r3, [pc, #92]	; (8003fc0 <HAL_I2C_MspInit+0x1d0>)
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	4a16      	ldr	r2, [pc, #88]	; (8003fc0 <HAL_I2C_MspInit+0x1d0>)
 8003f68:	f043 0320 	orr.w	r3, r3, #32
 8003f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f6e:	4b14      	ldr	r3, [pc, #80]	; (8003fc0 <HAL_I2C_MspInit+0x1d0>)
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003f7a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f80:	2312      	movs	r3, #18
 8003f82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f84:	2300      	movs	r3, #0
 8003f86:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003f8c:	2304      	movs	r3, #4
 8003f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f94:	4619      	mov	r1, r3
 8003f96:	480d      	ldr	r0, [pc, #52]	; (8003fcc <HAL_I2C_MspInit+0x1dc>)
 8003f98:	f003 f8ce 	bl	8007138 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003f9c:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <HAL_I2C_MspInit+0x1d0>)
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	4a07      	ldr	r2, [pc, #28]	; (8003fc0 <HAL_I2C_MspInit+0x1d0>)
 8003fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fa6:	6413      	str	r3, [r2, #64]	; 0x40
 8003fa8:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <HAL_I2C_MspInit+0x1d0>)
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fb0:	60bb      	str	r3, [r7, #8]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
}
 8003fb4:	bf00      	nop
 8003fb6:	3740      	adds	r7, #64	; 0x40
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40005400 	.word	0x40005400
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	40020400 	.word	0x40020400
 8003fc8:	40005800 	.word	0x40005800
 8003fcc:	40021400 	.word	0x40021400
 8003fd0:	40005c00 	.word	0x40005c00
 8003fd4:	40020800 	.word	0x40020800
 8003fd8:	40020000 	.word	0x40020000
 8003fdc:	40006000 	.word	0x40006000

08003fe0 <statusToInt>:
extern MLXSensor mlxRFSensor;
extern ABSSensor absLFSensor;
extern ABSSensor absRFSensor;

int statusToInt()
{	int fullRegister = statusRegister.TeleBack;
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	4b39      	ldr	r3, [pc, #228]	; (80040cc <statusToInt+0xec>)
 8003fe8:	78db      	ldrb	r3, [r3, #3]
 8003fea:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	607b      	str	r3, [r7, #4]
	fullRegister = fullRegister << 2;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.DamperRF) << 3;
 8003ff8:	4b34      	ldr	r3, [pc, #208]	; (80040cc <statusToInt+0xec>)
 8003ffa:	78db      	ldrb	r3, [r3, #3]
 8003ffc:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8004000:	b2db      	uxtb	r3, r3
 8004002:	461a      	mov	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4313      	orrs	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.DamperLF) << 3;
 800400c:	4b2f      	ldr	r3, [pc, #188]	; (80040cc <statusToInt+0xec>)
 800400e:	78db      	ldrb	r3, [r3, #3]
 8004010:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8004014:	b2db      	uxtb	r3, r3
 8004016:	461a      	mov	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4313      	orrs	r3, r2
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.Steering) << 3;
 8004020:	4b2a      	ldr	r3, [pc, #168]	; (80040cc <statusToInt+0xec>)
 8004022:	789b      	ldrb	r3, [r3, #2]
 8004024:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8004028:	b2db      	uxtb	r3, r3
 800402a:	461a      	mov	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4313      	orrs	r3, r2
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.VSSRF) << 3;
 8004034:	4b25      	ldr	r3, [pc, #148]	; (80040cc <statusToInt+0xec>)
 8004036:	789b      	ldrb	r3, [r3, #2]
 8004038:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800403c:	b2db      	uxtb	r3, r3
 800403e:	461a      	mov	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4313      	orrs	r3, r2
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.VSSLF) << 3;
 8004048:	4b20      	ldr	r3, [pc, #128]	; (80040cc <statusToInt+0xec>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 8004050:	b2db      	uxtb	r3, r3
 8004052:	461a      	mov	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4313      	orrs	r3, r2
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.MLXRF) << 3;
 800405c:	4b1b      	ldr	r3, [pc, #108]	; (80040cc <statusToInt+0xec>)
 800405e:	785b      	ldrb	r3, [r3, #1]
 8004060:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004064:	b2db      	uxtb	r3, r3
 8004066:	461a      	mov	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4313      	orrs	r3, r2
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.MLXLF) << 3;
 8004070:	4b16      	ldr	r3, [pc, #88]	; (80040cc <statusToInt+0xec>)
 8004072:	785b      	ldrb	r3, [r3, #1]
 8004074:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004078:	b2db      	uxtb	r3, r3
 800407a:	461a      	mov	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4313      	orrs	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	607b      	str	r3, [r7, #4]
	fullRegister = (fullRegister  | statusRegister.GYRO) << 3;
 8004084:	4b11      	ldr	r3, [pc, #68]	; (80040cc <statusToInt+0xec>)
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	f3c3 1382 	ubfx	r3, r3, #6, #3
 800408c:	b2db      	uxtb	r3, r3
 800408e:	461a      	mov	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4313      	orrs	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	607b      	str	r3, [r7, #4]
	fullRegister = (fullRegister  | statusRegister.GPS) << 3;
 8004098:	4b0c      	ldr	r3, [pc, #48]	; (80040cc <statusToInt+0xec>)
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	461a      	mov	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.SDCARD);
 80040ac:	4b07      	ldr	r3, [pc, #28]	; (80040cc <statusToInt+0xec>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	461a      	mov	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	607b      	str	r3, [r7, #4]
	return fullRegister;
 80040be:	687b      	ldr	r3, [r7, #4]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	200014ac 	.word	0x200014ac

080040d0 <printStatusRegister>:
void printStatusRegister()
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
	int fullRegister = statusToInt();
 80040d6:	f7ff ff83 	bl	8003fe0 <statusToInt>
 80040da:	60b8      	str	r0, [r7, #8]
	int b =0;
 80040dc:	2300      	movs	r3, #0
 80040de:	607b      	str	r3, [r7, #4]
	for(int i=31;i>=0;i--)
 80040e0:	231f      	movs	r3, #31
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	e022      	b.n	800412c <printStatusRegister+0x5c>
	{
		b = fullRegister >> i;
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	fa42 f303 	asr.w	r3, r2, r3
 80040ee:	607b      	str	r3, [r7, #4]
		if(b & 1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <printStatusRegister+0x32>
		{
			printf("1");
 80040fa:	2031      	movs	r0, #49	; 0x31
 80040fc:	f00e fb34 	bl	8012768 <putchar>
 8004100:	e002      	b.n	8004108 <printStatusRegister+0x38>
		}else
		{
			printf("0");
 8004102:	2030      	movs	r0, #48	; 0x30
 8004104:	f00e fb30 	bl	8012768 <putchar>
		}
		if(i%3 == 0)
 8004108:	68f9      	ldr	r1, [r7, #12]
 800410a:	4b0d      	ldr	r3, [pc, #52]	; (8004140 <printStatusRegister+0x70>)
 800410c:	fb83 3201 	smull	r3, r2, r3, r1
 8004110:	17cb      	asrs	r3, r1, #31
 8004112:	1ad2      	subs	r2, r2, r3
 8004114:	4613      	mov	r3, r2
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	4413      	add	r3, r2
 800411a:	1aca      	subs	r2, r1, r3
 800411c:	2a00      	cmp	r2, #0
 800411e:	d102      	bne.n	8004126 <printStatusRegister+0x56>
		{
			printf(" ");
 8004120:	2020      	movs	r0, #32
 8004122:	f00e fb21 	bl	8012768 <putchar>
	for(int i=31;i>=0;i--)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	3b01      	subs	r3, #1
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b00      	cmp	r3, #0
 8004130:	dad9      	bge.n	80040e6 <printStatusRegister+0x16>
		}

	}
	printf("\n");
 8004132:	200a      	movs	r0, #10
 8004134:	f00e fb18 	bl	8012768 <putchar>
}
 8004138:	bf00      	nop
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	55555556 	.word	0x55555556

08004144 <sendFileToUart>:

int sendFileToUart(FIL * f,char * path)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 800414a:	af00      	add	r7, sp, #0
 800414c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004150:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8004154:	6018      	str	r0, [r3, #0]
 8004156:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800415a:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800415e:	6019      	str	r1, [r3, #0]
	 FRESULT res;
	 UINT dmy;
	 char buff[1000];
	 f_close(f);
 8004160:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004164:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	f00d fac4 	bl	80116f6 <f_close>
	 res = f_open(f, path, FA_READ);
 800416e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004172:	f5a3 717e 	sub.w	r1, r3, #1016	; 0x3f8
 8004176:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800417a:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800417e:	2201      	movs	r2, #1
 8004180:	6809      	ldr	r1, [r1, #0]
 8004182:	6818      	ldr	r0, [r3, #0]
 8004184:	f00c fd7a 	bl	8010c7c <f_open>
 8004188:	4603      	mov	r3, r0
 800418a:	f887 33f7 	strb.w	r3, [r7, #1015]	; 0x3f7
	 if (res) return res;
 800418e:	f897 33f7 	ldrb.w	r3, [r7, #1015]	; 0x3f7
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <sendFileToUart+0x58>
 8004196:	f897 33f7 	ldrb.w	r3, [r7, #1015]	; 0x3f7
 800419a:	e04f      	b.n	800423c <sendFileToUart+0xf8>
	 HAL_UART_Transmit(&huart3, path, strlen(path), HAL_MAX_DELAY);
 800419c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80041a0:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 80041a4:	6818      	ldr	r0, [r3, #0]
 80041a6:	f7fc f855 	bl	8000254 <strlen>
 80041aa:	4603      	mov	r3, r0
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80041b2:	f5a3 717e 	sub.w	r1, r3, #1016	; 0x3f8
 80041b6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ba:	6809      	ldr	r1, [r1, #0]
 80041bc:	4822      	ldr	r0, [pc, #136]	; (8004248 <sendFileToUart+0x104>)
 80041be:	f008 fc3b 	bl	800ca38 <HAL_UART_Transmit>
	 while (res == FR_OK && !f_eof(f)) {
 80041c2:	e019      	b.n	80041f8 <sendFileToUart+0xb4>

	        res = f_read(f, buff, 1000, &dmy);
 80041c4:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80041c8:	f107 0108 	add.w	r1, r7, #8
 80041cc:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80041d0:	f5a2 707d 	sub.w	r0, r2, #1012	; 0x3f4
 80041d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041d8:	6800      	ldr	r0, [r0, #0]
 80041da:	f00c ff1b 	bl	8011014 <f_read>
 80041de:	4603      	mov	r3, r0
 80041e0:	f887 33f7 	strb.w	r3, [r7, #1015]	; 0x3f7
	        HAL_UART_Transmit(&huart3, buff, dmy, HAL_MAX_DELAY);
 80041e4:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	f107 0108 	add.w	r1, r7, #8
 80041ee:	f04f 33ff 	mov.w	r3, #4294967295
 80041f2:	4815      	ldr	r0, [pc, #84]	; (8004248 <sendFileToUart+0x104>)
 80041f4:	f008 fc20 	bl	800ca38 <HAL_UART_Transmit>
	 while (res == FR_OK && !f_eof(f)) {
 80041f8:	f897 33f7 	ldrb.w	r3, [r7, #1015]	; 0x3f7
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10d      	bne.n	800421c <sendFileToUart+0xd8>
 8004200:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004204:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	699a      	ldr	r2, [r3, #24]
 800420c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004210:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	429a      	cmp	r2, r3
 800421a:	d1d3      	bne.n	80041c4 <sendFileToUart+0x80>
	 }
	 HAL_UART_Transmit(&huart3, "EOF", 3, HAL_MAX_DELAY);
 800421c:	f04f 33ff 	mov.w	r3, #4294967295
 8004220:	2203      	movs	r2, #3
 8004222:	490a      	ldr	r1, [pc, #40]	; (800424c <sendFileToUart+0x108>)
 8004224:	4808      	ldr	r0, [pc, #32]	; (8004248 <sendFileToUart+0x104>)
 8004226:	f008 fc07 	bl	800ca38 <HAL_UART_Transmit>
	 f_close(f);
 800422a:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800422e:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8004232:	6818      	ldr	r0, [r3, #0]
 8004234:	f00d fa5f 	bl	80116f6 <f_close>
	 return res;
 8004238:	f897 33f7 	ldrb.w	r3, [r7, #1015]	; 0x3f7
}
 800423c:	4618      	mov	r0, r3
 800423e:	f507 777e 	add.w	r7, r7, #1016	; 0x3f8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	2000573c 	.word	0x2000573c
 800424c:	0801695c 	.word	0x0801695c

08004250 <sendAllFilesToUart>:
int sendAllFilesToUart()
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
	FILINFO f;
	if(f_stat(gyro.path, &f)==FR_OK);
 8004256:	463b      	mov	r3, r7
 8004258:	4619      	mov	r1, r3
 800425a:	4812      	ldr	r0, [pc, #72]	; (80042a4 <sendAllFilesToUart+0x54>)
 800425c:	f00d fa75 	bl	801174a <f_stat>
	{
		sendFileToUart(gyro.File, gyro.path);
 8004260:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <sendAllFilesToUart+0x58>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	490f      	ldr	r1, [pc, #60]	; (80042a4 <sendAllFilesToUart+0x54>)
 8004266:	4618      	mov	r0, r3
 8004268:	f7ff ff6c 	bl	8004144 <sendFileToUart>
	}
	if(f_stat(mlxLFSensor.path, &f)==FR_OK);
 800426c:	463b      	mov	r3, r7
 800426e:	4619      	mov	r1, r3
 8004270:	480e      	ldr	r0, [pc, #56]	; (80042ac <sendAllFilesToUart+0x5c>)
 8004272:	f00d fa6a 	bl	801174a <f_stat>
	{
		sendFileToUart(mlxLFSensor.File, mlxLFSensor.path);
 8004276:	4b0e      	ldr	r3, [pc, #56]	; (80042b0 <sendAllFilesToUart+0x60>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	490c      	ldr	r1, [pc, #48]	; (80042ac <sendAllFilesToUart+0x5c>)
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff ff61 	bl	8004144 <sendFileToUart>
	}
	if(f_stat(absLFSensor.path, &f)==FR_OK);
 8004282:	463b      	mov	r3, r7
 8004284:	4619      	mov	r1, r3
 8004286:	480b      	ldr	r0, [pc, #44]	; (80042b4 <sendAllFilesToUart+0x64>)
 8004288:	f00d fa5f 	bl	801174a <f_stat>
	{
		sendFileToUart(absLFSensor.File, absLFSensor.path);
 800428c:	4b0a      	ldr	r3, [pc, #40]	; (80042b8 <sendAllFilesToUart+0x68>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4908      	ldr	r1, [pc, #32]	; (80042b4 <sendAllFilesToUart+0x64>)
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff ff56 	bl	8004144 <sendFileToUart>
	}
	return 0;
 8004298:	2300      	movs	r3, #0

}
 800429a:	4618      	mov	r0, r3
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	200054c4 	.word	0x200054c4
 80042a8:	200054c0 	.word	0x200054c0
 80042ac:	2000175c 	.word	0x2000175c
 80042b0:	20001758 	.word	0x20001758
 80042b4:	2000556c 	.word	0x2000556c
 80042b8:	20005568 	.word	0x20005568

080042bc <initSensors>:

ADCSensor sensord;
void initSensors()
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af02      	add	r7, sp, #8
	  mlxInit(&mlxLFSensor,MLXLF,&hi2c1,0);
 80042c2:	2300      	movs	r3, #0
 80042c4:	4a13      	ldr	r2, [pc, #76]	; (8004314 <initSensors+0x58>)
 80042c6:	2102      	movs	r1, #2
 80042c8:	4813      	ldr	r0, [pc, #76]	; (8004318 <initSensors+0x5c>)
 80042ca:	f000 fde1 	bl	8004e90 <mlxInit>
	  mlxInit(&mlxRFSensor,MLXRF,&hi2c3,mlxRFSensor.File);
 80042ce:	4b13      	ldr	r3, [pc, #76]	; (800431c <initSensors+0x60>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a13      	ldr	r2, [pc, #76]	; (8004320 <initSensors+0x64>)
 80042d4:	2103      	movs	r1, #3
 80042d6:	4811      	ldr	r0, [pc, #68]	; (800431c <initSensors+0x60>)
 80042d8:	f000 fdda 	bl	8004e90 <mlxInit>
	  gyroInit(&gyro);
 80042dc:	4811      	ldr	r0, [pc, #68]	; (8004324 <initSensors+0x68>)
 80042de:	f000 fcfb 	bl	8004cd8 <gyroInit>
	  absInit(&absLFSensor, ABSLF, &htim3, TIM_CHANNEL_1, 0);
 80042e2:	2300      	movs	r3, #0
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	2300      	movs	r3, #0
 80042e8:	4a0f      	ldr	r2, [pc, #60]	; (8004328 <initSensors+0x6c>)
 80042ea:	2104      	movs	r1, #4
 80042ec:	480f      	ldr	r0, [pc, #60]	; (800432c <initSensors+0x70>)
 80042ee:	f000 fca7 	bl	8004c40 <absInit>
	  absInit(&absRFSensor, ABSLF, &htim4, TIM_CHANNEL_1, 0);
 80042f2:	2300      	movs	r3, #0
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	2300      	movs	r3, #0
 80042f8:	4a0d      	ldr	r2, [pc, #52]	; (8004330 <initSensors+0x74>)
 80042fa:	2104      	movs	r1, #4
 80042fc:	480d      	ldr	r0, [pc, #52]	; (8004334 <initSensors+0x78>)
 80042fe:	f000 fc9f 	bl	8004c40 <absInit>
	  damperInit(&sensord, DAMPERRF, 0);
 8004302:	2200      	movs	r2, #0
 8004304:	2108      	movs	r1, #8
 8004306:	480c      	ldr	r0, [pc, #48]	; (8004338 <initSensors+0x7c>)
 8004308:	f000 fc06 	bl	8004b18 <damperInit>
	  //res = res | mlxInit(&rightFWheelMLX);


}
 800430c:	bf00      	nop
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	20000348 	.word	0x20000348
 8004318:	20001758 	.word	0x20001758
 800431c:	2000360c 	.word	0x2000360c
 8004320:	200003e0 	.word	0x200003e0
 8004324:	200054c0 	.word	0x200054c0
 8004328:	200055d4 	.word	0x200055d4
 800432c:	20005568 	.word	0x20005568
 8004330:	20005620 	.word	0x20005620
 8004334:	2000559c 	.word	0x2000559c
 8004338:	200014b4 	.word	0x200014b4

0800433c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]

  if (htim == &htim14 )
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a2c      	ldr	r2, [pc, #176]	; (80043f8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d150      	bne.n	80043ee <HAL_TIM_PeriodElapsedCallback+0xb2>
	 {
		 sdDeInit();
		 sdInit(&fileSystem);
		 openAllFiles();
	 }*/
	 statusRegister.checkTime -= 25;
 800434c:	4b2b      	ldr	r3, [pc, #172]	; (80043fc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800434e:	889b      	ldrh	r3, [r3, #4]
 8004350:	3b19      	subs	r3, #25
 8004352:	b29a      	uxth	r2, r3
 8004354:	4b29      	ldr	r3, [pc, #164]	; (80043fc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8004356:	809a      	strh	r2, [r3, #4]
	 if( statusRegister.checkTime <= 0)
 8004358:	4b28      	ldr	r3, [pc, #160]	; (80043fc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800435a:	889b      	ldrh	r3, [r3, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d105      	bne.n	800436c <HAL_TIM_PeriodElapsedCallback+0x30>
	 {
		 //Check all sensors
		 statusRegister.checkTime = SENSOR_ALL_CHECK_TIME;
 8004360:	4b26      	ldr	r3, [pc, #152]	; (80043fc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8004362:	f242 7210 	movw	r2, #10000	; 0x2710
 8004366:	809a      	strh	r2, [r3, #4]
		 printStatusRegister();
 8004368:	f7ff feb2 	bl	80040d0 <printStatusRegister>

	 }
	 mlxLFSensor.timeToNextRead -= 25;
 800436c:	4b24      	ldr	r3, [pc, #144]	; (8004400 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	3b19      	subs	r3, #25
 8004372:	4a23      	ldr	r2, [pc, #140]	; (8004400 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8004374:	6213      	str	r3, [r2, #32]
	 if(mlxLFSensor.timeToNextRead <= 0)
 8004376:	4b22      	ldr	r3, [pc, #136]	; (8004400 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	2b00      	cmp	r3, #0
 800437c:	dc06      	bgt.n	800438c <HAL_TIM_PeriodElapsedCallback+0x50>
	 {
		 mlxLFSensor.dataReady = 1;
 800437e:	4b20      	ldr	r3, [pc, #128]	; (8004400 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8004380:	2201      	movs	r2, #1
 8004382:	619a      	str	r2, [r3, #24]
		 mlxLFSensor.timeToNextRead = MLX_DATA_RATE;
 8004384:	4b1e      	ldr	r3, [pc, #120]	; (8004400 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8004386:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800438a:	621a      	str	r2, [r3, #32]
	 }
	 mlxRFSensor.timeToNextRead -= 25;
 800438c:	4b1d      	ldr	r3, [pc, #116]	; (8004404 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	3b19      	subs	r3, #25
 8004392:	4a1c      	ldr	r2, [pc, #112]	; (8004404 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004394:	6213      	str	r3, [r2, #32]
	 if(mlxRFSensor.timeToNextRead <= 0)
 8004396:	4b1b      	ldr	r3, [pc, #108]	; (8004404 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	2b00      	cmp	r3, #0
 800439c:	dc06      	bgt.n	80043ac <HAL_TIM_PeriodElapsedCallback+0x70>
	 {
	 	mlxRFSensor.dataReady = 1;
 800439e:	4b19      	ldr	r3, [pc, #100]	; (8004404 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80043a0:	2201      	movs	r2, #1
 80043a2:	619a      	str	r2, [r3, #24]
	    mlxRFSensor.timeToNextRead = MLX_DATA_RATE;
 80043a4:	4b17      	ldr	r3, [pc, #92]	; (8004404 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80043a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043aa:	621a      	str	r2, [r3, #32]
	 }
	 absLFSensor.timeToZeroSpeed -= 25;
 80043ac:	4b16      	ldr	r3, [pc, #88]	; (8004408 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80043ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b0:	3b19      	subs	r3, #25
 80043b2:	4a15      	ldr	r2, [pc, #84]	; (8004408 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80043b4:	6293      	str	r3, [r2, #40]	; 0x28
	 if(absLFSensor.timeToZeroSpeed <= 0)
 80043b6:	4b14      	ldr	r3, [pc, #80]	; (8004408 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80043b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	dc08      	bgt.n	80043d0 <HAL_TIM_PeriodElapsedCallback+0x94>
	 {
		 absLFSensor.data = 0;
 80043be:	4b12      	ldr	r3, [pc, #72]	; (8004408 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	621a      	str	r2, [r3, #32]
		 absLFSensor.dataReady = 1;
 80043c4:	4b10      	ldr	r3, [pc, #64]	; (8004408 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80043c6:	2201      	movs	r2, #1
 80043c8:	619a      	str	r2, [r3, #24]
		 absLFSensor.timeToZeroSpeed = ABS_ZERO_SPEED_TIME;
 80043ca:	4b0f      	ldr	r3, [pc, #60]	; (8004408 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80043cc:	2264      	movs	r2, #100	; 0x64
 80043ce:	629a      	str	r2, [r3, #40]	; 0x28
	 }
	 gyro.timeToNextRead -= 25;
 80043d0:	4b0e      	ldr	r3, [pc, #56]	; (800440c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	3b19      	subs	r3, #25
 80043d6:	4a0d      	ldr	r2, [pc, #52]	; (800440c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80043d8:	6213      	str	r3, [r2, #32]
	 if(gyro.timeToNextRead <= 0)
 80043da:	4b0c      	ldr	r3, [pc, #48]	; (800440c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	dc05      	bgt.n	80043ee <HAL_TIM_PeriodElapsedCallback+0xb2>
	 {
		 gyro.dataReady = 1;
 80043e2:	4b0a      	ldr	r3, [pc, #40]	; (800440c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80043e4:	2201      	movs	r2, #1
 80043e6:	619a      	str	r2, [r3, #24]
		 gyro.timeToNextRead = GYRO_DATA_RATE;
 80043e8:	4b08      	ldr	r3, [pc, #32]	; (800440c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80043ea:	22fa      	movs	r2, #250	; 0xfa
 80043ec:	621a      	str	r2, [r3, #32]
	 }
  }
}
 80043ee:	bf00      	nop
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	2000566c 	.word	0x2000566c
 80043fc:	200014ac 	.word	0x200014ac
 8004400:	20001758 	.word	0x20001758
 8004404:	2000360c 	.word	0x2000360c
 8004408:	20005568 	.word	0x20005568
 800440c:	200054c0 	.word	0x200054c0

08004410 <HAL_TIM_IC_CaptureCallback>:
}


//ABS
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  if (htim == absLFSensor.timer) {
 8004418:	4b20      	ldr	r3, [pc, #128]	; (800449c <HAL_TIM_IC_CaptureCallback+0x8c>)
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	429a      	cmp	r2, r3
 8004420:	d116      	bne.n	8004450 <HAL_TIM_IC_CaptureCallback+0x40>
    switch (HAL_TIM_GetActiveChannel(absLFSensor.timer)) {
 8004422:	4b1e      	ldr	r3, [pc, #120]	; (800449c <HAL_TIM_IC_CaptureCallback+0x8c>)
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	4618      	mov	r0, r3
 8004428:	f007 fee2 	bl	800c1f0 <HAL_TIM_GetActiveChannel>
 800442c:	4603      	mov	r3, r0
 800442e:	2b01      	cmp	r3, #1
 8004430:	d12a      	bne.n	8004488 <HAL_TIM_IC_CaptureCallback+0x78>
      case HAL_TIM_ACTIVE_CHANNEL_1:
    	  absLFSensor.data = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8004432:	2100      	movs	r1, #0
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f007 fe79 	bl	800c12c <HAL_TIM_ReadCapturedValue>
 800443a:	4603      	mov	r3, r0
 800443c:	461a      	mov	r2, r3
 800443e:	4b17      	ldr	r3, [pc, #92]	; (800449c <HAL_TIM_IC_CaptureCallback+0x8c>)
 8004440:	621a      	str	r2, [r3, #32]
    	  absLFSensor.timeToZeroSpeed = ABS_ZERO_SPEED_TIME;
 8004442:	4b16      	ldr	r3, [pc, #88]	; (800449c <HAL_TIM_IC_CaptureCallback+0x8c>)
 8004444:	2264      	movs	r2, #100	; 0x64
 8004446:	629a      	str	r2, [r3, #40]	; 0x28
    	  absLFSensor.dataReady = 1;
 8004448:	4b14      	ldr	r3, [pc, #80]	; (800449c <HAL_TIM_IC_CaptureCallback+0x8c>)
 800444a:	2201      	movs	r2, #1
 800444c:	619a      	str	r2, [r3, #24]
        break;
 800444e:	e020      	b.n	8004492 <HAL_TIM_IC_CaptureCallback+0x82>
      default:
        break;
    }
  }else if(htim == absRFSensor.timer) {
 8004450:	4b13      	ldr	r3, [pc, #76]	; (80044a0 <HAL_TIM_IC_CaptureCallback+0x90>)
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	429a      	cmp	r2, r3
 8004458:	d118      	bne.n	800448c <HAL_TIM_IC_CaptureCallback+0x7c>
        switch (HAL_TIM_GetActiveChannel(absRFSensor.timer)) {
 800445a:	4b11      	ldr	r3, [pc, #68]	; (80044a0 <HAL_TIM_IC_CaptureCallback+0x90>)
 800445c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445e:	4618      	mov	r0, r3
 8004460:	f007 fec6 	bl	800c1f0 <HAL_TIM_GetActiveChannel>
 8004464:	4603      	mov	r3, r0
 8004466:	2b01      	cmp	r3, #1
 8004468:	d112      	bne.n	8004490 <HAL_TIM_IC_CaptureCallback+0x80>
          case HAL_TIM_ACTIVE_CHANNEL_1:
        	  absRFSensor.data = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800446a:	2100      	movs	r1, #0
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f007 fe5d 	bl	800c12c <HAL_TIM_ReadCapturedValue>
 8004472:	4603      	mov	r3, r0
 8004474:	461a      	mov	r2, r3
 8004476:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <HAL_TIM_IC_CaptureCallback+0x90>)
 8004478:	621a      	str	r2, [r3, #32]
        	  absRFSensor.timeToZeroSpeed = ABS_ZERO_SPEED_TIME;
 800447a:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <HAL_TIM_IC_CaptureCallback+0x90>)
 800447c:	2264      	movs	r2, #100	; 0x64
 800447e:	629a      	str	r2, [r3, #40]	; 0x28
        	  absRFSensor.dataReady = 1;
 8004480:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <HAL_TIM_IC_CaptureCallback+0x90>)
 8004482:	2201      	movs	r2, #1
 8004484:	619a      	str	r2, [r3, #24]
            break;
 8004486:	e004      	b.n	8004492 <HAL_TIM_IC_CaptureCallback+0x82>
        break;
 8004488:	bf00      	nop
 800448a:	e002      	b.n	8004492 <HAL_TIM_IC_CaptureCallback+0x82>
          default:
            break;
        }
  }
 800448c:	bf00      	nop
 800448e:	e000      	b.n	8004492 <HAL_TIM_IC_CaptureCallback+0x82>
            break;
 8004490:	bf00      	nop
}
 8004492:	bf00      	nop
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	20005568 	.word	0x20005568
 80044a0:	2000559c 	.word	0x2000559c

080044a4 <HAL_UART_RxCpltCallback>:
char received_command[255];
int command_lenght = 0;
char bufor;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]

	if(huart==&huart3)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a15      	ldr	r2, [pc, #84]	; (8004504 <HAL_UART_RxCpltCallback+0x60>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d123      	bne.n	80044fc <HAL_UART_RxCpltCallback+0x58>
	{

		received_command[command_lenght] = bufor;
 80044b4:	4b14      	ldr	r3, [pc, #80]	; (8004508 <HAL_UART_RxCpltCallback+0x64>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a14      	ldr	r2, [pc, #80]	; (800450c <HAL_UART_RxCpltCallback+0x68>)
 80044ba:	7811      	ldrb	r1, [r2, #0]
 80044bc:	4a14      	ldr	r2, [pc, #80]	; (8004510 <HAL_UART_RxCpltCallback+0x6c>)
 80044be:	54d1      	strb	r1, [r2, r3]
		command_lenght++;
 80044c0:	4b11      	ldr	r3, [pc, #68]	; (8004508 <HAL_UART_RxCpltCallback+0x64>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3301      	adds	r3, #1
 80044c6:	4a10      	ldr	r2, [pc, #64]	; (8004508 <HAL_UART_RxCpltCallback+0x64>)
 80044c8:	6013      	str	r3, [r2, #0]
		if(bufor == "\n"){
 80044ca:	4b10      	ldr	r3, [pc, #64]	; (800450c <HAL_UART_RxCpltCallback+0x68>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	4b10      	ldr	r3, [pc, #64]	; (8004514 <HAL_UART_RxCpltCallback+0x70>)
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d10d      	bne.n	80044f2 <HAL_UART_RxCpltCallback+0x4e>
			command_lenght = 0;
 80044d6:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <HAL_UART_RxCpltCallback+0x64>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]
			if(strcmp(received_command, "download\n") == 0)
 80044dc:	490e      	ldr	r1, [pc, #56]	; (8004518 <HAL_UART_RxCpltCallback+0x74>)
 80044de:	480c      	ldr	r0, [pc, #48]	; (8004510 <HAL_UART_RxCpltCallback+0x6c>)
 80044e0:	f7fb feae 	bl	8000240 <strcmp>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d103      	bne.n	80044f2 <HAL_UART_RxCpltCallback+0x4e>
			{
				sendAllFilesToUart();
 80044ea:	f7ff feb1 	bl	8004250 <sendAllFilesToUart>
				openAllFiles();
 80044ee:	f7fe fd83 	bl	8002ff8 <openAllFiles>
			}
		}
		HAL_UART_Receive_IT(&huart3, &bufor, 1);
 80044f2:	2201      	movs	r2, #1
 80044f4:	4905      	ldr	r1, [pc, #20]	; (800450c <HAL_UART_RxCpltCallback+0x68>)
 80044f6:	4803      	ldr	r0, [pc, #12]	; (8004504 <HAL_UART_RxCpltCallback+0x60>)
 80044f8:	f008 fb31 	bl	800cb5e <HAL_UART_Receive_IT>
	}
}
 80044fc:	bf00      	nop
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	2000573c 	.word	0x2000573c
 8004508:	200015ec 	.word	0x200015ec
 800450c:	200015f0 	.word	0x200015f0
 8004510:	200014ec 	.word	0x200014ec
 8004514:	08016960 	.word	0x08016960
 8004518:	08016964 	.word	0x08016964

0800451c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b088      	sub	sp, #32
 8004520:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004522:	f001 fa29 	bl	8005978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004526:	f000 f893 	bl	8004650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800452a:	f7ff faf5 	bl	8003b18 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800452e:	f001 f949 	bl	80057c4 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8004532:	f00a fac1 	bl	800eab8 <MX_FATFS_Init>
  MX_DMA_Init();
 8004536:	f7ff fac9 	bl	8003acc <MX_DMA_Init>
  MX_I2C1_Init();
 800453a:	f7ff fb59 	bl	8003bf0 <MX_I2C1_Init>
  MX_I2C2_Init();
 800453e:	f7ff fb97 	bl	8003c70 <MX_I2C2_Init>
  MX_UART7_Init();
 8004542:	f001 f90f 	bl	8005764 <MX_UART7_Init>
  MX_SDMMC2_SD_Init();
 8004546:	f000 f9a9 	bl	800489c <MX_SDMMC2_SD_Init>
  MX_RTC_Init();
 800454a:	f000 f931 	bl	80047b0 <MX_RTC_Init>
  MX_ADC1_Init();
 800454e:	f7fe ffd3 	bl	80034f8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8004552:	f7ff f823 	bl	800359c <MX_ADC2_Init>
  MX_ADC3_Init();
 8004556:	f7ff f873 	bl	8003640 <MX_ADC3_Init>
  MX_CAN1_Init();
 800455a:	f7ff f9ad 	bl	80038b8 <MX_CAN1_Init>
  MX_CAN2_Init();
 800455e:	f7ff f9df 	bl	8003920 <MX_CAN2_Init>
  MX_I2C3_Init();
 8004562:	f7ff fbc5 	bl	8003cf0 <MX_I2C3_Init>
  MX_I2C4_Init();
 8004566:	f7ff fc03 	bl	8003d70 <MX_I2C4_Init>
  MX_TIM3_Init();
 800456a:	f000 ff19 	bl	80053a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800456e:	f000 ffa5 	bl	80054bc <MX_TIM4_Init>
  MX_TIM14_Init();
 8004572:	f001 f831 	bl	80055d8 <MX_TIM14_Init>



  RTC_TimeTypeDef time;
  RTC_DateTypeDef date;
  statusRegister.checkTime = SENSOR_ALL_CHECK_TIME;
 8004576:	4b2b      	ldr	r3, [pc, #172]	; (8004624 <main+0x108>)
 8004578:	f242 7210 	movw	r2, #10000	; 0x2710
 800457c:	809a      	strh	r2, [r3, #4]
  HAL_TIM_Base_Start_IT(&htim14);
 800457e:	482a      	ldr	r0, [pc, #168]	; (8004628 <main+0x10c>)
 8004580:	f007 f8e2 	bl	800b748 <HAL_TIM_Base_Start_IT>

  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8004584:	1d3b      	adds	r3, r7, #4
 8004586:	2200      	movs	r2, #0
 8004588:	4619      	mov	r1, r3
 800458a:	4828      	ldr	r0, [pc, #160]	; (800462c <main+0x110>)
 800458c:	f005 fc0a 	bl	8009da4 <HAL_RTC_GetDate>
  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8004590:	f107 0308 	add.w	r3, r7, #8
 8004594:	2200      	movs	r2, #0
 8004596:	4619      	mov	r1, r3
 8004598:	4824      	ldr	r0, [pc, #144]	; (800462c <main+0x110>)
 800459a:	f005 fafd 	bl	8009b98 <HAL_RTC_GetTime>
  printf("Aktualny czas: %02d:%02d:%02d\n", time.Hours, time.Minutes, time.Seconds);
 800459e:	7a3b      	ldrb	r3, [r7, #8]
 80045a0:	4619      	mov	r1, r3
 80045a2:	7a7b      	ldrb	r3, [r7, #9]
 80045a4:	461a      	mov	r2, r3
 80045a6:	7abb      	ldrb	r3, [r7, #10]
 80045a8:	4821      	ldr	r0, [pc, #132]	; (8004630 <main+0x114>)
 80045aa:	f00e f8c5 	bl	8012738 <iprintf>

  HAL_Delay(200);
 80045ae:	20c8      	movs	r0, #200	; 0xc8
 80045b0:	f001 fa48 	bl	8005a44 <HAL_Delay>


  HAL_Delay(1000);
 80045b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045b8:	f001 fa44 	bl	8005a44 <HAL_Delay>
  initSensors();
 80045bc:	f7ff fe7e 	bl	80042bc <initSensors>
  sdInit(&fileSystem);
 80045c0:	481c      	ldr	r0, [pc, #112]	; (8004634 <main+0x118>)
 80045c2:	f7fe fcf3 	bl	8002fac <sdInit>
  printStatusRegister();
 80045c6:	f7ff fd83 	bl	80040d0 <printStatusRegister>

  openAllFiles();
 80045ca:	f7fe fd15 	bl	8002ff8 <openAllFiles>
  HAL_UART_Receive_IT(&huart3, &bufor, 1);
 80045ce:	2201      	movs	r2, #1
 80045d0:	4919      	ldr	r1, [pc, #100]	; (8004638 <main+0x11c>)
 80045d2:	481a      	ldr	r0, [pc, #104]	; (800463c <main+0x120>)
 80045d4:	f008 fac3 	bl	800cb5e <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start(&htim3);
 80045d8:	4819      	ldr	r0, [pc, #100]	; (8004640 <main+0x124>)
 80045da:	f007 f845 	bl	800b668 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80045de:	2100      	movs	r1, #0
 80045e0:	4817      	ldr	r0, [pc, #92]	; (8004640 <main+0x124>)
 80045e2:	f007 f98b 	bl	800b8fc <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim4);
 80045e6:	4817      	ldr	r0, [pc, #92]	; (8004644 <main+0x128>)
 80045e8:	f007 f83e 	bl	800b668 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80045ec:	2100      	movs	r1, #0
 80045ee:	4815      	ldr	r0, [pc, #84]	; (8004644 <main+0x128>)
 80045f0:	f007 f984 	bl	800b8fc <HAL_TIM_IC_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if((statusRegister.SDCARD & 0b100) < SENSOR_FAIL)
 80045f4:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <main+0x108>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	f003 0304 	and.w	r3, r3, #4
 8004602:	2b03      	cmp	r3, #3
 8004604:	dc09      	bgt.n	800461a <main+0xfe>
	  {
		  if(gyro.dataReady)
 8004606:	4b10      	ldr	r3, [pc, #64]	; (8004648 <main+0x12c>)
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d005      	beq.n	800461a <main+0xfe>
		  {
			  gyroGetData(&gyro);
 800460e:	480e      	ldr	r0, [pc, #56]	; (8004648 <main+0x12c>)
 8004610:	f000 fc1e 	bl	8004e50 <gyroGetData>
			  gyroSaveData(&gyro);
 8004614:	480c      	ldr	r0, [pc, #48]	; (8004648 <main+0x12c>)
 8004616:	f7fe fe7d 	bl	8003314 <gyroSaveData>
		  }
		  if(absRFSensor.dataReady){
			  //absSaveData(&absRFSensor);
		  }
	  }
	  adcGetData(&sensord);
 800461a:	480c      	ldr	r0, [pc, #48]	; (800464c <main+0x130>)
 800461c:	f000 faef 	bl	8004bfe <adcGetData>
	  if((statusRegister.SDCARD & 0b100) < SENSOR_FAIL)
 8004620:	e7e8      	b.n	80045f4 <main+0xd8>
 8004622:	bf00      	nop
 8004624:	200014ac 	.word	0x200014ac
 8004628:	2000566c 	.word	0x2000566c
 800462c:	200015f4 	.word	0x200015f4
 8004630:	08016970 	.word	0x08016970
 8004634:	20000478 	.word	0x20000478
 8004638:	200015f0 	.word	0x200015f0
 800463c:	2000573c 	.word	0x2000573c
 8004640:	200055d4 	.word	0x200055d4
 8004644:	20005620 	.word	0x20005620
 8004648:	200054c0 	.word	0x200054c0
 800464c:	200014b4 	.word	0x200014b4

08004650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b0b8      	sub	sp, #224	; 0xe0
 8004654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004656:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800465a:	2234      	movs	r2, #52	; 0x34
 800465c:	2100      	movs	r1, #0
 800465e:	4618      	mov	r0, r3
 8004660:	f00d f93a 	bl	80118d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004664:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	605a      	str	r2, [r3, #4]
 800466e:	609a      	str	r2, [r3, #8]
 8004670:	60da      	str	r2, [r3, #12]
 8004672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004674:	f107 0308 	add.w	r3, r7, #8
 8004678:	2290      	movs	r2, #144	; 0x90
 800467a:	2100      	movs	r1, #0
 800467c:	4618      	mov	r0, r3
 800467e:	f00d f92b 	bl	80118d8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004682:	f004 f86d 	bl	8008760 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004686:	4b44      	ldr	r3, [pc, #272]	; (8004798 <SystemClock_Config+0x148>)
 8004688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468a:	4a43      	ldr	r2, [pc, #268]	; (8004798 <SystemClock_Config+0x148>)
 800468c:	f023 0318 	bic.w	r3, r3, #24
 8004690:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004692:	4b41      	ldr	r3, [pc, #260]	; (8004798 <SystemClock_Config+0x148>)
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	4a40      	ldr	r2, [pc, #256]	; (8004798 <SystemClock_Config+0x148>)
 8004698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800469c:	6413      	str	r3, [r2, #64]	; 0x40
 800469e:	4b3e      	ldr	r3, [pc, #248]	; (8004798 <SystemClock_Config+0x148>)
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a6:	607b      	str	r3, [r7, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80046aa:	4b3c      	ldr	r3, [pc, #240]	; (800479c <SystemClock_Config+0x14c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80046b2:	4a3a      	ldr	r2, [pc, #232]	; (800479c <SystemClock_Config+0x14c>)
 80046b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	4b38      	ldr	r3, [pc, #224]	; (800479c <SystemClock_Config+0x14c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80046c6:	2305      	movs	r3, #5
 80046c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80046cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80046d4:	2301      	movs	r3, #1
 80046d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80046da:	2302      	movs	r3, #2
 80046dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80046e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80046e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 80046e8:	2319      	movs	r3, #25
 80046ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 192;
 80046ee:	23c0      	movs	r3, #192	; 0xc0
 80046f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80046f4:	2306      	movs	r3, #6
 80046f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80046fa:	2304      	movs	r3, #4
 80046fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004700:	2302      	movs	r3, #2
 8004702:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004706:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800470a:	4618      	mov	r0, r3
 800470c:	f004 f838 	bl	8008780 <HAL_RCC_OscConfig>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8004716:	f000 f845 	bl	80047a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800471a:	230f      	movs	r3, #15
 800471c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004720:	2302      	movs	r3, #2
 8004722:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004726:	2300      	movs	r3, #0
 8004728:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800472c:	2300      	movs	r3, #0
 800472e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004732:	2300      	movs	r3, #0
 8004734:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004738:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800473c:	2101      	movs	r1, #1
 800473e:	4618      	mov	r0, r3
 8004740:	f004 facc 	bl	8008cdc <HAL_RCC_ClockConfig>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800474a:	f000 f82b 	bl	80047a4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 800474e:	4b14      	ldr	r3, [pc, #80]	; (80047a0 <SystemClock_Config+0x150>)
 8004750:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_I2C4|RCC_PERIPHCLK_SDMMC2
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004752:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004756:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004758:	2300      	movs	r3, #0
 800475a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800475c:	2300      	movs	r3, #0
 800475e:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004760:	2300      	movs	r3, #0
 8004762:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004764:	2300      	movs	r3, #0
 8004766:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8004768:	2300      	movs	r3, #0
 800476a:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800476c:	2300      	movs	r3, #0
 800476e:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8004770:	2300      	movs	r3, #0
 8004772:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 8004776:	2300      	movs	r3, #0
 8004778:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800477c:	f107 0308 	add.w	r3, r7, #8
 8004780:	4618      	mov	r0, r3
 8004782:	f004 fc91 	bl	80090a8 <HAL_RCCEx_PeriphCLKConfig>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <SystemClock_Config+0x140>
  {
    Error_Handler();
 800478c:	f000 f80a 	bl	80047a4 <Error_Handler>
  }
}
 8004790:	bf00      	nop
 8004792:	37e0      	adds	r7, #224	; 0xe0
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40023800 	.word	0x40023800
 800479c:	40007000 	.word	0x40007000
 80047a0:	0423d120 	.word	0x0423d120

080047a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047a8:	b672      	cpsid	i
}
 80047aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80047ac:	e7fe      	b.n	80047ac <Error_Handler+0x8>
	...

080047b0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80047b6:	f107 0308 	add.w	r3, r7, #8
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	605a      	str	r2, [r3, #4]
 80047c0:	609a      	str	r2, [r3, #8]
 80047c2:	60da      	str	r2, [r3, #12]
 80047c4:	611a      	str	r2, [r3, #16]
 80047c6:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80047c8:	2300      	movs	r3, #0
 80047ca:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80047cc:	4b24      	ldr	r3, [pc, #144]	; (8004860 <MX_RTC_Init+0xb0>)
 80047ce:	4a25      	ldr	r2, [pc, #148]	; (8004864 <MX_RTC_Init+0xb4>)
 80047d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80047d2:	4b23      	ldr	r3, [pc, #140]	; (8004860 <MX_RTC_Init+0xb0>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80047d8:	4b21      	ldr	r3, [pc, #132]	; (8004860 <MX_RTC_Init+0xb0>)
 80047da:	227f      	movs	r2, #127	; 0x7f
 80047dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80047de:	4b20      	ldr	r3, [pc, #128]	; (8004860 <MX_RTC_Init+0xb0>)
 80047e0:	22ff      	movs	r2, #255	; 0xff
 80047e2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80047e4:	4b1e      	ldr	r3, [pc, #120]	; (8004860 <MX_RTC_Init+0xb0>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80047ea:	4b1d      	ldr	r3, [pc, #116]	; (8004860 <MX_RTC_Init+0xb0>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80047f0:	4b1b      	ldr	r3, [pc, #108]	; (8004860 <MX_RTC_Init+0xb0>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80047f6:	481a      	ldr	r0, [pc, #104]	; (8004860 <MX_RTC_Init+0xb0>)
 80047f8:	f005 f87e 	bl	80098f8 <HAL_RTC_Init>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8004802:	f7ff ffcf 	bl	80047a4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8004806:	2300      	movs	r3, #0
 8004808:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 800480a:	2300      	movs	r3, #0
 800480c:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 800480e:	2300      	movs	r3, #0
 8004810:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004812:	2300      	movs	r3, #0
 8004814:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004816:	2300      	movs	r3, #0
 8004818:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800481a:	f107 0308 	add.w	r3, r7, #8
 800481e:	2201      	movs	r2, #1
 8004820:	4619      	mov	r1, r3
 8004822:	480f      	ldr	r0, [pc, #60]	; (8004860 <MX_RTC_Init+0xb0>)
 8004824:	f005 f8fa 	bl	8009a1c <HAL_RTC_SetTime>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800482e:	f7ff ffb9 	bl	80047a4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004832:	2301      	movs	r3, #1
 8004834:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8004836:	2301      	movs	r3, #1
 8004838:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 800483a:	2301      	movs	r3, #1
 800483c:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 800483e:	2300      	movs	r3, #0
 8004840:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004842:	1d3b      	adds	r3, r7, #4
 8004844:	2201      	movs	r2, #1
 8004846:	4619      	mov	r1, r3
 8004848:	4805      	ldr	r0, [pc, #20]	; (8004860 <MX_RTC_Init+0xb0>)
 800484a:	f005 fa03 	bl	8009c54 <HAL_RTC_SetDate>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8004854:	f7ff ffa6 	bl	80047a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004858:	bf00      	nop
 800485a:	3720      	adds	r7, #32
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	200015f4 	.word	0x200015f4
 8004864:	40002800 	.word	0x40002800

08004868 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a07      	ldr	r2, [pc, #28]	; (8004894 <HAL_RTC_MspInit+0x2c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d105      	bne.n	8004886 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800487a:	4b07      	ldr	r3, [pc, #28]	; (8004898 <HAL_RTC_MspInit+0x30>)
 800487c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487e:	4a06      	ldr	r2, [pc, #24]	; (8004898 <HAL_RTC_MspInit+0x30>)
 8004880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004884:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	40002800 	.word	0x40002800
 8004898:	40023800 	.word	0x40023800

0800489c <MX_SDMMC2_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc2_tx;

/* SDMMC2 init function */

void MX_SDMMC2_SD_Init(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 80048a0:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <MX_SDMMC2_SD_Init+0x38>)
 80048a2:	4a0d      	ldr	r2, [pc, #52]	; (80048d8 <MX_SDMMC2_SD_Init+0x3c>)
 80048a4:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80048a6:	4b0b      	ldr	r3, [pc, #44]	; (80048d4 <MX_SDMMC2_SD_Init+0x38>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80048ac:	4b09      	ldr	r3, [pc, #36]	; (80048d4 <MX_SDMMC2_SD_Init+0x38>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80048b2:	4b08      	ldr	r3, [pc, #32]	; (80048d4 <MX_SDMMC2_SD_Init+0x38>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80048b8:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <MX_SDMMC2_SD_Init+0x38>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80048be:	4b05      	ldr	r3, [pc, #20]	; (80048d4 <MX_SDMMC2_SD_Init+0x38>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 0;
 80048c4:	4b03      	ldr	r3, [pc, #12]	; (80048d4 <MX_SDMMC2_SD_Init+0x38>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 80048ca:	bf00      	nop
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	20001614 	.word	0x20001614
 80048d8:	40011c00 	.word	0x40011c00

080048dc <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b08a      	sub	sp, #40	; 0x28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048e4:	f107 0314 	add.w	r3, r7, #20
 80048e8:	2200      	movs	r2, #0
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	605a      	str	r2, [r3, #4]
 80048ee:	609a      	str	r2, [r3, #8]
 80048f0:	60da      	str	r2, [r3, #12]
 80048f2:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC2)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a6d      	ldr	r2, [pc, #436]	; (8004ab0 <HAL_SD_MspInit+0x1d4>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	f040 80d4 	bne.w	8004aa8 <HAL_SD_MspInit+0x1cc>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* SDMMC2 clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8004900:	4b6c      	ldr	r3, [pc, #432]	; (8004ab4 <HAL_SD_MspInit+0x1d8>)
 8004902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004904:	4a6b      	ldr	r2, [pc, #428]	; (8004ab4 <HAL_SD_MspInit+0x1d8>)
 8004906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800490a:	6453      	str	r3, [r2, #68]	; 0x44
 800490c:	4b69      	ldr	r3, [pc, #420]	; (8004ab4 <HAL_SD_MspInit+0x1d8>)
 800490e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004914:	613b      	str	r3, [r7, #16]
 8004916:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004918:	4b66      	ldr	r3, [pc, #408]	; (8004ab4 <HAL_SD_MspInit+0x1d8>)
 800491a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491c:	4a65      	ldr	r2, [pc, #404]	; (8004ab4 <HAL_SD_MspInit+0x1d8>)
 800491e:	f043 0308 	orr.w	r3, r3, #8
 8004922:	6313      	str	r3, [r2, #48]	; 0x30
 8004924:	4b63      	ldr	r3, [pc, #396]	; (8004ab4 <HAL_SD_MspInit+0x1d8>)
 8004926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004928:	f003 0308 	and.w	r3, r3, #8
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004930:	4b60      	ldr	r3, [pc, #384]	; (8004ab4 <HAL_SD_MspInit+0x1d8>)
 8004932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004934:	4a5f      	ldr	r2, [pc, #380]	; (8004ab4 <HAL_SD_MspInit+0x1d8>)
 8004936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800493a:	6313      	str	r3, [r2, #48]	; 0x30
 800493c:	4b5d      	ldr	r3, [pc, #372]	; (8004ab4 <HAL_SD_MspInit+0x1d8>)
 800493e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004944:	60bb      	str	r3, [r7, #8]
 8004946:	68bb      	ldr	r3, [r7, #8]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004948:	23c0      	movs	r3, #192	; 0xc0
 800494a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800494c:	2302      	movs	r3, #2
 800494e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004950:	2300      	movs	r3, #0
 8004952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004954:	2303      	movs	r3, #3
 8004956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8004958:	230b      	movs	r3, #11
 800495a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800495c:	f107 0314 	add.w	r3, r7, #20
 8004960:	4619      	mov	r1, r3
 8004962:	4855      	ldr	r0, [pc, #340]	; (8004ab8 <HAL_SD_MspInit+0x1dc>)
 8004964:	f002 fbe8 	bl	8007138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8004968:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 800496c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800496e:	2302      	movs	r3, #2
 8004970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004972:	2300      	movs	r3, #0
 8004974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004976:	2303      	movs	r3, #3
 8004978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800497a:	230b      	movs	r3, #11
 800497c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800497e:	f107 0314 	add.w	r3, r7, #20
 8004982:	4619      	mov	r1, r3
 8004984:	484d      	ldr	r0, [pc, #308]	; (8004abc <HAL_SD_MspInit+0x1e0>)
 8004986:	f002 fbd7 	bl	8007138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800498a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800498e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004990:	2302      	movs	r3, #2
 8004992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004994:	2300      	movs	r3, #0
 8004996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004998:	2303      	movs	r3, #3
 800499a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 800499c:	230a      	movs	r3, #10
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80049a0:	f107 0314 	add.w	r3, r7, #20
 80049a4:	4619      	mov	r1, r3
 80049a6:	4845      	ldr	r0, [pc, #276]	; (8004abc <HAL_SD_MspInit+0x1e0>)
 80049a8:	f002 fbc6 	bl	8007138 <HAL_GPIO_Init>

    /* SDMMC2 DMA Init */
    /* SDMMC2_RX Init */
    hdma_sdmmc2_rx.Instance = DMA2_Stream0;
 80049ac:	4b44      	ldr	r3, [pc, #272]	; (8004ac0 <HAL_SD_MspInit+0x1e4>)
 80049ae:	4a45      	ldr	r2, [pc, #276]	; (8004ac4 <HAL_SD_MspInit+0x1e8>)
 80049b0:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_rx.Init.Channel = DMA_CHANNEL_11;
 80049b2:	4b43      	ldr	r3, [pc, #268]	; (8004ac0 <HAL_SD_MspInit+0x1e4>)
 80049b4:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 80049b8:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049ba:	4b41      	ldr	r3, [pc, #260]	; (8004ac0 <HAL_SD_MspInit+0x1e4>)
 80049bc:	2200      	movs	r2, #0
 80049be:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049c0:	4b3f      	ldr	r3, [pc, #252]	; (8004ac0 <HAL_SD_MspInit+0x1e4>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80049c6:	4b3e      	ldr	r3, [pc, #248]	; (8004ac0 <HAL_SD_MspInit+0x1e4>)
 80049c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049cc:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80049ce:	4b3c      	ldr	r3, [pc, #240]	; (8004ac0 <HAL_SD_MspInit+0x1e4>)
 80049d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80049d4:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80049d6:	4b3a      	ldr	r3, [pc, #232]	; (8004ac0 <HAL_SD_MspInit+0x1e4>)
 80049d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80049dc:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_rx.Init.Mode = DMA_PFCTRL;
 80049de:	4b38      	ldr	r3, [pc, #224]	; (8004ac0 <HAL_SD_MspInit+0x1e4>)
 80049e0:	2220      	movs	r2, #32
 80049e2:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80049e4:	4b36      	ldr	r3, [pc, #216]	; (8004ac0 <HAL_SD_MspInit+0x1e4>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80049ea:	4b35      	ldr	r3, [pc, #212]	; (8004ac0 <HAL_SD_MspInit+0x1e4>)
 80049ec:	2204      	movs	r2, #4
 80049ee:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80049f0:	4b33      	ldr	r3, [pc, #204]	; (8004ac0 <HAL_SD_MspInit+0x1e4>)
 80049f2:	2203      	movs	r2, #3
 80049f4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc2_rx.Init.MemBurst = DMA_MBURST_INC4;
 80049f6:	4b32      	ldr	r3, [pc, #200]	; (8004ac0 <HAL_SD_MspInit+0x1e4>)
 80049f8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80049fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc2_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80049fe:	4b30      	ldr	r3, [pc, #192]	; (8004ac0 <HAL_SD_MspInit+0x1e4>)
 8004a00:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004a04:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_rx) != HAL_OK)
 8004a06:	482e      	ldr	r0, [pc, #184]	; (8004ac0 <HAL_SD_MspInit+0x1e4>)
 8004a08:	f001 ff80 	bl	800690c <HAL_DMA_Init>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_SD_MspInit+0x13a>
    {
      Error_Handler();
 8004a12:	f7ff fec7 	bl	80047a4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc2_rx);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a29      	ldr	r2, [pc, #164]	; (8004ac0 <HAL_SD_MspInit+0x1e4>)
 8004a1a:	641a      	str	r2, [r3, #64]	; 0x40
 8004a1c:	4a28      	ldr	r2, [pc, #160]	; (8004ac0 <HAL_SD_MspInit+0x1e4>)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC2_TX Init */
    hdma_sdmmc2_tx.Instance = DMA2_Stream5;
 8004a22:	4b29      	ldr	r3, [pc, #164]	; (8004ac8 <HAL_SD_MspInit+0x1ec>)
 8004a24:	4a29      	ldr	r2, [pc, #164]	; (8004acc <HAL_SD_MspInit+0x1f0>)
 8004a26:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_tx.Init.Channel = DMA_CHANNEL_11;
 8004a28:	4b27      	ldr	r3, [pc, #156]	; (8004ac8 <HAL_SD_MspInit+0x1ec>)
 8004a2a:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 8004a2e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a30:	4b25      	ldr	r3, [pc, #148]	; (8004ac8 <HAL_SD_MspInit+0x1ec>)
 8004a32:	2240      	movs	r2, #64	; 0x40
 8004a34:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a36:	4b24      	ldr	r3, [pc, #144]	; (8004ac8 <HAL_SD_MspInit+0x1ec>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a3c:	4b22      	ldr	r3, [pc, #136]	; (8004ac8 <HAL_SD_MspInit+0x1ec>)
 8004a3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a42:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004a44:	4b20      	ldr	r3, [pc, #128]	; (8004ac8 <HAL_SD_MspInit+0x1ec>)
 8004a46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a4a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004a4c:	4b1e      	ldr	r3, [pc, #120]	; (8004ac8 <HAL_SD_MspInit+0x1ec>)
 8004a4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a52:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_tx.Init.Mode = DMA_PFCTRL;
 8004a54:	4b1c      	ldr	r3, [pc, #112]	; (8004ac8 <HAL_SD_MspInit+0x1ec>)
 8004a56:	2220      	movs	r2, #32
 8004a58:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004a5a:	4b1b      	ldr	r3, [pc, #108]	; (8004ac8 <HAL_SD_MspInit+0x1ec>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004a60:	4b19      	ldr	r3, [pc, #100]	; (8004ac8 <HAL_SD_MspInit+0x1ec>)
 8004a62:	2204      	movs	r2, #4
 8004a64:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004a66:	4b18      	ldr	r3, [pc, #96]	; (8004ac8 <HAL_SD_MspInit+0x1ec>)
 8004a68:	2203      	movs	r2, #3
 8004a6a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc2_tx.Init.MemBurst = DMA_MBURST_INC4;
 8004a6c:	4b16      	ldr	r3, [pc, #88]	; (8004ac8 <HAL_SD_MspInit+0x1ec>)
 8004a6e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004a72:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc2_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004a74:	4b14      	ldr	r3, [pc, #80]	; (8004ac8 <HAL_SD_MspInit+0x1ec>)
 8004a76:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004a7a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_tx) != HAL_OK)
 8004a7c:	4812      	ldr	r0, [pc, #72]	; (8004ac8 <HAL_SD_MspInit+0x1ec>)
 8004a7e:	f001 ff45 	bl	800690c <HAL_DMA_Init>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <HAL_SD_MspInit+0x1b0>
    {
      Error_Handler();
 8004a88:	f7ff fe8c 	bl	80047a4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc2_tx);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a0e      	ldr	r2, [pc, #56]	; (8004ac8 <HAL_SD_MspInit+0x1ec>)
 8004a90:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a92:	4a0d      	ldr	r2, [pc, #52]	; (8004ac8 <HAL_SD_MspInit+0x1ec>)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8004a98:	2200      	movs	r2, #0
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	2067      	movs	r0, #103	; 0x67
 8004a9e:	f001 fefe 	bl	800689e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8004aa2:	2067      	movs	r0, #103	; 0x67
 8004aa4:	f001 ff17 	bl	80068d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }
}
 8004aa8:	bf00      	nop
 8004aaa:	3728      	adds	r7, #40	; 0x28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	40011c00 	.word	0x40011c00
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	40020c00 	.word	0x40020c00
 8004abc:	40021800 	.word	0x40021800
 8004ac0:	20001698 	.word	0x20001698
 8004ac4:	40026410 	.word	0x40026410
 8004ac8:	200016f8 	.word	0x200016f8
 8004acc:	40026488 	.word	0x40026488

08004ad0 <adcInit>:
/* *******ADC SECTION  ********/
extern ADC_HandleTypeDef hadc1;
extern ADC_HandleTypeDef hadc2;
extern ADC_HandleTypeDef hadc3;
void adcInit(ADCSensor* sens,ADC_HandleTypeDef * adc,int channel,FIL* f)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	603b      	str	r3, [r7, #0]
	if(f == 0)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d108      	bne.n	8004af6 <adcInit+0x26>
	{
		sens->File = (FIL*)malloc(sizeof(FIL));
 8004ae4:	f241 0030 	movw	r0, #4144	; 0x1030
 8004ae8:	f00c feee 	bl	80118c8 <malloc>
 8004aec:	4603      	mov	r3, r0
 8004aee:	461a      	mov	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	e002      	b.n	8004afc <adcInit+0x2c>
	}else
	{
		sens->File = f;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	601a      	str	r2, [r3, #0]
	}
	sens->adcChannel = channel;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	635a      	str	r2, [r3, #52]	; 0x34
	sens->adc = adc;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	631a      	str	r2, [r3, #48]	; 0x30
	sens->timeFromLastSuccRead = 0;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	621a      	str	r2, [r3, #32]
}
 8004b0e:	bf00      	nop
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
	...

08004b18 <damperInit>:
void damperInit(ADCSensor* sens,SENSORS id,FIL * f){
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	460b      	mov	r3, r1
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	72fb      	strb	r3, [r7, #11]
	switch(id){
 8004b26:	7afb      	ldrb	r3, [r7, #11]
 8004b28:	2b07      	cmp	r3, #7
 8004b2a:	d002      	beq.n	8004b32 <damperInit+0x1a>
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	d00d      	beq.n	8004b4c <damperInit+0x34>
	case DAMPERRF:
		adcInit(sens,&hadc3,13,f);
		statusRegister.DamperRF = SENSOR_OK;
		break;
	default:
		break;
 8004b30:	e019      	b.n	8004b66 <damperInit+0x4e>
		adcInit(sens,&hadc3,12,f);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	220c      	movs	r2, #12
 8004b36:	491c      	ldr	r1, [pc, #112]	; (8004ba8 <damperInit+0x90>)
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f7ff ffc9 	bl	8004ad0 <adcInit>
		statusRegister.DamperLF = SENSOR_OK;
 8004b3e:	4a1b      	ldr	r2, [pc, #108]	; (8004bac <damperInit+0x94>)
 8004b40:	78d3      	ldrb	r3, [r2, #3]
 8004b42:	2101      	movs	r1, #1
 8004b44:	f361 0302 	bfi	r3, r1, #0, #3
 8004b48:	70d3      	strb	r3, [r2, #3]
		break;
 8004b4a:	e00c      	b.n	8004b66 <damperInit+0x4e>
		adcInit(sens,&hadc3,13,f);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	220d      	movs	r2, #13
 8004b50:	4915      	ldr	r1, [pc, #84]	; (8004ba8 <damperInit+0x90>)
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f7ff ffbc 	bl	8004ad0 <adcInit>
		statusRegister.DamperRF = SENSOR_OK;
 8004b58:	4a14      	ldr	r2, [pc, #80]	; (8004bac <damperInit+0x94>)
 8004b5a:	78d3      	ldrb	r3, [r2, #3]
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	f361 03c5 	bfi	r3, r1, #3, #3
 8004b62:	70d3      	strb	r3, [r2, #3]
		break;
 8004b64:	bf00      	nop
	}
	sens->dataReady = 0;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	619a      	str	r2, [r3, #24]
	RTC_DateTypeDef date;
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8004b6c:	f107 0314 	add.w	r3, r7, #20
 8004b70:	2200      	movs	r2, #0
 8004b72:	4619      	mov	r1, r3
 8004b74:	480e      	ldr	r0, [pc, #56]	; (8004bb0 <damperInit+0x98>)
 8004b76:	f005 f915 	bl	8009da4 <HAL_RTC_GetDate>
	sprintf(sens->path,"DAMP%02d%02d.csv",date.Date,date.Month);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	1d18      	adds	r0, r3, #4
 8004b7e:	7dbb      	ldrb	r3, [r7, #22]
 8004b80:	461a      	mov	r2, r3
 8004b82:	7d7b      	ldrb	r3, [r7, #21]
 8004b84:	490b      	ldr	r1, [pc, #44]	; (8004bb4 <damperInit+0x9c>)
 8004b86:	f00d fe91 	bl	80128ac <siprintf>
	sens->ID = id;
 8004b8a:	7afa      	ldrb	r2, [r7, #11]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	629a      	str	r2, [r3, #40]	; 0x28
	sens->adcType = damper;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	sens->timeToNextRead = DAMPER_DATA_RATE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2232      	movs	r2, #50	; 0x32
 8004b9c:	61da      	str	r2, [r3, #28]

}
 8004b9e:	bf00      	nop
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	200002ac 	.word	0x200002ac
 8004bac:	200014ac 	.word	0x200014ac
 8004bb0:	200015f4 	.word	0x200015f4
 8004bb4:	08016990 	.word	0x08016990

08004bb8 <ADC_SetActiveChannel>:
	sprintf(sens->path,"WHEEl%02d%02d.csv",date.Date,date.Month);
	sens->adcType = steeringWheel;
	sens->timeToNextRead = STEERING_DATA_RATE;
}
void ADC_SetActiveChannel(ADCSensor* sens)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004bc0:	f107 0308 	add.w	r3, r7, #8
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	605a      	str	r2, [r3, #4]
 8004bca:	609a      	str	r2, [r3, #8]
 8004bcc:	60da      	str	r2, [r3, #12]
  sConfig.Channel = sens->adcChannel;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd2:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004bd8:	2307      	movs	r3, #7
 8004bda:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(sens->adc, &sConfig) != HAL_OK)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be0:	f107 0208 	add.w	r2, r7, #8
 8004be4:	4611      	mov	r1, r2
 8004be6:	4618      	mov	r0, r3
 8004be8:	f001 fa28 	bl	800603c <HAL_ADC_ConfigChannel>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <ADC_SetActiveChannel+0x3e>
  {
   Error_Handler();
 8004bf2:	f7ff fdd7 	bl	80047a4 <Error_Handler>
  }
}
 8004bf6:	bf00      	nop
 8004bf8:	3718      	adds	r7, #24
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <adcGetData>:
void adcGetData(ADCSensor * sens){
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b082      	sub	sp, #8
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
	ADC_SetActiveChannel(sens);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff ffd6 	bl	8004bb8 <ADC_SetActiveChannel>
	HAL_ADC_Start(sens->adc);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 ff7f 	bl	8005b14 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(sens->adc, HAL_MAX_DELAY);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1a:	f04f 31ff 	mov.w	r1, #4294967295
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f001 f846 	bl	8005cb0 <HAL_ADC_PollForConversion>
	sens->data = HAL_ADC_GetValue(sens->adc);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f001 f9dc 	bl	8005fe6 <HAL_ADC_GetValue>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	461a      	mov	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004c36:	bf00      	nop
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
	...

08004c40 <absInit>:
/******** ABS SECTION  ********/
void absInit(ABSSensor * sens,SENSORS id,TIM_HandleTypeDef* tim,int channel,FIL *f){
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	607a      	str	r2, [r7, #4]
 8004c4a:	603b      	str	r3, [r7, #0]
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	72fb      	strb	r3, [r7, #11]
	if(f == 0)
 8004c50:	6a3b      	ldr	r3, [r7, #32]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d107      	bne.n	8004c66 <absInit+0x26>
	{
		sens->File = (FIL*)malloc(sizeof(FIL));
 8004c56:	f241 0030 	movw	r0, #4144	; 0x1030
 8004c5a:	f00c fe35 	bl	80118c8 <malloc>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	461a      	mov	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	601a      	str	r2, [r3, #0]
	}
	switch(id){
 8004c66:	7afb      	ldrb	r3, [r7, #11]
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	d002      	beq.n	8004c72 <absInit+0x32>
 8004c6c:	2b05      	cmp	r3, #5
 8004c6e:	d007      	beq.n	8004c80 <absInit+0x40>
 8004c70:	e00d      	b.n	8004c8e <absInit+0x4e>
	case ABSLF:
		statusRegister.VSSLF = SENSOR_OK;
 8004c72:	4a16      	ldr	r2, [pc, #88]	; (8004ccc <absInit+0x8c>)
 8004c74:	6813      	ldr	r3, [r2, #0]
 8004c76:	2101      	movs	r1, #1
 8004c78:	f361 33d1 	bfi	r3, r1, #15, #3
 8004c7c:	6013      	str	r3, [r2, #0]
		break;
 8004c7e:	e006      	b.n	8004c8e <absInit+0x4e>

	case ABSRF:
		statusRegister.VSSRF = SENSOR_OK;
 8004c80:	4a12      	ldr	r2, [pc, #72]	; (8004ccc <absInit+0x8c>)
 8004c82:	7893      	ldrb	r3, [r2, #2]
 8004c84:	2101      	movs	r1, #1
 8004c86:	f361 0384 	bfi	r3, r1, #2, #3
 8004c8a:	7093      	strb	r3, [r2, #2]
		break;
 8004c8c:	bf00      	nop
	}
	sens->dataReady = 0;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	619a      	str	r2, [r3, #24]
	sens->ID =id;
 8004c94:	7afa      	ldrb	r2, [r7, #11]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	625a      	str	r2, [r3, #36]	; 0x24
	RTC_DateTypeDef date;
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8004c9a:	f107 0314 	add.w	r3, r7, #20
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	480b      	ldr	r0, [pc, #44]	; (8004cd0 <absInit+0x90>)
 8004ca4:	f005 f87e 	bl	8009da4 <HAL_RTC_GetDate>
	sprintf(sens->path,"ABS%02d%02d.csv",date.Date,date.Month);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	1d18      	adds	r0, r3, #4
 8004cac:	7dbb      	ldrb	r3, [r7, #22]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	7d7b      	ldrb	r3, [r7, #21]
 8004cb2:	4908      	ldr	r1, [pc, #32]	; (8004cd4 <absInit+0x94>)
 8004cb4:	f00d fdfa 	bl	80128ac <siprintf>
	sens->timer = tim;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	62da      	str	r2, [r3, #44]	; 0x2c
	sens->timerChannel = channel;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004cc4:	bf00      	nop
 8004cc6:	3718      	adds	r7, #24
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	200014ac 	.word	0x200014ac
 8004cd0:	200015f4 	.word	0x200015f4
 8004cd4:	080169b8 	.word	0x080169b8

08004cd8 <gyroInit>:
}
/* *******GYRO SECTION  ********/

//GYRO FUNCS
void gyroInit(GyroSensor * sens)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
	int result = MPU9250_Init();
 8004ce0:	f7fd ffc6 	bl	8002c70 <MPU9250_Init>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	60fb      	str	r3, [r7, #12]
	if(result == 0)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d106      	bne.n	8004cfc <gyroInit+0x24>
	{
		statusRegister.GYRO = SENSOR_OK;
 8004cee:	4a18      	ldr	r2, [pc, #96]	; (8004d50 <gyroInit+0x78>)
 8004cf0:	8813      	ldrh	r3, [r2, #0]
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	f361 1388 	bfi	r3, r1, #6, #3
 8004cf8:	8013      	strh	r3, [r2, #0]
 8004cfa:	e004      	b.n	8004d06 <gyroInit+0x2e>
	}else{
		statusRegister.GYRO = SENSOR_INIT_FAIL;
 8004cfc:	4a14      	ldr	r2, [pc, #80]	; (8004d50 <gyroInit+0x78>)
 8004cfe:	8813      	ldrh	r3, [r2, #0]
 8004d00:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 8004d04:	8013      	strh	r3, [r2, #0]
	}
	sens->File = (FIL*)malloc(sizeof(FIL));
 8004d06:	f241 0030 	movw	r0, #4144	; 0x1030
 8004d0a:	f00c fddd 	bl	80118c8 <malloc>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	461a      	mov	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	601a      	str	r2, [r3, #0]

	RTC_DateTypeDef date;
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8004d16:	f107 0308 	add.w	r3, r7, #8
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	480d      	ldr	r0, [pc, #52]	; (8004d54 <gyroInit+0x7c>)
 8004d20:	f005 f840 	bl	8009da4 <HAL_RTC_GetDate>
	sprintf(sens->path,"GYRO%02d%02d.csv",date.Date,date.Month);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	1d18      	adds	r0, r3, #4
 8004d28:	7abb      	ldrb	r3, [r7, #10]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	7a7b      	ldrb	r3, [r7, #9]
 8004d2e:	490a      	ldr	r1, [pc, #40]	; (8004d58 <gyroInit+0x80>)
 8004d30:	f00d fdbc 	bl	80128ac <siprintf>
	sens->dataReady = 0;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	619a      	str	r2, [r3, #24]
	sens->saveRate = GYRO_DATA_RATE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	22fa      	movs	r2, #250	; 0xfa
 8004d3e:	61da      	str	r2, [r3, #28]
	sens->timeToNextRead = GYRO_DATA_RATE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	22fa      	movs	r2, #250	; 0xfa
 8004d44:	621a      	str	r2, [r3, #32]
}
 8004d46:	bf00      	nop
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	200014ac 	.word	0x200014ac
 8004d54:	200015f4 	.word	0x200015f4
 8004d58:	080169c8 	.word	0x080169c8
 8004d5c:	00000000 	.word	0x00000000

08004d60 <gyroConvertData>:
void gyroConvertData(struct gyroData * input, struct gyroDataCalc * output)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
	output->acc_data_calc[0] = (double) input->acc_data[0] / 16384;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d70:	ee07 3a90 	vmov	s15, r3
 8004d74:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004d78:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8004e38 <gyroConvertData+0xd8>
 8004d7c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	ed83 7b00 	vstr	d7, [r3]
	output->acc_data_calc[1] = (double) input->acc_data[1] / 16384;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004d8c:	ee07 3a90 	vmov	s15, r3
 8004d90:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004d94:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8004e38 <gyroConvertData+0xd8>
 8004d98:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	ed83 7b02 	vstr	d7, [r3, #8]
	output->acc_data_calc[2] = (double) input->acc_data[2] / 16384;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004da8:	ee07 3a90 	vmov	s15, r3
 8004dac:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004db0:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8004e38 <gyroConvertData+0xd8>
 8004db4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	ed83 7b04 	vstr	d7, [r3, #16]
	output->gyro_data_calc[0] = (double) input->gyro_data[0] * 250 / 32768;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004dc4:	ee07 3a90 	vmov	s15, r3
 8004dc8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004dcc:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8004e40 <gyroConvertData+0xe0>
 8004dd0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004dd4:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8004e48 <gyroConvertData+0xe8>
 8004dd8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	ed83 7b06 	vstr	d7, [r3, #24]
	output->gyro_data_calc[1] = (double) input->gyro_data[1] * 250 / 32768;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004de8:	ee07 3a90 	vmov	s15, r3
 8004dec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004df0:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8004e40 <gyroConvertData+0xe0>
 8004df4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004df8:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8004e48 <gyroConvertData+0xe8>
 8004dfc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	ed83 7b08 	vstr	d7, [r3, #32]
	output->gyro_data_calc[2] = (double) input->gyro_data[2] * 250 / 32768;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004e0c:	ee07 3a90 	vmov	s15, r3
 8004e10:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004e14:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8004e40 <gyroConvertData+0xe0>
 8004e18:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004e1c:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8004e48 <gyroConvertData+0xe8>
 8004e20:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28

}
 8004e2a:	bf00      	nop
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	00000000 	.word	0x00000000
 8004e3c:	40d00000 	.word	0x40d00000
 8004e40:	00000000 	.word	0x00000000
 8004e44:	406f4000 	.word	0x406f4000
 8004e48:	00000000 	.word	0x00000000
 8004e4c:	40e00000 	.word	0x40e00000

08004e50 <gyroGetData>:

void gyroGetData(GyroSensor * sens)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
	gyroData imu_9dof_data;
    MPU9250_GetData(imu_9dof_data.acc_data, imu_9dof_data.mag_data, imu_9dof_data.gyro_data);
 8004e58:	f107 030c 	add.w	r3, r7, #12
 8004e5c:	f103 020c 	add.w	r2, r3, #12
 8004e60:	f107 030c 	add.w	r3, r7, #12
 8004e64:	1d99      	adds	r1, r3, #6
 8004e66:	f107 030c 	add.w	r3, r7, #12
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fd ffca 	bl	8002e04 <MPU9250_GetData>
    gyroConvertData(&imu_9dof_data, &sens->data);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8004e76:	f107 030c 	add.w	r3, r7, #12
 8004e7a:	4611      	mov	r1, r2
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7ff ff6f 	bl	8004d60 <gyroConvertData>
    sens->dataReady = 0;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	619a      	str	r2, [r3, #24]
}
 8004e88:	bf00      	nop
 8004e8a:	3720      	adds	r7, #32
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <mlxInit>:



//MLX FUNCS
int mlxInit(MLXSensor *mlx,SENSORS id, I2C_HandleTypeDef * i2c,FIL * f)
{
 8004e90:	b590      	push	{r4, r7, lr}
 8004e92:	f2ad 6d9c 	subw	sp, sp, #1692	; 0x69c
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	f507 64d3 	add.w	r4, r7, #1688	; 0x698
 8004e9c:	f2a4 648c 	subw	r4, r4, #1676	; 0x68c
 8004ea0:	6020      	str	r0, [r4, #0]
 8004ea2:	4608      	mov	r0, r1
 8004ea4:	f507 61d3 	add.w	r1, r7, #1688	; 0x698
 8004ea8:	f2a1 6194 	subw	r1, r1, #1684	; 0x694
 8004eac:	600a      	str	r2, [r1, #0]
 8004eae:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8004eb2:	f5a2 62d3 	sub.w	r2, r2, #1688	; 0x698
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004ebc:	f2a3 638d 	subw	r3, r3, #1677	; 0x68d
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	701a      	strb	r2, [r3, #0]
		uint16_t eeMLX90640[832];
		if(f == 0)
 8004ec4:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004ec8:	f5a3 63d3 	sub.w	r3, r3, #1688	; 0x698
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10c      	bne.n	8004eec <mlxInit+0x5c>
		{
			mlx->File = (FIL*)malloc(sizeof(FIL));
 8004ed2:	f241 0030 	movw	r0, #4144	; 0x1030
 8004ed6:	f00c fcf7 	bl	80118c8 <malloc>
 8004eda:	4603      	mov	r3, r0
 8004edc:	461a      	mov	r2, r3
 8004ede:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004ee2:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	e00a      	b.n	8004f02 <mlxInit+0x72>
		}else
		{
			mlx->File = f;
 8004eec:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004ef0:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8004efa:	f5a2 62d3 	sub.w	r2, r2, #1688	; 0x698
 8004efe:	6812      	ldr	r2, [r2, #0]
 8004f00:	601a      	str	r2, [r3, #0]
		}
		RTC_DateTypeDef date;
		HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8004f02:	f107 0310 	add.w	r3, r7, #16
 8004f06:	2200      	movs	r2, #0
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4861      	ldr	r0, [pc, #388]	; (8005090 <mlxInit+0x200>)
 8004f0c:	f004 ff4a 	bl	8009da4 <HAL_RTC_GetDate>
		sprintf(mlx->path,"MLX%02d%02d.csv",date.Date,date.Month);
 8004f10:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004f14:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	1d18      	adds	r0, r3, #4
 8004f1c:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004f20:	f5a3 63d1 	sub.w	r3, r3, #1672	; 0x688
 8004f24:	789b      	ldrb	r3, [r3, #2]
 8004f26:	461a      	mov	r2, r3
 8004f28:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004f2c:	f5a3 63d1 	sub.w	r3, r3, #1672	; 0x688
 8004f30:	785b      	ldrb	r3, [r3, #1]
 8004f32:	4958      	ldr	r1, [pc, #352]	; (8005094 <mlxInit+0x204>)
 8004f34:	f00d fcba 	bl	80128ac <siprintf>
		mlx->timeToNextRead = MLX_DATA_RATE;
 8004f38:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004f3c:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f46:	621a      	str	r2, [r3, #32]
		mlx->dataReady = 0;
 8004f48:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004f4c:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2200      	movs	r2, #0
 8004f54:	619a      	str	r2, [r3, #24]
	  	mlx->emissivity = 0.95;
 8004f56:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004f5a:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f64:	f503 636b 	add.w	r3, r3, #3760	; 0xeb0
 8004f68:	4a4b      	ldr	r2, [pc, #300]	; (8005098 <mlxInit+0x208>)
 8004f6a:	601a      	str	r2, [r3, #0]
	  	mlx->ID = id;
 8004f6c:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004f70:	f2a3 638d 	subw	r3, r3, #1677	; 0x68d
 8004f74:	781a      	ldrb	r2, [r3, #0]
 8004f76:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004f7a:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	625a      	str	r2, [r3, #36]	; 0x24
		MLX90640_SetRefreshRate(MLX90640_ADDR, RefreshRate,mlx->i2c);
 8004f82:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004f86:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8e:	461a      	mov	r2, r3
 8004f90:	2104      	movs	r1, #4
 8004f92:	2033      	movs	r0, #51	; 0x33
 8004f94:	f7fb fd8d 	bl	8000ab2 <MLX90640_SetRefreshRate>
	  	MLX90640_SetChessMode(MLX90640_ADDR,mlx->i2c);
 8004f98:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004f9c:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	2033      	movs	r0, #51	; 0x33
 8004fa8:	f7fb fdb5 	bl	8000b16 <MLX90640_SetChessMode>
	    int status = MLX90640_DumpEE(MLX90640_ADDR, eeMLX90640,mlx->i2c);
 8004fac:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004fb0:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fb8:	f107 0314 	add.w	r3, r7, #20
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	2033      	movs	r0, #51	; 0x33
 8004fc0:	f7fb fd1c 	bl	80009fc <MLX90640_DumpEE>
 8004fc4:	f8c7 0694 	str.w	r0, [r7, #1684]	; 0x694
	    status = status | MLX90640_ExtractParameters(eeMLX90640, &mlx->mlx90640);
 8004fc8:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004fcc:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8004fd6:	f107 0314 	add.w	r3, r7, #20
 8004fda:	4611      	mov	r1, r2
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7fb fd23 	bl	8000a28 <MLX90640_ExtractParameters>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	f8d7 3694 	ldr.w	r3, [r7, #1684]	; 0x694
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	f8c7 3694 	str.w	r3, [r7, #1684]	; 0x694
	    if (status != 0){
 8004fee:	f8d7 3694 	ldr.w	r3, [r7, #1684]	; 0x694
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d01d      	beq.n	8005032 <mlxInit+0x1a2>
	    	 if(mlx->ID == MLXLF)
 8004ff6:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004ffa:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	2b02      	cmp	r3, #2
 8005004:	d105      	bne.n	8005012 <mlxInit+0x182>
	    	 {
	    	    statusRegister.MLXLF = SENSOR_INIT_FAIL;
 8005006:	4a25      	ldr	r2, [pc, #148]	; (800509c <mlxInit+0x20c>)
 8005008:	7853      	ldrb	r3, [r2, #1]
 800500a:	f043 030e 	orr.w	r3, r3, #14
 800500e:	7053      	strb	r3, [r2, #1]
 8005010:	e00c      	b.n	800502c <mlxInit+0x19c>
	    	 }else if(mlx->ID == MLXRF)
 8005012:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005016:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	2b03      	cmp	r3, #3
 8005020:	d104      	bne.n	800502c <mlxInit+0x19c>
	    	 {
	    	    statusRegister.MLXRF = SENSOR_INIT_FAIL;
 8005022:	4a1e      	ldr	r2, [pc, #120]	; (800509c <mlxInit+0x20c>)
 8005024:	7853      	ldrb	r3, [r2, #1]
 8005026:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800502a:	7053      	strb	r3, [r2, #1]
	    	 }
	    	 return status;
 800502c:	f8d7 3694 	ldr.w	r3, [r7, #1684]	; 0x694
 8005030:	e028      	b.n	8005084 <mlxInit+0x1f4>
	   }
	    mlx->i2c = i2c;
 8005032:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005036:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8005040:	f2a2 6294 	subw	r2, r2, #1684	; 0x694
 8005044:	6812      	ldr	r2, [r2, #0]
 8005046:	629a      	str	r2, [r3, #40]	; 0x28

	    if(mlx->ID == MLXLF)
 8005048:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 800504c:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	2b02      	cmp	r3, #2
 8005056:	d106      	bne.n	8005066 <mlxInit+0x1d6>
	    {
	    	statusRegister.MLXLF = SENSOR_OK;
 8005058:	4a10      	ldr	r2, [pc, #64]	; (800509c <mlxInit+0x20c>)
 800505a:	7853      	ldrb	r3, [r2, #1]
 800505c:	2101      	movs	r1, #1
 800505e:	f361 0343 	bfi	r3, r1, #1, #3
 8005062:	7053      	strb	r3, [r2, #1]
 8005064:	e00d      	b.n	8005082 <mlxInit+0x1f2>
	    }else if(mlx->ID == MLXRF)
 8005066:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 800506a:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	2b03      	cmp	r3, #3
 8005074:	d105      	bne.n	8005082 <mlxInit+0x1f2>
	    {
	    	statusRegister.MLXRF = SENSOR_OK;
 8005076:	4a09      	ldr	r2, [pc, #36]	; (800509c <mlxInit+0x20c>)
 8005078:	7853      	ldrb	r3, [r2, #1]
 800507a:	2101      	movs	r1, #1
 800507c:	f361 1306 	bfi	r3, r1, #4, #3
 8005080:	7053      	strb	r3, [r2, #1]
	    }


	    return 0;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	f207 679c 	addw	r7, r7, #1692	; 0x69c
 800508a:	46bd      	mov	sp, r7
 800508c:	bd90      	pop	{r4, r7, pc}
 800508e:	bf00      	nop
 8005090:	200015f4 	.word	0x200015f4
 8005094:	080169dc 	.word	0x080169dc
 8005098:	3f733333 	.word	0x3f733333
 800509c:	200014ac 	.word	0x200014ac

080050a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80050a6:	4b0f      	ldr	r3, [pc, #60]	; (80050e4 <HAL_MspInit+0x44>)
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	4a0e      	ldr	r2, [pc, #56]	; (80050e4 <HAL_MspInit+0x44>)
 80050ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b0:	6413      	str	r3, [r2, #64]	; 0x40
 80050b2:	4b0c      	ldr	r3, [pc, #48]	; (80050e4 <HAL_MspInit+0x44>)
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ba:	607b      	str	r3, [r7, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050be:	4b09      	ldr	r3, [pc, #36]	; (80050e4 <HAL_MspInit+0x44>)
 80050c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c2:	4a08      	ldr	r2, [pc, #32]	; (80050e4 <HAL_MspInit+0x44>)
 80050c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050c8:	6453      	str	r3, [r2, #68]	; 0x44
 80050ca:	4b06      	ldr	r3, [pc, #24]	; (80050e4 <HAL_MspInit+0x44>)
 80050cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050d2:	603b      	str	r3, [r7, #0]
 80050d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	40023800 	.word	0x40023800

080050e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80050ec:	e7fe      	b.n	80050ec <NMI_Handler+0x4>

080050ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050ee:	b480      	push	{r7}
 80050f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050f2:	e7fe      	b.n	80050f2 <HardFault_Handler+0x4>

080050f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050f8:	e7fe      	b.n	80050f8 <MemManage_Handler+0x4>

080050fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050fa:	b480      	push	{r7}
 80050fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050fe:	e7fe      	b.n	80050fe <BusFault_Handler+0x4>

08005100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005104:	e7fe      	b.n	8005104 <UsageFault_Handler+0x4>

08005106 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005106:	b480      	push	{r7}
 8005108:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800510a:	bf00      	nop
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005118:	bf00      	nop
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005122:	b480      	push	{r7}
 8005124:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005126:	bf00      	nop
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005134:	f000 fc66 	bl	8005a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005138:	bf00      	nop
 800513a:	bd80      	pop	{r7, pc}

0800513c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005140:	4805      	ldr	r0, [pc, #20]	; (8005158 <ADC_IRQHandler+0x1c>)
 8005142:	f000 fe40 	bl	8005dc6 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8005146:	4805      	ldr	r0, [pc, #20]	; (800515c <ADC_IRQHandler+0x20>)
 8005148:	f000 fe3d 	bl	8005dc6 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800514c:	4804      	ldr	r0, [pc, #16]	; (8005160 <ADC_IRQHandler+0x24>)
 800514e:	f000 fe3a 	bl	8005dc6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8005152:	bf00      	nop
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	2000021c 	.word	0x2000021c
 800515c:	20000264 	.word	0x20000264
 8005160:	200002ac 	.word	0x200002ac

08005164 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005168:	4802      	ldr	r0, [pc, #8]	; (8005174 <TIM3_IRQHandler+0x10>)
 800516a:	f006 fd17 	bl	800bb9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800516e:	bf00      	nop
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	200055d4 	.word	0x200055d4

08005178 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800517c:	4802      	ldr	r0, [pc, #8]	; (8005188 <TIM4_IRQHandler+0x10>)
 800517e:	f006 fd0d 	bl	800bb9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005182:	bf00      	nop
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	20005620 	.word	0x20005620

0800518c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005190:	4802      	ldr	r0, [pc, #8]	; (800519c <USART3_IRQHandler+0x10>)
 8005192:	f007 fd33 	bl	800cbfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005196:	bf00      	nop
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	2000573c 	.word	0x2000573c

080051a0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80051a4:	4802      	ldr	r0, [pc, #8]	; (80051b0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80051a6:	f006 fcf9 	bl	800bb9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80051aa:	bf00      	nop
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	2000566c 	.word	0x2000566c

080051b4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_rx);
 80051b8:	4802      	ldr	r0, [pc, #8]	; (80051c4 <DMA2_Stream0_IRQHandler+0x10>)
 80051ba:	f001 fd47 	bl	8006c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80051be:	bf00      	nop
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	20001698 	.word	0x20001698

080051c8 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_tx);
 80051cc:	4802      	ldr	r0, [pc, #8]	; (80051d8 <DMA2_Stream5_IRQHandler+0x10>)
 80051ce:	f001 fd3d 	bl	8006c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80051d2:	bf00      	nop
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	200016f8 	.word	0x200016f8

080051dc <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 80051e0:	4802      	ldr	r0, [pc, #8]	; (80051ec <SDMMC2_IRQHandler+0x10>)
 80051e2:	f005 f93f 	bl	800a464 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 80051e6:	bf00      	nop
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	20001614 	.word	0x20001614

080051f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80051f0:	b480      	push	{r7}
 80051f2:	af00      	add	r7, sp, #0
	return 1;
 80051f4:	2301      	movs	r3, #1
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <_kill>:

int _kill(int pid, int sig)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800520a:	f00c fb33 	bl	8011874 <__errno>
 800520e:	4603      	mov	r3, r0
 8005210:	2216      	movs	r2, #22
 8005212:	601a      	str	r2, [r3, #0]
	return -1;
 8005214:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005218:	4618      	mov	r0, r3
 800521a:	3708      	adds	r7, #8
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <_exit>:

void _exit (int status)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005228:	f04f 31ff 	mov.w	r1, #4294967295
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f7ff ffe7 	bl	8005200 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005232:	e7fe      	b.n	8005232 <_exit+0x12>

08005234 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005240:	2300      	movs	r3, #0
 8005242:	617b      	str	r3, [r7, #20]
 8005244:	e00a      	b.n	800525c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005246:	f3af 8000 	nop.w
 800524a:	4601      	mov	r1, r0
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	60ba      	str	r2, [r7, #8]
 8005252:	b2ca      	uxtb	r2, r1
 8005254:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	3301      	adds	r3, #1
 800525a:	617b      	str	r3, [r7, #20]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	429a      	cmp	r2, r3
 8005262:	dbf0      	blt.n	8005246 <_read+0x12>
	}

return len;
 8005264:	687b      	ldr	r3, [r7, #4]
}
 8005266:	4618      	mov	r0, r3
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b086      	sub	sp, #24
 8005272:	af00      	add	r7, sp, #0
 8005274:	60f8      	str	r0, [r7, #12]
 8005276:	60b9      	str	r1, [r7, #8]
 8005278:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800527a:	2300      	movs	r3, #0
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	e009      	b.n	8005294 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	1c5a      	adds	r2, r3, #1
 8005284:	60ba      	str	r2, [r7, #8]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	4618      	mov	r0, r3
 800528a:	f7fe faf7 	bl	800387c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	3301      	adds	r3, #1
 8005292:	617b      	str	r3, [r7, #20]
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	429a      	cmp	r2, r3
 800529a:	dbf1      	blt.n	8005280 <_write+0x12>
	}
	return len;
 800529c:	687b      	ldr	r3, [r7, #4]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3718      	adds	r7, #24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <_close>:

int _close(int file)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
	return -1;
 80052ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80052be:	b480      	push	{r7}
 80052c0:	b083      	sub	sp, #12
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80052ce:	605a      	str	r2, [r3, #4]
	return 0;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <_isatty>:

int _isatty(int file)
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
	return 1;
 80052e6:	2301      	movs	r3, #1
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
	return 0;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
	...

08005310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005318:	4a14      	ldr	r2, [pc, #80]	; (800536c <_sbrk+0x5c>)
 800531a:	4b15      	ldr	r3, [pc, #84]	; (8005370 <_sbrk+0x60>)
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005324:	4b13      	ldr	r3, [pc, #76]	; (8005374 <_sbrk+0x64>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d102      	bne.n	8005332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800532c:	4b11      	ldr	r3, [pc, #68]	; (8005374 <_sbrk+0x64>)
 800532e:	4a12      	ldr	r2, [pc, #72]	; (8005378 <_sbrk+0x68>)
 8005330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005332:	4b10      	ldr	r3, [pc, #64]	; (8005374 <_sbrk+0x64>)
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4413      	add	r3, r2
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	429a      	cmp	r2, r3
 800533e:	d207      	bcs.n	8005350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005340:	f00c fa98 	bl	8011874 <__errno>
 8005344:	4603      	mov	r3, r0
 8005346:	220c      	movs	r2, #12
 8005348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800534a:	f04f 33ff 	mov.w	r3, #4294967295
 800534e:	e009      	b.n	8005364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005350:	4b08      	ldr	r3, [pc, #32]	; (8005374 <_sbrk+0x64>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005356:	4b07      	ldr	r3, [pc, #28]	; (8005374 <_sbrk+0x64>)
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4413      	add	r3, r2
 800535e:	4a05      	ldr	r2, [pc, #20]	; (8005374 <_sbrk+0x64>)
 8005360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005362:	68fb      	ldr	r3, [r7, #12]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	20080000 	.word	0x20080000
 8005370:	00000400 	.word	0x00000400
 8005374:	200055d0 	.word	0x200055d0
 8005378:	20005818 	.word	0x20005818

0800537c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005380:	4b06      	ldr	r3, [pc, #24]	; (800539c <SystemInit+0x20>)
 8005382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005386:	4a05      	ldr	r2, [pc, #20]	; (800539c <SystemInit+0x20>)
 8005388:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800538c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005390:	bf00      	nop
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	e000ed00 	.word	0xe000ed00

080053a0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim14;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b090      	sub	sp, #64	; 0x40
 80053a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80053a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80053aa:	2200      	movs	r2, #0
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	605a      	str	r2, [r3, #4]
 80053b0:	609a      	str	r2, [r3, #8]
 80053b2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80053b4:	f107 031c 	add.w	r3, r7, #28
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	605a      	str	r2, [r3, #4]
 80053be:	609a      	str	r2, [r3, #8]
 80053c0:	60da      	str	r2, [r3, #12]
 80053c2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053c4:	f107 0310 	add.w	r3, r7, #16
 80053c8:	2200      	movs	r2, #0
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	605a      	str	r2, [r3, #4]
 80053ce:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80053d0:	463b      	mov	r3, r7
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	605a      	str	r2, [r3, #4]
 80053d8:	609a      	str	r2, [r3, #8]
 80053da:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80053dc:	4b35      	ldr	r3, [pc, #212]	; (80054b4 <MX_TIM3_Init+0x114>)
 80053de:	4a36      	ldr	r2, [pc, #216]	; (80054b8 <MX_TIM3_Init+0x118>)
 80053e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31999;
 80053e2:	4b34      	ldr	r3, [pc, #208]	; (80054b4 <MX_TIM3_Init+0x114>)
 80053e4:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80053e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053ea:	4b32      	ldr	r3, [pc, #200]	; (80054b4 <MX_TIM3_Init+0x114>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80053f0:	4b30      	ldr	r3, [pc, #192]	; (80054b4 <MX_TIM3_Init+0x114>)
 80053f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053f8:	4b2e      	ldr	r3, [pc, #184]	; (80054b4 <MX_TIM3_Init+0x114>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053fe:	4b2d      	ldr	r3, [pc, #180]	; (80054b4 <MX_TIM3_Init+0x114>)
 8005400:	2200      	movs	r2, #0
 8005402:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005404:	482b      	ldr	r0, [pc, #172]	; (80054b4 <MX_TIM3_Init+0x114>)
 8005406:	f006 f8d8 	bl	800b5ba <HAL_TIM_Base_Init>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8005410:	f7ff f9c8 	bl	80047a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005418:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800541a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800541e:	4619      	mov	r1, r3
 8005420:	4824      	ldr	r0, [pc, #144]	; (80054b4 <MX_TIM3_Init+0x114>)
 8005422:	f006 fd77 	bl	800bf14 <HAL_TIM_ConfigClockSource>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800542c:	f7ff f9ba 	bl	80047a4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8005430:	4820      	ldr	r0, [pc, #128]	; (80054b4 <MX_TIM3_Init+0x114>)
 8005432:	f006 fa01 	bl	800b838 <HAL_TIM_IC_Init>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d001      	beq.n	8005440 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 800543c:	f7ff f9b2 	bl	80047a4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8005440:	2304      	movs	r3, #4
 8005442:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8005444:	2340      	movs	r3, #64	; 0x40
 8005446:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005448:	2300      	movs	r3, #0
 800544a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 800544c:	2300      	movs	r3, #0
 800544e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8005450:	f107 031c 	add.w	r3, r7, #28
 8005454:	4619      	mov	r1, r3
 8005456:	4817      	ldr	r0, [pc, #92]	; (80054b4 <MX_TIM3_Init+0x114>)
 8005458:	f006 fe26 	bl	800c0a8 <HAL_TIM_SlaveConfigSynchro>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8005462:	f7ff f99f 	bl	80047a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005466:	2300      	movs	r3, #0
 8005468:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800546a:	2300      	movs	r3, #0
 800546c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800546e:	f107 0310 	add.w	r3, r7, #16
 8005472:	4619      	mov	r1, r3
 8005474:	480f      	ldr	r0, [pc, #60]	; (80054b4 <MX_TIM3_Init+0x114>)
 8005476:	f007 f9e5 	bl	800c844 <HAL_TIMEx_MasterConfigSynchronization>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8005480:	f7ff f990 	bl	80047a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8005484:	2302      	movs	r3, #2
 8005486:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005488:	2301      	movs	r3, #1
 800548a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800548c:	2300      	movs	r3, #0
 800548e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8005490:	230f      	movs	r3, #15
 8005492:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8005494:	463b      	mov	r3, r7
 8005496:	2200      	movs	r2, #0
 8005498:	4619      	mov	r1, r3
 800549a:	4806      	ldr	r0, [pc, #24]	; (80054b4 <MX_TIM3_Init+0x114>)
 800549c:	f006 fc9d 	bl	800bdda <HAL_TIM_IC_ConfigChannel>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <MX_TIM3_Init+0x10a>
  {
    Error_Handler();
 80054a6:	f7ff f97d 	bl	80047a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80054aa:	bf00      	nop
 80054ac:	3740      	adds	r7, #64	; 0x40
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	200055d4 	.word	0x200055d4
 80054b8:	40000400 	.word	0x40000400

080054bc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b090      	sub	sp, #64	; 0x40
 80054c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80054c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054c6:	2200      	movs	r2, #0
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	605a      	str	r2, [r3, #4]
 80054cc:	609a      	str	r2, [r3, #8]
 80054ce:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80054d0:	f107 031c 	add.w	r3, r7, #28
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	605a      	str	r2, [r3, #4]
 80054da:	609a      	str	r2, [r3, #8]
 80054dc:	60da      	str	r2, [r3, #12]
 80054de:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054e0:	f107 0310 	add.w	r3, r7, #16
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	605a      	str	r2, [r3, #4]
 80054ea:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80054ec:	463b      	mov	r3, r7
 80054ee:	2200      	movs	r2, #0
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	605a      	str	r2, [r3, #4]
 80054f4:	609a      	str	r2, [r3, #8]
 80054f6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80054f8:	4b35      	ldr	r3, [pc, #212]	; (80055d0 <MX_TIM4_Init+0x114>)
 80054fa:	4a36      	ldr	r2, [pc, #216]	; (80055d4 <MX_TIM4_Init+0x118>)
 80054fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 31999;
 80054fe:	4b34      	ldr	r3, [pc, #208]	; (80055d0 <MX_TIM4_Init+0x114>)
 8005500:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8005504:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005506:	4b32      	ldr	r3, [pc, #200]	; (80055d0 <MX_TIM4_Init+0x114>)
 8005508:	2200      	movs	r2, #0
 800550a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800550c:	4b30      	ldr	r3, [pc, #192]	; (80055d0 <MX_TIM4_Init+0x114>)
 800550e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005512:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005514:	4b2e      	ldr	r3, [pc, #184]	; (80055d0 <MX_TIM4_Init+0x114>)
 8005516:	2200      	movs	r2, #0
 8005518:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800551a:	4b2d      	ldr	r3, [pc, #180]	; (80055d0 <MX_TIM4_Init+0x114>)
 800551c:	2200      	movs	r2, #0
 800551e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005520:	482b      	ldr	r0, [pc, #172]	; (80055d0 <MX_TIM4_Init+0x114>)
 8005522:	f006 f84a 	bl	800b5ba <HAL_TIM_Base_Init>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 800552c:	f7ff f93a 	bl	80047a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005534:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005536:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800553a:	4619      	mov	r1, r3
 800553c:	4824      	ldr	r0, [pc, #144]	; (80055d0 <MX_TIM4_Init+0x114>)
 800553e:	f006 fce9 	bl	800bf14 <HAL_TIM_ConfigClockSource>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8005548:	f7ff f92c 	bl	80047a4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800554c:	4820      	ldr	r0, [pc, #128]	; (80055d0 <MX_TIM4_Init+0x114>)
 800554e:	f006 f973 	bl	800b838 <HAL_TIM_IC_Init>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d001      	beq.n	800555c <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8005558:	f7ff f924 	bl	80047a4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800555c:	2304      	movs	r3, #4
 800555e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8005560:	2340      	movs	r3, #64	; 0x40
 8005562:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005564:	2300      	movs	r3, #0
 8005566:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8005568:	2300      	movs	r3, #0
 800556a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800556c:	f107 031c 	add.w	r3, r7, #28
 8005570:	4619      	mov	r1, r3
 8005572:	4817      	ldr	r0, [pc, #92]	; (80055d0 <MX_TIM4_Init+0x114>)
 8005574:	f006 fd98 	bl	800c0a8 <HAL_TIM_SlaveConfigSynchro>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 800557e:	f7ff f911 	bl	80047a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005582:	2300      	movs	r3, #0
 8005584:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005586:	2300      	movs	r3, #0
 8005588:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800558a:	f107 0310 	add.w	r3, r7, #16
 800558e:	4619      	mov	r1, r3
 8005590:	480f      	ldr	r0, [pc, #60]	; (80055d0 <MX_TIM4_Init+0x114>)
 8005592:	f007 f957 	bl	800c844 <HAL_TIMEx_MasterConfigSynchronization>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d001      	beq.n	80055a0 <MX_TIM4_Init+0xe4>
  {
    Error_Handler();
 800559c:	f7ff f902 	bl	80047a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80055a0:	2302      	movs	r3, #2
 80055a2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80055a4:	2301      	movs	r3, #1
 80055a6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80055a8:	2300      	movs	r3, #0
 80055aa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80055ac:	230f      	movs	r3, #15
 80055ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80055b0:	463b      	mov	r3, r7
 80055b2:	2200      	movs	r2, #0
 80055b4:	4619      	mov	r1, r3
 80055b6:	4806      	ldr	r0, [pc, #24]	; (80055d0 <MX_TIM4_Init+0x114>)
 80055b8:	f006 fc0f 	bl	800bdda <HAL_TIM_IC_ConfigChannel>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <MX_TIM4_Init+0x10a>
  {
    Error_Handler();
 80055c2:	f7ff f8ef 	bl	80047a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80055c6:	bf00      	nop
 80055c8:	3740      	adds	r7, #64	; 0x40
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20005620 	.word	0x20005620
 80055d4:	40000800 	.word	0x40000800

080055d8 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80055dc:	4b0e      	ldr	r3, [pc, #56]	; (8005618 <MX_TIM14_Init+0x40>)
 80055de:	4a0f      	ldr	r2, [pc, #60]	; (800561c <MX_TIM14_Init+0x44>)
 80055e0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 31999;
 80055e2:	4b0d      	ldr	r3, [pc, #52]	; (8005618 <MX_TIM14_Init+0x40>)
 80055e4:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80055e8:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055ea:	4b0b      	ldr	r3, [pc, #44]	; (8005618 <MX_TIM14_Init+0x40>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 24;
 80055f0:	4b09      	ldr	r3, [pc, #36]	; (8005618 <MX_TIM14_Init+0x40>)
 80055f2:	2218      	movs	r2, #24
 80055f4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055f6:	4b08      	ldr	r3, [pc, #32]	; (8005618 <MX_TIM14_Init+0x40>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80055fc:	4b06      	ldr	r3, [pc, #24]	; (8005618 <MX_TIM14_Init+0x40>)
 80055fe:	2200      	movs	r2, #0
 8005600:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8005602:	4805      	ldr	r0, [pc, #20]	; (8005618 <MX_TIM14_Init+0x40>)
 8005604:	f005 ffd9 	bl	800b5ba <HAL_TIM_Base_Init>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800560e:	f7ff f8c9 	bl	80047a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8005612:	bf00      	nop
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	2000566c 	.word	0x2000566c
 800561c:	40002000 	.word	0x40002000

08005620 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b08c      	sub	sp, #48	; 0x30
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005628:	f107 031c 	add.w	r3, r7, #28
 800562c:	2200      	movs	r2, #0
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	605a      	str	r2, [r3, #4]
 8005632:	609a      	str	r2, [r3, #8]
 8005634:	60da      	str	r2, [r3, #12]
 8005636:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a43      	ldr	r2, [pc, #268]	; (800574c <HAL_TIM_Base_MspInit+0x12c>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d130      	bne.n	80056a4 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005642:	4b43      	ldr	r3, [pc, #268]	; (8005750 <HAL_TIM_Base_MspInit+0x130>)
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	4a42      	ldr	r2, [pc, #264]	; (8005750 <HAL_TIM_Base_MspInit+0x130>)
 8005648:	f043 0302 	orr.w	r3, r3, #2
 800564c:	6413      	str	r3, [r2, #64]	; 0x40
 800564e:	4b40      	ldr	r3, [pc, #256]	; (8005750 <HAL_TIM_Base_MspInit+0x130>)
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	61bb      	str	r3, [r7, #24]
 8005658:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800565a:	4b3d      	ldr	r3, [pc, #244]	; (8005750 <HAL_TIM_Base_MspInit+0x130>)
 800565c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565e:	4a3c      	ldr	r2, [pc, #240]	; (8005750 <HAL_TIM_Base_MspInit+0x130>)
 8005660:	f043 0301 	orr.w	r3, r3, #1
 8005664:	6313      	str	r3, [r2, #48]	; 0x30
 8005666:	4b3a      	ldr	r3, [pc, #232]	; (8005750 <HAL_TIM_Base_MspInit+0x130>)
 8005668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	617b      	str	r3, [r7, #20]
 8005670:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = VSS2_Pin;
 8005672:	2340      	movs	r3, #64	; 0x40
 8005674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005676:	2302      	movs	r3, #2
 8005678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800567a:	2300      	movs	r3, #0
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800567e:	2300      	movs	r3, #0
 8005680:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005682:	2302      	movs	r3, #2
 8005684:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VSS2_GPIO_Port, &GPIO_InitStruct);
 8005686:	f107 031c 	add.w	r3, r7, #28
 800568a:	4619      	mov	r1, r3
 800568c:	4831      	ldr	r0, [pc, #196]	; (8005754 <HAL_TIM_Base_MspInit+0x134>)
 800568e:	f001 fd53 	bl	8007138 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8005692:	2200      	movs	r2, #0
 8005694:	2101      	movs	r1, #1
 8005696:	201d      	movs	r0, #29
 8005698:	f001 f901 	bl	800689e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800569c:	201d      	movs	r0, #29
 800569e:	f001 f91a 	bl	80068d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80056a2:	e04f      	b.n	8005744 <HAL_TIM_Base_MspInit+0x124>
  else if(tim_baseHandle->Instance==TIM4)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a2b      	ldr	r2, [pc, #172]	; (8005758 <HAL_TIM_Base_MspInit+0x138>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d131      	bne.n	8005712 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80056ae:	4b28      	ldr	r3, [pc, #160]	; (8005750 <HAL_TIM_Base_MspInit+0x130>)
 80056b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b2:	4a27      	ldr	r2, [pc, #156]	; (8005750 <HAL_TIM_Base_MspInit+0x130>)
 80056b4:	f043 0304 	orr.w	r3, r3, #4
 80056b8:	6413      	str	r3, [r2, #64]	; 0x40
 80056ba:	4b25      	ldr	r3, [pc, #148]	; (8005750 <HAL_TIM_Base_MspInit+0x130>)
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	f003 0304 	and.w	r3, r3, #4
 80056c2:	613b      	str	r3, [r7, #16]
 80056c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80056c6:	4b22      	ldr	r3, [pc, #136]	; (8005750 <HAL_TIM_Base_MspInit+0x130>)
 80056c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ca:	4a21      	ldr	r2, [pc, #132]	; (8005750 <HAL_TIM_Base_MspInit+0x130>)
 80056cc:	f043 0308 	orr.w	r3, r3, #8
 80056d0:	6313      	str	r3, [r2, #48]	; 0x30
 80056d2:	4b1f      	ldr	r3, [pc, #124]	; (8005750 <HAL_TIM_Base_MspInit+0x130>)
 80056d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d6:	f003 0308 	and.w	r3, r3, #8
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VSS1_Pin;
 80056de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056e4:	2302      	movs	r3, #2
 80056e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056e8:	2300      	movs	r3, #0
 80056ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056ec:	2300      	movs	r3, #0
 80056ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80056f0:	2302      	movs	r3, #2
 80056f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VSS1_GPIO_Port, &GPIO_InitStruct);
 80056f4:	f107 031c 	add.w	r3, r7, #28
 80056f8:	4619      	mov	r1, r3
 80056fa:	4818      	ldr	r0, [pc, #96]	; (800575c <HAL_TIM_Base_MspInit+0x13c>)
 80056fc:	f001 fd1c 	bl	8007138 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005700:	2200      	movs	r2, #0
 8005702:	2100      	movs	r1, #0
 8005704:	201e      	movs	r0, #30
 8005706:	f001 f8ca 	bl	800689e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800570a:	201e      	movs	r0, #30
 800570c:	f001 f8e3 	bl	80068d6 <HAL_NVIC_EnableIRQ>
}
 8005710:	e018      	b.n	8005744 <HAL_TIM_Base_MspInit+0x124>
  else if(tim_baseHandle->Instance==TIM14)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a12      	ldr	r2, [pc, #72]	; (8005760 <HAL_TIM_Base_MspInit+0x140>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d113      	bne.n	8005744 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800571c:	4b0c      	ldr	r3, [pc, #48]	; (8005750 <HAL_TIM_Base_MspInit+0x130>)
 800571e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005720:	4a0b      	ldr	r2, [pc, #44]	; (8005750 <HAL_TIM_Base_MspInit+0x130>)
 8005722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005726:	6413      	str	r3, [r2, #64]	; 0x40
 8005728:	4b09      	ldr	r3, [pc, #36]	; (8005750 <HAL_TIM_Base_MspInit+0x130>)
 800572a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005730:	60bb      	str	r3, [r7, #8]
 8005732:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8005734:	2200      	movs	r2, #0
 8005736:	2100      	movs	r1, #0
 8005738:	202d      	movs	r0, #45	; 0x2d
 800573a:	f001 f8b0 	bl	800689e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800573e:	202d      	movs	r0, #45	; 0x2d
 8005740:	f001 f8c9 	bl	80068d6 <HAL_NVIC_EnableIRQ>
}
 8005744:	bf00      	nop
 8005746:	3730      	adds	r7, #48	; 0x30
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	40000400 	.word	0x40000400
 8005750:	40023800 	.word	0x40023800
 8005754:	40020000 	.word	0x40020000
 8005758:	40000800 	.word	0x40000800
 800575c:	40020c00 	.word	0x40020c00
 8005760:	40002000 	.word	0x40002000

08005764 <MX_UART7_Init>:
UART_HandleTypeDef huart7;
UART_HandleTypeDef huart3;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8005768:	4b14      	ldr	r3, [pc, #80]	; (80057bc <MX_UART7_Init+0x58>)
 800576a:	4a15      	ldr	r2, [pc, #84]	; (80057c0 <MX_UART7_Init+0x5c>)
 800576c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800576e:	4b13      	ldr	r3, [pc, #76]	; (80057bc <MX_UART7_Init+0x58>)
 8005770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005774:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8005776:	4b11      	ldr	r3, [pc, #68]	; (80057bc <MX_UART7_Init+0x58>)
 8005778:	2200      	movs	r2, #0
 800577a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800577c:	4b0f      	ldr	r3, [pc, #60]	; (80057bc <MX_UART7_Init+0x58>)
 800577e:	2200      	movs	r2, #0
 8005780:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8005782:	4b0e      	ldr	r3, [pc, #56]	; (80057bc <MX_UART7_Init+0x58>)
 8005784:	2200      	movs	r2, #0
 8005786:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8005788:	4b0c      	ldr	r3, [pc, #48]	; (80057bc <MX_UART7_Init+0x58>)
 800578a:	220c      	movs	r2, #12
 800578c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800578e:	4b0b      	ldr	r3, [pc, #44]	; (80057bc <MX_UART7_Init+0x58>)
 8005790:	2200      	movs	r2, #0
 8005792:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8005794:	4b09      	ldr	r3, [pc, #36]	; (80057bc <MX_UART7_Init+0x58>)
 8005796:	2200      	movs	r2, #0
 8005798:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800579a:	4b08      	ldr	r3, [pc, #32]	; (80057bc <MX_UART7_Init+0x58>)
 800579c:	2200      	movs	r2, #0
 800579e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80057a0:	4b06      	ldr	r3, [pc, #24]	; (80057bc <MX_UART7_Init+0x58>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80057a6:	4805      	ldr	r0, [pc, #20]	; (80057bc <MX_UART7_Init+0x58>)
 80057a8:	f007 f8f8 	bl	800c99c <HAL_UART_Init>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 80057b2:	f7fe fff7 	bl	80047a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80057b6:	bf00      	nop
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	200056b8 	.word	0x200056b8
 80057c0:	40007800 	.word	0x40007800

080057c4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80057c8:	4b14      	ldr	r3, [pc, #80]	; (800581c <MX_USART3_UART_Init+0x58>)
 80057ca:	4a15      	ldr	r2, [pc, #84]	; (8005820 <MX_USART3_UART_Init+0x5c>)
 80057cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80057ce:	4b13      	ldr	r3, [pc, #76]	; (800581c <MX_USART3_UART_Init+0x58>)
 80057d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80057d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80057d6:	4b11      	ldr	r3, [pc, #68]	; (800581c <MX_USART3_UART_Init+0x58>)
 80057d8:	2200      	movs	r2, #0
 80057da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80057dc:	4b0f      	ldr	r3, [pc, #60]	; (800581c <MX_USART3_UART_Init+0x58>)
 80057de:	2200      	movs	r2, #0
 80057e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80057e2:	4b0e      	ldr	r3, [pc, #56]	; (800581c <MX_USART3_UART_Init+0x58>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80057e8:	4b0c      	ldr	r3, [pc, #48]	; (800581c <MX_USART3_UART_Init+0x58>)
 80057ea:	220c      	movs	r2, #12
 80057ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80057ee:	4b0b      	ldr	r3, [pc, #44]	; (800581c <MX_USART3_UART_Init+0x58>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80057f4:	4b09      	ldr	r3, [pc, #36]	; (800581c <MX_USART3_UART_Init+0x58>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80057fa:	4b08      	ldr	r3, [pc, #32]	; (800581c <MX_USART3_UART_Init+0x58>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005800:	4b06      	ldr	r3, [pc, #24]	; (800581c <MX_USART3_UART_Init+0x58>)
 8005802:	2200      	movs	r2, #0
 8005804:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005806:	4805      	ldr	r0, [pc, #20]	; (800581c <MX_USART3_UART_Init+0x58>)
 8005808:	f007 f8c8 	bl	800c99c <HAL_UART_Init>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8005812:	f7fe ffc7 	bl	80047a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005816:	bf00      	nop
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	2000573c 	.word	0x2000573c
 8005820:	40004800 	.word	0x40004800

08005824 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b08c      	sub	sp, #48	; 0x30
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800582c:	f107 031c 	add.w	r3, r7, #28
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	605a      	str	r2, [r3, #4]
 8005836:	609a      	str	r2, [r3, #8]
 8005838:	60da      	str	r2, [r3, #12]
 800583a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a33      	ldr	r2, [pc, #204]	; (8005910 <HAL_UART_MspInit+0xec>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d129      	bne.n	800589a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8005846:	4b33      	ldr	r3, [pc, #204]	; (8005914 <HAL_UART_MspInit+0xf0>)
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	4a32      	ldr	r2, [pc, #200]	; (8005914 <HAL_UART_MspInit+0xf0>)
 800584c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005850:	6413      	str	r3, [r2, #64]	; 0x40
 8005852:	4b30      	ldr	r3, [pc, #192]	; (8005914 <HAL_UART_MspInit+0xf0>)
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800585a:	61bb      	str	r3, [r7, #24]
 800585c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800585e:	4b2d      	ldr	r3, [pc, #180]	; (8005914 <HAL_UART_MspInit+0xf0>)
 8005860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005862:	4a2c      	ldr	r2, [pc, #176]	; (8005914 <HAL_UART_MspInit+0xf0>)
 8005864:	f043 0310 	orr.w	r3, r3, #16
 8005868:	6313      	str	r3, [r2, #48]	; 0x30
 800586a:	4b2a      	ldr	r3, [pc, #168]	; (8005914 <HAL_UART_MspInit+0xf0>)
 800586c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586e:	f003 0310 	and.w	r3, r3, #16
 8005872:	617b      	str	r3, [r7, #20]
 8005874:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 8005876:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800587a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800587c:	2302      	movs	r3, #2
 800587e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005880:	2300      	movs	r3, #0
 8005882:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005884:	2303      	movs	r3, #3
 8005886:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005888:	2308      	movs	r3, #8
 800588a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800588c:	f107 031c 	add.w	r3, r7, #28
 8005890:	4619      	mov	r1, r3
 8005892:	4821      	ldr	r0, [pc, #132]	; (8005918 <HAL_UART_MspInit+0xf4>)
 8005894:	f001 fc50 	bl	8007138 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005898:	e035      	b.n	8005906 <HAL_UART_MspInit+0xe2>
  else if(uartHandle->Instance==USART3)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a1f      	ldr	r2, [pc, #124]	; (800591c <HAL_UART_MspInit+0xf8>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d130      	bne.n	8005906 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80058a4:	4b1b      	ldr	r3, [pc, #108]	; (8005914 <HAL_UART_MspInit+0xf0>)
 80058a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a8:	4a1a      	ldr	r2, [pc, #104]	; (8005914 <HAL_UART_MspInit+0xf0>)
 80058aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058ae:	6413      	str	r3, [r2, #64]	; 0x40
 80058b0:	4b18      	ldr	r3, [pc, #96]	; (8005914 <HAL_UART_MspInit+0xf0>)
 80058b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058b8:	613b      	str	r3, [r7, #16]
 80058ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058bc:	4b15      	ldr	r3, [pc, #84]	; (8005914 <HAL_UART_MspInit+0xf0>)
 80058be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c0:	4a14      	ldr	r2, [pc, #80]	; (8005914 <HAL_UART_MspInit+0xf0>)
 80058c2:	f043 0302 	orr.w	r3, r3, #2
 80058c6:	6313      	str	r3, [r2, #48]	; 0x30
 80058c8:	4b12      	ldr	r3, [pc, #72]	; (8005914 <HAL_UART_MspInit+0xf0>)
 80058ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART_DEBUG_TX_Pin|UART_DEBUG_RX_Pin;
 80058d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80058d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058da:	2302      	movs	r3, #2
 80058dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058de:	2300      	movs	r3, #0
 80058e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058e2:	2303      	movs	r3, #3
 80058e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80058e6:	2307      	movs	r3, #7
 80058e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058ea:	f107 031c 	add.w	r3, r7, #28
 80058ee:	4619      	mov	r1, r3
 80058f0:	480b      	ldr	r0, [pc, #44]	; (8005920 <HAL_UART_MspInit+0xfc>)
 80058f2:	f001 fc21 	bl	8007138 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80058f6:	2200      	movs	r2, #0
 80058f8:	2100      	movs	r1, #0
 80058fa:	2027      	movs	r0, #39	; 0x27
 80058fc:	f000 ffcf 	bl	800689e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005900:	2027      	movs	r0, #39	; 0x27
 8005902:	f000 ffe8 	bl	80068d6 <HAL_NVIC_EnableIRQ>
}
 8005906:	bf00      	nop
 8005908:	3730      	adds	r7, #48	; 0x30
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	40007800 	.word	0x40007800
 8005914:	40023800 	.word	0x40023800
 8005918:	40021000 	.word	0x40021000
 800591c:	40004800 	.word	0x40004800
 8005920:	40020400 	.word	0x40020400

08005924 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005924:	f8df d034 	ldr.w	sp, [pc, #52]	; 800595c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005928:	480d      	ldr	r0, [pc, #52]	; (8005960 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800592a:	490e      	ldr	r1, [pc, #56]	; (8005964 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800592c:	4a0e      	ldr	r2, [pc, #56]	; (8005968 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800592e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005930:	e002      	b.n	8005938 <LoopCopyDataInit>

08005932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005936:	3304      	adds	r3, #4

08005938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800593a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800593c:	d3f9      	bcc.n	8005932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800593e:	4a0b      	ldr	r2, [pc, #44]	; (800596c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005940:	4c0b      	ldr	r4, [pc, #44]	; (8005970 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005944:	e001      	b.n	800594a <LoopFillZerobss>

08005946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005948:	3204      	adds	r2, #4

0800594a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800594a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800594c:	d3fb      	bcc.n	8005946 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800594e:	f7ff fd15 	bl	800537c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005952:	f00b ff95 	bl	8011880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005956:	f7fe fde1 	bl	800451c <main>
  bx  lr    
 800595a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800595c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8005960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005964:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8005968:	080188b0 	.word	0x080188b0
  ldr r2, =_sbss
 800596c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8005970:	20005818 	.word	0x20005818

08005974 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005974:	e7fe      	b.n	8005974 <CAN1_RX0_IRQHandler>
	...

08005978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 800597c:	4b08      	ldr	r3, [pc, #32]	; (80059a0 <HAL_Init+0x28>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a07      	ldr	r2, [pc, #28]	; (80059a0 <HAL_Init+0x28>)
 8005982:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005986:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005988:	2003      	movs	r0, #3
 800598a:	f000 ff7d 	bl	8006888 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800598e:	200f      	movs	r0, #15
 8005990:	f000 f808 	bl	80059a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005994:	f7ff fb84 	bl	80050a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	40023c00 	.word	0x40023c00

080059a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80059ac:	4b12      	ldr	r3, [pc, #72]	; (80059f8 <HAL_InitTick+0x54>)
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	4b12      	ldr	r3, [pc, #72]	; (80059fc <HAL_InitTick+0x58>)
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	4619      	mov	r1, r3
 80059b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80059be:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 ff95 	bl	80068f2 <HAL_SYSTICK_Config>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e00e      	b.n	80059f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b0f      	cmp	r3, #15
 80059d6:	d80a      	bhi.n	80059ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80059d8:	2200      	movs	r2, #0
 80059da:	6879      	ldr	r1, [r7, #4]
 80059dc:	f04f 30ff 	mov.w	r0, #4294967295
 80059e0:	f000 ff5d 	bl	800689e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80059e4:	4a06      	ldr	r2, [pc, #24]	; (8005a00 <HAL_InitTick+0x5c>)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	e000      	b.n	80059f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	20000000 	.word	0x20000000
 80059fc:	20000008 	.word	0x20000008
 8005a00:	20000004 	.word	0x20000004

08005a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a04:	b480      	push	{r7}
 8005a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a08:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <HAL_IncTick+0x20>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	4b06      	ldr	r3, [pc, #24]	; (8005a28 <HAL_IncTick+0x24>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4413      	add	r3, r2
 8005a14:	4a04      	ldr	r2, [pc, #16]	; (8005a28 <HAL_IncTick+0x24>)
 8005a16:	6013      	str	r3, [r2, #0]
}
 8005a18:	bf00      	nop
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	20000008 	.word	0x20000008
 8005a28:	200057c0 	.word	0x200057c0

08005a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8005a30:	4b03      	ldr	r3, [pc, #12]	; (8005a40 <HAL_GetTick+0x14>)
 8005a32:	681b      	ldr	r3, [r3, #0]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	200057c0 	.word	0x200057c0

08005a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a4c:	f7ff ffee 	bl	8005a2c <HAL_GetTick>
 8005a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5c:	d005      	beq.n	8005a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a5e:	4b0a      	ldr	r3, [pc, #40]	; (8005a88 <HAL_Delay+0x44>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	461a      	mov	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4413      	add	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005a6a:	bf00      	nop
 8005a6c:	f7ff ffde 	bl	8005a2c <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d8f7      	bhi.n	8005a6c <HAL_Delay+0x28>
  {
  }
}
 8005a7c:	bf00      	nop
 8005a7e:	bf00      	nop
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	20000008 	.word	0x20000008

08005a8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a94:	2300      	movs	r3, #0
 8005a96:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e031      	b.n	8005b06 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d109      	bne.n	8005abe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7fd fe1a 	bl	80036e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	f003 0310 	and.w	r3, r3, #16
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d116      	bne.n	8005af8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ace:	4b10      	ldr	r3, [pc, #64]	; (8005b10 <HAL_ADC_Init+0x84>)
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	f043 0202 	orr.w	r2, r3, #2
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fc04 	bl	80062e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aea:	f023 0303 	bic.w	r3, r3, #3
 8005aee:	f043 0201 	orr.w	r2, r3, #1
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	641a      	str	r2, [r3, #64]	; 0x40
 8005af6:	e001      	b.n	8005afc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	ffffeefd 	.word	0xffffeefd

08005b14 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d101      	bne.n	8005b2e <HAL_ADC_Start+0x1a>
 8005b2a:	2302      	movs	r3, #2
 8005b2c:	e0ad      	b.n	8005c8a <HAL_ADC_Start+0x176>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d018      	beq.n	8005b76 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689a      	ldr	r2, [r3, #8]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 0201 	orr.w	r2, r2, #1
 8005b52:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005b54:	4b50      	ldr	r3, [pc, #320]	; (8005c98 <HAL_ADC_Start+0x184>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a50      	ldr	r2, [pc, #320]	; (8005c9c <HAL_ADC_Start+0x188>)
 8005b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5e:	0c9a      	lsrs	r2, r3, #18
 8005b60:	4613      	mov	r3, r2
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	4413      	add	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005b68:	e002      	b.n	8005b70 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1f9      	bne.n	8005b6a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d175      	bne.n	8005c70 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b88:	4b45      	ldr	r3, [pc, #276]	; (8005ca0 <HAL_ADC_Start+0x18c>)
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d007      	beq.n	8005bb2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005baa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bbe:	d106      	bne.n	8005bce <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc4:	f023 0206 	bic.w	r2, r3, #6
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	645a      	str	r2, [r3, #68]	; 0x44
 8005bcc:	e002      	b.n	8005bd4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005be4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8005be6:	4b2f      	ldr	r3, [pc, #188]	; (8005ca4 <HAL_ADC_Start+0x190>)
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f003 031f 	and.w	r3, r3, #31
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10f      	bne.n	8005c12 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d143      	bne.n	8005c88 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689a      	ldr	r2, [r3, #8]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005c0e:	609a      	str	r2, [r3, #8]
 8005c10:	e03a      	b.n	8005c88 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a24      	ldr	r2, [pc, #144]	; (8005ca8 <HAL_ADC_Start+0x194>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d10e      	bne.n	8005c3a <HAL_ADC_Start+0x126>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d107      	bne.n	8005c3a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689a      	ldr	r2, [r3, #8]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005c38:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8005c3a:	4b1a      	ldr	r3, [pc, #104]	; (8005ca4 <HAL_ADC_Start+0x190>)
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f003 0310 	and.w	r3, r3, #16
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d120      	bne.n	8005c88 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a18      	ldr	r2, [pc, #96]	; (8005cac <HAL_ADC_Start+0x198>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d11b      	bne.n	8005c88 <HAL_ADC_Start+0x174>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d114      	bne.n	8005c88 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689a      	ldr	r2, [r3, #8]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005c6c:	609a      	str	r2, [r3, #8]
 8005c6e:	e00b      	b.n	8005c88 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c74:	f043 0210 	orr.w	r2, r3, #16
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c80:	f043 0201 	orr.w	r2, r3, #1
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	20000000 	.word	0x20000000
 8005c9c:	431bde83 	.word	0x431bde83
 8005ca0:	fffff8fe 	.word	0xfffff8fe
 8005ca4:	40012300 	.word	0x40012300
 8005ca8:	40012000 	.word	0x40012000
 8005cac:	40012200 	.word	0x40012200

08005cb0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ccc:	d113      	bne.n	8005cf6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cdc:	d10b      	bne.n	8005cf6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	f043 0220 	orr.w	r2, r3, #32
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e063      	b.n	8005dbe <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005cf6:	f7ff fe99 	bl	8005a2c <HAL_GetTick>
 8005cfa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005cfc:	e021      	b.n	8005d42 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d04:	d01d      	beq.n	8005d42 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d007      	beq.n	8005d1c <HAL_ADC_PollForConversion+0x6c>
 8005d0c:	f7ff fe8e 	bl	8005a2c <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d212      	bcs.n	8005d42 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d00b      	beq.n	8005d42 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2e:	f043 0204 	orr.w	r2, r3, #4
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e03d      	b.n	8005dbe <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d1d6      	bne.n	8005cfe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f06f 0212 	mvn.w	r2, #18
 8005d58:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d123      	bne.n	8005dbc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d11f      	bne.n	8005dbc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d82:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d006      	beq.n	8005d98 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d111      	bne.n	8005dbc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d105      	bne.n	8005dbc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db4:	f043 0201 	orr.w	r2, r3, #1
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b086      	sub	sp, #24
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	617b      	str	r3, [r7, #20]
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	f003 0320 	and.w	r3, r3, #32
 8005df4:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d049      	beq.n	8005e90 <HAL_ADC_IRQHandler+0xca>
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d046      	beq.n	8005e90 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e06:	f003 0310 	and.w	r3, r3, #16
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d105      	bne.n	8005e1a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d12b      	bne.n	8005e80 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d127      	bne.n	8005e80 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e36:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d006      	beq.n	8005e4c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d119      	bne.n	8005e80 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 0220 	bic.w	r2, r2, #32
 8005e5a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d105      	bne.n	8005e80 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e78:	f043 0201 	orr.w	r2, r3, #1
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f8bd 	bl	8006000 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f06f 0212 	mvn.w	r2, #18
 8005e8e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f003 0304 	and.w	r3, r3, #4
 8005e96:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d057      	beq.n	8005f56 <HAL_ADC_IRQHandler+0x190>
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d054      	beq.n	8005f56 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb0:	f003 0310 	and.w	r3, r3, #16
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d105      	bne.n	8005ec4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d139      	bne.n	8005f46 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d006      	beq.n	8005eee <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d12b      	bne.n	8005f46 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d124      	bne.n	8005f46 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d11d      	bne.n	8005f46 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d119      	bne.n	8005f46 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f20:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d105      	bne.n	8005f46 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	f043 0201 	orr.w	r2, r3, #1
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fac8 	bl	80064dc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f06f 020c 	mvn.w	r2, #12
 8005f54:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f64:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d017      	beq.n	8005f9c <HAL_ADC_IRQHandler+0x1d6>
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d014      	beq.n	8005f9c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d10d      	bne.n	8005f9c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f84:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f841 	bl	8006014 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f06f 0201 	mvn.w	r2, #1
 8005f9a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f003 0320 	and.w	r3, r3, #32
 8005fa2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005faa:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d015      	beq.n	8005fde <HAL_ADC_IRQHandler+0x218>
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d012      	beq.n	8005fde <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fbc:	f043 0202 	orr.w	r2, r3, #2
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f06f 0220 	mvn.w	r2, #32
 8005fcc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f82a 	bl	8006028 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f06f 0220 	mvn.w	r2, #32
 8005fdc:	601a      	str	r2, [r3, #0]
  }
}
 8005fde:	bf00      	nop
 8005fe0:	3718      	adds	r7, #24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8006046:	2300      	movs	r3, #0
 8006048:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006050:	2b01      	cmp	r3, #1
 8006052:	d101      	bne.n	8006058 <HAL_ADC_ConfigChannel+0x1c>
 8006054:	2302      	movs	r3, #2
 8006056:	e136      	b.n	80062c6 <HAL_ADC_ConfigChannel+0x28a>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2b09      	cmp	r3, #9
 8006066:	d93a      	bls.n	80060de <HAL_ADC_ConfigChannel+0xa2>
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006070:	d035      	beq.n	80060de <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68d9      	ldr	r1, [r3, #12]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	b29b      	uxth	r3, r3
 800607e:	461a      	mov	r2, r3
 8006080:	4613      	mov	r3, r2
 8006082:	005b      	lsls	r3, r3, #1
 8006084:	4413      	add	r3, r2
 8006086:	3b1e      	subs	r3, #30
 8006088:	2207      	movs	r2, #7
 800608a:	fa02 f303 	lsl.w	r3, r2, r3
 800608e:	43da      	mvns	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	400a      	ands	r2, r1
 8006096:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a8d      	ldr	r2, [pc, #564]	; (80062d4 <HAL_ADC_ConfigChannel+0x298>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d10a      	bne.n	80060b8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68d9      	ldr	r1, [r3, #12]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	061a      	lsls	r2, r3, #24
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80060b6:	e035      	b.n	8006124 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68d9      	ldr	r1, [r3, #12]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	689a      	ldr	r2, [r3, #8]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	4618      	mov	r0, r3
 80060ca:	4603      	mov	r3, r0
 80060cc:	005b      	lsls	r3, r3, #1
 80060ce:	4403      	add	r3, r0
 80060d0:	3b1e      	subs	r3, #30
 80060d2:	409a      	lsls	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	430a      	orrs	r2, r1
 80060da:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80060dc:	e022      	b.n	8006124 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6919      	ldr	r1, [r3, #16]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	461a      	mov	r2, r3
 80060ec:	4613      	mov	r3, r2
 80060ee:	005b      	lsls	r3, r3, #1
 80060f0:	4413      	add	r3, r2
 80060f2:	2207      	movs	r2, #7
 80060f4:	fa02 f303 	lsl.w	r3, r2, r3
 80060f8:	43da      	mvns	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	400a      	ands	r2, r1
 8006100:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6919      	ldr	r1, [r3, #16]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	b29b      	uxth	r3, r3
 8006112:	4618      	mov	r0, r3
 8006114:	4603      	mov	r3, r0
 8006116:	005b      	lsls	r3, r3, #1
 8006118:	4403      	add	r3, r0
 800611a:	409a      	lsls	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	430a      	orrs	r2, r1
 8006122:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	2b06      	cmp	r3, #6
 800612a:	d824      	bhi.n	8006176 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	4613      	mov	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4413      	add	r3, r2
 800613c:	3b05      	subs	r3, #5
 800613e:	221f      	movs	r2, #31
 8006140:	fa02 f303 	lsl.w	r3, r2, r3
 8006144:	43da      	mvns	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	400a      	ands	r2, r1
 800614c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	b29b      	uxth	r3, r3
 800615a:	4618      	mov	r0, r3
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685a      	ldr	r2, [r3, #4]
 8006160:	4613      	mov	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	3b05      	subs	r3, #5
 8006168:	fa00 f203 	lsl.w	r2, r0, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	635a      	str	r2, [r3, #52]	; 0x34
 8006174:	e04c      	b.n	8006210 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	2b0c      	cmp	r3, #12
 800617c:	d824      	bhi.n	80061c8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	4613      	mov	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	3b23      	subs	r3, #35	; 0x23
 8006190:	221f      	movs	r2, #31
 8006192:	fa02 f303 	lsl.w	r3, r2, r3
 8006196:	43da      	mvns	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	400a      	ands	r2, r1
 800619e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	4618      	mov	r0, r3
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	4613      	mov	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	3b23      	subs	r3, #35	; 0x23
 80061ba:	fa00 f203 	lsl.w	r2, r0, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	631a      	str	r2, [r3, #48]	; 0x30
 80061c6:	e023      	b.n	8006210 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	4613      	mov	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	3b41      	subs	r3, #65	; 0x41
 80061da:	221f      	movs	r2, #31
 80061dc:	fa02 f303 	lsl.w	r3, r2, r3
 80061e0:	43da      	mvns	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	400a      	ands	r2, r1
 80061e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	4618      	mov	r0, r3
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	4613      	mov	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	3b41      	subs	r3, #65	; 0x41
 8006204:	fa00 f203 	lsl.w	r2, r0, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a30      	ldr	r2, [pc, #192]	; (80062d8 <HAL_ADC_ConfigChannel+0x29c>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d10a      	bne.n	8006230 <HAL_ADC_ConfigChannel+0x1f4>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006222:	d105      	bne.n	8006230 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006224:	4b2d      	ldr	r3, [pc, #180]	; (80062dc <HAL_ADC_ConfigChannel+0x2a0>)
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	4a2c      	ldr	r2, [pc, #176]	; (80062dc <HAL_ADC_ConfigChannel+0x2a0>)
 800622a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800622e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a28      	ldr	r2, [pc, #160]	; (80062d8 <HAL_ADC_ConfigChannel+0x29c>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d10f      	bne.n	800625a <HAL_ADC_ConfigChannel+0x21e>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2b12      	cmp	r3, #18
 8006240:	d10b      	bne.n	800625a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8006242:	4b26      	ldr	r3, [pc, #152]	; (80062dc <HAL_ADC_ConfigChannel+0x2a0>)
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	4a25      	ldr	r2, [pc, #148]	; (80062dc <HAL_ADC_ConfigChannel+0x2a0>)
 8006248:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800624c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800624e:	4b23      	ldr	r3, [pc, #140]	; (80062dc <HAL_ADC_ConfigChannel+0x2a0>)
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	4a22      	ldr	r2, [pc, #136]	; (80062dc <HAL_ADC_ConfigChannel+0x2a0>)
 8006254:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006258:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a1e      	ldr	r2, [pc, #120]	; (80062d8 <HAL_ADC_ConfigChannel+0x29c>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d12b      	bne.n	80062bc <HAL_ADC_ConfigChannel+0x280>
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a1a      	ldr	r2, [pc, #104]	; (80062d4 <HAL_ADC_ConfigChannel+0x298>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d003      	beq.n	8006276 <HAL_ADC_ConfigChannel+0x23a>
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2b11      	cmp	r3, #17
 8006274:	d122      	bne.n	80062bc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8006276:	4b19      	ldr	r3, [pc, #100]	; (80062dc <HAL_ADC_ConfigChannel+0x2a0>)
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	4a18      	ldr	r2, [pc, #96]	; (80062dc <HAL_ADC_ConfigChannel+0x2a0>)
 800627c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006280:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006282:	4b16      	ldr	r3, [pc, #88]	; (80062dc <HAL_ADC_ConfigChannel+0x2a0>)
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	4a15      	ldr	r2, [pc, #84]	; (80062dc <HAL_ADC_ConfigChannel+0x2a0>)
 8006288:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800628c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a10      	ldr	r2, [pc, #64]	; (80062d4 <HAL_ADC_ConfigChannel+0x298>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d111      	bne.n	80062bc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006298:	4b11      	ldr	r3, [pc, #68]	; (80062e0 <HAL_ADC_ConfigChannel+0x2a4>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a11      	ldr	r2, [pc, #68]	; (80062e4 <HAL_ADC_ConfigChannel+0x2a8>)
 800629e:	fba2 2303 	umull	r2, r3, r2, r3
 80062a2:	0c9a      	lsrs	r2, r3, #18
 80062a4:	4613      	mov	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	005b      	lsls	r3, r3, #1
 80062ac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80062ae:	e002      	b.n	80062b6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	3b01      	subs	r3, #1
 80062b4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1f9      	bne.n	80062b0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	10000012 	.word	0x10000012
 80062d8:	40012000 	.word	0x40012000
 80062dc:	40012300 	.word	0x40012300
 80062e0:	20000000 	.word	0x20000000
 80062e4:	431bde83 	.word	0x431bde83

080062e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80062f0:	4b78      	ldr	r3, [pc, #480]	; (80064d4 <ADC_Init+0x1ec>)
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	4a77      	ldr	r2, [pc, #476]	; (80064d4 <ADC_Init+0x1ec>)
 80062f6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80062fa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80062fc:	4b75      	ldr	r3, [pc, #468]	; (80064d4 <ADC_Init+0x1ec>)
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	4973      	ldr	r1, [pc, #460]	; (80064d4 <ADC_Init+0x1ec>)
 8006306:	4313      	orrs	r3, r2
 8006308:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006318:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6859      	ldr	r1, [r3, #4]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	021a      	lsls	r2, r3, #8
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800633c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6859      	ldr	r1, [r3, #4]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689a      	ldr	r2, [r3, #8]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	430a      	orrs	r2, r1
 800634e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689a      	ldr	r2, [r3, #8]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800635e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6899      	ldr	r1, [r3, #8]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68da      	ldr	r2, [r3, #12]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	430a      	orrs	r2, r1
 8006370:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006376:	4a58      	ldr	r2, [pc, #352]	; (80064d8 <ADC_Init+0x1f0>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d022      	beq.n	80063c2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689a      	ldr	r2, [r3, #8]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800638a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6899      	ldr	r1, [r3, #8]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	430a      	orrs	r2, r1
 800639c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689a      	ldr	r2, [r3, #8]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80063ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6899      	ldr	r1, [r3, #8]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	430a      	orrs	r2, r1
 80063be:	609a      	str	r2, [r3, #8]
 80063c0:	e00f      	b.n	80063e2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	689a      	ldr	r2, [r3, #8]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80063d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	689a      	ldr	r2, [r3, #8]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80063e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	689a      	ldr	r2, [r3, #8]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f022 0202 	bic.w	r2, r2, #2
 80063f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6899      	ldr	r1, [r3, #8]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	005a      	lsls	r2, r3, #1
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	430a      	orrs	r2, r1
 8006404:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 3020 	ldrb.w	r3, [r3, #32]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d01b      	beq.n	8006448 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800641e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800642e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6859      	ldr	r1, [r3, #4]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643a:	3b01      	subs	r3, #1
 800643c:	035a      	lsls	r2, r3, #13
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	605a      	str	r2, [r3, #4]
 8006446:	e007      	b.n	8006458 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006456:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006466:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	3b01      	subs	r3, #1
 8006474:	051a      	lsls	r2, r3, #20
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	430a      	orrs	r2, r1
 800647c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689a      	ldr	r2, [r3, #8]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800648c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	6899      	ldr	r1, [r3, #8]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800649a:	025a      	lsls	r2, r3, #9
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	430a      	orrs	r2, r1
 80064a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689a      	ldr	r2, [r3, #8]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6899      	ldr	r1, [r3, #8]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	029a      	lsls	r2, r3, #10
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	609a      	str	r2, [r3, #8]
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr
 80064d4:	40012300 	.word	0x40012300
 80064d8:	0f000001 	.word	0x0f000001

080064dc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e0ed      	b.n	80066de <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d102      	bne.n	8006514 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7fd fa3a 	bl	8003988 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 0201 	orr.w	r2, r2, #1
 8006522:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006524:	f7ff fa82 	bl	8005a2c <HAL_GetTick>
 8006528:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800652a:	e012      	b.n	8006552 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800652c:	f7ff fa7e 	bl	8005a2c <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	2b0a      	cmp	r3, #10
 8006538:	d90b      	bls.n	8006552 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2205      	movs	r2, #5
 800654a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e0c5      	b.n	80066de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f003 0301 	and.w	r3, r3, #1
 800655c:	2b00      	cmp	r3, #0
 800655e:	d0e5      	beq.n	800652c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 0202 	bic.w	r2, r2, #2
 800656e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006570:	f7ff fa5c 	bl	8005a2c <HAL_GetTick>
 8006574:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006576:	e012      	b.n	800659e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006578:	f7ff fa58 	bl	8005a2c <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b0a      	cmp	r3, #10
 8006584:	d90b      	bls.n	800659e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2205      	movs	r2, #5
 8006596:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e09f      	b.n	80066de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f003 0302 	and.w	r3, r3, #2
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1e5      	bne.n	8006578 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	7e1b      	ldrb	r3, [r3, #24]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d108      	bne.n	80065c6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80065c2:	601a      	str	r2, [r3, #0]
 80065c4:	e007      	b.n	80065d6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	7e5b      	ldrb	r3, [r3, #25]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d108      	bne.n	80065f0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	e007      	b.n	8006600 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	7e9b      	ldrb	r3, [r3, #26]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d108      	bne.n	800661a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f042 0220 	orr.w	r2, r2, #32
 8006616:	601a      	str	r2, [r3, #0]
 8006618:	e007      	b.n	800662a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 0220 	bic.w	r2, r2, #32
 8006628:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	7edb      	ldrb	r3, [r3, #27]
 800662e:	2b01      	cmp	r3, #1
 8006630:	d108      	bne.n	8006644 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f022 0210 	bic.w	r2, r2, #16
 8006640:	601a      	str	r2, [r3, #0]
 8006642:	e007      	b.n	8006654 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f042 0210 	orr.w	r2, r2, #16
 8006652:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	7f1b      	ldrb	r3, [r3, #28]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d108      	bne.n	800666e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f042 0208 	orr.w	r2, r2, #8
 800666a:	601a      	str	r2, [r3, #0]
 800666c:	e007      	b.n	800667e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f022 0208 	bic.w	r2, r2, #8
 800667c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	7f5b      	ldrb	r3, [r3, #29]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d108      	bne.n	8006698 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f042 0204 	orr.w	r2, r2, #4
 8006694:	601a      	str	r2, [r3, #0]
 8006696:	e007      	b.n	80066a8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f022 0204 	bic.w	r2, r2, #4
 80066a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	431a      	orrs	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	431a      	orrs	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	ea42 0103 	orr.w	r1, r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	1e5a      	subs	r2, r3, #1
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
	...

080066e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f003 0307 	and.w	r3, r3, #7
 80066f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066f8:	4b0b      	ldr	r3, [pc, #44]	; (8006728 <__NVIC_SetPriorityGrouping+0x40>)
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006704:	4013      	ands	r3, r2
 8006706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006710:	4b06      	ldr	r3, [pc, #24]	; (800672c <__NVIC_SetPriorityGrouping+0x44>)
 8006712:	4313      	orrs	r3, r2
 8006714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006716:	4a04      	ldr	r2, [pc, #16]	; (8006728 <__NVIC_SetPriorityGrouping+0x40>)
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	60d3      	str	r3, [r2, #12]
}
 800671c:	bf00      	nop
 800671e:	3714      	adds	r7, #20
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr
 8006728:	e000ed00 	.word	0xe000ed00
 800672c:	05fa0000 	.word	0x05fa0000

08006730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006730:	b480      	push	{r7}
 8006732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006734:	4b04      	ldr	r3, [pc, #16]	; (8006748 <__NVIC_GetPriorityGrouping+0x18>)
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	0a1b      	lsrs	r3, r3, #8
 800673a:	f003 0307 	and.w	r3, r3, #7
}
 800673e:	4618      	mov	r0, r3
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr
 8006748:	e000ed00 	.word	0xe000ed00

0800674c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	4603      	mov	r3, r0
 8006754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800675a:	2b00      	cmp	r3, #0
 800675c:	db0b      	blt.n	8006776 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800675e:	79fb      	ldrb	r3, [r7, #7]
 8006760:	f003 021f 	and.w	r2, r3, #31
 8006764:	4907      	ldr	r1, [pc, #28]	; (8006784 <__NVIC_EnableIRQ+0x38>)
 8006766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800676a:	095b      	lsrs	r3, r3, #5
 800676c:	2001      	movs	r0, #1
 800676e:	fa00 f202 	lsl.w	r2, r0, r2
 8006772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006776:	bf00      	nop
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	e000e100 	.word	0xe000e100

08006788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	4603      	mov	r3, r0
 8006790:	6039      	str	r1, [r7, #0]
 8006792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006798:	2b00      	cmp	r3, #0
 800679a:	db0a      	blt.n	80067b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	490c      	ldr	r1, [pc, #48]	; (80067d4 <__NVIC_SetPriority+0x4c>)
 80067a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067a6:	0112      	lsls	r2, r2, #4
 80067a8:	b2d2      	uxtb	r2, r2
 80067aa:	440b      	add	r3, r1
 80067ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80067b0:	e00a      	b.n	80067c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	4908      	ldr	r1, [pc, #32]	; (80067d8 <__NVIC_SetPriority+0x50>)
 80067b8:	79fb      	ldrb	r3, [r7, #7]
 80067ba:	f003 030f 	and.w	r3, r3, #15
 80067be:	3b04      	subs	r3, #4
 80067c0:	0112      	lsls	r2, r2, #4
 80067c2:	b2d2      	uxtb	r2, r2
 80067c4:	440b      	add	r3, r1
 80067c6:	761a      	strb	r2, [r3, #24]
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	e000e100 	.word	0xe000e100
 80067d8:	e000ed00 	.word	0xe000ed00

080067dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067dc:	b480      	push	{r7}
 80067de:	b089      	sub	sp, #36	; 0x24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	f1c3 0307 	rsb	r3, r3, #7
 80067f6:	2b04      	cmp	r3, #4
 80067f8:	bf28      	it	cs
 80067fa:	2304      	movcs	r3, #4
 80067fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	3304      	adds	r3, #4
 8006802:	2b06      	cmp	r3, #6
 8006804:	d902      	bls.n	800680c <NVIC_EncodePriority+0x30>
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	3b03      	subs	r3, #3
 800680a:	e000      	b.n	800680e <NVIC_EncodePriority+0x32>
 800680c:	2300      	movs	r3, #0
 800680e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006810:	f04f 32ff 	mov.w	r2, #4294967295
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	fa02 f303 	lsl.w	r3, r2, r3
 800681a:	43da      	mvns	r2, r3
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	401a      	ands	r2, r3
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006824:	f04f 31ff 	mov.w	r1, #4294967295
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	fa01 f303 	lsl.w	r3, r1, r3
 800682e:	43d9      	mvns	r1, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006834:	4313      	orrs	r3, r2
         );
}
 8006836:	4618      	mov	r0, r3
 8006838:	3724      	adds	r7, #36	; 0x24
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
	...

08006844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	3b01      	subs	r3, #1
 8006850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006854:	d301      	bcc.n	800685a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006856:	2301      	movs	r3, #1
 8006858:	e00f      	b.n	800687a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800685a:	4a0a      	ldr	r2, [pc, #40]	; (8006884 <SysTick_Config+0x40>)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	3b01      	subs	r3, #1
 8006860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006862:	210f      	movs	r1, #15
 8006864:	f04f 30ff 	mov.w	r0, #4294967295
 8006868:	f7ff ff8e 	bl	8006788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800686c:	4b05      	ldr	r3, [pc, #20]	; (8006884 <SysTick_Config+0x40>)
 800686e:	2200      	movs	r2, #0
 8006870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006872:	4b04      	ldr	r3, [pc, #16]	; (8006884 <SysTick_Config+0x40>)
 8006874:	2207      	movs	r2, #7
 8006876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	e000e010 	.word	0xe000e010

08006888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f7ff ff29 	bl	80066e8 <__NVIC_SetPriorityGrouping>
}
 8006896:	bf00      	nop
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800689e:	b580      	push	{r7, lr}
 80068a0:	b086      	sub	sp, #24
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	4603      	mov	r3, r0
 80068a6:	60b9      	str	r1, [r7, #8]
 80068a8:	607a      	str	r2, [r7, #4]
 80068aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80068ac:	2300      	movs	r3, #0
 80068ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80068b0:	f7ff ff3e 	bl	8006730 <__NVIC_GetPriorityGrouping>
 80068b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	68b9      	ldr	r1, [r7, #8]
 80068ba:	6978      	ldr	r0, [r7, #20]
 80068bc:	f7ff ff8e 	bl	80067dc <NVIC_EncodePriority>
 80068c0:	4602      	mov	r2, r0
 80068c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068c6:	4611      	mov	r1, r2
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7ff ff5d 	bl	8006788 <__NVIC_SetPriority>
}
 80068ce:	bf00      	nop
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b082      	sub	sp, #8
 80068da:	af00      	add	r7, sp, #0
 80068dc:	4603      	mov	r3, r0
 80068de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7ff ff31 	bl	800674c <__NVIC_EnableIRQ>
}
 80068ea:	bf00      	nop
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b082      	sub	sp, #8
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7ff ffa2 	bl	8006844 <SysTick_Config>
 8006900:	4603      	mov	r3, r0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
	...

0800690c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006914:	2300      	movs	r3, #0
 8006916:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006918:	f7ff f888 	bl	8005a2c <HAL_GetTick>
 800691c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e099      	b.n	8006a5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2202      	movs	r2, #2
 800692c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 0201 	bic.w	r2, r2, #1
 8006946:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006948:	e00f      	b.n	800696a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800694a:	f7ff f86f 	bl	8005a2c <HAL_GetTick>
 800694e:	4602      	mov	r2, r0
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	2b05      	cmp	r3, #5
 8006956:	d908      	bls.n	800696a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2220      	movs	r2, #32
 800695c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2203      	movs	r2, #3
 8006962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e078      	b.n	8006a5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1e8      	bne.n	800694a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	4b38      	ldr	r3, [pc, #224]	; (8006a64 <HAL_DMA_Init+0x158>)
 8006984:	4013      	ands	r3, r2
 8006986:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685a      	ldr	r2, [r3, #4]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006996:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c0:	2b04      	cmp	r3, #4
 80069c2:	d107      	bne.n	80069d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069cc:	4313      	orrs	r3, r2
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f023 0307 	bic.w	r3, r3, #7
 80069ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fa:	2b04      	cmp	r3, #4
 80069fc:	d117      	bne.n	8006a2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00e      	beq.n	8006a2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 fb15 	bl	8007040 <DMA_CheckFifoParam>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d008      	beq.n	8006a2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2240      	movs	r2, #64	; 0x40
 8006a20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e016      	b.n	8006a5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 facc 	bl	8006fd4 <DMA_CalcBaseAndBitshift>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a44:	223f      	movs	r2, #63	; 0x3f
 8006a46:	409a      	lsls	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3718      	adds	r7, #24
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	e010803f 	.word	0xe010803f

08006a68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
 8006a74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a76:	2300      	movs	r3, #0
 8006a78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d101      	bne.n	8006a8e <HAL_DMA_Start_IT+0x26>
 8006a8a:	2302      	movs	r3, #2
 8006a8c:	e048      	b.n	8006b20 <HAL_DMA_Start_IT+0xb8>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d137      	bne.n	8006b12 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2202      	movs	r2, #2
 8006aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	68b9      	ldr	r1, [r7, #8]
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f000 fa5e 	bl	8006f78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ac0:	223f      	movs	r2, #63	; 0x3f
 8006ac2:	409a      	lsls	r2, r3
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f042 0216 	orr.w	r2, r2, #22
 8006ad6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	695a      	ldr	r2, [r3, #20]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ae6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d007      	beq.n	8006b00 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f042 0208 	orr.w	r2, r2, #8
 8006afe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f042 0201 	orr.w	r2, r2, #1
 8006b0e:	601a      	str	r2, [r3, #0]
 8006b10:	e005      	b.n	8006b1e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3718      	adds	r7, #24
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006b36:	f7fe ff79 	bl	8005a2c <HAL_GetTick>
 8006b3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d008      	beq.n	8006b5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2280      	movs	r2, #128	; 0x80
 8006b4c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e052      	b.n	8006c00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f022 0216 	bic.w	r2, r2, #22
 8006b68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	695a      	ldr	r2, [r3, #20]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d103      	bne.n	8006b8a <HAL_DMA_Abort+0x62>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d007      	beq.n	8006b9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f022 0208 	bic.w	r2, r2, #8
 8006b98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 0201 	bic.w	r2, r2, #1
 8006ba8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006baa:	e013      	b.n	8006bd4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006bac:	f7fe ff3e 	bl	8005a2c <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b05      	cmp	r3, #5
 8006bb8:	d90c      	bls.n	8006bd4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2203      	movs	r2, #3
 8006bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e015      	b.n	8006c00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1e4      	bne.n	8006bac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006be6:	223f      	movs	r2, #63	; 0x3f
 8006be8:	409a      	lsls	r2, r3
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d004      	beq.n	8006c26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2280      	movs	r2, #128	; 0x80
 8006c20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e00c      	b.n	8006c40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2205      	movs	r2, #5
 8006c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f022 0201 	bic.w	r2, r2, #1
 8006c3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8006c54:	2300      	movs	r3, #0
 8006c56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8006c58:	4b8e      	ldr	r3, [pc, #568]	; (8006e94 <HAL_DMA_IRQHandler+0x248>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a8e      	ldr	r2, [pc, #568]	; (8006e98 <HAL_DMA_IRQHandler+0x24c>)
 8006c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c62:	0a9b      	lsrs	r3, r3, #10
 8006c64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c76:	2208      	movs	r2, #8
 8006c78:	409a      	lsls	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d01a      	beq.n	8006cb8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0304 	and.w	r3, r3, #4
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d013      	beq.n	8006cb8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f022 0204 	bic.w	r2, r2, #4
 8006c9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ca4:	2208      	movs	r2, #8
 8006ca6:	409a      	lsls	r2, r3
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb0:	f043 0201 	orr.w	r2, r3, #1
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	409a      	lsls	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d012      	beq.n	8006cee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00b      	beq.n	8006cee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cda:	2201      	movs	r2, #1
 8006cdc:	409a      	lsls	r2, r3
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce6:	f043 0202 	orr.w	r2, r3, #2
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cf2:	2204      	movs	r2, #4
 8006cf4:	409a      	lsls	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d012      	beq.n	8006d24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0302 	and.w	r3, r3, #2
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00b      	beq.n	8006d24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d10:	2204      	movs	r2, #4
 8006d12:	409a      	lsls	r2, r3
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d1c:	f043 0204 	orr.w	r2, r3, #4
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d28:	2210      	movs	r2, #16
 8006d2a:	409a      	lsls	r2, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4013      	ands	r3, r2
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d043      	beq.n	8006dbc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0308 	and.w	r3, r3, #8
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d03c      	beq.n	8006dbc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d46:	2210      	movs	r2, #16
 8006d48:	409a      	lsls	r2, r3
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d018      	beq.n	8006d8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d108      	bne.n	8006d7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d024      	beq.n	8006dbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	4798      	blx	r3
 8006d7a:	e01f      	b.n	8006dbc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d01b      	beq.n	8006dbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	4798      	blx	r3
 8006d8c:	e016      	b.n	8006dbc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d107      	bne.n	8006dac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f022 0208 	bic.w	r2, r2, #8
 8006daa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d003      	beq.n	8006dbc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	409a      	lsls	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 808f 	beq.w	8006eec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0310 	and.w	r3, r3, #16
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f000 8087 	beq.w	8006eec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006de2:	2220      	movs	r2, #32
 8006de4:	409a      	lsls	r2, r3
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b05      	cmp	r3, #5
 8006df4:	d136      	bne.n	8006e64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f022 0216 	bic.w	r2, r2, #22
 8006e04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	695a      	ldr	r2, [r3, #20]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d103      	bne.n	8006e26 <HAL_DMA_IRQHandler+0x1da>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d007      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 0208 	bic.w	r2, r2, #8
 8006e34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e3a:	223f      	movs	r2, #63	; 0x3f
 8006e3c:	409a      	lsls	r2, r3
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d07e      	beq.n	8006f58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	4798      	blx	r3
        }
        return;
 8006e62:	e079      	b.n	8006f58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d01d      	beq.n	8006eae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10d      	bne.n	8006e9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d031      	beq.n	8006eec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	4798      	blx	r3
 8006e90:	e02c      	b.n	8006eec <HAL_DMA_IRQHandler+0x2a0>
 8006e92:	bf00      	nop
 8006e94:	20000000 	.word	0x20000000
 8006e98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d023      	beq.n	8006eec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	4798      	blx	r3
 8006eac:	e01e      	b.n	8006eec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10f      	bne.n	8006edc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f022 0210 	bic.w	r2, r2, #16
 8006eca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d003      	beq.n	8006eec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d032      	beq.n	8006f5a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef8:	f003 0301 	and.w	r3, r3, #1
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d022      	beq.n	8006f46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2205      	movs	r2, #5
 8006f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f022 0201 	bic.w	r2, r2, #1
 8006f16:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	60bb      	str	r3, [r7, #8]
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d307      	bcc.n	8006f34 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1f2      	bne.n	8006f18 <HAL_DMA_IRQHandler+0x2cc>
 8006f32:	e000      	b.n	8006f36 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006f34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d005      	beq.n	8006f5a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	4798      	blx	r3
 8006f56:	e000      	b.n	8006f5a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006f58:	bf00      	nop
    }
  }
}
 8006f5a:	3718      	adds	r7, #24
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
 8006f84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	2b40      	cmp	r3, #64	; 0x40
 8006fa4:	d108      	bne.n	8006fb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006fb6:	e007      	b.n	8006fc8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	60da      	str	r2, [r3, #12]
}
 8006fc8:	bf00      	nop
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	3b10      	subs	r3, #16
 8006fe4:	4a13      	ldr	r2, [pc, #76]	; (8007034 <DMA_CalcBaseAndBitshift+0x60>)
 8006fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fea:	091b      	lsrs	r3, r3, #4
 8006fec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006fee:	4a12      	ldr	r2, [pc, #72]	; (8007038 <DMA_CalcBaseAndBitshift+0x64>)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d908      	bls.n	8007014 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	461a      	mov	r2, r3
 8007008:	4b0c      	ldr	r3, [pc, #48]	; (800703c <DMA_CalcBaseAndBitshift+0x68>)
 800700a:	4013      	ands	r3, r2
 800700c:	1d1a      	adds	r2, r3, #4
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	659a      	str	r2, [r3, #88]	; 0x58
 8007012:	e006      	b.n	8007022 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	461a      	mov	r2, r3
 800701a:	4b08      	ldr	r3, [pc, #32]	; (800703c <DMA_CalcBaseAndBitshift+0x68>)
 800701c:	4013      	ands	r3, r2
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007026:	4618      	mov	r0, r3
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	aaaaaaab 	.word	0xaaaaaaab
 8007038:	08016a9c 	.word	0x08016a9c
 800703c:	fffffc00 	.word	0xfffffc00

08007040 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007050:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d11f      	bne.n	800709a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	2b03      	cmp	r3, #3
 800705e:	d856      	bhi.n	800710e <DMA_CheckFifoParam+0xce>
 8007060:	a201      	add	r2, pc, #4	; (adr r2, 8007068 <DMA_CheckFifoParam+0x28>)
 8007062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007066:	bf00      	nop
 8007068:	08007079 	.word	0x08007079
 800706c:	0800708b 	.word	0x0800708b
 8007070:	08007079 	.word	0x08007079
 8007074:	0800710f 	.word	0x0800710f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d046      	beq.n	8007112 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007088:	e043      	b.n	8007112 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007092:	d140      	bne.n	8007116 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007098:	e03d      	b.n	8007116 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070a2:	d121      	bne.n	80070e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	d837      	bhi.n	800711a <DMA_CheckFifoParam+0xda>
 80070aa:	a201      	add	r2, pc, #4	; (adr r2, 80070b0 <DMA_CheckFifoParam+0x70>)
 80070ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b0:	080070c1 	.word	0x080070c1
 80070b4:	080070c7 	.word	0x080070c7
 80070b8:	080070c1 	.word	0x080070c1
 80070bc:	080070d9 	.word	0x080070d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	73fb      	strb	r3, [r7, #15]
      break;
 80070c4:	e030      	b.n	8007128 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d025      	beq.n	800711e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070d6:	e022      	b.n	800711e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80070e0:	d11f      	bne.n	8007122 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80070e6:	e01c      	b.n	8007122 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d903      	bls.n	80070f6 <DMA_CheckFifoParam+0xb6>
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	2b03      	cmp	r3, #3
 80070f2:	d003      	beq.n	80070fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80070f4:	e018      	b.n	8007128 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	73fb      	strb	r3, [r7, #15]
      break;
 80070fa:	e015      	b.n	8007128 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00e      	beq.n	8007126 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	73fb      	strb	r3, [r7, #15]
      break;
 800710c:	e00b      	b.n	8007126 <DMA_CheckFifoParam+0xe6>
      break;
 800710e:	bf00      	nop
 8007110:	e00a      	b.n	8007128 <DMA_CheckFifoParam+0xe8>
      break;
 8007112:	bf00      	nop
 8007114:	e008      	b.n	8007128 <DMA_CheckFifoParam+0xe8>
      break;
 8007116:	bf00      	nop
 8007118:	e006      	b.n	8007128 <DMA_CheckFifoParam+0xe8>
      break;
 800711a:	bf00      	nop
 800711c:	e004      	b.n	8007128 <DMA_CheckFifoParam+0xe8>
      break;
 800711e:	bf00      	nop
 8007120:	e002      	b.n	8007128 <DMA_CheckFifoParam+0xe8>
      break;   
 8007122:	bf00      	nop
 8007124:	e000      	b.n	8007128 <DMA_CheckFifoParam+0xe8>
      break;
 8007126:	bf00      	nop
    }
  } 
  
  return status; 
 8007128:	7bfb      	ldrb	r3, [r7, #15]
}
 800712a:	4618      	mov	r0, r3
 800712c:	3714      	adds	r7, #20
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop

08007138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007138:	b480      	push	{r7}
 800713a:	b089      	sub	sp, #36	; 0x24
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007142:	2300      	movs	r3, #0
 8007144:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007146:	2300      	movs	r3, #0
 8007148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800714a:	2300      	movs	r3, #0
 800714c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800714e:	2300      	movs	r3, #0
 8007150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007152:	2300      	movs	r3, #0
 8007154:	61fb      	str	r3, [r7, #28]
 8007156:	e175      	b.n	8007444 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007158:	2201      	movs	r2, #1
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	fa02 f303 	lsl.w	r3, r2, r3
 8007160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	4013      	ands	r3, r2
 800716a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	429a      	cmp	r2, r3
 8007172:	f040 8164 	bne.w	800743e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f003 0303 	and.w	r3, r3, #3
 800717e:	2b01      	cmp	r3, #1
 8007180:	d005      	beq.n	800718e <HAL_GPIO_Init+0x56>
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f003 0303 	and.w	r3, r3, #3
 800718a:	2b02      	cmp	r3, #2
 800718c:	d130      	bne.n	80071f0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	005b      	lsls	r3, r3, #1
 8007198:	2203      	movs	r2, #3
 800719a:	fa02 f303 	lsl.w	r3, r2, r3
 800719e:	43db      	mvns	r3, r3
 80071a0:	69ba      	ldr	r2, [r7, #24]
 80071a2:	4013      	ands	r3, r2
 80071a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	68da      	ldr	r2, [r3, #12]
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	005b      	lsls	r3, r3, #1
 80071ae:	fa02 f303 	lsl.w	r3, r2, r3
 80071b2:	69ba      	ldr	r2, [r7, #24]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	69ba      	ldr	r2, [r7, #24]
 80071bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80071c4:	2201      	movs	r2, #1
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	fa02 f303 	lsl.w	r3, r2, r3
 80071cc:	43db      	mvns	r3, r3
 80071ce:	69ba      	ldr	r2, [r7, #24]
 80071d0:	4013      	ands	r3, r2
 80071d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	091b      	lsrs	r3, r3, #4
 80071da:	f003 0201 	and.w	r2, r3, #1
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	fa02 f303 	lsl.w	r3, r2, r3
 80071e4:	69ba      	ldr	r2, [r7, #24]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	69ba      	ldr	r2, [r7, #24]
 80071ee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	f003 0303 	and.w	r3, r3, #3
 80071f8:	2b03      	cmp	r3, #3
 80071fa:	d017      	beq.n	800722c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	005b      	lsls	r3, r3, #1
 8007206:	2203      	movs	r2, #3
 8007208:	fa02 f303 	lsl.w	r3, r2, r3
 800720c:	43db      	mvns	r3, r3
 800720e:	69ba      	ldr	r2, [r7, #24]
 8007210:	4013      	ands	r3, r2
 8007212:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	689a      	ldr	r2, [r3, #8]
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	005b      	lsls	r3, r3, #1
 800721c:	fa02 f303 	lsl.w	r3, r2, r3
 8007220:	69ba      	ldr	r2, [r7, #24]
 8007222:	4313      	orrs	r3, r2
 8007224:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	69ba      	ldr	r2, [r7, #24]
 800722a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	f003 0303 	and.w	r3, r3, #3
 8007234:	2b02      	cmp	r3, #2
 8007236:	d123      	bne.n	8007280 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	08da      	lsrs	r2, r3, #3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	3208      	adds	r2, #8
 8007240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	f003 0307 	and.w	r3, r3, #7
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	220f      	movs	r2, #15
 8007250:	fa02 f303 	lsl.w	r3, r2, r3
 8007254:	43db      	mvns	r3, r3
 8007256:	69ba      	ldr	r2, [r7, #24]
 8007258:	4013      	ands	r3, r2
 800725a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	691a      	ldr	r2, [r3, #16]
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	f003 0307 	and.w	r3, r3, #7
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	fa02 f303 	lsl.w	r3, r2, r3
 800726c:	69ba      	ldr	r2, [r7, #24]
 800726e:	4313      	orrs	r3, r2
 8007270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	08da      	lsrs	r2, r3, #3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	3208      	adds	r2, #8
 800727a:	69b9      	ldr	r1, [r7, #24]
 800727c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	005b      	lsls	r3, r3, #1
 800728a:	2203      	movs	r2, #3
 800728c:	fa02 f303 	lsl.w	r3, r2, r3
 8007290:	43db      	mvns	r3, r3
 8007292:	69ba      	ldr	r2, [r7, #24]
 8007294:	4013      	ands	r3, r2
 8007296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f003 0203 	and.w	r2, r3, #3
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	005b      	lsls	r3, r3, #1
 80072a4:	fa02 f303 	lsl.w	r3, r2, r3
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	69ba      	ldr	r2, [r7, #24]
 80072b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 80be 	beq.w	800743e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072c2:	4b66      	ldr	r3, [pc, #408]	; (800745c <HAL_GPIO_Init+0x324>)
 80072c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c6:	4a65      	ldr	r2, [pc, #404]	; (800745c <HAL_GPIO_Init+0x324>)
 80072c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072cc:	6453      	str	r3, [r2, #68]	; 0x44
 80072ce:	4b63      	ldr	r3, [pc, #396]	; (800745c <HAL_GPIO_Init+0x324>)
 80072d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072d6:	60fb      	str	r3, [r7, #12]
 80072d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80072da:	4a61      	ldr	r2, [pc, #388]	; (8007460 <HAL_GPIO_Init+0x328>)
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	089b      	lsrs	r3, r3, #2
 80072e0:	3302      	adds	r3, #2
 80072e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	f003 0303 	and.w	r3, r3, #3
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	220f      	movs	r2, #15
 80072f2:	fa02 f303 	lsl.w	r3, r2, r3
 80072f6:	43db      	mvns	r3, r3
 80072f8:	69ba      	ldr	r2, [r7, #24]
 80072fa:	4013      	ands	r3, r2
 80072fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a58      	ldr	r2, [pc, #352]	; (8007464 <HAL_GPIO_Init+0x32c>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d037      	beq.n	8007376 <HAL_GPIO_Init+0x23e>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a57      	ldr	r2, [pc, #348]	; (8007468 <HAL_GPIO_Init+0x330>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d031      	beq.n	8007372 <HAL_GPIO_Init+0x23a>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a56      	ldr	r2, [pc, #344]	; (800746c <HAL_GPIO_Init+0x334>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d02b      	beq.n	800736e <HAL_GPIO_Init+0x236>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a55      	ldr	r2, [pc, #340]	; (8007470 <HAL_GPIO_Init+0x338>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d025      	beq.n	800736a <HAL_GPIO_Init+0x232>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a54      	ldr	r2, [pc, #336]	; (8007474 <HAL_GPIO_Init+0x33c>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d01f      	beq.n	8007366 <HAL_GPIO_Init+0x22e>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a53      	ldr	r2, [pc, #332]	; (8007478 <HAL_GPIO_Init+0x340>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d019      	beq.n	8007362 <HAL_GPIO_Init+0x22a>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a52      	ldr	r2, [pc, #328]	; (800747c <HAL_GPIO_Init+0x344>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d013      	beq.n	800735e <HAL_GPIO_Init+0x226>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a51      	ldr	r2, [pc, #324]	; (8007480 <HAL_GPIO_Init+0x348>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d00d      	beq.n	800735a <HAL_GPIO_Init+0x222>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a50      	ldr	r2, [pc, #320]	; (8007484 <HAL_GPIO_Init+0x34c>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d007      	beq.n	8007356 <HAL_GPIO_Init+0x21e>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a4f      	ldr	r2, [pc, #316]	; (8007488 <HAL_GPIO_Init+0x350>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d101      	bne.n	8007352 <HAL_GPIO_Init+0x21a>
 800734e:	2309      	movs	r3, #9
 8007350:	e012      	b.n	8007378 <HAL_GPIO_Init+0x240>
 8007352:	230a      	movs	r3, #10
 8007354:	e010      	b.n	8007378 <HAL_GPIO_Init+0x240>
 8007356:	2308      	movs	r3, #8
 8007358:	e00e      	b.n	8007378 <HAL_GPIO_Init+0x240>
 800735a:	2307      	movs	r3, #7
 800735c:	e00c      	b.n	8007378 <HAL_GPIO_Init+0x240>
 800735e:	2306      	movs	r3, #6
 8007360:	e00a      	b.n	8007378 <HAL_GPIO_Init+0x240>
 8007362:	2305      	movs	r3, #5
 8007364:	e008      	b.n	8007378 <HAL_GPIO_Init+0x240>
 8007366:	2304      	movs	r3, #4
 8007368:	e006      	b.n	8007378 <HAL_GPIO_Init+0x240>
 800736a:	2303      	movs	r3, #3
 800736c:	e004      	b.n	8007378 <HAL_GPIO_Init+0x240>
 800736e:	2302      	movs	r3, #2
 8007370:	e002      	b.n	8007378 <HAL_GPIO_Init+0x240>
 8007372:	2301      	movs	r3, #1
 8007374:	e000      	b.n	8007378 <HAL_GPIO_Init+0x240>
 8007376:	2300      	movs	r3, #0
 8007378:	69fa      	ldr	r2, [r7, #28]
 800737a:	f002 0203 	and.w	r2, r2, #3
 800737e:	0092      	lsls	r2, r2, #2
 8007380:	4093      	lsls	r3, r2
 8007382:	69ba      	ldr	r2, [r7, #24]
 8007384:	4313      	orrs	r3, r2
 8007386:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007388:	4935      	ldr	r1, [pc, #212]	; (8007460 <HAL_GPIO_Init+0x328>)
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	089b      	lsrs	r3, r3, #2
 800738e:	3302      	adds	r3, #2
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007396:	4b3d      	ldr	r3, [pc, #244]	; (800748c <HAL_GPIO_Init+0x354>)
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	43db      	mvns	r3, r3
 80073a0:	69ba      	ldr	r2, [r7, #24]
 80073a2:	4013      	ands	r3, r2
 80073a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80073b2:	69ba      	ldr	r2, [r7, #24]
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80073ba:	4a34      	ldr	r2, [pc, #208]	; (800748c <HAL_GPIO_Init+0x354>)
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80073c0:	4b32      	ldr	r3, [pc, #200]	; (800748c <HAL_GPIO_Init+0x354>)
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	43db      	mvns	r3, r3
 80073ca:	69ba      	ldr	r2, [r7, #24]
 80073cc:	4013      	ands	r3, r2
 80073ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d003      	beq.n	80073e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80073dc:	69ba      	ldr	r2, [r7, #24]
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80073e4:	4a29      	ldr	r2, [pc, #164]	; (800748c <HAL_GPIO_Init+0x354>)
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80073ea:	4b28      	ldr	r3, [pc, #160]	; (800748c <HAL_GPIO_Init+0x354>)
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	43db      	mvns	r3, r3
 80073f4:	69ba      	ldr	r2, [r7, #24]
 80073f6:	4013      	ands	r3, r2
 80073f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007406:	69ba      	ldr	r2, [r7, #24]
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	4313      	orrs	r3, r2
 800740c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800740e:	4a1f      	ldr	r2, [pc, #124]	; (800748c <HAL_GPIO_Init+0x354>)
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007414:	4b1d      	ldr	r3, [pc, #116]	; (800748c <HAL_GPIO_Init+0x354>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	43db      	mvns	r3, r3
 800741e:	69ba      	ldr	r2, [r7, #24]
 8007420:	4013      	ands	r3, r2
 8007422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d003      	beq.n	8007438 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007430:	69ba      	ldr	r2, [r7, #24]
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	4313      	orrs	r3, r2
 8007436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007438:	4a14      	ldr	r2, [pc, #80]	; (800748c <HAL_GPIO_Init+0x354>)
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	3301      	adds	r3, #1
 8007442:	61fb      	str	r3, [r7, #28]
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	2b0f      	cmp	r3, #15
 8007448:	f67f ae86 	bls.w	8007158 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800744c:	bf00      	nop
 800744e:	bf00      	nop
 8007450:	3724      	adds	r7, #36	; 0x24
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	40023800 	.word	0x40023800
 8007460:	40013800 	.word	0x40013800
 8007464:	40020000 	.word	0x40020000
 8007468:	40020400 	.word	0x40020400
 800746c:	40020800 	.word	0x40020800
 8007470:	40020c00 	.word	0x40020c00
 8007474:	40021000 	.word	0x40021000
 8007478:	40021400 	.word	0x40021400
 800747c:	40021800 	.word	0x40021800
 8007480:	40021c00 	.word	0x40021c00
 8007484:	40022000 	.word	0x40022000
 8007488:	40022400 	.word	0x40022400
 800748c:	40013c00 	.word	0x40013c00

08007490 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d101      	bne.n	80074a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e07f      	b.n	80075a2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d106      	bne.n	80074bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7fc fc9a 	bl	8003df0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2224      	movs	r2, #36	; 0x24
 80074c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f022 0201 	bic.w	r2, r2, #1
 80074d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685a      	ldr	r2, [r3, #4]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80074e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	689a      	ldr	r2, [r3, #8]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d107      	bne.n	800750a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	689a      	ldr	r2, [r3, #8]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007506:	609a      	str	r2, [r3, #8]
 8007508:	e006      	b.n	8007518 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	689a      	ldr	r2, [r3, #8]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007516:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	2b02      	cmp	r3, #2
 800751e:	d104      	bne.n	800752a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007528:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	6859      	ldr	r1, [r3, #4]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	4b1d      	ldr	r3, [pc, #116]	; (80075ac <HAL_I2C_Init+0x11c>)
 8007536:	430b      	orrs	r3, r1
 8007538:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68da      	ldr	r2, [r3, #12]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007548:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	691a      	ldr	r2, [r3, #16]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	695b      	ldr	r3, [r3, #20]
 8007552:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	430a      	orrs	r2, r1
 8007562:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	69d9      	ldr	r1, [r3, #28]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a1a      	ldr	r2, [r3, #32]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	430a      	orrs	r2, r1
 8007572:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f042 0201 	orr.w	r2, r2, #1
 8007582:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2220      	movs	r2, #32
 800758e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3708      	adds	r7, #8
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	02008000 	.word	0x02008000

080075b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b088      	sub	sp, #32
 80075b4:	af02      	add	r7, sp, #8
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	607a      	str	r2, [r7, #4]
 80075ba:	461a      	mov	r2, r3
 80075bc:	460b      	mov	r3, r1
 80075be:	817b      	strh	r3, [r7, #10]
 80075c0:	4613      	mov	r3, r2
 80075c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b20      	cmp	r3, #32
 80075ce:	f040 80da 	bne.w	8007786 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d101      	bne.n	80075e0 <HAL_I2C_Master_Transmit+0x30>
 80075dc:	2302      	movs	r3, #2
 80075de:	e0d3      	b.n	8007788 <HAL_I2C_Master_Transmit+0x1d8>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80075e8:	f7fe fa20 	bl	8005a2c <HAL_GetTick>
 80075ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	2319      	movs	r3, #25
 80075f4:	2201      	movs	r2, #1
 80075f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f000 fdc4 	bl	8008188 <I2C_WaitOnFlagUntilTimeout>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d001      	beq.n	800760a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e0be      	b.n	8007788 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2221      	movs	r2, #33	; 0x21
 800760e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2210      	movs	r2, #16
 8007616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	893a      	ldrh	r2, [r7, #8]
 800762a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007636:	b29b      	uxth	r3, r3
 8007638:	2bff      	cmp	r3, #255	; 0xff
 800763a:	d90e      	bls.n	800765a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	22ff      	movs	r2, #255	; 0xff
 8007640:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007646:	b2da      	uxtb	r2, r3
 8007648:	8979      	ldrh	r1, [r7, #10]
 800764a:	4b51      	ldr	r3, [pc, #324]	; (8007790 <HAL_I2C_Master_Transmit+0x1e0>)
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f000 ffba 	bl	80085cc <I2C_TransferConfig>
 8007658:	e06c      	b.n	8007734 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800765e:	b29a      	uxth	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007668:	b2da      	uxtb	r2, r3
 800766a:	8979      	ldrh	r1, [r7, #10]
 800766c:	4b48      	ldr	r3, [pc, #288]	; (8007790 <HAL_I2C_Master_Transmit+0x1e0>)
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f000 ffa9 	bl	80085cc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800767a:	e05b      	b.n	8007734 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800767c:	697a      	ldr	r2, [r7, #20]
 800767e:	6a39      	ldr	r1, [r7, #32]
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 fdc1 	bl	8008208 <I2C_WaitOnTXISFlagUntilTimeout>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e07b      	b.n	8007788 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007694:	781a      	ldrb	r2, [r3, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a0:	1c5a      	adds	r2, r3, #1
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	3b01      	subs	r3, #1
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076b8:	3b01      	subs	r3, #1
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d034      	beq.n	8007734 <HAL_I2C_Master_Transmit+0x184>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d130      	bne.n	8007734 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	2200      	movs	r2, #0
 80076da:	2180      	movs	r1, #128	; 0x80
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f000 fd53 	bl	8008188 <I2C_WaitOnFlagUntilTimeout>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d001      	beq.n	80076ec <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e04d      	b.n	8007788 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	2bff      	cmp	r3, #255	; 0xff
 80076f4:	d90e      	bls.n	8007714 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	22ff      	movs	r2, #255	; 0xff
 80076fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007700:	b2da      	uxtb	r2, r3
 8007702:	8979      	ldrh	r1, [r7, #10]
 8007704:	2300      	movs	r3, #0
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f000 ff5d 	bl	80085cc <I2C_TransferConfig>
 8007712:	e00f      	b.n	8007734 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007718:	b29a      	uxth	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007722:	b2da      	uxtb	r2, r3
 8007724:	8979      	ldrh	r1, [r7, #10]
 8007726:	2300      	movs	r3, #0
 8007728:	9300      	str	r3, [sp, #0]
 800772a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f000 ff4c 	bl	80085cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007738:	b29b      	uxth	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d19e      	bne.n	800767c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	6a39      	ldr	r1, [r7, #32]
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 fda0 	bl	8008288 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e01a      	b.n	8007788 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2220      	movs	r2, #32
 8007758:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	6859      	ldr	r1, [r3, #4]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	4b0b      	ldr	r3, [pc, #44]	; (8007794 <HAL_I2C_Master_Transmit+0x1e4>)
 8007766:	400b      	ands	r3, r1
 8007768:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2220      	movs	r2, #32
 800776e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	e000      	b.n	8007788 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007786:	2302      	movs	r3, #2
  }
}
 8007788:	4618      	mov	r0, r3
 800778a:	3718      	adds	r7, #24
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	80002000 	.word	0x80002000
 8007794:	fe00e800 	.word	0xfe00e800

08007798 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b088      	sub	sp, #32
 800779c:	af02      	add	r7, sp, #8
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	607a      	str	r2, [r7, #4]
 80077a2:	461a      	mov	r2, r3
 80077a4:	460b      	mov	r3, r1
 80077a6:	817b      	strh	r3, [r7, #10]
 80077a8:	4613      	mov	r3, r2
 80077aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	2b20      	cmp	r3, #32
 80077b6:	f040 80db 	bne.w	8007970 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d101      	bne.n	80077c8 <HAL_I2C_Master_Receive+0x30>
 80077c4:	2302      	movs	r3, #2
 80077c6:	e0d4      	b.n	8007972 <HAL_I2C_Master_Receive+0x1da>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80077d0:	f7fe f92c 	bl	8005a2c <HAL_GetTick>
 80077d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	2319      	movs	r3, #25
 80077dc:	2201      	movs	r2, #1
 80077de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f000 fcd0 	bl	8008188 <I2C_WaitOnFlagUntilTimeout>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e0bf      	b.n	8007972 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2222      	movs	r2, #34	; 0x22
 80077f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2210      	movs	r2, #16
 80077fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	893a      	ldrh	r2, [r7, #8]
 8007812:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800781e:	b29b      	uxth	r3, r3
 8007820:	2bff      	cmp	r3, #255	; 0xff
 8007822:	d90e      	bls.n	8007842 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	22ff      	movs	r2, #255	; 0xff
 8007828:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800782e:	b2da      	uxtb	r2, r3
 8007830:	8979      	ldrh	r1, [r7, #10]
 8007832:	4b52      	ldr	r3, [pc, #328]	; (800797c <HAL_I2C_Master_Receive+0x1e4>)
 8007834:	9300      	str	r3, [sp, #0]
 8007836:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f000 fec6 	bl	80085cc <I2C_TransferConfig>
 8007840:	e06d      	b.n	800791e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007846:	b29a      	uxth	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007850:	b2da      	uxtb	r2, r3
 8007852:	8979      	ldrh	r1, [r7, #10]
 8007854:	4b49      	ldr	r3, [pc, #292]	; (800797c <HAL_I2C_Master_Receive+0x1e4>)
 8007856:	9300      	str	r3, [sp, #0]
 8007858:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f000 feb5 	bl	80085cc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007862:	e05c      	b.n	800791e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	6a39      	ldr	r1, [r7, #32]
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f000 fd49 	bl	8008300 <I2C_WaitOnRXNEFlagUntilTimeout>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d001      	beq.n	8007878 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	e07c      	b.n	8007972 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007882:	b2d2      	uxtb	r2, r2
 8007884:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788a:	1c5a      	adds	r2, r3, #1
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007894:	3b01      	subs	r3, #1
 8007896:	b29a      	uxth	r2, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	3b01      	subs	r3, #1
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d034      	beq.n	800791e <HAL_I2C_Master_Receive+0x186>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d130      	bne.n	800791e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	2200      	movs	r2, #0
 80078c4:	2180      	movs	r1, #128	; 0x80
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f000 fc5e 	bl	8008188 <I2C_WaitOnFlagUntilTimeout>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d001      	beq.n	80078d6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e04d      	b.n	8007972 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078da:	b29b      	uxth	r3, r3
 80078dc:	2bff      	cmp	r3, #255	; 0xff
 80078de:	d90e      	bls.n	80078fe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	22ff      	movs	r2, #255	; 0xff
 80078e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ea:	b2da      	uxtb	r2, r3
 80078ec:	8979      	ldrh	r1, [r7, #10]
 80078ee:	2300      	movs	r3, #0
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f000 fe68 	bl	80085cc <I2C_TransferConfig>
 80078fc:	e00f      	b.n	800791e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007902:	b29a      	uxth	r2, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800790c:	b2da      	uxtb	r2, r3
 800790e:	8979      	ldrh	r1, [r7, #10]
 8007910:	2300      	movs	r3, #0
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f000 fe57 	bl	80085cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007922:	b29b      	uxth	r3, r3
 8007924:	2b00      	cmp	r3, #0
 8007926:	d19d      	bne.n	8007864 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007928:	697a      	ldr	r2, [r7, #20]
 800792a:	6a39      	ldr	r1, [r7, #32]
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f000 fcab 	bl	8008288 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d001      	beq.n	800793c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	e01a      	b.n	8007972 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2220      	movs	r2, #32
 8007942:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6859      	ldr	r1, [r3, #4]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	4b0c      	ldr	r3, [pc, #48]	; (8007980 <HAL_I2C_Master_Receive+0x1e8>)
 8007950:	400b      	ands	r3, r1
 8007952:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2220      	movs	r2, #32
 8007958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800796c:	2300      	movs	r3, #0
 800796e:	e000      	b.n	8007972 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007970:	2302      	movs	r3, #2
  }
}
 8007972:	4618      	mov	r0, r3
 8007974:	3718      	adds	r7, #24
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	80002400 	.word	0x80002400
 8007980:	fe00e800 	.word	0xfe00e800

08007984 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b088      	sub	sp, #32
 8007988:	af02      	add	r7, sp, #8
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	4608      	mov	r0, r1
 800798e:	4611      	mov	r1, r2
 8007990:	461a      	mov	r2, r3
 8007992:	4603      	mov	r3, r0
 8007994:	817b      	strh	r3, [r7, #10]
 8007996:	460b      	mov	r3, r1
 8007998:	813b      	strh	r3, [r7, #8]
 800799a:	4613      	mov	r3, r2
 800799c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b20      	cmp	r3, #32
 80079a8:	f040 80f9 	bne.w	8007b9e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80079ac:	6a3b      	ldr	r3, [r7, #32]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d002      	beq.n	80079b8 <HAL_I2C_Mem_Write+0x34>
 80079b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d105      	bne.n	80079c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e0ed      	b.n	8007ba0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d101      	bne.n	80079d2 <HAL_I2C_Mem_Write+0x4e>
 80079ce:	2302      	movs	r3, #2
 80079d0:	e0e6      	b.n	8007ba0 <HAL_I2C_Mem_Write+0x21c>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80079da:	f7fe f827 	bl	8005a2c <HAL_GetTick>
 80079de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	2319      	movs	r3, #25
 80079e6:	2201      	movs	r2, #1
 80079e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f000 fbcb 	bl	8008188 <I2C_WaitOnFlagUntilTimeout>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d001      	beq.n	80079fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e0d1      	b.n	8007ba0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2221      	movs	r2, #33	; 0x21
 8007a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2240      	movs	r2, #64	; 0x40
 8007a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6a3a      	ldr	r2, [r7, #32]
 8007a16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a24:	88f8      	ldrh	r0, [r7, #6]
 8007a26:	893a      	ldrh	r2, [r7, #8]
 8007a28:	8979      	ldrh	r1, [r7, #10]
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	9301      	str	r3, [sp, #4]
 8007a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	4603      	mov	r3, r0
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f000 fadb 	bl	8007ff0 <I2C_RequestMemoryWrite>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d005      	beq.n	8007a4c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e0a9      	b.n	8007ba0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	2bff      	cmp	r3, #255	; 0xff
 8007a54:	d90e      	bls.n	8007a74 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	22ff      	movs	r2, #255	; 0xff
 8007a5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a60:	b2da      	uxtb	r2, r3
 8007a62:	8979      	ldrh	r1, [r7, #10]
 8007a64:	2300      	movs	r3, #0
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f000 fdad 	bl	80085cc <I2C_TransferConfig>
 8007a72:	e00f      	b.n	8007a94 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a82:	b2da      	uxtb	r2, r3
 8007a84:	8979      	ldrh	r1, [r7, #10]
 8007a86:	2300      	movs	r3, #0
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f000 fd9c 	bl	80085cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	f000 fbb5 	bl	8008208 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d001      	beq.n	8007aa8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e07b      	b.n	8007ba0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aac:	781a      	ldrb	r2, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	1c5a      	adds	r2, r3, #1
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d034      	beq.n	8007b4c <HAL_I2C_Mem_Write+0x1c8>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d130      	bne.n	8007b4c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	9300      	str	r3, [sp, #0]
 8007aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af0:	2200      	movs	r2, #0
 8007af2:	2180      	movs	r1, #128	; 0x80
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f000 fb47 	bl	8008188 <I2C_WaitOnFlagUntilTimeout>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e04d      	b.n	8007ba0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	2bff      	cmp	r3, #255	; 0xff
 8007b0c:	d90e      	bls.n	8007b2c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	22ff      	movs	r2, #255	; 0xff
 8007b12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	8979      	ldrh	r1, [r7, #10]
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f000 fd51 	bl	80085cc <I2C_TransferConfig>
 8007b2a:	e00f      	b.n	8007b4c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	8979      	ldrh	r1, [r7, #10]
 8007b3e:	2300      	movs	r3, #0
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b46:	68f8      	ldr	r0, [r7, #12]
 8007b48:	f000 fd40 	bl	80085cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d19e      	bne.n	8007a94 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	f000 fb94 	bl	8008288 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d001      	beq.n	8007b6a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e01a      	b.n	8007ba0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2220      	movs	r2, #32
 8007b70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	6859      	ldr	r1, [r3, #4]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	4b0a      	ldr	r3, [pc, #40]	; (8007ba8 <HAL_I2C_Mem_Write+0x224>)
 8007b7e:	400b      	ands	r3, r1
 8007b80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2220      	movs	r2, #32
 8007b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	e000      	b.n	8007ba0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007b9e:	2302      	movs	r3, #2
  }
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3718      	adds	r7, #24
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	fe00e800 	.word	0xfe00e800

08007bac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b088      	sub	sp, #32
 8007bb0:	af02      	add	r7, sp, #8
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	4608      	mov	r0, r1
 8007bb6:	4611      	mov	r1, r2
 8007bb8:	461a      	mov	r2, r3
 8007bba:	4603      	mov	r3, r0
 8007bbc:	817b      	strh	r3, [r7, #10]
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	813b      	strh	r3, [r7, #8]
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b20      	cmp	r3, #32
 8007bd0:	f040 80fd 	bne.w	8007dce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bd4:	6a3b      	ldr	r3, [r7, #32]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d002      	beq.n	8007be0 <HAL_I2C_Mem_Read+0x34>
 8007bda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d105      	bne.n	8007bec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007be6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e0f1      	b.n	8007dd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d101      	bne.n	8007bfa <HAL_I2C_Mem_Read+0x4e>
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	e0ea      	b.n	8007dd0 <HAL_I2C_Mem_Read+0x224>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007c02:	f7fd ff13 	bl	8005a2c <HAL_GetTick>
 8007c06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	2319      	movs	r3, #25
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f000 fab7 	bl	8008188 <I2C_WaitOnFlagUntilTimeout>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d001      	beq.n	8007c24 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e0d5      	b.n	8007dd0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2222      	movs	r2, #34	; 0x22
 8007c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2240      	movs	r2, #64	; 0x40
 8007c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6a3a      	ldr	r2, [r7, #32]
 8007c3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007c44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007c4c:	88f8      	ldrh	r0, [r7, #6]
 8007c4e:	893a      	ldrh	r2, [r7, #8]
 8007c50:	8979      	ldrh	r1, [r7, #10]
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	9301      	str	r3, [sp, #4]
 8007c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f000 fa1b 	bl	8008098 <I2C_RequestMemoryRead>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d005      	beq.n	8007c74 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e0ad      	b.n	8007dd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	2bff      	cmp	r3, #255	; 0xff
 8007c7c:	d90e      	bls.n	8007c9c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	22ff      	movs	r2, #255	; 0xff
 8007c82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c88:	b2da      	uxtb	r2, r3
 8007c8a:	8979      	ldrh	r1, [r7, #10]
 8007c8c:	4b52      	ldr	r3, [pc, #328]	; (8007dd8 <HAL_I2C_Mem_Read+0x22c>)
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f000 fc99 	bl	80085cc <I2C_TransferConfig>
 8007c9a:	e00f      	b.n	8007cbc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007caa:	b2da      	uxtb	r2, r3
 8007cac:	8979      	ldrh	r1, [r7, #10]
 8007cae:	4b4a      	ldr	r3, [pc, #296]	; (8007dd8 <HAL_I2C_Mem_Read+0x22c>)
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f000 fc88 	bl	80085cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	2104      	movs	r1, #4
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f000 fa5e 	bl	8008188 <I2C_WaitOnFlagUntilTimeout>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e07c      	b.n	8007dd0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce0:	b2d2      	uxtb	r2, r2
 8007ce2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce8:	1c5a      	adds	r2, r3, #1
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	3b01      	subs	r3, #1
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d034      	beq.n	8007d7c <HAL_I2C_Mem_Read+0x1d0>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d130      	bne.n	8007d7c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	9300      	str	r3, [sp, #0]
 8007d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d20:	2200      	movs	r2, #0
 8007d22:	2180      	movs	r1, #128	; 0x80
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	f000 fa2f 	bl	8008188 <I2C_WaitOnFlagUntilTimeout>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d001      	beq.n	8007d34 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e04d      	b.n	8007dd0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	2bff      	cmp	r3, #255	; 0xff
 8007d3c:	d90e      	bls.n	8007d5c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	22ff      	movs	r2, #255	; 0xff
 8007d42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d48:	b2da      	uxtb	r2, r3
 8007d4a:	8979      	ldrh	r1, [r7, #10]
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 fc39 	bl	80085cc <I2C_TransferConfig>
 8007d5a:	e00f      	b.n	8007d7c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d6a:	b2da      	uxtb	r2, r3
 8007d6c:	8979      	ldrh	r1, [r7, #10]
 8007d6e:	2300      	movs	r3, #0
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f000 fc28 	bl	80085cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d19a      	bne.n	8007cbc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f000 fa7c 	bl	8008288 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d001      	beq.n	8007d9a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e01a      	b.n	8007dd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2220      	movs	r2, #32
 8007da0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	6859      	ldr	r1, [r3, #4]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	4b0b      	ldr	r3, [pc, #44]	; (8007ddc <HAL_I2C_Mem_Read+0x230>)
 8007dae:	400b      	ands	r3, r1
 8007db0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2220      	movs	r2, #32
 8007db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	e000      	b.n	8007dd0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007dce:	2302      	movs	r3, #2
  }
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3718      	adds	r7, #24
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	80002400 	.word	0x80002400
 8007ddc:	fe00e800 	.word	0xfe00e800

08007de0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b08a      	sub	sp, #40	; 0x28
 8007de4:	af02      	add	r7, sp, #8
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	607a      	str	r2, [r7, #4]
 8007dea:	603b      	str	r3, [r7, #0]
 8007dec:	460b      	mov	r3, r1
 8007dee:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8007df0:	2300      	movs	r3, #0
 8007df2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b20      	cmp	r3, #32
 8007dfe:	f040 80ef 	bne.w	8007fe0 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e10:	d101      	bne.n	8007e16 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8007e12:	2302      	movs	r3, #2
 8007e14:	e0e5      	b.n	8007fe2 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d101      	bne.n	8007e24 <HAL_I2C_IsDeviceReady+0x44>
 8007e20:	2302      	movs	r3, #2
 8007e22:	e0de      	b.n	8007fe2 <HAL_I2C_IsDeviceReady+0x202>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2224      	movs	r2, #36	; 0x24
 8007e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2200      	movs	r2, #0
 8007e38:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d105      	bne.n	8007e4e <HAL_I2C_IsDeviceReady+0x6e>
 8007e42:	897b      	ldrh	r3, [r7, #10]
 8007e44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007e48:	4b68      	ldr	r3, [pc, #416]	; (8007fec <HAL_I2C_IsDeviceReady+0x20c>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	e004      	b.n	8007e58 <HAL_I2C_IsDeviceReady+0x78>
 8007e4e:	897b      	ldrh	r3, [r7, #10]
 8007e50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e54:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	6812      	ldr	r2, [r2, #0]
 8007e5c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8007e5e:	f7fd fde5 	bl	8005a2c <HAL_GetTick>
 8007e62:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	699b      	ldr	r3, [r3, #24]
 8007e6a:	f003 0320 	and.w	r3, r3, #32
 8007e6e:	2b20      	cmp	r3, #32
 8007e70:	bf0c      	ite	eq
 8007e72:	2301      	moveq	r3, #1
 8007e74:	2300      	movne	r3, #0
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	f003 0310 	and.w	r3, r3, #16
 8007e84:	2b10      	cmp	r3, #16
 8007e86:	bf0c      	ite	eq
 8007e88:	2301      	moveq	r3, #1
 8007e8a:	2300      	movne	r3, #0
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007e90:	e034      	b.n	8007efc <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e98:	d01a      	beq.n	8007ed0 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007e9a:	f7fd fdc7 	bl	8005a2c <HAL_GetTick>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	683a      	ldr	r2, [r7, #0]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d302      	bcc.n	8007eb0 <HAL_I2C_IsDeviceReady+0xd0>
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10f      	bne.n	8007ed0 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2220      	movs	r2, #32
 8007eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ebc:	f043 0220 	orr.w	r2, r3, #32
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e088      	b.n	8007fe2 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	f003 0320 	and.w	r3, r3, #32
 8007eda:	2b20      	cmp	r3, #32
 8007edc:	bf0c      	ite	eq
 8007ede:	2301      	moveq	r3, #1
 8007ee0:	2300      	movne	r3, #0
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	699b      	ldr	r3, [r3, #24]
 8007eec:	f003 0310 	and.w	r3, r3, #16
 8007ef0:	2b10      	cmp	r3, #16
 8007ef2:	bf0c      	ite	eq
 8007ef4:	2301      	moveq	r3, #1
 8007ef6:	2300      	movne	r3, #0
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007efc:	7ffb      	ldrb	r3, [r7, #31]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d102      	bne.n	8007f08 <HAL_I2C_IsDeviceReady+0x128>
 8007f02:	7fbb      	ldrb	r3, [r7, #30]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d0c4      	beq.n	8007e92 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	f003 0310 	and.w	r3, r3, #16
 8007f12:	2b10      	cmp	r3, #16
 8007f14:	d01a      	beq.n	8007f4c <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	2120      	movs	r1, #32
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f000 f931 	bl	8008188 <I2C_WaitOnFlagUntilTimeout>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e058      	b.n	8007fe2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2220      	movs	r2, #32
 8007f36:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2220      	movs	r2, #32
 8007f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	e04a      	b.n	8007fe2 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	2200      	movs	r2, #0
 8007f54:	2120      	movs	r1, #32
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f000 f916 	bl	8008188 <I2C_WaitOnFlagUntilTimeout>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e03d      	b.n	8007fe2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2210      	movs	r2, #16
 8007f6c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2220      	movs	r2, #32
 8007f74:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d118      	bne.n	8007fb0 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	685a      	ldr	r2, [r3, #4]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f8c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	9300      	str	r3, [sp, #0]
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	2200      	movs	r2, #0
 8007f96:	2120      	movs	r1, #32
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	f000 f8f5 	bl	8008188 <I2C_WaitOnFlagUntilTimeout>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d001      	beq.n	8007fa8 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e01c      	b.n	8007fe2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2220      	movs	r2, #32
 8007fae:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	f63f af3d 	bhi.w	8007e3a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2220      	movs	r2, #32
 8007fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fcc:	f043 0220 	orr.w	r2, r3, #32
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e000      	b.n	8007fe2 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8007fe0:	2302      	movs	r3, #2
  }
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3720      	adds	r7, #32
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	02002000 	.word	0x02002000

08007ff0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af02      	add	r7, sp, #8
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	4608      	mov	r0, r1
 8007ffa:	4611      	mov	r1, r2
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	4603      	mov	r3, r0
 8008000:	817b      	strh	r3, [r7, #10]
 8008002:	460b      	mov	r3, r1
 8008004:	813b      	strh	r3, [r7, #8]
 8008006:	4613      	mov	r3, r2
 8008008:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800800a:	88fb      	ldrh	r3, [r7, #6]
 800800c:	b2da      	uxtb	r2, r3
 800800e:	8979      	ldrh	r1, [r7, #10]
 8008010:	4b20      	ldr	r3, [pc, #128]	; (8008094 <I2C_RequestMemoryWrite+0xa4>)
 8008012:	9300      	str	r3, [sp, #0]
 8008014:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008018:	68f8      	ldr	r0, [r7, #12]
 800801a:	f000 fad7 	bl	80085cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800801e:	69fa      	ldr	r2, [r7, #28]
 8008020:	69b9      	ldr	r1, [r7, #24]
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f000 f8f0 	bl	8008208 <I2C_WaitOnTXISFlagUntilTimeout>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d001      	beq.n	8008032 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	e02c      	b.n	800808c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008032:	88fb      	ldrh	r3, [r7, #6]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d105      	bne.n	8008044 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008038:	893b      	ldrh	r3, [r7, #8]
 800803a:	b2da      	uxtb	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	629a      	str	r2, [r3, #40]	; 0x28
 8008042:	e015      	b.n	8008070 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008044:	893b      	ldrh	r3, [r7, #8]
 8008046:	0a1b      	lsrs	r3, r3, #8
 8008048:	b29b      	uxth	r3, r3
 800804a:	b2da      	uxtb	r2, r3
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008052:	69fa      	ldr	r2, [r7, #28]
 8008054:	69b9      	ldr	r1, [r7, #24]
 8008056:	68f8      	ldr	r0, [r7, #12]
 8008058:	f000 f8d6 	bl	8008208 <I2C_WaitOnTXISFlagUntilTimeout>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e012      	b.n	800808c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008066:	893b      	ldrh	r3, [r7, #8]
 8008068:	b2da      	uxtb	r2, r3
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	2200      	movs	r2, #0
 8008078:	2180      	movs	r1, #128	; 0x80
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f000 f884 	bl	8008188 <I2C_WaitOnFlagUntilTimeout>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d001      	beq.n	800808a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e000      	b.n	800808c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	80002000 	.word	0x80002000

08008098 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b086      	sub	sp, #24
 800809c:	af02      	add	r7, sp, #8
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	4608      	mov	r0, r1
 80080a2:	4611      	mov	r1, r2
 80080a4:	461a      	mov	r2, r3
 80080a6:	4603      	mov	r3, r0
 80080a8:	817b      	strh	r3, [r7, #10]
 80080aa:	460b      	mov	r3, r1
 80080ac:	813b      	strh	r3, [r7, #8]
 80080ae:	4613      	mov	r3, r2
 80080b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80080b2:	88fb      	ldrh	r3, [r7, #6]
 80080b4:	b2da      	uxtb	r2, r3
 80080b6:	8979      	ldrh	r1, [r7, #10]
 80080b8:	4b20      	ldr	r3, [pc, #128]	; (800813c <I2C_RequestMemoryRead+0xa4>)
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	2300      	movs	r3, #0
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f000 fa84 	bl	80085cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080c4:	69fa      	ldr	r2, [r7, #28]
 80080c6:	69b9      	ldr	r1, [r7, #24]
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f000 f89d 	bl	8008208 <I2C_WaitOnTXISFlagUntilTimeout>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d001      	beq.n	80080d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	e02c      	b.n	8008132 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80080d8:	88fb      	ldrh	r3, [r7, #6]
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d105      	bne.n	80080ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80080de:	893b      	ldrh	r3, [r7, #8]
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	629a      	str	r2, [r3, #40]	; 0x28
 80080e8:	e015      	b.n	8008116 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80080ea:	893b      	ldrh	r3, [r7, #8]
 80080ec:	0a1b      	lsrs	r3, r3, #8
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080f8:	69fa      	ldr	r2, [r7, #28]
 80080fa:	69b9      	ldr	r1, [r7, #24]
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f000 f883 	bl	8008208 <I2C_WaitOnTXISFlagUntilTimeout>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d001      	beq.n	800810c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e012      	b.n	8008132 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800810c:	893b      	ldrh	r3, [r7, #8]
 800810e:	b2da      	uxtb	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	9300      	str	r3, [sp, #0]
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	2200      	movs	r2, #0
 800811e:	2140      	movs	r1, #64	; 0x40
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f000 f831 	bl	8008188 <I2C_WaitOnFlagUntilTimeout>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d001      	beq.n	8008130 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e000      	b.n	8008132 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	80002000 	.word	0x80002000

08008140 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	699b      	ldr	r3, [r3, #24]
 800814e:	f003 0302 	and.w	r3, r3, #2
 8008152:	2b02      	cmp	r3, #2
 8008154:	d103      	bne.n	800815e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2200      	movs	r2, #0
 800815c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	699b      	ldr	r3, [r3, #24]
 8008164:	f003 0301 	and.w	r3, r3, #1
 8008168:	2b01      	cmp	r3, #1
 800816a:	d007      	beq.n	800817c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	699a      	ldr	r2, [r3, #24]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f042 0201 	orr.w	r2, r2, #1
 800817a:	619a      	str	r2, [r3, #24]
  }
}
 800817c:	bf00      	nop
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	603b      	str	r3, [r7, #0]
 8008194:	4613      	mov	r3, r2
 8008196:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008198:	e022      	b.n	80081e0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a0:	d01e      	beq.n	80081e0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081a2:	f7fd fc43 	bl	8005a2c <HAL_GetTick>
 80081a6:	4602      	mov	r2, r0
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	683a      	ldr	r2, [r7, #0]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d302      	bcc.n	80081b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d113      	bne.n	80081e0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081bc:	f043 0220 	orr.w	r2, r3, #32
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2220      	movs	r2, #32
 80081c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	e00f      	b.n	8008200 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	699a      	ldr	r2, [r3, #24]
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	4013      	ands	r3, r2
 80081ea:	68ba      	ldr	r2, [r7, #8]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	bf0c      	ite	eq
 80081f0:	2301      	moveq	r3, #1
 80081f2:	2300      	movne	r3, #0
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	461a      	mov	r2, r3
 80081f8:	79fb      	ldrb	r3, [r7, #7]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d0cd      	beq.n	800819a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008214:	e02c      	b.n	8008270 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	68b9      	ldr	r1, [r7, #8]
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f000 f8ea 	bl	80083f4 <I2C_IsErrorOccurred>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d001      	beq.n	800822a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	e02a      	b.n	8008280 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008230:	d01e      	beq.n	8008270 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008232:	f7fd fbfb 	bl	8005a2c <HAL_GetTick>
 8008236:	4602      	mov	r2, r0
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	429a      	cmp	r2, r3
 8008240:	d302      	bcc.n	8008248 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d113      	bne.n	8008270 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800824c:	f043 0220 	orr.w	r2, r3, #32
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2220      	movs	r2, #32
 8008258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2200      	movs	r2, #0
 8008260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	e007      	b.n	8008280 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	f003 0302 	and.w	r3, r3, #2
 800827a:	2b02      	cmp	r3, #2
 800827c:	d1cb      	bne.n	8008216 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008294:	e028      	b.n	80082e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	68b9      	ldr	r1, [r7, #8]
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f000 f8aa 	bl	80083f4 <I2C_IsErrorOccurred>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d001      	beq.n	80082aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e026      	b.n	80082f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082aa:	f7fd fbbf 	bl	8005a2c <HAL_GetTick>
 80082ae:	4602      	mov	r2, r0
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	1ad3      	subs	r3, r2, r3
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d302      	bcc.n	80082c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d113      	bne.n	80082e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082c4:	f043 0220 	orr.w	r2, r3, #32
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2220      	movs	r2, #32
 80082d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e007      	b.n	80082f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	699b      	ldr	r3, [r3, #24]
 80082ee:	f003 0320 	and.w	r3, r3, #32
 80082f2:	2b20      	cmp	r3, #32
 80082f4:	d1cf      	bne.n	8008296 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800830c:	e064      	b.n	80083d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	68b9      	ldr	r1, [r7, #8]
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f000 f86e 	bl	80083f4 <I2C_IsErrorOccurred>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d001      	beq.n	8008322 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e062      	b.n	80083e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	f003 0320 	and.w	r3, r3, #32
 800832c:	2b20      	cmp	r3, #32
 800832e:	d138      	bne.n	80083a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	699b      	ldr	r3, [r3, #24]
 8008336:	f003 0304 	and.w	r3, r3, #4
 800833a:	2b04      	cmp	r3, #4
 800833c:	d105      	bne.n	800834a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8008346:	2300      	movs	r3, #0
 8008348:	e04e      	b.n	80083e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	f003 0310 	and.w	r3, r3, #16
 8008354:	2b10      	cmp	r3, #16
 8008356:	d107      	bne.n	8008368 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2210      	movs	r2, #16
 800835e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2204      	movs	r2, #4
 8008364:	645a      	str	r2, [r3, #68]	; 0x44
 8008366:	e002      	b.n	800836e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2200      	movs	r2, #0
 800836c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2220      	movs	r2, #32
 8008374:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	6859      	ldr	r1, [r3, #4]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	4b1b      	ldr	r3, [pc, #108]	; (80083f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8008382:	400b      	ands	r3, r1
 8008384:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2220      	movs	r2, #32
 800838a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e022      	b.n	80083e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083a2:	f7fd fb43 	bl	8005a2c <HAL_GetTick>
 80083a6:	4602      	mov	r2, r0
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	1ad3      	subs	r3, r2, r3
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d302      	bcc.n	80083b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d10f      	bne.n	80083d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083bc:	f043 0220 	orr.w	r2, r3, #32
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2220      	movs	r2, #32
 80083c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2200      	movs	r2, #0
 80083d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	e007      	b.n	80083e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	699b      	ldr	r3, [r3, #24]
 80083de:	f003 0304 	and.w	r3, r3, #4
 80083e2:	2b04      	cmp	r3, #4
 80083e4:	d193      	bne.n	800830e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3710      	adds	r7, #16
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	fe00e800 	.word	0xfe00e800

080083f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b08a      	sub	sp, #40	; 0x28
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008400:	2300      	movs	r3, #0
 8008402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800840e:	2300      	movs	r3, #0
 8008410:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	f003 0310 	and.w	r3, r3, #16
 800841c:	2b00      	cmp	r3, #0
 800841e:	d075      	beq.n	800850c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2210      	movs	r2, #16
 8008426:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008428:	e056      	b.n	80084d8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008430:	d052      	beq.n	80084d8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008432:	f7fd fafb 	bl	8005a2c <HAL_GetTick>
 8008436:	4602      	mov	r2, r0
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	68ba      	ldr	r2, [r7, #8]
 800843e:	429a      	cmp	r2, r3
 8008440:	d302      	bcc.n	8008448 <I2C_IsErrorOccurred+0x54>
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d147      	bne.n	80084d8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008452:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800845a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800846a:	d12e      	bne.n	80084ca <I2C_IsErrorOccurred+0xd6>
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008472:	d02a      	beq.n	80084ca <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8008474:	7cfb      	ldrb	r3, [r7, #19]
 8008476:	2b20      	cmp	r3, #32
 8008478:	d027      	beq.n	80084ca <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	685a      	ldr	r2, [r3, #4]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008488:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800848a:	f7fd facf 	bl	8005a2c <HAL_GetTick>
 800848e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008490:	e01b      	b.n	80084ca <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008492:	f7fd facb 	bl	8005a2c <HAL_GetTick>
 8008496:	4602      	mov	r2, r0
 8008498:	69fb      	ldr	r3, [r7, #28]
 800849a:	1ad3      	subs	r3, r2, r3
 800849c:	2b19      	cmp	r3, #25
 800849e:	d914      	bls.n	80084ca <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a4:	f043 0220 	orr.w	r2, r3, #32
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2220      	movs	r2, #32
 80084b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	699b      	ldr	r3, [r3, #24]
 80084d0:	f003 0320 	and.w	r3, r3, #32
 80084d4:	2b20      	cmp	r3, #32
 80084d6:	d1dc      	bne.n	8008492 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	f003 0320 	and.w	r3, r3, #32
 80084e2:	2b20      	cmp	r3, #32
 80084e4:	d003      	beq.n	80084ee <I2C_IsErrorOccurred+0xfa>
 80084e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d09d      	beq.n	800842a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80084ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d103      	bne.n	80084fe <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2220      	movs	r2, #32
 80084fc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80084fe:	6a3b      	ldr	r3, [r7, #32]
 8008500:	f043 0304 	orr.w	r3, r3, #4
 8008504:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00b      	beq.n	8008536 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800851e:	6a3b      	ldr	r3, [r7, #32]
 8008520:	f043 0301 	orr.w	r3, r3, #1
 8008524:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800852e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00b      	beq.n	8008558 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008540:	6a3b      	ldr	r3, [r7, #32]
 8008542:	f043 0308 	orr.w	r3, r3, #8
 8008546:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008550:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00b      	beq.n	800857a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008562:	6a3b      	ldr	r3, [r7, #32]
 8008564:	f043 0302 	orr.w	r3, r3, #2
 8008568:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008572:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800857a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800857e:	2b00      	cmp	r3, #0
 8008580:	d01c      	beq.n	80085bc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f7ff fddc 	bl	8008140 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6859      	ldr	r1, [r3, #4]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	4b0d      	ldr	r3, [pc, #52]	; (80085c8 <I2C_IsErrorOccurred+0x1d4>)
 8008594:	400b      	ands	r3, r1
 8008596:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800859c:	6a3b      	ldr	r3, [r7, #32]
 800859e:	431a      	orrs	r2, r3
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2220      	movs	r2, #32
 80085a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80085bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3728      	adds	r7, #40	; 0x28
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	fe00e800 	.word	0xfe00e800

080085cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b087      	sub	sp, #28
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	607b      	str	r3, [r7, #4]
 80085d6:	460b      	mov	r3, r1
 80085d8:	817b      	strh	r3, [r7, #10]
 80085da:	4613      	mov	r3, r2
 80085dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80085de:	897b      	ldrh	r3, [r7, #10]
 80085e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80085e4:	7a7b      	ldrb	r3, [r7, #9]
 80085e6:	041b      	lsls	r3, r3, #16
 80085e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80085ec:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80085f2:	6a3b      	ldr	r3, [r7, #32]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085fa:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	685a      	ldr	r2, [r3, #4]
 8008602:	6a3b      	ldr	r3, [r7, #32]
 8008604:	0d5b      	lsrs	r3, r3, #21
 8008606:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800860a:	4b08      	ldr	r3, [pc, #32]	; (800862c <I2C_TransferConfig+0x60>)
 800860c:	430b      	orrs	r3, r1
 800860e:	43db      	mvns	r3, r3
 8008610:	ea02 0103 	and.w	r1, r2, r3
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	697a      	ldr	r2, [r7, #20]
 800861a:	430a      	orrs	r2, r1
 800861c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800861e:	bf00      	nop
 8008620:	371c      	adds	r7, #28
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	03ff63ff 	.word	0x03ff63ff

08008630 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008640:	b2db      	uxtb	r3, r3
 8008642:	2b20      	cmp	r3, #32
 8008644:	d138      	bne.n	80086b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800864c:	2b01      	cmp	r3, #1
 800864e:	d101      	bne.n	8008654 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008650:	2302      	movs	r3, #2
 8008652:	e032      	b.n	80086ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2224      	movs	r2, #36	; 0x24
 8008660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f022 0201 	bic.w	r2, r2, #1
 8008672:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008682:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	6819      	ldr	r1, [r3, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	683a      	ldr	r2, [r7, #0]
 8008690:	430a      	orrs	r2, r1
 8008692:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f042 0201 	orr.w	r2, r2, #1
 80086a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2220      	movs	r2, #32
 80086a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80086b4:	2300      	movs	r3, #0
 80086b6:	e000      	b.n	80086ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80086b8:	2302      	movs	r3, #2
  }
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80086c6:	b480      	push	{r7}
 80086c8:	b085      	sub	sp, #20
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	2b20      	cmp	r3, #32
 80086da:	d139      	bne.n	8008750 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d101      	bne.n	80086ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80086e6:	2302      	movs	r3, #2
 80086e8:	e033      	b.n	8008752 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2201      	movs	r2, #1
 80086ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2224      	movs	r2, #36	; 0x24
 80086f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f022 0201 	bic.w	r2, r2, #1
 8008708:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008718:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	021b      	lsls	r3, r3, #8
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	4313      	orrs	r3, r2
 8008722:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f042 0201 	orr.w	r2, r2, #1
 800873a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2220      	movs	r2, #32
 8008740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800874c:	2300      	movs	r3, #0
 800874e:	e000      	b.n	8008752 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008750:	2302      	movs	r3, #2
  }
}
 8008752:	4618      	mov	r0, r3
 8008754:	3714      	adds	r7, #20
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
	...

08008760 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008760:	b480      	push	{r7}
 8008762:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008764:	4b05      	ldr	r3, [pc, #20]	; (800877c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a04      	ldr	r2, [pc, #16]	; (800877c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800876a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800876e:	6013      	str	r3, [r2, #0]
}
 8008770:	bf00      	nop
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	40007000 	.word	0x40007000

08008780 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008788:	2300      	movs	r3, #0
 800878a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e29b      	b.n	8008cce <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f000 8087 	beq.w	80088b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80087a4:	4b96      	ldr	r3, [pc, #600]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	f003 030c 	and.w	r3, r3, #12
 80087ac:	2b04      	cmp	r3, #4
 80087ae:	d00c      	beq.n	80087ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087b0:	4b93      	ldr	r3, [pc, #588]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	f003 030c 	and.w	r3, r3, #12
 80087b8:	2b08      	cmp	r3, #8
 80087ba:	d112      	bne.n	80087e2 <HAL_RCC_OscConfig+0x62>
 80087bc:	4b90      	ldr	r3, [pc, #576]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087c8:	d10b      	bne.n	80087e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087ca:	4b8d      	ldr	r3, [pc, #564]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d06c      	beq.n	80088b0 <HAL_RCC_OscConfig+0x130>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d168      	bne.n	80088b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e275      	b.n	8008cce <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087ea:	d106      	bne.n	80087fa <HAL_RCC_OscConfig+0x7a>
 80087ec:	4b84      	ldr	r3, [pc, #528]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a83      	ldr	r2, [pc, #524]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 80087f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087f6:	6013      	str	r3, [r2, #0]
 80087f8:	e02e      	b.n	8008858 <HAL_RCC_OscConfig+0xd8>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d10c      	bne.n	800881c <HAL_RCC_OscConfig+0x9c>
 8008802:	4b7f      	ldr	r3, [pc, #508]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a7e      	ldr	r2, [pc, #504]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 8008808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800880c:	6013      	str	r3, [r2, #0]
 800880e:	4b7c      	ldr	r3, [pc, #496]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a7b      	ldr	r2, [pc, #492]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 8008814:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008818:	6013      	str	r3, [r2, #0]
 800881a:	e01d      	b.n	8008858 <HAL_RCC_OscConfig+0xd8>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008824:	d10c      	bne.n	8008840 <HAL_RCC_OscConfig+0xc0>
 8008826:	4b76      	ldr	r3, [pc, #472]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a75      	ldr	r2, [pc, #468]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 800882c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008830:	6013      	str	r3, [r2, #0]
 8008832:	4b73      	ldr	r3, [pc, #460]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a72      	ldr	r2, [pc, #456]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 8008838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800883c:	6013      	str	r3, [r2, #0]
 800883e:	e00b      	b.n	8008858 <HAL_RCC_OscConfig+0xd8>
 8008840:	4b6f      	ldr	r3, [pc, #444]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a6e      	ldr	r2, [pc, #440]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 8008846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800884a:	6013      	str	r3, [r2, #0]
 800884c:	4b6c      	ldr	r3, [pc, #432]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a6b      	ldr	r2, [pc, #428]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 8008852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d013      	beq.n	8008888 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008860:	f7fd f8e4 	bl	8005a2c <HAL_GetTick>
 8008864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008866:	e008      	b.n	800887a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008868:	f7fd f8e0 	bl	8005a2c <HAL_GetTick>
 800886c:	4602      	mov	r2, r0
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	2b64      	cmp	r3, #100	; 0x64
 8008874:	d901      	bls.n	800887a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008876:	2303      	movs	r3, #3
 8008878:	e229      	b.n	8008cce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800887a:	4b61      	ldr	r3, [pc, #388]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008882:	2b00      	cmp	r3, #0
 8008884:	d0f0      	beq.n	8008868 <HAL_RCC_OscConfig+0xe8>
 8008886:	e014      	b.n	80088b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008888:	f7fd f8d0 	bl	8005a2c <HAL_GetTick>
 800888c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800888e:	e008      	b.n	80088a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008890:	f7fd f8cc 	bl	8005a2c <HAL_GetTick>
 8008894:	4602      	mov	r2, r0
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	2b64      	cmp	r3, #100	; 0x64
 800889c:	d901      	bls.n	80088a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800889e:	2303      	movs	r3, #3
 80088a0:	e215      	b.n	8008cce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088a2:	4b57      	ldr	r3, [pc, #348]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d1f0      	bne.n	8008890 <HAL_RCC_OscConfig+0x110>
 80088ae:	e000      	b.n	80088b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f003 0302 	and.w	r3, r3, #2
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d069      	beq.n	8008992 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80088be:	4b50      	ldr	r3, [pc, #320]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	f003 030c 	and.w	r3, r3, #12
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d00b      	beq.n	80088e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088ca:	4b4d      	ldr	r3, [pc, #308]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	f003 030c 	and.w	r3, r3, #12
 80088d2:	2b08      	cmp	r3, #8
 80088d4:	d11c      	bne.n	8008910 <HAL_RCC_OscConfig+0x190>
 80088d6:	4b4a      	ldr	r3, [pc, #296]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d116      	bne.n	8008910 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088e2:	4b47      	ldr	r3, [pc, #284]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 0302 	and.w	r3, r3, #2
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d005      	beq.n	80088fa <HAL_RCC_OscConfig+0x17a>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d001      	beq.n	80088fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e1e9      	b.n	8008cce <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088fa:	4b41      	ldr	r3, [pc, #260]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	00db      	lsls	r3, r3, #3
 8008908:	493d      	ldr	r1, [pc, #244]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 800890a:	4313      	orrs	r3, r2
 800890c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800890e:	e040      	b.n	8008992 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d023      	beq.n	8008960 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008918:	4b39      	ldr	r3, [pc, #228]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a38      	ldr	r2, [pc, #224]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 800891e:	f043 0301 	orr.w	r3, r3, #1
 8008922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008924:	f7fd f882 	bl	8005a2c <HAL_GetTick>
 8008928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800892a:	e008      	b.n	800893e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800892c:	f7fd f87e 	bl	8005a2c <HAL_GetTick>
 8008930:	4602      	mov	r2, r0
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	2b02      	cmp	r3, #2
 8008938:	d901      	bls.n	800893e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800893a:	2303      	movs	r3, #3
 800893c:	e1c7      	b.n	8008cce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800893e:	4b30      	ldr	r3, [pc, #192]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f003 0302 	and.w	r3, r3, #2
 8008946:	2b00      	cmp	r3, #0
 8008948:	d0f0      	beq.n	800892c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800894a:	4b2d      	ldr	r3, [pc, #180]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	691b      	ldr	r3, [r3, #16]
 8008956:	00db      	lsls	r3, r3, #3
 8008958:	4929      	ldr	r1, [pc, #164]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 800895a:	4313      	orrs	r3, r2
 800895c:	600b      	str	r3, [r1, #0]
 800895e:	e018      	b.n	8008992 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008960:	4b27      	ldr	r3, [pc, #156]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a26      	ldr	r2, [pc, #152]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 8008966:	f023 0301 	bic.w	r3, r3, #1
 800896a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800896c:	f7fd f85e 	bl	8005a2c <HAL_GetTick>
 8008970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008972:	e008      	b.n	8008986 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008974:	f7fd f85a 	bl	8005a2c <HAL_GetTick>
 8008978:	4602      	mov	r2, r0
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	2b02      	cmp	r3, #2
 8008980:	d901      	bls.n	8008986 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008982:	2303      	movs	r3, #3
 8008984:	e1a3      	b.n	8008cce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008986:	4b1e      	ldr	r3, [pc, #120]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 0302 	and.w	r3, r3, #2
 800898e:	2b00      	cmp	r3, #0
 8008990:	d1f0      	bne.n	8008974 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f003 0308 	and.w	r3, r3, #8
 800899a:	2b00      	cmp	r3, #0
 800899c:	d038      	beq.n	8008a10 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	695b      	ldr	r3, [r3, #20]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d019      	beq.n	80089da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80089a6:	4b16      	ldr	r3, [pc, #88]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 80089a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089aa:	4a15      	ldr	r2, [pc, #84]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 80089ac:	f043 0301 	orr.w	r3, r3, #1
 80089b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089b2:	f7fd f83b 	bl	8005a2c <HAL_GetTick>
 80089b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089b8:	e008      	b.n	80089cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089ba:	f7fd f837 	bl	8005a2c <HAL_GetTick>
 80089be:	4602      	mov	r2, r0
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d901      	bls.n	80089cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80089c8:	2303      	movs	r3, #3
 80089ca:	e180      	b.n	8008cce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089cc:	4b0c      	ldr	r3, [pc, #48]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 80089ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089d0:	f003 0302 	and.w	r3, r3, #2
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d0f0      	beq.n	80089ba <HAL_RCC_OscConfig+0x23a>
 80089d8:	e01a      	b.n	8008a10 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089da:	4b09      	ldr	r3, [pc, #36]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 80089dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089de:	4a08      	ldr	r2, [pc, #32]	; (8008a00 <HAL_RCC_OscConfig+0x280>)
 80089e0:	f023 0301 	bic.w	r3, r3, #1
 80089e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089e6:	f7fd f821 	bl	8005a2c <HAL_GetTick>
 80089ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089ec:	e00a      	b.n	8008a04 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089ee:	f7fd f81d 	bl	8005a2c <HAL_GetTick>
 80089f2:	4602      	mov	r2, r0
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d903      	bls.n	8008a04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80089fc:	2303      	movs	r3, #3
 80089fe:	e166      	b.n	8008cce <HAL_RCC_OscConfig+0x54e>
 8008a00:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a04:	4b92      	ldr	r3, [pc, #584]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a08:	f003 0302 	and.w	r3, r3, #2
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d1ee      	bne.n	80089ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 0304 	and.w	r3, r3, #4
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f000 80a4 	beq.w	8008b66 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a1e:	4b8c      	ldr	r3, [pc, #560]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d10d      	bne.n	8008a46 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a2a:	4b89      	ldr	r3, [pc, #548]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2e:	4a88      	ldr	r2, [pc, #544]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a34:	6413      	str	r3, [r2, #64]	; 0x40
 8008a36:	4b86      	ldr	r3, [pc, #536]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a3e:	60bb      	str	r3, [r7, #8]
 8008a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a42:	2301      	movs	r3, #1
 8008a44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a46:	4b83      	ldr	r3, [pc, #524]	; (8008c54 <HAL_RCC_OscConfig+0x4d4>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d118      	bne.n	8008a84 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008a52:	4b80      	ldr	r3, [pc, #512]	; (8008c54 <HAL_RCC_OscConfig+0x4d4>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a7f      	ldr	r2, [pc, #508]	; (8008c54 <HAL_RCC_OscConfig+0x4d4>)
 8008a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a5e:	f7fc ffe5 	bl	8005a2c <HAL_GetTick>
 8008a62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a64:	e008      	b.n	8008a78 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a66:	f7fc ffe1 	bl	8005a2c <HAL_GetTick>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	1ad3      	subs	r3, r2, r3
 8008a70:	2b64      	cmp	r3, #100	; 0x64
 8008a72:	d901      	bls.n	8008a78 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008a74:	2303      	movs	r3, #3
 8008a76:	e12a      	b.n	8008cce <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a78:	4b76      	ldr	r3, [pc, #472]	; (8008c54 <HAL_RCC_OscConfig+0x4d4>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d0f0      	beq.n	8008a66 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d106      	bne.n	8008a9a <HAL_RCC_OscConfig+0x31a>
 8008a8c:	4b70      	ldr	r3, [pc, #448]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a90:	4a6f      	ldr	r2, [pc, #444]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008a92:	f043 0301 	orr.w	r3, r3, #1
 8008a96:	6713      	str	r3, [r2, #112]	; 0x70
 8008a98:	e02d      	b.n	8008af6 <HAL_RCC_OscConfig+0x376>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10c      	bne.n	8008abc <HAL_RCC_OscConfig+0x33c>
 8008aa2:	4b6b      	ldr	r3, [pc, #428]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aa6:	4a6a      	ldr	r2, [pc, #424]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008aa8:	f023 0301 	bic.w	r3, r3, #1
 8008aac:	6713      	str	r3, [r2, #112]	; 0x70
 8008aae:	4b68      	ldr	r3, [pc, #416]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ab2:	4a67      	ldr	r2, [pc, #412]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008ab4:	f023 0304 	bic.w	r3, r3, #4
 8008ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8008aba:	e01c      	b.n	8008af6 <HAL_RCC_OscConfig+0x376>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	2b05      	cmp	r3, #5
 8008ac2:	d10c      	bne.n	8008ade <HAL_RCC_OscConfig+0x35e>
 8008ac4:	4b62      	ldr	r3, [pc, #392]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ac8:	4a61      	ldr	r2, [pc, #388]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008aca:	f043 0304 	orr.w	r3, r3, #4
 8008ace:	6713      	str	r3, [r2, #112]	; 0x70
 8008ad0:	4b5f      	ldr	r3, [pc, #380]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ad4:	4a5e      	ldr	r2, [pc, #376]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008ad6:	f043 0301 	orr.w	r3, r3, #1
 8008ada:	6713      	str	r3, [r2, #112]	; 0x70
 8008adc:	e00b      	b.n	8008af6 <HAL_RCC_OscConfig+0x376>
 8008ade:	4b5c      	ldr	r3, [pc, #368]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ae2:	4a5b      	ldr	r2, [pc, #364]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008ae4:	f023 0301 	bic.w	r3, r3, #1
 8008ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8008aea:	4b59      	ldr	r3, [pc, #356]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aee:	4a58      	ldr	r2, [pc, #352]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008af0:	f023 0304 	bic.w	r3, r3, #4
 8008af4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d015      	beq.n	8008b2a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008afe:	f7fc ff95 	bl	8005a2c <HAL_GetTick>
 8008b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b04:	e00a      	b.n	8008b1c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b06:	f7fc ff91 	bl	8005a2c <HAL_GetTick>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	1ad3      	subs	r3, r2, r3
 8008b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d901      	bls.n	8008b1c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008b18:	2303      	movs	r3, #3
 8008b1a:	e0d8      	b.n	8008cce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b1c:	4b4c      	ldr	r3, [pc, #304]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b20:	f003 0302 	and.w	r3, r3, #2
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d0ee      	beq.n	8008b06 <HAL_RCC_OscConfig+0x386>
 8008b28:	e014      	b.n	8008b54 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b2a:	f7fc ff7f 	bl	8005a2c <HAL_GetTick>
 8008b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b30:	e00a      	b.n	8008b48 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b32:	f7fc ff7b 	bl	8005a2c <HAL_GetTick>
 8008b36:	4602      	mov	r2, r0
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	1ad3      	subs	r3, r2, r3
 8008b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d901      	bls.n	8008b48 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e0c2      	b.n	8008cce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b48:	4b41      	ldr	r3, [pc, #260]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b4c:	f003 0302 	and.w	r3, r3, #2
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1ee      	bne.n	8008b32 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008b54:	7dfb      	ldrb	r3, [r7, #23]
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d105      	bne.n	8008b66 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b5a:	4b3d      	ldr	r3, [pc, #244]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5e:	4a3c      	ldr	r2, [pc, #240]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	699b      	ldr	r3, [r3, #24]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f000 80ae 	beq.w	8008ccc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b70:	4b37      	ldr	r3, [pc, #220]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	f003 030c 	and.w	r3, r3, #12
 8008b78:	2b08      	cmp	r3, #8
 8008b7a:	d06d      	beq.n	8008c58 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	699b      	ldr	r3, [r3, #24]
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d14b      	bne.n	8008c1c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b84:	4b32      	ldr	r3, [pc, #200]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a31      	ldr	r2, [pc, #196]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b90:	f7fc ff4c 	bl	8005a2c <HAL_GetTick>
 8008b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b96:	e008      	b.n	8008baa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b98:	f7fc ff48 	bl	8005a2c <HAL_GetTick>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	1ad3      	subs	r3, r2, r3
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d901      	bls.n	8008baa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	e091      	b.n	8008cce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008baa:	4b29      	ldr	r3, [pc, #164]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1f0      	bne.n	8008b98 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	69da      	ldr	r2, [r3, #28]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
 8008bbe:	431a      	orrs	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc4:	019b      	lsls	r3, r3, #6
 8008bc6:	431a      	orrs	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bcc:	085b      	lsrs	r3, r3, #1
 8008bce:	3b01      	subs	r3, #1
 8008bd0:	041b      	lsls	r3, r3, #16
 8008bd2:	431a      	orrs	r2, r3
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd8:	061b      	lsls	r3, r3, #24
 8008bda:	431a      	orrs	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be0:	071b      	lsls	r3, r3, #28
 8008be2:	491b      	ldr	r1, [pc, #108]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008be4:	4313      	orrs	r3, r2
 8008be6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008be8:	4b19      	ldr	r3, [pc, #100]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a18      	ldr	r2, [pc, #96]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bf4:	f7fc ff1a 	bl	8005a2c <HAL_GetTick>
 8008bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bfa:	e008      	b.n	8008c0e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bfc:	f7fc ff16 	bl	8005a2c <HAL_GetTick>
 8008c00:	4602      	mov	r2, r0
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d901      	bls.n	8008c0e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	e05f      	b.n	8008cce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c0e:	4b10      	ldr	r3, [pc, #64]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d0f0      	beq.n	8008bfc <HAL_RCC_OscConfig+0x47c>
 8008c1a:	e057      	b.n	8008ccc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c1c:	4b0c      	ldr	r3, [pc, #48]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a0b      	ldr	r2, [pc, #44]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008c22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c28:	f7fc ff00 	bl	8005a2c <HAL_GetTick>
 8008c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c2e:	e008      	b.n	8008c42 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c30:	f7fc fefc 	bl	8005a2c <HAL_GetTick>
 8008c34:	4602      	mov	r2, r0
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d901      	bls.n	8008c42 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8008c3e:	2303      	movs	r3, #3
 8008c40:	e045      	b.n	8008cce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c42:	4b03      	ldr	r3, [pc, #12]	; (8008c50 <HAL_RCC_OscConfig+0x4d0>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1f0      	bne.n	8008c30 <HAL_RCC_OscConfig+0x4b0>
 8008c4e:	e03d      	b.n	8008ccc <HAL_RCC_OscConfig+0x54c>
 8008c50:	40023800 	.word	0x40023800
 8008c54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008c58:	4b1f      	ldr	r3, [pc, #124]	; (8008cd8 <HAL_RCC_OscConfig+0x558>)
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	699b      	ldr	r3, [r3, #24]
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d030      	beq.n	8008cc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d129      	bne.n	8008cc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d122      	bne.n	8008cc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008c88:	4013      	ands	r3, r2
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008c8e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d119      	bne.n	8008cc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c9e:	085b      	lsrs	r3, r3, #1
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d10f      	bne.n	8008cc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d107      	bne.n	8008cc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d001      	beq.n	8008ccc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e000      	b.n	8008cce <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3718      	adds	r7, #24
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	40023800 	.word	0x40023800

08008cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d101      	bne.n	8008cf4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e0d0      	b.n	8008e96 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008cf4:	4b6a      	ldr	r3, [pc, #424]	; (8008ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f003 030f 	and.w	r3, r3, #15
 8008cfc:	683a      	ldr	r2, [r7, #0]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d910      	bls.n	8008d24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d02:	4b67      	ldr	r3, [pc, #412]	; (8008ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f023 020f 	bic.w	r2, r3, #15
 8008d0a:	4965      	ldr	r1, [pc, #404]	; (8008ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d12:	4b63      	ldr	r3, [pc, #396]	; (8008ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 030f 	and.w	r3, r3, #15
 8008d1a:	683a      	ldr	r2, [r7, #0]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d001      	beq.n	8008d24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	e0b8      	b.n	8008e96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f003 0302 	and.w	r3, r3, #2
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d020      	beq.n	8008d72 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 0304 	and.w	r3, r3, #4
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d005      	beq.n	8008d48 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008d3c:	4b59      	ldr	r3, [pc, #356]	; (8008ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	4a58      	ldr	r2, [pc, #352]	; (8008ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8008d42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008d46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f003 0308 	and.w	r3, r3, #8
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d005      	beq.n	8008d60 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d54:	4b53      	ldr	r3, [pc, #332]	; (8008ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	4a52      	ldr	r2, [pc, #328]	; (8008ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8008d5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008d5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d60:	4b50      	ldr	r3, [pc, #320]	; (8008ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	494d      	ldr	r1, [pc, #308]	; (8008ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f003 0301 	and.w	r3, r3, #1
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d040      	beq.n	8008e00 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d107      	bne.n	8008d96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d86:	4b47      	ldr	r3, [pc, #284]	; (8008ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d115      	bne.n	8008dbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	e07f      	b.n	8008e96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	d107      	bne.n	8008dae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d9e:	4b41      	ldr	r3, [pc, #260]	; (8008ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d109      	bne.n	8008dbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e073      	b.n	8008e96 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008dae:	4b3d      	ldr	r3, [pc, #244]	; (8008ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f003 0302 	and.w	r3, r3, #2
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d101      	bne.n	8008dbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e06b      	b.n	8008e96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008dbe:	4b39      	ldr	r3, [pc, #228]	; (8008ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	f023 0203 	bic.w	r2, r3, #3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	4936      	ldr	r1, [pc, #216]	; (8008ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dd0:	f7fc fe2c 	bl	8005a2c <HAL_GetTick>
 8008dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dd6:	e00a      	b.n	8008dee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008dd8:	f7fc fe28 	bl	8005a2c <HAL_GetTick>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d901      	bls.n	8008dee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008dea:	2303      	movs	r3, #3
 8008dec:	e053      	b.n	8008e96 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dee:	4b2d      	ldr	r3, [pc, #180]	; (8008ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	f003 020c 	and.w	r2, r3, #12
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d1eb      	bne.n	8008dd8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e00:	4b27      	ldr	r3, [pc, #156]	; (8008ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 030f 	and.w	r3, r3, #15
 8008e08:	683a      	ldr	r2, [r7, #0]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d210      	bcs.n	8008e30 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e0e:	4b24      	ldr	r3, [pc, #144]	; (8008ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f023 020f 	bic.w	r2, r3, #15
 8008e16:	4922      	ldr	r1, [pc, #136]	; (8008ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e1e:	4b20      	ldr	r3, [pc, #128]	; (8008ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 030f 	and.w	r3, r3, #15
 8008e26:	683a      	ldr	r2, [r7, #0]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d001      	beq.n	8008e30 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e032      	b.n	8008e96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 0304 	and.w	r3, r3, #4
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d008      	beq.n	8008e4e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e3c:	4b19      	ldr	r3, [pc, #100]	; (8008ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	4916      	ldr	r1, [pc, #88]	; (8008ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0308 	and.w	r3, r3, #8
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d009      	beq.n	8008e6e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008e5a:	4b12      	ldr	r3, [pc, #72]	; (8008ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	00db      	lsls	r3, r3, #3
 8008e68:	490e      	ldr	r1, [pc, #56]	; (8008ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008e6e:	f000 f821 	bl	8008eb4 <HAL_RCC_GetSysClockFreq>
 8008e72:	4602      	mov	r2, r0
 8008e74:	4b0b      	ldr	r3, [pc, #44]	; (8008ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	091b      	lsrs	r3, r3, #4
 8008e7a:	f003 030f 	and.w	r3, r3, #15
 8008e7e:	490a      	ldr	r1, [pc, #40]	; (8008ea8 <HAL_RCC_ClockConfig+0x1cc>)
 8008e80:	5ccb      	ldrb	r3, [r1, r3]
 8008e82:	fa22 f303 	lsr.w	r3, r2, r3
 8008e86:	4a09      	ldr	r2, [pc, #36]	; (8008eac <HAL_RCC_ClockConfig+0x1d0>)
 8008e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008e8a:	4b09      	ldr	r3, [pc, #36]	; (8008eb0 <HAL_RCC_ClockConfig+0x1d4>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7fc fd88 	bl	80059a4 <HAL_InitTick>

  return HAL_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	40023c00 	.word	0x40023c00
 8008ea4:	40023800 	.word	0x40023800
 8008ea8:	08016a84 	.word	0x08016a84
 8008eac:	20000000 	.word	0x20000000
 8008eb0:	20000004 	.word	0x20000004

08008eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008eb8:	b090      	sub	sp, #64	; 0x40
 8008eba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ecc:	4b59      	ldr	r3, [pc, #356]	; (8009034 <HAL_RCC_GetSysClockFreq+0x180>)
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	f003 030c 	and.w	r3, r3, #12
 8008ed4:	2b08      	cmp	r3, #8
 8008ed6:	d00d      	beq.n	8008ef4 <HAL_RCC_GetSysClockFreq+0x40>
 8008ed8:	2b08      	cmp	r3, #8
 8008eda:	f200 80a1 	bhi.w	8009020 <HAL_RCC_GetSysClockFreq+0x16c>
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d002      	beq.n	8008ee8 <HAL_RCC_GetSysClockFreq+0x34>
 8008ee2:	2b04      	cmp	r3, #4
 8008ee4:	d003      	beq.n	8008eee <HAL_RCC_GetSysClockFreq+0x3a>
 8008ee6:	e09b      	b.n	8009020 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ee8:	4b53      	ldr	r3, [pc, #332]	; (8009038 <HAL_RCC_GetSysClockFreq+0x184>)
 8008eea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008eec:	e09b      	b.n	8009026 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008eee:	4b53      	ldr	r3, [pc, #332]	; (800903c <HAL_RCC_GetSysClockFreq+0x188>)
 8008ef0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008ef2:	e098      	b.n	8009026 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ef4:	4b4f      	ldr	r3, [pc, #316]	; (8009034 <HAL_RCC_GetSysClockFreq+0x180>)
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008efc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008efe:	4b4d      	ldr	r3, [pc, #308]	; (8009034 <HAL_RCC_GetSysClockFreq+0x180>)
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d028      	beq.n	8008f5c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f0a:	4b4a      	ldr	r3, [pc, #296]	; (8009034 <HAL_RCC_GetSysClockFreq+0x180>)
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	099b      	lsrs	r3, r3, #6
 8008f10:	2200      	movs	r2, #0
 8008f12:	623b      	str	r3, [r7, #32]
 8008f14:	627a      	str	r2, [r7, #36]	; 0x24
 8008f16:	6a3b      	ldr	r3, [r7, #32]
 8008f18:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	4b47      	ldr	r3, [pc, #284]	; (800903c <HAL_RCC_GetSysClockFreq+0x188>)
 8008f20:	fb03 f201 	mul.w	r2, r3, r1
 8008f24:	2300      	movs	r3, #0
 8008f26:	fb00 f303 	mul.w	r3, r0, r3
 8008f2a:	4413      	add	r3, r2
 8008f2c:	4a43      	ldr	r2, [pc, #268]	; (800903c <HAL_RCC_GetSysClockFreq+0x188>)
 8008f2e:	fba0 1202 	umull	r1, r2, r0, r2
 8008f32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f34:	460a      	mov	r2, r1
 8008f36:	62ba      	str	r2, [r7, #40]	; 0x28
 8008f38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f3a:	4413      	add	r3, r2
 8008f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f40:	2200      	movs	r2, #0
 8008f42:	61bb      	str	r3, [r7, #24]
 8008f44:	61fa      	str	r2, [r7, #28]
 8008f46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008f4e:	f7f7 fb9b 	bl	8000688 <__aeabi_uldivmod>
 8008f52:	4602      	mov	r2, r0
 8008f54:	460b      	mov	r3, r1
 8008f56:	4613      	mov	r3, r2
 8008f58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f5a:	e053      	b.n	8009004 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f5c:	4b35      	ldr	r3, [pc, #212]	; (8009034 <HAL_RCC_GetSysClockFreq+0x180>)
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	099b      	lsrs	r3, r3, #6
 8008f62:	2200      	movs	r2, #0
 8008f64:	613b      	str	r3, [r7, #16]
 8008f66:	617a      	str	r2, [r7, #20]
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008f6e:	f04f 0b00 	mov.w	fp, #0
 8008f72:	4652      	mov	r2, sl
 8008f74:	465b      	mov	r3, fp
 8008f76:	f04f 0000 	mov.w	r0, #0
 8008f7a:	f04f 0100 	mov.w	r1, #0
 8008f7e:	0159      	lsls	r1, r3, #5
 8008f80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008f84:	0150      	lsls	r0, r2, #5
 8008f86:	4602      	mov	r2, r0
 8008f88:	460b      	mov	r3, r1
 8008f8a:	ebb2 080a 	subs.w	r8, r2, sl
 8008f8e:	eb63 090b 	sbc.w	r9, r3, fp
 8008f92:	f04f 0200 	mov.w	r2, #0
 8008f96:	f04f 0300 	mov.w	r3, #0
 8008f9a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008f9e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008fa2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008fa6:	ebb2 0408 	subs.w	r4, r2, r8
 8008faa:	eb63 0509 	sbc.w	r5, r3, r9
 8008fae:	f04f 0200 	mov.w	r2, #0
 8008fb2:	f04f 0300 	mov.w	r3, #0
 8008fb6:	00eb      	lsls	r3, r5, #3
 8008fb8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008fbc:	00e2      	lsls	r2, r4, #3
 8008fbe:	4614      	mov	r4, r2
 8008fc0:	461d      	mov	r5, r3
 8008fc2:	eb14 030a 	adds.w	r3, r4, sl
 8008fc6:	603b      	str	r3, [r7, #0]
 8008fc8:	eb45 030b 	adc.w	r3, r5, fp
 8008fcc:	607b      	str	r3, [r7, #4]
 8008fce:	f04f 0200 	mov.w	r2, #0
 8008fd2:	f04f 0300 	mov.w	r3, #0
 8008fd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008fda:	4629      	mov	r1, r5
 8008fdc:	028b      	lsls	r3, r1, #10
 8008fde:	4621      	mov	r1, r4
 8008fe0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008fe4:	4621      	mov	r1, r4
 8008fe6:	028a      	lsls	r2, r1, #10
 8008fe8:	4610      	mov	r0, r2
 8008fea:	4619      	mov	r1, r3
 8008fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fee:	2200      	movs	r2, #0
 8008ff0:	60bb      	str	r3, [r7, #8]
 8008ff2:	60fa      	str	r2, [r7, #12]
 8008ff4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ff8:	f7f7 fb46 	bl	8000688 <__aeabi_uldivmod>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	460b      	mov	r3, r1
 8009000:	4613      	mov	r3, r2
 8009002:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009004:	4b0b      	ldr	r3, [pc, #44]	; (8009034 <HAL_RCC_GetSysClockFreq+0x180>)
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	0c1b      	lsrs	r3, r3, #16
 800900a:	f003 0303 	and.w	r3, r3, #3
 800900e:	3301      	adds	r3, #1
 8009010:	005b      	lsls	r3, r3, #1
 8009012:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8009014:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009018:	fbb2 f3f3 	udiv	r3, r2, r3
 800901c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800901e:	e002      	b.n	8009026 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009020:	4b05      	ldr	r3, [pc, #20]	; (8009038 <HAL_RCC_GetSysClockFreq+0x184>)
 8009022:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009024:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009028:	4618      	mov	r0, r3
 800902a:	3740      	adds	r7, #64	; 0x40
 800902c:	46bd      	mov	sp, r7
 800902e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009032:	bf00      	nop
 8009034:	40023800 	.word	0x40023800
 8009038:	00f42400 	.word	0x00f42400
 800903c:	017d7840 	.word	0x017d7840

08009040 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009040:	b480      	push	{r7}
 8009042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009044:	4b03      	ldr	r3, [pc, #12]	; (8009054 <HAL_RCC_GetHCLKFreq+0x14>)
 8009046:	681b      	ldr	r3, [r3, #0]
}
 8009048:	4618      	mov	r0, r3
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
 8009054:	20000000 	.word	0x20000000

08009058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800905c:	f7ff fff0 	bl	8009040 <HAL_RCC_GetHCLKFreq>
 8009060:	4602      	mov	r2, r0
 8009062:	4b05      	ldr	r3, [pc, #20]	; (8009078 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	0a9b      	lsrs	r3, r3, #10
 8009068:	f003 0307 	and.w	r3, r3, #7
 800906c:	4903      	ldr	r1, [pc, #12]	; (800907c <HAL_RCC_GetPCLK1Freq+0x24>)
 800906e:	5ccb      	ldrb	r3, [r1, r3]
 8009070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009074:	4618      	mov	r0, r3
 8009076:	bd80      	pop	{r7, pc}
 8009078:	40023800 	.word	0x40023800
 800907c:	08016a94 	.word	0x08016a94

08009080 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009084:	f7ff ffdc 	bl	8009040 <HAL_RCC_GetHCLKFreq>
 8009088:	4602      	mov	r2, r0
 800908a:	4b05      	ldr	r3, [pc, #20]	; (80090a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	0b5b      	lsrs	r3, r3, #13
 8009090:	f003 0307 	and.w	r3, r3, #7
 8009094:	4903      	ldr	r1, [pc, #12]	; (80090a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009096:	5ccb      	ldrb	r3, [r1, r3]
 8009098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800909c:	4618      	mov	r0, r3
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	40023800 	.word	0x40023800
 80090a4:	08016a94 	.word	0x08016a94

080090a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b088      	sub	sp, #32
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80090b0:	2300      	movs	r3, #0
 80090b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80090b4:	2300      	movs	r3, #0
 80090b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80090b8:	2300      	movs	r3, #0
 80090ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80090bc:	2300      	movs	r3, #0
 80090be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80090c0:	2300      	movs	r3, #0
 80090c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 0301 	and.w	r3, r3, #1
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d012      	beq.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80090d0:	4b69      	ldr	r3, [pc, #420]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	4a68      	ldr	r2, [pc, #416]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80090da:	6093      	str	r3, [r2, #8]
 80090dc:	4b66      	ldr	r3, [pc, #408]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090de:	689a      	ldr	r2, [r3, #8]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e4:	4964      	ldr	r1, [pc, #400]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090e6:	4313      	orrs	r3, r2
 80090e8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d101      	bne.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80090f2:	2301      	movs	r3, #1
 80090f4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d017      	beq.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009102:	4b5d      	ldr	r3, [pc, #372]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009108:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009110:	4959      	ldr	r1, [pc, #356]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009112:	4313      	orrs	r3, r2
 8009114:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800911c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009120:	d101      	bne.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009122:	2301      	movs	r3, #1
 8009124:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800912a:	2b00      	cmp	r3, #0
 800912c:	d101      	bne.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800912e:	2301      	movs	r3, #1
 8009130:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800913a:	2b00      	cmp	r3, #0
 800913c:	d017      	beq.n	800916e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800913e:	4b4e      	ldr	r3, [pc, #312]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009144:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914c:	494a      	ldr	r1, [pc, #296]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800914e:	4313      	orrs	r3, r2
 8009150:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009158:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800915c:	d101      	bne.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800915e:	2301      	movs	r3, #1
 8009160:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009166:	2b00      	cmp	r3, #0
 8009168:	d101      	bne.n	800916e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800916a:	2301      	movs	r3, #1
 800916c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009176:	2b00      	cmp	r3, #0
 8009178:	d001      	beq.n	800917e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800917a:	2301      	movs	r3, #1
 800917c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 0320 	and.w	r3, r3, #32
 8009186:	2b00      	cmp	r3, #0
 8009188:	f000 808b 	beq.w	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800918c:	4b3a      	ldr	r3, [pc, #232]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800918e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009190:	4a39      	ldr	r2, [pc, #228]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009196:	6413      	str	r3, [r2, #64]	; 0x40
 8009198:	4b37      	ldr	r3, [pc, #220]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800919a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091a0:	60bb      	str	r3, [r7, #8]
 80091a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80091a4:	4b35      	ldr	r3, [pc, #212]	; (800927c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a34      	ldr	r2, [pc, #208]	; (800927c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80091aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091b0:	f7fc fc3c 	bl	8005a2c <HAL_GetTick>
 80091b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80091b6:	e008      	b.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091b8:	f7fc fc38 	bl	8005a2c <HAL_GetTick>
 80091bc:	4602      	mov	r2, r0
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	2b64      	cmp	r3, #100	; 0x64
 80091c4:	d901      	bls.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e38f      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80091ca:	4b2c      	ldr	r3, [pc, #176]	; (800927c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d0f0      	beq.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80091d6:	4b28      	ldr	r3, [pc, #160]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d035      	beq.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091ee:	693a      	ldr	r2, [r7, #16]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d02e      	beq.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80091f4:	4b20      	ldr	r3, [pc, #128]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80091fe:	4b1e      	ldr	r3, [pc, #120]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009202:	4a1d      	ldr	r2, [pc, #116]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009208:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800920a:	4b1b      	ldr	r3, [pc, #108]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800920c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800920e:	4a1a      	ldr	r2, [pc, #104]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009214:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009216:	4a18      	ldr	r2, [pc, #96]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800921c:	4b16      	ldr	r3, [pc, #88]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800921e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009220:	f003 0301 	and.w	r3, r3, #1
 8009224:	2b01      	cmp	r3, #1
 8009226:	d114      	bne.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009228:	f7fc fc00 	bl	8005a2c <HAL_GetTick>
 800922c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800922e:	e00a      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009230:	f7fc fbfc 	bl	8005a2c <HAL_GetTick>
 8009234:	4602      	mov	r2, r0
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	1ad3      	subs	r3, r2, r3
 800923a:	f241 3288 	movw	r2, #5000	; 0x1388
 800923e:	4293      	cmp	r3, r2
 8009240:	d901      	bls.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009242:	2303      	movs	r3, #3
 8009244:	e351      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009246:	4b0c      	ldr	r3, [pc, #48]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800924a:	f003 0302 	and.w	r3, r3, #2
 800924e:	2b00      	cmp	r3, #0
 8009250:	d0ee      	beq.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800925a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800925e:	d111      	bne.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009260:	4b05      	ldr	r3, [pc, #20]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800926c:	4b04      	ldr	r3, [pc, #16]	; (8009280 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800926e:	400b      	ands	r3, r1
 8009270:	4901      	ldr	r1, [pc, #4]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009272:	4313      	orrs	r3, r2
 8009274:	608b      	str	r3, [r1, #8]
 8009276:	e00b      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009278:	40023800 	.word	0x40023800
 800927c:	40007000 	.word	0x40007000
 8009280:	0ffffcff 	.word	0x0ffffcff
 8009284:	4bac      	ldr	r3, [pc, #688]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	4aab      	ldr	r2, [pc, #684]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800928a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800928e:	6093      	str	r3, [r2, #8]
 8009290:	4ba9      	ldr	r3, [pc, #676]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009292:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800929c:	49a6      	ldr	r1, [pc, #664]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800929e:	4313      	orrs	r3, r2
 80092a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f003 0310 	and.w	r3, r3, #16
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d010      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80092ae:	4ba2      	ldr	r3, [pc, #648]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80092b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092b4:	4aa0      	ldr	r2, [pc, #640]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80092b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80092be:	4b9e      	ldr	r3, [pc, #632]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80092c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c8:	499b      	ldr	r1, [pc, #620]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80092ca:	4313      	orrs	r3, r2
 80092cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00a      	beq.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80092dc:	4b96      	ldr	r3, [pc, #600]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80092de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092ea:	4993      	ldr	r1, [pc, #588]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80092ec:	4313      	orrs	r3, r2
 80092ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00a      	beq.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80092fe:	4b8e      	ldr	r3, [pc, #568]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009304:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800930c:	498a      	ldr	r1, [pc, #552]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800930e:	4313      	orrs	r3, r2
 8009310:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00a      	beq.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009320:	4b85      	ldr	r3, [pc, #532]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009326:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800932e:	4982      	ldr	r1, [pc, #520]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009330:	4313      	orrs	r3, r2
 8009332:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00a      	beq.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009342:	4b7d      	ldr	r3, [pc, #500]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009348:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009350:	4979      	ldr	r1, [pc, #484]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009352:	4313      	orrs	r3, r2
 8009354:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009360:	2b00      	cmp	r3, #0
 8009362:	d00a      	beq.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009364:	4b74      	ldr	r3, [pc, #464]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800936a:	f023 0203 	bic.w	r2, r3, #3
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009372:	4971      	ldr	r1, [pc, #452]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009374:	4313      	orrs	r3, r2
 8009376:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00a      	beq.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009386:	4b6c      	ldr	r3, [pc, #432]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800938c:	f023 020c 	bic.w	r2, r3, #12
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009394:	4968      	ldr	r1, [pc, #416]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009396:	4313      	orrs	r3, r2
 8009398:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d00a      	beq.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80093a8:	4b63      	ldr	r3, [pc, #396]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80093aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093b6:	4960      	ldr	r1, [pc, #384]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80093b8:	4313      	orrs	r3, r2
 80093ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00a      	beq.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80093ca:	4b5b      	ldr	r3, [pc, #364]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80093cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093d0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093d8:	4957      	ldr	r1, [pc, #348]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80093da:	4313      	orrs	r3, r2
 80093dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d00a      	beq.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80093ec:	4b52      	ldr	r3, [pc, #328]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80093ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093fa:	494f      	ldr	r1, [pc, #316]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80093fc:	4313      	orrs	r3, r2
 80093fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00a      	beq.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800940e:	4b4a      	ldr	r3, [pc, #296]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009414:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800941c:	4946      	ldr	r1, [pc, #280]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800941e:	4313      	orrs	r3, r2
 8009420:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800942c:	2b00      	cmp	r3, #0
 800942e:	d00a      	beq.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009430:	4b41      	ldr	r3, [pc, #260]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009436:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800943e:	493e      	ldr	r1, [pc, #248]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009440:	4313      	orrs	r3, r2
 8009442:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00a      	beq.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009452:	4b39      	ldr	r3, [pc, #228]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009458:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009460:	4935      	ldr	r1, [pc, #212]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009462:	4313      	orrs	r3, r2
 8009464:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009470:	2b00      	cmp	r3, #0
 8009472:	d00a      	beq.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009474:	4b30      	ldr	r3, [pc, #192]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800947a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009482:	492d      	ldr	r1, [pc, #180]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009484:	4313      	orrs	r3, r2
 8009486:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009492:	2b00      	cmp	r3, #0
 8009494:	d011      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009496:	4b28      	ldr	r3, [pc, #160]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800949c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094a4:	4924      	ldr	r1, [pc, #144]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80094a6:	4313      	orrs	r3, r2
 80094a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094b4:	d101      	bne.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80094b6:	2301      	movs	r3, #1
 80094b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f003 0308 	and.w	r3, r3, #8
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d001      	beq.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80094c6:	2301      	movs	r3, #1
 80094c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00a      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80094d6:	4b18      	ldr	r3, [pc, #96]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80094d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094e4:	4914      	ldr	r1, [pc, #80]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80094e6:	4313      	orrs	r3, r2
 80094e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00b      	beq.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80094f8:	4b0f      	ldr	r3, [pc, #60]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80094fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009508:	490b      	ldr	r1, [pc, #44]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800950a:	4313      	orrs	r3, r2
 800950c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00f      	beq.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800951c:	4b06      	ldr	r3, [pc, #24]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800951e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009522:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800952c:	4902      	ldr	r1, [pc, #8]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800952e:	4313      	orrs	r3, r2
 8009530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009534:	e002      	b.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8009536:	bf00      	nop
 8009538:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009544:	2b00      	cmp	r3, #0
 8009546:	d00b      	beq.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009548:	4b8a      	ldr	r3, [pc, #552]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800954a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800954e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009558:	4986      	ldr	r1, [pc, #536]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800955a:	4313      	orrs	r3, r2
 800955c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009568:	2b00      	cmp	r3, #0
 800956a:	d00b      	beq.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800956c:	4b81      	ldr	r3, [pc, #516]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800956e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009572:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800957c:	497d      	ldr	r1, [pc, #500]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800957e:	4313      	orrs	r3, r2
 8009580:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009584:	69fb      	ldr	r3, [r7, #28]
 8009586:	2b01      	cmp	r3, #1
 8009588:	d006      	beq.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009592:	2b00      	cmp	r3, #0
 8009594:	f000 80d6 	beq.w	8009744 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009598:	4b76      	ldr	r3, [pc, #472]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a75      	ldr	r2, [pc, #468]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800959e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80095a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095a4:	f7fc fa42 	bl	8005a2c <HAL_GetTick>
 80095a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80095aa:	e008      	b.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80095ac:	f7fc fa3e 	bl	8005a2c <HAL_GetTick>
 80095b0:	4602      	mov	r2, r0
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	1ad3      	subs	r3, r2, r3
 80095b6:	2b64      	cmp	r3, #100	; 0x64
 80095b8:	d901      	bls.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80095ba:	2303      	movs	r3, #3
 80095bc:	e195      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80095be:	4b6d      	ldr	r3, [pc, #436]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d1f0      	bne.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 0301 	and.w	r3, r3, #1
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d021      	beq.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d11d      	bne.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80095de:	4b65      	ldr	r3, [pc, #404]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80095e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095e4:	0c1b      	lsrs	r3, r3, #16
 80095e6:	f003 0303 	and.w	r3, r3, #3
 80095ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80095ec:	4b61      	ldr	r3, [pc, #388]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80095ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095f2:	0e1b      	lsrs	r3, r3, #24
 80095f4:	f003 030f 	and.w	r3, r3, #15
 80095f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	019a      	lsls	r2, r3, #6
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	041b      	lsls	r3, r3, #16
 8009604:	431a      	orrs	r2, r3
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	061b      	lsls	r3, r3, #24
 800960a:	431a      	orrs	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	071b      	lsls	r3, r3, #28
 8009612:	4958      	ldr	r1, [pc, #352]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009614:	4313      	orrs	r3, r2
 8009616:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009622:	2b00      	cmp	r3, #0
 8009624:	d004      	beq.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800962a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800962e:	d00a      	beq.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009638:	2b00      	cmp	r3, #0
 800963a:	d02e      	beq.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009640:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009644:	d129      	bne.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009646:	4b4b      	ldr	r3, [pc, #300]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800964c:	0c1b      	lsrs	r3, r3, #16
 800964e:	f003 0303 	and.w	r3, r3, #3
 8009652:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009654:	4b47      	ldr	r3, [pc, #284]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800965a:	0f1b      	lsrs	r3, r3, #28
 800965c:	f003 0307 	and.w	r3, r3, #7
 8009660:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	019a      	lsls	r2, r3, #6
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	041b      	lsls	r3, r3, #16
 800966c:	431a      	orrs	r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	061b      	lsls	r3, r3, #24
 8009674:	431a      	orrs	r2, r3
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	071b      	lsls	r3, r3, #28
 800967a:	493e      	ldr	r1, [pc, #248]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800967c:	4313      	orrs	r3, r2
 800967e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009682:	4b3c      	ldr	r3, [pc, #240]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009688:	f023 021f 	bic.w	r2, r3, #31
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009690:	3b01      	subs	r3, #1
 8009692:	4938      	ldr	r1, [pc, #224]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009694:	4313      	orrs	r3, r2
 8009696:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d01d      	beq.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80096a6:	4b33      	ldr	r3, [pc, #204]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80096a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096ac:	0e1b      	lsrs	r3, r3, #24
 80096ae:	f003 030f 	and.w	r3, r3, #15
 80096b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80096b4:	4b2f      	ldr	r3, [pc, #188]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80096b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096ba:	0f1b      	lsrs	r3, r3, #28
 80096bc:	f003 0307 	and.w	r3, r3, #7
 80096c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	019a      	lsls	r2, r3, #6
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	041b      	lsls	r3, r3, #16
 80096ce:	431a      	orrs	r2, r3
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	061b      	lsls	r3, r3, #24
 80096d4:	431a      	orrs	r2, r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	071b      	lsls	r3, r3, #28
 80096da:	4926      	ldr	r1, [pc, #152]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80096dc:	4313      	orrs	r3, r2
 80096de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d011      	beq.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	019a      	lsls	r2, r3, #6
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	041b      	lsls	r3, r3, #16
 80096fa:	431a      	orrs	r2, r3
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	061b      	lsls	r3, r3, #24
 8009702:	431a      	orrs	r2, r3
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	071b      	lsls	r3, r3, #28
 800970a:	491a      	ldr	r1, [pc, #104]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800970c:	4313      	orrs	r3, r2
 800970e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009712:	4b18      	ldr	r3, [pc, #96]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a17      	ldr	r2, [pc, #92]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009718:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800971c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800971e:	f7fc f985 	bl	8005a2c <HAL_GetTick>
 8009722:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009724:	e008      	b.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009726:	f7fc f981 	bl	8005a2c <HAL_GetTick>
 800972a:	4602      	mov	r2, r0
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	1ad3      	subs	r3, r2, r3
 8009730:	2b64      	cmp	r3, #100	; 0x64
 8009732:	d901      	bls.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009734:	2303      	movs	r3, #3
 8009736:	e0d8      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009738:	4b0e      	ldr	r3, [pc, #56]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009740:	2b00      	cmp	r3, #0
 8009742:	d0f0      	beq.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	2b01      	cmp	r3, #1
 8009748:	f040 80ce 	bne.w	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800974c:	4b09      	ldr	r3, [pc, #36]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a08      	ldr	r2, [pc, #32]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009756:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009758:	f7fc f968 	bl	8005a2c <HAL_GetTick>
 800975c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800975e:	e00b      	b.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009760:	f7fc f964 	bl	8005a2c <HAL_GetTick>
 8009764:	4602      	mov	r2, r0
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	1ad3      	subs	r3, r2, r3
 800976a:	2b64      	cmp	r3, #100	; 0x64
 800976c:	d904      	bls.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800976e:	2303      	movs	r3, #3
 8009770:	e0bb      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009772:	bf00      	nop
 8009774:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009778:	4b5e      	ldr	r3, [pc, #376]	; (80098f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009784:	d0ec      	beq.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800978e:	2b00      	cmp	r3, #0
 8009790:	d003      	beq.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009796:	2b00      	cmp	r3, #0
 8009798:	d009      	beq.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d02e      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d12a      	bne.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80097ae:	4b51      	ldr	r3, [pc, #324]	; (80098f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80097b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097b4:	0c1b      	lsrs	r3, r3, #16
 80097b6:	f003 0303 	and.w	r3, r3, #3
 80097ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80097bc:	4b4d      	ldr	r3, [pc, #308]	; (80098f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80097be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097c2:	0f1b      	lsrs	r3, r3, #28
 80097c4:	f003 0307 	and.w	r3, r3, #7
 80097c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	695b      	ldr	r3, [r3, #20]
 80097ce:	019a      	lsls	r2, r3, #6
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	041b      	lsls	r3, r3, #16
 80097d4:	431a      	orrs	r2, r3
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	699b      	ldr	r3, [r3, #24]
 80097da:	061b      	lsls	r3, r3, #24
 80097dc:	431a      	orrs	r2, r3
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	071b      	lsls	r3, r3, #28
 80097e2:	4944      	ldr	r1, [pc, #272]	; (80098f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80097e4:	4313      	orrs	r3, r2
 80097e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80097ea:	4b42      	ldr	r3, [pc, #264]	; (80098f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80097ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f8:	3b01      	subs	r3, #1
 80097fa:	021b      	lsls	r3, r3, #8
 80097fc:	493d      	ldr	r1, [pc, #244]	; (80098f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80097fe:	4313      	orrs	r3, r2
 8009800:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800980c:	2b00      	cmp	r3, #0
 800980e:	d022      	beq.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009814:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009818:	d11d      	bne.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800981a:	4b36      	ldr	r3, [pc, #216]	; (80098f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800981c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009820:	0e1b      	lsrs	r3, r3, #24
 8009822:	f003 030f 	and.w	r3, r3, #15
 8009826:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009828:	4b32      	ldr	r3, [pc, #200]	; (80098f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800982a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800982e:	0f1b      	lsrs	r3, r3, #28
 8009830:	f003 0307 	and.w	r3, r3, #7
 8009834:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	695b      	ldr	r3, [r3, #20]
 800983a:	019a      	lsls	r2, r3, #6
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6a1b      	ldr	r3, [r3, #32]
 8009840:	041b      	lsls	r3, r3, #16
 8009842:	431a      	orrs	r2, r3
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	061b      	lsls	r3, r3, #24
 8009848:	431a      	orrs	r2, r3
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	071b      	lsls	r3, r3, #28
 800984e:	4929      	ldr	r1, [pc, #164]	; (80098f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009850:	4313      	orrs	r3, r2
 8009852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f003 0308 	and.w	r3, r3, #8
 800985e:	2b00      	cmp	r3, #0
 8009860:	d028      	beq.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009862:	4b24      	ldr	r3, [pc, #144]	; (80098f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009868:	0e1b      	lsrs	r3, r3, #24
 800986a:	f003 030f 	and.w	r3, r3, #15
 800986e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009870:	4b20      	ldr	r3, [pc, #128]	; (80098f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009876:	0c1b      	lsrs	r3, r3, #16
 8009878:	f003 0303 	and.w	r3, r3, #3
 800987c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	695b      	ldr	r3, [r3, #20]
 8009882:	019a      	lsls	r2, r3, #6
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	041b      	lsls	r3, r3, #16
 8009888:	431a      	orrs	r2, r3
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	061b      	lsls	r3, r3, #24
 800988e:	431a      	orrs	r2, r3
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	69db      	ldr	r3, [r3, #28]
 8009894:	071b      	lsls	r3, r3, #28
 8009896:	4917      	ldr	r1, [pc, #92]	; (80098f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009898:	4313      	orrs	r3, r2
 800989a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800989e:	4b15      	ldr	r3, [pc, #84]	; (80098f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80098a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ac:	4911      	ldr	r1, [pc, #68]	; (80098f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80098ae:	4313      	orrs	r3, r2
 80098b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80098b4:	4b0f      	ldr	r3, [pc, #60]	; (80098f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a0e      	ldr	r2, [pc, #56]	; (80098f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80098ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098c0:	f7fc f8b4 	bl	8005a2c <HAL_GetTick>
 80098c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80098c6:	e008      	b.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80098c8:	f7fc f8b0 	bl	8005a2c <HAL_GetTick>
 80098cc:	4602      	mov	r2, r0
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	1ad3      	subs	r3, r2, r3
 80098d2:	2b64      	cmp	r3, #100	; 0x64
 80098d4:	d901      	bls.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80098d6:	2303      	movs	r3, #3
 80098d8:	e007      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80098da:	4b06      	ldr	r3, [pc, #24]	; (80098f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098e6:	d1ef      	bne.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3720      	adds	r7, #32
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	40023800 	.word	0x40023800

080098f8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d101      	bne.n	800990a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	e081      	b.n	8009a0e <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	7f5b      	ldrb	r3, [r3, #29]
 800990e:	b2db      	uxtb	r3, r3
 8009910:	2b00      	cmp	r3, #0
 8009912:	d105      	bne.n	8009920 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f7fa ffa4 	bl	8004868 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2202      	movs	r2, #2
 8009924:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	22ca      	movs	r2, #202	; 0xca
 800992c:	625a      	str	r2, [r3, #36]	; 0x24
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2253      	movs	r2, #83	; 0x53
 8009934:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 faac 	bl	8009e94 <RTC_EnterInitMode>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d008      	beq.n	8009954 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	22ff      	movs	r2, #255	; 0xff
 8009948:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2204      	movs	r2, #4
 800994e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8009950:	2301      	movs	r3, #1
 8009952:	e05c      	b.n	8009a0e <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	6899      	ldr	r1, [r3, #8]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	4b2e      	ldr	r3, [pc, #184]	; (8009a18 <HAL_RTC_Init+0x120>)
 8009960:	400b      	ands	r3, r1
 8009962:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	6899      	ldr	r1, [r3, #8]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	685a      	ldr	r2, [r3, #4]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	691b      	ldr	r3, [r3, #16]
 8009972:	431a      	orrs	r2, r3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	695b      	ldr	r3, [r3, #20]
 8009978:	431a      	orrs	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	430a      	orrs	r2, r1
 8009980:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	68d2      	ldr	r2, [r2, #12]
 800998a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	6919      	ldr	r1, [r3, #16]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	041a      	lsls	r2, r3, #16
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	430a      	orrs	r2, r1
 800999e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68da      	ldr	r2, [r3, #12]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80099ae:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	f003 0320 	and.w	r3, r3, #32
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d10e      	bne.n	80099dc <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fa40 	bl	8009e44 <HAL_RTC_WaitForSynchro>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d008      	beq.n	80099dc <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	22ff      	movs	r2, #255	; 0xff
 80099d0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2204      	movs	r2, #4
 80099d6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	e018      	b.n	8009a0e <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f022 0208 	bic.w	r2, r2, #8
 80099ea:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	699a      	ldr	r2, [r3, #24]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	430a      	orrs	r2, r1
 80099fc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	22ff      	movs	r2, #255	; 0xff
 8009a04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2201      	movs	r2, #1
 8009a0a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8009a0c:	2300      	movs	r3, #0
  }
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	ff8fffbf 	.word	0xff8fffbf

08009a1c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009a1c:	b590      	push	{r4, r7, lr}
 8009a1e:	b087      	sub	sp, #28
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	7f1b      	ldrb	r3, [r3, #28]
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d101      	bne.n	8009a38 <HAL_RTC_SetTime+0x1c>
 8009a34:	2302      	movs	r3, #2
 8009a36:	e0a8      	b.n	8009b8a <HAL_RTC_SetTime+0x16e>
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2202      	movs	r2, #2
 8009a42:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d126      	bne.n	8009a98 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d102      	bne.n	8009a5e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f000 fa42 	bl	8009eec <RTC_ByteToBcd2>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	785b      	ldrb	r3, [r3, #1]
 8009a70:	4618      	mov	r0, r3
 8009a72:	f000 fa3b 	bl	8009eec <RTC_ByteToBcd2>
 8009a76:	4603      	mov	r3, r0
 8009a78:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009a7a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	789b      	ldrb	r3, [r3, #2]
 8009a80:	4618      	mov	r0, r3
 8009a82:	f000 fa33 	bl	8009eec <RTC_ByteToBcd2>
 8009a86:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009a88:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	7b1b      	ldrb	r3, [r3, #12]
 8009a90:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009a92:	4313      	orrs	r3, r2
 8009a94:	617b      	str	r3, [r7, #20]
 8009a96:	e018      	b.n	8009aca <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d102      	bne.n	8009aac <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	785b      	ldrb	r3, [r3, #1]
 8009ab6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009ab8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009aba:	68ba      	ldr	r2, [r7, #8]
 8009abc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009abe:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	7b1b      	ldrb	r3, [r3, #12]
 8009ac4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	22ca      	movs	r2, #202	; 0xca
 8009ad0:	625a      	str	r2, [r3, #36]	; 0x24
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2253      	movs	r2, #83	; 0x53
 8009ad8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009ada:	68f8      	ldr	r0, [r7, #12]
 8009adc:	f000 f9da 	bl	8009e94 <RTC_EnterInitMode>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00b      	beq.n	8009afe <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	22ff      	movs	r2, #255	; 0xff
 8009aec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2204      	movs	r2, #4
 8009af2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2200      	movs	r2, #0
 8009af8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	e045      	b.n	8009b8a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	6979      	ldr	r1, [r7, #20]
 8009b04:	4b23      	ldr	r3, [pc, #140]	; (8009b94 <HAL_RTC_SetTime+0x178>)
 8009b06:	400b      	ands	r3, r1
 8009b08:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	689a      	ldr	r2, [r3, #8]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009b18:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	6899      	ldr	r1, [r3, #8]
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	691a      	ldr	r2, [r3, #16]
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	695b      	ldr	r3, [r3, #20]
 8009b28:	431a      	orrs	r2, r3
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	430a      	orrs	r2, r1
 8009b30:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68da      	ldr	r2, [r3, #12]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b40:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	f003 0320 	and.w	r3, r3, #32
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d111      	bne.n	8009b74 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009b50:	68f8      	ldr	r0, [r7, #12]
 8009b52:	f000 f977 	bl	8009e44 <HAL_RTC_WaitForSynchro>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d00b      	beq.n	8009b74 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	22ff      	movs	r2, #255	; 0xff
 8009b62:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2204      	movs	r2, #4
 8009b68:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009b70:	2301      	movs	r3, #1
 8009b72:	e00a      	b.n	8009b8a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	22ff      	movs	r2, #255	; 0xff
 8009b7a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2200      	movs	r2, #0
 8009b86:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8009b88:	2300      	movs	r3, #0
  }
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	371c      	adds	r7, #28
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd90      	pop	{r4, r7, pc}
 8009b92:	bf00      	nop
 8009b94:	007f7f7f 	.word	0x007f7f7f

08009b98 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b086      	sub	sp, #24
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	691b      	ldr	r3, [r3, #16]
 8009bb8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	4b22      	ldr	r3, [pc, #136]	; (8009c50 <HAL_RTC_GetTime+0xb8>)
 8009bc8:	4013      	ands	r3, r2
 8009bca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	0c1b      	lsrs	r3, r3, #16
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bd6:	b2da      	uxtb	r2, r3
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	0a1b      	lsrs	r3, r3, #8
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009be6:	b2da      	uxtb	r2, r3
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bf4:	b2da      	uxtb	r2, r3
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	0c1b      	lsrs	r3, r3, #16
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c04:	b2da      	uxtb	r2, r3
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d11a      	bne.n	8009c46 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	4618      	mov	r0, r3
 8009c16:	f000 f987 	bl	8009f28 <RTC_Bcd2ToByte>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	785b      	ldrb	r3, [r3, #1]
 8009c26:	4618      	mov	r0, r3
 8009c28:	f000 f97e 	bl	8009f28 <RTC_Bcd2ToByte>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	461a      	mov	r2, r3
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	789b      	ldrb	r3, [r3, #2]
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f000 f975 	bl	8009f28 <RTC_Bcd2ToByte>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	461a      	mov	r2, r3
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009c46:	2300      	movs	r3, #0
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3718      	adds	r7, #24
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	007f7f7f 	.word	0x007f7f7f

08009c54 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009c54:	b590      	push	{r4, r7, lr}
 8009c56:	b087      	sub	sp, #28
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8009c60:	2300      	movs	r3, #0
 8009c62:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	7f1b      	ldrb	r3, [r3, #28]
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d101      	bne.n	8009c70 <HAL_RTC_SetDate+0x1c>
 8009c6c:	2302      	movs	r3, #2
 8009c6e:	e092      	b.n	8009d96 <HAL_RTC_SetDate+0x142>
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2201      	movs	r2, #1
 8009c74:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2202      	movs	r2, #2
 8009c7a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d10e      	bne.n	8009ca0 <HAL_RTC_SetDate+0x4c>
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	785b      	ldrb	r3, [r3, #1]
 8009c86:	f003 0310 	and.w	r3, r3, #16
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d008      	beq.n	8009ca0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	785b      	ldrb	r3, [r3, #1]
 8009c92:	f023 0310 	bic.w	r3, r3, #16
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	330a      	adds	r3, #10
 8009c9a:	b2da      	uxtb	r2, r3
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d11c      	bne.n	8009ce0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	78db      	ldrb	r3, [r3, #3]
 8009caa:	4618      	mov	r0, r3
 8009cac:	f000 f91e 	bl	8009eec <RTC_ByteToBcd2>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	785b      	ldrb	r3, [r3, #1]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f000 f917 	bl	8009eec <RTC_ByteToBcd2>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009cc2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	789b      	ldrb	r3, [r3, #2]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f000 f90f 	bl	8009eec <RTC_ByteToBcd2>
 8009cce:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009cd0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	617b      	str	r3, [r7, #20]
 8009cde:	e00e      	b.n	8009cfe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	78db      	ldrb	r3, [r3, #3]
 8009ce4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	785b      	ldrb	r3, [r3, #1]
 8009cea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009cec:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009cee:	68ba      	ldr	r2, [r7, #8]
 8009cf0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8009cf2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	22ca      	movs	r2, #202	; 0xca
 8009d04:	625a      	str	r2, [r3, #36]	; 0x24
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2253      	movs	r2, #83	; 0x53
 8009d0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	f000 f8c0 	bl	8009e94 <RTC_EnterInitMode>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00b      	beq.n	8009d32 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	22ff      	movs	r2, #255	; 0xff
 8009d20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2204      	movs	r2, #4
 8009d26:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e031      	b.n	8009d96 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	6979      	ldr	r1, [r7, #20]
 8009d38:	4b19      	ldr	r3, [pc, #100]	; (8009da0 <HAL_RTC_SetDate+0x14c>)
 8009d3a:	400b      	ands	r3, r1
 8009d3c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	68da      	ldr	r2, [r3, #12]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d4c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	f003 0320 	and.w	r3, r3, #32
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d111      	bne.n	8009d80 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	f000 f871 	bl	8009e44 <HAL_RTC_WaitForSynchro>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d00b      	beq.n	8009d80 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	22ff      	movs	r2, #255	; 0xff
 8009d6e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2204      	movs	r2, #4
 8009d74:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e00a      	b.n	8009d96 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	22ff      	movs	r2, #255	; 0xff
 8009d86:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2200      	movs	r2, #0
 8009d92:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8009d94:	2300      	movs	r3, #0
  }
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	371c      	adds	r7, #28
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd90      	pop	{r4, r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	00ffff3f 	.word	0x00ffff3f

08009da4 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b086      	sub	sp, #24
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	60b9      	str	r1, [r7, #8]
 8009dae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8009db0:	2300      	movs	r3, #0
 8009db2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	685a      	ldr	r2, [r3, #4]
 8009dba:	4b21      	ldr	r3, [pc, #132]	; (8009e40 <HAL_RTC_GetDate+0x9c>)
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	0c1b      	lsrs	r3, r3, #16
 8009dc4:	b2da      	uxtb	r2, r3
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	0a1b      	lsrs	r3, r3, #8
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	f003 031f 	and.w	r3, r3, #31
 8009dd4:	b2da      	uxtb	r2, r3
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009de2:	b2da      	uxtb	r2, r3
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	0b5b      	lsrs	r3, r3, #13
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	f003 0307 	and.w	r3, r3, #7
 8009df2:	b2da      	uxtb	r2, r3
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d11a      	bne.n	8009e34 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	78db      	ldrb	r3, [r3, #3]
 8009e02:	4618      	mov	r0, r3
 8009e04:	f000 f890 	bl	8009f28 <RTC_Bcd2ToByte>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	785b      	ldrb	r3, [r3, #1]
 8009e14:	4618      	mov	r0, r3
 8009e16:	f000 f887 	bl	8009f28 <RTC_Bcd2ToByte>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	789b      	ldrb	r3, [r3, #2]
 8009e26:	4618      	mov	r0, r3
 8009e28:	f000 f87e 	bl	8009f28 <RTC_Bcd2ToByte>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	461a      	mov	r2, r3
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009e34:	2300      	movs	r3, #0
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3718      	adds	r7, #24
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	00ffff3f 	.word	0x00ffff3f

08009e44 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	68da      	ldr	r2, [r3, #12]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009e5e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009e60:	f7fb fde4 	bl	8005a2c <HAL_GetTick>
 8009e64:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009e66:	e009      	b.n	8009e7c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009e68:	f7fb fde0 	bl	8005a2c <HAL_GetTick>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e76:	d901      	bls.n	8009e7c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009e78:	2303      	movs	r3, #3
 8009e7a:	e007      	b.n	8009e8c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	f003 0320 	and.w	r3, r3, #32
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d0ee      	beq.n	8009e68 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009e8a:	2300      	movs	r3, #0
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3710      	adds	r7, #16
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d119      	bne.n	8009ee2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8009eb6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009eb8:	f7fb fdb8 	bl	8005a2c <HAL_GetTick>
 8009ebc:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009ebe:	e009      	b.n	8009ed4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009ec0:	f7fb fdb4 	bl	8005a2c <HAL_GetTick>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	1ad3      	subs	r3, r2, r3
 8009eca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ece:	d901      	bls.n	8009ed4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009ed0:	2303      	movs	r3, #3
 8009ed2:	e007      	b.n	8009ee4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d0ee      	beq.n	8009ec0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009ee2:	2300      	movs	r3, #0
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3710      	adds	r7, #16
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8009efa:	e005      	b.n	8009f08 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	3301      	adds	r3, #1
 8009f00:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8009f02:	79fb      	ldrb	r3, [r7, #7]
 8009f04:	3b0a      	subs	r3, #10
 8009f06:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8009f08:	79fb      	ldrb	r3, [r7, #7]
 8009f0a:	2b09      	cmp	r3, #9
 8009f0c:	d8f6      	bhi.n	8009efc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	011b      	lsls	r3, r3, #4
 8009f14:	b2da      	uxtb	r2, r3
 8009f16:	79fb      	ldrb	r3, [r7, #7]
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	b2db      	uxtb	r3, r3
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3714      	adds	r7, #20
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr

08009f28 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b085      	sub	sp, #20
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	4603      	mov	r3, r0
 8009f30:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8009f32:	2300      	movs	r3, #0
 8009f34:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009f36:	79fb      	ldrb	r3, [r7, #7]
 8009f38:	091b      	lsrs	r3, r3, #4
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	4613      	mov	r3, r2
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	4413      	add	r3, r2
 8009f44:	005b      	lsls	r3, r3, #1
 8009f46:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8009f48:	79fb      	ldrb	r3, [r7, #7]
 8009f4a:	f003 030f 	and.w	r3, r3, #15
 8009f4e:	b2da      	uxtb	r2, r3
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	4413      	add	r3, r2
 8009f56:	b2db      	uxtb	r3, r3
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3714      	adds	r7, #20
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr

08009f64 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d101      	bne.n	8009f76 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e022      	b.n	8009fbc <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d105      	bne.n	8009f8e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f7fa fca7 	bl	80048dc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2203      	movs	r2, #3
 8009f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 f814 	bl	8009fc4 <HAL_SD_InitCard>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d001      	beq.n	8009fa6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e00a      	b.n	8009fbc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3708      	adds	r7, #8
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009fc4:	b5b0      	push	{r4, r5, r7, lr}
 8009fc6:	b08e      	sub	sp, #56	; 0x38
 8009fc8:	af04      	add	r7, sp, #16
 8009fca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8009fe0:	2376      	movs	r3, #118	; 0x76
 8009fe2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681d      	ldr	r5, [r3, #0]
 8009fe8:	466c      	mov	r4, sp
 8009fea:	f107 0314 	add.w	r3, r7, #20
 8009fee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009ff2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009ff6:	f107 0308 	add.w	r3, r7, #8
 8009ffa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009ffc:	4628      	mov	r0, r5
 8009ffe:	f003 ffe5 	bl	800dfcc <SDMMC_Init>
 800a002:	4603      	mov	r3, r0
 800a004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d001      	beq.n	800a014 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a010:	2301      	movs	r3, #1
 800a012:	e059      	b.n	800a0c8 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	685a      	ldr	r2, [r3, #4]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a022:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4618      	mov	r0, r3
 800a02a:	f004 f819 	bl	800e060 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	685a      	ldr	r2, [r3, #4]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a03c:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800a03e:	2002      	movs	r0, #2
 800a040:	f7fb fd00 	bl	8005a44 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 fff3 	bl	800b030 <SD_PowerON>
 800a04a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a04c:	6a3b      	ldr	r3, [r7, #32]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d00b      	beq.n	800a06a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2201      	movs	r2, #1
 800a056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a05e:	6a3b      	ldr	r3, [r7, #32]
 800a060:	431a      	orrs	r2, r3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a066:	2301      	movs	r3, #1
 800a068:	e02e      	b.n	800a0c8 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 ff12 	bl	800ae94 <SD_InitCard>
 800a070:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a072:	6a3b      	ldr	r3, [r7, #32]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d00b      	beq.n	800a090 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2201      	movs	r2, #1
 800a07c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a084:	6a3b      	ldr	r3, [r7, #32]
 800a086:	431a      	orrs	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a08c:	2301      	movs	r3, #1
 800a08e:	e01b      	b.n	800a0c8 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a098:	4618      	mov	r0, r3
 800a09a:	f004 f873 	bl	800e184 <SDMMC_CmdBlockLength>
 800a09e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0a0:	6a3b      	ldr	r3, [r7, #32]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00f      	beq.n	800a0c6 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a09      	ldr	r2, [pc, #36]	; (800a0d0 <HAL_SD_InitCard+0x10c>)
 800a0ac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0b2:	6a3b      	ldr	r3, [r7, #32]
 800a0b4:	431a      	orrs	r2, r3
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e000      	b.n	800a0c8 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800a0c6:	2300      	movs	r3, #0
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3728      	adds	r7, #40	; 0x28
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bdb0      	pop	{r4, r5, r7, pc}
 800a0d0:	004005ff 	.word	0x004005ff

0800a0d4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b08c      	sub	sp, #48	; 0x30
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
 800a0e0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d107      	bne.n	800a0fc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e0c3      	b.n	800a284 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a102:	b2db      	uxtb	r3, r3
 800a104:	2b01      	cmp	r3, #1
 800a106:	f040 80bc 	bne.w	800a282 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2200      	movs	r2, #0
 800a10e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a110:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	441a      	add	r2, r3
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d907      	bls.n	800a12e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a122:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	e0aa      	b.n	800a284 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2203      	movs	r2, #3
 800a132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	2200      	movs	r2, #0
 800a13c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a14c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a152:	4a4e      	ldr	r2, [pc, #312]	; (800a28c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800a154:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a15a:	4a4d      	ldr	r2, [pc, #308]	; (800a290 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a15c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a162:	2200      	movs	r2, #0
 800a164:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a16a:	2200      	movs	r2, #0
 800a16c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17e:	689a      	ldr	r2, [r3, #8]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	430a      	orrs	r2, r1
 800a188:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	3380      	adds	r3, #128	; 0x80
 800a194:	4619      	mov	r1, r3
 800a196:	68ba      	ldr	r2, [r7, #8]
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	025b      	lsls	r3, r3, #9
 800a19c:	089b      	lsrs	r3, r3, #2
 800a19e:	f7fc fc63 	bl	8006a68 <HAL_DMA_Start_IT>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d017      	beq.n	800a1d8 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a1b6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a35      	ldr	r2, [pc, #212]	; (800a294 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a1be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e055      	b.n	800a284 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f042 0208 	orr.w	r2, r2, #8
 800a1e6:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d002      	beq.n	800a1f6 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800a1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f2:	025b      	lsls	r3, r3, #9
 800a1f4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a1f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a1fa:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	025b      	lsls	r3, r3, #9
 800a200:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a202:	2390      	movs	r3, #144	; 0x90
 800a204:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a206:	2302      	movs	r3, #2
 800a208:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a20a:	2300      	movs	r3, #0
 800a20c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a20e:	2301      	movs	r3, #1
 800a210:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f107 0210 	add.w	r2, r7, #16
 800a21a:	4611      	mov	r1, r2
 800a21c:	4618      	mov	r0, r3
 800a21e:	f003 ff85 	bl	800e12c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	2b01      	cmp	r3, #1
 800a226:	d90a      	bls.n	800a23e <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2282      	movs	r2, #130	; 0x82
 800a22c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a234:	4618      	mov	r0, r3
 800a236:	f003 ffe9 	bl	800e20c <SDMMC_CmdReadMultiBlock>
 800a23a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a23c:	e009      	b.n	800a252 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2281      	movs	r2, #129	; 0x81
 800a242:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a24a:	4618      	mov	r0, r3
 800a24c:	f003 ffbc 	bl	800e1c8 <SDMMC_CmdReadSingleBlock>
 800a250:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a254:	2b00      	cmp	r3, #0
 800a256:	d012      	beq.n	800a27e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a0d      	ldr	r2, [pc, #52]	; (800a294 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a25e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a266:	431a      	orrs	r2, r3
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2201      	movs	r2, #1
 800a270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2200      	movs	r2, #0
 800a278:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a27a:	2301      	movs	r3, #1
 800a27c:	e002      	b.n	800a284 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800a27e:	2300      	movs	r3, #0
 800a280:	e000      	b.n	800a284 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800a282:	2302      	movs	r3, #2
  }
}
 800a284:	4618      	mov	r0, r3
 800a286:	3730      	adds	r7, #48	; 0x30
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	0800aca3 	.word	0x0800aca3
 800a290:	0800ad15 	.word	0x0800ad15
 800a294:	004005ff 	.word	0x004005ff

0800a298 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b08c      	sub	sp, #48	; 0x30
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	607a      	str	r2, [r7, #4]
 800a2a4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d107      	bne.n	800a2c0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	e0c6      	b.n	800a44e <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	f040 80bf 	bne.w	800a44c <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a2d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	441a      	add	r2, r3
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d907      	bls.n	800a2f2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e0ad      	b.n	800a44e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2203      	movs	r2, #3
 800a2f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2200      	movs	r2, #0
 800a300:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f042 021a 	orr.w	r2, r2, #26
 800a310:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a316:	4a50      	ldr	r2, [pc, #320]	; (800a458 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800a318:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a31e:	4a4f      	ldr	r2, [pc, #316]	; (800a45c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a320:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a326:	2200      	movs	r2, #0
 800a328:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d002      	beq.n	800a338 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800a332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a334:	025b      	lsls	r3, r3, #9
 800a336:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d90a      	bls.n	800a354 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	22a0      	movs	r2, #160	; 0xa0
 800a342:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a34a:	4618      	mov	r0, r3
 800a34c:	f003 ffa2 	bl	800e294 <SDMMC_CmdWriteMultiBlock>
 800a350:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a352:	e009      	b.n	800a368 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2290      	movs	r2, #144	; 0x90
 800a358:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a360:	4618      	mov	r0, r3
 800a362:	f003 ff75 	bl	800e250 <SDMMC_CmdWriteSingleBlock>
 800a366:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d012      	beq.n	800a394 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a3b      	ldr	r2, [pc, #236]	; (800a460 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a374:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a37c:	431a      	orrs	r2, r3
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2201      	movs	r2, #1
 800a386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2200      	movs	r2, #0
 800a38e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a390:	2301      	movs	r3, #1
 800a392:	e05c      	b.n	800a44e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f042 0208 	orr.w	r2, r2, #8
 800a3a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3a8:	2240      	movs	r2, #64	; 0x40
 800a3aa:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3bc:	689a      	ldr	r2, [r3, #8]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	430a      	orrs	r2, r1
 800a3c6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a3cc:	68b9      	ldr	r1, [r7, #8]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	3380      	adds	r3, #128	; 0x80
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	025b      	lsls	r3, r3, #9
 800a3da:	089b      	lsrs	r3, r3, #2
 800a3dc:	f7fc fb44 	bl	8006a68 <HAL_DMA_Start_IT>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d01a      	beq.n	800a41c <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f022 021a 	bic.w	r2, r2, #26
 800a3f4:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a19      	ldr	r2, [pc, #100]	; (800a460 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a3fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a402:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2201      	movs	r2, #1
 800a40e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2200      	movs	r2, #0
 800a416:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a418:	2301      	movs	r3, #1
 800a41a:	e018      	b.n	800a44e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a41c:	f04f 33ff 	mov.w	r3, #4294967295
 800a420:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	025b      	lsls	r3, r3, #9
 800a426:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a428:	2390      	movs	r3, #144	; 0x90
 800a42a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a42c:	2300      	movs	r3, #0
 800a42e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a430:	2300      	movs	r3, #0
 800a432:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a434:	2301      	movs	r3, #1
 800a436:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f107 0210 	add.w	r2, r7, #16
 800a440:	4611      	mov	r1, r2
 800a442:	4618      	mov	r0, r3
 800a444:	f003 fe72 	bl	800e12c <SDMMC_ConfigData>

      return HAL_OK;
 800a448:	2300      	movs	r3, #0
 800a44a:	e000      	b.n	800a44e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800a44c:	2302      	movs	r3, #2
  }
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3730      	adds	r7, #48	; 0x30
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	0800ac79 	.word	0x0800ac79
 800a45c:	0800ad15 	.word	0x0800ad15
 800a460:	004005ff 	.word	0x004005ff

0800a464 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a470:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d008      	beq.n	800a492 <HAL_SD_IRQHandler+0x2e>
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f003 0308 	and.w	r3, r3, #8
 800a486:	2b00      	cmp	r3, #0
 800a488:	d003      	beq.n	800a492 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 ffef 	bl	800b46e <SD_Read_IT>
 800a490:	e15a      	b.n	800a748 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f000 808d 	beq.w	800a5bc <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a4aa:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	4b9a      	ldr	r3, [pc, #616]	; (800a720 <HAL_SD_IRQHandler+0x2bc>)
 800a4b8:	400b      	ands	r3, r1
 800a4ba:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f022 0201 	bic.w	r2, r2, #1
 800a4ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f003 0308 	and.w	r3, r3, #8
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d039      	beq.n	800a54a <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f003 0302 	and.w	r3, r3, #2
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d104      	bne.n	800a4ea <HAL_SD_IRQHandler+0x86>
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f003 0320 	and.w	r3, r3, #32
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d011      	beq.n	800a50e <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f003 fef2 	bl	800e2d8 <SDMMC_CmdStopTransfer>
 800a4f4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d008      	beq.n	800a50e <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	431a      	orrs	r2, r3
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 f921 	bl	800a750 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f240 523a 	movw	r2, #1338	; 0x53a
 800a516:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f003 0301 	and.w	r3, r3, #1
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d104      	bne.n	800a53a <HAL_SD_IRQHandler+0xd6>
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f003 0302 	and.w	r3, r3, #2
 800a536:	2b00      	cmp	r3, #0
 800a538:	d003      	beq.n	800a542 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f004 fb62 	bl	800ec04 <HAL_SD_RxCpltCallback>
 800a540:	e102      	b.n	800a748 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f004 fb54 	bl	800ebf0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a548:	e0fe      	b.n	800a748 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a550:	2b00      	cmp	r3, #0
 800a552:	f000 80f9 	beq.w	800a748 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f003 0320 	and.w	r3, r3, #32
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d011      	beq.n	800a584 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4618      	mov	r0, r3
 800a566:	f003 feb7 	bl	800e2d8 <SDMMC_CmdStopTransfer>
 800a56a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d008      	beq.n	800a584 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	431a      	orrs	r2, r3
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 f8e6 	bl	800a750 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f003 0301 	and.w	r3, r3, #1
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f040 80dc 	bne.w	800a748 <HAL_SD_IRQHandler+0x2e4>
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f003 0302 	and.w	r3, r3, #2
 800a596:	2b00      	cmp	r3, #0
 800a598:	f040 80d6 	bne.w	800a748 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f022 0208 	bic.w	r2, r2, #8
 800a5aa:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f004 fb1b 	bl	800ebf0 <HAL_SD_TxCpltCallback>
}
 800a5ba:	e0c5      	b.n	800a748 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d008      	beq.n	800a5dc <HAL_SD_IRQHandler+0x178>
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f003 0308 	and.w	r3, r3, #8
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d003      	beq.n	800a5dc <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 ff9b 	bl	800b510 <SD_Write_IT>
 800a5da:	e0b5      	b.n	800a748 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5e2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	f000 80ae 	beq.w	800a748 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5f2:	f003 0302 	and.w	r3, r3, #2
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d005      	beq.n	800a606 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5fe:	f043 0202 	orr.w	r2, r3, #2
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a60c:	f003 0308 	and.w	r3, r3, #8
 800a610:	2b00      	cmp	r3, #0
 800a612:	d005      	beq.n	800a620 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a618:	f043 0208 	orr.w	r2, r3, #8
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a626:	f003 0320 	and.w	r3, r3, #32
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d005      	beq.n	800a63a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a632:	f043 0220 	orr.w	r2, r3, #32
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a640:	f003 0310 	and.w	r3, r3, #16
 800a644:	2b00      	cmp	r3, #0
 800a646:	d005      	beq.n	800a654 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a64c:	f043 0210 	orr.w	r2, r3, #16
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f240 523a 	movw	r2, #1338	; 0x53a
 800a65c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a66c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4618      	mov	r0, r3
 800a674:	f003 fe30 	bl	800e2d8 <SDMMC_CmdStopTransfer>
 800a678:	4602      	mov	r2, r0
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a67e:	431a      	orrs	r2, r3
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f003 0308 	and.w	r3, r3, #8
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d00a      	beq.n	800a6a4 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2201      	movs	r2, #1
 800a692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2200      	movs	r2, #0
 800a69a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 f857 	bl	800a750 <HAL_SD_ErrorCallback>
}
 800a6a2:	e051      	b.n	800a748 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d04c      	beq.n	800a748 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f003 0310 	and.w	r3, r3, #16
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d104      	bne.n	800a6c2 <HAL_SD_IRQHandler+0x25e>
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f003 0320 	and.w	r3, r3, #32
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d011      	beq.n	800a6e6 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6c6:	4a17      	ldr	r2, [pc, #92]	; (800a724 <HAL_SD_IRQHandler+0x2c0>)
 800a6c8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7fc fa9a 	bl	8006c08 <HAL_DMA_Abort_IT>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d036      	beq.n	800a748 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f000 fb6a 	bl	800adb8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a6e4:	e030      	b.n	800a748 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f003 0301 	and.w	r3, r3, #1
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d104      	bne.n	800a6fa <HAL_SD_IRQHandler+0x296>
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f003 0302 	and.w	r3, r3, #2
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d018      	beq.n	800a72c <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6fe:	4a0a      	ldr	r2, [pc, #40]	; (800a728 <HAL_SD_IRQHandler+0x2c4>)
 800a700:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a706:	4618      	mov	r0, r3
 800a708:	f7fc fa7e 	bl	8006c08 <HAL_DMA_Abort_IT>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d01a      	beq.n	800a748 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a716:	4618      	mov	r0, r3
 800a718:	f000 fb85 	bl	800ae26 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a71c:	e014      	b.n	800a748 <HAL_SD_IRQHandler+0x2e4>
 800a71e:	bf00      	nop
 800a720:	ffff3ec5 	.word	0xffff3ec5
 800a724:	0800adb9 	.word	0x0800adb9
 800a728:	0800ae27 	.word	0x0800ae27
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2200      	movs	r2, #0
 800a730:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2201      	movs	r2, #1
 800a736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2200      	movs	r2, #0
 800a73e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f004 fa4b 	bl	800ebdc <HAL_SD_AbortCallback>
}
 800a746:	e7ff      	b.n	800a748 <HAL_SD_IRQHandler+0x2e4>
 800a748:	bf00      	nop
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a758:	bf00      	nop
 800a75a:	370c      	adds	r7, #12
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a764:	b480      	push	{r7}
 800a766:	b083      	sub	sp, #12
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a772:	0f9b      	lsrs	r3, r3, #30
 800a774:	b2da      	uxtb	r2, r3
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a77e:	0e9b      	lsrs	r3, r3, #26
 800a780:	b2db      	uxtb	r3, r3
 800a782:	f003 030f 	and.w	r3, r3, #15
 800a786:	b2da      	uxtb	r2, r3
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a790:	0e1b      	lsrs	r3, r3, #24
 800a792:	b2db      	uxtb	r3, r3
 800a794:	f003 0303 	and.w	r3, r3, #3
 800a798:	b2da      	uxtb	r2, r3
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7a2:	0c1b      	lsrs	r3, r3, #16
 800a7a4:	b2da      	uxtb	r2, r3
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7ae:	0a1b      	lsrs	r3, r3, #8
 800a7b0:	b2da      	uxtb	r2, r3
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7ba:	b2da      	uxtb	r2, r3
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7c4:	0d1b      	lsrs	r3, r3, #20
 800a7c6:	b29a      	uxth	r2, r3
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7d0:	0c1b      	lsrs	r3, r3, #16
 800a7d2:	b2db      	uxtb	r3, r3
 800a7d4:	f003 030f 	and.w	r3, r3, #15
 800a7d8:	b2da      	uxtb	r2, r3
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7e2:	0bdb      	lsrs	r3, r3, #15
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	f003 0301 	and.w	r3, r3, #1
 800a7ea:	b2da      	uxtb	r2, r3
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7f4:	0b9b      	lsrs	r3, r3, #14
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	f003 0301 	and.w	r3, r3, #1
 800a7fc:	b2da      	uxtb	r2, r3
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a806:	0b5b      	lsrs	r3, r3, #13
 800a808:	b2db      	uxtb	r3, r3
 800a80a:	f003 0301 	and.w	r3, r3, #1
 800a80e:	b2da      	uxtb	r2, r3
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a818:	0b1b      	lsrs	r3, r3, #12
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	f003 0301 	and.w	r3, r3, #1
 800a820:	b2da      	uxtb	r2, r3
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	2200      	movs	r2, #0
 800a82a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a830:	2b00      	cmp	r3, #0
 800a832:	d163      	bne.n	800a8fc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a838:	009a      	lsls	r2, r3, #2
 800a83a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a83e:	4013      	ands	r3, r2
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a844:	0f92      	lsrs	r2, r2, #30
 800a846:	431a      	orrs	r2, r3
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a850:	0edb      	lsrs	r3, r3, #27
 800a852:	b2db      	uxtb	r3, r3
 800a854:	f003 0307 	and.w	r3, r3, #7
 800a858:	b2da      	uxtb	r2, r3
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a862:	0e1b      	lsrs	r3, r3, #24
 800a864:	b2db      	uxtb	r3, r3
 800a866:	f003 0307 	and.w	r3, r3, #7
 800a86a:	b2da      	uxtb	r2, r3
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a874:	0d5b      	lsrs	r3, r3, #21
 800a876:	b2db      	uxtb	r3, r3
 800a878:	f003 0307 	and.w	r3, r3, #7
 800a87c:	b2da      	uxtb	r2, r3
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a886:	0c9b      	lsrs	r3, r3, #18
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	f003 0307 	and.w	r3, r3, #7
 800a88e:	b2da      	uxtb	r2, r3
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a898:	0bdb      	lsrs	r3, r3, #15
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	f003 0307 	and.w	r3, r3, #7
 800a8a0:	b2da      	uxtb	r2, r3
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	691b      	ldr	r3, [r3, #16]
 800a8aa:	1c5a      	adds	r2, r3, #1
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	7e1b      	ldrb	r3, [r3, #24]
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	f003 0307 	and.w	r3, r3, #7
 800a8ba:	3302      	adds	r3, #2
 800a8bc:	2201      	movs	r2, #1
 800a8be:	fa02 f303 	lsl.w	r3, r2, r3
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a8c6:	fb03 f202 	mul.w	r2, r3, r2
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	7a1b      	ldrb	r3, [r3, #8]
 800a8d2:	b2db      	uxtb	r3, r3
 800a8d4:	f003 030f 	and.w	r3, r3, #15
 800a8d8:	2201      	movs	r2, #1
 800a8da:	409a      	lsls	r2, r3
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a8e8:	0a52      	lsrs	r2, r2, #9
 800a8ea:	fb03 f202 	mul.w	r2, r3, r2
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8f8:	661a      	str	r2, [r3, #96]	; 0x60
 800a8fa:	e031      	b.n	800a960 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a900:	2b01      	cmp	r3, #1
 800a902:	d11d      	bne.n	800a940 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a908:	041b      	lsls	r3, r3, #16
 800a90a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a912:	0c1b      	lsrs	r3, r3, #16
 800a914:	431a      	orrs	r2, r3
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	691b      	ldr	r3, [r3, #16]
 800a91e:	3301      	adds	r3, #1
 800a920:	029a      	lsls	r2, r3, #10
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a934:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	661a      	str	r2, [r3, #96]	; 0x60
 800a93e:	e00f      	b.n	800a960 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a58      	ldr	r2, [pc, #352]	; (800aaa8 <HAL_SD_GetCardCSD+0x344>)
 800a946:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a94c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2201      	movs	r2, #1
 800a958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a95c:	2301      	movs	r3, #1
 800a95e:	e09d      	b.n	800aa9c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a964:	0b9b      	lsrs	r3, r3, #14
 800a966:	b2db      	uxtb	r3, r3
 800a968:	f003 0301 	and.w	r3, r3, #1
 800a96c:	b2da      	uxtb	r2, r3
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a976:	09db      	lsrs	r3, r3, #7
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a97e:	b2da      	uxtb	r2, r3
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a98e:	b2da      	uxtb	r2, r3
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a998:	0fdb      	lsrs	r3, r3, #31
 800a99a:	b2da      	uxtb	r2, r3
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9a4:	0f5b      	lsrs	r3, r3, #29
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	f003 0303 	and.w	r3, r3, #3
 800a9ac:	b2da      	uxtb	r2, r3
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9b6:	0e9b      	lsrs	r3, r3, #26
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	f003 0307 	and.w	r3, r3, #7
 800a9be:	b2da      	uxtb	r2, r3
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9c8:	0d9b      	lsrs	r3, r3, #22
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	f003 030f 	and.w	r3, r3, #15
 800a9d0:	b2da      	uxtb	r2, r3
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9da:	0d5b      	lsrs	r3, r3, #21
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	f003 0301 	and.w	r3, r3, #1
 800a9e2:	b2da      	uxtb	r2, r3
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9f6:	0c1b      	lsrs	r3, r3, #16
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	f003 0301 	and.w	r3, r3, #1
 800a9fe:	b2da      	uxtb	r2, r3
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa0a:	0bdb      	lsrs	r3, r3, #15
 800aa0c:	b2db      	uxtb	r3, r3
 800aa0e:	f003 0301 	and.w	r3, r3, #1
 800aa12:	b2da      	uxtb	r2, r3
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa1e:	0b9b      	lsrs	r3, r3, #14
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	f003 0301 	and.w	r3, r3, #1
 800aa26:	b2da      	uxtb	r2, r3
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa32:	0b5b      	lsrs	r3, r3, #13
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	f003 0301 	and.w	r3, r3, #1
 800aa3a:	b2da      	uxtb	r2, r3
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa46:	0b1b      	lsrs	r3, r3, #12
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	f003 0301 	and.w	r3, r3, #1
 800aa4e:	b2da      	uxtb	r2, r3
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa5a:	0a9b      	lsrs	r3, r3, #10
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	f003 0303 	and.w	r3, r3, #3
 800aa62:	b2da      	uxtb	r2, r3
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa6e:	0a1b      	lsrs	r3, r3, #8
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	f003 0303 	and.w	r3, r3, #3
 800aa76:	b2da      	uxtb	r2, r3
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa82:	085b      	lsrs	r3, r3, #1
 800aa84:	b2db      	uxtb	r3, r3
 800aa86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa8a:	b2da      	uxtb	r2, r3
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	2201      	movs	r2, #1
 800aa96:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr
 800aaa8:	004005ff 	.word	0x004005ff

0800aaac <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800aaf6:	2300      	movs	r3, #0
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	370c      	adds	r7, #12
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ab04:	b5b0      	push	{r4, r5, r7, lr}
 800ab06:	b08e      	sub	sp, #56	; 0x38
 800ab08:	af04      	add	r7, sp, #16
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2203      	movs	r2, #3
 800ab18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab20:	2b03      	cmp	r3, #3
 800ab22:	d02e      	beq.n	800ab82 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab2a:	d106      	bne.n	800ab3a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	639a      	str	r2, [r3, #56]	; 0x38
 800ab38:	e029      	b.n	800ab8e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab40:	d10a      	bne.n	800ab58 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 fb2a 	bl	800b19c <SD_WideBus_Enable>
 800ab48:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab4e:	6a3b      	ldr	r3, [r7, #32]
 800ab50:	431a      	orrs	r2, r3
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	639a      	str	r2, [r3, #56]	; 0x38
 800ab56:	e01a      	b.n	800ab8e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d10a      	bne.n	800ab74 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 fb67 	bl	800b232 <SD_WideBus_Disable>
 800ab64:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab6a:	6a3b      	ldr	r3, [r7, #32]
 800ab6c:	431a      	orrs	r2, r3
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	639a      	str	r2, [r3, #56]	; 0x38
 800ab72:	e00c      	b.n	800ab8e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab78:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	639a      	str	r2, [r3, #56]	; 0x38
 800ab80:	e005      	b.n	800ab8e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab86:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d00b      	beq.n	800abae <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4a26      	ldr	r2, [pc, #152]	; (800ac34 <HAL_SD_ConfigWideBusOperation+0x130>)
 800ab9c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2201      	movs	r2, #1
 800aba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800aba6:	2301      	movs	r3, #1
 800aba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800abac:	e01f      	b.n	800abee <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	695b      	ldr	r3, [r3, #20]
 800abc8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	699b      	ldr	r3, [r3, #24]
 800abce:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681d      	ldr	r5, [r3, #0]
 800abd4:	466c      	mov	r4, sp
 800abd6:	f107 0314 	add.w	r3, r7, #20
 800abda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800abde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800abe2:	f107 0308 	add.w	r3, r7, #8
 800abe6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800abe8:	4628      	mov	r0, r5
 800abea:	f003 f9ef 	bl	800dfcc <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800abf6:	4618      	mov	r0, r3
 800abf8:	f003 fac4 	bl	800e184 <SDMMC_CmdBlockLength>
 800abfc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800abfe:	6a3b      	ldr	r3, [r7, #32]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d00c      	beq.n	800ac1e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4a0a      	ldr	r2, [pc, #40]	; (800ac34 <HAL_SD_ConfigWideBusOperation+0x130>)
 800ac0a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac10:	6a3b      	ldr	r3, [r7, #32]
 800ac12:	431a      	orrs	r2, r3
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2201      	movs	r2, #1
 800ac22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800ac26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3728      	adds	r7, #40	; 0x28
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bdb0      	pop	{r4, r5, r7, pc}
 800ac32:	bf00      	nop
 800ac34:	004005ff 	.word	0x004005ff

0800ac38 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b086      	sub	sp, #24
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ac40:	2300      	movs	r3, #0
 800ac42:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ac44:	f107 030c 	add.w	r3, r7, #12
 800ac48:	4619      	mov	r1, r3
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 fa7e 	bl	800b14c <SD_SendStatus>
 800ac50:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d005      	beq.n	800ac64 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	431a      	orrs	r2, r3
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	0a5b      	lsrs	r3, r3, #9
 800ac68:	f003 030f 	and.w	r3, r3, #15
 800ac6c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ac6e:	693b      	ldr	r3, [r7, #16]
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3718      	adds	r7, #24
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac84:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac94:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ac96:	bf00      	nop
 800ac98:	3714      	adds	r7, #20
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr

0800aca2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aca2:	b580      	push	{r7, lr}
 800aca4:	b084      	sub	sp, #16
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acae:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acb4:	2b82      	cmp	r3, #130	; 0x82
 800acb6:	d111      	bne.n	800acdc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4618      	mov	r0, r3
 800acbe:	f003 fb0b 	bl	800e2d8 <SDMMC_CmdStopTransfer>
 800acc2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d008      	beq.n	800acdc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	431a      	orrs	r2, r3
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800acd6:	68f8      	ldr	r0, [r7, #12]
 800acd8:	f7ff fd3a 	bl	800a750 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f022 0208 	bic.w	r2, r2, #8
 800acea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f240 523a 	movw	r2, #1338	; 0x53a
 800acf4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2201      	movs	r2, #1
 800acfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2200      	movs	r2, #0
 800ad02:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800ad04:	68f8      	ldr	r0, [r7, #12]
 800ad06:	f003 ff7d 	bl	800ec04 <HAL_SD_RxCpltCallback>
#endif
}
 800ad0a:	bf00      	nop
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
	...

0800ad14 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b086      	sub	sp, #24
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad20:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f7fc f91c 	bl	8006f60 <HAL_DMA_GetError>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b02      	cmp	r3, #2
 800ad2c:	d03e      	beq.n	800adac <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad34:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad3c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d002      	beq.n	800ad4a <SD_DMAError+0x36>
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d12d      	bne.n	800ada6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a19      	ldr	r2, [pc, #100]	; (800adb4 <SD_DMAError+0xa0>)
 800ad50:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ad60:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad66:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800ad6e:	6978      	ldr	r0, [r7, #20]
 800ad70:	f7ff ff62 	bl	800ac38 <HAL_SD_GetCardState>
 800ad74:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	2b06      	cmp	r3, #6
 800ad7a:	d002      	beq.n	800ad82 <SD_DMAError+0x6e>
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	2b05      	cmp	r3, #5
 800ad80:	d10a      	bne.n	800ad98 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4618      	mov	r0, r3
 800ad88:	f003 faa6 	bl	800e2d8 <SDMMC_CmdStopTransfer>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad92:	431a      	orrs	r2, r3
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	2200      	movs	r2, #0
 800ada4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800ada6:	6978      	ldr	r0, [r7, #20]
 800ada8:	f7ff fcd2 	bl	800a750 <HAL_SD_ErrorCallback>
#endif
  }
}
 800adac:	bf00      	nop
 800adae:	3718      	adds	r7, #24
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	004005ff 	.word	0x004005ff

0800adb8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adc4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f240 523a 	movw	r2, #1338	; 0x53a
 800adce:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800add0:	68f8      	ldr	r0, [r7, #12]
 800add2:	f7ff ff31 	bl	800ac38 <HAL_SD_GetCardState>
 800add6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2201      	movs	r2, #1
 800addc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2200      	movs	r2, #0
 800ade4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	2b06      	cmp	r3, #6
 800adea:	d002      	beq.n	800adf2 <SD_DMATxAbort+0x3a>
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	2b05      	cmp	r3, #5
 800adf0:	d10a      	bne.n	800ae08 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	4618      	mov	r0, r3
 800adf8:	f003 fa6e 	bl	800e2d8 <SDMMC_CmdStopTransfer>
 800adfc:	4602      	mov	r2, r0
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae02:	431a      	orrs	r2, r3
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d103      	bne.n	800ae18 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ae10:	68f8      	ldr	r0, [r7, #12]
 800ae12:	f003 fee3 	bl	800ebdc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ae16:	e002      	b.n	800ae1e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ae18:	68f8      	ldr	r0, [r7, #12]
 800ae1a:	f7ff fc99 	bl	800a750 <HAL_SD_ErrorCallback>
}
 800ae1e:	bf00      	nop
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}

0800ae26 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800ae26:	b580      	push	{r7, lr}
 800ae28:	b084      	sub	sp, #16
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae32:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f240 523a 	movw	r2, #1338	; 0x53a
 800ae3c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	f7ff fefa 	bl	800ac38 <HAL_SD_GetCardState>
 800ae44:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2201      	movs	r2, #1
 800ae4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2200      	movs	r2, #0
 800ae52:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	2b06      	cmp	r3, #6
 800ae58:	d002      	beq.n	800ae60 <SD_DMARxAbort+0x3a>
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	2b05      	cmp	r3, #5
 800ae5e:	d10a      	bne.n	800ae76 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4618      	mov	r0, r3
 800ae66:	f003 fa37 	bl	800e2d8 <SDMMC_CmdStopTransfer>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae70:	431a      	orrs	r2, r3
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d103      	bne.n	800ae86 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ae7e:	68f8      	ldr	r0, [r7, #12]
 800ae80:	f003 feac 	bl	800ebdc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ae84:	e002      	b.n	800ae8c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ae86:	68f8      	ldr	r0, [r7, #12]
 800ae88:	f7ff fc62 	bl	800a750 <HAL_SD_ErrorCallback>
}
 800ae8c:	bf00      	nop
 800ae8e:	3710      	adds	r7, #16
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ae94:	b5b0      	push	{r4, r5, r7, lr}
 800ae96:	b094      	sub	sp, #80	; 0x50
 800ae98:	af04      	add	r7, sp, #16
 800ae9a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4618      	mov	r0, r3
 800aea6:	f003 f8e9 	bl	800e07c <SDMMC_GetPowerState>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d102      	bne.n	800aeb6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aeb0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800aeb4:	e0b8      	b.n	800b028 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeba:	2b03      	cmp	r3, #3
 800aebc:	d02f      	beq.n	800af1e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4618      	mov	r0, r3
 800aec4:	f003 fb13 	bl	800e4ee <SDMMC_CmdSendCID>
 800aec8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aeca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d001      	beq.n	800aed4 <SD_InitCard+0x40>
    {
      return errorstate;
 800aed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aed2:	e0a9      	b.n	800b028 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2100      	movs	r1, #0
 800aeda:	4618      	mov	r0, r3
 800aedc:	f003 f913 	bl	800e106 <SDMMC_GetResponse>
 800aee0:	4602      	mov	r2, r0
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	2104      	movs	r1, #4
 800aeec:	4618      	mov	r0, r3
 800aeee:	f003 f90a 	bl	800e106 <SDMMC_GetResponse>
 800aef2:	4602      	mov	r2, r0
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	2108      	movs	r1, #8
 800aefe:	4618      	mov	r0, r3
 800af00:	f003 f901 	bl	800e106 <SDMMC_GetResponse>
 800af04:	4602      	mov	r2, r0
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	210c      	movs	r1, #12
 800af10:	4618      	mov	r0, r3
 800af12:	f003 f8f8 	bl	800e106 <SDMMC_GetResponse>
 800af16:	4602      	mov	r2, r0
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af22:	2b03      	cmp	r3, #3
 800af24:	d00d      	beq.n	800af42 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f107 020e 	add.w	r2, r7, #14
 800af2e:	4611      	mov	r1, r2
 800af30:	4618      	mov	r0, r3
 800af32:	f003 fb19 	bl	800e568 <SDMMC_CmdSetRelAdd>
 800af36:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800af38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d001      	beq.n	800af42 <SD_InitCard+0xae>
    {
      return errorstate;
 800af3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af40:	e072      	b.n	800b028 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af46:	2b03      	cmp	r3, #3
 800af48:	d036      	beq.n	800afb8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800af4a:	89fb      	ldrh	r3, [r7, #14]
 800af4c:	461a      	mov	r2, r3
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af5a:	041b      	lsls	r3, r3, #16
 800af5c:	4619      	mov	r1, r3
 800af5e:	4610      	mov	r0, r2
 800af60:	f003 fae3 	bl	800e52a <SDMMC_CmdSendCSD>
 800af64:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800af66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d001      	beq.n	800af70 <SD_InitCard+0xdc>
    {
      return errorstate;
 800af6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af6e:	e05b      	b.n	800b028 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2100      	movs	r1, #0
 800af76:	4618      	mov	r0, r3
 800af78:	f003 f8c5 	bl	800e106 <SDMMC_GetResponse>
 800af7c:	4602      	mov	r2, r0
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	2104      	movs	r1, #4
 800af88:	4618      	mov	r0, r3
 800af8a:	f003 f8bc 	bl	800e106 <SDMMC_GetResponse>
 800af8e:	4602      	mov	r2, r0
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	2108      	movs	r1, #8
 800af9a:	4618      	mov	r0, r3
 800af9c:	f003 f8b3 	bl	800e106 <SDMMC_GetResponse>
 800afa0:	4602      	mov	r2, r0
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	210c      	movs	r1, #12
 800afac:	4618      	mov	r0, r3
 800afae:	f003 f8aa 	bl	800e106 <SDMMC_GetResponse>
 800afb2:	4602      	mov	r2, r0
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2104      	movs	r1, #4
 800afbe:	4618      	mov	r0, r3
 800afc0:	f003 f8a1 	bl	800e106 <SDMMC_GetResponse>
 800afc4:	4603      	mov	r3, r0
 800afc6:	0d1a      	lsrs	r2, r3, #20
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800afcc:	f107 0310 	add.w	r3, r7, #16
 800afd0:	4619      	mov	r1, r3
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f7ff fbc6 	bl	800a764 <HAL_SD_GetCardCSD>
 800afd8:	4603      	mov	r3, r0
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d002      	beq.n	800afe4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800afde:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800afe2:	e021      	b.n	800b028 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6819      	ldr	r1, [r3, #0]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afec:	041b      	lsls	r3, r3, #16
 800afee:	2200      	movs	r2, #0
 800aff0:	461c      	mov	r4, r3
 800aff2:	4615      	mov	r5, r2
 800aff4:	4622      	mov	r2, r4
 800aff6:	462b      	mov	r3, r5
 800aff8:	4608      	mov	r0, r1
 800affa:	f003 f98f 	bl	800e31c <SDMMC_CmdSelDesel>
 800affe:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b002:	2b00      	cmp	r3, #0
 800b004:	d001      	beq.n	800b00a <SD_InitCard+0x176>
  {
    return errorstate;
 800b006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b008:	e00e      	b.n	800b028 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681d      	ldr	r5, [r3, #0]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	466c      	mov	r4, sp
 800b012:	f103 0210 	add.w	r2, r3, #16
 800b016:	ca07      	ldmia	r2, {r0, r1, r2}
 800b018:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b01c:	3304      	adds	r3, #4
 800b01e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b020:	4628      	mov	r0, r5
 800b022:	f002 ffd3 	bl	800dfcc <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b026:	2300      	movs	r3, #0
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3740      	adds	r7, #64	; 0x40
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bdb0      	pop	{r4, r5, r7, pc}

0800b030 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b086      	sub	sp, #24
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b038:	2300      	movs	r3, #0
 800b03a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b03c:	2300      	movs	r3, #0
 800b03e:	617b      	str	r3, [r7, #20]
 800b040:	2300      	movs	r3, #0
 800b042:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4618      	mov	r0, r3
 800b04a:	f003 f98a 	bl	800e362 <SDMMC_CmdGoIdleState>
 800b04e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d001      	beq.n	800b05a <SD_PowerON+0x2a>
  {
    return errorstate;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	e072      	b.n	800b140 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4618      	mov	r0, r3
 800b060:	f003 f99d 	bl	800e39e <SDMMC_CmdOperCond>
 800b064:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00d      	beq.n	800b088 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4618      	mov	r0, r3
 800b078:	f003 f973 	bl	800e362 <SDMMC_CmdGoIdleState>
 800b07c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d004      	beq.n	800b08e <SD_PowerON+0x5e>
    {
      return errorstate;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	e05b      	b.n	800b140 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2201      	movs	r2, #1
 800b08c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b092:	2b01      	cmp	r3, #1
 800b094:	d137      	bne.n	800b106 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2100      	movs	r1, #0
 800b09c:	4618      	mov	r0, r3
 800b09e:	f003 f99d 	bl	800e3dc <SDMMC_CmdAppCommand>
 800b0a2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d02d      	beq.n	800b106 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b0aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b0ae:	e047      	b.n	800b140 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f003 f990 	bl	800e3dc <SDMMC_CmdAppCommand>
 800b0bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d001      	beq.n	800b0c8 <SD_PowerON+0x98>
    {
      return errorstate;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	e03b      	b.n	800b140 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	491e      	ldr	r1, [pc, #120]	; (800b148 <SD_PowerON+0x118>)
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f003 f9a6 	bl	800e420 <SDMMC_CmdAppOperCommand>
 800b0d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d002      	beq.n	800b0e2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b0dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b0e0:	e02e      	b.n	800b140 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	2100      	movs	r1, #0
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f003 f80c 	bl	800e106 <SDMMC_GetResponse>
 800b0ee:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	0fdb      	lsrs	r3, r3, #31
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d101      	bne.n	800b0fc <SD_PowerON+0xcc>
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	e000      	b.n	800b0fe <SD_PowerON+0xce>
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	613b      	str	r3, [r7, #16]

    count++;
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	3301      	adds	r3, #1
 800b104:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d802      	bhi.n	800b116 <SD_PowerON+0xe6>
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d0cc      	beq.n	800b0b0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d902      	bls.n	800b126 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b120:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b124:	e00c      	b.n	800b140 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d003      	beq.n	800b138 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2201      	movs	r2, #1
 800b134:	645a      	str	r2, [r3, #68]	; 0x44
 800b136:	e002      	b.n	800b13e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b13e:	2300      	movs	r3, #0
}
 800b140:	4618      	mov	r0, r3
 800b142:	3718      	adds	r7, #24
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}
 800b148:	c1100000 	.word	0xc1100000

0800b14c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d102      	bne.n	800b162 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b15c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b160:	e018      	b.n	800b194 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681a      	ldr	r2, [r3, #0]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b16a:	041b      	lsls	r3, r3, #16
 800b16c:	4619      	mov	r1, r3
 800b16e:	4610      	mov	r0, r2
 800b170:	f003 fa1b 	bl	800e5aa <SDMMC_CmdSendStatus>
 800b174:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d001      	beq.n	800b180 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	e009      	b.n	800b194 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	2100      	movs	r1, #0
 800b186:	4618      	mov	r0, r3
 800b188:	f002 ffbd 	bl	800e106 <SDMMC_GetResponse>
 800b18c:	4602      	mov	r2, r0
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b192:	2300      	movs	r3, #0
}
 800b194:	4618      	mov	r0, r3
 800b196:	3710      	adds	r7, #16
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b086      	sub	sp, #24
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	60fb      	str	r3, [r7, #12]
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	2100      	movs	r1, #0
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f002 ffa7 	bl	800e106 <SDMMC_GetResponse>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1c2:	d102      	bne.n	800b1ca <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b1c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b1c8:	e02f      	b.n	800b22a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b1ca:	f107 030c 	add.w	r3, r7, #12
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 f879 	bl	800b2c8 <SD_FindSCR>
 800b1d6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d001      	beq.n	800b1e2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	e023      	b.n	800b22a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d01c      	beq.n	800b226 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681a      	ldr	r2, [r3, #0]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1f4:	041b      	lsls	r3, r3, #16
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	4610      	mov	r0, r2
 800b1fa:	f003 f8ef 	bl	800e3dc <SDMMC_CmdAppCommand>
 800b1fe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d001      	beq.n	800b20a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	e00f      	b.n	800b22a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2102      	movs	r1, #2
 800b210:	4618      	mov	r0, r3
 800b212:	f003 f929 	bl	800e468 <SDMMC_CmdBusWidth>
 800b216:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d001      	beq.n	800b222 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	e003      	b.n	800b22a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b222:	2300      	movs	r3, #0
 800b224:	e001      	b.n	800b22a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b226:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3718      	adds	r7, #24
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}

0800b232 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b232:	b580      	push	{r7, lr}
 800b234:	b086      	sub	sp, #24
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b23a:	2300      	movs	r3, #0
 800b23c:	60fb      	str	r3, [r7, #12]
 800b23e:	2300      	movs	r3, #0
 800b240:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2100      	movs	r1, #0
 800b248:	4618      	mov	r0, r3
 800b24a:	f002 ff5c 	bl	800e106 <SDMMC_GetResponse>
 800b24e:	4603      	mov	r3, r0
 800b250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b254:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b258:	d102      	bne.n	800b260 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b25a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b25e:	e02f      	b.n	800b2c0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b260:	f107 030c 	add.w	r3, r7, #12
 800b264:	4619      	mov	r1, r3
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 f82e 	bl	800b2c8 <SD_FindSCR>
 800b26c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d001      	beq.n	800b278 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	e023      	b.n	800b2c0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d01c      	beq.n	800b2bc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b28a:	041b      	lsls	r3, r3, #16
 800b28c:	4619      	mov	r1, r3
 800b28e:	4610      	mov	r0, r2
 800b290:	f003 f8a4 	bl	800e3dc <SDMMC_CmdAppCommand>
 800b294:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d001      	beq.n	800b2a0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	e00f      	b.n	800b2c0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2100      	movs	r1, #0
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f003 f8de 	bl	800e468 <SDMMC_CmdBusWidth>
 800b2ac:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d001      	beq.n	800b2b8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	e003      	b.n	800b2c0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	e001      	b.n	800b2c0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b2bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3718      	adds	r7, #24
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b2c8:	b590      	push	{r4, r7, lr}
 800b2ca:	b08f      	sub	sp, #60	; 0x3c
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b2d2:	f7fa fbab 	bl	8005a2c <HAL_GetTick>
 800b2d6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b2dc:	2300      	movs	r3, #0
 800b2de:	60bb      	str	r3, [r7, #8]
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	2108      	movs	r1, #8
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f002 ff48 	bl	800e184 <SDMMC_CmdBlockLength>
 800b2f4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d001      	beq.n	800b300 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2fe:	e0b2      	b.n	800b466 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681a      	ldr	r2, [r3, #0]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b308:	041b      	lsls	r3, r3, #16
 800b30a:	4619      	mov	r1, r3
 800b30c:	4610      	mov	r0, r2
 800b30e:	f003 f865 	bl	800e3dc <SDMMC_CmdAppCommand>
 800b312:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b316:	2b00      	cmp	r3, #0
 800b318:	d001      	beq.n	800b31e <SD_FindSCR+0x56>
  {
    return errorstate;
 800b31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b31c:	e0a3      	b.n	800b466 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b31e:	f04f 33ff 	mov.w	r3, #4294967295
 800b322:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b324:	2308      	movs	r3, #8
 800b326:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b328:	2330      	movs	r3, #48	; 0x30
 800b32a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b32c:	2302      	movs	r3, #2
 800b32e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b330:	2300      	movs	r3, #0
 800b332:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b334:	2301      	movs	r3, #1
 800b336:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f107 0210 	add.w	r2, r7, #16
 800b340:	4611      	mov	r1, r2
 800b342:	4618      	mov	r0, r3
 800b344:	f002 fef2 	bl	800e12c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4618      	mov	r0, r3
 800b34e:	f003 f8ad 	bl	800e4ac <SDMMC_CmdSendSCR>
 800b352:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b356:	2b00      	cmp	r3, #0
 800b358:	d02a      	beq.n	800b3b0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800b35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b35c:	e083      	b.n	800b466 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d00f      	beq.n	800b38c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6819      	ldr	r1, [r3, #0]
 800b370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b372:	009b      	lsls	r3, r3, #2
 800b374:	f107 0208 	add.w	r2, r7, #8
 800b378:	18d4      	adds	r4, r2, r3
 800b37a:	4608      	mov	r0, r1
 800b37c:	f002 fe52 	bl	800e024 <SDMMC_ReadFIFO>
 800b380:	4603      	mov	r3, r0
 800b382:	6023      	str	r3, [r4, #0]
      index++;
 800b384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b386:	3301      	adds	r3, #1
 800b388:	637b      	str	r3, [r7, #52]	; 0x34
 800b38a:	e006      	b.n	800b39a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b396:	2b00      	cmp	r3, #0
 800b398:	d012      	beq.n	800b3c0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b39a:	f7fa fb47 	bl	8005a2c <HAL_GetTick>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a2:	1ad3      	subs	r3, r2, r3
 800b3a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3a8:	d102      	bne.n	800b3b0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b3aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3ae:	e05a      	b.n	800b466 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3b6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d0cf      	beq.n	800b35e <SD_FindSCR+0x96>
 800b3be:	e000      	b.n	800b3c2 <SD_FindSCR+0xfa>
      break;
 800b3c0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3c8:	f003 0308 	and.w	r3, r3, #8
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d005      	beq.n	800b3dc <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	2208      	movs	r2, #8
 800b3d6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b3d8:	2308      	movs	r3, #8
 800b3da:	e044      	b.n	800b466 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3e2:	f003 0302 	and.w	r3, r3, #2
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d005      	beq.n	800b3f6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2202      	movs	r2, #2
 800b3f0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b3f2:	2302      	movs	r3, #2
 800b3f4:	e037      	b.n	800b466 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3fc:	f003 0320 	and.w	r3, r3, #32
 800b400:	2b00      	cmp	r3, #0
 800b402:	d005      	beq.n	800b410 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	2220      	movs	r2, #32
 800b40a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b40c:	2320      	movs	r3, #32
 800b40e:	e02a      	b.n	800b466 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f240 523a 	movw	r2, #1338	; 0x53a
 800b418:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	061a      	lsls	r2, r3, #24
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	021b      	lsls	r3, r3, #8
 800b422:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b426:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	0a1b      	lsrs	r3, r3, #8
 800b42c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b430:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	0e1b      	lsrs	r3, r3, #24
 800b436:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b43a:	601a      	str	r2, [r3, #0]
    scr++;
 800b43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b43e:	3304      	adds	r3, #4
 800b440:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	061a      	lsls	r2, r3, #24
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	021b      	lsls	r3, r3, #8
 800b44a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b44e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	0a1b      	lsrs	r3, r3, #8
 800b454:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b458:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	0e1b      	lsrs	r3, r3, #24
 800b45e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b462:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	373c      	adds	r7, #60	; 0x3c
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd90      	pop	{r4, r7, pc}

0800b46e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b46e:	b580      	push	{r7, lr}
 800b470:	b086      	sub	sp, #24
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b47a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b480:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d03f      	beq.n	800b508 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b488:	2300      	movs	r3, #0
 800b48a:	617b      	str	r3, [r7, #20]
 800b48c:	e033      	b.n	800b4f6 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4618      	mov	r0, r3
 800b494:	f002 fdc6 	bl	800e024 <SDMMC_ReadFIFO>
 800b498:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	b2da      	uxtb	r2, r3
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	3b01      	subs	r3, #1
 800b4ac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	0a1b      	lsrs	r3, r3, #8
 800b4b2:	b2da      	uxtb	r2, r3
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	3b01      	subs	r3, #1
 800b4c2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	0c1b      	lsrs	r3, r3, #16
 800b4c8:	b2da      	uxtb	r2, r3
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	3b01      	subs	r3, #1
 800b4d8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	0e1b      	lsrs	r3, r3, #24
 800b4de:	b2da      	uxtb	r2, r3
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	3b01      	subs	r3, #1
 800b4ee:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	617b      	str	r3, [r7, #20]
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	2b07      	cmp	r3, #7
 800b4fa:	d9c8      	bls.n	800b48e <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	68fa      	ldr	r2, [r7, #12]
 800b500:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	693a      	ldr	r2, [r7, #16]
 800b506:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800b508:	bf00      	nop
 800b50a:	3718      	adds	r7, #24
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b086      	sub	sp, #24
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6a1b      	ldr	r3, [r3, #32]
 800b51c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b522:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d043      	beq.n	800b5b2 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b52a:	2300      	movs	r3, #0
 800b52c:	617b      	str	r3, [r7, #20]
 800b52e:	e037      	b.n	800b5a0 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	3301      	adds	r3, #1
 800b53a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	3b01      	subs	r3, #1
 800b540:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	781b      	ldrb	r3, [r3, #0]
 800b546:	021a      	lsls	r2, r3, #8
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	4313      	orrs	r3, r2
 800b54c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	3301      	adds	r3, #1
 800b552:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	3b01      	subs	r3, #1
 800b558:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	041a      	lsls	r2, r3, #16
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	4313      	orrs	r3, r2
 800b564:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	3301      	adds	r3, #1
 800b56a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	3b01      	subs	r3, #1
 800b570:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	061a      	lsls	r2, r3, #24
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	4313      	orrs	r3, r2
 800b57c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	3301      	adds	r3, #1
 800b582:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	3b01      	subs	r3, #1
 800b588:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f107 0208 	add.w	r2, r7, #8
 800b592:	4611      	mov	r1, r2
 800b594:	4618      	mov	r0, r3
 800b596:	f002 fd52 	bl	800e03e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	3301      	adds	r3, #1
 800b59e:	617b      	str	r3, [r7, #20]
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	2b07      	cmp	r3, #7
 800b5a4:	d9c4      	bls.n	800b530 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	68fa      	ldr	r2, [r7, #12]
 800b5aa:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	693a      	ldr	r2, [r7, #16]
 800b5b0:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b5b2:	bf00      	nop
 800b5b4:	3718      	adds	r7, #24
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}

0800b5ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b5ba:	b580      	push	{r7, lr}
 800b5bc:	b082      	sub	sp, #8
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d101      	bne.n	800b5cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	e049      	b.n	800b660 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d106      	bne.n	800b5e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f7fa f81d 	bl	8005620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2202      	movs	r2, #2
 800b5ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	3304      	adds	r3, #4
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	4610      	mov	r0, r2
 800b5fa:	f000 fe05 	bl	800c208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2201      	movs	r2, #1
 800b602:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2201      	movs	r2, #1
 800b60a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2201      	movs	r2, #1
 800b612:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2201      	movs	r2, #1
 800b61a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2201      	movs	r2, #1
 800b622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2201      	movs	r2, #1
 800b62a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2201      	movs	r2, #1
 800b632:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2201      	movs	r2, #1
 800b63a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2201      	movs	r2, #1
 800b642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2201      	movs	r2, #1
 800b64a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2201      	movs	r2, #1
 800b652:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2201      	movs	r2, #1
 800b65a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b65e:	2300      	movs	r3, #0
}
 800b660:	4618      	mov	r0, r3
 800b662:	3708      	adds	r7, #8
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b676:	b2db      	uxtb	r3, r3
 800b678:	2b01      	cmp	r3, #1
 800b67a:	d001      	beq.n	800b680 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b67c:	2301      	movs	r3, #1
 800b67e:	e04c      	b.n	800b71a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2202      	movs	r2, #2
 800b684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4a26      	ldr	r2, [pc, #152]	; (800b728 <HAL_TIM_Base_Start+0xc0>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d022      	beq.n	800b6d8 <HAL_TIM_Base_Start+0x70>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b69a:	d01d      	beq.n	800b6d8 <HAL_TIM_Base_Start+0x70>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4a22      	ldr	r2, [pc, #136]	; (800b72c <HAL_TIM_Base_Start+0xc4>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d018      	beq.n	800b6d8 <HAL_TIM_Base_Start+0x70>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4a21      	ldr	r2, [pc, #132]	; (800b730 <HAL_TIM_Base_Start+0xc8>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d013      	beq.n	800b6d8 <HAL_TIM_Base_Start+0x70>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4a1f      	ldr	r2, [pc, #124]	; (800b734 <HAL_TIM_Base_Start+0xcc>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d00e      	beq.n	800b6d8 <HAL_TIM_Base_Start+0x70>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4a1e      	ldr	r2, [pc, #120]	; (800b738 <HAL_TIM_Base_Start+0xd0>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d009      	beq.n	800b6d8 <HAL_TIM_Base_Start+0x70>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4a1c      	ldr	r2, [pc, #112]	; (800b73c <HAL_TIM_Base_Start+0xd4>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d004      	beq.n	800b6d8 <HAL_TIM_Base_Start+0x70>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4a1b      	ldr	r2, [pc, #108]	; (800b740 <HAL_TIM_Base_Start+0xd8>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d115      	bne.n	800b704 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	689a      	ldr	r2, [r3, #8]
 800b6de:	4b19      	ldr	r3, [pc, #100]	; (800b744 <HAL_TIM_Base_Start+0xdc>)
 800b6e0:	4013      	ands	r3, r2
 800b6e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2b06      	cmp	r3, #6
 800b6e8:	d015      	beq.n	800b716 <HAL_TIM_Base_Start+0xae>
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6f0:	d011      	beq.n	800b716 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f042 0201 	orr.w	r2, r2, #1
 800b700:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b702:	e008      	b.n	800b716 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f042 0201 	orr.w	r2, r2, #1
 800b712:	601a      	str	r2, [r3, #0]
 800b714:	e000      	b.n	800b718 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b716:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b718:	2300      	movs	r3, #0
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3714      	adds	r7, #20
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr
 800b726:	bf00      	nop
 800b728:	40010000 	.word	0x40010000
 800b72c:	40000400 	.word	0x40000400
 800b730:	40000800 	.word	0x40000800
 800b734:	40000c00 	.word	0x40000c00
 800b738:	40010400 	.word	0x40010400
 800b73c:	40014000 	.word	0x40014000
 800b740:	40001800 	.word	0x40001800
 800b744:	00010007 	.word	0x00010007

0800b748 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b748:	b480      	push	{r7}
 800b74a:	b085      	sub	sp, #20
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b756:	b2db      	uxtb	r3, r3
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d001      	beq.n	800b760 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b75c:	2301      	movs	r3, #1
 800b75e:	e054      	b.n	800b80a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2202      	movs	r2, #2
 800b764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	68da      	ldr	r2, [r3, #12]
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f042 0201 	orr.w	r2, r2, #1
 800b776:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4a26      	ldr	r2, [pc, #152]	; (800b818 <HAL_TIM_Base_Start_IT+0xd0>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d022      	beq.n	800b7c8 <HAL_TIM_Base_Start_IT+0x80>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b78a:	d01d      	beq.n	800b7c8 <HAL_TIM_Base_Start_IT+0x80>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a22      	ldr	r2, [pc, #136]	; (800b81c <HAL_TIM_Base_Start_IT+0xd4>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d018      	beq.n	800b7c8 <HAL_TIM_Base_Start_IT+0x80>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4a21      	ldr	r2, [pc, #132]	; (800b820 <HAL_TIM_Base_Start_IT+0xd8>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d013      	beq.n	800b7c8 <HAL_TIM_Base_Start_IT+0x80>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4a1f      	ldr	r2, [pc, #124]	; (800b824 <HAL_TIM_Base_Start_IT+0xdc>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d00e      	beq.n	800b7c8 <HAL_TIM_Base_Start_IT+0x80>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	4a1e      	ldr	r2, [pc, #120]	; (800b828 <HAL_TIM_Base_Start_IT+0xe0>)
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d009      	beq.n	800b7c8 <HAL_TIM_Base_Start_IT+0x80>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	4a1c      	ldr	r2, [pc, #112]	; (800b82c <HAL_TIM_Base_Start_IT+0xe4>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d004      	beq.n	800b7c8 <HAL_TIM_Base_Start_IT+0x80>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4a1b      	ldr	r2, [pc, #108]	; (800b830 <HAL_TIM_Base_Start_IT+0xe8>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d115      	bne.n	800b7f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	689a      	ldr	r2, [r3, #8]
 800b7ce:	4b19      	ldr	r3, [pc, #100]	; (800b834 <HAL_TIM_Base_Start_IT+0xec>)
 800b7d0:	4013      	ands	r3, r2
 800b7d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2b06      	cmp	r3, #6
 800b7d8:	d015      	beq.n	800b806 <HAL_TIM_Base_Start_IT+0xbe>
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7e0:	d011      	beq.n	800b806 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f042 0201 	orr.w	r2, r2, #1
 800b7f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7f2:	e008      	b.n	800b806 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f042 0201 	orr.w	r2, r2, #1
 800b802:	601a      	str	r2, [r3, #0]
 800b804:	e000      	b.n	800b808 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b806:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b808:	2300      	movs	r3, #0
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3714      	adds	r7, #20
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr
 800b816:	bf00      	nop
 800b818:	40010000 	.word	0x40010000
 800b81c:	40000400 	.word	0x40000400
 800b820:	40000800 	.word	0x40000800
 800b824:	40000c00 	.word	0x40000c00
 800b828:	40010400 	.word	0x40010400
 800b82c:	40014000 	.word	0x40014000
 800b830:	40001800 	.word	0x40001800
 800b834:	00010007 	.word	0x00010007

0800b838 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d101      	bne.n	800b84a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800b846:	2301      	movs	r3, #1
 800b848:	e049      	b.n	800b8de <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b850:	b2db      	uxtb	r3, r3
 800b852:	2b00      	cmp	r3, #0
 800b854:	d106      	bne.n	800b864 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2200      	movs	r2, #0
 800b85a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f000 f841 	bl	800b8e6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2202      	movs	r2, #2
 800b868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681a      	ldr	r2, [r3, #0]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	3304      	adds	r3, #4
 800b874:	4619      	mov	r1, r3
 800b876:	4610      	mov	r0, r2
 800b878:	f000 fcc6 	bl	800c208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2201      	movs	r2, #1
 800b880:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2201      	movs	r2, #1
 800b888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2201      	movs	r2, #1
 800b890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2201      	movs	r2, #1
 800b898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2201      	movs	r2, #1
 800b8a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2201      	movs	r2, #1
 800b8c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b8dc:	2300      	movs	r3, #0
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3708      	adds	r7, #8
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}

0800b8e6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800b8e6:	b480      	push	{r7}
 800b8e8:	b083      	sub	sp, #12
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800b8ee:	bf00      	nop
 800b8f0:	370c      	adds	r7, #12
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr
	...

0800b8fc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b084      	sub	sp, #16
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b906:	2300      	movs	r3, #0
 800b908:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d104      	bne.n	800b91a <HAL_TIM_IC_Start_IT+0x1e>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b916:	b2db      	uxtb	r3, r3
 800b918:	e023      	b.n	800b962 <HAL_TIM_IC_Start_IT+0x66>
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	2b04      	cmp	r3, #4
 800b91e:	d104      	bne.n	800b92a <HAL_TIM_IC_Start_IT+0x2e>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b926:	b2db      	uxtb	r3, r3
 800b928:	e01b      	b.n	800b962 <HAL_TIM_IC_Start_IT+0x66>
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	2b08      	cmp	r3, #8
 800b92e:	d104      	bne.n	800b93a <HAL_TIM_IC_Start_IT+0x3e>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b936:	b2db      	uxtb	r3, r3
 800b938:	e013      	b.n	800b962 <HAL_TIM_IC_Start_IT+0x66>
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	2b0c      	cmp	r3, #12
 800b93e:	d104      	bne.n	800b94a <HAL_TIM_IC_Start_IT+0x4e>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b946:	b2db      	uxtb	r3, r3
 800b948:	e00b      	b.n	800b962 <HAL_TIM_IC_Start_IT+0x66>
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	2b10      	cmp	r3, #16
 800b94e:	d104      	bne.n	800b95a <HAL_TIM_IC_Start_IT+0x5e>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b956:	b2db      	uxtb	r3, r3
 800b958:	e003      	b.n	800b962 <HAL_TIM_IC_Start_IT+0x66>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b960:	b2db      	uxtb	r3, r3
 800b962:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d104      	bne.n	800b974 <HAL_TIM_IC_Start_IT+0x78>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b970:	b2db      	uxtb	r3, r3
 800b972:	e013      	b.n	800b99c <HAL_TIM_IC_Start_IT+0xa0>
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	2b04      	cmp	r3, #4
 800b978:	d104      	bne.n	800b984 <HAL_TIM_IC_Start_IT+0x88>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b980:	b2db      	uxtb	r3, r3
 800b982:	e00b      	b.n	800b99c <HAL_TIM_IC_Start_IT+0xa0>
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	2b08      	cmp	r3, #8
 800b988:	d104      	bne.n	800b994 <HAL_TIM_IC_Start_IT+0x98>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b990:	b2db      	uxtb	r3, r3
 800b992:	e003      	b.n	800b99c <HAL_TIM_IC_Start_IT+0xa0>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800b99e:	7bbb      	ldrb	r3, [r7, #14]
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d102      	bne.n	800b9aa <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800b9a4:	7b7b      	ldrb	r3, [r7, #13]
 800b9a6:	2b01      	cmp	r3, #1
 800b9a8:	d001      	beq.n	800b9ae <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	e0e2      	b.n	800bb74 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d104      	bne.n	800b9be <HAL_TIM_IC_Start_IT+0xc2>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2202      	movs	r2, #2
 800b9b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b9bc:	e023      	b.n	800ba06 <HAL_TIM_IC_Start_IT+0x10a>
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	2b04      	cmp	r3, #4
 800b9c2:	d104      	bne.n	800b9ce <HAL_TIM_IC_Start_IT+0xd2>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2202      	movs	r2, #2
 800b9c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b9cc:	e01b      	b.n	800ba06 <HAL_TIM_IC_Start_IT+0x10a>
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	2b08      	cmp	r3, #8
 800b9d2:	d104      	bne.n	800b9de <HAL_TIM_IC_Start_IT+0xe2>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2202      	movs	r2, #2
 800b9d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b9dc:	e013      	b.n	800ba06 <HAL_TIM_IC_Start_IT+0x10a>
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	2b0c      	cmp	r3, #12
 800b9e2:	d104      	bne.n	800b9ee <HAL_TIM_IC_Start_IT+0xf2>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2202      	movs	r2, #2
 800b9e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b9ec:	e00b      	b.n	800ba06 <HAL_TIM_IC_Start_IT+0x10a>
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	2b10      	cmp	r3, #16
 800b9f2:	d104      	bne.n	800b9fe <HAL_TIM_IC_Start_IT+0x102>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2202      	movs	r2, #2
 800b9f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b9fc:	e003      	b.n	800ba06 <HAL_TIM_IC_Start_IT+0x10a>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2202      	movs	r2, #2
 800ba02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d104      	bne.n	800ba16 <HAL_TIM_IC_Start_IT+0x11a>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2202      	movs	r2, #2
 800ba10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba14:	e013      	b.n	800ba3e <HAL_TIM_IC_Start_IT+0x142>
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	2b04      	cmp	r3, #4
 800ba1a:	d104      	bne.n	800ba26 <HAL_TIM_IC_Start_IT+0x12a>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2202      	movs	r2, #2
 800ba20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba24:	e00b      	b.n	800ba3e <HAL_TIM_IC_Start_IT+0x142>
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	2b08      	cmp	r3, #8
 800ba2a:	d104      	bne.n	800ba36 <HAL_TIM_IC_Start_IT+0x13a>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2202      	movs	r2, #2
 800ba30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ba34:	e003      	b.n	800ba3e <HAL_TIM_IC_Start_IT+0x142>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2202      	movs	r2, #2
 800ba3a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	2b0c      	cmp	r3, #12
 800ba42:	d841      	bhi.n	800bac8 <HAL_TIM_IC_Start_IT+0x1cc>
 800ba44:	a201      	add	r2, pc, #4	; (adr r2, 800ba4c <HAL_TIM_IC_Start_IT+0x150>)
 800ba46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba4a:	bf00      	nop
 800ba4c:	0800ba81 	.word	0x0800ba81
 800ba50:	0800bac9 	.word	0x0800bac9
 800ba54:	0800bac9 	.word	0x0800bac9
 800ba58:	0800bac9 	.word	0x0800bac9
 800ba5c:	0800ba93 	.word	0x0800ba93
 800ba60:	0800bac9 	.word	0x0800bac9
 800ba64:	0800bac9 	.word	0x0800bac9
 800ba68:	0800bac9 	.word	0x0800bac9
 800ba6c:	0800baa5 	.word	0x0800baa5
 800ba70:	0800bac9 	.word	0x0800bac9
 800ba74:	0800bac9 	.word	0x0800bac9
 800ba78:	0800bac9 	.word	0x0800bac9
 800ba7c:	0800bab7 	.word	0x0800bab7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	68da      	ldr	r2, [r3, #12]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f042 0202 	orr.w	r2, r2, #2
 800ba8e:	60da      	str	r2, [r3, #12]
      break;
 800ba90:	e01d      	b.n	800bace <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	68da      	ldr	r2, [r3, #12]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f042 0204 	orr.w	r2, r2, #4
 800baa0:	60da      	str	r2, [r3, #12]
      break;
 800baa2:	e014      	b.n	800bace <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	68da      	ldr	r2, [r3, #12]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f042 0208 	orr.w	r2, r2, #8
 800bab2:	60da      	str	r2, [r3, #12]
      break;
 800bab4:	e00b      	b.n	800bace <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	68da      	ldr	r2, [r3, #12]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f042 0210 	orr.w	r2, r2, #16
 800bac4:	60da      	str	r2, [r3, #12]
      break;
 800bac6:	e002      	b.n	800bace <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800bac8:	2301      	movs	r3, #1
 800baca:	73fb      	strb	r3, [r7, #15]
      break;
 800bacc:	bf00      	nop
  }

  if (status == HAL_OK)
 800bace:	7bfb      	ldrb	r3, [r7, #15]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d14e      	bne.n	800bb72 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	2201      	movs	r2, #1
 800bada:	6839      	ldr	r1, [r7, #0]
 800badc:	4618      	mov	r0, r3
 800bade:	f000 fe8b 	bl	800c7f8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a25      	ldr	r2, [pc, #148]	; (800bb7c <HAL_TIM_IC_Start_IT+0x280>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d022      	beq.n	800bb32 <HAL_TIM_IC_Start_IT+0x236>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baf4:	d01d      	beq.n	800bb32 <HAL_TIM_IC_Start_IT+0x236>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4a21      	ldr	r2, [pc, #132]	; (800bb80 <HAL_TIM_IC_Start_IT+0x284>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d018      	beq.n	800bb32 <HAL_TIM_IC_Start_IT+0x236>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4a1f      	ldr	r2, [pc, #124]	; (800bb84 <HAL_TIM_IC_Start_IT+0x288>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d013      	beq.n	800bb32 <HAL_TIM_IC_Start_IT+0x236>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4a1e      	ldr	r2, [pc, #120]	; (800bb88 <HAL_TIM_IC_Start_IT+0x28c>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d00e      	beq.n	800bb32 <HAL_TIM_IC_Start_IT+0x236>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	4a1c      	ldr	r2, [pc, #112]	; (800bb8c <HAL_TIM_IC_Start_IT+0x290>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d009      	beq.n	800bb32 <HAL_TIM_IC_Start_IT+0x236>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4a1b      	ldr	r2, [pc, #108]	; (800bb90 <HAL_TIM_IC_Start_IT+0x294>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d004      	beq.n	800bb32 <HAL_TIM_IC_Start_IT+0x236>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	4a19      	ldr	r2, [pc, #100]	; (800bb94 <HAL_TIM_IC_Start_IT+0x298>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d115      	bne.n	800bb5e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	689a      	ldr	r2, [r3, #8]
 800bb38:	4b17      	ldr	r3, [pc, #92]	; (800bb98 <HAL_TIM_IC_Start_IT+0x29c>)
 800bb3a:	4013      	ands	r3, r2
 800bb3c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	2b06      	cmp	r3, #6
 800bb42:	d015      	beq.n	800bb70 <HAL_TIM_IC_Start_IT+0x274>
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb4a:	d011      	beq.n	800bb70 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f042 0201 	orr.w	r2, r2, #1
 800bb5a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb5c:	e008      	b.n	800bb70 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f042 0201 	orr.w	r2, r2, #1
 800bb6c:	601a      	str	r2, [r3, #0]
 800bb6e:	e000      	b.n	800bb72 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb70:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800bb72:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3710      	adds	r7, #16
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}
 800bb7c:	40010000 	.word	0x40010000
 800bb80:	40000400 	.word	0x40000400
 800bb84:	40000800 	.word	0x40000800
 800bb88:	40000c00 	.word	0x40000c00
 800bb8c:	40010400 	.word	0x40010400
 800bb90:	40014000 	.word	0x40014000
 800bb94:	40001800 	.word	0x40001800
 800bb98:	00010007 	.word	0x00010007

0800bb9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	691b      	ldr	r3, [r3, #16]
 800bbaa:	f003 0302 	and.w	r3, r3, #2
 800bbae:	2b02      	cmp	r3, #2
 800bbb0:	d122      	bne.n	800bbf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	68db      	ldr	r3, [r3, #12]
 800bbb8:	f003 0302 	and.w	r3, r3, #2
 800bbbc:	2b02      	cmp	r3, #2
 800bbbe:	d11b      	bne.n	800bbf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f06f 0202 	mvn.w	r2, #2
 800bbc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2201      	movs	r2, #1
 800bbce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	699b      	ldr	r3, [r3, #24]
 800bbd6:	f003 0303 	and.w	r3, r3, #3
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d003      	beq.n	800bbe6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f7f8 fc16 	bl	8004410 <HAL_TIM_IC_CaptureCallback>
 800bbe4:	e005      	b.n	800bbf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 fae4 	bl	800c1b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f000 faeb 	bl	800c1c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	691b      	ldr	r3, [r3, #16]
 800bbfe:	f003 0304 	and.w	r3, r3, #4
 800bc02:	2b04      	cmp	r3, #4
 800bc04:	d122      	bne.n	800bc4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	f003 0304 	and.w	r3, r3, #4
 800bc10:	2b04      	cmp	r3, #4
 800bc12:	d11b      	bne.n	800bc4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f06f 0204 	mvn.w	r2, #4
 800bc1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2202      	movs	r2, #2
 800bc22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	699b      	ldr	r3, [r3, #24]
 800bc2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d003      	beq.n	800bc3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f7f8 fbec 	bl	8004410 <HAL_TIM_IC_CaptureCallback>
 800bc38:	e005      	b.n	800bc46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 faba 	bl	800c1b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f000 fac1 	bl	800c1c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	691b      	ldr	r3, [r3, #16]
 800bc52:	f003 0308 	and.w	r3, r3, #8
 800bc56:	2b08      	cmp	r3, #8
 800bc58:	d122      	bne.n	800bca0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	68db      	ldr	r3, [r3, #12]
 800bc60:	f003 0308 	and.w	r3, r3, #8
 800bc64:	2b08      	cmp	r3, #8
 800bc66:	d11b      	bne.n	800bca0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f06f 0208 	mvn.w	r2, #8
 800bc70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2204      	movs	r2, #4
 800bc76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	69db      	ldr	r3, [r3, #28]
 800bc7e:	f003 0303 	and.w	r3, r3, #3
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d003      	beq.n	800bc8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f7f8 fbc2 	bl	8004410 <HAL_TIM_IC_CaptureCallback>
 800bc8c:	e005      	b.n	800bc9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f000 fa90 	bl	800c1b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f000 fa97 	bl	800c1c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	691b      	ldr	r3, [r3, #16]
 800bca6:	f003 0310 	and.w	r3, r3, #16
 800bcaa:	2b10      	cmp	r3, #16
 800bcac:	d122      	bne.n	800bcf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	68db      	ldr	r3, [r3, #12]
 800bcb4:	f003 0310 	and.w	r3, r3, #16
 800bcb8:	2b10      	cmp	r3, #16
 800bcba:	d11b      	bne.n	800bcf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f06f 0210 	mvn.w	r2, #16
 800bcc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2208      	movs	r2, #8
 800bcca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	69db      	ldr	r3, [r3, #28]
 800bcd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d003      	beq.n	800bce2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f7f8 fb98 	bl	8004410 <HAL_TIM_IC_CaptureCallback>
 800bce0:	e005      	b.n	800bcee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 fa66 	bl	800c1b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f000 fa6d 	bl	800c1c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	691b      	ldr	r3, [r3, #16]
 800bcfa:	f003 0301 	and.w	r3, r3, #1
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d10e      	bne.n	800bd20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	f003 0301 	and.w	r3, r3, #1
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d107      	bne.n	800bd20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f06f 0201 	mvn.w	r2, #1
 800bd18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f7f8 fb0e 	bl	800433c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	691b      	ldr	r3, [r3, #16]
 800bd26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd2a:	2b80      	cmp	r3, #128	; 0x80
 800bd2c:	d10e      	bne.n	800bd4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	68db      	ldr	r3, [r3, #12]
 800bd34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd38:	2b80      	cmp	r3, #128	; 0x80
 800bd3a:	d107      	bne.n	800bd4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bd44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 fe14 	bl	800c974 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	691b      	ldr	r3, [r3, #16]
 800bd52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd5a:	d10e      	bne.n	800bd7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	68db      	ldr	r3, [r3, #12]
 800bd62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd66:	2b80      	cmp	r3, #128	; 0x80
 800bd68:	d107      	bne.n	800bd7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bd72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f000 fe07 	bl	800c988 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	691b      	ldr	r3, [r3, #16]
 800bd80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd84:	2b40      	cmp	r3, #64	; 0x40
 800bd86:	d10e      	bne.n	800bda6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	68db      	ldr	r3, [r3, #12]
 800bd8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd92:	2b40      	cmp	r3, #64	; 0x40
 800bd94:	d107      	bne.n	800bda6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bd9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 fa1b 	bl	800c1dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	691b      	ldr	r3, [r3, #16]
 800bdac:	f003 0320 	and.w	r3, r3, #32
 800bdb0:	2b20      	cmp	r3, #32
 800bdb2:	d10e      	bne.n	800bdd2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	68db      	ldr	r3, [r3, #12]
 800bdba:	f003 0320 	and.w	r3, r3, #32
 800bdbe:	2b20      	cmp	r3, #32
 800bdc0:	d107      	bne.n	800bdd2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f06f 0220 	mvn.w	r2, #32
 800bdca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f000 fdc7 	bl	800c960 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bdd2:	bf00      	nop
 800bdd4:	3708      	adds	r7, #8
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}

0800bdda <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b086      	sub	sp, #24
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	60f8      	str	r0, [r7, #12]
 800bde2:	60b9      	str	r1, [r7, #8]
 800bde4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bde6:	2300      	movs	r3, #0
 800bde8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d101      	bne.n	800bdf8 <HAL_TIM_IC_ConfigChannel+0x1e>
 800bdf4:	2302      	movs	r3, #2
 800bdf6:	e088      	b.n	800bf0a <HAL_TIM_IC_ConfigChannel+0x130>
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d11b      	bne.n	800be3e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	6818      	ldr	r0, [r3, #0]
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	6819      	ldr	r1, [r3, #0]
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	685a      	ldr	r2, [r3, #4]
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	68db      	ldr	r3, [r3, #12]
 800be16:	f000 fb2b 	bl	800c470 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	699a      	ldr	r2, [r3, #24]
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f022 020c 	bic.w	r2, r2, #12
 800be28:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	6999      	ldr	r1, [r3, #24]
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	689a      	ldr	r2, [r3, #8]
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	430a      	orrs	r2, r1
 800be3a:	619a      	str	r2, [r3, #24]
 800be3c:	e060      	b.n	800bf00 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2b04      	cmp	r3, #4
 800be42:	d11c      	bne.n	800be7e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	6818      	ldr	r0, [r3, #0]
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	6819      	ldr	r1, [r3, #0]
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	685a      	ldr	r2, [r3, #4]
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	68db      	ldr	r3, [r3, #12]
 800be54:	f000 fbaf 	bl	800c5b6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	699a      	ldr	r2, [r3, #24]
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800be66:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	6999      	ldr	r1, [r3, #24]
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	689b      	ldr	r3, [r3, #8]
 800be72:	021a      	lsls	r2, r3, #8
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	430a      	orrs	r2, r1
 800be7a:	619a      	str	r2, [r3, #24]
 800be7c:	e040      	b.n	800bf00 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2b08      	cmp	r3, #8
 800be82:	d11b      	bne.n	800bebc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	6818      	ldr	r0, [r3, #0]
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	6819      	ldr	r1, [r3, #0]
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	685a      	ldr	r2, [r3, #4]
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	68db      	ldr	r3, [r3, #12]
 800be94:	f000 fbfc 	bl	800c690 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	69da      	ldr	r2, [r3, #28]
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f022 020c 	bic.w	r2, r2, #12
 800bea6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	69d9      	ldr	r1, [r3, #28]
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	689a      	ldr	r2, [r3, #8]
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	430a      	orrs	r2, r1
 800beb8:	61da      	str	r2, [r3, #28]
 800beba:	e021      	b.n	800bf00 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2b0c      	cmp	r3, #12
 800bec0:	d11c      	bne.n	800befc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	6818      	ldr	r0, [r3, #0]
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	6819      	ldr	r1, [r3, #0]
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	685a      	ldr	r2, [r3, #4]
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	68db      	ldr	r3, [r3, #12]
 800bed2:	f000 fc19 	bl	800c708 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	69da      	ldr	r2, [r3, #28]
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800bee4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	69d9      	ldr	r1, [r3, #28]
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	689b      	ldr	r3, [r3, #8]
 800bef0:	021a      	lsls	r2, r3, #8
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	430a      	orrs	r2, r1
 800bef8:	61da      	str	r2, [r3, #28]
 800befa:	e001      	b.n	800bf00 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800befc:	2301      	movs	r3, #1
 800befe:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2200      	movs	r2, #0
 800bf04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bf08:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3718      	adds	r7, #24
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
	...

0800bf14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b084      	sub	sp, #16
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d101      	bne.n	800bf30 <HAL_TIM_ConfigClockSource+0x1c>
 800bf2c:	2302      	movs	r3, #2
 800bf2e:	e0b4      	b.n	800c09a <HAL_TIM_ConfigClockSource+0x186>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2201      	movs	r2, #1
 800bf34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2202      	movs	r2, #2
 800bf3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	689b      	ldr	r3, [r3, #8]
 800bf46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bf48:	68ba      	ldr	r2, [r7, #8]
 800bf4a:	4b56      	ldr	r3, [pc, #344]	; (800c0a4 <HAL_TIM_ConfigClockSource+0x190>)
 800bf4c:	4013      	ands	r3, r2
 800bf4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	68ba      	ldr	r2, [r7, #8]
 800bf5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf68:	d03e      	beq.n	800bfe8 <HAL_TIM_ConfigClockSource+0xd4>
 800bf6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf6e:	f200 8087 	bhi.w	800c080 <HAL_TIM_ConfigClockSource+0x16c>
 800bf72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf76:	f000 8086 	beq.w	800c086 <HAL_TIM_ConfigClockSource+0x172>
 800bf7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf7e:	d87f      	bhi.n	800c080 <HAL_TIM_ConfigClockSource+0x16c>
 800bf80:	2b70      	cmp	r3, #112	; 0x70
 800bf82:	d01a      	beq.n	800bfba <HAL_TIM_ConfigClockSource+0xa6>
 800bf84:	2b70      	cmp	r3, #112	; 0x70
 800bf86:	d87b      	bhi.n	800c080 <HAL_TIM_ConfigClockSource+0x16c>
 800bf88:	2b60      	cmp	r3, #96	; 0x60
 800bf8a:	d050      	beq.n	800c02e <HAL_TIM_ConfigClockSource+0x11a>
 800bf8c:	2b60      	cmp	r3, #96	; 0x60
 800bf8e:	d877      	bhi.n	800c080 <HAL_TIM_ConfigClockSource+0x16c>
 800bf90:	2b50      	cmp	r3, #80	; 0x50
 800bf92:	d03c      	beq.n	800c00e <HAL_TIM_ConfigClockSource+0xfa>
 800bf94:	2b50      	cmp	r3, #80	; 0x50
 800bf96:	d873      	bhi.n	800c080 <HAL_TIM_ConfigClockSource+0x16c>
 800bf98:	2b40      	cmp	r3, #64	; 0x40
 800bf9a:	d058      	beq.n	800c04e <HAL_TIM_ConfigClockSource+0x13a>
 800bf9c:	2b40      	cmp	r3, #64	; 0x40
 800bf9e:	d86f      	bhi.n	800c080 <HAL_TIM_ConfigClockSource+0x16c>
 800bfa0:	2b30      	cmp	r3, #48	; 0x30
 800bfa2:	d064      	beq.n	800c06e <HAL_TIM_ConfigClockSource+0x15a>
 800bfa4:	2b30      	cmp	r3, #48	; 0x30
 800bfa6:	d86b      	bhi.n	800c080 <HAL_TIM_ConfigClockSource+0x16c>
 800bfa8:	2b20      	cmp	r3, #32
 800bfaa:	d060      	beq.n	800c06e <HAL_TIM_ConfigClockSource+0x15a>
 800bfac:	2b20      	cmp	r3, #32
 800bfae:	d867      	bhi.n	800c080 <HAL_TIM_ConfigClockSource+0x16c>
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d05c      	beq.n	800c06e <HAL_TIM_ConfigClockSource+0x15a>
 800bfb4:	2b10      	cmp	r3, #16
 800bfb6:	d05a      	beq.n	800c06e <HAL_TIM_ConfigClockSource+0x15a>
 800bfb8:	e062      	b.n	800c080 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6818      	ldr	r0, [r3, #0]
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	6899      	ldr	r1, [r3, #8]
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	685a      	ldr	r2, [r3, #4]
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	68db      	ldr	r3, [r3, #12]
 800bfca:	f000 fbf5 	bl	800c7b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	689b      	ldr	r3, [r3, #8]
 800bfd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bfdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	68ba      	ldr	r2, [r7, #8]
 800bfe4:	609a      	str	r2, [r3, #8]
      break;
 800bfe6:	e04f      	b.n	800c088 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6818      	ldr	r0, [r3, #0]
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	6899      	ldr	r1, [r3, #8]
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	685a      	ldr	r2, [r3, #4]
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	f000 fbde 	bl	800c7b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	689a      	ldr	r2, [r3, #8]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c00a:	609a      	str	r2, [r3, #8]
      break;
 800c00c:	e03c      	b.n	800c088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6818      	ldr	r0, [r3, #0]
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	6859      	ldr	r1, [r3, #4]
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	461a      	mov	r2, r3
 800c01c:	f000 fa9c 	bl	800c558 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	2150      	movs	r1, #80	; 0x50
 800c026:	4618      	mov	r0, r3
 800c028:	f000 fbab 	bl	800c782 <TIM_ITRx_SetConfig>
      break;
 800c02c:	e02c      	b.n	800c088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6818      	ldr	r0, [r3, #0]
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	6859      	ldr	r1, [r3, #4]
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	68db      	ldr	r3, [r3, #12]
 800c03a:	461a      	mov	r2, r3
 800c03c:	f000 faf8 	bl	800c630 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	2160      	movs	r1, #96	; 0x60
 800c046:	4618      	mov	r0, r3
 800c048:	f000 fb9b 	bl	800c782 <TIM_ITRx_SetConfig>
      break;
 800c04c:	e01c      	b.n	800c088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6818      	ldr	r0, [r3, #0]
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	6859      	ldr	r1, [r3, #4]
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	68db      	ldr	r3, [r3, #12]
 800c05a:	461a      	mov	r2, r3
 800c05c:	f000 fa7c 	bl	800c558 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	2140      	movs	r1, #64	; 0x40
 800c066:	4618      	mov	r0, r3
 800c068:	f000 fb8b 	bl	800c782 <TIM_ITRx_SetConfig>
      break;
 800c06c:	e00c      	b.n	800c088 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	4619      	mov	r1, r3
 800c078:	4610      	mov	r0, r2
 800c07a:	f000 fb82 	bl	800c782 <TIM_ITRx_SetConfig>
      break;
 800c07e:	e003      	b.n	800c088 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c080:	2301      	movs	r3, #1
 800c082:	73fb      	strb	r3, [r7, #15]
      break;
 800c084:	e000      	b.n	800c088 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c086:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2201      	movs	r2, #1
 800c08c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2200      	movs	r2, #0
 800c094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c098:	7bfb      	ldrb	r3, [r7, #15]
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3710      	adds	r7, #16
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	fffeff88 	.word	0xfffeff88

0800c0a8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b082      	sub	sp, #8
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d101      	bne.n	800c0c0 <HAL_TIM_SlaveConfigSynchro+0x18>
 800c0bc:	2302      	movs	r3, #2
 800c0be:	e031      	b.n	800c124 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2202      	movs	r2, #2
 800c0cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800c0d0:	6839      	ldr	r1, [r7, #0]
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 f938 	bl	800c348 <TIM_SlaveTimer_SetConfig>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d009      	beq.n	800c0f2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	e018      	b.n	800c124 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	68da      	ldr	r2, [r3, #12]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c100:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	68da      	ldr	r2, [r3, #12]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c110:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2201      	movs	r2, #1
 800c116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2200      	movs	r2, #0
 800c11e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c122:	2300      	movs	r3, #0
}
 800c124:	4618      	mov	r0, r3
 800c126:	3708      	adds	r7, #8
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b085      	sub	sp, #20
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800c136:	2300      	movs	r3, #0
 800c138:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	2b0c      	cmp	r3, #12
 800c13e:	d831      	bhi.n	800c1a4 <HAL_TIM_ReadCapturedValue+0x78>
 800c140:	a201      	add	r2, pc, #4	; (adr r2, 800c148 <HAL_TIM_ReadCapturedValue+0x1c>)
 800c142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c146:	bf00      	nop
 800c148:	0800c17d 	.word	0x0800c17d
 800c14c:	0800c1a5 	.word	0x0800c1a5
 800c150:	0800c1a5 	.word	0x0800c1a5
 800c154:	0800c1a5 	.word	0x0800c1a5
 800c158:	0800c187 	.word	0x0800c187
 800c15c:	0800c1a5 	.word	0x0800c1a5
 800c160:	0800c1a5 	.word	0x0800c1a5
 800c164:	0800c1a5 	.word	0x0800c1a5
 800c168:	0800c191 	.word	0x0800c191
 800c16c:	0800c1a5 	.word	0x0800c1a5
 800c170:	0800c1a5 	.word	0x0800c1a5
 800c174:	0800c1a5 	.word	0x0800c1a5
 800c178:	0800c19b 	.word	0x0800c19b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c182:	60fb      	str	r3, [r7, #12]

      break;
 800c184:	e00f      	b.n	800c1a6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c18c:	60fb      	str	r3, [r7, #12]

      break;
 800c18e:	e00a      	b.n	800c1a6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c196:	60fb      	str	r3, [r7, #12]

      break;
 800c198:	e005      	b.n	800c1a6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1a0:	60fb      	str	r3, [r7, #12]

      break;
 800c1a2:	e000      	b.n	800c1a6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800c1a4:	bf00      	nop
  }

  return tmpreg;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3714      	adds	r7, #20
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr

0800c1b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c1bc:	bf00      	nop
 800c1be:	370c      	adds	r7, #12
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c6:	4770      	bx	lr

0800c1c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b083      	sub	sp, #12
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c1d0:	bf00      	nop
 800c1d2:	370c      	adds	r7, #12
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr

0800c1dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b083      	sub	sp, #12
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c1e4:	bf00      	nop
 800c1e6:	370c      	adds	r7, #12
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr

0800c1f0 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(TIM_HandleTypeDef *htim)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b083      	sub	sp, #12
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	7f1b      	ldrb	r3, [r3, #28]
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	370c      	adds	r7, #12
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr

0800c208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c208:	b480      	push	{r7}
 800c20a:	b085      	sub	sp, #20
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	4a40      	ldr	r2, [pc, #256]	; (800c31c <TIM_Base_SetConfig+0x114>)
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d013      	beq.n	800c248 <TIM_Base_SetConfig+0x40>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c226:	d00f      	beq.n	800c248 <TIM_Base_SetConfig+0x40>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	4a3d      	ldr	r2, [pc, #244]	; (800c320 <TIM_Base_SetConfig+0x118>)
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d00b      	beq.n	800c248 <TIM_Base_SetConfig+0x40>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	4a3c      	ldr	r2, [pc, #240]	; (800c324 <TIM_Base_SetConfig+0x11c>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d007      	beq.n	800c248 <TIM_Base_SetConfig+0x40>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	4a3b      	ldr	r2, [pc, #236]	; (800c328 <TIM_Base_SetConfig+0x120>)
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d003      	beq.n	800c248 <TIM_Base_SetConfig+0x40>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	4a3a      	ldr	r2, [pc, #232]	; (800c32c <TIM_Base_SetConfig+0x124>)
 800c244:	4293      	cmp	r3, r2
 800c246:	d108      	bne.n	800c25a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c24e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	68fa      	ldr	r2, [r7, #12]
 800c256:	4313      	orrs	r3, r2
 800c258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	4a2f      	ldr	r2, [pc, #188]	; (800c31c <TIM_Base_SetConfig+0x114>)
 800c25e:	4293      	cmp	r3, r2
 800c260:	d02b      	beq.n	800c2ba <TIM_Base_SetConfig+0xb2>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c268:	d027      	beq.n	800c2ba <TIM_Base_SetConfig+0xb2>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	4a2c      	ldr	r2, [pc, #176]	; (800c320 <TIM_Base_SetConfig+0x118>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d023      	beq.n	800c2ba <TIM_Base_SetConfig+0xb2>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	4a2b      	ldr	r2, [pc, #172]	; (800c324 <TIM_Base_SetConfig+0x11c>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d01f      	beq.n	800c2ba <TIM_Base_SetConfig+0xb2>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4a2a      	ldr	r2, [pc, #168]	; (800c328 <TIM_Base_SetConfig+0x120>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d01b      	beq.n	800c2ba <TIM_Base_SetConfig+0xb2>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4a29      	ldr	r2, [pc, #164]	; (800c32c <TIM_Base_SetConfig+0x124>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d017      	beq.n	800c2ba <TIM_Base_SetConfig+0xb2>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4a28      	ldr	r2, [pc, #160]	; (800c330 <TIM_Base_SetConfig+0x128>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d013      	beq.n	800c2ba <TIM_Base_SetConfig+0xb2>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	4a27      	ldr	r2, [pc, #156]	; (800c334 <TIM_Base_SetConfig+0x12c>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d00f      	beq.n	800c2ba <TIM_Base_SetConfig+0xb2>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4a26      	ldr	r2, [pc, #152]	; (800c338 <TIM_Base_SetConfig+0x130>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d00b      	beq.n	800c2ba <TIM_Base_SetConfig+0xb2>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	4a25      	ldr	r2, [pc, #148]	; (800c33c <TIM_Base_SetConfig+0x134>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d007      	beq.n	800c2ba <TIM_Base_SetConfig+0xb2>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	4a24      	ldr	r2, [pc, #144]	; (800c340 <TIM_Base_SetConfig+0x138>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d003      	beq.n	800c2ba <TIM_Base_SetConfig+0xb2>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	4a23      	ldr	r2, [pc, #140]	; (800c344 <TIM_Base_SetConfig+0x13c>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d108      	bne.n	800c2cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	68fa      	ldr	r2, [r7, #12]
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	695b      	ldr	r3, [r3, #20]
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	68fa      	ldr	r2, [r7, #12]
 800c2de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	689a      	ldr	r2, [r3, #8]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	4a0a      	ldr	r2, [pc, #40]	; (800c31c <TIM_Base_SetConfig+0x114>)
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d003      	beq.n	800c300 <TIM_Base_SetConfig+0xf8>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	4a0c      	ldr	r2, [pc, #48]	; (800c32c <TIM_Base_SetConfig+0x124>)
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d103      	bne.n	800c308 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	691a      	ldr	r2, [r3, #16]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2201      	movs	r2, #1
 800c30c:	615a      	str	r2, [r3, #20]
}
 800c30e:	bf00      	nop
 800c310:	3714      	adds	r7, #20
 800c312:	46bd      	mov	sp, r7
 800c314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c318:	4770      	bx	lr
 800c31a:	bf00      	nop
 800c31c:	40010000 	.word	0x40010000
 800c320:	40000400 	.word	0x40000400
 800c324:	40000800 	.word	0x40000800
 800c328:	40000c00 	.word	0x40000c00
 800c32c:	40010400 	.word	0x40010400
 800c330:	40014000 	.word	0x40014000
 800c334:	40014400 	.word	0x40014400
 800c338:	40014800 	.word	0x40014800
 800c33c:	40001800 	.word	0x40001800
 800c340:	40001c00 	.word	0x40001c00
 800c344:	40002000 	.word	0x40002000

0800c348 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b086      	sub	sp, #24
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c352:	2300      	movs	r3, #0
 800c354:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	689b      	ldr	r3, [r3, #8]
 800c35c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c364:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	693a      	ldr	r2, [r7, #16]
 800c36c:	4313      	orrs	r3, r2
 800c36e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800c370:	693a      	ldr	r2, [r7, #16]
 800c372:	4b3e      	ldr	r3, [pc, #248]	; (800c46c <TIM_SlaveTimer_SetConfig+0x124>)
 800c374:	4013      	ands	r3, r2
 800c376:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	693a      	ldr	r2, [r7, #16]
 800c37e:	4313      	orrs	r3, r2
 800c380:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	693a      	ldr	r2, [r7, #16]
 800c388:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	2b70      	cmp	r3, #112	; 0x70
 800c390:	d01a      	beq.n	800c3c8 <TIM_SlaveTimer_SetConfig+0x80>
 800c392:	2b70      	cmp	r3, #112	; 0x70
 800c394:	d860      	bhi.n	800c458 <TIM_SlaveTimer_SetConfig+0x110>
 800c396:	2b60      	cmp	r3, #96	; 0x60
 800c398:	d054      	beq.n	800c444 <TIM_SlaveTimer_SetConfig+0xfc>
 800c39a:	2b60      	cmp	r3, #96	; 0x60
 800c39c:	d85c      	bhi.n	800c458 <TIM_SlaveTimer_SetConfig+0x110>
 800c39e:	2b50      	cmp	r3, #80	; 0x50
 800c3a0:	d046      	beq.n	800c430 <TIM_SlaveTimer_SetConfig+0xe8>
 800c3a2:	2b50      	cmp	r3, #80	; 0x50
 800c3a4:	d858      	bhi.n	800c458 <TIM_SlaveTimer_SetConfig+0x110>
 800c3a6:	2b40      	cmp	r3, #64	; 0x40
 800c3a8:	d019      	beq.n	800c3de <TIM_SlaveTimer_SetConfig+0x96>
 800c3aa:	2b40      	cmp	r3, #64	; 0x40
 800c3ac:	d854      	bhi.n	800c458 <TIM_SlaveTimer_SetConfig+0x110>
 800c3ae:	2b30      	cmp	r3, #48	; 0x30
 800c3b0:	d055      	beq.n	800c45e <TIM_SlaveTimer_SetConfig+0x116>
 800c3b2:	2b30      	cmp	r3, #48	; 0x30
 800c3b4:	d850      	bhi.n	800c458 <TIM_SlaveTimer_SetConfig+0x110>
 800c3b6:	2b20      	cmp	r3, #32
 800c3b8:	d051      	beq.n	800c45e <TIM_SlaveTimer_SetConfig+0x116>
 800c3ba:	2b20      	cmp	r3, #32
 800c3bc:	d84c      	bhi.n	800c458 <TIM_SlaveTimer_SetConfig+0x110>
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d04d      	beq.n	800c45e <TIM_SlaveTimer_SetConfig+0x116>
 800c3c2:	2b10      	cmp	r3, #16
 800c3c4:	d04b      	beq.n	800c45e <TIM_SlaveTimer_SetConfig+0x116>
 800c3c6:	e047      	b.n	800c458 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6818      	ldr	r0, [r3, #0]
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	68d9      	ldr	r1, [r3, #12]
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	689a      	ldr	r2, [r3, #8]
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	691b      	ldr	r3, [r3, #16]
 800c3d8:	f000 f9ee 	bl	800c7b8 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800c3dc:	e040      	b.n	800c460 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	2b05      	cmp	r3, #5
 800c3e4:	d101      	bne.n	800c3ea <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	e03b      	b.n	800c462 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	6a1b      	ldr	r3, [r3, #32]
 800c3f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	6a1a      	ldr	r2, [r3, #32]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f022 0201 	bic.w	r2, r2, #1
 800c400:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	699b      	ldr	r3, [r3, #24]
 800c408:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c410:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	691b      	ldr	r3, [r3, #16]
 800c416:	011b      	lsls	r3, r3, #4
 800c418:	68ba      	ldr	r2, [r7, #8]
 800c41a:	4313      	orrs	r3, r2
 800c41c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	68ba      	ldr	r2, [r7, #8]
 800c424:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	68fa      	ldr	r2, [r7, #12]
 800c42c:	621a      	str	r2, [r3, #32]
      break;
 800c42e:	e017      	b.n	800c460 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6818      	ldr	r0, [r3, #0]
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	6899      	ldr	r1, [r3, #8]
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	691b      	ldr	r3, [r3, #16]
 800c43c:	461a      	mov	r2, r3
 800c43e:	f000 f88b 	bl	800c558 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800c442:	e00d      	b.n	800c460 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6818      	ldr	r0, [r3, #0]
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	6899      	ldr	r1, [r3, #8]
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	691b      	ldr	r3, [r3, #16]
 800c450:	461a      	mov	r2, r3
 800c452:	f000 f8ed 	bl	800c630 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800c456:	e003      	b.n	800c460 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800c458:	2301      	movs	r3, #1
 800c45a:	75fb      	strb	r3, [r7, #23]
      break;
 800c45c:	e000      	b.n	800c460 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800c45e:	bf00      	nop
  }

  return status;
 800c460:	7dfb      	ldrb	r3, [r7, #23]
}
 800c462:	4618      	mov	r0, r3
 800c464:	3718      	adds	r7, #24
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop
 800c46c:	fffefff8 	.word	0xfffefff8

0800c470 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c470:	b480      	push	{r7}
 800c472:	b087      	sub	sp, #28
 800c474:	af00      	add	r7, sp, #0
 800c476:	60f8      	str	r0, [r7, #12]
 800c478:	60b9      	str	r1, [r7, #8]
 800c47a:	607a      	str	r2, [r7, #4]
 800c47c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	6a1b      	ldr	r3, [r3, #32]
 800c482:	f023 0201 	bic.w	r2, r3, #1
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	699b      	ldr	r3, [r3, #24]
 800c48e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	6a1b      	ldr	r3, [r3, #32]
 800c494:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	4a28      	ldr	r2, [pc, #160]	; (800c53c <TIM_TI1_SetConfig+0xcc>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d01b      	beq.n	800c4d6 <TIM_TI1_SetConfig+0x66>
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4a4:	d017      	beq.n	800c4d6 <TIM_TI1_SetConfig+0x66>
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	4a25      	ldr	r2, [pc, #148]	; (800c540 <TIM_TI1_SetConfig+0xd0>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d013      	beq.n	800c4d6 <TIM_TI1_SetConfig+0x66>
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	4a24      	ldr	r2, [pc, #144]	; (800c544 <TIM_TI1_SetConfig+0xd4>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d00f      	beq.n	800c4d6 <TIM_TI1_SetConfig+0x66>
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	4a23      	ldr	r2, [pc, #140]	; (800c548 <TIM_TI1_SetConfig+0xd8>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d00b      	beq.n	800c4d6 <TIM_TI1_SetConfig+0x66>
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	4a22      	ldr	r2, [pc, #136]	; (800c54c <TIM_TI1_SetConfig+0xdc>)
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d007      	beq.n	800c4d6 <TIM_TI1_SetConfig+0x66>
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	4a21      	ldr	r2, [pc, #132]	; (800c550 <TIM_TI1_SetConfig+0xe0>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d003      	beq.n	800c4d6 <TIM_TI1_SetConfig+0x66>
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	4a20      	ldr	r2, [pc, #128]	; (800c554 <TIM_TI1_SetConfig+0xe4>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d101      	bne.n	800c4da <TIM_TI1_SetConfig+0x6a>
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	e000      	b.n	800c4dc <TIM_TI1_SetConfig+0x6c>
 800c4da:	2300      	movs	r3, #0
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d008      	beq.n	800c4f2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	f023 0303 	bic.w	r3, r3, #3
 800c4e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c4e8:	697a      	ldr	r2, [r7, #20]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	4313      	orrs	r3, r2
 800c4ee:	617b      	str	r3, [r7, #20]
 800c4f0:	e003      	b.n	800c4fa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	f043 0301 	orr.w	r3, r3, #1
 800c4f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c500:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	011b      	lsls	r3, r3, #4
 800c506:	b2db      	uxtb	r3, r3
 800c508:	697a      	ldr	r2, [r7, #20]
 800c50a:	4313      	orrs	r3, r2
 800c50c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	f023 030a 	bic.w	r3, r3, #10
 800c514:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	f003 030a 	and.w	r3, r3, #10
 800c51c:	693a      	ldr	r2, [r7, #16]
 800c51e:	4313      	orrs	r3, r2
 800c520:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	697a      	ldr	r2, [r7, #20]
 800c526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	693a      	ldr	r2, [r7, #16]
 800c52c:	621a      	str	r2, [r3, #32]
}
 800c52e:	bf00      	nop
 800c530:	371c      	adds	r7, #28
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr
 800c53a:	bf00      	nop
 800c53c:	40010000 	.word	0x40010000
 800c540:	40000400 	.word	0x40000400
 800c544:	40000800 	.word	0x40000800
 800c548:	40000c00 	.word	0x40000c00
 800c54c:	40010400 	.word	0x40010400
 800c550:	40014000 	.word	0x40014000
 800c554:	40001800 	.word	0x40001800

0800c558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c558:	b480      	push	{r7}
 800c55a:	b087      	sub	sp, #28
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	60f8      	str	r0, [r7, #12]
 800c560:	60b9      	str	r1, [r7, #8]
 800c562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	6a1b      	ldr	r3, [r3, #32]
 800c568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	6a1b      	ldr	r3, [r3, #32]
 800c56e:	f023 0201 	bic.w	r2, r3, #1
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	699b      	ldr	r3, [r3, #24]
 800c57a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	011b      	lsls	r3, r3, #4
 800c588:	693a      	ldr	r2, [r7, #16]
 800c58a:	4313      	orrs	r3, r2
 800c58c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	f023 030a 	bic.w	r3, r3, #10
 800c594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c596:	697a      	ldr	r2, [r7, #20]
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	4313      	orrs	r3, r2
 800c59c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	693a      	ldr	r2, [r7, #16]
 800c5a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	697a      	ldr	r2, [r7, #20]
 800c5a8:	621a      	str	r2, [r3, #32]
}
 800c5aa:	bf00      	nop
 800c5ac:	371c      	adds	r7, #28
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b4:	4770      	bx	lr

0800c5b6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c5b6:	b480      	push	{r7}
 800c5b8:	b087      	sub	sp, #28
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	60f8      	str	r0, [r7, #12]
 800c5be:	60b9      	str	r1, [r7, #8]
 800c5c0:	607a      	str	r2, [r7, #4]
 800c5c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	6a1b      	ldr	r3, [r3, #32]
 800c5c8:	f023 0210 	bic.w	r2, r3, #16
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	699b      	ldr	r3, [r3, #24]
 800c5d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	6a1b      	ldr	r3, [r3, #32]
 800c5da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	021b      	lsls	r3, r3, #8
 800c5e8:	697a      	ldr	r2, [r7, #20]
 800c5ea:	4313      	orrs	r3, r2
 800c5ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c5f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	031b      	lsls	r3, r3, #12
 800c5fa:	b29b      	uxth	r3, r3
 800c5fc:	697a      	ldr	r2, [r7, #20]
 800c5fe:	4313      	orrs	r3, r2
 800c600:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c608:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	011b      	lsls	r3, r3, #4
 800c60e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c612:	693a      	ldr	r2, [r7, #16]
 800c614:	4313      	orrs	r3, r2
 800c616:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	697a      	ldr	r2, [r7, #20]
 800c61c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	693a      	ldr	r2, [r7, #16]
 800c622:	621a      	str	r2, [r3, #32]
}
 800c624:	bf00      	nop
 800c626:	371c      	adds	r7, #28
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c630:	b480      	push	{r7}
 800c632:	b087      	sub	sp, #28
 800c634:	af00      	add	r7, sp, #0
 800c636:	60f8      	str	r0, [r7, #12]
 800c638:	60b9      	str	r1, [r7, #8]
 800c63a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	6a1b      	ldr	r3, [r3, #32]
 800c640:	f023 0210 	bic.w	r2, r3, #16
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	699b      	ldr	r3, [r3, #24]
 800c64c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	6a1b      	ldr	r3, [r3, #32]
 800c652:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c65a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	031b      	lsls	r3, r3, #12
 800c660:	697a      	ldr	r2, [r7, #20]
 800c662:	4313      	orrs	r3, r2
 800c664:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c66c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	011b      	lsls	r3, r3, #4
 800c672:	693a      	ldr	r2, [r7, #16]
 800c674:	4313      	orrs	r3, r2
 800c676:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	697a      	ldr	r2, [r7, #20]
 800c67c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	693a      	ldr	r2, [r7, #16]
 800c682:	621a      	str	r2, [r3, #32]
}
 800c684:	bf00      	nop
 800c686:	371c      	adds	r7, #28
 800c688:	46bd      	mov	sp, r7
 800c68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68e:	4770      	bx	lr

0800c690 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c690:	b480      	push	{r7}
 800c692:	b087      	sub	sp, #28
 800c694:	af00      	add	r7, sp, #0
 800c696:	60f8      	str	r0, [r7, #12]
 800c698:	60b9      	str	r1, [r7, #8]
 800c69a:	607a      	str	r2, [r7, #4]
 800c69c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	6a1b      	ldr	r3, [r3, #32]
 800c6a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	69db      	ldr	r3, [r3, #28]
 800c6ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	6a1b      	ldr	r3, [r3, #32]
 800c6b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	f023 0303 	bic.w	r3, r3, #3
 800c6bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800c6be:	697a      	ldr	r2, [r7, #20]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c6cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	011b      	lsls	r3, r3, #4
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	697a      	ldr	r2, [r7, #20]
 800c6d6:	4313      	orrs	r3, r2
 800c6d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c6da:	693b      	ldr	r3, [r7, #16]
 800c6dc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800c6e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	021b      	lsls	r3, r3, #8
 800c6e6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800c6ea:	693a      	ldr	r2, [r7, #16]
 800c6ec:	4313      	orrs	r3, r2
 800c6ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	697a      	ldr	r2, [r7, #20]
 800c6f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	693a      	ldr	r2, [r7, #16]
 800c6fa:	621a      	str	r2, [r3, #32]
}
 800c6fc:	bf00      	nop
 800c6fe:	371c      	adds	r7, #28
 800c700:	46bd      	mov	sp, r7
 800c702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c706:	4770      	bx	lr

0800c708 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c708:	b480      	push	{r7}
 800c70a:	b087      	sub	sp, #28
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	607a      	str	r2, [r7, #4]
 800c714:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	6a1b      	ldr	r3, [r3, #32]
 800c71a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	69db      	ldr	r3, [r3, #28]
 800c726:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	6a1b      	ldr	r3, [r3, #32]
 800c72c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c734:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	021b      	lsls	r3, r3, #8
 800c73a:	697a      	ldr	r2, [r7, #20]
 800c73c:	4313      	orrs	r3, r2
 800c73e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c746:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	031b      	lsls	r3, r3, #12
 800c74c:	b29b      	uxth	r3, r3
 800c74e:	697a      	ldr	r2, [r7, #20]
 800c750:	4313      	orrs	r3, r2
 800c752:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800c75a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	031b      	lsls	r3, r3, #12
 800c760:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800c764:	693a      	ldr	r2, [r7, #16]
 800c766:	4313      	orrs	r3, r2
 800c768:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	697a      	ldr	r2, [r7, #20]
 800c76e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	693a      	ldr	r2, [r7, #16]
 800c774:	621a      	str	r2, [r3, #32]
}
 800c776:	bf00      	nop
 800c778:	371c      	adds	r7, #28
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr

0800c782 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c782:	b480      	push	{r7}
 800c784:	b085      	sub	sp, #20
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
 800c78a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	689b      	ldr	r3, [r3, #8]
 800c790:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c798:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c79a:	683a      	ldr	r2, [r7, #0]
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	f043 0307 	orr.w	r3, r3, #7
 800c7a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	68fa      	ldr	r2, [r7, #12]
 800c7aa:	609a      	str	r2, [r3, #8]
}
 800c7ac:	bf00      	nop
 800c7ae:	3714      	adds	r7, #20
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr

0800c7b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b087      	sub	sp, #28
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	60f8      	str	r0, [r7, #12]
 800c7c0:	60b9      	str	r1, [r7, #8]
 800c7c2:	607a      	str	r2, [r7, #4]
 800c7c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	689b      	ldr	r3, [r3, #8]
 800c7ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c7d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	021a      	lsls	r2, r3, #8
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	431a      	orrs	r2, r3
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	4313      	orrs	r3, r2
 800c7e0:	697a      	ldr	r2, [r7, #20]
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	697a      	ldr	r2, [r7, #20]
 800c7ea:	609a      	str	r2, [r3, #8]
}
 800c7ec:	bf00      	nop
 800c7ee:	371c      	adds	r7, #28
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr

0800c7f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b087      	sub	sp, #28
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	60f8      	str	r0, [r7, #12]
 800c800:	60b9      	str	r1, [r7, #8]
 800c802:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	f003 031f 	and.w	r3, r3, #31
 800c80a:	2201      	movs	r2, #1
 800c80c:	fa02 f303 	lsl.w	r3, r2, r3
 800c810:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	6a1a      	ldr	r2, [r3, #32]
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	43db      	mvns	r3, r3
 800c81a:	401a      	ands	r2, r3
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	6a1a      	ldr	r2, [r3, #32]
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	f003 031f 	and.w	r3, r3, #31
 800c82a:	6879      	ldr	r1, [r7, #4]
 800c82c:	fa01 f303 	lsl.w	r3, r1, r3
 800c830:	431a      	orrs	r2, r3
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	621a      	str	r2, [r3, #32]
}
 800c836:	bf00      	nop
 800c838:	371c      	adds	r7, #28
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr
	...

0800c844 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c844:	b480      	push	{r7}
 800c846:	b085      	sub	sp, #20
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
 800c84c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c854:	2b01      	cmp	r3, #1
 800c856:	d101      	bne.n	800c85c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c858:	2302      	movs	r3, #2
 800c85a:	e06d      	b.n	800c938 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2201      	movs	r2, #1
 800c860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2202      	movs	r2, #2
 800c868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	685b      	ldr	r3, [r3, #4]
 800c872:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	689b      	ldr	r3, [r3, #8]
 800c87a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4a30      	ldr	r2, [pc, #192]	; (800c944 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d004      	beq.n	800c890 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	4a2f      	ldr	r2, [pc, #188]	; (800c948 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d108      	bne.n	800c8a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c896:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	685b      	ldr	r3, [r3, #4]
 800c89c:	68fa      	ldr	r2, [r7, #12]
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	68fa      	ldr	r2, [r7, #12]
 800c8b0:	4313      	orrs	r3, r2
 800c8b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	68fa      	ldr	r2, [r7, #12]
 800c8ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4a20      	ldr	r2, [pc, #128]	; (800c944 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c8c2:	4293      	cmp	r3, r2
 800c8c4:	d022      	beq.n	800c90c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8ce:	d01d      	beq.n	800c90c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	4a1d      	ldr	r2, [pc, #116]	; (800c94c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d018      	beq.n	800c90c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	4a1c      	ldr	r2, [pc, #112]	; (800c950 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d013      	beq.n	800c90c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	4a1a      	ldr	r2, [pc, #104]	; (800c954 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d00e      	beq.n	800c90c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	4a15      	ldr	r2, [pc, #84]	; (800c948 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d009      	beq.n	800c90c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	4a16      	ldr	r2, [pc, #88]	; (800c958 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d004      	beq.n	800c90c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	4a15      	ldr	r2, [pc, #84]	; (800c95c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c908:	4293      	cmp	r3, r2
 800c90a:	d10c      	bne.n	800c926 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c912:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	689b      	ldr	r3, [r3, #8]
 800c918:	68ba      	ldr	r2, [r7, #8]
 800c91a:	4313      	orrs	r3, r2
 800c91c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	68ba      	ldr	r2, [r7, #8]
 800c924:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2201      	movs	r2, #1
 800c92a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2200      	movs	r2, #0
 800c932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c936:	2300      	movs	r3, #0
}
 800c938:	4618      	mov	r0, r3
 800c93a:	3714      	adds	r7, #20
 800c93c:	46bd      	mov	sp, r7
 800c93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c942:	4770      	bx	lr
 800c944:	40010000 	.word	0x40010000
 800c948:	40010400 	.word	0x40010400
 800c94c:	40000400 	.word	0x40000400
 800c950:	40000800 	.word	0x40000800
 800c954:	40000c00 	.word	0x40000c00
 800c958:	40014000 	.word	0x40014000
 800c95c:	40001800 	.word	0x40001800

0800c960 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c960:	b480      	push	{r7}
 800c962:	b083      	sub	sp, #12
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c968:	bf00      	nop
 800c96a:	370c      	adds	r7, #12
 800c96c:	46bd      	mov	sp, r7
 800c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c972:	4770      	bx	lr

0800c974 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c974:	b480      	push	{r7}
 800c976:	b083      	sub	sp, #12
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c97c:	bf00      	nop
 800c97e:	370c      	adds	r7, #12
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr

0800c988 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c988:	b480      	push	{r7}
 800c98a:	b083      	sub	sp, #12
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c990:	bf00      	nop
 800c992:	370c      	adds	r7, #12
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr

0800c99c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b082      	sub	sp, #8
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d101      	bne.n	800c9ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	e040      	b.n	800ca30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d106      	bne.n	800c9c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f7f8 ff30 	bl	8005824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2224      	movs	r2, #36	; 0x24
 800c9c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	681a      	ldr	r2, [r3, #0]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f022 0201 	bic.w	r2, r2, #1
 800c9d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f000 fc18 	bl	800d210 <UART_SetConfig>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	d101      	bne.n	800c9ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	e022      	b.n	800ca30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d002      	beq.n	800c9f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f000 fe70 	bl	800d6d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	685a      	ldr	r2, [r3, #4]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ca06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	689a      	ldr	r2, [r3, #8]
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ca16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	681a      	ldr	r2, [r3, #0]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f042 0201 	orr.w	r2, r2, #1
 800ca26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f000 fef7 	bl	800d81c <UART_CheckIdleState>
 800ca2e:	4603      	mov	r3, r0
}
 800ca30:	4618      	mov	r0, r3
 800ca32:	3708      	adds	r7, #8
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}

0800ca38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b08a      	sub	sp, #40	; 0x28
 800ca3c:	af02      	add	r7, sp, #8
 800ca3e:	60f8      	str	r0, [r7, #12]
 800ca40:	60b9      	str	r1, [r7, #8]
 800ca42:	603b      	str	r3, [r7, #0]
 800ca44:	4613      	mov	r3, r2
 800ca46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca4c:	2b20      	cmp	r3, #32
 800ca4e:	f040 8081 	bne.w	800cb54 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d002      	beq.n	800ca5e <HAL_UART_Transmit+0x26>
 800ca58:	88fb      	ldrh	r3, [r7, #6]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d101      	bne.n	800ca62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ca5e:	2301      	movs	r3, #1
 800ca60:	e079      	b.n	800cb56 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d101      	bne.n	800ca70 <HAL_UART_Transmit+0x38>
 800ca6c:	2302      	movs	r3, #2
 800ca6e:	e072      	b.n	800cb56 <HAL_UART_Transmit+0x11e>
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	2201      	movs	r2, #1
 800ca74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2221      	movs	r2, #33	; 0x21
 800ca84:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ca86:	f7f8 ffd1 	bl	8005a2c <HAL_GetTick>
 800ca8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	88fa      	ldrh	r2, [r7, #6]
 800ca90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	88fa      	ldrh	r2, [r7, #6]
 800ca98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	689b      	ldr	r3, [r3, #8]
 800caa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800caa4:	d108      	bne.n	800cab8 <HAL_UART_Transmit+0x80>
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	691b      	ldr	r3, [r3, #16]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d104      	bne.n	800cab8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800caae:	2300      	movs	r3, #0
 800cab0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	61bb      	str	r3, [r7, #24]
 800cab6:	e003      	b.n	800cac0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cabc:	2300      	movs	r3, #0
 800cabe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	2200      	movs	r2, #0
 800cac4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800cac8:	e02c      	b.n	800cb24 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	9300      	str	r3, [sp, #0]
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	2200      	movs	r2, #0
 800cad2:	2180      	movs	r1, #128	; 0x80
 800cad4:	68f8      	ldr	r0, [r7, #12]
 800cad6:	f000 feea 	bl	800d8ae <UART_WaitOnFlagUntilTimeout>
 800cada:	4603      	mov	r3, r0
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d001      	beq.n	800cae4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800cae0:	2303      	movs	r3, #3
 800cae2:	e038      	b.n	800cb56 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800cae4:	69fb      	ldr	r3, [r7, #28]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d10b      	bne.n	800cb02 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800caea:	69bb      	ldr	r3, [r7, #24]
 800caec:	881b      	ldrh	r3, [r3, #0]
 800caee:	461a      	mov	r2, r3
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800caf8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800cafa:	69bb      	ldr	r3, [r7, #24]
 800cafc:	3302      	adds	r3, #2
 800cafe:	61bb      	str	r3, [r7, #24]
 800cb00:	e007      	b.n	800cb12 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cb02:	69fb      	ldr	r3, [r7, #28]
 800cb04:	781a      	ldrb	r2, [r3, #0]
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800cb0c:	69fb      	ldr	r3, [r7, #28]
 800cb0e:	3301      	adds	r3, #1
 800cb10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800cb18:	b29b      	uxth	r3, r3
 800cb1a:	3b01      	subs	r3, #1
 800cb1c:	b29a      	uxth	r2, r3
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d1cc      	bne.n	800caca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	9300      	str	r3, [sp, #0]
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	2200      	movs	r2, #0
 800cb38:	2140      	movs	r1, #64	; 0x40
 800cb3a:	68f8      	ldr	r0, [r7, #12]
 800cb3c:	f000 feb7 	bl	800d8ae <UART_WaitOnFlagUntilTimeout>
 800cb40:	4603      	mov	r3, r0
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d001      	beq.n	800cb4a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800cb46:	2303      	movs	r3, #3
 800cb48:	e005      	b.n	800cb56 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2220      	movs	r2, #32
 800cb4e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800cb50:	2300      	movs	r3, #0
 800cb52:	e000      	b.n	800cb56 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800cb54:	2302      	movs	r3, #2
  }
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3720      	adds	r7, #32
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b08a      	sub	sp, #40	; 0x28
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	60f8      	str	r0, [r7, #12]
 800cb66:	60b9      	str	r1, [r7, #8]
 800cb68:	4613      	mov	r3, r2
 800cb6a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb70:	2b20      	cmp	r3, #32
 800cb72:	d13d      	bne.n	800cbf0 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d002      	beq.n	800cb80 <HAL_UART_Receive_IT+0x22>
 800cb7a:	88fb      	ldrh	r3, [r7, #6]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d101      	bne.n	800cb84 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800cb80:	2301      	movs	r3, #1
 800cb82:	e036      	b.n	800cbf2 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800cb8a:	2b01      	cmp	r3, #1
 800cb8c:	d101      	bne.n	800cb92 <HAL_UART_Receive_IT+0x34>
 800cb8e:	2302      	movs	r3, #2
 800cb90:	e02f      	b.n	800cbf2 <HAL_UART_Receive_IT+0x94>
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	2201      	movs	r2, #1
 800cb96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d018      	beq.n	800cbe0 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbb4:	697b      	ldr	r3, [r7, #20]
 800cbb6:	e853 3f00 	ldrex	r3, [r3]
 800cbba:	613b      	str	r3, [r7, #16]
   return(result);
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cbc2:	627b      	str	r3, [r7, #36]	; 0x24
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	461a      	mov	r2, r3
 800cbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbcc:	623b      	str	r3, [r7, #32]
 800cbce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbd0:	69f9      	ldr	r1, [r7, #28]
 800cbd2:	6a3a      	ldr	r2, [r7, #32]
 800cbd4:	e841 2300 	strex	r3, r2, [r1]
 800cbd8:	61bb      	str	r3, [r7, #24]
   return(result);
 800cbda:	69bb      	ldr	r3, [r7, #24]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d1e6      	bne.n	800cbae <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800cbe0:	88fb      	ldrh	r3, [r7, #6]
 800cbe2:	461a      	mov	r2, r3
 800cbe4:	68b9      	ldr	r1, [r7, #8]
 800cbe6:	68f8      	ldr	r0, [r7, #12]
 800cbe8:	f000 ff26 	bl	800da38 <UART_Start_Receive_IT>
 800cbec:	4603      	mov	r3, r0
 800cbee:	e000      	b.n	800cbf2 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cbf0:	2302      	movs	r3, #2
  }
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3728      	adds	r7, #40	; 0x28
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
	...

0800cbfc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b0ba      	sub	sp, #232	; 0xe8
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	69db      	ldr	r3, [r3, #28]
 800cc0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	689b      	ldr	r3, [r3, #8]
 800cc1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cc22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cc26:	f640 030f 	movw	r3, #2063	; 0x80f
 800cc2a:	4013      	ands	r3, r2
 800cc2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800cc30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d115      	bne.n	800cc64 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800cc38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc3c:	f003 0320 	and.w	r3, r3, #32
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d00f      	beq.n	800cc64 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800cc44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc48:	f003 0320 	and.w	r3, r3, #32
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d009      	beq.n	800cc64 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	f000 82a4 	beq.w	800d1a2 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	4798      	blx	r3
      }
      return;
 800cc62:	e29e      	b.n	800d1a2 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cc64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	f000 8117 	beq.w	800ce9c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800cc6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc72:	f003 0301 	and.w	r3, r3, #1
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d106      	bne.n	800cc88 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800cc7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cc7e:	4b85      	ldr	r3, [pc, #532]	; (800ce94 <HAL_UART_IRQHandler+0x298>)
 800cc80:	4013      	ands	r3, r2
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	f000 810a 	beq.w	800ce9c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cc88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc8c:	f003 0301 	and.w	r3, r3, #1
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d011      	beq.n	800ccb8 <HAL_UART_IRQHandler+0xbc>
 800cc94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d00b      	beq.n	800ccb8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	2201      	movs	r2, #1
 800cca6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ccae:	f043 0201 	orr.w	r2, r3, #1
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ccb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ccbc:	f003 0302 	and.w	r3, r3, #2
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d011      	beq.n	800cce8 <HAL_UART_IRQHandler+0xec>
 800ccc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ccc8:	f003 0301 	and.w	r3, r3, #1
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d00b      	beq.n	800cce8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	2202      	movs	r2, #2
 800ccd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ccde:	f043 0204 	orr.w	r2, r3, #4
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ccec:	f003 0304 	and.w	r3, r3, #4
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d011      	beq.n	800cd18 <HAL_UART_IRQHandler+0x11c>
 800ccf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ccf8:	f003 0301 	and.w	r3, r3, #1
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d00b      	beq.n	800cd18 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	2204      	movs	r2, #4
 800cd06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd0e:	f043 0202 	orr.w	r2, r3, #2
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cd18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd1c:	f003 0308 	and.w	r3, r3, #8
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d017      	beq.n	800cd54 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800cd24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd28:	f003 0320 	and.w	r3, r3, #32
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d105      	bne.n	800cd3c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800cd30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cd34:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d00b      	beq.n	800cd54 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	2208      	movs	r2, #8
 800cd42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd4a:	f043 0208 	orr.w	r2, r3, #8
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cd54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d012      	beq.n	800cd86 <HAL_UART_IRQHandler+0x18a>
 800cd60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d00c      	beq.n	800cd86 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cd74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd7c:	f043 0220 	orr.w	r2, r3, #32
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	f000 820a 	beq.w	800d1a6 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800cd92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd96:	f003 0320 	and.w	r3, r3, #32
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d00d      	beq.n	800cdba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800cd9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cda2:	f003 0320 	and.w	r3, r3, #32
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d007      	beq.n	800cdba <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d003      	beq.n	800cdba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cdc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	689b      	ldr	r3, [r3, #8]
 800cdca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdce:	2b40      	cmp	r3, #64	; 0x40
 800cdd0:	d005      	beq.n	800cdde <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cdd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cdd6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d04f      	beq.n	800ce7e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 fef4 	bl	800dbcc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	689b      	ldr	r3, [r3, #8]
 800cdea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdee:	2b40      	cmp	r3, #64	; 0x40
 800cdf0:	d141      	bne.n	800ce76 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	3308      	adds	r3, #8
 800cdf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ce00:	e853 3f00 	ldrex	r3, [r3]
 800ce04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ce08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ce0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	3308      	adds	r3, #8
 800ce1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ce1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ce22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ce2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ce2e:	e841 2300 	strex	r3, r2, [r1]
 800ce32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ce36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d1d9      	bne.n	800cdf2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d013      	beq.n	800ce6e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce4a:	4a13      	ldr	r2, [pc, #76]	; (800ce98 <HAL_UART_IRQHandler+0x29c>)
 800ce4c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce52:	4618      	mov	r0, r3
 800ce54:	f7f9 fed8 	bl	8006c08 <HAL_DMA_Abort_IT>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d017      	beq.n	800ce8e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800ce68:	4610      	mov	r0, r2
 800ce6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce6c:	e00f      	b.n	800ce8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f000 f9ae 	bl	800d1d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce74:	e00b      	b.n	800ce8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f000 f9aa 	bl	800d1d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce7c:	e007      	b.n	800ce8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f000 f9a6 	bl	800d1d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2200      	movs	r2, #0
 800ce88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800ce8c:	e18b      	b.n	800d1a6 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce8e:	bf00      	nop
    return;
 800ce90:	e189      	b.n	800d1a6 <HAL_UART_IRQHandler+0x5aa>
 800ce92:	bf00      	nop
 800ce94:	04000120 	.word	0x04000120
 800ce98:	0800dc93 	.word	0x0800dc93

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cea0:	2b01      	cmp	r3, #1
 800cea2:	f040 8144 	bne.w	800d12e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ceaa:	f003 0310 	and.w	r3, r3, #16
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	f000 813d 	beq.w	800d12e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ceb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ceb8:	f003 0310 	and.w	r3, r3, #16
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	f000 8136 	beq.w	800d12e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	2210      	movs	r2, #16
 800cec8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	689b      	ldr	r3, [r3, #8]
 800ced0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ced4:	2b40      	cmp	r3, #64	; 0x40
 800ced6:	f040 80b2 	bne.w	800d03e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	685b      	ldr	r3, [r3, #4]
 800cee2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cee6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	f000 815d 	beq.w	800d1aa <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cef6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cefa:	429a      	cmp	r2, r3
 800cefc:	f080 8155 	bcs.w	800d1aa <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cf06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf0e:	69db      	ldr	r3, [r3, #28]
 800cf10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf14:	f000 8085 	beq.w	800d022 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cf24:	e853 3f00 	ldrex	r3, [r3]
 800cf28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cf2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cf30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cf42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cf46:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cf4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cf52:	e841 2300 	strex	r3, r2, [r1]
 800cf56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cf5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d1da      	bne.n	800cf18 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	3308      	adds	r3, #8
 800cf68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf6c:	e853 3f00 	ldrex	r3, [r3]
 800cf70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cf72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf74:	f023 0301 	bic.w	r3, r3, #1
 800cf78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	3308      	adds	r3, #8
 800cf82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cf86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cf8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cf8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cf92:	e841 2300 	strex	r3, r2, [r1]
 800cf96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cf98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d1e1      	bne.n	800cf62 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	3308      	adds	r3, #8
 800cfa4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cfa8:	e853 3f00 	ldrex	r3, [r3]
 800cfac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cfae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cfb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	3308      	adds	r3, #8
 800cfbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cfc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cfc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cfc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cfca:	e841 2300 	strex	r3, r2, [r1]
 800cfce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cfd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d1e3      	bne.n	800cf9e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2220      	movs	r2, #32
 800cfda:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfea:	e853 3f00 	ldrex	r3, [r3]
 800cfee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cff2:	f023 0310 	bic.w	r3, r3, #16
 800cff6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	461a      	mov	r2, r3
 800d000:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d004:	65bb      	str	r3, [r7, #88]	; 0x58
 800d006:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d008:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d00a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d00c:	e841 2300 	strex	r3, r2, [r1]
 800d010:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d014:	2b00      	cmp	r3, #0
 800d016:	d1e4      	bne.n	800cfe2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d01c:	4618      	mov	r0, r3
 800d01e:	f7f9 fd83 	bl	8006b28 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d02e:	b29b      	uxth	r3, r3
 800d030:	1ad3      	subs	r3, r2, r3
 800d032:	b29b      	uxth	r3, r3
 800d034:	4619      	mov	r1, r3
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 f8d4 	bl	800d1e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d03c:	e0b5      	b.n	800d1aa <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d04a:	b29b      	uxth	r3, r3
 800d04c:	1ad3      	subs	r3, r2, r3
 800d04e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d058:	b29b      	uxth	r3, r3
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	f000 80a7 	beq.w	800d1ae <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 800d060:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d064:	2b00      	cmp	r3, #0
 800d066:	f000 80a2 	beq.w	800d1ae <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d072:	e853 3f00 	ldrex	r3, [r3]
 800d076:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d07a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d07e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	461a      	mov	r2, r3
 800d088:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d08c:	647b      	str	r3, [r7, #68]	; 0x44
 800d08e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d090:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d092:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d094:	e841 2300 	strex	r3, r2, [r1]
 800d098:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d09a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d1e4      	bne.n	800d06a <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	3308      	adds	r3, #8
 800d0a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0aa:	e853 3f00 	ldrex	r3, [r3]
 800d0ae:	623b      	str	r3, [r7, #32]
   return(result);
 800d0b0:	6a3b      	ldr	r3, [r7, #32]
 800d0b2:	f023 0301 	bic.w	r3, r3, #1
 800d0b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	3308      	adds	r3, #8
 800d0c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d0c4:	633a      	str	r2, [r7, #48]	; 0x30
 800d0c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d0ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0cc:	e841 2300 	strex	r3, r2, [r1]
 800d0d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d1e3      	bne.n	800d0a0 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2220      	movs	r2, #32
 800d0dc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	e853 3f00 	ldrex	r3, [r3]
 800d0f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	f023 0310 	bic.w	r3, r3, #16
 800d0fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	461a      	mov	r2, r3
 800d108:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d10c:	61fb      	str	r3, [r7, #28]
 800d10e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d110:	69b9      	ldr	r1, [r7, #24]
 800d112:	69fa      	ldr	r2, [r7, #28]
 800d114:	e841 2300 	strex	r3, r2, [r1]
 800d118:	617b      	str	r3, [r7, #20]
   return(result);
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d1e4      	bne.n	800d0ea <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d120:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d124:	4619      	mov	r1, r3
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f000 f85c 	bl	800d1e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d12c:	e03f      	b.n	800d1ae <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d12e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d136:	2b00      	cmp	r3, #0
 800d138:	d00e      	beq.n	800d158 <HAL_UART_IRQHandler+0x55c>
 800d13a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d13e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d142:	2b00      	cmp	r3, #0
 800d144:	d008      	beq.n	800d158 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d14e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f000 f853 	bl	800d1fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d156:	e02d      	b.n	800d1b4 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800d158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d15c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d160:	2b00      	cmp	r3, #0
 800d162:	d00e      	beq.n	800d182 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800d164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d008      	beq.n	800d182 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d174:	2b00      	cmp	r3, #0
 800d176:	d01c      	beq.n	800d1b2 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	4798      	blx	r3
    }
    return;
 800d180:	e017      	b.n	800d1b2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d012      	beq.n	800d1b4 <HAL_UART_IRQHandler+0x5b8>
 800d18e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d196:	2b00      	cmp	r3, #0
 800d198:	d00c      	beq.n	800d1b4 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f000 fd8f 	bl	800dcbe <UART_EndTransmit_IT>
    return;
 800d1a0:	e008      	b.n	800d1b4 <HAL_UART_IRQHandler+0x5b8>
      return;
 800d1a2:	bf00      	nop
 800d1a4:	e006      	b.n	800d1b4 <HAL_UART_IRQHandler+0x5b8>
    return;
 800d1a6:	bf00      	nop
 800d1a8:	e004      	b.n	800d1b4 <HAL_UART_IRQHandler+0x5b8>
      return;
 800d1aa:	bf00      	nop
 800d1ac:	e002      	b.n	800d1b4 <HAL_UART_IRQHandler+0x5b8>
      return;
 800d1ae:	bf00      	nop
 800d1b0:	e000      	b.n	800d1b4 <HAL_UART_IRQHandler+0x5b8>
    return;
 800d1b2:	bf00      	nop
  }

}
 800d1b4:	37e8      	adds	r7, #232	; 0xe8
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop

0800d1bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b083      	sub	sp, #12
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d1c4:	bf00      	nop
 800d1c6:	370c      	adds	r7, #12
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr

0800d1d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b083      	sub	sp, #12
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d1d8:	bf00      	nop
 800d1da:	370c      	adds	r7, #12
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr

0800d1e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b083      	sub	sp, #12
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	460b      	mov	r3, r1
 800d1ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d1f0:	bf00      	nop
 800d1f2:	370c      	adds	r7, #12
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fa:	4770      	bx	lr

0800d1fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	b083      	sub	sp, #12
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d204:	bf00      	nop
 800d206:	370c      	adds	r7, #12
 800d208:	46bd      	mov	sp, r7
 800d20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20e:	4770      	bx	lr

0800d210 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b088      	sub	sp, #32
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d218:	2300      	movs	r3, #0
 800d21a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	689a      	ldr	r2, [r3, #8]
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	691b      	ldr	r3, [r3, #16]
 800d224:	431a      	orrs	r2, r3
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	695b      	ldr	r3, [r3, #20]
 800d22a:	431a      	orrs	r2, r3
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	69db      	ldr	r3, [r3, #28]
 800d230:	4313      	orrs	r3, r2
 800d232:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	681a      	ldr	r2, [r3, #0]
 800d23a:	4ba6      	ldr	r3, [pc, #664]	; (800d4d4 <UART_SetConfig+0x2c4>)
 800d23c:	4013      	ands	r3, r2
 800d23e:	687a      	ldr	r2, [r7, #4]
 800d240:	6812      	ldr	r2, [r2, #0]
 800d242:	6979      	ldr	r1, [r7, #20]
 800d244:	430b      	orrs	r3, r1
 800d246:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	68da      	ldr	r2, [r3, #12]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	430a      	orrs	r2, r1
 800d25c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	699b      	ldr	r3, [r3, #24]
 800d262:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6a1b      	ldr	r3, [r3, #32]
 800d268:	697a      	ldr	r2, [r7, #20]
 800d26a:	4313      	orrs	r3, r2
 800d26c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	689b      	ldr	r3, [r3, #8]
 800d274:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	697a      	ldr	r2, [r7, #20]
 800d27e:	430a      	orrs	r2, r1
 800d280:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	4a94      	ldr	r2, [pc, #592]	; (800d4d8 <UART_SetConfig+0x2c8>)
 800d288:	4293      	cmp	r3, r2
 800d28a:	d120      	bne.n	800d2ce <UART_SetConfig+0xbe>
 800d28c:	4b93      	ldr	r3, [pc, #588]	; (800d4dc <UART_SetConfig+0x2cc>)
 800d28e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d292:	f003 0303 	and.w	r3, r3, #3
 800d296:	2b03      	cmp	r3, #3
 800d298:	d816      	bhi.n	800d2c8 <UART_SetConfig+0xb8>
 800d29a:	a201      	add	r2, pc, #4	; (adr r2, 800d2a0 <UART_SetConfig+0x90>)
 800d29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2a0:	0800d2b1 	.word	0x0800d2b1
 800d2a4:	0800d2bd 	.word	0x0800d2bd
 800d2a8:	0800d2b7 	.word	0x0800d2b7
 800d2ac:	0800d2c3 	.word	0x0800d2c3
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	77fb      	strb	r3, [r7, #31]
 800d2b4:	e150      	b.n	800d558 <UART_SetConfig+0x348>
 800d2b6:	2302      	movs	r3, #2
 800d2b8:	77fb      	strb	r3, [r7, #31]
 800d2ba:	e14d      	b.n	800d558 <UART_SetConfig+0x348>
 800d2bc:	2304      	movs	r3, #4
 800d2be:	77fb      	strb	r3, [r7, #31]
 800d2c0:	e14a      	b.n	800d558 <UART_SetConfig+0x348>
 800d2c2:	2308      	movs	r3, #8
 800d2c4:	77fb      	strb	r3, [r7, #31]
 800d2c6:	e147      	b.n	800d558 <UART_SetConfig+0x348>
 800d2c8:	2310      	movs	r3, #16
 800d2ca:	77fb      	strb	r3, [r7, #31]
 800d2cc:	e144      	b.n	800d558 <UART_SetConfig+0x348>
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	4a83      	ldr	r2, [pc, #524]	; (800d4e0 <UART_SetConfig+0x2d0>)
 800d2d4:	4293      	cmp	r3, r2
 800d2d6:	d132      	bne.n	800d33e <UART_SetConfig+0x12e>
 800d2d8:	4b80      	ldr	r3, [pc, #512]	; (800d4dc <UART_SetConfig+0x2cc>)
 800d2da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2de:	f003 030c 	and.w	r3, r3, #12
 800d2e2:	2b0c      	cmp	r3, #12
 800d2e4:	d828      	bhi.n	800d338 <UART_SetConfig+0x128>
 800d2e6:	a201      	add	r2, pc, #4	; (adr r2, 800d2ec <UART_SetConfig+0xdc>)
 800d2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2ec:	0800d321 	.word	0x0800d321
 800d2f0:	0800d339 	.word	0x0800d339
 800d2f4:	0800d339 	.word	0x0800d339
 800d2f8:	0800d339 	.word	0x0800d339
 800d2fc:	0800d32d 	.word	0x0800d32d
 800d300:	0800d339 	.word	0x0800d339
 800d304:	0800d339 	.word	0x0800d339
 800d308:	0800d339 	.word	0x0800d339
 800d30c:	0800d327 	.word	0x0800d327
 800d310:	0800d339 	.word	0x0800d339
 800d314:	0800d339 	.word	0x0800d339
 800d318:	0800d339 	.word	0x0800d339
 800d31c:	0800d333 	.word	0x0800d333
 800d320:	2300      	movs	r3, #0
 800d322:	77fb      	strb	r3, [r7, #31]
 800d324:	e118      	b.n	800d558 <UART_SetConfig+0x348>
 800d326:	2302      	movs	r3, #2
 800d328:	77fb      	strb	r3, [r7, #31]
 800d32a:	e115      	b.n	800d558 <UART_SetConfig+0x348>
 800d32c:	2304      	movs	r3, #4
 800d32e:	77fb      	strb	r3, [r7, #31]
 800d330:	e112      	b.n	800d558 <UART_SetConfig+0x348>
 800d332:	2308      	movs	r3, #8
 800d334:	77fb      	strb	r3, [r7, #31]
 800d336:	e10f      	b.n	800d558 <UART_SetConfig+0x348>
 800d338:	2310      	movs	r3, #16
 800d33a:	77fb      	strb	r3, [r7, #31]
 800d33c:	e10c      	b.n	800d558 <UART_SetConfig+0x348>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	4a68      	ldr	r2, [pc, #416]	; (800d4e4 <UART_SetConfig+0x2d4>)
 800d344:	4293      	cmp	r3, r2
 800d346:	d120      	bne.n	800d38a <UART_SetConfig+0x17a>
 800d348:	4b64      	ldr	r3, [pc, #400]	; (800d4dc <UART_SetConfig+0x2cc>)
 800d34a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d34e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d352:	2b30      	cmp	r3, #48	; 0x30
 800d354:	d013      	beq.n	800d37e <UART_SetConfig+0x16e>
 800d356:	2b30      	cmp	r3, #48	; 0x30
 800d358:	d814      	bhi.n	800d384 <UART_SetConfig+0x174>
 800d35a:	2b20      	cmp	r3, #32
 800d35c:	d009      	beq.n	800d372 <UART_SetConfig+0x162>
 800d35e:	2b20      	cmp	r3, #32
 800d360:	d810      	bhi.n	800d384 <UART_SetConfig+0x174>
 800d362:	2b00      	cmp	r3, #0
 800d364:	d002      	beq.n	800d36c <UART_SetConfig+0x15c>
 800d366:	2b10      	cmp	r3, #16
 800d368:	d006      	beq.n	800d378 <UART_SetConfig+0x168>
 800d36a:	e00b      	b.n	800d384 <UART_SetConfig+0x174>
 800d36c:	2300      	movs	r3, #0
 800d36e:	77fb      	strb	r3, [r7, #31]
 800d370:	e0f2      	b.n	800d558 <UART_SetConfig+0x348>
 800d372:	2302      	movs	r3, #2
 800d374:	77fb      	strb	r3, [r7, #31]
 800d376:	e0ef      	b.n	800d558 <UART_SetConfig+0x348>
 800d378:	2304      	movs	r3, #4
 800d37a:	77fb      	strb	r3, [r7, #31]
 800d37c:	e0ec      	b.n	800d558 <UART_SetConfig+0x348>
 800d37e:	2308      	movs	r3, #8
 800d380:	77fb      	strb	r3, [r7, #31]
 800d382:	e0e9      	b.n	800d558 <UART_SetConfig+0x348>
 800d384:	2310      	movs	r3, #16
 800d386:	77fb      	strb	r3, [r7, #31]
 800d388:	e0e6      	b.n	800d558 <UART_SetConfig+0x348>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4a56      	ldr	r2, [pc, #344]	; (800d4e8 <UART_SetConfig+0x2d8>)
 800d390:	4293      	cmp	r3, r2
 800d392:	d120      	bne.n	800d3d6 <UART_SetConfig+0x1c6>
 800d394:	4b51      	ldr	r3, [pc, #324]	; (800d4dc <UART_SetConfig+0x2cc>)
 800d396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d39a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d39e:	2bc0      	cmp	r3, #192	; 0xc0
 800d3a0:	d013      	beq.n	800d3ca <UART_SetConfig+0x1ba>
 800d3a2:	2bc0      	cmp	r3, #192	; 0xc0
 800d3a4:	d814      	bhi.n	800d3d0 <UART_SetConfig+0x1c0>
 800d3a6:	2b80      	cmp	r3, #128	; 0x80
 800d3a8:	d009      	beq.n	800d3be <UART_SetConfig+0x1ae>
 800d3aa:	2b80      	cmp	r3, #128	; 0x80
 800d3ac:	d810      	bhi.n	800d3d0 <UART_SetConfig+0x1c0>
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d002      	beq.n	800d3b8 <UART_SetConfig+0x1a8>
 800d3b2:	2b40      	cmp	r3, #64	; 0x40
 800d3b4:	d006      	beq.n	800d3c4 <UART_SetConfig+0x1b4>
 800d3b6:	e00b      	b.n	800d3d0 <UART_SetConfig+0x1c0>
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	77fb      	strb	r3, [r7, #31]
 800d3bc:	e0cc      	b.n	800d558 <UART_SetConfig+0x348>
 800d3be:	2302      	movs	r3, #2
 800d3c0:	77fb      	strb	r3, [r7, #31]
 800d3c2:	e0c9      	b.n	800d558 <UART_SetConfig+0x348>
 800d3c4:	2304      	movs	r3, #4
 800d3c6:	77fb      	strb	r3, [r7, #31]
 800d3c8:	e0c6      	b.n	800d558 <UART_SetConfig+0x348>
 800d3ca:	2308      	movs	r3, #8
 800d3cc:	77fb      	strb	r3, [r7, #31]
 800d3ce:	e0c3      	b.n	800d558 <UART_SetConfig+0x348>
 800d3d0:	2310      	movs	r3, #16
 800d3d2:	77fb      	strb	r3, [r7, #31]
 800d3d4:	e0c0      	b.n	800d558 <UART_SetConfig+0x348>
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4a44      	ldr	r2, [pc, #272]	; (800d4ec <UART_SetConfig+0x2dc>)
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	d125      	bne.n	800d42c <UART_SetConfig+0x21c>
 800d3e0:	4b3e      	ldr	r3, [pc, #248]	; (800d4dc <UART_SetConfig+0x2cc>)
 800d3e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d3ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d3ee:	d017      	beq.n	800d420 <UART_SetConfig+0x210>
 800d3f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d3f4:	d817      	bhi.n	800d426 <UART_SetConfig+0x216>
 800d3f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3fa:	d00b      	beq.n	800d414 <UART_SetConfig+0x204>
 800d3fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d400:	d811      	bhi.n	800d426 <UART_SetConfig+0x216>
 800d402:	2b00      	cmp	r3, #0
 800d404:	d003      	beq.n	800d40e <UART_SetConfig+0x1fe>
 800d406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d40a:	d006      	beq.n	800d41a <UART_SetConfig+0x20a>
 800d40c:	e00b      	b.n	800d426 <UART_SetConfig+0x216>
 800d40e:	2300      	movs	r3, #0
 800d410:	77fb      	strb	r3, [r7, #31]
 800d412:	e0a1      	b.n	800d558 <UART_SetConfig+0x348>
 800d414:	2302      	movs	r3, #2
 800d416:	77fb      	strb	r3, [r7, #31]
 800d418:	e09e      	b.n	800d558 <UART_SetConfig+0x348>
 800d41a:	2304      	movs	r3, #4
 800d41c:	77fb      	strb	r3, [r7, #31]
 800d41e:	e09b      	b.n	800d558 <UART_SetConfig+0x348>
 800d420:	2308      	movs	r3, #8
 800d422:	77fb      	strb	r3, [r7, #31]
 800d424:	e098      	b.n	800d558 <UART_SetConfig+0x348>
 800d426:	2310      	movs	r3, #16
 800d428:	77fb      	strb	r3, [r7, #31]
 800d42a:	e095      	b.n	800d558 <UART_SetConfig+0x348>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4a2f      	ldr	r2, [pc, #188]	; (800d4f0 <UART_SetConfig+0x2e0>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d125      	bne.n	800d482 <UART_SetConfig+0x272>
 800d436:	4b29      	ldr	r3, [pc, #164]	; (800d4dc <UART_SetConfig+0x2cc>)
 800d438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d43c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d440:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d444:	d017      	beq.n	800d476 <UART_SetConfig+0x266>
 800d446:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d44a:	d817      	bhi.n	800d47c <UART_SetConfig+0x26c>
 800d44c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d450:	d00b      	beq.n	800d46a <UART_SetConfig+0x25a>
 800d452:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d456:	d811      	bhi.n	800d47c <UART_SetConfig+0x26c>
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d003      	beq.n	800d464 <UART_SetConfig+0x254>
 800d45c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d460:	d006      	beq.n	800d470 <UART_SetConfig+0x260>
 800d462:	e00b      	b.n	800d47c <UART_SetConfig+0x26c>
 800d464:	2301      	movs	r3, #1
 800d466:	77fb      	strb	r3, [r7, #31]
 800d468:	e076      	b.n	800d558 <UART_SetConfig+0x348>
 800d46a:	2302      	movs	r3, #2
 800d46c:	77fb      	strb	r3, [r7, #31]
 800d46e:	e073      	b.n	800d558 <UART_SetConfig+0x348>
 800d470:	2304      	movs	r3, #4
 800d472:	77fb      	strb	r3, [r7, #31]
 800d474:	e070      	b.n	800d558 <UART_SetConfig+0x348>
 800d476:	2308      	movs	r3, #8
 800d478:	77fb      	strb	r3, [r7, #31]
 800d47a:	e06d      	b.n	800d558 <UART_SetConfig+0x348>
 800d47c:	2310      	movs	r3, #16
 800d47e:	77fb      	strb	r3, [r7, #31]
 800d480:	e06a      	b.n	800d558 <UART_SetConfig+0x348>
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	4a1b      	ldr	r2, [pc, #108]	; (800d4f4 <UART_SetConfig+0x2e4>)
 800d488:	4293      	cmp	r3, r2
 800d48a:	d138      	bne.n	800d4fe <UART_SetConfig+0x2ee>
 800d48c:	4b13      	ldr	r3, [pc, #76]	; (800d4dc <UART_SetConfig+0x2cc>)
 800d48e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d492:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800d496:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d49a:	d017      	beq.n	800d4cc <UART_SetConfig+0x2bc>
 800d49c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d4a0:	d82a      	bhi.n	800d4f8 <UART_SetConfig+0x2e8>
 800d4a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d4a6:	d00b      	beq.n	800d4c0 <UART_SetConfig+0x2b0>
 800d4a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d4ac:	d824      	bhi.n	800d4f8 <UART_SetConfig+0x2e8>
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d003      	beq.n	800d4ba <UART_SetConfig+0x2aa>
 800d4b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4b6:	d006      	beq.n	800d4c6 <UART_SetConfig+0x2b6>
 800d4b8:	e01e      	b.n	800d4f8 <UART_SetConfig+0x2e8>
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	77fb      	strb	r3, [r7, #31]
 800d4be:	e04b      	b.n	800d558 <UART_SetConfig+0x348>
 800d4c0:	2302      	movs	r3, #2
 800d4c2:	77fb      	strb	r3, [r7, #31]
 800d4c4:	e048      	b.n	800d558 <UART_SetConfig+0x348>
 800d4c6:	2304      	movs	r3, #4
 800d4c8:	77fb      	strb	r3, [r7, #31]
 800d4ca:	e045      	b.n	800d558 <UART_SetConfig+0x348>
 800d4cc:	2308      	movs	r3, #8
 800d4ce:	77fb      	strb	r3, [r7, #31]
 800d4d0:	e042      	b.n	800d558 <UART_SetConfig+0x348>
 800d4d2:	bf00      	nop
 800d4d4:	efff69f3 	.word	0xefff69f3
 800d4d8:	40011000 	.word	0x40011000
 800d4dc:	40023800 	.word	0x40023800
 800d4e0:	40004400 	.word	0x40004400
 800d4e4:	40004800 	.word	0x40004800
 800d4e8:	40004c00 	.word	0x40004c00
 800d4ec:	40005000 	.word	0x40005000
 800d4f0:	40011400 	.word	0x40011400
 800d4f4:	40007800 	.word	0x40007800
 800d4f8:	2310      	movs	r3, #16
 800d4fa:	77fb      	strb	r3, [r7, #31]
 800d4fc:	e02c      	b.n	800d558 <UART_SetConfig+0x348>
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	4a72      	ldr	r2, [pc, #456]	; (800d6cc <UART_SetConfig+0x4bc>)
 800d504:	4293      	cmp	r3, r2
 800d506:	d125      	bne.n	800d554 <UART_SetConfig+0x344>
 800d508:	4b71      	ldr	r3, [pc, #452]	; (800d6d0 <UART_SetConfig+0x4c0>)
 800d50a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d50e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d512:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d516:	d017      	beq.n	800d548 <UART_SetConfig+0x338>
 800d518:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d51c:	d817      	bhi.n	800d54e <UART_SetConfig+0x33e>
 800d51e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d522:	d00b      	beq.n	800d53c <UART_SetConfig+0x32c>
 800d524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d528:	d811      	bhi.n	800d54e <UART_SetConfig+0x33e>
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d003      	beq.n	800d536 <UART_SetConfig+0x326>
 800d52e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d532:	d006      	beq.n	800d542 <UART_SetConfig+0x332>
 800d534:	e00b      	b.n	800d54e <UART_SetConfig+0x33e>
 800d536:	2300      	movs	r3, #0
 800d538:	77fb      	strb	r3, [r7, #31]
 800d53a:	e00d      	b.n	800d558 <UART_SetConfig+0x348>
 800d53c:	2302      	movs	r3, #2
 800d53e:	77fb      	strb	r3, [r7, #31]
 800d540:	e00a      	b.n	800d558 <UART_SetConfig+0x348>
 800d542:	2304      	movs	r3, #4
 800d544:	77fb      	strb	r3, [r7, #31]
 800d546:	e007      	b.n	800d558 <UART_SetConfig+0x348>
 800d548:	2308      	movs	r3, #8
 800d54a:	77fb      	strb	r3, [r7, #31]
 800d54c:	e004      	b.n	800d558 <UART_SetConfig+0x348>
 800d54e:	2310      	movs	r3, #16
 800d550:	77fb      	strb	r3, [r7, #31]
 800d552:	e001      	b.n	800d558 <UART_SetConfig+0x348>
 800d554:	2310      	movs	r3, #16
 800d556:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	69db      	ldr	r3, [r3, #28]
 800d55c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d560:	d15b      	bne.n	800d61a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800d562:	7ffb      	ldrb	r3, [r7, #31]
 800d564:	2b08      	cmp	r3, #8
 800d566:	d828      	bhi.n	800d5ba <UART_SetConfig+0x3aa>
 800d568:	a201      	add	r2, pc, #4	; (adr r2, 800d570 <UART_SetConfig+0x360>)
 800d56a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d56e:	bf00      	nop
 800d570:	0800d595 	.word	0x0800d595
 800d574:	0800d59d 	.word	0x0800d59d
 800d578:	0800d5a5 	.word	0x0800d5a5
 800d57c:	0800d5bb 	.word	0x0800d5bb
 800d580:	0800d5ab 	.word	0x0800d5ab
 800d584:	0800d5bb 	.word	0x0800d5bb
 800d588:	0800d5bb 	.word	0x0800d5bb
 800d58c:	0800d5bb 	.word	0x0800d5bb
 800d590:	0800d5b3 	.word	0x0800d5b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d594:	f7fb fd60 	bl	8009058 <HAL_RCC_GetPCLK1Freq>
 800d598:	61b8      	str	r0, [r7, #24]
        break;
 800d59a:	e013      	b.n	800d5c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d59c:	f7fb fd70 	bl	8009080 <HAL_RCC_GetPCLK2Freq>
 800d5a0:	61b8      	str	r0, [r7, #24]
        break;
 800d5a2:	e00f      	b.n	800d5c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d5a4:	4b4b      	ldr	r3, [pc, #300]	; (800d6d4 <UART_SetConfig+0x4c4>)
 800d5a6:	61bb      	str	r3, [r7, #24]
        break;
 800d5a8:	e00c      	b.n	800d5c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d5aa:	f7fb fc83 	bl	8008eb4 <HAL_RCC_GetSysClockFreq>
 800d5ae:	61b8      	str	r0, [r7, #24]
        break;
 800d5b0:	e008      	b.n	800d5c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d5b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5b6:	61bb      	str	r3, [r7, #24]
        break;
 800d5b8:	e004      	b.n	800d5c4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d5be:	2301      	movs	r3, #1
 800d5c0:	77bb      	strb	r3, [r7, #30]
        break;
 800d5c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d5c4:	69bb      	ldr	r3, [r7, #24]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d074      	beq.n	800d6b4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d5ca:	69bb      	ldr	r3, [r7, #24]
 800d5cc:	005a      	lsls	r2, r3, #1
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	685b      	ldr	r3, [r3, #4]
 800d5d2:	085b      	lsrs	r3, r3, #1
 800d5d4:	441a      	add	r2, r3
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	685b      	ldr	r3, [r3, #4]
 800d5da:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	2b0f      	cmp	r3, #15
 800d5e4:	d916      	bls.n	800d614 <UART_SetConfig+0x404>
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5ec:	d212      	bcs.n	800d614 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	b29b      	uxth	r3, r3
 800d5f2:	f023 030f 	bic.w	r3, r3, #15
 800d5f6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	085b      	lsrs	r3, r3, #1
 800d5fc:	b29b      	uxth	r3, r3
 800d5fe:	f003 0307 	and.w	r3, r3, #7
 800d602:	b29a      	uxth	r2, r3
 800d604:	89fb      	ldrh	r3, [r7, #14]
 800d606:	4313      	orrs	r3, r2
 800d608:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	89fa      	ldrh	r2, [r7, #14]
 800d610:	60da      	str	r2, [r3, #12]
 800d612:	e04f      	b.n	800d6b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800d614:	2301      	movs	r3, #1
 800d616:	77bb      	strb	r3, [r7, #30]
 800d618:	e04c      	b.n	800d6b4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d61a:	7ffb      	ldrb	r3, [r7, #31]
 800d61c:	2b08      	cmp	r3, #8
 800d61e:	d828      	bhi.n	800d672 <UART_SetConfig+0x462>
 800d620:	a201      	add	r2, pc, #4	; (adr r2, 800d628 <UART_SetConfig+0x418>)
 800d622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d626:	bf00      	nop
 800d628:	0800d64d 	.word	0x0800d64d
 800d62c:	0800d655 	.word	0x0800d655
 800d630:	0800d65d 	.word	0x0800d65d
 800d634:	0800d673 	.word	0x0800d673
 800d638:	0800d663 	.word	0x0800d663
 800d63c:	0800d673 	.word	0x0800d673
 800d640:	0800d673 	.word	0x0800d673
 800d644:	0800d673 	.word	0x0800d673
 800d648:	0800d66b 	.word	0x0800d66b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d64c:	f7fb fd04 	bl	8009058 <HAL_RCC_GetPCLK1Freq>
 800d650:	61b8      	str	r0, [r7, #24]
        break;
 800d652:	e013      	b.n	800d67c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d654:	f7fb fd14 	bl	8009080 <HAL_RCC_GetPCLK2Freq>
 800d658:	61b8      	str	r0, [r7, #24]
        break;
 800d65a:	e00f      	b.n	800d67c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d65c:	4b1d      	ldr	r3, [pc, #116]	; (800d6d4 <UART_SetConfig+0x4c4>)
 800d65e:	61bb      	str	r3, [r7, #24]
        break;
 800d660:	e00c      	b.n	800d67c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d662:	f7fb fc27 	bl	8008eb4 <HAL_RCC_GetSysClockFreq>
 800d666:	61b8      	str	r0, [r7, #24]
        break;
 800d668:	e008      	b.n	800d67c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d66a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d66e:	61bb      	str	r3, [r7, #24]
        break;
 800d670:	e004      	b.n	800d67c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800d672:	2300      	movs	r3, #0
 800d674:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d676:	2301      	movs	r3, #1
 800d678:	77bb      	strb	r3, [r7, #30]
        break;
 800d67a:	bf00      	nop
    }

    if (pclk != 0U)
 800d67c:	69bb      	ldr	r3, [r7, #24]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d018      	beq.n	800d6b4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	685b      	ldr	r3, [r3, #4]
 800d686:	085a      	lsrs	r2, r3, #1
 800d688:	69bb      	ldr	r3, [r7, #24]
 800d68a:	441a      	add	r2, r3
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	685b      	ldr	r3, [r3, #4]
 800d690:	fbb2 f3f3 	udiv	r3, r2, r3
 800d694:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d696:	693b      	ldr	r3, [r7, #16]
 800d698:	2b0f      	cmp	r3, #15
 800d69a:	d909      	bls.n	800d6b0 <UART_SetConfig+0x4a0>
 800d69c:	693b      	ldr	r3, [r7, #16]
 800d69e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6a2:	d205      	bcs.n	800d6b0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	b29a      	uxth	r2, r3
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	60da      	str	r2, [r3, #12]
 800d6ae:	e001      	b.n	800d6b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800d6c0:	7fbb      	ldrb	r3, [r7, #30]
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3720      	adds	r7, #32
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	bf00      	nop
 800d6cc:	40007c00 	.word	0x40007c00
 800d6d0:	40023800 	.word	0x40023800
 800d6d4:	00f42400 	.word	0x00f42400

0800d6d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b083      	sub	sp, #12
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6e4:	f003 0301 	and.w	r3, r3, #1
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d00a      	beq.n	800d702 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	685b      	ldr	r3, [r3, #4]
 800d6f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	430a      	orrs	r2, r1
 800d700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d706:	f003 0302 	and.w	r3, r3, #2
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d00a      	beq.n	800d724 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	685b      	ldr	r3, [r3, #4]
 800d714:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	430a      	orrs	r2, r1
 800d722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d728:	f003 0304 	and.w	r3, r3, #4
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d00a      	beq.n	800d746 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	685b      	ldr	r3, [r3, #4]
 800d736:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	430a      	orrs	r2, r1
 800d744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d74a:	f003 0308 	and.w	r3, r3, #8
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d00a      	beq.n	800d768 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	685b      	ldr	r3, [r3, #4]
 800d758:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	430a      	orrs	r2, r1
 800d766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d76c:	f003 0310 	and.w	r3, r3, #16
 800d770:	2b00      	cmp	r3, #0
 800d772:	d00a      	beq.n	800d78a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	689b      	ldr	r3, [r3, #8]
 800d77a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	430a      	orrs	r2, r1
 800d788:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d78e:	f003 0320 	and.w	r3, r3, #32
 800d792:	2b00      	cmp	r3, #0
 800d794:	d00a      	beq.n	800d7ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	689b      	ldr	r3, [r3, #8]
 800d79c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	430a      	orrs	r2, r1
 800d7aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d01a      	beq.n	800d7ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	685b      	ldr	r3, [r3, #4]
 800d7be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	430a      	orrs	r2, r1
 800d7cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d7d6:	d10a      	bne.n	800d7ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	685b      	ldr	r3, [r3, #4]
 800d7de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	430a      	orrs	r2, r1
 800d7ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d00a      	beq.n	800d810 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	685b      	ldr	r3, [r3, #4]
 800d800:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	430a      	orrs	r2, r1
 800d80e:	605a      	str	r2, [r3, #4]
  }
}
 800d810:	bf00      	nop
 800d812:	370c      	adds	r7, #12
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr

0800d81c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b086      	sub	sp, #24
 800d820:	af02      	add	r7, sp, #8
 800d822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2200      	movs	r2, #0
 800d828:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d82c:	f7f8 f8fe 	bl	8005a2c <HAL_GetTick>
 800d830:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f003 0308 	and.w	r3, r3, #8
 800d83c:	2b08      	cmp	r3, #8
 800d83e:	d10e      	bne.n	800d85e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d840:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d844:	9300      	str	r3, [sp, #0]
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	2200      	movs	r2, #0
 800d84a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f000 f82d 	bl	800d8ae <UART_WaitOnFlagUntilTimeout>
 800d854:	4603      	mov	r3, r0
 800d856:	2b00      	cmp	r3, #0
 800d858:	d001      	beq.n	800d85e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d85a:	2303      	movs	r3, #3
 800d85c:	e023      	b.n	800d8a6 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f003 0304 	and.w	r3, r3, #4
 800d868:	2b04      	cmp	r3, #4
 800d86a:	d10e      	bne.n	800d88a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d86c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d870:	9300      	str	r3, [sp, #0]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	2200      	movs	r2, #0
 800d876:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f000 f817 	bl	800d8ae <UART_WaitOnFlagUntilTimeout>
 800d880:	4603      	mov	r3, r0
 800d882:	2b00      	cmp	r3, #0
 800d884:	d001      	beq.n	800d88a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d886:	2303      	movs	r3, #3
 800d888:	e00d      	b.n	800d8a6 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2220      	movs	r2, #32
 800d88e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2220      	movs	r2, #32
 800d894:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2200      	movs	r2, #0
 800d89a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800d8a4:	2300      	movs	r3, #0
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3710      	adds	r7, #16
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}

0800d8ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d8ae:	b580      	push	{r7, lr}
 800d8b0:	b09c      	sub	sp, #112	; 0x70
 800d8b2:	af00      	add	r7, sp, #0
 800d8b4:	60f8      	str	r0, [r7, #12]
 800d8b6:	60b9      	str	r1, [r7, #8]
 800d8b8:	603b      	str	r3, [r7, #0]
 800d8ba:	4613      	mov	r3, r2
 800d8bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d8be:	e0a5      	b.n	800da0c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d8c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d8c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8c6:	f000 80a1 	beq.w	800da0c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d8ca:	f7f8 f8af 	bl	8005a2c <HAL_GetTick>
 800d8ce:	4602      	mov	r2, r0
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	1ad3      	subs	r3, r2, r3
 800d8d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	d302      	bcc.n	800d8e0 <UART_WaitOnFlagUntilTimeout+0x32>
 800d8da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d13e      	bne.n	800d95e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8e8:	e853 3f00 	ldrex	r3, [r3]
 800d8ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d8ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d8f4:	667b      	str	r3, [r7, #100]	; 0x64
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d900:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d902:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d904:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d906:	e841 2300 	strex	r3, r2, [r1]
 800d90a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d90c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d1e6      	bne.n	800d8e0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	3308      	adds	r3, #8
 800d918:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d91a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d91c:	e853 3f00 	ldrex	r3, [r3]
 800d920:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d924:	f023 0301 	bic.w	r3, r3, #1
 800d928:	663b      	str	r3, [r7, #96]	; 0x60
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	3308      	adds	r3, #8
 800d930:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d932:	64ba      	str	r2, [r7, #72]	; 0x48
 800d934:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d936:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d938:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d93a:	e841 2300 	strex	r3, r2, [r1]
 800d93e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d942:	2b00      	cmp	r3, #0
 800d944:	d1e5      	bne.n	800d912 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	2220      	movs	r2, #32
 800d94a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	2220      	movs	r2, #32
 800d950:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	2200      	movs	r2, #0
 800d956:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800d95a:	2303      	movs	r3, #3
 800d95c:	e067      	b.n	800da2e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f003 0304 	and.w	r3, r3, #4
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d04f      	beq.n	800da0c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	69db      	ldr	r3, [r3, #28]
 800d972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d97a:	d147      	bne.n	800da0c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d984:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d98e:	e853 3f00 	ldrex	r3, [r3]
 800d992:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d996:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d99a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9a4:	637b      	str	r3, [r7, #52]	; 0x34
 800d9a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d9aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9ac:	e841 2300 	strex	r3, r2, [r1]
 800d9b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d1e6      	bne.n	800d986 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	3308      	adds	r3, #8
 800d9be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	e853 3f00 	ldrex	r3, [r3]
 800d9c6:	613b      	str	r3, [r7, #16]
   return(result);
 800d9c8:	693b      	ldr	r3, [r7, #16]
 800d9ca:	f023 0301 	bic.w	r3, r3, #1
 800d9ce:	66bb      	str	r3, [r7, #104]	; 0x68
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	3308      	adds	r3, #8
 800d9d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d9d8:	623a      	str	r2, [r7, #32]
 800d9da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9dc:	69f9      	ldr	r1, [r7, #28]
 800d9de:	6a3a      	ldr	r2, [r7, #32]
 800d9e0:	e841 2300 	strex	r3, r2, [r1]
 800d9e4:	61bb      	str	r3, [r7, #24]
   return(result);
 800d9e6:	69bb      	ldr	r3, [r7, #24]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d1e5      	bne.n	800d9b8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	2220      	movs	r2, #32
 800d9f0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	2220      	movs	r2, #32
 800d9f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2220      	movs	r2, #32
 800d9fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2200      	movs	r2, #0
 800da04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800da08:	2303      	movs	r3, #3
 800da0a:	e010      	b.n	800da2e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	69da      	ldr	r2, [r3, #28]
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	4013      	ands	r3, r2
 800da16:	68ba      	ldr	r2, [r7, #8]
 800da18:	429a      	cmp	r2, r3
 800da1a:	bf0c      	ite	eq
 800da1c:	2301      	moveq	r3, #1
 800da1e:	2300      	movne	r3, #0
 800da20:	b2db      	uxtb	r3, r3
 800da22:	461a      	mov	r2, r3
 800da24:	79fb      	ldrb	r3, [r7, #7]
 800da26:	429a      	cmp	r2, r3
 800da28:	f43f af4a 	beq.w	800d8c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800da2c:	2300      	movs	r3, #0
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3770      	adds	r7, #112	; 0x70
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}
	...

0800da38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800da38:	b480      	push	{r7}
 800da3a:	b097      	sub	sp, #92	; 0x5c
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	60f8      	str	r0, [r7, #12]
 800da40:	60b9      	str	r1, [r7, #8]
 800da42:	4613      	mov	r3, r2
 800da44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	68ba      	ldr	r2, [r7, #8]
 800da4a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	88fa      	ldrh	r2, [r7, #6]
 800da50:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	88fa      	ldrh	r2, [r7, #6]
 800da58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	2200      	movs	r2, #0
 800da60:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	689b      	ldr	r3, [r3, #8]
 800da66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da6a:	d10e      	bne.n	800da8a <UART_Start_Receive_IT+0x52>
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	691b      	ldr	r3, [r3, #16]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d105      	bne.n	800da80 <UART_Start_Receive_IT+0x48>
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f240 12ff 	movw	r2, #511	; 0x1ff
 800da7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800da7e:	e02d      	b.n	800dadc <UART_Start_Receive_IT+0xa4>
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	22ff      	movs	r2, #255	; 0xff
 800da84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800da88:	e028      	b.n	800dadc <UART_Start_Receive_IT+0xa4>
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	689b      	ldr	r3, [r3, #8]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d10d      	bne.n	800daae <UART_Start_Receive_IT+0x76>
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	691b      	ldr	r3, [r3, #16]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d104      	bne.n	800daa4 <UART_Start_Receive_IT+0x6c>
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	22ff      	movs	r2, #255	; 0xff
 800da9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800daa2:	e01b      	b.n	800dadc <UART_Start_Receive_IT+0xa4>
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	227f      	movs	r2, #127	; 0x7f
 800daa8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800daac:	e016      	b.n	800dadc <UART_Start_Receive_IT+0xa4>
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	689b      	ldr	r3, [r3, #8]
 800dab2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dab6:	d10d      	bne.n	800dad4 <UART_Start_Receive_IT+0x9c>
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	691b      	ldr	r3, [r3, #16]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d104      	bne.n	800daca <UART_Start_Receive_IT+0x92>
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	227f      	movs	r2, #127	; 0x7f
 800dac4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dac8:	e008      	b.n	800dadc <UART_Start_Receive_IT+0xa4>
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	223f      	movs	r2, #63	; 0x3f
 800dace:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dad2:	e003      	b.n	800dadc <UART_Start_Receive_IT+0xa4>
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	2200      	movs	r2, #0
 800dad8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	2200      	movs	r2, #0
 800dae0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	2222      	movs	r2, #34	; 0x22
 800dae8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	3308      	adds	r3, #8
 800daf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daf4:	e853 3f00 	ldrex	r3, [r3]
 800daf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dafc:	f043 0301 	orr.w	r3, r3, #1
 800db00:	657b      	str	r3, [r7, #84]	; 0x54
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	3308      	adds	r3, #8
 800db08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800db0a:	64ba      	str	r2, [r7, #72]	; 0x48
 800db0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800db10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db12:	e841 2300 	strex	r3, r2, [r1]
 800db16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800db18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d1e5      	bne.n	800daea <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	689b      	ldr	r3, [r3, #8]
 800db22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db26:	d107      	bne.n	800db38 <UART_Start_Receive_IT+0x100>
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	691b      	ldr	r3, [r3, #16]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d103      	bne.n	800db38 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	4a24      	ldr	r2, [pc, #144]	; (800dbc4 <UART_Start_Receive_IT+0x18c>)
 800db34:	665a      	str	r2, [r3, #100]	; 0x64
 800db36:	e002      	b.n	800db3e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	4a23      	ldr	r2, [pc, #140]	; (800dbc8 <UART_Start_Receive_IT+0x190>)
 800db3c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	2200      	movs	r2, #0
 800db42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	691b      	ldr	r3, [r3, #16]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d019      	beq.n	800db82 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db56:	e853 3f00 	ldrex	r3, [r3]
 800db5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800db5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db5e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800db62:	64fb      	str	r3, [r7, #76]	; 0x4c
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	461a      	mov	r2, r3
 800db6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db6c:	637b      	str	r3, [r7, #52]	; 0x34
 800db6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800db72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db74:	e841 2300 	strex	r3, r2, [r1]
 800db78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800db7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d1e6      	bne.n	800db4e <UART_Start_Receive_IT+0x116>
 800db80:	e018      	b.n	800dbb4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	e853 3f00 	ldrex	r3, [r3]
 800db8e:	613b      	str	r3, [r7, #16]
   return(result);
 800db90:	693b      	ldr	r3, [r7, #16]
 800db92:	f043 0320 	orr.w	r3, r3, #32
 800db96:	653b      	str	r3, [r7, #80]	; 0x50
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	461a      	mov	r2, r3
 800db9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dba0:	623b      	str	r3, [r7, #32]
 800dba2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dba4:	69f9      	ldr	r1, [r7, #28]
 800dba6:	6a3a      	ldr	r2, [r7, #32]
 800dba8:	e841 2300 	strex	r3, r2, [r1]
 800dbac:	61bb      	str	r3, [r7, #24]
   return(result);
 800dbae:	69bb      	ldr	r3, [r7, #24]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d1e6      	bne.n	800db82 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 800dbb4:	2300      	movs	r3, #0
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	375c      	adds	r7, #92	; 0x5c
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc0:	4770      	bx	lr
 800dbc2:	bf00      	nop
 800dbc4:	0800de6f 	.word	0x0800de6f
 800dbc8:	0800dd13 	.word	0x0800dd13

0800dbcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b095      	sub	sp, #84	; 0x54
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbdc:	e853 3f00 	ldrex	r3, [r3]
 800dbe0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dbe8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	461a      	mov	r2, r3
 800dbf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbf2:	643b      	str	r3, [r7, #64]	; 0x40
 800dbf4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbf6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dbf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dbfa:	e841 2300 	strex	r3, r2, [r1]
 800dbfe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dc00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d1e6      	bne.n	800dbd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	3308      	adds	r3, #8
 800dc0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc0e:	6a3b      	ldr	r3, [r7, #32]
 800dc10:	e853 3f00 	ldrex	r3, [r3]
 800dc14:	61fb      	str	r3, [r7, #28]
   return(result);
 800dc16:	69fb      	ldr	r3, [r7, #28]
 800dc18:	f023 0301 	bic.w	r3, r3, #1
 800dc1c:	64bb      	str	r3, [r7, #72]	; 0x48
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	3308      	adds	r3, #8
 800dc24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc26:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dc28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dc2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc2e:	e841 2300 	strex	r3, r2, [r1]
 800dc32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d1e5      	bne.n	800dc06 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dc3e:	2b01      	cmp	r3, #1
 800dc40:	d118      	bne.n	800dc74 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	e853 3f00 	ldrex	r3, [r3]
 800dc4e:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	f023 0310 	bic.w	r3, r3, #16
 800dc56:	647b      	str	r3, [r7, #68]	; 0x44
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	461a      	mov	r2, r3
 800dc5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc60:	61bb      	str	r3, [r7, #24]
 800dc62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc64:	6979      	ldr	r1, [r7, #20]
 800dc66:	69ba      	ldr	r2, [r7, #24]
 800dc68:	e841 2300 	strex	r3, r2, [r1]
 800dc6c:	613b      	str	r3, [r7, #16]
   return(result);
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d1e6      	bne.n	800dc42 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2220      	movs	r2, #32
 800dc78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2200      	movs	r2, #0
 800dc84:	665a      	str	r2, [r3, #100]	; 0x64
}
 800dc86:	bf00      	nop
 800dc88:	3754      	adds	r7, #84	; 0x54
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr

0800dc92 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dc92:	b580      	push	{r7, lr}
 800dc94:	b084      	sub	sp, #16
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	2200      	movs	r2, #0
 800dca4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dcb0:	68f8      	ldr	r0, [r7, #12]
 800dcb2:	f7ff fa8d 	bl	800d1d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dcb6:	bf00      	nop
 800dcb8:	3710      	adds	r7, #16
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}

0800dcbe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dcbe:	b580      	push	{r7, lr}
 800dcc0:	b088      	sub	sp, #32
 800dcc2:	af00      	add	r7, sp, #0
 800dcc4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	e853 3f00 	ldrex	r3, [r3]
 800dcd2:	60bb      	str	r3, [r7, #8]
   return(result);
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dcda:	61fb      	str	r3, [r7, #28]
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	461a      	mov	r2, r3
 800dce2:	69fb      	ldr	r3, [r7, #28]
 800dce4:	61bb      	str	r3, [r7, #24]
 800dce6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dce8:	6979      	ldr	r1, [r7, #20]
 800dcea:	69ba      	ldr	r2, [r7, #24]
 800dcec:	e841 2300 	strex	r3, r2, [r1]
 800dcf0:	613b      	str	r3, [r7, #16]
   return(result);
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d1e6      	bne.n	800dcc6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2220      	movs	r2, #32
 800dcfc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2200      	movs	r2, #0
 800dd02:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f7ff fa59 	bl	800d1bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd0a:	bf00      	nop
 800dd0c:	3720      	adds	r7, #32
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}

0800dd12 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800dd12:	b580      	push	{r7, lr}
 800dd14:	b096      	sub	sp, #88	; 0x58
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dd20:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd28:	2b22      	cmp	r3, #34	; 0x22
 800dd2a:	f040 8094 	bne.w	800de56 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd34:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800dd38:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800dd3c:	b2d9      	uxtb	r1, r3
 800dd3e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800dd42:	b2da      	uxtb	r2, r3
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd48:	400a      	ands	r2, r1
 800dd4a:	b2d2      	uxtb	r2, r2
 800dd4c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd52:	1c5a      	adds	r2, r3, #1
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dd5e:	b29b      	uxth	r3, r3
 800dd60:	3b01      	subs	r3, #1
 800dd62:	b29a      	uxth	r2, r3
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dd70:	b29b      	uxth	r3, r3
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d177      	bne.n	800de66 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd7e:	e853 3f00 	ldrex	r3, [r3]
 800dd82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dd84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dd8a:	653b      	str	r3, [r7, #80]	; 0x50
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	461a      	mov	r2, r3
 800dd92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd94:	647b      	str	r3, [r7, #68]	; 0x44
 800dd96:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dd9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd9c:	e841 2300 	strex	r3, r2, [r1]
 800dda0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dda2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d1e6      	bne.n	800dd76 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	3308      	adds	r3, #8
 800ddae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddb2:	e853 3f00 	ldrex	r3, [r3]
 800ddb6:	623b      	str	r3, [r7, #32]
   return(result);
 800ddb8:	6a3b      	ldr	r3, [r7, #32]
 800ddba:	f023 0301 	bic.w	r3, r3, #1
 800ddbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	3308      	adds	r3, #8
 800ddc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ddc8:	633a      	str	r2, [r7, #48]	; 0x30
 800ddca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ddce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddd0:	e841 2300 	strex	r3, r2, [r1]
 800ddd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ddd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d1e5      	bne.n	800dda8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2220      	movs	r2, #32
 800dde0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2200      	movs	r2, #0
 800dde6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ddec:	2b01      	cmp	r3, #1
 800ddee:	d12e      	bne.n	800de4e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	e853 3f00 	ldrex	r3, [r3]
 800de02:	60fb      	str	r3, [r7, #12]
   return(result);
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	f023 0310 	bic.w	r3, r3, #16
 800de0a:	64bb      	str	r3, [r7, #72]	; 0x48
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	461a      	mov	r2, r3
 800de12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de14:	61fb      	str	r3, [r7, #28]
 800de16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de18:	69b9      	ldr	r1, [r7, #24]
 800de1a:	69fa      	ldr	r2, [r7, #28]
 800de1c:	e841 2300 	strex	r3, r2, [r1]
 800de20:	617b      	str	r3, [r7, #20]
   return(result);
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d1e6      	bne.n	800ddf6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	69db      	ldr	r3, [r3, #28]
 800de2e:	f003 0310 	and.w	r3, r3, #16
 800de32:	2b10      	cmp	r3, #16
 800de34:	d103      	bne.n	800de3e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	2210      	movs	r2, #16
 800de3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800de44:	4619      	mov	r1, r3
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f7ff f9cc 	bl	800d1e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800de4c:	e00b      	b.n	800de66 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f7f6 fb28 	bl	80044a4 <HAL_UART_RxCpltCallback>
}
 800de54:	e007      	b.n	800de66 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	699a      	ldr	r2, [r3, #24]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f042 0208 	orr.w	r2, r2, #8
 800de64:	619a      	str	r2, [r3, #24]
}
 800de66:	bf00      	nop
 800de68:	3758      	adds	r7, #88	; 0x58
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}

0800de6e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800de6e:	b580      	push	{r7, lr}
 800de70:	b096      	sub	sp, #88	; 0x58
 800de72:	af00      	add	r7, sp, #0
 800de74:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800de7c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de84:	2b22      	cmp	r3, #34	; 0x22
 800de86:	f040 8094 	bne.w	800dfb2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de90:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de98:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800de9a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800de9e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800dea2:	4013      	ands	r3, r2
 800dea4:	b29a      	uxth	r2, r3
 800dea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dea8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800deae:	1c9a      	adds	r2, r3, #2
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800deba:	b29b      	uxth	r3, r3
 800debc:	3b01      	subs	r3, #1
 800debe:	b29a      	uxth	r2, r3
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800decc:	b29b      	uxth	r3, r3
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d177      	bne.n	800dfc2 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ded8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deda:	e853 3f00 	ldrex	r3, [r3]
 800dede:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	461a      	mov	r2, r3
 800deee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800def0:	643b      	str	r3, [r7, #64]	; 0x40
 800def2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800def4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800def6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800def8:	e841 2300 	strex	r3, r2, [r1]
 800defc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800defe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df00:	2b00      	cmp	r3, #0
 800df02:	d1e6      	bne.n	800ded2 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	3308      	adds	r3, #8
 800df0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df0c:	6a3b      	ldr	r3, [r7, #32]
 800df0e:	e853 3f00 	ldrex	r3, [r3]
 800df12:	61fb      	str	r3, [r7, #28]
   return(result);
 800df14:	69fb      	ldr	r3, [r7, #28]
 800df16:	f023 0301 	bic.w	r3, r3, #1
 800df1a:	64bb      	str	r3, [r7, #72]	; 0x48
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	3308      	adds	r3, #8
 800df22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df24:	62fa      	str	r2, [r7, #44]	; 0x2c
 800df26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df2c:	e841 2300 	strex	r3, r2, [r1]
 800df30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800df32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df34:	2b00      	cmp	r3, #0
 800df36:	d1e5      	bne.n	800df04 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2220      	movs	r2, #32
 800df3c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	2200      	movs	r2, #0
 800df42:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df48:	2b01      	cmp	r3, #1
 800df4a:	d12e      	bne.n	800dfaa <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2200      	movs	r2, #0
 800df50:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	e853 3f00 	ldrex	r3, [r3]
 800df5e:	60bb      	str	r3, [r7, #8]
   return(result);
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	f023 0310 	bic.w	r3, r3, #16
 800df66:	647b      	str	r3, [r7, #68]	; 0x44
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	461a      	mov	r2, r3
 800df6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df70:	61bb      	str	r3, [r7, #24]
 800df72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df74:	6979      	ldr	r1, [r7, #20]
 800df76:	69ba      	ldr	r2, [r7, #24]
 800df78:	e841 2300 	strex	r3, r2, [r1]
 800df7c:	613b      	str	r3, [r7, #16]
   return(result);
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d1e6      	bne.n	800df52 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	69db      	ldr	r3, [r3, #28]
 800df8a:	f003 0310 	and.w	r3, r3, #16
 800df8e:	2b10      	cmp	r3, #16
 800df90:	d103      	bne.n	800df9a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	2210      	movs	r2, #16
 800df98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f7ff f91e 	bl	800d1e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dfa8:	e00b      	b.n	800dfc2 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f7f6 fa7a 	bl	80044a4 <HAL_UART_RxCpltCallback>
}
 800dfb0:	e007      	b.n	800dfc2 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	699a      	ldr	r2, [r3, #24]
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	f042 0208 	orr.w	r2, r2, #8
 800dfc0:	619a      	str	r2, [r3, #24]
}
 800dfc2:	bf00      	nop
 800dfc4:	3758      	adds	r7, #88	; 0x58
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}
	...

0800dfcc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800dfcc:	b084      	sub	sp, #16
 800dfce:	b480      	push	{r7}
 800dfd0:	b085      	sub	sp, #20
 800dfd2:	af00      	add	r7, sp, #0
 800dfd4:	6078      	str	r0, [r7, #4]
 800dfd6:	f107 001c 	add.w	r0, r7, #28
 800dfda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800dfe2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800dfe4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800dfe6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800dfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800dfea:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800dfec:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800dfee:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800dff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800dff2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800dff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800dff6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800dff8:	68fa      	ldr	r2, [r7, #12]
 800dffa:	4313      	orrs	r3, r2
 800dffc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	685a      	ldr	r2, [r3, #4]
 800e002:	4b07      	ldr	r3, [pc, #28]	; (800e020 <SDMMC_Init+0x54>)
 800e004:	4013      	ands	r3, r2
 800e006:	68fa      	ldr	r2, [r7, #12]
 800e008:	431a      	orrs	r2, r3
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e00e:	2300      	movs	r3, #0
}
 800e010:	4618      	mov	r0, r3
 800e012:	3714      	adds	r7, #20
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	b004      	add	sp, #16
 800e01c:	4770      	bx	lr
 800e01e:	bf00      	nop
 800e020:	ffff8100 	.word	0xffff8100

0800e024 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800e024:	b480      	push	{r7}
 800e026:	b083      	sub	sp, #12
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e032:	4618      	mov	r0, r3
 800e034:	370c      	adds	r7, #12
 800e036:	46bd      	mov	sp, r7
 800e038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03c:	4770      	bx	lr

0800e03e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800e03e:	b480      	push	{r7}
 800e040:	b083      	sub	sp, #12
 800e042:	af00      	add	r7, sp, #0
 800e044:	6078      	str	r0, [r7, #4]
 800e046:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	681a      	ldr	r2, [r3, #0]
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e052:	2300      	movs	r3, #0
}
 800e054:	4618      	mov	r0, r3
 800e056:	370c      	adds	r7, #12
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr

0800e060 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800e060:	b480      	push	{r7}
 800e062:	b083      	sub	sp, #12
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2203      	movs	r2, #3
 800e06c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e06e:	2300      	movs	r3, #0
}
 800e070:	4618      	mov	r0, r3
 800e072:	370c      	adds	r7, #12
 800e074:	46bd      	mov	sp, r7
 800e076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07a:	4770      	bx	lr

0800e07c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800e07c:	b480      	push	{r7}
 800e07e:	b083      	sub	sp, #12
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	f003 0303 	and.w	r3, r3, #3
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	370c      	adds	r7, #12
 800e090:	46bd      	mov	sp, r7
 800e092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e096:	4770      	bx	lr

0800e098 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e098:	b480      	push	{r7}
 800e09a:	b085      	sub	sp, #20
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
 800e0a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	681a      	ldr	r2, [r3, #0]
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e0b6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e0bc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e0c2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e0c4:	68fa      	ldr	r2, [r7, #12]
 800e0c6:	4313      	orrs	r3, r2
 800e0c8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	68da      	ldr	r2, [r3, #12]
 800e0ce:	4b06      	ldr	r3, [pc, #24]	; (800e0e8 <SDMMC_SendCommand+0x50>)
 800e0d0:	4013      	ands	r3, r2
 800e0d2:	68fa      	ldr	r2, [r7, #12]
 800e0d4:	431a      	orrs	r2, r3
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e0da:	2300      	movs	r3, #0
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3714      	adds	r7, #20
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr
 800e0e8:	fffff000 	.word	0xfffff000

0800e0ec <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	b083      	sub	sp, #12
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	691b      	ldr	r3, [r3, #16]
 800e0f8:	b2db      	uxtb	r3, r3
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	370c      	adds	r7, #12
 800e0fe:	46bd      	mov	sp, r7
 800e100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e104:	4770      	bx	lr

0800e106 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e106:	b480      	push	{r7}
 800e108:	b085      	sub	sp, #20
 800e10a:	af00      	add	r7, sp, #0
 800e10c:	6078      	str	r0, [r7, #4]
 800e10e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	3314      	adds	r3, #20
 800e114:	461a      	mov	r2, r3
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	4413      	add	r3, r2
 800e11a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
}  
 800e120:	4618      	mov	r0, r3
 800e122:	3714      	adds	r7, #20
 800e124:	46bd      	mov	sp, r7
 800e126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12a:	4770      	bx	lr

0800e12c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800e12c:	b480      	push	{r7}
 800e12e:	b085      	sub	sp, #20
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
 800e134:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e136:	2300      	movs	r3, #0
 800e138:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	681a      	ldr	r2, [r3, #0]
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	685a      	ldr	r2, [r3, #4]
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e152:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e158:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e15e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e160:	68fa      	ldr	r2, [r7, #12]
 800e162:	4313      	orrs	r3, r2
 800e164:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e16a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	431a      	orrs	r2, r3
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e176:	2300      	movs	r3, #0

}
 800e178:	4618      	mov	r0, r3
 800e17a:	3714      	adds	r7, #20
 800e17c:	46bd      	mov	sp, r7
 800e17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e182:	4770      	bx	lr

0800e184 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b088      	sub	sp, #32
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e192:	2310      	movs	r3, #16
 800e194:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e196:	2340      	movs	r3, #64	; 0x40
 800e198:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e19a:	2300      	movs	r3, #0
 800e19c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e19e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e1a4:	f107 0308 	add.w	r3, r7, #8
 800e1a8:	4619      	mov	r1, r3
 800e1aa:	6878      	ldr	r0, [r7, #4]
 800e1ac:	f7ff ff74 	bl	800e098 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800e1b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1b4:	2110      	movs	r1, #16
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f000 fa1a 	bl	800e5f0 <SDMMC_GetCmdResp1>
 800e1bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1be:	69fb      	ldr	r3, [r7, #28]
}
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	3720      	adds	r7, #32
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b088      	sub	sp, #32
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e1d6:	2311      	movs	r3, #17
 800e1d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e1da:	2340      	movs	r3, #64	; 0x40
 800e1dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e1e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e1e8:	f107 0308 	add.w	r3, r7, #8
 800e1ec:	4619      	mov	r1, r3
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f7ff ff52 	bl	800e098 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e1f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1f8:	2111      	movs	r1, #17
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f000 f9f8 	bl	800e5f0 <SDMMC_GetCmdResp1>
 800e200:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e202:	69fb      	ldr	r3, [r7, #28]
}
 800e204:	4618      	mov	r0, r3
 800e206:	3720      	adds	r7, #32
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}

0800e20c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b088      	sub	sp, #32
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
 800e214:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e21a:	2312      	movs	r3, #18
 800e21c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e21e:	2340      	movs	r3, #64	; 0x40
 800e220:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e222:	2300      	movs	r3, #0
 800e224:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e22a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e22c:	f107 0308 	add.w	r3, r7, #8
 800e230:	4619      	mov	r1, r3
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f7ff ff30 	bl	800e098 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e238:	f241 3288 	movw	r2, #5000	; 0x1388
 800e23c:	2112      	movs	r1, #18
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	f000 f9d6 	bl	800e5f0 <SDMMC_GetCmdResp1>
 800e244:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e246:	69fb      	ldr	r3, [r7, #28]
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3720      	adds	r7, #32
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}

0800e250 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b088      	sub	sp, #32
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
 800e258:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e25e:	2318      	movs	r3, #24
 800e260:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e262:	2340      	movs	r3, #64	; 0x40
 800e264:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e266:	2300      	movs	r3, #0
 800e268:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e26a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e26e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e270:	f107 0308 	add.w	r3, r7, #8
 800e274:	4619      	mov	r1, r3
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f7ff ff0e 	bl	800e098 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e27c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e280:	2118      	movs	r1, #24
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f000 f9b4 	bl	800e5f0 <SDMMC_GetCmdResp1>
 800e288:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e28a:	69fb      	ldr	r3, [r7, #28]
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3720      	adds	r7, #32
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}

0800e294 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b088      	sub	sp, #32
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
 800e29c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e2a2:	2319      	movs	r3, #25
 800e2a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e2a6:	2340      	movs	r3, #64	; 0x40
 800e2a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e2ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e2b4:	f107 0308 	add.w	r3, r7, #8
 800e2b8:	4619      	mov	r1, r3
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f7ff feec 	bl	800e098 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e2c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2c4:	2119      	movs	r1, #25
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f000 f992 	bl	800e5f0 <SDMMC_GetCmdResp1>
 800e2cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2ce:	69fb      	ldr	r3, [r7, #28]
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	3720      	adds	r7, #32
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}

0800e2d8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b088      	sub	sp, #32
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e2e4:	230c      	movs	r3, #12
 800e2e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e2e8:	2340      	movs	r3, #64	; 0x40
 800e2ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e2f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e2f6:	f107 0308 	add.w	r3, r7, #8
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f7ff fecb 	bl	800e098 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800e302:	4a05      	ldr	r2, [pc, #20]	; (800e318 <SDMMC_CmdStopTransfer+0x40>)
 800e304:	210c      	movs	r1, #12
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f000 f972 	bl	800e5f0 <SDMMC_GetCmdResp1>
 800e30c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e30e:	69fb      	ldr	r3, [r7, #28]
}
 800e310:	4618      	mov	r0, r3
 800e312:	3720      	adds	r7, #32
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}
 800e318:	05f5e100 	.word	0x05f5e100

0800e31c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b08a      	sub	sp, #40	; 0x28
 800e320:	af00      	add	r7, sp, #0
 800e322:	60f8      	str	r0, [r7, #12]
 800e324:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e32c:	2307      	movs	r3, #7
 800e32e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e330:	2340      	movs	r3, #64	; 0x40
 800e332:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e334:	2300      	movs	r3, #0
 800e336:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e33c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e33e:	f107 0310 	add.w	r3, r7, #16
 800e342:	4619      	mov	r1, r3
 800e344:	68f8      	ldr	r0, [r7, #12]
 800e346:	f7ff fea7 	bl	800e098 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e34a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e34e:	2107      	movs	r1, #7
 800e350:	68f8      	ldr	r0, [r7, #12]
 800e352:	f000 f94d 	bl	800e5f0 <SDMMC_GetCmdResp1>
 800e356:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3728      	adds	r7, #40	; 0x28
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}

0800e362 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e362:	b580      	push	{r7, lr}
 800e364:	b088      	sub	sp, #32
 800e366:	af00      	add	r7, sp, #0
 800e368:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e36a:	2300      	movs	r3, #0
 800e36c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e36e:	2300      	movs	r3, #0
 800e370:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e372:	2300      	movs	r3, #0
 800e374:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e376:	2300      	movs	r3, #0
 800e378:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e37a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e37e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e380:	f107 0308 	add.w	r3, r7, #8
 800e384:	4619      	mov	r1, r3
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f7ff fe86 	bl	800e098 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f000 fb67 	bl	800ea60 <SDMMC_GetCmdError>
 800e392:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e394:	69fb      	ldr	r3, [r7, #28]
}
 800e396:	4618      	mov	r0, r3
 800e398:	3720      	adds	r7, #32
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}

0800e39e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e39e:	b580      	push	{r7, lr}
 800e3a0:	b088      	sub	sp, #32
 800e3a2:	af00      	add	r7, sp, #0
 800e3a4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e3a6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e3aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e3ac:	2308      	movs	r3, #8
 800e3ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e3b0:	2340      	movs	r3, #64	; 0x40
 800e3b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e3b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e3be:	f107 0308 	add.w	r3, r7, #8
 800e3c2:	4619      	mov	r1, r3
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f7ff fe67 	bl	800e098 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f000 fafa 	bl	800e9c4 <SDMMC_GetCmdResp7>
 800e3d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3d2:	69fb      	ldr	r3, [r7, #28]
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3720      	adds	r7, #32
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b088      	sub	sp, #32
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
 800e3e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e3ea:	2337      	movs	r3, #55	; 0x37
 800e3ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e3ee:	2340      	movs	r3, #64	; 0x40
 800e3f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e3f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e3fc:	f107 0308 	add.w	r3, r7, #8
 800e400:	4619      	mov	r1, r3
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f7ff fe48 	bl	800e098 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800e408:	f241 3288 	movw	r2, #5000	; 0x1388
 800e40c:	2137      	movs	r1, #55	; 0x37
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f000 f8ee 	bl	800e5f0 <SDMMC_GetCmdResp1>
 800e414:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e416:	69fb      	ldr	r3, [r7, #28]
}
 800e418:	4618      	mov	r0, r3
 800e41a:	3720      	adds	r7, #32
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}

0800e420 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b088      	sub	sp, #32
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
 800e428:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e42a:	683a      	ldr	r2, [r7, #0]
 800e42c:	4b0d      	ldr	r3, [pc, #52]	; (800e464 <SDMMC_CmdAppOperCommand+0x44>)
 800e42e:	4313      	orrs	r3, r2
 800e430:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e432:	2329      	movs	r3, #41	; 0x29
 800e434:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e436:	2340      	movs	r3, #64	; 0x40
 800e438:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e43a:	2300      	movs	r3, #0
 800e43c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e43e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e442:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e444:	f107 0308 	add.w	r3, r7, #8
 800e448:	4619      	mov	r1, r3
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f7ff fe24 	bl	800e098 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f000 fa03 	bl	800e85c <SDMMC_GetCmdResp3>
 800e456:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e458:	69fb      	ldr	r3, [r7, #28]
}
 800e45a:	4618      	mov	r0, r3
 800e45c:	3720      	adds	r7, #32
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}
 800e462:	bf00      	nop
 800e464:	80100000 	.word	0x80100000

0800e468 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b088      	sub	sp, #32
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
 800e470:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e476:	2306      	movs	r3, #6
 800e478:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e47a:	2340      	movs	r3, #64	; 0x40
 800e47c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e47e:	2300      	movs	r3, #0
 800e480:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e486:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e488:	f107 0308 	add.w	r3, r7, #8
 800e48c:	4619      	mov	r1, r3
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f7ff fe02 	bl	800e098 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800e494:	f241 3288 	movw	r2, #5000	; 0x1388
 800e498:	2106      	movs	r1, #6
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	f000 f8a8 	bl	800e5f0 <SDMMC_GetCmdResp1>
 800e4a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4a2:	69fb      	ldr	r3, [r7, #28]
}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	3720      	adds	r7, #32
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}

0800e4ac <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b088      	sub	sp, #32
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e4b8:	2333      	movs	r3, #51	; 0x33
 800e4ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e4bc:	2340      	movs	r3, #64	; 0x40
 800e4be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e4c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e4ca:	f107 0308 	add.w	r3, r7, #8
 800e4ce:	4619      	mov	r1, r3
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f7ff fde1 	bl	800e098 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800e4d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4da:	2133      	movs	r1, #51	; 0x33
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f000 f887 	bl	800e5f0 <SDMMC_GetCmdResp1>
 800e4e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4e4:	69fb      	ldr	r3, [r7, #28]
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3720      	adds	r7, #32
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}

0800e4ee <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e4ee:	b580      	push	{r7, lr}
 800e4f0:	b088      	sub	sp, #32
 800e4f2:	af00      	add	r7, sp, #0
 800e4f4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e4fa:	2302      	movs	r3, #2
 800e4fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e4fe:	23c0      	movs	r3, #192	; 0xc0
 800e500:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e502:	2300      	movs	r3, #0
 800e504:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e50a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e50c:	f107 0308 	add.w	r3, r7, #8
 800e510:	4619      	mov	r1, r3
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	f7ff fdc0 	bl	800e098 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f000 f957 	bl	800e7cc <SDMMC_GetCmdResp2>
 800e51e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e520:	69fb      	ldr	r3, [r7, #28]
}
 800e522:	4618      	mov	r0, r3
 800e524:	3720      	adds	r7, #32
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}

0800e52a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e52a:	b580      	push	{r7, lr}
 800e52c:	b088      	sub	sp, #32
 800e52e:	af00      	add	r7, sp, #0
 800e530:	6078      	str	r0, [r7, #4]
 800e532:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e538:	2309      	movs	r3, #9
 800e53a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e53c:	23c0      	movs	r3, #192	; 0xc0
 800e53e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e540:	2300      	movs	r3, #0
 800e542:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e544:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e548:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e54a:	f107 0308 	add.w	r3, r7, #8
 800e54e:	4619      	mov	r1, r3
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	f7ff fda1 	bl	800e098 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f000 f938 	bl	800e7cc <SDMMC_GetCmdResp2>
 800e55c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e55e:	69fb      	ldr	r3, [r7, #28]
}
 800e560:	4618      	mov	r0, r3
 800e562:	3720      	adds	r7, #32
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}

0800e568 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b088      	sub	sp, #32
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e572:	2300      	movs	r3, #0
 800e574:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e576:	2303      	movs	r3, #3
 800e578:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e57a:	2340      	movs	r3, #64	; 0x40
 800e57c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e57e:	2300      	movs	r3, #0
 800e580:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e586:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e588:	f107 0308 	add.w	r3, r7, #8
 800e58c:	4619      	mov	r1, r3
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	f7ff fd82 	bl	800e098 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e594:	683a      	ldr	r2, [r7, #0]
 800e596:	2103      	movs	r1, #3
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f000 f99d 	bl	800e8d8 <SDMMC_GetCmdResp6>
 800e59e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5a0:	69fb      	ldr	r3, [r7, #28]
}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	3720      	adds	r7, #32
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd80      	pop	{r7, pc}

0800e5aa <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e5aa:	b580      	push	{r7, lr}
 800e5ac:	b088      	sub	sp, #32
 800e5ae:	af00      	add	r7, sp, #0
 800e5b0:	6078      	str	r0, [r7, #4]
 800e5b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e5b8:	230d      	movs	r3, #13
 800e5ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e5bc:	2340      	movs	r3, #64	; 0x40
 800e5be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e5c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e5ca:	f107 0308 	add.w	r3, r7, #8
 800e5ce:	4619      	mov	r1, r3
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f7ff fd61 	bl	800e098 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e5d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5da:	210d      	movs	r1, #13
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	f000 f807 	bl	800e5f0 <SDMMC_GetCmdResp1>
 800e5e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5e4:	69fb      	ldr	r3, [r7, #28]
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3720      	adds	r7, #32
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}
	...

0800e5f0 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b088      	sub	sp, #32
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	60f8      	str	r0, [r7, #12]
 800e5f8:	460b      	mov	r3, r1
 800e5fa:	607a      	str	r2, [r7, #4]
 800e5fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e5fe:	4b70      	ldr	r3, [pc, #448]	; (800e7c0 <SDMMC_GetCmdResp1+0x1d0>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	4a70      	ldr	r2, [pc, #448]	; (800e7c4 <SDMMC_GetCmdResp1+0x1d4>)
 800e604:	fba2 2303 	umull	r2, r3, r2, r3
 800e608:	0a5a      	lsrs	r2, r3, #9
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	fb02 f303 	mul.w	r3, r2, r3
 800e610:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e612:	69fb      	ldr	r3, [r7, #28]
 800e614:	1e5a      	subs	r2, r3, #1
 800e616:	61fa      	str	r2, [r7, #28]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d102      	bne.n	800e622 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e61c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e620:	e0c9      	b.n	800e7b6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e626:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e628:	69bb      	ldr	r3, [r7, #24]
 800e62a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d0ef      	beq.n	800e612 <SDMMC_GetCmdResp1+0x22>
 800e632:	69bb      	ldr	r3, [r7, #24]
 800e634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d1ea      	bne.n	800e612 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e640:	f003 0304 	and.w	r3, r3, #4
 800e644:	2b00      	cmp	r3, #0
 800e646:	d004      	beq.n	800e652 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	2204      	movs	r2, #4
 800e64c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e64e:	2304      	movs	r3, #4
 800e650:	e0b1      	b.n	800e7b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e656:	f003 0301 	and.w	r3, r3, #1
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d004      	beq.n	800e668 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	2201      	movs	r2, #1
 800e662:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e664:	2301      	movs	r3, #1
 800e666:	e0a6      	b.n	800e7b6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	22c5      	movs	r2, #197	; 0xc5
 800e66c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e66e:	68f8      	ldr	r0, [r7, #12]
 800e670:	f7ff fd3c 	bl	800e0ec <SDMMC_GetCommandResponse>
 800e674:	4603      	mov	r3, r0
 800e676:	461a      	mov	r2, r3
 800e678:	7afb      	ldrb	r3, [r7, #11]
 800e67a:	4293      	cmp	r3, r2
 800e67c:	d001      	beq.n	800e682 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e67e:	2301      	movs	r3, #1
 800e680:	e099      	b.n	800e7b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e682:	2100      	movs	r1, #0
 800e684:	68f8      	ldr	r0, [r7, #12]
 800e686:	f7ff fd3e 	bl	800e106 <SDMMC_GetResponse>
 800e68a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e68c:	697a      	ldr	r2, [r7, #20]
 800e68e:	4b4e      	ldr	r3, [pc, #312]	; (800e7c8 <SDMMC_GetCmdResp1+0x1d8>)
 800e690:	4013      	ands	r3, r2
 800e692:	2b00      	cmp	r3, #0
 800e694:	d101      	bne.n	800e69a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e696:	2300      	movs	r3, #0
 800e698:	e08d      	b.n	800e7b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e69a:	697b      	ldr	r3, [r7, #20]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	da02      	bge.n	800e6a6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e6a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e6a4:	e087      	b.n	800e7b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e6a6:	697b      	ldr	r3, [r7, #20]
 800e6a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d001      	beq.n	800e6b4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e6b0:	2340      	movs	r3, #64	; 0x40
 800e6b2:	e080      	b.n	800e7b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d001      	beq.n	800e6c2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e6be:	2380      	movs	r3, #128	; 0x80
 800e6c0:	e079      	b.n	800e7b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d002      	beq.n	800e6d2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e6cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e6d0:	e071      	b.n	800e7b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d002      	beq.n	800e6e2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e6dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e6e0:	e069      	b.n	800e7b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d002      	beq.n	800e6f2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e6ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6f0:	e061      	b.n	800e7b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d002      	beq.n	800e702 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e6fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e700:	e059      	b.n	800e7b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d002      	beq.n	800e712 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e70c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e710:	e051      	b.n	800e7b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e712:	697b      	ldr	r3, [r7, #20]
 800e714:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d002      	beq.n	800e722 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e71c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e720:	e049      	b.n	800e7b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d002      	beq.n	800e732 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e72c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e730:	e041      	b.n	800e7b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d002      	beq.n	800e742 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e73c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e740:	e039      	b.n	800e7b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e742:	697b      	ldr	r3, [r7, #20]
 800e744:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d002      	beq.n	800e752 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e74c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e750:	e031      	b.n	800e7b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d002      	beq.n	800e762 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e75c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e760:	e029      	b.n	800e7b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d002      	beq.n	800e772 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e76c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e770:	e021      	b.n	800e7b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d002      	beq.n	800e782 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e77c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e780:	e019      	b.n	800e7b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d002      	beq.n	800e792 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e78c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e790:	e011      	b.n	800e7b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d002      	beq.n	800e7a2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e79c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e7a0:	e009      	b.n	800e7b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	f003 0308 	and.w	r3, r3, #8
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d002      	beq.n	800e7b2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e7ac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e7b0:	e001      	b.n	800e7b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e7b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	3720      	adds	r7, #32
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
 800e7be:	bf00      	nop
 800e7c0:	20000000 	.word	0x20000000
 800e7c4:	10624dd3 	.word	0x10624dd3
 800e7c8:	fdffe008 	.word	0xfdffe008

0800e7cc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	b085      	sub	sp, #20
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e7d4:	4b1f      	ldr	r3, [pc, #124]	; (800e854 <SDMMC_GetCmdResp2+0x88>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	4a1f      	ldr	r2, [pc, #124]	; (800e858 <SDMMC_GetCmdResp2+0x8c>)
 800e7da:	fba2 2303 	umull	r2, r3, r2, r3
 800e7de:	0a5b      	lsrs	r3, r3, #9
 800e7e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e7e4:	fb02 f303 	mul.w	r3, r2, r3
 800e7e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	1e5a      	subs	r2, r3, #1
 800e7ee:	60fa      	str	r2, [r7, #12]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d102      	bne.n	800e7fa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e7f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e7f8:	e026      	b.n	800e848 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7fe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e806:	2b00      	cmp	r3, #0
 800e808:	d0ef      	beq.n	800e7ea <SDMMC_GetCmdResp2+0x1e>
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e810:	2b00      	cmp	r3, #0
 800e812:	d1ea      	bne.n	800e7ea <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e818:	f003 0304 	and.w	r3, r3, #4
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d004      	beq.n	800e82a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2204      	movs	r2, #4
 800e824:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e826:	2304      	movs	r3, #4
 800e828:	e00e      	b.n	800e848 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e82e:	f003 0301 	and.w	r3, r3, #1
 800e832:	2b00      	cmp	r3, #0
 800e834:	d004      	beq.n	800e840 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2201      	movs	r2, #1
 800e83a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e83c:	2301      	movs	r3, #1
 800e83e:	e003      	b.n	800e848 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	22c5      	movs	r2, #197	; 0xc5
 800e844:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e846:	2300      	movs	r3, #0
}
 800e848:	4618      	mov	r0, r3
 800e84a:	3714      	adds	r7, #20
 800e84c:	46bd      	mov	sp, r7
 800e84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e852:	4770      	bx	lr
 800e854:	20000000 	.word	0x20000000
 800e858:	10624dd3 	.word	0x10624dd3

0800e85c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e85c:	b480      	push	{r7}
 800e85e:	b085      	sub	sp, #20
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e864:	4b1a      	ldr	r3, [pc, #104]	; (800e8d0 <SDMMC_GetCmdResp3+0x74>)
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	4a1a      	ldr	r2, [pc, #104]	; (800e8d4 <SDMMC_GetCmdResp3+0x78>)
 800e86a:	fba2 2303 	umull	r2, r3, r2, r3
 800e86e:	0a5b      	lsrs	r3, r3, #9
 800e870:	f241 3288 	movw	r2, #5000	; 0x1388
 800e874:	fb02 f303 	mul.w	r3, r2, r3
 800e878:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	1e5a      	subs	r2, r3, #1
 800e87e:	60fa      	str	r2, [r7, #12]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d102      	bne.n	800e88a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e884:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e888:	e01b      	b.n	800e8c2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e88e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e896:	2b00      	cmp	r3, #0
 800e898:	d0ef      	beq.n	800e87a <SDMMC_GetCmdResp3+0x1e>
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d1ea      	bne.n	800e87a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8a8:	f003 0304 	and.w	r3, r3, #4
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d004      	beq.n	800e8ba <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2204      	movs	r2, #4
 800e8b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e8b6:	2304      	movs	r3, #4
 800e8b8:	e003      	b.n	800e8c2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	22c5      	movs	r2, #197	; 0xc5
 800e8be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e8c0:	2300      	movs	r3, #0
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	3714      	adds	r7, #20
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8cc:	4770      	bx	lr
 800e8ce:	bf00      	nop
 800e8d0:	20000000 	.word	0x20000000
 800e8d4:	10624dd3 	.word	0x10624dd3

0800e8d8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b088      	sub	sp, #32
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	60f8      	str	r0, [r7, #12]
 800e8e0:	460b      	mov	r3, r1
 800e8e2:	607a      	str	r2, [r7, #4]
 800e8e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e8e6:	4b35      	ldr	r3, [pc, #212]	; (800e9bc <SDMMC_GetCmdResp6+0xe4>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	4a35      	ldr	r2, [pc, #212]	; (800e9c0 <SDMMC_GetCmdResp6+0xe8>)
 800e8ec:	fba2 2303 	umull	r2, r3, r2, r3
 800e8f0:	0a5b      	lsrs	r3, r3, #9
 800e8f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e8f6:	fb02 f303 	mul.w	r3, r2, r3
 800e8fa:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e8fc:	69fb      	ldr	r3, [r7, #28]
 800e8fe:	1e5a      	subs	r2, r3, #1
 800e900:	61fa      	str	r2, [r7, #28]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d102      	bne.n	800e90c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e906:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e90a:	e052      	b.n	800e9b2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e910:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e912:	69bb      	ldr	r3, [r7, #24]
 800e914:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d0ef      	beq.n	800e8fc <SDMMC_GetCmdResp6+0x24>
 800e91c:	69bb      	ldr	r3, [r7, #24]
 800e91e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e922:	2b00      	cmp	r3, #0
 800e924:	d1ea      	bne.n	800e8fc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e92a:	f003 0304 	and.w	r3, r3, #4
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d004      	beq.n	800e93c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	2204      	movs	r2, #4
 800e936:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e938:	2304      	movs	r3, #4
 800e93a:	e03a      	b.n	800e9b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e940:	f003 0301 	and.w	r3, r3, #1
 800e944:	2b00      	cmp	r3, #0
 800e946:	d004      	beq.n	800e952 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	2201      	movs	r2, #1
 800e94c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e94e:	2301      	movs	r3, #1
 800e950:	e02f      	b.n	800e9b2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e952:	68f8      	ldr	r0, [r7, #12]
 800e954:	f7ff fbca 	bl	800e0ec <SDMMC_GetCommandResponse>
 800e958:	4603      	mov	r3, r0
 800e95a:	461a      	mov	r2, r3
 800e95c:	7afb      	ldrb	r3, [r7, #11]
 800e95e:	4293      	cmp	r3, r2
 800e960:	d001      	beq.n	800e966 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e962:	2301      	movs	r3, #1
 800e964:	e025      	b.n	800e9b2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	22c5      	movs	r2, #197	; 0xc5
 800e96a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e96c:	2100      	movs	r1, #0
 800e96e:	68f8      	ldr	r0, [r7, #12]
 800e970:	f7ff fbc9 	bl	800e106 <SDMMC_GetResponse>
 800e974:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d106      	bne.n	800e98e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	0c1b      	lsrs	r3, r3, #16
 800e984:	b29a      	uxth	r2, r3
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e98a:	2300      	movs	r3, #0
 800e98c:	e011      	b.n	800e9b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e994:	2b00      	cmp	r3, #0
 800e996:	d002      	beq.n	800e99e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e99c:	e009      	b.n	800e9b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e99e:	697b      	ldr	r3, [r7, #20]
 800e9a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d002      	beq.n	800e9ae <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e9a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e9ac:	e001      	b.n	800e9b2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e9ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3720      	adds	r7, #32
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}
 800e9ba:	bf00      	nop
 800e9bc:	20000000 	.word	0x20000000
 800e9c0:	10624dd3 	.word	0x10624dd3

0800e9c4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e9c4:	b480      	push	{r7}
 800e9c6:	b085      	sub	sp, #20
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e9cc:	4b22      	ldr	r3, [pc, #136]	; (800ea58 <SDMMC_GetCmdResp7+0x94>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	4a22      	ldr	r2, [pc, #136]	; (800ea5c <SDMMC_GetCmdResp7+0x98>)
 800e9d2:	fba2 2303 	umull	r2, r3, r2, r3
 800e9d6:	0a5b      	lsrs	r3, r3, #9
 800e9d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e9dc:	fb02 f303 	mul.w	r3, r2, r3
 800e9e0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	1e5a      	subs	r2, r3, #1
 800e9e6:	60fa      	str	r2, [r7, #12]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d102      	bne.n	800e9f2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e9ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e9f0:	e02c      	b.n	800ea4c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9f6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d0ef      	beq.n	800e9e2 <SDMMC_GetCmdResp7+0x1e>
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d1ea      	bne.n	800e9e2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea10:	f003 0304 	and.w	r3, r3, #4
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d004      	beq.n	800ea22 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2204      	movs	r2, #4
 800ea1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ea1e:	2304      	movs	r3, #4
 800ea20:	e014      	b.n	800ea4c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea26:	f003 0301 	and.w	r3, r3, #1
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d004      	beq.n	800ea38 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2201      	movs	r2, #1
 800ea32:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ea34:	2301      	movs	r3, #1
 800ea36:	e009      	b.n	800ea4c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d002      	beq.n	800ea4a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2240      	movs	r2, #64	; 0x40
 800ea48:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ea4a:	2300      	movs	r3, #0
  
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3714      	adds	r7, #20
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr
 800ea58:	20000000 	.word	0x20000000
 800ea5c:	10624dd3 	.word	0x10624dd3

0800ea60 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ea60:	b480      	push	{r7}
 800ea62:	b085      	sub	sp, #20
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ea68:	4b11      	ldr	r3, [pc, #68]	; (800eab0 <SDMMC_GetCmdError+0x50>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	4a11      	ldr	r2, [pc, #68]	; (800eab4 <SDMMC_GetCmdError+0x54>)
 800ea6e:	fba2 2303 	umull	r2, r3, r2, r3
 800ea72:	0a5b      	lsrs	r3, r3, #9
 800ea74:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea78:	fb02 f303 	mul.w	r3, r2, r3
 800ea7c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	1e5a      	subs	r2, r3, #1
 800ea82:	60fa      	str	r2, [r7, #12]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d102      	bne.n	800ea8e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ea88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ea8c:	e009      	b.n	800eaa2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d0f1      	beq.n	800ea7e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	22c5      	movs	r2, #197	; 0xc5
 800ea9e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800eaa0:	2300      	movs	r3, #0
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3714      	adds	r7, #20
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaac:	4770      	bx	lr
 800eaae:	bf00      	nop
 800eab0:	20000000 	.word	0x20000000
 800eab4:	10624dd3 	.word	0x10624dd3

0800eab8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800eabc:	4904      	ldr	r1, [pc, #16]	; (800ead0 <MX_FATFS_Init+0x18>)
 800eabe:	4805      	ldr	r0, [pc, #20]	; (800ead4 <MX_FATFS_Init+0x1c>)
 800eac0:	f002 fec8 	bl	8011854 <FATFS_LinkDriver>
 800eac4:	4603      	mov	r3, r0
 800eac6:	461a      	mov	r2, r3
 800eac8:	4b03      	ldr	r3, [pc, #12]	; (800ead8 <MX_FATFS_Init+0x20>)
 800eaca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800eacc:	bf00      	nop
 800eace:	bd80      	pop	{r7, pc}
 800ead0:	200057c8 	.word	0x200057c8
 800ead4:	08016aa4 	.word	0x08016aa4
 800ead8:	200057c4 	.word	0x200057c4

0800eadc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800eadc:	b480      	push	{r7}
 800eade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800eae0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	46bd      	mov	sp, r7
 800eae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaea:	4770      	bx	lr

0800eaec <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b082      	sub	sp, #8
 800eaf0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800eaf6:	f000 f896 	bl	800ec26 <BSP_SD_IsDetected>
 800eafa:	4603      	mov	r3, r0
 800eafc:	2b01      	cmp	r3, #1
 800eafe:	d001      	beq.n	800eb04 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800eb00:	2302      	movs	r3, #2
 800eb02:	e012      	b.n	800eb2a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 800eb04:	480b      	ldr	r0, [pc, #44]	; (800eb34 <BSP_SD_Init+0x48>)
 800eb06:	f7fb fa2d 	bl	8009f64 <HAL_SD_Init>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800eb0e:	79fb      	ldrb	r3, [r7, #7]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d109      	bne.n	800eb28 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800eb14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800eb18:	4806      	ldr	r0, [pc, #24]	; (800eb34 <BSP_SD_Init+0x48>)
 800eb1a:	f7fb fff3 	bl	800ab04 <HAL_SD_ConfigWideBusOperation>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d001      	beq.n	800eb28 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800eb24:	2301      	movs	r3, #1
 800eb26:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800eb28:	79fb      	ldrb	r3, [r7, #7]
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3708      	adds	r7, #8
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}
 800eb32:	bf00      	nop
 800eb34:	20001614 	.word	0x20001614

0800eb38 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b086      	sub	sp, #24
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	60f8      	str	r0, [r7, #12]
 800eb40:	60b9      	str	r1, [r7, #8]
 800eb42:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800eb44:	2300      	movs	r3, #0
 800eb46:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	68ba      	ldr	r2, [r7, #8]
 800eb4c:	68f9      	ldr	r1, [r7, #12]
 800eb4e:	4806      	ldr	r0, [pc, #24]	; (800eb68 <BSP_SD_ReadBlocks_DMA+0x30>)
 800eb50:	f7fb fac0 	bl	800a0d4 <HAL_SD_ReadBlocks_DMA>
 800eb54:	4603      	mov	r3, r0
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d001      	beq.n	800eb5e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800eb5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3718      	adds	r7, #24
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}
 800eb68:	20001614 	.word	0x20001614

0800eb6c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b086      	sub	sp, #24
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	60f8      	str	r0, [r7, #12]
 800eb74:	60b9      	str	r1, [r7, #8]
 800eb76:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800eb78:	2300      	movs	r3, #0
 800eb7a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	68ba      	ldr	r2, [r7, #8]
 800eb80:	68f9      	ldr	r1, [r7, #12]
 800eb82:	4806      	ldr	r0, [pc, #24]	; (800eb9c <BSP_SD_WriteBlocks_DMA+0x30>)
 800eb84:	f7fb fb88 	bl	800a298 <HAL_SD_WriteBlocks_DMA>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d001      	beq.n	800eb92 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800eb8e:	2301      	movs	r3, #1
 800eb90:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800eb92:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb94:	4618      	mov	r0, r3
 800eb96:	3718      	adds	r7, #24
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}
 800eb9c:	20001614 	.word	0x20001614

0800eba0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800eba4:	4805      	ldr	r0, [pc, #20]	; (800ebbc <BSP_SD_GetCardState+0x1c>)
 800eba6:	f7fc f847 	bl	800ac38 <HAL_SD_GetCardState>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	2b04      	cmp	r3, #4
 800ebae:	bf14      	ite	ne
 800ebb0:	2301      	movne	r3, #1
 800ebb2:	2300      	moveq	r3, #0
 800ebb4:	b2db      	uxtb	r3, r3
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	bd80      	pop	{r7, pc}
 800ebba:	bf00      	nop
 800ebbc:	20001614 	.word	0x20001614

0800ebc0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b082      	sub	sp, #8
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 800ebc8:	6879      	ldr	r1, [r7, #4]
 800ebca:	4803      	ldr	r0, [pc, #12]	; (800ebd8 <BSP_SD_GetCardInfo+0x18>)
 800ebcc:	f7fb ff6e 	bl	800aaac <HAL_SD_GetCardInfo>
}
 800ebd0:	bf00      	nop
 800ebd2:	3708      	adds	r7, #8
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}
 800ebd8:	20001614 	.word	0x20001614

0800ebdc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b082      	sub	sp, #8
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800ebe4:	f000 f818 	bl	800ec18 <BSP_SD_AbortCallback>
}
 800ebe8:	bf00      	nop
 800ebea:	3708      	adds	r7, #8
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}

0800ebf0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b082      	sub	sp, #8
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ebf8:	f000 f98c 	bl	800ef14 <BSP_SD_WriteCpltCallback>
}
 800ebfc:	bf00      	nop
 800ebfe:	3708      	adds	r7, #8
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}

0800ec04 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b082      	sub	sp, #8
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ec0c:	f000 f98e 	bl	800ef2c <BSP_SD_ReadCpltCallback>
}
 800ec10:	bf00      	nop
 800ec12:	3708      	adds	r7, #8
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}

0800ec18 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800ec18:	b480      	push	{r7}
 800ec1a:	af00      	add	r7, sp, #0

}
 800ec1c:	bf00      	nop
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec24:	4770      	bx	lr

0800ec26 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ec26:	b480      	push	{r7}
 800ec28:	b083      	sub	sp, #12
 800ec2a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800ec30:	79fb      	ldrb	r3, [r7, #7]
 800ec32:	b2db      	uxtb	r3, r3
}
 800ec34:	4618      	mov	r0, r3
 800ec36:	370c      	adds	r7, #12
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3e:	4770      	bx	lr

0800ec40 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b084      	sub	sp, #16
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800ec48:	f7f6 fef0 	bl	8005a2c <HAL_GetTick>
 800ec4c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800ec4e:	e006      	b.n	800ec5e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ec50:	f7ff ffa6 	bl	800eba0 <BSP_SD_GetCardState>
 800ec54:	4603      	mov	r3, r0
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d101      	bne.n	800ec5e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	e009      	b.n	800ec72 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800ec5e:	f7f6 fee5 	bl	8005a2c <HAL_GetTick>
 800ec62:	4602      	mov	r2, r0
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	1ad3      	subs	r3, r2, r3
 800ec68:	687a      	ldr	r2, [r7, #4]
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d8f0      	bhi.n	800ec50 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ec6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ec72:	4618      	mov	r0, r3
 800ec74:	3710      	adds	r7, #16
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}
	...

0800ec7c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b082      	sub	sp, #8
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	4603      	mov	r3, r0
 800ec84:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ec86:	4b0b      	ldr	r3, [pc, #44]	; (800ecb4 <SD_CheckStatus+0x38>)
 800ec88:	2201      	movs	r2, #1
 800ec8a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ec8c:	f7ff ff88 	bl	800eba0 <BSP_SD_GetCardState>
 800ec90:	4603      	mov	r3, r0
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d107      	bne.n	800eca6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ec96:	4b07      	ldr	r3, [pc, #28]	; (800ecb4 <SD_CheckStatus+0x38>)
 800ec98:	781b      	ldrb	r3, [r3, #0]
 800ec9a:	b2db      	uxtb	r3, r3
 800ec9c:	f023 0301 	bic.w	r3, r3, #1
 800eca0:	b2da      	uxtb	r2, r3
 800eca2:	4b04      	ldr	r3, [pc, #16]	; (800ecb4 <SD_CheckStatus+0x38>)
 800eca4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800eca6:	4b03      	ldr	r3, [pc, #12]	; (800ecb4 <SD_CheckStatus+0x38>)
 800eca8:	781b      	ldrb	r3, [r3, #0]
 800ecaa:	b2db      	uxtb	r3, r3
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3708      	adds	r7, #8
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}
 800ecb4:	20000009 	.word	0x20000009

0800ecb8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b082      	sub	sp, #8
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ecc2:	f7ff ff13 	bl	800eaec <BSP_SD_Init>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d107      	bne.n	800ecdc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800eccc:	79fb      	ldrb	r3, [r7, #7]
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f7ff ffd4 	bl	800ec7c <SD_CheckStatus>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	461a      	mov	r2, r3
 800ecd8:	4b04      	ldr	r3, [pc, #16]	; (800ecec <SD_initialize+0x34>)
 800ecda:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ecdc:	4b03      	ldr	r3, [pc, #12]	; (800ecec <SD_initialize+0x34>)
 800ecde:	781b      	ldrb	r3, [r3, #0]
 800ece0:	b2db      	uxtb	r3, r3
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	3708      	adds	r7, #8
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}
 800ecea:	bf00      	nop
 800ecec:	20000009 	.word	0x20000009

0800ecf0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b082      	sub	sp, #8
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ecfa:	79fb      	ldrb	r3, [r7, #7]
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f7ff ffbd 	bl	800ec7c <SD_CheckStatus>
 800ed02:	4603      	mov	r3, r0
}
 800ed04:	4618      	mov	r0, r3
 800ed06:	3708      	adds	r7, #8
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}

0800ed0c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b086      	sub	sp, #24
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	60b9      	str	r1, [r7, #8]
 800ed14:	607a      	str	r2, [r7, #4]
 800ed16:	603b      	str	r3, [r7, #0]
 800ed18:	4603      	mov	r3, r0
 800ed1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ed20:	f247 5030 	movw	r0, #30000	; 0x7530
 800ed24:	f7ff ff8c 	bl	800ec40 <SD_CheckStatusWithTimeout>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	da01      	bge.n	800ed32 <SD_read+0x26>
  {
    return res;
 800ed2e:	7dfb      	ldrb	r3, [r7, #23]
 800ed30:	e03b      	b.n	800edaa <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800ed32:	683a      	ldr	r2, [r7, #0]
 800ed34:	6879      	ldr	r1, [r7, #4]
 800ed36:	68b8      	ldr	r0, [r7, #8]
 800ed38:	f7ff fefe 	bl	800eb38 <BSP_SD_ReadBlocks_DMA>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d132      	bne.n	800eda8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800ed42:	4b1c      	ldr	r3, [pc, #112]	; (800edb4 <SD_read+0xa8>)
 800ed44:	2200      	movs	r2, #0
 800ed46:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800ed48:	f7f6 fe70 	bl	8005a2c <HAL_GetTick>
 800ed4c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ed4e:	bf00      	nop
 800ed50:	4b18      	ldr	r3, [pc, #96]	; (800edb4 <SD_read+0xa8>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d108      	bne.n	800ed6a <SD_read+0x5e>
 800ed58:	f7f6 fe68 	bl	8005a2c <HAL_GetTick>
 800ed5c:	4602      	mov	r2, r0
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	1ad3      	subs	r3, r2, r3
 800ed62:	f247 522f 	movw	r2, #29999	; 0x752f
 800ed66:	4293      	cmp	r3, r2
 800ed68:	d9f2      	bls.n	800ed50 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800ed6a:	4b12      	ldr	r3, [pc, #72]	; (800edb4 <SD_read+0xa8>)
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d102      	bne.n	800ed78 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800ed72:	2301      	movs	r3, #1
 800ed74:	75fb      	strb	r3, [r7, #23]
 800ed76:	e017      	b.n	800eda8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800ed78:	4b0e      	ldr	r3, [pc, #56]	; (800edb4 <SD_read+0xa8>)
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ed7e:	f7f6 fe55 	bl	8005a2c <HAL_GetTick>
 800ed82:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ed84:	e007      	b.n	800ed96 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ed86:	f7ff ff0b 	bl	800eba0 <BSP_SD_GetCardState>
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d102      	bne.n	800ed96 <SD_read+0x8a>
          {
            res = RES_OK;
 800ed90:	2300      	movs	r3, #0
 800ed92:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800ed94:	e008      	b.n	800eda8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ed96:	f7f6 fe49 	bl	8005a2c <HAL_GetTick>
 800ed9a:	4602      	mov	r2, r0
 800ed9c:	693b      	ldr	r3, [r7, #16]
 800ed9e:	1ad3      	subs	r3, r2, r3
 800eda0:	f247 522f 	movw	r2, #29999	; 0x752f
 800eda4:	4293      	cmp	r3, r2
 800eda6:	d9ee      	bls.n	800ed86 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800eda8:	7dfb      	ldrb	r3, [r7, #23]
}
 800edaa:	4618      	mov	r0, r3
 800edac:	3718      	adds	r7, #24
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}
 800edb2:	bf00      	nop
 800edb4:	200057d0 	.word	0x200057d0

0800edb8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b086      	sub	sp, #24
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	60b9      	str	r1, [r7, #8]
 800edc0:	607a      	str	r2, [r7, #4]
 800edc2:	603b      	str	r3, [r7, #0]
 800edc4:	4603      	mov	r3, r0
 800edc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800edc8:	2301      	movs	r3, #1
 800edca:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800edcc:	4b24      	ldr	r3, [pc, #144]	; (800ee60 <SD_write+0xa8>)
 800edce:	2200      	movs	r2, #0
 800edd0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800edd2:	f247 5030 	movw	r0, #30000	; 0x7530
 800edd6:	f7ff ff33 	bl	800ec40 <SD_CheckStatusWithTimeout>
 800edda:	4603      	mov	r3, r0
 800eddc:	2b00      	cmp	r3, #0
 800edde:	da01      	bge.n	800ede4 <SD_write+0x2c>
  {
    return res;
 800ede0:	7dfb      	ldrb	r3, [r7, #23]
 800ede2:	e038      	b.n	800ee56 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ede4:	683a      	ldr	r2, [r7, #0]
 800ede6:	6879      	ldr	r1, [r7, #4]
 800ede8:	68b8      	ldr	r0, [r7, #8]
 800edea:	f7ff febf 	bl	800eb6c <BSP_SD_WriteBlocks_DMA>
 800edee:	4603      	mov	r3, r0
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d12f      	bne.n	800ee54 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800edf4:	f7f6 fe1a 	bl	8005a2c <HAL_GetTick>
 800edf8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800edfa:	bf00      	nop
 800edfc:	4b18      	ldr	r3, [pc, #96]	; (800ee60 <SD_write+0xa8>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d108      	bne.n	800ee16 <SD_write+0x5e>
 800ee04:	f7f6 fe12 	bl	8005a2c <HAL_GetTick>
 800ee08:	4602      	mov	r2, r0
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	1ad3      	subs	r3, r2, r3
 800ee0e:	f247 522f 	movw	r2, #29999	; 0x752f
 800ee12:	4293      	cmp	r3, r2
 800ee14:	d9f2      	bls.n	800edfc <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800ee16:	4b12      	ldr	r3, [pc, #72]	; (800ee60 <SD_write+0xa8>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d102      	bne.n	800ee24 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800ee1e:	2301      	movs	r3, #1
 800ee20:	75fb      	strb	r3, [r7, #23]
 800ee22:	e017      	b.n	800ee54 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800ee24:	4b0e      	ldr	r3, [pc, #56]	; (800ee60 <SD_write+0xa8>)
 800ee26:	2200      	movs	r2, #0
 800ee28:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ee2a:	f7f6 fdff 	bl	8005a2c <HAL_GetTick>
 800ee2e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ee30:	e007      	b.n	800ee42 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ee32:	f7ff feb5 	bl	800eba0 <BSP_SD_GetCardState>
 800ee36:	4603      	mov	r3, r0
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d102      	bne.n	800ee42 <SD_write+0x8a>
          {
            res = RES_OK;
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	75fb      	strb	r3, [r7, #23]
            break;
 800ee40:	e008      	b.n	800ee54 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ee42:	f7f6 fdf3 	bl	8005a2c <HAL_GetTick>
 800ee46:	4602      	mov	r2, r0
 800ee48:	693b      	ldr	r3, [r7, #16]
 800ee4a:	1ad3      	subs	r3, r2, r3
 800ee4c:	f247 522f 	movw	r2, #29999	; 0x752f
 800ee50:	4293      	cmp	r3, r2
 800ee52:	d9ee      	bls.n	800ee32 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800ee54:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	3718      	adds	r7, #24
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd80      	pop	{r7, pc}
 800ee5e:	bf00      	nop
 800ee60:	200057cc 	.word	0x200057cc

0800ee64 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b08c      	sub	sp, #48	; 0x30
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	603a      	str	r2, [r7, #0]
 800ee6e:	71fb      	strb	r3, [r7, #7]
 800ee70:	460b      	mov	r3, r1
 800ee72:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ee74:	2301      	movs	r3, #1
 800ee76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ee7a:	4b25      	ldr	r3, [pc, #148]	; (800ef10 <SD_ioctl+0xac>)
 800ee7c:	781b      	ldrb	r3, [r3, #0]
 800ee7e:	b2db      	uxtb	r3, r3
 800ee80:	f003 0301 	and.w	r3, r3, #1
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d001      	beq.n	800ee8c <SD_ioctl+0x28>
 800ee88:	2303      	movs	r3, #3
 800ee8a:	e03c      	b.n	800ef06 <SD_ioctl+0xa2>

  switch (cmd)
 800ee8c:	79bb      	ldrb	r3, [r7, #6]
 800ee8e:	2b03      	cmp	r3, #3
 800ee90:	d834      	bhi.n	800eefc <SD_ioctl+0x98>
 800ee92:	a201      	add	r2, pc, #4	; (adr r2, 800ee98 <SD_ioctl+0x34>)
 800ee94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee98:	0800eea9 	.word	0x0800eea9
 800ee9c:	0800eeb1 	.word	0x0800eeb1
 800eea0:	0800eec9 	.word	0x0800eec9
 800eea4:	0800eee3 	.word	0x0800eee3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800eeae:	e028      	b.n	800ef02 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800eeb0:	f107 030c 	add.w	r3, r7, #12
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f7ff fe83 	bl	800ebc0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800eeba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800eec0:	2300      	movs	r3, #0
 800eec2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800eec6:	e01c      	b.n	800ef02 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800eec8:	f107 030c 	add.w	r3, r7, #12
 800eecc:	4618      	mov	r0, r3
 800eece:	f7ff fe77 	bl	800ebc0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800eed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed4:	b29a      	uxth	r2, r3
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800eeda:	2300      	movs	r3, #0
 800eedc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800eee0:	e00f      	b.n	800ef02 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800eee2:	f107 030c 	add.w	r3, r7, #12
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7ff fe6a 	bl	800ebc0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800eeec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeee:	0a5a      	lsrs	r2, r3, #9
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800eef4:	2300      	movs	r3, #0
 800eef6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800eefa:	e002      	b.n	800ef02 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800eefc:	2304      	movs	r3, #4
 800eefe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ef02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	3730      	adds	r7, #48	; 0x30
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}
 800ef0e:	bf00      	nop
 800ef10:	20000009 	.word	0x20000009

0800ef14 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ef14:	b480      	push	{r7}
 800ef16:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800ef18:	4b03      	ldr	r3, [pc, #12]	; (800ef28 <BSP_SD_WriteCpltCallback+0x14>)
 800ef1a:	2201      	movs	r2, #1
 800ef1c:	601a      	str	r2, [r3, #0]
}
 800ef1e:	bf00      	nop
 800ef20:	46bd      	mov	sp, r7
 800ef22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef26:	4770      	bx	lr
 800ef28:	200057cc 	.word	0x200057cc

0800ef2c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800ef30:	4b03      	ldr	r3, [pc, #12]	; (800ef40 <BSP_SD_ReadCpltCallback+0x14>)
 800ef32:	2201      	movs	r2, #1
 800ef34:	601a      	str	r2, [r3, #0]
}
 800ef36:	bf00      	nop
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3e:	4770      	bx	lr
 800ef40:	200057d0 	.word	0x200057d0

0800ef44 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b084      	sub	sp, #16
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ef4e:	79fb      	ldrb	r3, [r7, #7]
 800ef50:	4a08      	ldr	r2, [pc, #32]	; (800ef74 <disk_status+0x30>)
 800ef52:	009b      	lsls	r3, r3, #2
 800ef54:	4413      	add	r3, r2
 800ef56:	685b      	ldr	r3, [r3, #4]
 800ef58:	685b      	ldr	r3, [r3, #4]
 800ef5a:	79fa      	ldrb	r2, [r7, #7]
 800ef5c:	4905      	ldr	r1, [pc, #20]	; (800ef74 <disk_status+0x30>)
 800ef5e:	440a      	add	r2, r1
 800ef60:	7a12      	ldrb	r2, [r2, #8]
 800ef62:	4610      	mov	r0, r2
 800ef64:	4798      	blx	r3
 800ef66:	4603      	mov	r3, r0
 800ef68:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ef6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3710      	adds	r7, #16
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}
 800ef74:	200057fc 	.word	0x200057fc

0800ef78 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b084      	sub	sp, #16
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	4603      	mov	r3, r0
 800ef80:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ef82:	2300      	movs	r3, #0
 800ef84:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ef86:	79fb      	ldrb	r3, [r7, #7]
 800ef88:	4a0d      	ldr	r2, [pc, #52]	; (800efc0 <disk_initialize+0x48>)
 800ef8a:	5cd3      	ldrb	r3, [r2, r3]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d111      	bne.n	800efb4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ef90:	79fb      	ldrb	r3, [r7, #7]
 800ef92:	4a0b      	ldr	r2, [pc, #44]	; (800efc0 <disk_initialize+0x48>)
 800ef94:	2101      	movs	r1, #1
 800ef96:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ef98:	79fb      	ldrb	r3, [r7, #7]
 800ef9a:	4a09      	ldr	r2, [pc, #36]	; (800efc0 <disk_initialize+0x48>)
 800ef9c:	009b      	lsls	r3, r3, #2
 800ef9e:	4413      	add	r3, r2
 800efa0:	685b      	ldr	r3, [r3, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	79fa      	ldrb	r2, [r7, #7]
 800efa6:	4906      	ldr	r1, [pc, #24]	; (800efc0 <disk_initialize+0x48>)
 800efa8:	440a      	add	r2, r1
 800efaa:	7a12      	ldrb	r2, [r2, #8]
 800efac:	4610      	mov	r0, r2
 800efae:	4798      	blx	r3
 800efb0:	4603      	mov	r3, r0
 800efb2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800efb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	3710      	adds	r7, #16
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}
 800efbe:	bf00      	nop
 800efc0:	200057fc 	.word	0x200057fc

0800efc4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800efc4:	b590      	push	{r4, r7, lr}
 800efc6:	b087      	sub	sp, #28
 800efc8:	af00      	add	r7, sp, #0
 800efca:	60b9      	str	r1, [r7, #8]
 800efcc:	607a      	str	r2, [r7, #4]
 800efce:	603b      	str	r3, [r7, #0]
 800efd0:	4603      	mov	r3, r0
 800efd2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800efd4:	7bfb      	ldrb	r3, [r7, #15]
 800efd6:	4a0a      	ldr	r2, [pc, #40]	; (800f000 <disk_read+0x3c>)
 800efd8:	009b      	lsls	r3, r3, #2
 800efda:	4413      	add	r3, r2
 800efdc:	685b      	ldr	r3, [r3, #4]
 800efde:	689c      	ldr	r4, [r3, #8]
 800efe0:	7bfb      	ldrb	r3, [r7, #15]
 800efe2:	4a07      	ldr	r2, [pc, #28]	; (800f000 <disk_read+0x3c>)
 800efe4:	4413      	add	r3, r2
 800efe6:	7a18      	ldrb	r0, [r3, #8]
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	687a      	ldr	r2, [r7, #4]
 800efec:	68b9      	ldr	r1, [r7, #8]
 800efee:	47a0      	blx	r4
 800eff0:	4603      	mov	r3, r0
 800eff2:	75fb      	strb	r3, [r7, #23]
  return res;
 800eff4:	7dfb      	ldrb	r3, [r7, #23]
}
 800eff6:	4618      	mov	r0, r3
 800eff8:	371c      	adds	r7, #28
 800effa:	46bd      	mov	sp, r7
 800effc:	bd90      	pop	{r4, r7, pc}
 800effe:	bf00      	nop
 800f000:	200057fc 	.word	0x200057fc

0800f004 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f004:	b590      	push	{r4, r7, lr}
 800f006:	b087      	sub	sp, #28
 800f008:	af00      	add	r7, sp, #0
 800f00a:	60b9      	str	r1, [r7, #8]
 800f00c:	607a      	str	r2, [r7, #4]
 800f00e:	603b      	str	r3, [r7, #0]
 800f010:	4603      	mov	r3, r0
 800f012:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f014:	7bfb      	ldrb	r3, [r7, #15]
 800f016:	4a0a      	ldr	r2, [pc, #40]	; (800f040 <disk_write+0x3c>)
 800f018:	009b      	lsls	r3, r3, #2
 800f01a:	4413      	add	r3, r2
 800f01c:	685b      	ldr	r3, [r3, #4]
 800f01e:	68dc      	ldr	r4, [r3, #12]
 800f020:	7bfb      	ldrb	r3, [r7, #15]
 800f022:	4a07      	ldr	r2, [pc, #28]	; (800f040 <disk_write+0x3c>)
 800f024:	4413      	add	r3, r2
 800f026:	7a18      	ldrb	r0, [r3, #8]
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	687a      	ldr	r2, [r7, #4]
 800f02c:	68b9      	ldr	r1, [r7, #8]
 800f02e:	47a0      	blx	r4
 800f030:	4603      	mov	r3, r0
 800f032:	75fb      	strb	r3, [r7, #23]
  return res;
 800f034:	7dfb      	ldrb	r3, [r7, #23]
}
 800f036:	4618      	mov	r0, r3
 800f038:	371c      	adds	r7, #28
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd90      	pop	{r4, r7, pc}
 800f03e:	bf00      	nop
 800f040:	200057fc 	.word	0x200057fc

0800f044 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b084      	sub	sp, #16
 800f048:	af00      	add	r7, sp, #0
 800f04a:	4603      	mov	r3, r0
 800f04c:	603a      	str	r2, [r7, #0]
 800f04e:	71fb      	strb	r3, [r7, #7]
 800f050:	460b      	mov	r3, r1
 800f052:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f054:	79fb      	ldrb	r3, [r7, #7]
 800f056:	4a09      	ldr	r2, [pc, #36]	; (800f07c <disk_ioctl+0x38>)
 800f058:	009b      	lsls	r3, r3, #2
 800f05a:	4413      	add	r3, r2
 800f05c:	685b      	ldr	r3, [r3, #4]
 800f05e:	691b      	ldr	r3, [r3, #16]
 800f060:	79fa      	ldrb	r2, [r7, #7]
 800f062:	4906      	ldr	r1, [pc, #24]	; (800f07c <disk_ioctl+0x38>)
 800f064:	440a      	add	r2, r1
 800f066:	7a10      	ldrb	r0, [r2, #8]
 800f068:	79b9      	ldrb	r1, [r7, #6]
 800f06a:	683a      	ldr	r2, [r7, #0]
 800f06c:	4798      	blx	r3
 800f06e:	4603      	mov	r3, r0
 800f070:	73fb      	strb	r3, [r7, #15]
  return res;
 800f072:	7bfb      	ldrb	r3, [r7, #15]
}
 800f074:	4618      	mov	r0, r3
 800f076:	3710      	adds	r7, #16
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}
 800f07c:	200057fc 	.word	0x200057fc

0800f080 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f080:	b480      	push	{r7}
 800f082:	b085      	sub	sp, #20
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	3301      	adds	r3, #1
 800f08c:	781b      	ldrb	r3, [r3, #0]
 800f08e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f090:	89fb      	ldrh	r3, [r7, #14]
 800f092:	021b      	lsls	r3, r3, #8
 800f094:	b21a      	sxth	r2, r3
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	781b      	ldrb	r3, [r3, #0]
 800f09a:	b21b      	sxth	r3, r3
 800f09c:	4313      	orrs	r3, r2
 800f09e:	b21b      	sxth	r3, r3
 800f0a0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f0a2:	89fb      	ldrh	r3, [r7, #14]
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3714      	adds	r7, #20
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ae:	4770      	bx	lr

0800f0b0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f0b0:	b480      	push	{r7}
 800f0b2:	b085      	sub	sp, #20
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	3303      	adds	r3, #3
 800f0bc:	781b      	ldrb	r3, [r3, #0]
 800f0be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	021b      	lsls	r3, r3, #8
 800f0c4:	687a      	ldr	r2, [r7, #4]
 800f0c6:	3202      	adds	r2, #2
 800f0c8:	7812      	ldrb	r2, [r2, #0]
 800f0ca:	4313      	orrs	r3, r2
 800f0cc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	021b      	lsls	r3, r3, #8
 800f0d2:	687a      	ldr	r2, [r7, #4]
 800f0d4:	3201      	adds	r2, #1
 800f0d6:	7812      	ldrb	r2, [r2, #0]
 800f0d8:	4313      	orrs	r3, r2
 800f0da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	021b      	lsls	r3, r3, #8
 800f0e0:	687a      	ldr	r2, [r7, #4]
 800f0e2:	7812      	ldrb	r2, [r2, #0]
 800f0e4:	4313      	orrs	r3, r2
 800f0e6:	60fb      	str	r3, [r7, #12]
	return rv;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	3714      	adds	r7, #20
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f4:	4770      	bx	lr

0800f0f6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f0f6:	b480      	push	{r7}
 800f0f8:	b083      	sub	sp, #12
 800f0fa:	af00      	add	r7, sp, #0
 800f0fc:	6078      	str	r0, [r7, #4]
 800f0fe:	460b      	mov	r3, r1
 800f100:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	1c5a      	adds	r2, r3, #1
 800f106:	607a      	str	r2, [r7, #4]
 800f108:	887a      	ldrh	r2, [r7, #2]
 800f10a:	b2d2      	uxtb	r2, r2
 800f10c:	701a      	strb	r2, [r3, #0]
 800f10e:	887b      	ldrh	r3, [r7, #2]
 800f110:	0a1b      	lsrs	r3, r3, #8
 800f112:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	1c5a      	adds	r2, r3, #1
 800f118:	607a      	str	r2, [r7, #4]
 800f11a:	887a      	ldrh	r2, [r7, #2]
 800f11c:	b2d2      	uxtb	r2, r2
 800f11e:	701a      	strb	r2, [r3, #0]
}
 800f120:	bf00      	nop
 800f122:	370c      	adds	r7, #12
 800f124:	46bd      	mov	sp, r7
 800f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12a:	4770      	bx	lr

0800f12c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f12c:	b480      	push	{r7}
 800f12e:	b083      	sub	sp, #12
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
 800f134:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	1c5a      	adds	r2, r3, #1
 800f13a:	607a      	str	r2, [r7, #4]
 800f13c:	683a      	ldr	r2, [r7, #0]
 800f13e:	b2d2      	uxtb	r2, r2
 800f140:	701a      	strb	r2, [r3, #0]
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	0a1b      	lsrs	r3, r3, #8
 800f146:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	1c5a      	adds	r2, r3, #1
 800f14c:	607a      	str	r2, [r7, #4]
 800f14e:	683a      	ldr	r2, [r7, #0]
 800f150:	b2d2      	uxtb	r2, r2
 800f152:	701a      	strb	r2, [r3, #0]
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	0a1b      	lsrs	r3, r3, #8
 800f158:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	1c5a      	adds	r2, r3, #1
 800f15e:	607a      	str	r2, [r7, #4]
 800f160:	683a      	ldr	r2, [r7, #0]
 800f162:	b2d2      	uxtb	r2, r2
 800f164:	701a      	strb	r2, [r3, #0]
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	0a1b      	lsrs	r3, r3, #8
 800f16a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	1c5a      	adds	r2, r3, #1
 800f170:	607a      	str	r2, [r7, #4]
 800f172:	683a      	ldr	r2, [r7, #0]
 800f174:	b2d2      	uxtb	r2, r2
 800f176:	701a      	strb	r2, [r3, #0]
}
 800f178:	bf00      	nop
 800f17a:	370c      	adds	r7, #12
 800f17c:	46bd      	mov	sp, r7
 800f17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f182:	4770      	bx	lr

0800f184 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f184:	b480      	push	{r7}
 800f186:	b087      	sub	sp, #28
 800f188:	af00      	add	r7, sp, #0
 800f18a:	60f8      	str	r0, [r7, #12]
 800f18c:	60b9      	str	r1, [r7, #8]
 800f18e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d00d      	beq.n	800f1ba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f19e:	693a      	ldr	r2, [r7, #16]
 800f1a0:	1c53      	adds	r3, r2, #1
 800f1a2:	613b      	str	r3, [r7, #16]
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	1c59      	adds	r1, r3, #1
 800f1a8:	6179      	str	r1, [r7, #20]
 800f1aa:	7812      	ldrb	r2, [r2, #0]
 800f1ac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	3b01      	subs	r3, #1
 800f1b2:	607b      	str	r3, [r7, #4]
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d1f1      	bne.n	800f19e <mem_cpy+0x1a>
	}
}
 800f1ba:	bf00      	nop
 800f1bc:	371c      	adds	r7, #28
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c4:	4770      	bx	lr

0800f1c6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f1c6:	b480      	push	{r7}
 800f1c8:	b087      	sub	sp, #28
 800f1ca:	af00      	add	r7, sp, #0
 800f1cc:	60f8      	str	r0, [r7, #12]
 800f1ce:	60b9      	str	r1, [r7, #8]
 800f1d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f1d6:	697b      	ldr	r3, [r7, #20]
 800f1d8:	1c5a      	adds	r2, r3, #1
 800f1da:	617a      	str	r2, [r7, #20]
 800f1dc:	68ba      	ldr	r2, [r7, #8]
 800f1de:	b2d2      	uxtb	r2, r2
 800f1e0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	3b01      	subs	r3, #1
 800f1e6:	607b      	str	r3, [r7, #4]
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d1f3      	bne.n	800f1d6 <mem_set+0x10>
}
 800f1ee:	bf00      	nop
 800f1f0:	bf00      	nop
 800f1f2:	371c      	adds	r7, #28
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fa:	4770      	bx	lr

0800f1fc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f1fc:	b480      	push	{r7}
 800f1fe:	b089      	sub	sp, #36	; 0x24
 800f200:	af00      	add	r7, sp, #0
 800f202:	60f8      	str	r0, [r7, #12]
 800f204:	60b9      	str	r1, [r7, #8]
 800f206:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	61fb      	str	r3, [r7, #28]
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f210:	2300      	movs	r3, #0
 800f212:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f214:	69fb      	ldr	r3, [r7, #28]
 800f216:	1c5a      	adds	r2, r3, #1
 800f218:	61fa      	str	r2, [r7, #28]
 800f21a:	781b      	ldrb	r3, [r3, #0]
 800f21c:	4619      	mov	r1, r3
 800f21e:	69bb      	ldr	r3, [r7, #24]
 800f220:	1c5a      	adds	r2, r3, #1
 800f222:	61ba      	str	r2, [r7, #24]
 800f224:	781b      	ldrb	r3, [r3, #0]
 800f226:	1acb      	subs	r3, r1, r3
 800f228:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	3b01      	subs	r3, #1
 800f22e:	607b      	str	r3, [r7, #4]
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d002      	beq.n	800f23c <mem_cmp+0x40>
 800f236:	697b      	ldr	r3, [r7, #20]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d0eb      	beq.n	800f214 <mem_cmp+0x18>

	return r;
 800f23c:	697b      	ldr	r3, [r7, #20]
}
 800f23e:	4618      	mov	r0, r3
 800f240:	3724      	adds	r7, #36	; 0x24
 800f242:	46bd      	mov	sp, r7
 800f244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f248:	4770      	bx	lr

0800f24a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f24a:	b480      	push	{r7}
 800f24c:	b083      	sub	sp, #12
 800f24e:	af00      	add	r7, sp, #0
 800f250:	6078      	str	r0, [r7, #4]
 800f252:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f254:	e002      	b.n	800f25c <chk_chr+0x12>
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	3301      	adds	r3, #1
 800f25a:	607b      	str	r3, [r7, #4]
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	781b      	ldrb	r3, [r3, #0]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d005      	beq.n	800f270 <chk_chr+0x26>
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	781b      	ldrb	r3, [r3, #0]
 800f268:	461a      	mov	r2, r3
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	4293      	cmp	r3, r2
 800f26e:	d1f2      	bne.n	800f256 <chk_chr+0xc>
	return *str;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	781b      	ldrb	r3, [r3, #0]
}
 800f274:	4618      	mov	r0, r3
 800f276:	370c      	adds	r7, #12
 800f278:	46bd      	mov	sp, r7
 800f27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27e:	4770      	bx	lr

0800f280 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f280:	b480      	push	{r7}
 800f282:	b085      	sub	sp, #20
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
 800f288:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f28a:	2300      	movs	r3, #0
 800f28c:	60bb      	str	r3, [r7, #8]
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	60fb      	str	r3, [r7, #12]
 800f292:	e029      	b.n	800f2e8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f294:	4a27      	ldr	r2, [pc, #156]	; (800f334 <chk_lock+0xb4>)
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	011b      	lsls	r3, r3, #4
 800f29a:	4413      	add	r3, r2
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d01d      	beq.n	800f2de <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f2a2:	4a24      	ldr	r2, [pc, #144]	; (800f334 <chk_lock+0xb4>)
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	011b      	lsls	r3, r3, #4
 800f2a8:	4413      	add	r3, r2
 800f2aa:	681a      	ldr	r2, [r3, #0]
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	429a      	cmp	r2, r3
 800f2b2:	d116      	bne.n	800f2e2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f2b4:	4a1f      	ldr	r2, [pc, #124]	; (800f334 <chk_lock+0xb4>)
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	011b      	lsls	r3, r3, #4
 800f2ba:	4413      	add	r3, r2
 800f2bc:	3304      	adds	r3, #4
 800f2be:	681a      	ldr	r2, [r3, #0]
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	d10c      	bne.n	800f2e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f2c8:	4a1a      	ldr	r2, [pc, #104]	; (800f334 <chk_lock+0xb4>)
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	011b      	lsls	r3, r3, #4
 800f2ce:	4413      	add	r3, r2
 800f2d0:	3308      	adds	r3, #8
 800f2d2:	681a      	ldr	r2, [r3, #0]
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d102      	bne.n	800f2e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f2dc:	e007      	b.n	800f2ee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f2de:	2301      	movs	r3, #1
 800f2e0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	3301      	adds	r3, #1
 800f2e6:	60fb      	str	r3, [r7, #12]
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	2b01      	cmp	r3, #1
 800f2ec:	d9d2      	bls.n	800f294 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	2b02      	cmp	r3, #2
 800f2f2:	d109      	bne.n	800f308 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d102      	bne.n	800f300 <chk_lock+0x80>
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	2b02      	cmp	r3, #2
 800f2fe:	d101      	bne.n	800f304 <chk_lock+0x84>
 800f300:	2300      	movs	r3, #0
 800f302:	e010      	b.n	800f326 <chk_lock+0xa6>
 800f304:	2312      	movs	r3, #18
 800f306:	e00e      	b.n	800f326 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d108      	bne.n	800f320 <chk_lock+0xa0>
 800f30e:	4a09      	ldr	r2, [pc, #36]	; (800f334 <chk_lock+0xb4>)
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	011b      	lsls	r3, r3, #4
 800f314:	4413      	add	r3, r2
 800f316:	330c      	adds	r3, #12
 800f318:	881b      	ldrh	r3, [r3, #0]
 800f31a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f31e:	d101      	bne.n	800f324 <chk_lock+0xa4>
 800f320:	2310      	movs	r3, #16
 800f322:	e000      	b.n	800f326 <chk_lock+0xa6>
 800f324:	2300      	movs	r3, #0
}
 800f326:	4618      	mov	r0, r3
 800f328:	3714      	adds	r7, #20
 800f32a:	46bd      	mov	sp, r7
 800f32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f330:	4770      	bx	lr
 800f332:	bf00      	nop
 800f334:	200057dc 	.word	0x200057dc

0800f338 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f338:	b480      	push	{r7}
 800f33a:	b083      	sub	sp, #12
 800f33c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f33e:	2300      	movs	r3, #0
 800f340:	607b      	str	r3, [r7, #4]
 800f342:	e002      	b.n	800f34a <enq_lock+0x12>
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	3301      	adds	r3, #1
 800f348:	607b      	str	r3, [r7, #4]
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	2b01      	cmp	r3, #1
 800f34e:	d806      	bhi.n	800f35e <enq_lock+0x26>
 800f350:	4a09      	ldr	r2, [pc, #36]	; (800f378 <enq_lock+0x40>)
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	011b      	lsls	r3, r3, #4
 800f356:	4413      	add	r3, r2
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d1f2      	bne.n	800f344 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	2b02      	cmp	r3, #2
 800f362:	bf14      	ite	ne
 800f364:	2301      	movne	r3, #1
 800f366:	2300      	moveq	r3, #0
 800f368:	b2db      	uxtb	r3, r3
}
 800f36a:	4618      	mov	r0, r3
 800f36c:	370c      	adds	r7, #12
 800f36e:	46bd      	mov	sp, r7
 800f370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f374:	4770      	bx	lr
 800f376:	bf00      	nop
 800f378:	200057dc 	.word	0x200057dc

0800f37c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f37c:	b480      	push	{r7}
 800f37e:	b085      	sub	sp, #20
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
 800f384:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f386:	2300      	movs	r3, #0
 800f388:	60fb      	str	r3, [r7, #12]
 800f38a:	e01f      	b.n	800f3cc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f38c:	4a41      	ldr	r2, [pc, #260]	; (800f494 <inc_lock+0x118>)
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	011b      	lsls	r3, r3, #4
 800f392:	4413      	add	r3, r2
 800f394:	681a      	ldr	r2, [r3, #0]
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d113      	bne.n	800f3c6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f39e:	4a3d      	ldr	r2, [pc, #244]	; (800f494 <inc_lock+0x118>)
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	011b      	lsls	r3, r3, #4
 800f3a4:	4413      	add	r3, r2
 800f3a6:	3304      	adds	r3, #4
 800f3a8:	681a      	ldr	r2, [r3, #0]
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	d109      	bne.n	800f3c6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f3b2:	4a38      	ldr	r2, [pc, #224]	; (800f494 <inc_lock+0x118>)
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	011b      	lsls	r3, r3, #4
 800f3b8:	4413      	add	r3, r2
 800f3ba:	3308      	adds	r3, #8
 800f3bc:	681a      	ldr	r2, [r3, #0]
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d006      	beq.n	800f3d4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	3301      	adds	r3, #1
 800f3ca:	60fb      	str	r3, [r7, #12]
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	2b01      	cmp	r3, #1
 800f3d0:	d9dc      	bls.n	800f38c <inc_lock+0x10>
 800f3d2:	e000      	b.n	800f3d6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f3d4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	2b02      	cmp	r3, #2
 800f3da:	d132      	bne.n	800f442 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f3dc:	2300      	movs	r3, #0
 800f3de:	60fb      	str	r3, [r7, #12]
 800f3e0:	e002      	b.n	800f3e8 <inc_lock+0x6c>
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	3301      	adds	r3, #1
 800f3e6:	60fb      	str	r3, [r7, #12]
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	2b01      	cmp	r3, #1
 800f3ec:	d806      	bhi.n	800f3fc <inc_lock+0x80>
 800f3ee:	4a29      	ldr	r2, [pc, #164]	; (800f494 <inc_lock+0x118>)
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	011b      	lsls	r3, r3, #4
 800f3f4:	4413      	add	r3, r2
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d1f2      	bne.n	800f3e2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	2b02      	cmp	r3, #2
 800f400:	d101      	bne.n	800f406 <inc_lock+0x8a>
 800f402:	2300      	movs	r3, #0
 800f404:	e040      	b.n	800f488 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681a      	ldr	r2, [r3, #0]
 800f40a:	4922      	ldr	r1, [pc, #136]	; (800f494 <inc_lock+0x118>)
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	011b      	lsls	r3, r3, #4
 800f410:	440b      	add	r3, r1
 800f412:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	689a      	ldr	r2, [r3, #8]
 800f418:	491e      	ldr	r1, [pc, #120]	; (800f494 <inc_lock+0x118>)
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	011b      	lsls	r3, r3, #4
 800f41e:	440b      	add	r3, r1
 800f420:	3304      	adds	r3, #4
 800f422:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	695a      	ldr	r2, [r3, #20]
 800f428:	491a      	ldr	r1, [pc, #104]	; (800f494 <inc_lock+0x118>)
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	011b      	lsls	r3, r3, #4
 800f42e:	440b      	add	r3, r1
 800f430:	3308      	adds	r3, #8
 800f432:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f434:	4a17      	ldr	r2, [pc, #92]	; (800f494 <inc_lock+0x118>)
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	011b      	lsls	r3, r3, #4
 800f43a:	4413      	add	r3, r2
 800f43c:	330c      	adds	r3, #12
 800f43e:	2200      	movs	r2, #0
 800f440:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d009      	beq.n	800f45c <inc_lock+0xe0>
 800f448:	4a12      	ldr	r2, [pc, #72]	; (800f494 <inc_lock+0x118>)
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	011b      	lsls	r3, r3, #4
 800f44e:	4413      	add	r3, r2
 800f450:	330c      	adds	r3, #12
 800f452:	881b      	ldrh	r3, [r3, #0]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d001      	beq.n	800f45c <inc_lock+0xe0>
 800f458:	2300      	movs	r3, #0
 800f45a:	e015      	b.n	800f488 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d108      	bne.n	800f474 <inc_lock+0xf8>
 800f462:	4a0c      	ldr	r2, [pc, #48]	; (800f494 <inc_lock+0x118>)
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	011b      	lsls	r3, r3, #4
 800f468:	4413      	add	r3, r2
 800f46a:	330c      	adds	r3, #12
 800f46c:	881b      	ldrh	r3, [r3, #0]
 800f46e:	3301      	adds	r3, #1
 800f470:	b29a      	uxth	r2, r3
 800f472:	e001      	b.n	800f478 <inc_lock+0xfc>
 800f474:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f478:	4906      	ldr	r1, [pc, #24]	; (800f494 <inc_lock+0x118>)
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	011b      	lsls	r3, r3, #4
 800f47e:	440b      	add	r3, r1
 800f480:	330c      	adds	r3, #12
 800f482:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	3301      	adds	r3, #1
}
 800f488:	4618      	mov	r0, r3
 800f48a:	3714      	adds	r7, #20
 800f48c:	46bd      	mov	sp, r7
 800f48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f492:	4770      	bx	lr
 800f494:	200057dc 	.word	0x200057dc

0800f498 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f498:	b480      	push	{r7}
 800f49a:	b085      	sub	sp, #20
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	3b01      	subs	r3, #1
 800f4a4:	607b      	str	r3, [r7, #4]
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2b01      	cmp	r3, #1
 800f4aa:	d825      	bhi.n	800f4f8 <dec_lock+0x60>
		n = Files[i].ctr;
 800f4ac:	4a17      	ldr	r2, [pc, #92]	; (800f50c <dec_lock+0x74>)
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	011b      	lsls	r3, r3, #4
 800f4b2:	4413      	add	r3, r2
 800f4b4:	330c      	adds	r3, #12
 800f4b6:	881b      	ldrh	r3, [r3, #0]
 800f4b8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f4ba:	89fb      	ldrh	r3, [r7, #14]
 800f4bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f4c0:	d101      	bne.n	800f4c6 <dec_lock+0x2e>
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f4c6:	89fb      	ldrh	r3, [r7, #14]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d002      	beq.n	800f4d2 <dec_lock+0x3a>
 800f4cc:	89fb      	ldrh	r3, [r7, #14]
 800f4ce:	3b01      	subs	r3, #1
 800f4d0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f4d2:	4a0e      	ldr	r2, [pc, #56]	; (800f50c <dec_lock+0x74>)
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	011b      	lsls	r3, r3, #4
 800f4d8:	4413      	add	r3, r2
 800f4da:	330c      	adds	r3, #12
 800f4dc:	89fa      	ldrh	r2, [r7, #14]
 800f4de:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f4e0:	89fb      	ldrh	r3, [r7, #14]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d105      	bne.n	800f4f2 <dec_lock+0x5a>
 800f4e6:	4a09      	ldr	r2, [pc, #36]	; (800f50c <dec_lock+0x74>)
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	011b      	lsls	r3, r3, #4
 800f4ec:	4413      	add	r3, r2
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	737b      	strb	r3, [r7, #13]
 800f4f6:	e001      	b.n	800f4fc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f4f8:	2302      	movs	r3, #2
 800f4fa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f4fc:	7b7b      	ldrb	r3, [r7, #13]
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	3714      	adds	r7, #20
 800f502:	46bd      	mov	sp, r7
 800f504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f508:	4770      	bx	lr
 800f50a:	bf00      	nop
 800f50c:	200057dc 	.word	0x200057dc

0800f510 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f510:	b480      	push	{r7}
 800f512:	b085      	sub	sp, #20
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f518:	2300      	movs	r3, #0
 800f51a:	60fb      	str	r3, [r7, #12]
 800f51c:	e010      	b.n	800f540 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f51e:	4a0d      	ldr	r2, [pc, #52]	; (800f554 <clear_lock+0x44>)
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	011b      	lsls	r3, r3, #4
 800f524:	4413      	add	r3, r2
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	687a      	ldr	r2, [r7, #4]
 800f52a:	429a      	cmp	r2, r3
 800f52c:	d105      	bne.n	800f53a <clear_lock+0x2a>
 800f52e:	4a09      	ldr	r2, [pc, #36]	; (800f554 <clear_lock+0x44>)
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	011b      	lsls	r3, r3, #4
 800f534:	4413      	add	r3, r2
 800f536:	2200      	movs	r2, #0
 800f538:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	3301      	adds	r3, #1
 800f53e:	60fb      	str	r3, [r7, #12]
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	2b01      	cmp	r3, #1
 800f544:	d9eb      	bls.n	800f51e <clear_lock+0xe>
	}
}
 800f546:	bf00      	nop
 800f548:	bf00      	nop
 800f54a:	3714      	adds	r7, #20
 800f54c:	46bd      	mov	sp, r7
 800f54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f552:	4770      	bx	lr
 800f554:	200057dc 	.word	0x200057dc

0800f558 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b086      	sub	sp, #24
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f560:	2300      	movs	r3, #0
 800f562:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	78db      	ldrb	r3, [r3, #3]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d034      	beq.n	800f5d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f570:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	7858      	ldrb	r0, [r3, #1]
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f57c:	2301      	movs	r3, #1
 800f57e:	697a      	ldr	r2, [r7, #20]
 800f580:	f7ff fd40 	bl	800f004 <disk_write>
 800f584:	4603      	mov	r3, r0
 800f586:	2b00      	cmp	r3, #0
 800f588:	d002      	beq.n	800f590 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f58a:	2301      	movs	r3, #1
 800f58c:	73fb      	strb	r3, [r7, #15]
 800f58e:	e022      	b.n	800f5d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2200      	movs	r2, #0
 800f594:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f59a:	697a      	ldr	r2, [r7, #20]
 800f59c:	1ad2      	subs	r2, r2, r3
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	69db      	ldr	r3, [r3, #28]
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	d217      	bcs.n	800f5d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	789b      	ldrb	r3, [r3, #2]
 800f5aa:	613b      	str	r3, [r7, #16]
 800f5ac:	e010      	b.n	800f5d0 <sync_window+0x78>
					wsect += fs->fsize;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	69db      	ldr	r3, [r3, #28]
 800f5b2:	697a      	ldr	r2, [r7, #20]
 800f5b4:	4413      	add	r3, r2
 800f5b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	7858      	ldrb	r0, [r3, #1]
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f5c2:	2301      	movs	r3, #1
 800f5c4:	697a      	ldr	r2, [r7, #20]
 800f5c6:	f7ff fd1d 	bl	800f004 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f5ca:	693b      	ldr	r3, [r7, #16]
 800f5cc:	3b01      	subs	r3, #1
 800f5ce:	613b      	str	r3, [r7, #16]
 800f5d0:	693b      	ldr	r3, [r7, #16]
 800f5d2:	2b01      	cmp	r3, #1
 800f5d4:	d8eb      	bhi.n	800f5ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f5d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5d8:	4618      	mov	r0, r3
 800f5da:	3718      	adds	r7, #24
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}

0800f5e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b084      	sub	sp, #16
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
 800f5e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5f2:	683a      	ldr	r2, [r7, #0]
 800f5f4:	429a      	cmp	r2, r3
 800f5f6:	d01b      	beq.n	800f630 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	f7ff ffad 	bl	800f558 <sync_window>
 800f5fe:	4603      	mov	r3, r0
 800f600:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f602:	7bfb      	ldrb	r3, [r7, #15]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d113      	bne.n	800f630 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	7858      	ldrb	r0, [r3, #1]
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f612:	2301      	movs	r3, #1
 800f614:	683a      	ldr	r2, [r7, #0]
 800f616:	f7ff fcd5 	bl	800efc4 <disk_read>
 800f61a:	4603      	mov	r3, r0
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d004      	beq.n	800f62a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f620:	f04f 33ff 	mov.w	r3, #4294967295
 800f624:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f626:	2301      	movs	r3, #1
 800f628:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	683a      	ldr	r2, [r7, #0]
 800f62e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800f630:	7bfb      	ldrb	r3, [r7, #15]
}
 800f632:	4618      	mov	r0, r3
 800f634:	3710      	adds	r7, #16
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}
	...

0800f63c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b084      	sub	sp, #16
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f7ff ff87 	bl	800f558 <sync_window>
 800f64a:	4603      	mov	r3, r0
 800f64c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f64e:	7bfb      	ldrb	r3, [r7, #15]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d159      	bne.n	800f708 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	2b03      	cmp	r3, #3
 800f65a:	d149      	bne.n	800f6f0 <sync_fs+0xb4>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	791b      	ldrb	r3, [r3, #4]
 800f660:	2b01      	cmp	r3, #1
 800f662:	d145      	bne.n	800f6f0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	899b      	ldrh	r3, [r3, #12]
 800f66e:	461a      	mov	r2, r3
 800f670:	2100      	movs	r1, #0
 800f672:	f7ff fda8 	bl	800f1c6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	3334      	adds	r3, #52	; 0x34
 800f67a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f67e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f682:	4618      	mov	r0, r3
 800f684:	f7ff fd37 	bl	800f0f6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	3334      	adds	r3, #52	; 0x34
 800f68c:	4921      	ldr	r1, [pc, #132]	; (800f714 <sync_fs+0xd8>)
 800f68e:	4618      	mov	r0, r3
 800f690:	f7ff fd4c 	bl	800f12c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	3334      	adds	r3, #52	; 0x34
 800f698:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f69c:	491e      	ldr	r1, [pc, #120]	; (800f718 <sync_fs+0xdc>)
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f7ff fd44 	bl	800f12c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	3334      	adds	r3, #52	; 0x34
 800f6a8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	695b      	ldr	r3, [r3, #20]
 800f6b0:	4619      	mov	r1, r3
 800f6b2:	4610      	mov	r0, r2
 800f6b4:	f7ff fd3a 	bl	800f12c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	3334      	adds	r3, #52	; 0x34
 800f6bc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	691b      	ldr	r3, [r3, #16]
 800f6c4:	4619      	mov	r1, r3
 800f6c6:	4610      	mov	r0, r2
 800f6c8:	f7ff fd30 	bl	800f12c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	6a1b      	ldr	r3, [r3, #32]
 800f6d0:	1c5a      	adds	r2, r3, #1
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	7858      	ldrb	r0, [r3, #1]
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	f7ff fc8d 	bl	800f004 <disk_write>
			fs->fsi_flag = 0;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	785b      	ldrb	r3, [r3, #1]
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	2100      	movs	r1, #0
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f7ff fca3 	bl	800f044 <disk_ioctl>
 800f6fe:	4603      	mov	r3, r0
 800f700:	2b00      	cmp	r3, #0
 800f702:	d001      	beq.n	800f708 <sync_fs+0xcc>
 800f704:	2301      	movs	r3, #1
 800f706:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f708:	7bfb      	ldrb	r3, [r7, #15]
}
 800f70a:	4618      	mov	r0, r3
 800f70c:	3710      	adds	r7, #16
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}
 800f712:	bf00      	nop
 800f714:	41615252 	.word	0x41615252
 800f718:	61417272 	.word	0x61417272

0800f71c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f71c:	b480      	push	{r7}
 800f71e:	b083      	sub	sp, #12
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
 800f724:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	3b02      	subs	r3, #2
 800f72a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	699b      	ldr	r3, [r3, #24]
 800f730:	3b02      	subs	r3, #2
 800f732:	683a      	ldr	r2, [r7, #0]
 800f734:	429a      	cmp	r2, r3
 800f736:	d301      	bcc.n	800f73c <clust2sect+0x20>
 800f738:	2300      	movs	r3, #0
 800f73a:	e008      	b.n	800f74e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	895b      	ldrh	r3, [r3, #10]
 800f740:	461a      	mov	r2, r3
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	fb03 f202 	mul.w	r2, r3, r2
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f74c:	4413      	add	r3, r2
}
 800f74e:	4618      	mov	r0, r3
 800f750:	370c      	adds	r7, #12
 800f752:	46bd      	mov	sp, r7
 800f754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f758:	4770      	bx	lr

0800f75a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f75a:	b580      	push	{r7, lr}
 800f75c:	b086      	sub	sp, #24
 800f75e:	af00      	add	r7, sp, #0
 800f760:	6078      	str	r0, [r7, #4]
 800f762:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	2b01      	cmp	r3, #1
 800f76e:	d904      	bls.n	800f77a <get_fat+0x20>
 800f770:	693b      	ldr	r3, [r7, #16]
 800f772:	699b      	ldr	r3, [r3, #24]
 800f774:	683a      	ldr	r2, [r7, #0]
 800f776:	429a      	cmp	r2, r3
 800f778:	d302      	bcc.n	800f780 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f77a:	2301      	movs	r3, #1
 800f77c:	617b      	str	r3, [r7, #20]
 800f77e:	e0bb      	b.n	800f8f8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f780:	f04f 33ff 	mov.w	r3, #4294967295
 800f784:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f786:	693b      	ldr	r3, [r7, #16]
 800f788:	781b      	ldrb	r3, [r3, #0]
 800f78a:	2b03      	cmp	r3, #3
 800f78c:	f000 8083 	beq.w	800f896 <get_fat+0x13c>
 800f790:	2b03      	cmp	r3, #3
 800f792:	f300 80a7 	bgt.w	800f8e4 <get_fat+0x18a>
 800f796:	2b01      	cmp	r3, #1
 800f798:	d002      	beq.n	800f7a0 <get_fat+0x46>
 800f79a:	2b02      	cmp	r3, #2
 800f79c:	d056      	beq.n	800f84c <get_fat+0xf2>
 800f79e:	e0a1      	b.n	800f8e4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	60fb      	str	r3, [r7, #12]
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	085b      	lsrs	r3, r3, #1
 800f7a8:	68fa      	ldr	r2, [r7, #12]
 800f7aa:	4413      	add	r3, r2
 800f7ac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f7ae:	693b      	ldr	r3, [r7, #16]
 800f7b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f7b2:	693b      	ldr	r3, [r7, #16]
 800f7b4:	899b      	ldrh	r3, [r3, #12]
 800f7b6:	4619      	mov	r1, r3
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	fbb3 f3f1 	udiv	r3, r3, r1
 800f7be:	4413      	add	r3, r2
 800f7c0:	4619      	mov	r1, r3
 800f7c2:	6938      	ldr	r0, [r7, #16]
 800f7c4:	f7ff ff0c 	bl	800f5e0 <move_window>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	f040 808d 	bne.w	800f8ea <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	1c5a      	adds	r2, r3, #1
 800f7d4:	60fa      	str	r2, [r7, #12]
 800f7d6:	693a      	ldr	r2, [r7, #16]
 800f7d8:	8992      	ldrh	r2, [r2, #12]
 800f7da:	fbb3 f1f2 	udiv	r1, r3, r2
 800f7de:	fb01 f202 	mul.w	r2, r1, r2
 800f7e2:	1a9b      	subs	r3, r3, r2
 800f7e4:	693a      	ldr	r2, [r7, #16]
 800f7e6:	4413      	add	r3, r2
 800f7e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f7ec:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f7ee:	693b      	ldr	r3, [r7, #16]
 800f7f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f7f2:	693b      	ldr	r3, [r7, #16]
 800f7f4:	899b      	ldrh	r3, [r3, #12]
 800f7f6:	4619      	mov	r1, r3
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	fbb3 f3f1 	udiv	r3, r3, r1
 800f7fe:	4413      	add	r3, r2
 800f800:	4619      	mov	r1, r3
 800f802:	6938      	ldr	r0, [r7, #16]
 800f804:	f7ff feec 	bl	800f5e0 <move_window>
 800f808:	4603      	mov	r3, r0
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d16f      	bne.n	800f8ee <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f80e:	693b      	ldr	r3, [r7, #16]
 800f810:	899b      	ldrh	r3, [r3, #12]
 800f812:	461a      	mov	r2, r3
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	fbb3 f1f2 	udiv	r1, r3, r2
 800f81a:	fb01 f202 	mul.w	r2, r1, r2
 800f81e:	1a9b      	subs	r3, r3, r2
 800f820:	693a      	ldr	r2, [r7, #16]
 800f822:	4413      	add	r3, r2
 800f824:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f828:	021b      	lsls	r3, r3, #8
 800f82a:	461a      	mov	r2, r3
 800f82c:	68bb      	ldr	r3, [r7, #8]
 800f82e:	4313      	orrs	r3, r2
 800f830:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	f003 0301 	and.w	r3, r3, #1
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d002      	beq.n	800f842 <get_fat+0xe8>
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	091b      	lsrs	r3, r3, #4
 800f840:	e002      	b.n	800f848 <get_fat+0xee>
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f848:	617b      	str	r3, [r7, #20]
			break;
 800f84a:	e055      	b.n	800f8f8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f84c:	693b      	ldr	r3, [r7, #16]
 800f84e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f850:	693b      	ldr	r3, [r7, #16]
 800f852:	899b      	ldrh	r3, [r3, #12]
 800f854:	085b      	lsrs	r3, r3, #1
 800f856:	b29b      	uxth	r3, r3
 800f858:	4619      	mov	r1, r3
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	fbb3 f3f1 	udiv	r3, r3, r1
 800f860:	4413      	add	r3, r2
 800f862:	4619      	mov	r1, r3
 800f864:	6938      	ldr	r0, [r7, #16]
 800f866:	f7ff febb 	bl	800f5e0 <move_window>
 800f86a:	4603      	mov	r3, r0
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d140      	bne.n	800f8f2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f870:	693b      	ldr	r3, [r7, #16]
 800f872:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	005b      	lsls	r3, r3, #1
 800f87a:	693a      	ldr	r2, [r7, #16]
 800f87c:	8992      	ldrh	r2, [r2, #12]
 800f87e:	fbb3 f0f2 	udiv	r0, r3, r2
 800f882:	fb00 f202 	mul.w	r2, r0, r2
 800f886:	1a9b      	subs	r3, r3, r2
 800f888:	440b      	add	r3, r1
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7ff fbf8 	bl	800f080 <ld_word>
 800f890:	4603      	mov	r3, r0
 800f892:	617b      	str	r3, [r7, #20]
			break;
 800f894:	e030      	b.n	800f8f8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f896:	693b      	ldr	r3, [r7, #16]
 800f898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f89a:	693b      	ldr	r3, [r7, #16]
 800f89c:	899b      	ldrh	r3, [r3, #12]
 800f89e:	089b      	lsrs	r3, r3, #2
 800f8a0:	b29b      	uxth	r3, r3
 800f8a2:	4619      	mov	r1, r3
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	fbb3 f3f1 	udiv	r3, r3, r1
 800f8aa:	4413      	add	r3, r2
 800f8ac:	4619      	mov	r1, r3
 800f8ae:	6938      	ldr	r0, [r7, #16]
 800f8b0:	f7ff fe96 	bl	800f5e0 <move_window>
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d11d      	bne.n	800f8f6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f8ba:	693b      	ldr	r3, [r7, #16]
 800f8bc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	009b      	lsls	r3, r3, #2
 800f8c4:	693a      	ldr	r2, [r7, #16]
 800f8c6:	8992      	ldrh	r2, [r2, #12]
 800f8c8:	fbb3 f0f2 	udiv	r0, r3, r2
 800f8cc:	fb00 f202 	mul.w	r2, r0, r2
 800f8d0:	1a9b      	subs	r3, r3, r2
 800f8d2:	440b      	add	r3, r1
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f7ff fbeb 	bl	800f0b0 <ld_dword>
 800f8da:	4603      	mov	r3, r0
 800f8dc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f8e0:	617b      	str	r3, [r7, #20]
			break;
 800f8e2:	e009      	b.n	800f8f8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f8e4:	2301      	movs	r3, #1
 800f8e6:	617b      	str	r3, [r7, #20]
 800f8e8:	e006      	b.n	800f8f8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f8ea:	bf00      	nop
 800f8ec:	e004      	b.n	800f8f8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f8ee:	bf00      	nop
 800f8f0:	e002      	b.n	800f8f8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f8f2:	bf00      	nop
 800f8f4:	e000      	b.n	800f8f8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f8f6:	bf00      	nop
		}
	}

	return val;
 800f8f8:	697b      	ldr	r3, [r7, #20]
}
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	3718      	adds	r7, #24
 800f8fe:	46bd      	mov	sp, r7
 800f900:	bd80      	pop	{r7, pc}

0800f902 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f902:	b590      	push	{r4, r7, lr}
 800f904:	b089      	sub	sp, #36	; 0x24
 800f906:	af00      	add	r7, sp, #0
 800f908:	60f8      	str	r0, [r7, #12]
 800f90a:	60b9      	str	r1, [r7, #8]
 800f90c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f90e:	2302      	movs	r3, #2
 800f910:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f912:	68bb      	ldr	r3, [r7, #8]
 800f914:	2b01      	cmp	r3, #1
 800f916:	f240 8102 	bls.w	800fb1e <put_fat+0x21c>
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	699b      	ldr	r3, [r3, #24]
 800f91e:	68ba      	ldr	r2, [r7, #8]
 800f920:	429a      	cmp	r2, r3
 800f922:	f080 80fc 	bcs.w	800fb1e <put_fat+0x21c>
		switch (fs->fs_type) {
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	781b      	ldrb	r3, [r3, #0]
 800f92a:	2b03      	cmp	r3, #3
 800f92c:	f000 80b6 	beq.w	800fa9c <put_fat+0x19a>
 800f930:	2b03      	cmp	r3, #3
 800f932:	f300 80fd 	bgt.w	800fb30 <put_fat+0x22e>
 800f936:	2b01      	cmp	r3, #1
 800f938:	d003      	beq.n	800f942 <put_fat+0x40>
 800f93a:	2b02      	cmp	r3, #2
 800f93c:	f000 8083 	beq.w	800fa46 <put_fat+0x144>
 800f940:	e0f6      	b.n	800fb30 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f942:	68bb      	ldr	r3, [r7, #8]
 800f944:	61bb      	str	r3, [r7, #24]
 800f946:	69bb      	ldr	r3, [r7, #24]
 800f948:	085b      	lsrs	r3, r3, #1
 800f94a:	69ba      	ldr	r2, [r7, #24]
 800f94c:	4413      	add	r3, r2
 800f94e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	899b      	ldrh	r3, [r3, #12]
 800f958:	4619      	mov	r1, r3
 800f95a:	69bb      	ldr	r3, [r7, #24]
 800f95c:	fbb3 f3f1 	udiv	r3, r3, r1
 800f960:	4413      	add	r3, r2
 800f962:	4619      	mov	r1, r3
 800f964:	68f8      	ldr	r0, [r7, #12]
 800f966:	f7ff fe3b 	bl	800f5e0 <move_window>
 800f96a:	4603      	mov	r3, r0
 800f96c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f96e:	7ffb      	ldrb	r3, [r7, #31]
 800f970:	2b00      	cmp	r3, #0
 800f972:	f040 80d6 	bne.w	800fb22 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f97c:	69bb      	ldr	r3, [r7, #24]
 800f97e:	1c5a      	adds	r2, r3, #1
 800f980:	61ba      	str	r2, [r7, #24]
 800f982:	68fa      	ldr	r2, [r7, #12]
 800f984:	8992      	ldrh	r2, [r2, #12]
 800f986:	fbb3 f0f2 	udiv	r0, r3, r2
 800f98a:	fb00 f202 	mul.w	r2, r0, r2
 800f98e:	1a9b      	subs	r3, r3, r2
 800f990:	440b      	add	r3, r1
 800f992:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	f003 0301 	and.w	r3, r3, #1
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d00d      	beq.n	800f9ba <put_fat+0xb8>
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	781b      	ldrb	r3, [r3, #0]
 800f9a2:	b25b      	sxtb	r3, r3
 800f9a4:	f003 030f 	and.w	r3, r3, #15
 800f9a8:	b25a      	sxtb	r2, r3
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	b2db      	uxtb	r3, r3
 800f9ae:	011b      	lsls	r3, r3, #4
 800f9b0:	b25b      	sxtb	r3, r3
 800f9b2:	4313      	orrs	r3, r2
 800f9b4:	b25b      	sxtb	r3, r3
 800f9b6:	b2db      	uxtb	r3, r3
 800f9b8:	e001      	b.n	800f9be <put_fat+0xbc>
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	b2db      	uxtb	r3, r3
 800f9be:	697a      	ldr	r2, [r7, #20]
 800f9c0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	2201      	movs	r2, #1
 800f9c6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	899b      	ldrh	r3, [r3, #12]
 800f9d0:	4619      	mov	r1, r3
 800f9d2:	69bb      	ldr	r3, [r7, #24]
 800f9d4:	fbb3 f3f1 	udiv	r3, r3, r1
 800f9d8:	4413      	add	r3, r2
 800f9da:	4619      	mov	r1, r3
 800f9dc:	68f8      	ldr	r0, [r7, #12]
 800f9de:	f7ff fdff 	bl	800f5e0 <move_window>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f9e6:	7ffb      	ldrb	r3, [r7, #31]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	f040 809c 	bne.w	800fb26 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	899b      	ldrh	r3, [r3, #12]
 800f9f8:	461a      	mov	r2, r3
 800f9fa:	69bb      	ldr	r3, [r7, #24]
 800f9fc:	fbb3 f0f2 	udiv	r0, r3, r2
 800fa00:	fb00 f202 	mul.w	r2, r0, r2
 800fa04:	1a9b      	subs	r3, r3, r2
 800fa06:	440b      	add	r3, r1
 800fa08:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	f003 0301 	and.w	r3, r3, #1
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d003      	beq.n	800fa1c <put_fat+0x11a>
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	091b      	lsrs	r3, r3, #4
 800fa18:	b2db      	uxtb	r3, r3
 800fa1a:	e00e      	b.n	800fa3a <put_fat+0x138>
 800fa1c:	697b      	ldr	r3, [r7, #20]
 800fa1e:	781b      	ldrb	r3, [r3, #0]
 800fa20:	b25b      	sxtb	r3, r3
 800fa22:	f023 030f 	bic.w	r3, r3, #15
 800fa26:	b25a      	sxtb	r2, r3
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	0a1b      	lsrs	r3, r3, #8
 800fa2c:	b25b      	sxtb	r3, r3
 800fa2e:	f003 030f 	and.w	r3, r3, #15
 800fa32:	b25b      	sxtb	r3, r3
 800fa34:	4313      	orrs	r3, r2
 800fa36:	b25b      	sxtb	r3, r3
 800fa38:	b2db      	uxtb	r3, r3
 800fa3a:	697a      	ldr	r2, [r7, #20]
 800fa3c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	2201      	movs	r2, #1
 800fa42:	70da      	strb	r2, [r3, #3]
			break;
 800fa44:	e074      	b.n	800fb30 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	899b      	ldrh	r3, [r3, #12]
 800fa4e:	085b      	lsrs	r3, r3, #1
 800fa50:	b29b      	uxth	r3, r3
 800fa52:	4619      	mov	r1, r3
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	fbb3 f3f1 	udiv	r3, r3, r1
 800fa5a:	4413      	add	r3, r2
 800fa5c:	4619      	mov	r1, r3
 800fa5e:	68f8      	ldr	r0, [r7, #12]
 800fa60:	f7ff fdbe 	bl	800f5e0 <move_window>
 800fa64:	4603      	mov	r3, r0
 800fa66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fa68:	7ffb      	ldrb	r3, [r7, #31]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d15d      	bne.n	800fb2a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	005b      	lsls	r3, r3, #1
 800fa78:	68fa      	ldr	r2, [r7, #12]
 800fa7a:	8992      	ldrh	r2, [r2, #12]
 800fa7c:	fbb3 f0f2 	udiv	r0, r3, r2
 800fa80:	fb00 f202 	mul.w	r2, r0, r2
 800fa84:	1a9b      	subs	r3, r3, r2
 800fa86:	440b      	add	r3, r1
 800fa88:	687a      	ldr	r2, [r7, #4]
 800fa8a:	b292      	uxth	r2, r2
 800fa8c:	4611      	mov	r1, r2
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f7ff fb31 	bl	800f0f6 <st_word>
			fs->wflag = 1;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	2201      	movs	r2, #1
 800fa98:	70da      	strb	r2, [r3, #3]
			break;
 800fa9a:	e049      	b.n	800fb30 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	899b      	ldrh	r3, [r3, #12]
 800faa4:	089b      	lsrs	r3, r3, #2
 800faa6:	b29b      	uxth	r3, r3
 800faa8:	4619      	mov	r1, r3
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	fbb3 f3f1 	udiv	r3, r3, r1
 800fab0:	4413      	add	r3, r2
 800fab2:	4619      	mov	r1, r3
 800fab4:	68f8      	ldr	r0, [r7, #12]
 800fab6:	f7ff fd93 	bl	800f5e0 <move_window>
 800faba:	4603      	mov	r3, r0
 800fabc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fabe:	7ffb      	ldrb	r3, [r7, #31]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d134      	bne.n	800fb2e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fad0:	68bb      	ldr	r3, [r7, #8]
 800fad2:	009b      	lsls	r3, r3, #2
 800fad4:	68fa      	ldr	r2, [r7, #12]
 800fad6:	8992      	ldrh	r2, [r2, #12]
 800fad8:	fbb3 f0f2 	udiv	r0, r3, r2
 800fadc:	fb00 f202 	mul.w	r2, r0, r2
 800fae0:	1a9b      	subs	r3, r3, r2
 800fae2:	440b      	add	r3, r1
 800fae4:	4618      	mov	r0, r3
 800fae6:	f7ff fae3 	bl	800f0b0 <ld_dword>
 800faea:	4603      	mov	r3, r0
 800faec:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800faf0:	4323      	orrs	r3, r4
 800faf2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	009b      	lsls	r3, r3, #2
 800fafe:	68fa      	ldr	r2, [r7, #12]
 800fb00:	8992      	ldrh	r2, [r2, #12]
 800fb02:	fbb3 f0f2 	udiv	r0, r3, r2
 800fb06:	fb00 f202 	mul.w	r2, r0, r2
 800fb0a:	1a9b      	subs	r3, r3, r2
 800fb0c:	440b      	add	r3, r1
 800fb0e:	6879      	ldr	r1, [r7, #4]
 800fb10:	4618      	mov	r0, r3
 800fb12:	f7ff fb0b 	bl	800f12c <st_dword>
			fs->wflag = 1;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	2201      	movs	r2, #1
 800fb1a:	70da      	strb	r2, [r3, #3]
			break;
 800fb1c:	e008      	b.n	800fb30 <put_fat+0x22e>
		}
	}
 800fb1e:	bf00      	nop
 800fb20:	e006      	b.n	800fb30 <put_fat+0x22e>
			if (res != FR_OK) break;
 800fb22:	bf00      	nop
 800fb24:	e004      	b.n	800fb30 <put_fat+0x22e>
			if (res != FR_OK) break;
 800fb26:	bf00      	nop
 800fb28:	e002      	b.n	800fb30 <put_fat+0x22e>
			if (res != FR_OK) break;
 800fb2a:	bf00      	nop
 800fb2c:	e000      	b.n	800fb30 <put_fat+0x22e>
			if (res != FR_OK) break;
 800fb2e:	bf00      	nop
	return res;
 800fb30:	7ffb      	ldrb	r3, [r7, #31]
}
 800fb32:	4618      	mov	r0, r3
 800fb34:	3724      	adds	r7, #36	; 0x24
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bd90      	pop	{r4, r7, pc}

0800fb3a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800fb3a:	b580      	push	{r7, lr}
 800fb3c:	b088      	sub	sp, #32
 800fb3e:	af00      	add	r7, sp, #0
 800fb40:	60f8      	str	r0, [r7, #12]
 800fb42:	60b9      	str	r1, [r7, #8]
 800fb44:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800fb46:	2300      	movs	r3, #0
 800fb48:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800fb50:	68bb      	ldr	r3, [r7, #8]
 800fb52:	2b01      	cmp	r3, #1
 800fb54:	d904      	bls.n	800fb60 <remove_chain+0x26>
 800fb56:	69bb      	ldr	r3, [r7, #24]
 800fb58:	699b      	ldr	r3, [r3, #24]
 800fb5a:	68ba      	ldr	r2, [r7, #8]
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	d301      	bcc.n	800fb64 <remove_chain+0x2a>
 800fb60:	2302      	movs	r3, #2
 800fb62:	e04b      	b.n	800fbfc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d00c      	beq.n	800fb84 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800fb6a:	f04f 32ff 	mov.w	r2, #4294967295
 800fb6e:	6879      	ldr	r1, [r7, #4]
 800fb70:	69b8      	ldr	r0, [r7, #24]
 800fb72:	f7ff fec6 	bl	800f902 <put_fat>
 800fb76:	4603      	mov	r3, r0
 800fb78:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800fb7a:	7ffb      	ldrb	r3, [r7, #31]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d001      	beq.n	800fb84 <remove_chain+0x4a>
 800fb80:	7ffb      	ldrb	r3, [r7, #31]
 800fb82:	e03b      	b.n	800fbfc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800fb84:	68b9      	ldr	r1, [r7, #8]
 800fb86:	68f8      	ldr	r0, [r7, #12]
 800fb88:	f7ff fde7 	bl	800f75a <get_fat>
 800fb8c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800fb8e:	697b      	ldr	r3, [r7, #20]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d031      	beq.n	800fbf8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800fb94:	697b      	ldr	r3, [r7, #20]
 800fb96:	2b01      	cmp	r3, #1
 800fb98:	d101      	bne.n	800fb9e <remove_chain+0x64>
 800fb9a:	2302      	movs	r3, #2
 800fb9c:	e02e      	b.n	800fbfc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800fb9e:	697b      	ldr	r3, [r7, #20]
 800fba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fba4:	d101      	bne.n	800fbaa <remove_chain+0x70>
 800fba6:	2301      	movs	r3, #1
 800fba8:	e028      	b.n	800fbfc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800fbaa:	2200      	movs	r2, #0
 800fbac:	68b9      	ldr	r1, [r7, #8]
 800fbae:	69b8      	ldr	r0, [r7, #24]
 800fbb0:	f7ff fea7 	bl	800f902 <put_fat>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800fbb8:	7ffb      	ldrb	r3, [r7, #31]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d001      	beq.n	800fbc2 <remove_chain+0x88>
 800fbbe:	7ffb      	ldrb	r3, [r7, #31]
 800fbc0:	e01c      	b.n	800fbfc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800fbc2:	69bb      	ldr	r3, [r7, #24]
 800fbc4:	695a      	ldr	r2, [r3, #20]
 800fbc6:	69bb      	ldr	r3, [r7, #24]
 800fbc8:	699b      	ldr	r3, [r3, #24]
 800fbca:	3b02      	subs	r3, #2
 800fbcc:	429a      	cmp	r2, r3
 800fbce:	d20b      	bcs.n	800fbe8 <remove_chain+0xae>
			fs->free_clst++;
 800fbd0:	69bb      	ldr	r3, [r7, #24]
 800fbd2:	695b      	ldr	r3, [r3, #20]
 800fbd4:	1c5a      	adds	r2, r3, #1
 800fbd6:	69bb      	ldr	r3, [r7, #24]
 800fbd8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800fbda:	69bb      	ldr	r3, [r7, #24]
 800fbdc:	791b      	ldrb	r3, [r3, #4]
 800fbde:	f043 0301 	orr.w	r3, r3, #1
 800fbe2:	b2da      	uxtb	r2, r3
 800fbe4:	69bb      	ldr	r3, [r7, #24]
 800fbe6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800fbe8:	697b      	ldr	r3, [r7, #20]
 800fbea:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800fbec:	69bb      	ldr	r3, [r7, #24]
 800fbee:	699b      	ldr	r3, [r3, #24]
 800fbf0:	68ba      	ldr	r2, [r7, #8]
 800fbf2:	429a      	cmp	r2, r3
 800fbf4:	d3c6      	bcc.n	800fb84 <remove_chain+0x4a>
 800fbf6:	e000      	b.n	800fbfa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800fbf8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800fbfa:	2300      	movs	r3, #0
}
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	3720      	adds	r7, #32
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd80      	pop	{r7, pc}

0800fc04 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b088      	sub	sp, #32
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
 800fc0c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800fc14:	683b      	ldr	r3, [r7, #0]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d10d      	bne.n	800fc36 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800fc1a:	693b      	ldr	r3, [r7, #16]
 800fc1c:	691b      	ldr	r3, [r3, #16]
 800fc1e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800fc20:	69bb      	ldr	r3, [r7, #24]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d004      	beq.n	800fc30 <create_chain+0x2c>
 800fc26:	693b      	ldr	r3, [r7, #16]
 800fc28:	699b      	ldr	r3, [r3, #24]
 800fc2a:	69ba      	ldr	r2, [r7, #24]
 800fc2c:	429a      	cmp	r2, r3
 800fc2e:	d31b      	bcc.n	800fc68 <create_chain+0x64>
 800fc30:	2301      	movs	r3, #1
 800fc32:	61bb      	str	r3, [r7, #24]
 800fc34:	e018      	b.n	800fc68 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800fc36:	6839      	ldr	r1, [r7, #0]
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f7ff fd8e 	bl	800f75a <get_fat>
 800fc3e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	2b01      	cmp	r3, #1
 800fc44:	d801      	bhi.n	800fc4a <create_chain+0x46>
 800fc46:	2301      	movs	r3, #1
 800fc48:	e070      	b.n	800fd2c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc50:	d101      	bne.n	800fc56 <create_chain+0x52>
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	e06a      	b.n	800fd2c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800fc56:	693b      	ldr	r3, [r7, #16]
 800fc58:	699b      	ldr	r3, [r3, #24]
 800fc5a:	68fa      	ldr	r2, [r7, #12]
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d201      	bcs.n	800fc64 <create_chain+0x60>
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	e063      	b.n	800fd2c <create_chain+0x128>
		scl = clst;
 800fc64:	683b      	ldr	r3, [r7, #0]
 800fc66:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800fc68:	69bb      	ldr	r3, [r7, #24]
 800fc6a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800fc6c:	69fb      	ldr	r3, [r7, #28]
 800fc6e:	3301      	adds	r3, #1
 800fc70:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800fc72:	693b      	ldr	r3, [r7, #16]
 800fc74:	699b      	ldr	r3, [r3, #24]
 800fc76:	69fa      	ldr	r2, [r7, #28]
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	d307      	bcc.n	800fc8c <create_chain+0x88>
				ncl = 2;
 800fc7c:	2302      	movs	r3, #2
 800fc7e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800fc80:	69fa      	ldr	r2, [r7, #28]
 800fc82:	69bb      	ldr	r3, [r7, #24]
 800fc84:	429a      	cmp	r2, r3
 800fc86:	d901      	bls.n	800fc8c <create_chain+0x88>
 800fc88:	2300      	movs	r3, #0
 800fc8a:	e04f      	b.n	800fd2c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800fc8c:	69f9      	ldr	r1, [r7, #28]
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f7ff fd63 	bl	800f75a <get_fat>
 800fc94:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d00e      	beq.n	800fcba <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	2b01      	cmp	r3, #1
 800fca0:	d003      	beq.n	800fcaa <create_chain+0xa6>
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fca8:	d101      	bne.n	800fcae <create_chain+0xaa>
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	e03e      	b.n	800fd2c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800fcae:	69fa      	ldr	r2, [r7, #28]
 800fcb0:	69bb      	ldr	r3, [r7, #24]
 800fcb2:	429a      	cmp	r2, r3
 800fcb4:	d1da      	bne.n	800fc6c <create_chain+0x68>
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	e038      	b.n	800fd2c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800fcba:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800fcbc:	f04f 32ff 	mov.w	r2, #4294967295
 800fcc0:	69f9      	ldr	r1, [r7, #28]
 800fcc2:	6938      	ldr	r0, [r7, #16]
 800fcc4:	f7ff fe1d 	bl	800f902 <put_fat>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800fccc:	7dfb      	ldrb	r3, [r7, #23]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d109      	bne.n	800fce6 <create_chain+0xe2>
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d006      	beq.n	800fce6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800fcd8:	69fa      	ldr	r2, [r7, #28]
 800fcda:	6839      	ldr	r1, [r7, #0]
 800fcdc:	6938      	ldr	r0, [r7, #16]
 800fcde:	f7ff fe10 	bl	800f902 <put_fat>
 800fce2:	4603      	mov	r3, r0
 800fce4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800fce6:	7dfb      	ldrb	r3, [r7, #23]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d116      	bne.n	800fd1a <create_chain+0x116>
		fs->last_clst = ncl;
 800fcec:	693b      	ldr	r3, [r7, #16]
 800fcee:	69fa      	ldr	r2, [r7, #28]
 800fcf0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800fcf2:	693b      	ldr	r3, [r7, #16]
 800fcf4:	695a      	ldr	r2, [r3, #20]
 800fcf6:	693b      	ldr	r3, [r7, #16]
 800fcf8:	699b      	ldr	r3, [r3, #24]
 800fcfa:	3b02      	subs	r3, #2
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	d804      	bhi.n	800fd0a <create_chain+0x106>
 800fd00:	693b      	ldr	r3, [r7, #16]
 800fd02:	695b      	ldr	r3, [r3, #20]
 800fd04:	1e5a      	subs	r2, r3, #1
 800fd06:	693b      	ldr	r3, [r7, #16]
 800fd08:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800fd0a:	693b      	ldr	r3, [r7, #16]
 800fd0c:	791b      	ldrb	r3, [r3, #4]
 800fd0e:	f043 0301 	orr.w	r3, r3, #1
 800fd12:	b2da      	uxtb	r2, r3
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	711a      	strb	r2, [r3, #4]
 800fd18:	e007      	b.n	800fd2a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800fd1a:	7dfb      	ldrb	r3, [r7, #23]
 800fd1c:	2b01      	cmp	r3, #1
 800fd1e:	d102      	bne.n	800fd26 <create_chain+0x122>
 800fd20:	f04f 33ff 	mov.w	r3, #4294967295
 800fd24:	e000      	b.n	800fd28 <create_chain+0x124>
 800fd26:	2301      	movs	r3, #1
 800fd28:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800fd2a:	69fb      	ldr	r3, [r7, #28]
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3720      	adds	r7, #32
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}

0800fd34 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800fd34:	b480      	push	{r7}
 800fd36:	b087      	sub	sp, #28
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
 800fd3c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd48:	3304      	adds	r3, #4
 800fd4a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	899b      	ldrh	r3, [r3, #12]
 800fd50:	461a      	mov	r2, r3
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd58:	68fa      	ldr	r2, [r7, #12]
 800fd5a:	8952      	ldrh	r2, [r2, #10]
 800fd5c:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd60:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fd62:	693b      	ldr	r3, [r7, #16]
 800fd64:	1d1a      	adds	r2, r3, #4
 800fd66:	613a      	str	r2, [r7, #16]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d101      	bne.n	800fd76 <clmt_clust+0x42>
 800fd72:	2300      	movs	r3, #0
 800fd74:	e010      	b.n	800fd98 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800fd76:	697a      	ldr	r2, [r7, #20]
 800fd78:	68bb      	ldr	r3, [r7, #8]
 800fd7a:	429a      	cmp	r2, r3
 800fd7c:	d307      	bcc.n	800fd8e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800fd7e:	697a      	ldr	r2, [r7, #20]
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	1ad3      	subs	r3, r2, r3
 800fd84:	617b      	str	r3, [r7, #20]
 800fd86:	693b      	ldr	r3, [r7, #16]
 800fd88:	3304      	adds	r3, #4
 800fd8a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fd8c:	e7e9      	b.n	800fd62 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800fd8e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800fd90:	693b      	ldr	r3, [r7, #16]
 800fd92:	681a      	ldr	r2, [r3, #0]
 800fd94:	697b      	ldr	r3, [r7, #20]
 800fd96:	4413      	add	r3, r2
}
 800fd98:	4618      	mov	r0, r3
 800fd9a:	371c      	adds	r7, #28
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda2:	4770      	bx	lr

0800fda4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b086      	sub	sp, #24
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
 800fdac:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fdba:	d204      	bcs.n	800fdc6 <dir_sdi+0x22>
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	f003 031f 	and.w	r3, r3, #31
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d001      	beq.n	800fdca <dir_sdi+0x26>
		return FR_INT_ERR;
 800fdc6:	2302      	movs	r3, #2
 800fdc8:	e071      	b.n	800feae <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	683a      	ldr	r2, [r7, #0]
 800fdce:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	689b      	ldr	r3, [r3, #8]
 800fdd4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800fdd6:	697b      	ldr	r3, [r7, #20]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d106      	bne.n	800fdea <dir_sdi+0x46>
 800fddc:	693b      	ldr	r3, [r7, #16]
 800fdde:	781b      	ldrb	r3, [r3, #0]
 800fde0:	2b02      	cmp	r3, #2
 800fde2:	d902      	bls.n	800fdea <dir_sdi+0x46>
		clst = fs->dirbase;
 800fde4:	693b      	ldr	r3, [r7, #16]
 800fde6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fde8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800fdea:	697b      	ldr	r3, [r7, #20]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d10c      	bne.n	800fe0a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	095b      	lsrs	r3, r3, #5
 800fdf4:	693a      	ldr	r2, [r7, #16]
 800fdf6:	8912      	ldrh	r2, [r2, #8]
 800fdf8:	4293      	cmp	r3, r2
 800fdfa:	d301      	bcc.n	800fe00 <dir_sdi+0x5c>
 800fdfc:	2302      	movs	r3, #2
 800fdfe:	e056      	b.n	800feae <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	61da      	str	r2, [r3, #28]
 800fe08:	e02d      	b.n	800fe66 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800fe0a:	693b      	ldr	r3, [r7, #16]
 800fe0c:	895b      	ldrh	r3, [r3, #10]
 800fe0e:	461a      	mov	r2, r3
 800fe10:	693b      	ldr	r3, [r7, #16]
 800fe12:	899b      	ldrh	r3, [r3, #12]
 800fe14:	fb02 f303 	mul.w	r3, r2, r3
 800fe18:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fe1a:	e019      	b.n	800fe50 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	6979      	ldr	r1, [r7, #20]
 800fe20:	4618      	mov	r0, r3
 800fe22:	f7ff fc9a 	bl	800f75a <get_fat>
 800fe26:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fe28:	697b      	ldr	r3, [r7, #20]
 800fe2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe2e:	d101      	bne.n	800fe34 <dir_sdi+0x90>
 800fe30:	2301      	movs	r3, #1
 800fe32:	e03c      	b.n	800feae <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800fe34:	697b      	ldr	r3, [r7, #20]
 800fe36:	2b01      	cmp	r3, #1
 800fe38:	d904      	bls.n	800fe44 <dir_sdi+0xa0>
 800fe3a:	693b      	ldr	r3, [r7, #16]
 800fe3c:	699b      	ldr	r3, [r3, #24]
 800fe3e:	697a      	ldr	r2, [r7, #20]
 800fe40:	429a      	cmp	r2, r3
 800fe42:	d301      	bcc.n	800fe48 <dir_sdi+0xa4>
 800fe44:	2302      	movs	r3, #2
 800fe46:	e032      	b.n	800feae <dir_sdi+0x10a>
			ofs -= csz;
 800fe48:	683a      	ldr	r2, [r7, #0]
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	1ad3      	subs	r3, r2, r3
 800fe4e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fe50:	683a      	ldr	r2, [r7, #0]
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	429a      	cmp	r2, r3
 800fe56:	d2e1      	bcs.n	800fe1c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800fe58:	6979      	ldr	r1, [r7, #20]
 800fe5a:	6938      	ldr	r0, [r7, #16]
 800fe5c:	f7ff fc5e 	bl	800f71c <clust2sect>
 800fe60:	4602      	mov	r2, r0
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	697a      	ldr	r2, [r7, #20]
 800fe6a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	69db      	ldr	r3, [r3, #28]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d101      	bne.n	800fe78 <dir_sdi+0xd4>
 800fe74:	2302      	movs	r3, #2
 800fe76:	e01a      	b.n	800feae <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	69da      	ldr	r2, [r3, #28]
 800fe7c:	693b      	ldr	r3, [r7, #16]
 800fe7e:	899b      	ldrh	r3, [r3, #12]
 800fe80:	4619      	mov	r1, r3
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	fbb3 f3f1 	udiv	r3, r3, r1
 800fe88:	441a      	add	r2, r3
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800fe8e:	693b      	ldr	r3, [r7, #16]
 800fe90:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fe94:	693b      	ldr	r3, [r7, #16]
 800fe96:	899b      	ldrh	r3, [r3, #12]
 800fe98:	461a      	mov	r2, r3
 800fe9a:	683b      	ldr	r3, [r7, #0]
 800fe9c:	fbb3 f0f2 	udiv	r0, r3, r2
 800fea0:	fb00 f202 	mul.w	r2, r0, r2
 800fea4:	1a9b      	subs	r3, r3, r2
 800fea6:	18ca      	adds	r2, r1, r3
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800feac:	2300      	movs	r3, #0
}
 800feae:	4618      	mov	r0, r3
 800feb0:	3718      	adds	r7, #24
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bd80      	pop	{r7, pc}

0800feb6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800feb6:	b580      	push	{r7, lr}
 800feb8:	b086      	sub	sp, #24
 800feba:	af00      	add	r7, sp, #0
 800febc:	6078      	str	r0, [r7, #4]
 800febe:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	695b      	ldr	r3, [r3, #20]
 800feca:	3320      	adds	r3, #32
 800fecc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	69db      	ldr	r3, [r3, #28]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d003      	beq.n	800fede <dir_next+0x28>
 800fed6:	68bb      	ldr	r3, [r7, #8]
 800fed8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fedc:	d301      	bcc.n	800fee2 <dir_next+0x2c>
 800fede:	2304      	movs	r3, #4
 800fee0:	e0bb      	b.n	801005a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	899b      	ldrh	r3, [r3, #12]
 800fee6:	461a      	mov	r2, r3
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	fbb3 f1f2 	udiv	r1, r3, r2
 800feee:	fb01 f202 	mul.w	r2, r1, r2
 800fef2:	1a9b      	subs	r3, r3, r2
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	f040 809d 	bne.w	8010034 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	69db      	ldr	r3, [r3, #28]
 800fefe:	1c5a      	adds	r2, r3, #1
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	699b      	ldr	r3, [r3, #24]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d10b      	bne.n	800ff24 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ff0c:	68bb      	ldr	r3, [r7, #8]
 800ff0e:	095b      	lsrs	r3, r3, #5
 800ff10:	68fa      	ldr	r2, [r7, #12]
 800ff12:	8912      	ldrh	r2, [r2, #8]
 800ff14:	4293      	cmp	r3, r2
 800ff16:	f0c0 808d 	bcc.w	8010034 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	61da      	str	r2, [r3, #28]
 800ff20:	2304      	movs	r3, #4
 800ff22:	e09a      	b.n	801005a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	899b      	ldrh	r3, [r3, #12]
 800ff28:	461a      	mov	r2, r3
 800ff2a:	68bb      	ldr	r3, [r7, #8]
 800ff2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff30:	68fa      	ldr	r2, [r7, #12]
 800ff32:	8952      	ldrh	r2, [r2, #10]
 800ff34:	3a01      	subs	r2, #1
 800ff36:	4013      	ands	r3, r2
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d17b      	bne.n	8010034 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ff3c:	687a      	ldr	r2, [r7, #4]
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	699b      	ldr	r3, [r3, #24]
 800ff42:	4619      	mov	r1, r3
 800ff44:	4610      	mov	r0, r2
 800ff46:	f7ff fc08 	bl	800f75a <get_fat>
 800ff4a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	2b01      	cmp	r3, #1
 800ff50:	d801      	bhi.n	800ff56 <dir_next+0xa0>
 800ff52:	2302      	movs	r3, #2
 800ff54:	e081      	b.n	801005a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ff56:	697b      	ldr	r3, [r7, #20]
 800ff58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff5c:	d101      	bne.n	800ff62 <dir_next+0xac>
 800ff5e:	2301      	movs	r3, #1
 800ff60:	e07b      	b.n	801005a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	699b      	ldr	r3, [r3, #24]
 800ff66:	697a      	ldr	r2, [r7, #20]
 800ff68:	429a      	cmp	r2, r3
 800ff6a:	d359      	bcc.n	8010020 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d104      	bne.n	800ff7c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2200      	movs	r2, #0
 800ff76:	61da      	str	r2, [r3, #28]
 800ff78:	2304      	movs	r3, #4
 800ff7a:	e06e      	b.n	801005a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ff7c:	687a      	ldr	r2, [r7, #4]
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	699b      	ldr	r3, [r3, #24]
 800ff82:	4619      	mov	r1, r3
 800ff84:	4610      	mov	r0, r2
 800ff86:	f7ff fe3d 	bl	800fc04 <create_chain>
 800ff8a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ff8c:	697b      	ldr	r3, [r7, #20]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d101      	bne.n	800ff96 <dir_next+0xe0>
 800ff92:	2307      	movs	r3, #7
 800ff94:	e061      	b.n	801005a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ff96:	697b      	ldr	r3, [r7, #20]
 800ff98:	2b01      	cmp	r3, #1
 800ff9a:	d101      	bne.n	800ffa0 <dir_next+0xea>
 800ff9c:	2302      	movs	r3, #2
 800ff9e:	e05c      	b.n	801005a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffa6:	d101      	bne.n	800ffac <dir_next+0xf6>
 800ffa8:	2301      	movs	r3, #1
 800ffaa:	e056      	b.n	801005a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ffac:	68f8      	ldr	r0, [r7, #12]
 800ffae:	f7ff fad3 	bl	800f558 <sync_window>
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d001      	beq.n	800ffbc <dir_next+0x106>
 800ffb8:	2301      	movs	r3, #1
 800ffba:	e04e      	b.n	801005a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	899b      	ldrh	r3, [r3, #12]
 800ffc6:	461a      	mov	r2, r3
 800ffc8:	2100      	movs	r1, #0
 800ffca:	f7ff f8fc 	bl	800f1c6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ffce:	2300      	movs	r3, #0
 800ffd0:	613b      	str	r3, [r7, #16]
 800ffd2:	6979      	ldr	r1, [r7, #20]
 800ffd4:	68f8      	ldr	r0, [r7, #12]
 800ffd6:	f7ff fba1 	bl	800f71c <clust2sect>
 800ffda:	4602      	mov	r2, r0
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	631a      	str	r2, [r3, #48]	; 0x30
 800ffe0:	e012      	b.n	8010008 <dir_next+0x152>
						fs->wflag = 1;
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	2201      	movs	r2, #1
 800ffe6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ffe8:	68f8      	ldr	r0, [r7, #12]
 800ffea:	f7ff fab5 	bl	800f558 <sync_window>
 800ffee:	4603      	mov	r3, r0
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d001      	beq.n	800fff8 <dir_next+0x142>
 800fff4:	2301      	movs	r3, #1
 800fff6:	e030      	b.n	801005a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fff8:	693b      	ldr	r3, [r7, #16]
 800fffa:	3301      	adds	r3, #1
 800fffc:	613b      	str	r3, [r7, #16]
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010002:	1c5a      	adds	r2, r3, #1
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	631a      	str	r2, [r3, #48]	; 0x30
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	895b      	ldrh	r3, [r3, #10]
 801000c:	461a      	mov	r2, r3
 801000e:	693b      	ldr	r3, [r7, #16]
 8010010:	4293      	cmp	r3, r2
 8010012:	d3e6      	bcc.n	800ffe2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010018:	693b      	ldr	r3, [r7, #16]
 801001a:	1ad2      	subs	r2, r2, r3
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	697a      	ldr	r2, [r7, #20]
 8010024:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010026:	6979      	ldr	r1, [r7, #20]
 8010028:	68f8      	ldr	r0, [r7, #12]
 801002a:	f7ff fb77 	bl	800f71c <clust2sect>
 801002e:	4602      	mov	r2, r0
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	68ba      	ldr	r2, [r7, #8]
 8010038:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	899b      	ldrh	r3, [r3, #12]
 8010044:	461a      	mov	r2, r3
 8010046:	68bb      	ldr	r3, [r7, #8]
 8010048:	fbb3 f0f2 	udiv	r0, r3, r2
 801004c:	fb00 f202 	mul.w	r2, r0, r2
 8010050:	1a9b      	subs	r3, r3, r2
 8010052:	18ca      	adds	r2, r1, r3
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010058:	2300      	movs	r3, #0
}
 801005a:	4618      	mov	r0, r3
 801005c:	3718      	adds	r7, #24
 801005e:	46bd      	mov	sp, r7
 8010060:	bd80      	pop	{r7, pc}

08010062 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010062:	b580      	push	{r7, lr}
 8010064:	b086      	sub	sp, #24
 8010066:	af00      	add	r7, sp, #0
 8010068:	6078      	str	r0, [r7, #4]
 801006a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010072:	2100      	movs	r1, #0
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	f7ff fe95 	bl	800fda4 <dir_sdi>
 801007a:	4603      	mov	r3, r0
 801007c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801007e:	7dfb      	ldrb	r3, [r7, #23]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d12b      	bne.n	80100dc <dir_alloc+0x7a>
		n = 0;
 8010084:	2300      	movs	r3, #0
 8010086:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	69db      	ldr	r3, [r3, #28]
 801008c:	4619      	mov	r1, r3
 801008e:	68f8      	ldr	r0, [r7, #12]
 8010090:	f7ff faa6 	bl	800f5e0 <move_window>
 8010094:	4603      	mov	r3, r0
 8010096:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010098:	7dfb      	ldrb	r3, [r7, #23]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d11d      	bne.n	80100da <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	6a1b      	ldr	r3, [r3, #32]
 80100a2:	781b      	ldrb	r3, [r3, #0]
 80100a4:	2be5      	cmp	r3, #229	; 0xe5
 80100a6:	d004      	beq.n	80100b2 <dir_alloc+0x50>
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	6a1b      	ldr	r3, [r3, #32]
 80100ac:	781b      	ldrb	r3, [r3, #0]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d107      	bne.n	80100c2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80100b2:	693b      	ldr	r3, [r7, #16]
 80100b4:	3301      	adds	r3, #1
 80100b6:	613b      	str	r3, [r7, #16]
 80100b8:	693a      	ldr	r2, [r7, #16]
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	429a      	cmp	r2, r3
 80100be:	d102      	bne.n	80100c6 <dir_alloc+0x64>
 80100c0:	e00c      	b.n	80100dc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80100c2:	2300      	movs	r3, #0
 80100c4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80100c6:	2101      	movs	r1, #1
 80100c8:	6878      	ldr	r0, [r7, #4]
 80100ca:	f7ff fef4 	bl	800feb6 <dir_next>
 80100ce:	4603      	mov	r3, r0
 80100d0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80100d2:	7dfb      	ldrb	r3, [r7, #23]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d0d7      	beq.n	8010088 <dir_alloc+0x26>
 80100d8:	e000      	b.n	80100dc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80100da:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80100dc:	7dfb      	ldrb	r3, [r7, #23]
 80100de:	2b04      	cmp	r3, #4
 80100e0:	d101      	bne.n	80100e6 <dir_alloc+0x84>
 80100e2:	2307      	movs	r3, #7
 80100e4:	75fb      	strb	r3, [r7, #23]
	return res;
 80100e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	3718      	adds	r7, #24
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}

080100f0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b084      	sub	sp, #16
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
 80100f8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	331a      	adds	r3, #26
 80100fe:	4618      	mov	r0, r3
 8010100:	f7fe ffbe 	bl	800f080 <ld_word>
 8010104:	4603      	mov	r3, r0
 8010106:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	781b      	ldrb	r3, [r3, #0]
 801010c:	2b03      	cmp	r3, #3
 801010e:	d109      	bne.n	8010124 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010110:	683b      	ldr	r3, [r7, #0]
 8010112:	3314      	adds	r3, #20
 8010114:	4618      	mov	r0, r3
 8010116:	f7fe ffb3 	bl	800f080 <ld_word>
 801011a:	4603      	mov	r3, r0
 801011c:	041b      	lsls	r3, r3, #16
 801011e:	68fa      	ldr	r2, [r7, #12]
 8010120:	4313      	orrs	r3, r2
 8010122:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010124:	68fb      	ldr	r3, [r7, #12]
}
 8010126:	4618      	mov	r0, r3
 8010128:	3710      	adds	r7, #16
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}

0801012e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801012e:	b580      	push	{r7, lr}
 8010130:	b084      	sub	sp, #16
 8010132:	af00      	add	r7, sp, #0
 8010134:	60f8      	str	r0, [r7, #12]
 8010136:	60b9      	str	r1, [r7, #8]
 8010138:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801013a:	68bb      	ldr	r3, [r7, #8]
 801013c:	331a      	adds	r3, #26
 801013e:	687a      	ldr	r2, [r7, #4]
 8010140:	b292      	uxth	r2, r2
 8010142:	4611      	mov	r1, r2
 8010144:	4618      	mov	r0, r3
 8010146:	f7fe ffd6 	bl	800f0f6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	781b      	ldrb	r3, [r3, #0]
 801014e:	2b03      	cmp	r3, #3
 8010150:	d109      	bne.n	8010166 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	f103 0214 	add.w	r2, r3, #20
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	0c1b      	lsrs	r3, r3, #16
 801015c:	b29b      	uxth	r3, r3
 801015e:	4619      	mov	r1, r3
 8010160:	4610      	mov	r0, r2
 8010162:	f7fe ffc8 	bl	800f0f6 <st_word>
	}
}
 8010166:	bf00      	nop
 8010168:	3710      	adds	r7, #16
 801016a:	46bd      	mov	sp, r7
 801016c:	bd80      	pop	{r7, pc}

0801016e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801016e:	b580      	push	{r7, lr}
 8010170:	b086      	sub	sp, #24
 8010172:	af00      	add	r7, sp, #0
 8010174:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801017c:	2100      	movs	r1, #0
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f7ff fe10 	bl	800fda4 <dir_sdi>
 8010184:	4603      	mov	r3, r0
 8010186:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010188:	7dfb      	ldrb	r3, [r7, #23]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d001      	beq.n	8010192 <dir_find+0x24>
 801018e:	7dfb      	ldrb	r3, [r7, #23]
 8010190:	e03e      	b.n	8010210 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	69db      	ldr	r3, [r3, #28]
 8010196:	4619      	mov	r1, r3
 8010198:	6938      	ldr	r0, [r7, #16]
 801019a:	f7ff fa21 	bl	800f5e0 <move_window>
 801019e:	4603      	mov	r3, r0
 80101a0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80101a2:	7dfb      	ldrb	r3, [r7, #23]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d12f      	bne.n	8010208 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6a1b      	ldr	r3, [r3, #32]
 80101ac:	781b      	ldrb	r3, [r3, #0]
 80101ae:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80101b0:	7bfb      	ldrb	r3, [r7, #15]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d102      	bne.n	80101bc <dir_find+0x4e>
 80101b6:	2304      	movs	r3, #4
 80101b8:	75fb      	strb	r3, [r7, #23]
 80101ba:	e028      	b.n	801020e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	6a1b      	ldr	r3, [r3, #32]
 80101c0:	330b      	adds	r3, #11
 80101c2:	781b      	ldrb	r3, [r3, #0]
 80101c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80101c8:	b2da      	uxtb	r2, r3
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	6a1b      	ldr	r3, [r3, #32]
 80101d2:	330b      	adds	r3, #11
 80101d4:	781b      	ldrb	r3, [r3, #0]
 80101d6:	f003 0308 	and.w	r3, r3, #8
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d10a      	bne.n	80101f4 <dir_find+0x86>
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	6a18      	ldr	r0, [r3, #32]
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	3324      	adds	r3, #36	; 0x24
 80101e6:	220b      	movs	r2, #11
 80101e8:	4619      	mov	r1, r3
 80101ea:	f7ff f807 	bl	800f1fc <mem_cmp>
 80101ee:	4603      	mov	r3, r0
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d00b      	beq.n	801020c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80101f4:	2100      	movs	r1, #0
 80101f6:	6878      	ldr	r0, [r7, #4]
 80101f8:	f7ff fe5d 	bl	800feb6 <dir_next>
 80101fc:	4603      	mov	r3, r0
 80101fe:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010200:	7dfb      	ldrb	r3, [r7, #23]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d0c5      	beq.n	8010192 <dir_find+0x24>
 8010206:	e002      	b.n	801020e <dir_find+0xa0>
		if (res != FR_OK) break;
 8010208:	bf00      	nop
 801020a:	e000      	b.n	801020e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801020c:	bf00      	nop

	return res;
 801020e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010210:	4618      	mov	r0, r3
 8010212:	3718      	adds	r7, #24
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}

08010218 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b084      	sub	sp, #16
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010226:	2101      	movs	r1, #1
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f7ff ff1a 	bl	8010062 <dir_alloc>
 801022e:	4603      	mov	r3, r0
 8010230:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010232:	7bfb      	ldrb	r3, [r7, #15]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d11c      	bne.n	8010272 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	69db      	ldr	r3, [r3, #28]
 801023c:	4619      	mov	r1, r3
 801023e:	68b8      	ldr	r0, [r7, #8]
 8010240:	f7ff f9ce 	bl	800f5e0 <move_window>
 8010244:	4603      	mov	r3, r0
 8010246:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010248:	7bfb      	ldrb	r3, [r7, #15]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d111      	bne.n	8010272 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	6a1b      	ldr	r3, [r3, #32]
 8010252:	2220      	movs	r2, #32
 8010254:	2100      	movs	r1, #0
 8010256:	4618      	mov	r0, r3
 8010258:	f7fe ffb5 	bl	800f1c6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	6a18      	ldr	r0, [r3, #32]
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	3324      	adds	r3, #36	; 0x24
 8010264:	220b      	movs	r2, #11
 8010266:	4619      	mov	r1, r3
 8010268:	f7fe ff8c 	bl	800f184 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801026c:	68bb      	ldr	r3, [r7, #8]
 801026e:	2201      	movs	r2, #1
 8010270:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010272:	7bfb      	ldrb	r3, [r7, #15]
}
 8010274:	4618      	mov	r0, r3
 8010276:	3710      	adds	r7, #16
 8010278:	46bd      	mov	sp, r7
 801027a:	bd80      	pop	{r7, pc}

0801027c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801027c:	b580      	push	{r7, lr}
 801027e:	b086      	sub	sp, #24
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
 8010284:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8010286:	683b      	ldr	r3, [r7, #0]
 8010288:	2200      	movs	r2, #0
 801028a:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	69db      	ldr	r3, [r3, #28]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d04e      	beq.n	8010332 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8010294:	2300      	movs	r3, #0
 8010296:	613b      	str	r3, [r7, #16]
 8010298:	693b      	ldr	r3, [r7, #16]
 801029a:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 801029c:	e021      	b.n	80102e2 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	6a1a      	ldr	r2, [r3, #32]
 80102a2:	697b      	ldr	r3, [r7, #20]
 80102a4:	1c59      	adds	r1, r3, #1
 80102a6:	6179      	str	r1, [r7, #20]
 80102a8:	4413      	add	r3, r2
 80102aa:	781b      	ldrb	r3, [r3, #0]
 80102ac:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80102ae:	7bfb      	ldrb	r3, [r7, #15]
 80102b0:	2b20      	cmp	r3, #32
 80102b2:	d100      	bne.n	80102b6 <get_fileinfo+0x3a>
 80102b4:	e015      	b.n	80102e2 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80102b6:	7bfb      	ldrb	r3, [r7, #15]
 80102b8:	2b05      	cmp	r3, #5
 80102ba:	d101      	bne.n	80102c0 <get_fileinfo+0x44>
 80102bc:	23e5      	movs	r3, #229	; 0xe5
 80102be:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80102c0:	697b      	ldr	r3, [r7, #20]
 80102c2:	2b09      	cmp	r3, #9
 80102c4:	d106      	bne.n	80102d4 <get_fileinfo+0x58>
 80102c6:	693b      	ldr	r3, [r7, #16]
 80102c8:	1c5a      	adds	r2, r3, #1
 80102ca:	613a      	str	r2, [r7, #16]
 80102cc:	683a      	ldr	r2, [r7, #0]
 80102ce:	4413      	add	r3, r2
 80102d0:	222e      	movs	r2, #46	; 0x2e
 80102d2:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80102d4:	693b      	ldr	r3, [r7, #16]
 80102d6:	1c5a      	adds	r2, r3, #1
 80102d8:	613a      	str	r2, [r7, #16]
 80102da:	683a      	ldr	r2, [r7, #0]
 80102dc:	4413      	add	r3, r2
 80102de:	7bfa      	ldrb	r2, [r7, #15]
 80102e0:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	2b0a      	cmp	r3, #10
 80102e6:	d9da      	bls.n	801029e <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80102e8:	683a      	ldr	r2, [r7, #0]
 80102ea:	693b      	ldr	r3, [r7, #16]
 80102ec:	4413      	add	r3, r2
 80102ee:	3309      	adds	r3, #9
 80102f0:	2200      	movs	r2, #0
 80102f2:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	6a1b      	ldr	r3, [r3, #32]
 80102f8:	7ada      	ldrb	r2, [r3, #11]
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	6a1b      	ldr	r3, [r3, #32]
 8010302:	331c      	adds	r3, #28
 8010304:	4618      	mov	r0, r3
 8010306:	f7fe fed3 	bl	800f0b0 <ld_dword>
 801030a:	4602      	mov	r2, r0
 801030c:	683b      	ldr	r3, [r7, #0]
 801030e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	6a1b      	ldr	r3, [r3, #32]
 8010314:	3316      	adds	r3, #22
 8010316:	4618      	mov	r0, r3
 8010318:	f7fe feca 	bl	800f0b0 <ld_dword>
 801031c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801031e:	68bb      	ldr	r3, [r7, #8]
 8010320:	b29a      	uxth	r2, r3
 8010322:	683b      	ldr	r3, [r7, #0]
 8010324:	80da      	strh	r2, [r3, #6]
 8010326:	68bb      	ldr	r3, [r7, #8]
 8010328:	0c1b      	lsrs	r3, r3, #16
 801032a:	b29a      	uxth	r2, r3
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	809a      	strh	r2, [r3, #4]
 8010330:	e000      	b.n	8010334 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010332:	bf00      	nop
}
 8010334:	3718      	adds	r7, #24
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}
	...

0801033c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b088      	sub	sp, #32
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
 8010344:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	60fb      	str	r3, [r7, #12]
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	3324      	adds	r3, #36	; 0x24
 8010350:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010352:	220b      	movs	r2, #11
 8010354:	2120      	movs	r1, #32
 8010356:	68b8      	ldr	r0, [r7, #8]
 8010358:	f7fe ff35 	bl	800f1c6 <mem_set>
	si = i = 0; ni = 8;
 801035c:	2300      	movs	r3, #0
 801035e:	613b      	str	r3, [r7, #16]
 8010360:	693b      	ldr	r3, [r7, #16]
 8010362:	61fb      	str	r3, [r7, #28]
 8010364:	2308      	movs	r3, #8
 8010366:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010368:	69fb      	ldr	r3, [r7, #28]
 801036a:	1c5a      	adds	r2, r3, #1
 801036c:	61fa      	str	r2, [r7, #28]
 801036e:	68fa      	ldr	r2, [r7, #12]
 8010370:	4413      	add	r3, r2
 8010372:	781b      	ldrb	r3, [r3, #0]
 8010374:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010376:	7efb      	ldrb	r3, [r7, #27]
 8010378:	2b20      	cmp	r3, #32
 801037a:	d94e      	bls.n	801041a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801037c:	7efb      	ldrb	r3, [r7, #27]
 801037e:	2b2f      	cmp	r3, #47	; 0x2f
 8010380:	d006      	beq.n	8010390 <create_name+0x54>
 8010382:	7efb      	ldrb	r3, [r7, #27]
 8010384:	2b5c      	cmp	r3, #92	; 0x5c
 8010386:	d110      	bne.n	80103aa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010388:	e002      	b.n	8010390 <create_name+0x54>
 801038a:	69fb      	ldr	r3, [r7, #28]
 801038c:	3301      	adds	r3, #1
 801038e:	61fb      	str	r3, [r7, #28]
 8010390:	68fa      	ldr	r2, [r7, #12]
 8010392:	69fb      	ldr	r3, [r7, #28]
 8010394:	4413      	add	r3, r2
 8010396:	781b      	ldrb	r3, [r3, #0]
 8010398:	2b2f      	cmp	r3, #47	; 0x2f
 801039a:	d0f6      	beq.n	801038a <create_name+0x4e>
 801039c:	68fa      	ldr	r2, [r7, #12]
 801039e:	69fb      	ldr	r3, [r7, #28]
 80103a0:	4413      	add	r3, r2
 80103a2:	781b      	ldrb	r3, [r3, #0]
 80103a4:	2b5c      	cmp	r3, #92	; 0x5c
 80103a6:	d0f0      	beq.n	801038a <create_name+0x4e>
			break;
 80103a8:	e038      	b.n	801041c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80103aa:	7efb      	ldrb	r3, [r7, #27]
 80103ac:	2b2e      	cmp	r3, #46	; 0x2e
 80103ae:	d003      	beq.n	80103b8 <create_name+0x7c>
 80103b0:	693a      	ldr	r2, [r7, #16]
 80103b2:	697b      	ldr	r3, [r7, #20]
 80103b4:	429a      	cmp	r2, r3
 80103b6:	d30c      	bcc.n	80103d2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	2b0b      	cmp	r3, #11
 80103bc:	d002      	beq.n	80103c4 <create_name+0x88>
 80103be:	7efb      	ldrb	r3, [r7, #27]
 80103c0:	2b2e      	cmp	r3, #46	; 0x2e
 80103c2:	d001      	beq.n	80103c8 <create_name+0x8c>
 80103c4:	2306      	movs	r3, #6
 80103c6:	e044      	b.n	8010452 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80103c8:	2308      	movs	r3, #8
 80103ca:	613b      	str	r3, [r7, #16]
 80103cc:	230b      	movs	r3, #11
 80103ce:	617b      	str	r3, [r7, #20]
			continue;
 80103d0:	e022      	b.n	8010418 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80103d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	da04      	bge.n	80103e4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80103da:	7efb      	ldrb	r3, [r7, #27]
 80103dc:	3b80      	subs	r3, #128	; 0x80
 80103de:	4a1f      	ldr	r2, [pc, #124]	; (801045c <create_name+0x120>)
 80103e0:	5cd3      	ldrb	r3, [r2, r3]
 80103e2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80103e4:	7efb      	ldrb	r3, [r7, #27]
 80103e6:	4619      	mov	r1, r3
 80103e8:	481d      	ldr	r0, [pc, #116]	; (8010460 <create_name+0x124>)
 80103ea:	f7fe ff2e 	bl	800f24a <chk_chr>
 80103ee:	4603      	mov	r3, r0
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d001      	beq.n	80103f8 <create_name+0xbc>
 80103f4:	2306      	movs	r3, #6
 80103f6:	e02c      	b.n	8010452 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80103f8:	7efb      	ldrb	r3, [r7, #27]
 80103fa:	2b60      	cmp	r3, #96	; 0x60
 80103fc:	d905      	bls.n	801040a <create_name+0xce>
 80103fe:	7efb      	ldrb	r3, [r7, #27]
 8010400:	2b7a      	cmp	r3, #122	; 0x7a
 8010402:	d802      	bhi.n	801040a <create_name+0xce>
 8010404:	7efb      	ldrb	r3, [r7, #27]
 8010406:	3b20      	subs	r3, #32
 8010408:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801040a:	693b      	ldr	r3, [r7, #16]
 801040c:	1c5a      	adds	r2, r3, #1
 801040e:	613a      	str	r2, [r7, #16]
 8010410:	68ba      	ldr	r2, [r7, #8]
 8010412:	4413      	add	r3, r2
 8010414:	7efa      	ldrb	r2, [r7, #27]
 8010416:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010418:	e7a6      	b.n	8010368 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801041a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801041c:	68fa      	ldr	r2, [r7, #12]
 801041e:	69fb      	ldr	r3, [r7, #28]
 8010420:	441a      	add	r2, r3
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8010426:	693b      	ldr	r3, [r7, #16]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d101      	bne.n	8010430 <create_name+0xf4>
 801042c:	2306      	movs	r3, #6
 801042e:	e010      	b.n	8010452 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	781b      	ldrb	r3, [r3, #0]
 8010434:	2be5      	cmp	r3, #229	; 0xe5
 8010436:	d102      	bne.n	801043e <create_name+0x102>
 8010438:	68bb      	ldr	r3, [r7, #8]
 801043a:	2205      	movs	r2, #5
 801043c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801043e:	7efb      	ldrb	r3, [r7, #27]
 8010440:	2b20      	cmp	r3, #32
 8010442:	d801      	bhi.n	8010448 <create_name+0x10c>
 8010444:	2204      	movs	r2, #4
 8010446:	e000      	b.n	801044a <create_name+0x10e>
 8010448:	2200      	movs	r2, #0
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	330b      	adds	r3, #11
 801044e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010450:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8010452:	4618      	mov	r0, r3
 8010454:	3720      	adds	r7, #32
 8010456:	46bd      	mov	sp, r7
 8010458:	bd80      	pop	{r7, pc}
 801045a:	bf00      	nop
 801045c:	08016ab8 	.word	0x08016ab8
 8010460:	08016a40 	.word	0x08016a40

08010464 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b086      	sub	sp, #24
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
 801046c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010472:	693b      	ldr	r3, [r7, #16]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010478:	e002      	b.n	8010480 <follow_path+0x1c>
 801047a:	683b      	ldr	r3, [r7, #0]
 801047c:	3301      	adds	r3, #1
 801047e:	603b      	str	r3, [r7, #0]
 8010480:	683b      	ldr	r3, [r7, #0]
 8010482:	781b      	ldrb	r3, [r3, #0]
 8010484:	2b2f      	cmp	r3, #47	; 0x2f
 8010486:	d0f8      	beq.n	801047a <follow_path+0x16>
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	2b5c      	cmp	r3, #92	; 0x5c
 801048e:	d0f4      	beq.n	801047a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010490:	693b      	ldr	r3, [r7, #16]
 8010492:	2200      	movs	r2, #0
 8010494:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	781b      	ldrb	r3, [r3, #0]
 801049a:	2b1f      	cmp	r3, #31
 801049c:	d80a      	bhi.n	80104b4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	2280      	movs	r2, #128	; 0x80
 80104a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80104a6:	2100      	movs	r1, #0
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f7ff fc7b 	bl	800fda4 <dir_sdi>
 80104ae:	4603      	mov	r3, r0
 80104b0:	75fb      	strb	r3, [r7, #23]
 80104b2:	e048      	b.n	8010546 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80104b4:	463b      	mov	r3, r7
 80104b6:	4619      	mov	r1, r3
 80104b8:	6878      	ldr	r0, [r7, #4]
 80104ba:	f7ff ff3f 	bl	801033c <create_name>
 80104be:	4603      	mov	r3, r0
 80104c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80104c2:	7dfb      	ldrb	r3, [r7, #23]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d139      	bne.n	801053c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80104c8:	6878      	ldr	r0, [r7, #4]
 80104ca:	f7ff fe50 	bl	801016e <dir_find>
 80104ce:	4603      	mov	r3, r0
 80104d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80104d8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80104da:	7dfb      	ldrb	r3, [r7, #23]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d00a      	beq.n	80104f6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80104e0:	7dfb      	ldrb	r3, [r7, #23]
 80104e2:	2b04      	cmp	r3, #4
 80104e4:	d12c      	bne.n	8010540 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80104e6:	7afb      	ldrb	r3, [r7, #11]
 80104e8:	f003 0304 	and.w	r3, r3, #4
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d127      	bne.n	8010540 <follow_path+0xdc>
 80104f0:	2305      	movs	r3, #5
 80104f2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80104f4:	e024      	b.n	8010540 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80104f6:	7afb      	ldrb	r3, [r7, #11]
 80104f8:	f003 0304 	and.w	r3, r3, #4
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d121      	bne.n	8010544 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	799b      	ldrb	r3, [r3, #6]
 8010504:	f003 0310 	and.w	r3, r3, #16
 8010508:	2b00      	cmp	r3, #0
 801050a:	d102      	bne.n	8010512 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801050c:	2305      	movs	r3, #5
 801050e:	75fb      	strb	r3, [r7, #23]
 8010510:	e019      	b.n	8010546 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	695b      	ldr	r3, [r3, #20]
 801051c:	68fa      	ldr	r2, [r7, #12]
 801051e:	8992      	ldrh	r2, [r2, #12]
 8010520:	fbb3 f0f2 	udiv	r0, r3, r2
 8010524:	fb00 f202 	mul.w	r2, r0, r2
 8010528:	1a9b      	subs	r3, r3, r2
 801052a:	440b      	add	r3, r1
 801052c:	4619      	mov	r1, r3
 801052e:	68f8      	ldr	r0, [r7, #12]
 8010530:	f7ff fdde 	bl	80100f0 <ld_clust>
 8010534:	4602      	mov	r2, r0
 8010536:	693b      	ldr	r3, [r7, #16]
 8010538:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801053a:	e7bb      	b.n	80104b4 <follow_path+0x50>
			if (res != FR_OK) break;
 801053c:	bf00      	nop
 801053e:	e002      	b.n	8010546 <follow_path+0xe2>
				break;
 8010540:	bf00      	nop
 8010542:	e000      	b.n	8010546 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010544:	bf00      	nop
			}
		}
	}

	return res;
 8010546:	7dfb      	ldrb	r3, [r7, #23]
}
 8010548:	4618      	mov	r0, r3
 801054a:	3718      	adds	r7, #24
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}

08010550 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010550:	b480      	push	{r7}
 8010552:	b087      	sub	sp, #28
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010558:	f04f 33ff 	mov.w	r3, #4294967295
 801055c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d031      	beq.n	80105ca <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	617b      	str	r3, [r7, #20]
 801056c:	e002      	b.n	8010574 <get_ldnumber+0x24>
 801056e:	697b      	ldr	r3, [r7, #20]
 8010570:	3301      	adds	r3, #1
 8010572:	617b      	str	r3, [r7, #20]
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	781b      	ldrb	r3, [r3, #0]
 8010578:	2b20      	cmp	r3, #32
 801057a:	d903      	bls.n	8010584 <get_ldnumber+0x34>
 801057c:	697b      	ldr	r3, [r7, #20]
 801057e:	781b      	ldrb	r3, [r3, #0]
 8010580:	2b3a      	cmp	r3, #58	; 0x3a
 8010582:	d1f4      	bne.n	801056e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010584:	697b      	ldr	r3, [r7, #20]
 8010586:	781b      	ldrb	r3, [r3, #0]
 8010588:	2b3a      	cmp	r3, #58	; 0x3a
 801058a:	d11c      	bne.n	80105c6 <get_ldnumber+0x76>
			tp = *path;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	1c5a      	adds	r2, r3, #1
 8010596:	60fa      	str	r2, [r7, #12]
 8010598:	781b      	ldrb	r3, [r3, #0]
 801059a:	3b30      	subs	r3, #48	; 0x30
 801059c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801059e:	68bb      	ldr	r3, [r7, #8]
 80105a0:	2b09      	cmp	r3, #9
 80105a2:	d80e      	bhi.n	80105c2 <get_ldnumber+0x72>
 80105a4:	68fa      	ldr	r2, [r7, #12]
 80105a6:	697b      	ldr	r3, [r7, #20]
 80105a8:	429a      	cmp	r2, r3
 80105aa:	d10a      	bne.n	80105c2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d107      	bne.n	80105c2 <get_ldnumber+0x72>
					vol = (int)i;
 80105b2:	68bb      	ldr	r3, [r7, #8]
 80105b4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80105b6:	697b      	ldr	r3, [r7, #20]
 80105b8:	3301      	adds	r3, #1
 80105ba:	617b      	str	r3, [r7, #20]
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	697a      	ldr	r2, [r7, #20]
 80105c0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80105c2:	693b      	ldr	r3, [r7, #16]
 80105c4:	e002      	b.n	80105cc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80105c6:	2300      	movs	r3, #0
 80105c8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80105ca:	693b      	ldr	r3, [r7, #16]
}
 80105cc:	4618      	mov	r0, r3
 80105ce:	371c      	adds	r7, #28
 80105d0:	46bd      	mov	sp, r7
 80105d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d6:	4770      	bx	lr

080105d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b082      	sub	sp, #8
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
 80105e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	2200      	movs	r2, #0
 80105e6:	70da      	strb	r2, [r3, #3]
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f04f 32ff 	mov.w	r2, #4294967295
 80105ee:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80105f0:	6839      	ldr	r1, [r7, #0]
 80105f2:	6878      	ldr	r0, [r7, #4]
 80105f4:	f7fe fff4 	bl	800f5e0 <move_window>
 80105f8:	4603      	mov	r3, r0
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d001      	beq.n	8010602 <check_fs+0x2a>
 80105fe:	2304      	movs	r3, #4
 8010600:	e038      	b.n	8010674 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	3334      	adds	r3, #52	; 0x34
 8010606:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801060a:	4618      	mov	r0, r3
 801060c:	f7fe fd38 	bl	800f080 <ld_word>
 8010610:	4603      	mov	r3, r0
 8010612:	461a      	mov	r2, r3
 8010614:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010618:	429a      	cmp	r2, r3
 801061a:	d001      	beq.n	8010620 <check_fs+0x48>
 801061c:	2303      	movs	r3, #3
 801061e:	e029      	b.n	8010674 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010626:	2be9      	cmp	r3, #233	; 0xe9
 8010628:	d009      	beq.n	801063e <check_fs+0x66>
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010630:	2beb      	cmp	r3, #235	; 0xeb
 8010632:	d11e      	bne.n	8010672 <check_fs+0x9a>
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801063a:	2b90      	cmp	r3, #144	; 0x90
 801063c:	d119      	bne.n	8010672 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	3334      	adds	r3, #52	; 0x34
 8010642:	3336      	adds	r3, #54	; 0x36
 8010644:	4618      	mov	r0, r3
 8010646:	f7fe fd33 	bl	800f0b0 <ld_dword>
 801064a:	4603      	mov	r3, r0
 801064c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010650:	4a0a      	ldr	r2, [pc, #40]	; (801067c <check_fs+0xa4>)
 8010652:	4293      	cmp	r3, r2
 8010654:	d101      	bne.n	801065a <check_fs+0x82>
 8010656:	2300      	movs	r3, #0
 8010658:	e00c      	b.n	8010674 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	3334      	adds	r3, #52	; 0x34
 801065e:	3352      	adds	r3, #82	; 0x52
 8010660:	4618      	mov	r0, r3
 8010662:	f7fe fd25 	bl	800f0b0 <ld_dword>
 8010666:	4603      	mov	r3, r0
 8010668:	4a05      	ldr	r2, [pc, #20]	; (8010680 <check_fs+0xa8>)
 801066a:	4293      	cmp	r3, r2
 801066c:	d101      	bne.n	8010672 <check_fs+0x9a>
 801066e:	2300      	movs	r3, #0
 8010670:	e000      	b.n	8010674 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010672:	2302      	movs	r3, #2
}
 8010674:	4618      	mov	r0, r3
 8010676:	3708      	adds	r7, #8
 8010678:	46bd      	mov	sp, r7
 801067a:	bd80      	pop	{r7, pc}
 801067c:	00544146 	.word	0x00544146
 8010680:	33544146 	.word	0x33544146

08010684 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b096      	sub	sp, #88	; 0x58
 8010688:	af00      	add	r7, sp, #0
 801068a:	60f8      	str	r0, [r7, #12]
 801068c:	60b9      	str	r1, [r7, #8]
 801068e:	4613      	mov	r3, r2
 8010690:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010692:	68bb      	ldr	r3, [r7, #8]
 8010694:	2200      	movs	r2, #0
 8010696:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010698:	68f8      	ldr	r0, [r7, #12]
 801069a:	f7ff ff59 	bl	8010550 <get_ldnumber>
 801069e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80106a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	da01      	bge.n	80106aa <find_volume+0x26>
 80106a6:	230b      	movs	r3, #11
 80106a8:	e262      	b.n	8010b70 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80106aa:	4a9f      	ldr	r2, [pc, #636]	; (8010928 <find_volume+0x2a4>)
 80106ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80106b2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80106b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d101      	bne.n	80106be <find_volume+0x3a>
 80106ba:	230c      	movs	r3, #12
 80106bc:	e258      	b.n	8010b70 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80106be:	68bb      	ldr	r3, [r7, #8]
 80106c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80106c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80106c4:	79fb      	ldrb	r3, [r7, #7]
 80106c6:	f023 0301 	bic.w	r3, r3, #1
 80106ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80106cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ce:	781b      	ldrb	r3, [r3, #0]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d01a      	beq.n	801070a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80106d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d6:	785b      	ldrb	r3, [r3, #1]
 80106d8:	4618      	mov	r0, r3
 80106da:	f7fe fc33 	bl	800ef44 <disk_status>
 80106de:	4603      	mov	r3, r0
 80106e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80106e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80106e8:	f003 0301 	and.w	r3, r3, #1
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d10c      	bne.n	801070a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80106f0:	79fb      	ldrb	r3, [r7, #7]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d007      	beq.n	8010706 <find_volume+0x82>
 80106f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80106fa:	f003 0304 	and.w	r3, r3, #4
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d001      	beq.n	8010706 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8010702:	230a      	movs	r3, #10
 8010704:	e234      	b.n	8010b70 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8010706:	2300      	movs	r3, #0
 8010708:	e232      	b.n	8010b70 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801070a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801070c:	2200      	movs	r2, #0
 801070e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010712:	b2da      	uxtb	r2, r3
 8010714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010716:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801071a:	785b      	ldrb	r3, [r3, #1]
 801071c:	4618      	mov	r0, r3
 801071e:	f7fe fc2b 	bl	800ef78 <disk_initialize>
 8010722:	4603      	mov	r3, r0
 8010724:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010728:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801072c:	f003 0301 	and.w	r3, r3, #1
 8010730:	2b00      	cmp	r3, #0
 8010732:	d001      	beq.n	8010738 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010734:	2303      	movs	r3, #3
 8010736:	e21b      	b.n	8010b70 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010738:	79fb      	ldrb	r3, [r7, #7]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d007      	beq.n	801074e <find_volume+0xca>
 801073e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010742:	f003 0304 	and.w	r3, r3, #4
 8010746:	2b00      	cmp	r3, #0
 8010748:	d001      	beq.n	801074e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801074a:	230a      	movs	r3, #10
 801074c:	e210      	b.n	8010b70 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801074e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010750:	7858      	ldrb	r0, [r3, #1]
 8010752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010754:	330c      	adds	r3, #12
 8010756:	461a      	mov	r2, r3
 8010758:	2102      	movs	r1, #2
 801075a:	f7fe fc73 	bl	800f044 <disk_ioctl>
 801075e:	4603      	mov	r3, r0
 8010760:	2b00      	cmp	r3, #0
 8010762:	d001      	beq.n	8010768 <find_volume+0xe4>
 8010764:	2301      	movs	r3, #1
 8010766:	e203      	b.n	8010b70 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8010768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801076a:	899b      	ldrh	r3, [r3, #12]
 801076c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010770:	d80d      	bhi.n	801078e <find_volume+0x10a>
 8010772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010774:	899b      	ldrh	r3, [r3, #12]
 8010776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801077a:	d308      	bcc.n	801078e <find_volume+0x10a>
 801077c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801077e:	899b      	ldrh	r3, [r3, #12]
 8010780:	461a      	mov	r2, r3
 8010782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010784:	899b      	ldrh	r3, [r3, #12]
 8010786:	3b01      	subs	r3, #1
 8010788:	4013      	ands	r3, r2
 801078a:	2b00      	cmp	r3, #0
 801078c:	d001      	beq.n	8010792 <find_volume+0x10e>
 801078e:	2301      	movs	r3, #1
 8010790:	e1ee      	b.n	8010b70 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010792:	2300      	movs	r3, #0
 8010794:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010796:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010798:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801079a:	f7ff ff1d 	bl	80105d8 <check_fs>
 801079e:	4603      	mov	r3, r0
 80107a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80107a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80107a8:	2b02      	cmp	r3, #2
 80107aa:	d149      	bne.n	8010840 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80107ac:	2300      	movs	r3, #0
 80107ae:	643b      	str	r3, [r7, #64]	; 0x40
 80107b0:	e01e      	b.n	80107f0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80107b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107b4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80107b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107ba:	011b      	lsls	r3, r3, #4
 80107bc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80107c0:	4413      	add	r3, r2
 80107c2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80107c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c6:	3304      	adds	r3, #4
 80107c8:	781b      	ldrb	r3, [r3, #0]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d006      	beq.n	80107dc <find_volume+0x158>
 80107ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107d0:	3308      	adds	r3, #8
 80107d2:	4618      	mov	r0, r3
 80107d4:	f7fe fc6c 	bl	800f0b0 <ld_dword>
 80107d8:	4602      	mov	r2, r0
 80107da:	e000      	b.n	80107de <find_volume+0x15a>
 80107dc:	2200      	movs	r2, #0
 80107de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107e0:	009b      	lsls	r3, r3, #2
 80107e2:	3358      	adds	r3, #88	; 0x58
 80107e4:	443b      	add	r3, r7
 80107e6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80107ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107ec:	3301      	adds	r3, #1
 80107ee:	643b      	str	r3, [r7, #64]	; 0x40
 80107f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107f2:	2b03      	cmp	r3, #3
 80107f4:	d9dd      	bls.n	80107b2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80107f6:	2300      	movs	r3, #0
 80107f8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80107fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d002      	beq.n	8010806 <find_volume+0x182>
 8010800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010802:	3b01      	subs	r3, #1
 8010804:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010808:	009b      	lsls	r3, r3, #2
 801080a:	3358      	adds	r3, #88	; 0x58
 801080c:	443b      	add	r3, r7
 801080e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010812:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010816:	2b00      	cmp	r3, #0
 8010818:	d005      	beq.n	8010826 <find_volume+0x1a2>
 801081a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801081c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801081e:	f7ff fedb 	bl	80105d8 <check_fs>
 8010822:	4603      	mov	r3, r0
 8010824:	e000      	b.n	8010828 <find_volume+0x1a4>
 8010826:	2303      	movs	r3, #3
 8010828:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801082c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010830:	2b01      	cmp	r3, #1
 8010832:	d905      	bls.n	8010840 <find_volume+0x1bc>
 8010834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010836:	3301      	adds	r3, #1
 8010838:	643b      	str	r3, [r7, #64]	; 0x40
 801083a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801083c:	2b03      	cmp	r3, #3
 801083e:	d9e2      	bls.n	8010806 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010840:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010844:	2b04      	cmp	r3, #4
 8010846:	d101      	bne.n	801084c <find_volume+0x1c8>
 8010848:	2301      	movs	r3, #1
 801084a:	e191      	b.n	8010b70 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801084c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010850:	2b01      	cmp	r3, #1
 8010852:	d901      	bls.n	8010858 <find_volume+0x1d4>
 8010854:	230d      	movs	r3, #13
 8010856:	e18b      	b.n	8010b70 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801085a:	3334      	adds	r3, #52	; 0x34
 801085c:	330b      	adds	r3, #11
 801085e:	4618      	mov	r0, r3
 8010860:	f7fe fc0e 	bl	800f080 <ld_word>
 8010864:	4603      	mov	r3, r0
 8010866:	461a      	mov	r2, r3
 8010868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801086a:	899b      	ldrh	r3, [r3, #12]
 801086c:	429a      	cmp	r2, r3
 801086e:	d001      	beq.n	8010874 <find_volume+0x1f0>
 8010870:	230d      	movs	r3, #13
 8010872:	e17d      	b.n	8010b70 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010876:	3334      	adds	r3, #52	; 0x34
 8010878:	3316      	adds	r3, #22
 801087a:	4618      	mov	r0, r3
 801087c:	f7fe fc00 	bl	800f080 <ld_word>
 8010880:	4603      	mov	r3, r0
 8010882:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010886:	2b00      	cmp	r3, #0
 8010888:	d106      	bne.n	8010898 <find_volume+0x214>
 801088a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801088c:	3334      	adds	r3, #52	; 0x34
 801088e:	3324      	adds	r3, #36	; 0x24
 8010890:	4618      	mov	r0, r3
 8010892:	f7fe fc0d 	bl	800f0b0 <ld_dword>
 8010896:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801089a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801089c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801089e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108a0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80108a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108a6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80108a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108aa:	789b      	ldrb	r3, [r3, #2]
 80108ac:	2b01      	cmp	r3, #1
 80108ae:	d005      	beq.n	80108bc <find_volume+0x238>
 80108b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108b2:	789b      	ldrb	r3, [r3, #2]
 80108b4:	2b02      	cmp	r3, #2
 80108b6:	d001      	beq.n	80108bc <find_volume+0x238>
 80108b8:	230d      	movs	r3, #13
 80108ba:	e159      	b.n	8010b70 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80108bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108be:	789b      	ldrb	r3, [r3, #2]
 80108c0:	461a      	mov	r2, r3
 80108c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108c4:	fb02 f303 	mul.w	r3, r2, r3
 80108c8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80108ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80108d0:	b29a      	uxth	r2, r3
 80108d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108d4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80108d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108d8:	895b      	ldrh	r3, [r3, #10]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d008      	beq.n	80108f0 <find_volume+0x26c>
 80108de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108e0:	895b      	ldrh	r3, [r3, #10]
 80108e2:	461a      	mov	r2, r3
 80108e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108e6:	895b      	ldrh	r3, [r3, #10]
 80108e8:	3b01      	subs	r3, #1
 80108ea:	4013      	ands	r3, r2
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d001      	beq.n	80108f4 <find_volume+0x270>
 80108f0:	230d      	movs	r3, #13
 80108f2:	e13d      	b.n	8010b70 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80108f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108f6:	3334      	adds	r3, #52	; 0x34
 80108f8:	3311      	adds	r3, #17
 80108fa:	4618      	mov	r0, r3
 80108fc:	f7fe fbc0 	bl	800f080 <ld_word>
 8010900:	4603      	mov	r3, r0
 8010902:	461a      	mov	r2, r3
 8010904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010906:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801090a:	891b      	ldrh	r3, [r3, #8]
 801090c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801090e:	8992      	ldrh	r2, [r2, #12]
 8010910:	0952      	lsrs	r2, r2, #5
 8010912:	b292      	uxth	r2, r2
 8010914:	fbb3 f1f2 	udiv	r1, r3, r2
 8010918:	fb01 f202 	mul.w	r2, r1, r2
 801091c:	1a9b      	subs	r3, r3, r2
 801091e:	b29b      	uxth	r3, r3
 8010920:	2b00      	cmp	r3, #0
 8010922:	d003      	beq.n	801092c <find_volume+0x2a8>
 8010924:	230d      	movs	r3, #13
 8010926:	e123      	b.n	8010b70 <find_volume+0x4ec>
 8010928:	200057d4 	.word	0x200057d4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801092c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801092e:	3334      	adds	r3, #52	; 0x34
 8010930:	3313      	adds	r3, #19
 8010932:	4618      	mov	r0, r3
 8010934:	f7fe fba4 	bl	800f080 <ld_word>
 8010938:	4603      	mov	r3, r0
 801093a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801093c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801093e:	2b00      	cmp	r3, #0
 8010940:	d106      	bne.n	8010950 <find_volume+0x2cc>
 8010942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010944:	3334      	adds	r3, #52	; 0x34
 8010946:	3320      	adds	r3, #32
 8010948:	4618      	mov	r0, r3
 801094a:	f7fe fbb1 	bl	800f0b0 <ld_dword>
 801094e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010952:	3334      	adds	r3, #52	; 0x34
 8010954:	330e      	adds	r3, #14
 8010956:	4618      	mov	r0, r3
 8010958:	f7fe fb92 	bl	800f080 <ld_word>
 801095c:	4603      	mov	r3, r0
 801095e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010960:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010962:	2b00      	cmp	r3, #0
 8010964:	d101      	bne.n	801096a <find_volume+0x2e6>
 8010966:	230d      	movs	r3, #13
 8010968:	e102      	b.n	8010b70 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801096a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801096c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801096e:	4413      	add	r3, r2
 8010970:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010972:	8911      	ldrh	r1, [r2, #8]
 8010974:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010976:	8992      	ldrh	r2, [r2, #12]
 8010978:	0952      	lsrs	r2, r2, #5
 801097a:	b292      	uxth	r2, r2
 801097c:	fbb1 f2f2 	udiv	r2, r1, r2
 8010980:	b292      	uxth	r2, r2
 8010982:	4413      	add	r3, r2
 8010984:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010986:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801098a:	429a      	cmp	r2, r3
 801098c:	d201      	bcs.n	8010992 <find_volume+0x30e>
 801098e:	230d      	movs	r3, #13
 8010990:	e0ee      	b.n	8010b70 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010992:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010996:	1ad3      	subs	r3, r2, r3
 8010998:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801099a:	8952      	ldrh	r2, [r2, #10]
 801099c:	fbb3 f3f2 	udiv	r3, r3, r2
 80109a0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80109a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d101      	bne.n	80109ac <find_volume+0x328>
 80109a8:	230d      	movs	r3, #13
 80109aa:	e0e1      	b.n	8010b70 <find_volume+0x4ec>
		fmt = FS_FAT32;
 80109ac:	2303      	movs	r3, #3
 80109ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80109b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109b4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80109b8:	4293      	cmp	r3, r2
 80109ba:	d802      	bhi.n	80109c2 <find_volume+0x33e>
 80109bc:	2302      	movs	r3, #2
 80109be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80109c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80109c8:	4293      	cmp	r3, r2
 80109ca:	d802      	bhi.n	80109d2 <find_volume+0x34e>
 80109cc:	2301      	movs	r3, #1
 80109ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80109d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d4:	1c9a      	adds	r2, r3, #2
 80109d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109d8:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80109da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80109de:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80109e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80109e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109e4:	441a      	add	r2, r3
 80109e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109e8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80109ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80109ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109ee:	441a      	add	r2, r3
 80109f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109f2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80109f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80109f8:	2b03      	cmp	r3, #3
 80109fa:	d11e      	bne.n	8010a3a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80109fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109fe:	3334      	adds	r3, #52	; 0x34
 8010a00:	332a      	adds	r3, #42	; 0x2a
 8010a02:	4618      	mov	r0, r3
 8010a04:	f7fe fb3c 	bl	800f080 <ld_word>
 8010a08:	4603      	mov	r3, r0
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d001      	beq.n	8010a12 <find_volume+0x38e>
 8010a0e:	230d      	movs	r3, #13
 8010a10:	e0ae      	b.n	8010b70 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a14:	891b      	ldrh	r3, [r3, #8]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d001      	beq.n	8010a1e <find_volume+0x39a>
 8010a1a:	230d      	movs	r3, #13
 8010a1c:	e0a8      	b.n	8010b70 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a20:	3334      	adds	r3, #52	; 0x34
 8010a22:	332c      	adds	r3, #44	; 0x2c
 8010a24:	4618      	mov	r0, r3
 8010a26:	f7fe fb43 	bl	800f0b0 <ld_dword>
 8010a2a:	4602      	mov	r2, r0
 8010a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a2e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a32:	699b      	ldr	r3, [r3, #24]
 8010a34:	009b      	lsls	r3, r3, #2
 8010a36:	647b      	str	r3, [r7, #68]	; 0x44
 8010a38:	e01f      	b.n	8010a7a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a3c:	891b      	ldrh	r3, [r3, #8]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d101      	bne.n	8010a46 <find_volume+0x3c2>
 8010a42:	230d      	movs	r3, #13
 8010a44:	e094      	b.n	8010b70 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a4c:	441a      	add	r2, r3
 8010a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a50:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010a52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010a56:	2b02      	cmp	r3, #2
 8010a58:	d103      	bne.n	8010a62 <find_volume+0x3de>
 8010a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a5c:	699b      	ldr	r3, [r3, #24]
 8010a5e:	005b      	lsls	r3, r3, #1
 8010a60:	e00a      	b.n	8010a78 <find_volume+0x3f4>
 8010a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a64:	699a      	ldr	r2, [r3, #24]
 8010a66:	4613      	mov	r3, r2
 8010a68:	005b      	lsls	r3, r3, #1
 8010a6a:	4413      	add	r3, r2
 8010a6c:	085a      	lsrs	r2, r3, #1
 8010a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a70:	699b      	ldr	r3, [r3, #24]
 8010a72:	f003 0301 	and.w	r3, r3, #1
 8010a76:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010a78:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a7c:	69da      	ldr	r2, [r3, #28]
 8010a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a80:	899b      	ldrh	r3, [r3, #12]
 8010a82:	4619      	mov	r1, r3
 8010a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a86:	440b      	add	r3, r1
 8010a88:	3b01      	subs	r3, #1
 8010a8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010a8c:	8989      	ldrh	r1, [r1, #12]
 8010a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010a92:	429a      	cmp	r2, r3
 8010a94:	d201      	bcs.n	8010a9a <find_volume+0x416>
 8010a96:	230d      	movs	r3, #13
 8010a98:	e06a      	b.n	8010b70 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8010aa0:	615a      	str	r2, [r3, #20]
 8010aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aa4:	695a      	ldr	r2, [r3, #20]
 8010aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aa8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aac:	2280      	movs	r2, #128	; 0x80
 8010aae:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010ab0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010ab4:	2b03      	cmp	r3, #3
 8010ab6:	d149      	bne.n	8010b4c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aba:	3334      	adds	r3, #52	; 0x34
 8010abc:	3330      	adds	r3, #48	; 0x30
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f7fe fade 	bl	800f080 <ld_word>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	2b01      	cmp	r3, #1
 8010ac8:	d140      	bne.n	8010b4c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010acc:	3301      	adds	r3, #1
 8010ace:	4619      	mov	r1, r3
 8010ad0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010ad2:	f7fe fd85 	bl	800f5e0 <move_window>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d137      	bne.n	8010b4c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8010adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ade:	2200      	movs	r2, #0
 8010ae0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ae4:	3334      	adds	r3, #52	; 0x34
 8010ae6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010aea:	4618      	mov	r0, r3
 8010aec:	f7fe fac8 	bl	800f080 <ld_word>
 8010af0:	4603      	mov	r3, r0
 8010af2:	461a      	mov	r2, r3
 8010af4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010af8:	429a      	cmp	r2, r3
 8010afa:	d127      	bne.n	8010b4c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010afe:	3334      	adds	r3, #52	; 0x34
 8010b00:	4618      	mov	r0, r3
 8010b02:	f7fe fad5 	bl	800f0b0 <ld_dword>
 8010b06:	4603      	mov	r3, r0
 8010b08:	4a1b      	ldr	r2, [pc, #108]	; (8010b78 <find_volume+0x4f4>)
 8010b0a:	4293      	cmp	r3, r2
 8010b0c:	d11e      	bne.n	8010b4c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b10:	3334      	adds	r3, #52	; 0x34
 8010b12:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010b16:	4618      	mov	r0, r3
 8010b18:	f7fe faca 	bl	800f0b0 <ld_dword>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	4a17      	ldr	r2, [pc, #92]	; (8010b7c <find_volume+0x4f8>)
 8010b20:	4293      	cmp	r3, r2
 8010b22:	d113      	bne.n	8010b4c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b26:	3334      	adds	r3, #52	; 0x34
 8010b28:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f7fe fabf 	bl	800f0b0 <ld_dword>
 8010b32:	4602      	mov	r2, r0
 8010b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b36:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b3a:	3334      	adds	r3, #52	; 0x34
 8010b3c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010b40:	4618      	mov	r0, r3
 8010b42:	f7fe fab5 	bl	800f0b0 <ld_dword>
 8010b46:	4602      	mov	r2, r0
 8010b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b4a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b4e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010b52:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010b54:	4b0a      	ldr	r3, [pc, #40]	; (8010b80 <find_volume+0x4fc>)
 8010b56:	881b      	ldrh	r3, [r3, #0]
 8010b58:	3301      	adds	r3, #1
 8010b5a:	b29a      	uxth	r2, r3
 8010b5c:	4b08      	ldr	r3, [pc, #32]	; (8010b80 <find_volume+0x4fc>)
 8010b5e:	801a      	strh	r2, [r3, #0]
 8010b60:	4b07      	ldr	r3, [pc, #28]	; (8010b80 <find_volume+0x4fc>)
 8010b62:	881a      	ldrh	r2, [r3, #0]
 8010b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b66:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010b68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010b6a:	f7fe fcd1 	bl	800f510 <clear_lock>
#endif
	return FR_OK;
 8010b6e:	2300      	movs	r3, #0
}
 8010b70:	4618      	mov	r0, r3
 8010b72:	3758      	adds	r7, #88	; 0x58
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}
 8010b78:	41615252 	.word	0x41615252
 8010b7c:	61417272 	.word	0x61417272
 8010b80:	200057d8 	.word	0x200057d8

08010b84 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b084      	sub	sp, #16
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
 8010b8c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010b8e:	2309      	movs	r3, #9
 8010b90:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d01c      	beq.n	8010bd2 <validate+0x4e>
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d018      	beq.n	8010bd2 <validate+0x4e>
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	781b      	ldrb	r3, [r3, #0]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d013      	beq.n	8010bd2 <validate+0x4e>
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	889a      	ldrh	r2, [r3, #4]
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	88db      	ldrh	r3, [r3, #6]
 8010bb4:	429a      	cmp	r2, r3
 8010bb6:	d10c      	bne.n	8010bd2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	785b      	ldrb	r3, [r3, #1]
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	f7fe f9c0 	bl	800ef44 <disk_status>
 8010bc4:	4603      	mov	r3, r0
 8010bc6:	f003 0301 	and.w	r3, r3, #1
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d101      	bne.n	8010bd2 <validate+0x4e>
			res = FR_OK;
 8010bce:	2300      	movs	r3, #0
 8010bd0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010bd2:	7bfb      	ldrb	r3, [r7, #15]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d102      	bne.n	8010bde <validate+0x5a>
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	e000      	b.n	8010be0 <validate+0x5c>
 8010bde:	2300      	movs	r3, #0
 8010be0:	683a      	ldr	r2, [r7, #0]
 8010be2:	6013      	str	r3, [r2, #0]
	return res;
 8010be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010be6:	4618      	mov	r0, r3
 8010be8:	3710      	adds	r7, #16
 8010bea:	46bd      	mov	sp, r7
 8010bec:	bd80      	pop	{r7, pc}
	...

08010bf0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b088      	sub	sp, #32
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	60f8      	str	r0, [r7, #12]
 8010bf8:	60b9      	str	r1, [r7, #8]
 8010bfa:	4613      	mov	r3, r2
 8010bfc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010bfe:	68bb      	ldr	r3, [r7, #8]
 8010c00:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010c02:	f107 0310 	add.w	r3, r7, #16
 8010c06:	4618      	mov	r0, r3
 8010c08:	f7ff fca2 	bl	8010550 <get_ldnumber>
 8010c0c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010c0e:	69fb      	ldr	r3, [r7, #28]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	da01      	bge.n	8010c18 <f_mount+0x28>
 8010c14:	230b      	movs	r3, #11
 8010c16:	e02b      	b.n	8010c70 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010c18:	4a17      	ldr	r2, [pc, #92]	; (8010c78 <f_mount+0x88>)
 8010c1a:	69fb      	ldr	r3, [r7, #28]
 8010c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c20:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010c22:	69bb      	ldr	r3, [r7, #24]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d005      	beq.n	8010c34 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010c28:	69b8      	ldr	r0, [r7, #24]
 8010c2a:	f7fe fc71 	bl	800f510 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010c2e:	69bb      	ldr	r3, [r7, #24]
 8010c30:	2200      	movs	r2, #0
 8010c32:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d002      	beq.n	8010c40 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	2200      	movs	r2, #0
 8010c3e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010c40:	68fa      	ldr	r2, [r7, #12]
 8010c42:	490d      	ldr	r1, [pc, #52]	; (8010c78 <f_mount+0x88>)
 8010c44:	69fb      	ldr	r3, [r7, #28]
 8010c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d002      	beq.n	8010c56 <f_mount+0x66>
 8010c50:	79fb      	ldrb	r3, [r7, #7]
 8010c52:	2b01      	cmp	r3, #1
 8010c54:	d001      	beq.n	8010c5a <f_mount+0x6a>
 8010c56:	2300      	movs	r3, #0
 8010c58:	e00a      	b.n	8010c70 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010c5a:	f107 010c 	add.w	r1, r7, #12
 8010c5e:	f107 0308 	add.w	r3, r7, #8
 8010c62:	2200      	movs	r2, #0
 8010c64:	4618      	mov	r0, r3
 8010c66:	f7ff fd0d 	bl	8010684 <find_volume>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c70:	4618      	mov	r0, r3
 8010c72:	3720      	adds	r7, #32
 8010c74:	46bd      	mov	sp, r7
 8010c76:	bd80      	pop	{r7, pc}
 8010c78:	200057d4 	.word	0x200057d4

08010c7c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b098      	sub	sp, #96	; 0x60
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	60f8      	str	r0, [r7, #12]
 8010c84:	60b9      	str	r1, [r7, #8]
 8010c86:	4613      	mov	r3, r2
 8010c88:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d101      	bne.n	8010c94 <f_open+0x18>
 8010c90:	2309      	movs	r3, #9
 8010c92:	e1bb      	b.n	801100c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010c94:	79fb      	ldrb	r3, [r7, #7]
 8010c96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010c9a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010c9c:	79fa      	ldrb	r2, [r7, #7]
 8010c9e:	f107 0110 	add.w	r1, r7, #16
 8010ca2:	f107 0308 	add.w	r3, r7, #8
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	f7ff fcec 	bl	8010684 <find_volume>
 8010cac:	4603      	mov	r3, r0
 8010cae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8010cb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	f040 819f 	bne.w	8010ffa <f_open+0x37e>
		dj.obj.fs = fs;
 8010cbc:	693b      	ldr	r3, [r7, #16]
 8010cbe:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010cc0:	68ba      	ldr	r2, [r7, #8]
 8010cc2:	f107 0314 	add.w	r3, r7, #20
 8010cc6:	4611      	mov	r1, r2
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f7ff fbcb 	bl	8010464 <follow_path>
 8010cce:	4603      	mov	r3, r0
 8010cd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010cd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d11a      	bne.n	8010d12 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010cdc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010ce0:	b25b      	sxtb	r3, r3
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	da03      	bge.n	8010cee <f_open+0x72>
				res = FR_INVALID_NAME;
 8010ce6:	2306      	movs	r3, #6
 8010ce8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010cec:	e011      	b.n	8010d12 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010cee:	79fb      	ldrb	r3, [r7, #7]
 8010cf0:	f023 0301 	bic.w	r3, r3, #1
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	bf14      	ite	ne
 8010cf8:	2301      	movne	r3, #1
 8010cfa:	2300      	moveq	r3, #0
 8010cfc:	b2db      	uxtb	r3, r3
 8010cfe:	461a      	mov	r2, r3
 8010d00:	f107 0314 	add.w	r3, r7, #20
 8010d04:	4611      	mov	r1, r2
 8010d06:	4618      	mov	r0, r3
 8010d08:	f7fe faba 	bl	800f280 <chk_lock>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010d12:	79fb      	ldrb	r3, [r7, #7]
 8010d14:	f003 031c 	and.w	r3, r3, #28
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d07f      	beq.n	8010e1c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010d1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d017      	beq.n	8010d54 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010d24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010d28:	2b04      	cmp	r3, #4
 8010d2a:	d10e      	bne.n	8010d4a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010d2c:	f7fe fb04 	bl	800f338 <enq_lock>
 8010d30:	4603      	mov	r3, r0
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d006      	beq.n	8010d44 <f_open+0xc8>
 8010d36:	f107 0314 	add.w	r3, r7, #20
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f7ff fa6c 	bl	8010218 <dir_register>
 8010d40:	4603      	mov	r3, r0
 8010d42:	e000      	b.n	8010d46 <f_open+0xca>
 8010d44:	2312      	movs	r3, #18
 8010d46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010d4a:	79fb      	ldrb	r3, [r7, #7]
 8010d4c:	f043 0308 	orr.w	r3, r3, #8
 8010d50:	71fb      	strb	r3, [r7, #7]
 8010d52:	e010      	b.n	8010d76 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010d54:	7ebb      	ldrb	r3, [r7, #26]
 8010d56:	f003 0311 	and.w	r3, r3, #17
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d003      	beq.n	8010d66 <f_open+0xea>
					res = FR_DENIED;
 8010d5e:	2307      	movs	r3, #7
 8010d60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010d64:	e007      	b.n	8010d76 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010d66:	79fb      	ldrb	r3, [r7, #7]
 8010d68:	f003 0304 	and.w	r3, r3, #4
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d002      	beq.n	8010d76 <f_open+0xfa>
 8010d70:	2308      	movs	r3, #8
 8010d72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010d76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d168      	bne.n	8010e50 <f_open+0x1d4>
 8010d7e:	79fb      	ldrb	r3, [r7, #7]
 8010d80:	f003 0308 	and.w	r3, r3, #8
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d063      	beq.n	8010e50 <f_open+0x1d4>
				dw = GET_FATTIME();
 8010d88:	f7fd fea8 	bl	800eadc <get_fattime>
 8010d8c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d90:	330e      	adds	r3, #14
 8010d92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010d94:	4618      	mov	r0, r3
 8010d96:	f7fe f9c9 	bl	800f12c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d9c:	3316      	adds	r3, #22
 8010d9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010da0:	4618      	mov	r0, r3
 8010da2:	f7fe f9c3 	bl	800f12c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010da8:	330b      	adds	r3, #11
 8010daa:	2220      	movs	r2, #32
 8010dac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010dae:	693b      	ldr	r3, [r7, #16]
 8010db0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010db2:	4611      	mov	r1, r2
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7ff f99b 	bl	80100f0 <ld_clust>
 8010dba:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010dbc:	693b      	ldr	r3, [r7, #16]
 8010dbe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f7ff f9b3 	bl	801012e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dca:	331c      	adds	r3, #28
 8010dcc:	2100      	movs	r1, #0
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f7fe f9ac 	bl	800f12c <st_dword>
					fs->wflag = 1;
 8010dd4:	693b      	ldr	r3, [r7, #16]
 8010dd6:	2201      	movs	r2, #1
 8010dd8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d037      	beq.n	8010e50 <f_open+0x1d4>
						dw = fs->winsect;
 8010de0:	693b      	ldr	r3, [r7, #16]
 8010de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010de4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8010de6:	f107 0314 	add.w	r3, r7, #20
 8010dea:	2200      	movs	r2, #0
 8010dec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010dee:	4618      	mov	r0, r3
 8010df0:	f7fe fea3 	bl	800fb3a <remove_chain>
 8010df4:	4603      	mov	r3, r0
 8010df6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8010dfa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d126      	bne.n	8010e50 <f_open+0x1d4>
							res = move_window(fs, dw);
 8010e02:	693b      	ldr	r3, [r7, #16]
 8010e04:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010e06:	4618      	mov	r0, r3
 8010e08:	f7fe fbea 	bl	800f5e0 <move_window>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010e12:	693b      	ldr	r3, [r7, #16]
 8010e14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010e16:	3a01      	subs	r2, #1
 8010e18:	611a      	str	r2, [r3, #16]
 8010e1a:	e019      	b.n	8010e50 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010e1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d115      	bne.n	8010e50 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010e24:	7ebb      	ldrb	r3, [r7, #26]
 8010e26:	f003 0310 	and.w	r3, r3, #16
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d003      	beq.n	8010e36 <f_open+0x1ba>
					res = FR_NO_FILE;
 8010e2e:	2304      	movs	r3, #4
 8010e30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010e34:	e00c      	b.n	8010e50 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010e36:	79fb      	ldrb	r3, [r7, #7]
 8010e38:	f003 0302 	and.w	r3, r3, #2
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d007      	beq.n	8010e50 <f_open+0x1d4>
 8010e40:	7ebb      	ldrb	r3, [r7, #26]
 8010e42:	f003 0301 	and.w	r3, r3, #1
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d002      	beq.n	8010e50 <f_open+0x1d4>
						res = FR_DENIED;
 8010e4a:	2307      	movs	r3, #7
 8010e4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010e50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d128      	bne.n	8010eaa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010e58:	79fb      	ldrb	r3, [r7, #7]
 8010e5a:	f003 0308 	and.w	r3, r3, #8
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d003      	beq.n	8010e6a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8010e62:	79fb      	ldrb	r3, [r7, #7]
 8010e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e68:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010e6a:	693b      	ldr	r3, [r7, #16]
 8010e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010e78:	79fb      	ldrb	r3, [r7, #7]
 8010e7a:	f023 0301 	bic.w	r3, r3, #1
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	bf14      	ite	ne
 8010e82:	2301      	movne	r3, #1
 8010e84:	2300      	moveq	r3, #0
 8010e86:	b2db      	uxtb	r3, r3
 8010e88:	461a      	mov	r2, r3
 8010e8a:	f107 0314 	add.w	r3, r7, #20
 8010e8e:	4611      	mov	r1, r2
 8010e90:	4618      	mov	r0, r3
 8010e92:	f7fe fa73 	bl	800f37c <inc_lock>
 8010e96:	4602      	mov	r2, r0
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	691b      	ldr	r3, [r3, #16]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d102      	bne.n	8010eaa <f_open+0x22e>
 8010ea4:	2302      	movs	r3, #2
 8010ea6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010eaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	f040 80a3 	bne.w	8010ffa <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010eb4:	693b      	ldr	r3, [r7, #16]
 8010eb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010eb8:	4611      	mov	r1, r2
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f7ff f918 	bl	80100f0 <ld_clust>
 8010ec0:	4602      	mov	r2, r0
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ec8:	331c      	adds	r3, #28
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f7fe f8f0 	bl	800f0b0 <ld_dword>
 8010ed0:	4602      	mov	r2, r0
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	2200      	movs	r2, #0
 8010eda:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010edc:	693a      	ldr	r2, [r7, #16]
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010ee2:	693b      	ldr	r3, [r7, #16]
 8010ee4:	88da      	ldrh	r2, [r3, #6]
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	79fa      	ldrb	r2, [r7, #7]
 8010eee:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	2200      	movs	r2, #0
 8010efa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	2200      	movs	r2, #0
 8010f00:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	3330      	adds	r3, #48	; 0x30
 8010f06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010f0a:	2100      	movs	r1, #0
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f7fe f95a 	bl	800f1c6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010f12:	79fb      	ldrb	r3, [r7, #7]
 8010f14:	f003 0320 	and.w	r3, r3, #32
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d06e      	beq.n	8010ffa <f_open+0x37e>
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	68db      	ldr	r3, [r3, #12]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d06a      	beq.n	8010ffa <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	68da      	ldr	r2, [r3, #12]
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010f2c:	693b      	ldr	r3, [r7, #16]
 8010f2e:	895b      	ldrh	r3, [r3, #10]
 8010f30:	461a      	mov	r2, r3
 8010f32:	693b      	ldr	r3, [r7, #16]
 8010f34:	899b      	ldrh	r3, [r3, #12]
 8010f36:	fb02 f303 	mul.w	r3, r2, r3
 8010f3a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	689b      	ldr	r3, [r3, #8]
 8010f40:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	68db      	ldr	r3, [r3, #12]
 8010f46:	657b      	str	r3, [r7, #84]	; 0x54
 8010f48:	e016      	b.n	8010f78 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010f4e:	4618      	mov	r0, r3
 8010f50:	f7fe fc03 	bl	800f75a <get_fat>
 8010f54:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8010f56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f58:	2b01      	cmp	r3, #1
 8010f5a:	d802      	bhi.n	8010f62 <f_open+0x2e6>
 8010f5c:	2302      	movs	r3, #2
 8010f5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010f62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f68:	d102      	bne.n	8010f70 <f_open+0x2f4>
 8010f6a:	2301      	movs	r3, #1
 8010f6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010f70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f74:	1ad3      	subs	r3, r2, r3
 8010f76:	657b      	str	r3, [r7, #84]	; 0x54
 8010f78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d103      	bne.n	8010f88 <f_open+0x30c>
 8010f80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f84:	429a      	cmp	r2, r3
 8010f86:	d8e0      	bhi.n	8010f4a <f_open+0x2ce>
				}
				fp->clust = clst;
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010f8c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010f8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d131      	bne.n	8010ffa <f_open+0x37e>
 8010f96:	693b      	ldr	r3, [r7, #16]
 8010f98:	899b      	ldrh	r3, [r3, #12]
 8010f9a:	461a      	mov	r2, r3
 8010f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010fa2:	fb01 f202 	mul.w	r2, r1, r2
 8010fa6:	1a9b      	subs	r3, r3, r2
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d026      	beq.n	8010ffa <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010fac:	693b      	ldr	r3, [r7, #16]
 8010fae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f7fe fbb3 	bl	800f71c <clust2sect>
 8010fb6:	6478      	str	r0, [r7, #68]	; 0x44
 8010fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d103      	bne.n	8010fc6 <f_open+0x34a>
						res = FR_INT_ERR;
 8010fbe:	2302      	movs	r3, #2
 8010fc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010fc4:	e019      	b.n	8010ffa <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010fc6:	693b      	ldr	r3, [r7, #16]
 8010fc8:	899b      	ldrh	r3, [r3, #12]
 8010fca:	461a      	mov	r2, r3
 8010fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fce:	fbb3 f2f2 	udiv	r2, r3, r2
 8010fd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fd4:	441a      	add	r2, r3
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010fda:	693b      	ldr	r3, [r7, #16]
 8010fdc:	7858      	ldrb	r0, [r3, #1]
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	6a1a      	ldr	r2, [r3, #32]
 8010fe8:	2301      	movs	r3, #1
 8010fea:	f7fd ffeb 	bl	800efc4 <disk_read>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d002      	beq.n	8010ffa <f_open+0x37e>
 8010ff4:	2301      	movs	r3, #1
 8010ff6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010ffa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d002      	beq.n	8011008 <f_open+0x38c>
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	2200      	movs	r2, #0
 8011006:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011008:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801100c:	4618      	mov	r0, r3
 801100e:	3760      	adds	r7, #96	; 0x60
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}

08011014 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b08e      	sub	sp, #56	; 0x38
 8011018:	af00      	add	r7, sp, #0
 801101a:	60f8      	str	r0, [r7, #12]
 801101c:	60b9      	str	r1, [r7, #8]
 801101e:	607a      	str	r2, [r7, #4]
 8011020:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8011022:	68bb      	ldr	r3, [r7, #8]
 8011024:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8011026:	683b      	ldr	r3, [r7, #0]
 8011028:	2200      	movs	r2, #0
 801102a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	f107 0214 	add.w	r2, r7, #20
 8011032:	4611      	mov	r1, r2
 8011034:	4618      	mov	r0, r3
 8011036:	f7ff fda5 	bl	8010b84 <validate>
 801103a:	4603      	mov	r3, r0
 801103c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011040:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011044:	2b00      	cmp	r3, #0
 8011046:	d107      	bne.n	8011058 <f_read+0x44>
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	7d5b      	ldrb	r3, [r3, #21]
 801104c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011050:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011054:	2b00      	cmp	r3, #0
 8011056:	d002      	beq.n	801105e <f_read+0x4a>
 8011058:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801105c:	e135      	b.n	80112ca <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	7d1b      	ldrb	r3, [r3, #20]
 8011062:	f003 0301 	and.w	r3, r3, #1
 8011066:	2b00      	cmp	r3, #0
 8011068:	d101      	bne.n	801106e <f_read+0x5a>
 801106a:	2307      	movs	r3, #7
 801106c:	e12d      	b.n	80112ca <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	68da      	ldr	r2, [r3, #12]
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	699b      	ldr	r3, [r3, #24]
 8011076:	1ad3      	subs	r3, r2, r3
 8011078:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801107a:	687a      	ldr	r2, [r7, #4]
 801107c:	6a3b      	ldr	r3, [r7, #32]
 801107e:	429a      	cmp	r2, r3
 8011080:	f240 811e 	bls.w	80112c0 <f_read+0x2ac>
 8011084:	6a3b      	ldr	r3, [r7, #32]
 8011086:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8011088:	e11a      	b.n	80112c0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	699b      	ldr	r3, [r3, #24]
 801108e:	697a      	ldr	r2, [r7, #20]
 8011090:	8992      	ldrh	r2, [r2, #12]
 8011092:	fbb3 f1f2 	udiv	r1, r3, r2
 8011096:	fb01 f202 	mul.w	r2, r1, r2
 801109a:	1a9b      	subs	r3, r3, r2
 801109c:	2b00      	cmp	r3, #0
 801109e:	f040 80d5 	bne.w	801124c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	699b      	ldr	r3, [r3, #24]
 80110a6:	697a      	ldr	r2, [r7, #20]
 80110a8:	8992      	ldrh	r2, [r2, #12]
 80110aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80110ae:	697a      	ldr	r2, [r7, #20]
 80110b0:	8952      	ldrh	r2, [r2, #10]
 80110b2:	3a01      	subs	r2, #1
 80110b4:	4013      	ands	r3, r2
 80110b6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80110b8:	69fb      	ldr	r3, [r7, #28]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d12f      	bne.n	801111e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	699b      	ldr	r3, [r3, #24]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d103      	bne.n	80110ce <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	689b      	ldr	r3, [r3, #8]
 80110ca:	633b      	str	r3, [r7, #48]	; 0x30
 80110cc:	e013      	b.n	80110f6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d007      	beq.n	80110e6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	699b      	ldr	r3, [r3, #24]
 80110da:	4619      	mov	r1, r3
 80110dc:	68f8      	ldr	r0, [r7, #12]
 80110de:	f7fe fe29 	bl	800fd34 <clmt_clust>
 80110e2:	6338      	str	r0, [r7, #48]	; 0x30
 80110e4:	e007      	b.n	80110f6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80110e6:	68fa      	ldr	r2, [r7, #12]
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	69db      	ldr	r3, [r3, #28]
 80110ec:	4619      	mov	r1, r3
 80110ee:	4610      	mov	r0, r2
 80110f0:	f7fe fb33 	bl	800f75a <get_fat>
 80110f4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80110f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110f8:	2b01      	cmp	r3, #1
 80110fa:	d804      	bhi.n	8011106 <f_read+0xf2>
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	2202      	movs	r2, #2
 8011100:	755a      	strb	r2, [r3, #21]
 8011102:	2302      	movs	r3, #2
 8011104:	e0e1      	b.n	80112ca <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011108:	f1b3 3fff 	cmp.w	r3, #4294967295
 801110c:	d104      	bne.n	8011118 <f_read+0x104>
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	2201      	movs	r2, #1
 8011112:	755a      	strb	r2, [r3, #21]
 8011114:	2301      	movs	r3, #1
 8011116:	e0d8      	b.n	80112ca <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801111c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801111e:	697a      	ldr	r2, [r7, #20]
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	69db      	ldr	r3, [r3, #28]
 8011124:	4619      	mov	r1, r3
 8011126:	4610      	mov	r0, r2
 8011128:	f7fe faf8 	bl	800f71c <clust2sect>
 801112c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801112e:	69bb      	ldr	r3, [r7, #24]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d104      	bne.n	801113e <f_read+0x12a>
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	2202      	movs	r2, #2
 8011138:	755a      	strb	r2, [r3, #21]
 801113a:	2302      	movs	r3, #2
 801113c:	e0c5      	b.n	80112ca <f_read+0x2b6>
			sect += csect;
 801113e:	69ba      	ldr	r2, [r7, #24]
 8011140:	69fb      	ldr	r3, [r7, #28]
 8011142:	4413      	add	r3, r2
 8011144:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8011146:	697b      	ldr	r3, [r7, #20]
 8011148:	899b      	ldrh	r3, [r3, #12]
 801114a:	461a      	mov	r2, r3
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011152:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8011154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011156:	2b00      	cmp	r3, #0
 8011158:	d041      	beq.n	80111de <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801115a:	69fa      	ldr	r2, [r7, #28]
 801115c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801115e:	4413      	add	r3, r2
 8011160:	697a      	ldr	r2, [r7, #20]
 8011162:	8952      	ldrh	r2, [r2, #10]
 8011164:	4293      	cmp	r3, r2
 8011166:	d905      	bls.n	8011174 <f_read+0x160>
					cc = fs->csize - csect;
 8011168:	697b      	ldr	r3, [r7, #20]
 801116a:	895b      	ldrh	r3, [r3, #10]
 801116c:	461a      	mov	r2, r3
 801116e:	69fb      	ldr	r3, [r7, #28]
 8011170:	1ad3      	subs	r3, r2, r3
 8011172:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011174:	697b      	ldr	r3, [r7, #20]
 8011176:	7858      	ldrb	r0, [r3, #1]
 8011178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801117a:	69ba      	ldr	r2, [r7, #24]
 801117c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801117e:	f7fd ff21 	bl	800efc4 <disk_read>
 8011182:	4603      	mov	r3, r0
 8011184:	2b00      	cmp	r3, #0
 8011186:	d004      	beq.n	8011192 <f_read+0x17e>
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	2201      	movs	r2, #1
 801118c:	755a      	strb	r2, [r3, #21]
 801118e:	2301      	movs	r3, #1
 8011190:	e09b      	b.n	80112ca <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	7d1b      	ldrb	r3, [r3, #20]
 8011196:	b25b      	sxtb	r3, r3
 8011198:	2b00      	cmp	r3, #0
 801119a:	da18      	bge.n	80111ce <f_read+0x1ba>
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	6a1a      	ldr	r2, [r3, #32]
 80111a0:	69bb      	ldr	r3, [r7, #24]
 80111a2:	1ad3      	subs	r3, r2, r3
 80111a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80111a6:	429a      	cmp	r2, r3
 80111a8:	d911      	bls.n	80111ce <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	6a1a      	ldr	r2, [r3, #32]
 80111ae:	69bb      	ldr	r3, [r7, #24]
 80111b0:	1ad3      	subs	r3, r2, r3
 80111b2:	697a      	ldr	r2, [r7, #20]
 80111b4:	8992      	ldrh	r2, [r2, #12]
 80111b6:	fb02 f303 	mul.w	r3, r2, r3
 80111ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111bc:	18d0      	adds	r0, r2, r3
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80111c4:	697b      	ldr	r3, [r7, #20]
 80111c6:	899b      	ldrh	r3, [r3, #12]
 80111c8:	461a      	mov	r2, r3
 80111ca:	f7fd ffdb 	bl	800f184 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80111ce:	697b      	ldr	r3, [r7, #20]
 80111d0:	899b      	ldrh	r3, [r3, #12]
 80111d2:	461a      	mov	r2, r3
 80111d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111d6:	fb02 f303 	mul.w	r3, r2, r3
 80111da:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80111dc:	e05c      	b.n	8011298 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	6a1b      	ldr	r3, [r3, #32]
 80111e2:	69ba      	ldr	r2, [r7, #24]
 80111e4:	429a      	cmp	r2, r3
 80111e6:	d02e      	beq.n	8011246 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	7d1b      	ldrb	r3, [r3, #20]
 80111ec:	b25b      	sxtb	r3, r3
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	da18      	bge.n	8011224 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80111f2:	697b      	ldr	r3, [r7, #20]
 80111f4:	7858      	ldrb	r0, [r3, #1]
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	6a1a      	ldr	r2, [r3, #32]
 8011200:	2301      	movs	r3, #1
 8011202:	f7fd feff 	bl	800f004 <disk_write>
 8011206:	4603      	mov	r3, r0
 8011208:	2b00      	cmp	r3, #0
 801120a:	d004      	beq.n	8011216 <f_read+0x202>
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	2201      	movs	r2, #1
 8011210:	755a      	strb	r2, [r3, #21]
 8011212:	2301      	movs	r3, #1
 8011214:	e059      	b.n	80112ca <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	7d1b      	ldrb	r3, [r3, #20]
 801121a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801121e:	b2da      	uxtb	r2, r3
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011224:	697b      	ldr	r3, [r7, #20]
 8011226:	7858      	ldrb	r0, [r3, #1]
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801122e:	2301      	movs	r3, #1
 8011230:	69ba      	ldr	r2, [r7, #24]
 8011232:	f7fd fec7 	bl	800efc4 <disk_read>
 8011236:	4603      	mov	r3, r0
 8011238:	2b00      	cmp	r3, #0
 801123a:	d004      	beq.n	8011246 <f_read+0x232>
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	2201      	movs	r2, #1
 8011240:	755a      	strb	r2, [r3, #21]
 8011242:	2301      	movs	r3, #1
 8011244:	e041      	b.n	80112ca <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	69ba      	ldr	r2, [r7, #24]
 801124a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801124c:	697b      	ldr	r3, [r7, #20]
 801124e:	899b      	ldrh	r3, [r3, #12]
 8011250:	4618      	mov	r0, r3
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	699b      	ldr	r3, [r3, #24]
 8011256:	697a      	ldr	r2, [r7, #20]
 8011258:	8992      	ldrh	r2, [r2, #12]
 801125a:	fbb3 f1f2 	udiv	r1, r3, r2
 801125e:	fb01 f202 	mul.w	r2, r1, r2
 8011262:	1a9b      	subs	r3, r3, r2
 8011264:	1ac3      	subs	r3, r0, r3
 8011266:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8011268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	429a      	cmp	r2, r3
 801126e:	d901      	bls.n	8011274 <f_read+0x260>
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	699b      	ldr	r3, [r3, #24]
 801127e:	697a      	ldr	r2, [r7, #20]
 8011280:	8992      	ldrh	r2, [r2, #12]
 8011282:	fbb3 f0f2 	udiv	r0, r3, r2
 8011286:	fb00 f202 	mul.w	r2, r0, r2
 801128a:	1a9b      	subs	r3, r3, r2
 801128c:	440b      	add	r3, r1
 801128e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011290:	4619      	mov	r1, r3
 8011292:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011294:	f7fd ff76 	bl	800f184 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8011298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801129a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801129c:	4413      	add	r3, r2
 801129e:	627b      	str	r3, [r7, #36]	; 0x24
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	699a      	ldr	r2, [r3, #24]
 80112a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112a6:	441a      	add	r2, r3
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	619a      	str	r2, [r3, #24]
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	681a      	ldr	r2, [r3, #0]
 80112b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112b2:	441a      	add	r2, r3
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	601a      	str	r2, [r3, #0]
 80112b8:	687a      	ldr	r2, [r7, #4]
 80112ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112bc:	1ad3      	subs	r3, r2, r3
 80112be:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	f47f aee1 	bne.w	801108a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80112c8:	2300      	movs	r3, #0
}
 80112ca:	4618      	mov	r0, r3
 80112cc:	3738      	adds	r7, #56	; 0x38
 80112ce:	46bd      	mov	sp, r7
 80112d0:	bd80      	pop	{r7, pc}

080112d2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80112d2:	b580      	push	{r7, lr}
 80112d4:	b08c      	sub	sp, #48	; 0x30
 80112d6:	af00      	add	r7, sp, #0
 80112d8:	60f8      	str	r0, [r7, #12]
 80112da:	60b9      	str	r1, [r7, #8]
 80112dc:	607a      	str	r2, [r7, #4]
 80112de:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80112e0:	68bb      	ldr	r3, [r7, #8]
 80112e2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80112e4:	683b      	ldr	r3, [r7, #0]
 80112e6:	2200      	movs	r2, #0
 80112e8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	f107 0210 	add.w	r2, r7, #16
 80112f0:	4611      	mov	r1, r2
 80112f2:	4618      	mov	r0, r3
 80112f4:	f7ff fc46 	bl	8010b84 <validate>
 80112f8:	4603      	mov	r3, r0
 80112fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80112fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011302:	2b00      	cmp	r3, #0
 8011304:	d107      	bne.n	8011316 <f_write+0x44>
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	7d5b      	ldrb	r3, [r3, #21]
 801130a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801130e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011312:	2b00      	cmp	r3, #0
 8011314:	d002      	beq.n	801131c <f_write+0x4a>
 8011316:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801131a:	e16a      	b.n	80115f2 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	7d1b      	ldrb	r3, [r3, #20]
 8011320:	f003 0302 	and.w	r3, r3, #2
 8011324:	2b00      	cmp	r3, #0
 8011326:	d101      	bne.n	801132c <f_write+0x5a>
 8011328:	2307      	movs	r3, #7
 801132a:	e162      	b.n	80115f2 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	699a      	ldr	r2, [r3, #24]
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	441a      	add	r2, r3
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	699b      	ldr	r3, [r3, #24]
 8011338:	429a      	cmp	r2, r3
 801133a:	f080 814c 	bcs.w	80115d6 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	699b      	ldr	r3, [r3, #24]
 8011342:	43db      	mvns	r3, r3
 8011344:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011346:	e146      	b.n	80115d6 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	699b      	ldr	r3, [r3, #24]
 801134c:	693a      	ldr	r2, [r7, #16]
 801134e:	8992      	ldrh	r2, [r2, #12]
 8011350:	fbb3 f1f2 	udiv	r1, r3, r2
 8011354:	fb01 f202 	mul.w	r2, r1, r2
 8011358:	1a9b      	subs	r3, r3, r2
 801135a:	2b00      	cmp	r3, #0
 801135c:	f040 80f1 	bne.w	8011542 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	699b      	ldr	r3, [r3, #24]
 8011364:	693a      	ldr	r2, [r7, #16]
 8011366:	8992      	ldrh	r2, [r2, #12]
 8011368:	fbb3 f3f2 	udiv	r3, r3, r2
 801136c:	693a      	ldr	r2, [r7, #16]
 801136e:	8952      	ldrh	r2, [r2, #10]
 8011370:	3a01      	subs	r2, #1
 8011372:	4013      	ands	r3, r2
 8011374:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011376:	69bb      	ldr	r3, [r7, #24]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d143      	bne.n	8011404 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	699b      	ldr	r3, [r3, #24]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d10c      	bne.n	801139e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	689b      	ldr	r3, [r3, #8]
 8011388:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801138a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801138c:	2b00      	cmp	r3, #0
 801138e:	d11a      	bne.n	80113c6 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	2100      	movs	r1, #0
 8011394:	4618      	mov	r0, r3
 8011396:	f7fe fc35 	bl	800fc04 <create_chain>
 801139a:	62b8      	str	r0, [r7, #40]	; 0x28
 801139c:	e013      	b.n	80113c6 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d007      	beq.n	80113b6 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	699b      	ldr	r3, [r3, #24]
 80113aa:	4619      	mov	r1, r3
 80113ac:	68f8      	ldr	r0, [r7, #12]
 80113ae:	f7fe fcc1 	bl	800fd34 <clmt_clust>
 80113b2:	62b8      	str	r0, [r7, #40]	; 0x28
 80113b4:	e007      	b.n	80113c6 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80113b6:	68fa      	ldr	r2, [r7, #12]
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	69db      	ldr	r3, [r3, #28]
 80113bc:	4619      	mov	r1, r3
 80113be:	4610      	mov	r0, r2
 80113c0:	f7fe fc20 	bl	800fc04 <create_chain>
 80113c4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80113c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	f000 8109 	beq.w	80115e0 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80113ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113d0:	2b01      	cmp	r3, #1
 80113d2:	d104      	bne.n	80113de <f_write+0x10c>
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	2202      	movs	r2, #2
 80113d8:	755a      	strb	r2, [r3, #21]
 80113da:	2302      	movs	r3, #2
 80113dc:	e109      	b.n	80115f2 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80113de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113e4:	d104      	bne.n	80113f0 <f_write+0x11e>
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	2201      	movs	r2, #1
 80113ea:	755a      	strb	r2, [r3, #21]
 80113ec:	2301      	movs	r3, #1
 80113ee:	e100      	b.n	80115f2 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80113f4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	689b      	ldr	r3, [r3, #8]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d102      	bne.n	8011404 <f_write+0x132>
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011402:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	7d1b      	ldrb	r3, [r3, #20]
 8011408:	b25b      	sxtb	r3, r3
 801140a:	2b00      	cmp	r3, #0
 801140c:	da18      	bge.n	8011440 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801140e:	693b      	ldr	r3, [r7, #16]
 8011410:	7858      	ldrb	r0, [r3, #1]
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	6a1a      	ldr	r2, [r3, #32]
 801141c:	2301      	movs	r3, #1
 801141e:	f7fd fdf1 	bl	800f004 <disk_write>
 8011422:	4603      	mov	r3, r0
 8011424:	2b00      	cmp	r3, #0
 8011426:	d004      	beq.n	8011432 <f_write+0x160>
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	2201      	movs	r2, #1
 801142c:	755a      	strb	r2, [r3, #21]
 801142e:	2301      	movs	r3, #1
 8011430:	e0df      	b.n	80115f2 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	7d1b      	ldrb	r3, [r3, #20]
 8011436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801143a:	b2da      	uxtb	r2, r3
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011440:	693a      	ldr	r2, [r7, #16]
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	69db      	ldr	r3, [r3, #28]
 8011446:	4619      	mov	r1, r3
 8011448:	4610      	mov	r0, r2
 801144a:	f7fe f967 	bl	800f71c <clust2sect>
 801144e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011450:	697b      	ldr	r3, [r7, #20]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d104      	bne.n	8011460 <f_write+0x18e>
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	2202      	movs	r2, #2
 801145a:	755a      	strb	r2, [r3, #21]
 801145c:	2302      	movs	r3, #2
 801145e:	e0c8      	b.n	80115f2 <f_write+0x320>
			sect += csect;
 8011460:	697a      	ldr	r2, [r7, #20]
 8011462:	69bb      	ldr	r3, [r7, #24]
 8011464:	4413      	add	r3, r2
 8011466:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011468:	693b      	ldr	r3, [r7, #16]
 801146a:	899b      	ldrh	r3, [r3, #12]
 801146c:	461a      	mov	r2, r3
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	fbb3 f3f2 	udiv	r3, r3, r2
 8011474:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011476:	6a3b      	ldr	r3, [r7, #32]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d043      	beq.n	8011504 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801147c:	69ba      	ldr	r2, [r7, #24]
 801147e:	6a3b      	ldr	r3, [r7, #32]
 8011480:	4413      	add	r3, r2
 8011482:	693a      	ldr	r2, [r7, #16]
 8011484:	8952      	ldrh	r2, [r2, #10]
 8011486:	4293      	cmp	r3, r2
 8011488:	d905      	bls.n	8011496 <f_write+0x1c4>
					cc = fs->csize - csect;
 801148a:	693b      	ldr	r3, [r7, #16]
 801148c:	895b      	ldrh	r3, [r3, #10]
 801148e:	461a      	mov	r2, r3
 8011490:	69bb      	ldr	r3, [r7, #24]
 8011492:	1ad3      	subs	r3, r2, r3
 8011494:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011496:	693b      	ldr	r3, [r7, #16]
 8011498:	7858      	ldrb	r0, [r3, #1]
 801149a:	6a3b      	ldr	r3, [r7, #32]
 801149c:	697a      	ldr	r2, [r7, #20]
 801149e:	69f9      	ldr	r1, [r7, #28]
 80114a0:	f7fd fdb0 	bl	800f004 <disk_write>
 80114a4:	4603      	mov	r3, r0
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d004      	beq.n	80114b4 <f_write+0x1e2>
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	2201      	movs	r2, #1
 80114ae:	755a      	strb	r2, [r3, #21]
 80114b0:	2301      	movs	r3, #1
 80114b2:	e09e      	b.n	80115f2 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	6a1a      	ldr	r2, [r3, #32]
 80114b8:	697b      	ldr	r3, [r7, #20]
 80114ba:	1ad3      	subs	r3, r2, r3
 80114bc:	6a3a      	ldr	r2, [r7, #32]
 80114be:	429a      	cmp	r2, r3
 80114c0:	d918      	bls.n	80114f4 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	6a1a      	ldr	r2, [r3, #32]
 80114cc:	697b      	ldr	r3, [r7, #20]
 80114ce:	1ad3      	subs	r3, r2, r3
 80114d0:	693a      	ldr	r2, [r7, #16]
 80114d2:	8992      	ldrh	r2, [r2, #12]
 80114d4:	fb02 f303 	mul.w	r3, r2, r3
 80114d8:	69fa      	ldr	r2, [r7, #28]
 80114da:	18d1      	adds	r1, r2, r3
 80114dc:	693b      	ldr	r3, [r7, #16]
 80114de:	899b      	ldrh	r3, [r3, #12]
 80114e0:	461a      	mov	r2, r3
 80114e2:	f7fd fe4f 	bl	800f184 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	7d1b      	ldrb	r3, [r3, #20]
 80114ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80114ee:	b2da      	uxtb	r2, r3
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80114f4:	693b      	ldr	r3, [r7, #16]
 80114f6:	899b      	ldrh	r3, [r3, #12]
 80114f8:	461a      	mov	r2, r3
 80114fa:	6a3b      	ldr	r3, [r7, #32]
 80114fc:	fb02 f303 	mul.w	r3, r2, r3
 8011500:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011502:	e04b      	b.n	801159c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	6a1b      	ldr	r3, [r3, #32]
 8011508:	697a      	ldr	r2, [r7, #20]
 801150a:	429a      	cmp	r2, r3
 801150c:	d016      	beq.n	801153c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	699a      	ldr	r2, [r3, #24]
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011516:	429a      	cmp	r2, r3
 8011518:	d210      	bcs.n	801153c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801151a:	693b      	ldr	r3, [r7, #16]
 801151c:	7858      	ldrb	r0, [r3, #1]
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011524:	2301      	movs	r3, #1
 8011526:	697a      	ldr	r2, [r7, #20]
 8011528:	f7fd fd4c 	bl	800efc4 <disk_read>
 801152c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801152e:	2b00      	cmp	r3, #0
 8011530:	d004      	beq.n	801153c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	2201      	movs	r2, #1
 8011536:	755a      	strb	r2, [r3, #21]
 8011538:	2301      	movs	r3, #1
 801153a:	e05a      	b.n	80115f2 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	697a      	ldr	r2, [r7, #20]
 8011540:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011542:	693b      	ldr	r3, [r7, #16]
 8011544:	899b      	ldrh	r3, [r3, #12]
 8011546:	4618      	mov	r0, r3
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	699b      	ldr	r3, [r3, #24]
 801154c:	693a      	ldr	r2, [r7, #16]
 801154e:	8992      	ldrh	r2, [r2, #12]
 8011550:	fbb3 f1f2 	udiv	r1, r3, r2
 8011554:	fb01 f202 	mul.w	r2, r1, r2
 8011558:	1a9b      	subs	r3, r3, r2
 801155a:	1ac3      	subs	r3, r0, r3
 801155c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801155e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	429a      	cmp	r2, r3
 8011564:	d901      	bls.n	801156a <f_write+0x298>
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	699b      	ldr	r3, [r3, #24]
 8011574:	693a      	ldr	r2, [r7, #16]
 8011576:	8992      	ldrh	r2, [r2, #12]
 8011578:	fbb3 f0f2 	udiv	r0, r3, r2
 801157c:	fb00 f202 	mul.w	r2, r0, r2
 8011580:	1a9b      	subs	r3, r3, r2
 8011582:	440b      	add	r3, r1
 8011584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011586:	69f9      	ldr	r1, [r7, #28]
 8011588:	4618      	mov	r0, r3
 801158a:	f7fd fdfb 	bl	800f184 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	7d1b      	ldrb	r3, [r3, #20]
 8011592:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011596:	b2da      	uxtb	r2, r3
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801159c:	69fa      	ldr	r2, [r7, #28]
 801159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115a0:	4413      	add	r3, r2
 80115a2:	61fb      	str	r3, [r7, #28]
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	699a      	ldr	r2, [r3, #24]
 80115a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115aa:	441a      	add	r2, r3
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	619a      	str	r2, [r3, #24]
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	68da      	ldr	r2, [r3, #12]
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	699b      	ldr	r3, [r3, #24]
 80115b8:	429a      	cmp	r2, r3
 80115ba:	bf38      	it	cc
 80115bc:	461a      	movcc	r2, r3
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	60da      	str	r2, [r3, #12]
 80115c2:	683b      	ldr	r3, [r7, #0]
 80115c4:	681a      	ldr	r2, [r3, #0]
 80115c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115c8:	441a      	add	r2, r3
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	601a      	str	r2, [r3, #0]
 80115ce:	687a      	ldr	r2, [r7, #4]
 80115d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115d2:	1ad3      	subs	r3, r2, r3
 80115d4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	f47f aeb5 	bne.w	8011348 <f_write+0x76>
 80115de:	e000      	b.n	80115e2 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80115e0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	7d1b      	ldrb	r3, [r3, #20]
 80115e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115ea:	b2da      	uxtb	r2, r3
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80115f0:	2300      	movs	r3, #0
}
 80115f2:	4618      	mov	r0, r3
 80115f4:	3730      	adds	r7, #48	; 0x30
 80115f6:	46bd      	mov	sp, r7
 80115f8:	bd80      	pop	{r7, pc}

080115fa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80115fa:	b580      	push	{r7, lr}
 80115fc:	b086      	sub	sp, #24
 80115fe:	af00      	add	r7, sp, #0
 8011600:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	f107 0208 	add.w	r2, r7, #8
 8011608:	4611      	mov	r1, r2
 801160a:	4618      	mov	r0, r3
 801160c:	f7ff faba 	bl	8010b84 <validate>
 8011610:	4603      	mov	r3, r0
 8011612:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011614:	7dfb      	ldrb	r3, [r7, #23]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d168      	bne.n	80116ec <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	7d1b      	ldrb	r3, [r3, #20]
 801161e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011622:	2b00      	cmp	r3, #0
 8011624:	d062      	beq.n	80116ec <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	7d1b      	ldrb	r3, [r3, #20]
 801162a:	b25b      	sxtb	r3, r3
 801162c:	2b00      	cmp	r3, #0
 801162e:	da15      	bge.n	801165c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011630:	68bb      	ldr	r3, [r7, #8]
 8011632:	7858      	ldrb	r0, [r3, #1]
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	6a1a      	ldr	r2, [r3, #32]
 801163e:	2301      	movs	r3, #1
 8011640:	f7fd fce0 	bl	800f004 <disk_write>
 8011644:	4603      	mov	r3, r0
 8011646:	2b00      	cmp	r3, #0
 8011648:	d001      	beq.n	801164e <f_sync+0x54>
 801164a:	2301      	movs	r3, #1
 801164c:	e04f      	b.n	80116ee <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	7d1b      	ldrb	r3, [r3, #20]
 8011652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011656:	b2da      	uxtb	r2, r3
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801165c:	f7fd fa3e 	bl	800eadc <get_fattime>
 8011660:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011662:	68ba      	ldr	r2, [r7, #8]
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011668:	4619      	mov	r1, r3
 801166a:	4610      	mov	r0, r2
 801166c:	f7fd ffb8 	bl	800f5e0 <move_window>
 8011670:	4603      	mov	r3, r0
 8011672:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011674:	7dfb      	ldrb	r3, [r7, #23]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d138      	bne.n	80116ec <f_sync+0xf2>
					dir = fp->dir_ptr;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801167e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	330b      	adds	r3, #11
 8011684:	781a      	ldrb	r2, [r3, #0]
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	330b      	adds	r3, #11
 801168a:	f042 0220 	orr.w	r2, r2, #32
 801168e:	b2d2      	uxtb	r2, r2
 8011690:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	6818      	ldr	r0, [r3, #0]
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	689b      	ldr	r3, [r3, #8]
 801169a:	461a      	mov	r2, r3
 801169c:	68f9      	ldr	r1, [r7, #12]
 801169e:	f7fe fd46 	bl	801012e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	f103 021c 	add.w	r2, r3, #28
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	68db      	ldr	r3, [r3, #12]
 80116ac:	4619      	mov	r1, r3
 80116ae:	4610      	mov	r0, r2
 80116b0:	f7fd fd3c 	bl	800f12c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	3316      	adds	r3, #22
 80116b8:	6939      	ldr	r1, [r7, #16]
 80116ba:	4618      	mov	r0, r3
 80116bc:	f7fd fd36 	bl	800f12c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	3312      	adds	r3, #18
 80116c4:	2100      	movs	r1, #0
 80116c6:	4618      	mov	r0, r3
 80116c8:	f7fd fd15 	bl	800f0f6 <st_word>
					fs->wflag = 1;
 80116cc:	68bb      	ldr	r3, [r7, #8]
 80116ce:	2201      	movs	r2, #1
 80116d0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80116d2:	68bb      	ldr	r3, [r7, #8]
 80116d4:	4618      	mov	r0, r3
 80116d6:	f7fd ffb1 	bl	800f63c <sync_fs>
 80116da:	4603      	mov	r3, r0
 80116dc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	7d1b      	ldrb	r3, [r3, #20]
 80116e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80116e6:	b2da      	uxtb	r2, r3
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80116ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80116ee:	4618      	mov	r0, r3
 80116f0:	3718      	adds	r7, #24
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bd80      	pop	{r7, pc}

080116f6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80116f6:	b580      	push	{r7, lr}
 80116f8:	b084      	sub	sp, #16
 80116fa:	af00      	add	r7, sp, #0
 80116fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80116fe:	6878      	ldr	r0, [r7, #4]
 8011700:	f7ff ff7b 	bl	80115fa <f_sync>
 8011704:	4603      	mov	r3, r0
 8011706:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011708:	7bfb      	ldrb	r3, [r7, #15]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d118      	bne.n	8011740 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	f107 0208 	add.w	r2, r7, #8
 8011714:	4611      	mov	r1, r2
 8011716:	4618      	mov	r0, r3
 8011718:	f7ff fa34 	bl	8010b84 <validate>
 801171c:	4603      	mov	r3, r0
 801171e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011720:	7bfb      	ldrb	r3, [r7, #15]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d10c      	bne.n	8011740 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	691b      	ldr	r3, [r3, #16]
 801172a:	4618      	mov	r0, r3
 801172c:	f7fd feb4 	bl	800f498 <dec_lock>
 8011730:	4603      	mov	r3, r0
 8011732:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011734:	7bfb      	ldrb	r3, [r7, #15]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d102      	bne.n	8011740 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	2200      	movs	r2, #0
 801173e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011740:	7bfb      	ldrb	r3, [r7, #15]
}
 8011742:	4618      	mov	r0, r3
 8011744:	3710      	adds	r7, #16
 8011746:	46bd      	mov	sp, r7
 8011748:	bd80      	pop	{r7, pc}

0801174a <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801174a:	b580      	push	{r7, lr}
 801174c:	b090      	sub	sp, #64	; 0x40
 801174e:	af00      	add	r7, sp, #0
 8011750:	6078      	str	r0, [r7, #4]
 8011752:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8011754:	f107 010c 	add.w	r1, r7, #12
 8011758:	1d3b      	adds	r3, r7, #4
 801175a:	2200      	movs	r2, #0
 801175c:	4618      	mov	r0, r3
 801175e:	f7fe ff91 	bl	8010684 <find_volume>
 8011762:	4603      	mov	r3, r0
 8011764:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8011768:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801176c:	2b00      	cmp	r3, #0
 801176e:	d11f      	bne.n	80117b0 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011770:	687a      	ldr	r2, [r7, #4]
 8011772:	f107 030c 	add.w	r3, r7, #12
 8011776:	4611      	mov	r1, r2
 8011778:	4618      	mov	r0, r3
 801177a:	f7fe fe73 	bl	8010464 <follow_path>
 801177e:	4603      	mov	r3, r0
 8011780:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8011784:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011788:	2b00      	cmp	r3, #0
 801178a:	d111      	bne.n	80117b0 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 801178c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011790:	b25b      	sxtb	r3, r3
 8011792:	2b00      	cmp	r3, #0
 8011794:	da03      	bge.n	801179e <f_stat+0x54>
				res = FR_INVALID_NAME;
 8011796:	2306      	movs	r3, #6
 8011798:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801179c:	e008      	b.n	80117b0 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 801179e:	683b      	ldr	r3, [r7, #0]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d005      	beq.n	80117b0 <f_stat+0x66>
 80117a4:	f107 030c 	add.w	r3, r7, #12
 80117a8:	6839      	ldr	r1, [r7, #0]
 80117aa:	4618      	mov	r0, r3
 80117ac:	f7fe fd66 	bl	801027c <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 80117b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80117b4:	4618      	mov	r0, r3
 80117b6:	3740      	adds	r7, #64	; 0x40
 80117b8:	46bd      	mov	sp, r7
 80117ba:	bd80      	pop	{r7, pc}

080117bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80117bc:	b480      	push	{r7}
 80117be:	b087      	sub	sp, #28
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	60f8      	str	r0, [r7, #12]
 80117c4:	60b9      	str	r1, [r7, #8]
 80117c6:	4613      	mov	r3, r2
 80117c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80117ca:	2301      	movs	r3, #1
 80117cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80117ce:	2300      	movs	r3, #0
 80117d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80117d2:	4b1f      	ldr	r3, [pc, #124]	; (8011850 <FATFS_LinkDriverEx+0x94>)
 80117d4:	7a5b      	ldrb	r3, [r3, #9]
 80117d6:	b2db      	uxtb	r3, r3
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d131      	bne.n	8011840 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80117dc:	4b1c      	ldr	r3, [pc, #112]	; (8011850 <FATFS_LinkDriverEx+0x94>)
 80117de:	7a5b      	ldrb	r3, [r3, #9]
 80117e0:	b2db      	uxtb	r3, r3
 80117e2:	461a      	mov	r2, r3
 80117e4:	4b1a      	ldr	r3, [pc, #104]	; (8011850 <FATFS_LinkDriverEx+0x94>)
 80117e6:	2100      	movs	r1, #0
 80117e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80117ea:	4b19      	ldr	r3, [pc, #100]	; (8011850 <FATFS_LinkDriverEx+0x94>)
 80117ec:	7a5b      	ldrb	r3, [r3, #9]
 80117ee:	b2db      	uxtb	r3, r3
 80117f0:	4a17      	ldr	r2, [pc, #92]	; (8011850 <FATFS_LinkDriverEx+0x94>)
 80117f2:	009b      	lsls	r3, r3, #2
 80117f4:	4413      	add	r3, r2
 80117f6:	68fa      	ldr	r2, [r7, #12]
 80117f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80117fa:	4b15      	ldr	r3, [pc, #84]	; (8011850 <FATFS_LinkDriverEx+0x94>)
 80117fc:	7a5b      	ldrb	r3, [r3, #9]
 80117fe:	b2db      	uxtb	r3, r3
 8011800:	461a      	mov	r2, r3
 8011802:	4b13      	ldr	r3, [pc, #76]	; (8011850 <FATFS_LinkDriverEx+0x94>)
 8011804:	4413      	add	r3, r2
 8011806:	79fa      	ldrb	r2, [r7, #7]
 8011808:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801180a:	4b11      	ldr	r3, [pc, #68]	; (8011850 <FATFS_LinkDriverEx+0x94>)
 801180c:	7a5b      	ldrb	r3, [r3, #9]
 801180e:	b2db      	uxtb	r3, r3
 8011810:	1c5a      	adds	r2, r3, #1
 8011812:	b2d1      	uxtb	r1, r2
 8011814:	4a0e      	ldr	r2, [pc, #56]	; (8011850 <FATFS_LinkDriverEx+0x94>)
 8011816:	7251      	strb	r1, [r2, #9]
 8011818:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801181a:	7dbb      	ldrb	r3, [r7, #22]
 801181c:	3330      	adds	r3, #48	; 0x30
 801181e:	b2da      	uxtb	r2, r3
 8011820:	68bb      	ldr	r3, [r7, #8]
 8011822:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011824:	68bb      	ldr	r3, [r7, #8]
 8011826:	3301      	adds	r3, #1
 8011828:	223a      	movs	r2, #58	; 0x3a
 801182a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801182c:	68bb      	ldr	r3, [r7, #8]
 801182e:	3302      	adds	r3, #2
 8011830:	222f      	movs	r2, #47	; 0x2f
 8011832:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011834:	68bb      	ldr	r3, [r7, #8]
 8011836:	3303      	adds	r3, #3
 8011838:	2200      	movs	r2, #0
 801183a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801183c:	2300      	movs	r3, #0
 801183e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011840:	7dfb      	ldrb	r3, [r7, #23]
}
 8011842:	4618      	mov	r0, r3
 8011844:	371c      	adds	r7, #28
 8011846:	46bd      	mov	sp, r7
 8011848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184c:	4770      	bx	lr
 801184e:	bf00      	nop
 8011850:	200057fc 	.word	0x200057fc

08011854 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b082      	sub	sp, #8
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
 801185c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801185e:	2200      	movs	r2, #0
 8011860:	6839      	ldr	r1, [r7, #0]
 8011862:	6878      	ldr	r0, [r7, #4]
 8011864:	f7ff ffaa 	bl	80117bc <FATFS_LinkDriverEx>
 8011868:	4603      	mov	r3, r0
}
 801186a:	4618      	mov	r0, r3
 801186c:	3708      	adds	r7, #8
 801186e:	46bd      	mov	sp, r7
 8011870:	bd80      	pop	{r7, pc}
	...

08011874 <__errno>:
 8011874:	4b01      	ldr	r3, [pc, #4]	; (801187c <__errno+0x8>)
 8011876:	6818      	ldr	r0, [r3, #0]
 8011878:	4770      	bx	lr
 801187a:	bf00      	nop
 801187c:	2000000c 	.word	0x2000000c

08011880 <__libc_init_array>:
 8011880:	b570      	push	{r4, r5, r6, lr}
 8011882:	4d0d      	ldr	r5, [pc, #52]	; (80118b8 <__libc_init_array+0x38>)
 8011884:	4c0d      	ldr	r4, [pc, #52]	; (80118bc <__libc_init_array+0x3c>)
 8011886:	1b64      	subs	r4, r4, r5
 8011888:	10a4      	asrs	r4, r4, #2
 801188a:	2600      	movs	r6, #0
 801188c:	42a6      	cmp	r6, r4
 801188e:	d109      	bne.n	80118a4 <__libc_init_array+0x24>
 8011890:	4d0b      	ldr	r5, [pc, #44]	; (80118c0 <__libc_init_array+0x40>)
 8011892:	4c0c      	ldr	r4, [pc, #48]	; (80118c4 <__libc_init_array+0x44>)
 8011894:	f004 ff84 	bl	80167a0 <_init>
 8011898:	1b64      	subs	r4, r4, r5
 801189a:	10a4      	asrs	r4, r4, #2
 801189c:	2600      	movs	r6, #0
 801189e:	42a6      	cmp	r6, r4
 80118a0:	d105      	bne.n	80118ae <__libc_init_array+0x2e>
 80118a2:	bd70      	pop	{r4, r5, r6, pc}
 80118a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80118a8:	4798      	blx	r3
 80118aa:	3601      	adds	r6, #1
 80118ac:	e7ee      	b.n	801188c <__libc_init_array+0xc>
 80118ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80118b2:	4798      	blx	r3
 80118b4:	3601      	adds	r6, #1
 80118b6:	e7f2      	b.n	801189e <__libc_init_array+0x1e>
 80118b8:	080188a8 	.word	0x080188a8
 80118bc:	080188a8 	.word	0x080188a8
 80118c0:	080188a8 	.word	0x080188a8
 80118c4:	080188ac 	.word	0x080188ac

080118c8 <malloc>:
 80118c8:	4b02      	ldr	r3, [pc, #8]	; (80118d4 <malloc+0xc>)
 80118ca:	4601      	mov	r1, r0
 80118cc:	6818      	ldr	r0, [r3, #0]
 80118ce:	f000 b877 	b.w	80119c0 <_malloc_r>
 80118d2:	bf00      	nop
 80118d4:	2000000c 	.word	0x2000000c

080118d8 <memset>:
 80118d8:	4402      	add	r2, r0
 80118da:	4603      	mov	r3, r0
 80118dc:	4293      	cmp	r3, r2
 80118de:	d100      	bne.n	80118e2 <memset+0xa>
 80118e0:	4770      	bx	lr
 80118e2:	f803 1b01 	strb.w	r1, [r3], #1
 80118e6:	e7f9      	b.n	80118dc <memset+0x4>

080118e8 <_free_r>:
 80118e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80118ea:	2900      	cmp	r1, #0
 80118ec:	d044      	beq.n	8011978 <_free_r+0x90>
 80118ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80118f2:	9001      	str	r0, [sp, #4]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	f1a1 0404 	sub.w	r4, r1, #4
 80118fa:	bfb8      	it	lt
 80118fc:	18e4      	addlt	r4, r4, r3
 80118fe:	f003 fad3 	bl	8014ea8 <__malloc_lock>
 8011902:	4a1e      	ldr	r2, [pc, #120]	; (801197c <_free_r+0x94>)
 8011904:	9801      	ldr	r0, [sp, #4]
 8011906:	6813      	ldr	r3, [r2, #0]
 8011908:	b933      	cbnz	r3, 8011918 <_free_r+0x30>
 801190a:	6063      	str	r3, [r4, #4]
 801190c:	6014      	str	r4, [r2, #0]
 801190e:	b003      	add	sp, #12
 8011910:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011914:	f003 bace 	b.w	8014eb4 <__malloc_unlock>
 8011918:	42a3      	cmp	r3, r4
 801191a:	d908      	bls.n	801192e <_free_r+0x46>
 801191c:	6825      	ldr	r5, [r4, #0]
 801191e:	1961      	adds	r1, r4, r5
 8011920:	428b      	cmp	r3, r1
 8011922:	bf01      	itttt	eq
 8011924:	6819      	ldreq	r1, [r3, #0]
 8011926:	685b      	ldreq	r3, [r3, #4]
 8011928:	1949      	addeq	r1, r1, r5
 801192a:	6021      	streq	r1, [r4, #0]
 801192c:	e7ed      	b.n	801190a <_free_r+0x22>
 801192e:	461a      	mov	r2, r3
 8011930:	685b      	ldr	r3, [r3, #4]
 8011932:	b10b      	cbz	r3, 8011938 <_free_r+0x50>
 8011934:	42a3      	cmp	r3, r4
 8011936:	d9fa      	bls.n	801192e <_free_r+0x46>
 8011938:	6811      	ldr	r1, [r2, #0]
 801193a:	1855      	adds	r5, r2, r1
 801193c:	42a5      	cmp	r5, r4
 801193e:	d10b      	bne.n	8011958 <_free_r+0x70>
 8011940:	6824      	ldr	r4, [r4, #0]
 8011942:	4421      	add	r1, r4
 8011944:	1854      	adds	r4, r2, r1
 8011946:	42a3      	cmp	r3, r4
 8011948:	6011      	str	r1, [r2, #0]
 801194a:	d1e0      	bne.n	801190e <_free_r+0x26>
 801194c:	681c      	ldr	r4, [r3, #0]
 801194e:	685b      	ldr	r3, [r3, #4]
 8011950:	6053      	str	r3, [r2, #4]
 8011952:	4421      	add	r1, r4
 8011954:	6011      	str	r1, [r2, #0]
 8011956:	e7da      	b.n	801190e <_free_r+0x26>
 8011958:	d902      	bls.n	8011960 <_free_r+0x78>
 801195a:	230c      	movs	r3, #12
 801195c:	6003      	str	r3, [r0, #0]
 801195e:	e7d6      	b.n	801190e <_free_r+0x26>
 8011960:	6825      	ldr	r5, [r4, #0]
 8011962:	1961      	adds	r1, r4, r5
 8011964:	428b      	cmp	r3, r1
 8011966:	bf04      	itt	eq
 8011968:	6819      	ldreq	r1, [r3, #0]
 801196a:	685b      	ldreq	r3, [r3, #4]
 801196c:	6063      	str	r3, [r4, #4]
 801196e:	bf04      	itt	eq
 8011970:	1949      	addeq	r1, r1, r5
 8011972:	6021      	streq	r1, [r4, #0]
 8011974:	6054      	str	r4, [r2, #4]
 8011976:	e7ca      	b.n	801190e <_free_r+0x26>
 8011978:	b003      	add	sp, #12
 801197a:	bd30      	pop	{r4, r5, pc}
 801197c:	20005808 	.word	0x20005808

08011980 <sbrk_aligned>:
 8011980:	b570      	push	{r4, r5, r6, lr}
 8011982:	4e0e      	ldr	r6, [pc, #56]	; (80119bc <sbrk_aligned+0x3c>)
 8011984:	460c      	mov	r4, r1
 8011986:	6831      	ldr	r1, [r6, #0]
 8011988:	4605      	mov	r5, r0
 801198a:	b911      	cbnz	r1, 8011992 <sbrk_aligned+0x12>
 801198c:	f000 ff78 	bl	8012880 <_sbrk_r>
 8011990:	6030      	str	r0, [r6, #0]
 8011992:	4621      	mov	r1, r4
 8011994:	4628      	mov	r0, r5
 8011996:	f000 ff73 	bl	8012880 <_sbrk_r>
 801199a:	1c43      	adds	r3, r0, #1
 801199c:	d00a      	beq.n	80119b4 <sbrk_aligned+0x34>
 801199e:	1cc4      	adds	r4, r0, #3
 80119a0:	f024 0403 	bic.w	r4, r4, #3
 80119a4:	42a0      	cmp	r0, r4
 80119a6:	d007      	beq.n	80119b8 <sbrk_aligned+0x38>
 80119a8:	1a21      	subs	r1, r4, r0
 80119aa:	4628      	mov	r0, r5
 80119ac:	f000 ff68 	bl	8012880 <_sbrk_r>
 80119b0:	3001      	adds	r0, #1
 80119b2:	d101      	bne.n	80119b8 <sbrk_aligned+0x38>
 80119b4:	f04f 34ff 	mov.w	r4, #4294967295
 80119b8:	4620      	mov	r0, r4
 80119ba:	bd70      	pop	{r4, r5, r6, pc}
 80119bc:	2000580c 	.word	0x2000580c

080119c0 <_malloc_r>:
 80119c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119c4:	1ccd      	adds	r5, r1, #3
 80119c6:	f025 0503 	bic.w	r5, r5, #3
 80119ca:	3508      	adds	r5, #8
 80119cc:	2d0c      	cmp	r5, #12
 80119ce:	bf38      	it	cc
 80119d0:	250c      	movcc	r5, #12
 80119d2:	2d00      	cmp	r5, #0
 80119d4:	4607      	mov	r7, r0
 80119d6:	db01      	blt.n	80119dc <_malloc_r+0x1c>
 80119d8:	42a9      	cmp	r1, r5
 80119da:	d905      	bls.n	80119e8 <_malloc_r+0x28>
 80119dc:	230c      	movs	r3, #12
 80119de:	603b      	str	r3, [r7, #0]
 80119e0:	2600      	movs	r6, #0
 80119e2:	4630      	mov	r0, r6
 80119e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119e8:	4e2e      	ldr	r6, [pc, #184]	; (8011aa4 <_malloc_r+0xe4>)
 80119ea:	f003 fa5d 	bl	8014ea8 <__malloc_lock>
 80119ee:	6833      	ldr	r3, [r6, #0]
 80119f0:	461c      	mov	r4, r3
 80119f2:	bb34      	cbnz	r4, 8011a42 <_malloc_r+0x82>
 80119f4:	4629      	mov	r1, r5
 80119f6:	4638      	mov	r0, r7
 80119f8:	f7ff ffc2 	bl	8011980 <sbrk_aligned>
 80119fc:	1c43      	adds	r3, r0, #1
 80119fe:	4604      	mov	r4, r0
 8011a00:	d14d      	bne.n	8011a9e <_malloc_r+0xde>
 8011a02:	6834      	ldr	r4, [r6, #0]
 8011a04:	4626      	mov	r6, r4
 8011a06:	2e00      	cmp	r6, #0
 8011a08:	d140      	bne.n	8011a8c <_malloc_r+0xcc>
 8011a0a:	6823      	ldr	r3, [r4, #0]
 8011a0c:	4631      	mov	r1, r6
 8011a0e:	4638      	mov	r0, r7
 8011a10:	eb04 0803 	add.w	r8, r4, r3
 8011a14:	f000 ff34 	bl	8012880 <_sbrk_r>
 8011a18:	4580      	cmp	r8, r0
 8011a1a:	d13a      	bne.n	8011a92 <_malloc_r+0xd2>
 8011a1c:	6821      	ldr	r1, [r4, #0]
 8011a1e:	3503      	adds	r5, #3
 8011a20:	1a6d      	subs	r5, r5, r1
 8011a22:	f025 0503 	bic.w	r5, r5, #3
 8011a26:	3508      	adds	r5, #8
 8011a28:	2d0c      	cmp	r5, #12
 8011a2a:	bf38      	it	cc
 8011a2c:	250c      	movcc	r5, #12
 8011a2e:	4629      	mov	r1, r5
 8011a30:	4638      	mov	r0, r7
 8011a32:	f7ff ffa5 	bl	8011980 <sbrk_aligned>
 8011a36:	3001      	adds	r0, #1
 8011a38:	d02b      	beq.n	8011a92 <_malloc_r+0xd2>
 8011a3a:	6823      	ldr	r3, [r4, #0]
 8011a3c:	442b      	add	r3, r5
 8011a3e:	6023      	str	r3, [r4, #0]
 8011a40:	e00e      	b.n	8011a60 <_malloc_r+0xa0>
 8011a42:	6822      	ldr	r2, [r4, #0]
 8011a44:	1b52      	subs	r2, r2, r5
 8011a46:	d41e      	bmi.n	8011a86 <_malloc_r+0xc6>
 8011a48:	2a0b      	cmp	r2, #11
 8011a4a:	d916      	bls.n	8011a7a <_malloc_r+0xba>
 8011a4c:	1961      	adds	r1, r4, r5
 8011a4e:	42a3      	cmp	r3, r4
 8011a50:	6025      	str	r5, [r4, #0]
 8011a52:	bf18      	it	ne
 8011a54:	6059      	strne	r1, [r3, #4]
 8011a56:	6863      	ldr	r3, [r4, #4]
 8011a58:	bf08      	it	eq
 8011a5a:	6031      	streq	r1, [r6, #0]
 8011a5c:	5162      	str	r2, [r4, r5]
 8011a5e:	604b      	str	r3, [r1, #4]
 8011a60:	4638      	mov	r0, r7
 8011a62:	f104 060b 	add.w	r6, r4, #11
 8011a66:	f003 fa25 	bl	8014eb4 <__malloc_unlock>
 8011a6a:	f026 0607 	bic.w	r6, r6, #7
 8011a6e:	1d23      	adds	r3, r4, #4
 8011a70:	1af2      	subs	r2, r6, r3
 8011a72:	d0b6      	beq.n	80119e2 <_malloc_r+0x22>
 8011a74:	1b9b      	subs	r3, r3, r6
 8011a76:	50a3      	str	r3, [r4, r2]
 8011a78:	e7b3      	b.n	80119e2 <_malloc_r+0x22>
 8011a7a:	6862      	ldr	r2, [r4, #4]
 8011a7c:	42a3      	cmp	r3, r4
 8011a7e:	bf0c      	ite	eq
 8011a80:	6032      	streq	r2, [r6, #0]
 8011a82:	605a      	strne	r2, [r3, #4]
 8011a84:	e7ec      	b.n	8011a60 <_malloc_r+0xa0>
 8011a86:	4623      	mov	r3, r4
 8011a88:	6864      	ldr	r4, [r4, #4]
 8011a8a:	e7b2      	b.n	80119f2 <_malloc_r+0x32>
 8011a8c:	4634      	mov	r4, r6
 8011a8e:	6876      	ldr	r6, [r6, #4]
 8011a90:	e7b9      	b.n	8011a06 <_malloc_r+0x46>
 8011a92:	230c      	movs	r3, #12
 8011a94:	603b      	str	r3, [r7, #0]
 8011a96:	4638      	mov	r0, r7
 8011a98:	f003 fa0c 	bl	8014eb4 <__malloc_unlock>
 8011a9c:	e7a1      	b.n	80119e2 <_malloc_r+0x22>
 8011a9e:	6025      	str	r5, [r4, #0]
 8011aa0:	e7de      	b.n	8011a60 <_malloc_r+0xa0>
 8011aa2:	bf00      	nop
 8011aa4:	20005808 	.word	0x20005808

08011aa8 <__cvt>:
 8011aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011aaa:	ed2d 8b02 	vpush	{d8}
 8011aae:	eeb0 8b40 	vmov.f64	d8, d0
 8011ab2:	b085      	sub	sp, #20
 8011ab4:	4617      	mov	r7, r2
 8011ab6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011ab8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011aba:	ee18 2a90 	vmov	r2, s17
 8011abe:	f025 0520 	bic.w	r5, r5, #32
 8011ac2:	2a00      	cmp	r2, #0
 8011ac4:	bfb6      	itet	lt
 8011ac6:	222d      	movlt	r2, #45	; 0x2d
 8011ac8:	2200      	movge	r2, #0
 8011aca:	eeb1 8b40 	vneglt.f64	d8, d0
 8011ace:	2d46      	cmp	r5, #70	; 0x46
 8011ad0:	460c      	mov	r4, r1
 8011ad2:	701a      	strb	r2, [r3, #0]
 8011ad4:	d004      	beq.n	8011ae0 <__cvt+0x38>
 8011ad6:	2d45      	cmp	r5, #69	; 0x45
 8011ad8:	d100      	bne.n	8011adc <__cvt+0x34>
 8011ada:	3401      	adds	r4, #1
 8011adc:	2102      	movs	r1, #2
 8011ade:	e000      	b.n	8011ae2 <__cvt+0x3a>
 8011ae0:	2103      	movs	r1, #3
 8011ae2:	ab03      	add	r3, sp, #12
 8011ae4:	9301      	str	r3, [sp, #4]
 8011ae6:	ab02      	add	r3, sp, #8
 8011ae8:	9300      	str	r3, [sp, #0]
 8011aea:	4622      	mov	r2, r4
 8011aec:	4633      	mov	r3, r6
 8011aee:	eeb0 0b48 	vmov.f64	d0, d8
 8011af2:	f001 feb9 	bl	8013868 <_dtoa_r>
 8011af6:	2d47      	cmp	r5, #71	; 0x47
 8011af8:	d101      	bne.n	8011afe <__cvt+0x56>
 8011afa:	07fb      	lsls	r3, r7, #31
 8011afc:	d51a      	bpl.n	8011b34 <__cvt+0x8c>
 8011afe:	2d46      	cmp	r5, #70	; 0x46
 8011b00:	eb00 0204 	add.w	r2, r0, r4
 8011b04:	d10c      	bne.n	8011b20 <__cvt+0x78>
 8011b06:	7803      	ldrb	r3, [r0, #0]
 8011b08:	2b30      	cmp	r3, #48	; 0x30
 8011b0a:	d107      	bne.n	8011b1c <__cvt+0x74>
 8011b0c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b14:	bf1c      	itt	ne
 8011b16:	f1c4 0401 	rsbne	r4, r4, #1
 8011b1a:	6034      	strne	r4, [r6, #0]
 8011b1c:	6833      	ldr	r3, [r6, #0]
 8011b1e:	441a      	add	r2, r3
 8011b20:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b28:	bf08      	it	eq
 8011b2a:	9203      	streq	r2, [sp, #12]
 8011b2c:	2130      	movs	r1, #48	; 0x30
 8011b2e:	9b03      	ldr	r3, [sp, #12]
 8011b30:	4293      	cmp	r3, r2
 8011b32:	d307      	bcc.n	8011b44 <__cvt+0x9c>
 8011b34:	9b03      	ldr	r3, [sp, #12]
 8011b36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011b38:	1a1b      	subs	r3, r3, r0
 8011b3a:	6013      	str	r3, [r2, #0]
 8011b3c:	b005      	add	sp, #20
 8011b3e:	ecbd 8b02 	vpop	{d8}
 8011b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b44:	1c5c      	adds	r4, r3, #1
 8011b46:	9403      	str	r4, [sp, #12]
 8011b48:	7019      	strb	r1, [r3, #0]
 8011b4a:	e7f0      	b.n	8011b2e <__cvt+0x86>

08011b4c <__exponent>:
 8011b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b4e:	4603      	mov	r3, r0
 8011b50:	2900      	cmp	r1, #0
 8011b52:	bfb8      	it	lt
 8011b54:	4249      	neglt	r1, r1
 8011b56:	f803 2b02 	strb.w	r2, [r3], #2
 8011b5a:	bfb4      	ite	lt
 8011b5c:	222d      	movlt	r2, #45	; 0x2d
 8011b5e:	222b      	movge	r2, #43	; 0x2b
 8011b60:	2909      	cmp	r1, #9
 8011b62:	7042      	strb	r2, [r0, #1]
 8011b64:	dd2a      	ble.n	8011bbc <__exponent+0x70>
 8011b66:	f10d 0407 	add.w	r4, sp, #7
 8011b6a:	46a4      	mov	ip, r4
 8011b6c:	270a      	movs	r7, #10
 8011b6e:	46a6      	mov	lr, r4
 8011b70:	460a      	mov	r2, r1
 8011b72:	fb91 f6f7 	sdiv	r6, r1, r7
 8011b76:	fb07 1516 	mls	r5, r7, r6, r1
 8011b7a:	3530      	adds	r5, #48	; 0x30
 8011b7c:	2a63      	cmp	r2, #99	; 0x63
 8011b7e:	f104 34ff 	add.w	r4, r4, #4294967295
 8011b82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011b86:	4631      	mov	r1, r6
 8011b88:	dcf1      	bgt.n	8011b6e <__exponent+0x22>
 8011b8a:	3130      	adds	r1, #48	; 0x30
 8011b8c:	f1ae 0502 	sub.w	r5, lr, #2
 8011b90:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011b94:	1c44      	adds	r4, r0, #1
 8011b96:	4629      	mov	r1, r5
 8011b98:	4561      	cmp	r1, ip
 8011b9a:	d30a      	bcc.n	8011bb2 <__exponent+0x66>
 8011b9c:	f10d 0209 	add.w	r2, sp, #9
 8011ba0:	eba2 020e 	sub.w	r2, r2, lr
 8011ba4:	4565      	cmp	r5, ip
 8011ba6:	bf88      	it	hi
 8011ba8:	2200      	movhi	r2, #0
 8011baa:	4413      	add	r3, r2
 8011bac:	1a18      	subs	r0, r3, r0
 8011bae:	b003      	add	sp, #12
 8011bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011bb6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011bba:	e7ed      	b.n	8011b98 <__exponent+0x4c>
 8011bbc:	2330      	movs	r3, #48	; 0x30
 8011bbe:	3130      	adds	r1, #48	; 0x30
 8011bc0:	7083      	strb	r3, [r0, #2]
 8011bc2:	70c1      	strb	r1, [r0, #3]
 8011bc4:	1d03      	adds	r3, r0, #4
 8011bc6:	e7f1      	b.n	8011bac <__exponent+0x60>

08011bc8 <_printf_float>:
 8011bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bcc:	b08b      	sub	sp, #44	; 0x2c
 8011bce:	460c      	mov	r4, r1
 8011bd0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8011bd4:	4616      	mov	r6, r2
 8011bd6:	461f      	mov	r7, r3
 8011bd8:	4605      	mov	r5, r0
 8011bda:	f003 f8d9 	bl	8014d90 <_localeconv_r>
 8011bde:	f8d0 b000 	ldr.w	fp, [r0]
 8011be2:	4658      	mov	r0, fp
 8011be4:	f7ee fb36 	bl	8000254 <strlen>
 8011be8:	2300      	movs	r3, #0
 8011bea:	9308      	str	r3, [sp, #32]
 8011bec:	f8d8 3000 	ldr.w	r3, [r8]
 8011bf0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011bf4:	6822      	ldr	r2, [r4, #0]
 8011bf6:	3307      	adds	r3, #7
 8011bf8:	f023 0307 	bic.w	r3, r3, #7
 8011bfc:	f103 0108 	add.w	r1, r3, #8
 8011c00:	f8c8 1000 	str.w	r1, [r8]
 8011c04:	4682      	mov	sl, r0
 8011c06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011c0a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8011c0e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8011e70 <_printf_float+0x2a8>
 8011c12:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8011c16:	eeb0 6bc0 	vabs.f64	d6, d0
 8011c1a:	eeb4 6b47 	vcmp.f64	d6, d7
 8011c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c22:	dd24      	ble.n	8011c6e <_printf_float+0xa6>
 8011c24:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c2c:	d502      	bpl.n	8011c34 <_printf_float+0x6c>
 8011c2e:	232d      	movs	r3, #45	; 0x2d
 8011c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011c34:	4b90      	ldr	r3, [pc, #576]	; (8011e78 <_printf_float+0x2b0>)
 8011c36:	4891      	ldr	r0, [pc, #580]	; (8011e7c <_printf_float+0x2b4>)
 8011c38:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011c3c:	bf94      	ite	ls
 8011c3e:	4698      	movls	r8, r3
 8011c40:	4680      	movhi	r8, r0
 8011c42:	2303      	movs	r3, #3
 8011c44:	6123      	str	r3, [r4, #16]
 8011c46:	f022 0204 	bic.w	r2, r2, #4
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	6022      	str	r2, [r4, #0]
 8011c4e:	9304      	str	r3, [sp, #16]
 8011c50:	9700      	str	r7, [sp, #0]
 8011c52:	4633      	mov	r3, r6
 8011c54:	aa09      	add	r2, sp, #36	; 0x24
 8011c56:	4621      	mov	r1, r4
 8011c58:	4628      	mov	r0, r5
 8011c5a:	f000 f9d3 	bl	8012004 <_printf_common>
 8011c5e:	3001      	adds	r0, #1
 8011c60:	f040 808a 	bne.w	8011d78 <_printf_float+0x1b0>
 8011c64:	f04f 30ff 	mov.w	r0, #4294967295
 8011c68:	b00b      	add	sp, #44	; 0x2c
 8011c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c6e:	eeb4 0b40 	vcmp.f64	d0, d0
 8011c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c76:	d709      	bvc.n	8011c8c <_printf_float+0xc4>
 8011c78:	ee10 3a90 	vmov	r3, s1
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	bfbc      	itt	lt
 8011c80:	232d      	movlt	r3, #45	; 0x2d
 8011c82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011c86:	487e      	ldr	r0, [pc, #504]	; (8011e80 <_printf_float+0x2b8>)
 8011c88:	4b7e      	ldr	r3, [pc, #504]	; (8011e84 <_printf_float+0x2bc>)
 8011c8a:	e7d5      	b.n	8011c38 <_printf_float+0x70>
 8011c8c:	6863      	ldr	r3, [r4, #4]
 8011c8e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8011c92:	9104      	str	r1, [sp, #16]
 8011c94:	1c59      	adds	r1, r3, #1
 8011c96:	d13c      	bne.n	8011d12 <_printf_float+0x14a>
 8011c98:	2306      	movs	r3, #6
 8011c9a:	6063      	str	r3, [r4, #4]
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	9303      	str	r3, [sp, #12]
 8011ca0:	ab08      	add	r3, sp, #32
 8011ca2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8011ca6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011caa:	ab07      	add	r3, sp, #28
 8011cac:	6861      	ldr	r1, [r4, #4]
 8011cae:	9300      	str	r3, [sp, #0]
 8011cb0:	6022      	str	r2, [r4, #0]
 8011cb2:	f10d 031b 	add.w	r3, sp, #27
 8011cb6:	4628      	mov	r0, r5
 8011cb8:	f7ff fef6 	bl	8011aa8 <__cvt>
 8011cbc:	9b04      	ldr	r3, [sp, #16]
 8011cbe:	9907      	ldr	r1, [sp, #28]
 8011cc0:	2b47      	cmp	r3, #71	; 0x47
 8011cc2:	4680      	mov	r8, r0
 8011cc4:	d108      	bne.n	8011cd8 <_printf_float+0x110>
 8011cc6:	1cc8      	adds	r0, r1, #3
 8011cc8:	db02      	blt.n	8011cd0 <_printf_float+0x108>
 8011cca:	6863      	ldr	r3, [r4, #4]
 8011ccc:	4299      	cmp	r1, r3
 8011cce:	dd41      	ble.n	8011d54 <_printf_float+0x18c>
 8011cd0:	f1a9 0902 	sub.w	r9, r9, #2
 8011cd4:	fa5f f989 	uxtb.w	r9, r9
 8011cd8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011cdc:	d820      	bhi.n	8011d20 <_printf_float+0x158>
 8011cde:	3901      	subs	r1, #1
 8011ce0:	464a      	mov	r2, r9
 8011ce2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011ce6:	9107      	str	r1, [sp, #28]
 8011ce8:	f7ff ff30 	bl	8011b4c <__exponent>
 8011cec:	9a08      	ldr	r2, [sp, #32]
 8011cee:	9004      	str	r0, [sp, #16]
 8011cf0:	1813      	adds	r3, r2, r0
 8011cf2:	2a01      	cmp	r2, #1
 8011cf4:	6123      	str	r3, [r4, #16]
 8011cf6:	dc02      	bgt.n	8011cfe <_printf_float+0x136>
 8011cf8:	6822      	ldr	r2, [r4, #0]
 8011cfa:	07d2      	lsls	r2, r2, #31
 8011cfc:	d501      	bpl.n	8011d02 <_printf_float+0x13a>
 8011cfe:	3301      	adds	r3, #1
 8011d00:	6123      	str	r3, [r4, #16]
 8011d02:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d0a2      	beq.n	8011c50 <_printf_float+0x88>
 8011d0a:	232d      	movs	r3, #45	; 0x2d
 8011d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d10:	e79e      	b.n	8011c50 <_printf_float+0x88>
 8011d12:	9904      	ldr	r1, [sp, #16]
 8011d14:	2947      	cmp	r1, #71	; 0x47
 8011d16:	d1c1      	bne.n	8011c9c <_printf_float+0xd4>
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d1bf      	bne.n	8011c9c <_printf_float+0xd4>
 8011d1c:	2301      	movs	r3, #1
 8011d1e:	e7bc      	b.n	8011c9a <_printf_float+0xd2>
 8011d20:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011d24:	d118      	bne.n	8011d58 <_printf_float+0x190>
 8011d26:	2900      	cmp	r1, #0
 8011d28:	6863      	ldr	r3, [r4, #4]
 8011d2a:	dd0b      	ble.n	8011d44 <_printf_float+0x17c>
 8011d2c:	6121      	str	r1, [r4, #16]
 8011d2e:	b913      	cbnz	r3, 8011d36 <_printf_float+0x16e>
 8011d30:	6822      	ldr	r2, [r4, #0]
 8011d32:	07d0      	lsls	r0, r2, #31
 8011d34:	d502      	bpl.n	8011d3c <_printf_float+0x174>
 8011d36:	3301      	adds	r3, #1
 8011d38:	440b      	add	r3, r1
 8011d3a:	6123      	str	r3, [r4, #16]
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8011d40:	9304      	str	r3, [sp, #16]
 8011d42:	e7de      	b.n	8011d02 <_printf_float+0x13a>
 8011d44:	b913      	cbnz	r3, 8011d4c <_printf_float+0x184>
 8011d46:	6822      	ldr	r2, [r4, #0]
 8011d48:	07d2      	lsls	r2, r2, #31
 8011d4a:	d501      	bpl.n	8011d50 <_printf_float+0x188>
 8011d4c:	3302      	adds	r3, #2
 8011d4e:	e7f4      	b.n	8011d3a <_printf_float+0x172>
 8011d50:	2301      	movs	r3, #1
 8011d52:	e7f2      	b.n	8011d3a <_printf_float+0x172>
 8011d54:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011d58:	9b08      	ldr	r3, [sp, #32]
 8011d5a:	4299      	cmp	r1, r3
 8011d5c:	db05      	blt.n	8011d6a <_printf_float+0x1a2>
 8011d5e:	6823      	ldr	r3, [r4, #0]
 8011d60:	6121      	str	r1, [r4, #16]
 8011d62:	07d8      	lsls	r0, r3, #31
 8011d64:	d5ea      	bpl.n	8011d3c <_printf_float+0x174>
 8011d66:	1c4b      	adds	r3, r1, #1
 8011d68:	e7e7      	b.n	8011d3a <_printf_float+0x172>
 8011d6a:	2900      	cmp	r1, #0
 8011d6c:	bfd4      	ite	le
 8011d6e:	f1c1 0202 	rsble	r2, r1, #2
 8011d72:	2201      	movgt	r2, #1
 8011d74:	4413      	add	r3, r2
 8011d76:	e7e0      	b.n	8011d3a <_printf_float+0x172>
 8011d78:	6823      	ldr	r3, [r4, #0]
 8011d7a:	055a      	lsls	r2, r3, #21
 8011d7c:	d407      	bmi.n	8011d8e <_printf_float+0x1c6>
 8011d7e:	6923      	ldr	r3, [r4, #16]
 8011d80:	4642      	mov	r2, r8
 8011d82:	4631      	mov	r1, r6
 8011d84:	4628      	mov	r0, r5
 8011d86:	47b8      	blx	r7
 8011d88:	3001      	adds	r0, #1
 8011d8a:	d12a      	bne.n	8011de2 <_printf_float+0x21a>
 8011d8c:	e76a      	b.n	8011c64 <_printf_float+0x9c>
 8011d8e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011d92:	f240 80e2 	bls.w	8011f5a <_printf_float+0x392>
 8011d96:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011d9a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011da2:	d133      	bne.n	8011e0c <_printf_float+0x244>
 8011da4:	4a38      	ldr	r2, [pc, #224]	; (8011e88 <_printf_float+0x2c0>)
 8011da6:	2301      	movs	r3, #1
 8011da8:	4631      	mov	r1, r6
 8011daa:	4628      	mov	r0, r5
 8011dac:	47b8      	blx	r7
 8011dae:	3001      	adds	r0, #1
 8011db0:	f43f af58 	beq.w	8011c64 <_printf_float+0x9c>
 8011db4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011db8:	429a      	cmp	r2, r3
 8011dba:	db02      	blt.n	8011dc2 <_printf_float+0x1fa>
 8011dbc:	6823      	ldr	r3, [r4, #0]
 8011dbe:	07d8      	lsls	r0, r3, #31
 8011dc0:	d50f      	bpl.n	8011de2 <_printf_float+0x21a>
 8011dc2:	4653      	mov	r3, sl
 8011dc4:	465a      	mov	r2, fp
 8011dc6:	4631      	mov	r1, r6
 8011dc8:	4628      	mov	r0, r5
 8011dca:	47b8      	blx	r7
 8011dcc:	3001      	adds	r0, #1
 8011dce:	f43f af49 	beq.w	8011c64 <_printf_float+0x9c>
 8011dd2:	f04f 0800 	mov.w	r8, #0
 8011dd6:	f104 091a 	add.w	r9, r4, #26
 8011dda:	9b08      	ldr	r3, [sp, #32]
 8011ddc:	3b01      	subs	r3, #1
 8011dde:	4543      	cmp	r3, r8
 8011de0:	dc09      	bgt.n	8011df6 <_printf_float+0x22e>
 8011de2:	6823      	ldr	r3, [r4, #0]
 8011de4:	079b      	lsls	r3, r3, #30
 8011de6:	f100 8108 	bmi.w	8011ffa <_printf_float+0x432>
 8011dea:	68e0      	ldr	r0, [r4, #12]
 8011dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011dee:	4298      	cmp	r0, r3
 8011df0:	bfb8      	it	lt
 8011df2:	4618      	movlt	r0, r3
 8011df4:	e738      	b.n	8011c68 <_printf_float+0xa0>
 8011df6:	2301      	movs	r3, #1
 8011df8:	464a      	mov	r2, r9
 8011dfa:	4631      	mov	r1, r6
 8011dfc:	4628      	mov	r0, r5
 8011dfe:	47b8      	blx	r7
 8011e00:	3001      	adds	r0, #1
 8011e02:	f43f af2f 	beq.w	8011c64 <_printf_float+0x9c>
 8011e06:	f108 0801 	add.w	r8, r8, #1
 8011e0a:	e7e6      	b.n	8011dda <_printf_float+0x212>
 8011e0c:	9b07      	ldr	r3, [sp, #28]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	dc3c      	bgt.n	8011e8c <_printf_float+0x2c4>
 8011e12:	4a1d      	ldr	r2, [pc, #116]	; (8011e88 <_printf_float+0x2c0>)
 8011e14:	2301      	movs	r3, #1
 8011e16:	4631      	mov	r1, r6
 8011e18:	4628      	mov	r0, r5
 8011e1a:	47b8      	blx	r7
 8011e1c:	3001      	adds	r0, #1
 8011e1e:	f43f af21 	beq.w	8011c64 <_printf_float+0x9c>
 8011e22:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011e26:	4313      	orrs	r3, r2
 8011e28:	d102      	bne.n	8011e30 <_printf_float+0x268>
 8011e2a:	6823      	ldr	r3, [r4, #0]
 8011e2c:	07d9      	lsls	r1, r3, #31
 8011e2e:	d5d8      	bpl.n	8011de2 <_printf_float+0x21a>
 8011e30:	4653      	mov	r3, sl
 8011e32:	465a      	mov	r2, fp
 8011e34:	4631      	mov	r1, r6
 8011e36:	4628      	mov	r0, r5
 8011e38:	47b8      	blx	r7
 8011e3a:	3001      	adds	r0, #1
 8011e3c:	f43f af12 	beq.w	8011c64 <_printf_float+0x9c>
 8011e40:	f04f 0900 	mov.w	r9, #0
 8011e44:	f104 0a1a 	add.w	sl, r4, #26
 8011e48:	9b07      	ldr	r3, [sp, #28]
 8011e4a:	425b      	negs	r3, r3
 8011e4c:	454b      	cmp	r3, r9
 8011e4e:	dc01      	bgt.n	8011e54 <_printf_float+0x28c>
 8011e50:	9b08      	ldr	r3, [sp, #32]
 8011e52:	e795      	b.n	8011d80 <_printf_float+0x1b8>
 8011e54:	2301      	movs	r3, #1
 8011e56:	4652      	mov	r2, sl
 8011e58:	4631      	mov	r1, r6
 8011e5a:	4628      	mov	r0, r5
 8011e5c:	47b8      	blx	r7
 8011e5e:	3001      	adds	r0, #1
 8011e60:	f43f af00 	beq.w	8011c64 <_printf_float+0x9c>
 8011e64:	f109 0901 	add.w	r9, r9, #1
 8011e68:	e7ee      	b.n	8011e48 <_printf_float+0x280>
 8011e6a:	bf00      	nop
 8011e6c:	f3af 8000 	nop.w
 8011e70:	ffffffff 	.word	0xffffffff
 8011e74:	7fefffff 	.word	0x7fefffff
 8011e78:	08016b3c 	.word	0x08016b3c
 8011e7c:	08016b40 	.word	0x08016b40
 8011e80:	08016b48 	.word	0x08016b48
 8011e84:	08016b44 	.word	0x08016b44
 8011e88:	08016b4c 	.word	0x08016b4c
 8011e8c:	9a08      	ldr	r2, [sp, #32]
 8011e8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011e90:	429a      	cmp	r2, r3
 8011e92:	bfa8      	it	ge
 8011e94:	461a      	movge	r2, r3
 8011e96:	2a00      	cmp	r2, #0
 8011e98:	4691      	mov	r9, r2
 8011e9a:	dc38      	bgt.n	8011f0e <_printf_float+0x346>
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	9305      	str	r3, [sp, #20]
 8011ea0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011ea4:	f104 021a 	add.w	r2, r4, #26
 8011ea8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011eaa:	9905      	ldr	r1, [sp, #20]
 8011eac:	9304      	str	r3, [sp, #16]
 8011eae:	eba3 0309 	sub.w	r3, r3, r9
 8011eb2:	428b      	cmp	r3, r1
 8011eb4:	dc33      	bgt.n	8011f1e <_printf_float+0x356>
 8011eb6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011eba:	429a      	cmp	r2, r3
 8011ebc:	db3c      	blt.n	8011f38 <_printf_float+0x370>
 8011ebe:	6823      	ldr	r3, [r4, #0]
 8011ec0:	07da      	lsls	r2, r3, #31
 8011ec2:	d439      	bmi.n	8011f38 <_printf_float+0x370>
 8011ec4:	9b08      	ldr	r3, [sp, #32]
 8011ec6:	9a04      	ldr	r2, [sp, #16]
 8011ec8:	9907      	ldr	r1, [sp, #28]
 8011eca:	1a9a      	subs	r2, r3, r2
 8011ecc:	eba3 0901 	sub.w	r9, r3, r1
 8011ed0:	4591      	cmp	r9, r2
 8011ed2:	bfa8      	it	ge
 8011ed4:	4691      	movge	r9, r2
 8011ed6:	f1b9 0f00 	cmp.w	r9, #0
 8011eda:	dc35      	bgt.n	8011f48 <_printf_float+0x380>
 8011edc:	f04f 0800 	mov.w	r8, #0
 8011ee0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011ee4:	f104 0a1a 	add.w	sl, r4, #26
 8011ee8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011eec:	1a9b      	subs	r3, r3, r2
 8011eee:	eba3 0309 	sub.w	r3, r3, r9
 8011ef2:	4543      	cmp	r3, r8
 8011ef4:	f77f af75 	ble.w	8011de2 <_printf_float+0x21a>
 8011ef8:	2301      	movs	r3, #1
 8011efa:	4652      	mov	r2, sl
 8011efc:	4631      	mov	r1, r6
 8011efe:	4628      	mov	r0, r5
 8011f00:	47b8      	blx	r7
 8011f02:	3001      	adds	r0, #1
 8011f04:	f43f aeae 	beq.w	8011c64 <_printf_float+0x9c>
 8011f08:	f108 0801 	add.w	r8, r8, #1
 8011f0c:	e7ec      	b.n	8011ee8 <_printf_float+0x320>
 8011f0e:	4613      	mov	r3, r2
 8011f10:	4631      	mov	r1, r6
 8011f12:	4642      	mov	r2, r8
 8011f14:	4628      	mov	r0, r5
 8011f16:	47b8      	blx	r7
 8011f18:	3001      	adds	r0, #1
 8011f1a:	d1bf      	bne.n	8011e9c <_printf_float+0x2d4>
 8011f1c:	e6a2      	b.n	8011c64 <_printf_float+0x9c>
 8011f1e:	2301      	movs	r3, #1
 8011f20:	4631      	mov	r1, r6
 8011f22:	4628      	mov	r0, r5
 8011f24:	9204      	str	r2, [sp, #16]
 8011f26:	47b8      	blx	r7
 8011f28:	3001      	adds	r0, #1
 8011f2a:	f43f ae9b 	beq.w	8011c64 <_printf_float+0x9c>
 8011f2e:	9b05      	ldr	r3, [sp, #20]
 8011f30:	9a04      	ldr	r2, [sp, #16]
 8011f32:	3301      	adds	r3, #1
 8011f34:	9305      	str	r3, [sp, #20]
 8011f36:	e7b7      	b.n	8011ea8 <_printf_float+0x2e0>
 8011f38:	4653      	mov	r3, sl
 8011f3a:	465a      	mov	r2, fp
 8011f3c:	4631      	mov	r1, r6
 8011f3e:	4628      	mov	r0, r5
 8011f40:	47b8      	blx	r7
 8011f42:	3001      	adds	r0, #1
 8011f44:	d1be      	bne.n	8011ec4 <_printf_float+0x2fc>
 8011f46:	e68d      	b.n	8011c64 <_printf_float+0x9c>
 8011f48:	9a04      	ldr	r2, [sp, #16]
 8011f4a:	464b      	mov	r3, r9
 8011f4c:	4442      	add	r2, r8
 8011f4e:	4631      	mov	r1, r6
 8011f50:	4628      	mov	r0, r5
 8011f52:	47b8      	blx	r7
 8011f54:	3001      	adds	r0, #1
 8011f56:	d1c1      	bne.n	8011edc <_printf_float+0x314>
 8011f58:	e684      	b.n	8011c64 <_printf_float+0x9c>
 8011f5a:	9a08      	ldr	r2, [sp, #32]
 8011f5c:	2a01      	cmp	r2, #1
 8011f5e:	dc01      	bgt.n	8011f64 <_printf_float+0x39c>
 8011f60:	07db      	lsls	r3, r3, #31
 8011f62:	d537      	bpl.n	8011fd4 <_printf_float+0x40c>
 8011f64:	2301      	movs	r3, #1
 8011f66:	4642      	mov	r2, r8
 8011f68:	4631      	mov	r1, r6
 8011f6a:	4628      	mov	r0, r5
 8011f6c:	47b8      	blx	r7
 8011f6e:	3001      	adds	r0, #1
 8011f70:	f43f ae78 	beq.w	8011c64 <_printf_float+0x9c>
 8011f74:	4653      	mov	r3, sl
 8011f76:	465a      	mov	r2, fp
 8011f78:	4631      	mov	r1, r6
 8011f7a:	4628      	mov	r0, r5
 8011f7c:	47b8      	blx	r7
 8011f7e:	3001      	adds	r0, #1
 8011f80:	f43f ae70 	beq.w	8011c64 <_printf_float+0x9c>
 8011f84:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011f88:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f90:	d01b      	beq.n	8011fca <_printf_float+0x402>
 8011f92:	9b08      	ldr	r3, [sp, #32]
 8011f94:	f108 0201 	add.w	r2, r8, #1
 8011f98:	3b01      	subs	r3, #1
 8011f9a:	4631      	mov	r1, r6
 8011f9c:	4628      	mov	r0, r5
 8011f9e:	47b8      	blx	r7
 8011fa0:	3001      	adds	r0, #1
 8011fa2:	d10e      	bne.n	8011fc2 <_printf_float+0x3fa>
 8011fa4:	e65e      	b.n	8011c64 <_printf_float+0x9c>
 8011fa6:	2301      	movs	r3, #1
 8011fa8:	464a      	mov	r2, r9
 8011faa:	4631      	mov	r1, r6
 8011fac:	4628      	mov	r0, r5
 8011fae:	47b8      	blx	r7
 8011fb0:	3001      	adds	r0, #1
 8011fb2:	f43f ae57 	beq.w	8011c64 <_printf_float+0x9c>
 8011fb6:	f108 0801 	add.w	r8, r8, #1
 8011fba:	9b08      	ldr	r3, [sp, #32]
 8011fbc:	3b01      	subs	r3, #1
 8011fbe:	4543      	cmp	r3, r8
 8011fc0:	dcf1      	bgt.n	8011fa6 <_printf_float+0x3de>
 8011fc2:	9b04      	ldr	r3, [sp, #16]
 8011fc4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011fc8:	e6db      	b.n	8011d82 <_printf_float+0x1ba>
 8011fca:	f04f 0800 	mov.w	r8, #0
 8011fce:	f104 091a 	add.w	r9, r4, #26
 8011fd2:	e7f2      	b.n	8011fba <_printf_float+0x3f2>
 8011fd4:	2301      	movs	r3, #1
 8011fd6:	4642      	mov	r2, r8
 8011fd8:	e7df      	b.n	8011f9a <_printf_float+0x3d2>
 8011fda:	2301      	movs	r3, #1
 8011fdc:	464a      	mov	r2, r9
 8011fde:	4631      	mov	r1, r6
 8011fe0:	4628      	mov	r0, r5
 8011fe2:	47b8      	blx	r7
 8011fe4:	3001      	adds	r0, #1
 8011fe6:	f43f ae3d 	beq.w	8011c64 <_printf_float+0x9c>
 8011fea:	f108 0801 	add.w	r8, r8, #1
 8011fee:	68e3      	ldr	r3, [r4, #12]
 8011ff0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011ff2:	1a5b      	subs	r3, r3, r1
 8011ff4:	4543      	cmp	r3, r8
 8011ff6:	dcf0      	bgt.n	8011fda <_printf_float+0x412>
 8011ff8:	e6f7      	b.n	8011dea <_printf_float+0x222>
 8011ffa:	f04f 0800 	mov.w	r8, #0
 8011ffe:	f104 0919 	add.w	r9, r4, #25
 8012002:	e7f4      	b.n	8011fee <_printf_float+0x426>

08012004 <_printf_common>:
 8012004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012008:	4616      	mov	r6, r2
 801200a:	4699      	mov	r9, r3
 801200c:	688a      	ldr	r2, [r1, #8]
 801200e:	690b      	ldr	r3, [r1, #16]
 8012010:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012014:	4293      	cmp	r3, r2
 8012016:	bfb8      	it	lt
 8012018:	4613      	movlt	r3, r2
 801201a:	6033      	str	r3, [r6, #0]
 801201c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012020:	4607      	mov	r7, r0
 8012022:	460c      	mov	r4, r1
 8012024:	b10a      	cbz	r2, 801202a <_printf_common+0x26>
 8012026:	3301      	adds	r3, #1
 8012028:	6033      	str	r3, [r6, #0]
 801202a:	6823      	ldr	r3, [r4, #0]
 801202c:	0699      	lsls	r1, r3, #26
 801202e:	bf42      	ittt	mi
 8012030:	6833      	ldrmi	r3, [r6, #0]
 8012032:	3302      	addmi	r3, #2
 8012034:	6033      	strmi	r3, [r6, #0]
 8012036:	6825      	ldr	r5, [r4, #0]
 8012038:	f015 0506 	ands.w	r5, r5, #6
 801203c:	d106      	bne.n	801204c <_printf_common+0x48>
 801203e:	f104 0a19 	add.w	sl, r4, #25
 8012042:	68e3      	ldr	r3, [r4, #12]
 8012044:	6832      	ldr	r2, [r6, #0]
 8012046:	1a9b      	subs	r3, r3, r2
 8012048:	42ab      	cmp	r3, r5
 801204a:	dc26      	bgt.n	801209a <_printf_common+0x96>
 801204c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012050:	1e13      	subs	r3, r2, #0
 8012052:	6822      	ldr	r2, [r4, #0]
 8012054:	bf18      	it	ne
 8012056:	2301      	movne	r3, #1
 8012058:	0692      	lsls	r2, r2, #26
 801205a:	d42b      	bmi.n	80120b4 <_printf_common+0xb0>
 801205c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012060:	4649      	mov	r1, r9
 8012062:	4638      	mov	r0, r7
 8012064:	47c0      	blx	r8
 8012066:	3001      	adds	r0, #1
 8012068:	d01e      	beq.n	80120a8 <_printf_common+0xa4>
 801206a:	6823      	ldr	r3, [r4, #0]
 801206c:	68e5      	ldr	r5, [r4, #12]
 801206e:	6832      	ldr	r2, [r6, #0]
 8012070:	f003 0306 	and.w	r3, r3, #6
 8012074:	2b04      	cmp	r3, #4
 8012076:	bf08      	it	eq
 8012078:	1aad      	subeq	r5, r5, r2
 801207a:	68a3      	ldr	r3, [r4, #8]
 801207c:	6922      	ldr	r2, [r4, #16]
 801207e:	bf0c      	ite	eq
 8012080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012084:	2500      	movne	r5, #0
 8012086:	4293      	cmp	r3, r2
 8012088:	bfc4      	itt	gt
 801208a:	1a9b      	subgt	r3, r3, r2
 801208c:	18ed      	addgt	r5, r5, r3
 801208e:	2600      	movs	r6, #0
 8012090:	341a      	adds	r4, #26
 8012092:	42b5      	cmp	r5, r6
 8012094:	d11a      	bne.n	80120cc <_printf_common+0xc8>
 8012096:	2000      	movs	r0, #0
 8012098:	e008      	b.n	80120ac <_printf_common+0xa8>
 801209a:	2301      	movs	r3, #1
 801209c:	4652      	mov	r2, sl
 801209e:	4649      	mov	r1, r9
 80120a0:	4638      	mov	r0, r7
 80120a2:	47c0      	blx	r8
 80120a4:	3001      	adds	r0, #1
 80120a6:	d103      	bne.n	80120b0 <_printf_common+0xac>
 80120a8:	f04f 30ff 	mov.w	r0, #4294967295
 80120ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120b0:	3501      	adds	r5, #1
 80120b2:	e7c6      	b.n	8012042 <_printf_common+0x3e>
 80120b4:	18e1      	adds	r1, r4, r3
 80120b6:	1c5a      	adds	r2, r3, #1
 80120b8:	2030      	movs	r0, #48	; 0x30
 80120ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80120be:	4422      	add	r2, r4
 80120c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80120c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80120c8:	3302      	adds	r3, #2
 80120ca:	e7c7      	b.n	801205c <_printf_common+0x58>
 80120cc:	2301      	movs	r3, #1
 80120ce:	4622      	mov	r2, r4
 80120d0:	4649      	mov	r1, r9
 80120d2:	4638      	mov	r0, r7
 80120d4:	47c0      	blx	r8
 80120d6:	3001      	adds	r0, #1
 80120d8:	d0e6      	beq.n	80120a8 <_printf_common+0xa4>
 80120da:	3601      	adds	r6, #1
 80120dc:	e7d9      	b.n	8012092 <_printf_common+0x8e>
	...

080120e0 <_printf_i>:
 80120e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80120e4:	7e0f      	ldrb	r7, [r1, #24]
 80120e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80120e8:	2f78      	cmp	r7, #120	; 0x78
 80120ea:	4691      	mov	r9, r2
 80120ec:	4680      	mov	r8, r0
 80120ee:	460c      	mov	r4, r1
 80120f0:	469a      	mov	sl, r3
 80120f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80120f6:	d807      	bhi.n	8012108 <_printf_i+0x28>
 80120f8:	2f62      	cmp	r7, #98	; 0x62
 80120fa:	d80a      	bhi.n	8012112 <_printf_i+0x32>
 80120fc:	2f00      	cmp	r7, #0
 80120fe:	f000 80d8 	beq.w	80122b2 <_printf_i+0x1d2>
 8012102:	2f58      	cmp	r7, #88	; 0x58
 8012104:	f000 80a3 	beq.w	801224e <_printf_i+0x16e>
 8012108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801210c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012110:	e03a      	b.n	8012188 <_printf_i+0xa8>
 8012112:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012116:	2b15      	cmp	r3, #21
 8012118:	d8f6      	bhi.n	8012108 <_printf_i+0x28>
 801211a:	a101      	add	r1, pc, #4	; (adr r1, 8012120 <_printf_i+0x40>)
 801211c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012120:	08012179 	.word	0x08012179
 8012124:	0801218d 	.word	0x0801218d
 8012128:	08012109 	.word	0x08012109
 801212c:	08012109 	.word	0x08012109
 8012130:	08012109 	.word	0x08012109
 8012134:	08012109 	.word	0x08012109
 8012138:	0801218d 	.word	0x0801218d
 801213c:	08012109 	.word	0x08012109
 8012140:	08012109 	.word	0x08012109
 8012144:	08012109 	.word	0x08012109
 8012148:	08012109 	.word	0x08012109
 801214c:	08012299 	.word	0x08012299
 8012150:	080121bd 	.word	0x080121bd
 8012154:	0801227b 	.word	0x0801227b
 8012158:	08012109 	.word	0x08012109
 801215c:	08012109 	.word	0x08012109
 8012160:	080122bb 	.word	0x080122bb
 8012164:	08012109 	.word	0x08012109
 8012168:	080121bd 	.word	0x080121bd
 801216c:	08012109 	.word	0x08012109
 8012170:	08012109 	.word	0x08012109
 8012174:	08012283 	.word	0x08012283
 8012178:	682b      	ldr	r3, [r5, #0]
 801217a:	1d1a      	adds	r2, r3, #4
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	602a      	str	r2, [r5, #0]
 8012180:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012184:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012188:	2301      	movs	r3, #1
 801218a:	e0a3      	b.n	80122d4 <_printf_i+0x1f4>
 801218c:	6820      	ldr	r0, [r4, #0]
 801218e:	6829      	ldr	r1, [r5, #0]
 8012190:	0606      	lsls	r6, r0, #24
 8012192:	f101 0304 	add.w	r3, r1, #4
 8012196:	d50a      	bpl.n	80121ae <_printf_i+0xce>
 8012198:	680e      	ldr	r6, [r1, #0]
 801219a:	602b      	str	r3, [r5, #0]
 801219c:	2e00      	cmp	r6, #0
 801219e:	da03      	bge.n	80121a8 <_printf_i+0xc8>
 80121a0:	232d      	movs	r3, #45	; 0x2d
 80121a2:	4276      	negs	r6, r6
 80121a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80121a8:	485e      	ldr	r0, [pc, #376]	; (8012324 <_printf_i+0x244>)
 80121aa:	230a      	movs	r3, #10
 80121ac:	e019      	b.n	80121e2 <_printf_i+0x102>
 80121ae:	680e      	ldr	r6, [r1, #0]
 80121b0:	602b      	str	r3, [r5, #0]
 80121b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80121b6:	bf18      	it	ne
 80121b8:	b236      	sxthne	r6, r6
 80121ba:	e7ef      	b.n	801219c <_printf_i+0xbc>
 80121bc:	682b      	ldr	r3, [r5, #0]
 80121be:	6820      	ldr	r0, [r4, #0]
 80121c0:	1d19      	adds	r1, r3, #4
 80121c2:	6029      	str	r1, [r5, #0]
 80121c4:	0601      	lsls	r1, r0, #24
 80121c6:	d501      	bpl.n	80121cc <_printf_i+0xec>
 80121c8:	681e      	ldr	r6, [r3, #0]
 80121ca:	e002      	b.n	80121d2 <_printf_i+0xf2>
 80121cc:	0646      	lsls	r6, r0, #25
 80121ce:	d5fb      	bpl.n	80121c8 <_printf_i+0xe8>
 80121d0:	881e      	ldrh	r6, [r3, #0]
 80121d2:	4854      	ldr	r0, [pc, #336]	; (8012324 <_printf_i+0x244>)
 80121d4:	2f6f      	cmp	r7, #111	; 0x6f
 80121d6:	bf0c      	ite	eq
 80121d8:	2308      	moveq	r3, #8
 80121da:	230a      	movne	r3, #10
 80121dc:	2100      	movs	r1, #0
 80121de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80121e2:	6865      	ldr	r5, [r4, #4]
 80121e4:	60a5      	str	r5, [r4, #8]
 80121e6:	2d00      	cmp	r5, #0
 80121e8:	bfa2      	ittt	ge
 80121ea:	6821      	ldrge	r1, [r4, #0]
 80121ec:	f021 0104 	bicge.w	r1, r1, #4
 80121f0:	6021      	strge	r1, [r4, #0]
 80121f2:	b90e      	cbnz	r6, 80121f8 <_printf_i+0x118>
 80121f4:	2d00      	cmp	r5, #0
 80121f6:	d04d      	beq.n	8012294 <_printf_i+0x1b4>
 80121f8:	4615      	mov	r5, r2
 80121fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80121fe:	fb03 6711 	mls	r7, r3, r1, r6
 8012202:	5dc7      	ldrb	r7, [r0, r7]
 8012204:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012208:	4637      	mov	r7, r6
 801220a:	42bb      	cmp	r3, r7
 801220c:	460e      	mov	r6, r1
 801220e:	d9f4      	bls.n	80121fa <_printf_i+0x11a>
 8012210:	2b08      	cmp	r3, #8
 8012212:	d10b      	bne.n	801222c <_printf_i+0x14c>
 8012214:	6823      	ldr	r3, [r4, #0]
 8012216:	07de      	lsls	r6, r3, #31
 8012218:	d508      	bpl.n	801222c <_printf_i+0x14c>
 801221a:	6923      	ldr	r3, [r4, #16]
 801221c:	6861      	ldr	r1, [r4, #4]
 801221e:	4299      	cmp	r1, r3
 8012220:	bfde      	ittt	le
 8012222:	2330      	movle	r3, #48	; 0x30
 8012224:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012228:	f105 35ff 	addle.w	r5, r5, #4294967295
 801222c:	1b52      	subs	r2, r2, r5
 801222e:	6122      	str	r2, [r4, #16]
 8012230:	f8cd a000 	str.w	sl, [sp]
 8012234:	464b      	mov	r3, r9
 8012236:	aa03      	add	r2, sp, #12
 8012238:	4621      	mov	r1, r4
 801223a:	4640      	mov	r0, r8
 801223c:	f7ff fee2 	bl	8012004 <_printf_common>
 8012240:	3001      	adds	r0, #1
 8012242:	d14c      	bne.n	80122de <_printf_i+0x1fe>
 8012244:	f04f 30ff 	mov.w	r0, #4294967295
 8012248:	b004      	add	sp, #16
 801224a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801224e:	4835      	ldr	r0, [pc, #212]	; (8012324 <_printf_i+0x244>)
 8012250:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012254:	6829      	ldr	r1, [r5, #0]
 8012256:	6823      	ldr	r3, [r4, #0]
 8012258:	f851 6b04 	ldr.w	r6, [r1], #4
 801225c:	6029      	str	r1, [r5, #0]
 801225e:	061d      	lsls	r5, r3, #24
 8012260:	d514      	bpl.n	801228c <_printf_i+0x1ac>
 8012262:	07df      	lsls	r7, r3, #31
 8012264:	bf44      	itt	mi
 8012266:	f043 0320 	orrmi.w	r3, r3, #32
 801226a:	6023      	strmi	r3, [r4, #0]
 801226c:	b91e      	cbnz	r6, 8012276 <_printf_i+0x196>
 801226e:	6823      	ldr	r3, [r4, #0]
 8012270:	f023 0320 	bic.w	r3, r3, #32
 8012274:	6023      	str	r3, [r4, #0]
 8012276:	2310      	movs	r3, #16
 8012278:	e7b0      	b.n	80121dc <_printf_i+0xfc>
 801227a:	6823      	ldr	r3, [r4, #0]
 801227c:	f043 0320 	orr.w	r3, r3, #32
 8012280:	6023      	str	r3, [r4, #0]
 8012282:	2378      	movs	r3, #120	; 0x78
 8012284:	4828      	ldr	r0, [pc, #160]	; (8012328 <_printf_i+0x248>)
 8012286:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801228a:	e7e3      	b.n	8012254 <_printf_i+0x174>
 801228c:	0659      	lsls	r1, r3, #25
 801228e:	bf48      	it	mi
 8012290:	b2b6      	uxthmi	r6, r6
 8012292:	e7e6      	b.n	8012262 <_printf_i+0x182>
 8012294:	4615      	mov	r5, r2
 8012296:	e7bb      	b.n	8012210 <_printf_i+0x130>
 8012298:	682b      	ldr	r3, [r5, #0]
 801229a:	6826      	ldr	r6, [r4, #0]
 801229c:	6961      	ldr	r1, [r4, #20]
 801229e:	1d18      	adds	r0, r3, #4
 80122a0:	6028      	str	r0, [r5, #0]
 80122a2:	0635      	lsls	r5, r6, #24
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	d501      	bpl.n	80122ac <_printf_i+0x1cc>
 80122a8:	6019      	str	r1, [r3, #0]
 80122aa:	e002      	b.n	80122b2 <_printf_i+0x1d2>
 80122ac:	0670      	lsls	r0, r6, #25
 80122ae:	d5fb      	bpl.n	80122a8 <_printf_i+0x1c8>
 80122b0:	8019      	strh	r1, [r3, #0]
 80122b2:	2300      	movs	r3, #0
 80122b4:	6123      	str	r3, [r4, #16]
 80122b6:	4615      	mov	r5, r2
 80122b8:	e7ba      	b.n	8012230 <_printf_i+0x150>
 80122ba:	682b      	ldr	r3, [r5, #0]
 80122bc:	1d1a      	adds	r2, r3, #4
 80122be:	602a      	str	r2, [r5, #0]
 80122c0:	681d      	ldr	r5, [r3, #0]
 80122c2:	6862      	ldr	r2, [r4, #4]
 80122c4:	2100      	movs	r1, #0
 80122c6:	4628      	mov	r0, r5
 80122c8:	f7ed ffd2 	bl	8000270 <memchr>
 80122cc:	b108      	cbz	r0, 80122d2 <_printf_i+0x1f2>
 80122ce:	1b40      	subs	r0, r0, r5
 80122d0:	6060      	str	r0, [r4, #4]
 80122d2:	6863      	ldr	r3, [r4, #4]
 80122d4:	6123      	str	r3, [r4, #16]
 80122d6:	2300      	movs	r3, #0
 80122d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80122dc:	e7a8      	b.n	8012230 <_printf_i+0x150>
 80122de:	6923      	ldr	r3, [r4, #16]
 80122e0:	462a      	mov	r2, r5
 80122e2:	4649      	mov	r1, r9
 80122e4:	4640      	mov	r0, r8
 80122e6:	47d0      	blx	sl
 80122e8:	3001      	adds	r0, #1
 80122ea:	d0ab      	beq.n	8012244 <_printf_i+0x164>
 80122ec:	6823      	ldr	r3, [r4, #0]
 80122ee:	079b      	lsls	r3, r3, #30
 80122f0:	d413      	bmi.n	801231a <_printf_i+0x23a>
 80122f2:	68e0      	ldr	r0, [r4, #12]
 80122f4:	9b03      	ldr	r3, [sp, #12]
 80122f6:	4298      	cmp	r0, r3
 80122f8:	bfb8      	it	lt
 80122fa:	4618      	movlt	r0, r3
 80122fc:	e7a4      	b.n	8012248 <_printf_i+0x168>
 80122fe:	2301      	movs	r3, #1
 8012300:	4632      	mov	r2, r6
 8012302:	4649      	mov	r1, r9
 8012304:	4640      	mov	r0, r8
 8012306:	47d0      	blx	sl
 8012308:	3001      	adds	r0, #1
 801230a:	d09b      	beq.n	8012244 <_printf_i+0x164>
 801230c:	3501      	adds	r5, #1
 801230e:	68e3      	ldr	r3, [r4, #12]
 8012310:	9903      	ldr	r1, [sp, #12]
 8012312:	1a5b      	subs	r3, r3, r1
 8012314:	42ab      	cmp	r3, r5
 8012316:	dcf2      	bgt.n	80122fe <_printf_i+0x21e>
 8012318:	e7eb      	b.n	80122f2 <_printf_i+0x212>
 801231a:	2500      	movs	r5, #0
 801231c:	f104 0619 	add.w	r6, r4, #25
 8012320:	e7f5      	b.n	801230e <_printf_i+0x22e>
 8012322:	bf00      	nop
 8012324:	08016b4e 	.word	0x08016b4e
 8012328:	08016b5f 	.word	0x08016b5f

0801232c <_scanf_float>:
 801232c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012330:	b087      	sub	sp, #28
 8012332:	4617      	mov	r7, r2
 8012334:	9303      	str	r3, [sp, #12]
 8012336:	688b      	ldr	r3, [r1, #8]
 8012338:	1e5a      	subs	r2, r3, #1
 801233a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801233e:	bf83      	ittte	hi
 8012340:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012344:	195b      	addhi	r3, r3, r5
 8012346:	9302      	strhi	r3, [sp, #8]
 8012348:	2300      	movls	r3, #0
 801234a:	bf86      	itte	hi
 801234c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012350:	608b      	strhi	r3, [r1, #8]
 8012352:	9302      	strls	r3, [sp, #8]
 8012354:	680b      	ldr	r3, [r1, #0]
 8012356:	468b      	mov	fp, r1
 8012358:	2500      	movs	r5, #0
 801235a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801235e:	f84b 3b1c 	str.w	r3, [fp], #28
 8012362:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012366:	4680      	mov	r8, r0
 8012368:	460c      	mov	r4, r1
 801236a:	465e      	mov	r6, fp
 801236c:	46aa      	mov	sl, r5
 801236e:	46a9      	mov	r9, r5
 8012370:	9501      	str	r5, [sp, #4]
 8012372:	68a2      	ldr	r2, [r4, #8]
 8012374:	b152      	cbz	r2, 801238c <_scanf_float+0x60>
 8012376:	683b      	ldr	r3, [r7, #0]
 8012378:	781b      	ldrb	r3, [r3, #0]
 801237a:	2b4e      	cmp	r3, #78	; 0x4e
 801237c:	d864      	bhi.n	8012448 <_scanf_float+0x11c>
 801237e:	2b40      	cmp	r3, #64	; 0x40
 8012380:	d83c      	bhi.n	80123fc <_scanf_float+0xd0>
 8012382:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8012386:	b2c8      	uxtb	r0, r1
 8012388:	280e      	cmp	r0, #14
 801238a:	d93a      	bls.n	8012402 <_scanf_float+0xd6>
 801238c:	f1b9 0f00 	cmp.w	r9, #0
 8012390:	d003      	beq.n	801239a <_scanf_float+0x6e>
 8012392:	6823      	ldr	r3, [r4, #0]
 8012394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012398:	6023      	str	r3, [r4, #0]
 801239a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801239e:	f1ba 0f01 	cmp.w	sl, #1
 80123a2:	f200 8113 	bhi.w	80125cc <_scanf_float+0x2a0>
 80123a6:	455e      	cmp	r6, fp
 80123a8:	f200 8105 	bhi.w	80125b6 <_scanf_float+0x28a>
 80123ac:	2501      	movs	r5, #1
 80123ae:	4628      	mov	r0, r5
 80123b0:	b007      	add	sp, #28
 80123b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123b6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80123ba:	2a0d      	cmp	r2, #13
 80123bc:	d8e6      	bhi.n	801238c <_scanf_float+0x60>
 80123be:	a101      	add	r1, pc, #4	; (adr r1, 80123c4 <_scanf_float+0x98>)
 80123c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80123c4:	08012503 	.word	0x08012503
 80123c8:	0801238d 	.word	0x0801238d
 80123cc:	0801238d 	.word	0x0801238d
 80123d0:	0801238d 	.word	0x0801238d
 80123d4:	08012563 	.word	0x08012563
 80123d8:	0801253b 	.word	0x0801253b
 80123dc:	0801238d 	.word	0x0801238d
 80123e0:	0801238d 	.word	0x0801238d
 80123e4:	08012511 	.word	0x08012511
 80123e8:	0801238d 	.word	0x0801238d
 80123ec:	0801238d 	.word	0x0801238d
 80123f0:	0801238d 	.word	0x0801238d
 80123f4:	0801238d 	.word	0x0801238d
 80123f8:	080124c9 	.word	0x080124c9
 80123fc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8012400:	e7db      	b.n	80123ba <_scanf_float+0x8e>
 8012402:	290e      	cmp	r1, #14
 8012404:	d8c2      	bhi.n	801238c <_scanf_float+0x60>
 8012406:	a001      	add	r0, pc, #4	; (adr r0, 801240c <_scanf_float+0xe0>)
 8012408:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801240c:	080124bb 	.word	0x080124bb
 8012410:	0801238d 	.word	0x0801238d
 8012414:	080124bb 	.word	0x080124bb
 8012418:	0801254f 	.word	0x0801254f
 801241c:	0801238d 	.word	0x0801238d
 8012420:	08012469 	.word	0x08012469
 8012424:	080124a5 	.word	0x080124a5
 8012428:	080124a5 	.word	0x080124a5
 801242c:	080124a5 	.word	0x080124a5
 8012430:	080124a5 	.word	0x080124a5
 8012434:	080124a5 	.word	0x080124a5
 8012438:	080124a5 	.word	0x080124a5
 801243c:	080124a5 	.word	0x080124a5
 8012440:	080124a5 	.word	0x080124a5
 8012444:	080124a5 	.word	0x080124a5
 8012448:	2b6e      	cmp	r3, #110	; 0x6e
 801244a:	d809      	bhi.n	8012460 <_scanf_float+0x134>
 801244c:	2b60      	cmp	r3, #96	; 0x60
 801244e:	d8b2      	bhi.n	80123b6 <_scanf_float+0x8a>
 8012450:	2b54      	cmp	r3, #84	; 0x54
 8012452:	d077      	beq.n	8012544 <_scanf_float+0x218>
 8012454:	2b59      	cmp	r3, #89	; 0x59
 8012456:	d199      	bne.n	801238c <_scanf_float+0x60>
 8012458:	2d07      	cmp	r5, #7
 801245a:	d197      	bne.n	801238c <_scanf_float+0x60>
 801245c:	2508      	movs	r5, #8
 801245e:	e029      	b.n	80124b4 <_scanf_float+0x188>
 8012460:	2b74      	cmp	r3, #116	; 0x74
 8012462:	d06f      	beq.n	8012544 <_scanf_float+0x218>
 8012464:	2b79      	cmp	r3, #121	; 0x79
 8012466:	e7f6      	b.n	8012456 <_scanf_float+0x12a>
 8012468:	6821      	ldr	r1, [r4, #0]
 801246a:	05c8      	lsls	r0, r1, #23
 801246c:	d51a      	bpl.n	80124a4 <_scanf_float+0x178>
 801246e:	9b02      	ldr	r3, [sp, #8]
 8012470:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012474:	6021      	str	r1, [r4, #0]
 8012476:	f109 0901 	add.w	r9, r9, #1
 801247a:	b11b      	cbz	r3, 8012484 <_scanf_float+0x158>
 801247c:	3b01      	subs	r3, #1
 801247e:	3201      	adds	r2, #1
 8012480:	9302      	str	r3, [sp, #8]
 8012482:	60a2      	str	r2, [r4, #8]
 8012484:	68a3      	ldr	r3, [r4, #8]
 8012486:	3b01      	subs	r3, #1
 8012488:	60a3      	str	r3, [r4, #8]
 801248a:	6923      	ldr	r3, [r4, #16]
 801248c:	3301      	adds	r3, #1
 801248e:	6123      	str	r3, [r4, #16]
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	3b01      	subs	r3, #1
 8012494:	2b00      	cmp	r3, #0
 8012496:	607b      	str	r3, [r7, #4]
 8012498:	f340 8084 	ble.w	80125a4 <_scanf_float+0x278>
 801249c:	683b      	ldr	r3, [r7, #0]
 801249e:	3301      	adds	r3, #1
 80124a0:	603b      	str	r3, [r7, #0]
 80124a2:	e766      	b.n	8012372 <_scanf_float+0x46>
 80124a4:	eb1a 0f05 	cmn.w	sl, r5
 80124a8:	f47f af70 	bne.w	801238c <_scanf_float+0x60>
 80124ac:	6822      	ldr	r2, [r4, #0]
 80124ae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80124b2:	6022      	str	r2, [r4, #0]
 80124b4:	f806 3b01 	strb.w	r3, [r6], #1
 80124b8:	e7e4      	b.n	8012484 <_scanf_float+0x158>
 80124ba:	6822      	ldr	r2, [r4, #0]
 80124bc:	0610      	lsls	r0, r2, #24
 80124be:	f57f af65 	bpl.w	801238c <_scanf_float+0x60>
 80124c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80124c6:	e7f4      	b.n	80124b2 <_scanf_float+0x186>
 80124c8:	f1ba 0f00 	cmp.w	sl, #0
 80124cc:	d10e      	bne.n	80124ec <_scanf_float+0x1c0>
 80124ce:	f1b9 0f00 	cmp.w	r9, #0
 80124d2:	d10e      	bne.n	80124f2 <_scanf_float+0x1c6>
 80124d4:	6822      	ldr	r2, [r4, #0]
 80124d6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80124da:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80124de:	d108      	bne.n	80124f2 <_scanf_float+0x1c6>
 80124e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80124e4:	6022      	str	r2, [r4, #0]
 80124e6:	f04f 0a01 	mov.w	sl, #1
 80124ea:	e7e3      	b.n	80124b4 <_scanf_float+0x188>
 80124ec:	f1ba 0f02 	cmp.w	sl, #2
 80124f0:	d055      	beq.n	801259e <_scanf_float+0x272>
 80124f2:	2d01      	cmp	r5, #1
 80124f4:	d002      	beq.n	80124fc <_scanf_float+0x1d0>
 80124f6:	2d04      	cmp	r5, #4
 80124f8:	f47f af48 	bne.w	801238c <_scanf_float+0x60>
 80124fc:	3501      	adds	r5, #1
 80124fe:	b2ed      	uxtb	r5, r5
 8012500:	e7d8      	b.n	80124b4 <_scanf_float+0x188>
 8012502:	f1ba 0f01 	cmp.w	sl, #1
 8012506:	f47f af41 	bne.w	801238c <_scanf_float+0x60>
 801250a:	f04f 0a02 	mov.w	sl, #2
 801250e:	e7d1      	b.n	80124b4 <_scanf_float+0x188>
 8012510:	b97d      	cbnz	r5, 8012532 <_scanf_float+0x206>
 8012512:	f1b9 0f00 	cmp.w	r9, #0
 8012516:	f47f af3c 	bne.w	8012392 <_scanf_float+0x66>
 801251a:	6822      	ldr	r2, [r4, #0]
 801251c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012520:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012524:	f47f af39 	bne.w	801239a <_scanf_float+0x6e>
 8012528:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801252c:	6022      	str	r2, [r4, #0]
 801252e:	2501      	movs	r5, #1
 8012530:	e7c0      	b.n	80124b4 <_scanf_float+0x188>
 8012532:	2d03      	cmp	r5, #3
 8012534:	d0e2      	beq.n	80124fc <_scanf_float+0x1d0>
 8012536:	2d05      	cmp	r5, #5
 8012538:	e7de      	b.n	80124f8 <_scanf_float+0x1cc>
 801253a:	2d02      	cmp	r5, #2
 801253c:	f47f af26 	bne.w	801238c <_scanf_float+0x60>
 8012540:	2503      	movs	r5, #3
 8012542:	e7b7      	b.n	80124b4 <_scanf_float+0x188>
 8012544:	2d06      	cmp	r5, #6
 8012546:	f47f af21 	bne.w	801238c <_scanf_float+0x60>
 801254a:	2507      	movs	r5, #7
 801254c:	e7b2      	b.n	80124b4 <_scanf_float+0x188>
 801254e:	6822      	ldr	r2, [r4, #0]
 8012550:	0591      	lsls	r1, r2, #22
 8012552:	f57f af1b 	bpl.w	801238c <_scanf_float+0x60>
 8012556:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801255a:	6022      	str	r2, [r4, #0]
 801255c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012560:	e7a8      	b.n	80124b4 <_scanf_float+0x188>
 8012562:	6822      	ldr	r2, [r4, #0]
 8012564:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8012568:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801256c:	d006      	beq.n	801257c <_scanf_float+0x250>
 801256e:	0550      	lsls	r0, r2, #21
 8012570:	f57f af0c 	bpl.w	801238c <_scanf_float+0x60>
 8012574:	f1b9 0f00 	cmp.w	r9, #0
 8012578:	f43f af0f 	beq.w	801239a <_scanf_float+0x6e>
 801257c:	0591      	lsls	r1, r2, #22
 801257e:	bf58      	it	pl
 8012580:	9901      	ldrpl	r1, [sp, #4]
 8012582:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012586:	bf58      	it	pl
 8012588:	eba9 0101 	subpl.w	r1, r9, r1
 801258c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8012590:	bf58      	it	pl
 8012592:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8012596:	6022      	str	r2, [r4, #0]
 8012598:	f04f 0900 	mov.w	r9, #0
 801259c:	e78a      	b.n	80124b4 <_scanf_float+0x188>
 801259e:	f04f 0a03 	mov.w	sl, #3
 80125a2:	e787      	b.n	80124b4 <_scanf_float+0x188>
 80125a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80125a8:	4639      	mov	r1, r7
 80125aa:	4640      	mov	r0, r8
 80125ac:	4798      	blx	r3
 80125ae:	2800      	cmp	r0, #0
 80125b0:	f43f aedf 	beq.w	8012372 <_scanf_float+0x46>
 80125b4:	e6ea      	b.n	801238c <_scanf_float+0x60>
 80125b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80125ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80125be:	463a      	mov	r2, r7
 80125c0:	4640      	mov	r0, r8
 80125c2:	4798      	blx	r3
 80125c4:	6923      	ldr	r3, [r4, #16]
 80125c6:	3b01      	subs	r3, #1
 80125c8:	6123      	str	r3, [r4, #16]
 80125ca:	e6ec      	b.n	80123a6 <_scanf_float+0x7a>
 80125cc:	1e6b      	subs	r3, r5, #1
 80125ce:	2b06      	cmp	r3, #6
 80125d0:	d825      	bhi.n	801261e <_scanf_float+0x2f2>
 80125d2:	2d02      	cmp	r5, #2
 80125d4:	d836      	bhi.n	8012644 <_scanf_float+0x318>
 80125d6:	455e      	cmp	r6, fp
 80125d8:	f67f aee8 	bls.w	80123ac <_scanf_float+0x80>
 80125dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80125e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80125e4:	463a      	mov	r2, r7
 80125e6:	4640      	mov	r0, r8
 80125e8:	4798      	blx	r3
 80125ea:	6923      	ldr	r3, [r4, #16]
 80125ec:	3b01      	subs	r3, #1
 80125ee:	6123      	str	r3, [r4, #16]
 80125f0:	e7f1      	b.n	80125d6 <_scanf_float+0x2aa>
 80125f2:	9802      	ldr	r0, [sp, #8]
 80125f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80125f8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80125fc:	9002      	str	r0, [sp, #8]
 80125fe:	463a      	mov	r2, r7
 8012600:	4640      	mov	r0, r8
 8012602:	4798      	blx	r3
 8012604:	6923      	ldr	r3, [r4, #16]
 8012606:	3b01      	subs	r3, #1
 8012608:	6123      	str	r3, [r4, #16]
 801260a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801260e:	fa5f fa8a 	uxtb.w	sl, sl
 8012612:	f1ba 0f02 	cmp.w	sl, #2
 8012616:	d1ec      	bne.n	80125f2 <_scanf_float+0x2c6>
 8012618:	3d03      	subs	r5, #3
 801261a:	b2ed      	uxtb	r5, r5
 801261c:	1b76      	subs	r6, r6, r5
 801261e:	6823      	ldr	r3, [r4, #0]
 8012620:	05da      	lsls	r2, r3, #23
 8012622:	d52f      	bpl.n	8012684 <_scanf_float+0x358>
 8012624:	055b      	lsls	r3, r3, #21
 8012626:	d510      	bpl.n	801264a <_scanf_float+0x31e>
 8012628:	455e      	cmp	r6, fp
 801262a:	f67f aebf 	bls.w	80123ac <_scanf_float+0x80>
 801262e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012632:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012636:	463a      	mov	r2, r7
 8012638:	4640      	mov	r0, r8
 801263a:	4798      	blx	r3
 801263c:	6923      	ldr	r3, [r4, #16]
 801263e:	3b01      	subs	r3, #1
 8012640:	6123      	str	r3, [r4, #16]
 8012642:	e7f1      	b.n	8012628 <_scanf_float+0x2fc>
 8012644:	46aa      	mov	sl, r5
 8012646:	9602      	str	r6, [sp, #8]
 8012648:	e7df      	b.n	801260a <_scanf_float+0x2de>
 801264a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801264e:	6923      	ldr	r3, [r4, #16]
 8012650:	2965      	cmp	r1, #101	; 0x65
 8012652:	f103 33ff 	add.w	r3, r3, #4294967295
 8012656:	f106 35ff 	add.w	r5, r6, #4294967295
 801265a:	6123      	str	r3, [r4, #16]
 801265c:	d00c      	beq.n	8012678 <_scanf_float+0x34c>
 801265e:	2945      	cmp	r1, #69	; 0x45
 8012660:	d00a      	beq.n	8012678 <_scanf_float+0x34c>
 8012662:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012666:	463a      	mov	r2, r7
 8012668:	4640      	mov	r0, r8
 801266a:	4798      	blx	r3
 801266c:	6923      	ldr	r3, [r4, #16]
 801266e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8012672:	3b01      	subs	r3, #1
 8012674:	1eb5      	subs	r5, r6, #2
 8012676:	6123      	str	r3, [r4, #16]
 8012678:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801267c:	463a      	mov	r2, r7
 801267e:	4640      	mov	r0, r8
 8012680:	4798      	blx	r3
 8012682:	462e      	mov	r6, r5
 8012684:	6825      	ldr	r5, [r4, #0]
 8012686:	f015 0510 	ands.w	r5, r5, #16
 801268a:	d14e      	bne.n	801272a <_scanf_float+0x3fe>
 801268c:	7035      	strb	r5, [r6, #0]
 801268e:	6823      	ldr	r3, [r4, #0]
 8012690:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012698:	d119      	bne.n	80126ce <_scanf_float+0x3a2>
 801269a:	9b01      	ldr	r3, [sp, #4]
 801269c:	454b      	cmp	r3, r9
 801269e:	eba3 0209 	sub.w	r2, r3, r9
 80126a2:	d121      	bne.n	80126e8 <_scanf_float+0x3bc>
 80126a4:	2200      	movs	r2, #0
 80126a6:	4659      	mov	r1, fp
 80126a8:	4640      	mov	r0, r8
 80126aa:	f000 ff07 	bl	80134bc <_strtod_r>
 80126ae:	6822      	ldr	r2, [r4, #0]
 80126b0:	9b03      	ldr	r3, [sp, #12]
 80126b2:	f012 0f02 	tst.w	r2, #2
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	d021      	beq.n	80126fe <_scanf_float+0x3d2>
 80126ba:	9903      	ldr	r1, [sp, #12]
 80126bc:	1d1a      	adds	r2, r3, #4
 80126be:	600a      	str	r2, [r1, #0]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	ed83 0b00 	vstr	d0, [r3]
 80126c6:	68e3      	ldr	r3, [r4, #12]
 80126c8:	3301      	adds	r3, #1
 80126ca:	60e3      	str	r3, [r4, #12]
 80126cc:	e66f      	b.n	80123ae <_scanf_float+0x82>
 80126ce:	9b04      	ldr	r3, [sp, #16]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d0e7      	beq.n	80126a4 <_scanf_float+0x378>
 80126d4:	9905      	ldr	r1, [sp, #20]
 80126d6:	230a      	movs	r3, #10
 80126d8:	462a      	mov	r2, r5
 80126da:	3101      	adds	r1, #1
 80126dc:	4640      	mov	r0, r8
 80126de:	f000 ff75 	bl	80135cc <_strtol_r>
 80126e2:	9b04      	ldr	r3, [sp, #16]
 80126e4:	9e05      	ldr	r6, [sp, #20]
 80126e6:	1ac2      	subs	r2, r0, r3
 80126e8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80126ec:	429e      	cmp	r6, r3
 80126ee:	bf28      	it	cs
 80126f0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80126f4:	490e      	ldr	r1, [pc, #56]	; (8012730 <_scanf_float+0x404>)
 80126f6:	4630      	mov	r0, r6
 80126f8:	f000 f8d8 	bl	80128ac <siprintf>
 80126fc:	e7d2      	b.n	80126a4 <_scanf_float+0x378>
 80126fe:	9903      	ldr	r1, [sp, #12]
 8012700:	f012 0f04 	tst.w	r2, #4
 8012704:	f103 0204 	add.w	r2, r3, #4
 8012708:	600a      	str	r2, [r1, #0]
 801270a:	d1d9      	bne.n	80126c0 <_scanf_float+0x394>
 801270c:	eeb4 0b40 	vcmp.f64	d0, d0
 8012710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012714:	681e      	ldr	r6, [r3, #0]
 8012716:	d705      	bvc.n	8012724 <_scanf_float+0x3f8>
 8012718:	4806      	ldr	r0, [pc, #24]	; (8012734 <_scanf_float+0x408>)
 801271a:	f000 f8c1 	bl	80128a0 <nanf>
 801271e:	ed86 0a00 	vstr	s0, [r6]
 8012722:	e7d0      	b.n	80126c6 <_scanf_float+0x39a>
 8012724:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8012728:	e7f9      	b.n	801271e <_scanf_float+0x3f2>
 801272a:	2500      	movs	r5, #0
 801272c:	e63f      	b.n	80123ae <_scanf_float+0x82>
 801272e:	bf00      	nop
 8012730:	08016b70 	.word	0x08016b70
 8012734:	08016fe0 	.word	0x08016fe0

08012738 <iprintf>:
 8012738:	b40f      	push	{r0, r1, r2, r3}
 801273a:	4b0a      	ldr	r3, [pc, #40]	; (8012764 <iprintf+0x2c>)
 801273c:	b513      	push	{r0, r1, r4, lr}
 801273e:	681c      	ldr	r4, [r3, #0]
 8012740:	b124      	cbz	r4, 801274c <iprintf+0x14>
 8012742:	69a3      	ldr	r3, [r4, #24]
 8012744:	b913      	cbnz	r3, 801274c <iprintf+0x14>
 8012746:	4620      	mov	r0, r4
 8012748:	f001 ff16 	bl	8014578 <__sinit>
 801274c:	ab05      	add	r3, sp, #20
 801274e:	9a04      	ldr	r2, [sp, #16]
 8012750:	68a1      	ldr	r1, [r4, #8]
 8012752:	9301      	str	r3, [sp, #4]
 8012754:	4620      	mov	r0, r4
 8012756:	f003 fa0d 	bl	8015b74 <_vfiprintf_r>
 801275a:	b002      	add	sp, #8
 801275c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012760:	b004      	add	sp, #16
 8012762:	4770      	bx	lr
 8012764:	2000000c 	.word	0x2000000c

08012768 <putchar>:
 8012768:	4b09      	ldr	r3, [pc, #36]	; (8012790 <putchar+0x28>)
 801276a:	b513      	push	{r0, r1, r4, lr}
 801276c:	681c      	ldr	r4, [r3, #0]
 801276e:	4601      	mov	r1, r0
 8012770:	b134      	cbz	r4, 8012780 <putchar+0x18>
 8012772:	69a3      	ldr	r3, [r4, #24]
 8012774:	b923      	cbnz	r3, 8012780 <putchar+0x18>
 8012776:	9001      	str	r0, [sp, #4]
 8012778:	4620      	mov	r0, r4
 801277a:	f001 fefd 	bl	8014578 <__sinit>
 801277e:	9901      	ldr	r1, [sp, #4]
 8012780:	68a2      	ldr	r2, [r4, #8]
 8012782:	4620      	mov	r0, r4
 8012784:	b002      	add	sp, #8
 8012786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801278a:	f003 bb23 	b.w	8015dd4 <_putc_r>
 801278e:	bf00      	nop
 8012790:	2000000c 	.word	0x2000000c

08012794 <_puts_r>:
 8012794:	b570      	push	{r4, r5, r6, lr}
 8012796:	460e      	mov	r6, r1
 8012798:	4605      	mov	r5, r0
 801279a:	b118      	cbz	r0, 80127a4 <_puts_r+0x10>
 801279c:	6983      	ldr	r3, [r0, #24]
 801279e:	b90b      	cbnz	r3, 80127a4 <_puts_r+0x10>
 80127a0:	f001 feea 	bl	8014578 <__sinit>
 80127a4:	69ab      	ldr	r3, [r5, #24]
 80127a6:	68ac      	ldr	r4, [r5, #8]
 80127a8:	b913      	cbnz	r3, 80127b0 <_puts_r+0x1c>
 80127aa:	4628      	mov	r0, r5
 80127ac:	f001 fee4 	bl	8014578 <__sinit>
 80127b0:	4b2c      	ldr	r3, [pc, #176]	; (8012864 <_puts_r+0xd0>)
 80127b2:	429c      	cmp	r4, r3
 80127b4:	d120      	bne.n	80127f8 <_puts_r+0x64>
 80127b6:	686c      	ldr	r4, [r5, #4]
 80127b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80127ba:	07db      	lsls	r3, r3, #31
 80127bc:	d405      	bmi.n	80127ca <_puts_r+0x36>
 80127be:	89a3      	ldrh	r3, [r4, #12]
 80127c0:	0598      	lsls	r0, r3, #22
 80127c2:	d402      	bmi.n	80127ca <_puts_r+0x36>
 80127c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80127c6:	f002 fae8 	bl	8014d9a <__retarget_lock_acquire_recursive>
 80127ca:	89a3      	ldrh	r3, [r4, #12]
 80127cc:	0719      	lsls	r1, r3, #28
 80127ce:	d51d      	bpl.n	801280c <_puts_r+0x78>
 80127d0:	6923      	ldr	r3, [r4, #16]
 80127d2:	b1db      	cbz	r3, 801280c <_puts_r+0x78>
 80127d4:	3e01      	subs	r6, #1
 80127d6:	68a3      	ldr	r3, [r4, #8]
 80127d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80127dc:	3b01      	subs	r3, #1
 80127de:	60a3      	str	r3, [r4, #8]
 80127e0:	bb39      	cbnz	r1, 8012832 <_puts_r+0x9e>
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	da38      	bge.n	8012858 <_puts_r+0xc4>
 80127e6:	4622      	mov	r2, r4
 80127e8:	210a      	movs	r1, #10
 80127ea:	4628      	mov	r0, r5
 80127ec:	f000 fef0 	bl	80135d0 <__swbuf_r>
 80127f0:	3001      	adds	r0, #1
 80127f2:	d011      	beq.n	8012818 <_puts_r+0x84>
 80127f4:	250a      	movs	r5, #10
 80127f6:	e011      	b.n	801281c <_puts_r+0x88>
 80127f8:	4b1b      	ldr	r3, [pc, #108]	; (8012868 <_puts_r+0xd4>)
 80127fa:	429c      	cmp	r4, r3
 80127fc:	d101      	bne.n	8012802 <_puts_r+0x6e>
 80127fe:	68ac      	ldr	r4, [r5, #8]
 8012800:	e7da      	b.n	80127b8 <_puts_r+0x24>
 8012802:	4b1a      	ldr	r3, [pc, #104]	; (801286c <_puts_r+0xd8>)
 8012804:	429c      	cmp	r4, r3
 8012806:	bf08      	it	eq
 8012808:	68ec      	ldreq	r4, [r5, #12]
 801280a:	e7d5      	b.n	80127b8 <_puts_r+0x24>
 801280c:	4621      	mov	r1, r4
 801280e:	4628      	mov	r0, r5
 8012810:	f000 ff30 	bl	8013674 <__swsetup_r>
 8012814:	2800      	cmp	r0, #0
 8012816:	d0dd      	beq.n	80127d4 <_puts_r+0x40>
 8012818:	f04f 35ff 	mov.w	r5, #4294967295
 801281c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801281e:	07da      	lsls	r2, r3, #31
 8012820:	d405      	bmi.n	801282e <_puts_r+0x9a>
 8012822:	89a3      	ldrh	r3, [r4, #12]
 8012824:	059b      	lsls	r3, r3, #22
 8012826:	d402      	bmi.n	801282e <_puts_r+0x9a>
 8012828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801282a:	f002 fab7 	bl	8014d9c <__retarget_lock_release_recursive>
 801282e:	4628      	mov	r0, r5
 8012830:	bd70      	pop	{r4, r5, r6, pc}
 8012832:	2b00      	cmp	r3, #0
 8012834:	da04      	bge.n	8012840 <_puts_r+0xac>
 8012836:	69a2      	ldr	r2, [r4, #24]
 8012838:	429a      	cmp	r2, r3
 801283a:	dc06      	bgt.n	801284a <_puts_r+0xb6>
 801283c:	290a      	cmp	r1, #10
 801283e:	d004      	beq.n	801284a <_puts_r+0xb6>
 8012840:	6823      	ldr	r3, [r4, #0]
 8012842:	1c5a      	adds	r2, r3, #1
 8012844:	6022      	str	r2, [r4, #0]
 8012846:	7019      	strb	r1, [r3, #0]
 8012848:	e7c5      	b.n	80127d6 <_puts_r+0x42>
 801284a:	4622      	mov	r2, r4
 801284c:	4628      	mov	r0, r5
 801284e:	f000 febf 	bl	80135d0 <__swbuf_r>
 8012852:	3001      	adds	r0, #1
 8012854:	d1bf      	bne.n	80127d6 <_puts_r+0x42>
 8012856:	e7df      	b.n	8012818 <_puts_r+0x84>
 8012858:	6823      	ldr	r3, [r4, #0]
 801285a:	250a      	movs	r5, #10
 801285c:	1c5a      	adds	r2, r3, #1
 801285e:	6022      	str	r2, [r4, #0]
 8012860:	701d      	strb	r5, [r3, #0]
 8012862:	e7db      	b.n	801281c <_puts_r+0x88>
 8012864:	08016d7c 	.word	0x08016d7c
 8012868:	08016d9c 	.word	0x08016d9c
 801286c:	08016d5c 	.word	0x08016d5c

08012870 <puts>:
 8012870:	4b02      	ldr	r3, [pc, #8]	; (801287c <puts+0xc>)
 8012872:	4601      	mov	r1, r0
 8012874:	6818      	ldr	r0, [r3, #0]
 8012876:	f7ff bf8d 	b.w	8012794 <_puts_r>
 801287a:	bf00      	nop
 801287c:	2000000c 	.word	0x2000000c

08012880 <_sbrk_r>:
 8012880:	b538      	push	{r3, r4, r5, lr}
 8012882:	4d06      	ldr	r5, [pc, #24]	; (801289c <_sbrk_r+0x1c>)
 8012884:	2300      	movs	r3, #0
 8012886:	4604      	mov	r4, r0
 8012888:	4608      	mov	r0, r1
 801288a:	602b      	str	r3, [r5, #0]
 801288c:	f7f2 fd40 	bl	8005310 <_sbrk>
 8012890:	1c43      	adds	r3, r0, #1
 8012892:	d102      	bne.n	801289a <_sbrk_r+0x1a>
 8012894:	682b      	ldr	r3, [r5, #0]
 8012896:	b103      	cbz	r3, 801289a <_sbrk_r+0x1a>
 8012898:	6023      	str	r3, [r4, #0]
 801289a:	bd38      	pop	{r3, r4, r5, pc}
 801289c:	20005814 	.word	0x20005814

080128a0 <nanf>:
 80128a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80128a8 <nanf+0x8>
 80128a4:	4770      	bx	lr
 80128a6:	bf00      	nop
 80128a8:	7fc00000 	.word	0x7fc00000

080128ac <siprintf>:
 80128ac:	b40e      	push	{r1, r2, r3}
 80128ae:	b500      	push	{lr}
 80128b0:	b09c      	sub	sp, #112	; 0x70
 80128b2:	ab1d      	add	r3, sp, #116	; 0x74
 80128b4:	9002      	str	r0, [sp, #8]
 80128b6:	9006      	str	r0, [sp, #24]
 80128b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80128bc:	4809      	ldr	r0, [pc, #36]	; (80128e4 <siprintf+0x38>)
 80128be:	9107      	str	r1, [sp, #28]
 80128c0:	9104      	str	r1, [sp, #16]
 80128c2:	4909      	ldr	r1, [pc, #36]	; (80128e8 <siprintf+0x3c>)
 80128c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80128c8:	9105      	str	r1, [sp, #20]
 80128ca:	6800      	ldr	r0, [r0, #0]
 80128cc:	9301      	str	r3, [sp, #4]
 80128ce:	a902      	add	r1, sp, #8
 80128d0:	f003 f826 	bl	8015920 <_svfiprintf_r>
 80128d4:	9b02      	ldr	r3, [sp, #8]
 80128d6:	2200      	movs	r2, #0
 80128d8:	701a      	strb	r2, [r3, #0]
 80128da:	b01c      	add	sp, #112	; 0x70
 80128dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80128e0:	b003      	add	sp, #12
 80128e2:	4770      	bx	lr
 80128e4:	2000000c 	.word	0x2000000c
 80128e8:	ffff0208 	.word	0xffff0208

080128ec <strstr>:
 80128ec:	780a      	ldrb	r2, [r1, #0]
 80128ee:	b570      	push	{r4, r5, r6, lr}
 80128f0:	b96a      	cbnz	r2, 801290e <strstr+0x22>
 80128f2:	bd70      	pop	{r4, r5, r6, pc}
 80128f4:	429a      	cmp	r2, r3
 80128f6:	d109      	bne.n	801290c <strstr+0x20>
 80128f8:	460c      	mov	r4, r1
 80128fa:	4605      	mov	r5, r0
 80128fc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012900:	2b00      	cmp	r3, #0
 8012902:	d0f6      	beq.n	80128f2 <strstr+0x6>
 8012904:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8012908:	429e      	cmp	r6, r3
 801290a:	d0f7      	beq.n	80128fc <strstr+0x10>
 801290c:	3001      	adds	r0, #1
 801290e:	7803      	ldrb	r3, [r0, #0]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d1ef      	bne.n	80128f4 <strstr+0x8>
 8012914:	4618      	mov	r0, r3
 8012916:	e7ec      	b.n	80128f2 <strstr+0x6>

08012918 <sulp>:
 8012918:	b570      	push	{r4, r5, r6, lr}
 801291a:	4604      	mov	r4, r0
 801291c:	460d      	mov	r5, r1
 801291e:	4616      	mov	r6, r2
 8012920:	ec45 4b10 	vmov	d0, r4, r5
 8012924:	f002 fe3e 	bl	80155a4 <__ulp>
 8012928:	b17e      	cbz	r6, 801294a <sulp+0x32>
 801292a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801292e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012932:	2b00      	cmp	r3, #0
 8012934:	dd09      	ble.n	801294a <sulp+0x32>
 8012936:	051b      	lsls	r3, r3, #20
 8012938:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801293c:	2000      	movs	r0, #0
 801293e:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8012942:	ec41 0b17 	vmov	d7, r0, r1
 8012946:	ee20 0b07 	vmul.f64	d0, d0, d7
 801294a:	bd70      	pop	{r4, r5, r6, pc}
 801294c:	0000      	movs	r0, r0
	...

08012950 <_strtod_l>:
 8012950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012954:	ed2d 8b0e 	vpush	{d8-d14}
 8012958:	b097      	sub	sp, #92	; 0x5c
 801295a:	461f      	mov	r7, r3
 801295c:	2300      	movs	r3, #0
 801295e:	9312      	str	r3, [sp, #72]	; 0x48
 8012960:	4ba1      	ldr	r3, [pc, #644]	; (8012be8 <_strtod_l+0x298>)
 8012962:	920d      	str	r2, [sp, #52]	; 0x34
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	9307      	str	r3, [sp, #28]
 8012968:	4604      	mov	r4, r0
 801296a:	4618      	mov	r0, r3
 801296c:	468b      	mov	fp, r1
 801296e:	f7ed fc71 	bl	8000254 <strlen>
 8012972:	f04f 0800 	mov.w	r8, #0
 8012976:	4605      	mov	r5, r0
 8012978:	f04f 0900 	mov.w	r9, #0
 801297c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8012980:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012982:	7813      	ldrb	r3, [r2, #0]
 8012984:	2b2b      	cmp	r3, #43	; 0x2b
 8012986:	d04d      	beq.n	8012a24 <_strtod_l+0xd4>
 8012988:	d83a      	bhi.n	8012a00 <_strtod_l+0xb0>
 801298a:	2b0d      	cmp	r3, #13
 801298c:	d833      	bhi.n	80129f6 <_strtod_l+0xa6>
 801298e:	2b08      	cmp	r3, #8
 8012990:	d833      	bhi.n	80129fa <_strtod_l+0xaa>
 8012992:	2b00      	cmp	r3, #0
 8012994:	d03d      	beq.n	8012a12 <_strtod_l+0xc2>
 8012996:	2300      	movs	r3, #0
 8012998:	9308      	str	r3, [sp, #32]
 801299a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801299c:	7833      	ldrb	r3, [r6, #0]
 801299e:	2b30      	cmp	r3, #48	; 0x30
 80129a0:	f040 80b0 	bne.w	8012b04 <_strtod_l+0x1b4>
 80129a4:	7873      	ldrb	r3, [r6, #1]
 80129a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80129aa:	2b58      	cmp	r3, #88	; 0x58
 80129ac:	d167      	bne.n	8012a7e <_strtod_l+0x12e>
 80129ae:	9b08      	ldr	r3, [sp, #32]
 80129b0:	9301      	str	r3, [sp, #4]
 80129b2:	ab12      	add	r3, sp, #72	; 0x48
 80129b4:	9702      	str	r7, [sp, #8]
 80129b6:	9300      	str	r3, [sp, #0]
 80129b8:	4a8c      	ldr	r2, [pc, #560]	; (8012bec <_strtod_l+0x29c>)
 80129ba:	ab13      	add	r3, sp, #76	; 0x4c
 80129bc:	a911      	add	r1, sp, #68	; 0x44
 80129be:	4620      	mov	r0, r4
 80129c0:	f001 fede 	bl	8014780 <__gethex>
 80129c4:	f010 0507 	ands.w	r5, r0, #7
 80129c8:	4607      	mov	r7, r0
 80129ca:	d005      	beq.n	80129d8 <_strtod_l+0x88>
 80129cc:	2d06      	cmp	r5, #6
 80129ce:	d12b      	bne.n	8012a28 <_strtod_l+0xd8>
 80129d0:	3601      	adds	r6, #1
 80129d2:	2300      	movs	r3, #0
 80129d4:	9611      	str	r6, [sp, #68]	; 0x44
 80129d6:	9308      	str	r3, [sp, #32]
 80129d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80129da:	2b00      	cmp	r3, #0
 80129dc:	f040 854e 	bne.w	801347c <_strtod_l+0xb2c>
 80129e0:	9b08      	ldr	r3, [sp, #32]
 80129e2:	b1e3      	cbz	r3, 8012a1e <_strtod_l+0xce>
 80129e4:	ec49 8b17 	vmov	d7, r8, r9
 80129e8:	eeb1 0b47 	vneg.f64	d0, d7
 80129ec:	b017      	add	sp, #92	; 0x5c
 80129ee:	ecbd 8b0e 	vpop	{d8-d14}
 80129f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129f6:	2b20      	cmp	r3, #32
 80129f8:	d1cd      	bne.n	8012996 <_strtod_l+0x46>
 80129fa:	3201      	adds	r2, #1
 80129fc:	9211      	str	r2, [sp, #68]	; 0x44
 80129fe:	e7bf      	b.n	8012980 <_strtod_l+0x30>
 8012a00:	2b2d      	cmp	r3, #45	; 0x2d
 8012a02:	d1c8      	bne.n	8012996 <_strtod_l+0x46>
 8012a04:	2301      	movs	r3, #1
 8012a06:	9308      	str	r3, [sp, #32]
 8012a08:	1c53      	adds	r3, r2, #1
 8012a0a:	9311      	str	r3, [sp, #68]	; 0x44
 8012a0c:	7853      	ldrb	r3, [r2, #1]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d1c3      	bne.n	801299a <_strtod_l+0x4a>
 8012a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a14:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	f040 852d 	bne.w	8013478 <_strtod_l+0xb28>
 8012a1e:	ec49 8b10 	vmov	d0, r8, r9
 8012a22:	e7e3      	b.n	80129ec <_strtod_l+0x9c>
 8012a24:	2300      	movs	r3, #0
 8012a26:	e7ee      	b.n	8012a06 <_strtod_l+0xb6>
 8012a28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012a2a:	b13a      	cbz	r2, 8012a3c <_strtod_l+0xec>
 8012a2c:	2135      	movs	r1, #53	; 0x35
 8012a2e:	a814      	add	r0, sp, #80	; 0x50
 8012a30:	f002 fec0 	bl	80157b4 <__copybits>
 8012a34:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012a36:	4620      	mov	r0, r4
 8012a38:	f002 fa82 	bl	8014f40 <_Bfree>
 8012a3c:	3d01      	subs	r5, #1
 8012a3e:	2d04      	cmp	r5, #4
 8012a40:	d806      	bhi.n	8012a50 <_strtod_l+0x100>
 8012a42:	e8df f005 	tbb	[pc, r5]
 8012a46:	030a      	.short	0x030a
 8012a48:	1714      	.short	0x1714
 8012a4a:	0a          	.byte	0x0a
 8012a4b:	00          	.byte	0x00
 8012a4c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8012a50:	073f      	lsls	r7, r7, #28
 8012a52:	d5c1      	bpl.n	80129d8 <_strtod_l+0x88>
 8012a54:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8012a58:	e7be      	b.n	80129d8 <_strtod_l+0x88>
 8012a5a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8012a5e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012a60:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012a64:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012a68:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8012a6c:	e7f0      	b.n	8012a50 <_strtod_l+0x100>
 8012a6e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8012bf0 <_strtod_l+0x2a0>
 8012a72:	e7ed      	b.n	8012a50 <_strtod_l+0x100>
 8012a74:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8012a78:	f04f 38ff 	mov.w	r8, #4294967295
 8012a7c:	e7e8      	b.n	8012a50 <_strtod_l+0x100>
 8012a7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012a80:	1c5a      	adds	r2, r3, #1
 8012a82:	9211      	str	r2, [sp, #68]	; 0x44
 8012a84:	785b      	ldrb	r3, [r3, #1]
 8012a86:	2b30      	cmp	r3, #48	; 0x30
 8012a88:	d0f9      	beq.n	8012a7e <_strtod_l+0x12e>
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d0a4      	beq.n	80129d8 <_strtod_l+0x88>
 8012a8e:	2301      	movs	r3, #1
 8012a90:	f04f 0a00 	mov.w	sl, #0
 8012a94:	9304      	str	r3, [sp, #16]
 8012a96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012a98:	930a      	str	r3, [sp, #40]	; 0x28
 8012a9a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8012a9e:	f8cd a018 	str.w	sl, [sp, #24]
 8012aa2:	220a      	movs	r2, #10
 8012aa4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012aa6:	7807      	ldrb	r7, [r0, #0]
 8012aa8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8012aac:	b2d9      	uxtb	r1, r3
 8012aae:	2909      	cmp	r1, #9
 8012ab0:	d92a      	bls.n	8012b08 <_strtod_l+0x1b8>
 8012ab2:	9907      	ldr	r1, [sp, #28]
 8012ab4:	462a      	mov	r2, r5
 8012ab6:	f003 fa22 	bl	8015efe <strncmp>
 8012aba:	2800      	cmp	r0, #0
 8012abc:	d033      	beq.n	8012b26 <_strtod_l+0x1d6>
 8012abe:	2000      	movs	r0, #0
 8012ac0:	9b06      	ldr	r3, [sp, #24]
 8012ac2:	463a      	mov	r2, r7
 8012ac4:	4601      	mov	r1, r0
 8012ac6:	4607      	mov	r7, r0
 8012ac8:	2a65      	cmp	r2, #101	; 0x65
 8012aca:	d001      	beq.n	8012ad0 <_strtod_l+0x180>
 8012acc:	2a45      	cmp	r2, #69	; 0x45
 8012ace:	d117      	bne.n	8012b00 <_strtod_l+0x1b0>
 8012ad0:	b91b      	cbnz	r3, 8012ada <_strtod_l+0x18a>
 8012ad2:	9b04      	ldr	r3, [sp, #16]
 8012ad4:	4303      	orrs	r3, r0
 8012ad6:	d09c      	beq.n	8012a12 <_strtod_l+0xc2>
 8012ad8:	2300      	movs	r3, #0
 8012ada:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8012ade:	f10b 0201 	add.w	r2, fp, #1
 8012ae2:	9211      	str	r2, [sp, #68]	; 0x44
 8012ae4:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8012ae8:	2a2b      	cmp	r2, #43	; 0x2b
 8012aea:	d071      	beq.n	8012bd0 <_strtod_l+0x280>
 8012aec:	2a2d      	cmp	r2, #45	; 0x2d
 8012aee:	d077      	beq.n	8012be0 <_strtod_l+0x290>
 8012af0:	f04f 0e00 	mov.w	lr, #0
 8012af4:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8012af8:	2d09      	cmp	r5, #9
 8012afa:	d97f      	bls.n	8012bfc <_strtod_l+0x2ac>
 8012afc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8012b00:	2500      	movs	r5, #0
 8012b02:	e09b      	b.n	8012c3c <_strtod_l+0x2ec>
 8012b04:	2300      	movs	r3, #0
 8012b06:	e7c3      	b.n	8012a90 <_strtod_l+0x140>
 8012b08:	9906      	ldr	r1, [sp, #24]
 8012b0a:	2908      	cmp	r1, #8
 8012b0c:	bfdd      	ittte	le
 8012b0e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8012b10:	fb02 3301 	mlale	r3, r2, r1, r3
 8012b14:	9309      	strle	r3, [sp, #36]	; 0x24
 8012b16:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8012b1a:	9b06      	ldr	r3, [sp, #24]
 8012b1c:	3001      	adds	r0, #1
 8012b1e:	3301      	adds	r3, #1
 8012b20:	9306      	str	r3, [sp, #24]
 8012b22:	9011      	str	r0, [sp, #68]	; 0x44
 8012b24:	e7be      	b.n	8012aa4 <_strtod_l+0x154>
 8012b26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012b28:	195a      	adds	r2, r3, r5
 8012b2a:	9211      	str	r2, [sp, #68]	; 0x44
 8012b2c:	5d5a      	ldrb	r2, [r3, r5]
 8012b2e:	9b06      	ldr	r3, [sp, #24]
 8012b30:	b3a3      	cbz	r3, 8012b9c <_strtod_l+0x24c>
 8012b32:	4607      	mov	r7, r0
 8012b34:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8012b38:	2909      	cmp	r1, #9
 8012b3a:	d912      	bls.n	8012b62 <_strtod_l+0x212>
 8012b3c:	2101      	movs	r1, #1
 8012b3e:	e7c3      	b.n	8012ac8 <_strtod_l+0x178>
 8012b40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012b42:	1c5a      	adds	r2, r3, #1
 8012b44:	9211      	str	r2, [sp, #68]	; 0x44
 8012b46:	785a      	ldrb	r2, [r3, #1]
 8012b48:	3001      	adds	r0, #1
 8012b4a:	2a30      	cmp	r2, #48	; 0x30
 8012b4c:	d0f8      	beq.n	8012b40 <_strtod_l+0x1f0>
 8012b4e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8012b52:	2b08      	cmp	r3, #8
 8012b54:	f200 8497 	bhi.w	8013486 <_strtod_l+0xb36>
 8012b58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012b5a:	930a      	str	r3, [sp, #40]	; 0x28
 8012b5c:	4607      	mov	r7, r0
 8012b5e:	2000      	movs	r0, #0
 8012b60:	4603      	mov	r3, r0
 8012b62:	3a30      	subs	r2, #48	; 0x30
 8012b64:	f100 0101 	add.w	r1, r0, #1
 8012b68:	d012      	beq.n	8012b90 <_strtod_l+0x240>
 8012b6a:	440f      	add	r7, r1
 8012b6c:	eb00 0c03 	add.w	ip, r0, r3
 8012b70:	4619      	mov	r1, r3
 8012b72:	250a      	movs	r5, #10
 8012b74:	4561      	cmp	r1, ip
 8012b76:	d113      	bne.n	8012ba0 <_strtod_l+0x250>
 8012b78:	1819      	adds	r1, r3, r0
 8012b7a:	2908      	cmp	r1, #8
 8012b7c:	f103 0301 	add.w	r3, r3, #1
 8012b80:	4403      	add	r3, r0
 8012b82:	dc1c      	bgt.n	8012bbe <_strtod_l+0x26e>
 8012b84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012b86:	210a      	movs	r1, #10
 8012b88:	fb01 2200 	mla	r2, r1, r0, r2
 8012b8c:	9209      	str	r2, [sp, #36]	; 0x24
 8012b8e:	2100      	movs	r1, #0
 8012b90:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012b92:	1c50      	adds	r0, r2, #1
 8012b94:	9011      	str	r0, [sp, #68]	; 0x44
 8012b96:	7852      	ldrb	r2, [r2, #1]
 8012b98:	4608      	mov	r0, r1
 8012b9a:	e7cb      	b.n	8012b34 <_strtod_l+0x1e4>
 8012b9c:	9806      	ldr	r0, [sp, #24]
 8012b9e:	e7d4      	b.n	8012b4a <_strtod_l+0x1fa>
 8012ba0:	2908      	cmp	r1, #8
 8012ba2:	dc04      	bgt.n	8012bae <_strtod_l+0x25e>
 8012ba4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8012ba6:	436e      	muls	r6, r5
 8012ba8:	9609      	str	r6, [sp, #36]	; 0x24
 8012baa:	3101      	adds	r1, #1
 8012bac:	e7e2      	b.n	8012b74 <_strtod_l+0x224>
 8012bae:	f101 0e01 	add.w	lr, r1, #1
 8012bb2:	f1be 0f10 	cmp.w	lr, #16
 8012bb6:	bfd8      	it	le
 8012bb8:	fb05 fa0a 	mulle.w	sl, r5, sl
 8012bbc:	e7f5      	b.n	8012baa <_strtod_l+0x25a>
 8012bbe:	2b10      	cmp	r3, #16
 8012bc0:	bfdc      	itt	le
 8012bc2:	210a      	movle	r1, #10
 8012bc4:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8012bc8:	e7e1      	b.n	8012b8e <_strtod_l+0x23e>
 8012bca:	2700      	movs	r7, #0
 8012bcc:	2101      	movs	r1, #1
 8012bce:	e780      	b.n	8012ad2 <_strtod_l+0x182>
 8012bd0:	f04f 0e00 	mov.w	lr, #0
 8012bd4:	f10b 0202 	add.w	r2, fp, #2
 8012bd8:	9211      	str	r2, [sp, #68]	; 0x44
 8012bda:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8012bde:	e789      	b.n	8012af4 <_strtod_l+0x1a4>
 8012be0:	f04f 0e01 	mov.w	lr, #1
 8012be4:	e7f6      	b.n	8012bd4 <_strtod_l+0x284>
 8012be6:	bf00      	nop
 8012be8:	08016e24 	.word	0x08016e24
 8012bec:	08016b78 	.word	0x08016b78
 8012bf0:	7ff00000 	.word	0x7ff00000
 8012bf4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012bf6:	1c55      	adds	r5, r2, #1
 8012bf8:	9511      	str	r5, [sp, #68]	; 0x44
 8012bfa:	7852      	ldrb	r2, [r2, #1]
 8012bfc:	2a30      	cmp	r2, #48	; 0x30
 8012bfe:	d0f9      	beq.n	8012bf4 <_strtod_l+0x2a4>
 8012c00:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8012c04:	2d08      	cmp	r5, #8
 8012c06:	f63f af7b 	bhi.w	8012b00 <_strtod_l+0x1b0>
 8012c0a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8012c0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012c10:	9207      	str	r2, [sp, #28]
 8012c12:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012c14:	1c55      	adds	r5, r2, #1
 8012c16:	9511      	str	r5, [sp, #68]	; 0x44
 8012c18:	7852      	ldrb	r2, [r2, #1]
 8012c1a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8012c1e:	2e09      	cmp	r6, #9
 8012c20:	d937      	bls.n	8012c92 <_strtod_l+0x342>
 8012c22:	9e07      	ldr	r6, [sp, #28]
 8012c24:	1bad      	subs	r5, r5, r6
 8012c26:	2d08      	cmp	r5, #8
 8012c28:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8012c2c:	dc02      	bgt.n	8012c34 <_strtod_l+0x2e4>
 8012c2e:	4565      	cmp	r5, ip
 8012c30:	bfa8      	it	ge
 8012c32:	4665      	movge	r5, ip
 8012c34:	f1be 0f00 	cmp.w	lr, #0
 8012c38:	d000      	beq.n	8012c3c <_strtod_l+0x2ec>
 8012c3a:	426d      	negs	r5, r5
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d14d      	bne.n	8012cdc <_strtod_l+0x38c>
 8012c40:	9b04      	ldr	r3, [sp, #16]
 8012c42:	4303      	orrs	r3, r0
 8012c44:	f47f aec8 	bne.w	80129d8 <_strtod_l+0x88>
 8012c48:	2900      	cmp	r1, #0
 8012c4a:	f47f aee2 	bne.w	8012a12 <_strtod_l+0xc2>
 8012c4e:	2a69      	cmp	r2, #105	; 0x69
 8012c50:	d027      	beq.n	8012ca2 <_strtod_l+0x352>
 8012c52:	dc24      	bgt.n	8012c9e <_strtod_l+0x34e>
 8012c54:	2a49      	cmp	r2, #73	; 0x49
 8012c56:	d024      	beq.n	8012ca2 <_strtod_l+0x352>
 8012c58:	2a4e      	cmp	r2, #78	; 0x4e
 8012c5a:	f47f aeda 	bne.w	8012a12 <_strtod_l+0xc2>
 8012c5e:	4996      	ldr	r1, [pc, #600]	; (8012eb8 <_strtod_l+0x568>)
 8012c60:	a811      	add	r0, sp, #68	; 0x44
 8012c62:	f001 ffe5 	bl	8014c30 <__match>
 8012c66:	2800      	cmp	r0, #0
 8012c68:	f43f aed3 	beq.w	8012a12 <_strtod_l+0xc2>
 8012c6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012c6e:	781b      	ldrb	r3, [r3, #0]
 8012c70:	2b28      	cmp	r3, #40	; 0x28
 8012c72:	d12d      	bne.n	8012cd0 <_strtod_l+0x380>
 8012c74:	4991      	ldr	r1, [pc, #580]	; (8012ebc <_strtod_l+0x56c>)
 8012c76:	aa14      	add	r2, sp, #80	; 0x50
 8012c78:	a811      	add	r0, sp, #68	; 0x44
 8012c7a:	f001 ffed 	bl	8014c58 <__hexnan>
 8012c7e:	2805      	cmp	r0, #5
 8012c80:	d126      	bne.n	8012cd0 <_strtod_l+0x380>
 8012c82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012c84:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8012c88:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8012c8c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8012c90:	e6a2      	b.n	80129d8 <_strtod_l+0x88>
 8012c92:	250a      	movs	r5, #10
 8012c94:	fb05 250c 	mla	r5, r5, ip, r2
 8012c98:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8012c9c:	e7b9      	b.n	8012c12 <_strtod_l+0x2c2>
 8012c9e:	2a6e      	cmp	r2, #110	; 0x6e
 8012ca0:	e7db      	b.n	8012c5a <_strtod_l+0x30a>
 8012ca2:	4987      	ldr	r1, [pc, #540]	; (8012ec0 <_strtod_l+0x570>)
 8012ca4:	a811      	add	r0, sp, #68	; 0x44
 8012ca6:	f001 ffc3 	bl	8014c30 <__match>
 8012caa:	2800      	cmp	r0, #0
 8012cac:	f43f aeb1 	beq.w	8012a12 <_strtod_l+0xc2>
 8012cb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012cb2:	4984      	ldr	r1, [pc, #528]	; (8012ec4 <_strtod_l+0x574>)
 8012cb4:	3b01      	subs	r3, #1
 8012cb6:	a811      	add	r0, sp, #68	; 0x44
 8012cb8:	9311      	str	r3, [sp, #68]	; 0x44
 8012cba:	f001 ffb9 	bl	8014c30 <__match>
 8012cbe:	b910      	cbnz	r0, 8012cc6 <_strtod_l+0x376>
 8012cc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012cc2:	3301      	adds	r3, #1
 8012cc4:	9311      	str	r3, [sp, #68]	; 0x44
 8012cc6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8012ed8 <_strtod_l+0x588>
 8012cca:	f04f 0800 	mov.w	r8, #0
 8012cce:	e683      	b.n	80129d8 <_strtod_l+0x88>
 8012cd0:	487d      	ldr	r0, [pc, #500]	; (8012ec8 <_strtod_l+0x578>)
 8012cd2:	f003 f8c9 	bl	8015e68 <nan>
 8012cd6:	ec59 8b10 	vmov	r8, r9, d0
 8012cda:	e67d      	b.n	80129d8 <_strtod_l+0x88>
 8012cdc:	1bea      	subs	r2, r5, r7
 8012cde:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8012ce2:	9207      	str	r2, [sp, #28]
 8012ce4:	9a06      	ldr	r2, [sp, #24]
 8012ce6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012cea:	2a00      	cmp	r2, #0
 8012cec:	bf08      	it	eq
 8012cee:	461a      	moveq	r2, r3
 8012cf0:	2b10      	cmp	r3, #16
 8012cf2:	9206      	str	r2, [sp, #24]
 8012cf4:	461a      	mov	r2, r3
 8012cf6:	bfa8      	it	ge
 8012cf8:	2210      	movge	r2, #16
 8012cfa:	2b09      	cmp	r3, #9
 8012cfc:	ec59 8b17 	vmov	r8, r9, d7
 8012d00:	dd0c      	ble.n	8012d1c <_strtod_l+0x3cc>
 8012d02:	4972      	ldr	r1, [pc, #456]	; (8012ecc <_strtod_l+0x57c>)
 8012d04:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8012d08:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8012d0c:	ee06 aa90 	vmov	s13, sl
 8012d10:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8012d14:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012d18:	ec59 8b16 	vmov	r8, r9, d6
 8012d1c:	2b0f      	cmp	r3, #15
 8012d1e:	dc36      	bgt.n	8012d8e <_strtod_l+0x43e>
 8012d20:	9907      	ldr	r1, [sp, #28]
 8012d22:	2900      	cmp	r1, #0
 8012d24:	f43f ae58 	beq.w	80129d8 <_strtod_l+0x88>
 8012d28:	dd23      	ble.n	8012d72 <_strtod_l+0x422>
 8012d2a:	2916      	cmp	r1, #22
 8012d2c:	dc0b      	bgt.n	8012d46 <_strtod_l+0x3f6>
 8012d2e:	4b67      	ldr	r3, [pc, #412]	; (8012ecc <_strtod_l+0x57c>)
 8012d30:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8012d34:	ed93 7b00 	vldr	d7, [r3]
 8012d38:	ec49 8b16 	vmov	d6, r8, r9
 8012d3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012d40:	ec59 8b17 	vmov	r8, r9, d7
 8012d44:	e648      	b.n	80129d8 <_strtod_l+0x88>
 8012d46:	9807      	ldr	r0, [sp, #28]
 8012d48:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8012d4c:	4281      	cmp	r1, r0
 8012d4e:	db1e      	blt.n	8012d8e <_strtod_l+0x43e>
 8012d50:	4a5e      	ldr	r2, [pc, #376]	; (8012ecc <_strtod_l+0x57c>)
 8012d52:	f1c3 030f 	rsb	r3, r3, #15
 8012d56:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8012d5a:	ed91 7b00 	vldr	d7, [r1]
 8012d5e:	ec49 8b16 	vmov	d6, r8, r9
 8012d62:	1ac3      	subs	r3, r0, r3
 8012d64:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8012d68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012d6c:	ed92 6b00 	vldr	d6, [r2]
 8012d70:	e7e4      	b.n	8012d3c <_strtod_l+0x3ec>
 8012d72:	9907      	ldr	r1, [sp, #28]
 8012d74:	3116      	adds	r1, #22
 8012d76:	db0a      	blt.n	8012d8e <_strtod_l+0x43e>
 8012d78:	4b54      	ldr	r3, [pc, #336]	; (8012ecc <_strtod_l+0x57c>)
 8012d7a:	1b7d      	subs	r5, r7, r5
 8012d7c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8012d80:	ed95 7b00 	vldr	d7, [r5]
 8012d84:	ec49 8b16 	vmov	d6, r8, r9
 8012d88:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012d8c:	e7d8      	b.n	8012d40 <_strtod_l+0x3f0>
 8012d8e:	9907      	ldr	r1, [sp, #28]
 8012d90:	1a9a      	subs	r2, r3, r2
 8012d92:	440a      	add	r2, r1
 8012d94:	2a00      	cmp	r2, #0
 8012d96:	dd6f      	ble.n	8012e78 <_strtod_l+0x528>
 8012d98:	f012 000f 	ands.w	r0, r2, #15
 8012d9c:	d00a      	beq.n	8012db4 <_strtod_l+0x464>
 8012d9e:	494b      	ldr	r1, [pc, #300]	; (8012ecc <_strtod_l+0x57c>)
 8012da0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8012da4:	ed91 7b00 	vldr	d7, [r1]
 8012da8:	ec49 8b16 	vmov	d6, r8, r9
 8012dac:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012db0:	ec59 8b17 	vmov	r8, r9, d7
 8012db4:	f032 020f 	bics.w	r2, r2, #15
 8012db8:	d04f      	beq.n	8012e5a <_strtod_l+0x50a>
 8012dba:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8012dbe:	dd22      	ble.n	8012e06 <_strtod_l+0x4b6>
 8012dc0:	2500      	movs	r5, #0
 8012dc2:	462e      	mov	r6, r5
 8012dc4:	9506      	str	r5, [sp, #24]
 8012dc6:	462f      	mov	r7, r5
 8012dc8:	2322      	movs	r3, #34	; 0x22
 8012dca:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8012ed8 <_strtod_l+0x588>
 8012dce:	6023      	str	r3, [r4, #0]
 8012dd0:	f04f 0800 	mov.w	r8, #0
 8012dd4:	9b06      	ldr	r3, [sp, #24]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	f43f adfe 	beq.w	80129d8 <_strtod_l+0x88>
 8012ddc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012dde:	4620      	mov	r0, r4
 8012de0:	f002 f8ae 	bl	8014f40 <_Bfree>
 8012de4:	4639      	mov	r1, r7
 8012de6:	4620      	mov	r0, r4
 8012de8:	f002 f8aa 	bl	8014f40 <_Bfree>
 8012dec:	4631      	mov	r1, r6
 8012dee:	4620      	mov	r0, r4
 8012df0:	f002 f8a6 	bl	8014f40 <_Bfree>
 8012df4:	9906      	ldr	r1, [sp, #24]
 8012df6:	4620      	mov	r0, r4
 8012df8:	f002 f8a2 	bl	8014f40 <_Bfree>
 8012dfc:	4629      	mov	r1, r5
 8012dfe:	4620      	mov	r0, r4
 8012e00:	f002 f89e 	bl	8014f40 <_Bfree>
 8012e04:	e5e8      	b.n	80129d8 <_strtod_l+0x88>
 8012e06:	2000      	movs	r0, #0
 8012e08:	ec49 8b17 	vmov	d7, r8, r9
 8012e0c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8012ed0 <_strtod_l+0x580>
 8012e10:	1112      	asrs	r2, r2, #4
 8012e12:	4601      	mov	r1, r0
 8012e14:	2a01      	cmp	r2, #1
 8012e16:	dc23      	bgt.n	8012e60 <_strtod_l+0x510>
 8012e18:	b108      	cbz	r0, 8012e1e <_strtod_l+0x4ce>
 8012e1a:	ec59 8b17 	vmov	r8, r9, d7
 8012e1e:	4a2c      	ldr	r2, [pc, #176]	; (8012ed0 <_strtod_l+0x580>)
 8012e20:	482c      	ldr	r0, [pc, #176]	; (8012ed4 <_strtod_l+0x584>)
 8012e22:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012e26:	ed92 7b00 	vldr	d7, [r2]
 8012e2a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8012e2e:	ec49 8b16 	vmov	d6, r8, r9
 8012e32:	4a29      	ldr	r2, [pc, #164]	; (8012ed8 <_strtod_l+0x588>)
 8012e34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012e38:	ee17 1a90 	vmov	r1, s15
 8012e3c:	400a      	ands	r2, r1
 8012e3e:	4282      	cmp	r2, r0
 8012e40:	ec59 8b17 	vmov	r8, r9, d7
 8012e44:	d8bc      	bhi.n	8012dc0 <_strtod_l+0x470>
 8012e46:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8012e4a:	4282      	cmp	r2, r0
 8012e4c:	bf86      	itte	hi
 8012e4e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8012edc <_strtod_l+0x58c>
 8012e52:	f04f 38ff 	movhi.w	r8, #4294967295
 8012e56:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8012e5a:	2200      	movs	r2, #0
 8012e5c:	9204      	str	r2, [sp, #16]
 8012e5e:	e078      	b.n	8012f52 <_strtod_l+0x602>
 8012e60:	07d6      	lsls	r6, r2, #31
 8012e62:	d504      	bpl.n	8012e6e <_strtod_l+0x51e>
 8012e64:	ed9c 6b00 	vldr	d6, [ip]
 8012e68:	2001      	movs	r0, #1
 8012e6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012e6e:	3101      	adds	r1, #1
 8012e70:	1052      	asrs	r2, r2, #1
 8012e72:	f10c 0c08 	add.w	ip, ip, #8
 8012e76:	e7cd      	b.n	8012e14 <_strtod_l+0x4c4>
 8012e78:	d0ef      	beq.n	8012e5a <_strtod_l+0x50a>
 8012e7a:	4252      	negs	r2, r2
 8012e7c:	f012 000f 	ands.w	r0, r2, #15
 8012e80:	d00a      	beq.n	8012e98 <_strtod_l+0x548>
 8012e82:	4912      	ldr	r1, [pc, #72]	; (8012ecc <_strtod_l+0x57c>)
 8012e84:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8012e88:	ed91 7b00 	vldr	d7, [r1]
 8012e8c:	ec49 8b16 	vmov	d6, r8, r9
 8012e90:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012e94:	ec59 8b17 	vmov	r8, r9, d7
 8012e98:	1112      	asrs	r2, r2, #4
 8012e9a:	d0de      	beq.n	8012e5a <_strtod_l+0x50a>
 8012e9c:	2a1f      	cmp	r2, #31
 8012e9e:	dd1f      	ble.n	8012ee0 <_strtod_l+0x590>
 8012ea0:	2500      	movs	r5, #0
 8012ea2:	462e      	mov	r6, r5
 8012ea4:	9506      	str	r5, [sp, #24]
 8012ea6:	462f      	mov	r7, r5
 8012ea8:	2322      	movs	r3, #34	; 0x22
 8012eaa:	f04f 0800 	mov.w	r8, #0
 8012eae:	f04f 0900 	mov.w	r9, #0
 8012eb2:	6023      	str	r3, [r4, #0]
 8012eb4:	e78e      	b.n	8012dd4 <_strtod_l+0x484>
 8012eb6:	bf00      	nop
 8012eb8:	08016b49 	.word	0x08016b49
 8012ebc:	08016b8c 	.word	0x08016b8c
 8012ec0:	08016b41 	.word	0x08016b41
 8012ec4:	08016ccc 	.word	0x08016ccc
 8012ec8:	08016fe0 	.word	0x08016fe0
 8012ecc:	08016ec0 	.word	0x08016ec0
 8012ed0:	08016e98 	.word	0x08016e98
 8012ed4:	7ca00000 	.word	0x7ca00000
 8012ed8:	7ff00000 	.word	0x7ff00000
 8012edc:	7fefffff 	.word	0x7fefffff
 8012ee0:	f012 0110 	ands.w	r1, r2, #16
 8012ee4:	bf18      	it	ne
 8012ee6:	216a      	movne	r1, #106	; 0x6a
 8012ee8:	9104      	str	r1, [sp, #16]
 8012eea:	ec49 8b17 	vmov	d7, r8, r9
 8012eee:	49be      	ldr	r1, [pc, #760]	; (80131e8 <_strtod_l+0x898>)
 8012ef0:	2000      	movs	r0, #0
 8012ef2:	07d6      	lsls	r6, r2, #31
 8012ef4:	d504      	bpl.n	8012f00 <_strtod_l+0x5b0>
 8012ef6:	ed91 6b00 	vldr	d6, [r1]
 8012efa:	2001      	movs	r0, #1
 8012efc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012f00:	1052      	asrs	r2, r2, #1
 8012f02:	f101 0108 	add.w	r1, r1, #8
 8012f06:	d1f4      	bne.n	8012ef2 <_strtod_l+0x5a2>
 8012f08:	b108      	cbz	r0, 8012f0e <_strtod_l+0x5be>
 8012f0a:	ec59 8b17 	vmov	r8, r9, d7
 8012f0e:	9a04      	ldr	r2, [sp, #16]
 8012f10:	b1c2      	cbz	r2, 8012f44 <_strtod_l+0x5f4>
 8012f12:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8012f16:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8012f1a:	2a00      	cmp	r2, #0
 8012f1c:	4648      	mov	r0, r9
 8012f1e:	dd11      	ble.n	8012f44 <_strtod_l+0x5f4>
 8012f20:	2a1f      	cmp	r2, #31
 8012f22:	f340 812e 	ble.w	8013182 <_strtod_l+0x832>
 8012f26:	2a34      	cmp	r2, #52	; 0x34
 8012f28:	bfde      	ittt	le
 8012f2a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8012f2e:	f04f 32ff 	movle.w	r2, #4294967295
 8012f32:	fa02 f101 	lslle.w	r1, r2, r1
 8012f36:	f04f 0800 	mov.w	r8, #0
 8012f3a:	bfcc      	ite	gt
 8012f3c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8012f40:	ea01 0900 	andle.w	r9, r1, r0
 8012f44:	ec49 8b17 	vmov	d7, r8, r9
 8012f48:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f50:	d0a6      	beq.n	8012ea0 <_strtod_l+0x550>
 8012f52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f54:	9200      	str	r2, [sp, #0]
 8012f56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012f58:	9a06      	ldr	r2, [sp, #24]
 8012f5a:	4620      	mov	r0, r4
 8012f5c:	f002 f858 	bl	8015010 <__s2b>
 8012f60:	9006      	str	r0, [sp, #24]
 8012f62:	2800      	cmp	r0, #0
 8012f64:	f43f af2c 	beq.w	8012dc0 <_strtod_l+0x470>
 8012f68:	9b07      	ldr	r3, [sp, #28]
 8012f6a:	1b7d      	subs	r5, r7, r5
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	bfb4      	ite	lt
 8012f70:	462b      	movlt	r3, r5
 8012f72:	2300      	movge	r3, #0
 8012f74:	9309      	str	r3, [sp, #36]	; 0x24
 8012f76:	9b07      	ldr	r3, [sp, #28]
 8012f78:	ed9f 9b93 	vldr	d9, [pc, #588]	; 80131c8 <_strtod_l+0x878>
 8012f7c:	ed9f ab94 	vldr	d10, [pc, #592]	; 80131d0 <_strtod_l+0x880>
 8012f80:	ed9f bb95 	vldr	d11, [pc, #596]	; 80131d8 <_strtod_l+0x888>
 8012f84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012f88:	2500      	movs	r5, #0
 8012f8a:	930c      	str	r3, [sp, #48]	; 0x30
 8012f8c:	462e      	mov	r6, r5
 8012f8e:	9b06      	ldr	r3, [sp, #24]
 8012f90:	4620      	mov	r0, r4
 8012f92:	6859      	ldr	r1, [r3, #4]
 8012f94:	f001 ff94 	bl	8014ec0 <_Balloc>
 8012f98:	4607      	mov	r7, r0
 8012f9a:	2800      	cmp	r0, #0
 8012f9c:	f43f af14 	beq.w	8012dc8 <_strtod_l+0x478>
 8012fa0:	9b06      	ldr	r3, [sp, #24]
 8012fa2:	691a      	ldr	r2, [r3, #16]
 8012fa4:	3202      	adds	r2, #2
 8012fa6:	f103 010c 	add.w	r1, r3, #12
 8012faa:	0092      	lsls	r2, r2, #2
 8012fac:	300c      	adds	r0, #12
 8012fae:	f001 ff6d 	bl	8014e8c <memcpy>
 8012fb2:	ec49 8b10 	vmov	d0, r8, r9
 8012fb6:	aa14      	add	r2, sp, #80	; 0x50
 8012fb8:	a913      	add	r1, sp, #76	; 0x4c
 8012fba:	4620      	mov	r0, r4
 8012fbc:	f002 fb6e 	bl	801569c <__d2b>
 8012fc0:	ec49 8b18 	vmov	d8, r8, r9
 8012fc4:	9012      	str	r0, [sp, #72]	; 0x48
 8012fc6:	2800      	cmp	r0, #0
 8012fc8:	f43f aefe 	beq.w	8012dc8 <_strtod_l+0x478>
 8012fcc:	2101      	movs	r1, #1
 8012fce:	4620      	mov	r0, r4
 8012fd0:	f002 f8b8 	bl	8015144 <__i2b>
 8012fd4:	4606      	mov	r6, r0
 8012fd6:	2800      	cmp	r0, #0
 8012fd8:	f43f aef6 	beq.w	8012dc8 <_strtod_l+0x478>
 8012fdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012fde:	9914      	ldr	r1, [sp, #80]	; 0x50
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	bfab      	itete	ge
 8012fe4:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8012fe6:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8012fe8:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8012fec:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8012ff0:	bfac      	ite	ge
 8012ff2:	eb03 0b02 	addge.w	fp, r3, r2
 8012ff6:	eba2 0a03 	sublt.w	sl, r2, r3
 8012ffa:	9a04      	ldr	r2, [sp, #16]
 8012ffc:	1a9b      	subs	r3, r3, r2
 8012ffe:	440b      	add	r3, r1
 8013000:	4a7a      	ldr	r2, [pc, #488]	; (80131ec <_strtod_l+0x89c>)
 8013002:	3b01      	subs	r3, #1
 8013004:	4293      	cmp	r3, r2
 8013006:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801300a:	f280 80cd 	bge.w	80131a8 <_strtod_l+0x858>
 801300e:	1ad2      	subs	r2, r2, r3
 8013010:	2a1f      	cmp	r2, #31
 8013012:	eba1 0102 	sub.w	r1, r1, r2
 8013016:	f04f 0001 	mov.w	r0, #1
 801301a:	f300 80b9 	bgt.w	8013190 <_strtod_l+0x840>
 801301e:	fa00 f302 	lsl.w	r3, r0, r2
 8013022:	930b      	str	r3, [sp, #44]	; 0x2c
 8013024:	2300      	movs	r3, #0
 8013026:	930a      	str	r3, [sp, #40]	; 0x28
 8013028:	eb0b 0301 	add.w	r3, fp, r1
 801302c:	9a04      	ldr	r2, [sp, #16]
 801302e:	459b      	cmp	fp, r3
 8013030:	448a      	add	sl, r1
 8013032:	4492      	add	sl, r2
 8013034:	465a      	mov	r2, fp
 8013036:	bfa8      	it	ge
 8013038:	461a      	movge	r2, r3
 801303a:	4552      	cmp	r2, sl
 801303c:	bfa8      	it	ge
 801303e:	4652      	movge	r2, sl
 8013040:	2a00      	cmp	r2, #0
 8013042:	bfc2      	ittt	gt
 8013044:	1a9b      	subgt	r3, r3, r2
 8013046:	ebaa 0a02 	subgt.w	sl, sl, r2
 801304a:	ebab 0b02 	subgt.w	fp, fp, r2
 801304e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013050:	2a00      	cmp	r2, #0
 8013052:	dd18      	ble.n	8013086 <_strtod_l+0x736>
 8013054:	4631      	mov	r1, r6
 8013056:	4620      	mov	r0, r4
 8013058:	930f      	str	r3, [sp, #60]	; 0x3c
 801305a:	f002 f933 	bl	80152c4 <__pow5mult>
 801305e:	4606      	mov	r6, r0
 8013060:	2800      	cmp	r0, #0
 8013062:	f43f aeb1 	beq.w	8012dc8 <_strtod_l+0x478>
 8013066:	4601      	mov	r1, r0
 8013068:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801306a:	4620      	mov	r0, r4
 801306c:	f002 f880 	bl	8015170 <__multiply>
 8013070:	900e      	str	r0, [sp, #56]	; 0x38
 8013072:	2800      	cmp	r0, #0
 8013074:	f43f aea8 	beq.w	8012dc8 <_strtod_l+0x478>
 8013078:	9912      	ldr	r1, [sp, #72]	; 0x48
 801307a:	4620      	mov	r0, r4
 801307c:	f001 ff60 	bl	8014f40 <_Bfree>
 8013080:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013082:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013084:	9212      	str	r2, [sp, #72]	; 0x48
 8013086:	2b00      	cmp	r3, #0
 8013088:	f300 8093 	bgt.w	80131b2 <_strtod_l+0x862>
 801308c:	9b07      	ldr	r3, [sp, #28]
 801308e:	2b00      	cmp	r3, #0
 8013090:	dd08      	ble.n	80130a4 <_strtod_l+0x754>
 8013092:	4639      	mov	r1, r7
 8013094:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013096:	4620      	mov	r0, r4
 8013098:	f002 f914 	bl	80152c4 <__pow5mult>
 801309c:	4607      	mov	r7, r0
 801309e:	2800      	cmp	r0, #0
 80130a0:	f43f ae92 	beq.w	8012dc8 <_strtod_l+0x478>
 80130a4:	f1ba 0f00 	cmp.w	sl, #0
 80130a8:	dd08      	ble.n	80130bc <_strtod_l+0x76c>
 80130aa:	4639      	mov	r1, r7
 80130ac:	4652      	mov	r2, sl
 80130ae:	4620      	mov	r0, r4
 80130b0:	f002 f962 	bl	8015378 <__lshift>
 80130b4:	4607      	mov	r7, r0
 80130b6:	2800      	cmp	r0, #0
 80130b8:	f43f ae86 	beq.w	8012dc8 <_strtod_l+0x478>
 80130bc:	f1bb 0f00 	cmp.w	fp, #0
 80130c0:	dd08      	ble.n	80130d4 <_strtod_l+0x784>
 80130c2:	4631      	mov	r1, r6
 80130c4:	465a      	mov	r2, fp
 80130c6:	4620      	mov	r0, r4
 80130c8:	f002 f956 	bl	8015378 <__lshift>
 80130cc:	4606      	mov	r6, r0
 80130ce:	2800      	cmp	r0, #0
 80130d0:	f43f ae7a 	beq.w	8012dc8 <_strtod_l+0x478>
 80130d4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80130d6:	463a      	mov	r2, r7
 80130d8:	4620      	mov	r0, r4
 80130da:	f002 f9d9 	bl	8015490 <__mdiff>
 80130de:	4605      	mov	r5, r0
 80130e0:	2800      	cmp	r0, #0
 80130e2:	f43f ae71 	beq.w	8012dc8 <_strtod_l+0x478>
 80130e6:	2300      	movs	r3, #0
 80130e8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80130ec:	60c3      	str	r3, [r0, #12]
 80130ee:	4631      	mov	r1, r6
 80130f0:	f002 f9b2 	bl	8015458 <__mcmp>
 80130f4:	2800      	cmp	r0, #0
 80130f6:	da7d      	bge.n	80131f4 <_strtod_l+0x8a4>
 80130f8:	ea5a 0308 	orrs.w	r3, sl, r8
 80130fc:	f040 80a3 	bne.w	8013246 <_strtod_l+0x8f6>
 8013100:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013104:	2b00      	cmp	r3, #0
 8013106:	f040 809e 	bne.w	8013246 <_strtod_l+0x8f6>
 801310a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801310e:	0d1b      	lsrs	r3, r3, #20
 8013110:	051b      	lsls	r3, r3, #20
 8013112:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013116:	f240 8096 	bls.w	8013246 <_strtod_l+0x8f6>
 801311a:	696b      	ldr	r3, [r5, #20]
 801311c:	b91b      	cbnz	r3, 8013126 <_strtod_l+0x7d6>
 801311e:	692b      	ldr	r3, [r5, #16]
 8013120:	2b01      	cmp	r3, #1
 8013122:	f340 8090 	ble.w	8013246 <_strtod_l+0x8f6>
 8013126:	4629      	mov	r1, r5
 8013128:	2201      	movs	r2, #1
 801312a:	4620      	mov	r0, r4
 801312c:	f002 f924 	bl	8015378 <__lshift>
 8013130:	4631      	mov	r1, r6
 8013132:	4605      	mov	r5, r0
 8013134:	f002 f990 	bl	8015458 <__mcmp>
 8013138:	2800      	cmp	r0, #0
 801313a:	f340 8084 	ble.w	8013246 <_strtod_l+0x8f6>
 801313e:	9904      	ldr	r1, [sp, #16]
 8013140:	4a2b      	ldr	r2, [pc, #172]	; (80131f0 <_strtod_l+0x8a0>)
 8013142:	464b      	mov	r3, r9
 8013144:	2900      	cmp	r1, #0
 8013146:	f000 809d 	beq.w	8013284 <_strtod_l+0x934>
 801314a:	ea02 0109 	and.w	r1, r2, r9
 801314e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013152:	f300 8097 	bgt.w	8013284 <_strtod_l+0x934>
 8013156:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801315a:	f77f aea5 	ble.w	8012ea8 <_strtod_l+0x558>
 801315e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80131e0 <_strtod_l+0x890>
 8013162:	ec49 8b16 	vmov	d6, r8, r9
 8013166:	ee26 7b07 	vmul.f64	d7, d6, d7
 801316a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801316e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8013172:	4313      	orrs	r3, r2
 8013174:	bf08      	it	eq
 8013176:	2322      	moveq	r3, #34	; 0x22
 8013178:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801317c:	bf08      	it	eq
 801317e:	6023      	streq	r3, [r4, #0]
 8013180:	e62c      	b.n	8012ddc <_strtod_l+0x48c>
 8013182:	f04f 31ff 	mov.w	r1, #4294967295
 8013186:	fa01 f202 	lsl.w	r2, r1, r2
 801318a:	ea02 0808 	and.w	r8, r2, r8
 801318e:	e6d9      	b.n	8012f44 <_strtod_l+0x5f4>
 8013190:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8013194:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8013198:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801319c:	33e2      	adds	r3, #226	; 0xe2
 801319e:	fa00 f303 	lsl.w	r3, r0, r3
 80131a2:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 80131a6:	e73f      	b.n	8013028 <_strtod_l+0x6d8>
 80131a8:	2200      	movs	r2, #0
 80131aa:	2301      	movs	r3, #1
 80131ac:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80131b0:	e73a      	b.n	8013028 <_strtod_l+0x6d8>
 80131b2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80131b4:	461a      	mov	r2, r3
 80131b6:	4620      	mov	r0, r4
 80131b8:	f002 f8de 	bl	8015378 <__lshift>
 80131bc:	9012      	str	r0, [sp, #72]	; 0x48
 80131be:	2800      	cmp	r0, #0
 80131c0:	f47f af64 	bne.w	801308c <_strtod_l+0x73c>
 80131c4:	e600      	b.n	8012dc8 <_strtod_l+0x478>
 80131c6:	bf00      	nop
 80131c8:	94a03595 	.word	0x94a03595
 80131cc:	3fcfffff 	.word	0x3fcfffff
 80131d0:	94a03595 	.word	0x94a03595
 80131d4:	3fdfffff 	.word	0x3fdfffff
 80131d8:	35afe535 	.word	0x35afe535
 80131dc:	3fe00000 	.word	0x3fe00000
 80131e0:	00000000 	.word	0x00000000
 80131e4:	39500000 	.word	0x39500000
 80131e8:	08016ba0 	.word	0x08016ba0
 80131ec:	fffffc02 	.word	0xfffffc02
 80131f0:	7ff00000 	.word	0x7ff00000
 80131f4:	46cb      	mov	fp, r9
 80131f6:	d15f      	bne.n	80132b8 <_strtod_l+0x968>
 80131f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80131fc:	f1ba 0f00 	cmp.w	sl, #0
 8013200:	d02a      	beq.n	8013258 <_strtod_l+0x908>
 8013202:	4aa7      	ldr	r2, [pc, #668]	; (80134a0 <_strtod_l+0xb50>)
 8013204:	4293      	cmp	r3, r2
 8013206:	d12b      	bne.n	8013260 <_strtod_l+0x910>
 8013208:	9b04      	ldr	r3, [sp, #16]
 801320a:	4642      	mov	r2, r8
 801320c:	b1fb      	cbz	r3, 801324e <_strtod_l+0x8fe>
 801320e:	4ba5      	ldr	r3, [pc, #660]	; (80134a4 <_strtod_l+0xb54>)
 8013210:	ea09 0303 	and.w	r3, r9, r3
 8013214:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013218:	f04f 31ff 	mov.w	r1, #4294967295
 801321c:	d81a      	bhi.n	8013254 <_strtod_l+0x904>
 801321e:	0d1b      	lsrs	r3, r3, #20
 8013220:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013224:	fa01 f303 	lsl.w	r3, r1, r3
 8013228:	429a      	cmp	r2, r3
 801322a:	d119      	bne.n	8013260 <_strtod_l+0x910>
 801322c:	4b9e      	ldr	r3, [pc, #632]	; (80134a8 <_strtod_l+0xb58>)
 801322e:	459b      	cmp	fp, r3
 8013230:	d102      	bne.n	8013238 <_strtod_l+0x8e8>
 8013232:	3201      	adds	r2, #1
 8013234:	f43f adc8 	beq.w	8012dc8 <_strtod_l+0x478>
 8013238:	4b9a      	ldr	r3, [pc, #616]	; (80134a4 <_strtod_l+0xb54>)
 801323a:	ea0b 0303 	and.w	r3, fp, r3
 801323e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8013242:	f04f 0800 	mov.w	r8, #0
 8013246:	9b04      	ldr	r3, [sp, #16]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d188      	bne.n	801315e <_strtod_l+0x80e>
 801324c:	e5c6      	b.n	8012ddc <_strtod_l+0x48c>
 801324e:	f04f 33ff 	mov.w	r3, #4294967295
 8013252:	e7e9      	b.n	8013228 <_strtod_l+0x8d8>
 8013254:	460b      	mov	r3, r1
 8013256:	e7e7      	b.n	8013228 <_strtod_l+0x8d8>
 8013258:	ea53 0308 	orrs.w	r3, r3, r8
 801325c:	f43f af6f 	beq.w	801313e <_strtod_l+0x7ee>
 8013260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013262:	b1cb      	cbz	r3, 8013298 <_strtod_l+0x948>
 8013264:	ea13 0f0b 	tst.w	r3, fp
 8013268:	d0ed      	beq.n	8013246 <_strtod_l+0x8f6>
 801326a:	9a04      	ldr	r2, [sp, #16]
 801326c:	4640      	mov	r0, r8
 801326e:	4649      	mov	r1, r9
 8013270:	f1ba 0f00 	cmp.w	sl, #0
 8013274:	d014      	beq.n	80132a0 <_strtod_l+0x950>
 8013276:	f7ff fb4f 	bl	8012918 <sulp>
 801327a:	ee38 7b00 	vadd.f64	d7, d8, d0
 801327e:	ec59 8b17 	vmov	r8, r9, d7
 8013282:	e7e0      	b.n	8013246 <_strtod_l+0x8f6>
 8013284:	4013      	ands	r3, r2
 8013286:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801328a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801328e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8013292:	f04f 38ff 	mov.w	r8, #4294967295
 8013296:	e7d6      	b.n	8013246 <_strtod_l+0x8f6>
 8013298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801329a:	ea13 0f08 	tst.w	r3, r8
 801329e:	e7e3      	b.n	8013268 <_strtod_l+0x918>
 80132a0:	f7ff fb3a 	bl	8012918 <sulp>
 80132a4:	ee38 0b40 	vsub.f64	d0, d8, d0
 80132a8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80132ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132b0:	ec59 8b10 	vmov	r8, r9, d0
 80132b4:	d1c7      	bne.n	8013246 <_strtod_l+0x8f6>
 80132b6:	e5f7      	b.n	8012ea8 <_strtod_l+0x558>
 80132b8:	4631      	mov	r1, r6
 80132ba:	4628      	mov	r0, r5
 80132bc:	f002 fa4a 	bl	8015754 <__ratio>
 80132c0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80132c4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80132c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132cc:	d865      	bhi.n	801339a <_strtod_l+0xa4a>
 80132ce:	f1ba 0f00 	cmp.w	sl, #0
 80132d2:	d042      	beq.n	801335a <_strtod_l+0xa0a>
 80132d4:	4b75      	ldr	r3, [pc, #468]	; (80134ac <_strtod_l+0xb5c>)
 80132d6:	2200      	movs	r2, #0
 80132d8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80132dc:	4871      	ldr	r0, [pc, #452]	; (80134a4 <_strtod_l+0xb54>)
 80132de:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80134b8 <_strtod_l+0xb68>
 80132e2:	ea0b 0100 	and.w	r1, fp, r0
 80132e6:	4561      	cmp	r1, ip
 80132e8:	f040 808e 	bne.w	8013408 <_strtod_l+0xab8>
 80132ec:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80132f0:	ec49 8b10 	vmov	d0, r8, r9
 80132f4:	ec43 2b1c 	vmov	d12, r2, r3
 80132f8:	910a      	str	r1, [sp, #40]	; 0x28
 80132fa:	f002 f953 	bl	80155a4 <__ulp>
 80132fe:	ec49 8b1e 	vmov	d14, r8, r9
 8013302:	4868      	ldr	r0, [pc, #416]	; (80134a4 <_strtod_l+0xb54>)
 8013304:	eeac eb00 	vfma.f64	d14, d12, d0
 8013308:	ee1e 3a90 	vmov	r3, s29
 801330c:	4a68      	ldr	r2, [pc, #416]	; (80134b0 <_strtod_l+0xb60>)
 801330e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013310:	4018      	ands	r0, r3
 8013312:	4290      	cmp	r0, r2
 8013314:	ec59 8b1e 	vmov	r8, r9, d14
 8013318:	d94e      	bls.n	80133b8 <_strtod_l+0xa68>
 801331a:	ee18 3a90 	vmov	r3, s17
 801331e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013322:	4293      	cmp	r3, r2
 8013324:	d104      	bne.n	8013330 <_strtod_l+0x9e0>
 8013326:	ee18 3a10 	vmov	r3, s16
 801332a:	3301      	adds	r3, #1
 801332c:	f43f ad4c 	beq.w	8012dc8 <_strtod_l+0x478>
 8013330:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80134a8 <_strtod_l+0xb58>
 8013334:	f04f 38ff 	mov.w	r8, #4294967295
 8013338:	9912      	ldr	r1, [sp, #72]	; 0x48
 801333a:	4620      	mov	r0, r4
 801333c:	f001 fe00 	bl	8014f40 <_Bfree>
 8013340:	4639      	mov	r1, r7
 8013342:	4620      	mov	r0, r4
 8013344:	f001 fdfc 	bl	8014f40 <_Bfree>
 8013348:	4631      	mov	r1, r6
 801334a:	4620      	mov	r0, r4
 801334c:	f001 fdf8 	bl	8014f40 <_Bfree>
 8013350:	4629      	mov	r1, r5
 8013352:	4620      	mov	r0, r4
 8013354:	f001 fdf4 	bl	8014f40 <_Bfree>
 8013358:	e619      	b.n	8012f8e <_strtod_l+0x63e>
 801335a:	f1b8 0f00 	cmp.w	r8, #0
 801335e:	d112      	bne.n	8013386 <_strtod_l+0xa36>
 8013360:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013364:	b9b3      	cbnz	r3, 8013394 <_strtod_l+0xa44>
 8013366:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801336a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801336e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013372:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8013376:	bf58      	it	pl
 8013378:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 801337c:	eeb1 7b4d 	vneg.f64	d7, d13
 8013380:	ec53 2b17 	vmov	r2, r3, d7
 8013384:	e7aa      	b.n	80132dc <_strtod_l+0x98c>
 8013386:	f1b8 0f01 	cmp.w	r8, #1
 801338a:	d103      	bne.n	8013394 <_strtod_l+0xa44>
 801338c:	f1b9 0f00 	cmp.w	r9, #0
 8013390:	f43f ad8a 	beq.w	8012ea8 <_strtod_l+0x558>
 8013394:	4b47      	ldr	r3, [pc, #284]	; (80134b4 <_strtod_l+0xb64>)
 8013396:	2200      	movs	r2, #0
 8013398:	e79e      	b.n	80132d8 <_strtod_l+0x988>
 801339a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801339e:	ee20 db0d 	vmul.f64	d13, d0, d13
 80133a2:	f1ba 0f00 	cmp.w	sl, #0
 80133a6:	d104      	bne.n	80133b2 <_strtod_l+0xa62>
 80133a8:	eeb1 7b4d 	vneg.f64	d7, d13
 80133ac:	ec53 2b17 	vmov	r2, r3, d7
 80133b0:	e794      	b.n	80132dc <_strtod_l+0x98c>
 80133b2:	eeb0 7b4d 	vmov.f64	d7, d13
 80133b6:	e7f9      	b.n	80133ac <_strtod_l+0xa5c>
 80133b8:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80133bc:	9b04      	ldr	r3, [sp, #16]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d1ba      	bne.n	8013338 <_strtod_l+0x9e8>
 80133c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80133c6:	0d1b      	lsrs	r3, r3, #20
 80133c8:	051b      	lsls	r3, r3, #20
 80133ca:	4299      	cmp	r1, r3
 80133cc:	d1b4      	bne.n	8013338 <_strtod_l+0x9e8>
 80133ce:	ec51 0b1d 	vmov	r0, r1, d13
 80133d2:	f7ed f971 	bl	80006b8 <__aeabi_d2lz>
 80133d6:	f7ed f929 	bl	800062c <__aeabi_l2d>
 80133da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80133de:	ec41 0b17 	vmov	d7, r0, r1
 80133e2:	ea43 0308 	orr.w	r3, r3, r8
 80133e6:	ea53 030a 	orrs.w	r3, r3, sl
 80133ea:	ee3d db47 	vsub.f64	d13, d13, d7
 80133ee:	d03c      	beq.n	801346a <_strtod_l+0xb1a>
 80133f0:	eeb4 dbca 	vcmpe.f64	d13, d10
 80133f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133f8:	f53f acf0 	bmi.w	8012ddc <_strtod_l+0x48c>
 80133fc:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8013400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013404:	dd98      	ble.n	8013338 <_strtod_l+0x9e8>
 8013406:	e4e9      	b.n	8012ddc <_strtod_l+0x48c>
 8013408:	9804      	ldr	r0, [sp, #16]
 801340a:	b1f0      	cbz	r0, 801344a <_strtod_l+0xafa>
 801340c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8013410:	d81b      	bhi.n	801344a <_strtod_l+0xafa>
 8013412:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8013498 <_strtod_l+0xb48>
 8013416:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801341a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801341e:	d811      	bhi.n	8013444 <_strtod_l+0xaf4>
 8013420:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8013424:	ee1d 3a10 	vmov	r3, s26
 8013428:	2b01      	cmp	r3, #1
 801342a:	bf38      	it	cc
 801342c:	2301      	movcc	r3, #1
 801342e:	ee0d 3a10 	vmov	s26, r3
 8013432:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8013436:	f1ba 0f00 	cmp.w	sl, #0
 801343a:	d113      	bne.n	8013464 <_strtod_l+0xb14>
 801343c:	eeb1 7b4d 	vneg.f64	d7, d13
 8013440:	ec53 2b17 	vmov	r2, r3, d7
 8013444:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8013448:	1a43      	subs	r3, r0, r1
 801344a:	eeb0 0b48 	vmov.f64	d0, d8
 801344e:	ec43 2b1c 	vmov	d12, r2, r3
 8013452:	910a      	str	r1, [sp, #40]	; 0x28
 8013454:	f002 f8a6 	bl	80155a4 <__ulp>
 8013458:	990a      	ldr	r1, [sp, #40]	; 0x28
 801345a:	eeac 8b00 	vfma.f64	d8, d12, d0
 801345e:	ec59 8b18 	vmov	r8, r9, d8
 8013462:	e7ab      	b.n	80133bc <_strtod_l+0xa6c>
 8013464:	eeb0 7b4d 	vmov.f64	d7, d13
 8013468:	e7ea      	b.n	8013440 <_strtod_l+0xaf0>
 801346a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801346e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013472:	f57f af61 	bpl.w	8013338 <_strtod_l+0x9e8>
 8013476:	e4b1      	b.n	8012ddc <_strtod_l+0x48c>
 8013478:	2300      	movs	r3, #0
 801347a:	9308      	str	r3, [sp, #32]
 801347c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801347e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013480:	6013      	str	r3, [r2, #0]
 8013482:	f7ff baad 	b.w	80129e0 <_strtod_l+0x90>
 8013486:	2a65      	cmp	r2, #101	; 0x65
 8013488:	f43f ab9f 	beq.w	8012bca <_strtod_l+0x27a>
 801348c:	2a45      	cmp	r2, #69	; 0x45
 801348e:	f43f ab9c 	beq.w	8012bca <_strtod_l+0x27a>
 8013492:	2101      	movs	r1, #1
 8013494:	f7ff bbd4 	b.w	8012c40 <_strtod_l+0x2f0>
 8013498:	ffc00000 	.word	0xffc00000
 801349c:	41dfffff 	.word	0x41dfffff
 80134a0:	000fffff 	.word	0x000fffff
 80134a4:	7ff00000 	.word	0x7ff00000
 80134a8:	7fefffff 	.word	0x7fefffff
 80134ac:	3ff00000 	.word	0x3ff00000
 80134b0:	7c9fffff 	.word	0x7c9fffff
 80134b4:	bff00000 	.word	0xbff00000
 80134b8:	7fe00000 	.word	0x7fe00000

080134bc <_strtod_r>:
 80134bc:	4b01      	ldr	r3, [pc, #4]	; (80134c4 <_strtod_r+0x8>)
 80134be:	f7ff ba47 	b.w	8012950 <_strtod_l>
 80134c2:	bf00      	nop
 80134c4:	20000074 	.word	0x20000074

080134c8 <_strtol_l.constprop.0>:
 80134c8:	2b01      	cmp	r3, #1
 80134ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80134ce:	d001      	beq.n	80134d4 <_strtol_l.constprop.0+0xc>
 80134d0:	2b24      	cmp	r3, #36	; 0x24
 80134d2:	d906      	bls.n	80134e2 <_strtol_l.constprop.0+0x1a>
 80134d4:	f7fe f9ce 	bl	8011874 <__errno>
 80134d8:	2316      	movs	r3, #22
 80134da:	6003      	str	r3, [r0, #0]
 80134dc:	2000      	movs	r0, #0
 80134de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80135c8 <_strtol_l.constprop.0+0x100>
 80134e6:	460d      	mov	r5, r1
 80134e8:	462e      	mov	r6, r5
 80134ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80134ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 80134f2:	f017 0708 	ands.w	r7, r7, #8
 80134f6:	d1f7      	bne.n	80134e8 <_strtol_l.constprop.0+0x20>
 80134f8:	2c2d      	cmp	r4, #45	; 0x2d
 80134fa:	d132      	bne.n	8013562 <_strtol_l.constprop.0+0x9a>
 80134fc:	782c      	ldrb	r4, [r5, #0]
 80134fe:	2701      	movs	r7, #1
 8013500:	1cb5      	adds	r5, r6, #2
 8013502:	2b00      	cmp	r3, #0
 8013504:	d05b      	beq.n	80135be <_strtol_l.constprop.0+0xf6>
 8013506:	2b10      	cmp	r3, #16
 8013508:	d109      	bne.n	801351e <_strtol_l.constprop.0+0x56>
 801350a:	2c30      	cmp	r4, #48	; 0x30
 801350c:	d107      	bne.n	801351e <_strtol_l.constprop.0+0x56>
 801350e:	782c      	ldrb	r4, [r5, #0]
 8013510:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013514:	2c58      	cmp	r4, #88	; 0x58
 8013516:	d14d      	bne.n	80135b4 <_strtol_l.constprop.0+0xec>
 8013518:	786c      	ldrb	r4, [r5, #1]
 801351a:	2310      	movs	r3, #16
 801351c:	3502      	adds	r5, #2
 801351e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8013522:	f108 38ff 	add.w	r8, r8, #4294967295
 8013526:	f04f 0c00 	mov.w	ip, #0
 801352a:	fbb8 f9f3 	udiv	r9, r8, r3
 801352e:	4666      	mov	r6, ip
 8013530:	fb03 8a19 	mls	sl, r3, r9, r8
 8013534:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8013538:	f1be 0f09 	cmp.w	lr, #9
 801353c:	d816      	bhi.n	801356c <_strtol_l.constprop.0+0xa4>
 801353e:	4674      	mov	r4, lr
 8013540:	42a3      	cmp	r3, r4
 8013542:	dd24      	ble.n	801358e <_strtol_l.constprop.0+0xc6>
 8013544:	f1bc 0f00 	cmp.w	ip, #0
 8013548:	db1e      	blt.n	8013588 <_strtol_l.constprop.0+0xc0>
 801354a:	45b1      	cmp	r9, r6
 801354c:	d31c      	bcc.n	8013588 <_strtol_l.constprop.0+0xc0>
 801354e:	d101      	bne.n	8013554 <_strtol_l.constprop.0+0x8c>
 8013550:	45a2      	cmp	sl, r4
 8013552:	db19      	blt.n	8013588 <_strtol_l.constprop.0+0xc0>
 8013554:	fb06 4603 	mla	r6, r6, r3, r4
 8013558:	f04f 0c01 	mov.w	ip, #1
 801355c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013560:	e7e8      	b.n	8013534 <_strtol_l.constprop.0+0x6c>
 8013562:	2c2b      	cmp	r4, #43	; 0x2b
 8013564:	bf04      	itt	eq
 8013566:	782c      	ldrbeq	r4, [r5, #0]
 8013568:	1cb5      	addeq	r5, r6, #2
 801356a:	e7ca      	b.n	8013502 <_strtol_l.constprop.0+0x3a>
 801356c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8013570:	f1be 0f19 	cmp.w	lr, #25
 8013574:	d801      	bhi.n	801357a <_strtol_l.constprop.0+0xb2>
 8013576:	3c37      	subs	r4, #55	; 0x37
 8013578:	e7e2      	b.n	8013540 <_strtol_l.constprop.0+0x78>
 801357a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801357e:	f1be 0f19 	cmp.w	lr, #25
 8013582:	d804      	bhi.n	801358e <_strtol_l.constprop.0+0xc6>
 8013584:	3c57      	subs	r4, #87	; 0x57
 8013586:	e7db      	b.n	8013540 <_strtol_l.constprop.0+0x78>
 8013588:	f04f 3cff 	mov.w	ip, #4294967295
 801358c:	e7e6      	b.n	801355c <_strtol_l.constprop.0+0x94>
 801358e:	f1bc 0f00 	cmp.w	ip, #0
 8013592:	da05      	bge.n	80135a0 <_strtol_l.constprop.0+0xd8>
 8013594:	2322      	movs	r3, #34	; 0x22
 8013596:	6003      	str	r3, [r0, #0]
 8013598:	4646      	mov	r6, r8
 801359a:	b942      	cbnz	r2, 80135ae <_strtol_l.constprop.0+0xe6>
 801359c:	4630      	mov	r0, r6
 801359e:	e79e      	b.n	80134de <_strtol_l.constprop.0+0x16>
 80135a0:	b107      	cbz	r7, 80135a4 <_strtol_l.constprop.0+0xdc>
 80135a2:	4276      	negs	r6, r6
 80135a4:	2a00      	cmp	r2, #0
 80135a6:	d0f9      	beq.n	801359c <_strtol_l.constprop.0+0xd4>
 80135a8:	f1bc 0f00 	cmp.w	ip, #0
 80135ac:	d000      	beq.n	80135b0 <_strtol_l.constprop.0+0xe8>
 80135ae:	1e69      	subs	r1, r5, #1
 80135b0:	6011      	str	r1, [r2, #0]
 80135b2:	e7f3      	b.n	801359c <_strtol_l.constprop.0+0xd4>
 80135b4:	2430      	movs	r4, #48	; 0x30
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d1b1      	bne.n	801351e <_strtol_l.constprop.0+0x56>
 80135ba:	2308      	movs	r3, #8
 80135bc:	e7af      	b.n	801351e <_strtol_l.constprop.0+0x56>
 80135be:	2c30      	cmp	r4, #48	; 0x30
 80135c0:	d0a5      	beq.n	801350e <_strtol_l.constprop.0+0x46>
 80135c2:	230a      	movs	r3, #10
 80135c4:	e7ab      	b.n	801351e <_strtol_l.constprop.0+0x56>
 80135c6:	bf00      	nop
 80135c8:	08016bc9 	.word	0x08016bc9

080135cc <_strtol_r>:
 80135cc:	f7ff bf7c 	b.w	80134c8 <_strtol_l.constprop.0>

080135d0 <__swbuf_r>:
 80135d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135d2:	460e      	mov	r6, r1
 80135d4:	4614      	mov	r4, r2
 80135d6:	4605      	mov	r5, r0
 80135d8:	b118      	cbz	r0, 80135e2 <__swbuf_r+0x12>
 80135da:	6983      	ldr	r3, [r0, #24]
 80135dc:	b90b      	cbnz	r3, 80135e2 <__swbuf_r+0x12>
 80135de:	f000 ffcb 	bl	8014578 <__sinit>
 80135e2:	4b21      	ldr	r3, [pc, #132]	; (8013668 <__swbuf_r+0x98>)
 80135e4:	429c      	cmp	r4, r3
 80135e6:	d12b      	bne.n	8013640 <__swbuf_r+0x70>
 80135e8:	686c      	ldr	r4, [r5, #4]
 80135ea:	69a3      	ldr	r3, [r4, #24]
 80135ec:	60a3      	str	r3, [r4, #8]
 80135ee:	89a3      	ldrh	r3, [r4, #12]
 80135f0:	071a      	lsls	r2, r3, #28
 80135f2:	d52f      	bpl.n	8013654 <__swbuf_r+0x84>
 80135f4:	6923      	ldr	r3, [r4, #16]
 80135f6:	b36b      	cbz	r3, 8013654 <__swbuf_r+0x84>
 80135f8:	6923      	ldr	r3, [r4, #16]
 80135fa:	6820      	ldr	r0, [r4, #0]
 80135fc:	1ac0      	subs	r0, r0, r3
 80135fe:	6963      	ldr	r3, [r4, #20]
 8013600:	b2f6      	uxtb	r6, r6
 8013602:	4283      	cmp	r3, r0
 8013604:	4637      	mov	r7, r6
 8013606:	dc04      	bgt.n	8013612 <__swbuf_r+0x42>
 8013608:	4621      	mov	r1, r4
 801360a:	4628      	mov	r0, r5
 801360c:	f000 ff20 	bl	8014450 <_fflush_r>
 8013610:	bb30      	cbnz	r0, 8013660 <__swbuf_r+0x90>
 8013612:	68a3      	ldr	r3, [r4, #8]
 8013614:	3b01      	subs	r3, #1
 8013616:	60a3      	str	r3, [r4, #8]
 8013618:	6823      	ldr	r3, [r4, #0]
 801361a:	1c5a      	adds	r2, r3, #1
 801361c:	6022      	str	r2, [r4, #0]
 801361e:	701e      	strb	r6, [r3, #0]
 8013620:	6963      	ldr	r3, [r4, #20]
 8013622:	3001      	adds	r0, #1
 8013624:	4283      	cmp	r3, r0
 8013626:	d004      	beq.n	8013632 <__swbuf_r+0x62>
 8013628:	89a3      	ldrh	r3, [r4, #12]
 801362a:	07db      	lsls	r3, r3, #31
 801362c:	d506      	bpl.n	801363c <__swbuf_r+0x6c>
 801362e:	2e0a      	cmp	r6, #10
 8013630:	d104      	bne.n	801363c <__swbuf_r+0x6c>
 8013632:	4621      	mov	r1, r4
 8013634:	4628      	mov	r0, r5
 8013636:	f000 ff0b 	bl	8014450 <_fflush_r>
 801363a:	b988      	cbnz	r0, 8013660 <__swbuf_r+0x90>
 801363c:	4638      	mov	r0, r7
 801363e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013640:	4b0a      	ldr	r3, [pc, #40]	; (801366c <__swbuf_r+0x9c>)
 8013642:	429c      	cmp	r4, r3
 8013644:	d101      	bne.n	801364a <__swbuf_r+0x7a>
 8013646:	68ac      	ldr	r4, [r5, #8]
 8013648:	e7cf      	b.n	80135ea <__swbuf_r+0x1a>
 801364a:	4b09      	ldr	r3, [pc, #36]	; (8013670 <__swbuf_r+0xa0>)
 801364c:	429c      	cmp	r4, r3
 801364e:	bf08      	it	eq
 8013650:	68ec      	ldreq	r4, [r5, #12]
 8013652:	e7ca      	b.n	80135ea <__swbuf_r+0x1a>
 8013654:	4621      	mov	r1, r4
 8013656:	4628      	mov	r0, r5
 8013658:	f000 f80c 	bl	8013674 <__swsetup_r>
 801365c:	2800      	cmp	r0, #0
 801365e:	d0cb      	beq.n	80135f8 <__swbuf_r+0x28>
 8013660:	f04f 37ff 	mov.w	r7, #4294967295
 8013664:	e7ea      	b.n	801363c <__swbuf_r+0x6c>
 8013666:	bf00      	nop
 8013668:	08016d7c 	.word	0x08016d7c
 801366c:	08016d9c 	.word	0x08016d9c
 8013670:	08016d5c 	.word	0x08016d5c

08013674 <__swsetup_r>:
 8013674:	4b32      	ldr	r3, [pc, #200]	; (8013740 <__swsetup_r+0xcc>)
 8013676:	b570      	push	{r4, r5, r6, lr}
 8013678:	681d      	ldr	r5, [r3, #0]
 801367a:	4606      	mov	r6, r0
 801367c:	460c      	mov	r4, r1
 801367e:	b125      	cbz	r5, 801368a <__swsetup_r+0x16>
 8013680:	69ab      	ldr	r3, [r5, #24]
 8013682:	b913      	cbnz	r3, 801368a <__swsetup_r+0x16>
 8013684:	4628      	mov	r0, r5
 8013686:	f000 ff77 	bl	8014578 <__sinit>
 801368a:	4b2e      	ldr	r3, [pc, #184]	; (8013744 <__swsetup_r+0xd0>)
 801368c:	429c      	cmp	r4, r3
 801368e:	d10f      	bne.n	80136b0 <__swsetup_r+0x3c>
 8013690:	686c      	ldr	r4, [r5, #4]
 8013692:	89a3      	ldrh	r3, [r4, #12]
 8013694:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013698:	0719      	lsls	r1, r3, #28
 801369a:	d42c      	bmi.n	80136f6 <__swsetup_r+0x82>
 801369c:	06dd      	lsls	r5, r3, #27
 801369e:	d411      	bmi.n	80136c4 <__swsetup_r+0x50>
 80136a0:	2309      	movs	r3, #9
 80136a2:	6033      	str	r3, [r6, #0]
 80136a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80136a8:	81a3      	strh	r3, [r4, #12]
 80136aa:	f04f 30ff 	mov.w	r0, #4294967295
 80136ae:	e03e      	b.n	801372e <__swsetup_r+0xba>
 80136b0:	4b25      	ldr	r3, [pc, #148]	; (8013748 <__swsetup_r+0xd4>)
 80136b2:	429c      	cmp	r4, r3
 80136b4:	d101      	bne.n	80136ba <__swsetup_r+0x46>
 80136b6:	68ac      	ldr	r4, [r5, #8]
 80136b8:	e7eb      	b.n	8013692 <__swsetup_r+0x1e>
 80136ba:	4b24      	ldr	r3, [pc, #144]	; (801374c <__swsetup_r+0xd8>)
 80136bc:	429c      	cmp	r4, r3
 80136be:	bf08      	it	eq
 80136c0:	68ec      	ldreq	r4, [r5, #12]
 80136c2:	e7e6      	b.n	8013692 <__swsetup_r+0x1e>
 80136c4:	0758      	lsls	r0, r3, #29
 80136c6:	d512      	bpl.n	80136ee <__swsetup_r+0x7a>
 80136c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80136ca:	b141      	cbz	r1, 80136de <__swsetup_r+0x6a>
 80136cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80136d0:	4299      	cmp	r1, r3
 80136d2:	d002      	beq.n	80136da <__swsetup_r+0x66>
 80136d4:	4630      	mov	r0, r6
 80136d6:	f7fe f907 	bl	80118e8 <_free_r>
 80136da:	2300      	movs	r3, #0
 80136dc:	6363      	str	r3, [r4, #52]	; 0x34
 80136de:	89a3      	ldrh	r3, [r4, #12]
 80136e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80136e4:	81a3      	strh	r3, [r4, #12]
 80136e6:	2300      	movs	r3, #0
 80136e8:	6063      	str	r3, [r4, #4]
 80136ea:	6923      	ldr	r3, [r4, #16]
 80136ec:	6023      	str	r3, [r4, #0]
 80136ee:	89a3      	ldrh	r3, [r4, #12]
 80136f0:	f043 0308 	orr.w	r3, r3, #8
 80136f4:	81a3      	strh	r3, [r4, #12]
 80136f6:	6923      	ldr	r3, [r4, #16]
 80136f8:	b94b      	cbnz	r3, 801370e <__swsetup_r+0x9a>
 80136fa:	89a3      	ldrh	r3, [r4, #12]
 80136fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013704:	d003      	beq.n	801370e <__swsetup_r+0x9a>
 8013706:	4621      	mov	r1, r4
 8013708:	4630      	mov	r0, r6
 801370a:	f001 fb6d 	bl	8014de8 <__smakebuf_r>
 801370e:	89a0      	ldrh	r0, [r4, #12]
 8013710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013714:	f010 0301 	ands.w	r3, r0, #1
 8013718:	d00a      	beq.n	8013730 <__swsetup_r+0xbc>
 801371a:	2300      	movs	r3, #0
 801371c:	60a3      	str	r3, [r4, #8]
 801371e:	6963      	ldr	r3, [r4, #20]
 8013720:	425b      	negs	r3, r3
 8013722:	61a3      	str	r3, [r4, #24]
 8013724:	6923      	ldr	r3, [r4, #16]
 8013726:	b943      	cbnz	r3, 801373a <__swsetup_r+0xc6>
 8013728:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801372c:	d1ba      	bne.n	80136a4 <__swsetup_r+0x30>
 801372e:	bd70      	pop	{r4, r5, r6, pc}
 8013730:	0781      	lsls	r1, r0, #30
 8013732:	bf58      	it	pl
 8013734:	6963      	ldrpl	r3, [r4, #20]
 8013736:	60a3      	str	r3, [r4, #8]
 8013738:	e7f4      	b.n	8013724 <__swsetup_r+0xb0>
 801373a:	2000      	movs	r0, #0
 801373c:	e7f7      	b.n	801372e <__swsetup_r+0xba>
 801373e:	bf00      	nop
 8013740:	2000000c 	.word	0x2000000c
 8013744:	08016d7c 	.word	0x08016d7c
 8013748:	08016d9c 	.word	0x08016d9c
 801374c:	08016d5c 	.word	0x08016d5c

08013750 <quorem>:
 8013750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013754:	6903      	ldr	r3, [r0, #16]
 8013756:	690c      	ldr	r4, [r1, #16]
 8013758:	42a3      	cmp	r3, r4
 801375a:	4607      	mov	r7, r0
 801375c:	f2c0 8081 	blt.w	8013862 <quorem+0x112>
 8013760:	3c01      	subs	r4, #1
 8013762:	f101 0814 	add.w	r8, r1, #20
 8013766:	f100 0514 	add.w	r5, r0, #20
 801376a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801376e:	9301      	str	r3, [sp, #4]
 8013770:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013774:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013778:	3301      	adds	r3, #1
 801377a:	429a      	cmp	r2, r3
 801377c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013780:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013784:	fbb2 f6f3 	udiv	r6, r2, r3
 8013788:	d331      	bcc.n	80137ee <quorem+0x9e>
 801378a:	f04f 0e00 	mov.w	lr, #0
 801378e:	4640      	mov	r0, r8
 8013790:	46ac      	mov	ip, r5
 8013792:	46f2      	mov	sl, lr
 8013794:	f850 2b04 	ldr.w	r2, [r0], #4
 8013798:	b293      	uxth	r3, r2
 801379a:	fb06 e303 	mla	r3, r6, r3, lr
 801379e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80137a2:	b29b      	uxth	r3, r3
 80137a4:	ebaa 0303 	sub.w	r3, sl, r3
 80137a8:	f8dc a000 	ldr.w	sl, [ip]
 80137ac:	0c12      	lsrs	r2, r2, #16
 80137ae:	fa13 f38a 	uxtah	r3, r3, sl
 80137b2:	fb06 e202 	mla	r2, r6, r2, lr
 80137b6:	9300      	str	r3, [sp, #0]
 80137b8:	9b00      	ldr	r3, [sp, #0]
 80137ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80137be:	b292      	uxth	r2, r2
 80137c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80137c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80137c8:	f8bd 3000 	ldrh.w	r3, [sp]
 80137cc:	4581      	cmp	r9, r0
 80137ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80137d2:	f84c 3b04 	str.w	r3, [ip], #4
 80137d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80137da:	d2db      	bcs.n	8013794 <quorem+0x44>
 80137dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80137e0:	b92b      	cbnz	r3, 80137ee <quorem+0x9e>
 80137e2:	9b01      	ldr	r3, [sp, #4]
 80137e4:	3b04      	subs	r3, #4
 80137e6:	429d      	cmp	r5, r3
 80137e8:	461a      	mov	r2, r3
 80137ea:	d32e      	bcc.n	801384a <quorem+0xfa>
 80137ec:	613c      	str	r4, [r7, #16]
 80137ee:	4638      	mov	r0, r7
 80137f0:	f001 fe32 	bl	8015458 <__mcmp>
 80137f4:	2800      	cmp	r0, #0
 80137f6:	db24      	blt.n	8013842 <quorem+0xf2>
 80137f8:	3601      	adds	r6, #1
 80137fa:	4628      	mov	r0, r5
 80137fc:	f04f 0c00 	mov.w	ip, #0
 8013800:	f858 2b04 	ldr.w	r2, [r8], #4
 8013804:	f8d0 e000 	ldr.w	lr, [r0]
 8013808:	b293      	uxth	r3, r2
 801380a:	ebac 0303 	sub.w	r3, ip, r3
 801380e:	0c12      	lsrs	r2, r2, #16
 8013810:	fa13 f38e 	uxtah	r3, r3, lr
 8013814:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013818:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801381c:	b29b      	uxth	r3, r3
 801381e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013822:	45c1      	cmp	r9, r8
 8013824:	f840 3b04 	str.w	r3, [r0], #4
 8013828:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801382c:	d2e8      	bcs.n	8013800 <quorem+0xb0>
 801382e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013832:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013836:	b922      	cbnz	r2, 8013842 <quorem+0xf2>
 8013838:	3b04      	subs	r3, #4
 801383a:	429d      	cmp	r5, r3
 801383c:	461a      	mov	r2, r3
 801383e:	d30a      	bcc.n	8013856 <quorem+0x106>
 8013840:	613c      	str	r4, [r7, #16]
 8013842:	4630      	mov	r0, r6
 8013844:	b003      	add	sp, #12
 8013846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801384a:	6812      	ldr	r2, [r2, #0]
 801384c:	3b04      	subs	r3, #4
 801384e:	2a00      	cmp	r2, #0
 8013850:	d1cc      	bne.n	80137ec <quorem+0x9c>
 8013852:	3c01      	subs	r4, #1
 8013854:	e7c7      	b.n	80137e6 <quorem+0x96>
 8013856:	6812      	ldr	r2, [r2, #0]
 8013858:	3b04      	subs	r3, #4
 801385a:	2a00      	cmp	r2, #0
 801385c:	d1f0      	bne.n	8013840 <quorem+0xf0>
 801385e:	3c01      	subs	r4, #1
 8013860:	e7eb      	b.n	801383a <quorem+0xea>
 8013862:	2000      	movs	r0, #0
 8013864:	e7ee      	b.n	8013844 <quorem+0xf4>
	...

08013868 <_dtoa_r>:
 8013868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801386c:	ed2d 8b02 	vpush	{d8}
 8013870:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013872:	b091      	sub	sp, #68	; 0x44
 8013874:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013878:	ec59 8b10 	vmov	r8, r9, d0
 801387c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801387e:	9106      	str	r1, [sp, #24]
 8013880:	4606      	mov	r6, r0
 8013882:	9208      	str	r2, [sp, #32]
 8013884:	930c      	str	r3, [sp, #48]	; 0x30
 8013886:	b975      	cbnz	r5, 80138a6 <_dtoa_r+0x3e>
 8013888:	2010      	movs	r0, #16
 801388a:	f7fe f81d 	bl	80118c8 <malloc>
 801388e:	4602      	mov	r2, r0
 8013890:	6270      	str	r0, [r6, #36]	; 0x24
 8013892:	b920      	cbnz	r0, 801389e <_dtoa_r+0x36>
 8013894:	4baa      	ldr	r3, [pc, #680]	; (8013b40 <_dtoa_r+0x2d8>)
 8013896:	21ea      	movs	r1, #234	; 0xea
 8013898:	48aa      	ldr	r0, [pc, #680]	; (8013b44 <_dtoa_r+0x2dc>)
 801389a:	f002 fb63 	bl	8015f64 <__assert_func>
 801389e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80138a2:	6005      	str	r5, [r0, #0]
 80138a4:	60c5      	str	r5, [r0, #12]
 80138a6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80138a8:	6819      	ldr	r1, [r3, #0]
 80138aa:	b151      	cbz	r1, 80138c2 <_dtoa_r+0x5a>
 80138ac:	685a      	ldr	r2, [r3, #4]
 80138ae:	604a      	str	r2, [r1, #4]
 80138b0:	2301      	movs	r3, #1
 80138b2:	4093      	lsls	r3, r2
 80138b4:	608b      	str	r3, [r1, #8]
 80138b6:	4630      	mov	r0, r6
 80138b8:	f001 fb42 	bl	8014f40 <_Bfree>
 80138bc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80138be:	2200      	movs	r2, #0
 80138c0:	601a      	str	r2, [r3, #0]
 80138c2:	f1b9 0300 	subs.w	r3, r9, #0
 80138c6:	bfbb      	ittet	lt
 80138c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80138cc:	9303      	strlt	r3, [sp, #12]
 80138ce:	2300      	movge	r3, #0
 80138d0:	2201      	movlt	r2, #1
 80138d2:	bfac      	ite	ge
 80138d4:	6023      	strge	r3, [r4, #0]
 80138d6:	6022      	strlt	r2, [r4, #0]
 80138d8:	4b9b      	ldr	r3, [pc, #620]	; (8013b48 <_dtoa_r+0x2e0>)
 80138da:	9c03      	ldr	r4, [sp, #12]
 80138dc:	43a3      	bics	r3, r4
 80138de:	d11c      	bne.n	801391a <_dtoa_r+0xb2>
 80138e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80138e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80138e6:	6013      	str	r3, [r2, #0]
 80138e8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80138ec:	ea53 0308 	orrs.w	r3, r3, r8
 80138f0:	f000 84fd 	beq.w	80142ee <_dtoa_r+0xa86>
 80138f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80138f6:	b963      	cbnz	r3, 8013912 <_dtoa_r+0xaa>
 80138f8:	4b94      	ldr	r3, [pc, #592]	; (8013b4c <_dtoa_r+0x2e4>)
 80138fa:	e01f      	b.n	801393c <_dtoa_r+0xd4>
 80138fc:	4b94      	ldr	r3, [pc, #592]	; (8013b50 <_dtoa_r+0x2e8>)
 80138fe:	9301      	str	r3, [sp, #4]
 8013900:	3308      	adds	r3, #8
 8013902:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013904:	6013      	str	r3, [r2, #0]
 8013906:	9801      	ldr	r0, [sp, #4]
 8013908:	b011      	add	sp, #68	; 0x44
 801390a:	ecbd 8b02 	vpop	{d8}
 801390e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013912:	4b8e      	ldr	r3, [pc, #568]	; (8013b4c <_dtoa_r+0x2e4>)
 8013914:	9301      	str	r3, [sp, #4]
 8013916:	3303      	adds	r3, #3
 8013918:	e7f3      	b.n	8013902 <_dtoa_r+0x9a>
 801391a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801391e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013926:	d10b      	bne.n	8013940 <_dtoa_r+0xd8>
 8013928:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801392a:	2301      	movs	r3, #1
 801392c:	6013      	str	r3, [r2, #0]
 801392e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013930:	2b00      	cmp	r3, #0
 8013932:	f000 84d9 	beq.w	80142e8 <_dtoa_r+0xa80>
 8013936:	4887      	ldr	r0, [pc, #540]	; (8013b54 <_dtoa_r+0x2ec>)
 8013938:	6018      	str	r0, [r3, #0]
 801393a:	1e43      	subs	r3, r0, #1
 801393c:	9301      	str	r3, [sp, #4]
 801393e:	e7e2      	b.n	8013906 <_dtoa_r+0x9e>
 8013940:	a90f      	add	r1, sp, #60	; 0x3c
 8013942:	aa0e      	add	r2, sp, #56	; 0x38
 8013944:	4630      	mov	r0, r6
 8013946:	eeb0 0b48 	vmov.f64	d0, d8
 801394a:	f001 fea7 	bl	801569c <__d2b>
 801394e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8013952:	4605      	mov	r5, r0
 8013954:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013956:	2900      	cmp	r1, #0
 8013958:	d046      	beq.n	80139e8 <_dtoa_r+0x180>
 801395a:	ee18 4a90 	vmov	r4, s17
 801395e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013962:	ec53 2b18 	vmov	r2, r3, d8
 8013966:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801396a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801396e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8013972:	2400      	movs	r4, #0
 8013974:	ec43 2b16 	vmov	d6, r2, r3
 8013978:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801397c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8013b28 <_dtoa_r+0x2c0>
 8013980:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013984:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8013b30 <_dtoa_r+0x2c8>
 8013988:	eea7 6b05 	vfma.f64	d6, d7, d5
 801398c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8013b38 <_dtoa_r+0x2d0>
 8013990:	ee07 1a90 	vmov	s15, r1
 8013994:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8013998:	eeb0 7b46 	vmov.f64	d7, d6
 801399c:	eea4 7b05 	vfma.f64	d7, d4, d5
 80139a0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80139a4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80139a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139ac:	ee16 ba90 	vmov	fp, s13
 80139b0:	940a      	str	r4, [sp, #40]	; 0x28
 80139b2:	d508      	bpl.n	80139c6 <_dtoa_r+0x15e>
 80139b4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80139b8:	eeb4 6b47 	vcmp.f64	d6, d7
 80139bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139c0:	bf18      	it	ne
 80139c2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80139c6:	f1bb 0f16 	cmp.w	fp, #22
 80139ca:	d82f      	bhi.n	8013a2c <_dtoa_r+0x1c4>
 80139cc:	4b62      	ldr	r3, [pc, #392]	; (8013b58 <_dtoa_r+0x2f0>)
 80139ce:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80139d2:	ed93 7b00 	vldr	d7, [r3]
 80139d6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80139da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139de:	d501      	bpl.n	80139e4 <_dtoa_r+0x17c>
 80139e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80139e4:	2300      	movs	r3, #0
 80139e6:	e022      	b.n	8013a2e <_dtoa_r+0x1c6>
 80139e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80139ea:	4401      	add	r1, r0
 80139ec:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80139f0:	2b20      	cmp	r3, #32
 80139f2:	bfc1      	itttt	gt
 80139f4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80139f8:	fa04 f303 	lslgt.w	r3, r4, r3
 80139fc:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8013a00:	fa28 f804 	lsrgt.w	r8, r8, r4
 8013a04:	bfd6      	itet	le
 8013a06:	f1c3 0320 	rsble	r3, r3, #32
 8013a0a:	ea43 0808 	orrgt.w	r8, r3, r8
 8013a0e:	fa08 f803 	lslle.w	r8, r8, r3
 8013a12:	ee07 8a90 	vmov	s15, r8
 8013a16:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013a1a:	3901      	subs	r1, #1
 8013a1c:	ee17 4a90 	vmov	r4, s15
 8013a20:	ec53 2b17 	vmov	r2, r3, d7
 8013a24:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8013a28:	2401      	movs	r4, #1
 8013a2a:	e7a3      	b.n	8013974 <_dtoa_r+0x10c>
 8013a2c:	2301      	movs	r3, #1
 8013a2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013a30:	1a43      	subs	r3, r0, r1
 8013a32:	1e5a      	subs	r2, r3, #1
 8013a34:	bf45      	ittet	mi
 8013a36:	f1c3 0301 	rsbmi	r3, r3, #1
 8013a3a:	9304      	strmi	r3, [sp, #16]
 8013a3c:	2300      	movpl	r3, #0
 8013a3e:	2300      	movmi	r3, #0
 8013a40:	9205      	str	r2, [sp, #20]
 8013a42:	bf54      	ite	pl
 8013a44:	9304      	strpl	r3, [sp, #16]
 8013a46:	9305      	strmi	r3, [sp, #20]
 8013a48:	f1bb 0f00 	cmp.w	fp, #0
 8013a4c:	db18      	blt.n	8013a80 <_dtoa_r+0x218>
 8013a4e:	9b05      	ldr	r3, [sp, #20]
 8013a50:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8013a54:	445b      	add	r3, fp
 8013a56:	9305      	str	r3, [sp, #20]
 8013a58:	2300      	movs	r3, #0
 8013a5a:	9a06      	ldr	r2, [sp, #24]
 8013a5c:	2a09      	cmp	r2, #9
 8013a5e:	d849      	bhi.n	8013af4 <_dtoa_r+0x28c>
 8013a60:	2a05      	cmp	r2, #5
 8013a62:	bfc4      	itt	gt
 8013a64:	3a04      	subgt	r2, #4
 8013a66:	9206      	strgt	r2, [sp, #24]
 8013a68:	9a06      	ldr	r2, [sp, #24]
 8013a6a:	f1a2 0202 	sub.w	r2, r2, #2
 8013a6e:	bfcc      	ite	gt
 8013a70:	2400      	movgt	r4, #0
 8013a72:	2401      	movle	r4, #1
 8013a74:	2a03      	cmp	r2, #3
 8013a76:	d848      	bhi.n	8013b0a <_dtoa_r+0x2a2>
 8013a78:	e8df f002 	tbb	[pc, r2]
 8013a7c:	3a2c2e0b 	.word	0x3a2c2e0b
 8013a80:	9b04      	ldr	r3, [sp, #16]
 8013a82:	2200      	movs	r2, #0
 8013a84:	eba3 030b 	sub.w	r3, r3, fp
 8013a88:	9304      	str	r3, [sp, #16]
 8013a8a:	9209      	str	r2, [sp, #36]	; 0x24
 8013a8c:	f1cb 0300 	rsb	r3, fp, #0
 8013a90:	e7e3      	b.n	8013a5a <_dtoa_r+0x1f2>
 8013a92:	2200      	movs	r2, #0
 8013a94:	9207      	str	r2, [sp, #28]
 8013a96:	9a08      	ldr	r2, [sp, #32]
 8013a98:	2a00      	cmp	r2, #0
 8013a9a:	dc39      	bgt.n	8013b10 <_dtoa_r+0x2a8>
 8013a9c:	f04f 0a01 	mov.w	sl, #1
 8013aa0:	46d1      	mov	r9, sl
 8013aa2:	4652      	mov	r2, sl
 8013aa4:	f8cd a020 	str.w	sl, [sp, #32]
 8013aa8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8013aaa:	2100      	movs	r1, #0
 8013aac:	6079      	str	r1, [r7, #4]
 8013aae:	2004      	movs	r0, #4
 8013ab0:	f100 0c14 	add.w	ip, r0, #20
 8013ab4:	4594      	cmp	ip, r2
 8013ab6:	6879      	ldr	r1, [r7, #4]
 8013ab8:	d92f      	bls.n	8013b1a <_dtoa_r+0x2b2>
 8013aba:	4630      	mov	r0, r6
 8013abc:	930d      	str	r3, [sp, #52]	; 0x34
 8013abe:	f001 f9ff 	bl	8014ec0 <_Balloc>
 8013ac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ac4:	9001      	str	r0, [sp, #4]
 8013ac6:	4602      	mov	r2, r0
 8013ac8:	2800      	cmp	r0, #0
 8013aca:	d149      	bne.n	8013b60 <_dtoa_r+0x2f8>
 8013acc:	4b23      	ldr	r3, [pc, #140]	; (8013b5c <_dtoa_r+0x2f4>)
 8013ace:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013ad2:	e6e1      	b.n	8013898 <_dtoa_r+0x30>
 8013ad4:	2201      	movs	r2, #1
 8013ad6:	e7dd      	b.n	8013a94 <_dtoa_r+0x22c>
 8013ad8:	2200      	movs	r2, #0
 8013ada:	9207      	str	r2, [sp, #28]
 8013adc:	9a08      	ldr	r2, [sp, #32]
 8013ade:	eb0b 0a02 	add.w	sl, fp, r2
 8013ae2:	f10a 0901 	add.w	r9, sl, #1
 8013ae6:	464a      	mov	r2, r9
 8013ae8:	2a01      	cmp	r2, #1
 8013aea:	bfb8      	it	lt
 8013aec:	2201      	movlt	r2, #1
 8013aee:	e7db      	b.n	8013aa8 <_dtoa_r+0x240>
 8013af0:	2201      	movs	r2, #1
 8013af2:	e7f2      	b.n	8013ada <_dtoa_r+0x272>
 8013af4:	2401      	movs	r4, #1
 8013af6:	2200      	movs	r2, #0
 8013af8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8013afc:	f04f 3aff 	mov.w	sl, #4294967295
 8013b00:	2100      	movs	r1, #0
 8013b02:	46d1      	mov	r9, sl
 8013b04:	2212      	movs	r2, #18
 8013b06:	9108      	str	r1, [sp, #32]
 8013b08:	e7ce      	b.n	8013aa8 <_dtoa_r+0x240>
 8013b0a:	2201      	movs	r2, #1
 8013b0c:	9207      	str	r2, [sp, #28]
 8013b0e:	e7f5      	b.n	8013afc <_dtoa_r+0x294>
 8013b10:	f8dd a020 	ldr.w	sl, [sp, #32]
 8013b14:	46d1      	mov	r9, sl
 8013b16:	4652      	mov	r2, sl
 8013b18:	e7c6      	b.n	8013aa8 <_dtoa_r+0x240>
 8013b1a:	3101      	adds	r1, #1
 8013b1c:	6079      	str	r1, [r7, #4]
 8013b1e:	0040      	lsls	r0, r0, #1
 8013b20:	e7c6      	b.n	8013ab0 <_dtoa_r+0x248>
 8013b22:	bf00      	nop
 8013b24:	f3af 8000 	nop.w
 8013b28:	636f4361 	.word	0x636f4361
 8013b2c:	3fd287a7 	.word	0x3fd287a7
 8013b30:	8b60c8b3 	.word	0x8b60c8b3
 8013b34:	3fc68a28 	.word	0x3fc68a28
 8013b38:	509f79fb 	.word	0x509f79fb
 8013b3c:	3fd34413 	.word	0x3fd34413
 8013b40:	08016cd6 	.word	0x08016cd6
 8013b44:	08016ced 	.word	0x08016ced
 8013b48:	7ff00000 	.word	0x7ff00000
 8013b4c:	08016cd2 	.word	0x08016cd2
 8013b50:	08016cc9 	.word	0x08016cc9
 8013b54:	08016b4d 	.word	0x08016b4d
 8013b58:	08016ec0 	.word	0x08016ec0
 8013b5c:	08016d48 	.word	0x08016d48
 8013b60:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8013b62:	9901      	ldr	r1, [sp, #4]
 8013b64:	6011      	str	r1, [r2, #0]
 8013b66:	f1b9 0f0e 	cmp.w	r9, #14
 8013b6a:	d86c      	bhi.n	8013c46 <_dtoa_r+0x3de>
 8013b6c:	2c00      	cmp	r4, #0
 8013b6e:	d06a      	beq.n	8013c46 <_dtoa_r+0x3de>
 8013b70:	f1bb 0f00 	cmp.w	fp, #0
 8013b74:	f340 80a0 	ble.w	8013cb8 <_dtoa_r+0x450>
 8013b78:	49c1      	ldr	r1, [pc, #772]	; (8013e80 <_dtoa_r+0x618>)
 8013b7a:	f00b 020f 	and.w	r2, fp, #15
 8013b7e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8013b82:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8013b86:	ed92 7b00 	vldr	d7, [r2]
 8013b8a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8013b8e:	f000 8087 	beq.w	8013ca0 <_dtoa_r+0x438>
 8013b92:	4abc      	ldr	r2, [pc, #752]	; (8013e84 <_dtoa_r+0x61c>)
 8013b94:	ed92 6b08 	vldr	d6, [r2, #32]
 8013b98:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8013b9c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013ba0:	f001 010f 	and.w	r1, r1, #15
 8013ba4:	2203      	movs	r2, #3
 8013ba6:	48b7      	ldr	r0, [pc, #732]	; (8013e84 <_dtoa_r+0x61c>)
 8013ba8:	2900      	cmp	r1, #0
 8013baa:	d17b      	bne.n	8013ca4 <_dtoa_r+0x43c>
 8013bac:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013bb0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013bb4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013bb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013bba:	2900      	cmp	r1, #0
 8013bbc:	f000 80a2 	beq.w	8013d04 <_dtoa_r+0x49c>
 8013bc0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8013bc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013bc8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bd0:	f140 8098 	bpl.w	8013d04 <_dtoa_r+0x49c>
 8013bd4:	f1b9 0f00 	cmp.w	r9, #0
 8013bd8:	f000 8094 	beq.w	8013d04 <_dtoa_r+0x49c>
 8013bdc:	f1ba 0f00 	cmp.w	sl, #0
 8013be0:	dd2f      	ble.n	8013c42 <_dtoa_r+0x3da>
 8013be2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8013be6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013bea:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013bee:	f10b 37ff 	add.w	r7, fp, #4294967295
 8013bf2:	3201      	adds	r2, #1
 8013bf4:	4650      	mov	r0, sl
 8013bf6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013bfa:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8013bfe:	ee07 2a90 	vmov	s15, r2
 8013c02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013c06:	eea7 5b06 	vfma.f64	d5, d7, d6
 8013c0a:	ee15 4a90 	vmov	r4, s11
 8013c0e:	ec52 1b15 	vmov	r1, r2, d5
 8013c12:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8013c16:	2800      	cmp	r0, #0
 8013c18:	d177      	bne.n	8013d0a <_dtoa_r+0x4a2>
 8013c1a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013c1e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013c22:	ec42 1b17 	vmov	d7, r1, r2
 8013c26:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c2e:	f300 8263 	bgt.w	80140f8 <_dtoa_r+0x890>
 8013c32:	eeb1 7b47 	vneg.f64	d7, d7
 8013c36:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c3e:	f100 8258 	bmi.w	80140f2 <_dtoa_r+0x88a>
 8013c42:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013c46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013c48:	2a00      	cmp	r2, #0
 8013c4a:	f2c0 811d 	blt.w	8013e88 <_dtoa_r+0x620>
 8013c4e:	f1bb 0f0e 	cmp.w	fp, #14
 8013c52:	f300 8119 	bgt.w	8013e88 <_dtoa_r+0x620>
 8013c56:	4b8a      	ldr	r3, [pc, #552]	; (8013e80 <_dtoa_r+0x618>)
 8013c58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013c5c:	ed93 6b00 	vldr	d6, [r3]
 8013c60:	9b08      	ldr	r3, [sp, #32]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	f280 80b7 	bge.w	8013dd6 <_dtoa_r+0x56e>
 8013c68:	f1b9 0f00 	cmp.w	r9, #0
 8013c6c:	f300 80b3 	bgt.w	8013dd6 <_dtoa_r+0x56e>
 8013c70:	f040 823f 	bne.w	80140f2 <_dtoa_r+0x88a>
 8013c74:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013c78:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013c7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013c80:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c88:	464c      	mov	r4, r9
 8013c8a:	464f      	mov	r7, r9
 8013c8c:	f280 8215 	bge.w	80140ba <_dtoa_r+0x852>
 8013c90:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013c94:	2331      	movs	r3, #49	; 0x31
 8013c96:	f808 3b01 	strb.w	r3, [r8], #1
 8013c9a:	f10b 0b01 	add.w	fp, fp, #1
 8013c9e:	e211      	b.n	80140c4 <_dtoa_r+0x85c>
 8013ca0:	2202      	movs	r2, #2
 8013ca2:	e780      	b.n	8013ba6 <_dtoa_r+0x33e>
 8013ca4:	07cc      	lsls	r4, r1, #31
 8013ca6:	d504      	bpl.n	8013cb2 <_dtoa_r+0x44a>
 8013ca8:	ed90 6b00 	vldr	d6, [r0]
 8013cac:	3201      	adds	r2, #1
 8013cae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013cb2:	1049      	asrs	r1, r1, #1
 8013cb4:	3008      	adds	r0, #8
 8013cb6:	e777      	b.n	8013ba8 <_dtoa_r+0x340>
 8013cb8:	d022      	beq.n	8013d00 <_dtoa_r+0x498>
 8013cba:	f1cb 0100 	rsb	r1, fp, #0
 8013cbe:	4a70      	ldr	r2, [pc, #448]	; (8013e80 <_dtoa_r+0x618>)
 8013cc0:	f001 000f 	and.w	r0, r1, #15
 8013cc4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013cc8:	ed92 7b00 	vldr	d7, [r2]
 8013ccc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8013cd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013cd4:	486b      	ldr	r0, [pc, #428]	; (8013e84 <_dtoa_r+0x61c>)
 8013cd6:	1109      	asrs	r1, r1, #4
 8013cd8:	2400      	movs	r4, #0
 8013cda:	2202      	movs	r2, #2
 8013cdc:	b929      	cbnz	r1, 8013cea <_dtoa_r+0x482>
 8013cde:	2c00      	cmp	r4, #0
 8013ce0:	f43f af6a 	beq.w	8013bb8 <_dtoa_r+0x350>
 8013ce4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013ce8:	e766      	b.n	8013bb8 <_dtoa_r+0x350>
 8013cea:	07cf      	lsls	r7, r1, #31
 8013cec:	d505      	bpl.n	8013cfa <_dtoa_r+0x492>
 8013cee:	ed90 6b00 	vldr	d6, [r0]
 8013cf2:	3201      	adds	r2, #1
 8013cf4:	2401      	movs	r4, #1
 8013cf6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013cfa:	1049      	asrs	r1, r1, #1
 8013cfc:	3008      	adds	r0, #8
 8013cfe:	e7ed      	b.n	8013cdc <_dtoa_r+0x474>
 8013d00:	2202      	movs	r2, #2
 8013d02:	e759      	b.n	8013bb8 <_dtoa_r+0x350>
 8013d04:	465f      	mov	r7, fp
 8013d06:	4648      	mov	r0, r9
 8013d08:	e775      	b.n	8013bf6 <_dtoa_r+0x38e>
 8013d0a:	ec42 1b17 	vmov	d7, r1, r2
 8013d0e:	4a5c      	ldr	r2, [pc, #368]	; (8013e80 <_dtoa_r+0x618>)
 8013d10:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013d14:	ed12 4b02 	vldr	d4, [r2, #-8]
 8013d18:	9a01      	ldr	r2, [sp, #4]
 8013d1a:	1814      	adds	r4, r2, r0
 8013d1c:	9a07      	ldr	r2, [sp, #28]
 8013d1e:	b352      	cbz	r2, 8013d76 <_dtoa_r+0x50e>
 8013d20:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8013d24:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8013d28:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013d2c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8013d30:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8013d34:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013d38:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013d3c:	ee14 2a90 	vmov	r2, s9
 8013d40:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013d44:	3230      	adds	r2, #48	; 0x30
 8013d46:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013d4a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d52:	f808 2b01 	strb.w	r2, [r8], #1
 8013d56:	d439      	bmi.n	8013dcc <_dtoa_r+0x564>
 8013d58:	ee32 5b46 	vsub.f64	d5, d2, d6
 8013d5c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8013d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d64:	d472      	bmi.n	8013e4c <_dtoa_r+0x5e4>
 8013d66:	45a0      	cmp	r8, r4
 8013d68:	f43f af6b 	beq.w	8013c42 <_dtoa_r+0x3da>
 8013d6c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8013d70:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013d74:	e7e0      	b.n	8013d38 <_dtoa_r+0x4d0>
 8013d76:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013d7a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013d7e:	4621      	mov	r1, r4
 8013d80:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8013d84:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013d88:	ee14 2a90 	vmov	r2, s9
 8013d8c:	3230      	adds	r2, #48	; 0x30
 8013d8e:	f808 2b01 	strb.w	r2, [r8], #1
 8013d92:	45a0      	cmp	r8, r4
 8013d94:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013d98:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013d9c:	d118      	bne.n	8013dd0 <_dtoa_r+0x568>
 8013d9e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8013da2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8013da6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8013daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dae:	dc4d      	bgt.n	8013e4c <_dtoa_r+0x5e4>
 8013db0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013db4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dbc:	f57f af41 	bpl.w	8013c42 <_dtoa_r+0x3da>
 8013dc0:	4688      	mov	r8, r1
 8013dc2:	3901      	subs	r1, #1
 8013dc4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8013dc8:	2b30      	cmp	r3, #48	; 0x30
 8013dca:	d0f9      	beq.n	8013dc0 <_dtoa_r+0x558>
 8013dcc:	46bb      	mov	fp, r7
 8013dce:	e02a      	b.n	8013e26 <_dtoa_r+0x5be>
 8013dd0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013dd4:	e7d6      	b.n	8013d84 <_dtoa_r+0x51c>
 8013dd6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013dda:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8013dde:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013de2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8013de6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8013dea:	ee15 3a10 	vmov	r3, s10
 8013dee:	3330      	adds	r3, #48	; 0x30
 8013df0:	f808 3b01 	strb.w	r3, [r8], #1
 8013df4:	9b01      	ldr	r3, [sp, #4]
 8013df6:	eba8 0303 	sub.w	r3, r8, r3
 8013dfa:	4599      	cmp	r9, r3
 8013dfc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013e00:	eea3 7b46 	vfms.f64	d7, d3, d6
 8013e04:	d133      	bne.n	8013e6e <_dtoa_r+0x606>
 8013e06:	ee37 7b07 	vadd.f64	d7, d7, d7
 8013e0a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e12:	dc1a      	bgt.n	8013e4a <_dtoa_r+0x5e2>
 8013e14:	eeb4 7b46 	vcmp.f64	d7, d6
 8013e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e1c:	d103      	bne.n	8013e26 <_dtoa_r+0x5be>
 8013e1e:	ee15 3a10 	vmov	r3, s10
 8013e22:	07d9      	lsls	r1, r3, #31
 8013e24:	d411      	bmi.n	8013e4a <_dtoa_r+0x5e2>
 8013e26:	4629      	mov	r1, r5
 8013e28:	4630      	mov	r0, r6
 8013e2a:	f001 f889 	bl	8014f40 <_Bfree>
 8013e2e:	2300      	movs	r3, #0
 8013e30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013e32:	f888 3000 	strb.w	r3, [r8]
 8013e36:	f10b 0301 	add.w	r3, fp, #1
 8013e3a:	6013      	str	r3, [r2, #0]
 8013e3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	f43f ad61 	beq.w	8013906 <_dtoa_r+0x9e>
 8013e44:	f8c3 8000 	str.w	r8, [r3]
 8013e48:	e55d      	b.n	8013906 <_dtoa_r+0x9e>
 8013e4a:	465f      	mov	r7, fp
 8013e4c:	4643      	mov	r3, r8
 8013e4e:	4698      	mov	r8, r3
 8013e50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013e54:	2a39      	cmp	r2, #57	; 0x39
 8013e56:	d106      	bne.n	8013e66 <_dtoa_r+0x5fe>
 8013e58:	9a01      	ldr	r2, [sp, #4]
 8013e5a:	429a      	cmp	r2, r3
 8013e5c:	d1f7      	bne.n	8013e4e <_dtoa_r+0x5e6>
 8013e5e:	9901      	ldr	r1, [sp, #4]
 8013e60:	2230      	movs	r2, #48	; 0x30
 8013e62:	3701      	adds	r7, #1
 8013e64:	700a      	strb	r2, [r1, #0]
 8013e66:	781a      	ldrb	r2, [r3, #0]
 8013e68:	3201      	adds	r2, #1
 8013e6a:	701a      	strb	r2, [r3, #0]
 8013e6c:	e7ae      	b.n	8013dcc <_dtoa_r+0x564>
 8013e6e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013e72:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e7a:	d1b2      	bne.n	8013de2 <_dtoa_r+0x57a>
 8013e7c:	e7d3      	b.n	8013e26 <_dtoa_r+0x5be>
 8013e7e:	bf00      	nop
 8013e80:	08016ec0 	.word	0x08016ec0
 8013e84:	08016e98 	.word	0x08016e98
 8013e88:	9907      	ldr	r1, [sp, #28]
 8013e8a:	2900      	cmp	r1, #0
 8013e8c:	f000 80d0 	beq.w	8014030 <_dtoa_r+0x7c8>
 8013e90:	9906      	ldr	r1, [sp, #24]
 8013e92:	2901      	cmp	r1, #1
 8013e94:	f300 80b4 	bgt.w	8014000 <_dtoa_r+0x798>
 8013e98:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013e9a:	2900      	cmp	r1, #0
 8013e9c:	f000 80ac 	beq.w	8013ff8 <_dtoa_r+0x790>
 8013ea0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013ea4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013ea8:	461c      	mov	r4, r3
 8013eaa:	930a      	str	r3, [sp, #40]	; 0x28
 8013eac:	9b04      	ldr	r3, [sp, #16]
 8013eae:	4413      	add	r3, r2
 8013eb0:	9304      	str	r3, [sp, #16]
 8013eb2:	9b05      	ldr	r3, [sp, #20]
 8013eb4:	2101      	movs	r1, #1
 8013eb6:	4413      	add	r3, r2
 8013eb8:	4630      	mov	r0, r6
 8013eba:	9305      	str	r3, [sp, #20]
 8013ebc:	f001 f942 	bl	8015144 <__i2b>
 8013ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ec2:	4607      	mov	r7, r0
 8013ec4:	f1b8 0f00 	cmp.w	r8, #0
 8013ec8:	dd0d      	ble.n	8013ee6 <_dtoa_r+0x67e>
 8013eca:	9a05      	ldr	r2, [sp, #20]
 8013ecc:	2a00      	cmp	r2, #0
 8013ece:	dd0a      	ble.n	8013ee6 <_dtoa_r+0x67e>
 8013ed0:	4542      	cmp	r2, r8
 8013ed2:	9904      	ldr	r1, [sp, #16]
 8013ed4:	bfa8      	it	ge
 8013ed6:	4642      	movge	r2, r8
 8013ed8:	1a89      	subs	r1, r1, r2
 8013eda:	9104      	str	r1, [sp, #16]
 8013edc:	9905      	ldr	r1, [sp, #20]
 8013ede:	eba8 0802 	sub.w	r8, r8, r2
 8013ee2:	1a8a      	subs	r2, r1, r2
 8013ee4:	9205      	str	r2, [sp, #20]
 8013ee6:	b303      	cbz	r3, 8013f2a <_dtoa_r+0x6c2>
 8013ee8:	9a07      	ldr	r2, [sp, #28]
 8013eea:	2a00      	cmp	r2, #0
 8013eec:	f000 80a5 	beq.w	801403a <_dtoa_r+0x7d2>
 8013ef0:	2c00      	cmp	r4, #0
 8013ef2:	dd13      	ble.n	8013f1c <_dtoa_r+0x6b4>
 8013ef4:	4639      	mov	r1, r7
 8013ef6:	4622      	mov	r2, r4
 8013ef8:	4630      	mov	r0, r6
 8013efa:	930d      	str	r3, [sp, #52]	; 0x34
 8013efc:	f001 f9e2 	bl	80152c4 <__pow5mult>
 8013f00:	462a      	mov	r2, r5
 8013f02:	4601      	mov	r1, r0
 8013f04:	4607      	mov	r7, r0
 8013f06:	4630      	mov	r0, r6
 8013f08:	f001 f932 	bl	8015170 <__multiply>
 8013f0c:	4629      	mov	r1, r5
 8013f0e:	900a      	str	r0, [sp, #40]	; 0x28
 8013f10:	4630      	mov	r0, r6
 8013f12:	f001 f815 	bl	8014f40 <_Bfree>
 8013f16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013f18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013f1a:	4615      	mov	r5, r2
 8013f1c:	1b1a      	subs	r2, r3, r4
 8013f1e:	d004      	beq.n	8013f2a <_dtoa_r+0x6c2>
 8013f20:	4629      	mov	r1, r5
 8013f22:	4630      	mov	r0, r6
 8013f24:	f001 f9ce 	bl	80152c4 <__pow5mult>
 8013f28:	4605      	mov	r5, r0
 8013f2a:	2101      	movs	r1, #1
 8013f2c:	4630      	mov	r0, r6
 8013f2e:	f001 f909 	bl	8015144 <__i2b>
 8013f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	4604      	mov	r4, r0
 8013f38:	f340 8081 	ble.w	801403e <_dtoa_r+0x7d6>
 8013f3c:	461a      	mov	r2, r3
 8013f3e:	4601      	mov	r1, r0
 8013f40:	4630      	mov	r0, r6
 8013f42:	f001 f9bf 	bl	80152c4 <__pow5mult>
 8013f46:	9b06      	ldr	r3, [sp, #24]
 8013f48:	2b01      	cmp	r3, #1
 8013f4a:	4604      	mov	r4, r0
 8013f4c:	dd7a      	ble.n	8014044 <_dtoa_r+0x7dc>
 8013f4e:	2300      	movs	r3, #0
 8013f50:	930a      	str	r3, [sp, #40]	; 0x28
 8013f52:	6922      	ldr	r2, [r4, #16]
 8013f54:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013f58:	6910      	ldr	r0, [r2, #16]
 8013f5a:	f001 f8a3 	bl	80150a4 <__hi0bits>
 8013f5e:	f1c0 0020 	rsb	r0, r0, #32
 8013f62:	9b05      	ldr	r3, [sp, #20]
 8013f64:	4418      	add	r0, r3
 8013f66:	f010 001f 	ands.w	r0, r0, #31
 8013f6a:	f000 808c 	beq.w	8014086 <_dtoa_r+0x81e>
 8013f6e:	f1c0 0220 	rsb	r2, r0, #32
 8013f72:	2a04      	cmp	r2, #4
 8013f74:	f340 8085 	ble.w	8014082 <_dtoa_r+0x81a>
 8013f78:	f1c0 001c 	rsb	r0, r0, #28
 8013f7c:	9b04      	ldr	r3, [sp, #16]
 8013f7e:	4403      	add	r3, r0
 8013f80:	9304      	str	r3, [sp, #16]
 8013f82:	9b05      	ldr	r3, [sp, #20]
 8013f84:	4403      	add	r3, r0
 8013f86:	4480      	add	r8, r0
 8013f88:	9305      	str	r3, [sp, #20]
 8013f8a:	9b04      	ldr	r3, [sp, #16]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	dd05      	ble.n	8013f9c <_dtoa_r+0x734>
 8013f90:	4629      	mov	r1, r5
 8013f92:	461a      	mov	r2, r3
 8013f94:	4630      	mov	r0, r6
 8013f96:	f001 f9ef 	bl	8015378 <__lshift>
 8013f9a:	4605      	mov	r5, r0
 8013f9c:	9b05      	ldr	r3, [sp, #20]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	dd05      	ble.n	8013fae <_dtoa_r+0x746>
 8013fa2:	4621      	mov	r1, r4
 8013fa4:	461a      	mov	r2, r3
 8013fa6:	4630      	mov	r0, r6
 8013fa8:	f001 f9e6 	bl	8015378 <__lshift>
 8013fac:	4604      	mov	r4, r0
 8013fae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d06a      	beq.n	801408a <_dtoa_r+0x822>
 8013fb4:	4621      	mov	r1, r4
 8013fb6:	4628      	mov	r0, r5
 8013fb8:	f001 fa4e 	bl	8015458 <__mcmp>
 8013fbc:	2800      	cmp	r0, #0
 8013fbe:	da64      	bge.n	801408a <_dtoa_r+0x822>
 8013fc0:	2300      	movs	r3, #0
 8013fc2:	4629      	mov	r1, r5
 8013fc4:	220a      	movs	r2, #10
 8013fc6:	4630      	mov	r0, r6
 8013fc8:	f000 ffdc 	bl	8014f84 <__multadd>
 8013fcc:	9b07      	ldr	r3, [sp, #28]
 8013fce:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013fd2:	4605      	mov	r5, r0
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	f000 8191 	beq.w	80142fc <_dtoa_r+0xa94>
 8013fda:	4639      	mov	r1, r7
 8013fdc:	2300      	movs	r3, #0
 8013fde:	220a      	movs	r2, #10
 8013fe0:	4630      	mov	r0, r6
 8013fe2:	f000 ffcf 	bl	8014f84 <__multadd>
 8013fe6:	f1ba 0f00 	cmp.w	sl, #0
 8013fea:	4607      	mov	r7, r0
 8013fec:	f300 808d 	bgt.w	801410a <_dtoa_r+0x8a2>
 8013ff0:	9b06      	ldr	r3, [sp, #24]
 8013ff2:	2b02      	cmp	r3, #2
 8013ff4:	dc50      	bgt.n	8014098 <_dtoa_r+0x830>
 8013ff6:	e088      	b.n	801410a <_dtoa_r+0x8a2>
 8013ff8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013ffa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013ffe:	e751      	b.n	8013ea4 <_dtoa_r+0x63c>
 8014000:	f109 34ff 	add.w	r4, r9, #4294967295
 8014004:	42a3      	cmp	r3, r4
 8014006:	bfbf      	itttt	lt
 8014008:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801400a:	1ae3      	sublt	r3, r4, r3
 801400c:	18d2      	addlt	r2, r2, r3
 801400e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8014010:	bfb6      	itet	lt
 8014012:	4623      	movlt	r3, r4
 8014014:	1b1c      	subge	r4, r3, r4
 8014016:	2400      	movlt	r4, #0
 8014018:	f1b9 0f00 	cmp.w	r9, #0
 801401c:	bfb5      	itete	lt
 801401e:	9a04      	ldrlt	r2, [sp, #16]
 8014020:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8014024:	eba2 0809 	sublt.w	r8, r2, r9
 8014028:	464a      	movge	r2, r9
 801402a:	bfb8      	it	lt
 801402c:	2200      	movlt	r2, #0
 801402e:	e73c      	b.n	8013eaa <_dtoa_r+0x642>
 8014030:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8014034:	9f07      	ldr	r7, [sp, #28]
 8014036:	461c      	mov	r4, r3
 8014038:	e744      	b.n	8013ec4 <_dtoa_r+0x65c>
 801403a:	461a      	mov	r2, r3
 801403c:	e770      	b.n	8013f20 <_dtoa_r+0x6b8>
 801403e:	9b06      	ldr	r3, [sp, #24]
 8014040:	2b01      	cmp	r3, #1
 8014042:	dc18      	bgt.n	8014076 <_dtoa_r+0x80e>
 8014044:	9b02      	ldr	r3, [sp, #8]
 8014046:	b9b3      	cbnz	r3, 8014076 <_dtoa_r+0x80e>
 8014048:	9b03      	ldr	r3, [sp, #12]
 801404a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801404e:	b9a2      	cbnz	r2, 801407a <_dtoa_r+0x812>
 8014050:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8014054:	0d12      	lsrs	r2, r2, #20
 8014056:	0512      	lsls	r2, r2, #20
 8014058:	b18a      	cbz	r2, 801407e <_dtoa_r+0x816>
 801405a:	9b04      	ldr	r3, [sp, #16]
 801405c:	3301      	adds	r3, #1
 801405e:	9304      	str	r3, [sp, #16]
 8014060:	9b05      	ldr	r3, [sp, #20]
 8014062:	3301      	adds	r3, #1
 8014064:	9305      	str	r3, [sp, #20]
 8014066:	2301      	movs	r3, #1
 8014068:	930a      	str	r3, [sp, #40]	; 0x28
 801406a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801406c:	2b00      	cmp	r3, #0
 801406e:	f47f af70 	bne.w	8013f52 <_dtoa_r+0x6ea>
 8014072:	2001      	movs	r0, #1
 8014074:	e775      	b.n	8013f62 <_dtoa_r+0x6fa>
 8014076:	2300      	movs	r3, #0
 8014078:	e7f6      	b.n	8014068 <_dtoa_r+0x800>
 801407a:	9b02      	ldr	r3, [sp, #8]
 801407c:	e7f4      	b.n	8014068 <_dtoa_r+0x800>
 801407e:	920a      	str	r2, [sp, #40]	; 0x28
 8014080:	e7f3      	b.n	801406a <_dtoa_r+0x802>
 8014082:	d082      	beq.n	8013f8a <_dtoa_r+0x722>
 8014084:	4610      	mov	r0, r2
 8014086:	301c      	adds	r0, #28
 8014088:	e778      	b.n	8013f7c <_dtoa_r+0x714>
 801408a:	f1b9 0f00 	cmp.w	r9, #0
 801408e:	dc37      	bgt.n	8014100 <_dtoa_r+0x898>
 8014090:	9b06      	ldr	r3, [sp, #24]
 8014092:	2b02      	cmp	r3, #2
 8014094:	dd34      	ble.n	8014100 <_dtoa_r+0x898>
 8014096:	46ca      	mov	sl, r9
 8014098:	f1ba 0f00 	cmp.w	sl, #0
 801409c:	d10d      	bne.n	80140ba <_dtoa_r+0x852>
 801409e:	4621      	mov	r1, r4
 80140a0:	4653      	mov	r3, sl
 80140a2:	2205      	movs	r2, #5
 80140a4:	4630      	mov	r0, r6
 80140a6:	f000 ff6d 	bl	8014f84 <__multadd>
 80140aa:	4601      	mov	r1, r0
 80140ac:	4604      	mov	r4, r0
 80140ae:	4628      	mov	r0, r5
 80140b0:	f001 f9d2 	bl	8015458 <__mcmp>
 80140b4:	2800      	cmp	r0, #0
 80140b6:	f73f adeb 	bgt.w	8013c90 <_dtoa_r+0x428>
 80140ba:	9b08      	ldr	r3, [sp, #32]
 80140bc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80140c0:	ea6f 0b03 	mvn.w	fp, r3
 80140c4:	f04f 0900 	mov.w	r9, #0
 80140c8:	4621      	mov	r1, r4
 80140ca:	4630      	mov	r0, r6
 80140cc:	f000 ff38 	bl	8014f40 <_Bfree>
 80140d0:	2f00      	cmp	r7, #0
 80140d2:	f43f aea8 	beq.w	8013e26 <_dtoa_r+0x5be>
 80140d6:	f1b9 0f00 	cmp.w	r9, #0
 80140da:	d005      	beq.n	80140e8 <_dtoa_r+0x880>
 80140dc:	45b9      	cmp	r9, r7
 80140de:	d003      	beq.n	80140e8 <_dtoa_r+0x880>
 80140e0:	4649      	mov	r1, r9
 80140e2:	4630      	mov	r0, r6
 80140e4:	f000 ff2c 	bl	8014f40 <_Bfree>
 80140e8:	4639      	mov	r1, r7
 80140ea:	4630      	mov	r0, r6
 80140ec:	f000 ff28 	bl	8014f40 <_Bfree>
 80140f0:	e699      	b.n	8013e26 <_dtoa_r+0x5be>
 80140f2:	2400      	movs	r4, #0
 80140f4:	4627      	mov	r7, r4
 80140f6:	e7e0      	b.n	80140ba <_dtoa_r+0x852>
 80140f8:	46bb      	mov	fp, r7
 80140fa:	4604      	mov	r4, r0
 80140fc:	4607      	mov	r7, r0
 80140fe:	e5c7      	b.n	8013c90 <_dtoa_r+0x428>
 8014100:	9b07      	ldr	r3, [sp, #28]
 8014102:	46ca      	mov	sl, r9
 8014104:	2b00      	cmp	r3, #0
 8014106:	f000 8100 	beq.w	801430a <_dtoa_r+0xaa2>
 801410a:	f1b8 0f00 	cmp.w	r8, #0
 801410e:	dd05      	ble.n	801411c <_dtoa_r+0x8b4>
 8014110:	4639      	mov	r1, r7
 8014112:	4642      	mov	r2, r8
 8014114:	4630      	mov	r0, r6
 8014116:	f001 f92f 	bl	8015378 <__lshift>
 801411a:	4607      	mov	r7, r0
 801411c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801411e:	2b00      	cmp	r3, #0
 8014120:	d05d      	beq.n	80141de <_dtoa_r+0x976>
 8014122:	6879      	ldr	r1, [r7, #4]
 8014124:	4630      	mov	r0, r6
 8014126:	f000 fecb 	bl	8014ec0 <_Balloc>
 801412a:	4680      	mov	r8, r0
 801412c:	b928      	cbnz	r0, 801413a <_dtoa_r+0x8d2>
 801412e:	4b82      	ldr	r3, [pc, #520]	; (8014338 <_dtoa_r+0xad0>)
 8014130:	4602      	mov	r2, r0
 8014132:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014136:	f7ff bbaf 	b.w	8013898 <_dtoa_r+0x30>
 801413a:	693a      	ldr	r2, [r7, #16]
 801413c:	3202      	adds	r2, #2
 801413e:	0092      	lsls	r2, r2, #2
 8014140:	f107 010c 	add.w	r1, r7, #12
 8014144:	300c      	adds	r0, #12
 8014146:	f000 fea1 	bl	8014e8c <memcpy>
 801414a:	2201      	movs	r2, #1
 801414c:	4641      	mov	r1, r8
 801414e:	4630      	mov	r0, r6
 8014150:	f001 f912 	bl	8015378 <__lshift>
 8014154:	9b01      	ldr	r3, [sp, #4]
 8014156:	3301      	adds	r3, #1
 8014158:	9304      	str	r3, [sp, #16]
 801415a:	9b01      	ldr	r3, [sp, #4]
 801415c:	4453      	add	r3, sl
 801415e:	9308      	str	r3, [sp, #32]
 8014160:	9b02      	ldr	r3, [sp, #8]
 8014162:	f003 0301 	and.w	r3, r3, #1
 8014166:	46b9      	mov	r9, r7
 8014168:	9307      	str	r3, [sp, #28]
 801416a:	4607      	mov	r7, r0
 801416c:	9b04      	ldr	r3, [sp, #16]
 801416e:	4621      	mov	r1, r4
 8014170:	3b01      	subs	r3, #1
 8014172:	4628      	mov	r0, r5
 8014174:	9302      	str	r3, [sp, #8]
 8014176:	f7ff faeb 	bl	8013750 <quorem>
 801417a:	4603      	mov	r3, r0
 801417c:	3330      	adds	r3, #48	; 0x30
 801417e:	9005      	str	r0, [sp, #20]
 8014180:	4649      	mov	r1, r9
 8014182:	4628      	mov	r0, r5
 8014184:	9309      	str	r3, [sp, #36]	; 0x24
 8014186:	f001 f967 	bl	8015458 <__mcmp>
 801418a:	463a      	mov	r2, r7
 801418c:	4682      	mov	sl, r0
 801418e:	4621      	mov	r1, r4
 8014190:	4630      	mov	r0, r6
 8014192:	f001 f97d 	bl	8015490 <__mdiff>
 8014196:	68c2      	ldr	r2, [r0, #12]
 8014198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801419a:	4680      	mov	r8, r0
 801419c:	bb0a      	cbnz	r2, 80141e2 <_dtoa_r+0x97a>
 801419e:	4601      	mov	r1, r0
 80141a0:	4628      	mov	r0, r5
 80141a2:	f001 f959 	bl	8015458 <__mcmp>
 80141a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141a8:	4602      	mov	r2, r0
 80141aa:	4641      	mov	r1, r8
 80141ac:	4630      	mov	r0, r6
 80141ae:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80141b2:	f000 fec5 	bl	8014f40 <_Bfree>
 80141b6:	9b06      	ldr	r3, [sp, #24]
 80141b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80141ba:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80141be:	ea43 0102 	orr.w	r1, r3, r2
 80141c2:	9b07      	ldr	r3, [sp, #28]
 80141c4:	430b      	orrs	r3, r1
 80141c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141c8:	d10d      	bne.n	80141e6 <_dtoa_r+0x97e>
 80141ca:	2b39      	cmp	r3, #57	; 0x39
 80141cc:	d029      	beq.n	8014222 <_dtoa_r+0x9ba>
 80141ce:	f1ba 0f00 	cmp.w	sl, #0
 80141d2:	dd01      	ble.n	80141d8 <_dtoa_r+0x970>
 80141d4:	9b05      	ldr	r3, [sp, #20]
 80141d6:	3331      	adds	r3, #49	; 0x31
 80141d8:	9a02      	ldr	r2, [sp, #8]
 80141da:	7013      	strb	r3, [r2, #0]
 80141dc:	e774      	b.n	80140c8 <_dtoa_r+0x860>
 80141de:	4638      	mov	r0, r7
 80141e0:	e7b8      	b.n	8014154 <_dtoa_r+0x8ec>
 80141e2:	2201      	movs	r2, #1
 80141e4:	e7e1      	b.n	80141aa <_dtoa_r+0x942>
 80141e6:	f1ba 0f00 	cmp.w	sl, #0
 80141ea:	db06      	blt.n	80141fa <_dtoa_r+0x992>
 80141ec:	9906      	ldr	r1, [sp, #24]
 80141ee:	ea41 0a0a 	orr.w	sl, r1, sl
 80141f2:	9907      	ldr	r1, [sp, #28]
 80141f4:	ea5a 0101 	orrs.w	r1, sl, r1
 80141f8:	d120      	bne.n	801423c <_dtoa_r+0x9d4>
 80141fa:	2a00      	cmp	r2, #0
 80141fc:	ddec      	ble.n	80141d8 <_dtoa_r+0x970>
 80141fe:	4629      	mov	r1, r5
 8014200:	2201      	movs	r2, #1
 8014202:	4630      	mov	r0, r6
 8014204:	9304      	str	r3, [sp, #16]
 8014206:	f001 f8b7 	bl	8015378 <__lshift>
 801420a:	4621      	mov	r1, r4
 801420c:	4605      	mov	r5, r0
 801420e:	f001 f923 	bl	8015458 <__mcmp>
 8014212:	2800      	cmp	r0, #0
 8014214:	9b04      	ldr	r3, [sp, #16]
 8014216:	dc02      	bgt.n	801421e <_dtoa_r+0x9b6>
 8014218:	d1de      	bne.n	80141d8 <_dtoa_r+0x970>
 801421a:	07da      	lsls	r2, r3, #31
 801421c:	d5dc      	bpl.n	80141d8 <_dtoa_r+0x970>
 801421e:	2b39      	cmp	r3, #57	; 0x39
 8014220:	d1d8      	bne.n	80141d4 <_dtoa_r+0x96c>
 8014222:	9a02      	ldr	r2, [sp, #8]
 8014224:	2339      	movs	r3, #57	; 0x39
 8014226:	7013      	strb	r3, [r2, #0]
 8014228:	4643      	mov	r3, r8
 801422a:	4698      	mov	r8, r3
 801422c:	3b01      	subs	r3, #1
 801422e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8014232:	2a39      	cmp	r2, #57	; 0x39
 8014234:	d051      	beq.n	80142da <_dtoa_r+0xa72>
 8014236:	3201      	adds	r2, #1
 8014238:	701a      	strb	r2, [r3, #0]
 801423a:	e745      	b.n	80140c8 <_dtoa_r+0x860>
 801423c:	2a00      	cmp	r2, #0
 801423e:	dd03      	ble.n	8014248 <_dtoa_r+0x9e0>
 8014240:	2b39      	cmp	r3, #57	; 0x39
 8014242:	d0ee      	beq.n	8014222 <_dtoa_r+0x9ba>
 8014244:	3301      	adds	r3, #1
 8014246:	e7c7      	b.n	80141d8 <_dtoa_r+0x970>
 8014248:	9a04      	ldr	r2, [sp, #16]
 801424a:	9908      	ldr	r1, [sp, #32]
 801424c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014250:	428a      	cmp	r2, r1
 8014252:	d02b      	beq.n	80142ac <_dtoa_r+0xa44>
 8014254:	4629      	mov	r1, r5
 8014256:	2300      	movs	r3, #0
 8014258:	220a      	movs	r2, #10
 801425a:	4630      	mov	r0, r6
 801425c:	f000 fe92 	bl	8014f84 <__multadd>
 8014260:	45b9      	cmp	r9, r7
 8014262:	4605      	mov	r5, r0
 8014264:	f04f 0300 	mov.w	r3, #0
 8014268:	f04f 020a 	mov.w	r2, #10
 801426c:	4649      	mov	r1, r9
 801426e:	4630      	mov	r0, r6
 8014270:	d107      	bne.n	8014282 <_dtoa_r+0xa1a>
 8014272:	f000 fe87 	bl	8014f84 <__multadd>
 8014276:	4681      	mov	r9, r0
 8014278:	4607      	mov	r7, r0
 801427a:	9b04      	ldr	r3, [sp, #16]
 801427c:	3301      	adds	r3, #1
 801427e:	9304      	str	r3, [sp, #16]
 8014280:	e774      	b.n	801416c <_dtoa_r+0x904>
 8014282:	f000 fe7f 	bl	8014f84 <__multadd>
 8014286:	4639      	mov	r1, r7
 8014288:	4681      	mov	r9, r0
 801428a:	2300      	movs	r3, #0
 801428c:	220a      	movs	r2, #10
 801428e:	4630      	mov	r0, r6
 8014290:	f000 fe78 	bl	8014f84 <__multadd>
 8014294:	4607      	mov	r7, r0
 8014296:	e7f0      	b.n	801427a <_dtoa_r+0xa12>
 8014298:	f1ba 0f00 	cmp.w	sl, #0
 801429c:	9a01      	ldr	r2, [sp, #4]
 801429e:	bfcc      	ite	gt
 80142a0:	46d0      	movgt	r8, sl
 80142a2:	f04f 0801 	movle.w	r8, #1
 80142a6:	4490      	add	r8, r2
 80142a8:	f04f 0900 	mov.w	r9, #0
 80142ac:	4629      	mov	r1, r5
 80142ae:	2201      	movs	r2, #1
 80142b0:	4630      	mov	r0, r6
 80142b2:	9302      	str	r3, [sp, #8]
 80142b4:	f001 f860 	bl	8015378 <__lshift>
 80142b8:	4621      	mov	r1, r4
 80142ba:	4605      	mov	r5, r0
 80142bc:	f001 f8cc 	bl	8015458 <__mcmp>
 80142c0:	2800      	cmp	r0, #0
 80142c2:	dcb1      	bgt.n	8014228 <_dtoa_r+0x9c0>
 80142c4:	d102      	bne.n	80142cc <_dtoa_r+0xa64>
 80142c6:	9b02      	ldr	r3, [sp, #8]
 80142c8:	07db      	lsls	r3, r3, #31
 80142ca:	d4ad      	bmi.n	8014228 <_dtoa_r+0x9c0>
 80142cc:	4643      	mov	r3, r8
 80142ce:	4698      	mov	r8, r3
 80142d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80142d4:	2a30      	cmp	r2, #48	; 0x30
 80142d6:	d0fa      	beq.n	80142ce <_dtoa_r+0xa66>
 80142d8:	e6f6      	b.n	80140c8 <_dtoa_r+0x860>
 80142da:	9a01      	ldr	r2, [sp, #4]
 80142dc:	429a      	cmp	r2, r3
 80142de:	d1a4      	bne.n	801422a <_dtoa_r+0x9c2>
 80142e0:	f10b 0b01 	add.w	fp, fp, #1
 80142e4:	2331      	movs	r3, #49	; 0x31
 80142e6:	e778      	b.n	80141da <_dtoa_r+0x972>
 80142e8:	4b14      	ldr	r3, [pc, #80]	; (801433c <_dtoa_r+0xad4>)
 80142ea:	f7ff bb27 	b.w	801393c <_dtoa_r+0xd4>
 80142ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	f47f ab03 	bne.w	80138fc <_dtoa_r+0x94>
 80142f6:	4b12      	ldr	r3, [pc, #72]	; (8014340 <_dtoa_r+0xad8>)
 80142f8:	f7ff bb20 	b.w	801393c <_dtoa_r+0xd4>
 80142fc:	f1ba 0f00 	cmp.w	sl, #0
 8014300:	dc03      	bgt.n	801430a <_dtoa_r+0xaa2>
 8014302:	9b06      	ldr	r3, [sp, #24]
 8014304:	2b02      	cmp	r3, #2
 8014306:	f73f aec7 	bgt.w	8014098 <_dtoa_r+0x830>
 801430a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801430e:	4621      	mov	r1, r4
 8014310:	4628      	mov	r0, r5
 8014312:	f7ff fa1d 	bl	8013750 <quorem>
 8014316:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801431a:	f808 3b01 	strb.w	r3, [r8], #1
 801431e:	9a01      	ldr	r2, [sp, #4]
 8014320:	eba8 0202 	sub.w	r2, r8, r2
 8014324:	4592      	cmp	sl, r2
 8014326:	ddb7      	ble.n	8014298 <_dtoa_r+0xa30>
 8014328:	4629      	mov	r1, r5
 801432a:	2300      	movs	r3, #0
 801432c:	220a      	movs	r2, #10
 801432e:	4630      	mov	r0, r6
 8014330:	f000 fe28 	bl	8014f84 <__multadd>
 8014334:	4605      	mov	r5, r0
 8014336:	e7ea      	b.n	801430e <_dtoa_r+0xaa6>
 8014338:	08016d48 	.word	0x08016d48
 801433c:	08016b4c 	.word	0x08016b4c
 8014340:	08016cc9 	.word	0x08016cc9

08014344 <__sflush_r>:
 8014344:	898a      	ldrh	r2, [r1, #12]
 8014346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801434a:	4605      	mov	r5, r0
 801434c:	0710      	lsls	r0, r2, #28
 801434e:	460c      	mov	r4, r1
 8014350:	d458      	bmi.n	8014404 <__sflush_r+0xc0>
 8014352:	684b      	ldr	r3, [r1, #4]
 8014354:	2b00      	cmp	r3, #0
 8014356:	dc05      	bgt.n	8014364 <__sflush_r+0x20>
 8014358:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801435a:	2b00      	cmp	r3, #0
 801435c:	dc02      	bgt.n	8014364 <__sflush_r+0x20>
 801435e:	2000      	movs	r0, #0
 8014360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014364:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014366:	2e00      	cmp	r6, #0
 8014368:	d0f9      	beq.n	801435e <__sflush_r+0x1a>
 801436a:	2300      	movs	r3, #0
 801436c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014370:	682f      	ldr	r7, [r5, #0]
 8014372:	602b      	str	r3, [r5, #0]
 8014374:	d032      	beq.n	80143dc <__sflush_r+0x98>
 8014376:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014378:	89a3      	ldrh	r3, [r4, #12]
 801437a:	075a      	lsls	r2, r3, #29
 801437c:	d505      	bpl.n	801438a <__sflush_r+0x46>
 801437e:	6863      	ldr	r3, [r4, #4]
 8014380:	1ac0      	subs	r0, r0, r3
 8014382:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014384:	b10b      	cbz	r3, 801438a <__sflush_r+0x46>
 8014386:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014388:	1ac0      	subs	r0, r0, r3
 801438a:	2300      	movs	r3, #0
 801438c:	4602      	mov	r2, r0
 801438e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014390:	6a21      	ldr	r1, [r4, #32]
 8014392:	4628      	mov	r0, r5
 8014394:	47b0      	blx	r6
 8014396:	1c43      	adds	r3, r0, #1
 8014398:	89a3      	ldrh	r3, [r4, #12]
 801439a:	d106      	bne.n	80143aa <__sflush_r+0x66>
 801439c:	6829      	ldr	r1, [r5, #0]
 801439e:	291d      	cmp	r1, #29
 80143a0:	d82c      	bhi.n	80143fc <__sflush_r+0xb8>
 80143a2:	4a2a      	ldr	r2, [pc, #168]	; (801444c <__sflush_r+0x108>)
 80143a4:	40ca      	lsrs	r2, r1
 80143a6:	07d6      	lsls	r6, r2, #31
 80143a8:	d528      	bpl.n	80143fc <__sflush_r+0xb8>
 80143aa:	2200      	movs	r2, #0
 80143ac:	6062      	str	r2, [r4, #4]
 80143ae:	04d9      	lsls	r1, r3, #19
 80143b0:	6922      	ldr	r2, [r4, #16]
 80143b2:	6022      	str	r2, [r4, #0]
 80143b4:	d504      	bpl.n	80143c0 <__sflush_r+0x7c>
 80143b6:	1c42      	adds	r2, r0, #1
 80143b8:	d101      	bne.n	80143be <__sflush_r+0x7a>
 80143ba:	682b      	ldr	r3, [r5, #0]
 80143bc:	b903      	cbnz	r3, 80143c0 <__sflush_r+0x7c>
 80143be:	6560      	str	r0, [r4, #84]	; 0x54
 80143c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80143c2:	602f      	str	r7, [r5, #0]
 80143c4:	2900      	cmp	r1, #0
 80143c6:	d0ca      	beq.n	801435e <__sflush_r+0x1a>
 80143c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80143cc:	4299      	cmp	r1, r3
 80143ce:	d002      	beq.n	80143d6 <__sflush_r+0x92>
 80143d0:	4628      	mov	r0, r5
 80143d2:	f7fd fa89 	bl	80118e8 <_free_r>
 80143d6:	2000      	movs	r0, #0
 80143d8:	6360      	str	r0, [r4, #52]	; 0x34
 80143da:	e7c1      	b.n	8014360 <__sflush_r+0x1c>
 80143dc:	6a21      	ldr	r1, [r4, #32]
 80143de:	2301      	movs	r3, #1
 80143e0:	4628      	mov	r0, r5
 80143e2:	47b0      	blx	r6
 80143e4:	1c41      	adds	r1, r0, #1
 80143e6:	d1c7      	bne.n	8014378 <__sflush_r+0x34>
 80143e8:	682b      	ldr	r3, [r5, #0]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d0c4      	beq.n	8014378 <__sflush_r+0x34>
 80143ee:	2b1d      	cmp	r3, #29
 80143f0:	d001      	beq.n	80143f6 <__sflush_r+0xb2>
 80143f2:	2b16      	cmp	r3, #22
 80143f4:	d101      	bne.n	80143fa <__sflush_r+0xb6>
 80143f6:	602f      	str	r7, [r5, #0]
 80143f8:	e7b1      	b.n	801435e <__sflush_r+0x1a>
 80143fa:	89a3      	ldrh	r3, [r4, #12]
 80143fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014400:	81a3      	strh	r3, [r4, #12]
 8014402:	e7ad      	b.n	8014360 <__sflush_r+0x1c>
 8014404:	690f      	ldr	r7, [r1, #16]
 8014406:	2f00      	cmp	r7, #0
 8014408:	d0a9      	beq.n	801435e <__sflush_r+0x1a>
 801440a:	0793      	lsls	r3, r2, #30
 801440c:	680e      	ldr	r6, [r1, #0]
 801440e:	bf08      	it	eq
 8014410:	694b      	ldreq	r3, [r1, #20]
 8014412:	600f      	str	r7, [r1, #0]
 8014414:	bf18      	it	ne
 8014416:	2300      	movne	r3, #0
 8014418:	eba6 0807 	sub.w	r8, r6, r7
 801441c:	608b      	str	r3, [r1, #8]
 801441e:	f1b8 0f00 	cmp.w	r8, #0
 8014422:	dd9c      	ble.n	801435e <__sflush_r+0x1a>
 8014424:	6a21      	ldr	r1, [r4, #32]
 8014426:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014428:	4643      	mov	r3, r8
 801442a:	463a      	mov	r2, r7
 801442c:	4628      	mov	r0, r5
 801442e:	47b0      	blx	r6
 8014430:	2800      	cmp	r0, #0
 8014432:	dc06      	bgt.n	8014442 <__sflush_r+0xfe>
 8014434:	89a3      	ldrh	r3, [r4, #12]
 8014436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801443a:	81a3      	strh	r3, [r4, #12]
 801443c:	f04f 30ff 	mov.w	r0, #4294967295
 8014440:	e78e      	b.n	8014360 <__sflush_r+0x1c>
 8014442:	4407      	add	r7, r0
 8014444:	eba8 0800 	sub.w	r8, r8, r0
 8014448:	e7e9      	b.n	801441e <__sflush_r+0xda>
 801444a:	bf00      	nop
 801444c:	20400001 	.word	0x20400001

08014450 <_fflush_r>:
 8014450:	b538      	push	{r3, r4, r5, lr}
 8014452:	690b      	ldr	r3, [r1, #16]
 8014454:	4605      	mov	r5, r0
 8014456:	460c      	mov	r4, r1
 8014458:	b913      	cbnz	r3, 8014460 <_fflush_r+0x10>
 801445a:	2500      	movs	r5, #0
 801445c:	4628      	mov	r0, r5
 801445e:	bd38      	pop	{r3, r4, r5, pc}
 8014460:	b118      	cbz	r0, 801446a <_fflush_r+0x1a>
 8014462:	6983      	ldr	r3, [r0, #24]
 8014464:	b90b      	cbnz	r3, 801446a <_fflush_r+0x1a>
 8014466:	f000 f887 	bl	8014578 <__sinit>
 801446a:	4b14      	ldr	r3, [pc, #80]	; (80144bc <_fflush_r+0x6c>)
 801446c:	429c      	cmp	r4, r3
 801446e:	d11b      	bne.n	80144a8 <_fflush_r+0x58>
 8014470:	686c      	ldr	r4, [r5, #4]
 8014472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d0ef      	beq.n	801445a <_fflush_r+0xa>
 801447a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801447c:	07d0      	lsls	r0, r2, #31
 801447e:	d404      	bmi.n	801448a <_fflush_r+0x3a>
 8014480:	0599      	lsls	r1, r3, #22
 8014482:	d402      	bmi.n	801448a <_fflush_r+0x3a>
 8014484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014486:	f000 fc88 	bl	8014d9a <__retarget_lock_acquire_recursive>
 801448a:	4628      	mov	r0, r5
 801448c:	4621      	mov	r1, r4
 801448e:	f7ff ff59 	bl	8014344 <__sflush_r>
 8014492:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014494:	07da      	lsls	r2, r3, #31
 8014496:	4605      	mov	r5, r0
 8014498:	d4e0      	bmi.n	801445c <_fflush_r+0xc>
 801449a:	89a3      	ldrh	r3, [r4, #12]
 801449c:	059b      	lsls	r3, r3, #22
 801449e:	d4dd      	bmi.n	801445c <_fflush_r+0xc>
 80144a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80144a2:	f000 fc7b 	bl	8014d9c <__retarget_lock_release_recursive>
 80144a6:	e7d9      	b.n	801445c <_fflush_r+0xc>
 80144a8:	4b05      	ldr	r3, [pc, #20]	; (80144c0 <_fflush_r+0x70>)
 80144aa:	429c      	cmp	r4, r3
 80144ac:	d101      	bne.n	80144b2 <_fflush_r+0x62>
 80144ae:	68ac      	ldr	r4, [r5, #8]
 80144b0:	e7df      	b.n	8014472 <_fflush_r+0x22>
 80144b2:	4b04      	ldr	r3, [pc, #16]	; (80144c4 <_fflush_r+0x74>)
 80144b4:	429c      	cmp	r4, r3
 80144b6:	bf08      	it	eq
 80144b8:	68ec      	ldreq	r4, [r5, #12]
 80144ba:	e7da      	b.n	8014472 <_fflush_r+0x22>
 80144bc:	08016d7c 	.word	0x08016d7c
 80144c0:	08016d9c 	.word	0x08016d9c
 80144c4:	08016d5c 	.word	0x08016d5c

080144c8 <std>:
 80144c8:	2300      	movs	r3, #0
 80144ca:	b510      	push	{r4, lr}
 80144cc:	4604      	mov	r4, r0
 80144ce:	e9c0 3300 	strd	r3, r3, [r0]
 80144d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80144d6:	6083      	str	r3, [r0, #8]
 80144d8:	8181      	strh	r1, [r0, #12]
 80144da:	6643      	str	r3, [r0, #100]	; 0x64
 80144dc:	81c2      	strh	r2, [r0, #14]
 80144de:	6183      	str	r3, [r0, #24]
 80144e0:	4619      	mov	r1, r3
 80144e2:	2208      	movs	r2, #8
 80144e4:	305c      	adds	r0, #92	; 0x5c
 80144e6:	f7fd f9f7 	bl	80118d8 <memset>
 80144ea:	4b05      	ldr	r3, [pc, #20]	; (8014500 <std+0x38>)
 80144ec:	6263      	str	r3, [r4, #36]	; 0x24
 80144ee:	4b05      	ldr	r3, [pc, #20]	; (8014504 <std+0x3c>)
 80144f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80144f2:	4b05      	ldr	r3, [pc, #20]	; (8014508 <std+0x40>)
 80144f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80144f6:	4b05      	ldr	r3, [pc, #20]	; (801450c <std+0x44>)
 80144f8:	6224      	str	r4, [r4, #32]
 80144fa:	6323      	str	r3, [r4, #48]	; 0x30
 80144fc:	bd10      	pop	{r4, pc}
 80144fe:	bf00      	nop
 8014500:	08015e79 	.word	0x08015e79
 8014504:	08015e9b 	.word	0x08015e9b
 8014508:	08015ed3 	.word	0x08015ed3
 801450c:	08015ef7 	.word	0x08015ef7

08014510 <_cleanup_r>:
 8014510:	4901      	ldr	r1, [pc, #4]	; (8014518 <_cleanup_r+0x8>)
 8014512:	f000 b8af 	b.w	8014674 <_fwalk_reent>
 8014516:	bf00      	nop
 8014518:	08014451 	.word	0x08014451

0801451c <__sfmoreglue>:
 801451c:	b570      	push	{r4, r5, r6, lr}
 801451e:	2268      	movs	r2, #104	; 0x68
 8014520:	1e4d      	subs	r5, r1, #1
 8014522:	4355      	muls	r5, r2
 8014524:	460e      	mov	r6, r1
 8014526:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801452a:	f7fd fa49 	bl	80119c0 <_malloc_r>
 801452e:	4604      	mov	r4, r0
 8014530:	b140      	cbz	r0, 8014544 <__sfmoreglue+0x28>
 8014532:	2100      	movs	r1, #0
 8014534:	e9c0 1600 	strd	r1, r6, [r0]
 8014538:	300c      	adds	r0, #12
 801453a:	60a0      	str	r0, [r4, #8]
 801453c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014540:	f7fd f9ca 	bl	80118d8 <memset>
 8014544:	4620      	mov	r0, r4
 8014546:	bd70      	pop	{r4, r5, r6, pc}

08014548 <__sfp_lock_acquire>:
 8014548:	4801      	ldr	r0, [pc, #4]	; (8014550 <__sfp_lock_acquire+0x8>)
 801454a:	f000 bc26 	b.w	8014d9a <__retarget_lock_acquire_recursive>
 801454e:	bf00      	nop
 8014550:	20005811 	.word	0x20005811

08014554 <__sfp_lock_release>:
 8014554:	4801      	ldr	r0, [pc, #4]	; (801455c <__sfp_lock_release+0x8>)
 8014556:	f000 bc21 	b.w	8014d9c <__retarget_lock_release_recursive>
 801455a:	bf00      	nop
 801455c:	20005811 	.word	0x20005811

08014560 <__sinit_lock_acquire>:
 8014560:	4801      	ldr	r0, [pc, #4]	; (8014568 <__sinit_lock_acquire+0x8>)
 8014562:	f000 bc1a 	b.w	8014d9a <__retarget_lock_acquire_recursive>
 8014566:	bf00      	nop
 8014568:	20005812 	.word	0x20005812

0801456c <__sinit_lock_release>:
 801456c:	4801      	ldr	r0, [pc, #4]	; (8014574 <__sinit_lock_release+0x8>)
 801456e:	f000 bc15 	b.w	8014d9c <__retarget_lock_release_recursive>
 8014572:	bf00      	nop
 8014574:	20005812 	.word	0x20005812

08014578 <__sinit>:
 8014578:	b510      	push	{r4, lr}
 801457a:	4604      	mov	r4, r0
 801457c:	f7ff fff0 	bl	8014560 <__sinit_lock_acquire>
 8014580:	69a3      	ldr	r3, [r4, #24]
 8014582:	b11b      	cbz	r3, 801458c <__sinit+0x14>
 8014584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014588:	f7ff bff0 	b.w	801456c <__sinit_lock_release>
 801458c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014590:	6523      	str	r3, [r4, #80]	; 0x50
 8014592:	4b13      	ldr	r3, [pc, #76]	; (80145e0 <__sinit+0x68>)
 8014594:	4a13      	ldr	r2, [pc, #76]	; (80145e4 <__sinit+0x6c>)
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	62a2      	str	r2, [r4, #40]	; 0x28
 801459a:	42a3      	cmp	r3, r4
 801459c:	bf04      	itt	eq
 801459e:	2301      	moveq	r3, #1
 80145a0:	61a3      	streq	r3, [r4, #24]
 80145a2:	4620      	mov	r0, r4
 80145a4:	f000 f820 	bl	80145e8 <__sfp>
 80145a8:	6060      	str	r0, [r4, #4]
 80145aa:	4620      	mov	r0, r4
 80145ac:	f000 f81c 	bl	80145e8 <__sfp>
 80145b0:	60a0      	str	r0, [r4, #8]
 80145b2:	4620      	mov	r0, r4
 80145b4:	f000 f818 	bl	80145e8 <__sfp>
 80145b8:	2200      	movs	r2, #0
 80145ba:	60e0      	str	r0, [r4, #12]
 80145bc:	2104      	movs	r1, #4
 80145be:	6860      	ldr	r0, [r4, #4]
 80145c0:	f7ff ff82 	bl	80144c8 <std>
 80145c4:	68a0      	ldr	r0, [r4, #8]
 80145c6:	2201      	movs	r2, #1
 80145c8:	2109      	movs	r1, #9
 80145ca:	f7ff ff7d 	bl	80144c8 <std>
 80145ce:	68e0      	ldr	r0, [r4, #12]
 80145d0:	2202      	movs	r2, #2
 80145d2:	2112      	movs	r1, #18
 80145d4:	f7ff ff78 	bl	80144c8 <std>
 80145d8:	2301      	movs	r3, #1
 80145da:	61a3      	str	r3, [r4, #24]
 80145dc:	e7d2      	b.n	8014584 <__sinit+0xc>
 80145de:	bf00      	nop
 80145e0:	08016b38 	.word	0x08016b38
 80145e4:	08014511 	.word	0x08014511

080145e8 <__sfp>:
 80145e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145ea:	4607      	mov	r7, r0
 80145ec:	f7ff ffac 	bl	8014548 <__sfp_lock_acquire>
 80145f0:	4b1e      	ldr	r3, [pc, #120]	; (801466c <__sfp+0x84>)
 80145f2:	681e      	ldr	r6, [r3, #0]
 80145f4:	69b3      	ldr	r3, [r6, #24]
 80145f6:	b913      	cbnz	r3, 80145fe <__sfp+0x16>
 80145f8:	4630      	mov	r0, r6
 80145fa:	f7ff ffbd 	bl	8014578 <__sinit>
 80145fe:	3648      	adds	r6, #72	; 0x48
 8014600:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014604:	3b01      	subs	r3, #1
 8014606:	d503      	bpl.n	8014610 <__sfp+0x28>
 8014608:	6833      	ldr	r3, [r6, #0]
 801460a:	b30b      	cbz	r3, 8014650 <__sfp+0x68>
 801460c:	6836      	ldr	r6, [r6, #0]
 801460e:	e7f7      	b.n	8014600 <__sfp+0x18>
 8014610:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014614:	b9d5      	cbnz	r5, 801464c <__sfp+0x64>
 8014616:	4b16      	ldr	r3, [pc, #88]	; (8014670 <__sfp+0x88>)
 8014618:	60e3      	str	r3, [r4, #12]
 801461a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801461e:	6665      	str	r5, [r4, #100]	; 0x64
 8014620:	f000 fbba 	bl	8014d98 <__retarget_lock_init_recursive>
 8014624:	f7ff ff96 	bl	8014554 <__sfp_lock_release>
 8014628:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801462c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014630:	6025      	str	r5, [r4, #0]
 8014632:	61a5      	str	r5, [r4, #24]
 8014634:	2208      	movs	r2, #8
 8014636:	4629      	mov	r1, r5
 8014638:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801463c:	f7fd f94c 	bl	80118d8 <memset>
 8014640:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014644:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014648:	4620      	mov	r0, r4
 801464a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801464c:	3468      	adds	r4, #104	; 0x68
 801464e:	e7d9      	b.n	8014604 <__sfp+0x1c>
 8014650:	2104      	movs	r1, #4
 8014652:	4638      	mov	r0, r7
 8014654:	f7ff ff62 	bl	801451c <__sfmoreglue>
 8014658:	4604      	mov	r4, r0
 801465a:	6030      	str	r0, [r6, #0]
 801465c:	2800      	cmp	r0, #0
 801465e:	d1d5      	bne.n	801460c <__sfp+0x24>
 8014660:	f7ff ff78 	bl	8014554 <__sfp_lock_release>
 8014664:	230c      	movs	r3, #12
 8014666:	603b      	str	r3, [r7, #0]
 8014668:	e7ee      	b.n	8014648 <__sfp+0x60>
 801466a:	bf00      	nop
 801466c:	08016b38 	.word	0x08016b38
 8014670:	ffff0001 	.word	0xffff0001

08014674 <_fwalk_reent>:
 8014674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014678:	4606      	mov	r6, r0
 801467a:	4688      	mov	r8, r1
 801467c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014680:	2700      	movs	r7, #0
 8014682:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014686:	f1b9 0901 	subs.w	r9, r9, #1
 801468a:	d505      	bpl.n	8014698 <_fwalk_reent+0x24>
 801468c:	6824      	ldr	r4, [r4, #0]
 801468e:	2c00      	cmp	r4, #0
 8014690:	d1f7      	bne.n	8014682 <_fwalk_reent+0xe>
 8014692:	4638      	mov	r0, r7
 8014694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014698:	89ab      	ldrh	r3, [r5, #12]
 801469a:	2b01      	cmp	r3, #1
 801469c:	d907      	bls.n	80146ae <_fwalk_reent+0x3a>
 801469e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80146a2:	3301      	adds	r3, #1
 80146a4:	d003      	beq.n	80146ae <_fwalk_reent+0x3a>
 80146a6:	4629      	mov	r1, r5
 80146a8:	4630      	mov	r0, r6
 80146aa:	47c0      	blx	r8
 80146ac:	4307      	orrs	r7, r0
 80146ae:	3568      	adds	r5, #104	; 0x68
 80146b0:	e7e9      	b.n	8014686 <_fwalk_reent+0x12>

080146b2 <rshift>:
 80146b2:	6903      	ldr	r3, [r0, #16]
 80146b4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80146b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80146bc:	ea4f 1261 	mov.w	r2, r1, asr #5
 80146c0:	f100 0414 	add.w	r4, r0, #20
 80146c4:	dd45      	ble.n	8014752 <rshift+0xa0>
 80146c6:	f011 011f 	ands.w	r1, r1, #31
 80146ca:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80146ce:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80146d2:	d10c      	bne.n	80146ee <rshift+0x3c>
 80146d4:	f100 0710 	add.w	r7, r0, #16
 80146d8:	4629      	mov	r1, r5
 80146da:	42b1      	cmp	r1, r6
 80146dc:	d334      	bcc.n	8014748 <rshift+0x96>
 80146de:	1a9b      	subs	r3, r3, r2
 80146e0:	009b      	lsls	r3, r3, #2
 80146e2:	1eea      	subs	r2, r5, #3
 80146e4:	4296      	cmp	r6, r2
 80146e6:	bf38      	it	cc
 80146e8:	2300      	movcc	r3, #0
 80146ea:	4423      	add	r3, r4
 80146ec:	e015      	b.n	801471a <rshift+0x68>
 80146ee:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80146f2:	f1c1 0820 	rsb	r8, r1, #32
 80146f6:	40cf      	lsrs	r7, r1
 80146f8:	f105 0e04 	add.w	lr, r5, #4
 80146fc:	46a1      	mov	r9, r4
 80146fe:	4576      	cmp	r6, lr
 8014700:	46f4      	mov	ip, lr
 8014702:	d815      	bhi.n	8014730 <rshift+0x7e>
 8014704:	1a9a      	subs	r2, r3, r2
 8014706:	0092      	lsls	r2, r2, #2
 8014708:	3a04      	subs	r2, #4
 801470a:	3501      	adds	r5, #1
 801470c:	42ae      	cmp	r6, r5
 801470e:	bf38      	it	cc
 8014710:	2200      	movcc	r2, #0
 8014712:	18a3      	adds	r3, r4, r2
 8014714:	50a7      	str	r7, [r4, r2]
 8014716:	b107      	cbz	r7, 801471a <rshift+0x68>
 8014718:	3304      	adds	r3, #4
 801471a:	1b1a      	subs	r2, r3, r4
 801471c:	42a3      	cmp	r3, r4
 801471e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014722:	bf08      	it	eq
 8014724:	2300      	moveq	r3, #0
 8014726:	6102      	str	r2, [r0, #16]
 8014728:	bf08      	it	eq
 801472a:	6143      	streq	r3, [r0, #20]
 801472c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014730:	f8dc c000 	ldr.w	ip, [ip]
 8014734:	fa0c fc08 	lsl.w	ip, ip, r8
 8014738:	ea4c 0707 	orr.w	r7, ip, r7
 801473c:	f849 7b04 	str.w	r7, [r9], #4
 8014740:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014744:	40cf      	lsrs	r7, r1
 8014746:	e7da      	b.n	80146fe <rshift+0x4c>
 8014748:	f851 cb04 	ldr.w	ip, [r1], #4
 801474c:	f847 cf04 	str.w	ip, [r7, #4]!
 8014750:	e7c3      	b.n	80146da <rshift+0x28>
 8014752:	4623      	mov	r3, r4
 8014754:	e7e1      	b.n	801471a <rshift+0x68>

08014756 <__hexdig_fun>:
 8014756:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801475a:	2b09      	cmp	r3, #9
 801475c:	d802      	bhi.n	8014764 <__hexdig_fun+0xe>
 801475e:	3820      	subs	r0, #32
 8014760:	b2c0      	uxtb	r0, r0
 8014762:	4770      	bx	lr
 8014764:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014768:	2b05      	cmp	r3, #5
 801476a:	d801      	bhi.n	8014770 <__hexdig_fun+0x1a>
 801476c:	3847      	subs	r0, #71	; 0x47
 801476e:	e7f7      	b.n	8014760 <__hexdig_fun+0xa>
 8014770:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014774:	2b05      	cmp	r3, #5
 8014776:	d801      	bhi.n	801477c <__hexdig_fun+0x26>
 8014778:	3827      	subs	r0, #39	; 0x27
 801477a:	e7f1      	b.n	8014760 <__hexdig_fun+0xa>
 801477c:	2000      	movs	r0, #0
 801477e:	4770      	bx	lr

08014780 <__gethex>:
 8014780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014784:	ed2d 8b02 	vpush	{d8}
 8014788:	b089      	sub	sp, #36	; 0x24
 801478a:	ee08 0a10 	vmov	s16, r0
 801478e:	9304      	str	r3, [sp, #16]
 8014790:	4bb4      	ldr	r3, [pc, #720]	; (8014a64 <__gethex+0x2e4>)
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	9301      	str	r3, [sp, #4]
 8014796:	4618      	mov	r0, r3
 8014798:	468b      	mov	fp, r1
 801479a:	4690      	mov	r8, r2
 801479c:	f7eb fd5a 	bl	8000254 <strlen>
 80147a0:	9b01      	ldr	r3, [sp, #4]
 80147a2:	f8db 2000 	ldr.w	r2, [fp]
 80147a6:	4403      	add	r3, r0
 80147a8:	4682      	mov	sl, r0
 80147aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80147ae:	9305      	str	r3, [sp, #20]
 80147b0:	1c93      	adds	r3, r2, #2
 80147b2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80147b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80147ba:	32fe      	adds	r2, #254	; 0xfe
 80147bc:	18d1      	adds	r1, r2, r3
 80147be:	461f      	mov	r7, r3
 80147c0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80147c4:	9100      	str	r1, [sp, #0]
 80147c6:	2830      	cmp	r0, #48	; 0x30
 80147c8:	d0f8      	beq.n	80147bc <__gethex+0x3c>
 80147ca:	f7ff ffc4 	bl	8014756 <__hexdig_fun>
 80147ce:	4604      	mov	r4, r0
 80147d0:	2800      	cmp	r0, #0
 80147d2:	d13a      	bne.n	801484a <__gethex+0xca>
 80147d4:	9901      	ldr	r1, [sp, #4]
 80147d6:	4652      	mov	r2, sl
 80147d8:	4638      	mov	r0, r7
 80147da:	f001 fb90 	bl	8015efe <strncmp>
 80147de:	4605      	mov	r5, r0
 80147e0:	2800      	cmp	r0, #0
 80147e2:	d168      	bne.n	80148b6 <__gethex+0x136>
 80147e4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80147e8:	eb07 060a 	add.w	r6, r7, sl
 80147ec:	f7ff ffb3 	bl	8014756 <__hexdig_fun>
 80147f0:	2800      	cmp	r0, #0
 80147f2:	d062      	beq.n	80148ba <__gethex+0x13a>
 80147f4:	4633      	mov	r3, r6
 80147f6:	7818      	ldrb	r0, [r3, #0]
 80147f8:	2830      	cmp	r0, #48	; 0x30
 80147fa:	461f      	mov	r7, r3
 80147fc:	f103 0301 	add.w	r3, r3, #1
 8014800:	d0f9      	beq.n	80147f6 <__gethex+0x76>
 8014802:	f7ff ffa8 	bl	8014756 <__hexdig_fun>
 8014806:	2301      	movs	r3, #1
 8014808:	fab0 f480 	clz	r4, r0
 801480c:	0964      	lsrs	r4, r4, #5
 801480e:	4635      	mov	r5, r6
 8014810:	9300      	str	r3, [sp, #0]
 8014812:	463a      	mov	r2, r7
 8014814:	4616      	mov	r6, r2
 8014816:	3201      	adds	r2, #1
 8014818:	7830      	ldrb	r0, [r6, #0]
 801481a:	f7ff ff9c 	bl	8014756 <__hexdig_fun>
 801481e:	2800      	cmp	r0, #0
 8014820:	d1f8      	bne.n	8014814 <__gethex+0x94>
 8014822:	9901      	ldr	r1, [sp, #4]
 8014824:	4652      	mov	r2, sl
 8014826:	4630      	mov	r0, r6
 8014828:	f001 fb69 	bl	8015efe <strncmp>
 801482c:	b980      	cbnz	r0, 8014850 <__gethex+0xd0>
 801482e:	b94d      	cbnz	r5, 8014844 <__gethex+0xc4>
 8014830:	eb06 050a 	add.w	r5, r6, sl
 8014834:	462a      	mov	r2, r5
 8014836:	4616      	mov	r6, r2
 8014838:	3201      	adds	r2, #1
 801483a:	7830      	ldrb	r0, [r6, #0]
 801483c:	f7ff ff8b 	bl	8014756 <__hexdig_fun>
 8014840:	2800      	cmp	r0, #0
 8014842:	d1f8      	bne.n	8014836 <__gethex+0xb6>
 8014844:	1bad      	subs	r5, r5, r6
 8014846:	00ad      	lsls	r5, r5, #2
 8014848:	e004      	b.n	8014854 <__gethex+0xd4>
 801484a:	2400      	movs	r4, #0
 801484c:	4625      	mov	r5, r4
 801484e:	e7e0      	b.n	8014812 <__gethex+0x92>
 8014850:	2d00      	cmp	r5, #0
 8014852:	d1f7      	bne.n	8014844 <__gethex+0xc4>
 8014854:	7833      	ldrb	r3, [r6, #0]
 8014856:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801485a:	2b50      	cmp	r3, #80	; 0x50
 801485c:	d13b      	bne.n	80148d6 <__gethex+0x156>
 801485e:	7873      	ldrb	r3, [r6, #1]
 8014860:	2b2b      	cmp	r3, #43	; 0x2b
 8014862:	d02c      	beq.n	80148be <__gethex+0x13e>
 8014864:	2b2d      	cmp	r3, #45	; 0x2d
 8014866:	d02e      	beq.n	80148c6 <__gethex+0x146>
 8014868:	1c71      	adds	r1, r6, #1
 801486a:	f04f 0900 	mov.w	r9, #0
 801486e:	7808      	ldrb	r0, [r1, #0]
 8014870:	f7ff ff71 	bl	8014756 <__hexdig_fun>
 8014874:	1e43      	subs	r3, r0, #1
 8014876:	b2db      	uxtb	r3, r3
 8014878:	2b18      	cmp	r3, #24
 801487a:	d82c      	bhi.n	80148d6 <__gethex+0x156>
 801487c:	f1a0 0210 	sub.w	r2, r0, #16
 8014880:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014884:	f7ff ff67 	bl	8014756 <__hexdig_fun>
 8014888:	1e43      	subs	r3, r0, #1
 801488a:	b2db      	uxtb	r3, r3
 801488c:	2b18      	cmp	r3, #24
 801488e:	d91d      	bls.n	80148cc <__gethex+0x14c>
 8014890:	f1b9 0f00 	cmp.w	r9, #0
 8014894:	d000      	beq.n	8014898 <__gethex+0x118>
 8014896:	4252      	negs	r2, r2
 8014898:	4415      	add	r5, r2
 801489a:	f8cb 1000 	str.w	r1, [fp]
 801489e:	b1e4      	cbz	r4, 80148da <__gethex+0x15a>
 80148a0:	9b00      	ldr	r3, [sp, #0]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	bf14      	ite	ne
 80148a6:	2700      	movne	r7, #0
 80148a8:	2706      	moveq	r7, #6
 80148aa:	4638      	mov	r0, r7
 80148ac:	b009      	add	sp, #36	; 0x24
 80148ae:	ecbd 8b02 	vpop	{d8}
 80148b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148b6:	463e      	mov	r6, r7
 80148b8:	4625      	mov	r5, r4
 80148ba:	2401      	movs	r4, #1
 80148bc:	e7ca      	b.n	8014854 <__gethex+0xd4>
 80148be:	f04f 0900 	mov.w	r9, #0
 80148c2:	1cb1      	adds	r1, r6, #2
 80148c4:	e7d3      	b.n	801486e <__gethex+0xee>
 80148c6:	f04f 0901 	mov.w	r9, #1
 80148ca:	e7fa      	b.n	80148c2 <__gethex+0x142>
 80148cc:	230a      	movs	r3, #10
 80148ce:	fb03 0202 	mla	r2, r3, r2, r0
 80148d2:	3a10      	subs	r2, #16
 80148d4:	e7d4      	b.n	8014880 <__gethex+0x100>
 80148d6:	4631      	mov	r1, r6
 80148d8:	e7df      	b.n	801489a <__gethex+0x11a>
 80148da:	1bf3      	subs	r3, r6, r7
 80148dc:	3b01      	subs	r3, #1
 80148de:	4621      	mov	r1, r4
 80148e0:	2b07      	cmp	r3, #7
 80148e2:	dc0b      	bgt.n	80148fc <__gethex+0x17c>
 80148e4:	ee18 0a10 	vmov	r0, s16
 80148e8:	f000 faea 	bl	8014ec0 <_Balloc>
 80148ec:	4604      	mov	r4, r0
 80148ee:	b940      	cbnz	r0, 8014902 <__gethex+0x182>
 80148f0:	4b5d      	ldr	r3, [pc, #372]	; (8014a68 <__gethex+0x2e8>)
 80148f2:	4602      	mov	r2, r0
 80148f4:	21de      	movs	r1, #222	; 0xde
 80148f6:	485d      	ldr	r0, [pc, #372]	; (8014a6c <__gethex+0x2ec>)
 80148f8:	f001 fb34 	bl	8015f64 <__assert_func>
 80148fc:	3101      	adds	r1, #1
 80148fe:	105b      	asrs	r3, r3, #1
 8014900:	e7ee      	b.n	80148e0 <__gethex+0x160>
 8014902:	f100 0914 	add.w	r9, r0, #20
 8014906:	f04f 0b00 	mov.w	fp, #0
 801490a:	f1ca 0301 	rsb	r3, sl, #1
 801490e:	f8cd 9008 	str.w	r9, [sp, #8]
 8014912:	f8cd b000 	str.w	fp, [sp]
 8014916:	9306      	str	r3, [sp, #24]
 8014918:	42b7      	cmp	r7, r6
 801491a:	d340      	bcc.n	801499e <__gethex+0x21e>
 801491c:	9802      	ldr	r0, [sp, #8]
 801491e:	9b00      	ldr	r3, [sp, #0]
 8014920:	f840 3b04 	str.w	r3, [r0], #4
 8014924:	eba0 0009 	sub.w	r0, r0, r9
 8014928:	1080      	asrs	r0, r0, #2
 801492a:	0146      	lsls	r6, r0, #5
 801492c:	6120      	str	r0, [r4, #16]
 801492e:	4618      	mov	r0, r3
 8014930:	f000 fbb8 	bl	80150a4 <__hi0bits>
 8014934:	1a30      	subs	r0, r6, r0
 8014936:	f8d8 6000 	ldr.w	r6, [r8]
 801493a:	42b0      	cmp	r0, r6
 801493c:	dd63      	ble.n	8014a06 <__gethex+0x286>
 801493e:	1b87      	subs	r7, r0, r6
 8014940:	4639      	mov	r1, r7
 8014942:	4620      	mov	r0, r4
 8014944:	f000 ff59 	bl	80157fa <__any_on>
 8014948:	4682      	mov	sl, r0
 801494a:	b1a8      	cbz	r0, 8014978 <__gethex+0x1f8>
 801494c:	1e7b      	subs	r3, r7, #1
 801494e:	1159      	asrs	r1, r3, #5
 8014950:	f003 021f 	and.w	r2, r3, #31
 8014954:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014958:	f04f 0a01 	mov.w	sl, #1
 801495c:	fa0a f202 	lsl.w	r2, sl, r2
 8014960:	420a      	tst	r2, r1
 8014962:	d009      	beq.n	8014978 <__gethex+0x1f8>
 8014964:	4553      	cmp	r3, sl
 8014966:	dd05      	ble.n	8014974 <__gethex+0x1f4>
 8014968:	1eb9      	subs	r1, r7, #2
 801496a:	4620      	mov	r0, r4
 801496c:	f000 ff45 	bl	80157fa <__any_on>
 8014970:	2800      	cmp	r0, #0
 8014972:	d145      	bne.n	8014a00 <__gethex+0x280>
 8014974:	f04f 0a02 	mov.w	sl, #2
 8014978:	4639      	mov	r1, r7
 801497a:	4620      	mov	r0, r4
 801497c:	f7ff fe99 	bl	80146b2 <rshift>
 8014980:	443d      	add	r5, r7
 8014982:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014986:	42ab      	cmp	r3, r5
 8014988:	da4c      	bge.n	8014a24 <__gethex+0x2a4>
 801498a:	ee18 0a10 	vmov	r0, s16
 801498e:	4621      	mov	r1, r4
 8014990:	f000 fad6 	bl	8014f40 <_Bfree>
 8014994:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014996:	2300      	movs	r3, #0
 8014998:	6013      	str	r3, [r2, #0]
 801499a:	27a3      	movs	r7, #163	; 0xa3
 801499c:	e785      	b.n	80148aa <__gethex+0x12a>
 801499e:	1e73      	subs	r3, r6, #1
 80149a0:	9a05      	ldr	r2, [sp, #20]
 80149a2:	9303      	str	r3, [sp, #12]
 80149a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80149a8:	4293      	cmp	r3, r2
 80149aa:	d019      	beq.n	80149e0 <__gethex+0x260>
 80149ac:	f1bb 0f20 	cmp.w	fp, #32
 80149b0:	d107      	bne.n	80149c2 <__gethex+0x242>
 80149b2:	9b02      	ldr	r3, [sp, #8]
 80149b4:	9a00      	ldr	r2, [sp, #0]
 80149b6:	f843 2b04 	str.w	r2, [r3], #4
 80149ba:	9302      	str	r3, [sp, #8]
 80149bc:	2300      	movs	r3, #0
 80149be:	9300      	str	r3, [sp, #0]
 80149c0:	469b      	mov	fp, r3
 80149c2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80149c6:	f7ff fec6 	bl	8014756 <__hexdig_fun>
 80149ca:	9b00      	ldr	r3, [sp, #0]
 80149cc:	f000 000f 	and.w	r0, r0, #15
 80149d0:	fa00 f00b 	lsl.w	r0, r0, fp
 80149d4:	4303      	orrs	r3, r0
 80149d6:	9300      	str	r3, [sp, #0]
 80149d8:	f10b 0b04 	add.w	fp, fp, #4
 80149dc:	9b03      	ldr	r3, [sp, #12]
 80149de:	e00d      	b.n	80149fc <__gethex+0x27c>
 80149e0:	9b03      	ldr	r3, [sp, #12]
 80149e2:	9a06      	ldr	r2, [sp, #24]
 80149e4:	4413      	add	r3, r2
 80149e6:	42bb      	cmp	r3, r7
 80149e8:	d3e0      	bcc.n	80149ac <__gethex+0x22c>
 80149ea:	4618      	mov	r0, r3
 80149ec:	9901      	ldr	r1, [sp, #4]
 80149ee:	9307      	str	r3, [sp, #28]
 80149f0:	4652      	mov	r2, sl
 80149f2:	f001 fa84 	bl	8015efe <strncmp>
 80149f6:	9b07      	ldr	r3, [sp, #28]
 80149f8:	2800      	cmp	r0, #0
 80149fa:	d1d7      	bne.n	80149ac <__gethex+0x22c>
 80149fc:	461e      	mov	r6, r3
 80149fe:	e78b      	b.n	8014918 <__gethex+0x198>
 8014a00:	f04f 0a03 	mov.w	sl, #3
 8014a04:	e7b8      	b.n	8014978 <__gethex+0x1f8>
 8014a06:	da0a      	bge.n	8014a1e <__gethex+0x29e>
 8014a08:	1a37      	subs	r7, r6, r0
 8014a0a:	4621      	mov	r1, r4
 8014a0c:	ee18 0a10 	vmov	r0, s16
 8014a10:	463a      	mov	r2, r7
 8014a12:	f000 fcb1 	bl	8015378 <__lshift>
 8014a16:	1bed      	subs	r5, r5, r7
 8014a18:	4604      	mov	r4, r0
 8014a1a:	f100 0914 	add.w	r9, r0, #20
 8014a1e:	f04f 0a00 	mov.w	sl, #0
 8014a22:	e7ae      	b.n	8014982 <__gethex+0x202>
 8014a24:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014a28:	42a8      	cmp	r0, r5
 8014a2a:	dd72      	ble.n	8014b12 <__gethex+0x392>
 8014a2c:	1b45      	subs	r5, r0, r5
 8014a2e:	42ae      	cmp	r6, r5
 8014a30:	dc36      	bgt.n	8014aa0 <__gethex+0x320>
 8014a32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014a36:	2b02      	cmp	r3, #2
 8014a38:	d02a      	beq.n	8014a90 <__gethex+0x310>
 8014a3a:	2b03      	cmp	r3, #3
 8014a3c:	d02c      	beq.n	8014a98 <__gethex+0x318>
 8014a3e:	2b01      	cmp	r3, #1
 8014a40:	d11c      	bne.n	8014a7c <__gethex+0x2fc>
 8014a42:	42ae      	cmp	r6, r5
 8014a44:	d11a      	bne.n	8014a7c <__gethex+0x2fc>
 8014a46:	2e01      	cmp	r6, #1
 8014a48:	d112      	bne.n	8014a70 <__gethex+0x2f0>
 8014a4a:	9a04      	ldr	r2, [sp, #16]
 8014a4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014a50:	6013      	str	r3, [r2, #0]
 8014a52:	2301      	movs	r3, #1
 8014a54:	6123      	str	r3, [r4, #16]
 8014a56:	f8c9 3000 	str.w	r3, [r9]
 8014a5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014a5c:	2762      	movs	r7, #98	; 0x62
 8014a5e:	601c      	str	r4, [r3, #0]
 8014a60:	e723      	b.n	80148aa <__gethex+0x12a>
 8014a62:	bf00      	nop
 8014a64:	08016e24 	.word	0x08016e24
 8014a68:	08016d48 	.word	0x08016d48
 8014a6c:	08016dbc 	.word	0x08016dbc
 8014a70:	1e71      	subs	r1, r6, #1
 8014a72:	4620      	mov	r0, r4
 8014a74:	f000 fec1 	bl	80157fa <__any_on>
 8014a78:	2800      	cmp	r0, #0
 8014a7a:	d1e6      	bne.n	8014a4a <__gethex+0x2ca>
 8014a7c:	ee18 0a10 	vmov	r0, s16
 8014a80:	4621      	mov	r1, r4
 8014a82:	f000 fa5d 	bl	8014f40 <_Bfree>
 8014a86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014a88:	2300      	movs	r3, #0
 8014a8a:	6013      	str	r3, [r2, #0]
 8014a8c:	2750      	movs	r7, #80	; 0x50
 8014a8e:	e70c      	b.n	80148aa <__gethex+0x12a>
 8014a90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d1f2      	bne.n	8014a7c <__gethex+0x2fc>
 8014a96:	e7d8      	b.n	8014a4a <__gethex+0x2ca>
 8014a98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d1d5      	bne.n	8014a4a <__gethex+0x2ca>
 8014a9e:	e7ed      	b.n	8014a7c <__gethex+0x2fc>
 8014aa0:	1e6f      	subs	r7, r5, #1
 8014aa2:	f1ba 0f00 	cmp.w	sl, #0
 8014aa6:	d131      	bne.n	8014b0c <__gethex+0x38c>
 8014aa8:	b127      	cbz	r7, 8014ab4 <__gethex+0x334>
 8014aaa:	4639      	mov	r1, r7
 8014aac:	4620      	mov	r0, r4
 8014aae:	f000 fea4 	bl	80157fa <__any_on>
 8014ab2:	4682      	mov	sl, r0
 8014ab4:	117b      	asrs	r3, r7, #5
 8014ab6:	2101      	movs	r1, #1
 8014ab8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8014abc:	f007 071f 	and.w	r7, r7, #31
 8014ac0:	fa01 f707 	lsl.w	r7, r1, r7
 8014ac4:	421f      	tst	r7, r3
 8014ac6:	4629      	mov	r1, r5
 8014ac8:	4620      	mov	r0, r4
 8014aca:	bf18      	it	ne
 8014acc:	f04a 0a02 	orrne.w	sl, sl, #2
 8014ad0:	1b76      	subs	r6, r6, r5
 8014ad2:	f7ff fdee 	bl	80146b2 <rshift>
 8014ad6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014ada:	2702      	movs	r7, #2
 8014adc:	f1ba 0f00 	cmp.w	sl, #0
 8014ae0:	d048      	beq.n	8014b74 <__gethex+0x3f4>
 8014ae2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014ae6:	2b02      	cmp	r3, #2
 8014ae8:	d015      	beq.n	8014b16 <__gethex+0x396>
 8014aea:	2b03      	cmp	r3, #3
 8014aec:	d017      	beq.n	8014b1e <__gethex+0x39e>
 8014aee:	2b01      	cmp	r3, #1
 8014af0:	d109      	bne.n	8014b06 <__gethex+0x386>
 8014af2:	f01a 0f02 	tst.w	sl, #2
 8014af6:	d006      	beq.n	8014b06 <__gethex+0x386>
 8014af8:	f8d9 0000 	ldr.w	r0, [r9]
 8014afc:	ea4a 0a00 	orr.w	sl, sl, r0
 8014b00:	f01a 0f01 	tst.w	sl, #1
 8014b04:	d10e      	bne.n	8014b24 <__gethex+0x3a4>
 8014b06:	f047 0710 	orr.w	r7, r7, #16
 8014b0a:	e033      	b.n	8014b74 <__gethex+0x3f4>
 8014b0c:	f04f 0a01 	mov.w	sl, #1
 8014b10:	e7d0      	b.n	8014ab4 <__gethex+0x334>
 8014b12:	2701      	movs	r7, #1
 8014b14:	e7e2      	b.n	8014adc <__gethex+0x35c>
 8014b16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b18:	f1c3 0301 	rsb	r3, r3, #1
 8014b1c:	9315      	str	r3, [sp, #84]	; 0x54
 8014b1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d0f0      	beq.n	8014b06 <__gethex+0x386>
 8014b24:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014b28:	f104 0314 	add.w	r3, r4, #20
 8014b2c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014b30:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014b34:	f04f 0c00 	mov.w	ip, #0
 8014b38:	4618      	mov	r0, r3
 8014b3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b3e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014b42:	d01c      	beq.n	8014b7e <__gethex+0x3fe>
 8014b44:	3201      	adds	r2, #1
 8014b46:	6002      	str	r2, [r0, #0]
 8014b48:	2f02      	cmp	r7, #2
 8014b4a:	f104 0314 	add.w	r3, r4, #20
 8014b4e:	d13f      	bne.n	8014bd0 <__gethex+0x450>
 8014b50:	f8d8 2000 	ldr.w	r2, [r8]
 8014b54:	3a01      	subs	r2, #1
 8014b56:	42b2      	cmp	r2, r6
 8014b58:	d10a      	bne.n	8014b70 <__gethex+0x3f0>
 8014b5a:	1171      	asrs	r1, r6, #5
 8014b5c:	2201      	movs	r2, #1
 8014b5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014b62:	f006 061f 	and.w	r6, r6, #31
 8014b66:	fa02 f606 	lsl.w	r6, r2, r6
 8014b6a:	421e      	tst	r6, r3
 8014b6c:	bf18      	it	ne
 8014b6e:	4617      	movne	r7, r2
 8014b70:	f047 0720 	orr.w	r7, r7, #32
 8014b74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014b76:	601c      	str	r4, [r3, #0]
 8014b78:	9b04      	ldr	r3, [sp, #16]
 8014b7a:	601d      	str	r5, [r3, #0]
 8014b7c:	e695      	b.n	80148aa <__gethex+0x12a>
 8014b7e:	4299      	cmp	r1, r3
 8014b80:	f843 cc04 	str.w	ip, [r3, #-4]
 8014b84:	d8d8      	bhi.n	8014b38 <__gethex+0x3b8>
 8014b86:	68a3      	ldr	r3, [r4, #8]
 8014b88:	459b      	cmp	fp, r3
 8014b8a:	db19      	blt.n	8014bc0 <__gethex+0x440>
 8014b8c:	6861      	ldr	r1, [r4, #4]
 8014b8e:	ee18 0a10 	vmov	r0, s16
 8014b92:	3101      	adds	r1, #1
 8014b94:	f000 f994 	bl	8014ec0 <_Balloc>
 8014b98:	4681      	mov	r9, r0
 8014b9a:	b918      	cbnz	r0, 8014ba4 <__gethex+0x424>
 8014b9c:	4b1a      	ldr	r3, [pc, #104]	; (8014c08 <__gethex+0x488>)
 8014b9e:	4602      	mov	r2, r0
 8014ba0:	2184      	movs	r1, #132	; 0x84
 8014ba2:	e6a8      	b.n	80148f6 <__gethex+0x176>
 8014ba4:	6922      	ldr	r2, [r4, #16]
 8014ba6:	3202      	adds	r2, #2
 8014ba8:	f104 010c 	add.w	r1, r4, #12
 8014bac:	0092      	lsls	r2, r2, #2
 8014bae:	300c      	adds	r0, #12
 8014bb0:	f000 f96c 	bl	8014e8c <memcpy>
 8014bb4:	4621      	mov	r1, r4
 8014bb6:	ee18 0a10 	vmov	r0, s16
 8014bba:	f000 f9c1 	bl	8014f40 <_Bfree>
 8014bbe:	464c      	mov	r4, r9
 8014bc0:	6923      	ldr	r3, [r4, #16]
 8014bc2:	1c5a      	adds	r2, r3, #1
 8014bc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014bc8:	6122      	str	r2, [r4, #16]
 8014bca:	2201      	movs	r2, #1
 8014bcc:	615a      	str	r2, [r3, #20]
 8014bce:	e7bb      	b.n	8014b48 <__gethex+0x3c8>
 8014bd0:	6922      	ldr	r2, [r4, #16]
 8014bd2:	455a      	cmp	r2, fp
 8014bd4:	dd0b      	ble.n	8014bee <__gethex+0x46e>
 8014bd6:	2101      	movs	r1, #1
 8014bd8:	4620      	mov	r0, r4
 8014bda:	f7ff fd6a 	bl	80146b2 <rshift>
 8014bde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014be2:	3501      	adds	r5, #1
 8014be4:	42ab      	cmp	r3, r5
 8014be6:	f6ff aed0 	blt.w	801498a <__gethex+0x20a>
 8014bea:	2701      	movs	r7, #1
 8014bec:	e7c0      	b.n	8014b70 <__gethex+0x3f0>
 8014bee:	f016 061f 	ands.w	r6, r6, #31
 8014bf2:	d0fa      	beq.n	8014bea <__gethex+0x46a>
 8014bf4:	4453      	add	r3, sl
 8014bf6:	f1c6 0620 	rsb	r6, r6, #32
 8014bfa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014bfe:	f000 fa51 	bl	80150a4 <__hi0bits>
 8014c02:	42b0      	cmp	r0, r6
 8014c04:	dbe7      	blt.n	8014bd6 <__gethex+0x456>
 8014c06:	e7f0      	b.n	8014bea <__gethex+0x46a>
 8014c08:	08016d48 	.word	0x08016d48

08014c0c <L_shift>:
 8014c0c:	f1c2 0208 	rsb	r2, r2, #8
 8014c10:	0092      	lsls	r2, r2, #2
 8014c12:	b570      	push	{r4, r5, r6, lr}
 8014c14:	f1c2 0620 	rsb	r6, r2, #32
 8014c18:	6843      	ldr	r3, [r0, #4]
 8014c1a:	6804      	ldr	r4, [r0, #0]
 8014c1c:	fa03 f506 	lsl.w	r5, r3, r6
 8014c20:	432c      	orrs	r4, r5
 8014c22:	40d3      	lsrs	r3, r2
 8014c24:	6004      	str	r4, [r0, #0]
 8014c26:	f840 3f04 	str.w	r3, [r0, #4]!
 8014c2a:	4288      	cmp	r0, r1
 8014c2c:	d3f4      	bcc.n	8014c18 <L_shift+0xc>
 8014c2e:	bd70      	pop	{r4, r5, r6, pc}

08014c30 <__match>:
 8014c30:	b530      	push	{r4, r5, lr}
 8014c32:	6803      	ldr	r3, [r0, #0]
 8014c34:	3301      	adds	r3, #1
 8014c36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014c3a:	b914      	cbnz	r4, 8014c42 <__match+0x12>
 8014c3c:	6003      	str	r3, [r0, #0]
 8014c3e:	2001      	movs	r0, #1
 8014c40:	bd30      	pop	{r4, r5, pc}
 8014c42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014c46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014c4a:	2d19      	cmp	r5, #25
 8014c4c:	bf98      	it	ls
 8014c4e:	3220      	addls	r2, #32
 8014c50:	42a2      	cmp	r2, r4
 8014c52:	d0f0      	beq.n	8014c36 <__match+0x6>
 8014c54:	2000      	movs	r0, #0
 8014c56:	e7f3      	b.n	8014c40 <__match+0x10>

08014c58 <__hexnan>:
 8014c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c5c:	680b      	ldr	r3, [r1, #0]
 8014c5e:	115e      	asrs	r6, r3, #5
 8014c60:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014c64:	f013 031f 	ands.w	r3, r3, #31
 8014c68:	b087      	sub	sp, #28
 8014c6a:	bf18      	it	ne
 8014c6c:	3604      	addne	r6, #4
 8014c6e:	2500      	movs	r5, #0
 8014c70:	1f37      	subs	r7, r6, #4
 8014c72:	4690      	mov	r8, r2
 8014c74:	6802      	ldr	r2, [r0, #0]
 8014c76:	9301      	str	r3, [sp, #4]
 8014c78:	4682      	mov	sl, r0
 8014c7a:	f846 5c04 	str.w	r5, [r6, #-4]
 8014c7e:	46b9      	mov	r9, r7
 8014c80:	463c      	mov	r4, r7
 8014c82:	9502      	str	r5, [sp, #8]
 8014c84:	46ab      	mov	fp, r5
 8014c86:	7851      	ldrb	r1, [r2, #1]
 8014c88:	1c53      	adds	r3, r2, #1
 8014c8a:	9303      	str	r3, [sp, #12]
 8014c8c:	b341      	cbz	r1, 8014ce0 <__hexnan+0x88>
 8014c8e:	4608      	mov	r0, r1
 8014c90:	9205      	str	r2, [sp, #20]
 8014c92:	9104      	str	r1, [sp, #16]
 8014c94:	f7ff fd5f 	bl	8014756 <__hexdig_fun>
 8014c98:	2800      	cmp	r0, #0
 8014c9a:	d14f      	bne.n	8014d3c <__hexnan+0xe4>
 8014c9c:	9904      	ldr	r1, [sp, #16]
 8014c9e:	9a05      	ldr	r2, [sp, #20]
 8014ca0:	2920      	cmp	r1, #32
 8014ca2:	d818      	bhi.n	8014cd6 <__hexnan+0x7e>
 8014ca4:	9b02      	ldr	r3, [sp, #8]
 8014ca6:	459b      	cmp	fp, r3
 8014ca8:	dd13      	ble.n	8014cd2 <__hexnan+0x7a>
 8014caa:	454c      	cmp	r4, r9
 8014cac:	d206      	bcs.n	8014cbc <__hexnan+0x64>
 8014cae:	2d07      	cmp	r5, #7
 8014cb0:	dc04      	bgt.n	8014cbc <__hexnan+0x64>
 8014cb2:	462a      	mov	r2, r5
 8014cb4:	4649      	mov	r1, r9
 8014cb6:	4620      	mov	r0, r4
 8014cb8:	f7ff ffa8 	bl	8014c0c <L_shift>
 8014cbc:	4544      	cmp	r4, r8
 8014cbe:	d950      	bls.n	8014d62 <__hexnan+0x10a>
 8014cc0:	2300      	movs	r3, #0
 8014cc2:	f1a4 0904 	sub.w	r9, r4, #4
 8014cc6:	f844 3c04 	str.w	r3, [r4, #-4]
 8014cca:	f8cd b008 	str.w	fp, [sp, #8]
 8014cce:	464c      	mov	r4, r9
 8014cd0:	461d      	mov	r5, r3
 8014cd2:	9a03      	ldr	r2, [sp, #12]
 8014cd4:	e7d7      	b.n	8014c86 <__hexnan+0x2e>
 8014cd6:	2929      	cmp	r1, #41	; 0x29
 8014cd8:	d156      	bne.n	8014d88 <__hexnan+0x130>
 8014cda:	3202      	adds	r2, #2
 8014cdc:	f8ca 2000 	str.w	r2, [sl]
 8014ce0:	f1bb 0f00 	cmp.w	fp, #0
 8014ce4:	d050      	beq.n	8014d88 <__hexnan+0x130>
 8014ce6:	454c      	cmp	r4, r9
 8014ce8:	d206      	bcs.n	8014cf8 <__hexnan+0xa0>
 8014cea:	2d07      	cmp	r5, #7
 8014cec:	dc04      	bgt.n	8014cf8 <__hexnan+0xa0>
 8014cee:	462a      	mov	r2, r5
 8014cf0:	4649      	mov	r1, r9
 8014cf2:	4620      	mov	r0, r4
 8014cf4:	f7ff ff8a 	bl	8014c0c <L_shift>
 8014cf8:	4544      	cmp	r4, r8
 8014cfa:	d934      	bls.n	8014d66 <__hexnan+0x10e>
 8014cfc:	f1a8 0204 	sub.w	r2, r8, #4
 8014d00:	4623      	mov	r3, r4
 8014d02:	f853 1b04 	ldr.w	r1, [r3], #4
 8014d06:	f842 1f04 	str.w	r1, [r2, #4]!
 8014d0a:	429f      	cmp	r7, r3
 8014d0c:	d2f9      	bcs.n	8014d02 <__hexnan+0xaa>
 8014d0e:	1b3b      	subs	r3, r7, r4
 8014d10:	f023 0303 	bic.w	r3, r3, #3
 8014d14:	3304      	adds	r3, #4
 8014d16:	3401      	adds	r4, #1
 8014d18:	3e03      	subs	r6, #3
 8014d1a:	42b4      	cmp	r4, r6
 8014d1c:	bf88      	it	hi
 8014d1e:	2304      	movhi	r3, #4
 8014d20:	4443      	add	r3, r8
 8014d22:	2200      	movs	r2, #0
 8014d24:	f843 2b04 	str.w	r2, [r3], #4
 8014d28:	429f      	cmp	r7, r3
 8014d2a:	d2fb      	bcs.n	8014d24 <__hexnan+0xcc>
 8014d2c:	683b      	ldr	r3, [r7, #0]
 8014d2e:	b91b      	cbnz	r3, 8014d38 <__hexnan+0xe0>
 8014d30:	4547      	cmp	r7, r8
 8014d32:	d127      	bne.n	8014d84 <__hexnan+0x12c>
 8014d34:	2301      	movs	r3, #1
 8014d36:	603b      	str	r3, [r7, #0]
 8014d38:	2005      	movs	r0, #5
 8014d3a:	e026      	b.n	8014d8a <__hexnan+0x132>
 8014d3c:	3501      	adds	r5, #1
 8014d3e:	2d08      	cmp	r5, #8
 8014d40:	f10b 0b01 	add.w	fp, fp, #1
 8014d44:	dd06      	ble.n	8014d54 <__hexnan+0xfc>
 8014d46:	4544      	cmp	r4, r8
 8014d48:	d9c3      	bls.n	8014cd2 <__hexnan+0x7a>
 8014d4a:	2300      	movs	r3, #0
 8014d4c:	f844 3c04 	str.w	r3, [r4, #-4]
 8014d50:	2501      	movs	r5, #1
 8014d52:	3c04      	subs	r4, #4
 8014d54:	6822      	ldr	r2, [r4, #0]
 8014d56:	f000 000f 	and.w	r0, r0, #15
 8014d5a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8014d5e:	6022      	str	r2, [r4, #0]
 8014d60:	e7b7      	b.n	8014cd2 <__hexnan+0x7a>
 8014d62:	2508      	movs	r5, #8
 8014d64:	e7b5      	b.n	8014cd2 <__hexnan+0x7a>
 8014d66:	9b01      	ldr	r3, [sp, #4]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d0df      	beq.n	8014d2c <__hexnan+0xd4>
 8014d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8014d70:	f1c3 0320 	rsb	r3, r3, #32
 8014d74:	fa22 f303 	lsr.w	r3, r2, r3
 8014d78:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014d7c:	401a      	ands	r2, r3
 8014d7e:	f846 2c04 	str.w	r2, [r6, #-4]
 8014d82:	e7d3      	b.n	8014d2c <__hexnan+0xd4>
 8014d84:	3f04      	subs	r7, #4
 8014d86:	e7d1      	b.n	8014d2c <__hexnan+0xd4>
 8014d88:	2004      	movs	r0, #4
 8014d8a:	b007      	add	sp, #28
 8014d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014d90 <_localeconv_r>:
 8014d90:	4800      	ldr	r0, [pc, #0]	; (8014d94 <_localeconv_r+0x4>)
 8014d92:	4770      	bx	lr
 8014d94:	20000164 	.word	0x20000164

08014d98 <__retarget_lock_init_recursive>:
 8014d98:	4770      	bx	lr

08014d9a <__retarget_lock_acquire_recursive>:
 8014d9a:	4770      	bx	lr

08014d9c <__retarget_lock_release_recursive>:
 8014d9c:	4770      	bx	lr

08014d9e <__swhatbuf_r>:
 8014d9e:	b570      	push	{r4, r5, r6, lr}
 8014da0:	460e      	mov	r6, r1
 8014da2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014da6:	2900      	cmp	r1, #0
 8014da8:	b096      	sub	sp, #88	; 0x58
 8014daa:	4614      	mov	r4, r2
 8014dac:	461d      	mov	r5, r3
 8014dae:	da08      	bge.n	8014dc2 <__swhatbuf_r+0x24>
 8014db0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014db4:	2200      	movs	r2, #0
 8014db6:	602a      	str	r2, [r5, #0]
 8014db8:	061a      	lsls	r2, r3, #24
 8014dba:	d410      	bmi.n	8014dde <__swhatbuf_r+0x40>
 8014dbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014dc0:	e00e      	b.n	8014de0 <__swhatbuf_r+0x42>
 8014dc2:	466a      	mov	r2, sp
 8014dc4:	f001 f90e 	bl	8015fe4 <_fstat_r>
 8014dc8:	2800      	cmp	r0, #0
 8014dca:	dbf1      	blt.n	8014db0 <__swhatbuf_r+0x12>
 8014dcc:	9a01      	ldr	r2, [sp, #4]
 8014dce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014dd2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014dd6:	425a      	negs	r2, r3
 8014dd8:	415a      	adcs	r2, r3
 8014dda:	602a      	str	r2, [r5, #0]
 8014ddc:	e7ee      	b.n	8014dbc <__swhatbuf_r+0x1e>
 8014dde:	2340      	movs	r3, #64	; 0x40
 8014de0:	2000      	movs	r0, #0
 8014de2:	6023      	str	r3, [r4, #0]
 8014de4:	b016      	add	sp, #88	; 0x58
 8014de6:	bd70      	pop	{r4, r5, r6, pc}

08014de8 <__smakebuf_r>:
 8014de8:	898b      	ldrh	r3, [r1, #12]
 8014dea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014dec:	079d      	lsls	r5, r3, #30
 8014dee:	4606      	mov	r6, r0
 8014df0:	460c      	mov	r4, r1
 8014df2:	d507      	bpl.n	8014e04 <__smakebuf_r+0x1c>
 8014df4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014df8:	6023      	str	r3, [r4, #0]
 8014dfa:	6123      	str	r3, [r4, #16]
 8014dfc:	2301      	movs	r3, #1
 8014dfe:	6163      	str	r3, [r4, #20]
 8014e00:	b002      	add	sp, #8
 8014e02:	bd70      	pop	{r4, r5, r6, pc}
 8014e04:	ab01      	add	r3, sp, #4
 8014e06:	466a      	mov	r2, sp
 8014e08:	f7ff ffc9 	bl	8014d9e <__swhatbuf_r>
 8014e0c:	9900      	ldr	r1, [sp, #0]
 8014e0e:	4605      	mov	r5, r0
 8014e10:	4630      	mov	r0, r6
 8014e12:	f7fc fdd5 	bl	80119c0 <_malloc_r>
 8014e16:	b948      	cbnz	r0, 8014e2c <__smakebuf_r+0x44>
 8014e18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e1c:	059a      	lsls	r2, r3, #22
 8014e1e:	d4ef      	bmi.n	8014e00 <__smakebuf_r+0x18>
 8014e20:	f023 0303 	bic.w	r3, r3, #3
 8014e24:	f043 0302 	orr.w	r3, r3, #2
 8014e28:	81a3      	strh	r3, [r4, #12]
 8014e2a:	e7e3      	b.n	8014df4 <__smakebuf_r+0xc>
 8014e2c:	4b0d      	ldr	r3, [pc, #52]	; (8014e64 <__smakebuf_r+0x7c>)
 8014e2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8014e30:	89a3      	ldrh	r3, [r4, #12]
 8014e32:	6020      	str	r0, [r4, #0]
 8014e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014e38:	81a3      	strh	r3, [r4, #12]
 8014e3a:	9b00      	ldr	r3, [sp, #0]
 8014e3c:	6163      	str	r3, [r4, #20]
 8014e3e:	9b01      	ldr	r3, [sp, #4]
 8014e40:	6120      	str	r0, [r4, #16]
 8014e42:	b15b      	cbz	r3, 8014e5c <__smakebuf_r+0x74>
 8014e44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014e48:	4630      	mov	r0, r6
 8014e4a:	f001 f8dd 	bl	8016008 <_isatty_r>
 8014e4e:	b128      	cbz	r0, 8014e5c <__smakebuf_r+0x74>
 8014e50:	89a3      	ldrh	r3, [r4, #12]
 8014e52:	f023 0303 	bic.w	r3, r3, #3
 8014e56:	f043 0301 	orr.w	r3, r3, #1
 8014e5a:	81a3      	strh	r3, [r4, #12]
 8014e5c:	89a0      	ldrh	r0, [r4, #12]
 8014e5e:	4305      	orrs	r5, r0
 8014e60:	81a5      	strh	r5, [r4, #12]
 8014e62:	e7cd      	b.n	8014e00 <__smakebuf_r+0x18>
 8014e64:	08014511 	.word	0x08014511

08014e68 <__ascii_mbtowc>:
 8014e68:	b082      	sub	sp, #8
 8014e6a:	b901      	cbnz	r1, 8014e6e <__ascii_mbtowc+0x6>
 8014e6c:	a901      	add	r1, sp, #4
 8014e6e:	b142      	cbz	r2, 8014e82 <__ascii_mbtowc+0x1a>
 8014e70:	b14b      	cbz	r3, 8014e86 <__ascii_mbtowc+0x1e>
 8014e72:	7813      	ldrb	r3, [r2, #0]
 8014e74:	600b      	str	r3, [r1, #0]
 8014e76:	7812      	ldrb	r2, [r2, #0]
 8014e78:	1e10      	subs	r0, r2, #0
 8014e7a:	bf18      	it	ne
 8014e7c:	2001      	movne	r0, #1
 8014e7e:	b002      	add	sp, #8
 8014e80:	4770      	bx	lr
 8014e82:	4610      	mov	r0, r2
 8014e84:	e7fb      	b.n	8014e7e <__ascii_mbtowc+0x16>
 8014e86:	f06f 0001 	mvn.w	r0, #1
 8014e8a:	e7f8      	b.n	8014e7e <__ascii_mbtowc+0x16>

08014e8c <memcpy>:
 8014e8c:	440a      	add	r2, r1
 8014e8e:	4291      	cmp	r1, r2
 8014e90:	f100 33ff 	add.w	r3, r0, #4294967295
 8014e94:	d100      	bne.n	8014e98 <memcpy+0xc>
 8014e96:	4770      	bx	lr
 8014e98:	b510      	push	{r4, lr}
 8014e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014e9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014ea2:	4291      	cmp	r1, r2
 8014ea4:	d1f9      	bne.n	8014e9a <memcpy+0xe>
 8014ea6:	bd10      	pop	{r4, pc}

08014ea8 <__malloc_lock>:
 8014ea8:	4801      	ldr	r0, [pc, #4]	; (8014eb0 <__malloc_lock+0x8>)
 8014eaa:	f7ff bf76 	b.w	8014d9a <__retarget_lock_acquire_recursive>
 8014eae:	bf00      	nop
 8014eb0:	20005810 	.word	0x20005810

08014eb4 <__malloc_unlock>:
 8014eb4:	4801      	ldr	r0, [pc, #4]	; (8014ebc <__malloc_unlock+0x8>)
 8014eb6:	f7ff bf71 	b.w	8014d9c <__retarget_lock_release_recursive>
 8014eba:	bf00      	nop
 8014ebc:	20005810 	.word	0x20005810

08014ec0 <_Balloc>:
 8014ec0:	b570      	push	{r4, r5, r6, lr}
 8014ec2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014ec4:	4604      	mov	r4, r0
 8014ec6:	460d      	mov	r5, r1
 8014ec8:	b976      	cbnz	r6, 8014ee8 <_Balloc+0x28>
 8014eca:	2010      	movs	r0, #16
 8014ecc:	f7fc fcfc 	bl	80118c8 <malloc>
 8014ed0:	4602      	mov	r2, r0
 8014ed2:	6260      	str	r0, [r4, #36]	; 0x24
 8014ed4:	b920      	cbnz	r0, 8014ee0 <_Balloc+0x20>
 8014ed6:	4b18      	ldr	r3, [pc, #96]	; (8014f38 <_Balloc+0x78>)
 8014ed8:	4818      	ldr	r0, [pc, #96]	; (8014f3c <_Balloc+0x7c>)
 8014eda:	2166      	movs	r1, #102	; 0x66
 8014edc:	f001 f842 	bl	8015f64 <__assert_func>
 8014ee0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014ee4:	6006      	str	r6, [r0, #0]
 8014ee6:	60c6      	str	r6, [r0, #12]
 8014ee8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014eea:	68f3      	ldr	r3, [r6, #12]
 8014eec:	b183      	cbz	r3, 8014f10 <_Balloc+0x50>
 8014eee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014ef0:	68db      	ldr	r3, [r3, #12]
 8014ef2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014ef6:	b9b8      	cbnz	r0, 8014f28 <_Balloc+0x68>
 8014ef8:	2101      	movs	r1, #1
 8014efa:	fa01 f605 	lsl.w	r6, r1, r5
 8014efe:	1d72      	adds	r2, r6, #5
 8014f00:	0092      	lsls	r2, r2, #2
 8014f02:	4620      	mov	r0, r4
 8014f04:	f000 fc9a 	bl	801583c <_calloc_r>
 8014f08:	b160      	cbz	r0, 8014f24 <_Balloc+0x64>
 8014f0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014f0e:	e00e      	b.n	8014f2e <_Balloc+0x6e>
 8014f10:	2221      	movs	r2, #33	; 0x21
 8014f12:	2104      	movs	r1, #4
 8014f14:	4620      	mov	r0, r4
 8014f16:	f000 fc91 	bl	801583c <_calloc_r>
 8014f1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014f1c:	60f0      	str	r0, [r6, #12]
 8014f1e:	68db      	ldr	r3, [r3, #12]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d1e4      	bne.n	8014eee <_Balloc+0x2e>
 8014f24:	2000      	movs	r0, #0
 8014f26:	bd70      	pop	{r4, r5, r6, pc}
 8014f28:	6802      	ldr	r2, [r0, #0]
 8014f2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014f2e:	2300      	movs	r3, #0
 8014f30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014f34:	e7f7      	b.n	8014f26 <_Balloc+0x66>
 8014f36:	bf00      	nop
 8014f38:	08016cd6 	.word	0x08016cd6
 8014f3c:	08016e38 	.word	0x08016e38

08014f40 <_Bfree>:
 8014f40:	b570      	push	{r4, r5, r6, lr}
 8014f42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014f44:	4605      	mov	r5, r0
 8014f46:	460c      	mov	r4, r1
 8014f48:	b976      	cbnz	r6, 8014f68 <_Bfree+0x28>
 8014f4a:	2010      	movs	r0, #16
 8014f4c:	f7fc fcbc 	bl	80118c8 <malloc>
 8014f50:	4602      	mov	r2, r0
 8014f52:	6268      	str	r0, [r5, #36]	; 0x24
 8014f54:	b920      	cbnz	r0, 8014f60 <_Bfree+0x20>
 8014f56:	4b09      	ldr	r3, [pc, #36]	; (8014f7c <_Bfree+0x3c>)
 8014f58:	4809      	ldr	r0, [pc, #36]	; (8014f80 <_Bfree+0x40>)
 8014f5a:	218a      	movs	r1, #138	; 0x8a
 8014f5c:	f001 f802 	bl	8015f64 <__assert_func>
 8014f60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014f64:	6006      	str	r6, [r0, #0]
 8014f66:	60c6      	str	r6, [r0, #12]
 8014f68:	b13c      	cbz	r4, 8014f7a <_Bfree+0x3a>
 8014f6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014f6c:	6862      	ldr	r2, [r4, #4]
 8014f6e:	68db      	ldr	r3, [r3, #12]
 8014f70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014f74:	6021      	str	r1, [r4, #0]
 8014f76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014f7a:	bd70      	pop	{r4, r5, r6, pc}
 8014f7c:	08016cd6 	.word	0x08016cd6
 8014f80:	08016e38 	.word	0x08016e38

08014f84 <__multadd>:
 8014f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f88:	690d      	ldr	r5, [r1, #16]
 8014f8a:	4607      	mov	r7, r0
 8014f8c:	460c      	mov	r4, r1
 8014f8e:	461e      	mov	r6, r3
 8014f90:	f101 0c14 	add.w	ip, r1, #20
 8014f94:	2000      	movs	r0, #0
 8014f96:	f8dc 3000 	ldr.w	r3, [ip]
 8014f9a:	b299      	uxth	r1, r3
 8014f9c:	fb02 6101 	mla	r1, r2, r1, r6
 8014fa0:	0c1e      	lsrs	r6, r3, #16
 8014fa2:	0c0b      	lsrs	r3, r1, #16
 8014fa4:	fb02 3306 	mla	r3, r2, r6, r3
 8014fa8:	b289      	uxth	r1, r1
 8014faa:	3001      	adds	r0, #1
 8014fac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014fb0:	4285      	cmp	r5, r0
 8014fb2:	f84c 1b04 	str.w	r1, [ip], #4
 8014fb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014fba:	dcec      	bgt.n	8014f96 <__multadd+0x12>
 8014fbc:	b30e      	cbz	r6, 8015002 <__multadd+0x7e>
 8014fbe:	68a3      	ldr	r3, [r4, #8]
 8014fc0:	42ab      	cmp	r3, r5
 8014fc2:	dc19      	bgt.n	8014ff8 <__multadd+0x74>
 8014fc4:	6861      	ldr	r1, [r4, #4]
 8014fc6:	4638      	mov	r0, r7
 8014fc8:	3101      	adds	r1, #1
 8014fca:	f7ff ff79 	bl	8014ec0 <_Balloc>
 8014fce:	4680      	mov	r8, r0
 8014fd0:	b928      	cbnz	r0, 8014fde <__multadd+0x5a>
 8014fd2:	4602      	mov	r2, r0
 8014fd4:	4b0c      	ldr	r3, [pc, #48]	; (8015008 <__multadd+0x84>)
 8014fd6:	480d      	ldr	r0, [pc, #52]	; (801500c <__multadd+0x88>)
 8014fd8:	21b5      	movs	r1, #181	; 0xb5
 8014fda:	f000 ffc3 	bl	8015f64 <__assert_func>
 8014fde:	6922      	ldr	r2, [r4, #16]
 8014fe0:	3202      	adds	r2, #2
 8014fe2:	f104 010c 	add.w	r1, r4, #12
 8014fe6:	0092      	lsls	r2, r2, #2
 8014fe8:	300c      	adds	r0, #12
 8014fea:	f7ff ff4f 	bl	8014e8c <memcpy>
 8014fee:	4621      	mov	r1, r4
 8014ff0:	4638      	mov	r0, r7
 8014ff2:	f7ff ffa5 	bl	8014f40 <_Bfree>
 8014ff6:	4644      	mov	r4, r8
 8014ff8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014ffc:	3501      	adds	r5, #1
 8014ffe:	615e      	str	r6, [r3, #20]
 8015000:	6125      	str	r5, [r4, #16]
 8015002:	4620      	mov	r0, r4
 8015004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015008:	08016d48 	.word	0x08016d48
 801500c:	08016e38 	.word	0x08016e38

08015010 <__s2b>:
 8015010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015014:	460c      	mov	r4, r1
 8015016:	4615      	mov	r5, r2
 8015018:	461f      	mov	r7, r3
 801501a:	2209      	movs	r2, #9
 801501c:	3308      	adds	r3, #8
 801501e:	4606      	mov	r6, r0
 8015020:	fb93 f3f2 	sdiv	r3, r3, r2
 8015024:	2100      	movs	r1, #0
 8015026:	2201      	movs	r2, #1
 8015028:	429a      	cmp	r2, r3
 801502a:	db09      	blt.n	8015040 <__s2b+0x30>
 801502c:	4630      	mov	r0, r6
 801502e:	f7ff ff47 	bl	8014ec0 <_Balloc>
 8015032:	b940      	cbnz	r0, 8015046 <__s2b+0x36>
 8015034:	4602      	mov	r2, r0
 8015036:	4b19      	ldr	r3, [pc, #100]	; (801509c <__s2b+0x8c>)
 8015038:	4819      	ldr	r0, [pc, #100]	; (80150a0 <__s2b+0x90>)
 801503a:	21ce      	movs	r1, #206	; 0xce
 801503c:	f000 ff92 	bl	8015f64 <__assert_func>
 8015040:	0052      	lsls	r2, r2, #1
 8015042:	3101      	adds	r1, #1
 8015044:	e7f0      	b.n	8015028 <__s2b+0x18>
 8015046:	9b08      	ldr	r3, [sp, #32]
 8015048:	6143      	str	r3, [r0, #20]
 801504a:	2d09      	cmp	r5, #9
 801504c:	f04f 0301 	mov.w	r3, #1
 8015050:	6103      	str	r3, [r0, #16]
 8015052:	dd16      	ble.n	8015082 <__s2b+0x72>
 8015054:	f104 0909 	add.w	r9, r4, #9
 8015058:	46c8      	mov	r8, r9
 801505a:	442c      	add	r4, r5
 801505c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015060:	4601      	mov	r1, r0
 8015062:	3b30      	subs	r3, #48	; 0x30
 8015064:	220a      	movs	r2, #10
 8015066:	4630      	mov	r0, r6
 8015068:	f7ff ff8c 	bl	8014f84 <__multadd>
 801506c:	45a0      	cmp	r8, r4
 801506e:	d1f5      	bne.n	801505c <__s2b+0x4c>
 8015070:	f1a5 0408 	sub.w	r4, r5, #8
 8015074:	444c      	add	r4, r9
 8015076:	1b2d      	subs	r5, r5, r4
 8015078:	1963      	adds	r3, r4, r5
 801507a:	42bb      	cmp	r3, r7
 801507c:	db04      	blt.n	8015088 <__s2b+0x78>
 801507e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015082:	340a      	adds	r4, #10
 8015084:	2509      	movs	r5, #9
 8015086:	e7f6      	b.n	8015076 <__s2b+0x66>
 8015088:	f814 3b01 	ldrb.w	r3, [r4], #1
 801508c:	4601      	mov	r1, r0
 801508e:	3b30      	subs	r3, #48	; 0x30
 8015090:	220a      	movs	r2, #10
 8015092:	4630      	mov	r0, r6
 8015094:	f7ff ff76 	bl	8014f84 <__multadd>
 8015098:	e7ee      	b.n	8015078 <__s2b+0x68>
 801509a:	bf00      	nop
 801509c:	08016d48 	.word	0x08016d48
 80150a0:	08016e38 	.word	0x08016e38

080150a4 <__hi0bits>:
 80150a4:	0c03      	lsrs	r3, r0, #16
 80150a6:	041b      	lsls	r3, r3, #16
 80150a8:	b9d3      	cbnz	r3, 80150e0 <__hi0bits+0x3c>
 80150aa:	0400      	lsls	r0, r0, #16
 80150ac:	2310      	movs	r3, #16
 80150ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80150b2:	bf04      	itt	eq
 80150b4:	0200      	lsleq	r0, r0, #8
 80150b6:	3308      	addeq	r3, #8
 80150b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80150bc:	bf04      	itt	eq
 80150be:	0100      	lsleq	r0, r0, #4
 80150c0:	3304      	addeq	r3, #4
 80150c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80150c6:	bf04      	itt	eq
 80150c8:	0080      	lsleq	r0, r0, #2
 80150ca:	3302      	addeq	r3, #2
 80150cc:	2800      	cmp	r0, #0
 80150ce:	db05      	blt.n	80150dc <__hi0bits+0x38>
 80150d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80150d4:	f103 0301 	add.w	r3, r3, #1
 80150d8:	bf08      	it	eq
 80150da:	2320      	moveq	r3, #32
 80150dc:	4618      	mov	r0, r3
 80150de:	4770      	bx	lr
 80150e0:	2300      	movs	r3, #0
 80150e2:	e7e4      	b.n	80150ae <__hi0bits+0xa>

080150e4 <__lo0bits>:
 80150e4:	6803      	ldr	r3, [r0, #0]
 80150e6:	f013 0207 	ands.w	r2, r3, #7
 80150ea:	4601      	mov	r1, r0
 80150ec:	d00b      	beq.n	8015106 <__lo0bits+0x22>
 80150ee:	07da      	lsls	r2, r3, #31
 80150f0:	d423      	bmi.n	801513a <__lo0bits+0x56>
 80150f2:	0798      	lsls	r0, r3, #30
 80150f4:	bf49      	itett	mi
 80150f6:	085b      	lsrmi	r3, r3, #1
 80150f8:	089b      	lsrpl	r3, r3, #2
 80150fa:	2001      	movmi	r0, #1
 80150fc:	600b      	strmi	r3, [r1, #0]
 80150fe:	bf5c      	itt	pl
 8015100:	600b      	strpl	r3, [r1, #0]
 8015102:	2002      	movpl	r0, #2
 8015104:	4770      	bx	lr
 8015106:	b298      	uxth	r0, r3
 8015108:	b9a8      	cbnz	r0, 8015136 <__lo0bits+0x52>
 801510a:	0c1b      	lsrs	r3, r3, #16
 801510c:	2010      	movs	r0, #16
 801510e:	b2da      	uxtb	r2, r3
 8015110:	b90a      	cbnz	r2, 8015116 <__lo0bits+0x32>
 8015112:	3008      	adds	r0, #8
 8015114:	0a1b      	lsrs	r3, r3, #8
 8015116:	071a      	lsls	r2, r3, #28
 8015118:	bf04      	itt	eq
 801511a:	091b      	lsreq	r3, r3, #4
 801511c:	3004      	addeq	r0, #4
 801511e:	079a      	lsls	r2, r3, #30
 8015120:	bf04      	itt	eq
 8015122:	089b      	lsreq	r3, r3, #2
 8015124:	3002      	addeq	r0, #2
 8015126:	07da      	lsls	r2, r3, #31
 8015128:	d403      	bmi.n	8015132 <__lo0bits+0x4e>
 801512a:	085b      	lsrs	r3, r3, #1
 801512c:	f100 0001 	add.w	r0, r0, #1
 8015130:	d005      	beq.n	801513e <__lo0bits+0x5a>
 8015132:	600b      	str	r3, [r1, #0]
 8015134:	4770      	bx	lr
 8015136:	4610      	mov	r0, r2
 8015138:	e7e9      	b.n	801510e <__lo0bits+0x2a>
 801513a:	2000      	movs	r0, #0
 801513c:	4770      	bx	lr
 801513e:	2020      	movs	r0, #32
 8015140:	4770      	bx	lr
	...

08015144 <__i2b>:
 8015144:	b510      	push	{r4, lr}
 8015146:	460c      	mov	r4, r1
 8015148:	2101      	movs	r1, #1
 801514a:	f7ff feb9 	bl	8014ec0 <_Balloc>
 801514e:	4602      	mov	r2, r0
 8015150:	b928      	cbnz	r0, 801515e <__i2b+0x1a>
 8015152:	4b05      	ldr	r3, [pc, #20]	; (8015168 <__i2b+0x24>)
 8015154:	4805      	ldr	r0, [pc, #20]	; (801516c <__i2b+0x28>)
 8015156:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801515a:	f000 ff03 	bl	8015f64 <__assert_func>
 801515e:	2301      	movs	r3, #1
 8015160:	6144      	str	r4, [r0, #20]
 8015162:	6103      	str	r3, [r0, #16]
 8015164:	bd10      	pop	{r4, pc}
 8015166:	bf00      	nop
 8015168:	08016d48 	.word	0x08016d48
 801516c:	08016e38 	.word	0x08016e38

08015170 <__multiply>:
 8015170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015174:	4691      	mov	r9, r2
 8015176:	690a      	ldr	r2, [r1, #16]
 8015178:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801517c:	429a      	cmp	r2, r3
 801517e:	bfb8      	it	lt
 8015180:	460b      	movlt	r3, r1
 8015182:	460c      	mov	r4, r1
 8015184:	bfbc      	itt	lt
 8015186:	464c      	movlt	r4, r9
 8015188:	4699      	movlt	r9, r3
 801518a:	6927      	ldr	r7, [r4, #16]
 801518c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015190:	68a3      	ldr	r3, [r4, #8]
 8015192:	6861      	ldr	r1, [r4, #4]
 8015194:	eb07 060a 	add.w	r6, r7, sl
 8015198:	42b3      	cmp	r3, r6
 801519a:	b085      	sub	sp, #20
 801519c:	bfb8      	it	lt
 801519e:	3101      	addlt	r1, #1
 80151a0:	f7ff fe8e 	bl	8014ec0 <_Balloc>
 80151a4:	b930      	cbnz	r0, 80151b4 <__multiply+0x44>
 80151a6:	4602      	mov	r2, r0
 80151a8:	4b44      	ldr	r3, [pc, #272]	; (80152bc <__multiply+0x14c>)
 80151aa:	4845      	ldr	r0, [pc, #276]	; (80152c0 <__multiply+0x150>)
 80151ac:	f240 115d 	movw	r1, #349	; 0x15d
 80151b0:	f000 fed8 	bl	8015f64 <__assert_func>
 80151b4:	f100 0514 	add.w	r5, r0, #20
 80151b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80151bc:	462b      	mov	r3, r5
 80151be:	2200      	movs	r2, #0
 80151c0:	4543      	cmp	r3, r8
 80151c2:	d321      	bcc.n	8015208 <__multiply+0x98>
 80151c4:	f104 0314 	add.w	r3, r4, #20
 80151c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80151cc:	f109 0314 	add.w	r3, r9, #20
 80151d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80151d4:	9202      	str	r2, [sp, #8]
 80151d6:	1b3a      	subs	r2, r7, r4
 80151d8:	3a15      	subs	r2, #21
 80151da:	f022 0203 	bic.w	r2, r2, #3
 80151de:	3204      	adds	r2, #4
 80151e0:	f104 0115 	add.w	r1, r4, #21
 80151e4:	428f      	cmp	r7, r1
 80151e6:	bf38      	it	cc
 80151e8:	2204      	movcc	r2, #4
 80151ea:	9201      	str	r2, [sp, #4]
 80151ec:	9a02      	ldr	r2, [sp, #8]
 80151ee:	9303      	str	r3, [sp, #12]
 80151f0:	429a      	cmp	r2, r3
 80151f2:	d80c      	bhi.n	801520e <__multiply+0x9e>
 80151f4:	2e00      	cmp	r6, #0
 80151f6:	dd03      	ble.n	8015200 <__multiply+0x90>
 80151f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d05a      	beq.n	80152b6 <__multiply+0x146>
 8015200:	6106      	str	r6, [r0, #16]
 8015202:	b005      	add	sp, #20
 8015204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015208:	f843 2b04 	str.w	r2, [r3], #4
 801520c:	e7d8      	b.n	80151c0 <__multiply+0x50>
 801520e:	f8b3 a000 	ldrh.w	sl, [r3]
 8015212:	f1ba 0f00 	cmp.w	sl, #0
 8015216:	d024      	beq.n	8015262 <__multiply+0xf2>
 8015218:	f104 0e14 	add.w	lr, r4, #20
 801521c:	46a9      	mov	r9, r5
 801521e:	f04f 0c00 	mov.w	ip, #0
 8015222:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015226:	f8d9 1000 	ldr.w	r1, [r9]
 801522a:	fa1f fb82 	uxth.w	fp, r2
 801522e:	b289      	uxth	r1, r1
 8015230:	fb0a 110b 	mla	r1, sl, fp, r1
 8015234:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015238:	f8d9 2000 	ldr.w	r2, [r9]
 801523c:	4461      	add	r1, ip
 801523e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015242:	fb0a c20b 	mla	r2, sl, fp, ip
 8015246:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801524a:	b289      	uxth	r1, r1
 801524c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015250:	4577      	cmp	r7, lr
 8015252:	f849 1b04 	str.w	r1, [r9], #4
 8015256:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801525a:	d8e2      	bhi.n	8015222 <__multiply+0xb2>
 801525c:	9a01      	ldr	r2, [sp, #4]
 801525e:	f845 c002 	str.w	ip, [r5, r2]
 8015262:	9a03      	ldr	r2, [sp, #12]
 8015264:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015268:	3304      	adds	r3, #4
 801526a:	f1b9 0f00 	cmp.w	r9, #0
 801526e:	d020      	beq.n	80152b2 <__multiply+0x142>
 8015270:	6829      	ldr	r1, [r5, #0]
 8015272:	f104 0c14 	add.w	ip, r4, #20
 8015276:	46ae      	mov	lr, r5
 8015278:	f04f 0a00 	mov.w	sl, #0
 801527c:	f8bc b000 	ldrh.w	fp, [ip]
 8015280:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015284:	fb09 220b 	mla	r2, r9, fp, r2
 8015288:	4492      	add	sl, r2
 801528a:	b289      	uxth	r1, r1
 801528c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015290:	f84e 1b04 	str.w	r1, [lr], #4
 8015294:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015298:	f8be 1000 	ldrh.w	r1, [lr]
 801529c:	0c12      	lsrs	r2, r2, #16
 801529e:	fb09 1102 	mla	r1, r9, r2, r1
 80152a2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80152a6:	4567      	cmp	r7, ip
 80152a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80152ac:	d8e6      	bhi.n	801527c <__multiply+0x10c>
 80152ae:	9a01      	ldr	r2, [sp, #4]
 80152b0:	50a9      	str	r1, [r5, r2]
 80152b2:	3504      	adds	r5, #4
 80152b4:	e79a      	b.n	80151ec <__multiply+0x7c>
 80152b6:	3e01      	subs	r6, #1
 80152b8:	e79c      	b.n	80151f4 <__multiply+0x84>
 80152ba:	bf00      	nop
 80152bc:	08016d48 	.word	0x08016d48
 80152c0:	08016e38 	.word	0x08016e38

080152c4 <__pow5mult>:
 80152c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80152c8:	4615      	mov	r5, r2
 80152ca:	f012 0203 	ands.w	r2, r2, #3
 80152ce:	4606      	mov	r6, r0
 80152d0:	460f      	mov	r7, r1
 80152d2:	d007      	beq.n	80152e4 <__pow5mult+0x20>
 80152d4:	4c25      	ldr	r4, [pc, #148]	; (801536c <__pow5mult+0xa8>)
 80152d6:	3a01      	subs	r2, #1
 80152d8:	2300      	movs	r3, #0
 80152da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80152de:	f7ff fe51 	bl	8014f84 <__multadd>
 80152e2:	4607      	mov	r7, r0
 80152e4:	10ad      	asrs	r5, r5, #2
 80152e6:	d03d      	beq.n	8015364 <__pow5mult+0xa0>
 80152e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80152ea:	b97c      	cbnz	r4, 801530c <__pow5mult+0x48>
 80152ec:	2010      	movs	r0, #16
 80152ee:	f7fc faeb 	bl	80118c8 <malloc>
 80152f2:	4602      	mov	r2, r0
 80152f4:	6270      	str	r0, [r6, #36]	; 0x24
 80152f6:	b928      	cbnz	r0, 8015304 <__pow5mult+0x40>
 80152f8:	4b1d      	ldr	r3, [pc, #116]	; (8015370 <__pow5mult+0xac>)
 80152fa:	481e      	ldr	r0, [pc, #120]	; (8015374 <__pow5mult+0xb0>)
 80152fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015300:	f000 fe30 	bl	8015f64 <__assert_func>
 8015304:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015308:	6004      	str	r4, [r0, #0]
 801530a:	60c4      	str	r4, [r0, #12]
 801530c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015310:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015314:	b94c      	cbnz	r4, 801532a <__pow5mult+0x66>
 8015316:	f240 2171 	movw	r1, #625	; 0x271
 801531a:	4630      	mov	r0, r6
 801531c:	f7ff ff12 	bl	8015144 <__i2b>
 8015320:	2300      	movs	r3, #0
 8015322:	f8c8 0008 	str.w	r0, [r8, #8]
 8015326:	4604      	mov	r4, r0
 8015328:	6003      	str	r3, [r0, #0]
 801532a:	f04f 0900 	mov.w	r9, #0
 801532e:	07eb      	lsls	r3, r5, #31
 8015330:	d50a      	bpl.n	8015348 <__pow5mult+0x84>
 8015332:	4639      	mov	r1, r7
 8015334:	4622      	mov	r2, r4
 8015336:	4630      	mov	r0, r6
 8015338:	f7ff ff1a 	bl	8015170 <__multiply>
 801533c:	4639      	mov	r1, r7
 801533e:	4680      	mov	r8, r0
 8015340:	4630      	mov	r0, r6
 8015342:	f7ff fdfd 	bl	8014f40 <_Bfree>
 8015346:	4647      	mov	r7, r8
 8015348:	106d      	asrs	r5, r5, #1
 801534a:	d00b      	beq.n	8015364 <__pow5mult+0xa0>
 801534c:	6820      	ldr	r0, [r4, #0]
 801534e:	b938      	cbnz	r0, 8015360 <__pow5mult+0x9c>
 8015350:	4622      	mov	r2, r4
 8015352:	4621      	mov	r1, r4
 8015354:	4630      	mov	r0, r6
 8015356:	f7ff ff0b 	bl	8015170 <__multiply>
 801535a:	6020      	str	r0, [r4, #0]
 801535c:	f8c0 9000 	str.w	r9, [r0]
 8015360:	4604      	mov	r4, r0
 8015362:	e7e4      	b.n	801532e <__pow5mult+0x6a>
 8015364:	4638      	mov	r0, r7
 8015366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801536a:	bf00      	nop
 801536c:	08016f88 	.word	0x08016f88
 8015370:	08016cd6 	.word	0x08016cd6
 8015374:	08016e38 	.word	0x08016e38

08015378 <__lshift>:
 8015378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801537c:	460c      	mov	r4, r1
 801537e:	6849      	ldr	r1, [r1, #4]
 8015380:	6923      	ldr	r3, [r4, #16]
 8015382:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015386:	68a3      	ldr	r3, [r4, #8]
 8015388:	4607      	mov	r7, r0
 801538a:	4691      	mov	r9, r2
 801538c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015390:	f108 0601 	add.w	r6, r8, #1
 8015394:	42b3      	cmp	r3, r6
 8015396:	db0b      	blt.n	80153b0 <__lshift+0x38>
 8015398:	4638      	mov	r0, r7
 801539a:	f7ff fd91 	bl	8014ec0 <_Balloc>
 801539e:	4605      	mov	r5, r0
 80153a0:	b948      	cbnz	r0, 80153b6 <__lshift+0x3e>
 80153a2:	4602      	mov	r2, r0
 80153a4:	4b2a      	ldr	r3, [pc, #168]	; (8015450 <__lshift+0xd8>)
 80153a6:	482b      	ldr	r0, [pc, #172]	; (8015454 <__lshift+0xdc>)
 80153a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80153ac:	f000 fdda 	bl	8015f64 <__assert_func>
 80153b0:	3101      	adds	r1, #1
 80153b2:	005b      	lsls	r3, r3, #1
 80153b4:	e7ee      	b.n	8015394 <__lshift+0x1c>
 80153b6:	2300      	movs	r3, #0
 80153b8:	f100 0114 	add.w	r1, r0, #20
 80153bc:	f100 0210 	add.w	r2, r0, #16
 80153c0:	4618      	mov	r0, r3
 80153c2:	4553      	cmp	r3, sl
 80153c4:	db37      	blt.n	8015436 <__lshift+0xbe>
 80153c6:	6920      	ldr	r0, [r4, #16]
 80153c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80153cc:	f104 0314 	add.w	r3, r4, #20
 80153d0:	f019 091f 	ands.w	r9, r9, #31
 80153d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80153d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80153dc:	d02f      	beq.n	801543e <__lshift+0xc6>
 80153de:	f1c9 0e20 	rsb	lr, r9, #32
 80153e2:	468a      	mov	sl, r1
 80153e4:	f04f 0c00 	mov.w	ip, #0
 80153e8:	681a      	ldr	r2, [r3, #0]
 80153ea:	fa02 f209 	lsl.w	r2, r2, r9
 80153ee:	ea42 020c 	orr.w	r2, r2, ip
 80153f2:	f84a 2b04 	str.w	r2, [sl], #4
 80153f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80153fa:	4298      	cmp	r0, r3
 80153fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015400:	d8f2      	bhi.n	80153e8 <__lshift+0x70>
 8015402:	1b03      	subs	r3, r0, r4
 8015404:	3b15      	subs	r3, #21
 8015406:	f023 0303 	bic.w	r3, r3, #3
 801540a:	3304      	adds	r3, #4
 801540c:	f104 0215 	add.w	r2, r4, #21
 8015410:	4290      	cmp	r0, r2
 8015412:	bf38      	it	cc
 8015414:	2304      	movcc	r3, #4
 8015416:	f841 c003 	str.w	ip, [r1, r3]
 801541a:	f1bc 0f00 	cmp.w	ip, #0
 801541e:	d001      	beq.n	8015424 <__lshift+0xac>
 8015420:	f108 0602 	add.w	r6, r8, #2
 8015424:	3e01      	subs	r6, #1
 8015426:	4638      	mov	r0, r7
 8015428:	612e      	str	r6, [r5, #16]
 801542a:	4621      	mov	r1, r4
 801542c:	f7ff fd88 	bl	8014f40 <_Bfree>
 8015430:	4628      	mov	r0, r5
 8015432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015436:	f842 0f04 	str.w	r0, [r2, #4]!
 801543a:	3301      	adds	r3, #1
 801543c:	e7c1      	b.n	80153c2 <__lshift+0x4a>
 801543e:	3904      	subs	r1, #4
 8015440:	f853 2b04 	ldr.w	r2, [r3], #4
 8015444:	f841 2f04 	str.w	r2, [r1, #4]!
 8015448:	4298      	cmp	r0, r3
 801544a:	d8f9      	bhi.n	8015440 <__lshift+0xc8>
 801544c:	e7ea      	b.n	8015424 <__lshift+0xac>
 801544e:	bf00      	nop
 8015450:	08016d48 	.word	0x08016d48
 8015454:	08016e38 	.word	0x08016e38

08015458 <__mcmp>:
 8015458:	b530      	push	{r4, r5, lr}
 801545a:	6902      	ldr	r2, [r0, #16]
 801545c:	690c      	ldr	r4, [r1, #16]
 801545e:	1b12      	subs	r2, r2, r4
 8015460:	d10e      	bne.n	8015480 <__mcmp+0x28>
 8015462:	f100 0314 	add.w	r3, r0, #20
 8015466:	3114      	adds	r1, #20
 8015468:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801546c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015470:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015474:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015478:	42a5      	cmp	r5, r4
 801547a:	d003      	beq.n	8015484 <__mcmp+0x2c>
 801547c:	d305      	bcc.n	801548a <__mcmp+0x32>
 801547e:	2201      	movs	r2, #1
 8015480:	4610      	mov	r0, r2
 8015482:	bd30      	pop	{r4, r5, pc}
 8015484:	4283      	cmp	r3, r0
 8015486:	d3f3      	bcc.n	8015470 <__mcmp+0x18>
 8015488:	e7fa      	b.n	8015480 <__mcmp+0x28>
 801548a:	f04f 32ff 	mov.w	r2, #4294967295
 801548e:	e7f7      	b.n	8015480 <__mcmp+0x28>

08015490 <__mdiff>:
 8015490:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015494:	460c      	mov	r4, r1
 8015496:	4606      	mov	r6, r0
 8015498:	4611      	mov	r1, r2
 801549a:	4620      	mov	r0, r4
 801549c:	4690      	mov	r8, r2
 801549e:	f7ff ffdb 	bl	8015458 <__mcmp>
 80154a2:	1e05      	subs	r5, r0, #0
 80154a4:	d110      	bne.n	80154c8 <__mdiff+0x38>
 80154a6:	4629      	mov	r1, r5
 80154a8:	4630      	mov	r0, r6
 80154aa:	f7ff fd09 	bl	8014ec0 <_Balloc>
 80154ae:	b930      	cbnz	r0, 80154be <__mdiff+0x2e>
 80154b0:	4b3a      	ldr	r3, [pc, #232]	; (801559c <__mdiff+0x10c>)
 80154b2:	4602      	mov	r2, r0
 80154b4:	f240 2132 	movw	r1, #562	; 0x232
 80154b8:	4839      	ldr	r0, [pc, #228]	; (80155a0 <__mdiff+0x110>)
 80154ba:	f000 fd53 	bl	8015f64 <__assert_func>
 80154be:	2301      	movs	r3, #1
 80154c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80154c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154c8:	bfa4      	itt	ge
 80154ca:	4643      	movge	r3, r8
 80154cc:	46a0      	movge	r8, r4
 80154ce:	4630      	mov	r0, r6
 80154d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80154d4:	bfa6      	itte	ge
 80154d6:	461c      	movge	r4, r3
 80154d8:	2500      	movge	r5, #0
 80154da:	2501      	movlt	r5, #1
 80154dc:	f7ff fcf0 	bl	8014ec0 <_Balloc>
 80154e0:	b920      	cbnz	r0, 80154ec <__mdiff+0x5c>
 80154e2:	4b2e      	ldr	r3, [pc, #184]	; (801559c <__mdiff+0x10c>)
 80154e4:	4602      	mov	r2, r0
 80154e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80154ea:	e7e5      	b.n	80154b8 <__mdiff+0x28>
 80154ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80154f0:	6926      	ldr	r6, [r4, #16]
 80154f2:	60c5      	str	r5, [r0, #12]
 80154f4:	f104 0914 	add.w	r9, r4, #20
 80154f8:	f108 0514 	add.w	r5, r8, #20
 80154fc:	f100 0e14 	add.w	lr, r0, #20
 8015500:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015504:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015508:	f108 0210 	add.w	r2, r8, #16
 801550c:	46f2      	mov	sl, lr
 801550e:	2100      	movs	r1, #0
 8015510:	f859 3b04 	ldr.w	r3, [r9], #4
 8015514:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015518:	fa1f f883 	uxth.w	r8, r3
 801551c:	fa11 f18b 	uxtah	r1, r1, fp
 8015520:	0c1b      	lsrs	r3, r3, #16
 8015522:	eba1 0808 	sub.w	r8, r1, r8
 8015526:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801552a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801552e:	fa1f f888 	uxth.w	r8, r8
 8015532:	1419      	asrs	r1, r3, #16
 8015534:	454e      	cmp	r6, r9
 8015536:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801553a:	f84a 3b04 	str.w	r3, [sl], #4
 801553e:	d8e7      	bhi.n	8015510 <__mdiff+0x80>
 8015540:	1b33      	subs	r3, r6, r4
 8015542:	3b15      	subs	r3, #21
 8015544:	f023 0303 	bic.w	r3, r3, #3
 8015548:	3304      	adds	r3, #4
 801554a:	3415      	adds	r4, #21
 801554c:	42a6      	cmp	r6, r4
 801554e:	bf38      	it	cc
 8015550:	2304      	movcc	r3, #4
 8015552:	441d      	add	r5, r3
 8015554:	4473      	add	r3, lr
 8015556:	469e      	mov	lr, r3
 8015558:	462e      	mov	r6, r5
 801555a:	4566      	cmp	r6, ip
 801555c:	d30e      	bcc.n	801557c <__mdiff+0xec>
 801555e:	f10c 0203 	add.w	r2, ip, #3
 8015562:	1b52      	subs	r2, r2, r5
 8015564:	f022 0203 	bic.w	r2, r2, #3
 8015568:	3d03      	subs	r5, #3
 801556a:	45ac      	cmp	ip, r5
 801556c:	bf38      	it	cc
 801556e:	2200      	movcc	r2, #0
 8015570:	441a      	add	r2, r3
 8015572:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015576:	b17b      	cbz	r3, 8015598 <__mdiff+0x108>
 8015578:	6107      	str	r7, [r0, #16]
 801557a:	e7a3      	b.n	80154c4 <__mdiff+0x34>
 801557c:	f856 8b04 	ldr.w	r8, [r6], #4
 8015580:	fa11 f288 	uxtah	r2, r1, r8
 8015584:	1414      	asrs	r4, r2, #16
 8015586:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801558a:	b292      	uxth	r2, r2
 801558c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015590:	f84e 2b04 	str.w	r2, [lr], #4
 8015594:	1421      	asrs	r1, r4, #16
 8015596:	e7e0      	b.n	801555a <__mdiff+0xca>
 8015598:	3f01      	subs	r7, #1
 801559a:	e7ea      	b.n	8015572 <__mdiff+0xe2>
 801559c:	08016d48 	.word	0x08016d48
 80155a0:	08016e38 	.word	0x08016e38

080155a4 <__ulp>:
 80155a4:	b082      	sub	sp, #8
 80155a6:	ed8d 0b00 	vstr	d0, [sp]
 80155aa:	9b01      	ldr	r3, [sp, #4]
 80155ac:	4912      	ldr	r1, [pc, #72]	; (80155f8 <__ulp+0x54>)
 80155ae:	4019      	ands	r1, r3
 80155b0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80155b4:	2900      	cmp	r1, #0
 80155b6:	dd05      	ble.n	80155c4 <__ulp+0x20>
 80155b8:	2200      	movs	r2, #0
 80155ba:	460b      	mov	r3, r1
 80155bc:	ec43 2b10 	vmov	d0, r2, r3
 80155c0:	b002      	add	sp, #8
 80155c2:	4770      	bx	lr
 80155c4:	4249      	negs	r1, r1
 80155c6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80155ca:	ea4f 5021 	mov.w	r0, r1, asr #20
 80155ce:	f04f 0200 	mov.w	r2, #0
 80155d2:	f04f 0300 	mov.w	r3, #0
 80155d6:	da04      	bge.n	80155e2 <__ulp+0x3e>
 80155d8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80155dc:	fa41 f300 	asr.w	r3, r1, r0
 80155e0:	e7ec      	b.n	80155bc <__ulp+0x18>
 80155e2:	f1a0 0114 	sub.w	r1, r0, #20
 80155e6:	291e      	cmp	r1, #30
 80155e8:	bfda      	itte	le
 80155ea:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80155ee:	fa20 f101 	lsrle.w	r1, r0, r1
 80155f2:	2101      	movgt	r1, #1
 80155f4:	460a      	mov	r2, r1
 80155f6:	e7e1      	b.n	80155bc <__ulp+0x18>
 80155f8:	7ff00000 	.word	0x7ff00000

080155fc <__b2d>:
 80155fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155fe:	6905      	ldr	r5, [r0, #16]
 8015600:	f100 0714 	add.w	r7, r0, #20
 8015604:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015608:	1f2e      	subs	r6, r5, #4
 801560a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801560e:	4620      	mov	r0, r4
 8015610:	f7ff fd48 	bl	80150a4 <__hi0bits>
 8015614:	f1c0 0320 	rsb	r3, r0, #32
 8015618:	280a      	cmp	r0, #10
 801561a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8015698 <__b2d+0x9c>
 801561e:	600b      	str	r3, [r1, #0]
 8015620:	dc14      	bgt.n	801564c <__b2d+0x50>
 8015622:	f1c0 0e0b 	rsb	lr, r0, #11
 8015626:	fa24 f10e 	lsr.w	r1, r4, lr
 801562a:	42b7      	cmp	r7, r6
 801562c:	ea41 030c 	orr.w	r3, r1, ip
 8015630:	bf34      	ite	cc
 8015632:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015636:	2100      	movcs	r1, #0
 8015638:	3015      	adds	r0, #21
 801563a:	fa04 f000 	lsl.w	r0, r4, r0
 801563e:	fa21 f10e 	lsr.w	r1, r1, lr
 8015642:	ea40 0201 	orr.w	r2, r0, r1
 8015646:	ec43 2b10 	vmov	d0, r2, r3
 801564a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801564c:	42b7      	cmp	r7, r6
 801564e:	bf3a      	itte	cc
 8015650:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015654:	f1a5 0608 	subcc.w	r6, r5, #8
 8015658:	2100      	movcs	r1, #0
 801565a:	380b      	subs	r0, #11
 801565c:	d017      	beq.n	801568e <__b2d+0x92>
 801565e:	f1c0 0c20 	rsb	ip, r0, #32
 8015662:	fa04 f500 	lsl.w	r5, r4, r0
 8015666:	42be      	cmp	r6, r7
 8015668:	fa21 f40c 	lsr.w	r4, r1, ip
 801566c:	ea45 0504 	orr.w	r5, r5, r4
 8015670:	bf8c      	ite	hi
 8015672:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015676:	2400      	movls	r4, #0
 8015678:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801567c:	fa01 f000 	lsl.w	r0, r1, r0
 8015680:	fa24 f40c 	lsr.w	r4, r4, ip
 8015684:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015688:	ea40 0204 	orr.w	r2, r0, r4
 801568c:	e7db      	b.n	8015646 <__b2d+0x4a>
 801568e:	ea44 030c 	orr.w	r3, r4, ip
 8015692:	460a      	mov	r2, r1
 8015694:	e7d7      	b.n	8015646 <__b2d+0x4a>
 8015696:	bf00      	nop
 8015698:	3ff00000 	.word	0x3ff00000

0801569c <__d2b>:
 801569c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80156a0:	4689      	mov	r9, r1
 80156a2:	2101      	movs	r1, #1
 80156a4:	ec57 6b10 	vmov	r6, r7, d0
 80156a8:	4690      	mov	r8, r2
 80156aa:	f7ff fc09 	bl	8014ec0 <_Balloc>
 80156ae:	4604      	mov	r4, r0
 80156b0:	b930      	cbnz	r0, 80156c0 <__d2b+0x24>
 80156b2:	4602      	mov	r2, r0
 80156b4:	4b25      	ldr	r3, [pc, #148]	; (801574c <__d2b+0xb0>)
 80156b6:	4826      	ldr	r0, [pc, #152]	; (8015750 <__d2b+0xb4>)
 80156b8:	f240 310a 	movw	r1, #778	; 0x30a
 80156bc:	f000 fc52 	bl	8015f64 <__assert_func>
 80156c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80156c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80156c8:	bb35      	cbnz	r5, 8015718 <__d2b+0x7c>
 80156ca:	2e00      	cmp	r6, #0
 80156cc:	9301      	str	r3, [sp, #4]
 80156ce:	d028      	beq.n	8015722 <__d2b+0x86>
 80156d0:	4668      	mov	r0, sp
 80156d2:	9600      	str	r6, [sp, #0]
 80156d4:	f7ff fd06 	bl	80150e4 <__lo0bits>
 80156d8:	9900      	ldr	r1, [sp, #0]
 80156da:	b300      	cbz	r0, 801571e <__d2b+0x82>
 80156dc:	9a01      	ldr	r2, [sp, #4]
 80156de:	f1c0 0320 	rsb	r3, r0, #32
 80156e2:	fa02 f303 	lsl.w	r3, r2, r3
 80156e6:	430b      	orrs	r3, r1
 80156e8:	40c2      	lsrs	r2, r0
 80156ea:	6163      	str	r3, [r4, #20]
 80156ec:	9201      	str	r2, [sp, #4]
 80156ee:	9b01      	ldr	r3, [sp, #4]
 80156f0:	61a3      	str	r3, [r4, #24]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	bf14      	ite	ne
 80156f6:	2202      	movne	r2, #2
 80156f8:	2201      	moveq	r2, #1
 80156fa:	6122      	str	r2, [r4, #16]
 80156fc:	b1d5      	cbz	r5, 8015734 <__d2b+0x98>
 80156fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015702:	4405      	add	r5, r0
 8015704:	f8c9 5000 	str.w	r5, [r9]
 8015708:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801570c:	f8c8 0000 	str.w	r0, [r8]
 8015710:	4620      	mov	r0, r4
 8015712:	b003      	add	sp, #12
 8015714:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015718:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801571c:	e7d5      	b.n	80156ca <__d2b+0x2e>
 801571e:	6161      	str	r1, [r4, #20]
 8015720:	e7e5      	b.n	80156ee <__d2b+0x52>
 8015722:	a801      	add	r0, sp, #4
 8015724:	f7ff fcde 	bl	80150e4 <__lo0bits>
 8015728:	9b01      	ldr	r3, [sp, #4]
 801572a:	6163      	str	r3, [r4, #20]
 801572c:	2201      	movs	r2, #1
 801572e:	6122      	str	r2, [r4, #16]
 8015730:	3020      	adds	r0, #32
 8015732:	e7e3      	b.n	80156fc <__d2b+0x60>
 8015734:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015738:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801573c:	f8c9 0000 	str.w	r0, [r9]
 8015740:	6918      	ldr	r0, [r3, #16]
 8015742:	f7ff fcaf 	bl	80150a4 <__hi0bits>
 8015746:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801574a:	e7df      	b.n	801570c <__d2b+0x70>
 801574c:	08016d48 	.word	0x08016d48
 8015750:	08016e38 	.word	0x08016e38

08015754 <__ratio>:
 8015754:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015758:	4688      	mov	r8, r1
 801575a:	4669      	mov	r1, sp
 801575c:	4681      	mov	r9, r0
 801575e:	f7ff ff4d 	bl	80155fc <__b2d>
 8015762:	a901      	add	r1, sp, #4
 8015764:	4640      	mov	r0, r8
 8015766:	ec55 4b10 	vmov	r4, r5, d0
 801576a:	ee10 aa10 	vmov	sl, s0
 801576e:	f7ff ff45 	bl	80155fc <__b2d>
 8015772:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015776:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801577a:	1a59      	subs	r1, r3, r1
 801577c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015780:	1ad3      	subs	r3, r2, r3
 8015782:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8015786:	ec57 6b10 	vmov	r6, r7, d0
 801578a:	2b00      	cmp	r3, #0
 801578c:	bfd6      	itet	le
 801578e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015792:	462a      	movgt	r2, r5
 8015794:	463a      	movle	r2, r7
 8015796:	46ab      	mov	fp, r5
 8015798:	bfd6      	itet	le
 801579a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801579e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80157a2:	ee00 3a90 	vmovle	s1, r3
 80157a6:	ec4b ab17 	vmov	d7, sl, fp
 80157aa:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80157ae:	b003      	add	sp, #12
 80157b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080157b4 <__copybits>:
 80157b4:	3901      	subs	r1, #1
 80157b6:	b570      	push	{r4, r5, r6, lr}
 80157b8:	1149      	asrs	r1, r1, #5
 80157ba:	6914      	ldr	r4, [r2, #16]
 80157bc:	3101      	adds	r1, #1
 80157be:	f102 0314 	add.w	r3, r2, #20
 80157c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80157c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80157ca:	1f05      	subs	r5, r0, #4
 80157cc:	42a3      	cmp	r3, r4
 80157ce:	d30c      	bcc.n	80157ea <__copybits+0x36>
 80157d0:	1aa3      	subs	r3, r4, r2
 80157d2:	3b11      	subs	r3, #17
 80157d4:	f023 0303 	bic.w	r3, r3, #3
 80157d8:	3211      	adds	r2, #17
 80157da:	42a2      	cmp	r2, r4
 80157dc:	bf88      	it	hi
 80157de:	2300      	movhi	r3, #0
 80157e0:	4418      	add	r0, r3
 80157e2:	2300      	movs	r3, #0
 80157e4:	4288      	cmp	r0, r1
 80157e6:	d305      	bcc.n	80157f4 <__copybits+0x40>
 80157e8:	bd70      	pop	{r4, r5, r6, pc}
 80157ea:	f853 6b04 	ldr.w	r6, [r3], #4
 80157ee:	f845 6f04 	str.w	r6, [r5, #4]!
 80157f2:	e7eb      	b.n	80157cc <__copybits+0x18>
 80157f4:	f840 3b04 	str.w	r3, [r0], #4
 80157f8:	e7f4      	b.n	80157e4 <__copybits+0x30>

080157fa <__any_on>:
 80157fa:	f100 0214 	add.w	r2, r0, #20
 80157fe:	6900      	ldr	r0, [r0, #16]
 8015800:	114b      	asrs	r3, r1, #5
 8015802:	4298      	cmp	r0, r3
 8015804:	b510      	push	{r4, lr}
 8015806:	db11      	blt.n	801582c <__any_on+0x32>
 8015808:	dd0a      	ble.n	8015820 <__any_on+0x26>
 801580a:	f011 011f 	ands.w	r1, r1, #31
 801580e:	d007      	beq.n	8015820 <__any_on+0x26>
 8015810:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015814:	fa24 f001 	lsr.w	r0, r4, r1
 8015818:	fa00 f101 	lsl.w	r1, r0, r1
 801581c:	428c      	cmp	r4, r1
 801581e:	d10b      	bne.n	8015838 <__any_on+0x3e>
 8015820:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015824:	4293      	cmp	r3, r2
 8015826:	d803      	bhi.n	8015830 <__any_on+0x36>
 8015828:	2000      	movs	r0, #0
 801582a:	bd10      	pop	{r4, pc}
 801582c:	4603      	mov	r3, r0
 801582e:	e7f7      	b.n	8015820 <__any_on+0x26>
 8015830:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015834:	2900      	cmp	r1, #0
 8015836:	d0f5      	beq.n	8015824 <__any_on+0x2a>
 8015838:	2001      	movs	r0, #1
 801583a:	e7f6      	b.n	801582a <__any_on+0x30>

0801583c <_calloc_r>:
 801583c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801583e:	fba1 2402 	umull	r2, r4, r1, r2
 8015842:	b94c      	cbnz	r4, 8015858 <_calloc_r+0x1c>
 8015844:	4611      	mov	r1, r2
 8015846:	9201      	str	r2, [sp, #4]
 8015848:	f7fc f8ba 	bl	80119c0 <_malloc_r>
 801584c:	9a01      	ldr	r2, [sp, #4]
 801584e:	4605      	mov	r5, r0
 8015850:	b930      	cbnz	r0, 8015860 <_calloc_r+0x24>
 8015852:	4628      	mov	r0, r5
 8015854:	b003      	add	sp, #12
 8015856:	bd30      	pop	{r4, r5, pc}
 8015858:	220c      	movs	r2, #12
 801585a:	6002      	str	r2, [r0, #0]
 801585c:	2500      	movs	r5, #0
 801585e:	e7f8      	b.n	8015852 <_calloc_r+0x16>
 8015860:	4621      	mov	r1, r4
 8015862:	f7fc f839 	bl	80118d8 <memset>
 8015866:	e7f4      	b.n	8015852 <_calloc_r+0x16>

08015868 <__ssputs_r>:
 8015868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801586c:	688e      	ldr	r6, [r1, #8]
 801586e:	429e      	cmp	r6, r3
 8015870:	4682      	mov	sl, r0
 8015872:	460c      	mov	r4, r1
 8015874:	4690      	mov	r8, r2
 8015876:	461f      	mov	r7, r3
 8015878:	d838      	bhi.n	80158ec <__ssputs_r+0x84>
 801587a:	898a      	ldrh	r2, [r1, #12]
 801587c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015880:	d032      	beq.n	80158e8 <__ssputs_r+0x80>
 8015882:	6825      	ldr	r5, [r4, #0]
 8015884:	6909      	ldr	r1, [r1, #16]
 8015886:	eba5 0901 	sub.w	r9, r5, r1
 801588a:	6965      	ldr	r5, [r4, #20]
 801588c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015890:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015894:	3301      	adds	r3, #1
 8015896:	444b      	add	r3, r9
 8015898:	106d      	asrs	r5, r5, #1
 801589a:	429d      	cmp	r5, r3
 801589c:	bf38      	it	cc
 801589e:	461d      	movcc	r5, r3
 80158a0:	0553      	lsls	r3, r2, #21
 80158a2:	d531      	bpl.n	8015908 <__ssputs_r+0xa0>
 80158a4:	4629      	mov	r1, r5
 80158a6:	f7fc f88b 	bl	80119c0 <_malloc_r>
 80158aa:	4606      	mov	r6, r0
 80158ac:	b950      	cbnz	r0, 80158c4 <__ssputs_r+0x5c>
 80158ae:	230c      	movs	r3, #12
 80158b0:	f8ca 3000 	str.w	r3, [sl]
 80158b4:	89a3      	ldrh	r3, [r4, #12]
 80158b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80158ba:	81a3      	strh	r3, [r4, #12]
 80158bc:	f04f 30ff 	mov.w	r0, #4294967295
 80158c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158c4:	6921      	ldr	r1, [r4, #16]
 80158c6:	464a      	mov	r2, r9
 80158c8:	f7ff fae0 	bl	8014e8c <memcpy>
 80158cc:	89a3      	ldrh	r3, [r4, #12]
 80158ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80158d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80158d6:	81a3      	strh	r3, [r4, #12]
 80158d8:	6126      	str	r6, [r4, #16]
 80158da:	6165      	str	r5, [r4, #20]
 80158dc:	444e      	add	r6, r9
 80158de:	eba5 0509 	sub.w	r5, r5, r9
 80158e2:	6026      	str	r6, [r4, #0]
 80158e4:	60a5      	str	r5, [r4, #8]
 80158e6:	463e      	mov	r6, r7
 80158e8:	42be      	cmp	r6, r7
 80158ea:	d900      	bls.n	80158ee <__ssputs_r+0x86>
 80158ec:	463e      	mov	r6, r7
 80158ee:	6820      	ldr	r0, [r4, #0]
 80158f0:	4632      	mov	r2, r6
 80158f2:	4641      	mov	r1, r8
 80158f4:	f000 fbaa 	bl	801604c <memmove>
 80158f8:	68a3      	ldr	r3, [r4, #8]
 80158fa:	1b9b      	subs	r3, r3, r6
 80158fc:	60a3      	str	r3, [r4, #8]
 80158fe:	6823      	ldr	r3, [r4, #0]
 8015900:	4433      	add	r3, r6
 8015902:	6023      	str	r3, [r4, #0]
 8015904:	2000      	movs	r0, #0
 8015906:	e7db      	b.n	80158c0 <__ssputs_r+0x58>
 8015908:	462a      	mov	r2, r5
 801590a:	f000 fbb9 	bl	8016080 <_realloc_r>
 801590e:	4606      	mov	r6, r0
 8015910:	2800      	cmp	r0, #0
 8015912:	d1e1      	bne.n	80158d8 <__ssputs_r+0x70>
 8015914:	6921      	ldr	r1, [r4, #16]
 8015916:	4650      	mov	r0, sl
 8015918:	f7fb ffe6 	bl	80118e8 <_free_r>
 801591c:	e7c7      	b.n	80158ae <__ssputs_r+0x46>
	...

08015920 <_svfiprintf_r>:
 8015920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015924:	4698      	mov	r8, r3
 8015926:	898b      	ldrh	r3, [r1, #12]
 8015928:	061b      	lsls	r3, r3, #24
 801592a:	b09d      	sub	sp, #116	; 0x74
 801592c:	4607      	mov	r7, r0
 801592e:	460d      	mov	r5, r1
 8015930:	4614      	mov	r4, r2
 8015932:	d50e      	bpl.n	8015952 <_svfiprintf_r+0x32>
 8015934:	690b      	ldr	r3, [r1, #16]
 8015936:	b963      	cbnz	r3, 8015952 <_svfiprintf_r+0x32>
 8015938:	2140      	movs	r1, #64	; 0x40
 801593a:	f7fc f841 	bl	80119c0 <_malloc_r>
 801593e:	6028      	str	r0, [r5, #0]
 8015940:	6128      	str	r0, [r5, #16]
 8015942:	b920      	cbnz	r0, 801594e <_svfiprintf_r+0x2e>
 8015944:	230c      	movs	r3, #12
 8015946:	603b      	str	r3, [r7, #0]
 8015948:	f04f 30ff 	mov.w	r0, #4294967295
 801594c:	e0d1      	b.n	8015af2 <_svfiprintf_r+0x1d2>
 801594e:	2340      	movs	r3, #64	; 0x40
 8015950:	616b      	str	r3, [r5, #20]
 8015952:	2300      	movs	r3, #0
 8015954:	9309      	str	r3, [sp, #36]	; 0x24
 8015956:	2320      	movs	r3, #32
 8015958:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801595c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015960:	2330      	movs	r3, #48	; 0x30
 8015962:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015b0c <_svfiprintf_r+0x1ec>
 8015966:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801596a:	f04f 0901 	mov.w	r9, #1
 801596e:	4623      	mov	r3, r4
 8015970:	469a      	mov	sl, r3
 8015972:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015976:	b10a      	cbz	r2, 801597c <_svfiprintf_r+0x5c>
 8015978:	2a25      	cmp	r2, #37	; 0x25
 801597a:	d1f9      	bne.n	8015970 <_svfiprintf_r+0x50>
 801597c:	ebba 0b04 	subs.w	fp, sl, r4
 8015980:	d00b      	beq.n	801599a <_svfiprintf_r+0x7a>
 8015982:	465b      	mov	r3, fp
 8015984:	4622      	mov	r2, r4
 8015986:	4629      	mov	r1, r5
 8015988:	4638      	mov	r0, r7
 801598a:	f7ff ff6d 	bl	8015868 <__ssputs_r>
 801598e:	3001      	adds	r0, #1
 8015990:	f000 80aa 	beq.w	8015ae8 <_svfiprintf_r+0x1c8>
 8015994:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015996:	445a      	add	r2, fp
 8015998:	9209      	str	r2, [sp, #36]	; 0x24
 801599a:	f89a 3000 	ldrb.w	r3, [sl]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	f000 80a2 	beq.w	8015ae8 <_svfiprintf_r+0x1c8>
 80159a4:	2300      	movs	r3, #0
 80159a6:	f04f 32ff 	mov.w	r2, #4294967295
 80159aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80159ae:	f10a 0a01 	add.w	sl, sl, #1
 80159b2:	9304      	str	r3, [sp, #16]
 80159b4:	9307      	str	r3, [sp, #28]
 80159b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80159ba:	931a      	str	r3, [sp, #104]	; 0x68
 80159bc:	4654      	mov	r4, sl
 80159be:	2205      	movs	r2, #5
 80159c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80159c4:	4851      	ldr	r0, [pc, #324]	; (8015b0c <_svfiprintf_r+0x1ec>)
 80159c6:	f7ea fc53 	bl	8000270 <memchr>
 80159ca:	9a04      	ldr	r2, [sp, #16]
 80159cc:	b9d8      	cbnz	r0, 8015a06 <_svfiprintf_r+0xe6>
 80159ce:	06d0      	lsls	r0, r2, #27
 80159d0:	bf44      	itt	mi
 80159d2:	2320      	movmi	r3, #32
 80159d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80159d8:	0711      	lsls	r1, r2, #28
 80159da:	bf44      	itt	mi
 80159dc:	232b      	movmi	r3, #43	; 0x2b
 80159de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80159e2:	f89a 3000 	ldrb.w	r3, [sl]
 80159e6:	2b2a      	cmp	r3, #42	; 0x2a
 80159e8:	d015      	beq.n	8015a16 <_svfiprintf_r+0xf6>
 80159ea:	9a07      	ldr	r2, [sp, #28]
 80159ec:	4654      	mov	r4, sl
 80159ee:	2000      	movs	r0, #0
 80159f0:	f04f 0c0a 	mov.w	ip, #10
 80159f4:	4621      	mov	r1, r4
 80159f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80159fa:	3b30      	subs	r3, #48	; 0x30
 80159fc:	2b09      	cmp	r3, #9
 80159fe:	d94e      	bls.n	8015a9e <_svfiprintf_r+0x17e>
 8015a00:	b1b0      	cbz	r0, 8015a30 <_svfiprintf_r+0x110>
 8015a02:	9207      	str	r2, [sp, #28]
 8015a04:	e014      	b.n	8015a30 <_svfiprintf_r+0x110>
 8015a06:	eba0 0308 	sub.w	r3, r0, r8
 8015a0a:	fa09 f303 	lsl.w	r3, r9, r3
 8015a0e:	4313      	orrs	r3, r2
 8015a10:	9304      	str	r3, [sp, #16]
 8015a12:	46a2      	mov	sl, r4
 8015a14:	e7d2      	b.n	80159bc <_svfiprintf_r+0x9c>
 8015a16:	9b03      	ldr	r3, [sp, #12]
 8015a18:	1d19      	adds	r1, r3, #4
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	9103      	str	r1, [sp, #12]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	bfbb      	ittet	lt
 8015a22:	425b      	neglt	r3, r3
 8015a24:	f042 0202 	orrlt.w	r2, r2, #2
 8015a28:	9307      	strge	r3, [sp, #28]
 8015a2a:	9307      	strlt	r3, [sp, #28]
 8015a2c:	bfb8      	it	lt
 8015a2e:	9204      	strlt	r2, [sp, #16]
 8015a30:	7823      	ldrb	r3, [r4, #0]
 8015a32:	2b2e      	cmp	r3, #46	; 0x2e
 8015a34:	d10c      	bne.n	8015a50 <_svfiprintf_r+0x130>
 8015a36:	7863      	ldrb	r3, [r4, #1]
 8015a38:	2b2a      	cmp	r3, #42	; 0x2a
 8015a3a:	d135      	bne.n	8015aa8 <_svfiprintf_r+0x188>
 8015a3c:	9b03      	ldr	r3, [sp, #12]
 8015a3e:	1d1a      	adds	r2, r3, #4
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	9203      	str	r2, [sp, #12]
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	bfb8      	it	lt
 8015a48:	f04f 33ff 	movlt.w	r3, #4294967295
 8015a4c:	3402      	adds	r4, #2
 8015a4e:	9305      	str	r3, [sp, #20]
 8015a50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015b1c <_svfiprintf_r+0x1fc>
 8015a54:	7821      	ldrb	r1, [r4, #0]
 8015a56:	2203      	movs	r2, #3
 8015a58:	4650      	mov	r0, sl
 8015a5a:	f7ea fc09 	bl	8000270 <memchr>
 8015a5e:	b140      	cbz	r0, 8015a72 <_svfiprintf_r+0x152>
 8015a60:	2340      	movs	r3, #64	; 0x40
 8015a62:	eba0 000a 	sub.w	r0, r0, sl
 8015a66:	fa03 f000 	lsl.w	r0, r3, r0
 8015a6a:	9b04      	ldr	r3, [sp, #16]
 8015a6c:	4303      	orrs	r3, r0
 8015a6e:	3401      	adds	r4, #1
 8015a70:	9304      	str	r3, [sp, #16]
 8015a72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a76:	4826      	ldr	r0, [pc, #152]	; (8015b10 <_svfiprintf_r+0x1f0>)
 8015a78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015a7c:	2206      	movs	r2, #6
 8015a7e:	f7ea fbf7 	bl	8000270 <memchr>
 8015a82:	2800      	cmp	r0, #0
 8015a84:	d038      	beq.n	8015af8 <_svfiprintf_r+0x1d8>
 8015a86:	4b23      	ldr	r3, [pc, #140]	; (8015b14 <_svfiprintf_r+0x1f4>)
 8015a88:	bb1b      	cbnz	r3, 8015ad2 <_svfiprintf_r+0x1b2>
 8015a8a:	9b03      	ldr	r3, [sp, #12]
 8015a8c:	3307      	adds	r3, #7
 8015a8e:	f023 0307 	bic.w	r3, r3, #7
 8015a92:	3308      	adds	r3, #8
 8015a94:	9303      	str	r3, [sp, #12]
 8015a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a98:	4433      	add	r3, r6
 8015a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8015a9c:	e767      	b.n	801596e <_svfiprintf_r+0x4e>
 8015a9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015aa2:	460c      	mov	r4, r1
 8015aa4:	2001      	movs	r0, #1
 8015aa6:	e7a5      	b.n	80159f4 <_svfiprintf_r+0xd4>
 8015aa8:	2300      	movs	r3, #0
 8015aaa:	3401      	adds	r4, #1
 8015aac:	9305      	str	r3, [sp, #20]
 8015aae:	4619      	mov	r1, r3
 8015ab0:	f04f 0c0a 	mov.w	ip, #10
 8015ab4:	4620      	mov	r0, r4
 8015ab6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015aba:	3a30      	subs	r2, #48	; 0x30
 8015abc:	2a09      	cmp	r2, #9
 8015abe:	d903      	bls.n	8015ac8 <_svfiprintf_r+0x1a8>
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d0c5      	beq.n	8015a50 <_svfiprintf_r+0x130>
 8015ac4:	9105      	str	r1, [sp, #20]
 8015ac6:	e7c3      	b.n	8015a50 <_svfiprintf_r+0x130>
 8015ac8:	fb0c 2101 	mla	r1, ip, r1, r2
 8015acc:	4604      	mov	r4, r0
 8015ace:	2301      	movs	r3, #1
 8015ad0:	e7f0      	b.n	8015ab4 <_svfiprintf_r+0x194>
 8015ad2:	ab03      	add	r3, sp, #12
 8015ad4:	9300      	str	r3, [sp, #0]
 8015ad6:	462a      	mov	r2, r5
 8015ad8:	4b0f      	ldr	r3, [pc, #60]	; (8015b18 <_svfiprintf_r+0x1f8>)
 8015ada:	a904      	add	r1, sp, #16
 8015adc:	4638      	mov	r0, r7
 8015ade:	f7fc f873 	bl	8011bc8 <_printf_float>
 8015ae2:	1c42      	adds	r2, r0, #1
 8015ae4:	4606      	mov	r6, r0
 8015ae6:	d1d6      	bne.n	8015a96 <_svfiprintf_r+0x176>
 8015ae8:	89ab      	ldrh	r3, [r5, #12]
 8015aea:	065b      	lsls	r3, r3, #25
 8015aec:	f53f af2c 	bmi.w	8015948 <_svfiprintf_r+0x28>
 8015af0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015af2:	b01d      	add	sp, #116	; 0x74
 8015af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015af8:	ab03      	add	r3, sp, #12
 8015afa:	9300      	str	r3, [sp, #0]
 8015afc:	462a      	mov	r2, r5
 8015afe:	4b06      	ldr	r3, [pc, #24]	; (8015b18 <_svfiprintf_r+0x1f8>)
 8015b00:	a904      	add	r1, sp, #16
 8015b02:	4638      	mov	r0, r7
 8015b04:	f7fc faec 	bl	80120e0 <_printf_i>
 8015b08:	e7eb      	b.n	8015ae2 <_svfiprintf_r+0x1c2>
 8015b0a:	bf00      	nop
 8015b0c:	08016f94 	.word	0x08016f94
 8015b10:	08016f9e 	.word	0x08016f9e
 8015b14:	08011bc9 	.word	0x08011bc9
 8015b18:	08015869 	.word	0x08015869
 8015b1c:	08016f9a 	.word	0x08016f9a

08015b20 <__sfputc_r>:
 8015b20:	6893      	ldr	r3, [r2, #8]
 8015b22:	3b01      	subs	r3, #1
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	b410      	push	{r4}
 8015b28:	6093      	str	r3, [r2, #8]
 8015b2a:	da08      	bge.n	8015b3e <__sfputc_r+0x1e>
 8015b2c:	6994      	ldr	r4, [r2, #24]
 8015b2e:	42a3      	cmp	r3, r4
 8015b30:	db01      	blt.n	8015b36 <__sfputc_r+0x16>
 8015b32:	290a      	cmp	r1, #10
 8015b34:	d103      	bne.n	8015b3e <__sfputc_r+0x1e>
 8015b36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b3a:	f7fd bd49 	b.w	80135d0 <__swbuf_r>
 8015b3e:	6813      	ldr	r3, [r2, #0]
 8015b40:	1c58      	adds	r0, r3, #1
 8015b42:	6010      	str	r0, [r2, #0]
 8015b44:	7019      	strb	r1, [r3, #0]
 8015b46:	4608      	mov	r0, r1
 8015b48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b4c:	4770      	bx	lr

08015b4e <__sfputs_r>:
 8015b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b50:	4606      	mov	r6, r0
 8015b52:	460f      	mov	r7, r1
 8015b54:	4614      	mov	r4, r2
 8015b56:	18d5      	adds	r5, r2, r3
 8015b58:	42ac      	cmp	r4, r5
 8015b5a:	d101      	bne.n	8015b60 <__sfputs_r+0x12>
 8015b5c:	2000      	movs	r0, #0
 8015b5e:	e007      	b.n	8015b70 <__sfputs_r+0x22>
 8015b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b64:	463a      	mov	r2, r7
 8015b66:	4630      	mov	r0, r6
 8015b68:	f7ff ffda 	bl	8015b20 <__sfputc_r>
 8015b6c:	1c43      	adds	r3, r0, #1
 8015b6e:	d1f3      	bne.n	8015b58 <__sfputs_r+0xa>
 8015b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015b74 <_vfiprintf_r>:
 8015b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b78:	460d      	mov	r5, r1
 8015b7a:	b09d      	sub	sp, #116	; 0x74
 8015b7c:	4614      	mov	r4, r2
 8015b7e:	4698      	mov	r8, r3
 8015b80:	4606      	mov	r6, r0
 8015b82:	b118      	cbz	r0, 8015b8c <_vfiprintf_r+0x18>
 8015b84:	6983      	ldr	r3, [r0, #24]
 8015b86:	b90b      	cbnz	r3, 8015b8c <_vfiprintf_r+0x18>
 8015b88:	f7fe fcf6 	bl	8014578 <__sinit>
 8015b8c:	4b89      	ldr	r3, [pc, #548]	; (8015db4 <_vfiprintf_r+0x240>)
 8015b8e:	429d      	cmp	r5, r3
 8015b90:	d11b      	bne.n	8015bca <_vfiprintf_r+0x56>
 8015b92:	6875      	ldr	r5, [r6, #4]
 8015b94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015b96:	07d9      	lsls	r1, r3, #31
 8015b98:	d405      	bmi.n	8015ba6 <_vfiprintf_r+0x32>
 8015b9a:	89ab      	ldrh	r3, [r5, #12]
 8015b9c:	059a      	lsls	r2, r3, #22
 8015b9e:	d402      	bmi.n	8015ba6 <_vfiprintf_r+0x32>
 8015ba0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015ba2:	f7ff f8fa 	bl	8014d9a <__retarget_lock_acquire_recursive>
 8015ba6:	89ab      	ldrh	r3, [r5, #12]
 8015ba8:	071b      	lsls	r3, r3, #28
 8015baa:	d501      	bpl.n	8015bb0 <_vfiprintf_r+0x3c>
 8015bac:	692b      	ldr	r3, [r5, #16]
 8015bae:	b9eb      	cbnz	r3, 8015bec <_vfiprintf_r+0x78>
 8015bb0:	4629      	mov	r1, r5
 8015bb2:	4630      	mov	r0, r6
 8015bb4:	f7fd fd5e 	bl	8013674 <__swsetup_r>
 8015bb8:	b1c0      	cbz	r0, 8015bec <_vfiprintf_r+0x78>
 8015bba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015bbc:	07dc      	lsls	r4, r3, #31
 8015bbe:	d50e      	bpl.n	8015bde <_vfiprintf_r+0x6a>
 8015bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8015bc4:	b01d      	add	sp, #116	; 0x74
 8015bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bca:	4b7b      	ldr	r3, [pc, #492]	; (8015db8 <_vfiprintf_r+0x244>)
 8015bcc:	429d      	cmp	r5, r3
 8015bce:	d101      	bne.n	8015bd4 <_vfiprintf_r+0x60>
 8015bd0:	68b5      	ldr	r5, [r6, #8]
 8015bd2:	e7df      	b.n	8015b94 <_vfiprintf_r+0x20>
 8015bd4:	4b79      	ldr	r3, [pc, #484]	; (8015dbc <_vfiprintf_r+0x248>)
 8015bd6:	429d      	cmp	r5, r3
 8015bd8:	bf08      	it	eq
 8015bda:	68f5      	ldreq	r5, [r6, #12]
 8015bdc:	e7da      	b.n	8015b94 <_vfiprintf_r+0x20>
 8015bde:	89ab      	ldrh	r3, [r5, #12]
 8015be0:	0598      	lsls	r0, r3, #22
 8015be2:	d4ed      	bmi.n	8015bc0 <_vfiprintf_r+0x4c>
 8015be4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015be6:	f7ff f8d9 	bl	8014d9c <__retarget_lock_release_recursive>
 8015bea:	e7e9      	b.n	8015bc0 <_vfiprintf_r+0x4c>
 8015bec:	2300      	movs	r3, #0
 8015bee:	9309      	str	r3, [sp, #36]	; 0x24
 8015bf0:	2320      	movs	r3, #32
 8015bf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015bf6:	f8cd 800c 	str.w	r8, [sp, #12]
 8015bfa:	2330      	movs	r3, #48	; 0x30
 8015bfc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015dc0 <_vfiprintf_r+0x24c>
 8015c00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015c04:	f04f 0901 	mov.w	r9, #1
 8015c08:	4623      	mov	r3, r4
 8015c0a:	469a      	mov	sl, r3
 8015c0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015c10:	b10a      	cbz	r2, 8015c16 <_vfiprintf_r+0xa2>
 8015c12:	2a25      	cmp	r2, #37	; 0x25
 8015c14:	d1f9      	bne.n	8015c0a <_vfiprintf_r+0x96>
 8015c16:	ebba 0b04 	subs.w	fp, sl, r4
 8015c1a:	d00b      	beq.n	8015c34 <_vfiprintf_r+0xc0>
 8015c1c:	465b      	mov	r3, fp
 8015c1e:	4622      	mov	r2, r4
 8015c20:	4629      	mov	r1, r5
 8015c22:	4630      	mov	r0, r6
 8015c24:	f7ff ff93 	bl	8015b4e <__sfputs_r>
 8015c28:	3001      	adds	r0, #1
 8015c2a:	f000 80aa 	beq.w	8015d82 <_vfiprintf_r+0x20e>
 8015c2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015c30:	445a      	add	r2, fp
 8015c32:	9209      	str	r2, [sp, #36]	; 0x24
 8015c34:	f89a 3000 	ldrb.w	r3, [sl]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	f000 80a2 	beq.w	8015d82 <_vfiprintf_r+0x20e>
 8015c3e:	2300      	movs	r3, #0
 8015c40:	f04f 32ff 	mov.w	r2, #4294967295
 8015c44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015c48:	f10a 0a01 	add.w	sl, sl, #1
 8015c4c:	9304      	str	r3, [sp, #16]
 8015c4e:	9307      	str	r3, [sp, #28]
 8015c50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015c54:	931a      	str	r3, [sp, #104]	; 0x68
 8015c56:	4654      	mov	r4, sl
 8015c58:	2205      	movs	r2, #5
 8015c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c5e:	4858      	ldr	r0, [pc, #352]	; (8015dc0 <_vfiprintf_r+0x24c>)
 8015c60:	f7ea fb06 	bl	8000270 <memchr>
 8015c64:	9a04      	ldr	r2, [sp, #16]
 8015c66:	b9d8      	cbnz	r0, 8015ca0 <_vfiprintf_r+0x12c>
 8015c68:	06d1      	lsls	r1, r2, #27
 8015c6a:	bf44      	itt	mi
 8015c6c:	2320      	movmi	r3, #32
 8015c6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015c72:	0713      	lsls	r3, r2, #28
 8015c74:	bf44      	itt	mi
 8015c76:	232b      	movmi	r3, #43	; 0x2b
 8015c78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8015c80:	2b2a      	cmp	r3, #42	; 0x2a
 8015c82:	d015      	beq.n	8015cb0 <_vfiprintf_r+0x13c>
 8015c84:	9a07      	ldr	r2, [sp, #28]
 8015c86:	4654      	mov	r4, sl
 8015c88:	2000      	movs	r0, #0
 8015c8a:	f04f 0c0a 	mov.w	ip, #10
 8015c8e:	4621      	mov	r1, r4
 8015c90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015c94:	3b30      	subs	r3, #48	; 0x30
 8015c96:	2b09      	cmp	r3, #9
 8015c98:	d94e      	bls.n	8015d38 <_vfiprintf_r+0x1c4>
 8015c9a:	b1b0      	cbz	r0, 8015cca <_vfiprintf_r+0x156>
 8015c9c:	9207      	str	r2, [sp, #28]
 8015c9e:	e014      	b.n	8015cca <_vfiprintf_r+0x156>
 8015ca0:	eba0 0308 	sub.w	r3, r0, r8
 8015ca4:	fa09 f303 	lsl.w	r3, r9, r3
 8015ca8:	4313      	orrs	r3, r2
 8015caa:	9304      	str	r3, [sp, #16]
 8015cac:	46a2      	mov	sl, r4
 8015cae:	e7d2      	b.n	8015c56 <_vfiprintf_r+0xe2>
 8015cb0:	9b03      	ldr	r3, [sp, #12]
 8015cb2:	1d19      	adds	r1, r3, #4
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	9103      	str	r1, [sp, #12]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	bfbb      	ittet	lt
 8015cbc:	425b      	neglt	r3, r3
 8015cbe:	f042 0202 	orrlt.w	r2, r2, #2
 8015cc2:	9307      	strge	r3, [sp, #28]
 8015cc4:	9307      	strlt	r3, [sp, #28]
 8015cc6:	bfb8      	it	lt
 8015cc8:	9204      	strlt	r2, [sp, #16]
 8015cca:	7823      	ldrb	r3, [r4, #0]
 8015ccc:	2b2e      	cmp	r3, #46	; 0x2e
 8015cce:	d10c      	bne.n	8015cea <_vfiprintf_r+0x176>
 8015cd0:	7863      	ldrb	r3, [r4, #1]
 8015cd2:	2b2a      	cmp	r3, #42	; 0x2a
 8015cd4:	d135      	bne.n	8015d42 <_vfiprintf_r+0x1ce>
 8015cd6:	9b03      	ldr	r3, [sp, #12]
 8015cd8:	1d1a      	adds	r2, r3, #4
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	9203      	str	r2, [sp, #12]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	bfb8      	it	lt
 8015ce2:	f04f 33ff 	movlt.w	r3, #4294967295
 8015ce6:	3402      	adds	r4, #2
 8015ce8:	9305      	str	r3, [sp, #20]
 8015cea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015dd0 <_vfiprintf_r+0x25c>
 8015cee:	7821      	ldrb	r1, [r4, #0]
 8015cf0:	2203      	movs	r2, #3
 8015cf2:	4650      	mov	r0, sl
 8015cf4:	f7ea fabc 	bl	8000270 <memchr>
 8015cf8:	b140      	cbz	r0, 8015d0c <_vfiprintf_r+0x198>
 8015cfa:	2340      	movs	r3, #64	; 0x40
 8015cfc:	eba0 000a 	sub.w	r0, r0, sl
 8015d00:	fa03 f000 	lsl.w	r0, r3, r0
 8015d04:	9b04      	ldr	r3, [sp, #16]
 8015d06:	4303      	orrs	r3, r0
 8015d08:	3401      	adds	r4, #1
 8015d0a:	9304      	str	r3, [sp, #16]
 8015d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d10:	482c      	ldr	r0, [pc, #176]	; (8015dc4 <_vfiprintf_r+0x250>)
 8015d12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015d16:	2206      	movs	r2, #6
 8015d18:	f7ea faaa 	bl	8000270 <memchr>
 8015d1c:	2800      	cmp	r0, #0
 8015d1e:	d03f      	beq.n	8015da0 <_vfiprintf_r+0x22c>
 8015d20:	4b29      	ldr	r3, [pc, #164]	; (8015dc8 <_vfiprintf_r+0x254>)
 8015d22:	bb1b      	cbnz	r3, 8015d6c <_vfiprintf_r+0x1f8>
 8015d24:	9b03      	ldr	r3, [sp, #12]
 8015d26:	3307      	adds	r3, #7
 8015d28:	f023 0307 	bic.w	r3, r3, #7
 8015d2c:	3308      	adds	r3, #8
 8015d2e:	9303      	str	r3, [sp, #12]
 8015d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d32:	443b      	add	r3, r7
 8015d34:	9309      	str	r3, [sp, #36]	; 0x24
 8015d36:	e767      	b.n	8015c08 <_vfiprintf_r+0x94>
 8015d38:	fb0c 3202 	mla	r2, ip, r2, r3
 8015d3c:	460c      	mov	r4, r1
 8015d3e:	2001      	movs	r0, #1
 8015d40:	e7a5      	b.n	8015c8e <_vfiprintf_r+0x11a>
 8015d42:	2300      	movs	r3, #0
 8015d44:	3401      	adds	r4, #1
 8015d46:	9305      	str	r3, [sp, #20]
 8015d48:	4619      	mov	r1, r3
 8015d4a:	f04f 0c0a 	mov.w	ip, #10
 8015d4e:	4620      	mov	r0, r4
 8015d50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015d54:	3a30      	subs	r2, #48	; 0x30
 8015d56:	2a09      	cmp	r2, #9
 8015d58:	d903      	bls.n	8015d62 <_vfiprintf_r+0x1ee>
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d0c5      	beq.n	8015cea <_vfiprintf_r+0x176>
 8015d5e:	9105      	str	r1, [sp, #20]
 8015d60:	e7c3      	b.n	8015cea <_vfiprintf_r+0x176>
 8015d62:	fb0c 2101 	mla	r1, ip, r1, r2
 8015d66:	4604      	mov	r4, r0
 8015d68:	2301      	movs	r3, #1
 8015d6a:	e7f0      	b.n	8015d4e <_vfiprintf_r+0x1da>
 8015d6c:	ab03      	add	r3, sp, #12
 8015d6e:	9300      	str	r3, [sp, #0]
 8015d70:	462a      	mov	r2, r5
 8015d72:	4b16      	ldr	r3, [pc, #88]	; (8015dcc <_vfiprintf_r+0x258>)
 8015d74:	a904      	add	r1, sp, #16
 8015d76:	4630      	mov	r0, r6
 8015d78:	f7fb ff26 	bl	8011bc8 <_printf_float>
 8015d7c:	4607      	mov	r7, r0
 8015d7e:	1c78      	adds	r0, r7, #1
 8015d80:	d1d6      	bne.n	8015d30 <_vfiprintf_r+0x1bc>
 8015d82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015d84:	07d9      	lsls	r1, r3, #31
 8015d86:	d405      	bmi.n	8015d94 <_vfiprintf_r+0x220>
 8015d88:	89ab      	ldrh	r3, [r5, #12]
 8015d8a:	059a      	lsls	r2, r3, #22
 8015d8c:	d402      	bmi.n	8015d94 <_vfiprintf_r+0x220>
 8015d8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015d90:	f7ff f804 	bl	8014d9c <__retarget_lock_release_recursive>
 8015d94:	89ab      	ldrh	r3, [r5, #12]
 8015d96:	065b      	lsls	r3, r3, #25
 8015d98:	f53f af12 	bmi.w	8015bc0 <_vfiprintf_r+0x4c>
 8015d9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015d9e:	e711      	b.n	8015bc4 <_vfiprintf_r+0x50>
 8015da0:	ab03      	add	r3, sp, #12
 8015da2:	9300      	str	r3, [sp, #0]
 8015da4:	462a      	mov	r2, r5
 8015da6:	4b09      	ldr	r3, [pc, #36]	; (8015dcc <_vfiprintf_r+0x258>)
 8015da8:	a904      	add	r1, sp, #16
 8015daa:	4630      	mov	r0, r6
 8015dac:	f7fc f998 	bl	80120e0 <_printf_i>
 8015db0:	e7e4      	b.n	8015d7c <_vfiprintf_r+0x208>
 8015db2:	bf00      	nop
 8015db4:	08016d7c 	.word	0x08016d7c
 8015db8:	08016d9c 	.word	0x08016d9c
 8015dbc:	08016d5c 	.word	0x08016d5c
 8015dc0:	08016f94 	.word	0x08016f94
 8015dc4:	08016f9e 	.word	0x08016f9e
 8015dc8:	08011bc9 	.word	0x08011bc9
 8015dcc:	08015b4f 	.word	0x08015b4f
 8015dd0:	08016f9a 	.word	0x08016f9a

08015dd4 <_putc_r>:
 8015dd4:	b570      	push	{r4, r5, r6, lr}
 8015dd6:	460d      	mov	r5, r1
 8015dd8:	4614      	mov	r4, r2
 8015dda:	4606      	mov	r6, r0
 8015ddc:	b118      	cbz	r0, 8015de6 <_putc_r+0x12>
 8015dde:	6983      	ldr	r3, [r0, #24]
 8015de0:	b90b      	cbnz	r3, 8015de6 <_putc_r+0x12>
 8015de2:	f7fe fbc9 	bl	8014578 <__sinit>
 8015de6:	4b1c      	ldr	r3, [pc, #112]	; (8015e58 <_putc_r+0x84>)
 8015de8:	429c      	cmp	r4, r3
 8015dea:	d124      	bne.n	8015e36 <_putc_r+0x62>
 8015dec:	6874      	ldr	r4, [r6, #4]
 8015dee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015df0:	07d8      	lsls	r0, r3, #31
 8015df2:	d405      	bmi.n	8015e00 <_putc_r+0x2c>
 8015df4:	89a3      	ldrh	r3, [r4, #12]
 8015df6:	0599      	lsls	r1, r3, #22
 8015df8:	d402      	bmi.n	8015e00 <_putc_r+0x2c>
 8015dfa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015dfc:	f7fe ffcd 	bl	8014d9a <__retarget_lock_acquire_recursive>
 8015e00:	68a3      	ldr	r3, [r4, #8]
 8015e02:	3b01      	subs	r3, #1
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	60a3      	str	r3, [r4, #8]
 8015e08:	da05      	bge.n	8015e16 <_putc_r+0x42>
 8015e0a:	69a2      	ldr	r2, [r4, #24]
 8015e0c:	4293      	cmp	r3, r2
 8015e0e:	db1c      	blt.n	8015e4a <_putc_r+0x76>
 8015e10:	b2eb      	uxtb	r3, r5
 8015e12:	2b0a      	cmp	r3, #10
 8015e14:	d019      	beq.n	8015e4a <_putc_r+0x76>
 8015e16:	6823      	ldr	r3, [r4, #0]
 8015e18:	1c5a      	adds	r2, r3, #1
 8015e1a:	6022      	str	r2, [r4, #0]
 8015e1c:	701d      	strb	r5, [r3, #0]
 8015e1e:	b2ed      	uxtb	r5, r5
 8015e20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015e22:	07da      	lsls	r2, r3, #31
 8015e24:	d405      	bmi.n	8015e32 <_putc_r+0x5e>
 8015e26:	89a3      	ldrh	r3, [r4, #12]
 8015e28:	059b      	lsls	r3, r3, #22
 8015e2a:	d402      	bmi.n	8015e32 <_putc_r+0x5e>
 8015e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015e2e:	f7fe ffb5 	bl	8014d9c <__retarget_lock_release_recursive>
 8015e32:	4628      	mov	r0, r5
 8015e34:	bd70      	pop	{r4, r5, r6, pc}
 8015e36:	4b09      	ldr	r3, [pc, #36]	; (8015e5c <_putc_r+0x88>)
 8015e38:	429c      	cmp	r4, r3
 8015e3a:	d101      	bne.n	8015e40 <_putc_r+0x6c>
 8015e3c:	68b4      	ldr	r4, [r6, #8]
 8015e3e:	e7d6      	b.n	8015dee <_putc_r+0x1a>
 8015e40:	4b07      	ldr	r3, [pc, #28]	; (8015e60 <_putc_r+0x8c>)
 8015e42:	429c      	cmp	r4, r3
 8015e44:	bf08      	it	eq
 8015e46:	68f4      	ldreq	r4, [r6, #12]
 8015e48:	e7d1      	b.n	8015dee <_putc_r+0x1a>
 8015e4a:	4629      	mov	r1, r5
 8015e4c:	4622      	mov	r2, r4
 8015e4e:	4630      	mov	r0, r6
 8015e50:	f7fd fbbe 	bl	80135d0 <__swbuf_r>
 8015e54:	4605      	mov	r5, r0
 8015e56:	e7e3      	b.n	8015e20 <_putc_r+0x4c>
 8015e58:	08016d7c 	.word	0x08016d7c
 8015e5c:	08016d9c 	.word	0x08016d9c
 8015e60:	08016d5c 	.word	0x08016d5c
 8015e64:	00000000 	.word	0x00000000

08015e68 <nan>:
 8015e68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015e70 <nan+0x8>
 8015e6c:	4770      	bx	lr
 8015e6e:	bf00      	nop
 8015e70:	00000000 	.word	0x00000000
 8015e74:	7ff80000 	.word	0x7ff80000

08015e78 <__sread>:
 8015e78:	b510      	push	{r4, lr}
 8015e7a:	460c      	mov	r4, r1
 8015e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e80:	f000 f92e 	bl	80160e0 <_read_r>
 8015e84:	2800      	cmp	r0, #0
 8015e86:	bfab      	itete	ge
 8015e88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015e8a:	89a3      	ldrhlt	r3, [r4, #12]
 8015e8c:	181b      	addge	r3, r3, r0
 8015e8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015e92:	bfac      	ite	ge
 8015e94:	6563      	strge	r3, [r4, #84]	; 0x54
 8015e96:	81a3      	strhlt	r3, [r4, #12]
 8015e98:	bd10      	pop	{r4, pc}

08015e9a <__swrite>:
 8015e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e9e:	461f      	mov	r7, r3
 8015ea0:	898b      	ldrh	r3, [r1, #12]
 8015ea2:	05db      	lsls	r3, r3, #23
 8015ea4:	4605      	mov	r5, r0
 8015ea6:	460c      	mov	r4, r1
 8015ea8:	4616      	mov	r6, r2
 8015eaa:	d505      	bpl.n	8015eb8 <__swrite+0x1e>
 8015eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015eb0:	2302      	movs	r3, #2
 8015eb2:	2200      	movs	r2, #0
 8015eb4:	f000 f8b8 	bl	8016028 <_lseek_r>
 8015eb8:	89a3      	ldrh	r3, [r4, #12]
 8015eba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015ebe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015ec2:	81a3      	strh	r3, [r4, #12]
 8015ec4:	4632      	mov	r2, r6
 8015ec6:	463b      	mov	r3, r7
 8015ec8:	4628      	mov	r0, r5
 8015eca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ece:	f000 b837 	b.w	8015f40 <_write_r>

08015ed2 <__sseek>:
 8015ed2:	b510      	push	{r4, lr}
 8015ed4:	460c      	mov	r4, r1
 8015ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015eda:	f000 f8a5 	bl	8016028 <_lseek_r>
 8015ede:	1c43      	adds	r3, r0, #1
 8015ee0:	89a3      	ldrh	r3, [r4, #12]
 8015ee2:	bf15      	itete	ne
 8015ee4:	6560      	strne	r0, [r4, #84]	; 0x54
 8015ee6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015eea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015eee:	81a3      	strheq	r3, [r4, #12]
 8015ef0:	bf18      	it	ne
 8015ef2:	81a3      	strhne	r3, [r4, #12]
 8015ef4:	bd10      	pop	{r4, pc}

08015ef6 <__sclose>:
 8015ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015efa:	f000 b851 	b.w	8015fa0 <_close_r>

08015efe <strncmp>:
 8015efe:	b510      	push	{r4, lr}
 8015f00:	b17a      	cbz	r2, 8015f22 <strncmp+0x24>
 8015f02:	4603      	mov	r3, r0
 8015f04:	3901      	subs	r1, #1
 8015f06:	1884      	adds	r4, r0, r2
 8015f08:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015f0c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015f10:	4290      	cmp	r0, r2
 8015f12:	d101      	bne.n	8015f18 <strncmp+0x1a>
 8015f14:	42a3      	cmp	r3, r4
 8015f16:	d101      	bne.n	8015f1c <strncmp+0x1e>
 8015f18:	1a80      	subs	r0, r0, r2
 8015f1a:	bd10      	pop	{r4, pc}
 8015f1c:	2800      	cmp	r0, #0
 8015f1e:	d1f3      	bne.n	8015f08 <strncmp+0xa>
 8015f20:	e7fa      	b.n	8015f18 <strncmp+0x1a>
 8015f22:	4610      	mov	r0, r2
 8015f24:	e7f9      	b.n	8015f1a <strncmp+0x1c>

08015f26 <__ascii_wctomb>:
 8015f26:	b149      	cbz	r1, 8015f3c <__ascii_wctomb+0x16>
 8015f28:	2aff      	cmp	r2, #255	; 0xff
 8015f2a:	bf85      	ittet	hi
 8015f2c:	238a      	movhi	r3, #138	; 0x8a
 8015f2e:	6003      	strhi	r3, [r0, #0]
 8015f30:	700a      	strbls	r2, [r1, #0]
 8015f32:	f04f 30ff 	movhi.w	r0, #4294967295
 8015f36:	bf98      	it	ls
 8015f38:	2001      	movls	r0, #1
 8015f3a:	4770      	bx	lr
 8015f3c:	4608      	mov	r0, r1
 8015f3e:	4770      	bx	lr

08015f40 <_write_r>:
 8015f40:	b538      	push	{r3, r4, r5, lr}
 8015f42:	4d07      	ldr	r5, [pc, #28]	; (8015f60 <_write_r+0x20>)
 8015f44:	4604      	mov	r4, r0
 8015f46:	4608      	mov	r0, r1
 8015f48:	4611      	mov	r1, r2
 8015f4a:	2200      	movs	r2, #0
 8015f4c:	602a      	str	r2, [r5, #0]
 8015f4e:	461a      	mov	r2, r3
 8015f50:	f7ef f98d 	bl	800526e <_write>
 8015f54:	1c43      	adds	r3, r0, #1
 8015f56:	d102      	bne.n	8015f5e <_write_r+0x1e>
 8015f58:	682b      	ldr	r3, [r5, #0]
 8015f5a:	b103      	cbz	r3, 8015f5e <_write_r+0x1e>
 8015f5c:	6023      	str	r3, [r4, #0]
 8015f5e:	bd38      	pop	{r3, r4, r5, pc}
 8015f60:	20005814 	.word	0x20005814

08015f64 <__assert_func>:
 8015f64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015f66:	4614      	mov	r4, r2
 8015f68:	461a      	mov	r2, r3
 8015f6a:	4b09      	ldr	r3, [pc, #36]	; (8015f90 <__assert_func+0x2c>)
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	4605      	mov	r5, r0
 8015f70:	68d8      	ldr	r0, [r3, #12]
 8015f72:	b14c      	cbz	r4, 8015f88 <__assert_func+0x24>
 8015f74:	4b07      	ldr	r3, [pc, #28]	; (8015f94 <__assert_func+0x30>)
 8015f76:	9100      	str	r1, [sp, #0]
 8015f78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015f7c:	4906      	ldr	r1, [pc, #24]	; (8015f98 <__assert_func+0x34>)
 8015f7e:	462b      	mov	r3, r5
 8015f80:	f000 f81e 	bl	8015fc0 <fiprintf>
 8015f84:	f000 f8be 	bl	8016104 <abort>
 8015f88:	4b04      	ldr	r3, [pc, #16]	; (8015f9c <__assert_func+0x38>)
 8015f8a:	461c      	mov	r4, r3
 8015f8c:	e7f3      	b.n	8015f76 <__assert_func+0x12>
 8015f8e:	bf00      	nop
 8015f90:	2000000c 	.word	0x2000000c
 8015f94:	08016fa5 	.word	0x08016fa5
 8015f98:	08016fb2 	.word	0x08016fb2
 8015f9c:	08016fe0 	.word	0x08016fe0

08015fa0 <_close_r>:
 8015fa0:	b538      	push	{r3, r4, r5, lr}
 8015fa2:	4d06      	ldr	r5, [pc, #24]	; (8015fbc <_close_r+0x1c>)
 8015fa4:	2300      	movs	r3, #0
 8015fa6:	4604      	mov	r4, r0
 8015fa8:	4608      	mov	r0, r1
 8015faa:	602b      	str	r3, [r5, #0]
 8015fac:	f7ef f97b 	bl	80052a6 <_close>
 8015fb0:	1c43      	adds	r3, r0, #1
 8015fb2:	d102      	bne.n	8015fba <_close_r+0x1a>
 8015fb4:	682b      	ldr	r3, [r5, #0]
 8015fb6:	b103      	cbz	r3, 8015fba <_close_r+0x1a>
 8015fb8:	6023      	str	r3, [r4, #0]
 8015fba:	bd38      	pop	{r3, r4, r5, pc}
 8015fbc:	20005814 	.word	0x20005814

08015fc0 <fiprintf>:
 8015fc0:	b40e      	push	{r1, r2, r3}
 8015fc2:	b503      	push	{r0, r1, lr}
 8015fc4:	4601      	mov	r1, r0
 8015fc6:	ab03      	add	r3, sp, #12
 8015fc8:	4805      	ldr	r0, [pc, #20]	; (8015fe0 <fiprintf+0x20>)
 8015fca:	f853 2b04 	ldr.w	r2, [r3], #4
 8015fce:	6800      	ldr	r0, [r0, #0]
 8015fd0:	9301      	str	r3, [sp, #4]
 8015fd2:	f7ff fdcf 	bl	8015b74 <_vfiprintf_r>
 8015fd6:	b002      	add	sp, #8
 8015fd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8015fdc:	b003      	add	sp, #12
 8015fde:	4770      	bx	lr
 8015fe0:	2000000c 	.word	0x2000000c

08015fe4 <_fstat_r>:
 8015fe4:	b538      	push	{r3, r4, r5, lr}
 8015fe6:	4d07      	ldr	r5, [pc, #28]	; (8016004 <_fstat_r+0x20>)
 8015fe8:	2300      	movs	r3, #0
 8015fea:	4604      	mov	r4, r0
 8015fec:	4608      	mov	r0, r1
 8015fee:	4611      	mov	r1, r2
 8015ff0:	602b      	str	r3, [r5, #0]
 8015ff2:	f7ef f964 	bl	80052be <_fstat>
 8015ff6:	1c43      	adds	r3, r0, #1
 8015ff8:	d102      	bne.n	8016000 <_fstat_r+0x1c>
 8015ffa:	682b      	ldr	r3, [r5, #0]
 8015ffc:	b103      	cbz	r3, 8016000 <_fstat_r+0x1c>
 8015ffe:	6023      	str	r3, [r4, #0]
 8016000:	bd38      	pop	{r3, r4, r5, pc}
 8016002:	bf00      	nop
 8016004:	20005814 	.word	0x20005814

08016008 <_isatty_r>:
 8016008:	b538      	push	{r3, r4, r5, lr}
 801600a:	4d06      	ldr	r5, [pc, #24]	; (8016024 <_isatty_r+0x1c>)
 801600c:	2300      	movs	r3, #0
 801600e:	4604      	mov	r4, r0
 8016010:	4608      	mov	r0, r1
 8016012:	602b      	str	r3, [r5, #0]
 8016014:	f7ef f963 	bl	80052de <_isatty>
 8016018:	1c43      	adds	r3, r0, #1
 801601a:	d102      	bne.n	8016022 <_isatty_r+0x1a>
 801601c:	682b      	ldr	r3, [r5, #0]
 801601e:	b103      	cbz	r3, 8016022 <_isatty_r+0x1a>
 8016020:	6023      	str	r3, [r4, #0]
 8016022:	bd38      	pop	{r3, r4, r5, pc}
 8016024:	20005814 	.word	0x20005814

08016028 <_lseek_r>:
 8016028:	b538      	push	{r3, r4, r5, lr}
 801602a:	4d07      	ldr	r5, [pc, #28]	; (8016048 <_lseek_r+0x20>)
 801602c:	4604      	mov	r4, r0
 801602e:	4608      	mov	r0, r1
 8016030:	4611      	mov	r1, r2
 8016032:	2200      	movs	r2, #0
 8016034:	602a      	str	r2, [r5, #0]
 8016036:	461a      	mov	r2, r3
 8016038:	f7ef f95c 	bl	80052f4 <_lseek>
 801603c:	1c43      	adds	r3, r0, #1
 801603e:	d102      	bne.n	8016046 <_lseek_r+0x1e>
 8016040:	682b      	ldr	r3, [r5, #0]
 8016042:	b103      	cbz	r3, 8016046 <_lseek_r+0x1e>
 8016044:	6023      	str	r3, [r4, #0]
 8016046:	bd38      	pop	{r3, r4, r5, pc}
 8016048:	20005814 	.word	0x20005814

0801604c <memmove>:
 801604c:	4288      	cmp	r0, r1
 801604e:	b510      	push	{r4, lr}
 8016050:	eb01 0402 	add.w	r4, r1, r2
 8016054:	d902      	bls.n	801605c <memmove+0x10>
 8016056:	4284      	cmp	r4, r0
 8016058:	4623      	mov	r3, r4
 801605a:	d807      	bhi.n	801606c <memmove+0x20>
 801605c:	1e43      	subs	r3, r0, #1
 801605e:	42a1      	cmp	r1, r4
 8016060:	d008      	beq.n	8016074 <memmove+0x28>
 8016062:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016066:	f803 2f01 	strb.w	r2, [r3, #1]!
 801606a:	e7f8      	b.n	801605e <memmove+0x12>
 801606c:	4402      	add	r2, r0
 801606e:	4601      	mov	r1, r0
 8016070:	428a      	cmp	r2, r1
 8016072:	d100      	bne.n	8016076 <memmove+0x2a>
 8016074:	bd10      	pop	{r4, pc}
 8016076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801607a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801607e:	e7f7      	b.n	8016070 <memmove+0x24>

08016080 <_realloc_r>:
 8016080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016084:	4680      	mov	r8, r0
 8016086:	4614      	mov	r4, r2
 8016088:	460e      	mov	r6, r1
 801608a:	b921      	cbnz	r1, 8016096 <_realloc_r+0x16>
 801608c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016090:	4611      	mov	r1, r2
 8016092:	f7fb bc95 	b.w	80119c0 <_malloc_r>
 8016096:	b92a      	cbnz	r2, 80160a4 <_realloc_r+0x24>
 8016098:	f7fb fc26 	bl	80118e8 <_free_r>
 801609c:	4625      	mov	r5, r4
 801609e:	4628      	mov	r0, r5
 80160a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160a4:	f000 f835 	bl	8016112 <_malloc_usable_size_r>
 80160a8:	4284      	cmp	r4, r0
 80160aa:	4607      	mov	r7, r0
 80160ac:	d802      	bhi.n	80160b4 <_realloc_r+0x34>
 80160ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80160b2:	d812      	bhi.n	80160da <_realloc_r+0x5a>
 80160b4:	4621      	mov	r1, r4
 80160b6:	4640      	mov	r0, r8
 80160b8:	f7fb fc82 	bl	80119c0 <_malloc_r>
 80160bc:	4605      	mov	r5, r0
 80160be:	2800      	cmp	r0, #0
 80160c0:	d0ed      	beq.n	801609e <_realloc_r+0x1e>
 80160c2:	42bc      	cmp	r4, r7
 80160c4:	4622      	mov	r2, r4
 80160c6:	4631      	mov	r1, r6
 80160c8:	bf28      	it	cs
 80160ca:	463a      	movcs	r2, r7
 80160cc:	f7fe fede 	bl	8014e8c <memcpy>
 80160d0:	4631      	mov	r1, r6
 80160d2:	4640      	mov	r0, r8
 80160d4:	f7fb fc08 	bl	80118e8 <_free_r>
 80160d8:	e7e1      	b.n	801609e <_realloc_r+0x1e>
 80160da:	4635      	mov	r5, r6
 80160dc:	e7df      	b.n	801609e <_realloc_r+0x1e>
	...

080160e0 <_read_r>:
 80160e0:	b538      	push	{r3, r4, r5, lr}
 80160e2:	4d07      	ldr	r5, [pc, #28]	; (8016100 <_read_r+0x20>)
 80160e4:	4604      	mov	r4, r0
 80160e6:	4608      	mov	r0, r1
 80160e8:	4611      	mov	r1, r2
 80160ea:	2200      	movs	r2, #0
 80160ec:	602a      	str	r2, [r5, #0]
 80160ee:	461a      	mov	r2, r3
 80160f0:	f7ef f8a0 	bl	8005234 <_read>
 80160f4:	1c43      	adds	r3, r0, #1
 80160f6:	d102      	bne.n	80160fe <_read_r+0x1e>
 80160f8:	682b      	ldr	r3, [r5, #0]
 80160fa:	b103      	cbz	r3, 80160fe <_read_r+0x1e>
 80160fc:	6023      	str	r3, [r4, #0]
 80160fe:	bd38      	pop	{r3, r4, r5, pc}
 8016100:	20005814 	.word	0x20005814

08016104 <abort>:
 8016104:	b508      	push	{r3, lr}
 8016106:	2006      	movs	r0, #6
 8016108:	f000 f834 	bl	8016174 <raise>
 801610c:	2001      	movs	r0, #1
 801610e:	f7ef f887 	bl	8005220 <_exit>

08016112 <_malloc_usable_size_r>:
 8016112:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016116:	1f18      	subs	r0, r3, #4
 8016118:	2b00      	cmp	r3, #0
 801611a:	bfbc      	itt	lt
 801611c:	580b      	ldrlt	r3, [r1, r0]
 801611e:	18c0      	addlt	r0, r0, r3
 8016120:	4770      	bx	lr

08016122 <_raise_r>:
 8016122:	291f      	cmp	r1, #31
 8016124:	b538      	push	{r3, r4, r5, lr}
 8016126:	4604      	mov	r4, r0
 8016128:	460d      	mov	r5, r1
 801612a:	d904      	bls.n	8016136 <_raise_r+0x14>
 801612c:	2316      	movs	r3, #22
 801612e:	6003      	str	r3, [r0, #0]
 8016130:	f04f 30ff 	mov.w	r0, #4294967295
 8016134:	bd38      	pop	{r3, r4, r5, pc}
 8016136:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016138:	b112      	cbz	r2, 8016140 <_raise_r+0x1e>
 801613a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801613e:	b94b      	cbnz	r3, 8016154 <_raise_r+0x32>
 8016140:	4620      	mov	r0, r4
 8016142:	f000 f831 	bl	80161a8 <_getpid_r>
 8016146:	462a      	mov	r2, r5
 8016148:	4601      	mov	r1, r0
 801614a:	4620      	mov	r0, r4
 801614c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016150:	f000 b818 	b.w	8016184 <_kill_r>
 8016154:	2b01      	cmp	r3, #1
 8016156:	d00a      	beq.n	801616e <_raise_r+0x4c>
 8016158:	1c59      	adds	r1, r3, #1
 801615a:	d103      	bne.n	8016164 <_raise_r+0x42>
 801615c:	2316      	movs	r3, #22
 801615e:	6003      	str	r3, [r0, #0]
 8016160:	2001      	movs	r0, #1
 8016162:	e7e7      	b.n	8016134 <_raise_r+0x12>
 8016164:	2400      	movs	r4, #0
 8016166:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801616a:	4628      	mov	r0, r5
 801616c:	4798      	blx	r3
 801616e:	2000      	movs	r0, #0
 8016170:	e7e0      	b.n	8016134 <_raise_r+0x12>
	...

08016174 <raise>:
 8016174:	4b02      	ldr	r3, [pc, #8]	; (8016180 <raise+0xc>)
 8016176:	4601      	mov	r1, r0
 8016178:	6818      	ldr	r0, [r3, #0]
 801617a:	f7ff bfd2 	b.w	8016122 <_raise_r>
 801617e:	bf00      	nop
 8016180:	2000000c 	.word	0x2000000c

08016184 <_kill_r>:
 8016184:	b538      	push	{r3, r4, r5, lr}
 8016186:	4d07      	ldr	r5, [pc, #28]	; (80161a4 <_kill_r+0x20>)
 8016188:	2300      	movs	r3, #0
 801618a:	4604      	mov	r4, r0
 801618c:	4608      	mov	r0, r1
 801618e:	4611      	mov	r1, r2
 8016190:	602b      	str	r3, [r5, #0]
 8016192:	f7ef f835 	bl	8005200 <_kill>
 8016196:	1c43      	adds	r3, r0, #1
 8016198:	d102      	bne.n	80161a0 <_kill_r+0x1c>
 801619a:	682b      	ldr	r3, [r5, #0]
 801619c:	b103      	cbz	r3, 80161a0 <_kill_r+0x1c>
 801619e:	6023      	str	r3, [r4, #0]
 80161a0:	bd38      	pop	{r3, r4, r5, pc}
 80161a2:	bf00      	nop
 80161a4:	20005814 	.word	0x20005814

080161a8 <_getpid_r>:
 80161a8:	f7ef b822 	b.w	80051f0 <_getpid>

080161ac <checkint>:
 80161ac:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80161b0:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80161b4:	429a      	cmp	r2, r3
 80161b6:	b570      	push	{r4, r5, r6, lr}
 80161b8:	dd2a      	ble.n	8016210 <checkint+0x64>
 80161ba:	f240 4333 	movw	r3, #1075	; 0x433
 80161be:	429a      	cmp	r2, r3
 80161c0:	dc24      	bgt.n	801620c <checkint+0x60>
 80161c2:	1a9b      	subs	r3, r3, r2
 80161c4:	f1a3 0620 	sub.w	r6, r3, #32
 80161c8:	f04f 32ff 	mov.w	r2, #4294967295
 80161cc:	fa02 f403 	lsl.w	r4, r2, r3
 80161d0:	fa02 f606 	lsl.w	r6, r2, r6
 80161d4:	f1c3 0520 	rsb	r5, r3, #32
 80161d8:	fa22 f505 	lsr.w	r5, r2, r5
 80161dc:	4334      	orrs	r4, r6
 80161de:	432c      	orrs	r4, r5
 80161e0:	409a      	lsls	r2, r3
 80161e2:	ea20 0202 	bic.w	r2, r0, r2
 80161e6:	ea21 0404 	bic.w	r4, r1, r4
 80161ea:	4322      	orrs	r2, r4
 80161ec:	f1a3 0420 	sub.w	r4, r3, #32
 80161f0:	f1c3 0220 	rsb	r2, r3, #32
 80161f4:	d10c      	bne.n	8016210 <checkint+0x64>
 80161f6:	40d8      	lsrs	r0, r3
 80161f8:	fa01 f302 	lsl.w	r3, r1, r2
 80161fc:	4318      	orrs	r0, r3
 80161fe:	40e1      	lsrs	r1, r4
 8016200:	4308      	orrs	r0, r1
 8016202:	f000 0001 	and.w	r0, r0, #1
 8016206:	f1d0 0002 	rsbs	r0, r0, #2
 801620a:	bd70      	pop	{r4, r5, r6, pc}
 801620c:	2002      	movs	r0, #2
 801620e:	e7fc      	b.n	801620a <checkint+0x5e>
 8016210:	2000      	movs	r0, #0
 8016212:	e7fa      	b.n	801620a <checkint+0x5e>
 8016214:	0000      	movs	r0, r0
	...

08016218 <pow>:
 8016218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801621c:	ee10 4a90 	vmov	r4, s1
 8016220:	ed2d 8b0a 	vpush	{d8-d12}
 8016224:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8016228:	ee11 7a90 	vmov	r7, s3
 801622c:	f10a 32ff 	add.w	r2, sl, #4294967295
 8016230:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8016234:	429a      	cmp	r2, r3
 8016236:	ee10 6a10 	vmov	r6, s0
 801623a:	ee11 0a10 	vmov	r0, s2
 801623e:	b086      	sub	sp, #24
 8016240:	46d4      	mov	ip, sl
 8016242:	ea4f 5517 	mov.w	r5, r7, lsr #20
 8016246:	d806      	bhi.n	8016256 <pow+0x3e>
 8016248:	f3c5 030a 	ubfx	r3, r5, #0, #11
 801624c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8016250:	2b7f      	cmp	r3, #127	; 0x7f
 8016252:	f240 8156 	bls.w	8016502 <pow+0x2ea>
 8016256:	1802      	adds	r2, r0, r0
 8016258:	eb47 0107 	adc.w	r1, r7, r7
 801625c:	f06f 0e01 	mvn.w	lr, #1
 8016260:	f112 39ff 	adds.w	r9, r2, #4294967295
 8016264:	f141 38ff 	adc.w	r8, r1, #4294967295
 8016268:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 801626c:	45ce      	cmp	lr, r9
 801626e:	eb73 0808 	sbcs.w	r8, r3, r8
 8016272:	d23f      	bcs.n	80162f4 <pow+0xdc>
 8016274:	ea52 0301 	orrs.w	r3, r2, r1
 8016278:	f04f 0300 	mov.w	r3, #0
 801627c:	d10c      	bne.n	8016298 <pow+0x80>
 801627e:	19b6      	adds	r6, r6, r6
 8016280:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8016284:	4164      	adcs	r4, r4
 8016286:	42b3      	cmp	r3, r6
 8016288:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801628c:	41a3      	sbcs	r3, r4
 801628e:	f0c0 808c 	bcc.w	80163aa <pow+0x192>
 8016292:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8016296:	e028      	b.n	80162ea <pow+0xd2>
 8016298:	4da3      	ldr	r5, [pc, #652]	; (8016528 <pow+0x310>)
 801629a:	42ac      	cmp	r4, r5
 801629c:	bf08      	it	eq
 801629e:	429e      	cmpeq	r6, r3
 80162a0:	d107      	bne.n	80162b2 <pow+0x9a>
 80162a2:	1800      	adds	r0, r0, r0
 80162a4:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 80162a8:	417f      	adcs	r7, r7
 80162aa:	4283      	cmp	r3, r0
 80162ac:	4b9f      	ldr	r3, [pc, #636]	; (801652c <pow+0x314>)
 80162ae:	41bb      	sbcs	r3, r7
 80162b0:	e7ed      	b.n	801628e <pow+0x76>
 80162b2:	19b6      	adds	r6, r6, r6
 80162b4:	489e      	ldr	r0, [pc, #632]	; (8016530 <pow+0x318>)
 80162b6:	4164      	adcs	r4, r4
 80162b8:	42b3      	cmp	r3, r6
 80162ba:	eb70 0504 	sbcs.w	r5, r0, r4
 80162be:	d374      	bcc.n	80163aa <pow+0x192>
 80162c0:	4281      	cmp	r1, r0
 80162c2:	bf08      	it	eq
 80162c4:	429a      	cmpeq	r2, r3
 80162c6:	d170      	bne.n	80163aa <pow+0x192>
 80162c8:	4a9a      	ldr	r2, [pc, #616]	; (8016534 <pow+0x31c>)
 80162ca:	4294      	cmp	r4, r2
 80162cc:	bf08      	it	eq
 80162ce:	429e      	cmpeq	r6, r3
 80162d0:	d0df      	beq.n	8016292 <pow+0x7a>
 80162d2:	4294      	cmp	r4, r2
 80162d4:	ea6f 0707 	mvn.w	r7, r7
 80162d8:	bf34      	ite	cc
 80162da:	2400      	movcc	r4, #0
 80162dc:	2401      	movcs	r4, #1
 80162de:	0fff      	lsrs	r7, r7, #31
 80162e0:	42bc      	cmp	r4, r7
 80162e2:	f040 81d9 	bne.w	8016698 <pow+0x480>
 80162e6:	ee21 0b01 	vmul.f64	d0, d1, d1
 80162ea:	b006      	add	sp, #24
 80162ec:	ecbd 8b0a 	vpop	{d8-d12}
 80162f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162f4:	eb16 0806 	adds.w	r8, r6, r6
 80162f8:	eb44 0904 	adc.w	r9, r4, r4
 80162fc:	f118 31ff 	adds.w	r1, r8, #4294967295
 8016300:	f169 0200 	sbc.w	r2, r9, #0
 8016304:	458e      	cmp	lr, r1
 8016306:	4193      	sbcs	r3, r2
 8016308:	d223      	bcs.n	8016352 <pow+0x13a>
 801630a:	ee20 0b00 	vmul.f64	d0, d0, d0
 801630e:	2c00      	cmp	r4, #0
 8016310:	da12      	bge.n	8016338 <pow+0x120>
 8016312:	4639      	mov	r1, r7
 8016314:	f7ff ff4a 	bl	80161ac <checkint>
 8016318:	2801      	cmp	r0, #1
 801631a:	d10d      	bne.n	8016338 <pow+0x120>
 801631c:	eeb1 0b40 	vneg.f64	d0, d0
 8016320:	ea58 0309 	orrs.w	r3, r8, r9
 8016324:	d10a      	bne.n	801633c <pow+0x124>
 8016326:	2f00      	cmp	r7, #0
 8016328:	dadf      	bge.n	80162ea <pow+0xd2>
 801632a:	b006      	add	sp, #24
 801632c:	ecbd 8b0a 	vpop	{d8-d12}
 8016330:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016334:	f000 b9f0 	b.w	8016718 <__math_divzero>
 8016338:	2000      	movs	r0, #0
 801633a:	e7f1      	b.n	8016320 <pow+0x108>
 801633c:	2f00      	cmp	r7, #0
 801633e:	dad4      	bge.n	80162ea <pow+0xd2>
 8016340:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8016344:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8016348:	ed8d 7b00 	vstr	d7, [sp]
 801634c:	ed9d 0b00 	vldr	d0, [sp]
 8016350:	e7cb      	b.n	80162ea <pow+0xd2>
 8016352:	2c00      	cmp	r4, #0
 8016354:	da2c      	bge.n	80163b0 <pow+0x198>
 8016356:	4639      	mov	r1, r7
 8016358:	f7ff ff28 	bl	80161ac <checkint>
 801635c:	b930      	cbnz	r0, 801636c <pow+0x154>
 801635e:	b006      	add	sp, #24
 8016360:	ecbd 8b0a 	vpop	{d8-d12}
 8016364:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016368:	f000 b9ee 	b.w	8016748 <__math_invalid>
 801636c:	2801      	cmp	r0, #1
 801636e:	bf14      	ite	ne
 8016370:	2000      	movne	r0, #0
 8016372:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8016376:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801637a:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 801637e:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8016382:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8016386:	2b7f      	cmp	r3, #127	; 0x7f
 8016388:	d92d      	bls.n	80163e6 <pow+0x1ce>
 801638a:	4b67      	ldr	r3, [pc, #412]	; (8016528 <pow+0x310>)
 801638c:	2000      	movs	r0, #0
 801638e:	429c      	cmp	r4, r3
 8016390:	bf08      	it	eq
 8016392:	4286      	cmpeq	r6, r0
 8016394:	f43f af7d 	beq.w	8016292 <pow+0x7a>
 8016398:	f240 31bd 	movw	r1, #957	; 0x3bd
 801639c:	428a      	cmp	r2, r1
 801639e:	d80c      	bhi.n	80163ba <pow+0x1a2>
 80163a0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80163a4:	42b0      	cmp	r0, r6
 80163a6:	41a3      	sbcs	r3, r4
 80163a8:	d204      	bcs.n	80163b4 <pow+0x19c>
 80163aa:	ee31 0b00 	vadd.f64	d0, d1, d0
 80163ae:	e79c      	b.n	80162ea <pow+0xd2>
 80163b0:	2000      	movs	r0, #0
 80163b2:	e7e4      	b.n	801637e <pow+0x166>
 80163b4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80163b8:	e797      	b.n	80162ea <pow+0xd2>
 80163ba:	2e01      	cmp	r6, #1
 80163bc:	eb74 0303 	sbcs.w	r3, r4, r3
 80163c0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80163c4:	bf34      	ite	cc
 80163c6:	2301      	movcc	r3, #1
 80163c8:	2300      	movcs	r3, #0
 80163ca:	4295      	cmp	r5, r2
 80163cc:	bf8c      	ite	hi
 80163ce:	2500      	movhi	r5, #0
 80163d0:	2501      	movls	r5, #1
 80163d2:	42ab      	cmp	r3, r5
 80163d4:	f000 809d 	beq.w	8016512 <pow+0x2fa>
 80163d8:	b006      	add	sp, #24
 80163da:	ecbd 8b0a 	vpop	{d8-d12}
 80163de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163e2:	f000 b991 	b.w	8016708 <__math_oflow>
 80163e6:	f1bc 0f00 	cmp.w	ip, #0
 80163ea:	d10b      	bne.n	8016404 <pow+0x1ec>
 80163ec:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8016520 <pow+0x308>
 80163f0:	ee20 7b07 	vmul.f64	d7, d0, d7
 80163f4:	ec53 2b17 	vmov	r2, r3, d7
 80163f8:	ee17 6a10 	vmov	r6, s14
 80163fc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8016400:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8016404:	4b4c      	ldr	r3, [pc, #304]	; (8016538 <pow+0x320>)
 8016406:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801640a:	4423      	add	r3, r4
 801640c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8016410:	1519      	asrs	r1, r3, #20
 8016412:	0d1b      	lsrs	r3, r3, #20
 8016414:	051b      	lsls	r3, r3, #20
 8016416:	eba4 0903 	sub.w	r9, r4, r3
 801641a:	4b48      	ldr	r3, [pc, #288]	; (801653c <pow+0x324>)
 801641c:	ee04 1a10 	vmov	s8, r1
 8016420:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8016424:	f1b6 0800 	subs.w	r8, r6, #0
 8016428:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 801642c:	ec49 8b15 	vmov	d5, r8, r9
 8016430:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8016434:	eea5 6b07 	vfma.f64	d6, d5, d7
 8016438:	ed93 7b00 	vldr	d7, [r3]
 801643c:	ed93 5b02 	vldr	d5, [r3, #8]
 8016440:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8016444:	eea4 2b07 	vfma.f64	d2, d4, d7
 8016448:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 801644c:	ee36 ab02 	vadd.f64	d10, d6, d2
 8016450:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8016454:	eea4 7b05 	vfma.f64	d7, d4, d5
 8016458:	ed93 5b04 	vldr	d5, [r3, #16]
 801645c:	ee32 2b06 	vadd.f64	d2, d2, d6
 8016460:	ee37 7b02 	vadd.f64	d7, d7, d2
 8016464:	ee26 5b05 	vmul.f64	d5, d6, d5
 8016468:	ed93 4b08 	vldr	d4, [r3, #32]
 801646c:	ee26 0b05 	vmul.f64	d0, d6, d5
 8016470:	eeb0 9b40 	vmov.f64	d9, d0
 8016474:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8016478:	ed93 5b06 	vldr	d5, [r3, #24]
 801647c:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8016480:	ee26 bb00 	vmul.f64	d11, d6, d0
 8016484:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8016488:	eea6 5b04 	vfma.f64	d5, d6, d4
 801648c:	ee3a ab48 	vsub.f64	d10, d10, d8
 8016490:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8016494:	ee37 9b09 	vadd.f64	d9, d7, d9
 8016498:	ee3a ab00 	vadd.f64	d10, d10, d0
 801649c:	eea6 4b03 	vfma.f64	d4, d6, d3
 80164a0:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 80164a4:	ee39 ab0a 	vadd.f64	d10, d9, d10
 80164a8:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 80164ac:	eea6 3b0c 	vfma.f64	d3, d6, d12
 80164b0:	eea0 4b03 	vfma.f64	d4, d0, d3
 80164b4:	eea0 5b04 	vfma.f64	d5, d0, d4
 80164b8:	eeab ab05 	vfma.f64	d10, d11, d5
 80164bc:	ee38 6b0a 	vadd.f64	d6, d8, d10
 80164c0:	ee21 7b06 	vmul.f64	d7, d1, d6
 80164c4:	ee17 3a90 	vmov	r3, s15
 80164c8:	eeb0 5b47 	vmov.f64	d5, d7
 80164cc:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80164d0:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 80164d4:	18b2      	adds	r2, r6, r2
 80164d6:	2a3e      	cmp	r2, #62	; 0x3e
 80164d8:	ee91 5b06 	vfnms.f64	d5, d1, d6
 80164dc:	ee38 8b46 	vsub.f64	d8, d8, d6
 80164e0:	ee38 ab0a 	vadd.f64	d10, d8, d10
 80164e4:	eea1 5b0a 	vfma.f64	d5, d1, d10
 80164e8:	d92b      	bls.n	8016542 <pow+0x32a>
 80164ea:	2a00      	cmp	r2, #0
 80164ec:	da0b      	bge.n	8016506 <pow+0x2ee>
 80164ee:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80164f2:	ee37 0b00 	vadd.f64	d0, d7, d0
 80164f6:	2800      	cmp	r0, #0
 80164f8:	f43f aef7 	beq.w	80162ea <pow+0xd2>
 80164fc:	eeb1 0b40 	vneg.f64	d0, d0
 8016500:	e6f3      	b.n	80162ea <pow+0xd2>
 8016502:	2000      	movs	r0, #0
 8016504:	e77e      	b.n	8016404 <pow+0x1ec>
 8016506:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 801650a:	d919      	bls.n	8016540 <pow+0x328>
 801650c:	2b00      	cmp	r3, #0
 801650e:	f6bf af63 	bge.w	80163d8 <pow+0x1c0>
 8016512:	b006      	add	sp, #24
 8016514:	ecbd 8b0a 	vpop	{d8-d12}
 8016518:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801651c:	f000 b8ec 	b.w	80166f8 <__math_uflow>
 8016520:	00000000 	.word	0x00000000
 8016524:	43300000 	.word	0x43300000
 8016528:	3ff00000 	.word	0x3ff00000
 801652c:	fff00000 	.word	0xfff00000
 8016530:	ffe00000 	.word	0xffe00000
 8016534:	7fe00000 	.word	0x7fe00000
 8016538:	c0196aab 	.word	0xc0196aab
 801653c:	08016fe8 	.word	0x08016fe8
 8016540:	2600      	movs	r6, #0
 8016542:	495d      	ldr	r1, [pc, #372]	; (80166b8 <pow+0x4a0>)
 8016544:	ed91 4b02 	vldr	d4, [r1, #8]
 8016548:	ed91 3b00 	vldr	d3, [r1]
 801654c:	eeb0 6b44 	vmov.f64	d6, d4
 8016550:	eea7 6b03 	vfma.f64	d6, d7, d3
 8016554:	ee16 5a10 	vmov	r5, s12
 8016558:	ee36 6b44 	vsub.f64	d6, d6, d4
 801655c:	ed91 4b04 	vldr	d4, [r1, #16]
 8016560:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8016564:	eea6 7b04 	vfma.f64	d7, d6, d4
 8016568:	eeb0 0b47 	vmov.f64	d0, d7
 801656c:	ed91 7b06 	vldr	d7, [r1, #24]
 8016570:	18dc      	adds	r4, r3, r3
 8016572:	f104 030f 	add.w	r3, r4, #15
 8016576:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801657a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801657e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8016582:	ee35 0b00 	vadd.f64	d0, d5, d0
 8016586:	ee20 6b00 	vmul.f64	d6, d0, d0
 801658a:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 801658e:	ed91 5b08 	vldr	d5, [r1, #32]
 8016592:	ee30 7b07 	vadd.f64	d7, d0, d7
 8016596:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801659a:	eea0 5b04 	vfma.f64	d5, d0, d4
 801659e:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 80165a2:	eea6 7b05 	vfma.f64	d7, d6, d5
 80165a6:	ee26 6b06 	vmul.f64	d6, d6, d6
 80165aa:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 80165ae:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 80165b2:	f8d2 e004 	ldr.w	lr, [r2, #4]
 80165b6:	eea0 5b04 	vfma.f64	d5, d0, d4
 80165ba:	1940      	adds	r0, r0, r5
 80165bc:	2700      	movs	r7, #0
 80165be:	eb17 020c 	adds.w	r2, r7, ip
 80165c2:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 80165c6:	eea6 7b05 	vfma.f64	d7, d6, d5
 80165ca:	2e00      	cmp	r6, #0
 80165cc:	d15f      	bne.n	801668e <pow+0x476>
 80165ce:	42bd      	cmp	r5, r7
 80165d0:	db13      	blt.n	80165fa <pow+0x3e2>
 80165d2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80165d6:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 80165da:	4610      	mov	r0, r2
 80165dc:	ec41 0b10 	vmov	d0, r0, r1
 80165e0:	eea7 0b00 	vfma.f64	d0, d7, d0
 80165e4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80166a0 <pow+0x488>
 80165e8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80165ec:	b006      	add	sp, #24
 80165ee:	ecbd 8b0a 	vpop	{d8-d12}
 80165f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165f6:	f000 b8bf 	b.w	8016778 <__math_check_oflow>
 80165fa:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80165fe:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8016602:	4610      	mov	r0, r2
 8016604:	ec41 0b15 	vmov	d5, r0, r1
 8016608:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801660c:	ee27 6b05 	vmul.f64	d6, d7, d5
 8016610:	ee35 7b06 	vadd.f64	d7, d5, d6
 8016614:	eeb0 3bc7 	vabs.f64	d3, d7
 8016618:	eeb4 3bc4 	vcmpe.f64	d3, d4
 801661c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016620:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80166a8 <pow+0x490>
 8016624:	d52a      	bpl.n	801667c <pow+0x464>
 8016626:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801662a:	ee35 5b47 	vsub.f64	d5, d5, d7
 801662e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016632:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8016636:	ee35 6b06 	vadd.f64	d6, d5, d6
 801663a:	bf48      	it	mi
 801663c:	eeb0 4b43 	vmovmi.f64	d4, d3
 8016640:	ee37 3b04 	vadd.f64	d3, d7, d4
 8016644:	ee34 5b43 	vsub.f64	d5, d4, d3
 8016648:	ee35 7b07 	vadd.f64	d7, d5, d7
 801664c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016650:	ee37 7b03 	vadd.f64	d7, d7, d3
 8016654:	ee37 7b44 	vsub.f64	d7, d7, d4
 8016658:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801665c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016660:	d104      	bne.n	801666c <pow+0x454>
 8016662:	4632      	mov	r2, r6
 8016664:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8016668:	ec43 2b17 	vmov	d7, r2, r3
 801666c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8016670:	ed9d 6b02 	vldr	d6, [sp, #8]
 8016674:	ee26 6b00 	vmul.f64	d6, d6, d0
 8016678:	ed8d 6b04 	vstr	d6, [sp, #16]
 801667c:	ee27 0b00 	vmul.f64	d0, d7, d0
 8016680:	b006      	add	sp, #24
 8016682:	ecbd 8b0a 	vpop	{d8-d12}
 8016686:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801668a:	f000 b86c 	b.w	8016766 <__math_check_uflow>
 801668e:	ec43 2b10 	vmov	d0, r2, r3
 8016692:	eea7 0b00 	vfma.f64	d0, d7, d0
 8016696:	e628      	b.n	80162ea <pow+0xd2>
 8016698:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80166b0 <pow+0x498>
 801669c:	e625      	b.n	80162ea <pow+0xd2>
 801669e:	bf00      	nop
 80166a0:	00000000 	.word	0x00000000
 80166a4:	7f000000 	.word	0x7f000000
 80166a8:	00000000 	.word	0x00000000
 80166ac:	00100000 	.word	0x00100000
	...
 80166b8:	08018030 	.word	0x08018030

080166bc <with_errno>:
 80166bc:	b513      	push	{r0, r1, r4, lr}
 80166be:	4604      	mov	r4, r0
 80166c0:	ed8d 0b00 	vstr	d0, [sp]
 80166c4:	f7fb f8d6 	bl	8011874 <__errno>
 80166c8:	ed9d 0b00 	vldr	d0, [sp]
 80166cc:	6004      	str	r4, [r0, #0]
 80166ce:	b002      	add	sp, #8
 80166d0:	bd10      	pop	{r4, pc}

080166d2 <xflow>:
 80166d2:	b082      	sub	sp, #8
 80166d4:	b158      	cbz	r0, 80166ee <xflow+0x1c>
 80166d6:	eeb1 7b40 	vneg.f64	d7, d0
 80166da:	ed8d 7b00 	vstr	d7, [sp]
 80166de:	ed9d 7b00 	vldr	d7, [sp]
 80166e2:	2022      	movs	r0, #34	; 0x22
 80166e4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80166e8:	b002      	add	sp, #8
 80166ea:	f7ff bfe7 	b.w	80166bc <with_errno>
 80166ee:	eeb0 7b40 	vmov.f64	d7, d0
 80166f2:	e7f2      	b.n	80166da <xflow+0x8>
 80166f4:	0000      	movs	r0, r0
	...

080166f8 <__math_uflow>:
 80166f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016700 <__math_uflow+0x8>
 80166fc:	f7ff bfe9 	b.w	80166d2 <xflow>
 8016700:	00000000 	.word	0x00000000
 8016704:	10000000 	.word	0x10000000

08016708 <__math_oflow>:
 8016708:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016710 <__math_oflow+0x8>
 801670c:	f7ff bfe1 	b.w	80166d2 <xflow>
 8016710:	00000000 	.word	0x00000000
 8016714:	70000000 	.word	0x70000000

08016718 <__math_divzero>:
 8016718:	b082      	sub	sp, #8
 801671a:	2800      	cmp	r0, #0
 801671c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8016720:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8016724:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8016728:	ed8d 7b00 	vstr	d7, [sp]
 801672c:	ed9d 0b00 	vldr	d0, [sp]
 8016730:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8016740 <__math_divzero+0x28>
 8016734:	2022      	movs	r0, #34	; 0x22
 8016736:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801673a:	b002      	add	sp, #8
 801673c:	f7ff bfbe 	b.w	80166bc <with_errno>
	...

08016748 <__math_invalid>:
 8016748:	eeb0 7b40 	vmov.f64	d7, d0
 801674c:	eeb4 7b47 	vcmp.f64	d7, d7
 8016750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016754:	ee30 6b40 	vsub.f64	d6, d0, d0
 8016758:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801675c:	d602      	bvs.n	8016764 <__math_invalid+0x1c>
 801675e:	2021      	movs	r0, #33	; 0x21
 8016760:	f7ff bfac 	b.w	80166bc <with_errno>
 8016764:	4770      	bx	lr

08016766 <__math_check_uflow>:
 8016766:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801676a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801676e:	d102      	bne.n	8016776 <__math_check_uflow+0x10>
 8016770:	2022      	movs	r0, #34	; 0x22
 8016772:	f7ff bfa3 	b.w	80166bc <with_errno>
 8016776:	4770      	bx	lr

08016778 <__math_check_oflow>:
 8016778:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8016798 <__math_check_oflow+0x20>
 801677c:	eeb0 7bc0 	vabs.f64	d7, d0
 8016780:	eeb4 7b46 	vcmp.f64	d7, d6
 8016784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016788:	dd02      	ble.n	8016790 <__math_check_oflow+0x18>
 801678a:	2022      	movs	r0, #34	; 0x22
 801678c:	f7ff bf96 	b.w	80166bc <with_errno>
 8016790:	4770      	bx	lr
 8016792:	bf00      	nop
 8016794:	f3af 8000 	nop.w
 8016798:	ffffffff 	.word	0xffffffff
 801679c:	7fefffff 	.word	0x7fefffff

080167a0 <_init>:
 80167a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167a2:	bf00      	nop
 80167a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80167a6:	bc08      	pop	{r3}
 80167a8:	469e      	mov	lr, r3
 80167aa:	4770      	bx	lr

080167ac <_fini>:
 80167ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167ae:	bf00      	nop
 80167b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80167b2:	bc08      	pop	{r3}
 80167b4:	469e      	mov	lr, r3
 80167b6:	4770      	bx	lr
