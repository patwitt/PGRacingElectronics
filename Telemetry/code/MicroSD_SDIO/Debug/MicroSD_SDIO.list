
MicroSD_SDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e7c4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800e9c8  0800e9c8  0001e9c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef1c  0800ef1c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ef1c  0800ef1c  0001ef1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef24  0800ef24  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef24  0800ef24  0001ef24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ef28  0800ef28  0001ef28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ef2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025c4  200001e0  0800f10c  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200027a4  0800f10c  000227a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023500  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004dd7  00000000  00000000  0004370e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b08  00000000  00000000  000484e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018c0  00000000  00000000  00049ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006afe  00000000  00000000  0004b8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024e69  00000000  00000000  000523ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112ab4  00000000  00000000  00077217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00189ccb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000832c  00000000  00000000  00189d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e9ac 	.word	0x0800e9ac

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	0800e9ac 	.word	0x0800e9ac

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <MPU9250_IsConnected>:
__weak void MPU9250_OnActivate()
{
}
#ifndef USE_SPI
bool	MPU9250_IsConnected()
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&_MPU9250_I2C,_dev_add,1,HAL_MAX_DELAY)==HAL_OK)
 80009e0:	21d0      	movs	r1, #208	; 0xd0
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
 80009e6:	2201      	movs	r2, #1
 80009e8:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MPU9250_IsConnected+0x24>)
 80009ea:	f003 fca5 	bl	8004338 <HAL_I2C_IsDeviceReady>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d101      	bne.n	80009f8 <MPU9250_IsConnected+0x1c>
		return true;
 80009f4:	2301      	movs	r3, #1
 80009f6:	e000      	b.n	80009fa <MPU9250_IsConnected+0x1e>
	else
		return false;	
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000390 	.word	0x20000390

08000a04 <MPU_I2C_Write>:

void MPU_I2C_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af04      	add	r7, sp, #16
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	70fb      	strb	r3, [r7, #3]
 8000a10:	4613      	mov	r3, r2
 8000a12:	803b      	strh	r3, [r7, #0]
	HAL_I2C_Mem_Write(&_MPU9250_I2C,_dev_add,WriteAddr,I2C_MEMADD_SIZE_8BIT,pBuffer,NumByteToWrite,HAL_MAX_DELAY);
 8000a14:	21d0      	movs	r1, #208	; 0xd0
 8000a16:	78fb      	ldrb	r3, [r7, #3]
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1e:	9302      	str	r3, [sp, #8]
 8000a20:	883b      	ldrh	r3, [r7, #0]
 8000a22:	9301      	str	r3, [sp, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	2301      	movs	r3, #1
 8000a2a:	4803      	ldr	r0, [pc, #12]	; (8000a38 <MPU_I2C_Write+0x34>)
 8000a2c:	f003 fb70 	bl	8004110 <HAL_I2C_Mem_Write>
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000390 	.word	0x20000390

08000a3c <MPU_I2C_Read>:

void MPU_I2C_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af02      	add	r7, sp, #8
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	460b      	mov	r3, r1
 8000a46:	70fb      	strb	r3, [r7, #3]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	803b      	strh	r3, [r7, #0]
	uint8_t data = ReadAddr | READWRITE_CMD;
 8000a4c:	2280      	movs	r2, #128	; 0x80
 8000a4e:	78fb      	ldrb	r3, [r7, #3]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&_MPU9250_I2C,_dev_add,&data,1,HAL_MAX_DELAY);
 8000a56:	21d0      	movs	r1, #208	; 0xd0
 8000a58:	f107 020f 	add.w	r2, r7, #15
 8000a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	2301      	movs	r3, #1
 8000a64:	4807      	ldr	r0, [pc, #28]	; (8000a84 <MPU_I2C_Read+0x48>)
 8000a66:	f003 f969 	bl	8003d3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&_MPU9250_I2C,_dev_add,pBuffer,NumByteToRead,HAL_MAX_DELAY);
 8000a6a:	21d0      	movs	r1, #208	; 0xd0
 8000a6c:	883b      	ldrh	r3, [r7, #0]
 8000a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8000a72:	9200      	str	r2, [sp, #0]
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	4803      	ldr	r0, [pc, #12]	; (8000a84 <MPU_I2C_Read+0x48>)
 8000a78:	f003 fa54 	bl	8003f24 <HAL_I2C_Master_Receive>
}
 8000a7c:	bf00      	nop
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000390 	.word	0x20000390

08000a88 <writeRegister>:
	MPU9250_Deactivate();
}
#endif
/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	460a      	mov	r2, r1
 8000a92:	71fb      	strb	r3, [r7, #7]
 8000a94:	4613      	mov	r3, r2
 8000a96:	71bb      	strb	r3, [r7, #6]
	#ifdef USE_SPI
	MPU_SPI_Write(&data, subAddress, 1);
	#else
	MPU_I2C_Write(&data, subAddress, 1);
 8000a98:	79f9      	ldrb	r1, [r7, #7]
 8000a9a:	1dbb      	adds	r3, r7, #6
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff ffb0 	bl	8000a04 <MPU_I2C_Write>
	#endif
	HAL_Delay(10);
 8000aa4:	200a      	movs	r0, #10
 8000aa6:	f001 fea1 	bl	80027ec <HAL_Delay>
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	4603      	mov	r3, r0
 8000aba:	603a      	str	r2, [r7, #0]
 8000abc:	71fb      	strb	r3, [r7, #7]
 8000abe:	460b      	mov	r3, r1
 8000ac0:	71bb      	strb	r3, [r7, #6]
	#ifdef USE_SPI
	MPU_SPI_Read(dest, subAddress, count);
	#else
	MPU_I2C_Read(dest, subAddress, count);
 8000ac2:	79bb      	ldrb	r3, [r7, #6]
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	6838      	ldr	r0, [r7, #0]
 8000acc:	f7ff ffb6 	bl	8000a3c <MPU_I2C_Read>
	#endif
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	460a      	mov	r2, r1
 8000ae2:	71fb      	strb	r3, [r7, #7]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for write
	writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 8000ae8:	2325      	movs	r3, #37	; 0x25
 8000aea:	220c      	movs	r2, #12
 8000aec:	4611      	mov	r1, r2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff ffca 	bl	8000a88 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8000af4:	2226      	movs	r2, #38	; 0x26
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	4619      	mov	r1, r3
 8000afa:	4610      	mov	r0, r2
 8000afc:	f7ff ffc4 	bl	8000a88 <writeRegister>

	// store the data for write
	writeRegister(I2C_SLV0_DO,data);
 8000b00:	2263      	movs	r2, #99	; 0x63
 8000b02:	79bb      	ldrb	r3, [r7, #6]
 8000b04:	4619      	mov	r1, r3
 8000b06:	4610      	mov	r0, r2
 8000b08:	f7ff ffbe 	bl	8000a88 <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 8000b0c:	2227      	movs	r2, #39	; 0x27
 8000b0e:	2380      	movs	r3, #128	; 0x80
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	4619      	mov	r1, r3
 8000b18:	4610      	mov	r0, r2
 8000b1a:	f7ff ffb5 	bl	8000a88 <writeRegister>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	603a      	str	r2, [r7, #0]
 8000b30:	71fb      	strb	r3, [r7, #7]
 8000b32:	460b      	mov	r3, r1
 8000b34:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 8000b36:	2025      	movs	r0, #37	; 0x25
 8000b38:	220c      	movs	r2, #12
 8000b3a:	2380      	movs	r3, #128	; 0x80
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	4619      	mov	r1, r3
 8000b42:	f7ff ffa1 	bl	8000a88 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8000b46:	2226      	movs	r2, #38	; 0x26
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4610      	mov	r0, r2
 8000b4e:	f7ff ff9b 	bl	8000a88 <writeRegister>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 8000b52:	2027      	movs	r0, #39	; 0x27
 8000b54:	2280      	movs	r2, #128	; 0x80
 8000b56:	79bb      	ldrb	r3, [r7, #6]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f7ff ff93 	bl	8000a88 <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 8000b62:	2001      	movs	r0, #1
 8000b64:	f001 fe42 	bl	80027ec <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
 8000b68:	2049      	movs	r0, #73	; 0x49
 8000b6a:	79bb      	ldrb	r3, [r7, #6]
 8000b6c:	683a      	ldr	r2, [r7, #0]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f7ff ff9f 	bl	8000ab2 <readRegisters>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I,1,_buffer);
 8000b80:	2375      	movs	r3, #117	; 0x75
 8000b82:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <whoAmI+0x18>)
 8000b84:	2101      	movs	r1, #1
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff ff93 	bl	8000ab2 <readRegisters>

	// return the register value
	return _buffer[0];
 8000b8c:	4b01      	ldr	r3, [pc, #4]	; (8000b94 <whoAmI+0x18>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	200001fc 	.word	0x200001fc

08000b98 <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readAK8963Registers(AK8963_WHO_AM_I,1,_buffer);
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <whoAmIAK8963+0x18>)
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ffbf 	bl	8000b26 <readAK8963Registers>
	// return the register value
	return _buffer[0];
 8000ba8:	4b01      	ldr	r3, [pc, #4]	; (8000bb0 <whoAmIAK8963+0x18>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200001fc 	.word	0x200001fc

08000bb4 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init()
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
	#ifndef USE_SPI
	int tries = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
	while(MPU9250_IsConnected() == false && tries < 5)
 8000bbe:	e005      	b.n	8000bcc <MPU9250_Init+0x18>
	{
		tries++;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	607b      	str	r3, [r7, #4]
		HAL_Delay(100);
 8000bc6:	2064      	movs	r0, #100	; 0x64
 8000bc8:	f001 fe10 	bl	80027ec <HAL_Delay>
	while(MPU9250_IsConnected() == false && tries < 5)
 8000bcc:	f7ff ff06 	bl	80009dc <MPU9250_IsConnected>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	f083 0301 	eor.w	r3, r3, #1
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d002      	beq.n	8000be2 <MPU9250_Init+0x2e>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	ddee      	ble.n	8000bc0 <MPU9250_Init+0xc>
	}
	if(tries == 5)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b05      	cmp	r3, #5
 8000be6:	d101      	bne.n	8000bec <MPU9250_Init+0x38>
	{
		return 1;
 8000be8:	2301      	movs	r3, #1
 8000bea:	e0a5      	b.n	8000d38 <MPU9250_Init+0x184>
	}
	#endif
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 8000bec:	236b      	movs	r3, #107	; 0x6b
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4611      	mov	r1, r2
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff ff48 	bl	8000a88 <writeRegister>
	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 8000bf8:	236a      	movs	r3, #106	; 0x6a
 8000bfa:	2220      	movs	r2, #32
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ff42 	bl	8000a88 <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 8000c04:	2324      	movs	r3, #36	; 0x24
 8000c06:	220d      	movs	r2, #13
 8000c08:	4611      	mov	r1, r2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ff3c 	bl	8000a88 <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8000c10:	230a      	movs	r3, #10
 8000c12:	2200      	movs	r2, #0
 8000c14:	4611      	mov	r1, r2
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ff5e 	bl	8000ad8 <writeAK8963Register>
	// reset the MPU9250
	writeRegister(PWR_MGMNT_1,PWR_RESET);
 8000c1c:	236b      	movs	r3, #107	; 0x6b
 8000c1e:	2280      	movs	r2, #128	; 0x80
 8000c20:	4611      	mov	r1, r2
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff ff30 	bl	8000a88 <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 8000c28:	200a      	movs	r0, #10
 8000c2a:	f001 fddf 	bl	80027ec <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
 8000c2e:	230b      	movs	r3, #11
 8000c30:	2201      	movs	r2, #1
 8000c32:	4611      	mov	r1, r2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff4f 	bl	8000ad8 <writeAK8963Register>
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 8000c3a:	236b      	movs	r3, #107	; 0x6b
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff21 	bl	8000a88 <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI();
 8000c46:	f7ff ff99 	bl	8000b7c <whoAmI>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	70fb      	strb	r3, [r7, #3]
	if((who != 0x71) && ( who != 0x73))
 8000c4e:	78fb      	ldrb	r3, [r7, #3]
 8000c50:	2b71      	cmp	r3, #113	; 0x71
 8000c52:	d004      	beq.n	8000c5e <MPU9250_Init+0xaa>
 8000c54:	78fb      	ldrb	r3, [r7, #3]
 8000c56:	2b73      	cmp	r3, #115	; 0x73
 8000c58:	d001      	beq.n	8000c5e <MPU9250_Init+0xaa>
	{
		return 1;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e06c      	b.n	8000d38 <MPU9250_Init+0x184>
	}

	// enable accelerometer and gyro
	writeRegister(PWR_MGMNT_2,SEN_ENABLE);
 8000c5e:	236c      	movs	r3, #108	; 0x6c
 8000c60:	2200      	movs	r2, #0
 8000c62:	4611      	mov	r1, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff0f 	bl	8000a88 <writeRegister>

	// setting accel range to 16G as default
	writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_2G);
 8000c6a:	231c      	movs	r3, #28
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff09 	bl	8000a88 <writeRegister>

	// setting the gyro range to 2000DPS as default
	writeRegister(GYRO_CONFIG,GYRO_FS_SEL_250DPS);
 8000c76:	231b      	movs	r3, #27
 8000c78:	2200      	movs	r2, #0
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff03 	bl	8000a88 <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(ACCEL_CONFIG2,DLPF_184);
 8000c82:	231d      	movs	r3, #29
 8000c84:	2201      	movs	r2, #1
 8000c86:	4611      	mov	r1, r2
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fefd 	bl	8000a88 <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(CONFIG,DLPF_184);
 8000c8e:	231a      	movs	r3, #26
 8000c90:	2201      	movs	r2, #1
 8000c92:	4611      	mov	r1, r2
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fef7 	bl	8000a88 <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(SMPDIV,0x00);
 8000c9a:	2319      	movs	r3, #25
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fef2 	bl	8000a88 <writeRegister>

	// enable I2C master mode
	writeRegister(USER_CTRL,I2C_MST_EN);
 8000ca4:	236a      	movs	r3, #106	; 0x6a
 8000ca6:	2220      	movs	r2, #32
 8000ca8:	4611      	mov	r1, r2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff feec 	bl	8000a88 <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL,I2C_MST_CLK);
 8000cb0:	2324      	movs	r3, #36	; 0x24
 8000cb2:	220d      	movs	r2, #13
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fee6 	bl	8000a88 <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 0x48 )
 8000cbc:	f7ff ff6c 	bl	8000b98 <whoAmIAK8963>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b48      	cmp	r3, #72	; 0x48
 8000cc4:	d001      	beq.n	8000cca <MPU9250_Init+0x116>
	{
		return 1;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e036      	b.n	8000d38 <MPU9250_Init+0x184>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8000cca:	230a      	movs	r3, #10
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff01 	bl	8000ad8 <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 8000cd6:	2064      	movs	r0, #100	; 0x64
 8000cd8:	f001 fd88 	bl	80027ec <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM);
 8000cdc:	230a      	movs	r3, #10
 8000cde:	220f      	movs	r2, #15
 8000ce0:	4611      	mov	r1, r2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fef8 	bl	8000ad8 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8000ce8:	2064      	movs	r0, #100	; 0x64
 8000cea:	f001 fd7f 	bl	80027ec <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 8000cee:	2310      	movs	r3, #16
 8000cf0:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <MPU9250_Init+0x18c>)
 8000cf2:	2103      	movs	r1, #3
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff16 	bl	8000b26 <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8000cfa:	230a      	movs	r3, #10
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fee9 	bl	8000ad8 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8000d06:	2064      	movs	r0, #100	; 0x64
 8000d08:	f001 fd70 	bl	80027ec <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2);
 8000d0c:	230a      	movs	r3, #10
 8000d0e:	2216      	movs	r2, #22
 8000d10:	4611      	mov	r1, r2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fee0 	bl	8000ad8 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8000d18:	2064      	movs	r0, #100	; 0x64
 8000d1a:	f001 fd67 	bl	80027ec <HAL_Delay>

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 8000d1e:	236b      	movs	r3, #107	; 0x6b
 8000d20:	2201      	movs	r2, #1
 8000d22:	4611      	mov	r1, r2
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff feaf 	bl	8000a88 <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(AK8963_HXL,7,_buffer);
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	4a05      	ldr	r2, [pc, #20]	; (8000d44 <MPU9250_Init+0x190>)
 8000d2e:	2107      	movs	r1, #7
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fef8 	bl	8000b26 <readAK8963Registers>

	// successful init, return 0
	return 0;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000214 	.word	0x20000214
 8000d44:	200001fc 	.word	0x200001fc

08000d48 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d4e:	463b      	mov	r3, r7
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d5a:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <MX_ADC1_Init+0x98>)
 8000d5c:	4a21      	ldr	r2, [pc, #132]	; (8000de4 <MX_ADC1_Init+0x9c>)
 8000d5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d60:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <MX_ADC1_Init+0x98>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d66:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <MX_ADC1_Init+0x98>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <MX_ADC1_Init+0x98>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d72:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <MX_ADC1_Init+0x98>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <MX_ADC1_Init+0x98>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d80:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <MX_ADC1_Init+0x98>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d86:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <MX_ADC1_Init+0x98>)
 8000d88:	4a17      	ldr	r2, [pc, #92]	; (8000de8 <MX_ADC1_Init+0xa0>)
 8000d8a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <MX_ADC1_Init+0x98>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <MX_ADC1_Init+0x98>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <MX_ADC1_Init+0x98>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <MX_ADC1_Init+0x98>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000da6:	480e      	ldr	r0, [pc, #56]	; (8000de0 <MX_ADC1_Init+0x98>)
 8000da8:	f001 fd44 	bl	8002834 <HAL_ADC_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000db2:	f000 ff35 	bl	8001c20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4806      	ldr	r0, [pc, #24]	; (8000de0 <MX_ADC1_Init+0x98>)
 8000dc8:	f001 fd78 	bl	80028bc <HAL_ADC_ConfigChannel>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000dd2:	f000 ff25 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000218 	.word	0x20000218
 8000de4:	40012000 	.word	0x40012000
 8000de8:	0f000001 	.word	0x0f000001

08000dec <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000df2:	463b      	mov	r3, r7
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000dfe:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <MX_ADC2_Init+0x98>)
 8000e00:	4a21      	ldr	r2, [pc, #132]	; (8000e88 <MX_ADC2_Init+0x9c>)
 8000e02:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e04:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <MX_ADC2_Init+0x98>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e0a:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <MX_ADC2_Init+0x98>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e10:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <MX_ADC2_Init+0x98>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e16:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <MX_ADC2_Init+0x98>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <MX_ADC2_Init+0x98>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e24:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <MX_ADC2_Init+0x98>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e2a:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <MX_ADC2_Init+0x98>)
 8000e2c:	4a17      	ldr	r2, [pc, #92]	; (8000e8c <MX_ADC2_Init+0xa0>)
 8000e2e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <MX_ADC2_Init+0x98>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <MX_ADC2_Init+0x98>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_ADC2_Init+0x98>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_ADC2_Init+0x98>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e4a:	480e      	ldr	r0, [pc, #56]	; (8000e84 <MX_ADC2_Init+0x98>)
 8000e4c:	f001 fcf2 	bl	8002834 <HAL_ADC_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000e56:	f000 fee3 	bl	8001c20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e66:	463b      	mov	r3, r7
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4806      	ldr	r0, [pc, #24]	; (8000e84 <MX_ADC2_Init+0x98>)
 8000e6c:	f001 fd26 	bl	80028bc <HAL_ADC_ConfigChannel>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000e76:	f000 fed3 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000260 	.word	0x20000260
 8000e88:	40012100 	.word	0x40012100
 8000e8c:	0f000001 	.word	0x0f000001

08000e90 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e96:	463b      	mov	r3, r7
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000ea2:	4b21      	ldr	r3, [pc, #132]	; (8000f28 <MX_ADC3_Init+0x98>)
 8000ea4:	4a21      	ldr	r2, [pc, #132]	; (8000f2c <MX_ADC3_Init+0x9c>)
 8000ea6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <MX_ADC3_Init+0x98>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000eae:	4b1e      	ldr	r3, [pc, #120]	; (8000f28 <MX_ADC3_Init+0x98>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <MX_ADC3_Init+0x98>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000eba:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <MX_ADC3_Init+0x98>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ec0:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <MX_ADC3_Init+0x98>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <MX_ADC3_Init+0x98>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <MX_ADC3_Init+0x98>)
 8000ed0:	4a17      	ldr	r2, [pc, #92]	; (8000f30 <MX_ADC3_Init+0xa0>)
 8000ed2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <MX_ADC3_Init+0x98>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000eda:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <MX_ADC3_Init+0x98>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_ADC3_Init+0x98>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_ADC3_Init+0x98>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000eee:	480e      	ldr	r0, [pc, #56]	; (8000f28 <MX_ADC3_Init+0x98>)
 8000ef0:	f001 fca0 	bl	8002834 <HAL_ADC_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8000efa:	f000 fe91 	bl	8001c20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000efe:	230d      	movs	r3, #13
 8000f00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4806      	ldr	r0, [pc, #24]	; (8000f28 <MX_ADC3_Init+0x98>)
 8000f10:	f001 fcd4 	bl	80028bc <HAL_ADC_ConfigChannel>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000f1a:	f000 fe81 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200002a8 	.word	0x200002a8
 8000f2c:	40012200 	.word	0x40012200
 8000f30:	0f000001 	.word	0x0f000001

08000f34 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08e      	sub	sp, #56	; 0x38
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a4b      	ldr	r2, [pc, #300]	; (8001080 <HAL_ADC_MspInit+0x14c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d124      	bne.n	8000fa0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f56:	4b4b      	ldr	r3, [pc, #300]	; (8001084 <HAL_ADC_MspInit+0x150>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	4a4a      	ldr	r2, [pc, #296]	; (8001084 <HAL_ADC_MspInit+0x150>)
 8000f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f60:	6453      	str	r3, [r2, #68]	; 0x44
 8000f62:	4b48      	ldr	r3, [pc, #288]	; (8001084 <HAL_ADC_MspInit+0x150>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f6a:	623b      	str	r3, [r7, #32]
 8000f6c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	4b45      	ldr	r3, [pc, #276]	; (8001084 <HAL_ADC_MspInit+0x150>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a44      	ldr	r2, [pc, #272]	; (8001084 <HAL_ADC_MspInit+0x150>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b42      	ldr	r3, [pc, #264]	; (8001084 <HAL_ADC_MspInit+0x150>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	61fb      	str	r3, [r7, #28]
 8000f84:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f86:	2301      	movs	r3, #1
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f96:	4619      	mov	r1, r3
 8000f98:	483b      	ldr	r0, [pc, #236]	; (8001088 <HAL_ADC_MspInit+0x154>)
 8000f9a:	f002 fc93 	bl	80038c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000f9e:	e06a      	b.n	8001076 <HAL_ADC_MspInit+0x142>
  else if(adcHandle->Instance==ADC2)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a39      	ldr	r2, [pc, #228]	; (800108c <HAL_ADC_MspInit+0x158>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d124      	bne.n	8000ff4 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000faa:	4b36      	ldr	r3, [pc, #216]	; (8001084 <HAL_ADC_MspInit+0x150>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	4a35      	ldr	r2, [pc, #212]	; (8001084 <HAL_ADC_MspInit+0x150>)
 8000fb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb6:	4b33      	ldr	r3, [pc, #204]	; (8001084 <HAL_ADC_MspInit+0x150>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fbe:	61bb      	str	r3, [r7, #24]
 8000fc0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	4b30      	ldr	r3, [pc, #192]	; (8001084 <HAL_ADC_MspInit+0x150>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a2f      	ldr	r2, [pc, #188]	; (8001084 <HAL_ADC_MspInit+0x150>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b2d      	ldr	r3, [pc, #180]	; (8001084 <HAL_ADC_MspInit+0x150>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fea:	4619      	mov	r1, r3
 8000fec:	4826      	ldr	r0, [pc, #152]	; (8001088 <HAL_ADC_MspInit+0x154>)
 8000fee:	f002 fc69 	bl	80038c4 <HAL_GPIO_Init>
}
 8000ff2:	e040      	b.n	8001076 <HAL_ADC_MspInit+0x142>
  else if(adcHandle->Instance==ADC3)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a25      	ldr	r2, [pc, #148]	; (8001090 <HAL_ADC_MspInit+0x15c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d13b      	bne.n	8001076 <HAL_ADC_MspInit+0x142>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000ffe:	4b21      	ldr	r3, [pc, #132]	; (8001084 <HAL_ADC_MspInit+0x150>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	4a20      	ldr	r2, [pc, #128]	; (8001084 <HAL_ADC_MspInit+0x150>)
 8001004:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001008:	6453      	str	r3, [r2, #68]	; 0x44
 800100a:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <HAL_ADC_MspInit+0x150>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001016:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <HAL_ADC_MspInit+0x150>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a1a      	ldr	r2, [pc, #104]	; (8001084 <HAL_ADC_MspInit+0x150>)
 800101c:	f043 0320 	orr.w	r3, r3, #32
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b18      	ldr	r3, [pc, #96]	; (8001084 <HAL_ADC_MspInit+0x150>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0320 	and.w	r3, r3, #32
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <HAL_ADC_MspInit+0x150>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a14      	ldr	r2, [pc, #80]	; (8001084 <HAL_ADC_MspInit+0x150>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_ADC_MspInit+0x150>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001046:	2328      	movs	r3, #40	; 0x28
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800104a:	2303      	movs	r3, #3
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001056:	4619      	mov	r1, r3
 8001058:	480e      	ldr	r0, [pc, #56]	; (8001094 <HAL_ADC_MspInit+0x160>)
 800105a:	f002 fc33 	bl	80038c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800105e:	230c      	movs	r3, #12
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001062:	2303      	movs	r3, #3
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106e:	4619      	mov	r1, r3
 8001070:	4809      	ldr	r0, [pc, #36]	; (8001098 <HAL_ADC_MspInit+0x164>)
 8001072:	f002 fc27 	bl	80038c4 <HAL_GPIO_Init>
}
 8001076:	bf00      	nop
 8001078:	3738      	adds	r7, #56	; 0x38
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40012000 	.word	0x40012000
 8001084:	40023800 	.word	0x40023800
 8001088:	40020000 	.word	0x40020000
 800108c:	40012100 	.word	0x40012100
 8001090:	40012200 	.word	0x40012200
 8001094:	40021400 	.word	0x40021400
 8001098:	40020800 	.word	0x40020800

0800109c <I2CScanner>:

extern UART_HandleTypeDef huart7;
extern I2C_HandleTypeDef defaultI2C;

void I2CScanner()
{
 800109c:	b5b0      	push	{r4, r5, r7, lr}
 800109e:	b094      	sub	sp, #80	; 0x50
 80010a0:	af00      	add	r7, sp, #0
	uint8_t Buffer[25] = {0};
 80010a2:	2300      	movs	r3, #0
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	611a      	str	r2, [r3, #16]
 80010b6:	751a      	strb	r2, [r3, #20]
	uint8_t Space[] = " - ";
 80010b8:	4b2c      	ldr	r3, [pc, #176]	; (800116c <I2CScanner+0xd0>)
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
 80010bc:	4b2c      	ldr	r3, [pc, #176]	; (8001170 <I2CScanner+0xd4>)
 80010be:	f107 040c 	add.w	r4, r7, #12
 80010c2:	461d      	mov	r5, r3
 80010c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010cc:	c403      	stmia	r4!, {r0, r1}
 80010ce:	8022      	strh	r2, [r4, #0]
	uint8_t EndMSG[] = "Done! \r\n\r\n";
 80010d0:	4a28      	ldr	r2, [pc, #160]	; (8001174 <I2CScanner+0xd8>)
 80010d2:	463b      	mov	r3, r7
 80010d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80010d6:	c303      	stmia	r3!, {r0, r1}
 80010d8:	801a      	strh	r2, [r3, #0]
 80010da:	3302      	adds	r3, #2
 80010dc:	0c12      	lsrs	r2, r2, #16
 80010de:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart7, StartMSG, sizeof(StartMSG), 10000);
 80010e0:	f107 010c 	add.w	r1, r7, #12
 80010e4:	f242 7310 	movw	r3, #10000	; 0x2710
 80010e8:	221a      	movs	r2, #26
 80010ea:	4823      	ldr	r0, [pc, #140]	; (8001178 <I2CScanner+0xdc>)
 80010ec:	f007 fbf8 	bl	80088e0 <HAL_UART_Transmit>
	for(int i=67; i<128	; i++){
 80010f0:	2343      	movs	r3, #67	; 0x43
 80010f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010f4:	e02b      	b.n	800114e <I2CScanner+0xb2>
			int ret = HAL_I2C_IsDeviceReady(&defaultI2C, (uint16_t)(i<<1), 3, 5);
 80010f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	b299      	uxth	r1, r3
 80010fe:	2305      	movs	r3, #5
 8001100:	2203      	movs	r2, #3
 8001102:	481e      	ldr	r0, [pc, #120]	; (800117c <I2CScanner+0xe0>)
 8001104:	f003 f918 	bl	8004338 <HAL_I2C_IsDeviceReady>
 8001108:	4603      	mov	r3, r0
 800110a:	64bb      	str	r3, [r7, #72]	; 0x48
			if (ret != HAL_OK) /* No ACK Received At That Address */
 800110c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800110e:	2b00      	cmp	r3, #0
 8001110:	d008      	beq.n	8001124 <I2CScanner+0x88>
			{
				HAL_UART_Transmit(&huart7, Space, sizeof(Space), 10000);
 8001112:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001116:	f242 7310 	movw	r3, #10000	; 0x2710
 800111a:	2204      	movs	r2, #4
 800111c:	4816      	ldr	r0, [pc, #88]	; (8001178 <I2CScanner+0xdc>)
 800111e:	f007 fbdf 	bl	80088e0 <HAL_UART_Transmit>
 8001122:	e011      	b.n	8001148 <I2CScanner+0xac>
			}
			else if(ret == HAL_OK)
 8001124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10e      	bne.n	8001148 <I2CScanner+0xac>
			{
				sprintf(Buffer, "0x%X", i);
 800112a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800112e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001130:	4913      	ldr	r1, [pc, #76]	; (8001180 <I2CScanner+0xe4>)
 8001132:	4618      	mov	r0, r3
 8001134:	f00a f82a 	bl	800b18c <siprintf>
				HAL_UART_Transmit(&huart7, Buffer, sizeof(Buffer), 10000);
 8001138:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800113c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001140:	2219      	movs	r2, #25
 8001142:	480d      	ldr	r0, [pc, #52]	; (8001178 <I2CScanner+0xdc>)
 8001144:	f007 fbcc 	bl	80088e0 <HAL_UART_Transmit>
	for(int i=67; i<128	; i++){
 8001148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800114a:	3301      	adds	r3, #1
 800114c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800114e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001150:	2b7f      	cmp	r3, #127	; 0x7f
 8001152:	ddd0      	ble.n	80010f6 <I2CScanner+0x5a>
			}
	}
		HAL_UART_Transmit(&huart7, EndMSG, sizeof(EndMSG), 10000);
 8001154:	4639      	mov	r1, r7
 8001156:	f242 7310 	movw	r3, #10000	; 0x2710
 800115a:	220b      	movs	r2, #11
 800115c:	4806      	ldr	r0, [pc, #24]	; (8001178 <I2CScanner+0xdc>)
 800115e:	f007 fbbf 	bl	80088e0 <HAL_UART_Transmit>
};
 8001162:	bf00      	nop
 8001164:	3750      	adds	r7, #80	; 0x50
 8001166:	46bd      	mov	sp, r7
 8001168:	bdb0      	pop	{r4, r5, r7, pc}
 800116a:	bf00      	nop
 800116c:	00202d20 	.word	0x00202d20
 8001170:	0800e9d0 	.word	0x0800e9d0
 8001174:	0800e9ec 	.word	0x0800e9ec
 8001178:	2000266c 	.word	0x2000266c
 800117c:	20000390 	.word	0x20000390
 8001180:	0800e9c8 	.word	0x0800e9c8

08001184 <__io_putchar>:

int __io_putchar(int ch){
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	if(ch == '\n')
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b0a      	cmp	r3, #10
 8001190:	d106      	bne.n	80011a0 <__io_putchar+0x1c>
	{
		HAL_UART_Transmit(&huart7, (uint8_t*)"\r", 1, HAL_MAX_DELAY);
 8001192:	f04f 33ff 	mov.w	r3, #4294967295
 8001196:	2201      	movs	r2, #1
 8001198:	4907      	ldr	r1, [pc, #28]	; (80011b8 <__io_putchar+0x34>)
 800119a:	4808      	ldr	r0, [pc, #32]	; (80011bc <__io_putchar+0x38>)
 800119c:	f007 fba0 	bl	80088e0 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&huart7, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80011a0:	1d39      	adds	r1, r7, #4
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295
 80011a6:	2201      	movs	r2, #1
 80011a8:	4804      	ldr	r0, [pc, #16]	; (80011bc <__io_putchar+0x38>)
 80011aa:	f007 fb99 	bl	80088e0 <HAL_UART_Transmit>
	return 1;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	0800e9f8 	.word	0x0800e9f8
 80011bc:	2000266c 	.word	0x2000266c

080011c0 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <MX_CAN1_Init+0x60>)
 80011c6:	4a17      	ldr	r2, [pc, #92]	; (8001224 <MX_CAN1_Init+0x64>)
 80011c8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <MX_CAN1_Init+0x60>)
 80011cc:	2210      	movs	r2, #16
 80011ce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80011d0:	4b13      	ldr	r3, [pc, #76]	; (8001220 <MX_CAN1_Init+0x60>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <MX_CAN1_Init+0x60>)
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80011dc:	4b10      	ldr	r3, [pc, #64]	; (8001220 <MX_CAN1_Init+0x60>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_CAN1_Init+0x60>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80011e8:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <MX_CAN1_Init+0x60>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_CAN1_Init+0x60>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80011f4:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <MX_CAN1_Init+0x60>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_CAN1_Init+0x60>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <MX_CAN1_Init+0x60>)
 8001202:	2200      	movs	r2, #0
 8001204:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_CAN1_Init+0x60>)
 8001208:	2200      	movs	r2, #0
 800120a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <MX_CAN1_Init+0x60>)
 800120e:	f001 fda5 	bl	8002d5c <HAL_CAN_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001218:	f000 fd02 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200002f0 	.word	0x200002f0
 8001224:	40006400 	.word	0x40006400

08001228 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800122c:	4b16      	ldr	r3, [pc, #88]	; (8001288 <MX_CAN2_Init+0x60>)
 800122e:	4a17      	ldr	r2, [pc, #92]	; (800128c <MX_CAN2_Init+0x64>)
 8001230:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <MX_CAN2_Init+0x60>)
 8001234:	2210      	movs	r2, #16
 8001236:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001238:	4b13      	ldr	r3, [pc, #76]	; (8001288 <MX_CAN2_Init+0x60>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800123e:	4b12      	ldr	r3, [pc, #72]	; (8001288 <MX_CAN2_Init+0x60>)
 8001240:	2200      	movs	r2, #0
 8001242:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001244:	4b10      	ldr	r3, [pc, #64]	; (8001288 <MX_CAN2_Init+0x60>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <MX_CAN2_Init+0x60>)
 800124c:	2200      	movs	r2, #0
 800124e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001250:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <MX_CAN2_Init+0x60>)
 8001252:	2200      	movs	r2, #0
 8001254:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <MX_CAN2_Init+0x60>)
 8001258:	2200      	movs	r2, #0
 800125a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <MX_CAN2_Init+0x60>)
 800125e:	2200      	movs	r2, #0
 8001260:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <MX_CAN2_Init+0x60>)
 8001264:	2200      	movs	r2, #0
 8001266:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <MX_CAN2_Init+0x60>)
 800126a:	2200      	movs	r2, #0
 800126c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <MX_CAN2_Init+0x60>)
 8001270:	2200      	movs	r2, #0
 8001272:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001274:	4804      	ldr	r0, [pc, #16]	; (8001288 <MX_CAN2_Init+0x60>)
 8001276:	f001 fd71 	bl	8002d5c <HAL_CAN_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8001280:	f000 fcce 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000318 	.word	0x20000318
 800128c:	40006800 	.word	0x40006800

08001290 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08e      	sub	sp, #56	; 0x38
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a43      	ldr	r2, [pc, #268]	; (80013bc <HAL_CAN_MspInit+0x12c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d131      	bne.n	8001316 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80012b2:	4b43      	ldr	r3, [pc, #268]	; (80013c0 <HAL_CAN_MspInit+0x130>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	3301      	adds	r3, #1
 80012b8:	4a41      	ldr	r2, [pc, #260]	; (80013c0 <HAL_CAN_MspInit+0x130>)
 80012ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80012bc:	4b40      	ldr	r3, [pc, #256]	; (80013c0 <HAL_CAN_MspInit+0x130>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d10b      	bne.n	80012dc <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80012c4:	4b3f      	ldr	r3, [pc, #252]	; (80013c4 <HAL_CAN_MspInit+0x134>)
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	4a3e      	ldr	r2, [pc, #248]	; (80013c4 <HAL_CAN_MspInit+0x134>)
 80012ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012ce:	6413      	str	r3, [r2, #64]	; 0x40
 80012d0:	4b3c      	ldr	r3, [pc, #240]	; (80013c4 <HAL_CAN_MspInit+0x134>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d8:	623b      	str	r3, [r7, #32]
 80012da:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012dc:	4b39      	ldr	r3, [pc, #228]	; (80013c4 <HAL_CAN_MspInit+0x134>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	4a38      	ldr	r2, [pc, #224]	; (80013c4 <HAL_CAN_MspInit+0x134>)
 80012e2:	f043 0308 	orr.w	r3, r3, #8
 80012e6:	6313      	str	r3, [r2, #48]	; 0x30
 80012e8:	4b36      	ldr	r3, [pc, #216]	; (80013c4 <HAL_CAN_MspInit+0x134>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	f003 0308 	and.w	r3, r3, #8
 80012f0:	61fb      	str	r3, [r7, #28]
 80012f2:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012f4:	2303      	movs	r3, #3
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001304:	2309      	movs	r3, #9
 8001306:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130c:	4619      	mov	r1, r3
 800130e:	482e      	ldr	r0, [pc, #184]	; (80013c8 <HAL_CAN_MspInit+0x138>)
 8001310:	f002 fad8 	bl	80038c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001314:	e04e      	b.n	80013b4 <HAL_CAN_MspInit+0x124>
  else if(canHandle->Instance==CAN2)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a2c      	ldr	r2, [pc, #176]	; (80013cc <HAL_CAN_MspInit+0x13c>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d149      	bne.n	80013b4 <HAL_CAN_MspInit+0x124>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001320:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <HAL_CAN_MspInit+0x134>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	4a27      	ldr	r2, [pc, #156]	; (80013c4 <HAL_CAN_MspInit+0x134>)
 8001326:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800132a:	6413      	str	r3, [r2, #64]	; 0x40
 800132c:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <HAL_CAN_MspInit+0x134>)
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001334:	61bb      	str	r3, [r7, #24]
 8001336:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001338:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <HAL_CAN_MspInit+0x134>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	4a21      	ldr	r2, [pc, #132]	; (80013c4 <HAL_CAN_MspInit+0x134>)
 800133e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001342:	6413      	str	r3, [r2, #64]	; 0x40
 8001344:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <HAL_CAN_MspInit+0x134>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001350:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <HAL_CAN_MspInit+0x130>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	3301      	adds	r3, #1
 8001356:	4a1a      	ldr	r2, [pc, #104]	; (80013c0 <HAL_CAN_MspInit+0x130>)
 8001358:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800135a:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <HAL_CAN_MspInit+0x130>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d10b      	bne.n	800137a <HAL_CAN_MspInit+0xea>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <HAL_CAN_MspInit+0x134>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	4a17      	ldr	r2, [pc, #92]	; (80013c4 <HAL_CAN_MspInit+0x134>)
 8001368:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800136c:	6413      	str	r3, [r2, #64]	; 0x40
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_CAN_MspInit+0x134>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_CAN_MspInit+0x134>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a11      	ldr	r2, [pc, #68]	; (80013c4 <HAL_CAN_MspInit+0x134>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_CAN_MspInit+0x134>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001392:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80013a4:	2309      	movs	r3, #9
 80013a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ac:	4619      	mov	r1, r3
 80013ae:	4808      	ldr	r0, [pc, #32]	; (80013d0 <HAL_CAN_MspInit+0x140>)
 80013b0:	f002 fa88 	bl	80038c4 <HAL_GPIO_Init>
}
 80013b4:	bf00      	nop
 80013b6:	3738      	adds	r7, #56	; 0x38
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40006400 	.word	0x40006400
 80013c0:	20000340 	.word	0x20000340
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020c00 	.word	0x40020c00
 80013cc:	40006800 	.word	0x40006800
 80013d0:	40020400 	.word	0x40020400

080013d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <MX_DMA_Init+0x48>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a0f      	ldr	r2, [pc, #60]	; (800141c <MX_DMA_Init+0x48>)
 80013e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b0d      	ldr	r3, [pc, #52]	; (800141c <MX_DMA_Init+0x48>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2100      	movs	r1, #0
 80013f6:	2038      	movs	r0, #56	; 0x38
 80013f8:	f001 fe87 	bl	800310a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013fc:	2038      	movs	r0, #56	; 0x38
 80013fe:	f001 fea0 	bl	8003142 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2100      	movs	r1, #0
 8001406:	2044      	movs	r0, #68	; 0x44
 8001408:	f001 fe7f 	bl	800310a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800140c:	2044      	movs	r0, #68	; 0x44
 800140e:	f001 fe98 	bl	8003142 <HAL_NVIC_EnableIRQ>

}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800

08001420 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001420:	b480      	push	{r7}
 8001422:	b089      	sub	sp, #36	; 0x24
 8001424:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001426:	4b33      	ldr	r3, [pc, #204]	; (80014f4 <MX_GPIO_Init+0xd4>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a32      	ldr	r2, [pc, #200]	; (80014f4 <MX_GPIO_Init+0xd4>)
 800142c:	f043 0304 	orr.w	r3, r3, #4
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b30      	ldr	r3, [pc, #192]	; (80014f4 <MX_GPIO_Init+0xd4>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	61fb      	str	r3, [r7, #28]
 800143c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800143e:	4b2d      	ldr	r3, [pc, #180]	; (80014f4 <MX_GPIO_Init+0xd4>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a2c      	ldr	r2, [pc, #176]	; (80014f4 <MX_GPIO_Init+0xd4>)
 8001444:	f043 0320 	orr.w	r3, r3, #32
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b2a      	ldr	r3, [pc, #168]	; (80014f4 <MX_GPIO_Init+0xd4>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0320 	and.w	r3, r3, #32
 8001452:	61bb      	str	r3, [r7, #24]
 8001454:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001456:	4b27      	ldr	r3, [pc, #156]	; (80014f4 <MX_GPIO_Init+0xd4>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a26      	ldr	r2, [pc, #152]	; (80014f4 <MX_GPIO_Init+0xd4>)
 800145c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b24      	ldr	r3, [pc, #144]	; (80014f4 <MX_GPIO_Init+0xd4>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	4b21      	ldr	r3, [pc, #132]	; (80014f4 <MX_GPIO_Init+0xd4>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a20      	ldr	r2, [pc, #128]	; (80014f4 <MX_GPIO_Init+0xd4>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <MX_GPIO_Init+0xd4>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001486:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <MX_GPIO_Init+0xd4>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a1a      	ldr	r2, [pc, #104]	; (80014f4 <MX_GPIO_Init+0xd4>)
 800148c:	f043 0310 	orr.w	r3, r3, #16
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <MX_GPIO_Init+0xd4>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0310 	and.w	r3, r3, #16
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <MX_GPIO_Init+0xd4>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a14      	ldr	r2, [pc, #80]	; (80014f4 <MX_GPIO_Init+0xd4>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <MX_GPIO_Init+0xd4>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <MX_GPIO_Init+0xd4>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a0e      	ldr	r2, [pc, #56]	; (80014f4 <MX_GPIO_Init+0xd4>)
 80014bc:	f043 0308 	orr.w	r3, r3, #8
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <MX_GPIO_Init+0xd4>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <MX_GPIO_Init+0xd4>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <MX_GPIO_Init+0xd4>)
 80014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <MX_GPIO_Init+0xd4>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]

}
 80014e6:	bf00      	nop
 80014e8:	3724      	adds	r7, #36	; 0x24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800

080014f8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c3;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <MX_I2C1_Init+0x74>)
 80014fe:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <MX_I2C1_Init+0x78>)
 8001500:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <MX_I2C1_Init+0x74>)
 8001504:	4a1b      	ldr	r2, [pc, #108]	; (8001574 <MX_I2C1_Init+0x7c>)
 8001506:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001508:	4b18      	ldr	r3, [pc, #96]	; (800156c <MX_I2C1_Init+0x74>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800150e:	4b17      	ldr	r3, [pc, #92]	; (800156c <MX_I2C1_Init+0x74>)
 8001510:	2201      	movs	r2, #1
 8001512:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <MX_I2C1_Init+0x74>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800151a:	4b14      	ldr	r3, [pc, #80]	; (800156c <MX_I2C1_Init+0x74>)
 800151c:	2200      	movs	r2, #0
 800151e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <MX_I2C1_Init+0x74>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_I2C1_Init+0x74>)
 8001528:	2200      	movs	r2, #0
 800152a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <MX_I2C1_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001532:	480e      	ldr	r0, [pc, #56]	; (800156c <MX_I2C1_Init+0x74>)
 8001534:	f002 fb72 	bl	8003c1c <HAL_I2C_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800153e:	f000 fb6f 	bl	8001c20 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001542:	2100      	movs	r1, #0
 8001544:	4809      	ldr	r0, [pc, #36]	; (800156c <MX_I2C1_Init+0x74>)
 8001546:	f003 facb 	bl	8004ae0 <HAL_I2CEx_ConfigAnalogFilter>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001550:	f000 fb66 	bl	8001c20 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001554:	2100      	movs	r1, #0
 8001556:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_I2C1_Init+0x74>)
 8001558:	f003 fb0d 	bl	8004b76 <HAL_I2CEx_ConfigDigitalFilter>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001562:	f000 fb5d 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000344 	.word	0x20000344
 8001570:	40005400 	.word	0x40005400
 8001574:	00300f38 	.word	0x00300f38

08001578 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800157c:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <MX_I2C2_Init+0x74>)
 800157e:	4a1c      	ldr	r2, [pc, #112]	; (80015f0 <MX_I2C2_Init+0x78>)
 8001580:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00300F38;
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <MX_I2C2_Init+0x74>)
 8001584:	4a1b      	ldr	r2, [pc, #108]	; (80015f4 <MX_I2C2_Init+0x7c>)
 8001586:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001588:	4b18      	ldr	r3, [pc, #96]	; (80015ec <MX_I2C2_Init+0x74>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800158e:	4b17      	ldr	r3, [pc, #92]	; (80015ec <MX_I2C2_Init+0x74>)
 8001590:	2201      	movs	r2, #1
 8001592:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001594:	4b15      	ldr	r3, [pc, #84]	; (80015ec <MX_I2C2_Init+0x74>)
 8001596:	2200      	movs	r2, #0
 8001598:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800159a:	4b14      	ldr	r3, [pc, #80]	; (80015ec <MX_I2C2_Init+0x74>)
 800159c:	2200      	movs	r2, #0
 800159e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <MX_I2C2_Init+0x74>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <MX_I2C2_Init+0x74>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <MX_I2C2_Init+0x74>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015b2:	480e      	ldr	r0, [pc, #56]	; (80015ec <MX_I2C2_Init+0x74>)
 80015b4:	f002 fb32 	bl	8003c1c <HAL_I2C_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80015be:	f000 fb2f 	bl	8001c20 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015c2:	2100      	movs	r1, #0
 80015c4:	4809      	ldr	r0, [pc, #36]	; (80015ec <MX_I2C2_Init+0x74>)
 80015c6:	f003 fa8b 	bl	8004ae0 <HAL_I2CEx_ConfigAnalogFilter>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80015d0:	f000 fb26 	bl	8001c20 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80015d4:	2100      	movs	r1, #0
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <MX_I2C2_Init+0x74>)
 80015d8:	f003 facd 	bl	8004b76 <HAL_I2CEx_ConfigDigitalFilter>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80015e2:	f000 fb1d 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000390 	.word	0x20000390
 80015f0:	40005800 	.word	0x40005800
 80015f4:	00300f38 	.word	0x00300f38

080015f8 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <MX_I2C3_Init+0x74>)
 80015fe:	4a1c      	ldr	r2, [pc, #112]	; (8001670 <MX_I2C3_Init+0x78>)
 8001600:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00300F38;
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <MX_I2C3_Init+0x74>)
 8001604:	4a1b      	ldr	r2, [pc, #108]	; (8001674 <MX_I2C3_Init+0x7c>)
 8001606:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001608:	4b18      	ldr	r3, [pc, #96]	; (800166c <MX_I2C3_Init+0x74>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800160e:	4b17      	ldr	r3, [pc, #92]	; (800166c <MX_I2C3_Init+0x74>)
 8001610:	2201      	movs	r2, #1
 8001612:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001614:	4b15      	ldr	r3, [pc, #84]	; (800166c <MX_I2C3_Init+0x74>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800161a:	4b14      	ldr	r3, [pc, #80]	; (800166c <MX_I2C3_Init+0x74>)
 800161c:	2200      	movs	r2, #0
 800161e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <MX_I2C3_Init+0x74>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <MX_I2C3_Init+0x74>)
 8001628:	2200      	movs	r2, #0
 800162a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <MX_I2C3_Init+0x74>)
 800162e:	2200      	movs	r2, #0
 8001630:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001632:	480e      	ldr	r0, [pc, #56]	; (800166c <MX_I2C3_Init+0x74>)
 8001634:	f002 faf2 	bl	8003c1c <HAL_I2C_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800163e:	f000 faef 	bl	8001c20 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001642:	2100      	movs	r1, #0
 8001644:	4809      	ldr	r0, [pc, #36]	; (800166c <MX_I2C3_Init+0x74>)
 8001646:	f003 fa4b 	bl	8004ae0 <HAL_I2CEx_ConfigAnalogFilter>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001650:	f000 fae6 	bl	8001c20 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001654:	2100      	movs	r1, #0
 8001656:	4805      	ldr	r0, [pc, #20]	; (800166c <MX_I2C3_Init+0x74>)
 8001658:	f003 fa8d 	bl	8004b76 <HAL_I2CEx_ConfigDigitalFilter>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001662:	f000 fadd 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200003dc 	.word	0x200003dc
 8001670:	40005c00 	.word	0x40005c00
 8001674:	00300f38 	.word	0x00300f38

08001678 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <MX_I2C4_Init+0x74>)
 800167e:	4a1c      	ldr	r2, [pc, #112]	; (80016f0 <MX_I2C4_Init+0x78>)
 8001680:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00300F38;
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <MX_I2C4_Init+0x74>)
 8001684:	4a1b      	ldr	r2, [pc, #108]	; (80016f4 <MX_I2C4_Init+0x7c>)
 8001686:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001688:	4b18      	ldr	r3, [pc, #96]	; (80016ec <MX_I2C4_Init+0x74>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <MX_I2C4_Init+0x74>)
 8001690:	2201      	movs	r2, #1
 8001692:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001694:	4b15      	ldr	r3, [pc, #84]	; (80016ec <MX_I2C4_Init+0x74>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800169a:	4b14      	ldr	r3, [pc, #80]	; (80016ec <MX_I2C4_Init+0x74>)
 800169c:	2200      	movs	r2, #0
 800169e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <MX_I2C4_Init+0x74>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MX_I2C4_Init+0x74>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <MX_I2C4_Init+0x74>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80016b2:	480e      	ldr	r0, [pc, #56]	; (80016ec <MX_I2C4_Init+0x74>)
 80016b4:	f002 fab2 	bl	8003c1c <HAL_I2C_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80016be:	f000 faaf 	bl	8001c20 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016c2:	2100      	movs	r1, #0
 80016c4:	4809      	ldr	r0, [pc, #36]	; (80016ec <MX_I2C4_Init+0x74>)
 80016c6:	f003 fa0b 	bl	8004ae0 <HAL_I2CEx_ConfigAnalogFilter>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80016d0:	f000 faa6 	bl	8001c20 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80016d4:	2100      	movs	r1, #0
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <MX_I2C4_Init+0x74>)
 80016d8:	f003 fa4d 	bl	8004b76 <HAL_I2CEx_ConfigDigitalFilter>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80016e2:	f000 fa9d 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000428 	.word	0x20000428
 80016f0:	40006000 	.word	0x40006000
 80016f4:	00300f38 	.word	0x00300f38

080016f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b090      	sub	sp, #64	; 0x40
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a6b      	ldr	r2, [pc, #428]	; (80018c4 <HAL_I2C_MspInit+0x1cc>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d128      	bne.n	800176c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	4b6b      	ldr	r3, [pc, #428]	; (80018c8 <HAL_I2C_MspInit+0x1d0>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a6a      	ldr	r2, [pc, #424]	; (80018c8 <HAL_I2C_MspInit+0x1d0>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b68      	ldr	r3, [pc, #416]	; (80018c8 <HAL_I2C_MspInit+0x1d0>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001730:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MLX2_SCL_Pin|MLX2_SDA_Pin;
 8001732:	23c0      	movs	r3, #192	; 0xc0
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001736:	2312      	movs	r3, #18
 8001738:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173e:	2303      	movs	r3, #3
 8001740:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001742:	2304      	movs	r3, #4
 8001744:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001746:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800174a:	4619      	mov	r1, r3
 800174c:	485f      	ldr	r0, [pc, #380]	; (80018cc <HAL_I2C_MspInit+0x1d4>)
 800174e:	f002 f8b9 	bl	80038c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001752:	4b5d      	ldr	r3, [pc, #372]	; (80018c8 <HAL_I2C_MspInit+0x1d0>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	4a5c      	ldr	r2, [pc, #368]	; (80018c8 <HAL_I2C_MspInit+0x1d0>)
 8001758:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800175c:	6413      	str	r3, [r2, #64]	; 0x40
 800175e:	4b5a      	ldr	r3, [pc, #360]	; (80018c8 <HAL_I2C_MspInit+0x1d0>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 800176a:	e0a7      	b.n	80018bc <HAL_I2C_MspInit+0x1c4>
  else if(i2cHandle->Instance==I2C2)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a57      	ldr	r2, [pc, #348]	; (80018d0 <HAL_I2C_MspInit+0x1d8>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d128      	bne.n	80017c8 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001776:	4b54      	ldr	r3, [pc, #336]	; (80018c8 <HAL_I2C_MspInit+0x1d0>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a53      	ldr	r2, [pc, #332]	; (80018c8 <HAL_I2C_MspInit+0x1d0>)
 800177c:	f043 0320 	orr.w	r3, r3, #32
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b51      	ldr	r3, [pc, #324]	; (80018c8 <HAL_I2C_MspInit+0x1d0>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0320 	and.w	r3, r3, #32
 800178a:	623b      	str	r3, [r7, #32]
 800178c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GYRO_SDA_Pin|GYRO_SCL_Pin;
 800178e:	2303      	movs	r3, #3
 8001790:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001792:	2312      	movs	r3, #18
 8001794:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179a:	2303      	movs	r3, #3
 800179c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800179e:	2304      	movs	r3, #4
 80017a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a6:	4619      	mov	r1, r3
 80017a8:	484a      	ldr	r0, [pc, #296]	; (80018d4 <HAL_I2C_MspInit+0x1dc>)
 80017aa:	f002 f88b 	bl	80038c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017ae:	4b46      	ldr	r3, [pc, #280]	; (80018c8 <HAL_I2C_MspInit+0x1d0>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	4a45      	ldr	r2, [pc, #276]	; (80018c8 <HAL_I2C_MspInit+0x1d0>)
 80017b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017b8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ba:	4b43      	ldr	r3, [pc, #268]	; (80018c8 <HAL_I2C_MspInit+0x1d0>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c2:	61fb      	str	r3, [r7, #28]
 80017c4:	69fb      	ldr	r3, [r7, #28]
}
 80017c6:	e079      	b.n	80018bc <HAL_I2C_MspInit+0x1c4>
  else if(i2cHandle->Instance==I2C3)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a42      	ldr	r2, [pc, #264]	; (80018d8 <HAL_I2C_MspInit+0x1e0>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d146      	bne.n	8001860 <HAL_I2C_MspInit+0x168>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d2:	4b3d      	ldr	r3, [pc, #244]	; (80018c8 <HAL_I2C_MspInit+0x1d0>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a3c      	ldr	r2, [pc, #240]	; (80018c8 <HAL_I2C_MspInit+0x1d0>)
 80017d8:	f043 0304 	orr.w	r3, r3, #4
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b3a      	ldr	r3, [pc, #232]	; (80018c8 <HAL_I2C_MspInit+0x1d0>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	61bb      	str	r3, [r7, #24]
 80017e8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	4b37      	ldr	r3, [pc, #220]	; (80018c8 <HAL_I2C_MspInit+0x1d0>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a36      	ldr	r2, [pc, #216]	; (80018c8 <HAL_I2C_MspInit+0x1d0>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b34      	ldr	r3, [pc, #208]	; (80018c8 <HAL_I2C_MspInit+0x1d0>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MLX1_SDA_Pin;
 8001802:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001808:	2312      	movs	r3, #18
 800180a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001810:	2303      	movs	r3, #3
 8001812:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001814:	2304      	movs	r3, #4
 8001816:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(MLX1_SDA_GPIO_Port, &GPIO_InitStruct);
 8001818:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800181c:	4619      	mov	r1, r3
 800181e:	482f      	ldr	r0, [pc, #188]	; (80018dc <HAL_I2C_MspInit+0x1e4>)
 8001820:	f002 f850 	bl	80038c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MLX1_SCL_Pin;
 8001824:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800182a:	2312      	movs	r3, #18
 800182c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001832:	2303      	movs	r3, #3
 8001834:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001836:	2304      	movs	r3, #4
 8001838:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(MLX1_SCL_GPIO_Port, &GPIO_InitStruct);
 800183a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800183e:	4619      	mov	r1, r3
 8001840:	4827      	ldr	r0, [pc, #156]	; (80018e0 <HAL_I2C_MspInit+0x1e8>)
 8001842:	f002 f83f 	bl	80038c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001846:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <HAL_I2C_MspInit+0x1d0>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	4a1f      	ldr	r2, [pc, #124]	; (80018c8 <HAL_I2C_MspInit+0x1d0>)
 800184c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001850:	6413      	str	r3, [r2, #64]	; 0x40
 8001852:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <HAL_I2C_MspInit+0x1d0>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]
}
 800185e:	e02d      	b.n	80018bc <HAL_I2C_MspInit+0x1c4>
  else if(i2cHandle->Instance==I2C4)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a1f      	ldr	r2, [pc, #124]	; (80018e4 <HAL_I2C_MspInit+0x1ec>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d128      	bne.n	80018bc <HAL_I2C_MspInit+0x1c4>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <HAL_I2C_MspInit+0x1d0>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a16      	ldr	r2, [pc, #88]	; (80018c8 <HAL_I2C_MspInit+0x1d0>)
 8001870:	f043 0320 	orr.w	r3, r3, #32
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <HAL_I2C_MspInit+0x1d0>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0320 	and.w	r3, r3, #32
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001882:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001888:	2312      	movs	r3, #18
 800188a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001890:	2303      	movs	r3, #3
 8001892:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001894:	2304      	movs	r3, #4
 8001896:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800189c:	4619      	mov	r1, r3
 800189e:	480d      	ldr	r0, [pc, #52]	; (80018d4 <HAL_I2C_MspInit+0x1dc>)
 80018a0:	f002 f810 	bl	80038c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_I2C_MspInit+0x1d0>)
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <HAL_I2C_MspInit+0x1d0>)
 80018aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ae:	6413      	str	r3, [r2, #64]	; 0x40
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_I2C_MspInit+0x1d0>)
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	68bb      	ldr	r3, [r7, #8]
}
 80018bc:	bf00      	nop
 80018be:	3740      	adds	r7, #64	; 0x40
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40005400 	.word	0x40005400
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40020400 	.word	0x40020400
 80018d0:	40005800 	.word	0x40005800
 80018d4:	40021400 	.word	0x40021400
 80018d8:	40005c00 	.word	0x40005c00
 80018dc:	40020800 	.word	0x40020800
 80018e0:	40020000 	.word	0x40020000
 80018e4:	40006000 	.word	0x40006000

080018e8 <HAL_TIM_PeriodElapsedCallback>:
	  }

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]

  if (htim == &htim14 )
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a1b      	ldr	r2, [pc, #108]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d12d      	bne.n	8001954 <HAL_TIM_PeriodElapsedCallback+0x6c>
  {
	 statusRegister.checkTime -= 25;
 80018f8:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80018fa:	889b      	ldrh	r3, [r3, #4]
 80018fc:	3b19      	subs	r3, #25
 80018fe:	b29a      	uxth	r2, r3
 8001900:	4b18      	ldr	r3, [pc, #96]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001902:	809a      	strh	r2, [r3, #4]
	 if( statusRegister.checkTime <= 0)
 8001904:	4b17      	ldr	r3, [pc, #92]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001906:	889b      	ldrh	r3, [r3, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d103      	bne.n	8001914 <HAL_TIM_PeriodElapsedCallback+0x2c>
	 {
		 //Check all sensors
		 statusRegister.checkTime = SENSOR_ALL_CHECK_TIME;
 800190c:	4b15      	ldr	r3, [pc, #84]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800190e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001912:	809a      	strh	r2, [r3, #4]
	 }
	 MLXLF.timeToNextRead -= 25;
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	3b19      	subs	r3, #25
 800191a:	4a13      	ldr	r2, [pc, #76]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800191c:	6213      	str	r3, [r2, #32]
	 if(MLXLF.timeToNextRead <= 0)
 800191e:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	2b00      	cmp	r3, #0
 8001924:	dc06      	bgt.n	8001934 <HAL_TIM_PeriodElapsedCallback+0x4c>
	 {
		 MLXLF.dataReady = 1;
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001928:	2201      	movs	r2, #1
 800192a:	619a      	str	r2, [r3, #24]
		 MLXLF.timeToNextRead = MLXDATARATE;
 800192c:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800192e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001932:	621a      	str	r2, [r3, #32]
	 }
	 gyro.timeToNextRead -= 25;
 8001934:	4b0d      	ldr	r3, [pc, #52]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	3b19      	subs	r3, #25
 800193a:	4a0c      	ldr	r2, [pc, #48]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x84>)
 800193c:	6213      	str	r3, [r2, #32]
	 if(gyro.timeToNextRead <= 0)
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	2b00      	cmp	r3, #0
 8001944:	dc06      	bgt.n	8001954 <HAL_TIM_PeriodElapsedCallback+0x6c>
	 {
		 gyro.dataReady = 1;
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001948:	2201      	movs	r2, #1
 800194a:	619a      	str	r2, [r3, #24]
		 gyro.timeToNextRead = MLXDATARATE;
 800194c:	4b07      	ldr	r3, [pc, #28]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x84>)
 800194e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001952:	621a      	str	r2, [r3, #32]
	 }
  }
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	20002620 	.word	0x20002620
 8001964:	20000474 	.word	0x20000474
 8001968:	20000688 	.word	0x20000688
 800196c:	200005e0 	.word	0x200005e0

08001970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800197a:	f000 fed1 	bl	8002720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800197e:	f000 f8a5 	bl	8001acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001982:	f7ff fd4d 	bl	8001420 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001986:	f000 fdf9 	bl	800257c <MX_USART3_UART_Init>
  MX_FATFS_Init();
 800198a:	f008 f9c7 	bl	8009d1c <MX_FATFS_Init>
  MX_DMA_Init();
 800198e:	f7ff fd21 	bl	80013d4 <MX_DMA_Init>
  MX_I2C1_Init();
 8001992:	f7ff fdb1 	bl	80014f8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001996:	f7ff fdef 	bl	8001578 <MX_I2C2_Init>
  MX_UART7_Init();
 800199a:	f000 fdbf 	bl	800251c <MX_UART7_Init>
  MX_SDMMC2_SD_Init();
 800199e:	f000 f9bb 	bl	8001d18 <MX_SDMMC2_SD_Init>
  MX_RTC_Init();
 80019a2:	f000 f943 	bl	8001c2c <MX_RTC_Init>
  MX_ADC1_Init();
 80019a6:	f7ff f9cf 	bl	8000d48 <MX_ADC1_Init>
  MX_ADC2_Init();
 80019aa:	f7ff fa1f 	bl	8000dec <MX_ADC2_Init>
  MX_ADC3_Init();
 80019ae:	f7ff fa6f 	bl	8000e90 <MX_ADC3_Init>
  MX_CAN1_Init();
 80019b2:	f7ff fc05 	bl	80011c0 <MX_CAN1_Init>
  MX_CAN2_Init();
 80019b6:	f7ff fc37 	bl	8001228 <MX_CAN2_Init>
  MX_I2C3_Init();
 80019ba:	f7ff fe1d 	bl	80015f8 <MX_I2C3_Init>
  MX_I2C4_Init();
 80019be:	f7ff fe5b 	bl	8001678 <MX_I2C4_Init>
  MX_TIM3_Init();
 80019c2:	f000 fc11 	bl	80021e8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80019c6:	f000 fc81 	bl	80022cc <MX_TIM4_Init>
  MX_TIM14_Init();
 80019ca:	f000 fcf1 	bl	80023b0 <MX_TIM14_Init>

  FATFS fileSystem;

  RTC_TimeTypeDef time;
  RTC_DateTypeDef date;
  statusRegister.checkTime = SENSOR_ALL_CHECK_TIME;
 80019ce:	4b38      	ldr	r3, [pc, #224]	; (8001ab0 <main+0x140>)
 80019d0:	f242 7210 	movw	r2, #10000	; 0x2710
 80019d4:	809a      	strh	r2, [r3, #4]
  HAL_TIM_Base_Start_IT(&htim14);
 80019d6:	4837      	ldr	r0, [pc, #220]	; (8001ab4 <main+0x144>)
 80019d8:	f006 f89e 	bl	8007b18 <HAL_TIM_Base_Start_IT>
  HAL_Delay(3000);
 80019dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80019e0:	f000 ff04 	bl	80027ec <HAL_Delay>
  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80019e4:	4b34      	ldr	r3, [pc, #208]	; (8001ab8 <main+0x148>)
 80019e6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80019ea:	f103 0318 	add.w	r3, r3, #24
 80019ee:	443b      	add	r3, r7
 80019f0:	2200      	movs	r2, #0
 80019f2:	4619      	mov	r1, r3
 80019f4:	4831      	ldr	r0, [pc, #196]	; (8001abc <main+0x14c>)
 80019f6:	f004 fb27 	bl	8006048 <HAL_RTC_GetTime>
  printf("Aktualny czas: %02d:%02d:%02d\n", time.Hours, time.Minutes, time.Seconds);
 80019fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019fe:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 8001a02:	4619      	mov	r1, r3
 8001a04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a08:	f813 3c4f 	ldrb.w	r3, [r3, #-79]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a12:	f813 3c4e 	ldrb.w	r3, [r3, #-78]
 8001a16:	482a      	ldr	r0, [pc, #168]	; (8001ac0 <main+0x150>)
 8001a18:	f009 fb8a 	bl	800b130 <iprintf>

  HAL_Delay(200);
 8001a1c:	20c8      	movs	r0, #200	; 0xc8
 8001a1e:	f000 fee5 	bl	80027ec <HAL_Delay>
  I2CScanner();
 8001a22:	f7ff fb3b 	bl	800109c <I2CScanner>
  MPU9250_Init();
 8001a26:	f7ff f8c5 	bl	8000bb4 <MPU9250_Init>


  HAL_Delay(1000);
 8001a2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a2e:	f000 fedd 	bl	80027ec <HAL_Delay>



	//imu_9dof_get_data(&gyro.data);
	//saveGyroData(&gyro);
	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001a32:	4b21      	ldr	r3, [pc, #132]	; (8001ab8 <main+0x148>)
 8001a34:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001a38:	f103 0318 	add.w	r3, r3, #24
 8001a3c:	443b      	add	r3, r7
 8001a3e:	2200      	movs	r2, #0
 8001a40:	4619      	mov	r1, r3
 8001a42:	481e      	ldr	r0, [pc, #120]	; (8001abc <main+0x14c>)
 8001a44:	f004 fb00 	bl	8006048 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001a48:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <main+0x154>)
 8001a4a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001a4e:	f103 0318 	add.w	r3, r3, #24
 8001a52:	443b      	add	r3, r7
 8001a54:	2200      	movs	r2, #0
 8001a56:	4619      	mov	r1, r3
 8001a58:	4818      	ldr	r0, [pc, #96]	; (8001abc <main+0x14c>)
 8001a5a:	f004 fbfb 	bl	8006254 <HAL_RTC_GetDate>
	  int mili = ((time.SecondFraction-time.SubSeconds)/((float)time.SecondFraction+1) * 1000);
 8001a5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a62:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8001a66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a6a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	ee07 3a90 	vmov	s15, r3
 8001a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a78:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a7c:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001a80:	ee07 3a90 	vmov	s15, r3
 8001a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a94:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001ac8 <main+0x158>
 8001a98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aa0:	ee17 3a90 	vmov	r3, s15
 8001aa4:	f241 0254 	movw	r2, #4180	; 0x1054
 8001aa8:	443a      	add	r2, r7
 8001aaa:	6013      	str	r3, [r2, #0]
  {
 8001aac:	e7c1      	b.n	8001a32 <main+0xc2>
 8001aae:	bf00      	nop
 8001ab0:	20000474 	.word	0x20000474
 8001ab4:	20002620 	.word	0x20002620
 8001ab8:	ffffefb0 	.word	0xffffefb0
 8001abc:	2000047c 	.word	0x2000047c
 8001ac0:	0800ea1c 	.word	0x0800ea1c
 8001ac4:	ffffefac 	.word	0xffffefac
 8001ac8:	447a0000 	.word	0x447a0000

08001acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b0b8      	sub	sp, #224	; 0xe0
 8001ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ad2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ad6:	2234      	movs	r2, #52	; 0x34
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f008 fbf8 	bl	800a2d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001af0:	f107 0308 	add.w	r3, r7, #8
 8001af4:	2290      	movs	r2, #144	; 0x90
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f008 fbe9 	bl	800a2d0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001afe:	f003 f887 	bl	8004c10 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001b02:	4b44      	ldr	r3, [pc, #272]	; (8001c14 <SystemClock_Config+0x148>)
 8001b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b06:	4a43      	ldr	r2, [pc, #268]	; (8001c14 <SystemClock_Config+0x148>)
 8001b08:	f023 0318 	bic.w	r3, r3, #24
 8001b0c:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	4b41      	ldr	r3, [pc, #260]	; (8001c14 <SystemClock_Config+0x148>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	4a40      	ldr	r2, [pc, #256]	; (8001c14 <SystemClock_Config+0x148>)
 8001b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b18:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1a:	4b3e      	ldr	r3, [pc, #248]	; (8001c14 <SystemClock_Config+0x148>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b26:	4b3c      	ldr	r3, [pc, #240]	; (8001c18 <SystemClock_Config+0x14c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b2e:	4a3a      	ldr	r2, [pc, #232]	; (8001c18 <SystemClock_Config+0x14c>)
 8001b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	4b38      	ldr	r3, [pc, #224]	; (8001c18 <SystemClock_Config+0x14c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001b42:	2305      	movs	r3, #5
 8001b44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b50:	2301      	movs	r3, #1
 8001b52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b56:	2302      	movs	r3, #2
 8001b58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001b64:	2319      	movs	r3, #25
 8001b66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001b6a:	23c0      	movs	r3, #192	; 0xc0
 8001b6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001b70:	2306      	movs	r3, #6
 8001b72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b76:	2304      	movs	r3, #4
 8001b78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b82:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b86:	4618      	mov	r0, r3
 8001b88:	f003 f852 	bl	8004c30 <HAL_RCC_OscConfig>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001b92:	f000 f845 	bl	8001c20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b96:	230f      	movs	r3, #15
 8001b98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001bb4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001bb8:	2101      	movs	r1, #1
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f003 fae6 	bl	800518c <HAL_RCC_ClockConfig>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8001bc6:	f000 f82b 	bl	8001c20 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8001bca:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <SystemClock_Config+0x150>)
 8001bcc:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_I2C4|RCC_PERIPHCLK_SDMMC2
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001bce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bd2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001be0:	2300      	movs	r3, #0
 8001be2:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001be4:	2300      	movs	r3, #0
 8001be6:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001be8:	2300      	movs	r3, #0
 8001bea:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bf8:	f107 0308 	add.w	r3, r7, #8
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f003 fcab 	bl	8005558 <HAL_RCCEx_PeriphCLKConfig>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <SystemClock_Config+0x140>
  {
    Error_Handler();
 8001c08:	f000 f80a 	bl	8001c20 <Error_Handler>
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	37e0      	adds	r7, #224	; 0xe0
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40007000 	.word	0x40007000
 8001c1c:	0423d120 	.word	0x0423d120

08001c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c24:	b672      	cpsid	i
}
 8001c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <Error_Handler+0x8>
	...

08001c2c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c32:	f107 0308 	add.w	r3, r7, #8
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]
 8001c40:	611a      	str	r2, [r3, #16]
 8001c42:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001c44:	2300      	movs	r3, #0
 8001c46:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c48:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <MX_RTC_Init+0xb0>)
 8001c4a:	4a25      	ldr	r2, [pc, #148]	; (8001ce0 <MX_RTC_Init+0xb4>)
 8001c4c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c4e:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <MX_RTC_Init+0xb0>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c54:	4b21      	ldr	r3, [pc, #132]	; (8001cdc <MX_RTC_Init+0xb0>)
 8001c56:	227f      	movs	r2, #127	; 0x7f
 8001c58:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c5a:	4b20      	ldr	r3, [pc, #128]	; (8001cdc <MX_RTC_Init+0xb0>)
 8001c5c:	22ff      	movs	r2, #255	; 0xff
 8001c5e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c60:	4b1e      	ldr	r3, [pc, #120]	; (8001cdc <MX_RTC_Init+0xb0>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c66:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <MX_RTC_Init+0xb0>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c6c:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <MX_RTC_Init+0xb0>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c72:	481a      	ldr	r0, [pc, #104]	; (8001cdc <MX_RTC_Init+0xb0>)
 8001c74:	f004 f898 	bl	8005da8 <HAL_RTC_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001c7e:	f7ff ffcf 	bl	8001c20 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c96:	f107 0308 	add.w	r3, r7, #8
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	480f      	ldr	r0, [pc, #60]	; (8001cdc <MX_RTC_Init+0xb0>)
 8001ca0:	f004 f914 	bl	8005ecc <HAL_RTC_SetTime>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001caa:	f7ff ffb9 	bl	8001c20 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4805      	ldr	r0, [pc, #20]	; (8001cdc <MX_RTC_Init+0xb0>)
 8001cc6:	f004 fa1d 	bl	8006104 <HAL_RTC_SetDate>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001cd0:	f7ff ffa6 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001cd4:	bf00      	nop
 8001cd6:	3720      	adds	r7, #32
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	2000047c 	.word	0x2000047c
 8001ce0:	40002800 	.word	0x40002800

08001ce4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a07      	ldr	r2, [pc, #28]	; (8001d10 <HAL_RTC_MspInit+0x2c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d105      	bne.n	8001d02 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001cf6:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <HAL_RTC_MspInit+0x30>)
 8001cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfa:	4a06      	ldr	r2, [pc, #24]	; (8001d14 <HAL_RTC_MspInit+0x30>)
 8001cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d00:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40002800 	.word	0x40002800
 8001d14:	40023800 	.word	0x40023800

08001d18 <MX_SDMMC2_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc2_tx;

/* SDMMC2 init function */

void MX_SDMMC2_SD_Init(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <MX_SDMMC2_SD_Init+0x38>)
 8001d1e:	4a0d      	ldr	r2, [pc, #52]	; (8001d54 <MX_SDMMC2_SD_Init+0x3c>)
 8001d20:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001d22:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <MX_SDMMC2_SD_Init+0x38>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <MX_SDMMC2_SD_Init+0x38>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001d2e:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <MX_SDMMC2_SD_Init+0x38>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <MX_SDMMC2_SD_Init+0x38>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001d3a:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <MX_SDMMC2_SD_Init+0x38>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 0;
 8001d40:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <MX_SDMMC2_SD_Init+0x38>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001d46:	bf00      	nop
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	2000049c 	.word	0x2000049c
 8001d54:	40011c00 	.word	0x40011c00

08001d58 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a6d      	ldr	r2, [pc, #436]	; (8001f2c <HAL_SD_MspInit+0x1d4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	f040 80d4 	bne.w	8001f24 <HAL_SD_MspInit+0x1cc>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* SDMMC2 clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8001d7c:	4b6c      	ldr	r3, [pc, #432]	; (8001f30 <HAL_SD_MspInit+0x1d8>)
 8001d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d80:	4a6b      	ldr	r2, [pc, #428]	; (8001f30 <HAL_SD_MspInit+0x1d8>)
 8001d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d86:	6453      	str	r3, [r2, #68]	; 0x44
 8001d88:	4b69      	ldr	r3, [pc, #420]	; (8001f30 <HAL_SD_MspInit+0x1d8>)
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d94:	4b66      	ldr	r3, [pc, #408]	; (8001f30 <HAL_SD_MspInit+0x1d8>)
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	4a65      	ldr	r2, [pc, #404]	; (8001f30 <HAL_SD_MspInit+0x1d8>)
 8001d9a:	f043 0308 	orr.w	r3, r3, #8
 8001d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001da0:	4b63      	ldr	r3, [pc, #396]	; (8001f30 <HAL_SD_MspInit+0x1d8>)
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dac:	4b60      	ldr	r3, [pc, #384]	; (8001f30 <HAL_SD_MspInit+0x1d8>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	4a5f      	ldr	r2, [pc, #380]	; (8001f30 <HAL_SD_MspInit+0x1d8>)
 8001db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001db6:	6313      	str	r3, [r2, #48]	; 0x30
 8001db8:	4b5d      	ldr	r3, [pc, #372]	; (8001f30 <HAL_SD_MspInit+0x1d8>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dc4:	23c0      	movs	r3, #192	; 0xc0
 8001dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001dd4:	230b      	movs	r3, #11
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4855      	ldr	r0, [pc, #340]	; (8001f34 <HAL_SD_MspInit+0x1dc>)
 8001de0:	f001 fd70 	bl	80038c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8001de4:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 8001de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df2:	2303      	movs	r3, #3
 8001df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001df6:	230b      	movs	r3, #11
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	4619      	mov	r1, r3
 8001e00:	484d      	ldr	r0, [pc, #308]	; (8001f38 <HAL_SD_MspInit+0x1e0>)
 8001e02:	f001 fd5f 	bl	80038c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001e06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e14:	2303      	movs	r3, #3
 8001e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8001e18:	230a      	movs	r3, #10
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	4619      	mov	r1, r3
 8001e22:	4845      	ldr	r0, [pc, #276]	; (8001f38 <HAL_SD_MspInit+0x1e0>)
 8001e24:	f001 fd4e 	bl	80038c4 <HAL_GPIO_Init>

    /* SDMMC2 DMA Init */
    /* SDMMC2_RX Init */
    hdma_sdmmc2_rx.Instance = DMA2_Stream0;
 8001e28:	4b44      	ldr	r3, [pc, #272]	; (8001f3c <HAL_SD_MspInit+0x1e4>)
 8001e2a:	4a45      	ldr	r2, [pc, #276]	; (8001f40 <HAL_SD_MspInit+0x1e8>)
 8001e2c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_rx.Init.Channel = DMA_CHANNEL_11;
 8001e2e:	4b43      	ldr	r3, [pc, #268]	; (8001f3c <HAL_SD_MspInit+0x1e4>)
 8001e30:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 8001e34:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e36:	4b41      	ldr	r3, [pc, #260]	; (8001f3c <HAL_SD_MspInit+0x1e4>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e3c:	4b3f      	ldr	r3, [pc, #252]	; (8001f3c <HAL_SD_MspInit+0x1e4>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e42:	4b3e      	ldr	r3, [pc, #248]	; (8001f3c <HAL_SD_MspInit+0x1e4>)
 8001e44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e48:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e4a:	4b3c      	ldr	r3, [pc, #240]	; (8001f3c <HAL_SD_MspInit+0x1e4>)
 8001e4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e50:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e52:	4b3a      	ldr	r3, [pc, #232]	; (8001f3c <HAL_SD_MspInit+0x1e4>)
 8001e54:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e58:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_rx.Init.Mode = DMA_PFCTRL;
 8001e5a:	4b38      	ldr	r3, [pc, #224]	; (8001f3c <HAL_SD_MspInit+0x1e4>)
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e60:	4b36      	ldr	r3, [pc, #216]	; (8001f3c <HAL_SD_MspInit+0x1e4>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001e66:	4b35      	ldr	r3, [pc, #212]	; (8001f3c <HAL_SD_MspInit+0x1e4>)
 8001e68:	2204      	movs	r2, #4
 8001e6a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001e6c:	4b33      	ldr	r3, [pc, #204]	; (8001f3c <HAL_SD_MspInit+0x1e4>)
 8001e6e:	2203      	movs	r2, #3
 8001e70:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc2_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001e72:	4b32      	ldr	r3, [pc, #200]	; (8001f3c <HAL_SD_MspInit+0x1e4>)
 8001e74:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e78:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc2_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001e7a:	4b30      	ldr	r3, [pc, #192]	; (8001f3c <HAL_SD_MspInit+0x1e4>)
 8001e7c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e80:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_rx) != HAL_OK)
 8001e82:	482e      	ldr	r0, [pc, #184]	; (8001f3c <HAL_SD_MspInit+0x1e4>)
 8001e84:	f001 f978 	bl	8003178 <HAL_DMA_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_SD_MspInit+0x13a>
    {
      Error_Handler();
 8001e8e:	f7ff fec7 	bl	8001c20 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc2_rx);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a29      	ldr	r2, [pc, #164]	; (8001f3c <HAL_SD_MspInit+0x1e4>)
 8001e96:	641a      	str	r2, [r3, #64]	; 0x40
 8001e98:	4a28      	ldr	r2, [pc, #160]	; (8001f3c <HAL_SD_MspInit+0x1e4>)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC2_TX Init */
    hdma_sdmmc2_tx.Instance = DMA2_Stream5;
 8001e9e:	4b29      	ldr	r3, [pc, #164]	; (8001f44 <HAL_SD_MspInit+0x1ec>)
 8001ea0:	4a29      	ldr	r2, [pc, #164]	; (8001f48 <HAL_SD_MspInit+0x1f0>)
 8001ea2:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_tx.Init.Channel = DMA_CHANNEL_11;
 8001ea4:	4b27      	ldr	r3, [pc, #156]	; (8001f44 <HAL_SD_MspInit+0x1ec>)
 8001ea6:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 8001eaa:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001eac:	4b25      	ldr	r3, [pc, #148]	; (8001f44 <HAL_SD_MspInit+0x1ec>)
 8001eae:	2240      	movs	r2, #64	; 0x40
 8001eb0:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eb2:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <HAL_SD_MspInit+0x1ec>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001eb8:	4b22      	ldr	r3, [pc, #136]	; (8001f44 <HAL_SD_MspInit+0x1ec>)
 8001eba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ebe:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ec0:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <HAL_SD_MspInit+0x1ec>)
 8001ec2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ec6:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ec8:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <HAL_SD_MspInit+0x1ec>)
 8001eca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ece:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_tx.Init.Mode = DMA_PFCTRL;
 8001ed0:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <HAL_SD_MspInit+0x1ec>)
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ed6:	4b1b      	ldr	r3, [pc, #108]	; (8001f44 <HAL_SD_MspInit+0x1ec>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001edc:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <HAL_SD_MspInit+0x1ec>)
 8001ede:	2204      	movs	r2, #4
 8001ee0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001ee2:	4b18      	ldr	r3, [pc, #96]	; (8001f44 <HAL_SD_MspInit+0x1ec>)
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc2_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001ee8:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <HAL_SD_MspInit+0x1ec>)
 8001eea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001eee:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc2_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001ef0:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <HAL_SD_MspInit+0x1ec>)
 8001ef2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ef6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_tx) != HAL_OK)
 8001ef8:	4812      	ldr	r0, [pc, #72]	; (8001f44 <HAL_SD_MspInit+0x1ec>)
 8001efa:	f001 f93d 	bl	8003178 <HAL_DMA_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <HAL_SD_MspInit+0x1b0>
    {
      Error_Handler();
 8001f04:	f7ff fe8c 	bl	8001c20 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc2_tx);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a0e      	ldr	r2, [pc, #56]	; (8001f44 <HAL_SD_MspInit+0x1ec>)
 8001f0c:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f0e:	4a0d      	ldr	r2, [pc, #52]	; (8001f44 <HAL_SD_MspInit+0x1ec>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8001f14:	2200      	movs	r2, #0
 8001f16:	2100      	movs	r1, #0
 8001f18:	2067      	movs	r0, #103	; 0x67
 8001f1a:	f001 f8f6 	bl	800310a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8001f1e:	2067      	movs	r0, #103	; 0x67
 8001f20:	f001 f90f 	bl	8003142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }
}
 8001f24:	bf00      	nop
 8001f26:	3728      	adds	r7, #40	; 0x28
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40011c00 	.word	0x40011c00
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40020c00 	.word	0x40020c00
 8001f38:	40021800 	.word	0x40021800
 8001f3c:	20000520 	.word	0x20000520
 8001f40:	40026410 	.word	0x40026410
 8001f44:	20000580 	.word	0x20000580
 8001f48:	40026488 	.word	0x40026488

08001f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <HAL_MspInit+0x44>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	4a0e      	ldr	r2, [pc, #56]	; (8001f90 <HAL_MspInit+0x44>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5e:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <HAL_MspInit+0x44>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f6a:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <HAL_MspInit+0x44>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	4a08      	ldr	r2, [pc, #32]	; (8001f90 <HAL_MspInit+0x44>)
 8001f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f74:	6453      	str	r3, [r2, #68]	; 0x44
 8001f76:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <HAL_MspInit+0x44>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f7e:	603b      	str	r3, [r7, #0]
 8001f80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40023800 	.word	0x40023800

08001f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <NMI_Handler+0x4>

08001f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f9e:	e7fe      	b.n	8001f9e <HardFault_Handler+0x4>

08001fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <MemManage_Handler+0x4>

08001fa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001faa:	e7fe      	b.n	8001faa <BusFault_Handler+0x4>

08001fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <UsageFault_Handler+0x4>

08001fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe0:	f000 fbe4 	bl	80027ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001fee:	f005 fe6c 	bl	8007cca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20002620 	.word	0x20002620

08001ffc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_rx);
 8002000:	4802      	ldr	r0, [pc, #8]	; (800200c <DMA2_Stream0_IRQHandler+0x10>)
 8002002:	f001 f9e9 	bl	80033d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000520 	.word	0x20000520

08002010 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_tx);
 8002014:	4802      	ldr	r0, [pc, #8]	; (8002020 <DMA2_Stream5_IRQHandler+0x10>)
 8002016:	f001 f9df 	bl	80033d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000580 	.word	0x20000580

08002024 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8002028:	4802      	ldr	r0, [pc, #8]	; (8002034 <SDMMC2_IRQHandler+0x10>)
 800202a:	f004 fc73 	bl	8006914 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	2000049c 	.word	0x2000049c

08002038 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
	return 1;
 800203c:	2301      	movs	r3, #1
}
 800203e:	4618      	mov	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <_kill>:

int _kill(int pid, int sig)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002052:	f008 f8fd 	bl	800a250 <__errno>
 8002056:	4603      	mov	r3, r0
 8002058:	2216      	movs	r2, #22
 800205a:	601a      	str	r2, [r3, #0]
	return -1;
 800205c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <_exit>:

void _exit (int status)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002070:	f04f 31ff 	mov.w	r1, #4294967295
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff ffe7 	bl	8002048 <_kill>
	while (1) {}		/* Make sure we hang here */
 800207a:	e7fe      	b.n	800207a <_exit+0x12>

0800207c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	e00a      	b.n	80020a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800208e:	f3af 8000 	nop.w
 8002092:	4601      	mov	r1, r0
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	60ba      	str	r2, [r7, #8]
 800209a:	b2ca      	uxtb	r2, r1
 800209c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	3301      	adds	r3, #1
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	dbf0      	blt.n	800208e <_read+0x12>
	}

return len;
 80020ac:	687b      	ldr	r3, [r7, #4]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b086      	sub	sp, #24
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	60f8      	str	r0, [r7, #12]
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	e009      	b.n	80020dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	60ba      	str	r2, [r7, #8]
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff f857 	bl	8001184 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	3301      	adds	r3, #1
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	dbf1      	blt.n	80020c8 <_write+0x12>
	}
	return len;
 80020e4:	687b      	ldr	r3, [r7, #4]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <_close>:

int _close(int file)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
	return -1;
 80020f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002116:	605a      	str	r2, [r3, #4]
	return 0;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <_isatty>:

int _isatty(int file)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
	return 1;
 800212e:	2301      	movs	r3, #1
}
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
	return 0;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
	...

08002158 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002160:	4a14      	ldr	r2, [pc, #80]	; (80021b4 <_sbrk+0x5c>)
 8002162:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <_sbrk+0x60>)
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800216c:	4b13      	ldr	r3, [pc, #76]	; (80021bc <_sbrk+0x64>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d102      	bne.n	800217a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002174:	4b11      	ldr	r3, [pc, #68]	; (80021bc <_sbrk+0x64>)
 8002176:	4a12      	ldr	r2, [pc, #72]	; (80021c0 <_sbrk+0x68>)
 8002178:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800217a:	4b10      	ldr	r3, [pc, #64]	; (80021bc <_sbrk+0x64>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	429a      	cmp	r2, r3
 8002186:	d207      	bcs.n	8002198 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002188:	f008 f862 	bl	800a250 <__errno>
 800218c:	4603      	mov	r3, r0
 800218e:	220c      	movs	r2, #12
 8002190:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002192:	f04f 33ff 	mov.w	r3, #4294967295
 8002196:	e009      	b.n	80021ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002198:	4b08      	ldr	r3, [pc, #32]	; (80021bc <_sbrk+0x64>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800219e:	4b07      	ldr	r3, [pc, #28]	; (80021bc <_sbrk+0x64>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	4a05      	ldr	r2, [pc, #20]	; (80021bc <_sbrk+0x64>)
 80021a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021aa:	68fb      	ldr	r3, [r7, #12]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20080000 	.word	0x20080000
 80021b8:	00000400 	.word	0x00000400
 80021bc:	20002584 	.word	0x20002584
 80021c0:	200027a8 	.word	0x200027a8

080021c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021c8:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <SystemInit+0x20>)
 80021ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ce:	4a05      	ldr	r2, [pc, #20]	; (80021e4 <SystemInit+0x20>)
 80021d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim14;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08c      	sub	sp, #48	; 0x30
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ee:	f107 0320 	add.w	r3, r7, #32
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021fc:	f107 0314 	add.w	r3, r7, #20
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002208:	1d3b      	adds	r3, r7, #4
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002214:	4b2b      	ldr	r3, [pc, #172]	; (80022c4 <MX_TIM3_Init+0xdc>)
 8002216:	4a2c      	ldr	r2, [pc, #176]	; (80022c8 <MX_TIM3_Init+0xe0>)
 8002218:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800221a:	4b2a      	ldr	r3, [pc, #168]	; (80022c4 <MX_TIM3_Init+0xdc>)
 800221c:	2200      	movs	r2, #0
 800221e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002220:	4b28      	ldr	r3, [pc, #160]	; (80022c4 <MX_TIM3_Init+0xdc>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002226:	4b27      	ldr	r3, [pc, #156]	; (80022c4 <MX_TIM3_Init+0xdc>)
 8002228:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800222c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800222e:	4b25      	ldr	r3, [pc, #148]	; (80022c4 <MX_TIM3_Init+0xdc>)
 8002230:	2200      	movs	r2, #0
 8002232:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002234:	4b23      	ldr	r3, [pc, #140]	; (80022c4 <MX_TIM3_Init+0xdc>)
 8002236:	2200      	movs	r2, #0
 8002238:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800223a:	4822      	ldr	r0, [pc, #136]	; (80022c4 <MX_TIM3_Init+0xdc>)
 800223c:	f005 fc15 	bl	8007a6a <HAL_TIM_Base_Init>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8002246:	f7ff fceb 	bl	8001c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800224a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800224e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002250:	f107 0320 	add.w	r3, r7, #32
 8002254:	4619      	mov	r1, r3
 8002256:	481b      	ldr	r0, [pc, #108]	; (80022c4 <MX_TIM3_Init+0xdc>)
 8002258:	f005 fef2 	bl	8008040 <HAL_TIM_ConfigClockSource>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002262:	f7ff fcdd 	bl	8001c20 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002266:	4817      	ldr	r0, [pc, #92]	; (80022c4 <MX_TIM3_Init+0xdc>)
 8002268:	f005 fcce 	bl	8007c08 <HAL_TIM_IC_Init>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002272:	f7ff fcd5 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800227e:	f107 0314 	add.w	r3, r7, #20
 8002282:	4619      	mov	r1, r3
 8002284:	480f      	ldr	r0, [pc, #60]	; (80022c4 <MX_TIM3_Init+0xdc>)
 8002286:	f006 fa31 	bl	80086ec <HAL_TIMEx_MasterConfigSynchronization>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8002290:	f7ff fcc6 	bl	8001c20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002294:	2300      	movs	r3, #0
 8002296:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002298:	2301      	movs	r3, #1
 800229a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80022a4:	1d3b      	adds	r3, r7, #4
 80022a6:	2200      	movs	r2, #0
 80022a8:	4619      	mov	r1, r3
 80022aa:	4806      	ldr	r0, [pc, #24]	; (80022c4 <MX_TIM3_Init+0xdc>)
 80022ac:	f005 fe2c 	bl	8007f08 <HAL_TIM_IC_ConfigChannel>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80022b6:	f7ff fcb3 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80022ba:	bf00      	nop
 80022bc:	3730      	adds	r7, #48	; 0x30
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20002588 	.word	0x20002588
 80022c8:	40000400 	.word	0x40000400

080022cc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08c      	sub	sp, #48	; 0x30
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022d2:	f107 0320 	add.w	r3, r7, #32
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	609a      	str	r2, [r3, #8]
 80022de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022f8:	4b2b      	ldr	r3, [pc, #172]	; (80023a8 <MX_TIM4_Init+0xdc>)
 80022fa:	4a2c      	ldr	r2, [pc, #176]	; (80023ac <MX_TIM4_Init+0xe0>)
 80022fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80022fe:	4b2a      	ldr	r3, [pc, #168]	; (80023a8 <MX_TIM4_Init+0xdc>)
 8002300:	2200      	movs	r2, #0
 8002302:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002304:	4b28      	ldr	r3, [pc, #160]	; (80023a8 <MX_TIM4_Init+0xdc>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800230a:	4b27      	ldr	r3, [pc, #156]	; (80023a8 <MX_TIM4_Init+0xdc>)
 800230c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002310:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002312:	4b25      	ldr	r3, [pc, #148]	; (80023a8 <MX_TIM4_Init+0xdc>)
 8002314:	2200      	movs	r2, #0
 8002316:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002318:	4b23      	ldr	r3, [pc, #140]	; (80023a8 <MX_TIM4_Init+0xdc>)
 800231a:	2200      	movs	r2, #0
 800231c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800231e:	4822      	ldr	r0, [pc, #136]	; (80023a8 <MX_TIM4_Init+0xdc>)
 8002320:	f005 fba3 	bl	8007a6a <HAL_TIM_Base_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 800232a:	f7ff fc79 	bl	8001c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800232e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002332:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002334:	f107 0320 	add.w	r3, r7, #32
 8002338:	4619      	mov	r1, r3
 800233a:	481b      	ldr	r0, [pc, #108]	; (80023a8 <MX_TIM4_Init+0xdc>)
 800233c:	f005 fe80 	bl	8008040 <HAL_TIM_ConfigClockSource>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002346:	f7ff fc6b 	bl	8001c20 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800234a:	4817      	ldr	r0, [pc, #92]	; (80023a8 <MX_TIM4_Init+0xdc>)
 800234c:	f005 fc5c 	bl	8007c08 <HAL_TIM_IC_Init>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002356:	f7ff fc63 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002362:	f107 0314 	add.w	r3, r7, #20
 8002366:	4619      	mov	r1, r3
 8002368:	480f      	ldr	r0, [pc, #60]	; (80023a8 <MX_TIM4_Init+0xdc>)
 800236a:	f006 f9bf 	bl	80086ec <HAL_TIMEx_MasterConfigSynchronization>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8002374:	f7ff fc54 	bl	8001c20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002378:	2300      	movs	r3, #0
 800237a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800237c:	2301      	movs	r3, #1
 800237e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002380:	2300      	movs	r3, #0
 8002382:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002388:	1d3b      	adds	r3, r7, #4
 800238a:	2200      	movs	r2, #0
 800238c:	4619      	mov	r1, r3
 800238e:	4806      	ldr	r0, [pc, #24]	; (80023a8 <MX_TIM4_Init+0xdc>)
 8002390:	f005 fdba 	bl	8007f08 <HAL_TIM_IC_ConfigChannel>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 800239a:	f7ff fc41 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800239e:	bf00      	nop
 80023a0:	3730      	adds	r7, #48	; 0x30
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	200025d4 	.word	0x200025d4
 80023ac:	40000800 	.word	0x40000800

080023b0 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80023b4:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <MX_TIM14_Init+0x40>)
 80023b6:	4a0f      	ldr	r2, [pc, #60]	; (80023f4 <MX_TIM14_Init+0x44>)
 80023b8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 31999;
 80023ba:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <MX_TIM14_Init+0x40>)
 80023bc:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80023c0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c2:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <MX_TIM14_Init+0x40>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 24;
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <MX_TIM14_Init+0x40>)
 80023ca:	2218      	movs	r2, #24
 80023cc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ce:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <MX_TIM14_Init+0x40>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <MX_TIM14_Init+0x40>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80023da:	4805      	ldr	r0, [pc, #20]	; (80023f0 <MX_TIM14_Init+0x40>)
 80023dc:	f005 fb45 	bl	8007a6a <HAL_TIM_Base_Init>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80023e6:	f7ff fc1b 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20002620 	.word	0x20002620
 80023f4:	40002000 	.word	0x40002000

080023f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08c      	sub	sp, #48	; 0x30
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002400:	f107 031c 	add.w	r3, r7, #28
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
 800240e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a3b      	ldr	r2, [pc, #236]	; (8002504 <HAL_TIM_Base_MspInit+0x10c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d128      	bne.n	800246c <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800241a:	4b3b      	ldr	r3, [pc, #236]	; (8002508 <HAL_TIM_Base_MspInit+0x110>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	4a3a      	ldr	r2, [pc, #232]	; (8002508 <HAL_TIM_Base_MspInit+0x110>)
 8002420:	f043 0302 	orr.w	r3, r3, #2
 8002424:	6413      	str	r3, [r2, #64]	; 0x40
 8002426:	4b38      	ldr	r3, [pc, #224]	; (8002508 <HAL_TIM_Base_MspInit+0x110>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	61bb      	str	r3, [r7, #24]
 8002430:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002432:	4b35      	ldr	r3, [pc, #212]	; (8002508 <HAL_TIM_Base_MspInit+0x110>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4a34      	ldr	r2, [pc, #208]	; (8002508 <HAL_TIM_Base_MspInit+0x110>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	6313      	str	r3, [r2, #48]	; 0x30
 800243e:	4b32      	ldr	r3, [pc, #200]	; (8002508 <HAL_TIM_Base_MspInit+0x110>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = VSS2_Pin;
 800244a:	2340      	movs	r3, #64	; 0x40
 800244c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244e:	2302      	movs	r3, #2
 8002450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002456:	2300      	movs	r3, #0
 8002458:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800245a:	2302      	movs	r3, #2
 800245c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VSS2_GPIO_Port, &GPIO_InitStruct);
 800245e:	f107 031c 	add.w	r3, r7, #28
 8002462:	4619      	mov	r1, r3
 8002464:	4829      	ldr	r0, [pc, #164]	; (800250c <HAL_TIM_Base_MspInit+0x114>)
 8002466:	f001 fa2d 	bl	80038c4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800246a:	e047      	b.n	80024fc <HAL_TIM_Base_MspInit+0x104>
  else if(tim_baseHandle->Instance==TIM4)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a27      	ldr	r2, [pc, #156]	; (8002510 <HAL_TIM_Base_MspInit+0x118>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d129      	bne.n	80024ca <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002476:	4b24      	ldr	r3, [pc, #144]	; (8002508 <HAL_TIM_Base_MspInit+0x110>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	4a23      	ldr	r2, [pc, #140]	; (8002508 <HAL_TIM_Base_MspInit+0x110>)
 800247c:	f043 0304 	orr.w	r3, r3, #4
 8002480:	6413      	str	r3, [r2, #64]	; 0x40
 8002482:	4b21      	ldr	r3, [pc, #132]	; (8002508 <HAL_TIM_Base_MspInit+0x110>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800248e:	4b1e      	ldr	r3, [pc, #120]	; (8002508 <HAL_TIM_Base_MspInit+0x110>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	4a1d      	ldr	r2, [pc, #116]	; (8002508 <HAL_TIM_Base_MspInit+0x110>)
 8002494:	f043 0308 	orr.w	r3, r3, #8
 8002498:	6313      	str	r3, [r2, #48]	; 0x30
 800249a:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <HAL_TIM_Base_MspInit+0x110>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VSS1_Pin;
 80024a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ac:	2302      	movs	r3, #2
 80024ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b4:	2300      	movs	r3, #0
 80024b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80024b8:	2302      	movs	r3, #2
 80024ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VSS1_GPIO_Port, &GPIO_InitStruct);
 80024bc:	f107 031c 	add.w	r3, r7, #28
 80024c0:	4619      	mov	r1, r3
 80024c2:	4814      	ldr	r0, [pc, #80]	; (8002514 <HAL_TIM_Base_MspInit+0x11c>)
 80024c4:	f001 f9fe 	bl	80038c4 <HAL_GPIO_Init>
}
 80024c8:	e018      	b.n	80024fc <HAL_TIM_Base_MspInit+0x104>
  else if(tim_baseHandle->Instance==TIM14)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a12      	ldr	r2, [pc, #72]	; (8002518 <HAL_TIM_Base_MspInit+0x120>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d113      	bne.n	80024fc <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80024d4:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <HAL_TIM_Base_MspInit+0x110>)
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	4a0b      	ldr	r2, [pc, #44]	; (8002508 <HAL_TIM_Base_MspInit+0x110>)
 80024da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024de:	6413      	str	r3, [r2, #64]	; 0x40
 80024e0:	4b09      	ldr	r3, [pc, #36]	; (8002508 <HAL_TIM_Base_MspInit+0x110>)
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80024ec:	2200      	movs	r2, #0
 80024ee:	2100      	movs	r1, #0
 80024f0:	202d      	movs	r0, #45	; 0x2d
 80024f2:	f000 fe0a 	bl	800310a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80024f6:	202d      	movs	r0, #45	; 0x2d
 80024f8:	f000 fe23 	bl	8003142 <HAL_NVIC_EnableIRQ>
}
 80024fc:	bf00      	nop
 80024fe:	3730      	adds	r7, #48	; 0x30
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40000400 	.word	0x40000400
 8002508:	40023800 	.word	0x40023800
 800250c:	40020000 	.word	0x40020000
 8002510:	40000800 	.word	0x40000800
 8002514:	40020c00 	.word	0x40020c00
 8002518:	40002000 	.word	0x40002000

0800251c <MX_UART7_Init>:
UART_HandleTypeDef huart7;
UART_HandleTypeDef huart3;

/* UART7 init function */
void MX_UART7_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002520:	4b14      	ldr	r3, [pc, #80]	; (8002574 <MX_UART7_Init+0x58>)
 8002522:	4a15      	ldr	r2, [pc, #84]	; (8002578 <MX_UART7_Init+0x5c>)
 8002524:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002526:	4b13      	ldr	r3, [pc, #76]	; (8002574 <MX_UART7_Init+0x58>)
 8002528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800252c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800252e:	4b11      	ldr	r3, [pc, #68]	; (8002574 <MX_UART7_Init+0x58>)
 8002530:	2200      	movs	r2, #0
 8002532:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002534:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <MX_UART7_Init+0x58>)
 8002536:	2200      	movs	r2, #0
 8002538:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800253a:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <MX_UART7_Init+0x58>)
 800253c:	2200      	movs	r2, #0
 800253e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <MX_UART7_Init+0x58>)
 8002542:	220c      	movs	r2, #12
 8002544:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002546:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <MX_UART7_Init+0x58>)
 8002548:	2200      	movs	r2, #0
 800254a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800254c:	4b09      	ldr	r3, [pc, #36]	; (8002574 <MX_UART7_Init+0x58>)
 800254e:	2200      	movs	r2, #0
 8002550:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002552:	4b08      	ldr	r3, [pc, #32]	; (8002574 <MX_UART7_Init+0x58>)
 8002554:	2200      	movs	r2, #0
 8002556:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <MX_UART7_Init+0x58>)
 800255a:	2200      	movs	r2, #0
 800255c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800255e:	4805      	ldr	r0, [pc, #20]	; (8002574 <MX_UART7_Init+0x58>)
 8002560:	f006 f970 	bl	8008844 <HAL_UART_Init>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800256a:	f7ff fb59 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	2000266c 	.word	0x2000266c
 8002578:	40007800 	.word	0x40007800

0800257c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002580:	4b14      	ldr	r3, [pc, #80]	; (80025d4 <MX_USART3_UART_Init+0x58>)
 8002582:	4a15      	ldr	r2, [pc, #84]	; (80025d8 <MX_USART3_UART_Init+0x5c>)
 8002584:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002586:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <MX_USART3_UART_Init+0x58>)
 8002588:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800258c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800258e:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <MX_USART3_UART_Init+0x58>)
 8002590:	2200      	movs	r2, #0
 8002592:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002594:	4b0f      	ldr	r3, [pc, #60]	; (80025d4 <MX_USART3_UART_Init+0x58>)
 8002596:	2200      	movs	r2, #0
 8002598:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800259a:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <MX_USART3_UART_Init+0x58>)
 800259c:	2200      	movs	r2, #0
 800259e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025a0:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <MX_USART3_UART_Init+0x58>)
 80025a2:	220c      	movs	r2, #12
 80025a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025a6:	4b0b      	ldr	r3, [pc, #44]	; (80025d4 <MX_USART3_UART_Init+0x58>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025ac:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <MX_USART3_UART_Init+0x58>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025b2:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <MX_USART3_UART_Init+0x58>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025b8:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <MX_USART3_UART_Init+0x58>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025be:	4805      	ldr	r0, [pc, #20]	; (80025d4 <MX_USART3_UART_Init+0x58>)
 80025c0:	f006 f940 	bl	8008844 <HAL_UART_Init>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80025ca:	f7ff fb29 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	200026f0 	.word	0x200026f0
 80025d8:	40004800 	.word	0x40004800

080025dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08c      	sub	sp, #48	; 0x30
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e4:	f107 031c 	add.w	r3, r7, #28
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a2f      	ldr	r2, [pc, #188]	; (80026b8 <HAL_UART_MspInit+0xdc>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d129      	bne.n	8002652 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80025fe:	4b2f      	ldr	r3, [pc, #188]	; (80026bc <HAL_UART_MspInit+0xe0>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	4a2e      	ldr	r2, [pc, #184]	; (80026bc <HAL_UART_MspInit+0xe0>)
 8002604:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002608:	6413      	str	r3, [r2, #64]	; 0x40
 800260a:	4b2c      	ldr	r3, [pc, #176]	; (80026bc <HAL_UART_MspInit+0xe0>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002612:	61bb      	str	r3, [r7, #24]
 8002614:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002616:	4b29      	ldr	r3, [pc, #164]	; (80026bc <HAL_UART_MspInit+0xe0>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	4a28      	ldr	r2, [pc, #160]	; (80026bc <HAL_UART_MspInit+0xe0>)
 800261c:	f043 0310 	orr.w	r3, r3, #16
 8002620:	6313      	str	r3, [r2, #48]	; 0x30
 8002622:	4b26      	ldr	r3, [pc, #152]	; (80026bc <HAL_UART_MspInit+0xe0>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 800262e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002634:	2302      	movs	r3, #2
 8002636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263c:	2303      	movs	r3, #3
 800263e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002640:	2308      	movs	r3, #8
 8002642:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002644:	f107 031c 	add.w	r3, r7, #28
 8002648:	4619      	mov	r1, r3
 800264a:	481d      	ldr	r0, [pc, #116]	; (80026c0 <HAL_UART_MspInit+0xe4>)
 800264c:	f001 f93a 	bl	80038c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002650:	e02d      	b.n	80026ae <HAL_UART_MspInit+0xd2>
  else if(uartHandle->Instance==USART3)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a1b      	ldr	r2, [pc, #108]	; (80026c4 <HAL_UART_MspInit+0xe8>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d128      	bne.n	80026ae <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800265c:	4b17      	ldr	r3, [pc, #92]	; (80026bc <HAL_UART_MspInit+0xe0>)
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	4a16      	ldr	r2, [pc, #88]	; (80026bc <HAL_UART_MspInit+0xe0>)
 8002662:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002666:	6413      	str	r3, [r2, #64]	; 0x40
 8002668:	4b14      	ldr	r3, [pc, #80]	; (80026bc <HAL_UART_MspInit+0xe0>)
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002674:	4b11      	ldr	r3, [pc, #68]	; (80026bc <HAL_UART_MspInit+0xe0>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	4a10      	ldr	r2, [pc, #64]	; (80026bc <HAL_UART_MspInit+0xe0>)
 800267a:	f043 0302 	orr.w	r3, r3, #2
 800267e:	6313      	str	r3, [r2, #48]	; 0x30
 8002680:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <HAL_UART_MspInit+0xe0>)
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART_DEBUG_TX_Pin|UART_DEBUG_RX_Pin;
 800268c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002692:	2302      	movs	r3, #2
 8002694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269a:	2303      	movs	r3, #3
 800269c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800269e:	2307      	movs	r3, #7
 80026a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a2:	f107 031c 	add.w	r3, r7, #28
 80026a6:	4619      	mov	r1, r3
 80026a8:	4807      	ldr	r0, [pc, #28]	; (80026c8 <HAL_UART_MspInit+0xec>)
 80026aa:	f001 f90b 	bl	80038c4 <HAL_GPIO_Init>
}
 80026ae:	bf00      	nop
 80026b0:	3730      	adds	r7, #48	; 0x30
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40007800 	.word	0x40007800
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40004800 	.word	0x40004800
 80026c8:	40020400 	.word	0x40020400

080026cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002704 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026d0:	480d      	ldr	r0, [pc, #52]	; (8002708 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026d2:	490e      	ldr	r1, [pc, #56]	; (800270c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026d4:	4a0e      	ldr	r2, [pc, #56]	; (8002710 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026d8:	e002      	b.n	80026e0 <LoopCopyDataInit>

080026da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026de:	3304      	adds	r3, #4

080026e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026e4:	d3f9      	bcc.n	80026da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026e6:	4a0b      	ldr	r2, [pc, #44]	; (8002714 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026e8:	4c0b      	ldr	r4, [pc, #44]	; (8002718 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026ec:	e001      	b.n	80026f2 <LoopFillZerobss>

080026ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026f0:	3204      	adds	r2, #4

080026f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026f4:	d3fb      	bcc.n	80026ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026f6:	f7ff fd65 	bl	80021c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026fa:	f007 fdaf 	bl	800a25c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026fe:	f7ff f937 	bl	8001970 <main>
  bx  lr    
 8002702:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002704:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800270c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002710:	0800ef2c 	.word	0x0800ef2c
  ldr r2, =_sbss
 8002714:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002718:	200027a4 	.word	0x200027a4

0800271c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800271c:	e7fe      	b.n	800271c <ADC_IRQHandler>
	...

08002720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8002724:	4b08      	ldr	r3, [pc, #32]	; (8002748 <HAL_Init+0x28>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a07      	ldr	r2, [pc, #28]	; (8002748 <HAL_Init+0x28>)
 800272a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800272e:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002730:	2003      	movs	r0, #3
 8002732:	f000 fcdf 	bl	80030f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002736:	200f      	movs	r0, #15
 8002738:	f000 f808 	bl	800274c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800273c:	f7ff fc06 	bl	8001f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40023c00 	.word	0x40023c00

0800274c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002754:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <HAL_InitTick+0x54>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_InitTick+0x58>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	4619      	mov	r1, r3
 800275e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002762:	fbb3 f3f1 	udiv	r3, r3, r1
 8002766:	fbb2 f3f3 	udiv	r3, r2, r3
 800276a:	4618      	mov	r0, r3
 800276c:	f000 fcf7 	bl	800315e <HAL_SYSTICK_Config>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e00e      	b.n	8002798 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b0f      	cmp	r3, #15
 800277e:	d80a      	bhi.n	8002796 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002780:	2200      	movs	r2, #0
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	f04f 30ff 	mov.w	r0, #4294967295
 8002788:	f000 fcbf 	bl	800310a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800278c:	4a06      	ldr	r2, [pc, #24]	; (80027a8 <HAL_InitTick+0x5c>)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	e000      	b.n	8002798 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20000000 	.word	0x20000000
 80027a4:	20000008 	.word	0x20000008
 80027a8:	20000004 	.word	0x20000004

080027ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_IncTick+0x20>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	461a      	mov	r2, r3
 80027b6:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_IncTick+0x24>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4413      	add	r3, r2
 80027bc:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <HAL_IncTick+0x24>)
 80027be:	6013      	str	r3, [r2, #0]
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	20000008 	.word	0x20000008
 80027d0:	20002774 	.word	0x20002774

080027d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return uwTick;
 80027d8:	4b03      	ldr	r3, [pc, #12]	; (80027e8 <HAL_GetTick+0x14>)
 80027da:	681b      	ldr	r3, [r3, #0]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	20002774 	.word	0x20002774

080027ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027f4:	f7ff ffee 	bl	80027d4 <HAL_GetTick>
 80027f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002804:	d005      	beq.n	8002812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002806:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <HAL_Delay+0x44>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4413      	add	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002812:	bf00      	nop
 8002814:	f7ff ffde 	bl	80027d4 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	429a      	cmp	r2, r3
 8002822:	d8f7      	bhi.n	8002814 <HAL_Delay+0x28>
  {
  }
}
 8002824:	bf00      	nop
 8002826:	bf00      	nop
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000008 	.word	0x20000008

08002834 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800283c:	2300      	movs	r3, #0
 800283e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e031      	b.n	80028ae <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7fe fb6e 	bl	8000f34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f003 0310 	and.w	r3, r3, #16
 800286e:	2b00      	cmp	r3, #0
 8002870:	d116      	bne.n	80028a0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <HAL_ADC_Init+0x84>)
 8002878:	4013      	ands	r3, r2
 800287a:	f043 0202 	orr.w	r2, r3, #2
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f970 	bl	8002b68 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f023 0303 	bic.w	r3, r3, #3
 8002896:	f043 0201 	orr.w	r2, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	641a      	str	r2, [r3, #64]	; 0x40
 800289e:	e001      	b.n	80028a4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	ffffeefd 	.word	0xffffeefd

080028bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x1c>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e136      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x28a>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b09      	cmp	r3, #9
 80028e6:	d93a      	bls.n	800295e <HAL_ADC_ConfigChannel+0xa2>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028f0:	d035      	beq.n	800295e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68d9      	ldr	r1, [r3, #12]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	461a      	mov	r2, r3
 8002900:	4613      	mov	r3, r2
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	4413      	add	r3, r2
 8002906:	3b1e      	subs	r3, #30
 8002908:	2207      	movs	r2, #7
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43da      	mvns	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	400a      	ands	r2, r1
 8002916:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a8d      	ldr	r2, [pc, #564]	; (8002b54 <HAL_ADC_ConfigChannel+0x298>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d10a      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68d9      	ldr	r1, [r3, #12]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	061a      	lsls	r2, r3, #24
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002936:	e035      	b.n	80029a4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68d9      	ldr	r1, [r3, #12]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	b29b      	uxth	r3, r3
 8002948:	4618      	mov	r0, r3
 800294a:	4603      	mov	r3, r0
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	4403      	add	r3, r0
 8002950:	3b1e      	subs	r3, #30
 8002952:	409a      	lsls	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800295c:	e022      	b.n	80029a4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6919      	ldr	r1, [r3, #16]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	b29b      	uxth	r3, r3
 800296a:	461a      	mov	r2, r3
 800296c:	4613      	mov	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	4413      	add	r3, r2
 8002972:	2207      	movs	r2, #7
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43da      	mvns	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	400a      	ands	r2, r1
 8002980:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6919      	ldr	r1, [r3, #16]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	b29b      	uxth	r3, r3
 8002992:	4618      	mov	r0, r3
 8002994:	4603      	mov	r3, r0
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	4403      	add	r3, r0
 800299a:	409a      	lsls	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b06      	cmp	r3, #6
 80029aa:	d824      	bhi.n	80029f6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	3b05      	subs	r3, #5
 80029be:	221f      	movs	r2, #31
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43da      	mvns	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	400a      	ands	r2, r1
 80029cc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	4618      	mov	r0, r3
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	3b05      	subs	r3, #5
 80029e8:	fa00 f203 	lsl.w	r2, r0, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	635a      	str	r2, [r3, #52]	; 0x34
 80029f4:	e04c      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b0c      	cmp	r3, #12
 80029fc:	d824      	bhi.n	8002a48 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	3b23      	subs	r3, #35	; 0x23
 8002a10:	221f      	movs	r2, #31
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43da      	mvns	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	400a      	ands	r2, r1
 8002a1e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	3b23      	subs	r3, #35	; 0x23
 8002a3a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	631a      	str	r2, [r3, #48]	; 0x30
 8002a46:	e023      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	3b41      	subs	r3, #65	; 0x41
 8002a5a:	221f      	movs	r2, #31
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43da      	mvns	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	400a      	ands	r2, r1
 8002a68:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	4618      	mov	r0, r3
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	3b41      	subs	r3, #65	; 0x41
 8002a84:	fa00 f203 	lsl.w	r2, r0, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a30      	ldr	r2, [pc, #192]	; (8002b58 <HAL_ADC_ConfigChannel+0x29c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d10a      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x1f4>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002aa2:	d105      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002aa4:	4b2d      	ldr	r3, [pc, #180]	; (8002b5c <HAL_ADC_ConfigChannel+0x2a0>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4a2c      	ldr	r2, [pc, #176]	; (8002b5c <HAL_ADC_ConfigChannel+0x2a0>)
 8002aaa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002aae:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a28      	ldr	r2, [pc, #160]	; (8002b58 <HAL_ADC_ConfigChannel+0x29c>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d10f      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x21e>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b12      	cmp	r3, #18
 8002ac0:	d10b      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002ac2:	4b26      	ldr	r3, [pc, #152]	; (8002b5c <HAL_ADC_ConfigChannel+0x2a0>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	4a25      	ldr	r2, [pc, #148]	; (8002b5c <HAL_ADC_ConfigChannel+0x2a0>)
 8002ac8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002acc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002ace:	4b23      	ldr	r3, [pc, #140]	; (8002b5c <HAL_ADC_ConfigChannel+0x2a0>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	4a22      	ldr	r2, [pc, #136]	; (8002b5c <HAL_ADC_ConfigChannel+0x2a0>)
 8002ad4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ad8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1e      	ldr	r2, [pc, #120]	; (8002b58 <HAL_ADC_ConfigChannel+0x29c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d12b      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x280>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a1a      	ldr	r2, [pc, #104]	; (8002b54 <HAL_ADC_ConfigChannel+0x298>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d003      	beq.n	8002af6 <HAL_ADC_ConfigChannel+0x23a>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b11      	cmp	r3, #17
 8002af4:	d122      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002af6:	4b19      	ldr	r3, [pc, #100]	; (8002b5c <HAL_ADC_ConfigChannel+0x2a0>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	4a18      	ldr	r2, [pc, #96]	; (8002b5c <HAL_ADC_ConfigChannel+0x2a0>)
 8002afc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002b00:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002b02:	4b16      	ldr	r3, [pc, #88]	; (8002b5c <HAL_ADC_ConfigChannel+0x2a0>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	4a15      	ldr	r2, [pc, #84]	; (8002b5c <HAL_ADC_ConfigChannel+0x2a0>)
 8002b08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b0c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a10      	ldr	r2, [pc, #64]	; (8002b54 <HAL_ADC_ConfigChannel+0x298>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d111      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002b18:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <HAL_ADC_ConfigChannel+0x2a4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a11      	ldr	r2, [pc, #68]	; (8002b64 <HAL_ADC_ConfigChannel+0x2a8>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	0c9a      	lsrs	r2, r3, #18
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b2e:	e002      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f9      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	10000012 	.word	0x10000012
 8002b58:	40012000 	.word	0x40012000
 8002b5c:	40012300 	.word	0x40012300
 8002b60:	20000000 	.word	0x20000000
 8002b64:	431bde83 	.word	0x431bde83

08002b68 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002b70:	4b78      	ldr	r3, [pc, #480]	; (8002d54 <ADC_Init+0x1ec>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4a77      	ldr	r2, [pc, #476]	; (8002d54 <ADC_Init+0x1ec>)
 8002b76:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002b7a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002b7c:	4b75      	ldr	r3, [pc, #468]	; (8002d54 <ADC_Init+0x1ec>)
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	4973      	ldr	r1, [pc, #460]	; (8002d54 <ADC_Init+0x1ec>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6859      	ldr	r1, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	021a      	lsls	r2, r3, #8
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002bbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6859      	ldr	r1, [r3, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6899      	ldr	r1, [r3, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf6:	4a58      	ldr	r2, [pc, #352]	; (8002d58 <ADC_Init+0x1f0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d022      	beq.n	8002c42 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6899      	ldr	r1, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6899      	ldr	r1, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	e00f      	b.n	8002c62 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0202 	bic.w	r2, r2, #2
 8002c70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6899      	ldr	r1, [r3, #8]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	005a      	lsls	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d01b      	beq.n	8002cc8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002cae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6859      	ldr	r1, [r3, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	035a      	lsls	r2, r3, #13
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	e007      	b.n	8002cd8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cd6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	051a      	lsls	r2, r3, #20
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6899      	ldr	r1, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d1a:	025a      	lsls	r2, r3, #9
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6899      	ldr	r1, [r3, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	029a      	lsls	r2, r3, #10
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	609a      	str	r2, [r3, #8]
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	40012300 	.word	0x40012300
 8002d58:	0f000001 	.word	0x0f000001

08002d5c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e0ed      	b.n	8002f4a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d102      	bne.n	8002d80 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7fe fa88 	bl	8001290 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d90:	f7ff fd20 	bl	80027d4 <HAL_GetTick>
 8002d94:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d96:	e012      	b.n	8002dbe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d98:	f7ff fd1c 	bl	80027d4 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b0a      	cmp	r3, #10
 8002da4:	d90b      	bls.n	8002dbe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2205      	movs	r2, #5
 8002db6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e0c5      	b.n	8002f4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0e5      	beq.n	8002d98 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0202 	bic.w	r2, r2, #2
 8002dda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ddc:	f7ff fcfa 	bl	80027d4 <HAL_GetTick>
 8002de0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002de2:	e012      	b.n	8002e0a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002de4:	f7ff fcf6 	bl	80027d4 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b0a      	cmp	r3, #10
 8002df0:	d90b      	bls.n	8002e0a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2205      	movs	r2, #5
 8002e02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e09f      	b.n	8002f4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1e5      	bne.n	8002de4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	7e1b      	ldrb	r3, [r3, #24]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d108      	bne.n	8002e32 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	e007      	b.n	8002e42 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	7e5b      	ldrb	r3, [r3, #25]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d108      	bne.n	8002e5c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	e007      	b.n	8002e6c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	7e9b      	ldrb	r3, [r3, #26]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d108      	bne.n	8002e86 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0220 	orr.w	r2, r2, #32
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	e007      	b.n	8002e96 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0220 	bic.w	r2, r2, #32
 8002e94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	7edb      	ldrb	r3, [r3, #27]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d108      	bne.n	8002eb0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0210 	bic.w	r2, r2, #16
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	e007      	b.n	8002ec0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0210 	orr.w	r2, r2, #16
 8002ebe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	7f1b      	ldrb	r3, [r3, #28]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d108      	bne.n	8002eda <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0208 	orr.w	r2, r2, #8
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	e007      	b.n	8002eea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0208 	bic.w	r2, r2, #8
 8002ee8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	7f5b      	ldrb	r3, [r3, #29]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d108      	bne.n	8002f04 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f042 0204 	orr.w	r2, r2, #4
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	e007      	b.n	8002f14 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0204 	bic.w	r2, r2, #4
 8002f12:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	ea42 0103 	orr.w	r1, r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	1e5a      	subs	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <__NVIC_SetPriorityGrouping+0x40>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f70:	4013      	ands	r3, r2
 8002f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <__NVIC_SetPriorityGrouping+0x44>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f82:	4a04      	ldr	r2, [pc, #16]	; (8002f94 <__NVIC_SetPriorityGrouping+0x40>)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	60d3      	str	r3, [r2, #12]
}
 8002f88:	bf00      	nop
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	e000ed00 	.word	0xe000ed00
 8002f98:	05fa0000 	.word	0x05fa0000

08002f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fa0:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	0a1b      	lsrs	r3, r3, #8
 8002fa6:	f003 0307 	and.w	r3, r3, #7
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	e000ed00 	.word	0xe000ed00

08002fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	db0b      	blt.n	8002fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	f003 021f 	and.w	r2, r3, #31
 8002fd0:	4907      	ldr	r1, [pc, #28]	; (8002ff0 <__NVIC_EnableIRQ+0x38>)
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	2001      	movs	r0, #1
 8002fda:	fa00 f202 	lsl.w	r2, r0, r2
 8002fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	e000e100 	.word	0xe000e100

08002ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	6039      	str	r1, [r7, #0]
 8002ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003004:	2b00      	cmp	r3, #0
 8003006:	db0a      	blt.n	800301e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	b2da      	uxtb	r2, r3
 800300c:	490c      	ldr	r1, [pc, #48]	; (8003040 <__NVIC_SetPriority+0x4c>)
 800300e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003012:	0112      	lsls	r2, r2, #4
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	440b      	add	r3, r1
 8003018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800301c:	e00a      	b.n	8003034 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	b2da      	uxtb	r2, r3
 8003022:	4908      	ldr	r1, [pc, #32]	; (8003044 <__NVIC_SetPriority+0x50>)
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	3b04      	subs	r3, #4
 800302c:	0112      	lsls	r2, r2, #4
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	440b      	add	r3, r1
 8003032:	761a      	strb	r2, [r3, #24]
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000e100 	.word	0xe000e100
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003048:	b480      	push	{r7}
 800304a:	b089      	sub	sp, #36	; 0x24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	f1c3 0307 	rsb	r3, r3, #7
 8003062:	2b04      	cmp	r3, #4
 8003064:	bf28      	it	cs
 8003066:	2304      	movcs	r3, #4
 8003068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	3304      	adds	r3, #4
 800306e:	2b06      	cmp	r3, #6
 8003070:	d902      	bls.n	8003078 <NVIC_EncodePriority+0x30>
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	3b03      	subs	r3, #3
 8003076:	e000      	b.n	800307a <NVIC_EncodePriority+0x32>
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800307c:	f04f 32ff 	mov.w	r2, #4294967295
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43da      	mvns	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	401a      	ands	r2, r3
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003090:	f04f 31ff 	mov.w	r1, #4294967295
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	fa01 f303 	lsl.w	r3, r1, r3
 800309a:	43d9      	mvns	r1, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a0:	4313      	orrs	r3, r2
         );
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3724      	adds	r7, #36	; 0x24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
	...

080030b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030c0:	d301      	bcc.n	80030c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030c2:	2301      	movs	r3, #1
 80030c4:	e00f      	b.n	80030e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030c6:	4a0a      	ldr	r2, [pc, #40]	; (80030f0 <SysTick_Config+0x40>)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ce:	210f      	movs	r1, #15
 80030d0:	f04f 30ff 	mov.w	r0, #4294967295
 80030d4:	f7ff ff8e 	bl	8002ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030d8:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <SysTick_Config+0x40>)
 80030da:	2200      	movs	r2, #0
 80030dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030de:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <SysTick_Config+0x40>)
 80030e0:	2207      	movs	r2, #7
 80030e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	e000e010 	.word	0xe000e010

080030f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff ff29 	bl	8002f54 <__NVIC_SetPriorityGrouping>
}
 8003102:	bf00      	nop
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800310a:	b580      	push	{r7, lr}
 800310c:	b086      	sub	sp, #24
 800310e:	af00      	add	r7, sp, #0
 8003110:	4603      	mov	r3, r0
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
 8003116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800311c:	f7ff ff3e 	bl	8002f9c <__NVIC_GetPriorityGrouping>
 8003120:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	68b9      	ldr	r1, [r7, #8]
 8003126:	6978      	ldr	r0, [r7, #20]
 8003128:	f7ff ff8e 	bl	8003048 <NVIC_EncodePriority>
 800312c:	4602      	mov	r2, r0
 800312e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003132:	4611      	mov	r1, r2
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff ff5d 	bl	8002ff4 <__NVIC_SetPriority>
}
 800313a:	bf00      	nop
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	4603      	mov	r3, r0
 800314a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800314c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff ff31 	bl	8002fb8 <__NVIC_EnableIRQ>
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff ffa2 	bl	80030b0 <SysTick_Config>
 800316c:	4603      	mov	r3, r0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003184:	f7ff fb26 	bl	80027d4 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e099      	b.n	80032c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0201 	bic.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031b4:	e00f      	b.n	80031d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031b6:	f7ff fb0d 	bl	80027d4 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b05      	cmp	r3, #5
 80031c2:	d908      	bls.n	80031d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2220      	movs	r2, #32
 80031c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2203      	movs	r2, #3
 80031ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e078      	b.n	80032c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1e8      	bne.n	80031b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	4b38      	ldr	r3, [pc, #224]	; (80032d0 <HAL_DMA_Init+0x158>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003202:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800320e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800321a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	4313      	orrs	r3, r2
 8003226:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	2b04      	cmp	r3, #4
 800322e:	d107      	bne.n	8003240 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003238:	4313      	orrs	r3, r2
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4313      	orrs	r3, r2
 800323e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f023 0307 	bic.w	r3, r3, #7
 8003256:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	4313      	orrs	r3, r2
 8003260:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	2b04      	cmp	r3, #4
 8003268:	d117      	bne.n	800329a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	4313      	orrs	r3, r2
 8003272:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00e      	beq.n	800329a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 faa5 	bl	80037cc <DMA_CheckFifoParam>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d008      	beq.n	800329a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2240      	movs	r2, #64	; 0x40
 800328c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003296:	2301      	movs	r3, #1
 8003298:	e016      	b.n	80032c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fa5c 	bl	8003760 <DMA_CalcBaseAndBitshift>
 80032a8:	4603      	mov	r3, r0
 80032aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b0:	223f      	movs	r2, #63	; 0x3f
 80032b2:	409a      	lsls	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	e010803f 	.word	0xe010803f

080032d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d101      	bne.n	80032fa <HAL_DMA_Start_IT+0x26>
 80032f6:	2302      	movs	r3, #2
 80032f8:	e048      	b.n	800338c <HAL_DMA_Start_IT+0xb8>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b01      	cmp	r3, #1
 800330c:	d137      	bne.n	800337e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2202      	movs	r2, #2
 8003312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	68b9      	ldr	r1, [r7, #8]
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 f9ee 	bl	8003704 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332c:	223f      	movs	r2, #63	; 0x3f
 800332e:	409a      	lsls	r2, r3
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0216 	orr.w	r2, r2, #22
 8003342:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695a      	ldr	r2, [r3, #20]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003352:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	2b00      	cmp	r3, #0
 800335a:	d007      	beq.n	800336c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0208 	orr.w	r2, r2, #8
 800336a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	e005      	b.n	800338a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003386:	2302      	movs	r3, #2
 8003388:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800338a:	7dfb      	ldrb	r3, [r7, #23]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d004      	beq.n	80033b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2280      	movs	r2, #128	; 0x80
 80033ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e00c      	b.n	80033cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2205      	movs	r2, #5
 80033b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0201 	bic.w	r2, r2, #1
 80033c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80033e4:	4b8e      	ldr	r3, [pc, #568]	; (8003620 <HAL_DMA_IRQHandler+0x248>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a8e      	ldr	r2, [pc, #568]	; (8003624 <HAL_DMA_IRQHandler+0x24c>)
 80033ea:	fba2 2303 	umull	r2, r3, r2, r3
 80033ee:	0a9b      	lsrs	r3, r3, #10
 80033f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003402:	2208      	movs	r2, #8
 8003404:	409a      	lsls	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4013      	ands	r3, r2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d01a      	beq.n	8003444 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	d013      	beq.n	8003444 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0204 	bic.w	r2, r2, #4
 800342a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003430:	2208      	movs	r2, #8
 8003432:	409a      	lsls	r2, r3
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343c:	f043 0201 	orr.w	r2, r3, #1
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	2201      	movs	r2, #1
 800344a:	409a      	lsls	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d012      	beq.n	800347a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00b      	beq.n	800347a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003466:	2201      	movs	r2, #1
 8003468:	409a      	lsls	r2, r3
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003472:	f043 0202 	orr.w	r2, r3, #2
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347e:	2204      	movs	r2, #4
 8003480:	409a      	lsls	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4013      	ands	r3, r2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d012      	beq.n	80034b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00b      	beq.n	80034b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349c:	2204      	movs	r2, #4
 800349e:	409a      	lsls	r2, r3
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a8:	f043 0204 	orr.w	r2, r3, #4
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b4:	2210      	movs	r2, #16
 80034b6:	409a      	lsls	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d043      	beq.n	8003548 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d03c      	beq.n	8003548 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d2:	2210      	movs	r2, #16
 80034d4:	409a      	lsls	r2, r3
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d018      	beq.n	800351a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d108      	bne.n	8003508 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d024      	beq.n	8003548 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	4798      	blx	r3
 8003506:	e01f      	b.n	8003548 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800350c:	2b00      	cmp	r3, #0
 800350e:	d01b      	beq.n	8003548 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	4798      	blx	r3
 8003518:	e016      	b.n	8003548 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003524:	2b00      	cmp	r3, #0
 8003526:	d107      	bne.n	8003538 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0208 	bic.w	r2, r2, #8
 8003536:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354c:	2220      	movs	r2, #32
 800354e:	409a      	lsls	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4013      	ands	r3, r2
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 808f 	beq.w	8003678 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 8087 	beq.w	8003678 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356e:	2220      	movs	r2, #32
 8003570:	409a      	lsls	r2, r3
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b05      	cmp	r3, #5
 8003580:	d136      	bne.n	80035f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0216 	bic.w	r2, r2, #22
 8003590:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695a      	ldr	r2, [r3, #20]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d103      	bne.n	80035b2 <HAL_DMA_IRQHandler+0x1da>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d007      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0208 	bic.w	r2, r2, #8
 80035c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c6:	223f      	movs	r2, #63	; 0x3f
 80035c8:	409a      	lsls	r2, r3
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d07e      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	4798      	blx	r3
        }
        return;
 80035ee:	e079      	b.n	80036e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d01d      	beq.n	800363a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10d      	bne.n	8003628 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003610:	2b00      	cmp	r3, #0
 8003612:	d031      	beq.n	8003678 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	4798      	blx	r3
 800361c:	e02c      	b.n	8003678 <HAL_DMA_IRQHandler+0x2a0>
 800361e:	bf00      	nop
 8003620:	20000000 	.word	0x20000000
 8003624:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362c:	2b00      	cmp	r3, #0
 800362e:	d023      	beq.n	8003678 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	4798      	blx	r3
 8003638:	e01e      	b.n	8003678 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10f      	bne.n	8003668 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0210 	bic.w	r2, r2, #16
 8003656:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367c:	2b00      	cmp	r3, #0
 800367e:	d032      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d022      	beq.n	80036d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2205      	movs	r2, #5
 8003690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0201 	bic.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	3301      	adds	r3, #1
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d307      	bcc.n	80036c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f2      	bne.n	80036a4 <HAL_DMA_IRQHandler+0x2cc>
 80036be:	e000      	b.n	80036c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80036c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d005      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	4798      	blx	r3
 80036e2:	e000      	b.n	80036e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80036e4:	bf00      	nop
    }
  }
}
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003720:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	2b40      	cmp	r3, #64	; 0x40
 8003730:	d108      	bne.n	8003744 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003742:	e007      	b.n	8003754 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	60da      	str	r2, [r3, #12]
}
 8003754:	bf00      	nop
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	b2db      	uxtb	r3, r3
 800376e:	3b10      	subs	r3, #16
 8003770:	4a13      	ldr	r2, [pc, #76]	; (80037c0 <DMA_CalcBaseAndBitshift+0x60>)
 8003772:	fba2 2303 	umull	r2, r3, r2, r3
 8003776:	091b      	lsrs	r3, r3, #4
 8003778:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800377a:	4a12      	ldr	r2, [pc, #72]	; (80037c4 <DMA_CalcBaseAndBitshift+0x64>)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4413      	add	r3, r2
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2b03      	cmp	r3, #3
 800378c:	d908      	bls.n	80037a0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <DMA_CalcBaseAndBitshift+0x68>)
 8003796:	4013      	ands	r3, r2
 8003798:	1d1a      	adds	r2, r3, #4
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	659a      	str	r2, [r3, #88]	; 0x58
 800379e:	e006      	b.n	80037ae <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	461a      	mov	r2, r3
 80037a6:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <DMA_CalcBaseAndBitshift+0x68>)
 80037a8:	4013      	ands	r3, r2
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	aaaaaaab 	.word	0xaaaaaaab
 80037c4:	0800ea54 	.word	0x0800ea54
 80037c8:	fffffc00 	.word	0xfffffc00

080037cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037d4:	2300      	movs	r3, #0
 80037d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d11f      	bne.n	8003826 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d856      	bhi.n	800389a <DMA_CheckFifoParam+0xce>
 80037ec:	a201      	add	r2, pc, #4	; (adr r2, 80037f4 <DMA_CheckFifoParam+0x28>)
 80037ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f2:	bf00      	nop
 80037f4:	08003805 	.word	0x08003805
 80037f8:	08003817 	.word	0x08003817
 80037fc:	08003805 	.word	0x08003805
 8003800:	0800389b 	.word	0x0800389b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003808:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d046      	beq.n	800389e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003814:	e043      	b.n	800389e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800381e:	d140      	bne.n	80038a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003824:	e03d      	b.n	80038a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800382e:	d121      	bne.n	8003874 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2b03      	cmp	r3, #3
 8003834:	d837      	bhi.n	80038a6 <DMA_CheckFifoParam+0xda>
 8003836:	a201      	add	r2, pc, #4	; (adr r2, 800383c <DMA_CheckFifoParam+0x70>)
 8003838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383c:	0800384d 	.word	0x0800384d
 8003840:	08003853 	.word	0x08003853
 8003844:	0800384d 	.word	0x0800384d
 8003848:	08003865 	.word	0x08003865
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	73fb      	strb	r3, [r7, #15]
      break;
 8003850:	e030      	b.n	80038b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003856:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d025      	beq.n	80038aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003862:	e022      	b.n	80038aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800386c:	d11f      	bne.n	80038ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003872:	e01c      	b.n	80038ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2b02      	cmp	r3, #2
 8003878:	d903      	bls.n	8003882 <DMA_CheckFifoParam+0xb6>
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2b03      	cmp	r3, #3
 800387e:	d003      	beq.n	8003888 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003880:	e018      	b.n	80038b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	73fb      	strb	r3, [r7, #15]
      break;
 8003886:	e015      	b.n	80038b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00e      	beq.n	80038b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	73fb      	strb	r3, [r7, #15]
      break;
 8003898:	e00b      	b.n	80038b2 <DMA_CheckFifoParam+0xe6>
      break;
 800389a:	bf00      	nop
 800389c:	e00a      	b.n	80038b4 <DMA_CheckFifoParam+0xe8>
      break;
 800389e:	bf00      	nop
 80038a0:	e008      	b.n	80038b4 <DMA_CheckFifoParam+0xe8>
      break;
 80038a2:	bf00      	nop
 80038a4:	e006      	b.n	80038b4 <DMA_CheckFifoParam+0xe8>
      break;
 80038a6:	bf00      	nop
 80038a8:	e004      	b.n	80038b4 <DMA_CheckFifoParam+0xe8>
      break;
 80038aa:	bf00      	nop
 80038ac:	e002      	b.n	80038b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80038ae:	bf00      	nop
 80038b0:	e000      	b.n	80038b4 <DMA_CheckFifoParam+0xe8>
      break;
 80038b2:	bf00      	nop
    }
  } 
  
  return status; 
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop

080038c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b089      	sub	sp, #36	; 0x24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80038ce:	2300      	movs	r3, #0
 80038d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80038d6:	2300      	movs	r3, #0
 80038d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80038da:	2300      	movs	r3, #0
 80038dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80038de:	2300      	movs	r3, #0
 80038e0:	61fb      	str	r3, [r7, #28]
 80038e2:	e175      	b.n	8003bd0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80038e4:	2201      	movs	r2, #1
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	4013      	ands	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	f040 8164 	bne.w	8003bca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	2b01      	cmp	r3, #1
 800390c:	d005      	beq.n	800391a <HAL_GPIO_Init+0x56>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d130      	bne.n	800397c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	2203      	movs	r2, #3
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	43db      	mvns	r3, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4013      	ands	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	4313      	orrs	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003950:	2201      	movs	r2, #1
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	f003 0201 	and.w	r2, r3, #1
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4313      	orrs	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f003 0303 	and.w	r3, r3, #3
 8003984:	2b03      	cmp	r3, #3
 8003986:	d017      	beq.n	80039b8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	2203      	movs	r2, #3
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	43db      	mvns	r3, r3
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	4013      	ands	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 0303 	and.w	r3, r3, #3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d123      	bne.n	8003a0c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	08da      	lsrs	r2, r3, #3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3208      	adds	r2, #8
 80039cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	220f      	movs	r2, #15
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4013      	ands	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	08da      	lsrs	r2, r3, #3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3208      	adds	r2, #8
 8003a06:	69b9      	ldr	r1, [r7, #24]
 8003a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	2203      	movs	r2, #3
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	4013      	ands	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 0203 	and.w	r2, r3, #3
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 80be 	beq.w	8003bca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a4e:	4b66      	ldr	r3, [pc, #408]	; (8003be8 <HAL_GPIO_Init+0x324>)
 8003a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a52:	4a65      	ldr	r2, [pc, #404]	; (8003be8 <HAL_GPIO_Init+0x324>)
 8003a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a58:	6453      	str	r3, [r2, #68]	; 0x44
 8003a5a:	4b63      	ldr	r3, [pc, #396]	; (8003be8 <HAL_GPIO_Init+0x324>)
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003a66:	4a61      	ldr	r2, [pc, #388]	; (8003bec <HAL_GPIO_Init+0x328>)
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	089b      	lsrs	r3, r3, #2
 8003a6c:	3302      	adds	r3, #2
 8003a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	220f      	movs	r2, #15
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	43db      	mvns	r3, r3
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	4013      	ands	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a58      	ldr	r2, [pc, #352]	; (8003bf0 <HAL_GPIO_Init+0x32c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d037      	beq.n	8003b02 <HAL_GPIO_Init+0x23e>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a57      	ldr	r2, [pc, #348]	; (8003bf4 <HAL_GPIO_Init+0x330>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d031      	beq.n	8003afe <HAL_GPIO_Init+0x23a>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a56      	ldr	r2, [pc, #344]	; (8003bf8 <HAL_GPIO_Init+0x334>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d02b      	beq.n	8003afa <HAL_GPIO_Init+0x236>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a55      	ldr	r2, [pc, #340]	; (8003bfc <HAL_GPIO_Init+0x338>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d025      	beq.n	8003af6 <HAL_GPIO_Init+0x232>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a54      	ldr	r2, [pc, #336]	; (8003c00 <HAL_GPIO_Init+0x33c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d01f      	beq.n	8003af2 <HAL_GPIO_Init+0x22e>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a53      	ldr	r2, [pc, #332]	; (8003c04 <HAL_GPIO_Init+0x340>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d019      	beq.n	8003aee <HAL_GPIO_Init+0x22a>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a52      	ldr	r2, [pc, #328]	; (8003c08 <HAL_GPIO_Init+0x344>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d013      	beq.n	8003aea <HAL_GPIO_Init+0x226>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a51      	ldr	r2, [pc, #324]	; (8003c0c <HAL_GPIO_Init+0x348>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00d      	beq.n	8003ae6 <HAL_GPIO_Init+0x222>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a50      	ldr	r2, [pc, #320]	; (8003c10 <HAL_GPIO_Init+0x34c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d007      	beq.n	8003ae2 <HAL_GPIO_Init+0x21e>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a4f      	ldr	r2, [pc, #316]	; (8003c14 <HAL_GPIO_Init+0x350>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d101      	bne.n	8003ade <HAL_GPIO_Init+0x21a>
 8003ada:	2309      	movs	r3, #9
 8003adc:	e012      	b.n	8003b04 <HAL_GPIO_Init+0x240>
 8003ade:	230a      	movs	r3, #10
 8003ae0:	e010      	b.n	8003b04 <HAL_GPIO_Init+0x240>
 8003ae2:	2308      	movs	r3, #8
 8003ae4:	e00e      	b.n	8003b04 <HAL_GPIO_Init+0x240>
 8003ae6:	2307      	movs	r3, #7
 8003ae8:	e00c      	b.n	8003b04 <HAL_GPIO_Init+0x240>
 8003aea:	2306      	movs	r3, #6
 8003aec:	e00a      	b.n	8003b04 <HAL_GPIO_Init+0x240>
 8003aee:	2305      	movs	r3, #5
 8003af0:	e008      	b.n	8003b04 <HAL_GPIO_Init+0x240>
 8003af2:	2304      	movs	r3, #4
 8003af4:	e006      	b.n	8003b04 <HAL_GPIO_Init+0x240>
 8003af6:	2303      	movs	r3, #3
 8003af8:	e004      	b.n	8003b04 <HAL_GPIO_Init+0x240>
 8003afa:	2302      	movs	r3, #2
 8003afc:	e002      	b.n	8003b04 <HAL_GPIO_Init+0x240>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <HAL_GPIO_Init+0x240>
 8003b02:	2300      	movs	r3, #0
 8003b04:	69fa      	ldr	r2, [r7, #28]
 8003b06:	f002 0203 	and.w	r2, r2, #3
 8003b0a:	0092      	lsls	r2, r2, #2
 8003b0c:	4093      	lsls	r3, r2
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003b14:	4935      	ldr	r1, [pc, #212]	; (8003bec <HAL_GPIO_Init+0x328>)
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	089b      	lsrs	r3, r3, #2
 8003b1a:	3302      	adds	r3, #2
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b22:	4b3d      	ldr	r3, [pc, #244]	; (8003c18 <HAL_GPIO_Init+0x354>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b46:	4a34      	ldr	r2, [pc, #208]	; (8003c18 <HAL_GPIO_Init+0x354>)
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b4c:	4b32      	ldr	r3, [pc, #200]	; (8003c18 <HAL_GPIO_Init+0x354>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	43db      	mvns	r3, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b70:	4a29      	ldr	r2, [pc, #164]	; (8003c18 <HAL_GPIO_Init+0x354>)
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b76:	4b28      	ldr	r3, [pc, #160]	; (8003c18 <HAL_GPIO_Init+0x354>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	4013      	ands	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b9a:	4a1f      	ldr	r2, [pc, #124]	; (8003c18 <HAL_GPIO_Init+0x354>)
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ba0:	4b1d      	ldr	r3, [pc, #116]	; (8003c18 <HAL_GPIO_Init+0x354>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4013      	ands	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bc4:	4a14      	ldr	r2, [pc, #80]	; (8003c18 <HAL_GPIO_Init+0x354>)
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	61fb      	str	r3, [r7, #28]
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	2b0f      	cmp	r3, #15
 8003bd4:	f67f ae86 	bls.w	80038e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003bd8:	bf00      	nop
 8003bda:	bf00      	nop
 8003bdc:	3724      	adds	r7, #36	; 0x24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	40023800 	.word	0x40023800
 8003bec:	40013800 	.word	0x40013800
 8003bf0:	40020000 	.word	0x40020000
 8003bf4:	40020400 	.word	0x40020400
 8003bf8:	40020800 	.word	0x40020800
 8003bfc:	40020c00 	.word	0x40020c00
 8003c00:	40021000 	.word	0x40021000
 8003c04:	40021400 	.word	0x40021400
 8003c08:	40021800 	.word	0x40021800
 8003c0c:	40021c00 	.word	0x40021c00
 8003c10:	40022000 	.word	0x40022000
 8003c14:	40022400 	.word	0x40022400
 8003c18:	40013c00 	.word	0x40013c00

08003c1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e07f      	b.n	8003d2e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d106      	bne.n	8003c48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7fd fd58 	bl	80016f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2224      	movs	r2, #36	; 0x24
 8003c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0201 	bic.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d107      	bne.n	8003c96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c92:	609a      	str	r2, [r3, #8]
 8003c94:	e006      	b.n	8003ca4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003ca2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d104      	bne.n	8003cb6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cb4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6859      	ldr	r1, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	4b1d      	ldr	r3, [pc, #116]	; (8003d38 <HAL_I2C_Init+0x11c>)
 8003cc2:	430b      	orrs	r3, r1
 8003cc4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cd4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691a      	ldr	r2, [r3, #16]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	69d9      	ldr	r1, [r3, #28]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a1a      	ldr	r2, [r3, #32]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	02008000 	.word	0x02008000

08003d3c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af02      	add	r7, sp, #8
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	607a      	str	r2, [r7, #4]
 8003d46:	461a      	mov	r2, r3
 8003d48:	460b      	mov	r3, r1
 8003d4a:	817b      	strh	r3, [r7, #10]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b20      	cmp	r3, #32
 8003d5a:	f040 80da 	bne.w	8003f12 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_I2C_Master_Transmit+0x30>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e0d3      	b.n	8003f14 <HAL_I2C_Master_Transmit+0x1d8>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d74:	f7fe fd2e 	bl	80027d4 <HAL_GetTick>
 8003d78:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	2319      	movs	r3, #25
 8003d80:	2201      	movs	r2, #1
 8003d82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 fc56 	bl	8004638 <I2C_WaitOnFlagUntilTimeout>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e0be      	b.n	8003f14 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2221      	movs	r2, #33	; 0x21
 8003d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2210      	movs	r2, #16
 8003da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	893a      	ldrh	r2, [r7, #8]
 8003db6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2bff      	cmp	r3, #255	; 0xff
 8003dc6:	d90e      	bls.n	8003de6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	22ff      	movs	r2, #255	; 0xff
 8003dcc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	8979      	ldrh	r1, [r7, #10]
 8003dd6:	4b51      	ldr	r3, [pc, #324]	; (8003f1c <HAL_I2C_Master_Transmit+0x1e0>)
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 fe4c 	bl	8004a7c <I2C_TransferConfig>
 8003de4:	e06c      	b.n	8003ec0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	8979      	ldrh	r1, [r7, #10]
 8003df8:	4b48      	ldr	r3, [pc, #288]	; (8003f1c <HAL_I2C_Master_Transmit+0x1e0>)
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 fe3b 	bl	8004a7c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003e06:	e05b      	b.n	8003ec0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	6a39      	ldr	r1, [r7, #32]
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 fc53 	bl	80046b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e07b      	b.n	8003f14 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	781a      	ldrb	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	1c5a      	adds	r2, r3, #1
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d034      	beq.n	8003ec0 <HAL_I2C_Master_Transmit+0x184>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d130      	bne.n	8003ec0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	2200      	movs	r2, #0
 8003e66:	2180      	movs	r1, #128	; 0x80
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 fbe5 	bl	8004638 <I2C_WaitOnFlagUntilTimeout>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e04d      	b.n	8003f14 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2bff      	cmp	r3, #255	; 0xff
 8003e80:	d90e      	bls.n	8003ea0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	22ff      	movs	r2, #255	; 0xff
 8003e86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	8979      	ldrh	r1, [r7, #10]
 8003e90:	2300      	movs	r3, #0
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 fdef 	bl	8004a7c <I2C_TransferConfig>
 8003e9e:	e00f      	b.n	8003ec0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	8979      	ldrh	r1, [r7, #10]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 fdde 	bl	8004a7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d19e      	bne.n	8003e08 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	6a39      	ldr	r1, [r7, #32]
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 fc32 	bl	8004738 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e01a      	b.n	8003f14 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6859      	ldr	r1, [r3, #4]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	4b0b      	ldr	r3, [pc, #44]	; (8003f20 <HAL_I2C_Master_Transmit+0x1e4>)
 8003ef2:	400b      	ands	r3, r1
 8003ef4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	e000      	b.n	8003f14 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003f12:	2302      	movs	r3, #2
  }
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	80002000 	.word	0x80002000
 8003f20:	fe00e800 	.word	0xfe00e800

08003f24 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	460b      	mov	r3, r1
 8003f32:	817b      	strh	r3, [r7, #10]
 8003f34:	4613      	mov	r3, r2
 8003f36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b20      	cmp	r3, #32
 8003f42:	f040 80db 	bne.w	80040fc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_I2C_Master_Receive+0x30>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e0d4      	b.n	80040fe <HAL_I2C_Master_Receive+0x1da>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f5c:	f7fe fc3a 	bl	80027d4 <HAL_GetTick>
 8003f60:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	2319      	movs	r3, #25
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 fb62 	bl	8004638 <I2C_WaitOnFlagUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e0bf      	b.n	80040fe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2222      	movs	r2, #34	; 0x22
 8003f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2210      	movs	r2, #16
 8003f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	893a      	ldrh	r2, [r7, #8]
 8003f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	2bff      	cmp	r3, #255	; 0xff
 8003fae:	d90e      	bls.n	8003fce <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	22ff      	movs	r2, #255	; 0xff
 8003fb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	8979      	ldrh	r1, [r7, #10]
 8003fbe:	4b52      	ldr	r3, [pc, #328]	; (8004108 <HAL_I2C_Master_Receive+0x1e4>)
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f000 fd58 	bl	8004a7c <I2C_TransferConfig>
 8003fcc:	e06d      	b.n	80040aa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	8979      	ldrh	r1, [r7, #10]
 8003fe0:	4b49      	ldr	r3, [pc, #292]	; (8004108 <HAL_I2C_Master_Receive+0x1e4>)
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 fd47 	bl	8004a7c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003fee:	e05c      	b.n	80040aa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	6a39      	ldr	r1, [r7, #32]
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 fbdb 	bl	80047b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e07c      	b.n	80040fe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004020:	3b01      	subs	r3, #1
 8004022:	b29a      	uxth	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402c:	b29b      	uxth	r3, r3
 800402e:	3b01      	subs	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d034      	beq.n	80040aa <HAL_I2C_Master_Receive+0x186>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004044:	2b00      	cmp	r3, #0
 8004046:	d130      	bne.n	80040aa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	2200      	movs	r2, #0
 8004050:	2180      	movs	r1, #128	; 0x80
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 faf0 	bl	8004638 <I2C_WaitOnFlagUntilTimeout>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e04d      	b.n	80040fe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004066:	b29b      	uxth	r3, r3
 8004068:	2bff      	cmp	r3, #255	; 0xff
 800406a:	d90e      	bls.n	800408a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	22ff      	movs	r2, #255	; 0xff
 8004070:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004076:	b2da      	uxtb	r2, r3
 8004078:	8979      	ldrh	r1, [r7, #10]
 800407a:	2300      	movs	r3, #0
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 fcfa 	bl	8004a7c <I2C_TransferConfig>
 8004088:	e00f      	b.n	80040aa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004098:	b2da      	uxtb	r2, r3
 800409a:	8979      	ldrh	r1, [r7, #10]
 800409c:	2300      	movs	r3, #0
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 fce9 	bl	8004a7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d19d      	bne.n	8003ff0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	6a39      	ldr	r1, [r7, #32]
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 fb3d 	bl	8004738 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e01a      	b.n	80040fe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2220      	movs	r2, #32
 80040ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6859      	ldr	r1, [r3, #4]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	4b0c      	ldr	r3, [pc, #48]	; (800410c <HAL_I2C_Master_Receive+0x1e8>)
 80040dc:	400b      	ands	r3, r1
 80040de:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	e000      	b.n	80040fe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80040fc:	2302      	movs	r3, #2
  }
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	80002400 	.word	0x80002400
 800410c:	fe00e800 	.word	0xfe00e800

08004110 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af02      	add	r7, sp, #8
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	4608      	mov	r0, r1
 800411a:	4611      	mov	r1, r2
 800411c:	461a      	mov	r2, r3
 800411e:	4603      	mov	r3, r0
 8004120:	817b      	strh	r3, [r7, #10]
 8004122:	460b      	mov	r3, r1
 8004124:	813b      	strh	r3, [r7, #8]
 8004126:	4613      	mov	r3, r2
 8004128:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b20      	cmp	r3, #32
 8004134:	f040 80f9 	bne.w	800432a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <HAL_I2C_Mem_Write+0x34>
 800413e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004140:	2b00      	cmp	r3, #0
 8004142:	d105      	bne.n	8004150 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f44f 7200 	mov.w	r2, #512	; 0x200
 800414a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e0ed      	b.n	800432c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <HAL_I2C_Mem_Write+0x4e>
 800415a:	2302      	movs	r3, #2
 800415c:	e0e6      	b.n	800432c <HAL_I2C_Mem_Write+0x21c>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004166:	f7fe fb35 	bl	80027d4 <HAL_GetTick>
 800416a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	2319      	movs	r3, #25
 8004172:	2201      	movs	r2, #1
 8004174:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 fa5d 	bl	8004638 <I2C_WaitOnFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e0d1      	b.n	800432c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2221      	movs	r2, #33	; 0x21
 800418c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2240      	movs	r2, #64	; 0x40
 8004194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a3a      	ldr	r2, [r7, #32]
 80041a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041b0:	88f8      	ldrh	r0, [r7, #6]
 80041b2:	893a      	ldrh	r2, [r7, #8]
 80041b4:	8979      	ldrh	r1, [r7, #10]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	9301      	str	r3, [sp, #4]
 80041ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	4603      	mov	r3, r0
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 f9c1 	bl	8004548 <I2C_RequestMemoryWrite>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d005      	beq.n	80041d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e0a9      	b.n	800432c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2bff      	cmp	r3, #255	; 0xff
 80041e0:	d90e      	bls.n	8004200 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	22ff      	movs	r2, #255	; 0xff
 80041e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	8979      	ldrh	r1, [r7, #10]
 80041f0:	2300      	movs	r3, #0
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 fc3f 	bl	8004a7c <I2C_TransferConfig>
 80041fe:	e00f      	b.n	8004220 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420e:	b2da      	uxtb	r2, r3
 8004210:	8979      	ldrh	r1, [r7, #10]
 8004212:	2300      	movs	r3, #0
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 fc2e 	bl	8004a7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 fa47 	bl	80046b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e07b      	b.n	800432c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	781a      	ldrb	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424e:	b29b      	uxth	r3, r3
 8004250:	3b01      	subs	r3, #1
 8004252:	b29a      	uxth	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425c:	3b01      	subs	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d034      	beq.n	80042d8 <HAL_I2C_Mem_Write+0x1c8>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004272:	2b00      	cmp	r3, #0
 8004274:	d130      	bne.n	80042d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427c:	2200      	movs	r2, #0
 800427e:	2180      	movs	r1, #128	; 0x80
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 f9d9 	bl	8004638 <I2C_WaitOnFlagUntilTimeout>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e04d      	b.n	800432c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004294:	b29b      	uxth	r3, r3
 8004296:	2bff      	cmp	r3, #255	; 0xff
 8004298:	d90e      	bls.n	80042b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	22ff      	movs	r2, #255	; 0xff
 800429e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	8979      	ldrh	r1, [r7, #10]
 80042a8:	2300      	movs	r3, #0
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 fbe3 	bl	8004a7c <I2C_TransferConfig>
 80042b6:	e00f      	b.n	80042d8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	8979      	ldrh	r1, [r7, #10]
 80042ca:	2300      	movs	r3, #0
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 fbd2 	bl	8004a7c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042dc:	b29b      	uxth	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d19e      	bne.n	8004220 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 fa26 	bl	8004738 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e01a      	b.n	800432c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2220      	movs	r2, #32
 80042fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6859      	ldr	r1, [r3, #4]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <HAL_I2C_Mem_Write+0x224>)
 800430a:	400b      	ands	r3, r1
 800430c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2220      	movs	r2, #32
 8004312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	e000      	b.n	800432c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800432a:	2302      	movs	r3, #2
  }
}
 800432c:	4618      	mov	r0, r3
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	fe00e800 	.word	0xfe00e800

08004338 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b08a      	sub	sp, #40	; 0x28
 800433c:	af02      	add	r7, sp, #8
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	607a      	str	r2, [r7, #4]
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	460b      	mov	r3, r1
 8004346:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004348:	2300      	movs	r3, #0
 800434a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b20      	cmp	r3, #32
 8004356:	f040 80ef 	bne.w	8004538 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004368:	d101      	bne.n	800436e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800436a:	2302      	movs	r3, #2
 800436c:	e0e5      	b.n	800453a <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_I2C_IsDeviceReady+0x44>
 8004378:	2302      	movs	r3, #2
 800437a:	e0de      	b.n	800453a <HAL_I2C_IsDeviceReady+0x202>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2224      	movs	r2, #36	; 0x24
 8004388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d105      	bne.n	80043a6 <HAL_I2C_IsDeviceReady+0x6e>
 800439a:	897b      	ldrh	r3, [r7, #10]
 800439c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80043a0:	4b68      	ldr	r3, [pc, #416]	; (8004544 <HAL_I2C_IsDeviceReady+0x20c>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	e004      	b.n	80043b0 <HAL_I2C_IsDeviceReady+0x78>
 80043a6:	897b      	ldrh	r3, [r7, #10]
 80043a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043ac:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	6812      	ldr	r2, [r2, #0]
 80043b4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80043b6:	f7fe fa0d 	bl	80027d4 <HAL_GetTick>
 80043ba:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b20      	cmp	r3, #32
 80043c8:	bf0c      	ite	eq
 80043ca:	2301      	moveq	r3, #1
 80043cc:	2300      	movne	r3, #0
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	f003 0310 	and.w	r3, r3, #16
 80043dc:	2b10      	cmp	r3, #16
 80043de:	bf0c      	ite	eq
 80043e0:	2301      	moveq	r3, #1
 80043e2:	2300      	movne	r3, #0
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80043e8:	e034      	b.n	8004454 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f0:	d01a      	beq.n	8004428 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043f2:	f7fe f9ef 	bl	80027d4 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d302      	bcc.n	8004408 <HAL_I2C_IsDeviceReady+0xd0>
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10f      	bne.n	8004428 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004414:	f043 0220 	orr.w	r2, r3, #32
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e088      	b.n	800453a <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	f003 0320 	and.w	r3, r3, #32
 8004432:	2b20      	cmp	r3, #32
 8004434:	bf0c      	ite	eq
 8004436:	2301      	moveq	r3, #1
 8004438:	2300      	movne	r3, #0
 800443a:	b2db      	uxtb	r3, r3
 800443c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	f003 0310 	and.w	r3, r3, #16
 8004448:	2b10      	cmp	r3, #16
 800444a:	bf0c      	ite	eq
 800444c:	2301      	moveq	r3, #1
 800444e:	2300      	movne	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004454:	7ffb      	ldrb	r3, [r7, #31]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d102      	bne.n	8004460 <HAL_I2C_IsDeviceReady+0x128>
 800445a:	7fbb      	ldrb	r3, [r7, #30]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0c4      	beq.n	80043ea <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	f003 0310 	and.w	r3, r3, #16
 800446a:	2b10      	cmp	r3, #16
 800446c:	d01a      	beq.n	80044a4 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2200      	movs	r2, #0
 8004476:	2120      	movs	r1, #32
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 f8dd 	bl	8004638 <I2C_WaitOnFlagUntilTimeout>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e058      	b.n	800453a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2220      	movs	r2, #32
 800448e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	e04a      	b.n	800453a <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	2200      	movs	r2, #0
 80044ac:	2120      	movs	r1, #32
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 f8c2 	bl	8004638 <I2C_WaitOnFlagUntilTimeout>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e03d      	b.n	800453a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2210      	movs	r2, #16
 80044c4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2220      	movs	r2, #32
 80044cc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d118      	bne.n	8004508 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044e4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2200      	movs	r2, #0
 80044ee:	2120      	movs	r1, #32
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 f8a1 	bl	8004638 <I2C_WaitOnFlagUntilTimeout>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e01c      	b.n	800453a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2220      	movs	r2, #32
 8004506:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	3301      	adds	r3, #1
 800450c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	429a      	cmp	r2, r3
 8004514:	f63f af3d 	bhi.w	8004392 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004524:	f043 0220 	orr.w	r2, r3, #32
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e000      	b.n	800453a <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8004538:	2302      	movs	r3, #2
  }
}
 800453a:	4618      	mov	r0, r3
 800453c:	3720      	adds	r7, #32
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	02002000 	.word	0x02002000

08004548 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af02      	add	r7, sp, #8
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	4608      	mov	r0, r1
 8004552:	4611      	mov	r1, r2
 8004554:	461a      	mov	r2, r3
 8004556:	4603      	mov	r3, r0
 8004558:	817b      	strh	r3, [r7, #10]
 800455a:	460b      	mov	r3, r1
 800455c:	813b      	strh	r3, [r7, #8]
 800455e:	4613      	mov	r3, r2
 8004560:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004562:	88fb      	ldrh	r3, [r7, #6]
 8004564:	b2da      	uxtb	r2, r3
 8004566:	8979      	ldrh	r1, [r7, #10]
 8004568:	4b20      	ldr	r3, [pc, #128]	; (80045ec <I2C_RequestMemoryWrite+0xa4>)
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 fa83 	bl	8004a7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004576:	69fa      	ldr	r2, [r7, #28]
 8004578:	69b9      	ldr	r1, [r7, #24]
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 f89c 	bl	80046b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e02c      	b.n	80045e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800458a:	88fb      	ldrh	r3, [r7, #6]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d105      	bne.n	800459c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004590:	893b      	ldrh	r3, [r7, #8]
 8004592:	b2da      	uxtb	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	629a      	str	r2, [r3, #40]	; 0x28
 800459a:	e015      	b.n	80045c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800459c:	893b      	ldrh	r3, [r7, #8]
 800459e:	0a1b      	lsrs	r3, r3, #8
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	69b9      	ldr	r1, [r7, #24]
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 f882 	bl	80046b8 <I2C_WaitOnTXISFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e012      	b.n	80045e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045be:	893b      	ldrh	r3, [r7, #8]
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	2200      	movs	r2, #0
 80045d0:	2180      	movs	r1, #128	; 0x80
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 f830 	bl	8004638 <I2C_WaitOnFlagUntilTimeout>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	80002000 	.word	0x80002000

080045f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b02      	cmp	r3, #2
 8004604:	d103      	bne.n	800460e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2200      	movs	r2, #0
 800460c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b01      	cmp	r3, #1
 800461a:	d007      	beq.n	800462c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	699a      	ldr	r2, [r3, #24]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	619a      	str	r2, [r3, #24]
  }
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	603b      	str	r3, [r7, #0]
 8004644:	4613      	mov	r3, r2
 8004646:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004648:	e022      	b.n	8004690 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004650:	d01e      	beq.n	8004690 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004652:	f7fe f8bf 	bl	80027d4 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d302      	bcc.n	8004668 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d113      	bne.n	8004690 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466c:	f043 0220 	orr.w	r2, r3, #32
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2220      	movs	r2, #32
 8004678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e00f      	b.n	80046b0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699a      	ldr	r2, [r3, #24]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	4013      	ands	r3, r2
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	429a      	cmp	r2, r3
 800469e:	bf0c      	ite	eq
 80046a0:	2301      	moveq	r3, #1
 80046a2:	2300      	movne	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	461a      	mov	r2, r3
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d0cd      	beq.n	800464a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046c4:	e02c      	b.n	8004720 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	68b9      	ldr	r1, [r7, #8]
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 f8ea 	bl	80048a4 <I2C_IsErrorOccurred>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e02a      	b.n	8004730 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e0:	d01e      	beq.n	8004720 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e2:	f7fe f877 	bl	80027d4 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d302      	bcc.n	80046f8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d113      	bne.n	8004720 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fc:	f043 0220 	orr.w	r2, r3, #32
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2220      	movs	r2, #32
 8004708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e007      	b.n	8004730 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b02      	cmp	r3, #2
 800472c:	d1cb      	bne.n	80046c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004744:	e028      	b.n	8004798 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	68b9      	ldr	r1, [r7, #8]
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 f8aa 	bl	80048a4 <I2C_IsErrorOccurred>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e026      	b.n	80047a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800475a:	f7fe f83b 	bl	80027d4 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	429a      	cmp	r2, r3
 8004768:	d302      	bcc.n	8004770 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d113      	bne.n	8004798 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004774:	f043 0220 	orr.w	r2, r3, #32
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e007      	b.n	80047a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	f003 0320 	and.w	r3, r3, #32
 80047a2:	2b20      	cmp	r3, #32
 80047a4:	d1cf      	bne.n	8004746 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047bc:	e064      	b.n	8004888 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	68b9      	ldr	r1, [r7, #8]
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 f86e 	bl	80048a4 <I2C_IsErrorOccurred>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e062      	b.n	8004898 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	f003 0320 	and.w	r3, r3, #32
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d138      	bne.n	8004852 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	f003 0304 	and.w	r3, r3, #4
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d105      	bne.n	80047fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80047f6:	2300      	movs	r3, #0
 80047f8:	e04e      	b.n	8004898 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	f003 0310 	and.w	r3, r3, #16
 8004804:	2b10      	cmp	r3, #16
 8004806:	d107      	bne.n	8004818 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2210      	movs	r2, #16
 800480e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2204      	movs	r2, #4
 8004814:	645a      	str	r2, [r3, #68]	; 0x44
 8004816:	e002      	b.n	800481e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2220      	movs	r2, #32
 8004824:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6859      	ldr	r1, [r3, #4]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	4b1b      	ldr	r3, [pc, #108]	; (80048a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004832:	400b      	ands	r3, r1
 8004834:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2220      	movs	r2, #32
 800483a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e022      	b.n	8004898 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004852:	f7fd ffbf 	bl	80027d4 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	429a      	cmp	r2, r3
 8004860:	d302      	bcc.n	8004868 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10f      	bne.n	8004888 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486c:	f043 0220 	orr.w	r2, r3, #32
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2220      	movs	r2, #32
 8004878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e007      	b.n	8004898 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	f003 0304 	and.w	r3, r3, #4
 8004892:	2b04      	cmp	r3, #4
 8004894:	d193      	bne.n	80047be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	fe00e800 	.word	0xfe00e800

080048a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b08a      	sub	sp, #40	; 0x28
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80048be:	2300      	movs	r3, #0
 80048c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d075      	beq.n	80049bc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2210      	movs	r2, #16
 80048d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048d8:	e056      	b.n	8004988 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e0:	d052      	beq.n	8004988 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048e2:	f7fd ff77 	bl	80027d4 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d302      	bcc.n	80048f8 <I2C_IsErrorOccurred+0x54>
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d147      	bne.n	8004988 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004902:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800490a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004916:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800491a:	d12e      	bne.n	800497a <I2C_IsErrorOccurred+0xd6>
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004922:	d02a      	beq.n	800497a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004924:	7cfb      	ldrb	r3, [r7, #19]
 8004926:	2b20      	cmp	r3, #32
 8004928:	d027      	beq.n	800497a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004938:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800493a:	f7fd ff4b 	bl	80027d4 <HAL_GetTick>
 800493e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004940:	e01b      	b.n	800497a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004942:	f7fd ff47 	bl	80027d4 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b19      	cmp	r3, #25
 800494e:	d914      	bls.n	800497a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004954:	f043 0220 	orr.w	r2, r3, #32
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	2b20      	cmp	r3, #32
 8004986:	d1dc      	bne.n	8004942 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	f003 0320 	and.w	r3, r3, #32
 8004992:	2b20      	cmp	r3, #32
 8004994:	d003      	beq.n	800499e <I2C_IsErrorOccurred+0xfa>
 8004996:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800499a:	2b00      	cmp	r3, #0
 800499c:	d09d      	beq.n	80048da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800499e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d103      	bne.n	80049ae <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2220      	movs	r2, #32
 80049ac:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80049ae:	6a3b      	ldr	r3, [r7, #32]
 80049b0:	f043 0304 	orr.w	r3, r3, #4
 80049b4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00b      	beq.n	80049e6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	f043 0301 	orr.w	r3, r3, #1
 80049d4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00b      	beq.n	8004a08 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	f043 0308 	orr.w	r3, r3, #8
 80049f6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00b      	beq.n	8004a2a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004a12:	6a3b      	ldr	r3, [r7, #32]
 8004a14:	f043 0302 	orr.w	r3, r3, #2
 8004a18:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004a2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d01c      	beq.n	8004a6c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f7ff fddc 	bl	80045f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6859      	ldr	r1, [r3, #4]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	4b0d      	ldr	r3, [pc, #52]	; (8004a78 <I2C_IsErrorOccurred+0x1d4>)
 8004a44:	400b      	ands	r3, r1
 8004a46:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3728      	adds	r7, #40	; 0x28
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	fe00e800 	.word	0xfe00e800

08004a7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	607b      	str	r3, [r7, #4]
 8004a86:	460b      	mov	r3, r1
 8004a88:	817b      	strh	r3, [r7, #10]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a8e:	897b      	ldrh	r3, [r7, #10]
 8004a90:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a94:	7a7b      	ldrb	r3, [r7, #9]
 8004a96:	041b      	lsls	r3, r3, #16
 8004a98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a9c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004aaa:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	0d5b      	lsrs	r3, r3, #21
 8004ab6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004aba:	4b08      	ldr	r3, [pc, #32]	; (8004adc <I2C_TransferConfig+0x60>)
 8004abc:	430b      	orrs	r3, r1
 8004abe:	43db      	mvns	r3, r3
 8004ac0:	ea02 0103 	and.w	r1, r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004ace:	bf00      	nop
 8004ad0:	371c      	adds	r7, #28
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	03ff63ff 	.word	0x03ff63ff

08004ae0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b20      	cmp	r3, #32
 8004af4:	d138      	bne.n	8004b68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d101      	bne.n	8004b04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004b00:	2302      	movs	r3, #2
 8004b02:	e032      	b.n	8004b6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2224      	movs	r2, #36	; 0x24
 8004b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0201 	bic.w	r2, r2, #1
 8004b22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6819      	ldr	r1, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0201 	orr.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b64:	2300      	movs	r3, #0
 8004b66:	e000      	b.n	8004b6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b68:	2302      	movs	r3, #2
  }
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b085      	sub	sp, #20
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
 8004b7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b20      	cmp	r3, #32
 8004b8a:	d139      	bne.n	8004c00 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d101      	bne.n	8004b9a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b96:	2302      	movs	r3, #2
 8004b98:	e033      	b.n	8004c02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2224      	movs	r2, #36	; 0x24
 8004ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 0201 	bic.w	r2, r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004bc8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	021b      	lsls	r3, r3, #8
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0201 	orr.w	r2, r2, #1
 8004bea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	e000      	b.n	8004c02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004c00:	2302      	movs	r3, #2
  }
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
	...

08004c10 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c14:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a04      	ldr	r2, [pc, #16]	; (8004c2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c1e:	6013      	str	r3, [r2, #0]
}
 8004c20:	bf00      	nop
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	40007000 	.word	0x40007000

08004c30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e29b      	b.n	800517e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 8087 	beq.w	8004d62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c54:	4b96      	ldr	r3, [pc, #600]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 030c 	and.w	r3, r3, #12
 8004c5c:	2b04      	cmp	r3, #4
 8004c5e:	d00c      	beq.n	8004c7a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c60:	4b93      	ldr	r3, [pc, #588]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f003 030c 	and.w	r3, r3, #12
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d112      	bne.n	8004c92 <HAL_RCC_OscConfig+0x62>
 8004c6c:	4b90      	ldr	r3, [pc, #576]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c78:	d10b      	bne.n	8004c92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c7a:	4b8d      	ldr	r3, [pc, #564]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d06c      	beq.n	8004d60 <HAL_RCC_OscConfig+0x130>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d168      	bne.n	8004d60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e275      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c9a:	d106      	bne.n	8004caa <HAL_RCC_OscConfig+0x7a>
 8004c9c:	4b84      	ldr	r3, [pc, #528]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a83      	ldr	r2, [pc, #524]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca6:	6013      	str	r3, [r2, #0]
 8004ca8:	e02e      	b.n	8004d08 <HAL_RCC_OscConfig+0xd8>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10c      	bne.n	8004ccc <HAL_RCC_OscConfig+0x9c>
 8004cb2:	4b7f      	ldr	r3, [pc, #508]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a7e      	ldr	r2, [pc, #504]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cbc:	6013      	str	r3, [r2, #0]
 8004cbe:	4b7c      	ldr	r3, [pc, #496]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a7b      	ldr	r2, [pc, #492]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004cc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	e01d      	b.n	8004d08 <HAL_RCC_OscConfig+0xd8>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cd4:	d10c      	bne.n	8004cf0 <HAL_RCC_OscConfig+0xc0>
 8004cd6:	4b76      	ldr	r3, [pc, #472]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a75      	ldr	r2, [pc, #468]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	4b73      	ldr	r3, [pc, #460]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a72      	ldr	r2, [pc, #456]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	e00b      	b.n	8004d08 <HAL_RCC_OscConfig+0xd8>
 8004cf0:	4b6f      	ldr	r3, [pc, #444]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a6e      	ldr	r2, [pc, #440]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	4b6c      	ldr	r3, [pc, #432]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a6b      	ldr	r2, [pc, #428]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d013      	beq.n	8004d38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d10:	f7fd fd60 	bl	80027d4 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d18:	f7fd fd5c 	bl	80027d4 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b64      	cmp	r3, #100	; 0x64
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e229      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d2a:	4b61      	ldr	r3, [pc, #388]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0f0      	beq.n	8004d18 <HAL_RCC_OscConfig+0xe8>
 8004d36:	e014      	b.n	8004d62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d38:	f7fd fd4c 	bl	80027d4 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d40:	f7fd fd48 	bl	80027d4 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b64      	cmp	r3, #100	; 0x64
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e215      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d52:	4b57      	ldr	r3, [pc, #348]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1f0      	bne.n	8004d40 <HAL_RCC_OscConfig+0x110>
 8004d5e:	e000      	b.n	8004d62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d069      	beq.n	8004e42 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d6e:	4b50      	ldr	r3, [pc, #320]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 030c 	and.w	r3, r3, #12
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00b      	beq.n	8004d92 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d7a:	4b4d      	ldr	r3, [pc, #308]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 030c 	and.w	r3, r3, #12
 8004d82:	2b08      	cmp	r3, #8
 8004d84:	d11c      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x190>
 8004d86:	4b4a      	ldr	r3, [pc, #296]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d116      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d92:	4b47      	ldr	r3, [pc, #284]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d005      	beq.n	8004daa <HAL_RCC_OscConfig+0x17a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d001      	beq.n	8004daa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e1e9      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004daa:	4b41      	ldr	r3, [pc, #260]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	493d      	ldr	r1, [pc, #244]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dbe:	e040      	b.n	8004e42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d023      	beq.n	8004e10 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dc8:	4b39      	ldr	r3, [pc, #228]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a38      	ldr	r2, [pc, #224]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004dce:	f043 0301 	orr.w	r3, r3, #1
 8004dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd4:	f7fd fcfe 	bl	80027d4 <HAL_GetTick>
 8004dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ddc:	f7fd fcfa 	bl	80027d4 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e1c7      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dee:	4b30      	ldr	r3, [pc, #192]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0f0      	beq.n	8004ddc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dfa:	4b2d      	ldr	r3, [pc, #180]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	4929      	ldr	r1, [pc, #164]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	600b      	str	r3, [r1, #0]
 8004e0e:	e018      	b.n	8004e42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e10:	4b27      	ldr	r3, [pc, #156]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a26      	ldr	r2, [pc, #152]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004e16:	f023 0301 	bic.w	r3, r3, #1
 8004e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1c:	f7fd fcda 	bl	80027d4 <HAL_GetTick>
 8004e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e22:	e008      	b.n	8004e36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e24:	f7fd fcd6 	bl	80027d4 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e1a3      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e36:	4b1e      	ldr	r3, [pc, #120]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1f0      	bne.n	8004e24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0308 	and.w	r3, r3, #8
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d038      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d019      	beq.n	8004e8a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e56:	4b16      	ldr	r3, [pc, #88]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e5a:	4a15      	ldr	r2, [pc, #84]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004e5c:	f043 0301 	orr.w	r3, r3, #1
 8004e60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e62:	f7fd fcb7 	bl	80027d4 <HAL_GetTick>
 8004e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e68:	e008      	b.n	8004e7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e6a:	f7fd fcb3 	bl	80027d4 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e180      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e7c:	4b0c      	ldr	r3, [pc, #48]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d0f0      	beq.n	8004e6a <HAL_RCC_OscConfig+0x23a>
 8004e88:	e01a      	b.n	8004ec0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e8a:	4b09      	ldr	r3, [pc, #36]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e8e:	4a08      	ldr	r2, [pc, #32]	; (8004eb0 <HAL_RCC_OscConfig+0x280>)
 8004e90:	f023 0301 	bic.w	r3, r3, #1
 8004e94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e96:	f7fd fc9d 	bl	80027d4 <HAL_GetTick>
 8004e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e9c:	e00a      	b.n	8004eb4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e9e:	f7fd fc99 	bl	80027d4 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d903      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e166      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
 8004eb0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb4:	4b92      	ldr	r3, [pc, #584]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1ee      	bne.n	8004e9e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 80a4 	beq.w	8005016 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ece:	4b8c      	ldr	r3, [pc, #560]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10d      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eda:	4b89      	ldr	r3, [pc, #548]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	4a88      	ldr	r2, [pc, #544]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ee6:	4b86      	ldr	r3, [pc, #536]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eee:	60bb      	str	r3, [r7, #8]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ef6:	4b83      	ldr	r3, [pc, #524]	; (8005104 <HAL_RCC_OscConfig+0x4d4>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d118      	bne.n	8004f34 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004f02:	4b80      	ldr	r3, [pc, #512]	; (8005104 <HAL_RCC_OscConfig+0x4d4>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a7f      	ldr	r2, [pc, #508]	; (8005104 <HAL_RCC_OscConfig+0x4d4>)
 8004f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f0e:	f7fd fc61 	bl	80027d4 <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f16:	f7fd fc5d 	bl	80027d4 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b64      	cmp	r3, #100	; 0x64
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e12a      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f28:	4b76      	ldr	r3, [pc, #472]	; (8005104 <HAL_RCC_OscConfig+0x4d4>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0f0      	beq.n	8004f16 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d106      	bne.n	8004f4a <HAL_RCC_OscConfig+0x31a>
 8004f3c:	4b70      	ldr	r3, [pc, #448]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f40:	4a6f      	ldr	r2, [pc, #444]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004f42:	f043 0301 	orr.w	r3, r3, #1
 8004f46:	6713      	str	r3, [r2, #112]	; 0x70
 8004f48:	e02d      	b.n	8004fa6 <HAL_RCC_OscConfig+0x376>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10c      	bne.n	8004f6c <HAL_RCC_OscConfig+0x33c>
 8004f52:	4b6b      	ldr	r3, [pc, #428]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f56:	4a6a      	ldr	r2, [pc, #424]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004f58:	f023 0301 	bic.w	r3, r3, #1
 8004f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f5e:	4b68      	ldr	r3, [pc, #416]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f62:	4a67      	ldr	r2, [pc, #412]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004f64:	f023 0304 	bic.w	r3, r3, #4
 8004f68:	6713      	str	r3, [r2, #112]	; 0x70
 8004f6a:	e01c      	b.n	8004fa6 <HAL_RCC_OscConfig+0x376>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	2b05      	cmp	r3, #5
 8004f72:	d10c      	bne.n	8004f8e <HAL_RCC_OscConfig+0x35e>
 8004f74:	4b62      	ldr	r3, [pc, #392]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f78:	4a61      	ldr	r2, [pc, #388]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004f7a:	f043 0304 	orr.w	r3, r3, #4
 8004f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f80:	4b5f      	ldr	r3, [pc, #380]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f84:	4a5e      	ldr	r2, [pc, #376]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004f86:	f043 0301 	orr.w	r3, r3, #1
 8004f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f8c:	e00b      	b.n	8004fa6 <HAL_RCC_OscConfig+0x376>
 8004f8e:	4b5c      	ldr	r3, [pc, #368]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f92:	4a5b      	ldr	r2, [pc, #364]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004f94:	f023 0301 	bic.w	r3, r3, #1
 8004f98:	6713      	str	r3, [r2, #112]	; 0x70
 8004f9a:	4b59      	ldr	r3, [pc, #356]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9e:	4a58      	ldr	r2, [pc, #352]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004fa0:	f023 0304 	bic.w	r3, r3, #4
 8004fa4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d015      	beq.n	8004fda <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fae:	f7fd fc11 	bl	80027d4 <HAL_GetTick>
 8004fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb4:	e00a      	b.n	8004fcc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fb6:	f7fd fc0d 	bl	80027d4 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e0d8      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fcc:	4b4c      	ldr	r3, [pc, #304]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0ee      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x386>
 8004fd8:	e014      	b.n	8005004 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fda:	f7fd fbfb 	bl	80027d4 <HAL_GetTick>
 8004fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fe0:	e00a      	b.n	8004ff8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe2:	f7fd fbf7 	bl	80027d4 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e0c2      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ff8:	4b41      	ldr	r3, [pc, #260]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8004ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1ee      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005004:	7dfb      	ldrb	r3, [r7, #23]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d105      	bne.n	8005016 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800500a:	4b3d      	ldr	r3, [pc, #244]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	4a3c      	ldr	r2, [pc, #240]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8005010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005014:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 80ae 	beq.w	800517c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005020:	4b37      	ldr	r3, [pc, #220]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f003 030c 	and.w	r3, r3, #12
 8005028:	2b08      	cmp	r3, #8
 800502a:	d06d      	beq.n	8005108 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	2b02      	cmp	r3, #2
 8005032:	d14b      	bne.n	80050cc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005034:	4b32      	ldr	r3, [pc, #200]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a31      	ldr	r2, [pc, #196]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 800503a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800503e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005040:	f7fd fbc8 	bl	80027d4 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005048:	f7fd fbc4 	bl	80027d4 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e091      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800505a:	4b29      	ldr	r3, [pc, #164]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f0      	bne.n	8005048 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	69da      	ldr	r2, [r3, #28]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	431a      	orrs	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005074:	019b      	lsls	r3, r3, #6
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507c:	085b      	lsrs	r3, r3, #1
 800507e:	3b01      	subs	r3, #1
 8005080:	041b      	lsls	r3, r3, #16
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005088:	061b      	lsls	r3, r3, #24
 800508a:	431a      	orrs	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005090:	071b      	lsls	r3, r3, #28
 8005092:	491b      	ldr	r1, [pc, #108]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 8005094:	4313      	orrs	r3, r2
 8005096:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005098:	4b19      	ldr	r3, [pc, #100]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a18      	ldr	r2, [pc, #96]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 800509e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a4:	f7fd fb96 	bl	80027d4 <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ac:	f7fd fb92 	bl	80027d4 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e05f      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050be:	4b10      	ldr	r3, [pc, #64]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0f0      	beq.n	80050ac <HAL_RCC_OscConfig+0x47c>
 80050ca:	e057      	b.n	800517c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050cc:	4b0c      	ldr	r3, [pc, #48]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a0b      	ldr	r2, [pc, #44]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 80050d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d8:	f7fd fb7c 	bl	80027d4 <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e0:	f7fd fb78 	bl	80027d4 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e045      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050f2:	4b03      	ldr	r3, [pc, #12]	; (8005100 <HAL_RCC_OscConfig+0x4d0>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1f0      	bne.n	80050e0 <HAL_RCC_OscConfig+0x4b0>
 80050fe:	e03d      	b.n	800517c <HAL_RCC_OscConfig+0x54c>
 8005100:	40023800 	.word	0x40023800
 8005104:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005108:	4b1f      	ldr	r3, [pc, #124]	; (8005188 <HAL_RCC_OscConfig+0x558>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d030      	beq.n	8005178 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005120:	429a      	cmp	r2, r3
 8005122:	d129      	bne.n	8005178 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800512e:	429a      	cmp	r2, r3
 8005130:	d122      	bne.n	8005178 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005138:	4013      	ands	r3, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800513e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005140:	4293      	cmp	r3, r2
 8005142:	d119      	bne.n	8005178 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514e:	085b      	lsrs	r3, r3, #1
 8005150:	3b01      	subs	r3, #1
 8005152:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005154:	429a      	cmp	r2, r3
 8005156:	d10f      	bne.n	8005178 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005162:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005164:	429a      	cmp	r2, r3
 8005166:	d107      	bne.n	8005178 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005172:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005174:	429a      	cmp	r2, r3
 8005176:	d001      	beq.n	800517c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e000      	b.n	800517e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	40023800 	.word	0x40023800

0800518c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005196:	2300      	movs	r3, #0
 8005198:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e0d0      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051a4:	4b6a      	ldr	r3, [pc, #424]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 030f 	and.w	r3, r3, #15
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d910      	bls.n	80051d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b2:	4b67      	ldr	r3, [pc, #412]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f023 020f 	bic.w	r2, r3, #15
 80051ba:	4965      	ldr	r1, [pc, #404]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	4313      	orrs	r3, r2
 80051c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c2:	4b63      	ldr	r3, [pc, #396]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 030f 	and.w	r3, r3, #15
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d001      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e0b8      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d020      	beq.n	8005222 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d005      	beq.n	80051f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051ec:	4b59      	ldr	r3, [pc, #356]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	4a58      	ldr	r2, [pc, #352]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 80051f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	2b00      	cmp	r3, #0
 8005202:	d005      	beq.n	8005210 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005204:	4b53      	ldr	r3, [pc, #332]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	4a52      	ldr	r2, [pc, #328]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 800520a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800520e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005210:	4b50      	ldr	r3, [pc, #320]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	494d      	ldr	r1, [pc, #308]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 800521e:	4313      	orrs	r3, r2
 8005220:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d040      	beq.n	80052b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d107      	bne.n	8005246 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005236:	4b47      	ldr	r3, [pc, #284]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d115      	bne.n	800526e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e07f      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2b02      	cmp	r3, #2
 800524c:	d107      	bne.n	800525e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800524e:	4b41      	ldr	r3, [pc, #260]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d109      	bne.n	800526e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e073      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800525e:	4b3d      	ldr	r3, [pc, #244]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e06b      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800526e:	4b39      	ldr	r3, [pc, #228]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f023 0203 	bic.w	r2, r3, #3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	4936      	ldr	r1, [pc, #216]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 800527c:	4313      	orrs	r3, r2
 800527e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005280:	f7fd faa8 	bl	80027d4 <HAL_GetTick>
 8005284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005286:	e00a      	b.n	800529e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005288:	f7fd faa4 	bl	80027d4 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	f241 3288 	movw	r2, #5000	; 0x1388
 8005296:	4293      	cmp	r3, r2
 8005298:	d901      	bls.n	800529e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e053      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800529e:	4b2d      	ldr	r3, [pc, #180]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f003 020c 	and.w	r2, r3, #12
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d1eb      	bne.n	8005288 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052b0:	4b27      	ldr	r3, [pc, #156]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 030f 	and.w	r3, r3, #15
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d210      	bcs.n	80052e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052be:	4b24      	ldr	r3, [pc, #144]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f023 020f 	bic.w	r2, r3, #15
 80052c6:	4922      	ldr	r1, [pc, #136]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ce:	4b20      	ldr	r3, [pc, #128]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d001      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e032      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d008      	beq.n	80052fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052ec:	4b19      	ldr	r3, [pc, #100]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	4916      	ldr	r1, [pc, #88]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b00      	cmp	r3, #0
 8005308:	d009      	beq.n	800531e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800530a:	4b12      	ldr	r3, [pc, #72]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	490e      	ldr	r1, [pc, #56]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 800531a:	4313      	orrs	r3, r2
 800531c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800531e:	f000 f821 	bl	8005364 <HAL_RCC_GetSysClockFreq>
 8005322:	4602      	mov	r2, r0
 8005324:	4b0b      	ldr	r3, [pc, #44]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	091b      	lsrs	r3, r3, #4
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	490a      	ldr	r1, [pc, #40]	; (8005358 <HAL_RCC_ClockConfig+0x1cc>)
 8005330:	5ccb      	ldrb	r3, [r1, r3]
 8005332:	fa22 f303 	lsr.w	r3, r2, r3
 8005336:	4a09      	ldr	r2, [pc, #36]	; (800535c <HAL_RCC_ClockConfig+0x1d0>)
 8005338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800533a:	4b09      	ldr	r3, [pc, #36]	; (8005360 <HAL_RCC_ClockConfig+0x1d4>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f7fd fa04 	bl	800274c <HAL_InitTick>

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	40023c00 	.word	0x40023c00
 8005354:	40023800 	.word	0x40023800
 8005358:	0800ea3c 	.word	0x0800ea3c
 800535c:	20000000 	.word	0x20000000
 8005360:	20000004 	.word	0x20000004

08005364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005368:	b090      	sub	sp, #64	; 0x40
 800536a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800536c:	2300      	movs	r3, #0
 800536e:	637b      	str	r3, [r7, #52]	; 0x34
 8005370:	2300      	movs	r3, #0
 8005372:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005374:	2300      	movs	r3, #0
 8005376:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8005378:	2300      	movs	r3, #0
 800537a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800537c:	4b59      	ldr	r3, [pc, #356]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f003 030c 	and.w	r3, r3, #12
 8005384:	2b08      	cmp	r3, #8
 8005386:	d00d      	beq.n	80053a4 <HAL_RCC_GetSysClockFreq+0x40>
 8005388:	2b08      	cmp	r3, #8
 800538a:	f200 80a1 	bhi.w	80054d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <HAL_RCC_GetSysClockFreq+0x34>
 8005392:	2b04      	cmp	r3, #4
 8005394:	d003      	beq.n	800539e <HAL_RCC_GetSysClockFreq+0x3a>
 8005396:	e09b      	b.n	80054d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005398:	4b53      	ldr	r3, [pc, #332]	; (80054e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800539a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800539c:	e09b      	b.n	80054d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800539e:	4b53      	ldr	r3, [pc, #332]	; (80054ec <HAL_RCC_GetSysClockFreq+0x188>)
 80053a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80053a2:	e098      	b.n	80054d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053a4:	4b4f      	ldr	r3, [pc, #316]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053ac:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80053ae:	4b4d      	ldr	r3, [pc, #308]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d028      	beq.n	800540c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053ba:	4b4a      	ldr	r3, [pc, #296]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	099b      	lsrs	r3, r3, #6
 80053c0:	2200      	movs	r2, #0
 80053c2:	623b      	str	r3, [r7, #32]
 80053c4:	627a      	str	r2, [r7, #36]	; 0x24
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80053cc:	2100      	movs	r1, #0
 80053ce:	4b47      	ldr	r3, [pc, #284]	; (80054ec <HAL_RCC_GetSysClockFreq+0x188>)
 80053d0:	fb03 f201 	mul.w	r2, r3, r1
 80053d4:	2300      	movs	r3, #0
 80053d6:	fb00 f303 	mul.w	r3, r0, r3
 80053da:	4413      	add	r3, r2
 80053dc:	4a43      	ldr	r2, [pc, #268]	; (80054ec <HAL_RCC_GetSysClockFreq+0x188>)
 80053de:	fba0 1202 	umull	r1, r2, r0, r2
 80053e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053e4:	460a      	mov	r2, r1
 80053e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80053e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ea:	4413      	add	r3, r2
 80053ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f0:	2200      	movs	r2, #0
 80053f2:	61bb      	str	r3, [r7, #24]
 80053f4:	61fa      	str	r2, [r7, #28]
 80053f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80053fe:	f7fb f933 	bl	8000668 <__aeabi_uldivmod>
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	4613      	mov	r3, r2
 8005408:	63fb      	str	r3, [r7, #60]	; 0x3c
 800540a:	e053      	b.n	80054b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800540c:	4b35      	ldr	r3, [pc, #212]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	099b      	lsrs	r3, r3, #6
 8005412:	2200      	movs	r2, #0
 8005414:	613b      	str	r3, [r7, #16]
 8005416:	617a      	str	r2, [r7, #20]
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800541e:	f04f 0b00 	mov.w	fp, #0
 8005422:	4652      	mov	r2, sl
 8005424:	465b      	mov	r3, fp
 8005426:	f04f 0000 	mov.w	r0, #0
 800542a:	f04f 0100 	mov.w	r1, #0
 800542e:	0159      	lsls	r1, r3, #5
 8005430:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005434:	0150      	lsls	r0, r2, #5
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	ebb2 080a 	subs.w	r8, r2, sl
 800543e:	eb63 090b 	sbc.w	r9, r3, fp
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	f04f 0300 	mov.w	r3, #0
 800544a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800544e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005452:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005456:	ebb2 0408 	subs.w	r4, r2, r8
 800545a:	eb63 0509 	sbc.w	r5, r3, r9
 800545e:	f04f 0200 	mov.w	r2, #0
 8005462:	f04f 0300 	mov.w	r3, #0
 8005466:	00eb      	lsls	r3, r5, #3
 8005468:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800546c:	00e2      	lsls	r2, r4, #3
 800546e:	4614      	mov	r4, r2
 8005470:	461d      	mov	r5, r3
 8005472:	eb14 030a 	adds.w	r3, r4, sl
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	eb45 030b 	adc.w	r3, r5, fp
 800547c:	607b      	str	r3, [r7, #4]
 800547e:	f04f 0200 	mov.w	r2, #0
 8005482:	f04f 0300 	mov.w	r3, #0
 8005486:	e9d7 4500 	ldrd	r4, r5, [r7]
 800548a:	4629      	mov	r1, r5
 800548c:	028b      	lsls	r3, r1, #10
 800548e:	4621      	mov	r1, r4
 8005490:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005494:	4621      	mov	r1, r4
 8005496:	028a      	lsls	r2, r1, #10
 8005498:	4610      	mov	r0, r2
 800549a:	4619      	mov	r1, r3
 800549c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549e:	2200      	movs	r2, #0
 80054a0:	60bb      	str	r3, [r7, #8]
 80054a2:	60fa      	str	r2, [r7, #12]
 80054a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054a8:	f7fb f8de 	bl	8000668 <__aeabi_uldivmod>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4613      	mov	r3, r2
 80054b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80054b4:	4b0b      	ldr	r3, [pc, #44]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	0c1b      	lsrs	r3, r3, #16
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	3301      	adds	r3, #1
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80054c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80054c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80054ce:	e002      	b.n	80054d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054d0:	4b05      	ldr	r3, [pc, #20]	; (80054e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80054d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80054d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3740      	adds	r7, #64	; 0x40
 80054dc:	46bd      	mov	sp, r7
 80054de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054e2:	bf00      	nop
 80054e4:	40023800 	.word	0x40023800
 80054e8:	00f42400 	.word	0x00f42400
 80054ec:	017d7840 	.word	0x017d7840

080054f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054f4:	4b03      	ldr	r3, [pc, #12]	; (8005504 <HAL_RCC_GetHCLKFreq+0x14>)
 80054f6:	681b      	ldr	r3, [r3, #0]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	20000000 	.word	0x20000000

08005508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800550c:	f7ff fff0 	bl	80054f0 <HAL_RCC_GetHCLKFreq>
 8005510:	4602      	mov	r2, r0
 8005512:	4b05      	ldr	r3, [pc, #20]	; (8005528 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	0a9b      	lsrs	r3, r3, #10
 8005518:	f003 0307 	and.w	r3, r3, #7
 800551c:	4903      	ldr	r1, [pc, #12]	; (800552c <HAL_RCC_GetPCLK1Freq+0x24>)
 800551e:	5ccb      	ldrb	r3, [r1, r3]
 8005520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005524:	4618      	mov	r0, r3
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40023800 	.word	0x40023800
 800552c:	0800ea4c 	.word	0x0800ea4c

08005530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005534:	f7ff ffdc 	bl	80054f0 <HAL_RCC_GetHCLKFreq>
 8005538:	4602      	mov	r2, r0
 800553a:	4b05      	ldr	r3, [pc, #20]	; (8005550 <HAL_RCC_GetPCLK2Freq+0x20>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	0b5b      	lsrs	r3, r3, #13
 8005540:	f003 0307 	and.w	r3, r3, #7
 8005544:	4903      	ldr	r1, [pc, #12]	; (8005554 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005546:	5ccb      	ldrb	r3, [r1, r3]
 8005548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800554c:	4618      	mov	r0, r3
 800554e:	bd80      	pop	{r7, pc}
 8005550:	40023800 	.word	0x40023800
 8005554:	0800ea4c 	.word	0x0800ea4c

08005558 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b088      	sub	sp, #32
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005560:	2300      	movs	r3, #0
 8005562:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005564:	2300      	movs	r3, #0
 8005566:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005568:	2300      	movs	r3, #0
 800556a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800556c:	2300      	movs	r3, #0
 800556e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005570:	2300      	movs	r3, #0
 8005572:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	d012      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005580:	4b69      	ldr	r3, [pc, #420]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	4a68      	ldr	r2, [pc, #416]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005586:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800558a:	6093      	str	r3, [r2, #8]
 800558c:	4b66      	ldr	r3, [pc, #408]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005594:	4964      	ldr	r1, [pc, #400]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005596:	4313      	orrs	r3, r2
 8005598:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80055a2:	2301      	movs	r3, #1
 80055a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d017      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055b2:	4b5d      	ldr	r3, [pc, #372]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c0:	4959      	ldr	r1, [pc, #356]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055d0:	d101      	bne.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80055d2:	2301      	movs	r3, #1
 80055d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80055de:	2301      	movs	r3, #1
 80055e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d017      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80055ee:	4b4e      	ldr	r3, [pc, #312]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fc:	494a      	ldr	r1, [pc, #296]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005608:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800560c:	d101      	bne.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800560e:	2301      	movs	r3, #1
 8005610:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800561a:	2301      	movs	r3, #1
 800561c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800562a:	2301      	movs	r3, #1
 800562c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0320 	and.w	r3, r3, #32
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 808b 	beq.w	8005752 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800563c:	4b3a      	ldr	r3, [pc, #232]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800563e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005640:	4a39      	ldr	r2, [pc, #228]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005646:	6413      	str	r3, [r2, #64]	; 0x40
 8005648:	4b37      	ldr	r3, [pc, #220]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800564a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005650:	60bb      	str	r3, [r7, #8]
 8005652:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005654:	4b35      	ldr	r3, [pc, #212]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a34      	ldr	r2, [pc, #208]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800565a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800565e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005660:	f7fd f8b8 	bl	80027d4 <HAL_GetTick>
 8005664:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005666:	e008      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005668:	f7fd f8b4 	bl	80027d4 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b64      	cmp	r3, #100	; 0x64
 8005674:	d901      	bls.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e38f      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800567a:	4b2c      	ldr	r3, [pc, #176]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005682:	2b00      	cmp	r3, #0
 8005684:	d0f0      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005686:	4b28      	ldr	r3, [pc, #160]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800568e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d035      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d02e      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056a4:	4b20      	ldr	r3, [pc, #128]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056ae:	4b1e      	ldr	r3, [pc, #120]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b2:	4a1d      	ldr	r2, [pc, #116]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056b8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056ba:	4b1b      	ldr	r3, [pc, #108]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056be:	4a1a      	ldr	r2, [pc, #104]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80056c6:	4a18      	ldr	r2, [pc, #96]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056cc:	4b16      	ldr	r3, [pc, #88]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d114      	bne.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d8:	f7fd f87c 	bl	80027d4 <HAL_GetTick>
 80056dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056de:	e00a      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056e0:	f7fd f878 	bl	80027d4 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e351      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f6:	4b0c      	ldr	r3, [pc, #48]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0ee      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800570a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800570e:	d111      	bne.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005710:	4b05      	ldr	r3, [pc, #20]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800571c:	4b04      	ldr	r3, [pc, #16]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800571e:	400b      	ands	r3, r1
 8005720:	4901      	ldr	r1, [pc, #4]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005722:	4313      	orrs	r3, r2
 8005724:	608b      	str	r3, [r1, #8]
 8005726:	e00b      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005728:	40023800 	.word	0x40023800
 800572c:	40007000 	.word	0x40007000
 8005730:	0ffffcff 	.word	0x0ffffcff
 8005734:	4bac      	ldr	r3, [pc, #688]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	4aab      	ldr	r2, [pc, #684]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800573a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800573e:	6093      	str	r3, [r2, #8]
 8005740:	4ba9      	ldr	r3, [pc, #676]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005742:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800574c:	49a6      	ldr	r1, [pc, #664]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800574e:	4313      	orrs	r3, r2
 8005750:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0310 	and.w	r3, r3, #16
 800575a:	2b00      	cmp	r3, #0
 800575c:	d010      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800575e:	4ba2      	ldr	r3, [pc, #648]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005764:	4aa0      	ldr	r2, [pc, #640]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005766:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800576a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800576e:	4b9e      	ldr	r3, [pc, #632]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005770:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005778:	499b      	ldr	r1, [pc, #620]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800577a:	4313      	orrs	r3, r2
 800577c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00a      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800578c:	4b96      	ldr	r3, [pc, #600]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800578e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005792:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800579a:	4993      	ldr	r1, [pc, #588]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800579c:	4313      	orrs	r3, r2
 800579e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00a      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057ae:	4b8e      	ldr	r3, [pc, #568]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057bc:	498a      	ldr	r1, [pc, #552]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00a      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057d0:	4b85      	ldr	r3, [pc, #532]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057de:	4982      	ldr	r1, [pc, #520]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057f2:	4b7d      	ldr	r3, [pc, #500]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005800:	4979      	ldr	r1, [pc, #484]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005802:	4313      	orrs	r3, r2
 8005804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00a      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005814:	4b74      	ldr	r3, [pc, #464]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581a:	f023 0203 	bic.w	r2, r3, #3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005822:	4971      	ldr	r1, [pc, #452]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005824:	4313      	orrs	r3, r2
 8005826:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005836:	4b6c      	ldr	r3, [pc, #432]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583c:	f023 020c 	bic.w	r2, r3, #12
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005844:	4968      	ldr	r1, [pc, #416]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005846:	4313      	orrs	r3, r2
 8005848:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00a      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005858:	4b63      	ldr	r3, [pc, #396]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800585a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005866:	4960      	ldr	r1, [pc, #384]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005868:	4313      	orrs	r3, r2
 800586a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00a      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800587a:	4b5b      	ldr	r3, [pc, #364]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800587c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005880:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005888:	4957      	ldr	r1, [pc, #348]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800588a:	4313      	orrs	r3, r2
 800588c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00a      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800589c:	4b52      	ldr	r3, [pc, #328]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800589e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058aa:	494f      	ldr	r1, [pc, #316]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80058be:	4b4a      	ldr	r3, [pc, #296]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058cc:	4946      	ldr	r1, [pc, #280]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00a      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80058e0:	4b41      	ldr	r3, [pc, #260]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ee:	493e      	ldr	r1, [pc, #248]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005902:	4b39      	ldr	r3, [pc, #228]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005908:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005910:	4935      	ldr	r1, [pc, #212]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005912:	4313      	orrs	r3, r2
 8005914:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00a      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005924:	4b30      	ldr	r3, [pc, #192]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005932:	492d      	ldr	r1, [pc, #180]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005934:	4313      	orrs	r3, r2
 8005936:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d011      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005946:	4b28      	ldr	r3, [pc, #160]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800594c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005954:	4924      	ldr	r1, [pc, #144]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005956:	4313      	orrs	r3, r2
 8005958:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005960:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005964:	d101      	bne.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005966:	2301      	movs	r3, #1
 8005968:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0308 	and.w	r3, r3, #8
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005976:	2301      	movs	r3, #1
 8005978:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005986:	4b18      	ldr	r3, [pc, #96]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005994:	4914      	ldr	r1, [pc, #80]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005996:	4313      	orrs	r3, r2
 8005998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00b      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059a8:	4b0f      	ldr	r3, [pc, #60]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059b8:	490b      	ldr	r1, [pc, #44]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00f      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80059cc:	4b06      	ldr	r3, [pc, #24]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059dc:	4902      	ldr	r1, [pc, #8]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80059e4:	e002      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x494>
 80059e6:	bf00      	nop
 80059e8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00b      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059f8:	4b8a      	ldr	r3, [pc, #552]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a08:	4986      	ldr	r1, [pc, #536]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00b      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005a1c:	4b81      	ldr	r3, [pc, #516]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a22:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a2c:	497d      	ldr	r1, [pc, #500]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d006      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 80d6 	beq.w	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a48:	4b76      	ldr	r3, [pc, #472]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a75      	ldr	r2, [pc, #468]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a54:	f7fc febe 	bl	80027d4 <HAL_GetTick>
 8005a58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a5a:	e008      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a5c:	f7fc feba 	bl	80027d4 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b64      	cmp	r3, #100	; 0x64
 8005a68:	d901      	bls.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e195      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a6e:	4b6d      	ldr	r3, [pc, #436]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1f0      	bne.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d021      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d11d      	bne.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005a8e:	4b65      	ldr	r3, [pc, #404]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a94:	0c1b      	lsrs	r3, r3, #16
 8005a96:	f003 0303 	and.w	r3, r3, #3
 8005a9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a9c:	4b61      	ldr	r3, [pc, #388]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aa2:	0e1b      	lsrs	r3, r3, #24
 8005aa4:	f003 030f 	and.w	r3, r3, #15
 8005aa8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	019a      	lsls	r2, r3, #6
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	041b      	lsls	r3, r3, #16
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	061b      	lsls	r3, r3, #24
 8005aba:	431a      	orrs	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	071b      	lsls	r3, r3, #28
 8005ac2:	4958      	ldr	r1, [pc, #352]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d004      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ade:	d00a      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d02e      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005af4:	d129      	bne.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005af6:	4b4b      	ldr	r3, [pc, #300]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005afc:	0c1b      	lsrs	r3, r3, #16
 8005afe:	f003 0303 	and.w	r3, r3, #3
 8005b02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b04:	4b47      	ldr	r3, [pc, #284]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b0a:	0f1b      	lsrs	r3, r3, #28
 8005b0c:	f003 0307 	and.w	r3, r3, #7
 8005b10:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	019a      	lsls	r2, r3, #6
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	041b      	lsls	r3, r3, #16
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	061b      	lsls	r3, r3, #24
 8005b24:	431a      	orrs	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	071b      	lsls	r3, r3, #28
 8005b2a:	493e      	ldr	r1, [pc, #248]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b32:	4b3c      	ldr	r3, [pc, #240]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b38:	f023 021f 	bic.w	r2, r3, #31
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	3b01      	subs	r3, #1
 8005b42:	4938      	ldr	r1, [pc, #224]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d01d      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b56:	4b33      	ldr	r3, [pc, #204]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b5c:	0e1b      	lsrs	r3, r3, #24
 8005b5e:	f003 030f 	and.w	r3, r3, #15
 8005b62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b64:	4b2f      	ldr	r3, [pc, #188]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b6a:	0f1b      	lsrs	r3, r3, #28
 8005b6c:	f003 0307 	and.w	r3, r3, #7
 8005b70:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	019a      	lsls	r2, r3, #6
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	041b      	lsls	r3, r3, #16
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	061b      	lsls	r3, r3, #24
 8005b84:	431a      	orrs	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	071b      	lsls	r3, r3, #28
 8005b8a:	4926      	ldr	r1, [pc, #152]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d011      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	019a      	lsls	r2, r3, #6
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	041b      	lsls	r3, r3, #16
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	061b      	lsls	r3, r3, #24
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	071b      	lsls	r3, r3, #28
 8005bba:	491a      	ldr	r1, [pc, #104]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005bc2:	4b18      	ldr	r3, [pc, #96]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a17      	ldr	r2, [pc, #92]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bce:	f7fc fe01 	bl	80027d4 <HAL_GetTick>
 8005bd2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bd4:	e008      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005bd6:	f7fc fdfd 	bl	80027d4 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b64      	cmp	r3, #100	; 0x64
 8005be2:	d901      	bls.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e0d8      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005be8:	4b0e      	ldr	r3, [pc, #56]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0f0      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	f040 80ce 	bne.w	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005bfc:	4b09      	ldr	r3, [pc, #36]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a08      	ldr	r2, [pc, #32]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c08:	f7fc fde4 	bl	80027d4 <HAL_GetTick>
 8005c0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c0e:	e00b      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c10:	f7fc fde0 	bl	80027d4 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	2b64      	cmp	r3, #100	; 0x64
 8005c1c:	d904      	bls.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e0bb      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005c22:	bf00      	nop
 8005c24:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c28:	4b5e      	ldr	r3, [pc, #376]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c34:	d0ec      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d009      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d02e      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d12a      	bne.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005c5e:	4b51      	ldr	r3, [pc, #324]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c64:	0c1b      	lsrs	r3, r3, #16
 8005c66:	f003 0303 	and.w	r3, r3, #3
 8005c6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c6c:	4b4d      	ldr	r3, [pc, #308]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c72:	0f1b      	lsrs	r3, r3, #28
 8005c74:	f003 0307 	and.w	r3, r3, #7
 8005c78:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	019a      	lsls	r2, r3, #6
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	041b      	lsls	r3, r3, #16
 8005c84:	431a      	orrs	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	061b      	lsls	r3, r3, #24
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	071b      	lsls	r3, r3, #28
 8005c92:	4944      	ldr	r1, [pc, #272]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005c9a:	4b42      	ldr	r3, [pc, #264]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ca0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	021b      	lsls	r3, r3, #8
 8005cac:	493d      	ldr	r1, [pc, #244]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d022      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cc8:	d11d      	bne.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005cca:	4b36      	ldr	r3, [pc, #216]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd0:	0e1b      	lsrs	r3, r3, #24
 8005cd2:	f003 030f 	and.w	r3, r3, #15
 8005cd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005cd8:	4b32      	ldr	r3, [pc, #200]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cde:	0f1b      	lsrs	r3, r3, #28
 8005ce0:	f003 0307 	and.w	r3, r3, #7
 8005ce4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	019a      	lsls	r2, r3, #6
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	041b      	lsls	r3, r3, #16
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	061b      	lsls	r3, r3, #24
 8005cf8:	431a      	orrs	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	071b      	lsls	r3, r3, #28
 8005cfe:	4929      	ldr	r1, [pc, #164]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0308 	and.w	r3, r3, #8
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d028      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d12:	4b24      	ldr	r3, [pc, #144]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d18:	0e1b      	lsrs	r3, r3, #24
 8005d1a:	f003 030f 	and.w	r3, r3, #15
 8005d1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005d20:	4b20      	ldr	r3, [pc, #128]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d26:	0c1b      	lsrs	r3, r3, #16
 8005d28:	f003 0303 	and.w	r3, r3, #3
 8005d2c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	019a      	lsls	r2, r3, #6
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	041b      	lsls	r3, r3, #16
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	061b      	lsls	r3, r3, #24
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	69db      	ldr	r3, [r3, #28]
 8005d44:	071b      	lsls	r3, r3, #28
 8005d46:	4917      	ldr	r1, [pc, #92]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d4e:	4b15      	ldr	r3, [pc, #84]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5c:	4911      	ldr	r1, [pc, #68]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005d64:	4b0f      	ldr	r3, [pc, #60]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a0e      	ldr	r2, [pc, #56]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d70:	f7fc fd30 	bl	80027d4 <HAL_GetTick>
 8005d74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d76:	e008      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d78:	f7fc fd2c 	bl	80027d4 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2b64      	cmp	r3, #100	; 0x64
 8005d84:	d901      	bls.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e007      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d8a:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d96:	d1ef      	bne.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3720      	adds	r7, #32
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	40023800 	.word	0x40023800

08005da8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e081      	b.n	8005ebe <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	7f5b      	ldrb	r3, [r3, #29]
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d105      	bne.n	8005dd0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7fb ff8a 	bl	8001ce4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	22ca      	movs	r2, #202	; 0xca
 8005ddc:	625a      	str	r2, [r3, #36]	; 0x24
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2253      	movs	r2, #83	; 0x53
 8005de4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 faac 	bl	8006344 <RTC_EnterInitMode>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d008      	beq.n	8005e04 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	22ff      	movs	r2, #255	; 0xff
 8005df8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2204      	movs	r2, #4
 8005dfe:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e05c      	b.n	8005ebe <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6899      	ldr	r1, [r3, #8]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	4b2e      	ldr	r3, [pc, #184]	; (8005ec8 <HAL_RTC_Init+0x120>)
 8005e10:	400b      	ands	r3, r1
 8005e12:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6899      	ldr	r1, [r3, #8]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	431a      	orrs	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	431a      	orrs	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	68d2      	ldr	r2, [r2, #12]
 8005e3a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6919      	ldr	r1, [r3, #16]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	041a      	lsls	r2, r3, #16
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68da      	ldr	r2, [r3, #12]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e5e:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f003 0320 	and.w	r3, r3, #32
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10e      	bne.n	8005e8c <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fa40 	bl	80062f4 <HAL_RTC_WaitForSynchro>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d008      	beq.n	8005e8c <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	22ff      	movs	r2, #255	; 0xff
 8005e80:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2204      	movs	r2, #4
 8005e86:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e018      	b.n	8005ebe <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 0208 	bic.w	r2, r2, #8
 8005e9a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	699a      	ldr	r2, [r3, #24]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	22ff      	movs	r2, #255	; 0xff
 8005eb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
  }
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	ff8fffbf 	.word	0xff8fffbf

08005ecc <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ecc:	b590      	push	{r4, r7, lr}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	7f1b      	ldrb	r3, [r3, #28]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d101      	bne.n	8005ee8 <HAL_RTC_SetTime+0x1c>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	e0a8      	b.n	800603a <HAL_RTC_SetTime+0x16e>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2201      	movs	r2, #1
 8005eec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d126      	bne.n	8005f48 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d102      	bne.n	8005f0e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 fa42 	bl	800639c <RTC_ByteToBcd2>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	785b      	ldrb	r3, [r3, #1]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f000 fa3b 	bl	800639c <RTC_ByteToBcd2>
 8005f26:	4603      	mov	r3, r0
 8005f28:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005f2a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	789b      	ldrb	r3, [r3, #2]
 8005f30:	4618      	mov	r0, r3
 8005f32:	f000 fa33 	bl	800639c <RTC_ByteToBcd2>
 8005f36:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8005f38:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	7b1b      	ldrb	r3, [r3, #12]
 8005f40:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005f42:	4313      	orrs	r3, r2
 8005f44:	617b      	str	r3, [r7, #20]
 8005f46:	e018      	b.n	8005f7a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d102      	bne.n	8005f5c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	785b      	ldrb	r3, [r3, #1]
 8005f66:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005f68:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005f6e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	7b1b      	ldrb	r3, [r3, #12]
 8005f74:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005f76:	4313      	orrs	r3, r2
 8005f78:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	22ca      	movs	r2, #202	; 0xca
 8005f80:	625a      	str	r2, [r3, #36]	; 0x24
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2253      	movs	r2, #83	; 0x53
 8005f88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f000 f9da 	bl	8006344 <RTC_EnterInitMode>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00b      	beq.n	8005fae <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	22ff      	movs	r2, #255	; 0xff
 8005f9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2204      	movs	r2, #4
 8005fa2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e045      	b.n	800603a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	6979      	ldr	r1, [r7, #20]
 8005fb4:	4b23      	ldr	r3, [pc, #140]	; (8006044 <HAL_RTC_SetTime+0x178>)
 8005fb6:	400b      	ands	r3, r1
 8005fb8:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689a      	ldr	r2, [r3, #8]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005fc8:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6899      	ldr	r1, [r3, #8]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	691a      	ldr	r2, [r3, #16]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68da      	ldr	r2, [r3, #12]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ff0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f003 0320 	and.w	r3, r3, #32
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d111      	bne.n	8006024 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 f977 	bl	80062f4 <HAL_RTC_WaitForSynchro>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00b      	beq.n	8006024 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	22ff      	movs	r2, #255	; 0xff
 8006012:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2204      	movs	r2, #4
 8006018:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e00a      	b.n	800603a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	22ff      	movs	r2, #255	; 0xff
 800602a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2201      	movs	r2, #1
 8006030:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8006038:	2300      	movs	r3, #0
  }
}
 800603a:	4618      	mov	r0, r3
 800603c:	371c      	adds	r7, #28
 800603e:	46bd      	mov	sp, r7
 8006040:	bd90      	pop	{r4, r7, pc}
 8006042:	bf00      	nop
 8006044:	007f7f7f 	.word	0x007f7f7f

08006048 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006054:	2300      	movs	r3, #0
 8006056:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	4b22      	ldr	r3, [pc, #136]	; (8006100 <HAL_RTC_GetTime+0xb8>)
 8006078:	4013      	ands	r3, r2
 800607a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	0c1b      	lsrs	r3, r3, #16
 8006080:	b2db      	uxtb	r3, r3
 8006082:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006086:	b2da      	uxtb	r2, r3
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	0a1b      	lsrs	r3, r3, #8
 8006090:	b2db      	uxtb	r3, r3
 8006092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006096:	b2da      	uxtb	r2, r3
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	0c1b      	lsrs	r3, r3, #16
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d11a      	bne.n	80060f6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 f987 	bl	80063d8 <RTC_Bcd2ToByte>
 80060ca:	4603      	mov	r3, r0
 80060cc:	461a      	mov	r2, r3
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	785b      	ldrb	r3, [r3, #1]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 f97e 	bl	80063d8 <RTC_Bcd2ToByte>
 80060dc:	4603      	mov	r3, r0
 80060de:	461a      	mov	r2, r3
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	789b      	ldrb	r3, [r3, #2]
 80060e8:	4618      	mov	r0, r3
 80060ea:	f000 f975 	bl	80063d8 <RTC_Bcd2ToByte>
 80060ee:	4603      	mov	r3, r0
 80060f0:	461a      	mov	r2, r3
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3718      	adds	r7, #24
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	007f7f7f 	.word	0x007f7f7f

08006104 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006104:	b590      	push	{r4, r7, lr}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8006110:	2300      	movs	r3, #0
 8006112:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	7f1b      	ldrb	r3, [r3, #28]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d101      	bne.n	8006120 <HAL_RTC_SetDate+0x1c>
 800611c:	2302      	movs	r3, #2
 800611e:	e092      	b.n	8006246 <HAL_RTC_SetDate+0x142>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2201      	movs	r2, #1
 8006124:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2202      	movs	r2, #2
 800612a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10e      	bne.n	8006150 <HAL_RTC_SetDate+0x4c>
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	785b      	ldrb	r3, [r3, #1]
 8006136:	f003 0310 	and.w	r3, r3, #16
 800613a:	2b00      	cmp	r3, #0
 800613c:	d008      	beq.n	8006150 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	785b      	ldrb	r3, [r3, #1]
 8006142:	f023 0310 	bic.w	r3, r3, #16
 8006146:	b2db      	uxtb	r3, r3
 8006148:	330a      	adds	r3, #10
 800614a:	b2da      	uxtb	r2, r3
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d11c      	bne.n	8006190 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	78db      	ldrb	r3, [r3, #3]
 800615a:	4618      	mov	r0, r3
 800615c:	f000 f91e 	bl	800639c <RTC_ByteToBcd2>
 8006160:	4603      	mov	r3, r0
 8006162:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	785b      	ldrb	r3, [r3, #1]
 8006168:	4618      	mov	r0, r3
 800616a:	f000 f917 	bl	800639c <RTC_ByteToBcd2>
 800616e:	4603      	mov	r3, r0
 8006170:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006172:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	789b      	ldrb	r3, [r3, #2]
 8006178:	4618      	mov	r0, r3
 800617a:	f000 f90f 	bl	800639c <RTC_ByteToBcd2>
 800617e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8006180:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800618a:	4313      	orrs	r3, r2
 800618c:	617b      	str	r3, [r7, #20]
 800618e:	e00e      	b.n	80061ae <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	78db      	ldrb	r3, [r3, #3]
 8006194:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	785b      	ldrb	r3, [r3, #1]
 800619a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800619c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80061a2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80061aa:	4313      	orrs	r3, r2
 80061ac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	22ca      	movs	r2, #202	; 0xca
 80061b4:	625a      	str	r2, [r3, #36]	; 0x24
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2253      	movs	r2, #83	; 0x53
 80061bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f000 f8c0 	bl	8006344 <RTC_EnterInitMode>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00b      	beq.n	80061e2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	22ff      	movs	r2, #255	; 0xff
 80061d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2204      	movs	r2, #4
 80061d6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e031      	b.n	8006246 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	6979      	ldr	r1, [r7, #20]
 80061e8:	4b19      	ldr	r3, [pc, #100]	; (8006250 <HAL_RTC_SetDate+0x14c>)
 80061ea:	400b      	ands	r3, r1
 80061ec:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68da      	ldr	r2, [r3, #12]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061fc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f003 0320 	and.w	r3, r3, #32
 8006208:	2b00      	cmp	r3, #0
 800620a:	d111      	bne.n	8006230 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f000 f871 	bl	80062f4 <HAL_RTC_WaitForSynchro>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00b      	beq.n	8006230 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	22ff      	movs	r2, #255	; 0xff
 800621e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2204      	movs	r2, #4
 8006224:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e00a      	b.n	8006246 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	22ff      	movs	r2, #255	; 0xff
 8006236:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2201      	movs	r2, #1
 800623c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006244:	2300      	movs	r3, #0
  }
}
 8006246:	4618      	mov	r0, r3
 8006248:	371c      	adds	r7, #28
 800624a:	46bd      	mov	sp, r7
 800624c:	bd90      	pop	{r4, r7, pc}
 800624e:	bf00      	nop
 8006250:	00ffff3f 	.word	0x00ffff3f

08006254 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8006260:	2300      	movs	r3, #0
 8006262:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	4b21      	ldr	r3, [pc, #132]	; (80062f0 <HAL_RTC_GetDate+0x9c>)
 800626c:	4013      	ands	r3, r2
 800626e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	0c1b      	lsrs	r3, r3, #16
 8006274:	b2da      	uxtb	r2, r3
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	0a1b      	lsrs	r3, r3, #8
 800627e:	b2db      	uxtb	r3, r3
 8006280:	f003 031f 	and.w	r3, r3, #31
 8006284:	b2da      	uxtb	r2, r3
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	b2db      	uxtb	r3, r3
 800628e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006292:	b2da      	uxtb	r2, r3
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	0b5b      	lsrs	r3, r3, #13
 800629c:	b2db      	uxtb	r3, r3
 800629e:	f003 0307 	and.w	r3, r3, #7
 80062a2:	b2da      	uxtb	r2, r3
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d11a      	bne.n	80062e4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	78db      	ldrb	r3, [r3, #3]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 f890 	bl	80063d8 <RTC_Bcd2ToByte>
 80062b8:	4603      	mov	r3, r0
 80062ba:	461a      	mov	r2, r3
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	785b      	ldrb	r3, [r3, #1]
 80062c4:	4618      	mov	r0, r3
 80062c6:	f000 f887 	bl	80063d8 <RTC_Bcd2ToByte>
 80062ca:	4603      	mov	r3, r0
 80062cc:	461a      	mov	r2, r3
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	789b      	ldrb	r3, [r3, #2]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 f87e 	bl	80063d8 <RTC_Bcd2ToByte>
 80062dc:	4603      	mov	r3, r0
 80062de:	461a      	mov	r2, r3
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3718      	adds	r7, #24
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	00ffff3f 	.word	0x00ffff3f

080062f4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80062fc:	2300      	movs	r3, #0
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68da      	ldr	r2, [r3, #12]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800630e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006310:	f7fc fa60 	bl	80027d4 <HAL_GetTick>
 8006314:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006316:	e009      	b.n	800632c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006318:	f7fc fa5c 	bl	80027d4 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006326:	d901      	bls.n	800632c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e007      	b.n	800633c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f003 0320 	and.w	r3, r3, #32
 8006336:	2b00      	cmp	r3, #0
 8006338:	d0ee      	beq.n	8006318 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800634c:	2300      	movs	r3, #0
 800634e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635a:	2b00      	cmp	r3, #0
 800635c:	d119      	bne.n	8006392 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f04f 32ff 	mov.w	r2, #4294967295
 8006366:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006368:	f7fc fa34 	bl	80027d4 <HAL_GetTick>
 800636c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800636e:	e009      	b.n	8006384 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006370:	f7fc fa30 	bl	80027d4 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800637e:	d901      	bls.n	8006384 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e007      	b.n	8006394 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638e:	2b00      	cmp	r3, #0
 8006390:	d0ee      	beq.n	8006370 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	4603      	mov	r3, r0
 80063a4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80063a6:	2300      	movs	r3, #0
 80063a8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80063aa:	e005      	b.n	80063b8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	3301      	adds	r3, #1
 80063b0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80063b2:	79fb      	ldrb	r3, [r7, #7]
 80063b4:	3b0a      	subs	r3, #10
 80063b6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80063b8:	79fb      	ldrb	r3, [r7, #7]
 80063ba:	2b09      	cmp	r3, #9
 80063bc:	d8f6      	bhi.n	80063ac <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	011b      	lsls	r3, r3, #4
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	79fb      	ldrb	r3, [r7, #7]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	b2db      	uxtb	r3, r3
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	4603      	mov	r3, r0
 80063e0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 80063e2:	2300      	movs	r3, #0
 80063e4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80063e6:	79fb      	ldrb	r3, [r7, #7]
 80063e8:	091b      	lsrs	r3, r3, #4
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	461a      	mov	r2, r3
 80063ee:	4613      	mov	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	005b      	lsls	r3, r3, #1
 80063f6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80063f8:	79fb      	ldrb	r3, [r7, #7]
 80063fa:	f003 030f 	and.w	r3, r3, #15
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	b2db      	uxtb	r3, r3
 8006404:	4413      	add	r3, r2
 8006406:	b2db      	uxtb	r3, r3
}
 8006408:	4618      	mov	r0, r3
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e022      	b.n	800646c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b00      	cmp	r3, #0
 8006430:	d105      	bne.n	800643e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f7fb fc8d 	bl	8001d58 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2203      	movs	r2, #3
 8006442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f814 	bl	8006474 <HAL_SD_InitCard>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e00a      	b.n	800646c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006474:	b5b0      	push	{r4, r5, r7, lr}
 8006476:	b08e      	sub	sp, #56	; 0x38
 8006478:	af04      	add	r7, sp, #16
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800647c:	2300      	movs	r3, #0
 800647e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006480:	2300      	movs	r3, #0
 8006482:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006484:	2300      	movs	r3, #0
 8006486:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006488:	2300      	movs	r3, #0
 800648a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800648c:	2300      	movs	r3, #0
 800648e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006490:	2376      	movs	r3, #118	; 0x76
 8006492:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681d      	ldr	r5, [r3, #0]
 8006498:	466c      	mov	r4, sp
 800649a:	f107 0314 	add.w	r3, r7, #20
 800649e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80064a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80064a6:	f107 0308 	add.w	r3, r7, #8
 80064aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80064ac:	4628      	mov	r0, r5
 80064ae:	f002 febf 	bl	8009230 <SDMMC_Init>
 80064b2:	4603      	mov	r3, r0
 80064b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80064b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e059      	b.n	8006578 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064d2:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4618      	mov	r0, r3
 80064da:	f002 fef3 	bl	80092c4 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064ec:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80064ee:	2002      	movs	r0, #2
 80064f0:	f7fc f97c 	bl	80027ec <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fff3 	bl	80074e0 <SD_PowerON>
 80064fa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80064fc:	6a3b      	ldr	r3, [r7, #32]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00b      	beq.n	800651a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800650e:	6a3b      	ldr	r3, [r7, #32]
 8006510:	431a      	orrs	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e02e      	b.n	8006578 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 ff12 	bl	8007344 <SD_InitCard>
 8006520:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00b      	beq.n	8006540 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006534:	6a3b      	ldr	r3, [r7, #32]
 8006536:	431a      	orrs	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e01b      	b.n	8006578 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006548:	4618      	mov	r0, r3
 800654a:	f002 ff4d 	bl	80093e8 <SDMMC_CmdBlockLength>
 800654e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006550:	6a3b      	ldr	r3, [r7, #32]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00f      	beq.n	8006576 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a09      	ldr	r2, [pc, #36]	; (8006580 <HAL_SD_InitCard+0x10c>)
 800655c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	431a      	orrs	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e000      	b.n	8006578 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3728      	adds	r7, #40	; 0x28
 800657c:	46bd      	mov	sp, r7
 800657e:	bdb0      	pop	{r4, r5, r7, pc}
 8006580:	004005ff 	.word	0x004005ff

08006584 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b08c      	sub	sp, #48	; 0x30
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d107      	bne.n	80065ac <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e0c3      	b.n	8006734 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	f040 80bc 	bne.w	8006732 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80065c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	441a      	add	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d907      	bls.n	80065de <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e0aa      	b.n	8006734 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2203      	movs	r2, #3
 80065e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2200      	movs	r2, #0
 80065ec:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80065fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006602:	4a4e      	ldr	r2, [pc, #312]	; (800673c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006604:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660a:	4a4d      	ldr	r2, [pc, #308]	; (8006740 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800660c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006612:	2200      	movs	r2, #0
 8006614:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661a:	2200      	movs	r2, #0
 800661c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3380      	adds	r3, #128	; 0x80
 8006644:	4619      	mov	r1, r3
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	025b      	lsls	r3, r3, #9
 800664c:	089b      	lsrs	r3, r3, #2
 800664e:	f7fc fe41 	bl	80032d4 <HAL_DMA_Start_IT>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d017      	beq.n	8006688 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8006666:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a35      	ldr	r2, [pc, #212]	; (8006744 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800666e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006674:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e055      	b.n	8006734 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f042 0208 	orr.w	r2, r2, #8
 8006696:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669c:	2b01      	cmp	r3, #1
 800669e:	d002      	beq.n	80066a6 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80066a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a2:	025b      	lsls	r3, r3, #9
 80066a4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80066a6:	f04f 33ff 	mov.w	r3, #4294967295
 80066aa:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	025b      	lsls	r3, r3, #9
 80066b0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80066b2:	2390      	movs	r3, #144	; 0x90
 80066b4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80066b6:	2302      	movs	r3, #2
 80066b8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80066be:	2301      	movs	r3, #1
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f107 0210 	add.w	r2, r7, #16
 80066ca:	4611      	mov	r1, r2
 80066cc:	4618      	mov	r0, r3
 80066ce:	f002 fe5f 	bl	8009390 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d90a      	bls.n	80066ee <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2282      	movs	r2, #130	; 0x82
 80066dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066e4:	4618      	mov	r0, r3
 80066e6:	f002 fec3 	bl	8009470 <SDMMC_CmdReadMultiBlock>
 80066ea:	62f8      	str	r0, [r7, #44]	; 0x2c
 80066ec:	e009      	b.n	8006702 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2281      	movs	r2, #129	; 0x81
 80066f2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066fa:	4618      	mov	r0, r3
 80066fc:	f002 fe96 	bl	800942c <SDMMC_CmdReadSingleBlock>
 8006700:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006704:	2b00      	cmp	r3, #0
 8006706:	d012      	beq.n	800672e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a0d      	ldr	r2, [pc, #52]	; (8006744 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800670e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006716:	431a      	orrs	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e002      	b.n	8006734 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800672e:	2300      	movs	r3, #0
 8006730:	e000      	b.n	8006734 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8006732:	2302      	movs	r3, #2
  }
}
 8006734:	4618      	mov	r0, r3
 8006736:	3730      	adds	r7, #48	; 0x30
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	08007153 	.word	0x08007153
 8006740:	080071c5 	.word	0x080071c5
 8006744:	004005ff 	.word	0x004005ff

08006748 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b08c      	sub	sp, #48	; 0x30
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d107      	bne.n	8006770 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006764:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e0c6      	b.n	80068fe <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b01      	cmp	r3, #1
 800677a:	f040 80bf 	bne.w	80068fc <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	441a      	add	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800678e:	429a      	cmp	r2, r3
 8006790:	d907      	bls.n	80067a2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006796:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e0ad      	b.n	80068fe <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2203      	movs	r2, #3
 80067a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2200      	movs	r2, #0
 80067b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f042 021a 	orr.w	r2, r2, #26
 80067c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c6:	4a50      	ldr	r2, [pc, #320]	; (8006908 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80067c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ce:	4a4f      	ldr	r2, [pc, #316]	; (800690c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80067d0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067d6:	2200      	movs	r2, #0
 80067d8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d002      	beq.n	80067e8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80067e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e4:	025b      	lsls	r3, r3, #9
 80067e6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d90a      	bls.n	8006804 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	22a0      	movs	r2, #160	; 0xa0
 80067f2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067fa:	4618      	mov	r0, r3
 80067fc:	f002 fe7c 	bl	80094f8 <SDMMC_CmdWriteMultiBlock>
 8006800:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006802:	e009      	b.n	8006818 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2290      	movs	r2, #144	; 0x90
 8006808:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006810:	4618      	mov	r0, r3
 8006812:	f002 fe4f 	bl	80094b4 <SDMMC_CmdWriteSingleBlock>
 8006816:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681a:	2b00      	cmp	r3, #0
 800681c:	d012      	beq.n	8006844 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a3b      	ldr	r2, [pc, #236]	; (8006910 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006824:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800682a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682c:	431a      	orrs	r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e05c      	b.n	80068fe <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f042 0208 	orr.w	r2, r2, #8
 8006852:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006858:	2240      	movs	r2, #64	; 0x40
 800685a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800686c:	689a      	ldr	r2, [r3, #8]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	430a      	orrs	r2, r1
 8006876:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800687c:	68b9      	ldr	r1, [r7, #8]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3380      	adds	r3, #128	; 0x80
 8006884:	461a      	mov	r2, r3
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	025b      	lsls	r3, r3, #9
 800688a:	089b      	lsrs	r3, r3, #2
 800688c:	f7fc fd22 	bl	80032d4 <HAL_DMA_Start_IT>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d01a      	beq.n	80068cc <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f022 021a 	bic.w	r2, r2, #26
 80068a4:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a19      	ldr	r2, [pc, #100]	; (8006910 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80068ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e018      	b.n	80068fe <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80068cc:	f04f 33ff 	mov.w	r3, #4294967295
 80068d0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	025b      	lsls	r3, r3, #9
 80068d6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80068d8:	2390      	movs	r3, #144	; 0x90
 80068da:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80068dc:	2300      	movs	r3, #0
 80068de:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80068e0:	2300      	movs	r3, #0
 80068e2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80068e4:	2301      	movs	r3, #1
 80068e6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f107 0210 	add.w	r2, r7, #16
 80068f0:	4611      	mov	r1, r2
 80068f2:	4618      	mov	r0, r3
 80068f4:	f002 fd4c 	bl	8009390 <SDMMC_ConfigData>

      return HAL_OK;
 80068f8:	2300      	movs	r3, #0
 80068fa:	e000      	b.n	80068fe <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80068fc:	2302      	movs	r3, #2
  }
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3730      	adds	r7, #48	; 0x30
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	08007129 	.word	0x08007129
 800690c:	080071c5 	.word	0x080071c5
 8006910:	004005ff 	.word	0x004005ff

08006914 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006920:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d008      	beq.n	8006942 <HAL_SD_IRQHandler+0x2e>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f003 0308 	and.w	r3, r3, #8
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 ffef 	bl	800791e <SD_Read_IT>
 8006940:	e15a      	b.n	8006bf8 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 808d 	beq.w	8006a6c <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f44f 7280 	mov.w	r2, #256	; 0x100
 800695a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	4b9a      	ldr	r3, [pc, #616]	; (8006bd0 <HAL_SD_IRQHandler+0x2bc>)
 8006968:	400b      	ands	r3, r1
 800696a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 0201 	bic.w	r2, r2, #1
 800697a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f003 0308 	and.w	r3, r3, #8
 8006982:	2b00      	cmp	r3, #0
 8006984:	d039      	beq.n	80069fa <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f003 0302 	and.w	r3, r3, #2
 800698c:	2b00      	cmp	r3, #0
 800698e:	d104      	bne.n	800699a <HAL_SD_IRQHandler+0x86>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f003 0320 	and.w	r3, r3, #32
 8006996:	2b00      	cmp	r3, #0
 8006998:	d011      	beq.n	80069be <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4618      	mov	r0, r3
 80069a0:	f002 fdcc 	bl	800953c <SDMMC_CmdStopTransfer>
 80069a4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d008      	beq.n	80069be <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	431a      	orrs	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f921 	bl	8006c00 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f240 523a 	movw	r2, #1338	; 0x53a
 80069c6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d104      	bne.n	80069ea <HAL_SD_IRQHandler+0xd6>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f003 fa34 	bl	8009e58 <HAL_SD_RxCpltCallback>
 80069f0:	e102      	b.n	8006bf8 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f003 fa26 	bl	8009e44 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80069f8:	e0fe      	b.n	8006bf8 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 80f9 	beq.w	8006bf8 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f003 0320 	and.w	r3, r3, #32
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d011      	beq.n	8006a34 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f002 fd91 	bl	800953c <SDMMC_CmdStopTransfer>
 8006a1a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d008      	beq.n	8006a34 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	431a      	orrs	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f8e6 	bl	8006c00 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f040 80dc 	bne.w	8006bf8 <HAL_SD_IRQHandler+0x2e4>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f003 0302 	and.w	r3, r3, #2
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f040 80d6 	bne.w	8006bf8 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f022 0208 	bic.w	r2, r2, #8
 8006a5a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f003 f9ed 	bl	8009e44 <HAL_SD_TxCpltCallback>
}
 8006a6a:	e0c5      	b.n	8006bf8 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d008      	beq.n	8006a8c <HAL_SD_IRQHandler+0x178>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f003 0308 	and.w	r3, r3, #8
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d003      	beq.n	8006a8c <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 ff9b 	bl	80079c0 <SD_Write_IT>
 8006a8a:	e0b5      	b.n	8006bf8 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a92:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	f000 80ae 	beq.w	8006bf8 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d005      	beq.n	8006ab6 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aae:	f043 0202 	orr.w	r2, r3, #2
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006abc:	f003 0308 	and.w	r3, r3, #8
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d005      	beq.n	8006ad0 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac8:	f043 0208 	orr.w	r2, r3, #8
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ad6:	f003 0320 	and.w	r3, r3, #32
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d005      	beq.n	8006aea <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae2:	f043 0220 	orr.w	r2, r3, #32
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af0:	f003 0310 	and.w	r3, r3, #16
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d005      	beq.n	8006b04 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afc:	f043 0210 	orr.w	r2, r3, #16
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f240 523a 	movw	r2, #1338	; 0x53a
 8006b0c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006b1c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f002 fd0a 	bl	800953c <SDMMC_CmdStopTransfer>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f003 0308 	and.w	r3, r3, #8
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00a      	beq.n	8006b54 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f857 	bl	8006c00 <HAL_SD_ErrorCallback>
}
 8006b52:	e051      	b.n	8006bf8 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d04c      	beq.n	8006bf8 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f003 0310 	and.w	r3, r3, #16
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d104      	bne.n	8006b72 <HAL_SD_IRQHandler+0x25e>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f003 0320 	and.w	r3, r3, #32
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d011      	beq.n	8006b96 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b76:	4a17      	ldr	r2, [pc, #92]	; (8006bd4 <HAL_SD_IRQHandler+0x2c0>)
 8006b78:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fc fc08 	bl	8003394 <HAL_DMA_Abort_IT>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d036      	beq.n	8006bf8 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f000 fb6a 	bl	8007268 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006b94:	e030      	b.n	8006bf8 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d104      	bne.n	8006baa <HAL_SD_IRQHandler+0x296>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d018      	beq.n	8006bdc <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	4a0a      	ldr	r2, [pc, #40]	; (8006bd8 <HAL_SD_IRQHandler+0x2c4>)
 8006bb0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fc fbec 	bl	8003394 <HAL_DMA_Abort_IT>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d01a      	beq.n	8006bf8 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 fb85 	bl	80072d6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006bcc:	e014      	b.n	8006bf8 <HAL_SD_IRQHandler+0x2e4>
 8006bce:	bf00      	nop
 8006bd0:	ffff3ec5 	.word	0xffff3ec5
 8006bd4:	08007269 	.word	0x08007269
 8006bd8:	080072d7 	.word	0x080072d7
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f003 f91d 	bl	8009e30 <HAL_SD_AbortCallback>
}
 8006bf6:	e7ff      	b.n	8006bf8 <HAL_SD_IRQHandler+0x2e4>
 8006bf8:	bf00      	nop
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c22:	0f9b      	lsrs	r3, r3, #30
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c2e:	0e9b      	lsrs	r3, r3, #26
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	f003 030f 	and.w	r3, r3, #15
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c40:	0e1b      	lsrs	r3, r3, #24
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	f003 0303 	and.w	r3, r3, #3
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c52:	0c1b      	lsrs	r3, r3, #16
 8006c54:	b2da      	uxtb	r2, r3
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c5e:	0a1b      	lsrs	r3, r3, #8
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c74:	0d1b      	lsrs	r3, r3, #20
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c80:	0c1b      	lsrs	r3, r3, #16
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	f003 030f 	and.w	r3, r3, #15
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c92:	0bdb      	lsrs	r3, r3, #15
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	f003 0301 	and.w	r3, r3, #1
 8006c9a:	b2da      	uxtb	r2, r3
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ca4:	0b9b      	lsrs	r3, r3, #14
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	f003 0301 	and.w	r3, r3, #1
 8006cac:	b2da      	uxtb	r2, r3
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cb6:	0b5b      	lsrs	r3, r3, #13
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	f003 0301 	and.w	r3, r3, #1
 8006cbe:	b2da      	uxtb	r2, r3
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cc8:	0b1b      	lsrs	r3, r3, #12
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d163      	bne.n	8006dac <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ce8:	009a      	lsls	r2, r3, #2
 8006cea:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006cee:	4013      	ands	r3, r2
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006cf4:	0f92      	lsrs	r2, r2, #30
 8006cf6:	431a      	orrs	r2, r3
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d00:	0edb      	lsrs	r3, r3, #27
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	f003 0307 	and.w	r3, r3, #7
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d12:	0e1b      	lsrs	r3, r3, #24
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	f003 0307 	and.w	r3, r3, #7
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d24:	0d5b      	lsrs	r3, r3, #21
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	f003 0307 	and.w	r3, r3, #7
 8006d2c:	b2da      	uxtb	r2, r3
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d36:	0c9b      	lsrs	r3, r3, #18
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	f003 0307 	and.w	r3, r3, #7
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d48:	0bdb      	lsrs	r3, r3, #15
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	f003 0307 	and.w	r3, r3, #7
 8006d50:	b2da      	uxtb	r2, r3
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	1c5a      	adds	r2, r3, #1
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	7e1b      	ldrb	r3, [r3, #24]
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	f003 0307 	and.w	r3, r3, #7
 8006d6a:	3302      	adds	r3, #2
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006d76:	fb03 f202 	mul.w	r2, r3, r2
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	7a1b      	ldrb	r3, [r3, #8]
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	f003 030f 	and.w	r3, r3, #15
 8006d88:	2201      	movs	r2, #1
 8006d8a:	409a      	lsls	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006d98:	0a52      	lsrs	r2, r2, #9
 8006d9a:	fb03 f202 	mul.w	r2, r3, r2
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006da8:	661a      	str	r2, [r3, #96]	; 0x60
 8006daa:	e031      	b.n	8006e10 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d11d      	bne.n	8006df0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006db8:	041b      	lsls	r3, r3, #16
 8006dba:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dc2:	0c1b      	lsrs	r3, r3, #16
 8006dc4:	431a      	orrs	r2, r3
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	029a      	lsls	r2, r3, #10
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006de4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	661a      	str	r2, [r3, #96]	; 0x60
 8006dee:	e00f      	b.n	8006e10 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a58      	ldr	r2, [pc, #352]	; (8006f58 <HAL_SD_GetCardCSD+0x344>)
 8006df6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e09d      	b.n	8006f4c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e14:	0b9b      	lsrs	r3, r3, #14
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	f003 0301 	and.w	r3, r3, #1
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e26:	09db      	lsrs	r3, r3, #7
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e2e:	b2da      	uxtb	r2, r3
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e3e:	b2da      	uxtb	r2, r3
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e48:	0fdb      	lsrs	r3, r3, #31
 8006e4a:	b2da      	uxtb	r2, r3
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e54:	0f5b      	lsrs	r3, r3, #29
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	f003 0303 	and.w	r3, r3, #3
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e66:	0e9b      	lsrs	r3, r3, #26
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	f003 0307 	and.w	r3, r3, #7
 8006e6e:	b2da      	uxtb	r2, r3
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e78:	0d9b      	lsrs	r3, r3, #22
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	f003 030f 	and.w	r3, r3, #15
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8a:	0d5b      	lsrs	r3, r3, #21
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	b2da      	uxtb	r2, r3
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea6:	0c1b      	lsrs	r3, r3, #16
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	f003 0301 	and.w	r3, r3, #1
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eba:	0bdb      	lsrs	r3, r3, #15
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	b2da      	uxtb	r2, r3
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ece:	0b9b      	lsrs	r3, r3, #14
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	b2da      	uxtb	r2, r3
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee2:	0b5b      	lsrs	r3, r3, #13
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef6:	0b1b      	lsrs	r3, r3, #12
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	b2da      	uxtb	r2, r3
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f0a:	0a9b      	lsrs	r3, r3, #10
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	f003 0303 	and.w	r3, r3, #3
 8006f12:	b2da      	uxtb	r2, r3
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f1e:	0a1b      	lsrs	r3, r3, #8
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	f003 0303 	and.w	r3, r3, #3
 8006f26:	b2da      	uxtb	r2, r3
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f32:	085b      	lsrs	r3, r3, #1
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f3a:	b2da      	uxtb	r2, r3
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	004005ff 	.word	0x004005ff

08006f5c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006fb4:	b5b0      	push	{r4, r5, r7, lr}
 8006fb6:	b08e      	sub	sp, #56	; 0x38
 8006fb8:	af04      	add	r7, sp, #16
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2203      	movs	r2, #3
 8006fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd0:	2b03      	cmp	r3, #3
 8006fd2:	d02e      	beq.n	8007032 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fda:	d106      	bne.n	8006fea <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	639a      	str	r2, [r3, #56]	; 0x38
 8006fe8:	e029      	b.n	800703e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ff0:	d10a      	bne.n	8007008 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fb2a 	bl	800764c <SD_WideBus_Enable>
 8006ff8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	431a      	orrs	r2, r3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	639a      	str	r2, [r3, #56]	; 0x38
 8007006:	e01a      	b.n	800703e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10a      	bne.n	8007024 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fb67 	bl	80076e2 <SD_WideBus_Disable>
 8007014:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800701a:	6a3b      	ldr	r3, [r7, #32]
 800701c:	431a      	orrs	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	639a      	str	r2, [r3, #56]	; 0x38
 8007022:	e00c      	b.n	800703e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007028:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	639a      	str	r2, [r3, #56]	; 0x38
 8007030:	e005      	b.n	800703e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007036:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00b      	beq.n	800705e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a26      	ldr	r2, [pc, #152]	; (80070e4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800704c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800705c:	e01f      	b.n	800709e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681d      	ldr	r5, [r3, #0]
 8007084:	466c      	mov	r4, sp
 8007086:	f107 0314 	add.w	r3, r7, #20
 800708a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800708e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007092:	f107 0308 	add.w	r3, r7, #8
 8007096:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007098:	4628      	mov	r0, r5
 800709a:	f002 f8c9 	bl	8009230 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80070a6:	4618      	mov	r0, r3
 80070a8:	f002 f99e 	bl	80093e8 <SDMMC_CmdBlockLength>
 80070ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00c      	beq.n	80070ce <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a0a      	ldr	r2, [pc, #40]	; (80070e4 <HAL_SD_ConfigWideBusOperation+0x130>)
 80070ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	431a      	orrs	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80070d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3728      	adds	r7, #40	; 0x28
 80070de:	46bd      	mov	sp, r7
 80070e0:	bdb0      	pop	{r4, r5, r7, pc}
 80070e2:	bf00      	nop
 80070e4:	004005ff 	.word	0x004005ff

080070e8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80070f0:	2300      	movs	r3, #0
 80070f2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80070f4:	f107 030c 	add.w	r3, r7, #12
 80070f8:	4619      	mov	r1, r3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fa7e 	bl	80075fc <SD_SendStatus>
 8007100:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d005      	beq.n	8007114 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	431a      	orrs	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	0a5b      	lsrs	r3, r3, #9
 8007118:	f003 030f 	and.w	r3, r3, #15
 800711c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800711e:	693b      	ldr	r3, [r7, #16]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3718      	adds	r7, #24
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007134:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007144:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007146:	bf00      	nop
 8007148:	3714      	adds	r7, #20
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b084      	sub	sp, #16
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007164:	2b82      	cmp	r3, #130	; 0x82
 8007166:	d111      	bne.n	800718c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4618      	mov	r0, r3
 800716e:	f002 f9e5 	bl	800953c <SDMMC_CmdStopTransfer>
 8007172:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d008      	beq.n	800718c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	431a      	orrs	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f7ff fd3a 	bl	8006c00 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f022 0208 	bic.w	r2, r2, #8
 800719a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f240 523a 	movw	r2, #1338	; 0x53a
 80071a4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f002 fe4f 	bl	8009e58 <HAL_SD_RxCpltCallback>
#endif
}
 80071ba:	bf00      	nop
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
	...

080071c4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f7fc fa8a 	bl	80036ec <HAL_DMA_GetError>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d03e      	beq.n	800725c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ec:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d002      	beq.n	80071fa <SD_DMAError+0x36>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d12d      	bne.n	8007256 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a19      	ldr	r2, [pc, #100]	; (8007264 <SD_DMAError+0xa0>)
 8007200:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007210:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007216:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800721e:	6978      	ldr	r0, [r7, #20]
 8007220:	f7ff ff62 	bl	80070e8 <HAL_SD_GetCardState>
 8007224:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	2b06      	cmp	r3, #6
 800722a:	d002      	beq.n	8007232 <SD_DMAError+0x6e>
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	2b05      	cmp	r3, #5
 8007230:	d10a      	bne.n	8007248 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4618      	mov	r0, r3
 8007238:	f002 f980 	bl	800953c <SDMMC_CmdStopTransfer>
 800723c:	4602      	mov	r2, r0
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007242:	431a      	orrs	r2, r3
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	2200      	movs	r2, #0
 8007254:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8007256:	6978      	ldr	r0, [r7, #20]
 8007258:	f7ff fcd2 	bl	8006c00 <HAL_SD_ErrorCallback>
#endif
  }
}
 800725c:	bf00      	nop
 800725e:	3718      	adds	r7, #24
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	004005ff 	.word	0x004005ff

08007268 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007274:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f240 523a 	movw	r2, #1338	; 0x53a
 800727e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f7ff ff31 	bl	80070e8 <HAL_SD_GetCardState>
 8007286:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	2b06      	cmp	r3, #6
 800729a:	d002      	beq.n	80072a2 <SD_DMATxAbort+0x3a>
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2b05      	cmp	r3, #5
 80072a0:	d10a      	bne.n	80072b8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4618      	mov	r0, r3
 80072a8:	f002 f948 	bl	800953c <SDMMC_CmdStopTransfer>
 80072ac:	4602      	mov	r2, r0
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b2:	431a      	orrs	r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d103      	bne.n	80072c8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f002 fdb5 	bl	8009e30 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80072c6:	e002      	b.n	80072ce <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f7ff fc99 	bl	8006c00 <HAL_SD_ErrorCallback>
}
 80072ce:	bf00      	nop
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b084      	sub	sp, #16
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f240 523a 	movw	r2, #1338	; 0x53a
 80072ec:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f7ff fefa 	bl	80070e8 <HAL_SD_GetCardState>
 80072f4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	2b06      	cmp	r3, #6
 8007308:	d002      	beq.n	8007310 <SD_DMARxAbort+0x3a>
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	2b05      	cmp	r3, #5
 800730e:	d10a      	bne.n	8007326 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4618      	mov	r0, r3
 8007316:	f002 f911 	bl	800953c <SDMMC_CmdStopTransfer>
 800731a:	4602      	mov	r2, r0
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007320:	431a      	orrs	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732a:	2b00      	cmp	r3, #0
 800732c:	d103      	bne.n	8007336 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f002 fd7e 	bl	8009e30 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007334:	e002      	b.n	800733c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f7ff fc62 	bl	8006c00 <HAL_SD_ErrorCallback>
}
 800733c:	bf00      	nop
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007344:	b5b0      	push	{r4, r5, r7, lr}
 8007346:	b094      	sub	sp, #80	; 0x50
 8007348:	af04      	add	r7, sp, #16
 800734a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800734c:	2301      	movs	r3, #1
 800734e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4618      	mov	r0, r3
 8007356:	f001 ffc3 	bl	80092e0 <SDMMC_GetPowerState>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d102      	bne.n	8007366 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007360:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007364:	e0b8      	b.n	80074d8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800736a:	2b03      	cmp	r3, #3
 800736c:	d02f      	beq.n	80073ce <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4618      	mov	r0, r3
 8007374:	f002 f9ed 	bl	8009752 <SDMMC_CmdSendCID>
 8007378:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800737a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800737c:	2b00      	cmp	r3, #0
 800737e:	d001      	beq.n	8007384 <SD_InitCard+0x40>
    {
      return errorstate;
 8007380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007382:	e0a9      	b.n	80074d8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2100      	movs	r1, #0
 800738a:	4618      	mov	r0, r3
 800738c:	f001 ffed 	bl	800936a <SDMMC_GetResponse>
 8007390:	4602      	mov	r2, r0
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2104      	movs	r1, #4
 800739c:	4618      	mov	r0, r3
 800739e:	f001 ffe4 	bl	800936a <SDMMC_GetResponse>
 80073a2:	4602      	mov	r2, r0
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2108      	movs	r1, #8
 80073ae:	4618      	mov	r0, r3
 80073b0:	f001 ffdb 	bl	800936a <SDMMC_GetResponse>
 80073b4:	4602      	mov	r2, r0
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	210c      	movs	r1, #12
 80073c0:	4618      	mov	r0, r3
 80073c2:	f001 ffd2 	bl	800936a <SDMMC_GetResponse>
 80073c6:	4602      	mov	r2, r0
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d00d      	beq.n	80073f2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f107 020e 	add.w	r2, r7, #14
 80073de:	4611      	mov	r1, r2
 80073e0:	4618      	mov	r0, r3
 80073e2:	f002 f9f3 	bl	80097cc <SDMMC_CmdSetRelAdd>
 80073e6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80073e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d001      	beq.n	80073f2 <SD_InitCard+0xae>
    {
      return errorstate;
 80073ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073f0:	e072      	b.n	80074d8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f6:	2b03      	cmp	r3, #3
 80073f8:	d036      	beq.n	8007468 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80073fa:	89fb      	ldrh	r3, [r7, #14]
 80073fc:	461a      	mov	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800740a:	041b      	lsls	r3, r3, #16
 800740c:	4619      	mov	r1, r3
 800740e:	4610      	mov	r0, r2
 8007410:	f002 f9bd 	bl	800978e <SDMMC_CmdSendCSD>
 8007414:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007418:	2b00      	cmp	r3, #0
 800741a:	d001      	beq.n	8007420 <SD_InitCard+0xdc>
    {
      return errorstate;
 800741c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800741e:	e05b      	b.n	80074d8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2100      	movs	r1, #0
 8007426:	4618      	mov	r0, r3
 8007428:	f001 ff9f 	bl	800936a <SDMMC_GetResponse>
 800742c:	4602      	mov	r2, r0
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2104      	movs	r1, #4
 8007438:	4618      	mov	r0, r3
 800743a:	f001 ff96 	bl	800936a <SDMMC_GetResponse>
 800743e:	4602      	mov	r2, r0
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2108      	movs	r1, #8
 800744a:	4618      	mov	r0, r3
 800744c:	f001 ff8d 	bl	800936a <SDMMC_GetResponse>
 8007450:	4602      	mov	r2, r0
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	210c      	movs	r1, #12
 800745c:	4618      	mov	r0, r3
 800745e:	f001 ff84 	bl	800936a <SDMMC_GetResponse>
 8007462:	4602      	mov	r2, r0
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2104      	movs	r1, #4
 800746e:	4618      	mov	r0, r3
 8007470:	f001 ff7b 	bl	800936a <SDMMC_GetResponse>
 8007474:	4603      	mov	r3, r0
 8007476:	0d1a      	lsrs	r2, r3, #20
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800747c:	f107 0310 	add.w	r3, r7, #16
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7ff fbc6 	bl	8006c14 <HAL_SD_GetCardCSD>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d002      	beq.n	8007494 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800748e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007492:	e021      	b.n	80074d8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6819      	ldr	r1, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800749c:	041b      	lsls	r3, r3, #16
 800749e:	2200      	movs	r2, #0
 80074a0:	461c      	mov	r4, r3
 80074a2:	4615      	mov	r5, r2
 80074a4:	4622      	mov	r2, r4
 80074a6:	462b      	mov	r3, r5
 80074a8:	4608      	mov	r0, r1
 80074aa:	f002 f869 	bl	8009580 <SDMMC_CmdSelDesel>
 80074ae:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80074b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d001      	beq.n	80074ba <SD_InitCard+0x176>
  {
    return errorstate;
 80074b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b8:	e00e      	b.n	80074d8 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681d      	ldr	r5, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	466c      	mov	r4, sp
 80074c2:	f103 0210 	add.w	r2, r3, #16
 80074c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80074c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80074cc:	3304      	adds	r3, #4
 80074ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074d0:	4628      	mov	r0, r5
 80074d2:	f001 fead 	bl	8009230 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3740      	adds	r7, #64	; 0x40
 80074dc:	46bd      	mov	sp, r7
 80074de:	bdb0      	pop	{r4, r5, r7, pc}

080074e0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074e8:	2300      	movs	r3, #0
 80074ea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80074ec:	2300      	movs	r3, #0
 80074ee:	617b      	str	r3, [r7, #20]
 80074f0:	2300      	movs	r3, #0
 80074f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f002 f864 	bl	80095c6 <SDMMC_CmdGoIdleState>
 80074fe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d001      	beq.n	800750a <SD_PowerON+0x2a>
  {
    return errorstate;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	e072      	b.n	80075f0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4618      	mov	r0, r3
 8007510:	f002 f877 	bl	8009602 <SDMMC_CmdOperCond>
 8007514:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00d      	beq.n	8007538 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4618      	mov	r0, r3
 8007528:	f002 f84d 	bl	80095c6 <SDMMC_CmdGoIdleState>
 800752c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d004      	beq.n	800753e <SD_PowerON+0x5e>
    {
      return errorstate;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	e05b      	b.n	80075f0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007542:	2b01      	cmp	r3, #1
 8007544:	d137      	bne.n	80075b6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2100      	movs	r1, #0
 800754c:	4618      	mov	r0, r3
 800754e:	f002 f877 	bl	8009640 <SDMMC_CmdAppCommand>
 8007552:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d02d      	beq.n	80075b6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800755a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800755e:	e047      	b.n	80075f0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2100      	movs	r1, #0
 8007566:	4618      	mov	r0, r3
 8007568:	f002 f86a 	bl	8009640 <SDMMC_CmdAppCommand>
 800756c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d001      	beq.n	8007578 <SD_PowerON+0x98>
    {
      return errorstate;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	e03b      	b.n	80075f0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	491e      	ldr	r1, [pc, #120]	; (80075f8 <SD_PowerON+0x118>)
 800757e:	4618      	mov	r0, r3
 8007580:	f002 f880 	bl	8009684 <SDMMC_CmdAppOperCommand>
 8007584:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d002      	beq.n	8007592 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800758c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007590:	e02e      	b.n	80075f0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2100      	movs	r1, #0
 8007598:	4618      	mov	r0, r3
 800759a:	f001 fee6 	bl	800936a <SDMMC_GetResponse>
 800759e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	0fdb      	lsrs	r3, r3, #31
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d101      	bne.n	80075ac <SD_PowerON+0xcc>
 80075a8:	2301      	movs	r3, #1
 80075aa:	e000      	b.n	80075ae <SD_PowerON+0xce>
 80075ac:	2300      	movs	r3, #0
 80075ae:	613b      	str	r3, [r7, #16]

    count++;
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	3301      	adds	r3, #1
 80075b4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80075bc:	4293      	cmp	r3, r2
 80075be:	d802      	bhi.n	80075c6 <SD_PowerON+0xe6>
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d0cc      	beq.n	8007560 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d902      	bls.n	80075d6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80075d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075d4:	e00c      	b.n	80075f0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d003      	beq.n	80075e8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	645a      	str	r2, [r3, #68]	; 0x44
 80075e6:	e002      	b.n	80075ee <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3718      	adds	r7, #24
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	c1100000 	.word	0xc1100000

080075fc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d102      	bne.n	8007612 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800760c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007610:	e018      	b.n	8007644 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800761a:	041b      	lsls	r3, r3, #16
 800761c:	4619      	mov	r1, r3
 800761e:	4610      	mov	r0, r2
 8007620:	f002 f8f5 	bl	800980e <SDMMC_CmdSendStatus>
 8007624:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d001      	beq.n	8007630 <SD_SendStatus+0x34>
  {
    return errorstate;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	e009      	b.n	8007644 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2100      	movs	r1, #0
 8007636:	4618      	mov	r0, r3
 8007638:	f001 fe97 	bl	800936a <SDMMC_GetResponse>
 800763c:	4602      	mov	r2, r0
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007654:	2300      	movs	r3, #0
 8007656:	60fb      	str	r3, [r7, #12]
 8007658:	2300      	movs	r3, #0
 800765a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2100      	movs	r1, #0
 8007662:	4618      	mov	r0, r3
 8007664:	f001 fe81 	bl	800936a <SDMMC_GetResponse>
 8007668:	4603      	mov	r3, r0
 800766a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800766e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007672:	d102      	bne.n	800767a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007674:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007678:	e02f      	b.n	80076da <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800767a:	f107 030c 	add.w	r3, r7, #12
 800767e:	4619      	mov	r1, r3
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 f879 	bl	8007778 <SD_FindSCR>
 8007686:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	e023      	b.n	80076da <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d01c      	beq.n	80076d6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076a4:	041b      	lsls	r3, r3, #16
 80076a6:	4619      	mov	r1, r3
 80076a8:	4610      	mov	r0, r2
 80076aa:	f001 ffc9 	bl	8009640 <SDMMC_CmdAppCommand>
 80076ae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	e00f      	b.n	80076da <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2102      	movs	r1, #2
 80076c0:	4618      	mov	r0, r3
 80076c2:	f002 f803 	bl	80096cc <SDMMC_CmdBusWidth>
 80076c6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d001      	beq.n	80076d2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	e003      	b.n	80076da <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80076d2:	2300      	movs	r3, #0
 80076d4:	e001      	b.n	80076da <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80076d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3718      	adds	r7, #24
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b086      	sub	sp, #24
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80076ea:	2300      	movs	r3, #0
 80076ec:	60fb      	str	r3, [r7, #12]
 80076ee:	2300      	movs	r3, #0
 80076f0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2100      	movs	r1, #0
 80076f8:	4618      	mov	r0, r3
 80076fa:	f001 fe36 	bl	800936a <SDMMC_GetResponse>
 80076fe:	4603      	mov	r3, r0
 8007700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007704:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007708:	d102      	bne.n	8007710 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800770a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800770e:	e02f      	b.n	8007770 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007710:	f107 030c 	add.w	r3, r7, #12
 8007714:	4619      	mov	r1, r3
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f82e 	bl	8007778 <SD_FindSCR>
 800771c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d001      	beq.n	8007728 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	e023      	b.n	8007770 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d01c      	beq.n	800776c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800773a:	041b      	lsls	r3, r3, #16
 800773c:	4619      	mov	r1, r3
 800773e:	4610      	mov	r0, r2
 8007740:	f001 ff7e 	bl	8009640 <SDMMC_CmdAppCommand>
 8007744:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	e00f      	b.n	8007770 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2100      	movs	r1, #0
 8007756:	4618      	mov	r0, r3
 8007758:	f001 ffb8 	bl	80096cc <SDMMC_CmdBusWidth>
 800775c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d001      	beq.n	8007768 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	e003      	b.n	8007770 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007768:	2300      	movs	r3, #0
 800776a:	e001      	b.n	8007770 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800776c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007770:	4618      	mov	r0, r3
 8007772:	3718      	adds	r7, #24
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007778:	b590      	push	{r4, r7, lr}
 800777a:	b08f      	sub	sp, #60	; 0x3c
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007782:	f7fb f827 	bl	80027d4 <HAL_GetTick>
 8007786:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007788:	2300      	movs	r3, #0
 800778a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800778c:	2300      	movs	r3, #0
 800778e:	60bb      	str	r3, [r7, #8]
 8007790:	2300      	movs	r3, #0
 8007792:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2108      	movs	r1, #8
 800779e:	4618      	mov	r0, r3
 80077a0:	f001 fe22 	bl	80093e8 <SDMMC_CmdBlockLength>
 80077a4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80077a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80077ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ae:	e0b2      	b.n	8007916 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077b8:	041b      	lsls	r3, r3, #16
 80077ba:	4619      	mov	r1, r3
 80077bc:	4610      	mov	r0, r2
 80077be:	f001 ff3f 	bl	8009640 <SDMMC_CmdAppCommand>
 80077c2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80077c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d001      	beq.n	80077ce <SD_FindSCR+0x56>
  {
    return errorstate;
 80077ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077cc:	e0a3      	b.n	8007916 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80077ce:	f04f 33ff 	mov.w	r3, #4294967295
 80077d2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80077d4:	2308      	movs	r3, #8
 80077d6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80077d8:	2330      	movs	r3, #48	; 0x30
 80077da:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80077dc:	2302      	movs	r3, #2
 80077de:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80077e0:	2300      	movs	r3, #0
 80077e2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80077e4:	2301      	movs	r3, #1
 80077e6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f107 0210 	add.w	r2, r7, #16
 80077f0:	4611      	mov	r1, r2
 80077f2:	4618      	mov	r0, r3
 80077f4:	f001 fdcc 	bl	8009390 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4618      	mov	r0, r3
 80077fe:	f001 ff87 	bl	8009710 <SDMMC_CmdSendSCR>
 8007802:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007806:	2b00      	cmp	r3, #0
 8007808:	d02a      	beq.n	8007860 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800780a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780c:	e083      	b.n	8007916 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00f      	beq.n	800783c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6819      	ldr	r1, [r3, #0]
 8007820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	f107 0208 	add.w	r2, r7, #8
 8007828:	18d4      	adds	r4, r2, r3
 800782a:	4608      	mov	r0, r1
 800782c:	f001 fd2c 	bl	8009288 <SDMMC_ReadFIFO>
 8007830:	4603      	mov	r3, r0
 8007832:	6023      	str	r3, [r4, #0]
      index++;
 8007834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007836:	3301      	adds	r3, #1
 8007838:	637b      	str	r3, [r7, #52]	; 0x34
 800783a:	e006      	b.n	800784a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d012      	beq.n	8007870 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800784a:	f7fa ffc3 	bl	80027d4 <HAL_GetTick>
 800784e:	4602      	mov	r2, r0
 8007850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007852:	1ad3      	subs	r3, r2, r3
 8007854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007858:	d102      	bne.n	8007860 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800785a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800785e:	e05a      	b.n	8007916 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007866:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800786a:	2b00      	cmp	r3, #0
 800786c:	d0cf      	beq.n	800780e <SD_FindSCR+0x96>
 800786e:	e000      	b.n	8007872 <SD_FindSCR+0xfa>
      break;
 8007870:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007878:	f003 0308 	and.w	r3, r3, #8
 800787c:	2b00      	cmp	r3, #0
 800787e:	d005      	beq.n	800788c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2208      	movs	r2, #8
 8007886:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007888:	2308      	movs	r3, #8
 800788a:	e044      	b.n	8007916 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007892:	f003 0302 	and.w	r3, r3, #2
 8007896:	2b00      	cmp	r3, #0
 8007898:	d005      	beq.n	80078a6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2202      	movs	r2, #2
 80078a0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80078a2:	2302      	movs	r3, #2
 80078a4:	e037      	b.n	8007916 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ac:	f003 0320 	and.w	r3, r3, #32
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d005      	beq.n	80078c0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2220      	movs	r2, #32
 80078ba:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80078bc:	2320      	movs	r3, #32
 80078be:	e02a      	b.n	8007916 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f240 523a 	movw	r2, #1338	; 0x53a
 80078c8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	061a      	lsls	r2, r3, #24
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	021b      	lsls	r3, r3, #8
 80078d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80078d6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	0a1b      	lsrs	r3, r3, #8
 80078dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80078e0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	0e1b      	lsrs	r3, r3, #24
 80078e6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80078e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ea:	601a      	str	r2, [r3, #0]
    scr++;
 80078ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ee:	3304      	adds	r3, #4
 80078f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	061a      	lsls	r2, r3, #24
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	021b      	lsls	r3, r3, #8
 80078fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80078fe:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	0a1b      	lsrs	r3, r3, #8
 8007904:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007908:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	0e1b      	lsrs	r3, r3, #24
 800790e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007912:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	373c      	adds	r7, #60	; 0x3c
 800791a:	46bd      	mov	sp, r7
 800791c:	bd90      	pop	{r4, r7, pc}

0800791e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b086      	sub	sp, #24
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007930:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d03f      	beq.n	80079b8 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007938:	2300      	movs	r3, #0
 800793a:	617b      	str	r3, [r7, #20]
 800793c:	e033      	b.n	80079a6 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4618      	mov	r0, r3
 8007944:	f001 fca0 	bl	8009288 <SDMMC_ReadFIFO>
 8007948:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	b2da      	uxtb	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	3301      	adds	r3, #1
 8007956:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	3b01      	subs	r3, #1
 800795c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	0a1b      	lsrs	r3, r3, #8
 8007962:	b2da      	uxtb	r2, r3
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	3301      	adds	r3, #1
 800796c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	3b01      	subs	r3, #1
 8007972:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	0c1b      	lsrs	r3, r3, #16
 8007978:	b2da      	uxtb	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	3301      	adds	r3, #1
 8007982:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	3b01      	subs	r3, #1
 8007988:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	0e1b      	lsrs	r3, r3, #24
 800798e:	b2da      	uxtb	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	3301      	adds	r3, #1
 8007998:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	3b01      	subs	r3, #1
 800799e:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	3301      	adds	r3, #1
 80079a4:	617b      	str	r3, [r7, #20]
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	2b07      	cmp	r3, #7
 80079aa:	d9c8      	bls.n	800793e <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80079b8:	bf00      	nop
 80079ba:	3718      	adds	r7, #24
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a1b      	ldr	r3, [r3, #32]
 80079cc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d043      	beq.n	8007a62 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80079da:	2300      	movs	r3, #0
 80079dc:	617b      	str	r3, [r7, #20]
 80079de:	e037      	b.n	8007a50 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	3301      	adds	r3, #1
 80079ea:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	3b01      	subs	r3, #1
 80079f0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	021a      	lsls	r2, r3, #8
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	60bb      	str	r3, [r7, #8]
      tmp++;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	3301      	adds	r3, #1
 8007a02:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	3b01      	subs	r3, #1
 8007a08:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	041a      	lsls	r2, r3, #16
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	061a      	lsls	r2, r3, #24
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	3301      	adds	r3, #1
 8007a32:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	3b01      	subs	r3, #1
 8007a38:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f107 0208 	add.w	r2, r7, #8
 8007a42:	4611      	mov	r1, r2
 8007a44:	4618      	mov	r0, r3
 8007a46:	f001 fc2c 	bl	80092a2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	617b      	str	r3, [r7, #20]
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	2b07      	cmp	r3, #7
 8007a54:	d9c4      	bls.n	80079e0 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	693a      	ldr	r2, [r7, #16]
 8007a60:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007a62:	bf00      	nop
 8007a64:	3718      	adds	r7, #24
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b082      	sub	sp, #8
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e049      	b.n	8007b10 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d106      	bne.n	8007a96 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7fa fcb1 	bl	80023f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2202      	movs	r2, #2
 8007a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	f000 fbbb 	bl	8008224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d001      	beq.n	8007b30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e054      	b.n	8007bda <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2202      	movs	r2, #2
 8007b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68da      	ldr	r2, [r3, #12]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f042 0201 	orr.w	r2, r2, #1
 8007b46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a26      	ldr	r2, [pc, #152]	; (8007be8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d022      	beq.n	8007b98 <HAL_TIM_Base_Start_IT+0x80>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b5a:	d01d      	beq.n	8007b98 <HAL_TIM_Base_Start_IT+0x80>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a22      	ldr	r2, [pc, #136]	; (8007bec <HAL_TIM_Base_Start_IT+0xd4>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d018      	beq.n	8007b98 <HAL_TIM_Base_Start_IT+0x80>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a21      	ldr	r2, [pc, #132]	; (8007bf0 <HAL_TIM_Base_Start_IT+0xd8>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d013      	beq.n	8007b98 <HAL_TIM_Base_Start_IT+0x80>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a1f      	ldr	r2, [pc, #124]	; (8007bf4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d00e      	beq.n	8007b98 <HAL_TIM_Base_Start_IT+0x80>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a1e      	ldr	r2, [pc, #120]	; (8007bf8 <HAL_TIM_Base_Start_IT+0xe0>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d009      	beq.n	8007b98 <HAL_TIM_Base_Start_IT+0x80>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a1c      	ldr	r2, [pc, #112]	; (8007bfc <HAL_TIM_Base_Start_IT+0xe4>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d004      	beq.n	8007b98 <HAL_TIM_Base_Start_IT+0x80>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a1b      	ldr	r2, [pc, #108]	; (8007c00 <HAL_TIM_Base_Start_IT+0xe8>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d115      	bne.n	8007bc4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	689a      	ldr	r2, [r3, #8]
 8007b9e:	4b19      	ldr	r3, [pc, #100]	; (8007c04 <HAL_TIM_Base_Start_IT+0xec>)
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2b06      	cmp	r3, #6
 8007ba8:	d015      	beq.n	8007bd6 <HAL_TIM_Base_Start_IT+0xbe>
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bb0:	d011      	beq.n	8007bd6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f042 0201 	orr.w	r2, r2, #1
 8007bc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bc2:	e008      	b.n	8007bd6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f042 0201 	orr.w	r2, r2, #1
 8007bd2:	601a      	str	r2, [r3, #0]
 8007bd4:	e000      	b.n	8007bd8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	40010000 	.word	0x40010000
 8007bec:	40000400 	.word	0x40000400
 8007bf0:	40000800 	.word	0x40000800
 8007bf4:	40000c00 	.word	0x40000c00
 8007bf8:	40010400 	.word	0x40010400
 8007bfc:	40014000 	.word	0x40014000
 8007c00:	40001800 	.word	0x40001800
 8007c04:	00010007 	.word	0x00010007

08007c08 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d101      	bne.n	8007c1a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e049      	b.n	8007cae <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d106      	bne.n	8007c34 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f841 	bl	8007cb6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2202      	movs	r2, #2
 8007c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	3304      	adds	r3, #4
 8007c44:	4619      	mov	r1, r3
 8007c46:	4610      	mov	r0, r2
 8007c48:	f000 faec 	bl	8008224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b083      	sub	sp, #12
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007cbe:	bf00      	nop
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b082      	sub	sp, #8
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	f003 0302 	and.w	r3, r3, #2
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d122      	bne.n	8007d26 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	f003 0302 	and.w	r3, r3, #2
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d11b      	bne.n	8007d26 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f06f 0202 	mvn.w	r2, #2
 8007cf6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	f003 0303 	and.w	r3, r3, #3
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d003      	beq.n	8007d14 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fa6b 	bl	80081e8 <HAL_TIM_IC_CaptureCallback>
 8007d12:	e005      	b.n	8007d20 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fa5d 	bl	80081d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fa6e 	bl	80081fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	f003 0304 	and.w	r3, r3, #4
 8007d30:	2b04      	cmp	r3, #4
 8007d32:	d122      	bne.n	8007d7a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	f003 0304 	and.w	r3, r3, #4
 8007d3e:	2b04      	cmp	r3, #4
 8007d40:	d11b      	bne.n	8007d7a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f06f 0204 	mvn.w	r2, #4
 8007d4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2202      	movs	r2, #2
 8007d50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d003      	beq.n	8007d68 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fa41 	bl	80081e8 <HAL_TIM_IC_CaptureCallback>
 8007d66:	e005      	b.n	8007d74 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fa33 	bl	80081d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fa44 	bl	80081fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	f003 0308 	and.w	r3, r3, #8
 8007d84:	2b08      	cmp	r3, #8
 8007d86:	d122      	bne.n	8007dce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	f003 0308 	and.w	r3, r3, #8
 8007d92:	2b08      	cmp	r3, #8
 8007d94:	d11b      	bne.n	8007dce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f06f 0208 	mvn.w	r2, #8
 8007d9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2204      	movs	r2, #4
 8007da4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	69db      	ldr	r3, [r3, #28]
 8007dac:	f003 0303 	and.w	r3, r3, #3
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d003      	beq.n	8007dbc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fa17 	bl	80081e8 <HAL_TIM_IC_CaptureCallback>
 8007dba:	e005      	b.n	8007dc8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fa09 	bl	80081d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fa1a 	bl	80081fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	f003 0310 	and.w	r3, r3, #16
 8007dd8:	2b10      	cmp	r3, #16
 8007dda:	d122      	bne.n	8007e22 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	f003 0310 	and.w	r3, r3, #16
 8007de6:	2b10      	cmp	r3, #16
 8007de8:	d11b      	bne.n	8007e22 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f06f 0210 	mvn.w	r2, #16
 8007df2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2208      	movs	r2, #8
 8007df8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d003      	beq.n	8007e10 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f9ed 	bl	80081e8 <HAL_TIM_IC_CaptureCallback>
 8007e0e:	e005      	b.n	8007e1c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f9df 	bl	80081d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f9f0 	bl	80081fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	f003 0301 	and.w	r3, r3, #1
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d10e      	bne.n	8007e4e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	f003 0301 	and.w	r3, r3, #1
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d107      	bne.n	8007e4e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f06f 0201 	mvn.w	r2, #1
 8007e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f7f9 fd4d 	bl	80018e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e58:	2b80      	cmp	r3, #128	; 0x80
 8007e5a:	d10e      	bne.n	8007e7a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e66:	2b80      	cmp	r3, #128	; 0x80
 8007e68:	d107      	bne.n	8007e7a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fcd1 	bl	800881c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e88:	d10e      	bne.n	8007ea8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e94:	2b80      	cmp	r3, #128	; 0x80
 8007e96:	d107      	bne.n	8007ea8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fcc4 	bl	8008830 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb2:	2b40      	cmp	r3, #64	; 0x40
 8007eb4:	d10e      	bne.n	8007ed4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec0:	2b40      	cmp	r3, #64	; 0x40
 8007ec2:	d107      	bne.n	8007ed4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f99e 	bl	8008210 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	f003 0320 	and.w	r3, r3, #32
 8007ede:	2b20      	cmp	r3, #32
 8007ee0:	d10e      	bne.n	8007f00 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	f003 0320 	and.w	r3, r3, #32
 8007eec:	2b20      	cmp	r3, #32
 8007eee:	d107      	bne.n	8007f00 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f06f 0220 	mvn.w	r2, #32
 8007ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fc84 	bl	8008808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f00:	bf00      	nop
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d101      	bne.n	8007f26 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007f22:	2302      	movs	r3, #2
 8007f24:	e088      	b.n	8008038 <HAL_TIM_IC_ConfigChannel+0x130>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d11b      	bne.n	8007f6c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6818      	ldr	r0, [r3, #0]
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	6819      	ldr	r1, [r3, #0]
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	685a      	ldr	r2, [r3, #4]
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	f000 fa0e 	bl	8008364 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	699a      	ldr	r2, [r3, #24]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f022 020c 	bic.w	r2, r2, #12
 8007f56:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	6999      	ldr	r1, [r3, #24]
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	689a      	ldr	r2, [r3, #8]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	430a      	orrs	r2, r1
 8007f68:	619a      	str	r2, [r3, #24]
 8007f6a:	e060      	b.n	800802e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2b04      	cmp	r3, #4
 8007f70:	d11c      	bne.n	8007fac <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6818      	ldr	r0, [r3, #0]
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	6819      	ldr	r1, [r3, #0]
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	685a      	ldr	r2, [r3, #4]
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	f000 fa92 	bl	80084aa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	699a      	ldr	r2, [r3, #24]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007f94:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	6999      	ldr	r1, [r3, #24]
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	021a      	lsls	r2, r3, #8
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	430a      	orrs	r2, r1
 8007fa8:	619a      	str	r2, [r3, #24]
 8007faa:	e040      	b.n	800802e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b08      	cmp	r3, #8
 8007fb0:	d11b      	bne.n	8007fea <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6818      	ldr	r0, [r3, #0]
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	6819      	ldr	r1, [r3, #0]
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	f000 fadf 	bl	8008584 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	69da      	ldr	r2, [r3, #28]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f022 020c 	bic.w	r2, r2, #12
 8007fd4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	69d9      	ldr	r1, [r3, #28]
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	689a      	ldr	r2, [r3, #8]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	430a      	orrs	r2, r1
 8007fe6:	61da      	str	r2, [r3, #28]
 8007fe8:	e021      	b.n	800802e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2b0c      	cmp	r3, #12
 8007fee:	d11c      	bne.n	800802a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6818      	ldr	r0, [r3, #0]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	6819      	ldr	r1, [r3, #0]
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	685a      	ldr	r2, [r3, #4]
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	f000 fafc 	bl	80085fc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	69da      	ldr	r2, [r3, #28]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008012:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	69d9      	ldr	r1, [r3, #28]
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	021a      	lsls	r2, r3, #8
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	430a      	orrs	r2, r1
 8008026:	61da      	str	r2, [r3, #28]
 8008028:	e001      	b.n	800802e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008036:	7dfb      	ldrb	r3, [r7, #23]
}
 8008038:	4618      	mov	r0, r3
 800803a:	3718      	adds	r7, #24
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008054:	2b01      	cmp	r3, #1
 8008056:	d101      	bne.n	800805c <HAL_TIM_ConfigClockSource+0x1c>
 8008058:	2302      	movs	r3, #2
 800805a:	e0b4      	b.n	80081c6 <HAL_TIM_ConfigClockSource+0x186>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2202      	movs	r2, #2
 8008068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	4b56      	ldr	r3, [pc, #344]	; (80081d0 <HAL_TIM_ConfigClockSource+0x190>)
 8008078:	4013      	ands	r3, r2
 800807a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008082:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008094:	d03e      	beq.n	8008114 <HAL_TIM_ConfigClockSource+0xd4>
 8008096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800809a:	f200 8087 	bhi.w	80081ac <HAL_TIM_ConfigClockSource+0x16c>
 800809e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080a2:	f000 8086 	beq.w	80081b2 <HAL_TIM_ConfigClockSource+0x172>
 80080a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080aa:	d87f      	bhi.n	80081ac <HAL_TIM_ConfigClockSource+0x16c>
 80080ac:	2b70      	cmp	r3, #112	; 0x70
 80080ae:	d01a      	beq.n	80080e6 <HAL_TIM_ConfigClockSource+0xa6>
 80080b0:	2b70      	cmp	r3, #112	; 0x70
 80080b2:	d87b      	bhi.n	80081ac <HAL_TIM_ConfigClockSource+0x16c>
 80080b4:	2b60      	cmp	r3, #96	; 0x60
 80080b6:	d050      	beq.n	800815a <HAL_TIM_ConfigClockSource+0x11a>
 80080b8:	2b60      	cmp	r3, #96	; 0x60
 80080ba:	d877      	bhi.n	80081ac <HAL_TIM_ConfigClockSource+0x16c>
 80080bc:	2b50      	cmp	r3, #80	; 0x50
 80080be:	d03c      	beq.n	800813a <HAL_TIM_ConfigClockSource+0xfa>
 80080c0:	2b50      	cmp	r3, #80	; 0x50
 80080c2:	d873      	bhi.n	80081ac <HAL_TIM_ConfigClockSource+0x16c>
 80080c4:	2b40      	cmp	r3, #64	; 0x40
 80080c6:	d058      	beq.n	800817a <HAL_TIM_ConfigClockSource+0x13a>
 80080c8:	2b40      	cmp	r3, #64	; 0x40
 80080ca:	d86f      	bhi.n	80081ac <HAL_TIM_ConfigClockSource+0x16c>
 80080cc:	2b30      	cmp	r3, #48	; 0x30
 80080ce:	d064      	beq.n	800819a <HAL_TIM_ConfigClockSource+0x15a>
 80080d0:	2b30      	cmp	r3, #48	; 0x30
 80080d2:	d86b      	bhi.n	80081ac <HAL_TIM_ConfigClockSource+0x16c>
 80080d4:	2b20      	cmp	r3, #32
 80080d6:	d060      	beq.n	800819a <HAL_TIM_ConfigClockSource+0x15a>
 80080d8:	2b20      	cmp	r3, #32
 80080da:	d867      	bhi.n	80081ac <HAL_TIM_ConfigClockSource+0x16c>
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d05c      	beq.n	800819a <HAL_TIM_ConfigClockSource+0x15a>
 80080e0:	2b10      	cmp	r3, #16
 80080e2:	d05a      	beq.n	800819a <HAL_TIM_ConfigClockSource+0x15a>
 80080e4:	e062      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6818      	ldr	r0, [r3, #0]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	6899      	ldr	r1, [r3, #8]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	685a      	ldr	r2, [r3, #4]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	f000 fad9 	bl	80086ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008108:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	609a      	str	r2, [r3, #8]
      break;
 8008112:	e04f      	b.n	80081b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6818      	ldr	r0, [r3, #0]
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	6899      	ldr	r1, [r3, #8]
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	685a      	ldr	r2, [r3, #4]
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	f000 fac2 	bl	80086ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	689a      	ldr	r2, [r3, #8]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008136:	609a      	str	r2, [r3, #8]
      break;
 8008138:	e03c      	b.n	80081b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6818      	ldr	r0, [r3, #0]
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	6859      	ldr	r1, [r3, #4]
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	461a      	mov	r2, r3
 8008148:	f000 f980 	bl	800844c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2150      	movs	r1, #80	; 0x50
 8008152:	4618      	mov	r0, r3
 8008154:	f000 fa8f 	bl	8008676 <TIM_ITRx_SetConfig>
      break;
 8008158:	e02c      	b.n	80081b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6818      	ldr	r0, [r3, #0]
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	6859      	ldr	r1, [r3, #4]
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	461a      	mov	r2, r3
 8008168:	f000 f9dc 	bl	8008524 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2160      	movs	r1, #96	; 0x60
 8008172:	4618      	mov	r0, r3
 8008174:	f000 fa7f 	bl	8008676 <TIM_ITRx_SetConfig>
      break;
 8008178:	e01c      	b.n	80081b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6818      	ldr	r0, [r3, #0]
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	6859      	ldr	r1, [r3, #4]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	461a      	mov	r2, r3
 8008188:	f000 f960 	bl	800844c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2140      	movs	r1, #64	; 0x40
 8008192:	4618      	mov	r0, r3
 8008194:	f000 fa6f 	bl	8008676 <TIM_ITRx_SetConfig>
      break;
 8008198:	e00c      	b.n	80081b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4619      	mov	r1, r3
 80081a4:	4610      	mov	r0, r2
 80081a6:	f000 fa66 	bl	8008676 <TIM_ITRx_SetConfig>
      break;
 80081aa:	e003      	b.n	80081b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	73fb      	strb	r3, [r7, #15]
      break;
 80081b0:	e000      	b.n	80081b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80081b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	fffeff88 	.word	0xfffeff88

080081d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081dc:	bf00      	nop
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081f0:	bf00      	nop
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008218:	bf00      	nop
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4a40      	ldr	r2, [pc, #256]	; (8008338 <TIM_Base_SetConfig+0x114>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d013      	beq.n	8008264 <TIM_Base_SetConfig+0x40>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008242:	d00f      	beq.n	8008264 <TIM_Base_SetConfig+0x40>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a3d      	ldr	r2, [pc, #244]	; (800833c <TIM_Base_SetConfig+0x118>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d00b      	beq.n	8008264 <TIM_Base_SetConfig+0x40>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a3c      	ldr	r2, [pc, #240]	; (8008340 <TIM_Base_SetConfig+0x11c>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d007      	beq.n	8008264 <TIM_Base_SetConfig+0x40>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4a3b      	ldr	r2, [pc, #236]	; (8008344 <TIM_Base_SetConfig+0x120>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d003      	beq.n	8008264 <TIM_Base_SetConfig+0x40>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a3a      	ldr	r2, [pc, #232]	; (8008348 <TIM_Base_SetConfig+0x124>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d108      	bne.n	8008276 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800826a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	4313      	orrs	r3, r2
 8008274:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a2f      	ldr	r2, [pc, #188]	; (8008338 <TIM_Base_SetConfig+0x114>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d02b      	beq.n	80082d6 <TIM_Base_SetConfig+0xb2>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008284:	d027      	beq.n	80082d6 <TIM_Base_SetConfig+0xb2>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a2c      	ldr	r2, [pc, #176]	; (800833c <TIM_Base_SetConfig+0x118>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d023      	beq.n	80082d6 <TIM_Base_SetConfig+0xb2>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a2b      	ldr	r2, [pc, #172]	; (8008340 <TIM_Base_SetConfig+0x11c>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d01f      	beq.n	80082d6 <TIM_Base_SetConfig+0xb2>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a2a      	ldr	r2, [pc, #168]	; (8008344 <TIM_Base_SetConfig+0x120>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d01b      	beq.n	80082d6 <TIM_Base_SetConfig+0xb2>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a29      	ldr	r2, [pc, #164]	; (8008348 <TIM_Base_SetConfig+0x124>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d017      	beq.n	80082d6 <TIM_Base_SetConfig+0xb2>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a28      	ldr	r2, [pc, #160]	; (800834c <TIM_Base_SetConfig+0x128>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d013      	beq.n	80082d6 <TIM_Base_SetConfig+0xb2>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a27      	ldr	r2, [pc, #156]	; (8008350 <TIM_Base_SetConfig+0x12c>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d00f      	beq.n	80082d6 <TIM_Base_SetConfig+0xb2>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a26      	ldr	r2, [pc, #152]	; (8008354 <TIM_Base_SetConfig+0x130>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d00b      	beq.n	80082d6 <TIM_Base_SetConfig+0xb2>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a25      	ldr	r2, [pc, #148]	; (8008358 <TIM_Base_SetConfig+0x134>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d007      	beq.n	80082d6 <TIM_Base_SetConfig+0xb2>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a24      	ldr	r2, [pc, #144]	; (800835c <TIM_Base_SetConfig+0x138>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d003      	beq.n	80082d6 <TIM_Base_SetConfig+0xb2>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a23      	ldr	r2, [pc, #140]	; (8008360 <TIM_Base_SetConfig+0x13c>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d108      	bne.n	80082e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	68fa      	ldr	r2, [r7, #12]
 80082fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	689a      	ldr	r2, [r3, #8]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a0a      	ldr	r2, [pc, #40]	; (8008338 <TIM_Base_SetConfig+0x114>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d003      	beq.n	800831c <TIM_Base_SetConfig+0xf8>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a0c      	ldr	r2, [pc, #48]	; (8008348 <TIM_Base_SetConfig+0x124>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d103      	bne.n	8008324 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	691a      	ldr	r2, [r3, #16]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	615a      	str	r2, [r3, #20]
}
 800832a:	bf00      	nop
 800832c:	3714      	adds	r7, #20
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	40010000 	.word	0x40010000
 800833c:	40000400 	.word	0x40000400
 8008340:	40000800 	.word	0x40000800
 8008344:	40000c00 	.word	0x40000c00
 8008348:	40010400 	.word	0x40010400
 800834c:	40014000 	.word	0x40014000
 8008350:	40014400 	.word	0x40014400
 8008354:	40014800 	.word	0x40014800
 8008358:	40001800 	.word	0x40001800
 800835c:	40001c00 	.word	0x40001c00
 8008360:	40002000 	.word	0x40002000

08008364 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008364:	b480      	push	{r7}
 8008366:	b087      	sub	sp, #28
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6a1b      	ldr	r3, [r3, #32]
 8008376:	f023 0201 	bic.w	r2, r3, #1
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	699b      	ldr	r3, [r3, #24]
 8008382:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6a1b      	ldr	r3, [r3, #32]
 8008388:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	4a28      	ldr	r2, [pc, #160]	; (8008430 <TIM_TI1_SetConfig+0xcc>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d01b      	beq.n	80083ca <TIM_TI1_SetConfig+0x66>
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008398:	d017      	beq.n	80083ca <TIM_TI1_SetConfig+0x66>
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	4a25      	ldr	r2, [pc, #148]	; (8008434 <TIM_TI1_SetConfig+0xd0>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d013      	beq.n	80083ca <TIM_TI1_SetConfig+0x66>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	4a24      	ldr	r2, [pc, #144]	; (8008438 <TIM_TI1_SetConfig+0xd4>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d00f      	beq.n	80083ca <TIM_TI1_SetConfig+0x66>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	4a23      	ldr	r2, [pc, #140]	; (800843c <TIM_TI1_SetConfig+0xd8>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d00b      	beq.n	80083ca <TIM_TI1_SetConfig+0x66>
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	4a22      	ldr	r2, [pc, #136]	; (8008440 <TIM_TI1_SetConfig+0xdc>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d007      	beq.n	80083ca <TIM_TI1_SetConfig+0x66>
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	4a21      	ldr	r2, [pc, #132]	; (8008444 <TIM_TI1_SetConfig+0xe0>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d003      	beq.n	80083ca <TIM_TI1_SetConfig+0x66>
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	4a20      	ldr	r2, [pc, #128]	; (8008448 <TIM_TI1_SetConfig+0xe4>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d101      	bne.n	80083ce <TIM_TI1_SetConfig+0x6a>
 80083ca:	2301      	movs	r3, #1
 80083cc:	e000      	b.n	80083d0 <TIM_TI1_SetConfig+0x6c>
 80083ce:	2300      	movs	r3, #0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d008      	beq.n	80083e6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	f023 0303 	bic.w	r3, r3, #3
 80083da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80083dc:	697a      	ldr	r2, [r7, #20]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	617b      	str	r3, [r7, #20]
 80083e4:	e003      	b.n	80083ee <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	f043 0301 	orr.w	r3, r3, #1
 80083ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	011b      	lsls	r3, r3, #4
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	697a      	ldr	r2, [r7, #20]
 80083fe:	4313      	orrs	r3, r2
 8008400:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	f023 030a 	bic.w	r3, r3, #10
 8008408:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	f003 030a 	and.w	r3, r3, #10
 8008410:	693a      	ldr	r2, [r7, #16]
 8008412:	4313      	orrs	r3, r2
 8008414:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	697a      	ldr	r2, [r7, #20]
 800841a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	693a      	ldr	r2, [r7, #16]
 8008420:	621a      	str	r2, [r3, #32]
}
 8008422:	bf00      	nop
 8008424:	371c      	adds	r7, #28
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	40010000 	.word	0x40010000
 8008434:	40000400 	.word	0x40000400
 8008438:	40000800 	.word	0x40000800
 800843c:	40000c00 	.word	0x40000c00
 8008440:	40010400 	.word	0x40010400
 8008444:	40014000 	.word	0x40014000
 8008448:	40001800 	.word	0x40001800

0800844c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800844c:	b480      	push	{r7}
 800844e:	b087      	sub	sp, #28
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6a1b      	ldr	r3, [r3, #32]
 800845c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6a1b      	ldr	r3, [r3, #32]
 8008462:	f023 0201 	bic.w	r2, r3, #1
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	011b      	lsls	r3, r3, #4
 800847c:	693a      	ldr	r2, [r7, #16]
 800847e:	4313      	orrs	r3, r2
 8008480:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	f023 030a 	bic.w	r3, r3, #10
 8008488:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800848a:	697a      	ldr	r2, [r7, #20]
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	4313      	orrs	r3, r2
 8008490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	693a      	ldr	r2, [r7, #16]
 8008496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	697a      	ldr	r2, [r7, #20]
 800849c:	621a      	str	r2, [r3, #32]
}
 800849e:	bf00      	nop
 80084a0:	371c      	adds	r7, #28
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b087      	sub	sp, #28
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	60f8      	str	r0, [r7, #12]
 80084b2:	60b9      	str	r1, [r7, #8]
 80084b4:	607a      	str	r2, [r7, #4]
 80084b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6a1b      	ldr	r3, [r3, #32]
 80084bc:	f023 0210 	bic.w	r2, r3, #16
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6a1b      	ldr	r3, [r3, #32]
 80084ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	021b      	lsls	r3, r3, #8
 80084dc:	697a      	ldr	r2, [r7, #20]
 80084de:	4313      	orrs	r3, r2
 80084e0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	031b      	lsls	r3, r3, #12
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	697a      	ldr	r2, [r7, #20]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80084fc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	011b      	lsls	r3, r3, #4
 8008502:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008506:	693a      	ldr	r2, [r7, #16]
 8008508:	4313      	orrs	r3, r2
 800850a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	697a      	ldr	r2, [r7, #20]
 8008510:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	693a      	ldr	r2, [r7, #16]
 8008516:	621a      	str	r2, [r3, #32]
}
 8008518:	bf00      	nop
 800851a:	371c      	adds	r7, #28
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008524:	b480      	push	{r7}
 8008526:	b087      	sub	sp, #28
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6a1b      	ldr	r3, [r3, #32]
 8008534:	f023 0210 	bic.w	r2, r3, #16
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	699b      	ldr	r3, [r3, #24]
 8008540:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800854e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	031b      	lsls	r3, r3, #12
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	4313      	orrs	r3, r2
 8008558:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008560:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	011b      	lsls	r3, r3, #4
 8008566:	693a      	ldr	r2, [r7, #16]
 8008568:	4313      	orrs	r3, r2
 800856a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	693a      	ldr	r2, [r7, #16]
 8008576:	621a      	str	r2, [r3, #32]
}
 8008578:	bf00      	nop
 800857a:	371c      	adds	r7, #28
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008584:	b480      	push	{r7}
 8008586:	b087      	sub	sp, #28
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	607a      	str	r2, [r7, #4]
 8008590:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6a1b      	ldr	r3, [r3, #32]
 8008596:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	69db      	ldr	r3, [r3, #28]
 80085a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6a1b      	ldr	r3, [r3, #32]
 80085a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	f023 0303 	bic.w	r3, r3, #3
 80085b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80085b2:	697a      	ldr	r2, [r7, #20]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	011b      	lsls	r3, r3, #4
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	697a      	ldr	r2, [r7, #20]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80085d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	021b      	lsls	r3, r3, #8
 80085da:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80085de:	693a      	ldr	r2, [r7, #16]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	697a      	ldr	r2, [r7, #20]
 80085e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	693a      	ldr	r2, [r7, #16]
 80085ee:	621a      	str	r2, [r3, #32]
}
 80085f0:	bf00      	nop
 80085f2:	371c      	adds	r7, #28
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b087      	sub	sp, #28
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
 8008608:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6a1b      	ldr	r3, [r3, #32]
 800860e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6a1b      	ldr	r3, [r3, #32]
 8008620:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008628:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	021b      	lsls	r3, r3, #8
 800862e:	697a      	ldr	r2, [r7, #20]
 8008630:	4313      	orrs	r3, r2
 8008632:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800863a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	031b      	lsls	r3, r3, #12
 8008640:	b29b      	uxth	r3, r3
 8008642:	697a      	ldr	r2, [r7, #20]
 8008644:	4313      	orrs	r3, r2
 8008646:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800864e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	031b      	lsls	r3, r3, #12
 8008654:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	4313      	orrs	r3, r2
 800865c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	693a      	ldr	r2, [r7, #16]
 8008668:	621a      	str	r2, [r3, #32]
}
 800866a:	bf00      	nop
 800866c:	371c      	adds	r7, #28
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008676:	b480      	push	{r7}
 8008678:	b085      	sub	sp, #20
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800868c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800868e:	683a      	ldr	r2, [r7, #0]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4313      	orrs	r3, r2
 8008694:	f043 0307 	orr.w	r3, r3, #7
 8008698:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	609a      	str	r2, [r3, #8]
}
 80086a0:	bf00      	nop
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b087      	sub	sp, #28
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	607a      	str	r2, [r7, #4]
 80086b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	021a      	lsls	r2, r3, #8
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	431a      	orrs	r2, r3
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	697a      	ldr	r2, [r7, #20]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	697a      	ldr	r2, [r7, #20]
 80086de:	609a      	str	r2, [r3, #8]
}
 80086e0:	bf00      	nop
 80086e2:	371c      	adds	r7, #28
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d101      	bne.n	8008704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008700:	2302      	movs	r3, #2
 8008702:	e06d      	b.n	80087e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2202      	movs	r2, #2
 8008710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a30      	ldr	r2, [pc, #192]	; (80087ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d004      	beq.n	8008738 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a2f      	ldr	r2, [pc, #188]	; (80087f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d108      	bne.n	800874a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800873e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	4313      	orrs	r3, r2
 8008748:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008750:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	4313      	orrs	r3, r2
 800875a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a20      	ldr	r2, [pc, #128]	; (80087ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d022      	beq.n	80087b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008776:	d01d      	beq.n	80087b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a1d      	ldr	r2, [pc, #116]	; (80087f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d018      	beq.n	80087b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a1c      	ldr	r2, [pc, #112]	; (80087f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d013      	beq.n	80087b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a1a      	ldr	r2, [pc, #104]	; (80087fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d00e      	beq.n	80087b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a15      	ldr	r2, [pc, #84]	; (80087f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d009      	beq.n	80087b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a16      	ldr	r2, [pc, #88]	; (8008800 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d004      	beq.n	80087b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a15      	ldr	r2, [pc, #84]	; (8008804 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d10c      	bne.n	80087ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	68ba      	ldr	r2, [r7, #8]
 80087cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3714      	adds	r7, #20
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr
 80087ec:	40010000 	.word	0x40010000
 80087f0:	40010400 	.word	0x40010400
 80087f4:	40000400 	.word	0x40000400
 80087f8:	40000800 	.word	0x40000800
 80087fc:	40000c00 	.word	0x40000c00
 8008800:	40014000 	.word	0x40014000
 8008804:	40001800 	.word	0x40001800

08008808 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008810:	bf00      	nop
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008824:	bf00      	nop
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008838:	bf00      	nop
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d101      	bne.n	8008856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e040      	b.n	80088d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800885a:	2b00      	cmp	r3, #0
 800885c:	d106      	bne.n	800886c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f7f9 feb8 	bl	80025dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2224      	movs	r2, #36	; 0x24
 8008870:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f022 0201 	bic.w	r2, r2, #1
 8008880:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 f8c0 	bl	8008a08 <UART_SetConfig>
 8008888:	4603      	mov	r3, r0
 800888a:	2b01      	cmp	r3, #1
 800888c:	d101      	bne.n	8008892 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e022      	b.n	80088d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008896:	2b00      	cmp	r3, #0
 8008898:	d002      	beq.n	80088a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fb18 	bl	8008ed0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	685a      	ldr	r2, [r3, #4]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	689a      	ldr	r2, [r3, #8]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f042 0201 	orr.w	r2, r2, #1
 80088ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 fb9f 	bl	8009014 <UART_CheckIdleState>
 80088d6:	4603      	mov	r3, r0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3708      	adds	r7, #8
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b08a      	sub	sp, #40	; 0x28
 80088e4:	af02      	add	r7, sp, #8
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	603b      	str	r3, [r7, #0]
 80088ec:	4613      	mov	r3, r2
 80088ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088f4:	2b20      	cmp	r3, #32
 80088f6:	f040 8081 	bne.w	80089fc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d002      	beq.n	8008906 <HAL_UART_Transmit+0x26>
 8008900:	88fb      	ldrh	r3, [r7, #6]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d101      	bne.n	800890a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e079      	b.n	80089fe <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008910:	2b01      	cmp	r3, #1
 8008912:	d101      	bne.n	8008918 <HAL_UART_Transmit+0x38>
 8008914:	2302      	movs	r3, #2
 8008916:	e072      	b.n	80089fe <HAL_UART_Transmit+0x11e>
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2201      	movs	r2, #1
 800891c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2221      	movs	r2, #33	; 0x21
 800892c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800892e:	f7f9 ff51 	bl	80027d4 <HAL_GetTick>
 8008932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	88fa      	ldrh	r2, [r7, #6]
 8008938:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	88fa      	ldrh	r2, [r7, #6]
 8008940:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800894c:	d108      	bne.n	8008960 <HAL_UART_Transmit+0x80>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d104      	bne.n	8008960 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008956:	2300      	movs	r3, #0
 8008958:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	61bb      	str	r3, [r7, #24]
 800895e:	e003      	b.n	8008968 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008964:	2300      	movs	r3, #0
 8008966:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008970:	e02c      	b.n	80089cc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	2200      	movs	r2, #0
 800897a:	2180      	movs	r1, #128	; 0x80
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f000 fb92 	bl	80090a6 <UART_WaitOnFlagUntilTimeout>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d001      	beq.n	800898c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008988:	2303      	movs	r3, #3
 800898a:	e038      	b.n	80089fe <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10b      	bne.n	80089aa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	881b      	ldrh	r3, [r3, #0]
 8008996:	461a      	mov	r2, r3
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	3302      	adds	r3, #2
 80089a6:	61bb      	str	r3, [r7, #24]
 80089a8:	e007      	b.n	80089ba <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	781a      	ldrb	r2, [r3, #0]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	3301      	adds	r3, #1
 80089b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	3b01      	subs	r3, #1
 80089c4:	b29a      	uxth	r2, r3
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d1cc      	bne.n	8008972 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	2200      	movs	r2, #0
 80089e0:	2140      	movs	r1, #64	; 0x40
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f000 fb5f 	bl	80090a6 <UART_WaitOnFlagUntilTimeout>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d001      	beq.n	80089f2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e005      	b.n	80089fe <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2220      	movs	r2, #32
 80089f6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80089f8:	2300      	movs	r3, #0
 80089fa:	e000      	b.n	80089fe <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80089fc:	2302      	movs	r3, #2
  }
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3720      	adds	r7, #32
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
	...

08008a08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b088      	sub	sp, #32
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a10:	2300      	movs	r3, #0
 8008a12:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	689a      	ldr	r2, [r3, #8]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	431a      	orrs	r2, r3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	431a      	orrs	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	69db      	ldr	r3, [r3, #28]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	4ba6      	ldr	r3, [pc, #664]	; (8008ccc <UART_SetConfig+0x2c4>)
 8008a34:	4013      	ands	r3, r2
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	6812      	ldr	r2, [r2, #0]
 8008a3a:	6979      	ldr	r1, [r7, #20]
 8008a3c:	430b      	orrs	r3, r1
 8008a3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	68da      	ldr	r2, [r3, #12]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	430a      	orrs	r2, r1
 8008a54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	699b      	ldr	r3, [r3, #24]
 8008a5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6a1b      	ldr	r3, [r3, #32]
 8008a60:	697a      	ldr	r2, [r7, #20]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	697a      	ldr	r2, [r7, #20]
 8008a76:	430a      	orrs	r2, r1
 8008a78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a94      	ldr	r2, [pc, #592]	; (8008cd0 <UART_SetConfig+0x2c8>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d120      	bne.n	8008ac6 <UART_SetConfig+0xbe>
 8008a84:	4b93      	ldr	r3, [pc, #588]	; (8008cd4 <UART_SetConfig+0x2cc>)
 8008a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a8a:	f003 0303 	and.w	r3, r3, #3
 8008a8e:	2b03      	cmp	r3, #3
 8008a90:	d816      	bhi.n	8008ac0 <UART_SetConfig+0xb8>
 8008a92:	a201      	add	r2, pc, #4	; (adr r2, 8008a98 <UART_SetConfig+0x90>)
 8008a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a98:	08008aa9 	.word	0x08008aa9
 8008a9c:	08008ab5 	.word	0x08008ab5
 8008aa0:	08008aaf 	.word	0x08008aaf
 8008aa4:	08008abb 	.word	0x08008abb
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	77fb      	strb	r3, [r7, #31]
 8008aac:	e150      	b.n	8008d50 <UART_SetConfig+0x348>
 8008aae:	2302      	movs	r3, #2
 8008ab0:	77fb      	strb	r3, [r7, #31]
 8008ab2:	e14d      	b.n	8008d50 <UART_SetConfig+0x348>
 8008ab4:	2304      	movs	r3, #4
 8008ab6:	77fb      	strb	r3, [r7, #31]
 8008ab8:	e14a      	b.n	8008d50 <UART_SetConfig+0x348>
 8008aba:	2308      	movs	r3, #8
 8008abc:	77fb      	strb	r3, [r7, #31]
 8008abe:	e147      	b.n	8008d50 <UART_SetConfig+0x348>
 8008ac0:	2310      	movs	r3, #16
 8008ac2:	77fb      	strb	r3, [r7, #31]
 8008ac4:	e144      	b.n	8008d50 <UART_SetConfig+0x348>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a83      	ldr	r2, [pc, #524]	; (8008cd8 <UART_SetConfig+0x2d0>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d132      	bne.n	8008b36 <UART_SetConfig+0x12e>
 8008ad0:	4b80      	ldr	r3, [pc, #512]	; (8008cd4 <UART_SetConfig+0x2cc>)
 8008ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ad6:	f003 030c 	and.w	r3, r3, #12
 8008ada:	2b0c      	cmp	r3, #12
 8008adc:	d828      	bhi.n	8008b30 <UART_SetConfig+0x128>
 8008ade:	a201      	add	r2, pc, #4	; (adr r2, 8008ae4 <UART_SetConfig+0xdc>)
 8008ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae4:	08008b19 	.word	0x08008b19
 8008ae8:	08008b31 	.word	0x08008b31
 8008aec:	08008b31 	.word	0x08008b31
 8008af0:	08008b31 	.word	0x08008b31
 8008af4:	08008b25 	.word	0x08008b25
 8008af8:	08008b31 	.word	0x08008b31
 8008afc:	08008b31 	.word	0x08008b31
 8008b00:	08008b31 	.word	0x08008b31
 8008b04:	08008b1f 	.word	0x08008b1f
 8008b08:	08008b31 	.word	0x08008b31
 8008b0c:	08008b31 	.word	0x08008b31
 8008b10:	08008b31 	.word	0x08008b31
 8008b14:	08008b2b 	.word	0x08008b2b
 8008b18:	2300      	movs	r3, #0
 8008b1a:	77fb      	strb	r3, [r7, #31]
 8008b1c:	e118      	b.n	8008d50 <UART_SetConfig+0x348>
 8008b1e:	2302      	movs	r3, #2
 8008b20:	77fb      	strb	r3, [r7, #31]
 8008b22:	e115      	b.n	8008d50 <UART_SetConfig+0x348>
 8008b24:	2304      	movs	r3, #4
 8008b26:	77fb      	strb	r3, [r7, #31]
 8008b28:	e112      	b.n	8008d50 <UART_SetConfig+0x348>
 8008b2a:	2308      	movs	r3, #8
 8008b2c:	77fb      	strb	r3, [r7, #31]
 8008b2e:	e10f      	b.n	8008d50 <UART_SetConfig+0x348>
 8008b30:	2310      	movs	r3, #16
 8008b32:	77fb      	strb	r3, [r7, #31]
 8008b34:	e10c      	b.n	8008d50 <UART_SetConfig+0x348>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a68      	ldr	r2, [pc, #416]	; (8008cdc <UART_SetConfig+0x2d4>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d120      	bne.n	8008b82 <UART_SetConfig+0x17a>
 8008b40:	4b64      	ldr	r3, [pc, #400]	; (8008cd4 <UART_SetConfig+0x2cc>)
 8008b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b46:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008b4a:	2b30      	cmp	r3, #48	; 0x30
 8008b4c:	d013      	beq.n	8008b76 <UART_SetConfig+0x16e>
 8008b4e:	2b30      	cmp	r3, #48	; 0x30
 8008b50:	d814      	bhi.n	8008b7c <UART_SetConfig+0x174>
 8008b52:	2b20      	cmp	r3, #32
 8008b54:	d009      	beq.n	8008b6a <UART_SetConfig+0x162>
 8008b56:	2b20      	cmp	r3, #32
 8008b58:	d810      	bhi.n	8008b7c <UART_SetConfig+0x174>
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d002      	beq.n	8008b64 <UART_SetConfig+0x15c>
 8008b5e:	2b10      	cmp	r3, #16
 8008b60:	d006      	beq.n	8008b70 <UART_SetConfig+0x168>
 8008b62:	e00b      	b.n	8008b7c <UART_SetConfig+0x174>
 8008b64:	2300      	movs	r3, #0
 8008b66:	77fb      	strb	r3, [r7, #31]
 8008b68:	e0f2      	b.n	8008d50 <UART_SetConfig+0x348>
 8008b6a:	2302      	movs	r3, #2
 8008b6c:	77fb      	strb	r3, [r7, #31]
 8008b6e:	e0ef      	b.n	8008d50 <UART_SetConfig+0x348>
 8008b70:	2304      	movs	r3, #4
 8008b72:	77fb      	strb	r3, [r7, #31]
 8008b74:	e0ec      	b.n	8008d50 <UART_SetConfig+0x348>
 8008b76:	2308      	movs	r3, #8
 8008b78:	77fb      	strb	r3, [r7, #31]
 8008b7a:	e0e9      	b.n	8008d50 <UART_SetConfig+0x348>
 8008b7c:	2310      	movs	r3, #16
 8008b7e:	77fb      	strb	r3, [r7, #31]
 8008b80:	e0e6      	b.n	8008d50 <UART_SetConfig+0x348>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a56      	ldr	r2, [pc, #344]	; (8008ce0 <UART_SetConfig+0x2d8>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d120      	bne.n	8008bce <UART_SetConfig+0x1c6>
 8008b8c:	4b51      	ldr	r3, [pc, #324]	; (8008cd4 <UART_SetConfig+0x2cc>)
 8008b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008b96:	2bc0      	cmp	r3, #192	; 0xc0
 8008b98:	d013      	beq.n	8008bc2 <UART_SetConfig+0x1ba>
 8008b9a:	2bc0      	cmp	r3, #192	; 0xc0
 8008b9c:	d814      	bhi.n	8008bc8 <UART_SetConfig+0x1c0>
 8008b9e:	2b80      	cmp	r3, #128	; 0x80
 8008ba0:	d009      	beq.n	8008bb6 <UART_SetConfig+0x1ae>
 8008ba2:	2b80      	cmp	r3, #128	; 0x80
 8008ba4:	d810      	bhi.n	8008bc8 <UART_SetConfig+0x1c0>
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d002      	beq.n	8008bb0 <UART_SetConfig+0x1a8>
 8008baa:	2b40      	cmp	r3, #64	; 0x40
 8008bac:	d006      	beq.n	8008bbc <UART_SetConfig+0x1b4>
 8008bae:	e00b      	b.n	8008bc8 <UART_SetConfig+0x1c0>
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	77fb      	strb	r3, [r7, #31]
 8008bb4:	e0cc      	b.n	8008d50 <UART_SetConfig+0x348>
 8008bb6:	2302      	movs	r3, #2
 8008bb8:	77fb      	strb	r3, [r7, #31]
 8008bba:	e0c9      	b.n	8008d50 <UART_SetConfig+0x348>
 8008bbc:	2304      	movs	r3, #4
 8008bbe:	77fb      	strb	r3, [r7, #31]
 8008bc0:	e0c6      	b.n	8008d50 <UART_SetConfig+0x348>
 8008bc2:	2308      	movs	r3, #8
 8008bc4:	77fb      	strb	r3, [r7, #31]
 8008bc6:	e0c3      	b.n	8008d50 <UART_SetConfig+0x348>
 8008bc8:	2310      	movs	r3, #16
 8008bca:	77fb      	strb	r3, [r7, #31]
 8008bcc:	e0c0      	b.n	8008d50 <UART_SetConfig+0x348>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a44      	ldr	r2, [pc, #272]	; (8008ce4 <UART_SetConfig+0x2dc>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d125      	bne.n	8008c24 <UART_SetConfig+0x21c>
 8008bd8:	4b3e      	ldr	r3, [pc, #248]	; (8008cd4 <UART_SetConfig+0x2cc>)
 8008bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008be2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008be6:	d017      	beq.n	8008c18 <UART_SetConfig+0x210>
 8008be8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bec:	d817      	bhi.n	8008c1e <UART_SetConfig+0x216>
 8008bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bf2:	d00b      	beq.n	8008c0c <UART_SetConfig+0x204>
 8008bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bf8:	d811      	bhi.n	8008c1e <UART_SetConfig+0x216>
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d003      	beq.n	8008c06 <UART_SetConfig+0x1fe>
 8008bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c02:	d006      	beq.n	8008c12 <UART_SetConfig+0x20a>
 8008c04:	e00b      	b.n	8008c1e <UART_SetConfig+0x216>
 8008c06:	2300      	movs	r3, #0
 8008c08:	77fb      	strb	r3, [r7, #31]
 8008c0a:	e0a1      	b.n	8008d50 <UART_SetConfig+0x348>
 8008c0c:	2302      	movs	r3, #2
 8008c0e:	77fb      	strb	r3, [r7, #31]
 8008c10:	e09e      	b.n	8008d50 <UART_SetConfig+0x348>
 8008c12:	2304      	movs	r3, #4
 8008c14:	77fb      	strb	r3, [r7, #31]
 8008c16:	e09b      	b.n	8008d50 <UART_SetConfig+0x348>
 8008c18:	2308      	movs	r3, #8
 8008c1a:	77fb      	strb	r3, [r7, #31]
 8008c1c:	e098      	b.n	8008d50 <UART_SetConfig+0x348>
 8008c1e:	2310      	movs	r3, #16
 8008c20:	77fb      	strb	r3, [r7, #31]
 8008c22:	e095      	b.n	8008d50 <UART_SetConfig+0x348>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a2f      	ldr	r2, [pc, #188]	; (8008ce8 <UART_SetConfig+0x2e0>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d125      	bne.n	8008c7a <UART_SetConfig+0x272>
 8008c2e:	4b29      	ldr	r3, [pc, #164]	; (8008cd4 <UART_SetConfig+0x2cc>)
 8008c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008c38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c3c:	d017      	beq.n	8008c6e <UART_SetConfig+0x266>
 8008c3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c42:	d817      	bhi.n	8008c74 <UART_SetConfig+0x26c>
 8008c44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c48:	d00b      	beq.n	8008c62 <UART_SetConfig+0x25a>
 8008c4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c4e:	d811      	bhi.n	8008c74 <UART_SetConfig+0x26c>
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d003      	beq.n	8008c5c <UART_SetConfig+0x254>
 8008c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c58:	d006      	beq.n	8008c68 <UART_SetConfig+0x260>
 8008c5a:	e00b      	b.n	8008c74 <UART_SetConfig+0x26c>
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	77fb      	strb	r3, [r7, #31]
 8008c60:	e076      	b.n	8008d50 <UART_SetConfig+0x348>
 8008c62:	2302      	movs	r3, #2
 8008c64:	77fb      	strb	r3, [r7, #31]
 8008c66:	e073      	b.n	8008d50 <UART_SetConfig+0x348>
 8008c68:	2304      	movs	r3, #4
 8008c6a:	77fb      	strb	r3, [r7, #31]
 8008c6c:	e070      	b.n	8008d50 <UART_SetConfig+0x348>
 8008c6e:	2308      	movs	r3, #8
 8008c70:	77fb      	strb	r3, [r7, #31]
 8008c72:	e06d      	b.n	8008d50 <UART_SetConfig+0x348>
 8008c74:	2310      	movs	r3, #16
 8008c76:	77fb      	strb	r3, [r7, #31]
 8008c78:	e06a      	b.n	8008d50 <UART_SetConfig+0x348>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a1b      	ldr	r2, [pc, #108]	; (8008cec <UART_SetConfig+0x2e4>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d138      	bne.n	8008cf6 <UART_SetConfig+0x2ee>
 8008c84:	4b13      	ldr	r3, [pc, #76]	; (8008cd4 <UART_SetConfig+0x2cc>)
 8008c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c8a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008c8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c92:	d017      	beq.n	8008cc4 <UART_SetConfig+0x2bc>
 8008c94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c98:	d82a      	bhi.n	8008cf0 <UART_SetConfig+0x2e8>
 8008c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c9e:	d00b      	beq.n	8008cb8 <UART_SetConfig+0x2b0>
 8008ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ca4:	d824      	bhi.n	8008cf0 <UART_SetConfig+0x2e8>
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d003      	beq.n	8008cb2 <UART_SetConfig+0x2aa>
 8008caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cae:	d006      	beq.n	8008cbe <UART_SetConfig+0x2b6>
 8008cb0:	e01e      	b.n	8008cf0 <UART_SetConfig+0x2e8>
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	77fb      	strb	r3, [r7, #31]
 8008cb6:	e04b      	b.n	8008d50 <UART_SetConfig+0x348>
 8008cb8:	2302      	movs	r3, #2
 8008cba:	77fb      	strb	r3, [r7, #31]
 8008cbc:	e048      	b.n	8008d50 <UART_SetConfig+0x348>
 8008cbe:	2304      	movs	r3, #4
 8008cc0:	77fb      	strb	r3, [r7, #31]
 8008cc2:	e045      	b.n	8008d50 <UART_SetConfig+0x348>
 8008cc4:	2308      	movs	r3, #8
 8008cc6:	77fb      	strb	r3, [r7, #31]
 8008cc8:	e042      	b.n	8008d50 <UART_SetConfig+0x348>
 8008cca:	bf00      	nop
 8008ccc:	efff69f3 	.word	0xefff69f3
 8008cd0:	40011000 	.word	0x40011000
 8008cd4:	40023800 	.word	0x40023800
 8008cd8:	40004400 	.word	0x40004400
 8008cdc:	40004800 	.word	0x40004800
 8008ce0:	40004c00 	.word	0x40004c00
 8008ce4:	40005000 	.word	0x40005000
 8008ce8:	40011400 	.word	0x40011400
 8008cec:	40007800 	.word	0x40007800
 8008cf0:	2310      	movs	r3, #16
 8008cf2:	77fb      	strb	r3, [r7, #31]
 8008cf4:	e02c      	b.n	8008d50 <UART_SetConfig+0x348>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a72      	ldr	r2, [pc, #456]	; (8008ec4 <UART_SetConfig+0x4bc>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d125      	bne.n	8008d4c <UART_SetConfig+0x344>
 8008d00:	4b71      	ldr	r3, [pc, #452]	; (8008ec8 <UART_SetConfig+0x4c0>)
 8008d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008d0a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008d0e:	d017      	beq.n	8008d40 <UART_SetConfig+0x338>
 8008d10:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008d14:	d817      	bhi.n	8008d46 <UART_SetConfig+0x33e>
 8008d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d1a:	d00b      	beq.n	8008d34 <UART_SetConfig+0x32c>
 8008d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d20:	d811      	bhi.n	8008d46 <UART_SetConfig+0x33e>
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d003      	beq.n	8008d2e <UART_SetConfig+0x326>
 8008d26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d2a:	d006      	beq.n	8008d3a <UART_SetConfig+0x332>
 8008d2c:	e00b      	b.n	8008d46 <UART_SetConfig+0x33e>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	77fb      	strb	r3, [r7, #31]
 8008d32:	e00d      	b.n	8008d50 <UART_SetConfig+0x348>
 8008d34:	2302      	movs	r3, #2
 8008d36:	77fb      	strb	r3, [r7, #31]
 8008d38:	e00a      	b.n	8008d50 <UART_SetConfig+0x348>
 8008d3a:	2304      	movs	r3, #4
 8008d3c:	77fb      	strb	r3, [r7, #31]
 8008d3e:	e007      	b.n	8008d50 <UART_SetConfig+0x348>
 8008d40:	2308      	movs	r3, #8
 8008d42:	77fb      	strb	r3, [r7, #31]
 8008d44:	e004      	b.n	8008d50 <UART_SetConfig+0x348>
 8008d46:	2310      	movs	r3, #16
 8008d48:	77fb      	strb	r3, [r7, #31]
 8008d4a:	e001      	b.n	8008d50 <UART_SetConfig+0x348>
 8008d4c:	2310      	movs	r3, #16
 8008d4e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	69db      	ldr	r3, [r3, #28]
 8008d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d58:	d15b      	bne.n	8008e12 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008d5a:	7ffb      	ldrb	r3, [r7, #31]
 8008d5c:	2b08      	cmp	r3, #8
 8008d5e:	d828      	bhi.n	8008db2 <UART_SetConfig+0x3aa>
 8008d60:	a201      	add	r2, pc, #4	; (adr r2, 8008d68 <UART_SetConfig+0x360>)
 8008d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d66:	bf00      	nop
 8008d68:	08008d8d 	.word	0x08008d8d
 8008d6c:	08008d95 	.word	0x08008d95
 8008d70:	08008d9d 	.word	0x08008d9d
 8008d74:	08008db3 	.word	0x08008db3
 8008d78:	08008da3 	.word	0x08008da3
 8008d7c:	08008db3 	.word	0x08008db3
 8008d80:	08008db3 	.word	0x08008db3
 8008d84:	08008db3 	.word	0x08008db3
 8008d88:	08008dab 	.word	0x08008dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d8c:	f7fc fbbc 	bl	8005508 <HAL_RCC_GetPCLK1Freq>
 8008d90:	61b8      	str	r0, [r7, #24]
        break;
 8008d92:	e013      	b.n	8008dbc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d94:	f7fc fbcc 	bl	8005530 <HAL_RCC_GetPCLK2Freq>
 8008d98:	61b8      	str	r0, [r7, #24]
        break;
 8008d9a:	e00f      	b.n	8008dbc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d9c:	4b4b      	ldr	r3, [pc, #300]	; (8008ecc <UART_SetConfig+0x4c4>)
 8008d9e:	61bb      	str	r3, [r7, #24]
        break;
 8008da0:	e00c      	b.n	8008dbc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008da2:	f7fc fadf 	bl	8005364 <HAL_RCC_GetSysClockFreq>
 8008da6:	61b8      	str	r0, [r7, #24]
        break;
 8008da8:	e008      	b.n	8008dbc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dae:	61bb      	str	r3, [r7, #24]
        break;
 8008db0:	e004      	b.n	8008dbc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008db2:	2300      	movs	r3, #0
 8008db4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	77bb      	strb	r3, [r7, #30]
        break;
 8008dba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d074      	beq.n	8008eac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	005a      	lsls	r2, r3, #1
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	085b      	lsrs	r3, r3, #1
 8008dcc:	441a      	add	r2, r3
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dd6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	2b0f      	cmp	r3, #15
 8008ddc:	d916      	bls.n	8008e0c <UART_SetConfig+0x404>
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008de4:	d212      	bcs.n	8008e0c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	f023 030f 	bic.w	r3, r3, #15
 8008dee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	085b      	lsrs	r3, r3, #1
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	f003 0307 	and.w	r3, r3, #7
 8008dfa:	b29a      	uxth	r2, r3
 8008dfc:	89fb      	ldrh	r3, [r7, #14]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	89fa      	ldrh	r2, [r7, #14]
 8008e08:	60da      	str	r2, [r3, #12]
 8008e0a:	e04f      	b.n	8008eac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	77bb      	strb	r3, [r7, #30]
 8008e10:	e04c      	b.n	8008eac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e12:	7ffb      	ldrb	r3, [r7, #31]
 8008e14:	2b08      	cmp	r3, #8
 8008e16:	d828      	bhi.n	8008e6a <UART_SetConfig+0x462>
 8008e18:	a201      	add	r2, pc, #4	; (adr r2, 8008e20 <UART_SetConfig+0x418>)
 8008e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1e:	bf00      	nop
 8008e20:	08008e45 	.word	0x08008e45
 8008e24:	08008e4d 	.word	0x08008e4d
 8008e28:	08008e55 	.word	0x08008e55
 8008e2c:	08008e6b 	.word	0x08008e6b
 8008e30:	08008e5b 	.word	0x08008e5b
 8008e34:	08008e6b 	.word	0x08008e6b
 8008e38:	08008e6b 	.word	0x08008e6b
 8008e3c:	08008e6b 	.word	0x08008e6b
 8008e40:	08008e63 	.word	0x08008e63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e44:	f7fc fb60 	bl	8005508 <HAL_RCC_GetPCLK1Freq>
 8008e48:	61b8      	str	r0, [r7, #24]
        break;
 8008e4a:	e013      	b.n	8008e74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e4c:	f7fc fb70 	bl	8005530 <HAL_RCC_GetPCLK2Freq>
 8008e50:	61b8      	str	r0, [r7, #24]
        break;
 8008e52:	e00f      	b.n	8008e74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e54:	4b1d      	ldr	r3, [pc, #116]	; (8008ecc <UART_SetConfig+0x4c4>)
 8008e56:	61bb      	str	r3, [r7, #24]
        break;
 8008e58:	e00c      	b.n	8008e74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e5a:	f7fc fa83 	bl	8005364 <HAL_RCC_GetSysClockFreq>
 8008e5e:	61b8      	str	r0, [r7, #24]
        break;
 8008e60:	e008      	b.n	8008e74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e66:	61bb      	str	r3, [r7, #24]
        break;
 8008e68:	e004      	b.n	8008e74 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	77bb      	strb	r3, [r7, #30]
        break;
 8008e72:	bf00      	nop
    }

    if (pclk != 0U)
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d018      	beq.n	8008eac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	085a      	lsrs	r2, r3, #1
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	441a      	add	r2, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e8c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	2b0f      	cmp	r3, #15
 8008e92:	d909      	bls.n	8008ea8 <UART_SetConfig+0x4a0>
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e9a:	d205      	bcs.n	8008ea8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	60da      	str	r2, [r3, #12]
 8008ea6:	e001      	b.n	8008eac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008eb8:	7fbb      	ldrb	r3, [r7, #30]
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3720      	adds	r7, #32
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	40007c00 	.word	0x40007c00
 8008ec8:	40023800 	.word	0x40023800
 8008ecc:	00f42400 	.word	0x00f42400

08008ed0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008edc:	f003 0301 	and.w	r3, r3, #1
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00a      	beq.n	8008efa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	430a      	orrs	r2, r1
 8008ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efe:	f003 0302 	and.w	r3, r3, #2
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00a      	beq.n	8008f1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	430a      	orrs	r2, r1
 8008f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f20:	f003 0304 	and.w	r3, r3, #4
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d00a      	beq.n	8008f3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	430a      	orrs	r2, r1
 8008f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f42:	f003 0308 	and.w	r3, r3, #8
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00a      	beq.n	8008f60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	430a      	orrs	r2, r1
 8008f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f64:	f003 0310 	and.w	r3, r3, #16
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d00a      	beq.n	8008f82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	430a      	orrs	r2, r1
 8008f80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f86:	f003 0320 	and.w	r3, r3, #32
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d00a      	beq.n	8008fa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	430a      	orrs	r2, r1
 8008fa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d01a      	beq.n	8008fe6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	430a      	orrs	r2, r1
 8008fc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fce:	d10a      	bne.n	8008fe6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	430a      	orrs	r2, r1
 8008fe4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00a      	beq.n	8009008 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	430a      	orrs	r2, r1
 8009006:	605a      	str	r2, [r3, #4]
  }
}
 8009008:	bf00      	nop
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b086      	sub	sp, #24
 8009018:	af02      	add	r7, sp, #8
 800901a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009024:	f7f9 fbd6 	bl	80027d4 <HAL_GetTick>
 8009028:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f003 0308 	and.w	r3, r3, #8
 8009034:	2b08      	cmp	r3, #8
 8009036:	d10e      	bne.n	8009056 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009038:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800903c:	9300      	str	r3, [sp, #0]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2200      	movs	r2, #0
 8009042:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 f82d 	bl	80090a6 <UART_WaitOnFlagUntilTimeout>
 800904c:	4603      	mov	r3, r0
 800904e:	2b00      	cmp	r3, #0
 8009050:	d001      	beq.n	8009056 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009052:	2303      	movs	r3, #3
 8009054:	e023      	b.n	800909e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 0304 	and.w	r3, r3, #4
 8009060:	2b04      	cmp	r3, #4
 8009062:	d10e      	bne.n	8009082 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009064:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2200      	movs	r2, #0
 800906e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f817 	bl	80090a6 <UART_WaitOnFlagUntilTimeout>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d001      	beq.n	8009082 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800907e:	2303      	movs	r3, #3
 8009080:	e00d      	b.n	800909e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2220      	movs	r2, #32
 8009086:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2220      	movs	r2, #32
 800908c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3710      	adds	r7, #16
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b09c      	sub	sp, #112	; 0x70
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	60f8      	str	r0, [r7, #12]
 80090ae:	60b9      	str	r1, [r7, #8]
 80090b0:	603b      	str	r3, [r7, #0]
 80090b2:	4613      	mov	r3, r2
 80090b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090b6:	e0a5      	b.n	8009204 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090be:	f000 80a1 	beq.w	8009204 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090c2:	f7f9 fb87 	bl	80027d4 <HAL_GetTick>
 80090c6:	4602      	mov	r2, r0
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	1ad3      	subs	r3, r2, r3
 80090cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d302      	bcc.n	80090d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80090d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d13e      	bne.n	8009156 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090e0:	e853 3f00 	ldrex	r3, [r3]
 80090e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80090e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80090ec:	667b      	str	r3, [r7, #100]	; 0x64
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	461a      	mov	r2, r3
 80090f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090f8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80090fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80090fe:	e841 2300 	strex	r3, r2, [r1]
 8009102:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009106:	2b00      	cmp	r3, #0
 8009108:	d1e6      	bne.n	80090d8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	3308      	adds	r3, #8
 8009110:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009114:	e853 3f00 	ldrex	r3, [r3]
 8009118:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800911a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911c:	f023 0301 	bic.w	r3, r3, #1
 8009120:	663b      	str	r3, [r7, #96]	; 0x60
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	3308      	adds	r3, #8
 8009128:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800912a:	64ba      	str	r2, [r7, #72]	; 0x48
 800912c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009130:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009132:	e841 2300 	strex	r3, r2, [r1]
 8009136:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1e5      	bne.n	800910a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2220      	movs	r2, #32
 8009142:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2220      	movs	r2, #32
 8009148:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009152:	2303      	movs	r3, #3
 8009154:	e067      	b.n	8009226 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f003 0304 	and.w	r3, r3, #4
 8009160:	2b00      	cmp	r3, #0
 8009162:	d04f      	beq.n	8009204 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	69db      	ldr	r3, [r3, #28]
 800916a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800916e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009172:	d147      	bne.n	8009204 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800917c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009186:	e853 3f00 	ldrex	r3, [r3]
 800918a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800918c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009192:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	461a      	mov	r2, r3
 800919a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800919c:	637b      	str	r3, [r7, #52]	; 0x34
 800919e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091a4:	e841 2300 	strex	r3, r2, [r1]
 80091a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80091aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1e6      	bne.n	800917e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	3308      	adds	r3, #8
 80091b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	e853 3f00 	ldrex	r3, [r3]
 80091be:	613b      	str	r3, [r7, #16]
   return(result);
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	f023 0301 	bic.w	r3, r3, #1
 80091c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3308      	adds	r3, #8
 80091ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80091d0:	623a      	str	r2, [r7, #32]
 80091d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d4:	69f9      	ldr	r1, [r7, #28]
 80091d6:	6a3a      	ldr	r2, [r7, #32]
 80091d8:	e841 2300 	strex	r3, r2, [r1]
 80091dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1e5      	bne.n	80091b0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2220      	movs	r2, #32
 80091e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2220      	movs	r2, #32
 80091ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2220      	movs	r2, #32
 80091f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2200      	movs	r2, #0
 80091fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009200:	2303      	movs	r3, #3
 8009202:	e010      	b.n	8009226 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	69da      	ldr	r2, [r3, #28]
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	4013      	ands	r3, r2
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	429a      	cmp	r2, r3
 8009212:	bf0c      	ite	eq
 8009214:	2301      	moveq	r3, #1
 8009216:	2300      	movne	r3, #0
 8009218:	b2db      	uxtb	r3, r3
 800921a:	461a      	mov	r2, r3
 800921c:	79fb      	ldrb	r3, [r7, #7]
 800921e:	429a      	cmp	r2, r3
 8009220:	f43f af4a 	beq.w	80090b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3770      	adds	r7, #112	; 0x70
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
	...

08009230 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009230:	b084      	sub	sp, #16
 8009232:	b480      	push	{r7}
 8009234:	b085      	sub	sp, #20
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	f107 001c 	add.w	r0, r7, #28
 800923e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009242:	2300      	movs	r3, #0
 8009244:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009246:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009248:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800924a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800924c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800924e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009250:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009252:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009256:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800925a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	4313      	orrs	r3, r2
 8009260:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	685a      	ldr	r2, [r3, #4]
 8009266:	4b07      	ldr	r3, [pc, #28]	; (8009284 <SDMMC_Init+0x54>)
 8009268:	4013      	ands	r3, r2
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	431a      	orrs	r2, r3
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	3714      	adds	r7, #20
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	b004      	add	sp, #16
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	ffff8100 	.word	0xffff8100

08009288 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009296:	4618      	mov	r0, r3
 8009298:	370c      	adds	r7, #12
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr

080092a2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80092a2:	b480      	push	{r7}
 80092a4:	b083      	sub	sp, #12
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
 80092aa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2203      	movs	r2, #3
 80092d0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f003 0303 	and.w	r3, r3, #3
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009306:	2300      	movs	r3, #0
 8009308:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800931a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009320:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009326:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	4313      	orrs	r3, r2
 800932c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	68da      	ldr	r2, [r3, #12]
 8009332:	4b06      	ldr	r3, [pc, #24]	; (800934c <SDMMC_SendCommand+0x50>)
 8009334:	4013      	ands	r3, r2
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	431a      	orrs	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	fffff000 	.word	0xfffff000

08009350 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	b2db      	uxtb	r3, r3
}
 800935e:	4618      	mov	r0, r3
 8009360:	370c      	adds	r7, #12
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr

0800936a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800936a:	b480      	push	{r7}
 800936c:	b085      	sub	sp, #20
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
 8009372:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	3314      	adds	r3, #20
 8009378:	461a      	mov	r2, r3
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	4413      	add	r3, r2
 800937e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
}  
 8009384:	4618      	mov	r0, r3
 8009386:	3714      	adds	r7, #20
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009390:	b480      	push	{r7}
 8009392:	b085      	sub	sp, #20
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800939a:	2300      	movs	r3, #0
 800939c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	685a      	ldr	r2, [r3, #4]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80093b6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80093bc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80093c2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80093c4:	68fa      	ldr	r2, [r7, #12]
 80093c6:	4313      	orrs	r3, r2
 80093c8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ce:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	431a      	orrs	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80093da:	2300      	movs	r3, #0

}
 80093dc:	4618      	mov	r0, r3
 80093de:	3714      	adds	r7, #20
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b088      	sub	sp, #32
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80093f6:	2310      	movs	r3, #16
 80093f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80093fa:	2340      	movs	r3, #64	; 0x40
 80093fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093fe:	2300      	movs	r3, #0
 8009400:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009406:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009408:	f107 0308 	add.w	r3, r7, #8
 800940c:	4619      	mov	r1, r3
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f7ff ff74 	bl	80092fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009414:	f241 3288 	movw	r2, #5000	; 0x1388
 8009418:	2110      	movs	r1, #16
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fa1a 	bl	8009854 <SDMMC_GetCmdResp1>
 8009420:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009422:	69fb      	ldr	r3, [r7, #28]
}
 8009424:	4618      	mov	r0, r3
 8009426:	3720      	adds	r7, #32
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b088      	sub	sp, #32
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800943a:	2311      	movs	r3, #17
 800943c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800943e:	2340      	movs	r3, #64	; 0x40
 8009440:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009442:	2300      	movs	r3, #0
 8009444:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800944a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800944c:	f107 0308 	add.w	r3, r7, #8
 8009450:	4619      	mov	r1, r3
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f7ff ff52 	bl	80092fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009458:	f241 3288 	movw	r2, #5000	; 0x1388
 800945c:	2111      	movs	r1, #17
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 f9f8 	bl	8009854 <SDMMC_GetCmdResp1>
 8009464:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009466:	69fb      	ldr	r3, [r7, #28]
}
 8009468:	4618      	mov	r0, r3
 800946a:	3720      	adds	r7, #32
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b088      	sub	sp, #32
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800947e:	2312      	movs	r3, #18
 8009480:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009482:	2340      	movs	r3, #64	; 0x40
 8009484:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009486:	2300      	movs	r3, #0
 8009488:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800948a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800948e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009490:	f107 0308 	add.w	r3, r7, #8
 8009494:	4619      	mov	r1, r3
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f7ff ff30 	bl	80092fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800949c:	f241 3288 	movw	r2, #5000	; 0x1388
 80094a0:	2112      	movs	r1, #18
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 f9d6 	bl	8009854 <SDMMC_GetCmdResp1>
 80094a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094aa:	69fb      	ldr	r3, [r7, #28]
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3720      	adds	r7, #32
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b088      	sub	sp, #32
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80094c2:	2318      	movs	r3, #24
 80094c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094c6:	2340      	movs	r3, #64	; 0x40
 80094c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094ca:	2300      	movs	r3, #0
 80094cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094d4:	f107 0308 	add.w	r3, r7, #8
 80094d8:	4619      	mov	r1, r3
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f7ff ff0e 	bl	80092fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80094e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80094e4:	2118      	movs	r1, #24
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f9b4 	bl	8009854 <SDMMC_GetCmdResp1>
 80094ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094ee:	69fb      	ldr	r3, [r7, #28]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3720      	adds	r7, #32
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b088      	sub	sp, #32
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009506:	2319      	movs	r3, #25
 8009508:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800950a:	2340      	movs	r3, #64	; 0x40
 800950c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800950e:	2300      	movs	r3, #0
 8009510:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009516:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009518:	f107 0308 	add.w	r3, r7, #8
 800951c:	4619      	mov	r1, r3
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f7ff feec 	bl	80092fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009524:	f241 3288 	movw	r2, #5000	; 0x1388
 8009528:	2119      	movs	r1, #25
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 f992 	bl	8009854 <SDMMC_GetCmdResp1>
 8009530:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009532:	69fb      	ldr	r3, [r7, #28]
}
 8009534:	4618      	mov	r0, r3
 8009536:	3720      	adds	r7, #32
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b088      	sub	sp, #32
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009544:	2300      	movs	r3, #0
 8009546:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009548:	230c      	movs	r3, #12
 800954a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800954c:	2340      	movs	r3, #64	; 0x40
 800954e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009550:	2300      	movs	r3, #0
 8009552:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009558:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800955a:	f107 0308 	add.w	r3, r7, #8
 800955e:	4619      	mov	r1, r3
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f7ff fecb 	bl	80092fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009566:	4a05      	ldr	r2, [pc, #20]	; (800957c <SDMMC_CmdStopTransfer+0x40>)
 8009568:	210c      	movs	r1, #12
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 f972 	bl	8009854 <SDMMC_GetCmdResp1>
 8009570:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009572:	69fb      	ldr	r3, [r7, #28]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3720      	adds	r7, #32
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	05f5e100 	.word	0x05f5e100

08009580 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b08a      	sub	sp, #40	; 0x28
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009590:	2307      	movs	r3, #7
 8009592:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009594:	2340      	movs	r3, #64	; 0x40
 8009596:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009598:	2300      	movs	r3, #0
 800959a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800959c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095a0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095a2:	f107 0310 	add.w	r3, r7, #16
 80095a6:	4619      	mov	r1, r3
 80095a8:	68f8      	ldr	r0, [r7, #12]
 80095aa:	f7ff fea7 	bl	80092fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80095ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80095b2:	2107      	movs	r1, #7
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	f000 f94d 	bl	8009854 <SDMMC_GetCmdResp1>
 80095ba:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80095bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3728      	adds	r7, #40	; 0x28
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b088      	sub	sp, #32
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80095ce:	2300      	movs	r3, #0
 80095d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80095d2:	2300      	movs	r3, #0
 80095d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80095d6:	2300      	movs	r3, #0
 80095d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095da:	2300      	movs	r3, #0
 80095dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095e4:	f107 0308 	add.w	r3, r7, #8
 80095e8:	4619      	mov	r1, r3
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f7ff fe86 	bl	80092fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 fb67 	bl	8009cc4 <SDMMC_GetCmdError>
 80095f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095f8:	69fb      	ldr	r3, [r7, #28]
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3720      	adds	r7, #32
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b088      	sub	sp, #32
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800960a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800960e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009610:	2308      	movs	r3, #8
 8009612:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009614:	2340      	movs	r3, #64	; 0x40
 8009616:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009618:	2300      	movs	r3, #0
 800961a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800961c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009620:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009622:	f107 0308 	add.w	r3, r7, #8
 8009626:	4619      	mov	r1, r3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f7ff fe67 	bl	80092fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 fafa 	bl	8009c28 <SDMMC_GetCmdResp7>
 8009634:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009636:	69fb      	ldr	r3, [r7, #28]
}
 8009638:	4618      	mov	r0, r3
 800963a:	3720      	adds	r7, #32
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b088      	sub	sp, #32
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800964e:	2337      	movs	r3, #55	; 0x37
 8009650:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009652:	2340      	movs	r3, #64	; 0x40
 8009654:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009656:	2300      	movs	r3, #0
 8009658:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800965a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800965e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009660:	f107 0308 	add.w	r3, r7, #8
 8009664:	4619      	mov	r1, r3
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f7ff fe48 	bl	80092fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800966c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009670:	2137      	movs	r1, #55	; 0x37
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f8ee 	bl	8009854 <SDMMC_GetCmdResp1>
 8009678:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800967a:	69fb      	ldr	r3, [r7, #28]
}
 800967c:	4618      	mov	r0, r3
 800967e:	3720      	adds	r7, #32
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b088      	sub	sp, #32
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	4b0d      	ldr	r3, [pc, #52]	; (80096c8 <SDMMC_CmdAppOperCommand+0x44>)
 8009692:	4313      	orrs	r3, r2
 8009694:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009696:	2329      	movs	r3, #41	; 0x29
 8009698:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800969a:	2340      	movs	r3, #64	; 0x40
 800969c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800969e:	2300      	movs	r3, #0
 80096a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096a8:	f107 0308 	add.w	r3, r7, #8
 80096ac:	4619      	mov	r1, r3
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7ff fe24 	bl	80092fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 fa03 	bl	8009ac0 <SDMMC_GetCmdResp3>
 80096ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096bc:	69fb      	ldr	r3, [r7, #28]
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3720      	adds	r7, #32
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	80100000 	.word	0x80100000

080096cc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b088      	sub	sp, #32
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80096da:	2306      	movs	r3, #6
 80096dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80096de:	2340      	movs	r3, #64	; 0x40
 80096e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096e2:	2300      	movs	r3, #0
 80096e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096ec:	f107 0308 	add.w	r3, r7, #8
 80096f0:	4619      	mov	r1, r3
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f7ff fe02 	bl	80092fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80096f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80096fc:	2106      	movs	r1, #6
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 f8a8 	bl	8009854 <SDMMC_GetCmdResp1>
 8009704:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009706:	69fb      	ldr	r3, [r7, #28]
}
 8009708:	4618      	mov	r0, r3
 800970a:	3720      	adds	r7, #32
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b088      	sub	sp, #32
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009718:	2300      	movs	r3, #0
 800971a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800971c:	2333      	movs	r3, #51	; 0x33
 800971e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009720:	2340      	movs	r3, #64	; 0x40
 8009722:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009724:	2300      	movs	r3, #0
 8009726:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800972c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800972e:	f107 0308 	add.w	r3, r7, #8
 8009732:	4619      	mov	r1, r3
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7ff fde1 	bl	80092fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800973a:	f241 3288 	movw	r2, #5000	; 0x1388
 800973e:	2133      	movs	r1, #51	; 0x33
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 f887 	bl	8009854 <SDMMC_GetCmdResp1>
 8009746:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009748:	69fb      	ldr	r3, [r7, #28]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3720      	adds	r7, #32
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b088      	sub	sp, #32
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800975a:	2300      	movs	r3, #0
 800975c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800975e:	2302      	movs	r3, #2
 8009760:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009762:	23c0      	movs	r3, #192	; 0xc0
 8009764:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009766:	2300      	movs	r3, #0
 8009768:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800976a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800976e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009770:	f107 0308 	add.w	r3, r7, #8
 8009774:	4619      	mov	r1, r3
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f7ff fdc0 	bl	80092fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 f957 	bl	8009a30 <SDMMC_GetCmdResp2>
 8009782:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009784:	69fb      	ldr	r3, [r7, #28]
}
 8009786:	4618      	mov	r0, r3
 8009788:	3720      	adds	r7, #32
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}

0800978e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800978e:	b580      	push	{r7, lr}
 8009790:	b088      	sub	sp, #32
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
 8009796:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800979c:	2309      	movs	r3, #9
 800979e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80097a0:	23c0      	movs	r3, #192	; 0xc0
 80097a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80097a4:	2300      	movs	r3, #0
 80097a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80097a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097ae:	f107 0308 	add.w	r3, r7, #8
 80097b2:	4619      	mov	r1, r3
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f7ff fda1 	bl	80092fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 f938 	bl	8009a30 <SDMMC_GetCmdResp2>
 80097c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097c2:	69fb      	ldr	r3, [r7, #28]
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3720      	adds	r7, #32
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b088      	sub	sp, #32
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80097d6:	2300      	movs	r3, #0
 80097d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80097da:	2303      	movs	r3, #3
 80097dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80097de:	2340      	movs	r3, #64	; 0x40
 80097e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80097e2:	2300      	movs	r3, #0
 80097e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80097e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097ec:	f107 0308 	add.w	r3, r7, #8
 80097f0:	4619      	mov	r1, r3
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f7ff fd82 	bl	80092fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80097f8:	683a      	ldr	r2, [r7, #0]
 80097fa:	2103      	movs	r1, #3
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 f99d 	bl	8009b3c <SDMMC_GetCmdResp6>
 8009802:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009804:	69fb      	ldr	r3, [r7, #28]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3720      	adds	r7, #32
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b088      	sub	sp, #32
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
 8009816:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800981c:	230d      	movs	r3, #13
 800981e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009820:	2340      	movs	r3, #64	; 0x40
 8009822:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009824:	2300      	movs	r3, #0
 8009826:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800982c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800982e:	f107 0308 	add.w	r3, r7, #8
 8009832:	4619      	mov	r1, r3
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f7ff fd61 	bl	80092fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800983a:	f241 3288 	movw	r2, #5000	; 0x1388
 800983e:	210d      	movs	r1, #13
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 f807 	bl	8009854 <SDMMC_GetCmdResp1>
 8009846:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009848:	69fb      	ldr	r3, [r7, #28]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3720      	adds	r7, #32
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
	...

08009854 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b088      	sub	sp, #32
 8009858:	af00      	add	r7, sp, #0
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	460b      	mov	r3, r1
 800985e:	607a      	str	r2, [r7, #4]
 8009860:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009862:	4b70      	ldr	r3, [pc, #448]	; (8009a24 <SDMMC_GetCmdResp1+0x1d0>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a70      	ldr	r2, [pc, #448]	; (8009a28 <SDMMC_GetCmdResp1+0x1d4>)
 8009868:	fba2 2303 	umull	r2, r3, r2, r3
 800986c:	0a5a      	lsrs	r2, r3, #9
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	fb02 f303 	mul.w	r3, r2, r3
 8009874:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	1e5a      	subs	r2, r3, #1
 800987a:	61fa      	str	r2, [r7, #28]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d102      	bne.n	8009886 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009880:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009884:	e0c9      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800988a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009892:	2b00      	cmp	r3, #0
 8009894:	d0ef      	beq.n	8009876 <SDMMC_GetCmdResp1+0x22>
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1ea      	bne.n	8009876 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098a4:	f003 0304 	and.w	r3, r3, #4
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d004      	beq.n	80098b6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2204      	movs	r2, #4
 80098b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80098b2:	2304      	movs	r3, #4
 80098b4:	e0b1      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ba:	f003 0301 	and.w	r3, r3, #1
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d004      	beq.n	80098cc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2201      	movs	r2, #1
 80098c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80098c8:	2301      	movs	r3, #1
 80098ca:	e0a6      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	22c5      	movs	r2, #197	; 0xc5
 80098d0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f7ff fd3c 	bl	8009350 <SDMMC_GetCommandResponse>
 80098d8:	4603      	mov	r3, r0
 80098da:	461a      	mov	r2, r3
 80098dc:	7afb      	ldrb	r3, [r7, #11]
 80098de:	4293      	cmp	r3, r2
 80098e0:	d001      	beq.n	80098e6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80098e2:	2301      	movs	r3, #1
 80098e4:	e099      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80098e6:	2100      	movs	r1, #0
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f7ff fd3e 	bl	800936a <SDMMC_GetResponse>
 80098ee:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80098f0:	697a      	ldr	r2, [r7, #20]
 80098f2:	4b4e      	ldr	r3, [pc, #312]	; (8009a2c <SDMMC_GetCmdResp1+0x1d8>)
 80098f4:	4013      	ands	r3, r2
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d101      	bne.n	80098fe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80098fa:	2300      	movs	r3, #0
 80098fc:	e08d      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	2b00      	cmp	r3, #0
 8009902:	da02      	bge.n	800990a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009904:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009908:	e087      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009910:	2b00      	cmp	r3, #0
 8009912:	d001      	beq.n	8009918 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009914:	2340      	movs	r3, #64	; 0x40
 8009916:	e080      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800991e:	2b00      	cmp	r3, #0
 8009920:	d001      	beq.n	8009926 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009922:	2380      	movs	r3, #128	; 0x80
 8009924:	e079      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800992c:	2b00      	cmp	r3, #0
 800992e:	d002      	beq.n	8009936 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009930:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009934:	e071      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d002      	beq.n	8009946 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009940:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009944:	e069      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800994c:	2b00      	cmp	r3, #0
 800994e:	d002      	beq.n	8009956 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009954:	e061      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800995c:	2b00      	cmp	r3, #0
 800995e:	d002      	beq.n	8009966 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009960:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009964:	e059      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800996c:	2b00      	cmp	r3, #0
 800996e:	d002      	beq.n	8009976 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009974:	e051      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d002      	beq.n	8009986 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009984:	e049      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800998c:	2b00      	cmp	r3, #0
 800998e:	d002      	beq.n	8009996 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009990:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009994:	e041      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800999c:	2b00      	cmp	r3, #0
 800999e:	d002      	beq.n	80099a6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80099a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099a4:	e039      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d002      	beq.n	80099b6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80099b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80099b4:	e031      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d002      	beq.n	80099c6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80099c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80099c4:	e029      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d002      	beq.n	80099d6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80099d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80099d4:	e021      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d002      	beq.n	80099e6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80099e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80099e4:	e019      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d002      	beq.n	80099f6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80099f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80099f4:	e011      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d002      	beq.n	8009a06 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009a00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009a04:	e009      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	f003 0308 	and.w	r3, r3, #8
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d002      	beq.n	8009a16 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009a10:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009a14:	e001      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009a16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3720      	adds	r7, #32
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	20000000 	.word	0x20000000
 8009a28:	10624dd3 	.word	0x10624dd3
 8009a2c:	fdffe008 	.word	0xfdffe008

08009a30 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b085      	sub	sp, #20
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a38:	4b1f      	ldr	r3, [pc, #124]	; (8009ab8 <SDMMC_GetCmdResp2+0x88>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a1f      	ldr	r2, [pc, #124]	; (8009abc <SDMMC_GetCmdResp2+0x8c>)
 8009a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a42:	0a5b      	lsrs	r3, r3, #9
 8009a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a48:	fb02 f303 	mul.w	r3, r2, r3
 8009a4c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	1e5a      	subs	r2, r3, #1
 8009a52:	60fa      	str	r2, [r7, #12]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d102      	bne.n	8009a5e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009a58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a5c:	e026      	b.n	8009aac <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a62:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d0ef      	beq.n	8009a4e <SDMMC_GetCmdResp2+0x1e>
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d1ea      	bne.n	8009a4e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a7c:	f003 0304 	and.w	r3, r3, #4
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d004      	beq.n	8009a8e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2204      	movs	r2, #4
 8009a88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a8a:	2304      	movs	r3, #4
 8009a8c:	e00e      	b.n	8009aac <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a92:	f003 0301 	and.w	r3, r3, #1
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d004      	beq.n	8009aa4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e003      	b.n	8009aac <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	22c5      	movs	r2, #197	; 0xc5
 8009aa8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3714      	adds	r7, #20
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr
 8009ab8:	20000000 	.word	0x20000000
 8009abc:	10624dd3 	.word	0x10624dd3

08009ac0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b085      	sub	sp, #20
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009ac8:	4b1a      	ldr	r3, [pc, #104]	; (8009b34 <SDMMC_GetCmdResp3+0x74>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a1a      	ldr	r2, [pc, #104]	; (8009b38 <SDMMC_GetCmdResp3+0x78>)
 8009ace:	fba2 2303 	umull	r2, r3, r2, r3
 8009ad2:	0a5b      	lsrs	r3, r3, #9
 8009ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ad8:	fb02 f303 	mul.w	r3, r2, r3
 8009adc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	1e5a      	subs	r2, r3, #1
 8009ae2:	60fa      	str	r2, [r7, #12]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d102      	bne.n	8009aee <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ae8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009aec:	e01b      	b.n	8009b26 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009af2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d0ef      	beq.n	8009ade <SDMMC_GetCmdResp3+0x1e>
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1ea      	bne.n	8009ade <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b0c:	f003 0304 	and.w	r3, r3, #4
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d004      	beq.n	8009b1e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2204      	movs	r2, #4
 8009b18:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b1a:	2304      	movs	r3, #4
 8009b1c:	e003      	b.n	8009b26 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	22c5      	movs	r2, #197	; 0xc5
 8009b22:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3714      	adds	r7, #20
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr
 8009b32:	bf00      	nop
 8009b34:	20000000 	.word	0x20000000
 8009b38:	10624dd3 	.word	0x10624dd3

08009b3c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b088      	sub	sp, #32
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	460b      	mov	r3, r1
 8009b46:	607a      	str	r2, [r7, #4]
 8009b48:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009b4a:	4b35      	ldr	r3, [pc, #212]	; (8009c20 <SDMMC_GetCmdResp6+0xe4>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a35      	ldr	r2, [pc, #212]	; (8009c24 <SDMMC_GetCmdResp6+0xe8>)
 8009b50:	fba2 2303 	umull	r2, r3, r2, r3
 8009b54:	0a5b      	lsrs	r3, r3, #9
 8009b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b5a:	fb02 f303 	mul.w	r3, r2, r3
 8009b5e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009b60:	69fb      	ldr	r3, [r7, #28]
 8009b62:	1e5a      	subs	r2, r3, #1
 8009b64:	61fa      	str	r2, [r7, #28]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d102      	bne.n	8009b70 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b6e:	e052      	b.n	8009c16 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b74:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d0ef      	beq.n	8009b60 <SDMMC_GetCmdResp6+0x24>
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d1ea      	bne.n	8009b60 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b8e:	f003 0304 	and.w	r3, r3, #4
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d004      	beq.n	8009ba0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2204      	movs	r2, #4
 8009b9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b9c:	2304      	movs	r3, #4
 8009b9e:	e03a      	b.n	8009c16 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ba4:	f003 0301 	and.w	r3, r3, #1
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d004      	beq.n	8009bb6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e02f      	b.n	8009c16 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f7ff fbca 	bl	8009350 <SDMMC_GetCommandResponse>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	7afb      	ldrb	r3, [r7, #11]
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d001      	beq.n	8009bca <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e025      	b.n	8009c16 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	22c5      	movs	r2, #197	; 0xc5
 8009bce:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	68f8      	ldr	r0, [r7, #12]
 8009bd4:	f7ff fbc9 	bl	800936a <SDMMC_GetResponse>
 8009bd8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d106      	bne.n	8009bf2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	0c1b      	lsrs	r3, r3, #16
 8009be8:	b29a      	uxth	r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	e011      	b.n	8009c16 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d002      	beq.n	8009c02 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009bfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c00:	e009      	b.n	8009c16 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d002      	beq.n	8009c12 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c10:	e001      	b.n	8009c16 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009c12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3720      	adds	r7, #32
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	20000000 	.word	0x20000000
 8009c24:	10624dd3 	.word	0x10624dd3

08009c28 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009c30:	4b22      	ldr	r3, [pc, #136]	; (8009cbc <SDMMC_GetCmdResp7+0x94>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a22      	ldr	r2, [pc, #136]	; (8009cc0 <SDMMC_GetCmdResp7+0x98>)
 8009c36:	fba2 2303 	umull	r2, r3, r2, r3
 8009c3a:	0a5b      	lsrs	r3, r3, #9
 8009c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c40:	fb02 f303 	mul.w	r3, r2, r3
 8009c44:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	1e5a      	subs	r2, r3, #1
 8009c4a:	60fa      	str	r2, [r7, #12]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d102      	bne.n	8009c56 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c54:	e02c      	b.n	8009cb0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c5a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d0ef      	beq.n	8009c46 <SDMMC_GetCmdResp7+0x1e>
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d1ea      	bne.n	8009c46 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c74:	f003 0304 	and.w	r3, r3, #4
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d004      	beq.n	8009c86 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2204      	movs	r2, #4
 8009c80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c82:	2304      	movs	r3, #4
 8009c84:	e014      	b.n	8009cb0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c8a:	f003 0301 	and.w	r3, r3, #1
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d004      	beq.n	8009c9c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2201      	movs	r2, #1
 8009c96:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e009      	b.n	8009cb0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d002      	beq.n	8009cae <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2240      	movs	r2, #64	; 0x40
 8009cac:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009cae:	2300      	movs	r3, #0
  
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3714      	adds	r7, #20
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr
 8009cbc:	20000000 	.word	0x20000000
 8009cc0:	10624dd3 	.word	0x10624dd3

08009cc4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009ccc:	4b11      	ldr	r3, [pc, #68]	; (8009d14 <SDMMC_GetCmdError+0x50>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a11      	ldr	r2, [pc, #68]	; (8009d18 <SDMMC_GetCmdError+0x54>)
 8009cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8009cd6:	0a5b      	lsrs	r3, r3, #9
 8009cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cdc:	fb02 f303 	mul.w	r3, r2, r3
 8009ce0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	1e5a      	subs	r2, r3, #1
 8009ce6:	60fa      	str	r2, [r7, #12]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d102      	bne.n	8009cf2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009cec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009cf0:	e009      	b.n	8009d06 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d0f1      	beq.n	8009ce2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	22c5      	movs	r2, #197	; 0xc5
 8009d02:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3714      	adds	r7, #20
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop
 8009d14:	20000000 	.word	0x20000000
 8009d18:	10624dd3 	.word	0x10624dd3

08009d1c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009d20:	4904      	ldr	r1, [pc, #16]	; (8009d34 <MX_FATFS_Init+0x18>)
 8009d22:	4805      	ldr	r0, [pc, #20]	; (8009d38 <MX_FATFS_Init+0x1c>)
 8009d24:	f000 fa84 	bl	800a230 <FATFS_LinkDriver>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	4b03      	ldr	r3, [pc, #12]	; (8009d3c <MX_FATFS_Init+0x20>)
 8009d2e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009d30:	bf00      	nop
 8009d32:	bd80      	pop	{r7, pc}
 8009d34:	2000277c 	.word	0x2000277c
 8009d38:	0800ea5c 	.word	0x0800ea5c
 8009d3c:	20002778 	.word	0x20002778

08009d40 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009d46:	2300      	movs	r3, #0
 8009d48:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009d4a:	f000 f896 	bl	8009e7a <BSP_SD_IsDetected>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d001      	beq.n	8009d58 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009d54:	2302      	movs	r3, #2
 8009d56:	e012      	b.n	8009d7e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8009d58:	480b      	ldr	r0, [pc, #44]	; (8009d88 <BSP_SD_Init+0x48>)
 8009d5a:	f7fc fb5b 	bl	8006414 <HAL_SD_Init>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009d62:	79fb      	ldrb	r3, [r7, #7]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d109      	bne.n	8009d7c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8009d68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009d6c:	4806      	ldr	r0, [pc, #24]	; (8009d88 <BSP_SD_Init+0x48>)
 8009d6e:	f7fd f921 	bl	8006fb4 <HAL_SD_ConfigWideBusOperation>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d001      	beq.n	8009d7c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009d7c:	79fb      	ldrb	r3, [r7, #7]
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3708      	adds	r7, #8
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	2000049c 	.word	0x2000049c

08009d8c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	68ba      	ldr	r2, [r7, #8]
 8009da0:	68f9      	ldr	r1, [r7, #12]
 8009da2:	4806      	ldr	r0, [pc, #24]	; (8009dbc <BSP_SD_ReadBlocks_DMA+0x30>)
 8009da4:	f7fc fbee 	bl	8006584 <HAL_SD_ReadBlocks_DMA>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d001      	beq.n	8009db2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3718      	adds	r7, #24
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	2000049c 	.word	0x2000049c

08009dc0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b086      	sub	sp, #24
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	68ba      	ldr	r2, [r7, #8]
 8009dd4:	68f9      	ldr	r1, [r7, #12]
 8009dd6:	4806      	ldr	r0, [pc, #24]	; (8009df0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8009dd8:	f7fc fcb6 	bl	8006748 <HAL_SD_WriteBlocks_DMA>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d001      	beq.n	8009de6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3718      	adds	r7, #24
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	2000049c 	.word	0x2000049c

08009df4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009df8:	4805      	ldr	r0, [pc, #20]	; (8009e10 <BSP_SD_GetCardState+0x1c>)
 8009dfa:	f7fd f975 	bl	80070e8 <HAL_SD_GetCardState>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b04      	cmp	r3, #4
 8009e02:	bf14      	ite	ne
 8009e04:	2301      	movne	r3, #1
 8009e06:	2300      	moveq	r3, #0
 8009e08:	b2db      	uxtb	r3, r3
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	2000049c 	.word	0x2000049c

08009e14 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8009e1c:	6879      	ldr	r1, [r7, #4]
 8009e1e:	4803      	ldr	r0, [pc, #12]	; (8009e2c <BSP_SD_GetCardInfo+0x18>)
 8009e20:	f7fd f89c 	bl	8006f5c <HAL_SD_GetCardInfo>
}
 8009e24:	bf00      	nop
 8009e26:	3708      	adds	r7, #8
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	2000049c 	.word	0x2000049c

08009e30 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b082      	sub	sp, #8
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8009e38:	f000 f818 	bl	8009e6c <BSP_SD_AbortCallback>
}
 8009e3c:	bf00      	nop
 8009e3e:	3708      	adds	r7, #8
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b082      	sub	sp, #8
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009e4c:	f000 f98c 	bl	800a168 <BSP_SD_WriteCpltCallback>
}
 8009e50:	bf00      	nop
 8009e52:	3708      	adds	r7, #8
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009e60:	f000 f98e 	bl	800a180 <BSP_SD_ReadCpltCallback>
}
 8009e64:	bf00      	nop
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	af00      	add	r7, sp, #0

}
 8009e70:	bf00      	nop
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr

08009e7a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009e7a:	b480      	push	{r7}
 8009e7c:	b083      	sub	sp, #12
 8009e7e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009e80:	2301      	movs	r3, #1
 8009e82:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8009e84:	79fb      	ldrb	r3, [r7, #7]
 8009e86:	b2db      	uxtb	r3, r3
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	370c      	adds	r7, #12
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009e9c:	f7f8 fc9a 	bl	80027d4 <HAL_GetTick>
 8009ea0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8009ea2:	e006      	b.n	8009eb2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009ea4:	f7ff ffa6 	bl	8009df4 <BSP_SD_GetCardState>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d101      	bne.n	8009eb2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	e009      	b.n	8009ec6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8009eb2:	f7f8 fc8f 	bl	80027d4 <HAL_GetTick>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	1ad3      	subs	r3, r2, r3
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d8f0      	bhi.n	8009ea4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009ec2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
	...

08009ed0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009eda:	4b0b      	ldr	r3, [pc, #44]	; (8009f08 <SD_CheckStatus+0x38>)
 8009edc:	2201      	movs	r2, #1
 8009ede:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009ee0:	f7ff ff88 	bl	8009df4 <BSP_SD_GetCardState>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d107      	bne.n	8009efa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009eea:	4b07      	ldr	r3, [pc, #28]	; (8009f08 <SD_CheckStatus+0x38>)
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	f023 0301 	bic.w	r3, r3, #1
 8009ef4:	b2da      	uxtb	r2, r3
 8009ef6:	4b04      	ldr	r3, [pc, #16]	; (8009f08 <SD_CheckStatus+0x38>)
 8009ef8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009efa:	4b03      	ldr	r3, [pc, #12]	; (8009f08 <SD_CheckStatus+0x38>)
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	b2db      	uxtb	r3, r3
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3708      	adds	r7, #8
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	20000009 	.word	0x20000009

08009f0c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	4603      	mov	r3, r0
 8009f14:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009f16:	f7ff ff13 	bl	8009d40 <BSP_SD_Init>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d107      	bne.n	8009f30 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8009f20:	79fb      	ldrb	r3, [r7, #7]
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7ff ffd4 	bl	8009ed0 <SD_CheckStatus>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	4b04      	ldr	r3, [pc, #16]	; (8009f40 <SD_initialize+0x34>)
 8009f2e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009f30:	4b03      	ldr	r3, [pc, #12]	; (8009f40 <SD_initialize+0x34>)
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	b2db      	uxtb	r3, r3
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3708      	adds	r7, #8
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	20000009 	.word	0x20000009

08009f44 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009f4e:	79fb      	ldrb	r3, [r7, #7]
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7ff ffbd 	bl	8009ed0 <SD_CheckStatus>
 8009f56:	4603      	mov	r3, r0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3708      	adds	r7, #8
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b086      	sub	sp, #24
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60b9      	str	r1, [r7, #8]
 8009f68:	607a      	str	r2, [r7, #4]
 8009f6a:	603b      	str	r3, [r7, #0]
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009f74:	f247 5030 	movw	r0, #30000	; 0x7530
 8009f78:	f7ff ff8c 	bl	8009e94 <SD_CheckStatusWithTimeout>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	da01      	bge.n	8009f86 <SD_read+0x26>
  {
    return res;
 8009f82:	7dfb      	ldrb	r3, [r7, #23]
 8009f84:	e03b      	b.n	8009ffe <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009f86:	683a      	ldr	r2, [r7, #0]
 8009f88:	6879      	ldr	r1, [r7, #4]
 8009f8a:	68b8      	ldr	r0, [r7, #8]
 8009f8c:	f7ff fefe 	bl	8009d8c <BSP_SD_ReadBlocks_DMA>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d132      	bne.n	8009ffc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009f96:	4b1c      	ldr	r3, [pc, #112]	; (800a008 <SD_read+0xa8>)
 8009f98:	2200      	movs	r2, #0
 8009f9a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009f9c:	f7f8 fc1a 	bl	80027d4 <HAL_GetTick>
 8009fa0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009fa2:	bf00      	nop
 8009fa4:	4b18      	ldr	r3, [pc, #96]	; (800a008 <SD_read+0xa8>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d108      	bne.n	8009fbe <SD_read+0x5e>
 8009fac:	f7f8 fc12 	bl	80027d4 <HAL_GetTick>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	1ad3      	subs	r3, r2, r3
 8009fb6:	f247 522f 	movw	r2, #29999	; 0x752f
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d9f2      	bls.n	8009fa4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8009fbe:	4b12      	ldr	r3, [pc, #72]	; (800a008 <SD_read+0xa8>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d102      	bne.n	8009fcc <SD_read+0x6c>
      {
        res = RES_ERROR;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	75fb      	strb	r3, [r7, #23]
 8009fca:	e017      	b.n	8009ffc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8009fcc:	4b0e      	ldr	r3, [pc, #56]	; (800a008 <SD_read+0xa8>)
 8009fce:	2200      	movs	r2, #0
 8009fd0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009fd2:	f7f8 fbff 	bl	80027d4 <HAL_GetTick>
 8009fd6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009fd8:	e007      	b.n	8009fea <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009fda:	f7ff ff0b 	bl	8009df4 <BSP_SD_GetCardState>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d102      	bne.n	8009fea <SD_read+0x8a>
          {
            res = RES_OK;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009fe8:	e008      	b.n	8009ffc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009fea:	f7f8 fbf3 	bl	80027d4 <HAL_GetTick>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	1ad3      	subs	r3, r2, r3
 8009ff4:	f247 522f 	movw	r2, #29999	; 0x752f
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d9ee      	bls.n	8009fda <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3718      	adds	r7, #24
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	20002784 	.word	0x20002784

0800a00c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b086      	sub	sp, #24
 800a010:	af00      	add	r7, sp, #0
 800a012:	60b9      	str	r1, [r7, #8]
 800a014:	607a      	str	r2, [r7, #4]
 800a016:	603b      	str	r3, [r7, #0]
 800a018:	4603      	mov	r3, r0
 800a01a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800a020:	4b24      	ldr	r3, [pc, #144]	; (800a0b4 <SD_write+0xa8>)
 800a022:	2200      	movs	r2, #0
 800a024:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a026:	f247 5030 	movw	r0, #30000	; 0x7530
 800a02a:	f7ff ff33 	bl	8009e94 <SD_CheckStatusWithTimeout>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	da01      	bge.n	800a038 <SD_write+0x2c>
  {
    return res;
 800a034:	7dfb      	ldrb	r3, [r7, #23]
 800a036:	e038      	b.n	800a0aa <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a038:	683a      	ldr	r2, [r7, #0]
 800a03a:	6879      	ldr	r1, [r7, #4]
 800a03c:	68b8      	ldr	r0, [r7, #8]
 800a03e:	f7ff febf 	bl	8009dc0 <BSP_SD_WriteBlocks_DMA>
 800a042:	4603      	mov	r3, r0
 800a044:	2b00      	cmp	r3, #0
 800a046:	d12f      	bne.n	800a0a8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800a048:	f7f8 fbc4 	bl	80027d4 <HAL_GetTick>
 800a04c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a04e:	bf00      	nop
 800a050:	4b18      	ldr	r3, [pc, #96]	; (800a0b4 <SD_write+0xa8>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d108      	bne.n	800a06a <SD_write+0x5e>
 800a058:	f7f8 fbbc 	bl	80027d4 <HAL_GetTick>
 800a05c:	4602      	mov	r2, r0
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	1ad3      	subs	r3, r2, r3
 800a062:	f247 522f 	movw	r2, #29999	; 0x752f
 800a066:	4293      	cmp	r3, r2
 800a068:	d9f2      	bls.n	800a050 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800a06a:	4b12      	ldr	r3, [pc, #72]	; (800a0b4 <SD_write+0xa8>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d102      	bne.n	800a078 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	75fb      	strb	r3, [r7, #23]
 800a076:	e017      	b.n	800a0a8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800a078:	4b0e      	ldr	r3, [pc, #56]	; (800a0b4 <SD_write+0xa8>)
 800a07a:	2200      	movs	r2, #0
 800a07c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a07e:	f7f8 fba9 	bl	80027d4 <HAL_GetTick>
 800a082:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a084:	e007      	b.n	800a096 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a086:	f7ff feb5 	bl	8009df4 <BSP_SD_GetCardState>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d102      	bne.n	800a096 <SD_write+0x8a>
          {
            res = RES_OK;
 800a090:	2300      	movs	r3, #0
 800a092:	75fb      	strb	r3, [r7, #23]
            break;
 800a094:	e008      	b.n	800a0a8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a096:	f7f8 fb9d 	bl	80027d4 <HAL_GetTick>
 800a09a:	4602      	mov	r2, r0
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	1ad3      	subs	r3, r2, r3
 800a0a0:	f247 522f 	movw	r2, #29999	; 0x752f
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d9ee      	bls.n	800a086 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800a0a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3718      	adds	r7, #24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	20002780 	.word	0x20002780

0800a0b8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b08c      	sub	sp, #48	; 0x30
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	4603      	mov	r3, r0
 800a0c0:	603a      	str	r2, [r7, #0]
 800a0c2:	71fb      	strb	r3, [r7, #7]
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a0ce:	4b25      	ldr	r3, [pc, #148]	; (800a164 <SD_ioctl+0xac>)
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	f003 0301 	and.w	r3, r3, #1
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d001      	beq.n	800a0e0 <SD_ioctl+0x28>
 800a0dc:	2303      	movs	r3, #3
 800a0de:	e03c      	b.n	800a15a <SD_ioctl+0xa2>

  switch (cmd)
 800a0e0:	79bb      	ldrb	r3, [r7, #6]
 800a0e2:	2b03      	cmp	r3, #3
 800a0e4:	d834      	bhi.n	800a150 <SD_ioctl+0x98>
 800a0e6:	a201      	add	r2, pc, #4	; (adr r2, 800a0ec <SD_ioctl+0x34>)
 800a0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ec:	0800a0fd 	.word	0x0800a0fd
 800a0f0:	0800a105 	.word	0x0800a105
 800a0f4:	0800a11d 	.word	0x0800a11d
 800a0f8:	0800a137 	.word	0x0800a137
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a102:	e028      	b.n	800a156 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a104:	f107 030c 	add.w	r3, r7, #12
 800a108:	4618      	mov	r0, r3
 800a10a:	f7ff fe83 	bl	8009e14 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a10e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a114:	2300      	movs	r3, #0
 800a116:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a11a:	e01c      	b.n	800a156 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a11c:	f107 030c 	add.w	r3, r7, #12
 800a120:	4618      	mov	r0, r3
 800a122:	f7ff fe77 	bl	8009e14 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a128:	b29a      	uxth	r2, r3
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a12e:	2300      	movs	r3, #0
 800a130:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a134:	e00f      	b.n	800a156 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a136:	f107 030c 	add.w	r3, r7, #12
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7ff fe6a 	bl	8009e14 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a142:	0a5a      	lsrs	r2, r3, #9
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a148:	2300      	movs	r3, #0
 800a14a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a14e:	e002      	b.n	800a156 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a150:	2304      	movs	r3, #4
 800a152:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a156:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3730      	adds	r7, #48	; 0x30
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	20000009 	.word	0x20000009

0800a168 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a168:	b480      	push	{r7}
 800a16a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800a16c:	4b03      	ldr	r3, [pc, #12]	; (800a17c <BSP_SD_WriteCpltCallback+0x14>)
 800a16e:	2201      	movs	r2, #1
 800a170:	601a      	str	r2, [r3, #0]
}
 800a172:	bf00      	nop
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr
 800a17c:	20002780 	.word	0x20002780

0800a180 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a180:	b480      	push	{r7}
 800a182:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800a184:	4b03      	ldr	r3, [pc, #12]	; (800a194 <BSP_SD_ReadCpltCallback+0x14>)
 800a186:	2201      	movs	r2, #1
 800a188:	601a      	str	r2, [r3, #0]
}
 800a18a:	bf00      	nop
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr
 800a194:	20002784 	.word	0x20002784

0800a198 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a198:	b480      	push	{r7}
 800a19a:	b087      	sub	sp, #28
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	4613      	mov	r3, r2
 800a1a4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a1ae:	4b1f      	ldr	r3, [pc, #124]	; (800a22c <FATFS_LinkDriverEx+0x94>)
 800a1b0:	7a5b      	ldrb	r3, [r3, #9]
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d131      	bne.n	800a21c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a1b8:	4b1c      	ldr	r3, [pc, #112]	; (800a22c <FATFS_LinkDriverEx+0x94>)
 800a1ba:	7a5b      	ldrb	r3, [r3, #9]
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	461a      	mov	r2, r3
 800a1c0:	4b1a      	ldr	r3, [pc, #104]	; (800a22c <FATFS_LinkDriverEx+0x94>)
 800a1c2:	2100      	movs	r1, #0
 800a1c4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a1c6:	4b19      	ldr	r3, [pc, #100]	; (800a22c <FATFS_LinkDriverEx+0x94>)
 800a1c8:	7a5b      	ldrb	r3, [r3, #9]
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	4a17      	ldr	r2, [pc, #92]	; (800a22c <FATFS_LinkDriverEx+0x94>)
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	4413      	add	r3, r2
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a1d6:	4b15      	ldr	r3, [pc, #84]	; (800a22c <FATFS_LinkDriverEx+0x94>)
 800a1d8:	7a5b      	ldrb	r3, [r3, #9]
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	461a      	mov	r2, r3
 800a1de:	4b13      	ldr	r3, [pc, #76]	; (800a22c <FATFS_LinkDriverEx+0x94>)
 800a1e0:	4413      	add	r3, r2
 800a1e2:	79fa      	ldrb	r2, [r7, #7]
 800a1e4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a1e6:	4b11      	ldr	r3, [pc, #68]	; (800a22c <FATFS_LinkDriverEx+0x94>)
 800a1e8:	7a5b      	ldrb	r3, [r3, #9]
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	1c5a      	adds	r2, r3, #1
 800a1ee:	b2d1      	uxtb	r1, r2
 800a1f0:	4a0e      	ldr	r2, [pc, #56]	; (800a22c <FATFS_LinkDriverEx+0x94>)
 800a1f2:	7251      	strb	r1, [r2, #9]
 800a1f4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a1f6:	7dbb      	ldrb	r3, [r7, #22]
 800a1f8:	3330      	adds	r3, #48	; 0x30
 800a1fa:	b2da      	uxtb	r2, r3
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	3301      	adds	r3, #1
 800a204:	223a      	movs	r2, #58	; 0x3a
 800a206:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	3302      	adds	r3, #2
 800a20c:	222f      	movs	r2, #47	; 0x2f
 800a20e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	3303      	adds	r3, #3
 800a214:	2200      	movs	r2, #0
 800a216:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a218:	2300      	movs	r3, #0
 800a21a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a21c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a21e:	4618      	mov	r0, r3
 800a220:	371c      	adds	r7, #28
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr
 800a22a:	bf00      	nop
 800a22c:	20002788 	.word	0x20002788

0800a230 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a23a:	2200      	movs	r2, #0
 800a23c:	6839      	ldr	r1, [r7, #0]
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f7ff ffaa 	bl	800a198 <FATFS_LinkDriverEx>
 800a244:	4603      	mov	r3, r0
}
 800a246:	4618      	mov	r0, r3
 800a248:	3708      	adds	r7, #8
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
	...

0800a250 <__errno>:
 800a250:	4b01      	ldr	r3, [pc, #4]	; (800a258 <__errno+0x8>)
 800a252:	6818      	ldr	r0, [r3, #0]
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop
 800a258:	2000000c 	.word	0x2000000c

0800a25c <__libc_init_array>:
 800a25c:	b570      	push	{r4, r5, r6, lr}
 800a25e:	4d0d      	ldr	r5, [pc, #52]	; (800a294 <__libc_init_array+0x38>)
 800a260:	4c0d      	ldr	r4, [pc, #52]	; (800a298 <__libc_init_array+0x3c>)
 800a262:	1b64      	subs	r4, r4, r5
 800a264:	10a4      	asrs	r4, r4, #2
 800a266:	2600      	movs	r6, #0
 800a268:	42a6      	cmp	r6, r4
 800a26a:	d109      	bne.n	800a280 <__libc_init_array+0x24>
 800a26c:	4d0b      	ldr	r5, [pc, #44]	; (800a29c <__libc_init_array+0x40>)
 800a26e:	4c0c      	ldr	r4, [pc, #48]	; (800a2a0 <__libc_init_array+0x44>)
 800a270:	f004 fb9c 	bl	800e9ac <_init>
 800a274:	1b64      	subs	r4, r4, r5
 800a276:	10a4      	asrs	r4, r4, #2
 800a278:	2600      	movs	r6, #0
 800a27a:	42a6      	cmp	r6, r4
 800a27c:	d105      	bne.n	800a28a <__libc_init_array+0x2e>
 800a27e:	bd70      	pop	{r4, r5, r6, pc}
 800a280:	f855 3b04 	ldr.w	r3, [r5], #4
 800a284:	4798      	blx	r3
 800a286:	3601      	adds	r6, #1
 800a288:	e7ee      	b.n	800a268 <__libc_init_array+0xc>
 800a28a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a28e:	4798      	blx	r3
 800a290:	3601      	adds	r6, #1
 800a292:	e7f2      	b.n	800a27a <__libc_init_array+0x1e>
 800a294:	0800ef24 	.word	0x0800ef24
 800a298:	0800ef24 	.word	0x0800ef24
 800a29c:	0800ef24 	.word	0x0800ef24
 800a2a0:	0800ef28 	.word	0x0800ef28

0800a2a4 <malloc>:
 800a2a4:	4b02      	ldr	r3, [pc, #8]	; (800a2b0 <malloc+0xc>)
 800a2a6:	4601      	mov	r1, r0
 800a2a8:	6818      	ldr	r0, [r3, #0]
 800a2aa:	f000 b885 	b.w	800a3b8 <_malloc_r>
 800a2ae:	bf00      	nop
 800a2b0:	2000000c 	.word	0x2000000c

0800a2b4 <memcpy>:
 800a2b4:	440a      	add	r2, r1
 800a2b6:	4291      	cmp	r1, r2
 800a2b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a2bc:	d100      	bne.n	800a2c0 <memcpy+0xc>
 800a2be:	4770      	bx	lr
 800a2c0:	b510      	push	{r4, lr}
 800a2c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2ca:	4291      	cmp	r1, r2
 800a2cc:	d1f9      	bne.n	800a2c2 <memcpy+0xe>
 800a2ce:	bd10      	pop	{r4, pc}

0800a2d0 <memset>:
 800a2d0:	4402      	add	r2, r0
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d100      	bne.n	800a2da <memset+0xa>
 800a2d8:	4770      	bx	lr
 800a2da:	f803 1b01 	strb.w	r1, [r3], #1
 800a2de:	e7f9      	b.n	800a2d4 <memset+0x4>

0800a2e0 <_free_r>:
 800a2e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2e2:	2900      	cmp	r1, #0
 800a2e4:	d044      	beq.n	800a370 <_free_r+0x90>
 800a2e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2ea:	9001      	str	r0, [sp, #4]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f1a1 0404 	sub.w	r4, r1, #4
 800a2f2:	bfb8      	it	lt
 800a2f4:	18e4      	addlt	r4, r4, r3
 800a2f6:	f003 fa21 	bl	800d73c <__malloc_lock>
 800a2fa:	4a1e      	ldr	r2, [pc, #120]	; (800a374 <_free_r+0x94>)
 800a2fc:	9801      	ldr	r0, [sp, #4]
 800a2fe:	6813      	ldr	r3, [r2, #0]
 800a300:	b933      	cbnz	r3, 800a310 <_free_r+0x30>
 800a302:	6063      	str	r3, [r4, #4]
 800a304:	6014      	str	r4, [r2, #0]
 800a306:	b003      	add	sp, #12
 800a308:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a30c:	f003 ba1c 	b.w	800d748 <__malloc_unlock>
 800a310:	42a3      	cmp	r3, r4
 800a312:	d908      	bls.n	800a326 <_free_r+0x46>
 800a314:	6825      	ldr	r5, [r4, #0]
 800a316:	1961      	adds	r1, r4, r5
 800a318:	428b      	cmp	r3, r1
 800a31a:	bf01      	itttt	eq
 800a31c:	6819      	ldreq	r1, [r3, #0]
 800a31e:	685b      	ldreq	r3, [r3, #4]
 800a320:	1949      	addeq	r1, r1, r5
 800a322:	6021      	streq	r1, [r4, #0]
 800a324:	e7ed      	b.n	800a302 <_free_r+0x22>
 800a326:	461a      	mov	r2, r3
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	b10b      	cbz	r3, 800a330 <_free_r+0x50>
 800a32c:	42a3      	cmp	r3, r4
 800a32e:	d9fa      	bls.n	800a326 <_free_r+0x46>
 800a330:	6811      	ldr	r1, [r2, #0]
 800a332:	1855      	adds	r5, r2, r1
 800a334:	42a5      	cmp	r5, r4
 800a336:	d10b      	bne.n	800a350 <_free_r+0x70>
 800a338:	6824      	ldr	r4, [r4, #0]
 800a33a:	4421      	add	r1, r4
 800a33c:	1854      	adds	r4, r2, r1
 800a33e:	42a3      	cmp	r3, r4
 800a340:	6011      	str	r1, [r2, #0]
 800a342:	d1e0      	bne.n	800a306 <_free_r+0x26>
 800a344:	681c      	ldr	r4, [r3, #0]
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	6053      	str	r3, [r2, #4]
 800a34a:	4421      	add	r1, r4
 800a34c:	6011      	str	r1, [r2, #0]
 800a34e:	e7da      	b.n	800a306 <_free_r+0x26>
 800a350:	d902      	bls.n	800a358 <_free_r+0x78>
 800a352:	230c      	movs	r3, #12
 800a354:	6003      	str	r3, [r0, #0]
 800a356:	e7d6      	b.n	800a306 <_free_r+0x26>
 800a358:	6825      	ldr	r5, [r4, #0]
 800a35a:	1961      	adds	r1, r4, r5
 800a35c:	428b      	cmp	r3, r1
 800a35e:	bf04      	itt	eq
 800a360:	6819      	ldreq	r1, [r3, #0]
 800a362:	685b      	ldreq	r3, [r3, #4]
 800a364:	6063      	str	r3, [r4, #4]
 800a366:	bf04      	itt	eq
 800a368:	1949      	addeq	r1, r1, r5
 800a36a:	6021      	streq	r1, [r4, #0]
 800a36c:	6054      	str	r4, [r2, #4]
 800a36e:	e7ca      	b.n	800a306 <_free_r+0x26>
 800a370:	b003      	add	sp, #12
 800a372:	bd30      	pop	{r4, r5, pc}
 800a374:	20002794 	.word	0x20002794

0800a378 <sbrk_aligned>:
 800a378:	b570      	push	{r4, r5, r6, lr}
 800a37a:	4e0e      	ldr	r6, [pc, #56]	; (800a3b4 <sbrk_aligned+0x3c>)
 800a37c:	460c      	mov	r4, r1
 800a37e:	6831      	ldr	r1, [r6, #0]
 800a380:	4605      	mov	r5, r0
 800a382:	b911      	cbnz	r1, 800a38a <sbrk_aligned+0x12>
 800a384:	f000 feec 	bl	800b160 <_sbrk_r>
 800a388:	6030      	str	r0, [r6, #0]
 800a38a:	4621      	mov	r1, r4
 800a38c:	4628      	mov	r0, r5
 800a38e:	f000 fee7 	bl	800b160 <_sbrk_r>
 800a392:	1c43      	adds	r3, r0, #1
 800a394:	d00a      	beq.n	800a3ac <sbrk_aligned+0x34>
 800a396:	1cc4      	adds	r4, r0, #3
 800a398:	f024 0403 	bic.w	r4, r4, #3
 800a39c:	42a0      	cmp	r0, r4
 800a39e:	d007      	beq.n	800a3b0 <sbrk_aligned+0x38>
 800a3a0:	1a21      	subs	r1, r4, r0
 800a3a2:	4628      	mov	r0, r5
 800a3a4:	f000 fedc 	bl	800b160 <_sbrk_r>
 800a3a8:	3001      	adds	r0, #1
 800a3aa:	d101      	bne.n	800a3b0 <sbrk_aligned+0x38>
 800a3ac:	f04f 34ff 	mov.w	r4, #4294967295
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	bd70      	pop	{r4, r5, r6, pc}
 800a3b4:	20002798 	.word	0x20002798

0800a3b8 <_malloc_r>:
 800a3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3bc:	1ccd      	adds	r5, r1, #3
 800a3be:	f025 0503 	bic.w	r5, r5, #3
 800a3c2:	3508      	adds	r5, #8
 800a3c4:	2d0c      	cmp	r5, #12
 800a3c6:	bf38      	it	cc
 800a3c8:	250c      	movcc	r5, #12
 800a3ca:	2d00      	cmp	r5, #0
 800a3cc:	4607      	mov	r7, r0
 800a3ce:	db01      	blt.n	800a3d4 <_malloc_r+0x1c>
 800a3d0:	42a9      	cmp	r1, r5
 800a3d2:	d905      	bls.n	800a3e0 <_malloc_r+0x28>
 800a3d4:	230c      	movs	r3, #12
 800a3d6:	603b      	str	r3, [r7, #0]
 800a3d8:	2600      	movs	r6, #0
 800a3da:	4630      	mov	r0, r6
 800a3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3e0:	4e2e      	ldr	r6, [pc, #184]	; (800a49c <_malloc_r+0xe4>)
 800a3e2:	f003 f9ab 	bl	800d73c <__malloc_lock>
 800a3e6:	6833      	ldr	r3, [r6, #0]
 800a3e8:	461c      	mov	r4, r3
 800a3ea:	bb34      	cbnz	r4, 800a43a <_malloc_r+0x82>
 800a3ec:	4629      	mov	r1, r5
 800a3ee:	4638      	mov	r0, r7
 800a3f0:	f7ff ffc2 	bl	800a378 <sbrk_aligned>
 800a3f4:	1c43      	adds	r3, r0, #1
 800a3f6:	4604      	mov	r4, r0
 800a3f8:	d14d      	bne.n	800a496 <_malloc_r+0xde>
 800a3fa:	6834      	ldr	r4, [r6, #0]
 800a3fc:	4626      	mov	r6, r4
 800a3fe:	2e00      	cmp	r6, #0
 800a400:	d140      	bne.n	800a484 <_malloc_r+0xcc>
 800a402:	6823      	ldr	r3, [r4, #0]
 800a404:	4631      	mov	r1, r6
 800a406:	4638      	mov	r0, r7
 800a408:	eb04 0803 	add.w	r8, r4, r3
 800a40c:	f000 fea8 	bl	800b160 <_sbrk_r>
 800a410:	4580      	cmp	r8, r0
 800a412:	d13a      	bne.n	800a48a <_malloc_r+0xd2>
 800a414:	6821      	ldr	r1, [r4, #0]
 800a416:	3503      	adds	r5, #3
 800a418:	1a6d      	subs	r5, r5, r1
 800a41a:	f025 0503 	bic.w	r5, r5, #3
 800a41e:	3508      	adds	r5, #8
 800a420:	2d0c      	cmp	r5, #12
 800a422:	bf38      	it	cc
 800a424:	250c      	movcc	r5, #12
 800a426:	4629      	mov	r1, r5
 800a428:	4638      	mov	r0, r7
 800a42a:	f7ff ffa5 	bl	800a378 <sbrk_aligned>
 800a42e:	3001      	adds	r0, #1
 800a430:	d02b      	beq.n	800a48a <_malloc_r+0xd2>
 800a432:	6823      	ldr	r3, [r4, #0]
 800a434:	442b      	add	r3, r5
 800a436:	6023      	str	r3, [r4, #0]
 800a438:	e00e      	b.n	800a458 <_malloc_r+0xa0>
 800a43a:	6822      	ldr	r2, [r4, #0]
 800a43c:	1b52      	subs	r2, r2, r5
 800a43e:	d41e      	bmi.n	800a47e <_malloc_r+0xc6>
 800a440:	2a0b      	cmp	r2, #11
 800a442:	d916      	bls.n	800a472 <_malloc_r+0xba>
 800a444:	1961      	adds	r1, r4, r5
 800a446:	42a3      	cmp	r3, r4
 800a448:	6025      	str	r5, [r4, #0]
 800a44a:	bf18      	it	ne
 800a44c:	6059      	strne	r1, [r3, #4]
 800a44e:	6863      	ldr	r3, [r4, #4]
 800a450:	bf08      	it	eq
 800a452:	6031      	streq	r1, [r6, #0]
 800a454:	5162      	str	r2, [r4, r5]
 800a456:	604b      	str	r3, [r1, #4]
 800a458:	4638      	mov	r0, r7
 800a45a:	f104 060b 	add.w	r6, r4, #11
 800a45e:	f003 f973 	bl	800d748 <__malloc_unlock>
 800a462:	f026 0607 	bic.w	r6, r6, #7
 800a466:	1d23      	adds	r3, r4, #4
 800a468:	1af2      	subs	r2, r6, r3
 800a46a:	d0b6      	beq.n	800a3da <_malloc_r+0x22>
 800a46c:	1b9b      	subs	r3, r3, r6
 800a46e:	50a3      	str	r3, [r4, r2]
 800a470:	e7b3      	b.n	800a3da <_malloc_r+0x22>
 800a472:	6862      	ldr	r2, [r4, #4]
 800a474:	42a3      	cmp	r3, r4
 800a476:	bf0c      	ite	eq
 800a478:	6032      	streq	r2, [r6, #0]
 800a47a:	605a      	strne	r2, [r3, #4]
 800a47c:	e7ec      	b.n	800a458 <_malloc_r+0xa0>
 800a47e:	4623      	mov	r3, r4
 800a480:	6864      	ldr	r4, [r4, #4]
 800a482:	e7b2      	b.n	800a3ea <_malloc_r+0x32>
 800a484:	4634      	mov	r4, r6
 800a486:	6876      	ldr	r6, [r6, #4]
 800a488:	e7b9      	b.n	800a3fe <_malloc_r+0x46>
 800a48a:	230c      	movs	r3, #12
 800a48c:	603b      	str	r3, [r7, #0]
 800a48e:	4638      	mov	r0, r7
 800a490:	f003 f95a 	bl	800d748 <__malloc_unlock>
 800a494:	e7a1      	b.n	800a3da <_malloc_r+0x22>
 800a496:	6025      	str	r5, [r4, #0]
 800a498:	e7de      	b.n	800a458 <_malloc_r+0xa0>
 800a49a:	bf00      	nop
 800a49c:	20002794 	.word	0x20002794

0800a4a0 <__cvt>:
 800a4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4a2:	ed2d 8b02 	vpush	{d8}
 800a4a6:	eeb0 8b40 	vmov.f64	d8, d0
 800a4aa:	b085      	sub	sp, #20
 800a4ac:	4617      	mov	r7, r2
 800a4ae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a4b0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a4b2:	ee18 2a90 	vmov	r2, s17
 800a4b6:	f025 0520 	bic.w	r5, r5, #32
 800a4ba:	2a00      	cmp	r2, #0
 800a4bc:	bfb6      	itet	lt
 800a4be:	222d      	movlt	r2, #45	; 0x2d
 800a4c0:	2200      	movge	r2, #0
 800a4c2:	eeb1 8b40 	vneglt.f64	d8, d0
 800a4c6:	2d46      	cmp	r5, #70	; 0x46
 800a4c8:	460c      	mov	r4, r1
 800a4ca:	701a      	strb	r2, [r3, #0]
 800a4cc:	d004      	beq.n	800a4d8 <__cvt+0x38>
 800a4ce:	2d45      	cmp	r5, #69	; 0x45
 800a4d0:	d100      	bne.n	800a4d4 <__cvt+0x34>
 800a4d2:	3401      	adds	r4, #1
 800a4d4:	2102      	movs	r1, #2
 800a4d6:	e000      	b.n	800a4da <__cvt+0x3a>
 800a4d8:	2103      	movs	r1, #3
 800a4da:	ab03      	add	r3, sp, #12
 800a4dc:	9301      	str	r3, [sp, #4]
 800a4de:	ab02      	add	r3, sp, #8
 800a4e0:	9300      	str	r3, [sp, #0]
 800a4e2:	4622      	mov	r2, r4
 800a4e4:	4633      	mov	r3, r6
 800a4e6:	eeb0 0b48 	vmov.f64	d0, d8
 800a4ea:	f001 fe15 	bl	800c118 <_dtoa_r>
 800a4ee:	2d47      	cmp	r5, #71	; 0x47
 800a4f0:	d101      	bne.n	800a4f6 <__cvt+0x56>
 800a4f2:	07fb      	lsls	r3, r7, #31
 800a4f4:	d51a      	bpl.n	800a52c <__cvt+0x8c>
 800a4f6:	2d46      	cmp	r5, #70	; 0x46
 800a4f8:	eb00 0204 	add.w	r2, r0, r4
 800a4fc:	d10c      	bne.n	800a518 <__cvt+0x78>
 800a4fe:	7803      	ldrb	r3, [r0, #0]
 800a500:	2b30      	cmp	r3, #48	; 0x30
 800a502:	d107      	bne.n	800a514 <__cvt+0x74>
 800a504:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a50c:	bf1c      	itt	ne
 800a50e:	f1c4 0401 	rsbne	r4, r4, #1
 800a512:	6034      	strne	r4, [r6, #0]
 800a514:	6833      	ldr	r3, [r6, #0]
 800a516:	441a      	add	r2, r3
 800a518:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a520:	bf08      	it	eq
 800a522:	9203      	streq	r2, [sp, #12]
 800a524:	2130      	movs	r1, #48	; 0x30
 800a526:	9b03      	ldr	r3, [sp, #12]
 800a528:	4293      	cmp	r3, r2
 800a52a:	d307      	bcc.n	800a53c <__cvt+0x9c>
 800a52c:	9b03      	ldr	r3, [sp, #12]
 800a52e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a530:	1a1b      	subs	r3, r3, r0
 800a532:	6013      	str	r3, [r2, #0]
 800a534:	b005      	add	sp, #20
 800a536:	ecbd 8b02 	vpop	{d8}
 800a53a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a53c:	1c5c      	adds	r4, r3, #1
 800a53e:	9403      	str	r4, [sp, #12]
 800a540:	7019      	strb	r1, [r3, #0]
 800a542:	e7f0      	b.n	800a526 <__cvt+0x86>

0800a544 <__exponent>:
 800a544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a546:	4603      	mov	r3, r0
 800a548:	2900      	cmp	r1, #0
 800a54a:	bfb8      	it	lt
 800a54c:	4249      	neglt	r1, r1
 800a54e:	f803 2b02 	strb.w	r2, [r3], #2
 800a552:	bfb4      	ite	lt
 800a554:	222d      	movlt	r2, #45	; 0x2d
 800a556:	222b      	movge	r2, #43	; 0x2b
 800a558:	2909      	cmp	r1, #9
 800a55a:	7042      	strb	r2, [r0, #1]
 800a55c:	dd2a      	ble.n	800a5b4 <__exponent+0x70>
 800a55e:	f10d 0407 	add.w	r4, sp, #7
 800a562:	46a4      	mov	ip, r4
 800a564:	270a      	movs	r7, #10
 800a566:	46a6      	mov	lr, r4
 800a568:	460a      	mov	r2, r1
 800a56a:	fb91 f6f7 	sdiv	r6, r1, r7
 800a56e:	fb07 1516 	mls	r5, r7, r6, r1
 800a572:	3530      	adds	r5, #48	; 0x30
 800a574:	2a63      	cmp	r2, #99	; 0x63
 800a576:	f104 34ff 	add.w	r4, r4, #4294967295
 800a57a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a57e:	4631      	mov	r1, r6
 800a580:	dcf1      	bgt.n	800a566 <__exponent+0x22>
 800a582:	3130      	adds	r1, #48	; 0x30
 800a584:	f1ae 0502 	sub.w	r5, lr, #2
 800a588:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a58c:	1c44      	adds	r4, r0, #1
 800a58e:	4629      	mov	r1, r5
 800a590:	4561      	cmp	r1, ip
 800a592:	d30a      	bcc.n	800a5aa <__exponent+0x66>
 800a594:	f10d 0209 	add.w	r2, sp, #9
 800a598:	eba2 020e 	sub.w	r2, r2, lr
 800a59c:	4565      	cmp	r5, ip
 800a59e:	bf88      	it	hi
 800a5a0:	2200      	movhi	r2, #0
 800a5a2:	4413      	add	r3, r2
 800a5a4:	1a18      	subs	r0, r3, r0
 800a5a6:	b003      	add	sp, #12
 800a5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a5b2:	e7ed      	b.n	800a590 <__exponent+0x4c>
 800a5b4:	2330      	movs	r3, #48	; 0x30
 800a5b6:	3130      	adds	r1, #48	; 0x30
 800a5b8:	7083      	strb	r3, [r0, #2]
 800a5ba:	70c1      	strb	r1, [r0, #3]
 800a5bc:	1d03      	adds	r3, r0, #4
 800a5be:	e7f1      	b.n	800a5a4 <__exponent+0x60>

0800a5c0 <_printf_float>:
 800a5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c4:	b08b      	sub	sp, #44	; 0x2c
 800a5c6:	460c      	mov	r4, r1
 800a5c8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800a5cc:	4616      	mov	r6, r2
 800a5ce:	461f      	mov	r7, r3
 800a5d0:	4605      	mov	r5, r0
 800a5d2:	f003 f835 	bl	800d640 <_localeconv_r>
 800a5d6:	f8d0 b000 	ldr.w	fp, [r0]
 800a5da:	4658      	mov	r0, fp
 800a5dc:	f7f5 fe30 	bl	8000240 <strlen>
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	9308      	str	r3, [sp, #32]
 800a5e4:	f8d8 3000 	ldr.w	r3, [r8]
 800a5e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a5ec:	6822      	ldr	r2, [r4, #0]
 800a5ee:	3307      	adds	r3, #7
 800a5f0:	f023 0307 	bic.w	r3, r3, #7
 800a5f4:	f103 0108 	add.w	r1, r3, #8
 800a5f8:	f8c8 1000 	str.w	r1, [r8]
 800a5fc:	4682      	mov	sl, r0
 800a5fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a602:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800a606:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800a868 <_printf_float+0x2a8>
 800a60a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800a60e:	eeb0 6bc0 	vabs.f64	d6, d0
 800a612:	eeb4 6b47 	vcmp.f64	d6, d7
 800a616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a61a:	dd24      	ble.n	800a666 <_printf_float+0xa6>
 800a61c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a624:	d502      	bpl.n	800a62c <_printf_float+0x6c>
 800a626:	232d      	movs	r3, #45	; 0x2d
 800a628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a62c:	4b90      	ldr	r3, [pc, #576]	; (800a870 <_printf_float+0x2b0>)
 800a62e:	4891      	ldr	r0, [pc, #580]	; (800a874 <_printf_float+0x2b4>)
 800a630:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a634:	bf94      	ite	ls
 800a636:	4698      	movls	r8, r3
 800a638:	4680      	movhi	r8, r0
 800a63a:	2303      	movs	r3, #3
 800a63c:	6123      	str	r3, [r4, #16]
 800a63e:	f022 0204 	bic.w	r2, r2, #4
 800a642:	2300      	movs	r3, #0
 800a644:	6022      	str	r2, [r4, #0]
 800a646:	9304      	str	r3, [sp, #16]
 800a648:	9700      	str	r7, [sp, #0]
 800a64a:	4633      	mov	r3, r6
 800a64c:	aa09      	add	r2, sp, #36	; 0x24
 800a64e:	4621      	mov	r1, r4
 800a650:	4628      	mov	r0, r5
 800a652:	f000 f9d3 	bl	800a9fc <_printf_common>
 800a656:	3001      	adds	r0, #1
 800a658:	f040 808a 	bne.w	800a770 <_printf_float+0x1b0>
 800a65c:	f04f 30ff 	mov.w	r0, #4294967295
 800a660:	b00b      	add	sp, #44	; 0x2c
 800a662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a666:	eeb4 0b40 	vcmp.f64	d0, d0
 800a66a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a66e:	d709      	bvc.n	800a684 <_printf_float+0xc4>
 800a670:	ee10 3a90 	vmov	r3, s1
 800a674:	2b00      	cmp	r3, #0
 800a676:	bfbc      	itt	lt
 800a678:	232d      	movlt	r3, #45	; 0x2d
 800a67a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a67e:	487e      	ldr	r0, [pc, #504]	; (800a878 <_printf_float+0x2b8>)
 800a680:	4b7e      	ldr	r3, [pc, #504]	; (800a87c <_printf_float+0x2bc>)
 800a682:	e7d5      	b.n	800a630 <_printf_float+0x70>
 800a684:	6863      	ldr	r3, [r4, #4]
 800a686:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a68a:	9104      	str	r1, [sp, #16]
 800a68c:	1c59      	adds	r1, r3, #1
 800a68e:	d13c      	bne.n	800a70a <_printf_float+0x14a>
 800a690:	2306      	movs	r3, #6
 800a692:	6063      	str	r3, [r4, #4]
 800a694:	2300      	movs	r3, #0
 800a696:	9303      	str	r3, [sp, #12]
 800a698:	ab08      	add	r3, sp, #32
 800a69a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a69e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a6a2:	ab07      	add	r3, sp, #28
 800a6a4:	6861      	ldr	r1, [r4, #4]
 800a6a6:	9300      	str	r3, [sp, #0]
 800a6a8:	6022      	str	r2, [r4, #0]
 800a6aa:	f10d 031b 	add.w	r3, sp, #27
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	f7ff fef6 	bl	800a4a0 <__cvt>
 800a6b4:	9b04      	ldr	r3, [sp, #16]
 800a6b6:	9907      	ldr	r1, [sp, #28]
 800a6b8:	2b47      	cmp	r3, #71	; 0x47
 800a6ba:	4680      	mov	r8, r0
 800a6bc:	d108      	bne.n	800a6d0 <_printf_float+0x110>
 800a6be:	1cc8      	adds	r0, r1, #3
 800a6c0:	db02      	blt.n	800a6c8 <_printf_float+0x108>
 800a6c2:	6863      	ldr	r3, [r4, #4]
 800a6c4:	4299      	cmp	r1, r3
 800a6c6:	dd41      	ble.n	800a74c <_printf_float+0x18c>
 800a6c8:	f1a9 0902 	sub.w	r9, r9, #2
 800a6cc:	fa5f f989 	uxtb.w	r9, r9
 800a6d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a6d4:	d820      	bhi.n	800a718 <_printf_float+0x158>
 800a6d6:	3901      	subs	r1, #1
 800a6d8:	464a      	mov	r2, r9
 800a6da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a6de:	9107      	str	r1, [sp, #28]
 800a6e0:	f7ff ff30 	bl	800a544 <__exponent>
 800a6e4:	9a08      	ldr	r2, [sp, #32]
 800a6e6:	9004      	str	r0, [sp, #16]
 800a6e8:	1813      	adds	r3, r2, r0
 800a6ea:	2a01      	cmp	r2, #1
 800a6ec:	6123      	str	r3, [r4, #16]
 800a6ee:	dc02      	bgt.n	800a6f6 <_printf_float+0x136>
 800a6f0:	6822      	ldr	r2, [r4, #0]
 800a6f2:	07d2      	lsls	r2, r2, #31
 800a6f4:	d501      	bpl.n	800a6fa <_printf_float+0x13a>
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	6123      	str	r3, [r4, #16]
 800a6fa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d0a2      	beq.n	800a648 <_printf_float+0x88>
 800a702:	232d      	movs	r3, #45	; 0x2d
 800a704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a708:	e79e      	b.n	800a648 <_printf_float+0x88>
 800a70a:	9904      	ldr	r1, [sp, #16]
 800a70c:	2947      	cmp	r1, #71	; 0x47
 800a70e:	d1c1      	bne.n	800a694 <_printf_float+0xd4>
 800a710:	2b00      	cmp	r3, #0
 800a712:	d1bf      	bne.n	800a694 <_printf_float+0xd4>
 800a714:	2301      	movs	r3, #1
 800a716:	e7bc      	b.n	800a692 <_printf_float+0xd2>
 800a718:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a71c:	d118      	bne.n	800a750 <_printf_float+0x190>
 800a71e:	2900      	cmp	r1, #0
 800a720:	6863      	ldr	r3, [r4, #4]
 800a722:	dd0b      	ble.n	800a73c <_printf_float+0x17c>
 800a724:	6121      	str	r1, [r4, #16]
 800a726:	b913      	cbnz	r3, 800a72e <_printf_float+0x16e>
 800a728:	6822      	ldr	r2, [r4, #0]
 800a72a:	07d0      	lsls	r0, r2, #31
 800a72c:	d502      	bpl.n	800a734 <_printf_float+0x174>
 800a72e:	3301      	adds	r3, #1
 800a730:	440b      	add	r3, r1
 800a732:	6123      	str	r3, [r4, #16]
 800a734:	2300      	movs	r3, #0
 800a736:	65a1      	str	r1, [r4, #88]	; 0x58
 800a738:	9304      	str	r3, [sp, #16]
 800a73a:	e7de      	b.n	800a6fa <_printf_float+0x13a>
 800a73c:	b913      	cbnz	r3, 800a744 <_printf_float+0x184>
 800a73e:	6822      	ldr	r2, [r4, #0]
 800a740:	07d2      	lsls	r2, r2, #31
 800a742:	d501      	bpl.n	800a748 <_printf_float+0x188>
 800a744:	3302      	adds	r3, #2
 800a746:	e7f4      	b.n	800a732 <_printf_float+0x172>
 800a748:	2301      	movs	r3, #1
 800a74a:	e7f2      	b.n	800a732 <_printf_float+0x172>
 800a74c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a750:	9b08      	ldr	r3, [sp, #32]
 800a752:	4299      	cmp	r1, r3
 800a754:	db05      	blt.n	800a762 <_printf_float+0x1a2>
 800a756:	6823      	ldr	r3, [r4, #0]
 800a758:	6121      	str	r1, [r4, #16]
 800a75a:	07d8      	lsls	r0, r3, #31
 800a75c:	d5ea      	bpl.n	800a734 <_printf_float+0x174>
 800a75e:	1c4b      	adds	r3, r1, #1
 800a760:	e7e7      	b.n	800a732 <_printf_float+0x172>
 800a762:	2900      	cmp	r1, #0
 800a764:	bfd4      	ite	le
 800a766:	f1c1 0202 	rsble	r2, r1, #2
 800a76a:	2201      	movgt	r2, #1
 800a76c:	4413      	add	r3, r2
 800a76e:	e7e0      	b.n	800a732 <_printf_float+0x172>
 800a770:	6823      	ldr	r3, [r4, #0]
 800a772:	055a      	lsls	r2, r3, #21
 800a774:	d407      	bmi.n	800a786 <_printf_float+0x1c6>
 800a776:	6923      	ldr	r3, [r4, #16]
 800a778:	4642      	mov	r2, r8
 800a77a:	4631      	mov	r1, r6
 800a77c:	4628      	mov	r0, r5
 800a77e:	47b8      	blx	r7
 800a780:	3001      	adds	r0, #1
 800a782:	d12a      	bne.n	800a7da <_printf_float+0x21a>
 800a784:	e76a      	b.n	800a65c <_printf_float+0x9c>
 800a786:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a78a:	f240 80e2 	bls.w	800a952 <_printf_float+0x392>
 800a78e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a792:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a79a:	d133      	bne.n	800a804 <_printf_float+0x244>
 800a79c:	4a38      	ldr	r2, [pc, #224]	; (800a880 <_printf_float+0x2c0>)
 800a79e:	2301      	movs	r3, #1
 800a7a0:	4631      	mov	r1, r6
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	47b8      	blx	r7
 800a7a6:	3001      	adds	r0, #1
 800a7a8:	f43f af58 	beq.w	800a65c <_printf_float+0x9c>
 800a7ac:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	db02      	blt.n	800a7ba <_printf_float+0x1fa>
 800a7b4:	6823      	ldr	r3, [r4, #0]
 800a7b6:	07d8      	lsls	r0, r3, #31
 800a7b8:	d50f      	bpl.n	800a7da <_printf_float+0x21a>
 800a7ba:	4653      	mov	r3, sl
 800a7bc:	465a      	mov	r2, fp
 800a7be:	4631      	mov	r1, r6
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	47b8      	blx	r7
 800a7c4:	3001      	adds	r0, #1
 800a7c6:	f43f af49 	beq.w	800a65c <_printf_float+0x9c>
 800a7ca:	f04f 0800 	mov.w	r8, #0
 800a7ce:	f104 091a 	add.w	r9, r4, #26
 800a7d2:	9b08      	ldr	r3, [sp, #32]
 800a7d4:	3b01      	subs	r3, #1
 800a7d6:	4543      	cmp	r3, r8
 800a7d8:	dc09      	bgt.n	800a7ee <_printf_float+0x22e>
 800a7da:	6823      	ldr	r3, [r4, #0]
 800a7dc:	079b      	lsls	r3, r3, #30
 800a7de:	f100 8108 	bmi.w	800a9f2 <_printf_float+0x432>
 800a7e2:	68e0      	ldr	r0, [r4, #12]
 800a7e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7e6:	4298      	cmp	r0, r3
 800a7e8:	bfb8      	it	lt
 800a7ea:	4618      	movlt	r0, r3
 800a7ec:	e738      	b.n	800a660 <_printf_float+0xa0>
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	464a      	mov	r2, r9
 800a7f2:	4631      	mov	r1, r6
 800a7f4:	4628      	mov	r0, r5
 800a7f6:	47b8      	blx	r7
 800a7f8:	3001      	adds	r0, #1
 800a7fa:	f43f af2f 	beq.w	800a65c <_printf_float+0x9c>
 800a7fe:	f108 0801 	add.w	r8, r8, #1
 800a802:	e7e6      	b.n	800a7d2 <_printf_float+0x212>
 800a804:	9b07      	ldr	r3, [sp, #28]
 800a806:	2b00      	cmp	r3, #0
 800a808:	dc3c      	bgt.n	800a884 <_printf_float+0x2c4>
 800a80a:	4a1d      	ldr	r2, [pc, #116]	; (800a880 <_printf_float+0x2c0>)
 800a80c:	2301      	movs	r3, #1
 800a80e:	4631      	mov	r1, r6
 800a810:	4628      	mov	r0, r5
 800a812:	47b8      	blx	r7
 800a814:	3001      	adds	r0, #1
 800a816:	f43f af21 	beq.w	800a65c <_printf_float+0x9c>
 800a81a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a81e:	4313      	orrs	r3, r2
 800a820:	d102      	bne.n	800a828 <_printf_float+0x268>
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	07d9      	lsls	r1, r3, #31
 800a826:	d5d8      	bpl.n	800a7da <_printf_float+0x21a>
 800a828:	4653      	mov	r3, sl
 800a82a:	465a      	mov	r2, fp
 800a82c:	4631      	mov	r1, r6
 800a82e:	4628      	mov	r0, r5
 800a830:	47b8      	blx	r7
 800a832:	3001      	adds	r0, #1
 800a834:	f43f af12 	beq.w	800a65c <_printf_float+0x9c>
 800a838:	f04f 0900 	mov.w	r9, #0
 800a83c:	f104 0a1a 	add.w	sl, r4, #26
 800a840:	9b07      	ldr	r3, [sp, #28]
 800a842:	425b      	negs	r3, r3
 800a844:	454b      	cmp	r3, r9
 800a846:	dc01      	bgt.n	800a84c <_printf_float+0x28c>
 800a848:	9b08      	ldr	r3, [sp, #32]
 800a84a:	e795      	b.n	800a778 <_printf_float+0x1b8>
 800a84c:	2301      	movs	r3, #1
 800a84e:	4652      	mov	r2, sl
 800a850:	4631      	mov	r1, r6
 800a852:	4628      	mov	r0, r5
 800a854:	47b8      	blx	r7
 800a856:	3001      	adds	r0, #1
 800a858:	f43f af00 	beq.w	800a65c <_printf_float+0x9c>
 800a85c:	f109 0901 	add.w	r9, r9, #1
 800a860:	e7ee      	b.n	800a840 <_printf_float+0x280>
 800a862:	bf00      	nop
 800a864:	f3af 8000 	nop.w
 800a868:	ffffffff 	.word	0xffffffff
 800a86c:	7fefffff 	.word	0x7fefffff
 800a870:	0800ea74 	.word	0x0800ea74
 800a874:	0800ea78 	.word	0x0800ea78
 800a878:	0800ea80 	.word	0x0800ea80
 800a87c:	0800ea7c 	.word	0x0800ea7c
 800a880:	0800ea84 	.word	0x0800ea84
 800a884:	9a08      	ldr	r2, [sp, #32]
 800a886:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a888:	429a      	cmp	r2, r3
 800a88a:	bfa8      	it	ge
 800a88c:	461a      	movge	r2, r3
 800a88e:	2a00      	cmp	r2, #0
 800a890:	4691      	mov	r9, r2
 800a892:	dc38      	bgt.n	800a906 <_printf_float+0x346>
 800a894:	2300      	movs	r3, #0
 800a896:	9305      	str	r3, [sp, #20]
 800a898:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a89c:	f104 021a 	add.w	r2, r4, #26
 800a8a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8a2:	9905      	ldr	r1, [sp, #20]
 800a8a4:	9304      	str	r3, [sp, #16]
 800a8a6:	eba3 0309 	sub.w	r3, r3, r9
 800a8aa:	428b      	cmp	r3, r1
 800a8ac:	dc33      	bgt.n	800a916 <_printf_float+0x356>
 800a8ae:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	db3c      	blt.n	800a930 <_printf_float+0x370>
 800a8b6:	6823      	ldr	r3, [r4, #0]
 800a8b8:	07da      	lsls	r2, r3, #31
 800a8ba:	d439      	bmi.n	800a930 <_printf_float+0x370>
 800a8bc:	9b08      	ldr	r3, [sp, #32]
 800a8be:	9a04      	ldr	r2, [sp, #16]
 800a8c0:	9907      	ldr	r1, [sp, #28]
 800a8c2:	1a9a      	subs	r2, r3, r2
 800a8c4:	eba3 0901 	sub.w	r9, r3, r1
 800a8c8:	4591      	cmp	r9, r2
 800a8ca:	bfa8      	it	ge
 800a8cc:	4691      	movge	r9, r2
 800a8ce:	f1b9 0f00 	cmp.w	r9, #0
 800a8d2:	dc35      	bgt.n	800a940 <_printf_float+0x380>
 800a8d4:	f04f 0800 	mov.w	r8, #0
 800a8d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8dc:	f104 0a1a 	add.w	sl, r4, #26
 800a8e0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a8e4:	1a9b      	subs	r3, r3, r2
 800a8e6:	eba3 0309 	sub.w	r3, r3, r9
 800a8ea:	4543      	cmp	r3, r8
 800a8ec:	f77f af75 	ble.w	800a7da <_printf_float+0x21a>
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	4652      	mov	r2, sl
 800a8f4:	4631      	mov	r1, r6
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	47b8      	blx	r7
 800a8fa:	3001      	adds	r0, #1
 800a8fc:	f43f aeae 	beq.w	800a65c <_printf_float+0x9c>
 800a900:	f108 0801 	add.w	r8, r8, #1
 800a904:	e7ec      	b.n	800a8e0 <_printf_float+0x320>
 800a906:	4613      	mov	r3, r2
 800a908:	4631      	mov	r1, r6
 800a90a:	4642      	mov	r2, r8
 800a90c:	4628      	mov	r0, r5
 800a90e:	47b8      	blx	r7
 800a910:	3001      	adds	r0, #1
 800a912:	d1bf      	bne.n	800a894 <_printf_float+0x2d4>
 800a914:	e6a2      	b.n	800a65c <_printf_float+0x9c>
 800a916:	2301      	movs	r3, #1
 800a918:	4631      	mov	r1, r6
 800a91a:	4628      	mov	r0, r5
 800a91c:	9204      	str	r2, [sp, #16]
 800a91e:	47b8      	blx	r7
 800a920:	3001      	adds	r0, #1
 800a922:	f43f ae9b 	beq.w	800a65c <_printf_float+0x9c>
 800a926:	9b05      	ldr	r3, [sp, #20]
 800a928:	9a04      	ldr	r2, [sp, #16]
 800a92a:	3301      	adds	r3, #1
 800a92c:	9305      	str	r3, [sp, #20]
 800a92e:	e7b7      	b.n	800a8a0 <_printf_float+0x2e0>
 800a930:	4653      	mov	r3, sl
 800a932:	465a      	mov	r2, fp
 800a934:	4631      	mov	r1, r6
 800a936:	4628      	mov	r0, r5
 800a938:	47b8      	blx	r7
 800a93a:	3001      	adds	r0, #1
 800a93c:	d1be      	bne.n	800a8bc <_printf_float+0x2fc>
 800a93e:	e68d      	b.n	800a65c <_printf_float+0x9c>
 800a940:	9a04      	ldr	r2, [sp, #16]
 800a942:	464b      	mov	r3, r9
 800a944:	4442      	add	r2, r8
 800a946:	4631      	mov	r1, r6
 800a948:	4628      	mov	r0, r5
 800a94a:	47b8      	blx	r7
 800a94c:	3001      	adds	r0, #1
 800a94e:	d1c1      	bne.n	800a8d4 <_printf_float+0x314>
 800a950:	e684      	b.n	800a65c <_printf_float+0x9c>
 800a952:	9a08      	ldr	r2, [sp, #32]
 800a954:	2a01      	cmp	r2, #1
 800a956:	dc01      	bgt.n	800a95c <_printf_float+0x39c>
 800a958:	07db      	lsls	r3, r3, #31
 800a95a:	d537      	bpl.n	800a9cc <_printf_float+0x40c>
 800a95c:	2301      	movs	r3, #1
 800a95e:	4642      	mov	r2, r8
 800a960:	4631      	mov	r1, r6
 800a962:	4628      	mov	r0, r5
 800a964:	47b8      	blx	r7
 800a966:	3001      	adds	r0, #1
 800a968:	f43f ae78 	beq.w	800a65c <_printf_float+0x9c>
 800a96c:	4653      	mov	r3, sl
 800a96e:	465a      	mov	r2, fp
 800a970:	4631      	mov	r1, r6
 800a972:	4628      	mov	r0, r5
 800a974:	47b8      	blx	r7
 800a976:	3001      	adds	r0, #1
 800a978:	f43f ae70 	beq.w	800a65c <_printf_float+0x9c>
 800a97c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a980:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a988:	d01b      	beq.n	800a9c2 <_printf_float+0x402>
 800a98a:	9b08      	ldr	r3, [sp, #32]
 800a98c:	f108 0201 	add.w	r2, r8, #1
 800a990:	3b01      	subs	r3, #1
 800a992:	4631      	mov	r1, r6
 800a994:	4628      	mov	r0, r5
 800a996:	47b8      	blx	r7
 800a998:	3001      	adds	r0, #1
 800a99a:	d10e      	bne.n	800a9ba <_printf_float+0x3fa>
 800a99c:	e65e      	b.n	800a65c <_printf_float+0x9c>
 800a99e:	2301      	movs	r3, #1
 800a9a0:	464a      	mov	r2, r9
 800a9a2:	4631      	mov	r1, r6
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	47b8      	blx	r7
 800a9a8:	3001      	adds	r0, #1
 800a9aa:	f43f ae57 	beq.w	800a65c <_printf_float+0x9c>
 800a9ae:	f108 0801 	add.w	r8, r8, #1
 800a9b2:	9b08      	ldr	r3, [sp, #32]
 800a9b4:	3b01      	subs	r3, #1
 800a9b6:	4543      	cmp	r3, r8
 800a9b8:	dcf1      	bgt.n	800a99e <_printf_float+0x3de>
 800a9ba:	9b04      	ldr	r3, [sp, #16]
 800a9bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a9c0:	e6db      	b.n	800a77a <_printf_float+0x1ba>
 800a9c2:	f04f 0800 	mov.w	r8, #0
 800a9c6:	f104 091a 	add.w	r9, r4, #26
 800a9ca:	e7f2      	b.n	800a9b2 <_printf_float+0x3f2>
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	4642      	mov	r2, r8
 800a9d0:	e7df      	b.n	800a992 <_printf_float+0x3d2>
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	464a      	mov	r2, r9
 800a9d6:	4631      	mov	r1, r6
 800a9d8:	4628      	mov	r0, r5
 800a9da:	47b8      	blx	r7
 800a9dc:	3001      	adds	r0, #1
 800a9de:	f43f ae3d 	beq.w	800a65c <_printf_float+0x9c>
 800a9e2:	f108 0801 	add.w	r8, r8, #1
 800a9e6:	68e3      	ldr	r3, [r4, #12]
 800a9e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9ea:	1a5b      	subs	r3, r3, r1
 800a9ec:	4543      	cmp	r3, r8
 800a9ee:	dcf0      	bgt.n	800a9d2 <_printf_float+0x412>
 800a9f0:	e6f7      	b.n	800a7e2 <_printf_float+0x222>
 800a9f2:	f04f 0800 	mov.w	r8, #0
 800a9f6:	f104 0919 	add.w	r9, r4, #25
 800a9fa:	e7f4      	b.n	800a9e6 <_printf_float+0x426>

0800a9fc <_printf_common>:
 800a9fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa00:	4616      	mov	r6, r2
 800aa02:	4699      	mov	r9, r3
 800aa04:	688a      	ldr	r2, [r1, #8]
 800aa06:	690b      	ldr	r3, [r1, #16]
 800aa08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	bfb8      	it	lt
 800aa10:	4613      	movlt	r3, r2
 800aa12:	6033      	str	r3, [r6, #0]
 800aa14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa18:	4607      	mov	r7, r0
 800aa1a:	460c      	mov	r4, r1
 800aa1c:	b10a      	cbz	r2, 800aa22 <_printf_common+0x26>
 800aa1e:	3301      	adds	r3, #1
 800aa20:	6033      	str	r3, [r6, #0]
 800aa22:	6823      	ldr	r3, [r4, #0]
 800aa24:	0699      	lsls	r1, r3, #26
 800aa26:	bf42      	ittt	mi
 800aa28:	6833      	ldrmi	r3, [r6, #0]
 800aa2a:	3302      	addmi	r3, #2
 800aa2c:	6033      	strmi	r3, [r6, #0]
 800aa2e:	6825      	ldr	r5, [r4, #0]
 800aa30:	f015 0506 	ands.w	r5, r5, #6
 800aa34:	d106      	bne.n	800aa44 <_printf_common+0x48>
 800aa36:	f104 0a19 	add.w	sl, r4, #25
 800aa3a:	68e3      	ldr	r3, [r4, #12]
 800aa3c:	6832      	ldr	r2, [r6, #0]
 800aa3e:	1a9b      	subs	r3, r3, r2
 800aa40:	42ab      	cmp	r3, r5
 800aa42:	dc26      	bgt.n	800aa92 <_printf_common+0x96>
 800aa44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa48:	1e13      	subs	r3, r2, #0
 800aa4a:	6822      	ldr	r2, [r4, #0]
 800aa4c:	bf18      	it	ne
 800aa4e:	2301      	movne	r3, #1
 800aa50:	0692      	lsls	r2, r2, #26
 800aa52:	d42b      	bmi.n	800aaac <_printf_common+0xb0>
 800aa54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa58:	4649      	mov	r1, r9
 800aa5a:	4638      	mov	r0, r7
 800aa5c:	47c0      	blx	r8
 800aa5e:	3001      	adds	r0, #1
 800aa60:	d01e      	beq.n	800aaa0 <_printf_common+0xa4>
 800aa62:	6823      	ldr	r3, [r4, #0]
 800aa64:	68e5      	ldr	r5, [r4, #12]
 800aa66:	6832      	ldr	r2, [r6, #0]
 800aa68:	f003 0306 	and.w	r3, r3, #6
 800aa6c:	2b04      	cmp	r3, #4
 800aa6e:	bf08      	it	eq
 800aa70:	1aad      	subeq	r5, r5, r2
 800aa72:	68a3      	ldr	r3, [r4, #8]
 800aa74:	6922      	ldr	r2, [r4, #16]
 800aa76:	bf0c      	ite	eq
 800aa78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa7c:	2500      	movne	r5, #0
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	bfc4      	itt	gt
 800aa82:	1a9b      	subgt	r3, r3, r2
 800aa84:	18ed      	addgt	r5, r5, r3
 800aa86:	2600      	movs	r6, #0
 800aa88:	341a      	adds	r4, #26
 800aa8a:	42b5      	cmp	r5, r6
 800aa8c:	d11a      	bne.n	800aac4 <_printf_common+0xc8>
 800aa8e:	2000      	movs	r0, #0
 800aa90:	e008      	b.n	800aaa4 <_printf_common+0xa8>
 800aa92:	2301      	movs	r3, #1
 800aa94:	4652      	mov	r2, sl
 800aa96:	4649      	mov	r1, r9
 800aa98:	4638      	mov	r0, r7
 800aa9a:	47c0      	blx	r8
 800aa9c:	3001      	adds	r0, #1
 800aa9e:	d103      	bne.n	800aaa8 <_printf_common+0xac>
 800aaa0:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaa8:	3501      	adds	r5, #1
 800aaaa:	e7c6      	b.n	800aa3a <_printf_common+0x3e>
 800aaac:	18e1      	adds	r1, r4, r3
 800aaae:	1c5a      	adds	r2, r3, #1
 800aab0:	2030      	movs	r0, #48	; 0x30
 800aab2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aab6:	4422      	add	r2, r4
 800aab8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aabc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aac0:	3302      	adds	r3, #2
 800aac2:	e7c7      	b.n	800aa54 <_printf_common+0x58>
 800aac4:	2301      	movs	r3, #1
 800aac6:	4622      	mov	r2, r4
 800aac8:	4649      	mov	r1, r9
 800aaca:	4638      	mov	r0, r7
 800aacc:	47c0      	blx	r8
 800aace:	3001      	adds	r0, #1
 800aad0:	d0e6      	beq.n	800aaa0 <_printf_common+0xa4>
 800aad2:	3601      	adds	r6, #1
 800aad4:	e7d9      	b.n	800aa8a <_printf_common+0x8e>
	...

0800aad8 <_printf_i>:
 800aad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aadc:	7e0f      	ldrb	r7, [r1, #24]
 800aade:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aae0:	2f78      	cmp	r7, #120	; 0x78
 800aae2:	4691      	mov	r9, r2
 800aae4:	4680      	mov	r8, r0
 800aae6:	460c      	mov	r4, r1
 800aae8:	469a      	mov	sl, r3
 800aaea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aaee:	d807      	bhi.n	800ab00 <_printf_i+0x28>
 800aaf0:	2f62      	cmp	r7, #98	; 0x62
 800aaf2:	d80a      	bhi.n	800ab0a <_printf_i+0x32>
 800aaf4:	2f00      	cmp	r7, #0
 800aaf6:	f000 80d8 	beq.w	800acaa <_printf_i+0x1d2>
 800aafa:	2f58      	cmp	r7, #88	; 0x58
 800aafc:	f000 80a3 	beq.w	800ac46 <_printf_i+0x16e>
 800ab00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab08:	e03a      	b.n	800ab80 <_printf_i+0xa8>
 800ab0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab0e:	2b15      	cmp	r3, #21
 800ab10:	d8f6      	bhi.n	800ab00 <_printf_i+0x28>
 800ab12:	a101      	add	r1, pc, #4	; (adr r1, 800ab18 <_printf_i+0x40>)
 800ab14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab18:	0800ab71 	.word	0x0800ab71
 800ab1c:	0800ab85 	.word	0x0800ab85
 800ab20:	0800ab01 	.word	0x0800ab01
 800ab24:	0800ab01 	.word	0x0800ab01
 800ab28:	0800ab01 	.word	0x0800ab01
 800ab2c:	0800ab01 	.word	0x0800ab01
 800ab30:	0800ab85 	.word	0x0800ab85
 800ab34:	0800ab01 	.word	0x0800ab01
 800ab38:	0800ab01 	.word	0x0800ab01
 800ab3c:	0800ab01 	.word	0x0800ab01
 800ab40:	0800ab01 	.word	0x0800ab01
 800ab44:	0800ac91 	.word	0x0800ac91
 800ab48:	0800abb5 	.word	0x0800abb5
 800ab4c:	0800ac73 	.word	0x0800ac73
 800ab50:	0800ab01 	.word	0x0800ab01
 800ab54:	0800ab01 	.word	0x0800ab01
 800ab58:	0800acb3 	.word	0x0800acb3
 800ab5c:	0800ab01 	.word	0x0800ab01
 800ab60:	0800abb5 	.word	0x0800abb5
 800ab64:	0800ab01 	.word	0x0800ab01
 800ab68:	0800ab01 	.word	0x0800ab01
 800ab6c:	0800ac7b 	.word	0x0800ac7b
 800ab70:	682b      	ldr	r3, [r5, #0]
 800ab72:	1d1a      	adds	r2, r3, #4
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	602a      	str	r2, [r5, #0]
 800ab78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab80:	2301      	movs	r3, #1
 800ab82:	e0a3      	b.n	800accc <_printf_i+0x1f4>
 800ab84:	6820      	ldr	r0, [r4, #0]
 800ab86:	6829      	ldr	r1, [r5, #0]
 800ab88:	0606      	lsls	r6, r0, #24
 800ab8a:	f101 0304 	add.w	r3, r1, #4
 800ab8e:	d50a      	bpl.n	800aba6 <_printf_i+0xce>
 800ab90:	680e      	ldr	r6, [r1, #0]
 800ab92:	602b      	str	r3, [r5, #0]
 800ab94:	2e00      	cmp	r6, #0
 800ab96:	da03      	bge.n	800aba0 <_printf_i+0xc8>
 800ab98:	232d      	movs	r3, #45	; 0x2d
 800ab9a:	4276      	negs	r6, r6
 800ab9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aba0:	485e      	ldr	r0, [pc, #376]	; (800ad1c <_printf_i+0x244>)
 800aba2:	230a      	movs	r3, #10
 800aba4:	e019      	b.n	800abda <_printf_i+0x102>
 800aba6:	680e      	ldr	r6, [r1, #0]
 800aba8:	602b      	str	r3, [r5, #0]
 800abaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800abae:	bf18      	it	ne
 800abb0:	b236      	sxthne	r6, r6
 800abb2:	e7ef      	b.n	800ab94 <_printf_i+0xbc>
 800abb4:	682b      	ldr	r3, [r5, #0]
 800abb6:	6820      	ldr	r0, [r4, #0]
 800abb8:	1d19      	adds	r1, r3, #4
 800abba:	6029      	str	r1, [r5, #0]
 800abbc:	0601      	lsls	r1, r0, #24
 800abbe:	d501      	bpl.n	800abc4 <_printf_i+0xec>
 800abc0:	681e      	ldr	r6, [r3, #0]
 800abc2:	e002      	b.n	800abca <_printf_i+0xf2>
 800abc4:	0646      	lsls	r6, r0, #25
 800abc6:	d5fb      	bpl.n	800abc0 <_printf_i+0xe8>
 800abc8:	881e      	ldrh	r6, [r3, #0]
 800abca:	4854      	ldr	r0, [pc, #336]	; (800ad1c <_printf_i+0x244>)
 800abcc:	2f6f      	cmp	r7, #111	; 0x6f
 800abce:	bf0c      	ite	eq
 800abd0:	2308      	moveq	r3, #8
 800abd2:	230a      	movne	r3, #10
 800abd4:	2100      	movs	r1, #0
 800abd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800abda:	6865      	ldr	r5, [r4, #4]
 800abdc:	60a5      	str	r5, [r4, #8]
 800abde:	2d00      	cmp	r5, #0
 800abe0:	bfa2      	ittt	ge
 800abe2:	6821      	ldrge	r1, [r4, #0]
 800abe4:	f021 0104 	bicge.w	r1, r1, #4
 800abe8:	6021      	strge	r1, [r4, #0]
 800abea:	b90e      	cbnz	r6, 800abf0 <_printf_i+0x118>
 800abec:	2d00      	cmp	r5, #0
 800abee:	d04d      	beq.n	800ac8c <_printf_i+0x1b4>
 800abf0:	4615      	mov	r5, r2
 800abf2:	fbb6 f1f3 	udiv	r1, r6, r3
 800abf6:	fb03 6711 	mls	r7, r3, r1, r6
 800abfa:	5dc7      	ldrb	r7, [r0, r7]
 800abfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac00:	4637      	mov	r7, r6
 800ac02:	42bb      	cmp	r3, r7
 800ac04:	460e      	mov	r6, r1
 800ac06:	d9f4      	bls.n	800abf2 <_printf_i+0x11a>
 800ac08:	2b08      	cmp	r3, #8
 800ac0a:	d10b      	bne.n	800ac24 <_printf_i+0x14c>
 800ac0c:	6823      	ldr	r3, [r4, #0]
 800ac0e:	07de      	lsls	r6, r3, #31
 800ac10:	d508      	bpl.n	800ac24 <_printf_i+0x14c>
 800ac12:	6923      	ldr	r3, [r4, #16]
 800ac14:	6861      	ldr	r1, [r4, #4]
 800ac16:	4299      	cmp	r1, r3
 800ac18:	bfde      	ittt	le
 800ac1a:	2330      	movle	r3, #48	; 0x30
 800ac1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac20:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac24:	1b52      	subs	r2, r2, r5
 800ac26:	6122      	str	r2, [r4, #16]
 800ac28:	f8cd a000 	str.w	sl, [sp]
 800ac2c:	464b      	mov	r3, r9
 800ac2e:	aa03      	add	r2, sp, #12
 800ac30:	4621      	mov	r1, r4
 800ac32:	4640      	mov	r0, r8
 800ac34:	f7ff fee2 	bl	800a9fc <_printf_common>
 800ac38:	3001      	adds	r0, #1
 800ac3a:	d14c      	bne.n	800acd6 <_printf_i+0x1fe>
 800ac3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac40:	b004      	add	sp, #16
 800ac42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac46:	4835      	ldr	r0, [pc, #212]	; (800ad1c <_printf_i+0x244>)
 800ac48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac4c:	6829      	ldr	r1, [r5, #0]
 800ac4e:	6823      	ldr	r3, [r4, #0]
 800ac50:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac54:	6029      	str	r1, [r5, #0]
 800ac56:	061d      	lsls	r5, r3, #24
 800ac58:	d514      	bpl.n	800ac84 <_printf_i+0x1ac>
 800ac5a:	07df      	lsls	r7, r3, #31
 800ac5c:	bf44      	itt	mi
 800ac5e:	f043 0320 	orrmi.w	r3, r3, #32
 800ac62:	6023      	strmi	r3, [r4, #0]
 800ac64:	b91e      	cbnz	r6, 800ac6e <_printf_i+0x196>
 800ac66:	6823      	ldr	r3, [r4, #0]
 800ac68:	f023 0320 	bic.w	r3, r3, #32
 800ac6c:	6023      	str	r3, [r4, #0]
 800ac6e:	2310      	movs	r3, #16
 800ac70:	e7b0      	b.n	800abd4 <_printf_i+0xfc>
 800ac72:	6823      	ldr	r3, [r4, #0]
 800ac74:	f043 0320 	orr.w	r3, r3, #32
 800ac78:	6023      	str	r3, [r4, #0]
 800ac7a:	2378      	movs	r3, #120	; 0x78
 800ac7c:	4828      	ldr	r0, [pc, #160]	; (800ad20 <_printf_i+0x248>)
 800ac7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac82:	e7e3      	b.n	800ac4c <_printf_i+0x174>
 800ac84:	0659      	lsls	r1, r3, #25
 800ac86:	bf48      	it	mi
 800ac88:	b2b6      	uxthmi	r6, r6
 800ac8a:	e7e6      	b.n	800ac5a <_printf_i+0x182>
 800ac8c:	4615      	mov	r5, r2
 800ac8e:	e7bb      	b.n	800ac08 <_printf_i+0x130>
 800ac90:	682b      	ldr	r3, [r5, #0]
 800ac92:	6826      	ldr	r6, [r4, #0]
 800ac94:	6961      	ldr	r1, [r4, #20]
 800ac96:	1d18      	adds	r0, r3, #4
 800ac98:	6028      	str	r0, [r5, #0]
 800ac9a:	0635      	lsls	r5, r6, #24
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	d501      	bpl.n	800aca4 <_printf_i+0x1cc>
 800aca0:	6019      	str	r1, [r3, #0]
 800aca2:	e002      	b.n	800acaa <_printf_i+0x1d2>
 800aca4:	0670      	lsls	r0, r6, #25
 800aca6:	d5fb      	bpl.n	800aca0 <_printf_i+0x1c8>
 800aca8:	8019      	strh	r1, [r3, #0]
 800acaa:	2300      	movs	r3, #0
 800acac:	6123      	str	r3, [r4, #16]
 800acae:	4615      	mov	r5, r2
 800acb0:	e7ba      	b.n	800ac28 <_printf_i+0x150>
 800acb2:	682b      	ldr	r3, [r5, #0]
 800acb4:	1d1a      	adds	r2, r3, #4
 800acb6:	602a      	str	r2, [r5, #0]
 800acb8:	681d      	ldr	r5, [r3, #0]
 800acba:	6862      	ldr	r2, [r4, #4]
 800acbc:	2100      	movs	r1, #0
 800acbe:	4628      	mov	r0, r5
 800acc0:	f7f5 fac6 	bl	8000250 <memchr>
 800acc4:	b108      	cbz	r0, 800acca <_printf_i+0x1f2>
 800acc6:	1b40      	subs	r0, r0, r5
 800acc8:	6060      	str	r0, [r4, #4]
 800acca:	6863      	ldr	r3, [r4, #4]
 800accc:	6123      	str	r3, [r4, #16]
 800acce:	2300      	movs	r3, #0
 800acd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acd4:	e7a8      	b.n	800ac28 <_printf_i+0x150>
 800acd6:	6923      	ldr	r3, [r4, #16]
 800acd8:	462a      	mov	r2, r5
 800acda:	4649      	mov	r1, r9
 800acdc:	4640      	mov	r0, r8
 800acde:	47d0      	blx	sl
 800ace0:	3001      	adds	r0, #1
 800ace2:	d0ab      	beq.n	800ac3c <_printf_i+0x164>
 800ace4:	6823      	ldr	r3, [r4, #0]
 800ace6:	079b      	lsls	r3, r3, #30
 800ace8:	d413      	bmi.n	800ad12 <_printf_i+0x23a>
 800acea:	68e0      	ldr	r0, [r4, #12]
 800acec:	9b03      	ldr	r3, [sp, #12]
 800acee:	4298      	cmp	r0, r3
 800acf0:	bfb8      	it	lt
 800acf2:	4618      	movlt	r0, r3
 800acf4:	e7a4      	b.n	800ac40 <_printf_i+0x168>
 800acf6:	2301      	movs	r3, #1
 800acf8:	4632      	mov	r2, r6
 800acfa:	4649      	mov	r1, r9
 800acfc:	4640      	mov	r0, r8
 800acfe:	47d0      	blx	sl
 800ad00:	3001      	adds	r0, #1
 800ad02:	d09b      	beq.n	800ac3c <_printf_i+0x164>
 800ad04:	3501      	adds	r5, #1
 800ad06:	68e3      	ldr	r3, [r4, #12]
 800ad08:	9903      	ldr	r1, [sp, #12]
 800ad0a:	1a5b      	subs	r3, r3, r1
 800ad0c:	42ab      	cmp	r3, r5
 800ad0e:	dcf2      	bgt.n	800acf6 <_printf_i+0x21e>
 800ad10:	e7eb      	b.n	800acea <_printf_i+0x212>
 800ad12:	2500      	movs	r5, #0
 800ad14:	f104 0619 	add.w	r6, r4, #25
 800ad18:	e7f5      	b.n	800ad06 <_printf_i+0x22e>
 800ad1a:	bf00      	nop
 800ad1c:	0800ea86 	.word	0x0800ea86
 800ad20:	0800ea97 	.word	0x0800ea97

0800ad24 <_scanf_float>:
 800ad24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad28:	b087      	sub	sp, #28
 800ad2a:	4617      	mov	r7, r2
 800ad2c:	9303      	str	r3, [sp, #12]
 800ad2e:	688b      	ldr	r3, [r1, #8]
 800ad30:	1e5a      	subs	r2, r3, #1
 800ad32:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ad36:	bf83      	ittte	hi
 800ad38:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ad3c:	195b      	addhi	r3, r3, r5
 800ad3e:	9302      	strhi	r3, [sp, #8]
 800ad40:	2300      	movls	r3, #0
 800ad42:	bf86      	itte	hi
 800ad44:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ad48:	608b      	strhi	r3, [r1, #8]
 800ad4a:	9302      	strls	r3, [sp, #8]
 800ad4c:	680b      	ldr	r3, [r1, #0]
 800ad4e:	468b      	mov	fp, r1
 800ad50:	2500      	movs	r5, #0
 800ad52:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ad56:	f84b 3b1c 	str.w	r3, [fp], #28
 800ad5a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ad5e:	4680      	mov	r8, r0
 800ad60:	460c      	mov	r4, r1
 800ad62:	465e      	mov	r6, fp
 800ad64:	46aa      	mov	sl, r5
 800ad66:	46a9      	mov	r9, r5
 800ad68:	9501      	str	r5, [sp, #4]
 800ad6a:	68a2      	ldr	r2, [r4, #8]
 800ad6c:	b152      	cbz	r2, 800ad84 <_scanf_float+0x60>
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	2b4e      	cmp	r3, #78	; 0x4e
 800ad74:	d864      	bhi.n	800ae40 <_scanf_float+0x11c>
 800ad76:	2b40      	cmp	r3, #64	; 0x40
 800ad78:	d83c      	bhi.n	800adf4 <_scanf_float+0xd0>
 800ad7a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ad7e:	b2c8      	uxtb	r0, r1
 800ad80:	280e      	cmp	r0, #14
 800ad82:	d93a      	bls.n	800adfa <_scanf_float+0xd6>
 800ad84:	f1b9 0f00 	cmp.w	r9, #0
 800ad88:	d003      	beq.n	800ad92 <_scanf_float+0x6e>
 800ad8a:	6823      	ldr	r3, [r4, #0]
 800ad8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad90:	6023      	str	r3, [r4, #0]
 800ad92:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad96:	f1ba 0f01 	cmp.w	sl, #1
 800ad9a:	f200 8113 	bhi.w	800afc4 <_scanf_float+0x2a0>
 800ad9e:	455e      	cmp	r6, fp
 800ada0:	f200 8105 	bhi.w	800afae <_scanf_float+0x28a>
 800ada4:	2501      	movs	r5, #1
 800ada6:	4628      	mov	r0, r5
 800ada8:	b007      	add	sp, #28
 800adaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800adb2:	2a0d      	cmp	r2, #13
 800adb4:	d8e6      	bhi.n	800ad84 <_scanf_float+0x60>
 800adb6:	a101      	add	r1, pc, #4	; (adr r1, 800adbc <_scanf_float+0x98>)
 800adb8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800adbc:	0800aefb 	.word	0x0800aefb
 800adc0:	0800ad85 	.word	0x0800ad85
 800adc4:	0800ad85 	.word	0x0800ad85
 800adc8:	0800ad85 	.word	0x0800ad85
 800adcc:	0800af5b 	.word	0x0800af5b
 800add0:	0800af33 	.word	0x0800af33
 800add4:	0800ad85 	.word	0x0800ad85
 800add8:	0800ad85 	.word	0x0800ad85
 800addc:	0800af09 	.word	0x0800af09
 800ade0:	0800ad85 	.word	0x0800ad85
 800ade4:	0800ad85 	.word	0x0800ad85
 800ade8:	0800ad85 	.word	0x0800ad85
 800adec:	0800ad85 	.word	0x0800ad85
 800adf0:	0800aec1 	.word	0x0800aec1
 800adf4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800adf8:	e7db      	b.n	800adb2 <_scanf_float+0x8e>
 800adfa:	290e      	cmp	r1, #14
 800adfc:	d8c2      	bhi.n	800ad84 <_scanf_float+0x60>
 800adfe:	a001      	add	r0, pc, #4	; (adr r0, 800ae04 <_scanf_float+0xe0>)
 800ae00:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ae04:	0800aeb3 	.word	0x0800aeb3
 800ae08:	0800ad85 	.word	0x0800ad85
 800ae0c:	0800aeb3 	.word	0x0800aeb3
 800ae10:	0800af47 	.word	0x0800af47
 800ae14:	0800ad85 	.word	0x0800ad85
 800ae18:	0800ae61 	.word	0x0800ae61
 800ae1c:	0800ae9d 	.word	0x0800ae9d
 800ae20:	0800ae9d 	.word	0x0800ae9d
 800ae24:	0800ae9d 	.word	0x0800ae9d
 800ae28:	0800ae9d 	.word	0x0800ae9d
 800ae2c:	0800ae9d 	.word	0x0800ae9d
 800ae30:	0800ae9d 	.word	0x0800ae9d
 800ae34:	0800ae9d 	.word	0x0800ae9d
 800ae38:	0800ae9d 	.word	0x0800ae9d
 800ae3c:	0800ae9d 	.word	0x0800ae9d
 800ae40:	2b6e      	cmp	r3, #110	; 0x6e
 800ae42:	d809      	bhi.n	800ae58 <_scanf_float+0x134>
 800ae44:	2b60      	cmp	r3, #96	; 0x60
 800ae46:	d8b2      	bhi.n	800adae <_scanf_float+0x8a>
 800ae48:	2b54      	cmp	r3, #84	; 0x54
 800ae4a:	d077      	beq.n	800af3c <_scanf_float+0x218>
 800ae4c:	2b59      	cmp	r3, #89	; 0x59
 800ae4e:	d199      	bne.n	800ad84 <_scanf_float+0x60>
 800ae50:	2d07      	cmp	r5, #7
 800ae52:	d197      	bne.n	800ad84 <_scanf_float+0x60>
 800ae54:	2508      	movs	r5, #8
 800ae56:	e029      	b.n	800aeac <_scanf_float+0x188>
 800ae58:	2b74      	cmp	r3, #116	; 0x74
 800ae5a:	d06f      	beq.n	800af3c <_scanf_float+0x218>
 800ae5c:	2b79      	cmp	r3, #121	; 0x79
 800ae5e:	e7f6      	b.n	800ae4e <_scanf_float+0x12a>
 800ae60:	6821      	ldr	r1, [r4, #0]
 800ae62:	05c8      	lsls	r0, r1, #23
 800ae64:	d51a      	bpl.n	800ae9c <_scanf_float+0x178>
 800ae66:	9b02      	ldr	r3, [sp, #8]
 800ae68:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ae6c:	6021      	str	r1, [r4, #0]
 800ae6e:	f109 0901 	add.w	r9, r9, #1
 800ae72:	b11b      	cbz	r3, 800ae7c <_scanf_float+0x158>
 800ae74:	3b01      	subs	r3, #1
 800ae76:	3201      	adds	r2, #1
 800ae78:	9302      	str	r3, [sp, #8]
 800ae7a:	60a2      	str	r2, [r4, #8]
 800ae7c:	68a3      	ldr	r3, [r4, #8]
 800ae7e:	3b01      	subs	r3, #1
 800ae80:	60a3      	str	r3, [r4, #8]
 800ae82:	6923      	ldr	r3, [r4, #16]
 800ae84:	3301      	adds	r3, #1
 800ae86:	6123      	str	r3, [r4, #16]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	607b      	str	r3, [r7, #4]
 800ae90:	f340 8084 	ble.w	800af9c <_scanf_float+0x278>
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	3301      	adds	r3, #1
 800ae98:	603b      	str	r3, [r7, #0]
 800ae9a:	e766      	b.n	800ad6a <_scanf_float+0x46>
 800ae9c:	eb1a 0f05 	cmn.w	sl, r5
 800aea0:	f47f af70 	bne.w	800ad84 <_scanf_float+0x60>
 800aea4:	6822      	ldr	r2, [r4, #0]
 800aea6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800aeaa:	6022      	str	r2, [r4, #0]
 800aeac:	f806 3b01 	strb.w	r3, [r6], #1
 800aeb0:	e7e4      	b.n	800ae7c <_scanf_float+0x158>
 800aeb2:	6822      	ldr	r2, [r4, #0]
 800aeb4:	0610      	lsls	r0, r2, #24
 800aeb6:	f57f af65 	bpl.w	800ad84 <_scanf_float+0x60>
 800aeba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aebe:	e7f4      	b.n	800aeaa <_scanf_float+0x186>
 800aec0:	f1ba 0f00 	cmp.w	sl, #0
 800aec4:	d10e      	bne.n	800aee4 <_scanf_float+0x1c0>
 800aec6:	f1b9 0f00 	cmp.w	r9, #0
 800aeca:	d10e      	bne.n	800aeea <_scanf_float+0x1c6>
 800aecc:	6822      	ldr	r2, [r4, #0]
 800aece:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800aed2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800aed6:	d108      	bne.n	800aeea <_scanf_float+0x1c6>
 800aed8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aedc:	6022      	str	r2, [r4, #0]
 800aede:	f04f 0a01 	mov.w	sl, #1
 800aee2:	e7e3      	b.n	800aeac <_scanf_float+0x188>
 800aee4:	f1ba 0f02 	cmp.w	sl, #2
 800aee8:	d055      	beq.n	800af96 <_scanf_float+0x272>
 800aeea:	2d01      	cmp	r5, #1
 800aeec:	d002      	beq.n	800aef4 <_scanf_float+0x1d0>
 800aeee:	2d04      	cmp	r5, #4
 800aef0:	f47f af48 	bne.w	800ad84 <_scanf_float+0x60>
 800aef4:	3501      	adds	r5, #1
 800aef6:	b2ed      	uxtb	r5, r5
 800aef8:	e7d8      	b.n	800aeac <_scanf_float+0x188>
 800aefa:	f1ba 0f01 	cmp.w	sl, #1
 800aefe:	f47f af41 	bne.w	800ad84 <_scanf_float+0x60>
 800af02:	f04f 0a02 	mov.w	sl, #2
 800af06:	e7d1      	b.n	800aeac <_scanf_float+0x188>
 800af08:	b97d      	cbnz	r5, 800af2a <_scanf_float+0x206>
 800af0a:	f1b9 0f00 	cmp.w	r9, #0
 800af0e:	f47f af3c 	bne.w	800ad8a <_scanf_float+0x66>
 800af12:	6822      	ldr	r2, [r4, #0]
 800af14:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800af18:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800af1c:	f47f af39 	bne.w	800ad92 <_scanf_float+0x6e>
 800af20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800af24:	6022      	str	r2, [r4, #0]
 800af26:	2501      	movs	r5, #1
 800af28:	e7c0      	b.n	800aeac <_scanf_float+0x188>
 800af2a:	2d03      	cmp	r5, #3
 800af2c:	d0e2      	beq.n	800aef4 <_scanf_float+0x1d0>
 800af2e:	2d05      	cmp	r5, #5
 800af30:	e7de      	b.n	800aef0 <_scanf_float+0x1cc>
 800af32:	2d02      	cmp	r5, #2
 800af34:	f47f af26 	bne.w	800ad84 <_scanf_float+0x60>
 800af38:	2503      	movs	r5, #3
 800af3a:	e7b7      	b.n	800aeac <_scanf_float+0x188>
 800af3c:	2d06      	cmp	r5, #6
 800af3e:	f47f af21 	bne.w	800ad84 <_scanf_float+0x60>
 800af42:	2507      	movs	r5, #7
 800af44:	e7b2      	b.n	800aeac <_scanf_float+0x188>
 800af46:	6822      	ldr	r2, [r4, #0]
 800af48:	0591      	lsls	r1, r2, #22
 800af4a:	f57f af1b 	bpl.w	800ad84 <_scanf_float+0x60>
 800af4e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800af52:	6022      	str	r2, [r4, #0]
 800af54:	f8cd 9004 	str.w	r9, [sp, #4]
 800af58:	e7a8      	b.n	800aeac <_scanf_float+0x188>
 800af5a:	6822      	ldr	r2, [r4, #0]
 800af5c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800af60:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800af64:	d006      	beq.n	800af74 <_scanf_float+0x250>
 800af66:	0550      	lsls	r0, r2, #21
 800af68:	f57f af0c 	bpl.w	800ad84 <_scanf_float+0x60>
 800af6c:	f1b9 0f00 	cmp.w	r9, #0
 800af70:	f43f af0f 	beq.w	800ad92 <_scanf_float+0x6e>
 800af74:	0591      	lsls	r1, r2, #22
 800af76:	bf58      	it	pl
 800af78:	9901      	ldrpl	r1, [sp, #4]
 800af7a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800af7e:	bf58      	it	pl
 800af80:	eba9 0101 	subpl.w	r1, r9, r1
 800af84:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800af88:	bf58      	it	pl
 800af8a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800af8e:	6022      	str	r2, [r4, #0]
 800af90:	f04f 0900 	mov.w	r9, #0
 800af94:	e78a      	b.n	800aeac <_scanf_float+0x188>
 800af96:	f04f 0a03 	mov.w	sl, #3
 800af9a:	e787      	b.n	800aeac <_scanf_float+0x188>
 800af9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800afa0:	4639      	mov	r1, r7
 800afa2:	4640      	mov	r0, r8
 800afa4:	4798      	blx	r3
 800afa6:	2800      	cmp	r0, #0
 800afa8:	f43f aedf 	beq.w	800ad6a <_scanf_float+0x46>
 800afac:	e6ea      	b.n	800ad84 <_scanf_float+0x60>
 800afae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800afb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800afb6:	463a      	mov	r2, r7
 800afb8:	4640      	mov	r0, r8
 800afba:	4798      	blx	r3
 800afbc:	6923      	ldr	r3, [r4, #16]
 800afbe:	3b01      	subs	r3, #1
 800afc0:	6123      	str	r3, [r4, #16]
 800afc2:	e6ec      	b.n	800ad9e <_scanf_float+0x7a>
 800afc4:	1e6b      	subs	r3, r5, #1
 800afc6:	2b06      	cmp	r3, #6
 800afc8:	d825      	bhi.n	800b016 <_scanf_float+0x2f2>
 800afca:	2d02      	cmp	r5, #2
 800afcc:	d836      	bhi.n	800b03c <_scanf_float+0x318>
 800afce:	455e      	cmp	r6, fp
 800afd0:	f67f aee8 	bls.w	800ada4 <_scanf_float+0x80>
 800afd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800afd8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800afdc:	463a      	mov	r2, r7
 800afde:	4640      	mov	r0, r8
 800afe0:	4798      	blx	r3
 800afe2:	6923      	ldr	r3, [r4, #16]
 800afe4:	3b01      	subs	r3, #1
 800afe6:	6123      	str	r3, [r4, #16]
 800afe8:	e7f1      	b.n	800afce <_scanf_float+0x2aa>
 800afea:	9802      	ldr	r0, [sp, #8]
 800afec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aff0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800aff4:	9002      	str	r0, [sp, #8]
 800aff6:	463a      	mov	r2, r7
 800aff8:	4640      	mov	r0, r8
 800affa:	4798      	blx	r3
 800affc:	6923      	ldr	r3, [r4, #16]
 800affe:	3b01      	subs	r3, #1
 800b000:	6123      	str	r3, [r4, #16]
 800b002:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b006:	fa5f fa8a 	uxtb.w	sl, sl
 800b00a:	f1ba 0f02 	cmp.w	sl, #2
 800b00e:	d1ec      	bne.n	800afea <_scanf_float+0x2c6>
 800b010:	3d03      	subs	r5, #3
 800b012:	b2ed      	uxtb	r5, r5
 800b014:	1b76      	subs	r6, r6, r5
 800b016:	6823      	ldr	r3, [r4, #0]
 800b018:	05da      	lsls	r2, r3, #23
 800b01a:	d52f      	bpl.n	800b07c <_scanf_float+0x358>
 800b01c:	055b      	lsls	r3, r3, #21
 800b01e:	d510      	bpl.n	800b042 <_scanf_float+0x31e>
 800b020:	455e      	cmp	r6, fp
 800b022:	f67f aebf 	bls.w	800ada4 <_scanf_float+0x80>
 800b026:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b02a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b02e:	463a      	mov	r2, r7
 800b030:	4640      	mov	r0, r8
 800b032:	4798      	blx	r3
 800b034:	6923      	ldr	r3, [r4, #16]
 800b036:	3b01      	subs	r3, #1
 800b038:	6123      	str	r3, [r4, #16]
 800b03a:	e7f1      	b.n	800b020 <_scanf_float+0x2fc>
 800b03c:	46aa      	mov	sl, r5
 800b03e:	9602      	str	r6, [sp, #8]
 800b040:	e7df      	b.n	800b002 <_scanf_float+0x2de>
 800b042:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b046:	6923      	ldr	r3, [r4, #16]
 800b048:	2965      	cmp	r1, #101	; 0x65
 800b04a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b04e:	f106 35ff 	add.w	r5, r6, #4294967295
 800b052:	6123      	str	r3, [r4, #16]
 800b054:	d00c      	beq.n	800b070 <_scanf_float+0x34c>
 800b056:	2945      	cmp	r1, #69	; 0x45
 800b058:	d00a      	beq.n	800b070 <_scanf_float+0x34c>
 800b05a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b05e:	463a      	mov	r2, r7
 800b060:	4640      	mov	r0, r8
 800b062:	4798      	blx	r3
 800b064:	6923      	ldr	r3, [r4, #16]
 800b066:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b06a:	3b01      	subs	r3, #1
 800b06c:	1eb5      	subs	r5, r6, #2
 800b06e:	6123      	str	r3, [r4, #16]
 800b070:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b074:	463a      	mov	r2, r7
 800b076:	4640      	mov	r0, r8
 800b078:	4798      	blx	r3
 800b07a:	462e      	mov	r6, r5
 800b07c:	6825      	ldr	r5, [r4, #0]
 800b07e:	f015 0510 	ands.w	r5, r5, #16
 800b082:	d14e      	bne.n	800b122 <_scanf_float+0x3fe>
 800b084:	7035      	strb	r5, [r6, #0]
 800b086:	6823      	ldr	r3, [r4, #0]
 800b088:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b08c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b090:	d119      	bne.n	800b0c6 <_scanf_float+0x3a2>
 800b092:	9b01      	ldr	r3, [sp, #4]
 800b094:	454b      	cmp	r3, r9
 800b096:	eba3 0209 	sub.w	r2, r3, r9
 800b09a:	d121      	bne.n	800b0e0 <_scanf_float+0x3bc>
 800b09c:	2200      	movs	r2, #0
 800b09e:	4659      	mov	r1, fp
 800b0a0:	4640      	mov	r0, r8
 800b0a2:	f000 fe63 	bl	800bd6c <_strtod_r>
 800b0a6:	6822      	ldr	r2, [r4, #0]
 800b0a8:	9b03      	ldr	r3, [sp, #12]
 800b0aa:	f012 0f02 	tst.w	r2, #2
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	d021      	beq.n	800b0f6 <_scanf_float+0x3d2>
 800b0b2:	9903      	ldr	r1, [sp, #12]
 800b0b4:	1d1a      	adds	r2, r3, #4
 800b0b6:	600a      	str	r2, [r1, #0]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	ed83 0b00 	vstr	d0, [r3]
 800b0be:	68e3      	ldr	r3, [r4, #12]
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	60e3      	str	r3, [r4, #12]
 800b0c4:	e66f      	b.n	800ada6 <_scanf_float+0x82>
 800b0c6:	9b04      	ldr	r3, [sp, #16]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d0e7      	beq.n	800b09c <_scanf_float+0x378>
 800b0cc:	9905      	ldr	r1, [sp, #20]
 800b0ce:	230a      	movs	r3, #10
 800b0d0:	462a      	mov	r2, r5
 800b0d2:	3101      	adds	r1, #1
 800b0d4:	4640      	mov	r0, r8
 800b0d6:	f000 fed1 	bl	800be7c <_strtol_r>
 800b0da:	9b04      	ldr	r3, [sp, #16]
 800b0dc:	9e05      	ldr	r6, [sp, #20]
 800b0de:	1ac2      	subs	r2, r0, r3
 800b0e0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b0e4:	429e      	cmp	r6, r3
 800b0e6:	bf28      	it	cs
 800b0e8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b0ec:	490e      	ldr	r1, [pc, #56]	; (800b128 <_scanf_float+0x404>)
 800b0ee:	4630      	mov	r0, r6
 800b0f0:	f000 f84c 	bl	800b18c <siprintf>
 800b0f4:	e7d2      	b.n	800b09c <_scanf_float+0x378>
 800b0f6:	9903      	ldr	r1, [sp, #12]
 800b0f8:	f012 0f04 	tst.w	r2, #4
 800b0fc:	f103 0204 	add.w	r2, r3, #4
 800b100:	600a      	str	r2, [r1, #0]
 800b102:	d1d9      	bne.n	800b0b8 <_scanf_float+0x394>
 800b104:	eeb4 0b40 	vcmp.f64	d0, d0
 800b108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b10c:	681e      	ldr	r6, [r3, #0]
 800b10e:	d705      	bvc.n	800b11c <_scanf_float+0x3f8>
 800b110:	4806      	ldr	r0, [pc, #24]	; (800b12c <_scanf_float+0x408>)
 800b112:	f000 f835 	bl	800b180 <nanf>
 800b116:	ed86 0a00 	vstr	s0, [r6]
 800b11a:	e7d0      	b.n	800b0be <_scanf_float+0x39a>
 800b11c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b120:	e7f9      	b.n	800b116 <_scanf_float+0x3f2>
 800b122:	2500      	movs	r5, #0
 800b124:	e63f      	b.n	800ada6 <_scanf_float+0x82>
 800b126:	bf00      	nop
 800b128:	0800eaa8 	.word	0x0800eaa8
 800b12c:	0800ef18 	.word	0x0800ef18

0800b130 <iprintf>:
 800b130:	b40f      	push	{r0, r1, r2, r3}
 800b132:	4b0a      	ldr	r3, [pc, #40]	; (800b15c <iprintf+0x2c>)
 800b134:	b513      	push	{r0, r1, r4, lr}
 800b136:	681c      	ldr	r4, [r3, #0]
 800b138:	b124      	cbz	r4, 800b144 <iprintf+0x14>
 800b13a:	69a3      	ldr	r3, [r4, #24]
 800b13c:	b913      	cbnz	r3, 800b144 <iprintf+0x14>
 800b13e:	4620      	mov	r0, r4
 800b140:	f001 fe72 	bl	800ce28 <__sinit>
 800b144:	ab05      	add	r3, sp, #20
 800b146:	9a04      	ldr	r2, [sp, #16]
 800b148:	68a1      	ldr	r1, [r4, #8]
 800b14a:	9301      	str	r3, [sp, #4]
 800b14c:	4620      	mov	r0, r4
 800b14e:	f003 f95b 	bl	800e408 <_vfiprintf_r>
 800b152:	b002      	add	sp, #8
 800b154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b158:	b004      	add	sp, #16
 800b15a:	4770      	bx	lr
 800b15c:	2000000c 	.word	0x2000000c

0800b160 <_sbrk_r>:
 800b160:	b538      	push	{r3, r4, r5, lr}
 800b162:	4d06      	ldr	r5, [pc, #24]	; (800b17c <_sbrk_r+0x1c>)
 800b164:	2300      	movs	r3, #0
 800b166:	4604      	mov	r4, r0
 800b168:	4608      	mov	r0, r1
 800b16a:	602b      	str	r3, [r5, #0]
 800b16c:	f7f6 fff4 	bl	8002158 <_sbrk>
 800b170:	1c43      	adds	r3, r0, #1
 800b172:	d102      	bne.n	800b17a <_sbrk_r+0x1a>
 800b174:	682b      	ldr	r3, [r5, #0]
 800b176:	b103      	cbz	r3, 800b17a <_sbrk_r+0x1a>
 800b178:	6023      	str	r3, [r4, #0]
 800b17a:	bd38      	pop	{r3, r4, r5, pc}
 800b17c:	200027a0 	.word	0x200027a0

0800b180 <nanf>:
 800b180:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b188 <nanf+0x8>
 800b184:	4770      	bx	lr
 800b186:	bf00      	nop
 800b188:	7fc00000 	.word	0x7fc00000

0800b18c <siprintf>:
 800b18c:	b40e      	push	{r1, r2, r3}
 800b18e:	b500      	push	{lr}
 800b190:	b09c      	sub	sp, #112	; 0x70
 800b192:	ab1d      	add	r3, sp, #116	; 0x74
 800b194:	9002      	str	r0, [sp, #8]
 800b196:	9006      	str	r0, [sp, #24]
 800b198:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b19c:	4809      	ldr	r0, [pc, #36]	; (800b1c4 <siprintf+0x38>)
 800b19e:	9107      	str	r1, [sp, #28]
 800b1a0:	9104      	str	r1, [sp, #16]
 800b1a2:	4909      	ldr	r1, [pc, #36]	; (800b1c8 <siprintf+0x3c>)
 800b1a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1a8:	9105      	str	r1, [sp, #20]
 800b1aa:	6800      	ldr	r0, [r0, #0]
 800b1ac:	9301      	str	r3, [sp, #4]
 800b1ae:	a902      	add	r1, sp, #8
 800b1b0:	f003 f800 	bl	800e1b4 <_svfiprintf_r>
 800b1b4:	9b02      	ldr	r3, [sp, #8]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	701a      	strb	r2, [r3, #0]
 800b1ba:	b01c      	add	sp, #112	; 0x70
 800b1bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1c0:	b003      	add	sp, #12
 800b1c2:	4770      	bx	lr
 800b1c4:	2000000c 	.word	0x2000000c
 800b1c8:	ffff0208 	.word	0xffff0208

0800b1cc <sulp>:
 800b1cc:	b570      	push	{r4, r5, r6, lr}
 800b1ce:	4604      	mov	r4, r0
 800b1d0:	460d      	mov	r5, r1
 800b1d2:	4616      	mov	r6, r2
 800b1d4:	ec45 4b10 	vmov	d0, r4, r5
 800b1d8:	f002 fe2e 	bl	800de38 <__ulp>
 800b1dc:	b17e      	cbz	r6, 800b1fe <sulp+0x32>
 800b1de:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b1e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	dd09      	ble.n	800b1fe <sulp+0x32>
 800b1ea:	051b      	lsls	r3, r3, #20
 800b1ec:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800b1f0:	2000      	movs	r0, #0
 800b1f2:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800b1f6:	ec41 0b17 	vmov	d7, r0, r1
 800b1fa:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b1fe:	bd70      	pop	{r4, r5, r6, pc}

0800b200 <_strtod_l>:
 800b200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b204:	ed2d 8b0e 	vpush	{d8-d14}
 800b208:	b097      	sub	sp, #92	; 0x5c
 800b20a:	461f      	mov	r7, r3
 800b20c:	2300      	movs	r3, #0
 800b20e:	9312      	str	r3, [sp, #72]	; 0x48
 800b210:	4ba1      	ldr	r3, [pc, #644]	; (800b498 <_strtod_l+0x298>)
 800b212:	920d      	str	r2, [sp, #52]	; 0x34
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	9307      	str	r3, [sp, #28]
 800b218:	4604      	mov	r4, r0
 800b21a:	4618      	mov	r0, r3
 800b21c:	468b      	mov	fp, r1
 800b21e:	f7f5 f80f 	bl	8000240 <strlen>
 800b222:	f04f 0800 	mov.w	r8, #0
 800b226:	4605      	mov	r5, r0
 800b228:	f04f 0900 	mov.w	r9, #0
 800b22c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800b230:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b232:	7813      	ldrb	r3, [r2, #0]
 800b234:	2b2b      	cmp	r3, #43	; 0x2b
 800b236:	d04d      	beq.n	800b2d4 <_strtod_l+0xd4>
 800b238:	d83a      	bhi.n	800b2b0 <_strtod_l+0xb0>
 800b23a:	2b0d      	cmp	r3, #13
 800b23c:	d833      	bhi.n	800b2a6 <_strtod_l+0xa6>
 800b23e:	2b08      	cmp	r3, #8
 800b240:	d833      	bhi.n	800b2aa <_strtod_l+0xaa>
 800b242:	2b00      	cmp	r3, #0
 800b244:	d03d      	beq.n	800b2c2 <_strtod_l+0xc2>
 800b246:	2300      	movs	r3, #0
 800b248:	9308      	str	r3, [sp, #32]
 800b24a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800b24c:	7833      	ldrb	r3, [r6, #0]
 800b24e:	2b30      	cmp	r3, #48	; 0x30
 800b250:	f040 80b0 	bne.w	800b3b4 <_strtod_l+0x1b4>
 800b254:	7873      	ldrb	r3, [r6, #1]
 800b256:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b25a:	2b58      	cmp	r3, #88	; 0x58
 800b25c:	d167      	bne.n	800b32e <_strtod_l+0x12e>
 800b25e:	9b08      	ldr	r3, [sp, #32]
 800b260:	9301      	str	r3, [sp, #4]
 800b262:	ab12      	add	r3, sp, #72	; 0x48
 800b264:	9702      	str	r7, [sp, #8]
 800b266:	9300      	str	r3, [sp, #0]
 800b268:	4a8c      	ldr	r2, [pc, #560]	; (800b49c <_strtod_l+0x29c>)
 800b26a:	ab13      	add	r3, sp, #76	; 0x4c
 800b26c:	a911      	add	r1, sp, #68	; 0x44
 800b26e:	4620      	mov	r0, r4
 800b270:	f001 fede 	bl	800d030 <__gethex>
 800b274:	f010 0507 	ands.w	r5, r0, #7
 800b278:	4607      	mov	r7, r0
 800b27a:	d005      	beq.n	800b288 <_strtod_l+0x88>
 800b27c:	2d06      	cmp	r5, #6
 800b27e:	d12b      	bne.n	800b2d8 <_strtod_l+0xd8>
 800b280:	3601      	adds	r6, #1
 800b282:	2300      	movs	r3, #0
 800b284:	9611      	str	r6, [sp, #68]	; 0x44
 800b286:	9308      	str	r3, [sp, #32]
 800b288:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	f040 854e 	bne.w	800bd2c <_strtod_l+0xb2c>
 800b290:	9b08      	ldr	r3, [sp, #32]
 800b292:	b1e3      	cbz	r3, 800b2ce <_strtod_l+0xce>
 800b294:	ec49 8b17 	vmov	d7, r8, r9
 800b298:	eeb1 0b47 	vneg.f64	d0, d7
 800b29c:	b017      	add	sp, #92	; 0x5c
 800b29e:	ecbd 8b0e 	vpop	{d8-d14}
 800b2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a6:	2b20      	cmp	r3, #32
 800b2a8:	d1cd      	bne.n	800b246 <_strtod_l+0x46>
 800b2aa:	3201      	adds	r2, #1
 800b2ac:	9211      	str	r2, [sp, #68]	; 0x44
 800b2ae:	e7bf      	b.n	800b230 <_strtod_l+0x30>
 800b2b0:	2b2d      	cmp	r3, #45	; 0x2d
 800b2b2:	d1c8      	bne.n	800b246 <_strtod_l+0x46>
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	9308      	str	r3, [sp, #32]
 800b2b8:	1c53      	adds	r3, r2, #1
 800b2ba:	9311      	str	r3, [sp, #68]	; 0x44
 800b2bc:	7853      	ldrb	r3, [r2, #1]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d1c3      	bne.n	800b24a <_strtod_l+0x4a>
 800b2c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2c4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	f040 852d 	bne.w	800bd28 <_strtod_l+0xb28>
 800b2ce:	ec49 8b10 	vmov	d0, r8, r9
 800b2d2:	e7e3      	b.n	800b29c <_strtod_l+0x9c>
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	e7ee      	b.n	800b2b6 <_strtod_l+0xb6>
 800b2d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b2da:	b13a      	cbz	r2, 800b2ec <_strtod_l+0xec>
 800b2dc:	2135      	movs	r1, #53	; 0x35
 800b2de:	a814      	add	r0, sp, #80	; 0x50
 800b2e0:	f002 feb2 	bl	800e048 <__copybits>
 800b2e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	f002 fa74 	bl	800d7d4 <_Bfree>
 800b2ec:	3d01      	subs	r5, #1
 800b2ee:	2d04      	cmp	r5, #4
 800b2f0:	d806      	bhi.n	800b300 <_strtod_l+0x100>
 800b2f2:	e8df f005 	tbb	[pc, r5]
 800b2f6:	030a      	.short	0x030a
 800b2f8:	1714      	.short	0x1714
 800b2fa:	0a          	.byte	0x0a
 800b2fb:	00          	.byte	0x00
 800b2fc:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800b300:	073f      	lsls	r7, r7, #28
 800b302:	d5c1      	bpl.n	800b288 <_strtod_l+0x88>
 800b304:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800b308:	e7be      	b.n	800b288 <_strtod_l+0x88>
 800b30a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800b30e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b310:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b314:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b318:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b31c:	e7f0      	b.n	800b300 <_strtod_l+0x100>
 800b31e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800b4a0 <_strtod_l+0x2a0>
 800b322:	e7ed      	b.n	800b300 <_strtod_l+0x100>
 800b324:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b328:	f04f 38ff 	mov.w	r8, #4294967295
 800b32c:	e7e8      	b.n	800b300 <_strtod_l+0x100>
 800b32e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b330:	1c5a      	adds	r2, r3, #1
 800b332:	9211      	str	r2, [sp, #68]	; 0x44
 800b334:	785b      	ldrb	r3, [r3, #1]
 800b336:	2b30      	cmp	r3, #48	; 0x30
 800b338:	d0f9      	beq.n	800b32e <_strtod_l+0x12e>
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d0a4      	beq.n	800b288 <_strtod_l+0x88>
 800b33e:	2301      	movs	r3, #1
 800b340:	f04f 0a00 	mov.w	sl, #0
 800b344:	9304      	str	r3, [sp, #16]
 800b346:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b348:	930a      	str	r3, [sp, #40]	; 0x28
 800b34a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b34e:	f8cd a018 	str.w	sl, [sp, #24]
 800b352:	220a      	movs	r2, #10
 800b354:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b356:	7807      	ldrb	r7, [r0, #0]
 800b358:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800b35c:	b2d9      	uxtb	r1, r3
 800b35e:	2909      	cmp	r1, #9
 800b360:	d92a      	bls.n	800b3b8 <_strtod_l+0x1b8>
 800b362:	9907      	ldr	r1, [sp, #28]
 800b364:	462a      	mov	r2, r5
 800b366:	f003 f9ca 	bl	800e6fe <strncmp>
 800b36a:	2800      	cmp	r0, #0
 800b36c:	d033      	beq.n	800b3d6 <_strtod_l+0x1d6>
 800b36e:	2000      	movs	r0, #0
 800b370:	9b06      	ldr	r3, [sp, #24]
 800b372:	463a      	mov	r2, r7
 800b374:	4601      	mov	r1, r0
 800b376:	4607      	mov	r7, r0
 800b378:	2a65      	cmp	r2, #101	; 0x65
 800b37a:	d001      	beq.n	800b380 <_strtod_l+0x180>
 800b37c:	2a45      	cmp	r2, #69	; 0x45
 800b37e:	d117      	bne.n	800b3b0 <_strtod_l+0x1b0>
 800b380:	b91b      	cbnz	r3, 800b38a <_strtod_l+0x18a>
 800b382:	9b04      	ldr	r3, [sp, #16]
 800b384:	4303      	orrs	r3, r0
 800b386:	d09c      	beq.n	800b2c2 <_strtod_l+0xc2>
 800b388:	2300      	movs	r3, #0
 800b38a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800b38e:	f10b 0201 	add.w	r2, fp, #1
 800b392:	9211      	str	r2, [sp, #68]	; 0x44
 800b394:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800b398:	2a2b      	cmp	r2, #43	; 0x2b
 800b39a:	d071      	beq.n	800b480 <_strtod_l+0x280>
 800b39c:	2a2d      	cmp	r2, #45	; 0x2d
 800b39e:	d077      	beq.n	800b490 <_strtod_l+0x290>
 800b3a0:	f04f 0e00 	mov.w	lr, #0
 800b3a4:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800b3a8:	2d09      	cmp	r5, #9
 800b3aa:	d97f      	bls.n	800b4ac <_strtod_l+0x2ac>
 800b3ac:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800b3b0:	2500      	movs	r5, #0
 800b3b2:	e09b      	b.n	800b4ec <_strtod_l+0x2ec>
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	e7c3      	b.n	800b340 <_strtod_l+0x140>
 800b3b8:	9906      	ldr	r1, [sp, #24]
 800b3ba:	2908      	cmp	r1, #8
 800b3bc:	bfdd      	ittte	le
 800b3be:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b3c0:	fb02 3301 	mlale	r3, r2, r1, r3
 800b3c4:	9309      	strle	r3, [sp, #36]	; 0x24
 800b3c6:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b3ca:	9b06      	ldr	r3, [sp, #24]
 800b3cc:	3001      	adds	r0, #1
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	9306      	str	r3, [sp, #24]
 800b3d2:	9011      	str	r0, [sp, #68]	; 0x44
 800b3d4:	e7be      	b.n	800b354 <_strtod_l+0x154>
 800b3d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b3d8:	195a      	adds	r2, r3, r5
 800b3da:	9211      	str	r2, [sp, #68]	; 0x44
 800b3dc:	5d5a      	ldrb	r2, [r3, r5]
 800b3de:	9b06      	ldr	r3, [sp, #24]
 800b3e0:	b3a3      	cbz	r3, 800b44c <_strtod_l+0x24c>
 800b3e2:	4607      	mov	r7, r0
 800b3e4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b3e8:	2909      	cmp	r1, #9
 800b3ea:	d912      	bls.n	800b412 <_strtod_l+0x212>
 800b3ec:	2101      	movs	r1, #1
 800b3ee:	e7c3      	b.n	800b378 <_strtod_l+0x178>
 800b3f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b3f2:	1c5a      	adds	r2, r3, #1
 800b3f4:	9211      	str	r2, [sp, #68]	; 0x44
 800b3f6:	785a      	ldrb	r2, [r3, #1]
 800b3f8:	3001      	adds	r0, #1
 800b3fa:	2a30      	cmp	r2, #48	; 0x30
 800b3fc:	d0f8      	beq.n	800b3f0 <_strtod_l+0x1f0>
 800b3fe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b402:	2b08      	cmp	r3, #8
 800b404:	f200 8497 	bhi.w	800bd36 <_strtod_l+0xb36>
 800b408:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b40a:	930a      	str	r3, [sp, #40]	; 0x28
 800b40c:	4607      	mov	r7, r0
 800b40e:	2000      	movs	r0, #0
 800b410:	4603      	mov	r3, r0
 800b412:	3a30      	subs	r2, #48	; 0x30
 800b414:	f100 0101 	add.w	r1, r0, #1
 800b418:	d012      	beq.n	800b440 <_strtod_l+0x240>
 800b41a:	440f      	add	r7, r1
 800b41c:	eb00 0c03 	add.w	ip, r0, r3
 800b420:	4619      	mov	r1, r3
 800b422:	250a      	movs	r5, #10
 800b424:	4561      	cmp	r1, ip
 800b426:	d113      	bne.n	800b450 <_strtod_l+0x250>
 800b428:	1819      	adds	r1, r3, r0
 800b42a:	2908      	cmp	r1, #8
 800b42c:	f103 0301 	add.w	r3, r3, #1
 800b430:	4403      	add	r3, r0
 800b432:	dc1c      	bgt.n	800b46e <_strtod_l+0x26e>
 800b434:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b436:	210a      	movs	r1, #10
 800b438:	fb01 2200 	mla	r2, r1, r0, r2
 800b43c:	9209      	str	r2, [sp, #36]	; 0x24
 800b43e:	2100      	movs	r1, #0
 800b440:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b442:	1c50      	adds	r0, r2, #1
 800b444:	9011      	str	r0, [sp, #68]	; 0x44
 800b446:	7852      	ldrb	r2, [r2, #1]
 800b448:	4608      	mov	r0, r1
 800b44a:	e7cb      	b.n	800b3e4 <_strtod_l+0x1e4>
 800b44c:	9806      	ldr	r0, [sp, #24]
 800b44e:	e7d4      	b.n	800b3fa <_strtod_l+0x1fa>
 800b450:	2908      	cmp	r1, #8
 800b452:	dc04      	bgt.n	800b45e <_strtod_l+0x25e>
 800b454:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b456:	436e      	muls	r6, r5
 800b458:	9609      	str	r6, [sp, #36]	; 0x24
 800b45a:	3101      	adds	r1, #1
 800b45c:	e7e2      	b.n	800b424 <_strtod_l+0x224>
 800b45e:	f101 0e01 	add.w	lr, r1, #1
 800b462:	f1be 0f10 	cmp.w	lr, #16
 800b466:	bfd8      	it	le
 800b468:	fb05 fa0a 	mulle.w	sl, r5, sl
 800b46c:	e7f5      	b.n	800b45a <_strtod_l+0x25a>
 800b46e:	2b10      	cmp	r3, #16
 800b470:	bfdc      	itt	le
 800b472:	210a      	movle	r1, #10
 800b474:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800b478:	e7e1      	b.n	800b43e <_strtod_l+0x23e>
 800b47a:	2700      	movs	r7, #0
 800b47c:	2101      	movs	r1, #1
 800b47e:	e780      	b.n	800b382 <_strtod_l+0x182>
 800b480:	f04f 0e00 	mov.w	lr, #0
 800b484:	f10b 0202 	add.w	r2, fp, #2
 800b488:	9211      	str	r2, [sp, #68]	; 0x44
 800b48a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800b48e:	e789      	b.n	800b3a4 <_strtod_l+0x1a4>
 800b490:	f04f 0e01 	mov.w	lr, #1
 800b494:	e7f6      	b.n	800b484 <_strtod_l+0x284>
 800b496:	bf00      	nop
 800b498:	0800ed5c 	.word	0x0800ed5c
 800b49c:	0800eab0 	.word	0x0800eab0
 800b4a0:	7ff00000 	.word	0x7ff00000
 800b4a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b4a6:	1c55      	adds	r5, r2, #1
 800b4a8:	9511      	str	r5, [sp, #68]	; 0x44
 800b4aa:	7852      	ldrb	r2, [r2, #1]
 800b4ac:	2a30      	cmp	r2, #48	; 0x30
 800b4ae:	d0f9      	beq.n	800b4a4 <_strtod_l+0x2a4>
 800b4b0:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800b4b4:	2d08      	cmp	r5, #8
 800b4b6:	f63f af7b 	bhi.w	800b3b0 <_strtod_l+0x1b0>
 800b4ba:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800b4be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b4c0:	9207      	str	r2, [sp, #28]
 800b4c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b4c4:	1c55      	adds	r5, r2, #1
 800b4c6:	9511      	str	r5, [sp, #68]	; 0x44
 800b4c8:	7852      	ldrb	r2, [r2, #1]
 800b4ca:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b4ce:	2e09      	cmp	r6, #9
 800b4d0:	d937      	bls.n	800b542 <_strtod_l+0x342>
 800b4d2:	9e07      	ldr	r6, [sp, #28]
 800b4d4:	1bad      	subs	r5, r5, r6
 800b4d6:	2d08      	cmp	r5, #8
 800b4d8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800b4dc:	dc02      	bgt.n	800b4e4 <_strtod_l+0x2e4>
 800b4de:	4565      	cmp	r5, ip
 800b4e0:	bfa8      	it	ge
 800b4e2:	4665      	movge	r5, ip
 800b4e4:	f1be 0f00 	cmp.w	lr, #0
 800b4e8:	d000      	beq.n	800b4ec <_strtod_l+0x2ec>
 800b4ea:	426d      	negs	r5, r5
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d14d      	bne.n	800b58c <_strtod_l+0x38c>
 800b4f0:	9b04      	ldr	r3, [sp, #16]
 800b4f2:	4303      	orrs	r3, r0
 800b4f4:	f47f aec8 	bne.w	800b288 <_strtod_l+0x88>
 800b4f8:	2900      	cmp	r1, #0
 800b4fa:	f47f aee2 	bne.w	800b2c2 <_strtod_l+0xc2>
 800b4fe:	2a69      	cmp	r2, #105	; 0x69
 800b500:	d027      	beq.n	800b552 <_strtod_l+0x352>
 800b502:	dc24      	bgt.n	800b54e <_strtod_l+0x34e>
 800b504:	2a49      	cmp	r2, #73	; 0x49
 800b506:	d024      	beq.n	800b552 <_strtod_l+0x352>
 800b508:	2a4e      	cmp	r2, #78	; 0x4e
 800b50a:	f47f aeda 	bne.w	800b2c2 <_strtod_l+0xc2>
 800b50e:	4996      	ldr	r1, [pc, #600]	; (800b768 <_strtod_l+0x568>)
 800b510:	a811      	add	r0, sp, #68	; 0x44
 800b512:	f001 ffe5 	bl	800d4e0 <__match>
 800b516:	2800      	cmp	r0, #0
 800b518:	f43f aed3 	beq.w	800b2c2 <_strtod_l+0xc2>
 800b51c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	2b28      	cmp	r3, #40	; 0x28
 800b522:	d12d      	bne.n	800b580 <_strtod_l+0x380>
 800b524:	4991      	ldr	r1, [pc, #580]	; (800b76c <_strtod_l+0x56c>)
 800b526:	aa14      	add	r2, sp, #80	; 0x50
 800b528:	a811      	add	r0, sp, #68	; 0x44
 800b52a:	f001 ffed 	bl	800d508 <__hexnan>
 800b52e:	2805      	cmp	r0, #5
 800b530:	d126      	bne.n	800b580 <_strtod_l+0x380>
 800b532:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b534:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800b538:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b53c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b540:	e6a2      	b.n	800b288 <_strtod_l+0x88>
 800b542:	250a      	movs	r5, #10
 800b544:	fb05 250c 	mla	r5, r5, ip, r2
 800b548:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800b54c:	e7b9      	b.n	800b4c2 <_strtod_l+0x2c2>
 800b54e:	2a6e      	cmp	r2, #110	; 0x6e
 800b550:	e7db      	b.n	800b50a <_strtod_l+0x30a>
 800b552:	4987      	ldr	r1, [pc, #540]	; (800b770 <_strtod_l+0x570>)
 800b554:	a811      	add	r0, sp, #68	; 0x44
 800b556:	f001 ffc3 	bl	800d4e0 <__match>
 800b55a:	2800      	cmp	r0, #0
 800b55c:	f43f aeb1 	beq.w	800b2c2 <_strtod_l+0xc2>
 800b560:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b562:	4984      	ldr	r1, [pc, #528]	; (800b774 <_strtod_l+0x574>)
 800b564:	3b01      	subs	r3, #1
 800b566:	a811      	add	r0, sp, #68	; 0x44
 800b568:	9311      	str	r3, [sp, #68]	; 0x44
 800b56a:	f001 ffb9 	bl	800d4e0 <__match>
 800b56e:	b910      	cbnz	r0, 800b576 <_strtod_l+0x376>
 800b570:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b572:	3301      	adds	r3, #1
 800b574:	9311      	str	r3, [sp, #68]	; 0x44
 800b576:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800b788 <_strtod_l+0x588>
 800b57a:	f04f 0800 	mov.w	r8, #0
 800b57e:	e683      	b.n	800b288 <_strtod_l+0x88>
 800b580:	487d      	ldr	r0, [pc, #500]	; (800b778 <_strtod_l+0x578>)
 800b582:	f003 f871 	bl	800e668 <nan>
 800b586:	ec59 8b10 	vmov	r8, r9, d0
 800b58a:	e67d      	b.n	800b288 <_strtod_l+0x88>
 800b58c:	1bea      	subs	r2, r5, r7
 800b58e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800b592:	9207      	str	r2, [sp, #28]
 800b594:	9a06      	ldr	r2, [sp, #24]
 800b596:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b59a:	2a00      	cmp	r2, #0
 800b59c:	bf08      	it	eq
 800b59e:	461a      	moveq	r2, r3
 800b5a0:	2b10      	cmp	r3, #16
 800b5a2:	9206      	str	r2, [sp, #24]
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	bfa8      	it	ge
 800b5a8:	2210      	movge	r2, #16
 800b5aa:	2b09      	cmp	r3, #9
 800b5ac:	ec59 8b17 	vmov	r8, r9, d7
 800b5b0:	dd0c      	ble.n	800b5cc <_strtod_l+0x3cc>
 800b5b2:	4972      	ldr	r1, [pc, #456]	; (800b77c <_strtod_l+0x57c>)
 800b5b4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800b5b8:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800b5bc:	ee06 aa90 	vmov	s13, sl
 800b5c0:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800b5c4:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b5c8:	ec59 8b16 	vmov	r8, r9, d6
 800b5cc:	2b0f      	cmp	r3, #15
 800b5ce:	dc36      	bgt.n	800b63e <_strtod_l+0x43e>
 800b5d0:	9907      	ldr	r1, [sp, #28]
 800b5d2:	2900      	cmp	r1, #0
 800b5d4:	f43f ae58 	beq.w	800b288 <_strtod_l+0x88>
 800b5d8:	dd23      	ble.n	800b622 <_strtod_l+0x422>
 800b5da:	2916      	cmp	r1, #22
 800b5dc:	dc0b      	bgt.n	800b5f6 <_strtod_l+0x3f6>
 800b5de:	4b67      	ldr	r3, [pc, #412]	; (800b77c <_strtod_l+0x57c>)
 800b5e0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800b5e4:	ed93 7b00 	vldr	d7, [r3]
 800b5e8:	ec49 8b16 	vmov	d6, r8, r9
 800b5ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b5f0:	ec59 8b17 	vmov	r8, r9, d7
 800b5f4:	e648      	b.n	800b288 <_strtod_l+0x88>
 800b5f6:	9807      	ldr	r0, [sp, #28]
 800b5f8:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800b5fc:	4281      	cmp	r1, r0
 800b5fe:	db1e      	blt.n	800b63e <_strtod_l+0x43e>
 800b600:	4a5e      	ldr	r2, [pc, #376]	; (800b77c <_strtod_l+0x57c>)
 800b602:	f1c3 030f 	rsb	r3, r3, #15
 800b606:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800b60a:	ed91 7b00 	vldr	d7, [r1]
 800b60e:	ec49 8b16 	vmov	d6, r8, r9
 800b612:	1ac3      	subs	r3, r0, r3
 800b614:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b618:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b61c:	ed92 6b00 	vldr	d6, [r2]
 800b620:	e7e4      	b.n	800b5ec <_strtod_l+0x3ec>
 800b622:	9907      	ldr	r1, [sp, #28]
 800b624:	3116      	adds	r1, #22
 800b626:	db0a      	blt.n	800b63e <_strtod_l+0x43e>
 800b628:	4b54      	ldr	r3, [pc, #336]	; (800b77c <_strtod_l+0x57c>)
 800b62a:	1b7d      	subs	r5, r7, r5
 800b62c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b630:	ed95 7b00 	vldr	d7, [r5]
 800b634:	ec49 8b16 	vmov	d6, r8, r9
 800b638:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b63c:	e7d8      	b.n	800b5f0 <_strtod_l+0x3f0>
 800b63e:	9907      	ldr	r1, [sp, #28]
 800b640:	1a9a      	subs	r2, r3, r2
 800b642:	440a      	add	r2, r1
 800b644:	2a00      	cmp	r2, #0
 800b646:	dd6f      	ble.n	800b728 <_strtod_l+0x528>
 800b648:	f012 000f 	ands.w	r0, r2, #15
 800b64c:	d00a      	beq.n	800b664 <_strtod_l+0x464>
 800b64e:	494b      	ldr	r1, [pc, #300]	; (800b77c <_strtod_l+0x57c>)
 800b650:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b654:	ed91 7b00 	vldr	d7, [r1]
 800b658:	ec49 8b16 	vmov	d6, r8, r9
 800b65c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b660:	ec59 8b17 	vmov	r8, r9, d7
 800b664:	f032 020f 	bics.w	r2, r2, #15
 800b668:	d04f      	beq.n	800b70a <_strtod_l+0x50a>
 800b66a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800b66e:	dd22      	ble.n	800b6b6 <_strtod_l+0x4b6>
 800b670:	2500      	movs	r5, #0
 800b672:	462e      	mov	r6, r5
 800b674:	9506      	str	r5, [sp, #24]
 800b676:	462f      	mov	r7, r5
 800b678:	2322      	movs	r3, #34	; 0x22
 800b67a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800b788 <_strtod_l+0x588>
 800b67e:	6023      	str	r3, [r4, #0]
 800b680:	f04f 0800 	mov.w	r8, #0
 800b684:	9b06      	ldr	r3, [sp, #24]
 800b686:	2b00      	cmp	r3, #0
 800b688:	f43f adfe 	beq.w	800b288 <_strtod_l+0x88>
 800b68c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b68e:	4620      	mov	r0, r4
 800b690:	f002 f8a0 	bl	800d7d4 <_Bfree>
 800b694:	4639      	mov	r1, r7
 800b696:	4620      	mov	r0, r4
 800b698:	f002 f89c 	bl	800d7d4 <_Bfree>
 800b69c:	4631      	mov	r1, r6
 800b69e:	4620      	mov	r0, r4
 800b6a0:	f002 f898 	bl	800d7d4 <_Bfree>
 800b6a4:	9906      	ldr	r1, [sp, #24]
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	f002 f894 	bl	800d7d4 <_Bfree>
 800b6ac:	4629      	mov	r1, r5
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	f002 f890 	bl	800d7d4 <_Bfree>
 800b6b4:	e5e8      	b.n	800b288 <_strtod_l+0x88>
 800b6b6:	2000      	movs	r0, #0
 800b6b8:	ec49 8b17 	vmov	d7, r8, r9
 800b6bc:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800b780 <_strtod_l+0x580>
 800b6c0:	1112      	asrs	r2, r2, #4
 800b6c2:	4601      	mov	r1, r0
 800b6c4:	2a01      	cmp	r2, #1
 800b6c6:	dc23      	bgt.n	800b710 <_strtod_l+0x510>
 800b6c8:	b108      	cbz	r0, 800b6ce <_strtod_l+0x4ce>
 800b6ca:	ec59 8b17 	vmov	r8, r9, d7
 800b6ce:	4a2c      	ldr	r2, [pc, #176]	; (800b780 <_strtod_l+0x580>)
 800b6d0:	482c      	ldr	r0, [pc, #176]	; (800b784 <_strtod_l+0x584>)
 800b6d2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b6d6:	ed92 7b00 	vldr	d7, [r2]
 800b6da:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b6de:	ec49 8b16 	vmov	d6, r8, r9
 800b6e2:	4a29      	ldr	r2, [pc, #164]	; (800b788 <_strtod_l+0x588>)
 800b6e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b6e8:	ee17 1a90 	vmov	r1, s15
 800b6ec:	400a      	ands	r2, r1
 800b6ee:	4282      	cmp	r2, r0
 800b6f0:	ec59 8b17 	vmov	r8, r9, d7
 800b6f4:	d8bc      	bhi.n	800b670 <_strtod_l+0x470>
 800b6f6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800b6fa:	4282      	cmp	r2, r0
 800b6fc:	bf86      	itte	hi
 800b6fe:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800b78c <_strtod_l+0x58c>
 800b702:	f04f 38ff 	movhi.w	r8, #4294967295
 800b706:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800b70a:	2200      	movs	r2, #0
 800b70c:	9204      	str	r2, [sp, #16]
 800b70e:	e078      	b.n	800b802 <_strtod_l+0x602>
 800b710:	07d6      	lsls	r6, r2, #31
 800b712:	d504      	bpl.n	800b71e <_strtod_l+0x51e>
 800b714:	ed9c 6b00 	vldr	d6, [ip]
 800b718:	2001      	movs	r0, #1
 800b71a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b71e:	3101      	adds	r1, #1
 800b720:	1052      	asrs	r2, r2, #1
 800b722:	f10c 0c08 	add.w	ip, ip, #8
 800b726:	e7cd      	b.n	800b6c4 <_strtod_l+0x4c4>
 800b728:	d0ef      	beq.n	800b70a <_strtod_l+0x50a>
 800b72a:	4252      	negs	r2, r2
 800b72c:	f012 000f 	ands.w	r0, r2, #15
 800b730:	d00a      	beq.n	800b748 <_strtod_l+0x548>
 800b732:	4912      	ldr	r1, [pc, #72]	; (800b77c <_strtod_l+0x57c>)
 800b734:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b738:	ed91 7b00 	vldr	d7, [r1]
 800b73c:	ec49 8b16 	vmov	d6, r8, r9
 800b740:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b744:	ec59 8b17 	vmov	r8, r9, d7
 800b748:	1112      	asrs	r2, r2, #4
 800b74a:	d0de      	beq.n	800b70a <_strtod_l+0x50a>
 800b74c:	2a1f      	cmp	r2, #31
 800b74e:	dd1f      	ble.n	800b790 <_strtod_l+0x590>
 800b750:	2500      	movs	r5, #0
 800b752:	462e      	mov	r6, r5
 800b754:	9506      	str	r5, [sp, #24]
 800b756:	462f      	mov	r7, r5
 800b758:	2322      	movs	r3, #34	; 0x22
 800b75a:	f04f 0800 	mov.w	r8, #0
 800b75e:	f04f 0900 	mov.w	r9, #0
 800b762:	6023      	str	r3, [r4, #0]
 800b764:	e78e      	b.n	800b684 <_strtod_l+0x484>
 800b766:	bf00      	nop
 800b768:	0800ea81 	.word	0x0800ea81
 800b76c:	0800eac4 	.word	0x0800eac4
 800b770:	0800ea79 	.word	0x0800ea79
 800b774:	0800ec04 	.word	0x0800ec04
 800b778:	0800ef18 	.word	0x0800ef18
 800b77c:	0800edf8 	.word	0x0800edf8
 800b780:	0800edd0 	.word	0x0800edd0
 800b784:	7ca00000 	.word	0x7ca00000
 800b788:	7ff00000 	.word	0x7ff00000
 800b78c:	7fefffff 	.word	0x7fefffff
 800b790:	f012 0110 	ands.w	r1, r2, #16
 800b794:	bf18      	it	ne
 800b796:	216a      	movne	r1, #106	; 0x6a
 800b798:	9104      	str	r1, [sp, #16]
 800b79a:	ec49 8b17 	vmov	d7, r8, r9
 800b79e:	49be      	ldr	r1, [pc, #760]	; (800ba98 <_strtod_l+0x898>)
 800b7a0:	2000      	movs	r0, #0
 800b7a2:	07d6      	lsls	r6, r2, #31
 800b7a4:	d504      	bpl.n	800b7b0 <_strtod_l+0x5b0>
 800b7a6:	ed91 6b00 	vldr	d6, [r1]
 800b7aa:	2001      	movs	r0, #1
 800b7ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b7b0:	1052      	asrs	r2, r2, #1
 800b7b2:	f101 0108 	add.w	r1, r1, #8
 800b7b6:	d1f4      	bne.n	800b7a2 <_strtod_l+0x5a2>
 800b7b8:	b108      	cbz	r0, 800b7be <_strtod_l+0x5be>
 800b7ba:	ec59 8b17 	vmov	r8, r9, d7
 800b7be:	9a04      	ldr	r2, [sp, #16]
 800b7c0:	b1c2      	cbz	r2, 800b7f4 <_strtod_l+0x5f4>
 800b7c2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800b7c6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800b7ca:	2a00      	cmp	r2, #0
 800b7cc:	4648      	mov	r0, r9
 800b7ce:	dd11      	ble.n	800b7f4 <_strtod_l+0x5f4>
 800b7d0:	2a1f      	cmp	r2, #31
 800b7d2:	f340 812e 	ble.w	800ba32 <_strtod_l+0x832>
 800b7d6:	2a34      	cmp	r2, #52	; 0x34
 800b7d8:	bfde      	ittt	le
 800b7da:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800b7de:	f04f 32ff 	movle.w	r2, #4294967295
 800b7e2:	fa02 f101 	lslle.w	r1, r2, r1
 800b7e6:	f04f 0800 	mov.w	r8, #0
 800b7ea:	bfcc      	ite	gt
 800b7ec:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b7f0:	ea01 0900 	andle.w	r9, r1, r0
 800b7f4:	ec49 8b17 	vmov	d7, r8, r9
 800b7f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b800:	d0a6      	beq.n	800b750 <_strtod_l+0x550>
 800b802:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b804:	9200      	str	r2, [sp, #0]
 800b806:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b808:	9a06      	ldr	r2, [sp, #24]
 800b80a:	4620      	mov	r0, r4
 800b80c:	f002 f84a 	bl	800d8a4 <__s2b>
 800b810:	9006      	str	r0, [sp, #24]
 800b812:	2800      	cmp	r0, #0
 800b814:	f43f af2c 	beq.w	800b670 <_strtod_l+0x470>
 800b818:	9b07      	ldr	r3, [sp, #28]
 800b81a:	1b7d      	subs	r5, r7, r5
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	bfb4      	ite	lt
 800b820:	462b      	movlt	r3, r5
 800b822:	2300      	movge	r3, #0
 800b824:	9309      	str	r3, [sp, #36]	; 0x24
 800b826:	9b07      	ldr	r3, [sp, #28]
 800b828:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800ba78 <_strtod_l+0x878>
 800b82c:	ed9f ab94 	vldr	d10, [pc, #592]	; 800ba80 <_strtod_l+0x880>
 800b830:	ed9f bb95 	vldr	d11, [pc, #596]	; 800ba88 <_strtod_l+0x888>
 800b834:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b838:	2500      	movs	r5, #0
 800b83a:	930c      	str	r3, [sp, #48]	; 0x30
 800b83c:	462e      	mov	r6, r5
 800b83e:	9b06      	ldr	r3, [sp, #24]
 800b840:	4620      	mov	r0, r4
 800b842:	6859      	ldr	r1, [r3, #4]
 800b844:	f001 ff86 	bl	800d754 <_Balloc>
 800b848:	4607      	mov	r7, r0
 800b84a:	2800      	cmp	r0, #0
 800b84c:	f43f af14 	beq.w	800b678 <_strtod_l+0x478>
 800b850:	9b06      	ldr	r3, [sp, #24]
 800b852:	691a      	ldr	r2, [r3, #16]
 800b854:	3202      	adds	r2, #2
 800b856:	f103 010c 	add.w	r1, r3, #12
 800b85a:	0092      	lsls	r2, r2, #2
 800b85c:	300c      	adds	r0, #12
 800b85e:	f7fe fd29 	bl	800a2b4 <memcpy>
 800b862:	ec49 8b10 	vmov	d0, r8, r9
 800b866:	aa14      	add	r2, sp, #80	; 0x50
 800b868:	a913      	add	r1, sp, #76	; 0x4c
 800b86a:	4620      	mov	r0, r4
 800b86c:	f002 fb60 	bl	800df30 <__d2b>
 800b870:	ec49 8b18 	vmov	d8, r8, r9
 800b874:	9012      	str	r0, [sp, #72]	; 0x48
 800b876:	2800      	cmp	r0, #0
 800b878:	f43f aefe 	beq.w	800b678 <_strtod_l+0x478>
 800b87c:	2101      	movs	r1, #1
 800b87e:	4620      	mov	r0, r4
 800b880:	f002 f8aa 	bl	800d9d8 <__i2b>
 800b884:	4606      	mov	r6, r0
 800b886:	2800      	cmp	r0, #0
 800b888:	f43f aef6 	beq.w	800b678 <_strtod_l+0x478>
 800b88c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b88e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800b890:	2b00      	cmp	r3, #0
 800b892:	bfab      	itete	ge
 800b894:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800b896:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800b898:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800b89c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800b8a0:	bfac      	ite	ge
 800b8a2:	eb03 0b02 	addge.w	fp, r3, r2
 800b8a6:	eba2 0a03 	sublt.w	sl, r2, r3
 800b8aa:	9a04      	ldr	r2, [sp, #16]
 800b8ac:	1a9b      	subs	r3, r3, r2
 800b8ae:	440b      	add	r3, r1
 800b8b0:	4a7a      	ldr	r2, [pc, #488]	; (800ba9c <_strtod_l+0x89c>)
 800b8b2:	3b01      	subs	r3, #1
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800b8ba:	f280 80cd 	bge.w	800ba58 <_strtod_l+0x858>
 800b8be:	1ad2      	subs	r2, r2, r3
 800b8c0:	2a1f      	cmp	r2, #31
 800b8c2:	eba1 0102 	sub.w	r1, r1, r2
 800b8c6:	f04f 0001 	mov.w	r0, #1
 800b8ca:	f300 80b9 	bgt.w	800ba40 <_strtod_l+0x840>
 800b8ce:	fa00 f302 	lsl.w	r3, r0, r2
 800b8d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	930a      	str	r3, [sp, #40]	; 0x28
 800b8d8:	eb0b 0301 	add.w	r3, fp, r1
 800b8dc:	9a04      	ldr	r2, [sp, #16]
 800b8de:	459b      	cmp	fp, r3
 800b8e0:	448a      	add	sl, r1
 800b8e2:	4492      	add	sl, r2
 800b8e4:	465a      	mov	r2, fp
 800b8e6:	bfa8      	it	ge
 800b8e8:	461a      	movge	r2, r3
 800b8ea:	4552      	cmp	r2, sl
 800b8ec:	bfa8      	it	ge
 800b8ee:	4652      	movge	r2, sl
 800b8f0:	2a00      	cmp	r2, #0
 800b8f2:	bfc2      	ittt	gt
 800b8f4:	1a9b      	subgt	r3, r3, r2
 800b8f6:	ebaa 0a02 	subgt.w	sl, sl, r2
 800b8fa:	ebab 0b02 	subgt.w	fp, fp, r2
 800b8fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b900:	2a00      	cmp	r2, #0
 800b902:	dd18      	ble.n	800b936 <_strtod_l+0x736>
 800b904:	4631      	mov	r1, r6
 800b906:	4620      	mov	r0, r4
 800b908:	930f      	str	r3, [sp, #60]	; 0x3c
 800b90a:	f002 f925 	bl	800db58 <__pow5mult>
 800b90e:	4606      	mov	r6, r0
 800b910:	2800      	cmp	r0, #0
 800b912:	f43f aeb1 	beq.w	800b678 <_strtod_l+0x478>
 800b916:	4601      	mov	r1, r0
 800b918:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b91a:	4620      	mov	r0, r4
 800b91c:	f002 f872 	bl	800da04 <__multiply>
 800b920:	900e      	str	r0, [sp, #56]	; 0x38
 800b922:	2800      	cmp	r0, #0
 800b924:	f43f aea8 	beq.w	800b678 <_strtod_l+0x478>
 800b928:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b92a:	4620      	mov	r0, r4
 800b92c:	f001 ff52 	bl	800d7d4 <_Bfree>
 800b930:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b932:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b934:	9212      	str	r2, [sp, #72]	; 0x48
 800b936:	2b00      	cmp	r3, #0
 800b938:	f300 8093 	bgt.w	800ba62 <_strtod_l+0x862>
 800b93c:	9b07      	ldr	r3, [sp, #28]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	dd08      	ble.n	800b954 <_strtod_l+0x754>
 800b942:	4639      	mov	r1, r7
 800b944:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b946:	4620      	mov	r0, r4
 800b948:	f002 f906 	bl	800db58 <__pow5mult>
 800b94c:	4607      	mov	r7, r0
 800b94e:	2800      	cmp	r0, #0
 800b950:	f43f ae92 	beq.w	800b678 <_strtod_l+0x478>
 800b954:	f1ba 0f00 	cmp.w	sl, #0
 800b958:	dd08      	ble.n	800b96c <_strtod_l+0x76c>
 800b95a:	4639      	mov	r1, r7
 800b95c:	4652      	mov	r2, sl
 800b95e:	4620      	mov	r0, r4
 800b960:	f002 f954 	bl	800dc0c <__lshift>
 800b964:	4607      	mov	r7, r0
 800b966:	2800      	cmp	r0, #0
 800b968:	f43f ae86 	beq.w	800b678 <_strtod_l+0x478>
 800b96c:	f1bb 0f00 	cmp.w	fp, #0
 800b970:	dd08      	ble.n	800b984 <_strtod_l+0x784>
 800b972:	4631      	mov	r1, r6
 800b974:	465a      	mov	r2, fp
 800b976:	4620      	mov	r0, r4
 800b978:	f002 f948 	bl	800dc0c <__lshift>
 800b97c:	4606      	mov	r6, r0
 800b97e:	2800      	cmp	r0, #0
 800b980:	f43f ae7a 	beq.w	800b678 <_strtod_l+0x478>
 800b984:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b986:	463a      	mov	r2, r7
 800b988:	4620      	mov	r0, r4
 800b98a:	f002 f9cb 	bl	800dd24 <__mdiff>
 800b98e:	4605      	mov	r5, r0
 800b990:	2800      	cmp	r0, #0
 800b992:	f43f ae71 	beq.w	800b678 <_strtod_l+0x478>
 800b996:	2300      	movs	r3, #0
 800b998:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800b99c:	60c3      	str	r3, [r0, #12]
 800b99e:	4631      	mov	r1, r6
 800b9a0:	f002 f9a4 	bl	800dcec <__mcmp>
 800b9a4:	2800      	cmp	r0, #0
 800b9a6:	da7d      	bge.n	800baa4 <_strtod_l+0x8a4>
 800b9a8:	ea5a 0308 	orrs.w	r3, sl, r8
 800b9ac:	f040 80a3 	bne.w	800baf6 <_strtod_l+0x8f6>
 800b9b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	f040 809e 	bne.w	800baf6 <_strtod_l+0x8f6>
 800b9ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b9be:	0d1b      	lsrs	r3, r3, #20
 800b9c0:	051b      	lsls	r3, r3, #20
 800b9c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b9c6:	f240 8096 	bls.w	800baf6 <_strtod_l+0x8f6>
 800b9ca:	696b      	ldr	r3, [r5, #20]
 800b9cc:	b91b      	cbnz	r3, 800b9d6 <_strtod_l+0x7d6>
 800b9ce:	692b      	ldr	r3, [r5, #16]
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	f340 8090 	ble.w	800baf6 <_strtod_l+0x8f6>
 800b9d6:	4629      	mov	r1, r5
 800b9d8:	2201      	movs	r2, #1
 800b9da:	4620      	mov	r0, r4
 800b9dc:	f002 f916 	bl	800dc0c <__lshift>
 800b9e0:	4631      	mov	r1, r6
 800b9e2:	4605      	mov	r5, r0
 800b9e4:	f002 f982 	bl	800dcec <__mcmp>
 800b9e8:	2800      	cmp	r0, #0
 800b9ea:	f340 8084 	ble.w	800baf6 <_strtod_l+0x8f6>
 800b9ee:	9904      	ldr	r1, [sp, #16]
 800b9f0:	4a2b      	ldr	r2, [pc, #172]	; (800baa0 <_strtod_l+0x8a0>)
 800b9f2:	464b      	mov	r3, r9
 800b9f4:	2900      	cmp	r1, #0
 800b9f6:	f000 809d 	beq.w	800bb34 <_strtod_l+0x934>
 800b9fa:	ea02 0109 	and.w	r1, r2, r9
 800b9fe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ba02:	f300 8097 	bgt.w	800bb34 <_strtod_l+0x934>
 800ba06:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ba0a:	f77f aea5 	ble.w	800b758 <_strtod_l+0x558>
 800ba0e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ba90 <_strtod_l+0x890>
 800ba12:	ec49 8b16 	vmov	d6, r8, r9
 800ba16:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ba1a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ba1e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800ba22:	4313      	orrs	r3, r2
 800ba24:	bf08      	it	eq
 800ba26:	2322      	moveq	r3, #34	; 0x22
 800ba28:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ba2c:	bf08      	it	eq
 800ba2e:	6023      	streq	r3, [r4, #0]
 800ba30:	e62c      	b.n	800b68c <_strtod_l+0x48c>
 800ba32:	f04f 31ff 	mov.w	r1, #4294967295
 800ba36:	fa01 f202 	lsl.w	r2, r1, r2
 800ba3a:	ea02 0808 	and.w	r8, r2, r8
 800ba3e:	e6d9      	b.n	800b7f4 <_strtod_l+0x5f4>
 800ba40:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800ba44:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800ba48:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800ba4c:	33e2      	adds	r3, #226	; 0xe2
 800ba4e:	fa00 f303 	lsl.w	r3, r0, r3
 800ba52:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800ba56:	e73f      	b.n	800b8d8 <_strtod_l+0x6d8>
 800ba58:	2200      	movs	r2, #0
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ba60:	e73a      	b.n	800b8d8 <_strtod_l+0x6d8>
 800ba62:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ba64:	461a      	mov	r2, r3
 800ba66:	4620      	mov	r0, r4
 800ba68:	f002 f8d0 	bl	800dc0c <__lshift>
 800ba6c:	9012      	str	r0, [sp, #72]	; 0x48
 800ba6e:	2800      	cmp	r0, #0
 800ba70:	f47f af64 	bne.w	800b93c <_strtod_l+0x73c>
 800ba74:	e600      	b.n	800b678 <_strtod_l+0x478>
 800ba76:	bf00      	nop
 800ba78:	94a03595 	.word	0x94a03595
 800ba7c:	3fcfffff 	.word	0x3fcfffff
 800ba80:	94a03595 	.word	0x94a03595
 800ba84:	3fdfffff 	.word	0x3fdfffff
 800ba88:	35afe535 	.word	0x35afe535
 800ba8c:	3fe00000 	.word	0x3fe00000
 800ba90:	00000000 	.word	0x00000000
 800ba94:	39500000 	.word	0x39500000
 800ba98:	0800ead8 	.word	0x0800ead8
 800ba9c:	fffffc02 	.word	0xfffffc02
 800baa0:	7ff00000 	.word	0x7ff00000
 800baa4:	46cb      	mov	fp, r9
 800baa6:	d15f      	bne.n	800bb68 <_strtod_l+0x968>
 800baa8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800baac:	f1ba 0f00 	cmp.w	sl, #0
 800bab0:	d02a      	beq.n	800bb08 <_strtod_l+0x908>
 800bab2:	4aa7      	ldr	r2, [pc, #668]	; (800bd50 <_strtod_l+0xb50>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d12b      	bne.n	800bb10 <_strtod_l+0x910>
 800bab8:	9b04      	ldr	r3, [sp, #16]
 800baba:	4642      	mov	r2, r8
 800babc:	b1fb      	cbz	r3, 800bafe <_strtod_l+0x8fe>
 800babe:	4ba5      	ldr	r3, [pc, #660]	; (800bd54 <_strtod_l+0xb54>)
 800bac0:	ea09 0303 	and.w	r3, r9, r3
 800bac4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bac8:	f04f 31ff 	mov.w	r1, #4294967295
 800bacc:	d81a      	bhi.n	800bb04 <_strtod_l+0x904>
 800bace:	0d1b      	lsrs	r3, r3, #20
 800bad0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bad4:	fa01 f303 	lsl.w	r3, r1, r3
 800bad8:	429a      	cmp	r2, r3
 800bada:	d119      	bne.n	800bb10 <_strtod_l+0x910>
 800badc:	4b9e      	ldr	r3, [pc, #632]	; (800bd58 <_strtod_l+0xb58>)
 800bade:	459b      	cmp	fp, r3
 800bae0:	d102      	bne.n	800bae8 <_strtod_l+0x8e8>
 800bae2:	3201      	adds	r2, #1
 800bae4:	f43f adc8 	beq.w	800b678 <_strtod_l+0x478>
 800bae8:	4b9a      	ldr	r3, [pc, #616]	; (800bd54 <_strtod_l+0xb54>)
 800baea:	ea0b 0303 	and.w	r3, fp, r3
 800baee:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800baf2:	f04f 0800 	mov.w	r8, #0
 800baf6:	9b04      	ldr	r3, [sp, #16]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d188      	bne.n	800ba0e <_strtod_l+0x80e>
 800bafc:	e5c6      	b.n	800b68c <_strtod_l+0x48c>
 800bafe:	f04f 33ff 	mov.w	r3, #4294967295
 800bb02:	e7e9      	b.n	800bad8 <_strtod_l+0x8d8>
 800bb04:	460b      	mov	r3, r1
 800bb06:	e7e7      	b.n	800bad8 <_strtod_l+0x8d8>
 800bb08:	ea53 0308 	orrs.w	r3, r3, r8
 800bb0c:	f43f af6f 	beq.w	800b9ee <_strtod_l+0x7ee>
 800bb10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb12:	b1cb      	cbz	r3, 800bb48 <_strtod_l+0x948>
 800bb14:	ea13 0f0b 	tst.w	r3, fp
 800bb18:	d0ed      	beq.n	800baf6 <_strtod_l+0x8f6>
 800bb1a:	9a04      	ldr	r2, [sp, #16]
 800bb1c:	4640      	mov	r0, r8
 800bb1e:	4649      	mov	r1, r9
 800bb20:	f1ba 0f00 	cmp.w	sl, #0
 800bb24:	d014      	beq.n	800bb50 <_strtod_l+0x950>
 800bb26:	f7ff fb51 	bl	800b1cc <sulp>
 800bb2a:	ee38 7b00 	vadd.f64	d7, d8, d0
 800bb2e:	ec59 8b17 	vmov	r8, r9, d7
 800bb32:	e7e0      	b.n	800baf6 <_strtod_l+0x8f6>
 800bb34:	4013      	ands	r3, r2
 800bb36:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bb3a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800bb3e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800bb42:	f04f 38ff 	mov.w	r8, #4294967295
 800bb46:	e7d6      	b.n	800baf6 <_strtod_l+0x8f6>
 800bb48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb4a:	ea13 0f08 	tst.w	r3, r8
 800bb4e:	e7e3      	b.n	800bb18 <_strtod_l+0x918>
 800bb50:	f7ff fb3c 	bl	800b1cc <sulp>
 800bb54:	ee38 0b40 	vsub.f64	d0, d8, d0
 800bb58:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800bb5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb60:	ec59 8b10 	vmov	r8, r9, d0
 800bb64:	d1c7      	bne.n	800baf6 <_strtod_l+0x8f6>
 800bb66:	e5f7      	b.n	800b758 <_strtod_l+0x558>
 800bb68:	4631      	mov	r1, r6
 800bb6a:	4628      	mov	r0, r5
 800bb6c:	f002 fa3c 	bl	800dfe8 <__ratio>
 800bb70:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800bb74:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bb78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb7c:	d865      	bhi.n	800bc4a <_strtod_l+0xa4a>
 800bb7e:	f1ba 0f00 	cmp.w	sl, #0
 800bb82:	d042      	beq.n	800bc0a <_strtod_l+0xa0a>
 800bb84:	4b75      	ldr	r3, [pc, #468]	; (800bd5c <_strtod_l+0xb5c>)
 800bb86:	2200      	movs	r2, #0
 800bb88:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800bb8c:	4871      	ldr	r0, [pc, #452]	; (800bd54 <_strtod_l+0xb54>)
 800bb8e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800bd68 <_strtod_l+0xb68>
 800bb92:	ea0b 0100 	and.w	r1, fp, r0
 800bb96:	4561      	cmp	r1, ip
 800bb98:	f040 808e 	bne.w	800bcb8 <_strtod_l+0xab8>
 800bb9c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800bba0:	ec49 8b10 	vmov	d0, r8, r9
 800bba4:	ec43 2b1c 	vmov	d12, r2, r3
 800bba8:	910a      	str	r1, [sp, #40]	; 0x28
 800bbaa:	f002 f945 	bl	800de38 <__ulp>
 800bbae:	ec49 8b1e 	vmov	d14, r8, r9
 800bbb2:	4868      	ldr	r0, [pc, #416]	; (800bd54 <_strtod_l+0xb54>)
 800bbb4:	eeac eb00 	vfma.f64	d14, d12, d0
 800bbb8:	ee1e 3a90 	vmov	r3, s29
 800bbbc:	4a68      	ldr	r2, [pc, #416]	; (800bd60 <_strtod_l+0xb60>)
 800bbbe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bbc0:	4018      	ands	r0, r3
 800bbc2:	4290      	cmp	r0, r2
 800bbc4:	ec59 8b1e 	vmov	r8, r9, d14
 800bbc8:	d94e      	bls.n	800bc68 <_strtod_l+0xa68>
 800bbca:	ee18 3a90 	vmov	r3, s17
 800bbce:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800bbd2:	4293      	cmp	r3, r2
 800bbd4:	d104      	bne.n	800bbe0 <_strtod_l+0x9e0>
 800bbd6:	ee18 3a10 	vmov	r3, s16
 800bbda:	3301      	adds	r3, #1
 800bbdc:	f43f ad4c 	beq.w	800b678 <_strtod_l+0x478>
 800bbe0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800bd58 <_strtod_l+0xb58>
 800bbe4:	f04f 38ff 	mov.w	r8, #4294967295
 800bbe8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bbea:	4620      	mov	r0, r4
 800bbec:	f001 fdf2 	bl	800d7d4 <_Bfree>
 800bbf0:	4639      	mov	r1, r7
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	f001 fdee 	bl	800d7d4 <_Bfree>
 800bbf8:	4631      	mov	r1, r6
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	f001 fdea 	bl	800d7d4 <_Bfree>
 800bc00:	4629      	mov	r1, r5
 800bc02:	4620      	mov	r0, r4
 800bc04:	f001 fde6 	bl	800d7d4 <_Bfree>
 800bc08:	e619      	b.n	800b83e <_strtod_l+0x63e>
 800bc0a:	f1b8 0f00 	cmp.w	r8, #0
 800bc0e:	d112      	bne.n	800bc36 <_strtod_l+0xa36>
 800bc10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bc14:	b9b3      	cbnz	r3, 800bc44 <_strtod_l+0xa44>
 800bc16:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800bc1a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bc1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc22:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800bc26:	bf58      	it	pl
 800bc28:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800bc2c:	eeb1 7b4d 	vneg.f64	d7, d13
 800bc30:	ec53 2b17 	vmov	r2, r3, d7
 800bc34:	e7aa      	b.n	800bb8c <_strtod_l+0x98c>
 800bc36:	f1b8 0f01 	cmp.w	r8, #1
 800bc3a:	d103      	bne.n	800bc44 <_strtod_l+0xa44>
 800bc3c:	f1b9 0f00 	cmp.w	r9, #0
 800bc40:	f43f ad8a 	beq.w	800b758 <_strtod_l+0x558>
 800bc44:	4b47      	ldr	r3, [pc, #284]	; (800bd64 <_strtod_l+0xb64>)
 800bc46:	2200      	movs	r2, #0
 800bc48:	e79e      	b.n	800bb88 <_strtod_l+0x988>
 800bc4a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800bc4e:	ee20 db0d 	vmul.f64	d13, d0, d13
 800bc52:	f1ba 0f00 	cmp.w	sl, #0
 800bc56:	d104      	bne.n	800bc62 <_strtod_l+0xa62>
 800bc58:	eeb1 7b4d 	vneg.f64	d7, d13
 800bc5c:	ec53 2b17 	vmov	r2, r3, d7
 800bc60:	e794      	b.n	800bb8c <_strtod_l+0x98c>
 800bc62:	eeb0 7b4d 	vmov.f64	d7, d13
 800bc66:	e7f9      	b.n	800bc5c <_strtod_l+0xa5c>
 800bc68:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800bc6c:	9b04      	ldr	r3, [sp, #16]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d1ba      	bne.n	800bbe8 <_strtod_l+0x9e8>
 800bc72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bc76:	0d1b      	lsrs	r3, r3, #20
 800bc78:	051b      	lsls	r3, r3, #20
 800bc7a:	4299      	cmp	r1, r3
 800bc7c:	d1b4      	bne.n	800bbe8 <_strtod_l+0x9e8>
 800bc7e:	ec51 0b1d 	vmov	r0, r1, d13
 800bc82:	f7f4 fd09 	bl	8000698 <__aeabi_d2lz>
 800bc86:	f7f4 fcc1 	bl	800060c <__aeabi_l2d>
 800bc8a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bc8e:	ec41 0b17 	vmov	d7, r0, r1
 800bc92:	ea43 0308 	orr.w	r3, r3, r8
 800bc96:	ea53 030a 	orrs.w	r3, r3, sl
 800bc9a:	ee3d db47 	vsub.f64	d13, d13, d7
 800bc9e:	d03c      	beq.n	800bd1a <_strtod_l+0xb1a>
 800bca0:	eeb4 dbca 	vcmpe.f64	d13, d10
 800bca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bca8:	f53f acf0 	bmi.w	800b68c <_strtod_l+0x48c>
 800bcac:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800bcb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcb4:	dd98      	ble.n	800bbe8 <_strtod_l+0x9e8>
 800bcb6:	e4e9      	b.n	800b68c <_strtod_l+0x48c>
 800bcb8:	9804      	ldr	r0, [sp, #16]
 800bcba:	b1f0      	cbz	r0, 800bcfa <_strtod_l+0xafa>
 800bcbc:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800bcc0:	d81b      	bhi.n	800bcfa <_strtod_l+0xafa>
 800bcc2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800bd48 <_strtod_l+0xb48>
 800bcc6:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800bcca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcce:	d811      	bhi.n	800bcf4 <_strtod_l+0xaf4>
 800bcd0:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800bcd4:	ee1d 3a10 	vmov	r3, s26
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	bf38      	it	cc
 800bcdc:	2301      	movcc	r3, #1
 800bcde:	ee0d 3a10 	vmov	s26, r3
 800bce2:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800bce6:	f1ba 0f00 	cmp.w	sl, #0
 800bcea:	d113      	bne.n	800bd14 <_strtod_l+0xb14>
 800bcec:	eeb1 7b4d 	vneg.f64	d7, d13
 800bcf0:	ec53 2b17 	vmov	r2, r3, d7
 800bcf4:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800bcf8:	1a43      	subs	r3, r0, r1
 800bcfa:	eeb0 0b48 	vmov.f64	d0, d8
 800bcfe:	ec43 2b1c 	vmov	d12, r2, r3
 800bd02:	910a      	str	r1, [sp, #40]	; 0x28
 800bd04:	f002 f898 	bl	800de38 <__ulp>
 800bd08:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bd0a:	eeac 8b00 	vfma.f64	d8, d12, d0
 800bd0e:	ec59 8b18 	vmov	r8, r9, d8
 800bd12:	e7ab      	b.n	800bc6c <_strtod_l+0xa6c>
 800bd14:	eeb0 7b4d 	vmov.f64	d7, d13
 800bd18:	e7ea      	b.n	800bcf0 <_strtod_l+0xaf0>
 800bd1a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800bd1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd22:	f57f af61 	bpl.w	800bbe8 <_strtod_l+0x9e8>
 800bd26:	e4b1      	b.n	800b68c <_strtod_l+0x48c>
 800bd28:	2300      	movs	r3, #0
 800bd2a:	9308      	str	r3, [sp, #32]
 800bd2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd30:	6013      	str	r3, [r2, #0]
 800bd32:	f7ff baad 	b.w	800b290 <_strtod_l+0x90>
 800bd36:	2a65      	cmp	r2, #101	; 0x65
 800bd38:	f43f ab9f 	beq.w	800b47a <_strtod_l+0x27a>
 800bd3c:	2a45      	cmp	r2, #69	; 0x45
 800bd3e:	f43f ab9c 	beq.w	800b47a <_strtod_l+0x27a>
 800bd42:	2101      	movs	r1, #1
 800bd44:	f7ff bbd4 	b.w	800b4f0 <_strtod_l+0x2f0>
 800bd48:	ffc00000 	.word	0xffc00000
 800bd4c:	41dfffff 	.word	0x41dfffff
 800bd50:	000fffff 	.word	0x000fffff
 800bd54:	7ff00000 	.word	0x7ff00000
 800bd58:	7fefffff 	.word	0x7fefffff
 800bd5c:	3ff00000 	.word	0x3ff00000
 800bd60:	7c9fffff 	.word	0x7c9fffff
 800bd64:	bff00000 	.word	0xbff00000
 800bd68:	7fe00000 	.word	0x7fe00000

0800bd6c <_strtod_r>:
 800bd6c:	4b01      	ldr	r3, [pc, #4]	; (800bd74 <_strtod_r+0x8>)
 800bd6e:	f7ff ba47 	b.w	800b200 <_strtod_l>
 800bd72:	bf00      	nop
 800bd74:	20000074 	.word	0x20000074

0800bd78 <_strtol_l.constprop.0>:
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd7e:	d001      	beq.n	800bd84 <_strtol_l.constprop.0+0xc>
 800bd80:	2b24      	cmp	r3, #36	; 0x24
 800bd82:	d906      	bls.n	800bd92 <_strtol_l.constprop.0+0x1a>
 800bd84:	f7fe fa64 	bl	800a250 <__errno>
 800bd88:	2316      	movs	r3, #22
 800bd8a:	6003      	str	r3, [r0, #0]
 800bd8c:	2000      	movs	r0, #0
 800bd8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd92:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800be78 <_strtol_l.constprop.0+0x100>
 800bd96:	460d      	mov	r5, r1
 800bd98:	462e      	mov	r6, r5
 800bd9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd9e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bda2:	f017 0708 	ands.w	r7, r7, #8
 800bda6:	d1f7      	bne.n	800bd98 <_strtol_l.constprop.0+0x20>
 800bda8:	2c2d      	cmp	r4, #45	; 0x2d
 800bdaa:	d132      	bne.n	800be12 <_strtol_l.constprop.0+0x9a>
 800bdac:	782c      	ldrb	r4, [r5, #0]
 800bdae:	2701      	movs	r7, #1
 800bdb0:	1cb5      	adds	r5, r6, #2
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d05b      	beq.n	800be6e <_strtol_l.constprop.0+0xf6>
 800bdb6:	2b10      	cmp	r3, #16
 800bdb8:	d109      	bne.n	800bdce <_strtol_l.constprop.0+0x56>
 800bdba:	2c30      	cmp	r4, #48	; 0x30
 800bdbc:	d107      	bne.n	800bdce <_strtol_l.constprop.0+0x56>
 800bdbe:	782c      	ldrb	r4, [r5, #0]
 800bdc0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bdc4:	2c58      	cmp	r4, #88	; 0x58
 800bdc6:	d14d      	bne.n	800be64 <_strtol_l.constprop.0+0xec>
 800bdc8:	786c      	ldrb	r4, [r5, #1]
 800bdca:	2310      	movs	r3, #16
 800bdcc:	3502      	adds	r5, #2
 800bdce:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bdd2:	f108 38ff 	add.w	r8, r8, #4294967295
 800bdd6:	f04f 0c00 	mov.w	ip, #0
 800bdda:	fbb8 f9f3 	udiv	r9, r8, r3
 800bdde:	4666      	mov	r6, ip
 800bde0:	fb03 8a19 	mls	sl, r3, r9, r8
 800bde4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bde8:	f1be 0f09 	cmp.w	lr, #9
 800bdec:	d816      	bhi.n	800be1c <_strtol_l.constprop.0+0xa4>
 800bdee:	4674      	mov	r4, lr
 800bdf0:	42a3      	cmp	r3, r4
 800bdf2:	dd24      	ble.n	800be3e <_strtol_l.constprop.0+0xc6>
 800bdf4:	f1bc 0f00 	cmp.w	ip, #0
 800bdf8:	db1e      	blt.n	800be38 <_strtol_l.constprop.0+0xc0>
 800bdfa:	45b1      	cmp	r9, r6
 800bdfc:	d31c      	bcc.n	800be38 <_strtol_l.constprop.0+0xc0>
 800bdfe:	d101      	bne.n	800be04 <_strtol_l.constprop.0+0x8c>
 800be00:	45a2      	cmp	sl, r4
 800be02:	db19      	blt.n	800be38 <_strtol_l.constprop.0+0xc0>
 800be04:	fb06 4603 	mla	r6, r6, r3, r4
 800be08:	f04f 0c01 	mov.w	ip, #1
 800be0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800be10:	e7e8      	b.n	800bde4 <_strtol_l.constprop.0+0x6c>
 800be12:	2c2b      	cmp	r4, #43	; 0x2b
 800be14:	bf04      	itt	eq
 800be16:	782c      	ldrbeq	r4, [r5, #0]
 800be18:	1cb5      	addeq	r5, r6, #2
 800be1a:	e7ca      	b.n	800bdb2 <_strtol_l.constprop.0+0x3a>
 800be1c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800be20:	f1be 0f19 	cmp.w	lr, #25
 800be24:	d801      	bhi.n	800be2a <_strtol_l.constprop.0+0xb2>
 800be26:	3c37      	subs	r4, #55	; 0x37
 800be28:	e7e2      	b.n	800bdf0 <_strtol_l.constprop.0+0x78>
 800be2a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800be2e:	f1be 0f19 	cmp.w	lr, #25
 800be32:	d804      	bhi.n	800be3e <_strtol_l.constprop.0+0xc6>
 800be34:	3c57      	subs	r4, #87	; 0x57
 800be36:	e7db      	b.n	800bdf0 <_strtol_l.constprop.0+0x78>
 800be38:	f04f 3cff 	mov.w	ip, #4294967295
 800be3c:	e7e6      	b.n	800be0c <_strtol_l.constprop.0+0x94>
 800be3e:	f1bc 0f00 	cmp.w	ip, #0
 800be42:	da05      	bge.n	800be50 <_strtol_l.constprop.0+0xd8>
 800be44:	2322      	movs	r3, #34	; 0x22
 800be46:	6003      	str	r3, [r0, #0]
 800be48:	4646      	mov	r6, r8
 800be4a:	b942      	cbnz	r2, 800be5e <_strtol_l.constprop.0+0xe6>
 800be4c:	4630      	mov	r0, r6
 800be4e:	e79e      	b.n	800bd8e <_strtol_l.constprop.0+0x16>
 800be50:	b107      	cbz	r7, 800be54 <_strtol_l.constprop.0+0xdc>
 800be52:	4276      	negs	r6, r6
 800be54:	2a00      	cmp	r2, #0
 800be56:	d0f9      	beq.n	800be4c <_strtol_l.constprop.0+0xd4>
 800be58:	f1bc 0f00 	cmp.w	ip, #0
 800be5c:	d000      	beq.n	800be60 <_strtol_l.constprop.0+0xe8>
 800be5e:	1e69      	subs	r1, r5, #1
 800be60:	6011      	str	r1, [r2, #0]
 800be62:	e7f3      	b.n	800be4c <_strtol_l.constprop.0+0xd4>
 800be64:	2430      	movs	r4, #48	; 0x30
 800be66:	2b00      	cmp	r3, #0
 800be68:	d1b1      	bne.n	800bdce <_strtol_l.constprop.0+0x56>
 800be6a:	2308      	movs	r3, #8
 800be6c:	e7af      	b.n	800bdce <_strtol_l.constprop.0+0x56>
 800be6e:	2c30      	cmp	r4, #48	; 0x30
 800be70:	d0a5      	beq.n	800bdbe <_strtol_l.constprop.0+0x46>
 800be72:	230a      	movs	r3, #10
 800be74:	e7ab      	b.n	800bdce <_strtol_l.constprop.0+0x56>
 800be76:	bf00      	nop
 800be78:	0800eb01 	.word	0x0800eb01

0800be7c <_strtol_r>:
 800be7c:	f7ff bf7c 	b.w	800bd78 <_strtol_l.constprop.0>

0800be80 <__swbuf_r>:
 800be80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be82:	460e      	mov	r6, r1
 800be84:	4614      	mov	r4, r2
 800be86:	4605      	mov	r5, r0
 800be88:	b118      	cbz	r0, 800be92 <__swbuf_r+0x12>
 800be8a:	6983      	ldr	r3, [r0, #24]
 800be8c:	b90b      	cbnz	r3, 800be92 <__swbuf_r+0x12>
 800be8e:	f000 ffcb 	bl	800ce28 <__sinit>
 800be92:	4b21      	ldr	r3, [pc, #132]	; (800bf18 <__swbuf_r+0x98>)
 800be94:	429c      	cmp	r4, r3
 800be96:	d12b      	bne.n	800bef0 <__swbuf_r+0x70>
 800be98:	686c      	ldr	r4, [r5, #4]
 800be9a:	69a3      	ldr	r3, [r4, #24]
 800be9c:	60a3      	str	r3, [r4, #8]
 800be9e:	89a3      	ldrh	r3, [r4, #12]
 800bea0:	071a      	lsls	r2, r3, #28
 800bea2:	d52f      	bpl.n	800bf04 <__swbuf_r+0x84>
 800bea4:	6923      	ldr	r3, [r4, #16]
 800bea6:	b36b      	cbz	r3, 800bf04 <__swbuf_r+0x84>
 800bea8:	6923      	ldr	r3, [r4, #16]
 800beaa:	6820      	ldr	r0, [r4, #0]
 800beac:	1ac0      	subs	r0, r0, r3
 800beae:	6963      	ldr	r3, [r4, #20]
 800beb0:	b2f6      	uxtb	r6, r6
 800beb2:	4283      	cmp	r3, r0
 800beb4:	4637      	mov	r7, r6
 800beb6:	dc04      	bgt.n	800bec2 <__swbuf_r+0x42>
 800beb8:	4621      	mov	r1, r4
 800beba:	4628      	mov	r0, r5
 800bebc:	f000 ff20 	bl	800cd00 <_fflush_r>
 800bec0:	bb30      	cbnz	r0, 800bf10 <__swbuf_r+0x90>
 800bec2:	68a3      	ldr	r3, [r4, #8]
 800bec4:	3b01      	subs	r3, #1
 800bec6:	60a3      	str	r3, [r4, #8]
 800bec8:	6823      	ldr	r3, [r4, #0]
 800beca:	1c5a      	adds	r2, r3, #1
 800becc:	6022      	str	r2, [r4, #0]
 800bece:	701e      	strb	r6, [r3, #0]
 800bed0:	6963      	ldr	r3, [r4, #20]
 800bed2:	3001      	adds	r0, #1
 800bed4:	4283      	cmp	r3, r0
 800bed6:	d004      	beq.n	800bee2 <__swbuf_r+0x62>
 800bed8:	89a3      	ldrh	r3, [r4, #12]
 800beda:	07db      	lsls	r3, r3, #31
 800bedc:	d506      	bpl.n	800beec <__swbuf_r+0x6c>
 800bede:	2e0a      	cmp	r6, #10
 800bee0:	d104      	bne.n	800beec <__swbuf_r+0x6c>
 800bee2:	4621      	mov	r1, r4
 800bee4:	4628      	mov	r0, r5
 800bee6:	f000 ff0b 	bl	800cd00 <_fflush_r>
 800beea:	b988      	cbnz	r0, 800bf10 <__swbuf_r+0x90>
 800beec:	4638      	mov	r0, r7
 800beee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bef0:	4b0a      	ldr	r3, [pc, #40]	; (800bf1c <__swbuf_r+0x9c>)
 800bef2:	429c      	cmp	r4, r3
 800bef4:	d101      	bne.n	800befa <__swbuf_r+0x7a>
 800bef6:	68ac      	ldr	r4, [r5, #8]
 800bef8:	e7cf      	b.n	800be9a <__swbuf_r+0x1a>
 800befa:	4b09      	ldr	r3, [pc, #36]	; (800bf20 <__swbuf_r+0xa0>)
 800befc:	429c      	cmp	r4, r3
 800befe:	bf08      	it	eq
 800bf00:	68ec      	ldreq	r4, [r5, #12]
 800bf02:	e7ca      	b.n	800be9a <__swbuf_r+0x1a>
 800bf04:	4621      	mov	r1, r4
 800bf06:	4628      	mov	r0, r5
 800bf08:	f000 f80c 	bl	800bf24 <__swsetup_r>
 800bf0c:	2800      	cmp	r0, #0
 800bf0e:	d0cb      	beq.n	800bea8 <__swbuf_r+0x28>
 800bf10:	f04f 37ff 	mov.w	r7, #4294967295
 800bf14:	e7ea      	b.n	800beec <__swbuf_r+0x6c>
 800bf16:	bf00      	nop
 800bf18:	0800ecb4 	.word	0x0800ecb4
 800bf1c:	0800ecd4 	.word	0x0800ecd4
 800bf20:	0800ec94 	.word	0x0800ec94

0800bf24 <__swsetup_r>:
 800bf24:	4b32      	ldr	r3, [pc, #200]	; (800bff0 <__swsetup_r+0xcc>)
 800bf26:	b570      	push	{r4, r5, r6, lr}
 800bf28:	681d      	ldr	r5, [r3, #0]
 800bf2a:	4606      	mov	r6, r0
 800bf2c:	460c      	mov	r4, r1
 800bf2e:	b125      	cbz	r5, 800bf3a <__swsetup_r+0x16>
 800bf30:	69ab      	ldr	r3, [r5, #24]
 800bf32:	b913      	cbnz	r3, 800bf3a <__swsetup_r+0x16>
 800bf34:	4628      	mov	r0, r5
 800bf36:	f000 ff77 	bl	800ce28 <__sinit>
 800bf3a:	4b2e      	ldr	r3, [pc, #184]	; (800bff4 <__swsetup_r+0xd0>)
 800bf3c:	429c      	cmp	r4, r3
 800bf3e:	d10f      	bne.n	800bf60 <__swsetup_r+0x3c>
 800bf40:	686c      	ldr	r4, [r5, #4]
 800bf42:	89a3      	ldrh	r3, [r4, #12]
 800bf44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf48:	0719      	lsls	r1, r3, #28
 800bf4a:	d42c      	bmi.n	800bfa6 <__swsetup_r+0x82>
 800bf4c:	06dd      	lsls	r5, r3, #27
 800bf4e:	d411      	bmi.n	800bf74 <__swsetup_r+0x50>
 800bf50:	2309      	movs	r3, #9
 800bf52:	6033      	str	r3, [r6, #0]
 800bf54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf58:	81a3      	strh	r3, [r4, #12]
 800bf5a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf5e:	e03e      	b.n	800bfde <__swsetup_r+0xba>
 800bf60:	4b25      	ldr	r3, [pc, #148]	; (800bff8 <__swsetup_r+0xd4>)
 800bf62:	429c      	cmp	r4, r3
 800bf64:	d101      	bne.n	800bf6a <__swsetup_r+0x46>
 800bf66:	68ac      	ldr	r4, [r5, #8]
 800bf68:	e7eb      	b.n	800bf42 <__swsetup_r+0x1e>
 800bf6a:	4b24      	ldr	r3, [pc, #144]	; (800bffc <__swsetup_r+0xd8>)
 800bf6c:	429c      	cmp	r4, r3
 800bf6e:	bf08      	it	eq
 800bf70:	68ec      	ldreq	r4, [r5, #12]
 800bf72:	e7e6      	b.n	800bf42 <__swsetup_r+0x1e>
 800bf74:	0758      	lsls	r0, r3, #29
 800bf76:	d512      	bpl.n	800bf9e <__swsetup_r+0x7a>
 800bf78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf7a:	b141      	cbz	r1, 800bf8e <__swsetup_r+0x6a>
 800bf7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf80:	4299      	cmp	r1, r3
 800bf82:	d002      	beq.n	800bf8a <__swsetup_r+0x66>
 800bf84:	4630      	mov	r0, r6
 800bf86:	f7fe f9ab 	bl	800a2e0 <_free_r>
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	6363      	str	r3, [r4, #52]	; 0x34
 800bf8e:	89a3      	ldrh	r3, [r4, #12]
 800bf90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf94:	81a3      	strh	r3, [r4, #12]
 800bf96:	2300      	movs	r3, #0
 800bf98:	6063      	str	r3, [r4, #4]
 800bf9a:	6923      	ldr	r3, [r4, #16]
 800bf9c:	6023      	str	r3, [r4, #0]
 800bf9e:	89a3      	ldrh	r3, [r4, #12]
 800bfa0:	f043 0308 	orr.w	r3, r3, #8
 800bfa4:	81a3      	strh	r3, [r4, #12]
 800bfa6:	6923      	ldr	r3, [r4, #16]
 800bfa8:	b94b      	cbnz	r3, 800bfbe <__swsetup_r+0x9a>
 800bfaa:	89a3      	ldrh	r3, [r4, #12]
 800bfac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bfb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfb4:	d003      	beq.n	800bfbe <__swsetup_r+0x9a>
 800bfb6:	4621      	mov	r1, r4
 800bfb8:	4630      	mov	r0, r6
 800bfba:	f001 fb6d 	bl	800d698 <__smakebuf_r>
 800bfbe:	89a0      	ldrh	r0, [r4, #12]
 800bfc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfc4:	f010 0301 	ands.w	r3, r0, #1
 800bfc8:	d00a      	beq.n	800bfe0 <__swsetup_r+0xbc>
 800bfca:	2300      	movs	r3, #0
 800bfcc:	60a3      	str	r3, [r4, #8]
 800bfce:	6963      	ldr	r3, [r4, #20]
 800bfd0:	425b      	negs	r3, r3
 800bfd2:	61a3      	str	r3, [r4, #24]
 800bfd4:	6923      	ldr	r3, [r4, #16]
 800bfd6:	b943      	cbnz	r3, 800bfea <__swsetup_r+0xc6>
 800bfd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bfdc:	d1ba      	bne.n	800bf54 <__swsetup_r+0x30>
 800bfde:	bd70      	pop	{r4, r5, r6, pc}
 800bfe0:	0781      	lsls	r1, r0, #30
 800bfe2:	bf58      	it	pl
 800bfe4:	6963      	ldrpl	r3, [r4, #20]
 800bfe6:	60a3      	str	r3, [r4, #8]
 800bfe8:	e7f4      	b.n	800bfd4 <__swsetup_r+0xb0>
 800bfea:	2000      	movs	r0, #0
 800bfec:	e7f7      	b.n	800bfde <__swsetup_r+0xba>
 800bfee:	bf00      	nop
 800bff0:	2000000c 	.word	0x2000000c
 800bff4:	0800ecb4 	.word	0x0800ecb4
 800bff8:	0800ecd4 	.word	0x0800ecd4
 800bffc:	0800ec94 	.word	0x0800ec94

0800c000 <quorem>:
 800c000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c004:	6903      	ldr	r3, [r0, #16]
 800c006:	690c      	ldr	r4, [r1, #16]
 800c008:	42a3      	cmp	r3, r4
 800c00a:	4607      	mov	r7, r0
 800c00c:	f2c0 8081 	blt.w	800c112 <quorem+0x112>
 800c010:	3c01      	subs	r4, #1
 800c012:	f101 0814 	add.w	r8, r1, #20
 800c016:	f100 0514 	add.w	r5, r0, #20
 800c01a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c01e:	9301      	str	r3, [sp, #4]
 800c020:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c024:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c028:	3301      	adds	r3, #1
 800c02a:	429a      	cmp	r2, r3
 800c02c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c030:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c034:	fbb2 f6f3 	udiv	r6, r2, r3
 800c038:	d331      	bcc.n	800c09e <quorem+0x9e>
 800c03a:	f04f 0e00 	mov.w	lr, #0
 800c03e:	4640      	mov	r0, r8
 800c040:	46ac      	mov	ip, r5
 800c042:	46f2      	mov	sl, lr
 800c044:	f850 2b04 	ldr.w	r2, [r0], #4
 800c048:	b293      	uxth	r3, r2
 800c04a:	fb06 e303 	mla	r3, r6, r3, lr
 800c04e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c052:	b29b      	uxth	r3, r3
 800c054:	ebaa 0303 	sub.w	r3, sl, r3
 800c058:	f8dc a000 	ldr.w	sl, [ip]
 800c05c:	0c12      	lsrs	r2, r2, #16
 800c05e:	fa13 f38a 	uxtah	r3, r3, sl
 800c062:	fb06 e202 	mla	r2, r6, r2, lr
 800c066:	9300      	str	r3, [sp, #0]
 800c068:	9b00      	ldr	r3, [sp, #0]
 800c06a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c06e:	b292      	uxth	r2, r2
 800c070:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c074:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c078:	f8bd 3000 	ldrh.w	r3, [sp]
 800c07c:	4581      	cmp	r9, r0
 800c07e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c082:	f84c 3b04 	str.w	r3, [ip], #4
 800c086:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c08a:	d2db      	bcs.n	800c044 <quorem+0x44>
 800c08c:	f855 300b 	ldr.w	r3, [r5, fp]
 800c090:	b92b      	cbnz	r3, 800c09e <quorem+0x9e>
 800c092:	9b01      	ldr	r3, [sp, #4]
 800c094:	3b04      	subs	r3, #4
 800c096:	429d      	cmp	r5, r3
 800c098:	461a      	mov	r2, r3
 800c09a:	d32e      	bcc.n	800c0fa <quorem+0xfa>
 800c09c:	613c      	str	r4, [r7, #16]
 800c09e:	4638      	mov	r0, r7
 800c0a0:	f001 fe24 	bl	800dcec <__mcmp>
 800c0a4:	2800      	cmp	r0, #0
 800c0a6:	db24      	blt.n	800c0f2 <quorem+0xf2>
 800c0a8:	3601      	adds	r6, #1
 800c0aa:	4628      	mov	r0, r5
 800c0ac:	f04f 0c00 	mov.w	ip, #0
 800c0b0:	f858 2b04 	ldr.w	r2, [r8], #4
 800c0b4:	f8d0 e000 	ldr.w	lr, [r0]
 800c0b8:	b293      	uxth	r3, r2
 800c0ba:	ebac 0303 	sub.w	r3, ip, r3
 800c0be:	0c12      	lsrs	r2, r2, #16
 800c0c0:	fa13 f38e 	uxtah	r3, r3, lr
 800c0c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c0c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0d2:	45c1      	cmp	r9, r8
 800c0d4:	f840 3b04 	str.w	r3, [r0], #4
 800c0d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c0dc:	d2e8      	bcs.n	800c0b0 <quorem+0xb0>
 800c0de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c0e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c0e6:	b922      	cbnz	r2, 800c0f2 <quorem+0xf2>
 800c0e8:	3b04      	subs	r3, #4
 800c0ea:	429d      	cmp	r5, r3
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	d30a      	bcc.n	800c106 <quorem+0x106>
 800c0f0:	613c      	str	r4, [r7, #16]
 800c0f2:	4630      	mov	r0, r6
 800c0f4:	b003      	add	sp, #12
 800c0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0fa:	6812      	ldr	r2, [r2, #0]
 800c0fc:	3b04      	subs	r3, #4
 800c0fe:	2a00      	cmp	r2, #0
 800c100:	d1cc      	bne.n	800c09c <quorem+0x9c>
 800c102:	3c01      	subs	r4, #1
 800c104:	e7c7      	b.n	800c096 <quorem+0x96>
 800c106:	6812      	ldr	r2, [r2, #0]
 800c108:	3b04      	subs	r3, #4
 800c10a:	2a00      	cmp	r2, #0
 800c10c:	d1f0      	bne.n	800c0f0 <quorem+0xf0>
 800c10e:	3c01      	subs	r4, #1
 800c110:	e7eb      	b.n	800c0ea <quorem+0xea>
 800c112:	2000      	movs	r0, #0
 800c114:	e7ee      	b.n	800c0f4 <quorem+0xf4>
	...

0800c118 <_dtoa_r>:
 800c118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c11c:	ed2d 8b02 	vpush	{d8}
 800c120:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c122:	b091      	sub	sp, #68	; 0x44
 800c124:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c128:	ec59 8b10 	vmov	r8, r9, d0
 800c12c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800c12e:	9106      	str	r1, [sp, #24]
 800c130:	4606      	mov	r6, r0
 800c132:	9208      	str	r2, [sp, #32]
 800c134:	930c      	str	r3, [sp, #48]	; 0x30
 800c136:	b975      	cbnz	r5, 800c156 <_dtoa_r+0x3e>
 800c138:	2010      	movs	r0, #16
 800c13a:	f7fe f8b3 	bl	800a2a4 <malloc>
 800c13e:	4602      	mov	r2, r0
 800c140:	6270      	str	r0, [r6, #36]	; 0x24
 800c142:	b920      	cbnz	r0, 800c14e <_dtoa_r+0x36>
 800c144:	4baa      	ldr	r3, [pc, #680]	; (800c3f0 <_dtoa_r+0x2d8>)
 800c146:	21ea      	movs	r1, #234	; 0xea
 800c148:	48aa      	ldr	r0, [pc, #680]	; (800c3f4 <_dtoa_r+0x2dc>)
 800c14a:	f002 fb0b 	bl	800e764 <__assert_func>
 800c14e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c152:	6005      	str	r5, [r0, #0]
 800c154:	60c5      	str	r5, [r0, #12]
 800c156:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c158:	6819      	ldr	r1, [r3, #0]
 800c15a:	b151      	cbz	r1, 800c172 <_dtoa_r+0x5a>
 800c15c:	685a      	ldr	r2, [r3, #4]
 800c15e:	604a      	str	r2, [r1, #4]
 800c160:	2301      	movs	r3, #1
 800c162:	4093      	lsls	r3, r2
 800c164:	608b      	str	r3, [r1, #8]
 800c166:	4630      	mov	r0, r6
 800c168:	f001 fb34 	bl	800d7d4 <_Bfree>
 800c16c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c16e:	2200      	movs	r2, #0
 800c170:	601a      	str	r2, [r3, #0]
 800c172:	f1b9 0300 	subs.w	r3, r9, #0
 800c176:	bfbb      	ittet	lt
 800c178:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c17c:	9303      	strlt	r3, [sp, #12]
 800c17e:	2300      	movge	r3, #0
 800c180:	2201      	movlt	r2, #1
 800c182:	bfac      	ite	ge
 800c184:	6023      	strge	r3, [r4, #0]
 800c186:	6022      	strlt	r2, [r4, #0]
 800c188:	4b9b      	ldr	r3, [pc, #620]	; (800c3f8 <_dtoa_r+0x2e0>)
 800c18a:	9c03      	ldr	r4, [sp, #12]
 800c18c:	43a3      	bics	r3, r4
 800c18e:	d11c      	bne.n	800c1ca <_dtoa_r+0xb2>
 800c190:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c192:	f242 730f 	movw	r3, #9999	; 0x270f
 800c196:	6013      	str	r3, [r2, #0]
 800c198:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800c19c:	ea53 0308 	orrs.w	r3, r3, r8
 800c1a0:	f000 84fd 	beq.w	800cb9e <_dtoa_r+0xa86>
 800c1a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c1a6:	b963      	cbnz	r3, 800c1c2 <_dtoa_r+0xaa>
 800c1a8:	4b94      	ldr	r3, [pc, #592]	; (800c3fc <_dtoa_r+0x2e4>)
 800c1aa:	e01f      	b.n	800c1ec <_dtoa_r+0xd4>
 800c1ac:	4b94      	ldr	r3, [pc, #592]	; (800c400 <_dtoa_r+0x2e8>)
 800c1ae:	9301      	str	r3, [sp, #4]
 800c1b0:	3308      	adds	r3, #8
 800c1b2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c1b4:	6013      	str	r3, [r2, #0]
 800c1b6:	9801      	ldr	r0, [sp, #4]
 800c1b8:	b011      	add	sp, #68	; 0x44
 800c1ba:	ecbd 8b02 	vpop	{d8}
 800c1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1c2:	4b8e      	ldr	r3, [pc, #568]	; (800c3fc <_dtoa_r+0x2e4>)
 800c1c4:	9301      	str	r3, [sp, #4]
 800c1c6:	3303      	adds	r3, #3
 800c1c8:	e7f3      	b.n	800c1b2 <_dtoa_r+0x9a>
 800c1ca:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c1ce:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1d6:	d10b      	bne.n	800c1f0 <_dtoa_r+0xd8>
 800c1d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c1da:	2301      	movs	r3, #1
 800c1dc:	6013      	str	r3, [r2, #0]
 800c1de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	f000 84d9 	beq.w	800cb98 <_dtoa_r+0xa80>
 800c1e6:	4887      	ldr	r0, [pc, #540]	; (800c404 <_dtoa_r+0x2ec>)
 800c1e8:	6018      	str	r0, [r3, #0]
 800c1ea:	1e43      	subs	r3, r0, #1
 800c1ec:	9301      	str	r3, [sp, #4]
 800c1ee:	e7e2      	b.n	800c1b6 <_dtoa_r+0x9e>
 800c1f0:	a90f      	add	r1, sp, #60	; 0x3c
 800c1f2:	aa0e      	add	r2, sp, #56	; 0x38
 800c1f4:	4630      	mov	r0, r6
 800c1f6:	eeb0 0b48 	vmov.f64	d0, d8
 800c1fa:	f001 fe99 	bl	800df30 <__d2b>
 800c1fe:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800c202:	4605      	mov	r5, r0
 800c204:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c206:	2900      	cmp	r1, #0
 800c208:	d046      	beq.n	800c298 <_dtoa_r+0x180>
 800c20a:	ee18 4a90 	vmov	r4, s17
 800c20e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c212:	ec53 2b18 	vmov	r2, r3, d8
 800c216:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800c21a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c21e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c222:	2400      	movs	r4, #0
 800c224:	ec43 2b16 	vmov	d6, r2, r3
 800c228:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800c22c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800c3d8 <_dtoa_r+0x2c0>
 800c230:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c234:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800c3e0 <_dtoa_r+0x2c8>
 800c238:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c23c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800c3e8 <_dtoa_r+0x2d0>
 800c240:	ee07 1a90 	vmov	s15, r1
 800c244:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800c248:	eeb0 7b46 	vmov.f64	d7, d6
 800c24c:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c250:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c254:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c25c:	ee16 ba90 	vmov	fp, s13
 800c260:	940a      	str	r4, [sp, #40]	; 0x28
 800c262:	d508      	bpl.n	800c276 <_dtoa_r+0x15e>
 800c264:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c268:	eeb4 6b47 	vcmp.f64	d6, d7
 800c26c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c270:	bf18      	it	ne
 800c272:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800c276:	f1bb 0f16 	cmp.w	fp, #22
 800c27a:	d82f      	bhi.n	800c2dc <_dtoa_r+0x1c4>
 800c27c:	4b62      	ldr	r3, [pc, #392]	; (800c408 <_dtoa_r+0x2f0>)
 800c27e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c282:	ed93 7b00 	vldr	d7, [r3]
 800c286:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c28e:	d501      	bpl.n	800c294 <_dtoa_r+0x17c>
 800c290:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c294:	2300      	movs	r3, #0
 800c296:	e022      	b.n	800c2de <_dtoa_r+0x1c6>
 800c298:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c29a:	4401      	add	r1, r0
 800c29c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800c2a0:	2b20      	cmp	r3, #32
 800c2a2:	bfc1      	itttt	gt
 800c2a4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c2a8:	fa04 f303 	lslgt.w	r3, r4, r3
 800c2ac:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800c2b0:	fa28 f804 	lsrgt.w	r8, r8, r4
 800c2b4:	bfd6      	itet	le
 800c2b6:	f1c3 0320 	rsble	r3, r3, #32
 800c2ba:	ea43 0808 	orrgt.w	r8, r3, r8
 800c2be:	fa08 f803 	lslle.w	r8, r8, r3
 800c2c2:	ee07 8a90 	vmov	s15, r8
 800c2c6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c2ca:	3901      	subs	r1, #1
 800c2cc:	ee17 4a90 	vmov	r4, s15
 800c2d0:	ec53 2b17 	vmov	r2, r3, d7
 800c2d4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800c2d8:	2401      	movs	r4, #1
 800c2da:	e7a3      	b.n	800c224 <_dtoa_r+0x10c>
 800c2dc:	2301      	movs	r3, #1
 800c2de:	930b      	str	r3, [sp, #44]	; 0x2c
 800c2e0:	1a43      	subs	r3, r0, r1
 800c2e2:	1e5a      	subs	r2, r3, #1
 800c2e4:	bf45      	ittet	mi
 800c2e6:	f1c3 0301 	rsbmi	r3, r3, #1
 800c2ea:	9304      	strmi	r3, [sp, #16]
 800c2ec:	2300      	movpl	r3, #0
 800c2ee:	2300      	movmi	r3, #0
 800c2f0:	9205      	str	r2, [sp, #20]
 800c2f2:	bf54      	ite	pl
 800c2f4:	9304      	strpl	r3, [sp, #16]
 800c2f6:	9305      	strmi	r3, [sp, #20]
 800c2f8:	f1bb 0f00 	cmp.w	fp, #0
 800c2fc:	db18      	blt.n	800c330 <_dtoa_r+0x218>
 800c2fe:	9b05      	ldr	r3, [sp, #20]
 800c300:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800c304:	445b      	add	r3, fp
 800c306:	9305      	str	r3, [sp, #20]
 800c308:	2300      	movs	r3, #0
 800c30a:	9a06      	ldr	r2, [sp, #24]
 800c30c:	2a09      	cmp	r2, #9
 800c30e:	d849      	bhi.n	800c3a4 <_dtoa_r+0x28c>
 800c310:	2a05      	cmp	r2, #5
 800c312:	bfc4      	itt	gt
 800c314:	3a04      	subgt	r2, #4
 800c316:	9206      	strgt	r2, [sp, #24]
 800c318:	9a06      	ldr	r2, [sp, #24]
 800c31a:	f1a2 0202 	sub.w	r2, r2, #2
 800c31e:	bfcc      	ite	gt
 800c320:	2400      	movgt	r4, #0
 800c322:	2401      	movle	r4, #1
 800c324:	2a03      	cmp	r2, #3
 800c326:	d848      	bhi.n	800c3ba <_dtoa_r+0x2a2>
 800c328:	e8df f002 	tbb	[pc, r2]
 800c32c:	3a2c2e0b 	.word	0x3a2c2e0b
 800c330:	9b04      	ldr	r3, [sp, #16]
 800c332:	2200      	movs	r2, #0
 800c334:	eba3 030b 	sub.w	r3, r3, fp
 800c338:	9304      	str	r3, [sp, #16]
 800c33a:	9209      	str	r2, [sp, #36]	; 0x24
 800c33c:	f1cb 0300 	rsb	r3, fp, #0
 800c340:	e7e3      	b.n	800c30a <_dtoa_r+0x1f2>
 800c342:	2200      	movs	r2, #0
 800c344:	9207      	str	r2, [sp, #28]
 800c346:	9a08      	ldr	r2, [sp, #32]
 800c348:	2a00      	cmp	r2, #0
 800c34a:	dc39      	bgt.n	800c3c0 <_dtoa_r+0x2a8>
 800c34c:	f04f 0a01 	mov.w	sl, #1
 800c350:	46d1      	mov	r9, sl
 800c352:	4652      	mov	r2, sl
 800c354:	f8cd a020 	str.w	sl, [sp, #32]
 800c358:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800c35a:	2100      	movs	r1, #0
 800c35c:	6079      	str	r1, [r7, #4]
 800c35e:	2004      	movs	r0, #4
 800c360:	f100 0c14 	add.w	ip, r0, #20
 800c364:	4594      	cmp	ip, r2
 800c366:	6879      	ldr	r1, [r7, #4]
 800c368:	d92f      	bls.n	800c3ca <_dtoa_r+0x2b2>
 800c36a:	4630      	mov	r0, r6
 800c36c:	930d      	str	r3, [sp, #52]	; 0x34
 800c36e:	f001 f9f1 	bl	800d754 <_Balloc>
 800c372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c374:	9001      	str	r0, [sp, #4]
 800c376:	4602      	mov	r2, r0
 800c378:	2800      	cmp	r0, #0
 800c37a:	d149      	bne.n	800c410 <_dtoa_r+0x2f8>
 800c37c:	4b23      	ldr	r3, [pc, #140]	; (800c40c <_dtoa_r+0x2f4>)
 800c37e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c382:	e6e1      	b.n	800c148 <_dtoa_r+0x30>
 800c384:	2201      	movs	r2, #1
 800c386:	e7dd      	b.n	800c344 <_dtoa_r+0x22c>
 800c388:	2200      	movs	r2, #0
 800c38a:	9207      	str	r2, [sp, #28]
 800c38c:	9a08      	ldr	r2, [sp, #32]
 800c38e:	eb0b 0a02 	add.w	sl, fp, r2
 800c392:	f10a 0901 	add.w	r9, sl, #1
 800c396:	464a      	mov	r2, r9
 800c398:	2a01      	cmp	r2, #1
 800c39a:	bfb8      	it	lt
 800c39c:	2201      	movlt	r2, #1
 800c39e:	e7db      	b.n	800c358 <_dtoa_r+0x240>
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	e7f2      	b.n	800c38a <_dtoa_r+0x272>
 800c3a4:	2401      	movs	r4, #1
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800c3ac:	f04f 3aff 	mov.w	sl, #4294967295
 800c3b0:	2100      	movs	r1, #0
 800c3b2:	46d1      	mov	r9, sl
 800c3b4:	2212      	movs	r2, #18
 800c3b6:	9108      	str	r1, [sp, #32]
 800c3b8:	e7ce      	b.n	800c358 <_dtoa_r+0x240>
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	9207      	str	r2, [sp, #28]
 800c3be:	e7f5      	b.n	800c3ac <_dtoa_r+0x294>
 800c3c0:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c3c4:	46d1      	mov	r9, sl
 800c3c6:	4652      	mov	r2, sl
 800c3c8:	e7c6      	b.n	800c358 <_dtoa_r+0x240>
 800c3ca:	3101      	adds	r1, #1
 800c3cc:	6079      	str	r1, [r7, #4]
 800c3ce:	0040      	lsls	r0, r0, #1
 800c3d0:	e7c6      	b.n	800c360 <_dtoa_r+0x248>
 800c3d2:	bf00      	nop
 800c3d4:	f3af 8000 	nop.w
 800c3d8:	636f4361 	.word	0x636f4361
 800c3dc:	3fd287a7 	.word	0x3fd287a7
 800c3e0:	8b60c8b3 	.word	0x8b60c8b3
 800c3e4:	3fc68a28 	.word	0x3fc68a28
 800c3e8:	509f79fb 	.word	0x509f79fb
 800c3ec:	3fd34413 	.word	0x3fd34413
 800c3f0:	0800ec0e 	.word	0x0800ec0e
 800c3f4:	0800ec25 	.word	0x0800ec25
 800c3f8:	7ff00000 	.word	0x7ff00000
 800c3fc:	0800ec0a 	.word	0x0800ec0a
 800c400:	0800ec01 	.word	0x0800ec01
 800c404:	0800ea85 	.word	0x0800ea85
 800c408:	0800edf8 	.word	0x0800edf8
 800c40c:	0800ec80 	.word	0x0800ec80
 800c410:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800c412:	9901      	ldr	r1, [sp, #4]
 800c414:	6011      	str	r1, [r2, #0]
 800c416:	f1b9 0f0e 	cmp.w	r9, #14
 800c41a:	d86c      	bhi.n	800c4f6 <_dtoa_r+0x3de>
 800c41c:	2c00      	cmp	r4, #0
 800c41e:	d06a      	beq.n	800c4f6 <_dtoa_r+0x3de>
 800c420:	f1bb 0f00 	cmp.w	fp, #0
 800c424:	f340 80a0 	ble.w	800c568 <_dtoa_r+0x450>
 800c428:	49c1      	ldr	r1, [pc, #772]	; (800c730 <_dtoa_r+0x618>)
 800c42a:	f00b 020f 	and.w	r2, fp, #15
 800c42e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800c432:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c436:	ed92 7b00 	vldr	d7, [r2]
 800c43a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800c43e:	f000 8087 	beq.w	800c550 <_dtoa_r+0x438>
 800c442:	4abc      	ldr	r2, [pc, #752]	; (800c734 <_dtoa_r+0x61c>)
 800c444:	ed92 6b08 	vldr	d6, [r2, #32]
 800c448:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c44c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c450:	f001 010f 	and.w	r1, r1, #15
 800c454:	2203      	movs	r2, #3
 800c456:	48b7      	ldr	r0, [pc, #732]	; (800c734 <_dtoa_r+0x61c>)
 800c458:	2900      	cmp	r1, #0
 800c45a:	d17b      	bne.n	800c554 <_dtoa_r+0x43c>
 800c45c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c460:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c464:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c468:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c46a:	2900      	cmp	r1, #0
 800c46c:	f000 80a2 	beq.w	800c5b4 <_dtoa_r+0x49c>
 800c470:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c474:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c478:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c47c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c480:	f140 8098 	bpl.w	800c5b4 <_dtoa_r+0x49c>
 800c484:	f1b9 0f00 	cmp.w	r9, #0
 800c488:	f000 8094 	beq.w	800c5b4 <_dtoa_r+0x49c>
 800c48c:	f1ba 0f00 	cmp.w	sl, #0
 800c490:	dd2f      	ble.n	800c4f2 <_dtoa_r+0x3da>
 800c492:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800c496:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c49a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c49e:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c4a2:	3201      	adds	r2, #1
 800c4a4:	4650      	mov	r0, sl
 800c4a6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c4aa:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800c4ae:	ee07 2a90 	vmov	s15, r2
 800c4b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c4b6:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c4ba:	ee15 4a90 	vmov	r4, s11
 800c4be:	ec52 1b15 	vmov	r1, r2, d5
 800c4c2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800c4c6:	2800      	cmp	r0, #0
 800c4c8:	d177      	bne.n	800c5ba <_dtoa_r+0x4a2>
 800c4ca:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c4ce:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c4d2:	ec42 1b17 	vmov	d7, r1, r2
 800c4d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c4da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4de:	f300 8263 	bgt.w	800c9a8 <_dtoa_r+0x890>
 800c4e2:	eeb1 7b47 	vneg.f64	d7, d7
 800c4e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4ee:	f100 8258 	bmi.w	800c9a2 <_dtoa_r+0x88a>
 800c4f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c4f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c4f8:	2a00      	cmp	r2, #0
 800c4fa:	f2c0 811d 	blt.w	800c738 <_dtoa_r+0x620>
 800c4fe:	f1bb 0f0e 	cmp.w	fp, #14
 800c502:	f300 8119 	bgt.w	800c738 <_dtoa_r+0x620>
 800c506:	4b8a      	ldr	r3, [pc, #552]	; (800c730 <_dtoa_r+0x618>)
 800c508:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c50c:	ed93 6b00 	vldr	d6, [r3]
 800c510:	9b08      	ldr	r3, [sp, #32]
 800c512:	2b00      	cmp	r3, #0
 800c514:	f280 80b7 	bge.w	800c686 <_dtoa_r+0x56e>
 800c518:	f1b9 0f00 	cmp.w	r9, #0
 800c51c:	f300 80b3 	bgt.w	800c686 <_dtoa_r+0x56e>
 800c520:	f040 823f 	bne.w	800c9a2 <_dtoa_r+0x88a>
 800c524:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c528:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c52c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c530:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c538:	464c      	mov	r4, r9
 800c53a:	464f      	mov	r7, r9
 800c53c:	f280 8215 	bge.w	800c96a <_dtoa_r+0x852>
 800c540:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c544:	2331      	movs	r3, #49	; 0x31
 800c546:	f808 3b01 	strb.w	r3, [r8], #1
 800c54a:	f10b 0b01 	add.w	fp, fp, #1
 800c54e:	e211      	b.n	800c974 <_dtoa_r+0x85c>
 800c550:	2202      	movs	r2, #2
 800c552:	e780      	b.n	800c456 <_dtoa_r+0x33e>
 800c554:	07cc      	lsls	r4, r1, #31
 800c556:	d504      	bpl.n	800c562 <_dtoa_r+0x44a>
 800c558:	ed90 6b00 	vldr	d6, [r0]
 800c55c:	3201      	adds	r2, #1
 800c55e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c562:	1049      	asrs	r1, r1, #1
 800c564:	3008      	adds	r0, #8
 800c566:	e777      	b.n	800c458 <_dtoa_r+0x340>
 800c568:	d022      	beq.n	800c5b0 <_dtoa_r+0x498>
 800c56a:	f1cb 0100 	rsb	r1, fp, #0
 800c56e:	4a70      	ldr	r2, [pc, #448]	; (800c730 <_dtoa_r+0x618>)
 800c570:	f001 000f 	and.w	r0, r1, #15
 800c574:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c578:	ed92 7b00 	vldr	d7, [r2]
 800c57c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c580:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c584:	486b      	ldr	r0, [pc, #428]	; (800c734 <_dtoa_r+0x61c>)
 800c586:	1109      	asrs	r1, r1, #4
 800c588:	2400      	movs	r4, #0
 800c58a:	2202      	movs	r2, #2
 800c58c:	b929      	cbnz	r1, 800c59a <_dtoa_r+0x482>
 800c58e:	2c00      	cmp	r4, #0
 800c590:	f43f af6a 	beq.w	800c468 <_dtoa_r+0x350>
 800c594:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c598:	e766      	b.n	800c468 <_dtoa_r+0x350>
 800c59a:	07cf      	lsls	r7, r1, #31
 800c59c:	d505      	bpl.n	800c5aa <_dtoa_r+0x492>
 800c59e:	ed90 6b00 	vldr	d6, [r0]
 800c5a2:	3201      	adds	r2, #1
 800c5a4:	2401      	movs	r4, #1
 800c5a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c5aa:	1049      	asrs	r1, r1, #1
 800c5ac:	3008      	adds	r0, #8
 800c5ae:	e7ed      	b.n	800c58c <_dtoa_r+0x474>
 800c5b0:	2202      	movs	r2, #2
 800c5b2:	e759      	b.n	800c468 <_dtoa_r+0x350>
 800c5b4:	465f      	mov	r7, fp
 800c5b6:	4648      	mov	r0, r9
 800c5b8:	e775      	b.n	800c4a6 <_dtoa_r+0x38e>
 800c5ba:	ec42 1b17 	vmov	d7, r1, r2
 800c5be:	4a5c      	ldr	r2, [pc, #368]	; (800c730 <_dtoa_r+0x618>)
 800c5c0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c5c4:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c5c8:	9a01      	ldr	r2, [sp, #4]
 800c5ca:	1814      	adds	r4, r2, r0
 800c5cc:	9a07      	ldr	r2, [sp, #28]
 800c5ce:	b352      	cbz	r2, 800c626 <_dtoa_r+0x50e>
 800c5d0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800c5d4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800c5d8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c5dc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c5e0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c5e4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c5e8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c5ec:	ee14 2a90 	vmov	r2, s9
 800c5f0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c5f4:	3230      	adds	r2, #48	; 0x30
 800c5f6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c5fa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c5fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c602:	f808 2b01 	strb.w	r2, [r8], #1
 800c606:	d439      	bmi.n	800c67c <_dtoa_r+0x564>
 800c608:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c60c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c614:	d472      	bmi.n	800c6fc <_dtoa_r+0x5e4>
 800c616:	45a0      	cmp	r8, r4
 800c618:	f43f af6b 	beq.w	800c4f2 <_dtoa_r+0x3da>
 800c61c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c620:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c624:	e7e0      	b.n	800c5e8 <_dtoa_r+0x4d0>
 800c626:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c62a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c62e:	4621      	mov	r1, r4
 800c630:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c634:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c638:	ee14 2a90 	vmov	r2, s9
 800c63c:	3230      	adds	r2, #48	; 0x30
 800c63e:	f808 2b01 	strb.w	r2, [r8], #1
 800c642:	45a0      	cmp	r8, r4
 800c644:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c648:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c64c:	d118      	bne.n	800c680 <_dtoa_r+0x568>
 800c64e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c652:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c656:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c65e:	dc4d      	bgt.n	800c6fc <_dtoa_r+0x5e4>
 800c660:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c664:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c66c:	f57f af41 	bpl.w	800c4f2 <_dtoa_r+0x3da>
 800c670:	4688      	mov	r8, r1
 800c672:	3901      	subs	r1, #1
 800c674:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800c678:	2b30      	cmp	r3, #48	; 0x30
 800c67a:	d0f9      	beq.n	800c670 <_dtoa_r+0x558>
 800c67c:	46bb      	mov	fp, r7
 800c67e:	e02a      	b.n	800c6d6 <_dtoa_r+0x5be>
 800c680:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c684:	e7d6      	b.n	800c634 <_dtoa_r+0x51c>
 800c686:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c68a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800c68e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c692:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c696:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c69a:	ee15 3a10 	vmov	r3, s10
 800c69e:	3330      	adds	r3, #48	; 0x30
 800c6a0:	f808 3b01 	strb.w	r3, [r8], #1
 800c6a4:	9b01      	ldr	r3, [sp, #4]
 800c6a6:	eba8 0303 	sub.w	r3, r8, r3
 800c6aa:	4599      	cmp	r9, r3
 800c6ac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c6b0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c6b4:	d133      	bne.n	800c71e <_dtoa_r+0x606>
 800c6b6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c6ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c6be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6c2:	dc1a      	bgt.n	800c6fa <_dtoa_r+0x5e2>
 800c6c4:	eeb4 7b46 	vcmp.f64	d7, d6
 800c6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6cc:	d103      	bne.n	800c6d6 <_dtoa_r+0x5be>
 800c6ce:	ee15 3a10 	vmov	r3, s10
 800c6d2:	07d9      	lsls	r1, r3, #31
 800c6d4:	d411      	bmi.n	800c6fa <_dtoa_r+0x5e2>
 800c6d6:	4629      	mov	r1, r5
 800c6d8:	4630      	mov	r0, r6
 800c6da:	f001 f87b 	bl	800d7d4 <_Bfree>
 800c6de:	2300      	movs	r3, #0
 800c6e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6e2:	f888 3000 	strb.w	r3, [r8]
 800c6e6:	f10b 0301 	add.w	r3, fp, #1
 800c6ea:	6013      	str	r3, [r2, #0]
 800c6ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	f43f ad61 	beq.w	800c1b6 <_dtoa_r+0x9e>
 800c6f4:	f8c3 8000 	str.w	r8, [r3]
 800c6f8:	e55d      	b.n	800c1b6 <_dtoa_r+0x9e>
 800c6fa:	465f      	mov	r7, fp
 800c6fc:	4643      	mov	r3, r8
 800c6fe:	4698      	mov	r8, r3
 800c700:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c704:	2a39      	cmp	r2, #57	; 0x39
 800c706:	d106      	bne.n	800c716 <_dtoa_r+0x5fe>
 800c708:	9a01      	ldr	r2, [sp, #4]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d1f7      	bne.n	800c6fe <_dtoa_r+0x5e6>
 800c70e:	9901      	ldr	r1, [sp, #4]
 800c710:	2230      	movs	r2, #48	; 0x30
 800c712:	3701      	adds	r7, #1
 800c714:	700a      	strb	r2, [r1, #0]
 800c716:	781a      	ldrb	r2, [r3, #0]
 800c718:	3201      	adds	r2, #1
 800c71a:	701a      	strb	r2, [r3, #0]
 800c71c:	e7ae      	b.n	800c67c <_dtoa_r+0x564>
 800c71e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c722:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c72a:	d1b2      	bne.n	800c692 <_dtoa_r+0x57a>
 800c72c:	e7d3      	b.n	800c6d6 <_dtoa_r+0x5be>
 800c72e:	bf00      	nop
 800c730:	0800edf8 	.word	0x0800edf8
 800c734:	0800edd0 	.word	0x0800edd0
 800c738:	9907      	ldr	r1, [sp, #28]
 800c73a:	2900      	cmp	r1, #0
 800c73c:	f000 80d0 	beq.w	800c8e0 <_dtoa_r+0x7c8>
 800c740:	9906      	ldr	r1, [sp, #24]
 800c742:	2901      	cmp	r1, #1
 800c744:	f300 80b4 	bgt.w	800c8b0 <_dtoa_r+0x798>
 800c748:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c74a:	2900      	cmp	r1, #0
 800c74c:	f000 80ac 	beq.w	800c8a8 <_dtoa_r+0x790>
 800c750:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c754:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c758:	461c      	mov	r4, r3
 800c75a:	930a      	str	r3, [sp, #40]	; 0x28
 800c75c:	9b04      	ldr	r3, [sp, #16]
 800c75e:	4413      	add	r3, r2
 800c760:	9304      	str	r3, [sp, #16]
 800c762:	9b05      	ldr	r3, [sp, #20]
 800c764:	2101      	movs	r1, #1
 800c766:	4413      	add	r3, r2
 800c768:	4630      	mov	r0, r6
 800c76a:	9305      	str	r3, [sp, #20]
 800c76c:	f001 f934 	bl	800d9d8 <__i2b>
 800c770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c772:	4607      	mov	r7, r0
 800c774:	f1b8 0f00 	cmp.w	r8, #0
 800c778:	dd0d      	ble.n	800c796 <_dtoa_r+0x67e>
 800c77a:	9a05      	ldr	r2, [sp, #20]
 800c77c:	2a00      	cmp	r2, #0
 800c77e:	dd0a      	ble.n	800c796 <_dtoa_r+0x67e>
 800c780:	4542      	cmp	r2, r8
 800c782:	9904      	ldr	r1, [sp, #16]
 800c784:	bfa8      	it	ge
 800c786:	4642      	movge	r2, r8
 800c788:	1a89      	subs	r1, r1, r2
 800c78a:	9104      	str	r1, [sp, #16]
 800c78c:	9905      	ldr	r1, [sp, #20]
 800c78e:	eba8 0802 	sub.w	r8, r8, r2
 800c792:	1a8a      	subs	r2, r1, r2
 800c794:	9205      	str	r2, [sp, #20]
 800c796:	b303      	cbz	r3, 800c7da <_dtoa_r+0x6c2>
 800c798:	9a07      	ldr	r2, [sp, #28]
 800c79a:	2a00      	cmp	r2, #0
 800c79c:	f000 80a5 	beq.w	800c8ea <_dtoa_r+0x7d2>
 800c7a0:	2c00      	cmp	r4, #0
 800c7a2:	dd13      	ble.n	800c7cc <_dtoa_r+0x6b4>
 800c7a4:	4639      	mov	r1, r7
 800c7a6:	4622      	mov	r2, r4
 800c7a8:	4630      	mov	r0, r6
 800c7aa:	930d      	str	r3, [sp, #52]	; 0x34
 800c7ac:	f001 f9d4 	bl	800db58 <__pow5mult>
 800c7b0:	462a      	mov	r2, r5
 800c7b2:	4601      	mov	r1, r0
 800c7b4:	4607      	mov	r7, r0
 800c7b6:	4630      	mov	r0, r6
 800c7b8:	f001 f924 	bl	800da04 <__multiply>
 800c7bc:	4629      	mov	r1, r5
 800c7be:	900a      	str	r0, [sp, #40]	; 0x28
 800c7c0:	4630      	mov	r0, r6
 800c7c2:	f001 f807 	bl	800d7d4 <_Bfree>
 800c7c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c7c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7ca:	4615      	mov	r5, r2
 800c7cc:	1b1a      	subs	r2, r3, r4
 800c7ce:	d004      	beq.n	800c7da <_dtoa_r+0x6c2>
 800c7d0:	4629      	mov	r1, r5
 800c7d2:	4630      	mov	r0, r6
 800c7d4:	f001 f9c0 	bl	800db58 <__pow5mult>
 800c7d8:	4605      	mov	r5, r0
 800c7da:	2101      	movs	r1, #1
 800c7dc:	4630      	mov	r0, r6
 800c7de:	f001 f8fb 	bl	800d9d8 <__i2b>
 800c7e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	4604      	mov	r4, r0
 800c7e8:	f340 8081 	ble.w	800c8ee <_dtoa_r+0x7d6>
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	4601      	mov	r1, r0
 800c7f0:	4630      	mov	r0, r6
 800c7f2:	f001 f9b1 	bl	800db58 <__pow5mult>
 800c7f6:	9b06      	ldr	r3, [sp, #24]
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	4604      	mov	r4, r0
 800c7fc:	dd7a      	ble.n	800c8f4 <_dtoa_r+0x7dc>
 800c7fe:	2300      	movs	r3, #0
 800c800:	930a      	str	r3, [sp, #40]	; 0x28
 800c802:	6922      	ldr	r2, [r4, #16]
 800c804:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c808:	6910      	ldr	r0, [r2, #16]
 800c80a:	f001 f895 	bl	800d938 <__hi0bits>
 800c80e:	f1c0 0020 	rsb	r0, r0, #32
 800c812:	9b05      	ldr	r3, [sp, #20]
 800c814:	4418      	add	r0, r3
 800c816:	f010 001f 	ands.w	r0, r0, #31
 800c81a:	f000 808c 	beq.w	800c936 <_dtoa_r+0x81e>
 800c81e:	f1c0 0220 	rsb	r2, r0, #32
 800c822:	2a04      	cmp	r2, #4
 800c824:	f340 8085 	ble.w	800c932 <_dtoa_r+0x81a>
 800c828:	f1c0 001c 	rsb	r0, r0, #28
 800c82c:	9b04      	ldr	r3, [sp, #16]
 800c82e:	4403      	add	r3, r0
 800c830:	9304      	str	r3, [sp, #16]
 800c832:	9b05      	ldr	r3, [sp, #20]
 800c834:	4403      	add	r3, r0
 800c836:	4480      	add	r8, r0
 800c838:	9305      	str	r3, [sp, #20]
 800c83a:	9b04      	ldr	r3, [sp, #16]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	dd05      	ble.n	800c84c <_dtoa_r+0x734>
 800c840:	4629      	mov	r1, r5
 800c842:	461a      	mov	r2, r3
 800c844:	4630      	mov	r0, r6
 800c846:	f001 f9e1 	bl	800dc0c <__lshift>
 800c84a:	4605      	mov	r5, r0
 800c84c:	9b05      	ldr	r3, [sp, #20]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	dd05      	ble.n	800c85e <_dtoa_r+0x746>
 800c852:	4621      	mov	r1, r4
 800c854:	461a      	mov	r2, r3
 800c856:	4630      	mov	r0, r6
 800c858:	f001 f9d8 	bl	800dc0c <__lshift>
 800c85c:	4604      	mov	r4, r0
 800c85e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c860:	2b00      	cmp	r3, #0
 800c862:	d06a      	beq.n	800c93a <_dtoa_r+0x822>
 800c864:	4621      	mov	r1, r4
 800c866:	4628      	mov	r0, r5
 800c868:	f001 fa40 	bl	800dcec <__mcmp>
 800c86c:	2800      	cmp	r0, #0
 800c86e:	da64      	bge.n	800c93a <_dtoa_r+0x822>
 800c870:	2300      	movs	r3, #0
 800c872:	4629      	mov	r1, r5
 800c874:	220a      	movs	r2, #10
 800c876:	4630      	mov	r0, r6
 800c878:	f000 ffce 	bl	800d818 <__multadd>
 800c87c:	9b07      	ldr	r3, [sp, #28]
 800c87e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c882:	4605      	mov	r5, r0
 800c884:	2b00      	cmp	r3, #0
 800c886:	f000 8191 	beq.w	800cbac <_dtoa_r+0xa94>
 800c88a:	4639      	mov	r1, r7
 800c88c:	2300      	movs	r3, #0
 800c88e:	220a      	movs	r2, #10
 800c890:	4630      	mov	r0, r6
 800c892:	f000 ffc1 	bl	800d818 <__multadd>
 800c896:	f1ba 0f00 	cmp.w	sl, #0
 800c89a:	4607      	mov	r7, r0
 800c89c:	f300 808d 	bgt.w	800c9ba <_dtoa_r+0x8a2>
 800c8a0:	9b06      	ldr	r3, [sp, #24]
 800c8a2:	2b02      	cmp	r3, #2
 800c8a4:	dc50      	bgt.n	800c948 <_dtoa_r+0x830>
 800c8a6:	e088      	b.n	800c9ba <_dtoa_r+0x8a2>
 800c8a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8aa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c8ae:	e751      	b.n	800c754 <_dtoa_r+0x63c>
 800c8b0:	f109 34ff 	add.w	r4, r9, #4294967295
 800c8b4:	42a3      	cmp	r3, r4
 800c8b6:	bfbf      	itttt	lt
 800c8b8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800c8ba:	1ae3      	sublt	r3, r4, r3
 800c8bc:	18d2      	addlt	r2, r2, r3
 800c8be:	9209      	strlt	r2, [sp, #36]	; 0x24
 800c8c0:	bfb6      	itet	lt
 800c8c2:	4623      	movlt	r3, r4
 800c8c4:	1b1c      	subge	r4, r3, r4
 800c8c6:	2400      	movlt	r4, #0
 800c8c8:	f1b9 0f00 	cmp.w	r9, #0
 800c8cc:	bfb5      	itete	lt
 800c8ce:	9a04      	ldrlt	r2, [sp, #16]
 800c8d0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800c8d4:	eba2 0809 	sublt.w	r8, r2, r9
 800c8d8:	464a      	movge	r2, r9
 800c8da:	bfb8      	it	lt
 800c8dc:	2200      	movlt	r2, #0
 800c8de:	e73c      	b.n	800c75a <_dtoa_r+0x642>
 800c8e0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c8e4:	9f07      	ldr	r7, [sp, #28]
 800c8e6:	461c      	mov	r4, r3
 800c8e8:	e744      	b.n	800c774 <_dtoa_r+0x65c>
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	e770      	b.n	800c7d0 <_dtoa_r+0x6b8>
 800c8ee:	9b06      	ldr	r3, [sp, #24]
 800c8f0:	2b01      	cmp	r3, #1
 800c8f2:	dc18      	bgt.n	800c926 <_dtoa_r+0x80e>
 800c8f4:	9b02      	ldr	r3, [sp, #8]
 800c8f6:	b9b3      	cbnz	r3, 800c926 <_dtoa_r+0x80e>
 800c8f8:	9b03      	ldr	r3, [sp, #12]
 800c8fa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c8fe:	b9a2      	cbnz	r2, 800c92a <_dtoa_r+0x812>
 800c900:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c904:	0d12      	lsrs	r2, r2, #20
 800c906:	0512      	lsls	r2, r2, #20
 800c908:	b18a      	cbz	r2, 800c92e <_dtoa_r+0x816>
 800c90a:	9b04      	ldr	r3, [sp, #16]
 800c90c:	3301      	adds	r3, #1
 800c90e:	9304      	str	r3, [sp, #16]
 800c910:	9b05      	ldr	r3, [sp, #20]
 800c912:	3301      	adds	r3, #1
 800c914:	9305      	str	r3, [sp, #20]
 800c916:	2301      	movs	r3, #1
 800c918:	930a      	str	r3, [sp, #40]	; 0x28
 800c91a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	f47f af70 	bne.w	800c802 <_dtoa_r+0x6ea>
 800c922:	2001      	movs	r0, #1
 800c924:	e775      	b.n	800c812 <_dtoa_r+0x6fa>
 800c926:	2300      	movs	r3, #0
 800c928:	e7f6      	b.n	800c918 <_dtoa_r+0x800>
 800c92a:	9b02      	ldr	r3, [sp, #8]
 800c92c:	e7f4      	b.n	800c918 <_dtoa_r+0x800>
 800c92e:	920a      	str	r2, [sp, #40]	; 0x28
 800c930:	e7f3      	b.n	800c91a <_dtoa_r+0x802>
 800c932:	d082      	beq.n	800c83a <_dtoa_r+0x722>
 800c934:	4610      	mov	r0, r2
 800c936:	301c      	adds	r0, #28
 800c938:	e778      	b.n	800c82c <_dtoa_r+0x714>
 800c93a:	f1b9 0f00 	cmp.w	r9, #0
 800c93e:	dc37      	bgt.n	800c9b0 <_dtoa_r+0x898>
 800c940:	9b06      	ldr	r3, [sp, #24]
 800c942:	2b02      	cmp	r3, #2
 800c944:	dd34      	ble.n	800c9b0 <_dtoa_r+0x898>
 800c946:	46ca      	mov	sl, r9
 800c948:	f1ba 0f00 	cmp.w	sl, #0
 800c94c:	d10d      	bne.n	800c96a <_dtoa_r+0x852>
 800c94e:	4621      	mov	r1, r4
 800c950:	4653      	mov	r3, sl
 800c952:	2205      	movs	r2, #5
 800c954:	4630      	mov	r0, r6
 800c956:	f000 ff5f 	bl	800d818 <__multadd>
 800c95a:	4601      	mov	r1, r0
 800c95c:	4604      	mov	r4, r0
 800c95e:	4628      	mov	r0, r5
 800c960:	f001 f9c4 	bl	800dcec <__mcmp>
 800c964:	2800      	cmp	r0, #0
 800c966:	f73f adeb 	bgt.w	800c540 <_dtoa_r+0x428>
 800c96a:	9b08      	ldr	r3, [sp, #32]
 800c96c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c970:	ea6f 0b03 	mvn.w	fp, r3
 800c974:	f04f 0900 	mov.w	r9, #0
 800c978:	4621      	mov	r1, r4
 800c97a:	4630      	mov	r0, r6
 800c97c:	f000 ff2a 	bl	800d7d4 <_Bfree>
 800c980:	2f00      	cmp	r7, #0
 800c982:	f43f aea8 	beq.w	800c6d6 <_dtoa_r+0x5be>
 800c986:	f1b9 0f00 	cmp.w	r9, #0
 800c98a:	d005      	beq.n	800c998 <_dtoa_r+0x880>
 800c98c:	45b9      	cmp	r9, r7
 800c98e:	d003      	beq.n	800c998 <_dtoa_r+0x880>
 800c990:	4649      	mov	r1, r9
 800c992:	4630      	mov	r0, r6
 800c994:	f000 ff1e 	bl	800d7d4 <_Bfree>
 800c998:	4639      	mov	r1, r7
 800c99a:	4630      	mov	r0, r6
 800c99c:	f000 ff1a 	bl	800d7d4 <_Bfree>
 800c9a0:	e699      	b.n	800c6d6 <_dtoa_r+0x5be>
 800c9a2:	2400      	movs	r4, #0
 800c9a4:	4627      	mov	r7, r4
 800c9a6:	e7e0      	b.n	800c96a <_dtoa_r+0x852>
 800c9a8:	46bb      	mov	fp, r7
 800c9aa:	4604      	mov	r4, r0
 800c9ac:	4607      	mov	r7, r0
 800c9ae:	e5c7      	b.n	800c540 <_dtoa_r+0x428>
 800c9b0:	9b07      	ldr	r3, [sp, #28]
 800c9b2:	46ca      	mov	sl, r9
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	f000 8100 	beq.w	800cbba <_dtoa_r+0xaa2>
 800c9ba:	f1b8 0f00 	cmp.w	r8, #0
 800c9be:	dd05      	ble.n	800c9cc <_dtoa_r+0x8b4>
 800c9c0:	4639      	mov	r1, r7
 800c9c2:	4642      	mov	r2, r8
 800c9c4:	4630      	mov	r0, r6
 800c9c6:	f001 f921 	bl	800dc0c <__lshift>
 800c9ca:	4607      	mov	r7, r0
 800c9cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d05d      	beq.n	800ca8e <_dtoa_r+0x976>
 800c9d2:	6879      	ldr	r1, [r7, #4]
 800c9d4:	4630      	mov	r0, r6
 800c9d6:	f000 febd 	bl	800d754 <_Balloc>
 800c9da:	4680      	mov	r8, r0
 800c9dc:	b928      	cbnz	r0, 800c9ea <_dtoa_r+0x8d2>
 800c9de:	4b82      	ldr	r3, [pc, #520]	; (800cbe8 <_dtoa_r+0xad0>)
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c9e6:	f7ff bbaf 	b.w	800c148 <_dtoa_r+0x30>
 800c9ea:	693a      	ldr	r2, [r7, #16]
 800c9ec:	3202      	adds	r2, #2
 800c9ee:	0092      	lsls	r2, r2, #2
 800c9f0:	f107 010c 	add.w	r1, r7, #12
 800c9f4:	300c      	adds	r0, #12
 800c9f6:	f7fd fc5d 	bl	800a2b4 <memcpy>
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	4641      	mov	r1, r8
 800c9fe:	4630      	mov	r0, r6
 800ca00:	f001 f904 	bl	800dc0c <__lshift>
 800ca04:	9b01      	ldr	r3, [sp, #4]
 800ca06:	3301      	adds	r3, #1
 800ca08:	9304      	str	r3, [sp, #16]
 800ca0a:	9b01      	ldr	r3, [sp, #4]
 800ca0c:	4453      	add	r3, sl
 800ca0e:	9308      	str	r3, [sp, #32]
 800ca10:	9b02      	ldr	r3, [sp, #8]
 800ca12:	f003 0301 	and.w	r3, r3, #1
 800ca16:	46b9      	mov	r9, r7
 800ca18:	9307      	str	r3, [sp, #28]
 800ca1a:	4607      	mov	r7, r0
 800ca1c:	9b04      	ldr	r3, [sp, #16]
 800ca1e:	4621      	mov	r1, r4
 800ca20:	3b01      	subs	r3, #1
 800ca22:	4628      	mov	r0, r5
 800ca24:	9302      	str	r3, [sp, #8]
 800ca26:	f7ff faeb 	bl	800c000 <quorem>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	3330      	adds	r3, #48	; 0x30
 800ca2e:	9005      	str	r0, [sp, #20]
 800ca30:	4649      	mov	r1, r9
 800ca32:	4628      	mov	r0, r5
 800ca34:	9309      	str	r3, [sp, #36]	; 0x24
 800ca36:	f001 f959 	bl	800dcec <__mcmp>
 800ca3a:	463a      	mov	r2, r7
 800ca3c:	4682      	mov	sl, r0
 800ca3e:	4621      	mov	r1, r4
 800ca40:	4630      	mov	r0, r6
 800ca42:	f001 f96f 	bl	800dd24 <__mdiff>
 800ca46:	68c2      	ldr	r2, [r0, #12]
 800ca48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca4a:	4680      	mov	r8, r0
 800ca4c:	bb0a      	cbnz	r2, 800ca92 <_dtoa_r+0x97a>
 800ca4e:	4601      	mov	r1, r0
 800ca50:	4628      	mov	r0, r5
 800ca52:	f001 f94b 	bl	800dcec <__mcmp>
 800ca56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca58:	4602      	mov	r2, r0
 800ca5a:	4641      	mov	r1, r8
 800ca5c:	4630      	mov	r0, r6
 800ca5e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800ca62:	f000 feb7 	bl	800d7d4 <_Bfree>
 800ca66:	9b06      	ldr	r3, [sp, #24]
 800ca68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca6a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ca6e:	ea43 0102 	orr.w	r1, r3, r2
 800ca72:	9b07      	ldr	r3, [sp, #28]
 800ca74:	430b      	orrs	r3, r1
 800ca76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca78:	d10d      	bne.n	800ca96 <_dtoa_r+0x97e>
 800ca7a:	2b39      	cmp	r3, #57	; 0x39
 800ca7c:	d029      	beq.n	800cad2 <_dtoa_r+0x9ba>
 800ca7e:	f1ba 0f00 	cmp.w	sl, #0
 800ca82:	dd01      	ble.n	800ca88 <_dtoa_r+0x970>
 800ca84:	9b05      	ldr	r3, [sp, #20]
 800ca86:	3331      	adds	r3, #49	; 0x31
 800ca88:	9a02      	ldr	r2, [sp, #8]
 800ca8a:	7013      	strb	r3, [r2, #0]
 800ca8c:	e774      	b.n	800c978 <_dtoa_r+0x860>
 800ca8e:	4638      	mov	r0, r7
 800ca90:	e7b8      	b.n	800ca04 <_dtoa_r+0x8ec>
 800ca92:	2201      	movs	r2, #1
 800ca94:	e7e1      	b.n	800ca5a <_dtoa_r+0x942>
 800ca96:	f1ba 0f00 	cmp.w	sl, #0
 800ca9a:	db06      	blt.n	800caaa <_dtoa_r+0x992>
 800ca9c:	9906      	ldr	r1, [sp, #24]
 800ca9e:	ea41 0a0a 	orr.w	sl, r1, sl
 800caa2:	9907      	ldr	r1, [sp, #28]
 800caa4:	ea5a 0101 	orrs.w	r1, sl, r1
 800caa8:	d120      	bne.n	800caec <_dtoa_r+0x9d4>
 800caaa:	2a00      	cmp	r2, #0
 800caac:	ddec      	ble.n	800ca88 <_dtoa_r+0x970>
 800caae:	4629      	mov	r1, r5
 800cab0:	2201      	movs	r2, #1
 800cab2:	4630      	mov	r0, r6
 800cab4:	9304      	str	r3, [sp, #16]
 800cab6:	f001 f8a9 	bl	800dc0c <__lshift>
 800caba:	4621      	mov	r1, r4
 800cabc:	4605      	mov	r5, r0
 800cabe:	f001 f915 	bl	800dcec <__mcmp>
 800cac2:	2800      	cmp	r0, #0
 800cac4:	9b04      	ldr	r3, [sp, #16]
 800cac6:	dc02      	bgt.n	800cace <_dtoa_r+0x9b6>
 800cac8:	d1de      	bne.n	800ca88 <_dtoa_r+0x970>
 800caca:	07da      	lsls	r2, r3, #31
 800cacc:	d5dc      	bpl.n	800ca88 <_dtoa_r+0x970>
 800cace:	2b39      	cmp	r3, #57	; 0x39
 800cad0:	d1d8      	bne.n	800ca84 <_dtoa_r+0x96c>
 800cad2:	9a02      	ldr	r2, [sp, #8]
 800cad4:	2339      	movs	r3, #57	; 0x39
 800cad6:	7013      	strb	r3, [r2, #0]
 800cad8:	4643      	mov	r3, r8
 800cada:	4698      	mov	r8, r3
 800cadc:	3b01      	subs	r3, #1
 800cade:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800cae2:	2a39      	cmp	r2, #57	; 0x39
 800cae4:	d051      	beq.n	800cb8a <_dtoa_r+0xa72>
 800cae6:	3201      	adds	r2, #1
 800cae8:	701a      	strb	r2, [r3, #0]
 800caea:	e745      	b.n	800c978 <_dtoa_r+0x860>
 800caec:	2a00      	cmp	r2, #0
 800caee:	dd03      	ble.n	800caf8 <_dtoa_r+0x9e0>
 800caf0:	2b39      	cmp	r3, #57	; 0x39
 800caf2:	d0ee      	beq.n	800cad2 <_dtoa_r+0x9ba>
 800caf4:	3301      	adds	r3, #1
 800caf6:	e7c7      	b.n	800ca88 <_dtoa_r+0x970>
 800caf8:	9a04      	ldr	r2, [sp, #16]
 800cafa:	9908      	ldr	r1, [sp, #32]
 800cafc:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cb00:	428a      	cmp	r2, r1
 800cb02:	d02b      	beq.n	800cb5c <_dtoa_r+0xa44>
 800cb04:	4629      	mov	r1, r5
 800cb06:	2300      	movs	r3, #0
 800cb08:	220a      	movs	r2, #10
 800cb0a:	4630      	mov	r0, r6
 800cb0c:	f000 fe84 	bl	800d818 <__multadd>
 800cb10:	45b9      	cmp	r9, r7
 800cb12:	4605      	mov	r5, r0
 800cb14:	f04f 0300 	mov.w	r3, #0
 800cb18:	f04f 020a 	mov.w	r2, #10
 800cb1c:	4649      	mov	r1, r9
 800cb1e:	4630      	mov	r0, r6
 800cb20:	d107      	bne.n	800cb32 <_dtoa_r+0xa1a>
 800cb22:	f000 fe79 	bl	800d818 <__multadd>
 800cb26:	4681      	mov	r9, r0
 800cb28:	4607      	mov	r7, r0
 800cb2a:	9b04      	ldr	r3, [sp, #16]
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	9304      	str	r3, [sp, #16]
 800cb30:	e774      	b.n	800ca1c <_dtoa_r+0x904>
 800cb32:	f000 fe71 	bl	800d818 <__multadd>
 800cb36:	4639      	mov	r1, r7
 800cb38:	4681      	mov	r9, r0
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	220a      	movs	r2, #10
 800cb3e:	4630      	mov	r0, r6
 800cb40:	f000 fe6a 	bl	800d818 <__multadd>
 800cb44:	4607      	mov	r7, r0
 800cb46:	e7f0      	b.n	800cb2a <_dtoa_r+0xa12>
 800cb48:	f1ba 0f00 	cmp.w	sl, #0
 800cb4c:	9a01      	ldr	r2, [sp, #4]
 800cb4e:	bfcc      	ite	gt
 800cb50:	46d0      	movgt	r8, sl
 800cb52:	f04f 0801 	movle.w	r8, #1
 800cb56:	4490      	add	r8, r2
 800cb58:	f04f 0900 	mov.w	r9, #0
 800cb5c:	4629      	mov	r1, r5
 800cb5e:	2201      	movs	r2, #1
 800cb60:	4630      	mov	r0, r6
 800cb62:	9302      	str	r3, [sp, #8]
 800cb64:	f001 f852 	bl	800dc0c <__lshift>
 800cb68:	4621      	mov	r1, r4
 800cb6a:	4605      	mov	r5, r0
 800cb6c:	f001 f8be 	bl	800dcec <__mcmp>
 800cb70:	2800      	cmp	r0, #0
 800cb72:	dcb1      	bgt.n	800cad8 <_dtoa_r+0x9c0>
 800cb74:	d102      	bne.n	800cb7c <_dtoa_r+0xa64>
 800cb76:	9b02      	ldr	r3, [sp, #8]
 800cb78:	07db      	lsls	r3, r3, #31
 800cb7a:	d4ad      	bmi.n	800cad8 <_dtoa_r+0x9c0>
 800cb7c:	4643      	mov	r3, r8
 800cb7e:	4698      	mov	r8, r3
 800cb80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb84:	2a30      	cmp	r2, #48	; 0x30
 800cb86:	d0fa      	beq.n	800cb7e <_dtoa_r+0xa66>
 800cb88:	e6f6      	b.n	800c978 <_dtoa_r+0x860>
 800cb8a:	9a01      	ldr	r2, [sp, #4]
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d1a4      	bne.n	800cada <_dtoa_r+0x9c2>
 800cb90:	f10b 0b01 	add.w	fp, fp, #1
 800cb94:	2331      	movs	r3, #49	; 0x31
 800cb96:	e778      	b.n	800ca8a <_dtoa_r+0x972>
 800cb98:	4b14      	ldr	r3, [pc, #80]	; (800cbec <_dtoa_r+0xad4>)
 800cb9a:	f7ff bb27 	b.w	800c1ec <_dtoa_r+0xd4>
 800cb9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	f47f ab03 	bne.w	800c1ac <_dtoa_r+0x94>
 800cba6:	4b12      	ldr	r3, [pc, #72]	; (800cbf0 <_dtoa_r+0xad8>)
 800cba8:	f7ff bb20 	b.w	800c1ec <_dtoa_r+0xd4>
 800cbac:	f1ba 0f00 	cmp.w	sl, #0
 800cbb0:	dc03      	bgt.n	800cbba <_dtoa_r+0xaa2>
 800cbb2:	9b06      	ldr	r3, [sp, #24]
 800cbb4:	2b02      	cmp	r3, #2
 800cbb6:	f73f aec7 	bgt.w	800c948 <_dtoa_r+0x830>
 800cbba:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cbbe:	4621      	mov	r1, r4
 800cbc0:	4628      	mov	r0, r5
 800cbc2:	f7ff fa1d 	bl	800c000 <quorem>
 800cbc6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cbca:	f808 3b01 	strb.w	r3, [r8], #1
 800cbce:	9a01      	ldr	r2, [sp, #4]
 800cbd0:	eba8 0202 	sub.w	r2, r8, r2
 800cbd4:	4592      	cmp	sl, r2
 800cbd6:	ddb7      	ble.n	800cb48 <_dtoa_r+0xa30>
 800cbd8:	4629      	mov	r1, r5
 800cbda:	2300      	movs	r3, #0
 800cbdc:	220a      	movs	r2, #10
 800cbde:	4630      	mov	r0, r6
 800cbe0:	f000 fe1a 	bl	800d818 <__multadd>
 800cbe4:	4605      	mov	r5, r0
 800cbe6:	e7ea      	b.n	800cbbe <_dtoa_r+0xaa6>
 800cbe8:	0800ec80 	.word	0x0800ec80
 800cbec:	0800ea84 	.word	0x0800ea84
 800cbf0:	0800ec01 	.word	0x0800ec01

0800cbf4 <__sflush_r>:
 800cbf4:	898a      	ldrh	r2, [r1, #12]
 800cbf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbfa:	4605      	mov	r5, r0
 800cbfc:	0710      	lsls	r0, r2, #28
 800cbfe:	460c      	mov	r4, r1
 800cc00:	d458      	bmi.n	800ccb4 <__sflush_r+0xc0>
 800cc02:	684b      	ldr	r3, [r1, #4]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	dc05      	bgt.n	800cc14 <__sflush_r+0x20>
 800cc08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	dc02      	bgt.n	800cc14 <__sflush_r+0x20>
 800cc0e:	2000      	movs	r0, #0
 800cc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc16:	2e00      	cmp	r6, #0
 800cc18:	d0f9      	beq.n	800cc0e <__sflush_r+0x1a>
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc20:	682f      	ldr	r7, [r5, #0]
 800cc22:	602b      	str	r3, [r5, #0]
 800cc24:	d032      	beq.n	800cc8c <__sflush_r+0x98>
 800cc26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc28:	89a3      	ldrh	r3, [r4, #12]
 800cc2a:	075a      	lsls	r2, r3, #29
 800cc2c:	d505      	bpl.n	800cc3a <__sflush_r+0x46>
 800cc2e:	6863      	ldr	r3, [r4, #4]
 800cc30:	1ac0      	subs	r0, r0, r3
 800cc32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc34:	b10b      	cbz	r3, 800cc3a <__sflush_r+0x46>
 800cc36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc38:	1ac0      	subs	r0, r0, r3
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc40:	6a21      	ldr	r1, [r4, #32]
 800cc42:	4628      	mov	r0, r5
 800cc44:	47b0      	blx	r6
 800cc46:	1c43      	adds	r3, r0, #1
 800cc48:	89a3      	ldrh	r3, [r4, #12]
 800cc4a:	d106      	bne.n	800cc5a <__sflush_r+0x66>
 800cc4c:	6829      	ldr	r1, [r5, #0]
 800cc4e:	291d      	cmp	r1, #29
 800cc50:	d82c      	bhi.n	800ccac <__sflush_r+0xb8>
 800cc52:	4a2a      	ldr	r2, [pc, #168]	; (800ccfc <__sflush_r+0x108>)
 800cc54:	40ca      	lsrs	r2, r1
 800cc56:	07d6      	lsls	r6, r2, #31
 800cc58:	d528      	bpl.n	800ccac <__sflush_r+0xb8>
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	6062      	str	r2, [r4, #4]
 800cc5e:	04d9      	lsls	r1, r3, #19
 800cc60:	6922      	ldr	r2, [r4, #16]
 800cc62:	6022      	str	r2, [r4, #0]
 800cc64:	d504      	bpl.n	800cc70 <__sflush_r+0x7c>
 800cc66:	1c42      	adds	r2, r0, #1
 800cc68:	d101      	bne.n	800cc6e <__sflush_r+0x7a>
 800cc6a:	682b      	ldr	r3, [r5, #0]
 800cc6c:	b903      	cbnz	r3, 800cc70 <__sflush_r+0x7c>
 800cc6e:	6560      	str	r0, [r4, #84]	; 0x54
 800cc70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc72:	602f      	str	r7, [r5, #0]
 800cc74:	2900      	cmp	r1, #0
 800cc76:	d0ca      	beq.n	800cc0e <__sflush_r+0x1a>
 800cc78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc7c:	4299      	cmp	r1, r3
 800cc7e:	d002      	beq.n	800cc86 <__sflush_r+0x92>
 800cc80:	4628      	mov	r0, r5
 800cc82:	f7fd fb2d 	bl	800a2e0 <_free_r>
 800cc86:	2000      	movs	r0, #0
 800cc88:	6360      	str	r0, [r4, #52]	; 0x34
 800cc8a:	e7c1      	b.n	800cc10 <__sflush_r+0x1c>
 800cc8c:	6a21      	ldr	r1, [r4, #32]
 800cc8e:	2301      	movs	r3, #1
 800cc90:	4628      	mov	r0, r5
 800cc92:	47b0      	blx	r6
 800cc94:	1c41      	adds	r1, r0, #1
 800cc96:	d1c7      	bne.n	800cc28 <__sflush_r+0x34>
 800cc98:	682b      	ldr	r3, [r5, #0]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d0c4      	beq.n	800cc28 <__sflush_r+0x34>
 800cc9e:	2b1d      	cmp	r3, #29
 800cca0:	d001      	beq.n	800cca6 <__sflush_r+0xb2>
 800cca2:	2b16      	cmp	r3, #22
 800cca4:	d101      	bne.n	800ccaa <__sflush_r+0xb6>
 800cca6:	602f      	str	r7, [r5, #0]
 800cca8:	e7b1      	b.n	800cc0e <__sflush_r+0x1a>
 800ccaa:	89a3      	ldrh	r3, [r4, #12]
 800ccac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccb0:	81a3      	strh	r3, [r4, #12]
 800ccb2:	e7ad      	b.n	800cc10 <__sflush_r+0x1c>
 800ccb4:	690f      	ldr	r7, [r1, #16]
 800ccb6:	2f00      	cmp	r7, #0
 800ccb8:	d0a9      	beq.n	800cc0e <__sflush_r+0x1a>
 800ccba:	0793      	lsls	r3, r2, #30
 800ccbc:	680e      	ldr	r6, [r1, #0]
 800ccbe:	bf08      	it	eq
 800ccc0:	694b      	ldreq	r3, [r1, #20]
 800ccc2:	600f      	str	r7, [r1, #0]
 800ccc4:	bf18      	it	ne
 800ccc6:	2300      	movne	r3, #0
 800ccc8:	eba6 0807 	sub.w	r8, r6, r7
 800cccc:	608b      	str	r3, [r1, #8]
 800ccce:	f1b8 0f00 	cmp.w	r8, #0
 800ccd2:	dd9c      	ble.n	800cc0e <__sflush_r+0x1a>
 800ccd4:	6a21      	ldr	r1, [r4, #32]
 800ccd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ccd8:	4643      	mov	r3, r8
 800ccda:	463a      	mov	r2, r7
 800ccdc:	4628      	mov	r0, r5
 800ccde:	47b0      	blx	r6
 800cce0:	2800      	cmp	r0, #0
 800cce2:	dc06      	bgt.n	800ccf2 <__sflush_r+0xfe>
 800cce4:	89a3      	ldrh	r3, [r4, #12]
 800cce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccea:	81a3      	strh	r3, [r4, #12]
 800ccec:	f04f 30ff 	mov.w	r0, #4294967295
 800ccf0:	e78e      	b.n	800cc10 <__sflush_r+0x1c>
 800ccf2:	4407      	add	r7, r0
 800ccf4:	eba8 0800 	sub.w	r8, r8, r0
 800ccf8:	e7e9      	b.n	800ccce <__sflush_r+0xda>
 800ccfa:	bf00      	nop
 800ccfc:	20400001 	.word	0x20400001

0800cd00 <_fflush_r>:
 800cd00:	b538      	push	{r3, r4, r5, lr}
 800cd02:	690b      	ldr	r3, [r1, #16]
 800cd04:	4605      	mov	r5, r0
 800cd06:	460c      	mov	r4, r1
 800cd08:	b913      	cbnz	r3, 800cd10 <_fflush_r+0x10>
 800cd0a:	2500      	movs	r5, #0
 800cd0c:	4628      	mov	r0, r5
 800cd0e:	bd38      	pop	{r3, r4, r5, pc}
 800cd10:	b118      	cbz	r0, 800cd1a <_fflush_r+0x1a>
 800cd12:	6983      	ldr	r3, [r0, #24]
 800cd14:	b90b      	cbnz	r3, 800cd1a <_fflush_r+0x1a>
 800cd16:	f000 f887 	bl	800ce28 <__sinit>
 800cd1a:	4b14      	ldr	r3, [pc, #80]	; (800cd6c <_fflush_r+0x6c>)
 800cd1c:	429c      	cmp	r4, r3
 800cd1e:	d11b      	bne.n	800cd58 <_fflush_r+0x58>
 800cd20:	686c      	ldr	r4, [r5, #4]
 800cd22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d0ef      	beq.n	800cd0a <_fflush_r+0xa>
 800cd2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd2c:	07d0      	lsls	r0, r2, #31
 800cd2e:	d404      	bmi.n	800cd3a <_fflush_r+0x3a>
 800cd30:	0599      	lsls	r1, r3, #22
 800cd32:	d402      	bmi.n	800cd3a <_fflush_r+0x3a>
 800cd34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd36:	f000 fc88 	bl	800d64a <__retarget_lock_acquire_recursive>
 800cd3a:	4628      	mov	r0, r5
 800cd3c:	4621      	mov	r1, r4
 800cd3e:	f7ff ff59 	bl	800cbf4 <__sflush_r>
 800cd42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd44:	07da      	lsls	r2, r3, #31
 800cd46:	4605      	mov	r5, r0
 800cd48:	d4e0      	bmi.n	800cd0c <_fflush_r+0xc>
 800cd4a:	89a3      	ldrh	r3, [r4, #12]
 800cd4c:	059b      	lsls	r3, r3, #22
 800cd4e:	d4dd      	bmi.n	800cd0c <_fflush_r+0xc>
 800cd50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd52:	f000 fc7b 	bl	800d64c <__retarget_lock_release_recursive>
 800cd56:	e7d9      	b.n	800cd0c <_fflush_r+0xc>
 800cd58:	4b05      	ldr	r3, [pc, #20]	; (800cd70 <_fflush_r+0x70>)
 800cd5a:	429c      	cmp	r4, r3
 800cd5c:	d101      	bne.n	800cd62 <_fflush_r+0x62>
 800cd5e:	68ac      	ldr	r4, [r5, #8]
 800cd60:	e7df      	b.n	800cd22 <_fflush_r+0x22>
 800cd62:	4b04      	ldr	r3, [pc, #16]	; (800cd74 <_fflush_r+0x74>)
 800cd64:	429c      	cmp	r4, r3
 800cd66:	bf08      	it	eq
 800cd68:	68ec      	ldreq	r4, [r5, #12]
 800cd6a:	e7da      	b.n	800cd22 <_fflush_r+0x22>
 800cd6c:	0800ecb4 	.word	0x0800ecb4
 800cd70:	0800ecd4 	.word	0x0800ecd4
 800cd74:	0800ec94 	.word	0x0800ec94

0800cd78 <std>:
 800cd78:	2300      	movs	r3, #0
 800cd7a:	b510      	push	{r4, lr}
 800cd7c:	4604      	mov	r4, r0
 800cd7e:	e9c0 3300 	strd	r3, r3, [r0]
 800cd82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd86:	6083      	str	r3, [r0, #8]
 800cd88:	8181      	strh	r1, [r0, #12]
 800cd8a:	6643      	str	r3, [r0, #100]	; 0x64
 800cd8c:	81c2      	strh	r2, [r0, #14]
 800cd8e:	6183      	str	r3, [r0, #24]
 800cd90:	4619      	mov	r1, r3
 800cd92:	2208      	movs	r2, #8
 800cd94:	305c      	adds	r0, #92	; 0x5c
 800cd96:	f7fd fa9b 	bl	800a2d0 <memset>
 800cd9a:	4b05      	ldr	r3, [pc, #20]	; (800cdb0 <std+0x38>)
 800cd9c:	6263      	str	r3, [r4, #36]	; 0x24
 800cd9e:	4b05      	ldr	r3, [pc, #20]	; (800cdb4 <std+0x3c>)
 800cda0:	62a3      	str	r3, [r4, #40]	; 0x28
 800cda2:	4b05      	ldr	r3, [pc, #20]	; (800cdb8 <std+0x40>)
 800cda4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cda6:	4b05      	ldr	r3, [pc, #20]	; (800cdbc <std+0x44>)
 800cda8:	6224      	str	r4, [r4, #32]
 800cdaa:	6323      	str	r3, [r4, #48]	; 0x30
 800cdac:	bd10      	pop	{r4, pc}
 800cdae:	bf00      	nop
 800cdb0:	0800e679 	.word	0x0800e679
 800cdb4:	0800e69b 	.word	0x0800e69b
 800cdb8:	0800e6d3 	.word	0x0800e6d3
 800cdbc:	0800e6f7 	.word	0x0800e6f7

0800cdc0 <_cleanup_r>:
 800cdc0:	4901      	ldr	r1, [pc, #4]	; (800cdc8 <_cleanup_r+0x8>)
 800cdc2:	f000 b8af 	b.w	800cf24 <_fwalk_reent>
 800cdc6:	bf00      	nop
 800cdc8:	0800cd01 	.word	0x0800cd01

0800cdcc <__sfmoreglue>:
 800cdcc:	b570      	push	{r4, r5, r6, lr}
 800cdce:	2268      	movs	r2, #104	; 0x68
 800cdd0:	1e4d      	subs	r5, r1, #1
 800cdd2:	4355      	muls	r5, r2
 800cdd4:	460e      	mov	r6, r1
 800cdd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cdda:	f7fd faed 	bl	800a3b8 <_malloc_r>
 800cdde:	4604      	mov	r4, r0
 800cde0:	b140      	cbz	r0, 800cdf4 <__sfmoreglue+0x28>
 800cde2:	2100      	movs	r1, #0
 800cde4:	e9c0 1600 	strd	r1, r6, [r0]
 800cde8:	300c      	adds	r0, #12
 800cdea:	60a0      	str	r0, [r4, #8]
 800cdec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cdf0:	f7fd fa6e 	bl	800a2d0 <memset>
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	bd70      	pop	{r4, r5, r6, pc}

0800cdf8 <__sfp_lock_acquire>:
 800cdf8:	4801      	ldr	r0, [pc, #4]	; (800ce00 <__sfp_lock_acquire+0x8>)
 800cdfa:	f000 bc26 	b.w	800d64a <__retarget_lock_acquire_recursive>
 800cdfe:	bf00      	nop
 800ce00:	2000279d 	.word	0x2000279d

0800ce04 <__sfp_lock_release>:
 800ce04:	4801      	ldr	r0, [pc, #4]	; (800ce0c <__sfp_lock_release+0x8>)
 800ce06:	f000 bc21 	b.w	800d64c <__retarget_lock_release_recursive>
 800ce0a:	bf00      	nop
 800ce0c:	2000279d 	.word	0x2000279d

0800ce10 <__sinit_lock_acquire>:
 800ce10:	4801      	ldr	r0, [pc, #4]	; (800ce18 <__sinit_lock_acquire+0x8>)
 800ce12:	f000 bc1a 	b.w	800d64a <__retarget_lock_acquire_recursive>
 800ce16:	bf00      	nop
 800ce18:	2000279e 	.word	0x2000279e

0800ce1c <__sinit_lock_release>:
 800ce1c:	4801      	ldr	r0, [pc, #4]	; (800ce24 <__sinit_lock_release+0x8>)
 800ce1e:	f000 bc15 	b.w	800d64c <__retarget_lock_release_recursive>
 800ce22:	bf00      	nop
 800ce24:	2000279e 	.word	0x2000279e

0800ce28 <__sinit>:
 800ce28:	b510      	push	{r4, lr}
 800ce2a:	4604      	mov	r4, r0
 800ce2c:	f7ff fff0 	bl	800ce10 <__sinit_lock_acquire>
 800ce30:	69a3      	ldr	r3, [r4, #24]
 800ce32:	b11b      	cbz	r3, 800ce3c <__sinit+0x14>
 800ce34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce38:	f7ff bff0 	b.w	800ce1c <__sinit_lock_release>
 800ce3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ce40:	6523      	str	r3, [r4, #80]	; 0x50
 800ce42:	4b13      	ldr	r3, [pc, #76]	; (800ce90 <__sinit+0x68>)
 800ce44:	4a13      	ldr	r2, [pc, #76]	; (800ce94 <__sinit+0x6c>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	62a2      	str	r2, [r4, #40]	; 0x28
 800ce4a:	42a3      	cmp	r3, r4
 800ce4c:	bf04      	itt	eq
 800ce4e:	2301      	moveq	r3, #1
 800ce50:	61a3      	streq	r3, [r4, #24]
 800ce52:	4620      	mov	r0, r4
 800ce54:	f000 f820 	bl	800ce98 <__sfp>
 800ce58:	6060      	str	r0, [r4, #4]
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	f000 f81c 	bl	800ce98 <__sfp>
 800ce60:	60a0      	str	r0, [r4, #8]
 800ce62:	4620      	mov	r0, r4
 800ce64:	f000 f818 	bl	800ce98 <__sfp>
 800ce68:	2200      	movs	r2, #0
 800ce6a:	60e0      	str	r0, [r4, #12]
 800ce6c:	2104      	movs	r1, #4
 800ce6e:	6860      	ldr	r0, [r4, #4]
 800ce70:	f7ff ff82 	bl	800cd78 <std>
 800ce74:	68a0      	ldr	r0, [r4, #8]
 800ce76:	2201      	movs	r2, #1
 800ce78:	2109      	movs	r1, #9
 800ce7a:	f7ff ff7d 	bl	800cd78 <std>
 800ce7e:	68e0      	ldr	r0, [r4, #12]
 800ce80:	2202      	movs	r2, #2
 800ce82:	2112      	movs	r1, #18
 800ce84:	f7ff ff78 	bl	800cd78 <std>
 800ce88:	2301      	movs	r3, #1
 800ce8a:	61a3      	str	r3, [r4, #24]
 800ce8c:	e7d2      	b.n	800ce34 <__sinit+0xc>
 800ce8e:	bf00      	nop
 800ce90:	0800ea70 	.word	0x0800ea70
 800ce94:	0800cdc1 	.word	0x0800cdc1

0800ce98 <__sfp>:
 800ce98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce9a:	4607      	mov	r7, r0
 800ce9c:	f7ff ffac 	bl	800cdf8 <__sfp_lock_acquire>
 800cea0:	4b1e      	ldr	r3, [pc, #120]	; (800cf1c <__sfp+0x84>)
 800cea2:	681e      	ldr	r6, [r3, #0]
 800cea4:	69b3      	ldr	r3, [r6, #24]
 800cea6:	b913      	cbnz	r3, 800ceae <__sfp+0x16>
 800cea8:	4630      	mov	r0, r6
 800ceaa:	f7ff ffbd 	bl	800ce28 <__sinit>
 800ceae:	3648      	adds	r6, #72	; 0x48
 800ceb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ceb4:	3b01      	subs	r3, #1
 800ceb6:	d503      	bpl.n	800cec0 <__sfp+0x28>
 800ceb8:	6833      	ldr	r3, [r6, #0]
 800ceba:	b30b      	cbz	r3, 800cf00 <__sfp+0x68>
 800cebc:	6836      	ldr	r6, [r6, #0]
 800cebe:	e7f7      	b.n	800ceb0 <__sfp+0x18>
 800cec0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cec4:	b9d5      	cbnz	r5, 800cefc <__sfp+0x64>
 800cec6:	4b16      	ldr	r3, [pc, #88]	; (800cf20 <__sfp+0x88>)
 800cec8:	60e3      	str	r3, [r4, #12]
 800ceca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cece:	6665      	str	r5, [r4, #100]	; 0x64
 800ced0:	f000 fbba 	bl	800d648 <__retarget_lock_init_recursive>
 800ced4:	f7ff ff96 	bl	800ce04 <__sfp_lock_release>
 800ced8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cedc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cee0:	6025      	str	r5, [r4, #0]
 800cee2:	61a5      	str	r5, [r4, #24]
 800cee4:	2208      	movs	r2, #8
 800cee6:	4629      	mov	r1, r5
 800cee8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ceec:	f7fd f9f0 	bl	800a2d0 <memset>
 800cef0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cef4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cef8:	4620      	mov	r0, r4
 800cefa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cefc:	3468      	adds	r4, #104	; 0x68
 800cefe:	e7d9      	b.n	800ceb4 <__sfp+0x1c>
 800cf00:	2104      	movs	r1, #4
 800cf02:	4638      	mov	r0, r7
 800cf04:	f7ff ff62 	bl	800cdcc <__sfmoreglue>
 800cf08:	4604      	mov	r4, r0
 800cf0a:	6030      	str	r0, [r6, #0]
 800cf0c:	2800      	cmp	r0, #0
 800cf0e:	d1d5      	bne.n	800cebc <__sfp+0x24>
 800cf10:	f7ff ff78 	bl	800ce04 <__sfp_lock_release>
 800cf14:	230c      	movs	r3, #12
 800cf16:	603b      	str	r3, [r7, #0]
 800cf18:	e7ee      	b.n	800cef8 <__sfp+0x60>
 800cf1a:	bf00      	nop
 800cf1c:	0800ea70 	.word	0x0800ea70
 800cf20:	ffff0001 	.word	0xffff0001

0800cf24 <_fwalk_reent>:
 800cf24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf28:	4606      	mov	r6, r0
 800cf2a:	4688      	mov	r8, r1
 800cf2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cf30:	2700      	movs	r7, #0
 800cf32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf36:	f1b9 0901 	subs.w	r9, r9, #1
 800cf3a:	d505      	bpl.n	800cf48 <_fwalk_reent+0x24>
 800cf3c:	6824      	ldr	r4, [r4, #0]
 800cf3e:	2c00      	cmp	r4, #0
 800cf40:	d1f7      	bne.n	800cf32 <_fwalk_reent+0xe>
 800cf42:	4638      	mov	r0, r7
 800cf44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf48:	89ab      	ldrh	r3, [r5, #12]
 800cf4a:	2b01      	cmp	r3, #1
 800cf4c:	d907      	bls.n	800cf5e <_fwalk_reent+0x3a>
 800cf4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf52:	3301      	adds	r3, #1
 800cf54:	d003      	beq.n	800cf5e <_fwalk_reent+0x3a>
 800cf56:	4629      	mov	r1, r5
 800cf58:	4630      	mov	r0, r6
 800cf5a:	47c0      	blx	r8
 800cf5c:	4307      	orrs	r7, r0
 800cf5e:	3568      	adds	r5, #104	; 0x68
 800cf60:	e7e9      	b.n	800cf36 <_fwalk_reent+0x12>

0800cf62 <rshift>:
 800cf62:	6903      	ldr	r3, [r0, #16]
 800cf64:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cf68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf6c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cf70:	f100 0414 	add.w	r4, r0, #20
 800cf74:	dd45      	ble.n	800d002 <rshift+0xa0>
 800cf76:	f011 011f 	ands.w	r1, r1, #31
 800cf7a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cf7e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cf82:	d10c      	bne.n	800cf9e <rshift+0x3c>
 800cf84:	f100 0710 	add.w	r7, r0, #16
 800cf88:	4629      	mov	r1, r5
 800cf8a:	42b1      	cmp	r1, r6
 800cf8c:	d334      	bcc.n	800cff8 <rshift+0x96>
 800cf8e:	1a9b      	subs	r3, r3, r2
 800cf90:	009b      	lsls	r3, r3, #2
 800cf92:	1eea      	subs	r2, r5, #3
 800cf94:	4296      	cmp	r6, r2
 800cf96:	bf38      	it	cc
 800cf98:	2300      	movcc	r3, #0
 800cf9a:	4423      	add	r3, r4
 800cf9c:	e015      	b.n	800cfca <rshift+0x68>
 800cf9e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cfa2:	f1c1 0820 	rsb	r8, r1, #32
 800cfa6:	40cf      	lsrs	r7, r1
 800cfa8:	f105 0e04 	add.w	lr, r5, #4
 800cfac:	46a1      	mov	r9, r4
 800cfae:	4576      	cmp	r6, lr
 800cfb0:	46f4      	mov	ip, lr
 800cfb2:	d815      	bhi.n	800cfe0 <rshift+0x7e>
 800cfb4:	1a9a      	subs	r2, r3, r2
 800cfb6:	0092      	lsls	r2, r2, #2
 800cfb8:	3a04      	subs	r2, #4
 800cfba:	3501      	adds	r5, #1
 800cfbc:	42ae      	cmp	r6, r5
 800cfbe:	bf38      	it	cc
 800cfc0:	2200      	movcc	r2, #0
 800cfc2:	18a3      	adds	r3, r4, r2
 800cfc4:	50a7      	str	r7, [r4, r2]
 800cfc6:	b107      	cbz	r7, 800cfca <rshift+0x68>
 800cfc8:	3304      	adds	r3, #4
 800cfca:	1b1a      	subs	r2, r3, r4
 800cfcc:	42a3      	cmp	r3, r4
 800cfce:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cfd2:	bf08      	it	eq
 800cfd4:	2300      	moveq	r3, #0
 800cfd6:	6102      	str	r2, [r0, #16]
 800cfd8:	bf08      	it	eq
 800cfda:	6143      	streq	r3, [r0, #20]
 800cfdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfe0:	f8dc c000 	ldr.w	ip, [ip]
 800cfe4:	fa0c fc08 	lsl.w	ip, ip, r8
 800cfe8:	ea4c 0707 	orr.w	r7, ip, r7
 800cfec:	f849 7b04 	str.w	r7, [r9], #4
 800cff0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cff4:	40cf      	lsrs	r7, r1
 800cff6:	e7da      	b.n	800cfae <rshift+0x4c>
 800cff8:	f851 cb04 	ldr.w	ip, [r1], #4
 800cffc:	f847 cf04 	str.w	ip, [r7, #4]!
 800d000:	e7c3      	b.n	800cf8a <rshift+0x28>
 800d002:	4623      	mov	r3, r4
 800d004:	e7e1      	b.n	800cfca <rshift+0x68>

0800d006 <__hexdig_fun>:
 800d006:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d00a:	2b09      	cmp	r3, #9
 800d00c:	d802      	bhi.n	800d014 <__hexdig_fun+0xe>
 800d00e:	3820      	subs	r0, #32
 800d010:	b2c0      	uxtb	r0, r0
 800d012:	4770      	bx	lr
 800d014:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d018:	2b05      	cmp	r3, #5
 800d01a:	d801      	bhi.n	800d020 <__hexdig_fun+0x1a>
 800d01c:	3847      	subs	r0, #71	; 0x47
 800d01e:	e7f7      	b.n	800d010 <__hexdig_fun+0xa>
 800d020:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d024:	2b05      	cmp	r3, #5
 800d026:	d801      	bhi.n	800d02c <__hexdig_fun+0x26>
 800d028:	3827      	subs	r0, #39	; 0x27
 800d02a:	e7f1      	b.n	800d010 <__hexdig_fun+0xa>
 800d02c:	2000      	movs	r0, #0
 800d02e:	4770      	bx	lr

0800d030 <__gethex>:
 800d030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d034:	ed2d 8b02 	vpush	{d8}
 800d038:	b089      	sub	sp, #36	; 0x24
 800d03a:	ee08 0a10 	vmov	s16, r0
 800d03e:	9304      	str	r3, [sp, #16]
 800d040:	4bb4      	ldr	r3, [pc, #720]	; (800d314 <__gethex+0x2e4>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	9301      	str	r3, [sp, #4]
 800d046:	4618      	mov	r0, r3
 800d048:	468b      	mov	fp, r1
 800d04a:	4690      	mov	r8, r2
 800d04c:	f7f3 f8f8 	bl	8000240 <strlen>
 800d050:	9b01      	ldr	r3, [sp, #4]
 800d052:	f8db 2000 	ldr.w	r2, [fp]
 800d056:	4403      	add	r3, r0
 800d058:	4682      	mov	sl, r0
 800d05a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d05e:	9305      	str	r3, [sp, #20]
 800d060:	1c93      	adds	r3, r2, #2
 800d062:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d066:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d06a:	32fe      	adds	r2, #254	; 0xfe
 800d06c:	18d1      	adds	r1, r2, r3
 800d06e:	461f      	mov	r7, r3
 800d070:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d074:	9100      	str	r1, [sp, #0]
 800d076:	2830      	cmp	r0, #48	; 0x30
 800d078:	d0f8      	beq.n	800d06c <__gethex+0x3c>
 800d07a:	f7ff ffc4 	bl	800d006 <__hexdig_fun>
 800d07e:	4604      	mov	r4, r0
 800d080:	2800      	cmp	r0, #0
 800d082:	d13a      	bne.n	800d0fa <__gethex+0xca>
 800d084:	9901      	ldr	r1, [sp, #4]
 800d086:	4652      	mov	r2, sl
 800d088:	4638      	mov	r0, r7
 800d08a:	f001 fb38 	bl	800e6fe <strncmp>
 800d08e:	4605      	mov	r5, r0
 800d090:	2800      	cmp	r0, #0
 800d092:	d168      	bne.n	800d166 <__gethex+0x136>
 800d094:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d098:	eb07 060a 	add.w	r6, r7, sl
 800d09c:	f7ff ffb3 	bl	800d006 <__hexdig_fun>
 800d0a0:	2800      	cmp	r0, #0
 800d0a2:	d062      	beq.n	800d16a <__gethex+0x13a>
 800d0a4:	4633      	mov	r3, r6
 800d0a6:	7818      	ldrb	r0, [r3, #0]
 800d0a8:	2830      	cmp	r0, #48	; 0x30
 800d0aa:	461f      	mov	r7, r3
 800d0ac:	f103 0301 	add.w	r3, r3, #1
 800d0b0:	d0f9      	beq.n	800d0a6 <__gethex+0x76>
 800d0b2:	f7ff ffa8 	bl	800d006 <__hexdig_fun>
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	fab0 f480 	clz	r4, r0
 800d0bc:	0964      	lsrs	r4, r4, #5
 800d0be:	4635      	mov	r5, r6
 800d0c0:	9300      	str	r3, [sp, #0]
 800d0c2:	463a      	mov	r2, r7
 800d0c4:	4616      	mov	r6, r2
 800d0c6:	3201      	adds	r2, #1
 800d0c8:	7830      	ldrb	r0, [r6, #0]
 800d0ca:	f7ff ff9c 	bl	800d006 <__hexdig_fun>
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	d1f8      	bne.n	800d0c4 <__gethex+0x94>
 800d0d2:	9901      	ldr	r1, [sp, #4]
 800d0d4:	4652      	mov	r2, sl
 800d0d6:	4630      	mov	r0, r6
 800d0d8:	f001 fb11 	bl	800e6fe <strncmp>
 800d0dc:	b980      	cbnz	r0, 800d100 <__gethex+0xd0>
 800d0de:	b94d      	cbnz	r5, 800d0f4 <__gethex+0xc4>
 800d0e0:	eb06 050a 	add.w	r5, r6, sl
 800d0e4:	462a      	mov	r2, r5
 800d0e6:	4616      	mov	r6, r2
 800d0e8:	3201      	adds	r2, #1
 800d0ea:	7830      	ldrb	r0, [r6, #0]
 800d0ec:	f7ff ff8b 	bl	800d006 <__hexdig_fun>
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	d1f8      	bne.n	800d0e6 <__gethex+0xb6>
 800d0f4:	1bad      	subs	r5, r5, r6
 800d0f6:	00ad      	lsls	r5, r5, #2
 800d0f8:	e004      	b.n	800d104 <__gethex+0xd4>
 800d0fa:	2400      	movs	r4, #0
 800d0fc:	4625      	mov	r5, r4
 800d0fe:	e7e0      	b.n	800d0c2 <__gethex+0x92>
 800d100:	2d00      	cmp	r5, #0
 800d102:	d1f7      	bne.n	800d0f4 <__gethex+0xc4>
 800d104:	7833      	ldrb	r3, [r6, #0]
 800d106:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d10a:	2b50      	cmp	r3, #80	; 0x50
 800d10c:	d13b      	bne.n	800d186 <__gethex+0x156>
 800d10e:	7873      	ldrb	r3, [r6, #1]
 800d110:	2b2b      	cmp	r3, #43	; 0x2b
 800d112:	d02c      	beq.n	800d16e <__gethex+0x13e>
 800d114:	2b2d      	cmp	r3, #45	; 0x2d
 800d116:	d02e      	beq.n	800d176 <__gethex+0x146>
 800d118:	1c71      	adds	r1, r6, #1
 800d11a:	f04f 0900 	mov.w	r9, #0
 800d11e:	7808      	ldrb	r0, [r1, #0]
 800d120:	f7ff ff71 	bl	800d006 <__hexdig_fun>
 800d124:	1e43      	subs	r3, r0, #1
 800d126:	b2db      	uxtb	r3, r3
 800d128:	2b18      	cmp	r3, #24
 800d12a:	d82c      	bhi.n	800d186 <__gethex+0x156>
 800d12c:	f1a0 0210 	sub.w	r2, r0, #16
 800d130:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d134:	f7ff ff67 	bl	800d006 <__hexdig_fun>
 800d138:	1e43      	subs	r3, r0, #1
 800d13a:	b2db      	uxtb	r3, r3
 800d13c:	2b18      	cmp	r3, #24
 800d13e:	d91d      	bls.n	800d17c <__gethex+0x14c>
 800d140:	f1b9 0f00 	cmp.w	r9, #0
 800d144:	d000      	beq.n	800d148 <__gethex+0x118>
 800d146:	4252      	negs	r2, r2
 800d148:	4415      	add	r5, r2
 800d14a:	f8cb 1000 	str.w	r1, [fp]
 800d14e:	b1e4      	cbz	r4, 800d18a <__gethex+0x15a>
 800d150:	9b00      	ldr	r3, [sp, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	bf14      	ite	ne
 800d156:	2700      	movne	r7, #0
 800d158:	2706      	moveq	r7, #6
 800d15a:	4638      	mov	r0, r7
 800d15c:	b009      	add	sp, #36	; 0x24
 800d15e:	ecbd 8b02 	vpop	{d8}
 800d162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d166:	463e      	mov	r6, r7
 800d168:	4625      	mov	r5, r4
 800d16a:	2401      	movs	r4, #1
 800d16c:	e7ca      	b.n	800d104 <__gethex+0xd4>
 800d16e:	f04f 0900 	mov.w	r9, #0
 800d172:	1cb1      	adds	r1, r6, #2
 800d174:	e7d3      	b.n	800d11e <__gethex+0xee>
 800d176:	f04f 0901 	mov.w	r9, #1
 800d17a:	e7fa      	b.n	800d172 <__gethex+0x142>
 800d17c:	230a      	movs	r3, #10
 800d17e:	fb03 0202 	mla	r2, r3, r2, r0
 800d182:	3a10      	subs	r2, #16
 800d184:	e7d4      	b.n	800d130 <__gethex+0x100>
 800d186:	4631      	mov	r1, r6
 800d188:	e7df      	b.n	800d14a <__gethex+0x11a>
 800d18a:	1bf3      	subs	r3, r6, r7
 800d18c:	3b01      	subs	r3, #1
 800d18e:	4621      	mov	r1, r4
 800d190:	2b07      	cmp	r3, #7
 800d192:	dc0b      	bgt.n	800d1ac <__gethex+0x17c>
 800d194:	ee18 0a10 	vmov	r0, s16
 800d198:	f000 fadc 	bl	800d754 <_Balloc>
 800d19c:	4604      	mov	r4, r0
 800d19e:	b940      	cbnz	r0, 800d1b2 <__gethex+0x182>
 800d1a0:	4b5d      	ldr	r3, [pc, #372]	; (800d318 <__gethex+0x2e8>)
 800d1a2:	4602      	mov	r2, r0
 800d1a4:	21de      	movs	r1, #222	; 0xde
 800d1a6:	485d      	ldr	r0, [pc, #372]	; (800d31c <__gethex+0x2ec>)
 800d1a8:	f001 fadc 	bl	800e764 <__assert_func>
 800d1ac:	3101      	adds	r1, #1
 800d1ae:	105b      	asrs	r3, r3, #1
 800d1b0:	e7ee      	b.n	800d190 <__gethex+0x160>
 800d1b2:	f100 0914 	add.w	r9, r0, #20
 800d1b6:	f04f 0b00 	mov.w	fp, #0
 800d1ba:	f1ca 0301 	rsb	r3, sl, #1
 800d1be:	f8cd 9008 	str.w	r9, [sp, #8]
 800d1c2:	f8cd b000 	str.w	fp, [sp]
 800d1c6:	9306      	str	r3, [sp, #24]
 800d1c8:	42b7      	cmp	r7, r6
 800d1ca:	d340      	bcc.n	800d24e <__gethex+0x21e>
 800d1cc:	9802      	ldr	r0, [sp, #8]
 800d1ce:	9b00      	ldr	r3, [sp, #0]
 800d1d0:	f840 3b04 	str.w	r3, [r0], #4
 800d1d4:	eba0 0009 	sub.w	r0, r0, r9
 800d1d8:	1080      	asrs	r0, r0, #2
 800d1da:	0146      	lsls	r6, r0, #5
 800d1dc:	6120      	str	r0, [r4, #16]
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f000 fbaa 	bl	800d938 <__hi0bits>
 800d1e4:	1a30      	subs	r0, r6, r0
 800d1e6:	f8d8 6000 	ldr.w	r6, [r8]
 800d1ea:	42b0      	cmp	r0, r6
 800d1ec:	dd63      	ble.n	800d2b6 <__gethex+0x286>
 800d1ee:	1b87      	subs	r7, r0, r6
 800d1f0:	4639      	mov	r1, r7
 800d1f2:	4620      	mov	r0, r4
 800d1f4:	f000 ff4b 	bl	800e08e <__any_on>
 800d1f8:	4682      	mov	sl, r0
 800d1fa:	b1a8      	cbz	r0, 800d228 <__gethex+0x1f8>
 800d1fc:	1e7b      	subs	r3, r7, #1
 800d1fe:	1159      	asrs	r1, r3, #5
 800d200:	f003 021f 	and.w	r2, r3, #31
 800d204:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d208:	f04f 0a01 	mov.w	sl, #1
 800d20c:	fa0a f202 	lsl.w	r2, sl, r2
 800d210:	420a      	tst	r2, r1
 800d212:	d009      	beq.n	800d228 <__gethex+0x1f8>
 800d214:	4553      	cmp	r3, sl
 800d216:	dd05      	ble.n	800d224 <__gethex+0x1f4>
 800d218:	1eb9      	subs	r1, r7, #2
 800d21a:	4620      	mov	r0, r4
 800d21c:	f000 ff37 	bl	800e08e <__any_on>
 800d220:	2800      	cmp	r0, #0
 800d222:	d145      	bne.n	800d2b0 <__gethex+0x280>
 800d224:	f04f 0a02 	mov.w	sl, #2
 800d228:	4639      	mov	r1, r7
 800d22a:	4620      	mov	r0, r4
 800d22c:	f7ff fe99 	bl	800cf62 <rshift>
 800d230:	443d      	add	r5, r7
 800d232:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d236:	42ab      	cmp	r3, r5
 800d238:	da4c      	bge.n	800d2d4 <__gethex+0x2a4>
 800d23a:	ee18 0a10 	vmov	r0, s16
 800d23e:	4621      	mov	r1, r4
 800d240:	f000 fac8 	bl	800d7d4 <_Bfree>
 800d244:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d246:	2300      	movs	r3, #0
 800d248:	6013      	str	r3, [r2, #0]
 800d24a:	27a3      	movs	r7, #163	; 0xa3
 800d24c:	e785      	b.n	800d15a <__gethex+0x12a>
 800d24e:	1e73      	subs	r3, r6, #1
 800d250:	9a05      	ldr	r2, [sp, #20]
 800d252:	9303      	str	r3, [sp, #12]
 800d254:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d258:	4293      	cmp	r3, r2
 800d25a:	d019      	beq.n	800d290 <__gethex+0x260>
 800d25c:	f1bb 0f20 	cmp.w	fp, #32
 800d260:	d107      	bne.n	800d272 <__gethex+0x242>
 800d262:	9b02      	ldr	r3, [sp, #8]
 800d264:	9a00      	ldr	r2, [sp, #0]
 800d266:	f843 2b04 	str.w	r2, [r3], #4
 800d26a:	9302      	str	r3, [sp, #8]
 800d26c:	2300      	movs	r3, #0
 800d26e:	9300      	str	r3, [sp, #0]
 800d270:	469b      	mov	fp, r3
 800d272:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d276:	f7ff fec6 	bl	800d006 <__hexdig_fun>
 800d27a:	9b00      	ldr	r3, [sp, #0]
 800d27c:	f000 000f 	and.w	r0, r0, #15
 800d280:	fa00 f00b 	lsl.w	r0, r0, fp
 800d284:	4303      	orrs	r3, r0
 800d286:	9300      	str	r3, [sp, #0]
 800d288:	f10b 0b04 	add.w	fp, fp, #4
 800d28c:	9b03      	ldr	r3, [sp, #12]
 800d28e:	e00d      	b.n	800d2ac <__gethex+0x27c>
 800d290:	9b03      	ldr	r3, [sp, #12]
 800d292:	9a06      	ldr	r2, [sp, #24]
 800d294:	4413      	add	r3, r2
 800d296:	42bb      	cmp	r3, r7
 800d298:	d3e0      	bcc.n	800d25c <__gethex+0x22c>
 800d29a:	4618      	mov	r0, r3
 800d29c:	9901      	ldr	r1, [sp, #4]
 800d29e:	9307      	str	r3, [sp, #28]
 800d2a0:	4652      	mov	r2, sl
 800d2a2:	f001 fa2c 	bl	800e6fe <strncmp>
 800d2a6:	9b07      	ldr	r3, [sp, #28]
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	d1d7      	bne.n	800d25c <__gethex+0x22c>
 800d2ac:	461e      	mov	r6, r3
 800d2ae:	e78b      	b.n	800d1c8 <__gethex+0x198>
 800d2b0:	f04f 0a03 	mov.w	sl, #3
 800d2b4:	e7b8      	b.n	800d228 <__gethex+0x1f8>
 800d2b6:	da0a      	bge.n	800d2ce <__gethex+0x29e>
 800d2b8:	1a37      	subs	r7, r6, r0
 800d2ba:	4621      	mov	r1, r4
 800d2bc:	ee18 0a10 	vmov	r0, s16
 800d2c0:	463a      	mov	r2, r7
 800d2c2:	f000 fca3 	bl	800dc0c <__lshift>
 800d2c6:	1bed      	subs	r5, r5, r7
 800d2c8:	4604      	mov	r4, r0
 800d2ca:	f100 0914 	add.w	r9, r0, #20
 800d2ce:	f04f 0a00 	mov.w	sl, #0
 800d2d2:	e7ae      	b.n	800d232 <__gethex+0x202>
 800d2d4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d2d8:	42a8      	cmp	r0, r5
 800d2da:	dd72      	ble.n	800d3c2 <__gethex+0x392>
 800d2dc:	1b45      	subs	r5, r0, r5
 800d2de:	42ae      	cmp	r6, r5
 800d2e0:	dc36      	bgt.n	800d350 <__gethex+0x320>
 800d2e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d2e6:	2b02      	cmp	r3, #2
 800d2e8:	d02a      	beq.n	800d340 <__gethex+0x310>
 800d2ea:	2b03      	cmp	r3, #3
 800d2ec:	d02c      	beq.n	800d348 <__gethex+0x318>
 800d2ee:	2b01      	cmp	r3, #1
 800d2f0:	d11c      	bne.n	800d32c <__gethex+0x2fc>
 800d2f2:	42ae      	cmp	r6, r5
 800d2f4:	d11a      	bne.n	800d32c <__gethex+0x2fc>
 800d2f6:	2e01      	cmp	r6, #1
 800d2f8:	d112      	bne.n	800d320 <__gethex+0x2f0>
 800d2fa:	9a04      	ldr	r2, [sp, #16]
 800d2fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d300:	6013      	str	r3, [r2, #0]
 800d302:	2301      	movs	r3, #1
 800d304:	6123      	str	r3, [r4, #16]
 800d306:	f8c9 3000 	str.w	r3, [r9]
 800d30a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d30c:	2762      	movs	r7, #98	; 0x62
 800d30e:	601c      	str	r4, [r3, #0]
 800d310:	e723      	b.n	800d15a <__gethex+0x12a>
 800d312:	bf00      	nop
 800d314:	0800ed5c 	.word	0x0800ed5c
 800d318:	0800ec80 	.word	0x0800ec80
 800d31c:	0800ecf4 	.word	0x0800ecf4
 800d320:	1e71      	subs	r1, r6, #1
 800d322:	4620      	mov	r0, r4
 800d324:	f000 feb3 	bl	800e08e <__any_on>
 800d328:	2800      	cmp	r0, #0
 800d32a:	d1e6      	bne.n	800d2fa <__gethex+0x2ca>
 800d32c:	ee18 0a10 	vmov	r0, s16
 800d330:	4621      	mov	r1, r4
 800d332:	f000 fa4f 	bl	800d7d4 <_Bfree>
 800d336:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d338:	2300      	movs	r3, #0
 800d33a:	6013      	str	r3, [r2, #0]
 800d33c:	2750      	movs	r7, #80	; 0x50
 800d33e:	e70c      	b.n	800d15a <__gethex+0x12a>
 800d340:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d342:	2b00      	cmp	r3, #0
 800d344:	d1f2      	bne.n	800d32c <__gethex+0x2fc>
 800d346:	e7d8      	b.n	800d2fa <__gethex+0x2ca>
 800d348:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d1d5      	bne.n	800d2fa <__gethex+0x2ca>
 800d34e:	e7ed      	b.n	800d32c <__gethex+0x2fc>
 800d350:	1e6f      	subs	r7, r5, #1
 800d352:	f1ba 0f00 	cmp.w	sl, #0
 800d356:	d131      	bne.n	800d3bc <__gethex+0x38c>
 800d358:	b127      	cbz	r7, 800d364 <__gethex+0x334>
 800d35a:	4639      	mov	r1, r7
 800d35c:	4620      	mov	r0, r4
 800d35e:	f000 fe96 	bl	800e08e <__any_on>
 800d362:	4682      	mov	sl, r0
 800d364:	117b      	asrs	r3, r7, #5
 800d366:	2101      	movs	r1, #1
 800d368:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d36c:	f007 071f 	and.w	r7, r7, #31
 800d370:	fa01 f707 	lsl.w	r7, r1, r7
 800d374:	421f      	tst	r7, r3
 800d376:	4629      	mov	r1, r5
 800d378:	4620      	mov	r0, r4
 800d37a:	bf18      	it	ne
 800d37c:	f04a 0a02 	orrne.w	sl, sl, #2
 800d380:	1b76      	subs	r6, r6, r5
 800d382:	f7ff fdee 	bl	800cf62 <rshift>
 800d386:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d38a:	2702      	movs	r7, #2
 800d38c:	f1ba 0f00 	cmp.w	sl, #0
 800d390:	d048      	beq.n	800d424 <__gethex+0x3f4>
 800d392:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d396:	2b02      	cmp	r3, #2
 800d398:	d015      	beq.n	800d3c6 <__gethex+0x396>
 800d39a:	2b03      	cmp	r3, #3
 800d39c:	d017      	beq.n	800d3ce <__gethex+0x39e>
 800d39e:	2b01      	cmp	r3, #1
 800d3a0:	d109      	bne.n	800d3b6 <__gethex+0x386>
 800d3a2:	f01a 0f02 	tst.w	sl, #2
 800d3a6:	d006      	beq.n	800d3b6 <__gethex+0x386>
 800d3a8:	f8d9 0000 	ldr.w	r0, [r9]
 800d3ac:	ea4a 0a00 	orr.w	sl, sl, r0
 800d3b0:	f01a 0f01 	tst.w	sl, #1
 800d3b4:	d10e      	bne.n	800d3d4 <__gethex+0x3a4>
 800d3b6:	f047 0710 	orr.w	r7, r7, #16
 800d3ba:	e033      	b.n	800d424 <__gethex+0x3f4>
 800d3bc:	f04f 0a01 	mov.w	sl, #1
 800d3c0:	e7d0      	b.n	800d364 <__gethex+0x334>
 800d3c2:	2701      	movs	r7, #1
 800d3c4:	e7e2      	b.n	800d38c <__gethex+0x35c>
 800d3c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d3c8:	f1c3 0301 	rsb	r3, r3, #1
 800d3cc:	9315      	str	r3, [sp, #84]	; 0x54
 800d3ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d0f0      	beq.n	800d3b6 <__gethex+0x386>
 800d3d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d3d8:	f104 0314 	add.w	r3, r4, #20
 800d3dc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d3e0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d3e4:	f04f 0c00 	mov.w	ip, #0
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3ee:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d3f2:	d01c      	beq.n	800d42e <__gethex+0x3fe>
 800d3f4:	3201      	adds	r2, #1
 800d3f6:	6002      	str	r2, [r0, #0]
 800d3f8:	2f02      	cmp	r7, #2
 800d3fa:	f104 0314 	add.w	r3, r4, #20
 800d3fe:	d13f      	bne.n	800d480 <__gethex+0x450>
 800d400:	f8d8 2000 	ldr.w	r2, [r8]
 800d404:	3a01      	subs	r2, #1
 800d406:	42b2      	cmp	r2, r6
 800d408:	d10a      	bne.n	800d420 <__gethex+0x3f0>
 800d40a:	1171      	asrs	r1, r6, #5
 800d40c:	2201      	movs	r2, #1
 800d40e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d412:	f006 061f 	and.w	r6, r6, #31
 800d416:	fa02 f606 	lsl.w	r6, r2, r6
 800d41a:	421e      	tst	r6, r3
 800d41c:	bf18      	it	ne
 800d41e:	4617      	movne	r7, r2
 800d420:	f047 0720 	orr.w	r7, r7, #32
 800d424:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d426:	601c      	str	r4, [r3, #0]
 800d428:	9b04      	ldr	r3, [sp, #16]
 800d42a:	601d      	str	r5, [r3, #0]
 800d42c:	e695      	b.n	800d15a <__gethex+0x12a>
 800d42e:	4299      	cmp	r1, r3
 800d430:	f843 cc04 	str.w	ip, [r3, #-4]
 800d434:	d8d8      	bhi.n	800d3e8 <__gethex+0x3b8>
 800d436:	68a3      	ldr	r3, [r4, #8]
 800d438:	459b      	cmp	fp, r3
 800d43a:	db19      	blt.n	800d470 <__gethex+0x440>
 800d43c:	6861      	ldr	r1, [r4, #4]
 800d43e:	ee18 0a10 	vmov	r0, s16
 800d442:	3101      	adds	r1, #1
 800d444:	f000 f986 	bl	800d754 <_Balloc>
 800d448:	4681      	mov	r9, r0
 800d44a:	b918      	cbnz	r0, 800d454 <__gethex+0x424>
 800d44c:	4b1a      	ldr	r3, [pc, #104]	; (800d4b8 <__gethex+0x488>)
 800d44e:	4602      	mov	r2, r0
 800d450:	2184      	movs	r1, #132	; 0x84
 800d452:	e6a8      	b.n	800d1a6 <__gethex+0x176>
 800d454:	6922      	ldr	r2, [r4, #16]
 800d456:	3202      	adds	r2, #2
 800d458:	f104 010c 	add.w	r1, r4, #12
 800d45c:	0092      	lsls	r2, r2, #2
 800d45e:	300c      	adds	r0, #12
 800d460:	f7fc ff28 	bl	800a2b4 <memcpy>
 800d464:	4621      	mov	r1, r4
 800d466:	ee18 0a10 	vmov	r0, s16
 800d46a:	f000 f9b3 	bl	800d7d4 <_Bfree>
 800d46e:	464c      	mov	r4, r9
 800d470:	6923      	ldr	r3, [r4, #16]
 800d472:	1c5a      	adds	r2, r3, #1
 800d474:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d478:	6122      	str	r2, [r4, #16]
 800d47a:	2201      	movs	r2, #1
 800d47c:	615a      	str	r2, [r3, #20]
 800d47e:	e7bb      	b.n	800d3f8 <__gethex+0x3c8>
 800d480:	6922      	ldr	r2, [r4, #16]
 800d482:	455a      	cmp	r2, fp
 800d484:	dd0b      	ble.n	800d49e <__gethex+0x46e>
 800d486:	2101      	movs	r1, #1
 800d488:	4620      	mov	r0, r4
 800d48a:	f7ff fd6a 	bl	800cf62 <rshift>
 800d48e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d492:	3501      	adds	r5, #1
 800d494:	42ab      	cmp	r3, r5
 800d496:	f6ff aed0 	blt.w	800d23a <__gethex+0x20a>
 800d49a:	2701      	movs	r7, #1
 800d49c:	e7c0      	b.n	800d420 <__gethex+0x3f0>
 800d49e:	f016 061f 	ands.w	r6, r6, #31
 800d4a2:	d0fa      	beq.n	800d49a <__gethex+0x46a>
 800d4a4:	4453      	add	r3, sl
 800d4a6:	f1c6 0620 	rsb	r6, r6, #32
 800d4aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d4ae:	f000 fa43 	bl	800d938 <__hi0bits>
 800d4b2:	42b0      	cmp	r0, r6
 800d4b4:	dbe7      	blt.n	800d486 <__gethex+0x456>
 800d4b6:	e7f0      	b.n	800d49a <__gethex+0x46a>
 800d4b8:	0800ec80 	.word	0x0800ec80

0800d4bc <L_shift>:
 800d4bc:	f1c2 0208 	rsb	r2, r2, #8
 800d4c0:	0092      	lsls	r2, r2, #2
 800d4c2:	b570      	push	{r4, r5, r6, lr}
 800d4c4:	f1c2 0620 	rsb	r6, r2, #32
 800d4c8:	6843      	ldr	r3, [r0, #4]
 800d4ca:	6804      	ldr	r4, [r0, #0]
 800d4cc:	fa03 f506 	lsl.w	r5, r3, r6
 800d4d0:	432c      	orrs	r4, r5
 800d4d2:	40d3      	lsrs	r3, r2
 800d4d4:	6004      	str	r4, [r0, #0]
 800d4d6:	f840 3f04 	str.w	r3, [r0, #4]!
 800d4da:	4288      	cmp	r0, r1
 800d4dc:	d3f4      	bcc.n	800d4c8 <L_shift+0xc>
 800d4de:	bd70      	pop	{r4, r5, r6, pc}

0800d4e0 <__match>:
 800d4e0:	b530      	push	{r4, r5, lr}
 800d4e2:	6803      	ldr	r3, [r0, #0]
 800d4e4:	3301      	adds	r3, #1
 800d4e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4ea:	b914      	cbnz	r4, 800d4f2 <__match+0x12>
 800d4ec:	6003      	str	r3, [r0, #0]
 800d4ee:	2001      	movs	r0, #1
 800d4f0:	bd30      	pop	{r4, r5, pc}
 800d4f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d4fa:	2d19      	cmp	r5, #25
 800d4fc:	bf98      	it	ls
 800d4fe:	3220      	addls	r2, #32
 800d500:	42a2      	cmp	r2, r4
 800d502:	d0f0      	beq.n	800d4e6 <__match+0x6>
 800d504:	2000      	movs	r0, #0
 800d506:	e7f3      	b.n	800d4f0 <__match+0x10>

0800d508 <__hexnan>:
 800d508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d50c:	680b      	ldr	r3, [r1, #0]
 800d50e:	115e      	asrs	r6, r3, #5
 800d510:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d514:	f013 031f 	ands.w	r3, r3, #31
 800d518:	b087      	sub	sp, #28
 800d51a:	bf18      	it	ne
 800d51c:	3604      	addne	r6, #4
 800d51e:	2500      	movs	r5, #0
 800d520:	1f37      	subs	r7, r6, #4
 800d522:	4690      	mov	r8, r2
 800d524:	6802      	ldr	r2, [r0, #0]
 800d526:	9301      	str	r3, [sp, #4]
 800d528:	4682      	mov	sl, r0
 800d52a:	f846 5c04 	str.w	r5, [r6, #-4]
 800d52e:	46b9      	mov	r9, r7
 800d530:	463c      	mov	r4, r7
 800d532:	9502      	str	r5, [sp, #8]
 800d534:	46ab      	mov	fp, r5
 800d536:	7851      	ldrb	r1, [r2, #1]
 800d538:	1c53      	adds	r3, r2, #1
 800d53a:	9303      	str	r3, [sp, #12]
 800d53c:	b341      	cbz	r1, 800d590 <__hexnan+0x88>
 800d53e:	4608      	mov	r0, r1
 800d540:	9205      	str	r2, [sp, #20]
 800d542:	9104      	str	r1, [sp, #16]
 800d544:	f7ff fd5f 	bl	800d006 <__hexdig_fun>
 800d548:	2800      	cmp	r0, #0
 800d54a:	d14f      	bne.n	800d5ec <__hexnan+0xe4>
 800d54c:	9904      	ldr	r1, [sp, #16]
 800d54e:	9a05      	ldr	r2, [sp, #20]
 800d550:	2920      	cmp	r1, #32
 800d552:	d818      	bhi.n	800d586 <__hexnan+0x7e>
 800d554:	9b02      	ldr	r3, [sp, #8]
 800d556:	459b      	cmp	fp, r3
 800d558:	dd13      	ble.n	800d582 <__hexnan+0x7a>
 800d55a:	454c      	cmp	r4, r9
 800d55c:	d206      	bcs.n	800d56c <__hexnan+0x64>
 800d55e:	2d07      	cmp	r5, #7
 800d560:	dc04      	bgt.n	800d56c <__hexnan+0x64>
 800d562:	462a      	mov	r2, r5
 800d564:	4649      	mov	r1, r9
 800d566:	4620      	mov	r0, r4
 800d568:	f7ff ffa8 	bl	800d4bc <L_shift>
 800d56c:	4544      	cmp	r4, r8
 800d56e:	d950      	bls.n	800d612 <__hexnan+0x10a>
 800d570:	2300      	movs	r3, #0
 800d572:	f1a4 0904 	sub.w	r9, r4, #4
 800d576:	f844 3c04 	str.w	r3, [r4, #-4]
 800d57a:	f8cd b008 	str.w	fp, [sp, #8]
 800d57e:	464c      	mov	r4, r9
 800d580:	461d      	mov	r5, r3
 800d582:	9a03      	ldr	r2, [sp, #12]
 800d584:	e7d7      	b.n	800d536 <__hexnan+0x2e>
 800d586:	2929      	cmp	r1, #41	; 0x29
 800d588:	d156      	bne.n	800d638 <__hexnan+0x130>
 800d58a:	3202      	adds	r2, #2
 800d58c:	f8ca 2000 	str.w	r2, [sl]
 800d590:	f1bb 0f00 	cmp.w	fp, #0
 800d594:	d050      	beq.n	800d638 <__hexnan+0x130>
 800d596:	454c      	cmp	r4, r9
 800d598:	d206      	bcs.n	800d5a8 <__hexnan+0xa0>
 800d59a:	2d07      	cmp	r5, #7
 800d59c:	dc04      	bgt.n	800d5a8 <__hexnan+0xa0>
 800d59e:	462a      	mov	r2, r5
 800d5a0:	4649      	mov	r1, r9
 800d5a2:	4620      	mov	r0, r4
 800d5a4:	f7ff ff8a 	bl	800d4bc <L_shift>
 800d5a8:	4544      	cmp	r4, r8
 800d5aa:	d934      	bls.n	800d616 <__hexnan+0x10e>
 800d5ac:	f1a8 0204 	sub.w	r2, r8, #4
 800d5b0:	4623      	mov	r3, r4
 800d5b2:	f853 1b04 	ldr.w	r1, [r3], #4
 800d5b6:	f842 1f04 	str.w	r1, [r2, #4]!
 800d5ba:	429f      	cmp	r7, r3
 800d5bc:	d2f9      	bcs.n	800d5b2 <__hexnan+0xaa>
 800d5be:	1b3b      	subs	r3, r7, r4
 800d5c0:	f023 0303 	bic.w	r3, r3, #3
 800d5c4:	3304      	adds	r3, #4
 800d5c6:	3401      	adds	r4, #1
 800d5c8:	3e03      	subs	r6, #3
 800d5ca:	42b4      	cmp	r4, r6
 800d5cc:	bf88      	it	hi
 800d5ce:	2304      	movhi	r3, #4
 800d5d0:	4443      	add	r3, r8
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	f843 2b04 	str.w	r2, [r3], #4
 800d5d8:	429f      	cmp	r7, r3
 800d5da:	d2fb      	bcs.n	800d5d4 <__hexnan+0xcc>
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	b91b      	cbnz	r3, 800d5e8 <__hexnan+0xe0>
 800d5e0:	4547      	cmp	r7, r8
 800d5e2:	d127      	bne.n	800d634 <__hexnan+0x12c>
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	603b      	str	r3, [r7, #0]
 800d5e8:	2005      	movs	r0, #5
 800d5ea:	e026      	b.n	800d63a <__hexnan+0x132>
 800d5ec:	3501      	adds	r5, #1
 800d5ee:	2d08      	cmp	r5, #8
 800d5f0:	f10b 0b01 	add.w	fp, fp, #1
 800d5f4:	dd06      	ble.n	800d604 <__hexnan+0xfc>
 800d5f6:	4544      	cmp	r4, r8
 800d5f8:	d9c3      	bls.n	800d582 <__hexnan+0x7a>
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	f844 3c04 	str.w	r3, [r4, #-4]
 800d600:	2501      	movs	r5, #1
 800d602:	3c04      	subs	r4, #4
 800d604:	6822      	ldr	r2, [r4, #0]
 800d606:	f000 000f 	and.w	r0, r0, #15
 800d60a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d60e:	6022      	str	r2, [r4, #0]
 800d610:	e7b7      	b.n	800d582 <__hexnan+0x7a>
 800d612:	2508      	movs	r5, #8
 800d614:	e7b5      	b.n	800d582 <__hexnan+0x7a>
 800d616:	9b01      	ldr	r3, [sp, #4]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d0df      	beq.n	800d5dc <__hexnan+0xd4>
 800d61c:	f04f 32ff 	mov.w	r2, #4294967295
 800d620:	f1c3 0320 	rsb	r3, r3, #32
 800d624:	fa22 f303 	lsr.w	r3, r2, r3
 800d628:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d62c:	401a      	ands	r2, r3
 800d62e:	f846 2c04 	str.w	r2, [r6, #-4]
 800d632:	e7d3      	b.n	800d5dc <__hexnan+0xd4>
 800d634:	3f04      	subs	r7, #4
 800d636:	e7d1      	b.n	800d5dc <__hexnan+0xd4>
 800d638:	2004      	movs	r0, #4
 800d63a:	b007      	add	sp, #28
 800d63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d640 <_localeconv_r>:
 800d640:	4800      	ldr	r0, [pc, #0]	; (800d644 <_localeconv_r+0x4>)
 800d642:	4770      	bx	lr
 800d644:	20000164 	.word	0x20000164

0800d648 <__retarget_lock_init_recursive>:
 800d648:	4770      	bx	lr

0800d64a <__retarget_lock_acquire_recursive>:
 800d64a:	4770      	bx	lr

0800d64c <__retarget_lock_release_recursive>:
 800d64c:	4770      	bx	lr

0800d64e <__swhatbuf_r>:
 800d64e:	b570      	push	{r4, r5, r6, lr}
 800d650:	460e      	mov	r6, r1
 800d652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d656:	2900      	cmp	r1, #0
 800d658:	b096      	sub	sp, #88	; 0x58
 800d65a:	4614      	mov	r4, r2
 800d65c:	461d      	mov	r5, r3
 800d65e:	da08      	bge.n	800d672 <__swhatbuf_r+0x24>
 800d660:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d664:	2200      	movs	r2, #0
 800d666:	602a      	str	r2, [r5, #0]
 800d668:	061a      	lsls	r2, r3, #24
 800d66a:	d410      	bmi.n	800d68e <__swhatbuf_r+0x40>
 800d66c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d670:	e00e      	b.n	800d690 <__swhatbuf_r+0x42>
 800d672:	466a      	mov	r2, sp
 800d674:	f001 f8b6 	bl	800e7e4 <_fstat_r>
 800d678:	2800      	cmp	r0, #0
 800d67a:	dbf1      	blt.n	800d660 <__swhatbuf_r+0x12>
 800d67c:	9a01      	ldr	r2, [sp, #4]
 800d67e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d682:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d686:	425a      	negs	r2, r3
 800d688:	415a      	adcs	r2, r3
 800d68a:	602a      	str	r2, [r5, #0]
 800d68c:	e7ee      	b.n	800d66c <__swhatbuf_r+0x1e>
 800d68e:	2340      	movs	r3, #64	; 0x40
 800d690:	2000      	movs	r0, #0
 800d692:	6023      	str	r3, [r4, #0]
 800d694:	b016      	add	sp, #88	; 0x58
 800d696:	bd70      	pop	{r4, r5, r6, pc}

0800d698 <__smakebuf_r>:
 800d698:	898b      	ldrh	r3, [r1, #12]
 800d69a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d69c:	079d      	lsls	r5, r3, #30
 800d69e:	4606      	mov	r6, r0
 800d6a0:	460c      	mov	r4, r1
 800d6a2:	d507      	bpl.n	800d6b4 <__smakebuf_r+0x1c>
 800d6a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d6a8:	6023      	str	r3, [r4, #0]
 800d6aa:	6123      	str	r3, [r4, #16]
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	6163      	str	r3, [r4, #20]
 800d6b0:	b002      	add	sp, #8
 800d6b2:	bd70      	pop	{r4, r5, r6, pc}
 800d6b4:	ab01      	add	r3, sp, #4
 800d6b6:	466a      	mov	r2, sp
 800d6b8:	f7ff ffc9 	bl	800d64e <__swhatbuf_r>
 800d6bc:	9900      	ldr	r1, [sp, #0]
 800d6be:	4605      	mov	r5, r0
 800d6c0:	4630      	mov	r0, r6
 800d6c2:	f7fc fe79 	bl	800a3b8 <_malloc_r>
 800d6c6:	b948      	cbnz	r0, 800d6dc <__smakebuf_r+0x44>
 800d6c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6cc:	059a      	lsls	r2, r3, #22
 800d6ce:	d4ef      	bmi.n	800d6b0 <__smakebuf_r+0x18>
 800d6d0:	f023 0303 	bic.w	r3, r3, #3
 800d6d4:	f043 0302 	orr.w	r3, r3, #2
 800d6d8:	81a3      	strh	r3, [r4, #12]
 800d6da:	e7e3      	b.n	800d6a4 <__smakebuf_r+0xc>
 800d6dc:	4b0d      	ldr	r3, [pc, #52]	; (800d714 <__smakebuf_r+0x7c>)
 800d6de:	62b3      	str	r3, [r6, #40]	; 0x28
 800d6e0:	89a3      	ldrh	r3, [r4, #12]
 800d6e2:	6020      	str	r0, [r4, #0]
 800d6e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6e8:	81a3      	strh	r3, [r4, #12]
 800d6ea:	9b00      	ldr	r3, [sp, #0]
 800d6ec:	6163      	str	r3, [r4, #20]
 800d6ee:	9b01      	ldr	r3, [sp, #4]
 800d6f0:	6120      	str	r0, [r4, #16]
 800d6f2:	b15b      	cbz	r3, 800d70c <__smakebuf_r+0x74>
 800d6f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6f8:	4630      	mov	r0, r6
 800d6fa:	f001 f885 	bl	800e808 <_isatty_r>
 800d6fe:	b128      	cbz	r0, 800d70c <__smakebuf_r+0x74>
 800d700:	89a3      	ldrh	r3, [r4, #12]
 800d702:	f023 0303 	bic.w	r3, r3, #3
 800d706:	f043 0301 	orr.w	r3, r3, #1
 800d70a:	81a3      	strh	r3, [r4, #12]
 800d70c:	89a0      	ldrh	r0, [r4, #12]
 800d70e:	4305      	orrs	r5, r0
 800d710:	81a5      	strh	r5, [r4, #12]
 800d712:	e7cd      	b.n	800d6b0 <__smakebuf_r+0x18>
 800d714:	0800cdc1 	.word	0x0800cdc1

0800d718 <__ascii_mbtowc>:
 800d718:	b082      	sub	sp, #8
 800d71a:	b901      	cbnz	r1, 800d71e <__ascii_mbtowc+0x6>
 800d71c:	a901      	add	r1, sp, #4
 800d71e:	b142      	cbz	r2, 800d732 <__ascii_mbtowc+0x1a>
 800d720:	b14b      	cbz	r3, 800d736 <__ascii_mbtowc+0x1e>
 800d722:	7813      	ldrb	r3, [r2, #0]
 800d724:	600b      	str	r3, [r1, #0]
 800d726:	7812      	ldrb	r2, [r2, #0]
 800d728:	1e10      	subs	r0, r2, #0
 800d72a:	bf18      	it	ne
 800d72c:	2001      	movne	r0, #1
 800d72e:	b002      	add	sp, #8
 800d730:	4770      	bx	lr
 800d732:	4610      	mov	r0, r2
 800d734:	e7fb      	b.n	800d72e <__ascii_mbtowc+0x16>
 800d736:	f06f 0001 	mvn.w	r0, #1
 800d73a:	e7f8      	b.n	800d72e <__ascii_mbtowc+0x16>

0800d73c <__malloc_lock>:
 800d73c:	4801      	ldr	r0, [pc, #4]	; (800d744 <__malloc_lock+0x8>)
 800d73e:	f7ff bf84 	b.w	800d64a <__retarget_lock_acquire_recursive>
 800d742:	bf00      	nop
 800d744:	2000279c 	.word	0x2000279c

0800d748 <__malloc_unlock>:
 800d748:	4801      	ldr	r0, [pc, #4]	; (800d750 <__malloc_unlock+0x8>)
 800d74a:	f7ff bf7f 	b.w	800d64c <__retarget_lock_release_recursive>
 800d74e:	bf00      	nop
 800d750:	2000279c 	.word	0x2000279c

0800d754 <_Balloc>:
 800d754:	b570      	push	{r4, r5, r6, lr}
 800d756:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d758:	4604      	mov	r4, r0
 800d75a:	460d      	mov	r5, r1
 800d75c:	b976      	cbnz	r6, 800d77c <_Balloc+0x28>
 800d75e:	2010      	movs	r0, #16
 800d760:	f7fc fda0 	bl	800a2a4 <malloc>
 800d764:	4602      	mov	r2, r0
 800d766:	6260      	str	r0, [r4, #36]	; 0x24
 800d768:	b920      	cbnz	r0, 800d774 <_Balloc+0x20>
 800d76a:	4b18      	ldr	r3, [pc, #96]	; (800d7cc <_Balloc+0x78>)
 800d76c:	4818      	ldr	r0, [pc, #96]	; (800d7d0 <_Balloc+0x7c>)
 800d76e:	2166      	movs	r1, #102	; 0x66
 800d770:	f000 fff8 	bl	800e764 <__assert_func>
 800d774:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d778:	6006      	str	r6, [r0, #0]
 800d77a:	60c6      	str	r6, [r0, #12]
 800d77c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d77e:	68f3      	ldr	r3, [r6, #12]
 800d780:	b183      	cbz	r3, 800d7a4 <_Balloc+0x50>
 800d782:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d784:	68db      	ldr	r3, [r3, #12]
 800d786:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d78a:	b9b8      	cbnz	r0, 800d7bc <_Balloc+0x68>
 800d78c:	2101      	movs	r1, #1
 800d78e:	fa01 f605 	lsl.w	r6, r1, r5
 800d792:	1d72      	adds	r2, r6, #5
 800d794:	0092      	lsls	r2, r2, #2
 800d796:	4620      	mov	r0, r4
 800d798:	f000 fc9a 	bl	800e0d0 <_calloc_r>
 800d79c:	b160      	cbz	r0, 800d7b8 <_Balloc+0x64>
 800d79e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d7a2:	e00e      	b.n	800d7c2 <_Balloc+0x6e>
 800d7a4:	2221      	movs	r2, #33	; 0x21
 800d7a6:	2104      	movs	r1, #4
 800d7a8:	4620      	mov	r0, r4
 800d7aa:	f000 fc91 	bl	800e0d0 <_calloc_r>
 800d7ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7b0:	60f0      	str	r0, [r6, #12]
 800d7b2:	68db      	ldr	r3, [r3, #12]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d1e4      	bne.n	800d782 <_Balloc+0x2e>
 800d7b8:	2000      	movs	r0, #0
 800d7ba:	bd70      	pop	{r4, r5, r6, pc}
 800d7bc:	6802      	ldr	r2, [r0, #0]
 800d7be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d7c8:	e7f7      	b.n	800d7ba <_Balloc+0x66>
 800d7ca:	bf00      	nop
 800d7cc:	0800ec0e 	.word	0x0800ec0e
 800d7d0:	0800ed70 	.word	0x0800ed70

0800d7d4 <_Bfree>:
 800d7d4:	b570      	push	{r4, r5, r6, lr}
 800d7d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d7d8:	4605      	mov	r5, r0
 800d7da:	460c      	mov	r4, r1
 800d7dc:	b976      	cbnz	r6, 800d7fc <_Bfree+0x28>
 800d7de:	2010      	movs	r0, #16
 800d7e0:	f7fc fd60 	bl	800a2a4 <malloc>
 800d7e4:	4602      	mov	r2, r0
 800d7e6:	6268      	str	r0, [r5, #36]	; 0x24
 800d7e8:	b920      	cbnz	r0, 800d7f4 <_Bfree+0x20>
 800d7ea:	4b09      	ldr	r3, [pc, #36]	; (800d810 <_Bfree+0x3c>)
 800d7ec:	4809      	ldr	r0, [pc, #36]	; (800d814 <_Bfree+0x40>)
 800d7ee:	218a      	movs	r1, #138	; 0x8a
 800d7f0:	f000 ffb8 	bl	800e764 <__assert_func>
 800d7f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d7f8:	6006      	str	r6, [r0, #0]
 800d7fa:	60c6      	str	r6, [r0, #12]
 800d7fc:	b13c      	cbz	r4, 800d80e <_Bfree+0x3a>
 800d7fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d800:	6862      	ldr	r2, [r4, #4]
 800d802:	68db      	ldr	r3, [r3, #12]
 800d804:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d808:	6021      	str	r1, [r4, #0]
 800d80a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d80e:	bd70      	pop	{r4, r5, r6, pc}
 800d810:	0800ec0e 	.word	0x0800ec0e
 800d814:	0800ed70 	.word	0x0800ed70

0800d818 <__multadd>:
 800d818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d81c:	690d      	ldr	r5, [r1, #16]
 800d81e:	4607      	mov	r7, r0
 800d820:	460c      	mov	r4, r1
 800d822:	461e      	mov	r6, r3
 800d824:	f101 0c14 	add.w	ip, r1, #20
 800d828:	2000      	movs	r0, #0
 800d82a:	f8dc 3000 	ldr.w	r3, [ip]
 800d82e:	b299      	uxth	r1, r3
 800d830:	fb02 6101 	mla	r1, r2, r1, r6
 800d834:	0c1e      	lsrs	r6, r3, #16
 800d836:	0c0b      	lsrs	r3, r1, #16
 800d838:	fb02 3306 	mla	r3, r2, r6, r3
 800d83c:	b289      	uxth	r1, r1
 800d83e:	3001      	adds	r0, #1
 800d840:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d844:	4285      	cmp	r5, r0
 800d846:	f84c 1b04 	str.w	r1, [ip], #4
 800d84a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d84e:	dcec      	bgt.n	800d82a <__multadd+0x12>
 800d850:	b30e      	cbz	r6, 800d896 <__multadd+0x7e>
 800d852:	68a3      	ldr	r3, [r4, #8]
 800d854:	42ab      	cmp	r3, r5
 800d856:	dc19      	bgt.n	800d88c <__multadd+0x74>
 800d858:	6861      	ldr	r1, [r4, #4]
 800d85a:	4638      	mov	r0, r7
 800d85c:	3101      	adds	r1, #1
 800d85e:	f7ff ff79 	bl	800d754 <_Balloc>
 800d862:	4680      	mov	r8, r0
 800d864:	b928      	cbnz	r0, 800d872 <__multadd+0x5a>
 800d866:	4602      	mov	r2, r0
 800d868:	4b0c      	ldr	r3, [pc, #48]	; (800d89c <__multadd+0x84>)
 800d86a:	480d      	ldr	r0, [pc, #52]	; (800d8a0 <__multadd+0x88>)
 800d86c:	21b5      	movs	r1, #181	; 0xb5
 800d86e:	f000 ff79 	bl	800e764 <__assert_func>
 800d872:	6922      	ldr	r2, [r4, #16]
 800d874:	3202      	adds	r2, #2
 800d876:	f104 010c 	add.w	r1, r4, #12
 800d87a:	0092      	lsls	r2, r2, #2
 800d87c:	300c      	adds	r0, #12
 800d87e:	f7fc fd19 	bl	800a2b4 <memcpy>
 800d882:	4621      	mov	r1, r4
 800d884:	4638      	mov	r0, r7
 800d886:	f7ff ffa5 	bl	800d7d4 <_Bfree>
 800d88a:	4644      	mov	r4, r8
 800d88c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d890:	3501      	adds	r5, #1
 800d892:	615e      	str	r6, [r3, #20]
 800d894:	6125      	str	r5, [r4, #16]
 800d896:	4620      	mov	r0, r4
 800d898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d89c:	0800ec80 	.word	0x0800ec80
 800d8a0:	0800ed70 	.word	0x0800ed70

0800d8a4 <__s2b>:
 800d8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8a8:	460c      	mov	r4, r1
 800d8aa:	4615      	mov	r5, r2
 800d8ac:	461f      	mov	r7, r3
 800d8ae:	2209      	movs	r2, #9
 800d8b0:	3308      	adds	r3, #8
 800d8b2:	4606      	mov	r6, r0
 800d8b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800d8b8:	2100      	movs	r1, #0
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	db09      	blt.n	800d8d4 <__s2b+0x30>
 800d8c0:	4630      	mov	r0, r6
 800d8c2:	f7ff ff47 	bl	800d754 <_Balloc>
 800d8c6:	b940      	cbnz	r0, 800d8da <__s2b+0x36>
 800d8c8:	4602      	mov	r2, r0
 800d8ca:	4b19      	ldr	r3, [pc, #100]	; (800d930 <__s2b+0x8c>)
 800d8cc:	4819      	ldr	r0, [pc, #100]	; (800d934 <__s2b+0x90>)
 800d8ce:	21ce      	movs	r1, #206	; 0xce
 800d8d0:	f000 ff48 	bl	800e764 <__assert_func>
 800d8d4:	0052      	lsls	r2, r2, #1
 800d8d6:	3101      	adds	r1, #1
 800d8d8:	e7f0      	b.n	800d8bc <__s2b+0x18>
 800d8da:	9b08      	ldr	r3, [sp, #32]
 800d8dc:	6143      	str	r3, [r0, #20]
 800d8de:	2d09      	cmp	r5, #9
 800d8e0:	f04f 0301 	mov.w	r3, #1
 800d8e4:	6103      	str	r3, [r0, #16]
 800d8e6:	dd16      	ble.n	800d916 <__s2b+0x72>
 800d8e8:	f104 0909 	add.w	r9, r4, #9
 800d8ec:	46c8      	mov	r8, r9
 800d8ee:	442c      	add	r4, r5
 800d8f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d8f4:	4601      	mov	r1, r0
 800d8f6:	3b30      	subs	r3, #48	; 0x30
 800d8f8:	220a      	movs	r2, #10
 800d8fa:	4630      	mov	r0, r6
 800d8fc:	f7ff ff8c 	bl	800d818 <__multadd>
 800d900:	45a0      	cmp	r8, r4
 800d902:	d1f5      	bne.n	800d8f0 <__s2b+0x4c>
 800d904:	f1a5 0408 	sub.w	r4, r5, #8
 800d908:	444c      	add	r4, r9
 800d90a:	1b2d      	subs	r5, r5, r4
 800d90c:	1963      	adds	r3, r4, r5
 800d90e:	42bb      	cmp	r3, r7
 800d910:	db04      	blt.n	800d91c <__s2b+0x78>
 800d912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d916:	340a      	adds	r4, #10
 800d918:	2509      	movs	r5, #9
 800d91a:	e7f6      	b.n	800d90a <__s2b+0x66>
 800d91c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d920:	4601      	mov	r1, r0
 800d922:	3b30      	subs	r3, #48	; 0x30
 800d924:	220a      	movs	r2, #10
 800d926:	4630      	mov	r0, r6
 800d928:	f7ff ff76 	bl	800d818 <__multadd>
 800d92c:	e7ee      	b.n	800d90c <__s2b+0x68>
 800d92e:	bf00      	nop
 800d930:	0800ec80 	.word	0x0800ec80
 800d934:	0800ed70 	.word	0x0800ed70

0800d938 <__hi0bits>:
 800d938:	0c03      	lsrs	r3, r0, #16
 800d93a:	041b      	lsls	r3, r3, #16
 800d93c:	b9d3      	cbnz	r3, 800d974 <__hi0bits+0x3c>
 800d93e:	0400      	lsls	r0, r0, #16
 800d940:	2310      	movs	r3, #16
 800d942:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d946:	bf04      	itt	eq
 800d948:	0200      	lsleq	r0, r0, #8
 800d94a:	3308      	addeq	r3, #8
 800d94c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d950:	bf04      	itt	eq
 800d952:	0100      	lsleq	r0, r0, #4
 800d954:	3304      	addeq	r3, #4
 800d956:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d95a:	bf04      	itt	eq
 800d95c:	0080      	lsleq	r0, r0, #2
 800d95e:	3302      	addeq	r3, #2
 800d960:	2800      	cmp	r0, #0
 800d962:	db05      	blt.n	800d970 <__hi0bits+0x38>
 800d964:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d968:	f103 0301 	add.w	r3, r3, #1
 800d96c:	bf08      	it	eq
 800d96e:	2320      	moveq	r3, #32
 800d970:	4618      	mov	r0, r3
 800d972:	4770      	bx	lr
 800d974:	2300      	movs	r3, #0
 800d976:	e7e4      	b.n	800d942 <__hi0bits+0xa>

0800d978 <__lo0bits>:
 800d978:	6803      	ldr	r3, [r0, #0]
 800d97a:	f013 0207 	ands.w	r2, r3, #7
 800d97e:	4601      	mov	r1, r0
 800d980:	d00b      	beq.n	800d99a <__lo0bits+0x22>
 800d982:	07da      	lsls	r2, r3, #31
 800d984:	d423      	bmi.n	800d9ce <__lo0bits+0x56>
 800d986:	0798      	lsls	r0, r3, #30
 800d988:	bf49      	itett	mi
 800d98a:	085b      	lsrmi	r3, r3, #1
 800d98c:	089b      	lsrpl	r3, r3, #2
 800d98e:	2001      	movmi	r0, #1
 800d990:	600b      	strmi	r3, [r1, #0]
 800d992:	bf5c      	itt	pl
 800d994:	600b      	strpl	r3, [r1, #0]
 800d996:	2002      	movpl	r0, #2
 800d998:	4770      	bx	lr
 800d99a:	b298      	uxth	r0, r3
 800d99c:	b9a8      	cbnz	r0, 800d9ca <__lo0bits+0x52>
 800d99e:	0c1b      	lsrs	r3, r3, #16
 800d9a0:	2010      	movs	r0, #16
 800d9a2:	b2da      	uxtb	r2, r3
 800d9a4:	b90a      	cbnz	r2, 800d9aa <__lo0bits+0x32>
 800d9a6:	3008      	adds	r0, #8
 800d9a8:	0a1b      	lsrs	r3, r3, #8
 800d9aa:	071a      	lsls	r2, r3, #28
 800d9ac:	bf04      	itt	eq
 800d9ae:	091b      	lsreq	r3, r3, #4
 800d9b0:	3004      	addeq	r0, #4
 800d9b2:	079a      	lsls	r2, r3, #30
 800d9b4:	bf04      	itt	eq
 800d9b6:	089b      	lsreq	r3, r3, #2
 800d9b8:	3002      	addeq	r0, #2
 800d9ba:	07da      	lsls	r2, r3, #31
 800d9bc:	d403      	bmi.n	800d9c6 <__lo0bits+0x4e>
 800d9be:	085b      	lsrs	r3, r3, #1
 800d9c0:	f100 0001 	add.w	r0, r0, #1
 800d9c4:	d005      	beq.n	800d9d2 <__lo0bits+0x5a>
 800d9c6:	600b      	str	r3, [r1, #0]
 800d9c8:	4770      	bx	lr
 800d9ca:	4610      	mov	r0, r2
 800d9cc:	e7e9      	b.n	800d9a2 <__lo0bits+0x2a>
 800d9ce:	2000      	movs	r0, #0
 800d9d0:	4770      	bx	lr
 800d9d2:	2020      	movs	r0, #32
 800d9d4:	4770      	bx	lr
	...

0800d9d8 <__i2b>:
 800d9d8:	b510      	push	{r4, lr}
 800d9da:	460c      	mov	r4, r1
 800d9dc:	2101      	movs	r1, #1
 800d9de:	f7ff feb9 	bl	800d754 <_Balloc>
 800d9e2:	4602      	mov	r2, r0
 800d9e4:	b928      	cbnz	r0, 800d9f2 <__i2b+0x1a>
 800d9e6:	4b05      	ldr	r3, [pc, #20]	; (800d9fc <__i2b+0x24>)
 800d9e8:	4805      	ldr	r0, [pc, #20]	; (800da00 <__i2b+0x28>)
 800d9ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d9ee:	f000 feb9 	bl	800e764 <__assert_func>
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	6144      	str	r4, [r0, #20]
 800d9f6:	6103      	str	r3, [r0, #16]
 800d9f8:	bd10      	pop	{r4, pc}
 800d9fa:	bf00      	nop
 800d9fc:	0800ec80 	.word	0x0800ec80
 800da00:	0800ed70 	.word	0x0800ed70

0800da04 <__multiply>:
 800da04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da08:	4691      	mov	r9, r2
 800da0a:	690a      	ldr	r2, [r1, #16]
 800da0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800da10:	429a      	cmp	r2, r3
 800da12:	bfb8      	it	lt
 800da14:	460b      	movlt	r3, r1
 800da16:	460c      	mov	r4, r1
 800da18:	bfbc      	itt	lt
 800da1a:	464c      	movlt	r4, r9
 800da1c:	4699      	movlt	r9, r3
 800da1e:	6927      	ldr	r7, [r4, #16]
 800da20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800da24:	68a3      	ldr	r3, [r4, #8]
 800da26:	6861      	ldr	r1, [r4, #4]
 800da28:	eb07 060a 	add.w	r6, r7, sl
 800da2c:	42b3      	cmp	r3, r6
 800da2e:	b085      	sub	sp, #20
 800da30:	bfb8      	it	lt
 800da32:	3101      	addlt	r1, #1
 800da34:	f7ff fe8e 	bl	800d754 <_Balloc>
 800da38:	b930      	cbnz	r0, 800da48 <__multiply+0x44>
 800da3a:	4602      	mov	r2, r0
 800da3c:	4b44      	ldr	r3, [pc, #272]	; (800db50 <__multiply+0x14c>)
 800da3e:	4845      	ldr	r0, [pc, #276]	; (800db54 <__multiply+0x150>)
 800da40:	f240 115d 	movw	r1, #349	; 0x15d
 800da44:	f000 fe8e 	bl	800e764 <__assert_func>
 800da48:	f100 0514 	add.w	r5, r0, #20
 800da4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800da50:	462b      	mov	r3, r5
 800da52:	2200      	movs	r2, #0
 800da54:	4543      	cmp	r3, r8
 800da56:	d321      	bcc.n	800da9c <__multiply+0x98>
 800da58:	f104 0314 	add.w	r3, r4, #20
 800da5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800da60:	f109 0314 	add.w	r3, r9, #20
 800da64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800da68:	9202      	str	r2, [sp, #8]
 800da6a:	1b3a      	subs	r2, r7, r4
 800da6c:	3a15      	subs	r2, #21
 800da6e:	f022 0203 	bic.w	r2, r2, #3
 800da72:	3204      	adds	r2, #4
 800da74:	f104 0115 	add.w	r1, r4, #21
 800da78:	428f      	cmp	r7, r1
 800da7a:	bf38      	it	cc
 800da7c:	2204      	movcc	r2, #4
 800da7e:	9201      	str	r2, [sp, #4]
 800da80:	9a02      	ldr	r2, [sp, #8]
 800da82:	9303      	str	r3, [sp, #12]
 800da84:	429a      	cmp	r2, r3
 800da86:	d80c      	bhi.n	800daa2 <__multiply+0x9e>
 800da88:	2e00      	cmp	r6, #0
 800da8a:	dd03      	ble.n	800da94 <__multiply+0x90>
 800da8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800da90:	2b00      	cmp	r3, #0
 800da92:	d05a      	beq.n	800db4a <__multiply+0x146>
 800da94:	6106      	str	r6, [r0, #16]
 800da96:	b005      	add	sp, #20
 800da98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da9c:	f843 2b04 	str.w	r2, [r3], #4
 800daa0:	e7d8      	b.n	800da54 <__multiply+0x50>
 800daa2:	f8b3 a000 	ldrh.w	sl, [r3]
 800daa6:	f1ba 0f00 	cmp.w	sl, #0
 800daaa:	d024      	beq.n	800daf6 <__multiply+0xf2>
 800daac:	f104 0e14 	add.w	lr, r4, #20
 800dab0:	46a9      	mov	r9, r5
 800dab2:	f04f 0c00 	mov.w	ip, #0
 800dab6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800daba:	f8d9 1000 	ldr.w	r1, [r9]
 800dabe:	fa1f fb82 	uxth.w	fp, r2
 800dac2:	b289      	uxth	r1, r1
 800dac4:	fb0a 110b 	mla	r1, sl, fp, r1
 800dac8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dacc:	f8d9 2000 	ldr.w	r2, [r9]
 800dad0:	4461      	add	r1, ip
 800dad2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dad6:	fb0a c20b 	mla	r2, sl, fp, ip
 800dada:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dade:	b289      	uxth	r1, r1
 800dae0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dae4:	4577      	cmp	r7, lr
 800dae6:	f849 1b04 	str.w	r1, [r9], #4
 800daea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800daee:	d8e2      	bhi.n	800dab6 <__multiply+0xb2>
 800daf0:	9a01      	ldr	r2, [sp, #4]
 800daf2:	f845 c002 	str.w	ip, [r5, r2]
 800daf6:	9a03      	ldr	r2, [sp, #12]
 800daf8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dafc:	3304      	adds	r3, #4
 800dafe:	f1b9 0f00 	cmp.w	r9, #0
 800db02:	d020      	beq.n	800db46 <__multiply+0x142>
 800db04:	6829      	ldr	r1, [r5, #0]
 800db06:	f104 0c14 	add.w	ip, r4, #20
 800db0a:	46ae      	mov	lr, r5
 800db0c:	f04f 0a00 	mov.w	sl, #0
 800db10:	f8bc b000 	ldrh.w	fp, [ip]
 800db14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800db18:	fb09 220b 	mla	r2, r9, fp, r2
 800db1c:	4492      	add	sl, r2
 800db1e:	b289      	uxth	r1, r1
 800db20:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800db24:	f84e 1b04 	str.w	r1, [lr], #4
 800db28:	f85c 2b04 	ldr.w	r2, [ip], #4
 800db2c:	f8be 1000 	ldrh.w	r1, [lr]
 800db30:	0c12      	lsrs	r2, r2, #16
 800db32:	fb09 1102 	mla	r1, r9, r2, r1
 800db36:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800db3a:	4567      	cmp	r7, ip
 800db3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800db40:	d8e6      	bhi.n	800db10 <__multiply+0x10c>
 800db42:	9a01      	ldr	r2, [sp, #4]
 800db44:	50a9      	str	r1, [r5, r2]
 800db46:	3504      	adds	r5, #4
 800db48:	e79a      	b.n	800da80 <__multiply+0x7c>
 800db4a:	3e01      	subs	r6, #1
 800db4c:	e79c      	b.n	800da88 <__multiply+0x84>
 800db4e:	bf00      	nop
 800db50:	0800ec80 	.word	0x0800ec80
 800db54:	0800ed70 	.word	0x0800ed70

0800db58 <__pow5mult>:
 800db58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db5c:	4615      	mov	r5, r2
 800db5e:	f012 0203 	ands.w	r2, r2, #3
 800db62:	4606      	mov	r6, r0
 800db64:	460f      	mov	r7, r1
 800db66:	d007      	beq.n	800db78 <__pow5mult+0x20>
 800db68:	4c25      	ldr	r4, [pc, #148]	; (800dc00 <__pow5mult+0xa8>)
 800db6a:	3a01      	subs	r2, #1
 800db6c:	2300      	movs	r3, #0
 800db6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800db72:	f7ff fe51 	bl	800d818 <__multadd>
 800db76:	4607      	mov	r7, r0
 800db78:	10ad      	asrs	r5, r5, #2
 800db7a:	d03d      	beq.n	800dbf8 <__pow5mult+0xa0>
 800db7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800db7e:	b97c      	cbnz	r4, 800dba0 <__pow5mult+0x48>
 800db80:	2010      	movs	r0, #16
 800db82:	f7fc fb8f 	bl	800a2a4 <malloc>
 800db86:	4602      	mov	r2, r0
 800db88:	6270      	str	r0, [r6, #36]	; 0x24
 800db8a:	b928      	cbnz	r0, 800db98 <__pow5mult+0x40>
 800db8c:	4b1d      	ldr	r3, [pc, #116]	; (800dc04 <__pow5mult+0xac>)
 800db8e:	481e      	ldr	r0, [pc, #120]	; (800dc08 <__pow5mult+0xb0>)
 800db90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800db94:	f000 fde6 	bl	800e764 <__assert_func>
 800db98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800db9c:	6004      	str	r4, [r0, #0]
 800db9e:	60c4      	str	r4, [r0, #12]
 800dba0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dba4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dba8:	b94c      	cbnz	r4, 800dbbe <__pow5mult+0x66>
 800dbaa:	f240 2171 	movw	r1, #625	; 0x271
 800dbae:	4630      	mov	r0, r6
 800dbb0:	f7ff ff12 	bl	800d9d8 <__i2b>
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	f8c8 0008 	str.w	r0, [r8, #8]
 800dbba:	4604      	mov	r4, r0
 800dbbc:	6003      	str	r3, [r0, #0]
 800dbbe:	f04f 0900 	mov.w	r9, #0
 800dbc2:	07eb      	lsls	r3, r5, #31
 800dbc4:	d50a      	bpl.n	800dbdc <__pow5mult+0x84>
 800dbc6:	4639      	mov	r1, r7
 800dbc8:	4622      	mov	r2, r4
 800dbca:	4630      	mov	r0, r6
 800dbcc:	f7ff ff1a 	bl	800da04 <__multiply>
 800dbd0:	4639      	mov	r1, r7
 800dbd2:	4680      	mov	r8, r0
 800dbd4:	4630      	mov	r0, r6
 800dbd6:	f7ff fdfd 	bl	800d7d4 <_Bfree>
 800dbda:	4647      	mov	r7, r8
 800dbdc:	106d      	asrs	r5, r5, #1
 800dbde:	d00b      	beq.n	800dbf8 <__pow5mult+0xa0>
 800dbe0:	6820      	ldr	r0, [r4, #0]
 800dbe2:	b938      	cbnz	r0, 800dbf4 <__pow5mult+0x9c>
 800dbe4:	4622      	mov	r2, r4
 800dbe6:	4621      	mov	r1, r4
 800dbe8:	4630      	mov	r0, r6
 800dbea:	f7ff ff0b 	bl	800da04 <__multiply>
 800dbee:	6020      	str	r0, [r4, #0]
 800dbf0:	f8c0 9000 	str.w	r9, [r0]
 800dbf4:	4604      	mov	r4, r0
 800dbf6:	e7e4      	b.n	800dbc2 <__pow5mult+0x6a>
 800dbf8:	4638      	mov	r0, r7
 800dbfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbfe:	bf00      	nop
 800dc00:	0800eec0 	.word	0x0800eec0
 800dc04:	0800ec0e 	.word	0x0800ec0e
 800dc08:	0800ed70 	.word	0x0800ed70

0800dc0c <__lshift>:
 800dc0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc10:	460c      	mov	r4, r1
 800dc12:	6849      	ldr	r1, [r1, #4]
 800dc14:	6923      	ldr	r3, [r4, #16]
 800dc16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dc1a:	68a3      	ldr	r3, [r4, #8]
 800dc1c:	4607      	mov	r7, r0
 800dc1e:	4691      	mov	r9, r2
 800dc20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dc24:	f108 0601 	add.w	r6, r8, #1
 800dc28:	42b3      	cmp	r3, r6
 800dc2a:	db0b      	blt.n	800dc44 <__lshift+0x38>
 800dc2c:	4638      	mov	r0, r7
 800dc2e:	f7ff fd91 	bl	800d754 <_Balloc>
 800dc32:	4605      	mov	r5, r0
 800dc34:	b948      	cbnz	r0, 800dc4a <__lshift+0x3e>
 800dc36:	4602      	mov	r2, r0
 800dc38:	4b2a      	ldr	r3, [pc, #168]	; (800dce4 <__lshift+0xd8>)
 800dc3a:	482b      	ldr	r0, [pc, #172]	; (800dce8 <__lshift+0xdc>)
 800dc3c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dc40:	f000 fd90 	bl	800e764 <__assert_func>
 800dc44:	3101      	adds	r1, #1
 800dc46:	005b      	lsls	r3, r3, #1
 800dc48:	e7ee      	b.n	800dc28 <__lshift+0x1c>
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	f100 0114 	add.w	r1, r0, #20
 800dc50:	f100 0210 	add.w	r2, r0, #16
 800dc54:	4618      	mov	r0, r3
 800dc56:	4553      	cmp	r3, sl
 800dc58:	db37      	blt.n	800dcca <__lshift+0xbe>
 800dc5a:	6920      	ldr	r0, [r4, #16]
 800dc5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dc60:	f104 0314 	add.w	r3, r4, #20
 800dc64:	f019 091f 	ands.w	r9, r9, #31
 800dc68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dc6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dc70:	d02f      	beq.n	800dcd2 <__lshift+0xc6>
 800dc72:	f1c9 0e20 	rsb	lr, r9, #32
 800dc76:	468a      	mov	sl, r1
 800dc78:	f04f 0c00 	mov.w	ip, #0
 800dc7c:	681a      	ldr	r2, [r3, #0]
 800dc7e:	fa02 f209 	lsl.w	r2, r2, r9
 800dc82:	ea42 020c 	orr.w	r2, r2, ip
 800dc86:	f84a 2b04 	str.w	r2, [sl], #4
 800dc8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc8e:	4298      	cmp	r0, r3
 800dc90:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dc94:	d8f2      	bhi.n	800dc7c <__lshift+0x70>
 800dc96:	1b03      	subs	r3, r0, r4
 800dc98:	3b15      	subs	r3, #21
 800dc9a:	f023 0303 	bic.w	r3, r3, #3
 800dc9e:	3304      	adds	r3, #4
 800dca0:	f104 0215 	add.w	r2, r4, #21
 800dca4:	4290      	cmp	r0, r2
 800dca6:	bf38      	it	cc
 800dca8:	2304      	movcc	r3, #4
 800dcaa:	f841 c003 	str.w	ip, [r1, r3]
 800dcae:	f1bc 0f00 	cmp.w	ip, #0
 800dcb2:	d001      	beq.n	800dcb8 <__lshift+0xac>
 800dcb4:	f108 0602 	add.w	r6, r8, #2
 800dcb8:	3e01      	subs	r6, #1
 800dcba:	4638      	mov	r0, r7
 800dcbc:	612e      	str	r6, [r5, #16]
 800dcbe:	4621      	mov	r1, r4
 800dcc0:	f7ff fd88 	bl	800d7d4 <_Bfree>
 800dcc4:	4628      	mov	r0, r5
 800dcc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcca:	f842 0f04 	str.w	r0, [r2, #4]!
 800dcce:	3301      	adds	r3, #1
 800dcd0:	e7c1      	b.n	800dc56 <__lshift+0x4a>
 800dcd2:	3904      	subs	r1, #4
 800dcd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcd8:	f841 2f04 	str.w	r2, [r1, #4]!
 800dcdc:	4298      	cmp	r0, r3
 800dcde:	d8f9      	bhi.n	800dcd4 <__lshift+0xc8>
 800dce0:	e7ea      	b.n	800dcb8 <__lshift+0xac>
 800dce2:	bf00      	nop
 800dce4:	0800ec80 	.word	0x0800ec80
 800dce8:	0800ed70 	.word	0x0800ed70

0800dcec <__mcmp>:
 800dcec:	b530      	push	{r4, r5, lr}
 800dcee:	6902      	ldr	r2, [r0, #16]
 800dcf0:	690c      	ldr	r4, [r1, #16]
 800dcf2:	1b12      	subs	r2, r2, r4
 800dcf4:	d10e      	bne.n	800dd14 <__mcmp+0x28>
 800dcf6:	f100 0314 	add.w	r3, r0, #20
 800dcfa:	3114      	adds	r1, #20
 800dcfc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dd00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dd04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dd08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dd0c:	42a5      	cmp	r5, r4
 800dd0e:	d003      	beq.n	800dd18 <__mcmp+0x2c>
 800dd10:	d305      	bcc.n	800dd1e <__mcmp+0x32>
 800dd12:	2201      	movs	r2, #1
 800dd14:	4610      	mov	r0, r2
 800dd16:	bd30      	pop	{r4, r5, pc}
 800dd18:	4283      	cmp	r3, r0
 800dd1a:	d3f3      	bcc.n	800dd04 <__mcmp+0x18>
 800dd1c:	e7fa      	b.n	800dd14 <__mcmp+0x28>
 800dd1e:	f04f 32ff 	mov.w	r2, #4294967295
 800dd22:	e7f7      	b.n	800dd14 <__mcmp+0x28>

0800dd24 <__mdiff>:
 800dd24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd28:	460c      	mov	r4, r1
 800dd2a:	4606      	mov	r6, r0
 800dd2c:	4611      	mov	r1, r2
 800dd2e:	4620      	mov	r0, r4
 800dd30:	4690      	mov	r8, r2
 800dd32:	f7ff ffdb 	bl	800dcec <__mcmp>
 800dd36:	1e05      	subs	r5, r0, #0
 800dd38:	d110      	bne.n	800dd5c <__mdiff+0x38>
 800dd3a:	4629      	mov	r1, r5
 800dd3c:	4630      	mov	r0, r6
 800dd3e:	f7ff fd09 	bl	800d754 <_Balloc>
 800dd42:	b930      	cbnz	r0, 800dd52 <__mdiff+0x2e>
 800dd44:	4b3a      	ldr	r3, [pc, #232]	; (800de30 <__mdiff+0x10c>)
 800dd46:	4602      	mov	r2, r0
 800dd48:	f240 2132 	movw	r1, #562	; 0x232
 800dd4c:	4839      	ldr	r0, [pc, #228]	; (800de34 <__mdiff+0x110>)
 800dd4e:	f000 fd09 	bl	800e764 <__assert_func>
 800dd52:	2301      	movs	r3, #1
 800dd54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dd58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd5c:	bfa4      	itt	ge
 800dd5e:	4643      	movge	r3, r8
 800dd60:	46a0      	movge	r8, r4
 800dd62:	4630      	mov	r0, r6
 800dd64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dd68:	bfa6      	itte	ge
 800dd6a:	461c      	movge	r4, r3
 800dd6c:	2500      	movge	r5, #0
 800dd6e:	2501      	movlt	r5, #1
 800dd70:	f7ff fcf0 	bl	800d754 <_Balloc>
 800dd74:	b920      	cbnz	r0, 800dd80 <__mdiff+0x5c>
 800dd76:	4b2e      	ldr	r3, [pc, #184]	; (800de30 <__mdiff+0x10c>)
 800dd78:	4602      	mov	r2, r0
 800dd7a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dd7e:	e7e5      	b.n	800dd4c <__mdiff+0x28>
 800dd80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dd84:	6926      	ldr	r6, [r4, #16]
 800dd86:	60c5      	str	r5, [r0, #12]
 800dd88:	f104 0914 	add.w	r9, r4, #20
 800dd8c:	f108 0514 	add.w	r5, r8, #20
 800dd90:	f100 0e14 	add.w	lr, r0, #20
 800dd94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dd98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dd9c:	f108 0210 	add.w	r2, r8, #16
 800dda0:	46f2      	mov	sl, lr
 800dda2:	2100      	movs	r1, #0
 800dda4:	f859 3b04 	ldr.w	r3, [r9], #4
 800dda8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ddac:	fa1f f883 	uxth.w	r8, r3
 800ddb0:	fa11 f18b 	uxtah	r1, r1, fp
 800ddb4:	0c1b      	lsrs	r3, r3, #16
 800ddb6:	eba1 0808 	sub.w	r8, r1, r8
 800ddba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ddbe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ddc2:	fa1f f888 	uxth.w	r8, r8
 800ddc6:	1419      	asrs	r1, r3, #16
 800ddc8:	454e      	cmp	r6, r9
 800ddca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ddce:	f84a 3b04 	str.w	r3, [sl], #4
 800ddd2:	d8e7      	bhi.n	800dda4 <__mdiff+0x80>
 800ddd4:	1b33      	subs	r3, r6, r4
 800ddd6:	3b15      	subs	r3, #21
 800ddd8:	f023 0303 	bic.w	r3, r3, #3
 800dddc:	3304      	adds	r3, #4
 800ddde:	3415      	adds	r4, #21
 800dde0:	42a6      	cmp	r6, r4
 800dde2:	bf38      	it	cc
 800dde4:	2304      	movcc	r3, #4
 800dde6:	441d      	add	r5, r3
 800dde8:	4473      	add	r3, lr
 800ddea:	469e      	mov	lr, r3
 800ddec:	462e      	mov	r6, r5
 800ddee:	4566      	cmp	r6, ip
 800ddf0:	d30e      	bcc.n	800de10 <__mdiff+0xec>
 800ddf2:	f10c 0203 	add.w	r2, ip, #3
 800ddf6:	1b52      	subs	r2, r2, r5
 800ddf8:	f022 0203 	bic.w	r2, r2, #3
 800ddfc:	3d03      	subs	r5, #3
 800ddfe:	45ac      	cmp	ip, r5
 800de00:	bf38      	it	cc
 800de02:	2200      	movcc	r2, #0
 800de04:	441a      	add	r2, r3
 800de06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800de0a:	b17b      	cbz	r3, 800de2c <__mdiff+0x108>
 800de0c:	6107      	str	r7, [r0, #16]
 800de0e:	e7a3      	b.n	800dd58 <__mdiff+0x34>
 800de10:	f856 8b04 	ldr.w	r8, [r6], #4
 800de14:	fa11 f288 	uxtah	r2, r1, r8
 800de18:	1414      	asrs	r4, r2, #16
 800de1a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800de1e:	b292      	uxth	r2, r2
 800de20:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800de24:	f84e 2b04 	str.w	r2, [lr], #4
 800de28:	1421      	asrs	r1, r4, #16
 800de2a:	e7e0      	b.n	800ddee <__mdiff+0xca>
 800de2c:	3f01      	subs	r7, #1
 800de2e:	e7ea      	b.n	800de06 <__mdiff+0xe2>
 800de30:	0800ec80 	.word	0x0800ec80
 800de34:	0800ed70 	.word	0x0800ed70

0800de38 <__ulp>:
 800de38:	b082      	sub	sp, #8
 800de3a:	ed8d 0b00 	vstr	d0, [sp]
 800de3e:	9b01      	ldr	r3, [sp, #4]
 800de40:	4912      	ldr	r1, [pc, #72]	; (800de8c <__ulp+0x54>)
 800de42:	4019      	ands	r1, r3
 800de44:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800de48:	2900      	cmp	r1, #0
 800de4a:	dd05      	ble.n	800de58 <__ulp+0x20>
 800de4c:	2200      	movs	r2, #0
 800de4e:	460b      	mov	r3, r1
 800de50:	ec43 2b10 	vmov	d0, r2, r3
 800de54:	b002      	add	sp, #8
 800de56:	4770      	bx	lr
 800de58:	4249      	negs	r1, r1
 800de5a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800de5e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800de62:	f04f 0200 	mov.w	r2, #0
 800de66:	f04f 0300 	mov.w	r3, #0
 800de6a:	da04      	bge.n	800de76 <__ulp+0x3e>
 800de6c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800de70:	fa41 f300 	asr.w	r3, r1, r0
 800de74:	e7ec      	b.n	800de50 <__ulp+0x18>
 800de76:	f1a0 0114 	sub.w	r1, r0, #20
 800de7a:	291e      	cmp	r1, #30
 800de7c:	bfda      	itte	le
 800de7e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800de82:	fa20 f101 	lsrle.w	r1, r0, r1
 800de86:	2101      	movgt	r1, #1
 800de88:	460a      	mov	r2, r1
 800de8a:	e7e1      	b.n	800de50 <__ulp+0x18>
 800de8c:	7ff00000 	.word	0x7ff00000

0800de90 <__b2d>:
 800de90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de92:	6905      	ldr	r5, [r0, #16]
 800de94:	f100 0714 	add.w	r7, r0, #20
 800de98:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800de9c:	1f2e      	subs	r6, r5, #4
 800de9e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800dea2:	4620      	mov	r0, r4
 800dea4:	f7ff fd48 	bl	800d938 <__hi0bits>
 800dea8:	f1c0 0320 	rsb	r3, r0, #32
 800deac:	280a      	cmp	r0, #10
 800deae:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800df2c <__b2d+0x9c>
 800deb2:	600b      	str	r3, [r1, #0]
 800deb4:	dc14      	bgt.n	800dee0 <__b2d+0x50>
 800deb6:	f1c0 0e0b 	rsb	lr, r0, #11
 800deba:	fa24 f10e 	lsr.w	r1, r4, lr
 800debe:	42b7      	cmp	r7, r6
 800dec0:	ea41 030c 	orr.w	r3, r1, ip
 800dec4:	bf34      	ite	cc
 800dec6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800deca:	2100      	movcs	r1, #0
 800decc:	3015      	adds	r0, #21
 800dece:	fa04 f000 	lsl.w	r0, r4, r0
 800ded2:	fa21 f10e 	lsr.w	r1, r1, lr
 800ded6:	ea40 0201 	orr.w	r2, r0, r1
 800deda:	ec43 2b10 	vmov	d0, r2, r3
 800dede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dee0:	42b7      	cmp	r7, r6
 800dee2:	bf3a      	itte	cc
 800dee4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dee8:	f1a5 0608 	subcc.w	r6, r5, #8
 800deec:	2100      	movcs	r1, #0
 800deee:	380b      	subs	r0, #11
 800def0:	d017      	beq.n	800df22 <__b2d+0x92>
 800def2:	f1c0 0c20 	rsb	ip, r0, #32
 800def6:	fa04 f500 	lsl.w	r5, r4, r0
 800defa:	42be      	cmp	r6, r7
 800defc:	fa21 f40c 	lsr.w	r4, r1, ip
 800df00:	ea45 0504 	orr.w	r5, r5, r4
 800df04:	bf8c      	ite	hi
 800df06:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800df0a:	2400      	movls	r4, #0
 800df0c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800df10:	fa01 f000 	lsl.w	r0, r1, r0
 800df14:	fa24 f40c 	lsr.w	r4, r4, ip
 800df18:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800df1c:	ea40 0204 	orr.w	r2, r0, r4
 800df20:	e7db      	b.n	800deda <__b2d+0x4a>
 800df22:	ea44 030c 	orr.w	r3, r4, ip
 800df26:	460a      	mov	r2, r1
 800df28:	e7d7      	b.n	800deda <__b2d+0x4a>
 800df2a:	bf00      	nop
 800df2c:	3ff00000 	.word	0x3ff00000

0800df30 <__d2b>:
 800df30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800df34:	4689      	mov	r9, r1
 800df36:	2101      	movs	r1, #1
 800df38:	ec57 6b10 	vmov	r6, r7, d0
 800df3c:	4690      	mov	r8, r2
 800df3e:	f7ff fc09 	bl	800d754 <_Balloc>
 800df42:	4604      	mov	r4, r0
 800df44:	b930      	cbnz	r0, 800df54 <__d2b+0x24>
 800df46:	4602      	mov	r2, r0
 800df48:	4b25      	ldr	r3, [pc, #148]	; (800dfe0 <__d2b+0xb0>)
 800df4a:	4826      	ldr	r0, [pc, #152]	; (800dfe4 <__d2b+0xb4>)
 800df4c:	f240 310a 	movw	r1, #778	; 0x30a
 800df50:	f000 fc08 	bl	800e764 <__assert_func>
 800df54:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800df58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800df5c:	bb35      	cbnz	r5, 800dfac <__d2b+0x7c>
 800df5e:	2e00      	cmp	r6, #0
 800df60:	9301      	str	r3, [sp, #4]
 800df62:	d028      	beq.n	800dfb6 <__d2b+0x86>
 800df64:	4668      	mov	r0, sp
 800df66:	9600      	str	r6, [sp, #0]
 800df68:	f7ff fd06 	bl	800d978 <__lo0bits>
 800df6c:	9900      	ldr	r1, [sp, #0]
 800df6e:	b300      	cbz	r0, 800dfb2 <__d2b+0x82>
 800df70:	9a01      	ldr	r2, [sp, #4]
 800df72:	f1c0 0320 	rsb	r3, r0, #32
 800df76:	fa02 f303 	lsl.w	r3, r2, r3
 800df7a:	430b      	orrs	r3, r1
 800df7c:	40c2      	lsrs	r2, r0
 800df7e:	6163      	str	r3, [r4, #20]
 800df80:	9201      	str	r2, [sp, #4]
 800df82:	9b01      	ldr	r3, [sp, #4]
 800df84:	61a3      	str	r3, [r4, #24]
 800df86:	2b00      	cmp	r3, #0
 800df88:	bf14      	ite	ne
 800df8a:	2202      	movne	r2, #2
 800df8c:	2201      	moveq	r2, #1
 800df8e:	6122      	str	r2, [r4, #16]
 800df90:	b1d5      	cbz	r5, 800dfc8 <__d2b+0x98>
 800df92:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800df96:	4405      	add	r5, r0
 800df98:	f8c9 5000 	str.w	r5, [r9]
 800df9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dfa0:	f8c8 0000 	str.w	r0, [r8]
 800dfa4:	4620      	mov	r0, r4
 800dfa6:	b003      	add	sp, #12
 800dfa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dfac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dfb0:	e7d5      	b.n	800df5e <__d2b+0x2e>
 800dfb2:	6161      	str	r1, [r4, #20]
 800dfb4:	e7e5      	b.n	800df82 <__d2b+0x52>
 800dfb6:	a801      	add	r0, sp, #4
 800dfb8:	f7ff fcde 	bl	800d978 <__lo0bits>
 800dfbc:	9b01      	ldr	r3, [sp, #4]
 800dfbe:	6163      	str	r3, [r4, #20]
 800dfc0:	2201      	movs	r2, #1
 800dfc2:	6122      	str	r2, [r4, #16]
 800dfc4:	3020      	adds	r0, #32
 800dfc6:	e7e3      	b.n	800df90 <__d2b+0x60>
 800dfc8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dfcc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dfd0:	f8c9 0000 	str.w	r0, [r9]
 800dfd4:	6918      	ldr	r0, [r3, #16]
 800dfd6:	f7ff fcaf 	bl	800d938 <__hi0bits>
 800dfda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dfde:	e7df      	b.n	800dfa0 <__d2b+0x70>
 800dfe0:	0800ec80 	.word	0x0800ec80
 800dfe4:	0800ed70 	.word	0x0800ed70

0800dfe8 <__ratio>:
 800dfe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfec:	4688      	mov	r8, r1
 800dfee:	4669      	mov	r1, sp
 800dff0:	4681      	mov	r9, r0
 800dff2:	f7ff ff4d 	bl	800de90 <__b2d>
 800dff6:	a901      	add	r1, sp, #4
 800dff8:	4640      	mov	r0, r8
 800dffa:	ec55 4b10 	vmov	r4, r5, d0
 800dffe:	ee10 aa10 	vmov	sl, s0
 800e002:	f7ff ff45 	bl	800de90 <__b2d>
 800e006:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e00a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e00e:	1a59      	subs	r1, r3, r1
 800e010:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e014:	1ad3      	subs	r3, r2, r3
 800e016:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e01a:	ec57 6b10 	vmov	r6, r7, d0
 800e01e:	2b00      	cmp	r3, #0
 800e020:	bfd6      	itet	le
 800e022:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e026:	462a      	movgt	r2, r5
 800e028:	463a      	movle	r2, r7
 800e02a:	46ab      	mov	fp, r5
 800e02c:	bfd6      	itet	le
 800e02e:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800e032:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800e036:	ee00 3a90 	vmovle	s1, r3
 800e03a:	ec4b ab17 	vmov	d7, sl, fp
 800e03e:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800e042:	b003      	add	sp, #12
 800e044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e048 <__copybits>:
 800e048:	3901      	subs	r1, #1
 800e04a:	b570      	push	{r4, r5, r6, lr}
 800e04c:	1149      	asrs	r1, r1, #5
 800e04e:	6914      	ldr	r4, [r2, #16]
 800e050:	3101      	adds	r1, #1
 800e052:	f102 0314 	add.w	r3, r2, #20
 800e056:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e05a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e05e:	1f05      	subs	r5, r0, #4
 800e060:	42a3      	cmp	r3, r4
 800e062:	d30c      	bcc.n	800e07e <__copybits+0x36>
 800e064:	1aa3      	subs	r3, r4, r2
 800e066:	3b11      	subs	r3, #17
 800e068:	f023 0303 	bic.w	r3, r3, #3
 800e06c:	3211      	adds	r2, #17
 800e06e:	42a2      	cmp	r2, r4
 800e070:	bf88      	it	hi
 800e072:	2300      	movhi	r3, #0
 800e074:	4418      	add	r0, r3
 800e076:	2300      	movs	r3, #0
 800e078:	4288      	cmp	r0, r1
 800e07a:	d305      	bcc.n	800e088 <__copybits+0x40>
 800e07c:	bd70      	pop	{r4, r5, r6, pc}
 800e07e:	f853 6b04 	ldr.w	r6, [r3], #4
 800e082:	f845 6f04 	str.w	r6, [r5, #4]!
 800e086:	e7eb      	b.n	800e060 <__copybits+0x18>
 800e088:	f840 3b04 	str.w	r3, [r0], #4
 800e08c:	e7f4      	b.n	800e078 <__copybits+0x30>

0800e08e <__any_on>:
 800e08e:	f100 0214 	add.w	r2, r0, #20
 800e092:	6900      	ldr	r0, [r0, #16]
 800e094:	114b      	asrs	r3, r1, #5
 800e096:	4298      	cmp	r0, r3
 800e098:	b510      	push	{r4, lr}
 800e09a:	db11      	blt.n	800e0c0 <__any_on+0x32>
 800e09c:	dd0a      	ble.n	800e0b4 <__any_on+0x26>
 800e09e:	f011 011f 	ands.w	r1, r1, #31
 800e0a2:	d007      	beq.n	800e0b4 <__any_on+0x26>
 800e0a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e0a8:	fa24 f001 	lsr.w	r0, r4, r1
 800e0ac:	fa00 f101 	lsl.w	r1, r0, r1
 800e0b0:	428c      	cmp	r4, r1
 800e0b2:	d10b      	bne.n	800e0cc <__any_on+0x3e>
 800e0b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e0b8:	4293      	cmp	r3, r2
 800e0ba:	d803      	bhi.n	800e0c4 <__any_on+0x36>
 800e0bc:	2000      	movs	r0, #0
 800e0be:	bd10      	pop	{r4, pc}
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	e7f7      	b.n	800e0b4 <__any_on+0x26>
 800e0c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e0c8:	2900      	cmp	r1, #0
 800e0ca:	d0f5      	beq.n	800e0b8 <__any_on+0x2a>
 800e0cc:	2001      	movs	r0, #1
 800e0ce:	e7f6      	b.n	800e0be <__any_on+0x30>

0800e0d0 <_calloc_r>:
 800e0d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e0d2:	fba1 2402 	umull	r2, r4, r1, r2
 800e0d6:	b94c      	cbnz	r4, 800e0ec <_calloc_r+0x1c>
 800e0d8:	4611      	mov	r1, r2
 800e0da:	9201      	str	r2, [sp, #4]
 800e0dc:	f7fc f96c 	bl	800a3b8 <_malloc_r>
 800e0e0:	9a01      	ldr	r2, [sp, #4]
 800e0e2:	4605      	mov	r5, r0
 800e0e4:	b930      	cbnz	r0, 800e0f4 <_calloc_r+0x24>
 800e0e6:	4628      	mov	r0, r5
 800e0e8:	b003      	add	sp, #12
 800e0ea:	bd30      	pop	{r4, r5, pc}
 800e0ec:	220c      	movs	r2, #12
 800e0ee:	6002      	str	r2, [r0, #0]
 800e0f0:	2500      	movs	r5, #0
 800e0f2:	e7f8      	b.n	800e0e6 <_calloc_r+0x16>
 800e0f4:	4621      	mov	r1, r4
 800e0f6:	f7fc f8eb 	bl	800a2d0 <memset>
 800e0fa:	e7f4      	b.n	800e0e6 <_calloc_r+0x16>

0800e0fc <__ssputs_r>:
 800e0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e100:	688e      	ldr	r6, [r1, #8]
 800e102:	429e      	cmp	r6, r3
 800e104:	4682      	mov	sl, r0
 800e106:	460c      	mov	r4, r1
 800e108:	4690      	mov	r8, r2
 800e10a:	461f      	mov	r7, r3
 800e10c:	d838      	bhi.n	800e180 <__ssputs_r+0x84>
 800e10e:	898a      	ldrh	r2, [r1, #12]
 800e110:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e114:	d032      	beq.n	800e17c <__ssputs_r+0x80>
 800e116:	6825      	ldr	r5, [r4, #0]
 800e118:	6909      	ldr	r1, [r1, #16]
 800e11a:	eba5 0901 	sub.w	r9, r5, r1
 800e11e:	6965      	ldr	r5, [r4, #20]
 800e120:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e124:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e128:	3301      	adds	r3, #1
 800e12a:	444b      	add	r3, r9
 800e12c:	106d      	asrs	r5, r5, #1
 800e12e:	429d      	cmp	r5, r3
 800e130:	bf38      	it	cc
 800e132:	461d      	movcc	r5, r3
 800e134:	0553      	lsls	r3, r2, #21
 800e136:	d531      	bpl.n	800e19c <__ssputs_r+0xa0>
 800e138:	4629      	mov	r1, r5
 800e13a:	f7fc f93d 	bl	800a3b8 <_malloc_r>
 800e13e:	4606      	mov	r6, r0
 800e140:	b950      	cbnz	r0, 800e158 <__ssputs_r+0x5c>
 800e142:	230c      	movs	r3, #12
 800e144:	f8ca 3000 	str.w	r3, [sl]
 800e148:	89a3      	ldrh	r3, [r4, #12]
 800e14a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e14e:	81a3      	strh	r3, [r4, #12]
 800e150:	f04f 30ff 	mov.w	r0, #4294967295
 800e154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e158:	6921      	ldr	r1, [r4, #16]
 800e15a:	464a      	mov	r2, r9
 800e15c:	f7fc f8aa 	bl	800a2b4 <memcpy>
 800e160:	89a3      	ldrh	r3, [r4, #12]
 800e162:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e16a:	81a3      	strh	r3, [r4, #12]
 800e16c:	6126      	str	r6, [r4, #16]
 800e16e:	6165      	str	r5, [r4, #20]
 800e170:	444e      	add	r6, r9
 800e172:	eba5 0509 	sub.w	r5, r5, r9
 800e176:	6026      	str	r6, [r4, #0]
 800e178:	60a5      	str	r5, [r4, #8]
 800e17a:	463e      	mov	r6, r7
 800e17c:	42be      	cmp	r6, r7
 800e17e:	d900      	bls.n	800e182 <__ssputs_r+0x86>
 800e180:	463e      	mov	r6, r7
 800e182:	6820      	ldr	r0, [r4, #0]
 800e184:	4632      	mov	r2, r6
 800e186:	4641      	mov	r1, r8
 800e188:	f000 fb60 	bl	800e84c <memmove>
 800e18c:	68a3      	ldr	r3, [r4, #8]
 800e18e:	1b9b      	subs	r3, r3, r6
 800e190:	60a3      	str	r3, [r4, #8]
 800e192:	6823      	ldr	r3, [r4, #0]
 800e194:	4433      	add	r3, r6
 800e196:	6023      	str	r3, [r4, #0]
 800e198:	2000      	movs	r0, #0
 800e19a:	e7db      	b.n	800e154 <__ssputs_r+0x58>
 800e19c:	462a      	mov	r2, r5
 800e19e:	f000 fb6f 	bl	800e880 <_realloc_r>
 800e1a2:	4606      	mov	r6, r0
 800e1a4:	2800      	cmp	r0, #0
 800e1a6:	d1e1      	bne.n	800e16c <__ssputs_r+0x70>
 800e1a8:	6921      	ldr	r1, [r4, #16]
 800e1aa:	4650      	mov	r0, sl
 800e1ac:	f7fc f898 	bl	800a2e0 <_free_r>
 800e1b0:	e7c7      	b.n	800e142 <__ssputs_r+0x46>
	...

0800e1b4 <_svfiprintf_r>:
 800e1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1b8:	4698      	mov	r8, r3
 800e1ba:	898b      	ldrh	r3, [r1, #12]
 800e1bc:	061b      	lsls	r3, r3, #24
 800e1be:	b09d      	sub	sp, #116	; 0x74
 800e1c0:	4607      	mov	r7, r0
 800e1c2:	460d      	mov	r5, r1
 800e1c4:	4614      	mov	r4, r2
 800e1c6:	d50e      	bpl.n	800e1e6 <_svfiprintf_r+0x32>
 800e1c8:	690b      	ldr	r3, [r1, #16]
 800e1ca:	b963      	cbnz	r3, 800e1e6 <_svfiprintf_r+0x32>
 800e1cc:	2140      	movs	r1, #64	; 0x40
 800e1ce:	f7fc f8f3 	bl	800a3b8 <_malloc_r>
 800e1d2:	6028      	str	r0, [r5, #0]
 800e1d4:	6128      	str	r0, [r5, #16]
 800e1d6:	b920      	cbnz	r0, 800e1e2 <_svfiprintf_r+0x2e>
 800e1d8:	230c      	movs	r3, #12
 800e1da:	603b      	str	r3, [r7, #0]
 800e1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e1e0:	e0d1      	b.n	800e386 <_svfiprintf_r+0x1d2>
 800e1e2:	2340      	movs	r3, #64	; 0x40
 800e1e4:	616b      	str	r3, [r5, #20]
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	9309      	str	r3, [sp, #36]	; 0x24
 800e1ea:	2320      	movs	r3, #32
 800e1ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e1f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1f4:	2330      	movs	r3, #48	; 0x30
 800e1f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e3a0 <_svfiprintf_r+0x1ec>
 800e1fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e1fe:	f04f 0901 	mov.w	r9, #1
 800e202:	4623      	mov	r3, r4
 800e204:	469a      	mov	sl, r3
 800e206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e20a:	b10a      	cbz	r2, 800e210 <_svfiprintf_r+0x5c>
 800e20c:	2a25      	cmp	r2, #37	; 0x25
 800e20e:	d1f9      	bne.n	800e204 <_svfiprintf_r+0x50>
 800e210:	ebba 0b04 	subs.w	fp, sl, r4
 800e214:	d00b      	beq.n	800e22e <_svfiprintf_r+0x7a>
 800e216:	465b      	mov	r3, fp
 800e218:	4622      	mov	r2, r4
 800e21a:	4629      	mov	r1, r5
 800e21c:	4638      	mov	r0, r7
 800e21e:	f7ff ff6d 	bl	800e0fc <__ssputs_r>
 800e222:	3001      	adds	r0, #1
 800e224:	f000 80aa 	beq.w	800e37c <_svfiprintf_r+0x1c8>
 800e228:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e22a:	445a      	add	r2, fp
 800e22c:	9209      	str	r2, [sp, #36]	; 0x24
 800e22e:	f89a 3000 	ldrb.w	r3, [sl]
 800e232:	2b00      	cmp	r3, #0
 800e234:	f000 80a2 	beq.w	800e37c <_svfiprintf_r+0x1c8>
 800e238:	2300      	movs	r3, #0
 800e23a:	f04f 32ff 	mov.w	r2, #4294967295
 800e23e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e242:	f10a 0a01 	add.w	sl, sl, #1
 800e246:	9304      	str	r3, [sp, #16]
 800e248:	9307      	str	r3, [sp, #28]
 800e24a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e24e:	931a      	str	r3, [sp, #104]	; 0x68
 800e250:	4654      	mov	r4, sl
 800e252:	2205      	movs	r2, #5
 800e254:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e258:	4851      	ldr	r0, [pc, #324]	; (800e3a0 <_svfiprintf_r+0x1ec>)
 800e25a:	f7f1 fff9 	bl	8000250 <memchr>
 800e25e:	9a04      	ldr	r2, [sp, #16]
 800e260:	b9d8      	cbnz	r0, 800e29a <_svfiprintf_r+0xe6>
 800e262:	06d0      	lsls	r0, r2, #27
 800e264:	bf44      	itt	mi
 800e266:	2320      	movmi	r3, #32
 800e268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e26c:	0711      	lsls	r1, r2, #28
 800e26e:	bf44      	itt	mi
 800e270:	232b      	movmi	r3, #43	; 0x2b
 800e272:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e276:	f89a 3000 	ldrb.w	r3, [sl]
 800e27a:	2b2a      	cmp	r3, #42	; 0x2a
 800e27c:	d015      	beq.n	800e2aa <_svfiprintf_r+0xf6>
 800e27e:	9a07      	ldr	r2, [sp, #28]
 800e280:	4654      	mov	r4, sl
 800e282:	2000      	movs	r0, #0
 800e284:	f04f 0c0a 	mov.w	ip, #10
 800e288:	4621      	mov	r1, r4
 800e28a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e28e:	3b30      	subs	r3, #48	; 0x30
 800e290:	2b09      	cmp	r3, #9
 800e292:	d94e      	bls.n	800e332 <_svfiprintf_r+0x17e>
 800e294:	b1b0      	cbz	r0, 800e2c4 <_svfiprintf_r+0x110>
 800e296:	9207      	str	r2, [sp, #28]
 800e298:	e014      	b.n	800e2c4 <_svfiprintf_r+0x110>
 800e29a:	eba0 0308 	sub.w	r3, r0, r8
 800e29e:	fa09 f303 	lsl.w	r3, r9, r3
 800e2a2:	4313      	orrs	r3, r2
 800e2a4:	9304      	str	r3, [sp, #16]
 800e2a6:	46a2      	mov	sl, r4
 800e2a8:	e7d2      	b.n	800e250 <_svfiprintf_r+0x9c>
 800e2aa:	9b03      	ldr	r3, [sp, #12]
 800e2ac:	1d19      	adds	r1, r3, #4
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	9103      	str	r1, [sp, #12]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	bfbb      	ittet	lt
 800e2b6:	425b      	neglt	r3, r3
 800e2b8:	f042 0202 	orrlt.w	r2, r2, #2
 800e2bc:	9307      	strge	r3, [sp, #28]
 800e2be:	9307      	strlt	r3, [sp, #28]
 800e2c0:	bfb8      	it	lt
 800e2c2:	9204      	strlt	r2, [sp, #16]
 800e2c4:	7823      	ldrb	r3, [r4, #0]
 800e2c6:	2b2e      	cmp	r3, #46	; 0x2e
 800e2c8:	d10c      	bne.n	800e2e4 <_svfiprintf_r+0x130>
 800e2ca:	7863      	ldrb	r3, [r4, #1]
 800e2cc:	2b2a      	cmp	r3, #42	; 0x2a
 800e2ce:	d135      	bne.n	800e33c <_svfiprintf_r+0x188>
 800e2d0:	9b03      	ldr	r3, [sp, #12]
 800e2d2:	1d1a      	adds	r2, r3, #4
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	9203      	str	r2, [sp, #12]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	bfb8      	it	lt
 800e2dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800e2e0:	3402      	adds	r4, #2
 800e2e2:	9305      	str	r3, [sp, #20]
 800e2e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e3b0 <_svfiprintf_r+0x1fc>
 800e2e8:	7821      	ldrb	r1, [r4, #0]
 800e2ea:	2203      	movs	r2, #3
 800e2ec:	4650      	mov	r0, sl
 800e2ee:	f7f1 ffaf 	bl	8000250 <memchr>
 800e2f2:	b140      	cbz	r0, 800e306 <_svfiprintf_r+0x152>
 800e2f4:	2340      	movs	r3, #64	; 0x40
 800e2f6:	eba0 000a 	sub.w	r0, r0, sl
 800e2fa:	fa03 f000 	lsl.w	r0, r3, r0
 800e2fe:	9b04      	ldr	r3, [sp, #16]
 800e300:	4303      	orrs	r3, r0
 800e302:	3401      	adds	r4, #1
 800e304:	9304      	str	r3, [sp, #16]
 800e306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e30a:	4826      	ldr	r0, [pc, #152]	; (800e3a4 <_svfiprintf_r+0x1f0>)
 800e30c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e310:	2206      	movs	r2, #6
 800e312:	f7f1 ff9d 	bl	8000250 <memchr>
 800e316:	2800      	cmp	r0, #0
 800e318:	d038      	beq.n	800e38c <_svfiprintf_r+0x1d8>
 800e31a:	4b23      	ldr	r3, [pc, #140]	; (800e3a8 <_svfiprintf_r+0x1f4>)
 800e31c:	bb1b      	cbnz	r3, 800e366 <_svfiprintf_r+0x1b2>
 800e31e:	9b03      	ldr	r3, [sp, #12]
 800e320:	3307      	adds	r3, #7
 800e322:	f023 0307 	bic.w	r3, r3, #7
 800e326:	3308      	adds	r3, #8
 800e328:	9303      	str	r3, [sp, #12]
 800e32a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e32c:	4433      	add	r3, r6
 800e32e:	9309      	str	r3, [sp, #36]	; 0x24
 800e330:	e767      	b.n	800e202 <_svfiprintf_r+0x4e>
 800e332:	fb0c 3202 	mla	r2, ip, r2, r3
 800e336:	460c      	mov	r4, r1
 800e338:	2001      	movs	r0, #1
 800e33a:	e7a5      	b.n	800e288 <_svfiprintf_r+0xd4>
 800e33c:	2300      	movs	r3, #0
 800e33e:	3401      	adds	r4, #1
 800e340:	9305      	str	r3, [sp, #20]
 800e342:	4619      	mov	r1, r3
 800e344:	f04f 0c0a 	mov.w	ip, #10
 800e348:	4620      	mov	r0, r4
 800e34a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e34e:	3a30      	subs	r2, #48	; 0x30
 800e350:	2a09      	cmp	r2, #9
 800e352:	d903      	bls.n	800e35c <_svfiprintf_r+0x1a8>
 800e354:	2b00      	cmp	r3, #0
 800e356:	d0c5      	beq.n	800e2e4 <_svfiprintf_r+0x130>
 800e358:	9105      	str	r1, [sp, #20]
 800e35a:	e7c3      	b.n	800e2e4 <_svfiprintf_r+0x130>
 800e35c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e360:	4604      	mov	r4, r0
 800e362:	2301      	movs	r3, #1
 800e364:	e7f0      	b.n	800e348 <_svfiprintf_r+0x194>
 800e366:	ab03      	add	r3, sp, #12
 800e368:	9300      	str	r3, [sp, #0]
 800e36a:	462a      	mov	r2, r5
 800e36c:	4b0f      	ldr	r3, [pc, #60]	; (800e3ac <_svfiprintf_r+0x1f8>)
 800e36e:	a904      	add	r1, sp, #16
 800e370:	4638      	mov	r0, r7
 800e372:	f7fc f925 	bl	800a5c0 <_printf_float>
 800e376:	1c42      	adds	r2, r0, #1
 800e378:	4606      	mov	r6, r0
 800e37a:	d1d6      	bne.n	800e32a <_svfiprintf_r+0x176>
 800e37c:	89ab      	ldrh	r3, [r5, #12]
 800e37e:	065b      	lsls	r3, r3, #25
 800e380:	f53f af2c 	bmi.w	800e1dc <_svfiprintf_r+0x28>
 800e384:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e386:	b01d      	add	sp, #116	; 0x74
 800e388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e38c:	ab03      	add	r3, sp, #12
 800e38e:	9300      	str	r3, [sp, #0]
 800e390:	462a      	mov	r2, r5
 800e392:	4b06      	ldr	r3, [pc, #24]	; (800e3ac <_svfiprintf_r+0x1f8>)
 800e394:	a904      	add	r1, sp, #16
 800e396:	4638      	mov	r0, r7
 800e398:	f7fc fb9e 	bl	800aad8 <_printf_i>
 800e39c:	e7eb      	b.n	800e376 <_svfiprintf_r+0x1c2>
 800e39e:	bf00      	nop
 800e3a0:	0800eecc 	.word	0x0800eecc
 800e3a4:	0800eed6 	.word	0x0800eed6
 800e3a8:	0800a5c1 	.word	0x0800a5c1
 800e3ac:	0800e0fd 	.word	0x0800e0fd
 800e3b0:	0800eed2 	.word	0x0800eed2

0800e3b4 <__sfputc_r>:
 800e3b4:	6893      	ldr	r3, [r2, #8]
 800e3b6:	3b01      	subs	r3, #1
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	b410      	push	{r4}
 800e3bc:	6093      	str	r3, [r2, #8]
 800e3be:	da08      	bge.n	800e3d2 <__sfputc_r+0x1e>
 800e3c0:	6994      	ldr	r4, [r2, #24]
 800e3c2:	42a3      	cmp	r3, r4
 800e3c4:	db01      	blt.n	800e3ca <__sfputc_r+0x16>
 800e3c6:	290a      	cmp	r1, #10
 800e3c8:	d103      	bne.n	800e3d2 <__sfputc_r+0x1e>
 800e3ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3ce:	f7fd bd57 	b.w	800be80 <__swbuf_r>
 800e3d2:	6813      	ldr	r3, [r2, #0]
 800e3d4:	1c58      	adds	r0, r3, #1
 800e3d6:	6010      	str	r0, [r2, #0]
 800e3d8:	7019      	strb	r1, [r3, #0]
 800e3da:	4608      	mov	r0, r1
 800e3dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3e0:	4770      	bx	lr

0800e3e2 <__sfputs_r>:
 800e3e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3e4:	4606      	mov	r6, r0
 800e3e6:	460f      	mov	r7, r1
 800e3e8:	4614      	mov	r4, r2
 800e3ea:	18d5      	adds	r5, r2, r3
 800e3ec:	42ac      	cmp	r4, r5
 800e3ee:	d101      	bne.n	800e3f4 <__sfputs_r+0x12>
 800e3f0:	2000      	movs	r0, #0
 800e3f2:	e007      	b.n	800e404 <__sfputs_r+0x22>
 800e3f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3f8:	463a      	mov	r2, r7
 800e3fa:	4630      	mov	r0, r6
 800e3fc:	f7ff ffda 	bl	800e3b4 <__sfputc_r>
 800e400:	1c43      	adds	r3, r0, #1
 800e402:	d1f3      	bne.n	800e3ec <__sfputs_r+0xa>
 800e404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e408 <_vfiprintf_r>:
 800e408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e40c:	460d      	mov	r5, r1
 800e40e:	b09d      	sub	sp, #116	; 0x74
 800e410:	4614      	mov	r4, r2
 800e412:	4698      	mov	r8, r3
 800e414:	4606      	mov	r6, r0
 800e416:	b118      	cbz	r0, 800e420 <_vfiprintf_r+0x18>
 800e418:	6983      	ldr	r3, [r0, #24]
 800e41a:	b90b      	cbnz	r3, 800e420 <_vfiprintf_r+0x18>
 800e41c:	f7fe fd04 	bl	800ce28 <__sinit>
 800e420:	4b89      	ldr	r3, [pc, #548]	; (800e648 <_vfiprintf_r+0x240>)
 800e422:	429d      	cmp	r5, r3
 800e424:	d11b      	bne.n	800e45e <_vfiprintf_r+0x56>
 800e426:	6875      	ldr	r5, [r6, #4]
 800e428:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e42a:	07d9      	lsls	r1, r3, #31
 800e42c:	d405      	bmi.n	800e43a <_vfiprintf_r+0x32>
 800e42e:	89ab      	ldrh	r3, [r5, #12]
 800e430:	059a      	lsls	r2, r3, #22
 800e432:	d402      	bmi.n	800e43a <_vfiprintf_r+0x32>
 800e434:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e436:	f7ff f908 	bl	800d64a <__retarget_lock_acquire_recursive>
 800e43a:	89ab      	ldrh	r3, [r5, #12]
 800e43c:	071b      	lsls	r3, r3, #28
 800e43e:	d501      	bpl.n	800e444 <_vfiprintf_r+0x3c>
 800e440:	692b      	ldr	r3, [r5, #16]
 800e442:	b9eb      	cbnz	r3, 800e480 <_vfiprintf_r+0x78>
 800e444:	4629      	mov	r1, r5
 800e446:	4630      	mov	r0, r6
 800e448:	f7fd fd6c 	bl	800bf24 <__swsetup_r>
 800e44c:	b1c0      	cbz	r0, 800e480 <_vfiprintf_r+0x78>
 800e44e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e450:	07dc      	lsls	r4, r3, #31
 800e452:	d50e      	bpl.n	800e472 <_vfiprintf_r+0x6a>
 800e454:	f04f 30ff 	mov.w	r0, #4294967295
 800e458:	b01d      	add	sp, #116	; 0x74
 800e45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e45e:	4b7b      	ldr	r3, [pc, #492]	; (800e64c <_vfiprintf_r+0x244>)
 800e460:	429d      	cmp	r5, r3
 800e462:	d101      	bne.n	800e468 <_vfiprintf_r+0x60>
 800e464:	68b5      	ldr	r5, [r6, #8]
 800e466:	e7df      	b.n	800e428 <_vfiprintf_r+0x20>
 800e468:	4b79      	ldr	r3, [pc, #484]	; (800e650 <_vfiprintf_r+0x248>)
 800e46a:	429d      	cmp	r5, r3
 800e46c:	bf08      	it	eq
 800e46e:	68f5      	ldreq	r5, [r6, #12]
 800e470:	e7da      	b.n	800e428 <_vfiprintf_r+0x20>
 800e472:	89ab      	ldrh	r3, [r5, #12]
 800e474:	0598      	lsls	r0, r3, #22
 800e476:	d4ed      	bmi.n	800e454 <_vfiprintf_r+0x4c>
 800e478:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e47a:	f7ff f8e7 	bl	800d64c <__retarget_lock_release_recursive>
 800e47e:	e7e9      	b.n	800e454 <_vfiprintf_r+0x4c>
 800e480:	2300      	movs	r3, #0
 800e482:	9309      	str	r3, [sp, #36]	; 0x24
 800e484:	2320      	movs	r3, #32
 800e486:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e48a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e48e:	2330      	movs	r3, #48	; 0x30
 800e490:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e654 <_vfiprintf_r+0x24c>
 800e494:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e498:	f04f 0901 	mov.w	r9, #1
 800e49c:	4623      	mov	r3, r4
 800e49e:	469a      	mov	sl, r3
 800e4a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4a4:	b10a      	cbz	r2, 800e4aa <_vfiprintf_r+0xa2>
 800e4a6:	2a25      	cmp	r2, #37	; 0x25
 800e4a8:	d1f9      	bne.n	800e49e <_vfiprintf_r+0x96>
 800e4aa:	ebba 0b04 	subs.w	fp, sl, r4
 800e4ae:	d00b      	beq.n	800e4c8 <_vfiprintf_r+0xc0>
 800e4b0:	465b      	mov	r3, fp
 800e4b2:	4622      	mov	r2, r4
 800e4b4:	4629      	mov	r1, r5
 800e4b6:	4630      	mov	r0, r6
 800e4b8:	f7ff ff93 	bl	800e3e2 <__sfputs_r>
 800e4bc:	3001      	adds	r0, #1
 800e4be:	f000 80aa 	beq.w	800e616 <_vfiprintf_r+0x20e>
 800e4c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e4c4:	445a      	add	r2, fp
 800e4c6:	9209      	str	r2, [sp, #36]	; 0x24
 800e4c8:	f89a 3000 	ldrb.w	r3, [sl]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	f000 80a2 	beq.w	800e616 <_vfiprintf_r+0x20e>
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	f04f 32ff 	mov.w	r2, #4294967295
 800e4d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4dc:	f10a 0a01 	add.w	sl, sl, #1
 800e4e0:	9304      	str	r3, [sp, #16]
 800e4e2:	9307      	str	r3, [sp, #28]
 800e4e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e4e8:	931a      	str	r3, [sp, #104]	; 0x68
 800e4ea:	4654      	mov	r4, sl
 800e4ec:	2205      	movs	r2, #5
 800e4ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4f2:	4858      	ldr	r0, [pc, #352]	; (800e654 <_vfiprintf_r+0x24c>)
 800e4f4:	f7f1 feac 	bl	8000250 <memchr>
 800e4f8:	9a04      	ldr	r2, [sp, #16]
 800e4fa:	b9d8      	cbnz	r0, 800e534 <_vfiprintf_r+0x12c>
 800e4fc:	06d1      	lsls	r1, r2, #27
 800e4fe:	bf44      	itt	mi
 800e500:	2320      	movmi	r3, #32
 800e502:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e506:	0713      	lsls	r3, r2, #28
 800e508:	bf44      	itt	mi
 800e50a:	232b      	movmi	r3, #43	; 0x2b
 800e50c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e510:	f89a 3000 	ldrb.w	r3, [sl]
 800e514:	2b2a      	cmp	r3, #42	; 0x2a
 800e516:	d015      	beq.n	800e544 <_vfiprintf_r+0x13c>
 800e518:	9a07      	ldr	r2, [sp, #28]
 800e51a:	4654      	mov	r4, sl
 800e51c:	2000      	movs	r0, #0
 800e51e:	f04f 0c0a 	mov.w	ip, #10
 800e522:	4621      	mov	r1, r4
 800e524:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e528:	3b30      	subs	r3, #48	; 0x30
 800e52a:	2b09      	cmp	r3, #9
 800e52c:	d94e      	bls.n	800e5cc <_vfiprintf_r+0x1c4>
 800e52e:	b1b0      	cbz	r0, 800e55e <_vfiprintf_r+0x156>
 800e530:	9207      	str	r2, [sp, #28]
 800e532:	e014      	b.n	800e55e <_vfiprintf_r+0x156>
 800e534:	eba0 0308 	sub.w	r3, r0, r8
 800e538:	fa09 f303 	lsl.w	r3, r9, r3
 800e53c:	4313      	orrs	r3, r2
 800e53e:	9304      	str	r3, [sp, #16]
 800e540:	46a2      	mov	sl, r4
 800e542:	e7d2      	b.n	800e4ea <_vfiprintf_r+0xe2>
 800e544:	9b03      	ldr	r3, [sp, #12]
 800e546:	1d19      	adds	r1, r3, #4
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	9103      	str	r1, [sp, #12]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	bfbb      	ittet	lt
 800e550:	425b      	neglt	r3, r3
 800e552:	f042 0202 	orrlt.w	r2, r2, #2
 800e556:	9307      	strge	r3, [sp, #28]
 800e558:	9307      	strlt	r3, [sp, #28]
 800e55a:	bfb8      	it	lt
 800e55c:	9204      	strlt	r2, [sp, #16]
 800e55e:	7823      	ldrb	r3, [r4, #0]
 800e560:	2b2e      	cmp	r3, #46	; 0x2e
 800e562:	d10c      	bne.n	800e57e <_vfiprintf_r+0x176>
 800e564:	7863      	ldrb	r3, [r4, #1]
 800e566:	2b2a      	cmp	r3, #42	; 0x2a
 800e568:	d135      	bne.n	800e5d6 <_vfiprintf_r+0x1ce>
 800e56a:	9b03      	ldr	r3, [sp, #12]
 800e56c:	1d1a      	adds	r2, r3, #4
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	9203      	str	r2, [sp, #12]
 800e572:	2b00      	cmp	r3, #0
 800e574:	bfb8      	it	lt
 800e576:	f04f 33ff 	movlt.w	r3, #4294967295
 800e57a:	3402      	adds	r4, #2
 800e57c:	9305      	str	r3, [sp, #20]
 800e57e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e664 <_vfiprintf_r+0x25c>
 800e582:	7821      	ldrb	r1, [r4, #0]
 800e584:	2203      	movs	r2, #3
 800e586:	4650      	mov	r0, sl
 800e588:	f7f1 fe62 	bl	8000250 <memchr>
 800e58c:	b140      	cbz	r0, 800e5a0 <_vfiprintf_r+0x198>
 800e58e:	2340      	movs	r3, #64	; 0x40
 800e590:	eba0 000a 	sub.w	r0, r0, sl
 800e594:	fa03 f000 	lsl.w	r0, r3, r0
 800e598:	9b04      	ldr	r3, [sp, #16]
 800e59a:	4303      	orrs	r3, r0
 800e59c:	3401      	adds	r4, #1
 800e59e:	9304      	str	r3, [sp, #16]
 800e5a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5a4:	482c      	ldr	r0, [pc, #176]	; (800e658 <_vfiprintf_r+0x250>)
 800e5a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e5aa:	2206      	movs	r2, #6
 800e5ac:	f7f1 fe50 	bl	8000250 <memchr>
 800e5b0:	2800      	cmp	r0, #0
 800e5b2:	d03f      	beq.n	800e634 <_vfiprintf_r+0x22c>
 800e5b4:	4b29      	ldr	r3, [pc, #164]	; (800e65c <_vfiprintf_r+0x254>)
 800e5b6:	bb1b      	cbnz	r3, 800e600 <_vfiprintf_r+0x1f8>
 800e5b8:	9b03      	ldr	r3, [sp, #12]
 800e5ba:	3307      	adds	r3, #7
 800e5bc:	f023 0307 	bic.w	r3, r3, #7
 800e5c0:	3308      	adds	r3, #8
 800e5c2:	9303      	str	r3, [sp, #12]
 800e5c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5c6:	443b      	add	r3, r7
 800e5c8:	9309      	str	r3, [sp, #36]	; 0x24
 800e5ca:	e767      	b.n	800e49c <_vfiprintf_r+0x94>
 800e5cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5d0:	460c      	mov	r4, r1
 800e5d2:	2001      	movs	r0, #1
 800e5d4:	e7a5      	b.n	800e522 <_vfiprintf_r+0x11a>
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	3401      	adds	r4, #1
 800e5da:	9305      	str	r3, [sp, #20]
 800e5dc:	4619      	mov	r1, r3
 800e5de:	f04f 0c0a 	mov.w	ip, #10
 800e5e2:	4620      	mov	r0, r4
 800e5e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5e8:	3a30      	subs	r2, #48	; 0x30
 800e5ea:	2a09      	cmp	r2, #9
 800e5ec:	d903      	bls.n	800e5f6 <_vfiprintf_r+0x1ee>
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d0c5      	beq.n	800e57e <_vfiprintf_r+0x176>
 800e5f2:	9105      	str	r1, [sp, #20]
 800e5f4:	e7c3      	b.n	800e57e <_vfiprintf_r+0x176>
 800e5f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5fa:	4604      	mov	r4, r0
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	e7f0      	b.n	800e5e2 <_vfiprintf_r+0x1da>
 800e600:	ab03      	add	r3, sp, #12
 800e602:	9300      	str	r3, [sp, #0]
 800e604:	462a      	mov	r2, r5
 800e606:	4b16      	ldr	r3, [pc, #88]	; (800e660 <_vfiprintf_r+0x258>)
 800e608:	a904      	add	r1, sp, #16
 800e60a:	4630      	mov	r0, r6
 800e60c:	f7fb ffd8 	bl	800a5c0 <_printf_float>
 800e610:	4607      	mov	r7, r0
 800e612:	1c78      	adds	r0, r7, #1
 800e614:	d1d6      	bne.n	800e5c4 <_vfiprintf_r+0x1bc>
 800e616:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e618:	07d9      	lsls	r1, r3, #31
 800e61a:	d405      	bmi.n	800e628 <_vfiprintf_r+0x220>
 800e61c:	89ab      	ldrh	r3, [r5, #12]
 800e61e:	059a      	lsls	r2, r3, #22
 800e620:	d402      	bmi.n	800e628 <_vfiprintf_r+0x220>
 800e622:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e624:	f7ff f812 	bl	800d64c <__retarget_lock_release_recursive>
 800e628:	89ab      	ldrh	r3, [r5, #12]
 800e62a:	065b      	lsls	r3, r3, #25
 800e62c:	f53f af12 	bmi.w	800e454 <_vfiprintf_r+0x4c>
 800e630:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e632:	e711      	b.n	800e458 <_vfiprintf_r+0x50>
 800e634:	ab03      	add	r3, sp, #12
 800e636:	9300      	str	r3, [sp, #0]
 800e638:	462a      	mov	r2, r5
 800e63a:	4b09      	ldr	r3, [pc, #36]	; (800e660 <_vfiprintf_r+0x258>)
 800e63c:	a904      	add	r1, sp, #16
 800e63e:	4630      	mov	r0, r6
 800e640:	f7fc fa4a 	bl	800aad8 <_printf_i>
 800e644:	e7e4      	b.n	800e610 <_vfiprintf_r+0x208>
 800e646:	bf00      	nop
 800e648:	0800ecb4 	.word	0x0800ecb4
 800e64c:	0800ecd4 	.word	0x0800ecd4
 800e650:	0800ec94 	.word	0x0800ec94
 800e654:	0800eecc 	.word	0x0800eecc
 800e658:	0800eed6 	.word	0x0800eed6
 800e65c:	0800a5c1 	.word	0x0800a5c1
 800e660:	0800e3e3 	.word	0x0800e3e3
 800e664:	0800eed2 	.word	0x0800eed2

0800e668 <nan>:
 800e668:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e670 <nan+0x8>
 800e66c:	4770      	bx	lr
 800e66e:	bf00      	nop
 800e670:	00000000 	.word	0x00000000
 800e674:	7ff80000 	.word	0x7ff80000

0800e678 <__sread>:
 800e678:	b510      	push	{r4, lr}
 800e67a:	460c      	mov	r4, r1
 800e67c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e680:	f000 f92e 	bl	800e8e0 <_read_r>
 800e684:	2800      	cmp	r0, #0
 800e686:	bfab      	itete	ge
 800e688:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e68a:	89a3      	ldrhlt	r3, [r4, #12]
 800e68c:	181b      	addge	r3, r3, r0
 800e68e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e692:	bfac      	ite	ge
 800e694:	6563      	strge	r3, [r4, #84]	; 0x54
 800e696:	81a3      	strhlt	r3, [r4, #12]
 800e698:	bd10      	pop	{r4, pc}

0800e69a <__swrite>:
 800e69a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e69e:	461f      	mov	r7, r3
 800e6a0:	898b      	ldrh	r3, [r1, #12]
 800e6a2:	05db      	lsls	r3, r3, #23
 800e6a4:	4605      	mov	r5, r0
 800e6a6:	460c      	mov	r4, r1
 800e6a8:	4616      	mov	r6, r2
 800e6aa:	d505      	bpl.n	800e6b8 <__swrite+0x1e>
 800e6ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6b0:	2302      	movs	r3, #2
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	f000 f8b8 	bl	800e828 <_lseek_r>
 800e6b8:	89a3      	ldrh	r3, [r4, #12]
 800e6ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e6be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e6c2:	81a3      	strh	r3, [r4, #12]
 800e6c4:	4632      	mov	r2, r6
 800e6c6:	463b      	mov	r3, r7
 800e6c8:	4628      	mov	r0, r5
 800e6ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6ce:	f000 b837 	b.w	800e740 <_write_r>

0800e6d2 <__sseek>:
 800e6d2:	b510      	push	{r4, lr}
 800e6d4:	460c      	mov	r4, r1
 800e6d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6da:	f000 f8a5 	bl	800e828 <_lseek_r>
 800e6de:	1c43      	adds	r3, r0, #1
 800e6e0:	89a3      	ldrh	r3, [r4, #12]
 800e6e2:	bf15      	itete	ne
 800e6e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e6e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e6ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e6ee:	81a3      	strheq	r3, [r4, #12]
 800e6f0:	bf18      	it	ne
 800e6f2:	81a3      	strhne	r3, [r4, #12]
 800e6f4:	bd10      	pop	{r4, pc}

0800e6f6 <__sclose>:
 800e6f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6fa:	f000 b851 	b.w	800e7a0 <_close_r>

0800e6fe <strncmp>:
 800e6fe:	b510      	push	{r4, lr}
 800e700:	b17a      	cbz	r2, 800e722 <strncmp+0x24>
 800e702:	4603      	mov	r3, r0
 800e704:	3901      	subs	r1, #1
 800e706:	1884      	adds	r4, r0, r2
 800e708:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e70c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e710:	4290      	cmp	r0, r2
 800e712:	d101      	bne.n	800e718 <strncmp+0x1a>
 800e714:	42a3      	cmp	r3, r4
 800e716:	d101      	bne.n	800e71c <strncmp+0x1e>
 800e718:	1a80      	subs	r0, r0, r2
 800e71a:	bd10      	pop	{r4, pc}
 800e71c:	2800      	cmp	r0, #0
 800e71e:	d1f3      	bne.n	800e708 <strncmp+0xa>
 800e720:	e7fa      	b.n	800e718 <strncmp+0x1a>
 800e722:	4610      	mov	r0, r2
 800e724:	e7f9      	b.n	800e71a <strncmp+0x1c>

0800e726 <__ascii_wctomb>:
 800e726:	b149      	cbz	r1, 800e73c <__ascii_wctomb+0x16>
 800e728:	2aff      	cmp	r2, #255	; 0xff
 800e72a:	bf85      	ittet	hi
 800e72c:	238a      	movhi	r3, #138	; 0x8a
 800e72e:	6003      	strhi	r3, [r0, #0]
 800e730:	700a      	strbls	r2, [r1, #0]
 800e732:	f04f 30ff 	movhi.w	r0, #4294967295
 800e736:	bf98      	it	ls
 800e738:	2001      	movls	r0, #1
 800e73a:	4770      	bx	lr
 800e73c:	4608      	mov	r0, r1
 800e73e:	4770      	bx	lr

0800e740 <_write_r>:
 800e740:	b538      	push	{r3, r4, r5, lr}
 800e742:	4d07      	ldr	r5, [pc, #28]	; (800e760 <_write_r+0x20>)
 800e744:	4604      	mov	r4, r0
 800e746:	4608      	mov	r0, r1
 800e748:	4611      	mov	r1, r2
 800e74a:	2200      	movs	r2, #0
 800e74c:	602a      	str	r2, [r5, #0]
 800e74e:	461a      	mov	r2, r3
 800e750:	f7f3 fcb1 	bl	80020b6 <_write>
 800e754:	1c43      	adds	r3, r0, #1
 800e756:	d102      	bne.n	800e75e <_write_r+0x1e>
 800e758:	682b      	ldr	r3, [r5, #0]
 800e75a:	b103      	cbz	r3, 800e75e <_write_r+0x1e>
 800e75c:	6023      	str	r3, [r4, #0]
 800e75e:	bd38      	pop	{r3, r4, r5, pc}
 800e760:	200027a0 	.word	0x200027a0

0800e764 <__assert_func>:
 800e764:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e766:	4614      	mov	r4, r2
 800e768:	461a      	mov	r2, r3
 800e76a:	4b09      	ldr	r3, [pc, #36]	; (800e790 <__assert_func+0x2c>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	4605      	mov	r5, r0
 800e770:	68d8      	ldr	r0, [r3, #12]
 800e772:	b14c      	cbz	r4, 800e788 <__assert_func+0x24>
 800e774:	4b07      	ldr	r3, [pc, #28]	; (800e794 <__assert_func+0x30>)
 800e776:	9100      	str	r1, [sp, #0]
 800e778:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e77c:	4906      	ldr	r1, [pc, #24]	; (800e798 <__assert_func+0x34>)
 800e77e:	462b      	mov	r3, r5
 800e780:	f000 f81e 	bl	800e7c0 <fiprintf>
 800e784:	f000 f8be 	bl	800e904 <abort>
 800e788:	4b04      	ldr	r3, [pc, #16]	; (800e79c <__assert_func+0x38>)
 800e78a:	461c      	mov	r4, r3
 800e78c:	e7f3      	b.n	800e776 <__assert_func+0x12>
 800e78e:	bf00      	nop
 800e790:	2000000c 	.word	0x2000000c
 800e794:	0800eedd 	.word	0x0800eedd
 800e798:	0800eeea 	.word	0x0800eeea
 800e79c:	0800ef18 	.word	0x0800ef18

0800e7a0 <_close_r>:
 800e7a0:	b538      	push	{r3, r4, r5, lr}
 800e7a2:	4d06      	ldr	r5, [pc, #24]	; (800e7bc <_close_r+0x1c>)
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	4604      	mov	r4, r0
 800e7a8:	4608      	mov	r0, r1
 800e7aa:	602b      	str	r3, [r5, #0]
 800e7ac:	f7f3 fc9f 	bl	80020ee <_close>
 800e7b0:	1c43      	adds	r3, r0, #1
 800e7b2:	d102      	bne.n	800e7ba <_close_r+0x1a>
 800e7b4:	682b      	ldr	r3, [r5, #0]
 800e7b6:	b103      	cbz	r3, 800e7ba <_close_r+0x1a>
 800e7b8:	6023      	str	r3, [r4, #0]
 800e7ba:	bd38      	pop	{r3, r4, r5, pc}
 800e7bc:	200027a0 	.word	0x200027a0

0800e7c0 <fiprintf>:
 800e7c0:	b40e      	push	{r1, r2, r3}
 800e7c2:	b503      	push	{r0, r1, lr}
 800e7c4:	4601      	mov	r1, r0
 800e7c6:	ab03      	add	r3, sp, #12
 800e7c8:	4805      	ldr	r0, [pc, #20]	; (800e7e0 <fiprintf+0x20>)
 800e7ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7ce:	6800      	ldr	r0, [r0, #0]
 800e7d0:	9301      	str	r3, [sp, #4]
 800e7d2:	f7ff fe19 	bl	800e408 <_vfiprintf_r>
 800e7d6:	b002      	add	sp, #8
 800e7d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7dc:	b003      	add	sp, #12
 800e7de:	4770      	bx	lr
 800e7e0:	2000000c 	.word	0x2000000c

0800e7e4 <_fstat_r>:
 800e7e4:	b538      	push	{r3, r4, r5, lr}
 800e7e6:	4d07      	ldr	r5, [pc, #28]	; (800e804 <_fstat_r+0x20>)
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	4604      	mov	r4, r0
 800e7ec:	4608      	mov	r0, r1
 800e7ee:	4611      	mov	r1, r2
 800e7f0:	602b      	str	r3, [r5, #0]
 800e7f2:	f7f3 fc88 	bl	8002106 <_fstat>
 800e7f6:	1c43      	adds	r3, r0, #1
 800e7f8:	d102      	bne.n	800e800 <_fstat_r+0x1c>
 800e7fa:	682b      	ldr	r3, [r5, #0]
 800e7fc:	b103      	cbz	r3, 800e800 <_fstat_r+0x1c>
 800e7fe:	6023      	str	r3, [r4, #0]
 800e800:	bd38      	pop	{r3, r4, r5, pc}
 800e802:	bf00      	nop
 800e804:	200027a0 	.word	0x200027a0

0800e808 <_isatty_r>:
 800e808:	b538      	push	{r3, r4, r5, lr}
 800e80a:	4d06      	ldr	r5, [pc, #24]	; (800e824 <_isatty_r+0x1c>)
 800e80c:	2300      	movs	r3, #0
 800e80e:	4604      	mov	r4, r0
 800e810:	4608      	mov	r0, r1
 800e812:	602b      	str	r3, [r5, #0]
 800e814:	f7f3 fc87 	bl	8002126 <_isatty>
 800e818:	1c43      	adds	r3, r0, #1
 800e81a:	d102      	bne.n	800e822 <_isatty_r+0x1a>
 800e81c:	682b      	ldr	r3, [r5, #0]
 800e81e:	b103      	cbz	r3, 800e822 <_isatty_r+0x1a>
 800e820:	6023      	str	r3, [r4, #0]
 800e822:	bd38      	pop	{r3, r4, r5, pc}
 800e824:	200027a0 	.word	0x200027a0

0800e828 <_lseek_r>:
 800e828:	b538      	push	{r3, r4, r5, lr}
 800e82a:	4d07      	ldr	r5, [pc, #28]	; (800e848 <_lseek_r+0x20>)
 800e82c:	4604      	mov	r4, r0
 800e82e:	4608      	mov	r0, r1
 800e830:	4611      	mov	r1, r2
 800e832:	2200      	movs	r2, #0
 800e834:	602a      	str	r2, [r5, #0]
 800e836:	461a      	mov	r2, r3
 800e838:	f7f3 fc80 	bl	800213c <_lseek>
 800e83c:	1c43      	adds	r3, r0, #1
 800e83e:	d102      	bne.n	800e846 <_lseek_r+0x1e>
 800e840:	682b      	ldr	r3, [r5, #0]
 800e842:	b103      	cbz	r3, 800e846 <_lseek_r+0x1e>
 800e844:	6023      	str	r3, [r4, #0]
 800e846:	bd38      	pop	{r3, r4, r5, pc}
 800e848:	200027a0 	.word	0x200027a0

0800e84c <memmove>:
 800e84c:	4288      	cmp	r0, r1
 800e84e:	b510      	push	{r4, lr}
 800e850:	eb01 0402 	add.w	r4, r1, r2
 800e854:	d902      	bls.n	800e85c <memmove+0x10>
 800e856:	4284      	cmp	r4, r0
 800e858:	4623      	mov	r3, r4
 800e85a:	d807      	bhi.n	800e86c <memmove+0x20>
 800e85c:	1e43      	subs	r3, r0, #1
 800e85e:	42a1      	cmp	r1, r4
 800e860:	d008      	beq.n	800e874 <memmove+0x28>
 800e862:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e866:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e86a:	e7f8      	b.n	800e85e <memmove+0x12>
 800e86c:	4402      	add	r2, r0
 800e86e:	4601      	mov	r1, r0
 800e870:	428a      	cmp	r2, r1
 800e872:	d100      	bne.n	800e876 <memmove+0x2a>
 800e874:	bd10      	pop	{r4, pc}
 800e876:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e87a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e87e:	e7f7      	b.n	800e870 <memmove+0x24>

0800e880 <_realloc_r>:
 800e880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e884:	4680      	mov	r8, r0
 800e886:	4614      	mov	r4, r2
 800e888:	460e      	mov	r6, r1
 800e88a:	b921      	cbnz	r1, 800e896 <_realloc_r+0x16>
 800e88c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e890:	4611      	mov	r1, r2
 800e892:	f7fb bd91 	b.w	800a3b8 <_malloc_r>
 800e896:	b92a      	cbnz	r2, 800e8a4 <_realloc_r+0x24>
 800e898:	f7fb fd22 	bl	800a2e0 <_free_r>
 800e89c:	4625      	mov	r5, r4
 800e89e:	4628      	mov	r0, r5
 800e8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8a4:	f000 f835 	bl	800e912 <_malloc_usable_size_r>
 800e8a8:	4284      	cmp	r4, r0
 800e8aa:	4607      	mov	r7, r0
 800e8ac:	d802      	bhi.n	800e8b4 <_realloc_r+0x34>
 800e8ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e8b2:	d812      	bhi.n	800e8da <_realloc_r+0x5a>
 800e8b4:	4621      	mov	r1, r4
 800e8b6:	4640      	mov	r0, r8
 800e8b8:	f7fb fd7e 	bl	800a3b8 <_malloc_r>
 800e8bc:	4605      	mov	r5, r0
 800e8be:	2800      	cmp	r0, #0
 800e8c0:	d0ed      	beq.n	800e89e <_realloc_r+0x1e>
 800e8c2:	42bc      	cmp	r4, r7
 800e8c4:	4622      	mov	r2, r4
 800e8c6:	4631      	mov	r1, r6
 800e8c8:	bf28      	it	cs
 800e8ca:	463a      	movcs	r2, r7
 800e8cc:	f7fb fcf2 	bl	800a2b4 <memcpy>
 800e8d0:	4631      	mov	r1, r6
 800e8d2:	4640      	mov	r0, r8
 800e8d4:	f7fb fd04 	bl	800a2e0 <_free_r>
 800e8d8:	e7e1      	b.n	800e89e <_realloc_r+0x1e>
 800e8da:	4635      	mov	r5, r6
 800e8dc:	e7df      	b.n	800e89e <_realloc_r+0x1e>
	...

0800e8e0 <_read_r>:
 800e8e0:	b538      	push	{r3, r4, r5, lr}
 800e8e2:	4d07      	ldr	r5, [pc, #28]	; (800e900 <_read_r+0x20>)
 800e8e4:	4604      	mov	r4, r0
 800e8e6:	4608      	mov	r0, r1
 800e8e8:	4611      	mov	r1, r2
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	602a      	str	r2, [r5, #0]
 800e8ee:	461a      	mov	r2, r3
 800e8f0:	f7f3 fbc4 	bl	800207c <_read>
 800e8f4:	1c43      	adds	r3, r0, #1
 800e8f6:	d102      	bne.n	800e8fe <_read_r+0x1e>
 800e8f8:	682b      	ldr	r3, [r5, #0]
 800e8fa:	b103      	cbz	r3, 800e8fe <_read_r+0x1e>
 800e8fc:	6023      	str	r3, [r4, #0]
 800e8fe:	bd38      	pop	{r3, r4, r5, pc}
 800e900:	200027a0 	.word	0x200027a0

0800e904 <abort>:
 800e904:	b508      	push	{r3, lr}
 800e906:	2006      	movs	r0, #6
 800e908:	f000 f834 	bl	800e974 <raise>
 800e90c:	2001      	movs	r0, #1
 800e90e:	f7f3 fbab 	bl	8002068 <_exit>

0800e912 <_malloc_usable_size_r>:
 800e912:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e916:	1f18      	subs	r0, r3, #4
 800e918:	2b00      	cmp	r3, #0
 800e91a:	bfbc      	itt	lt
 800e91c:	580b      	ldrlt	r3, [r1, r0]
 800e91e:	18c0      	addlt	r0, r0, r3
 800e920:	4770      	bx	lr

0800e922 <_raise_r>:
 800e922:	291f      	cmp	r1, #31
 800e924:	b538      	push	{r3, r4, r5, lr}
 800e926:	4604      	mov	r4, r0
 800e928:	460d      	mov	r5, r1
 800e92a:	d904      	bls.n	800e936 <_raise_r+0x14>
 800e92c:	2316      	movs	r3, #22
 800e92e:	6003      	str	r3, [r0, #0]
 800e930:	f04f 30ff 	mov.w	r0, #4294967295
 800e934:	bd38      	pop	{r3, r4, r5, pc}
 800e936:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e938:	b112      	cbz	r2, 800e940 <_raise_r+0x1e>
 800e93a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e93e:	b94b      	cbnz	r3, 800e954 <_raise_r+0x32>
 800e940:	4620      	mov	r0, r4
 800e942:	f000 f831 	bl	800e9a8 <_getpid_r>
 800e946:	462a      	mov	r2, r5
 800e948:	4601      	mov	r1, r0
 800e94a:	4620      	mov	r0, r4
 800e94c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e950:	f000 b818 	b.w	800e984 <_kill_r>
 800e954:	2b01      	cmp	r3, #1
 800e956:	d00a      	beq.n	800e96e <_raise_r+0x4c>
 800e958:	1c59      	adds	r1, r3, #1
 800e95a:	d103      	bne.n	800e964 <_raise_r+0x42>
 800e95c:	2316      	movs	r3, #22
 800e95e:	6003      	str	r3, [r0, #0]
 800e960:	2001      	movs	r0, #1
 800e962:	e7e7      	b.n	800e934 <_raise_r+0x12>
 800e964:	2400      	movs	r4, #0
 800e966:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e96a:	4628      	mov	r0, r5
 800e96c:	4798      	blx	r3
 800e96e:	2000      	movs	r0, #0
 800e970:	e7e0      	b.n	800e934 <_raise_r+0x12>
	...

0800e974 <raise>:
 800e974:	4b02      	ldr	r3, [pc, #8]	; (800e980 <raise+0xc>)
 800e976:	4601      	mov	r1, r0
 800e978:	6818      	ldr	r0, [r3, #0]
 800e97a:	f7ff bfd2 	b.w	800e922 <_raise_r>
 800e97e:	bf00      	nop
 800e980:	2000000c 	.word	0x2000000c

0800e984 <_kill_r>:
 800e984:	b538      	push	{r3, r4, r5, lr}
 800e986:	4d07      	ldr	r5, [pc, #28]	; (800e9a4 <_kill_r+0x20>)
 800e988:	2300      	movs	r3, #0
 800e98a:	4604      	mov	r4, r0
 800e98c:	4608      	mov	r0, r1
 800e98e:	4611      	mov	r1, r2
 800e990:	602b      	str	r3, [r5, #0]
 800e992:	f7f3 fb59 	bl	8002048 <_kill>
 800e996:	1c43      	adds	r3, r0, #1
 800e998:	d102      	bne.n	800e9a0 <_kill_r+0x1c>
 800e99a:	682b      	ldr	r3, [r5, #0]
 800e99c:	b103      	cbz	r3, 800e9a0 <_kill_r+0x1c>
 800e99e:	6023      	str	r3, [r4, #0]
 800e9a0:	bd38      	pop	{r3, r4, r5, pc}
 800e9a2:	bf00      	nop
 800e9a4:	200027a0 	.word	0x200027a0

0800e9a8 <_getpid_r>:
 800e9a8:	f7f3 bb46 	b.w	8002038 <_getpid>

0800e9ac <_init>:
 800e9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9ae:	bf00      	nop
 800e9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9b2:	bc08      	pop	{r3}
 800e9b4:	469e      	mov	lr, r3
 800e9b6:	4770      	bx	lr

0800e9b8 <_fini>:
 800e9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9ba:	bf00      	nop
 800e9bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9be:	bc08      	pop	{r3}
 800e9c0:	469e      	mov	lr, r3
 800e9c2:	4770      	bx	lr
