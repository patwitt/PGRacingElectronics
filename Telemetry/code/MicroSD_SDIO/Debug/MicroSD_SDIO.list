
MicroSD_SDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018ec8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020b0  080190c8  080190c8  000290c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b178  0801b178  00030e68  2**0
                  CONTENTS
  4 .ARM          00000008  0801b178  0801b178  0002b178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b180  0801b180  00030e68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801b180  0801b180  0002b180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b188  0801b188  0002b188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000e68  20000000  0801b18c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000057d8  20000e68  0801bff4  00030e68  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006640  0801bff4  00036640  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030e68  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030615  00000000  00000000  00030e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000626d  00000000  00000000  000614ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002088  00000000  00000000  00067718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001dc8  00000000  00000000  000697a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000304e8  00000000  00000000  0006b568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e68a  00000000  00000000  0009ba50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011383d  00000000  00000000  000ca0da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001dd917  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d90  00000000  00000000  001dd968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000b4  00000000  00000000  001e76f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  001e77ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000e68 	.word	0x20000e68
 800021c:	00000000 	.word	0x00000000
 8000220:	080190b0 	.word	0x080190b0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000e6c 	.word	0x20000e6c
 800023c:	080190b0 	.word	0x080190b0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MLX90640_DumpEE>:
int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2);  
float GetMedian(float *values, int n);
int IsPixelBad(uint16_t pixel,paramsMLX90640 *params);
  
int MLX90640_DumpEE(uint8_t slaveAddr, uint16_t *eeData,I2C_HandleTypeDef * i2c)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af02      	add	r7, sp, #8
 80005fa:	4603      	mov	r3, r0
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
 8000600:	73fb      	strb	r3, [r7, #15]
     return MLX90640_I2CRead(slaveAddr, 0x2400, 832, eeData,i2c);
 8000602:	7bf8      	ldrb	r0, [r7, #15]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	f44f 7250 	mov.w	r2, #832	; 0x340
 800060e:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8000612:	f002 fdad 	bl	8003170 <MLX90640_I2CRead>
 8000616:	4603      	mov	r3, r0
}
 8000618:	4618      	mov	r0, r3
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <MLX90640_GetFrameData>:

int MLX90640_GetFrameData(uint8_t slaveAddr, uint16_t *frameData,I2C_HandleTypeDef * i2c)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b0aa      	sub	sp, #168	; 0xa8
 8000624:	af02      	add	r7, sp, #8
 8000626:	4603      	mov	r3, r0
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
 800062c:	73fb      	strb	r3, [r7, #15]
    uint16_t dataReady = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    uint16_t controlRegister1;
    uint16_t statusRegister;
    int error = 1;
 8000634:	2301      	movs	r3, #1
 8000636:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    uint16_t data[64];
    uint8_t cnt = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
    
    while(dataReady == 0)
 8000640:	e019      	b.n	8000676 <MLX90640_GetFrameData+0x56>
    {
        error = MLX90640_I2CRead(slaveAddr, 0x8000, 1, &statusRegister,i2c);
 8000642:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8000646:	7bf8      	ldrb	r0, [r7, #15]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	4613      	mov	r3, r2
 800064e:	2201      	movs	r2, #1
 8000650:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000654:	f002 fd8c 	bl	8003170 <MLX90640_I2CRead>
 8000658:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        if(error != 0)
 800065c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <MLX90640_GetFrameData+0x4a>
        {
            return error;
 8000664:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000668:	e090      	b.n	800078c <MLX90640_GetFrameData+0x16c>
        }    
        dataReady = statusRegister & 0x0008;
 800066a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800066e:	f003 0308 	and.w	r3, r3, #8
 8000672:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while(dataReady == 0)
 8000676:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800067a:	2b00      	cmp	r3, #0
 800067c:	d0e1      	beq.n	8000642 <MLX90640_GetFrameData+0x22>
    }

    error = MLX90640_I2CWrite(slaveAddr, 0x8000, 0x0030,i2c);
 800067e:	7bf8      	ldrb	r0, [r7, #15]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2230      	movs	r2, #48	; 0x30
 8000684:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000688:	f002 fdc2 	bl	8003210 <MLX90640_I2CWrite>
 800068c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    if(error == -1)
 8000690:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000698:	d102      	bne.n	80006a0 <MLX90640_GetFrameData+0x80>
    {
        return error;
 800069a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800069e:	e075      	b.n	800078c <MLX90640_GetFrameData+0x16c>
    }

    error = MLX90640_I2CRead(slaveAddr, 0x0400, 768, frameData,i2c);
 80006a0:	7bf8      	ldrb	r0, [r7, #15]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80006ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b0:	f002 fd5e 	bl	8003170 <MLX90640_I2CRead>
 80006b4:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    if(error != 0)
 80006b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d002      	beq.n	80006c6 <MLX90640_GetFrameData+0xa6>
    {
        return error;
 80006c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80006c4:	e062      	b.n	800078c <MLX90640_GetFrameData+0x16c>
    }
    
    error = MLX90640_I2CRead(slaveAddr, 0x0700, 64, data,i2c);
 80006c6:	f107 0214 	add.w	r2, r7, #20
 80006ca:	7bf8      	ldrb	r0, [r7, #15]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	4613      	mov	r3, r2
 80006d2:	2240      	movs	r2, #64	; 0x40
 80006d4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80006d8:	f002 fd4a 	bl	8003170 <MLX90640_I2CRead>
 80006dc:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    if(error != 0)
 80006e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d002      	beq.n	80006ee <MLX90640_GetFrameData+0xce>
    {
        return error;
 80006e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80006ec:	e04e      	b.n	800078c <MLX90640_GetFrameData+0x16c>
    }

    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1,i2c);
 80006ee:	f107 0296 	add.w	r2, r7, #150	; 0x96
 80006f2:	7bf8      	ldrb	r0, [r7, #15]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	9300      	str	r3, [sp, #0]
 80006f8:	4613      	mov	r3, r2
 80006fa:	2201      	movs	r2, #1
 80006fc:	f248 010d 	movw	r1, #32781	; 0x800d
 8000700:	f002 fd36 	bl	8003170 <MLX90640_I2CRead>
 8000704:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    frameData[832] = controlRegister1;
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 800070e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8000712:	801a      	strh	r2, [r3, #0]
    frameData[833] = statusRegister & 0x0001;
 8000714:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	f203 6382 	addw	r3, r3, #1666	; 0x682
 800071e:	f002 0201 	and.w	r2, r2, #1
 8000722:	b292      	uxth	r2, r2
 8000724:	801a      	strh	r2, [r3, #0]

    if(error != 0)
 8000726:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800072a:	2b00      	cmp	r3, #0
 800072c:	d002      	beq.n	8000734 <MLX90640_GetFrameData+0x114>
    {
        return error;
 800072e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000732:	e02b      	b.n	800078c <MLX90640_GetFrameData+0x16c>
    }
    
    //error = ValidateAuxData(data);
    if(error == 0)
 8000734:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000738:	2b00      	cmp	r3, #0
 800073a:	d11b      	bne.n	8000774 <MLX90640_GetFrameData+0x154>
    {
        for(cnt=0; cnt<64; cnt++)
 800073c:	2300      	movs	r3, #0
 800073e:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 8000742:	e013      	b.n	800076c <MLX90640_GetFrameData+0x14c>
        {
            frameData[cnt+768] = data[cnt];
 8000744:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8000748:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 800074c:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8000750:	0052      	lsls	r2, r2, #1
 8000752:	68b9      	ldr	r1, [r7, #8]
 8000754:	440a      	add	r2, r1
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	33a0      	adds	r3, #160	; 0xa0
 800075a:	443b      	add	r3, r7
 800075c:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 8000760:	8013      	strh	r3, [r2, #0]
        for(cnt=0; cnt<64; cnt++)
 8000762:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8000766:	3301      	adds	r3, #1
 8000768:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 800076c:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8000770:	2b3f      	cmp	r3, #63	; 0x3f
 8000772:	d9e7      	bls.n	8000744 <MLX90640_GetFrameData+0x124>
        }
    }


    printf("%d \n", frameData[833]);
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	f203 6382 	addw	r3, r3, #1666	; 0x682
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	4619      	mov	r1, r3
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MLX90640_GetFrameData+0x174>)
 8000780:	f012 fbd4 	bl	8012f2c <printf>
    return frameData[833];    
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	f203 6382 	addw	r3, r3, #1666	; 0x682
 800078a:	881b      	ldrh	r3, [r3, #0]
}
 800078c:	4618      	mov	r0, r3
 800078e:	37a0      	adds	r7, #160	; 0xa0
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	080190c8 	.word	0x080190c8

08000798 <MLX90640_ExtractParameters>:

int MLX90640_ExtractParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
    int error = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
    
    ExtractVDDParameters(eeData, mlx90640);
 80007a6:	6839      	ldr	r1, [r7, #0]
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f000 fddf 	bl	800136c <ExtractVDDParameters>
    ExtractPTATParameters(eeData, mlx90640);
 80007ae:	6839      	ldr	r1, [r7, #0]
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f000 fe15 	bl	80013e0 <ExtractPTATParameters>
    ExtractGainParameters(eeData, mlx90640);
 80007b6:	6839      	ldr	r1, [r7, #0]
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f000 fe95 	bl	80014e8 <ExtractGainParameters>
    ExtractTgcParameters(eeData, mlx90640);
 80007be:	6839      	ldr	r1, [r7, #0]
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f000 fea3 	bl	800150c <ExtractTgcParameters>
    ExtractResolutionParameters(eeData, mlx90640);
 80007c6:	6839      	ldr	r1, [r7, #0]
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f000 fed7 	bl	800157c <ExtractResolutionParameters>
    ExtractKsTaParameters(eeData, mlx90640);
 80007ce:	6839      	ldr	r1, [r7, #0]
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f000 feeb 	bl	80015ac <ExtractKsTaParameters>
    ExtractKsToParameters(eeData, mlx90640);
 80007d6:	6839      	ldr	r1, [r7, #0]
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f000 ff1f 	bl	800161c <ExtractKsToParameters>
    ExtractCPParameters(eeData, mlx90640);
 80007de:	6839      	ldr	r1, [r7, #0]
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f002 f9b5 	bl	8002b50 <ExtractCPParameters>
    ExtractAlphaParameters(eeData, mlx90640);
 80007e6:	6839      	ldr	r1, [r7, #0]
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f000 fffd 	bl	80017e8 <ExtractAlphaParameters>
    ExtractOffsetParameters(eeData, mlx90640);
 80007ee:	6839      	ldr	r1, [r7, #0]
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f001 fb57 	bl	8001ea4 <ExtractOffsetParameters>
    ExtractKtaPixelParameters(eeData, mlx90640);
 80007f6:	6839      	ldr	r1, [r7, #0]
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f001 fd8d 	bl	8002318 <ExtractKtaPixelParameters>
    ExtractKvPixelParameters(eeData, mlx90640);
 80007fe:	6839      	ldr	r1, [r7, #0]
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f001 ffbd 	bl	8002780 <ExtractKvPixelParameters>
    ExtractCILCParameters(eeData, mlx90640);
 8000806:	6839      	ldr	r1, [r7, #0]
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f002 fae5 	bl	8002dd8 <ExtractCILCParameters>
    error = ExtractDeviatingPixels(eeData, mlx90640);  
 800080e:	6839      	ldr	r1, [r7, #0]
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f002 fb81 	bl	8002f18 <ExtractDeviatingPixels>
 8000816:	60f8      	str	r0, [r7, #12]
    
    return error;
 8000818:	68fb      	ldr	r3, [r7, #12]

}
 800081a:	4618      	mov	r0, r3
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <MLX90640_SetRefreshRate>:
}

//------------------------------------------------------------------------------

int MLX90640_SetRefreshRate(uint8_t slaveAddr, uint8_t refreshRate,I2C_HandleTypeDef * i2c)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b088      	sub	sp, #32
 8000826:	af02      	add	r7, sp, #8
 8000828:	4603      	mov	r3, r0
 800082a:	603a      	str	r2, [r7, #0]
 800082c:	71fb      	strb	r3, [r7, #7]
 800082e:	460b      	mov	r3, r1
 8000830:	71bb      	strb	r3, [r7, #6]
    uint16_t controlRegister1;
    int value;
    int error;
    
    value = (refreshRate & 0x07)<<7;
 8000832:	79bb      	ldrb	r3, [r7, #6]
 8000834:	01db      	lsls	r3, r3, #7
 8000836:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800083a:	613b      	str	r3, [r7, #16]
    
    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1,i2c);
 800083c:	f107 020e 	add.w	r2, r7, #14
 8000840:	79f8      	ldrb	r0, [r7, #7]
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	4613      	mov	r3, r2
 8000848:	2201      	movs	r2, #1
 800084a:	f248 010d 	movw	r1, #32781	; 0x800d
 800084e:	f002 fc8f 	bl	8003170 <MLX90640_I2CRead>
 8000852:	6178      	str	r0, [r7, #20]
    if(error == 0)
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d110      	bne.n	800087c <MLX90640_SetRefreshRate+0x5a>
    {
        value = (controlRegister1 & 0xFC7F) | value;
 800085a:	89fb      	ldrh	r3, [r7, #14]
 800085c:	461a      	mov	r2, r3
 800085e:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 8000862:	4013      	ands	r3, r2
 8000864:	693a      	ldr	r2, [r7, #16]
 8000866:	4313      	orrs	r3, r2
 8000868:	613b      	str	r3, [r7, #16]
        error = MLX90640_I2CWrite(slaveAddr, 0x800D, value,i2c);
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	b29a      	uxth	r2, r3
 800086e:	79f8      	ldrb	r0, [r7, #7]
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	f248 010d 	movw	r1, #32781	; 0x800d
 8000876:	f002 fccb 	bl	8003210 <MLX90640_I2CWrite>
 800087a:	6178      	str	r0, [r7, #20]
    }    
    
    return error;
 800087c:	697b      	ldr	r3, [r7, #20]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <MLX90640_SetChessMode>:
}

//------------------------------------------------------------------------------

int MLX90640_SetChessMode(uint8_t slaveAddr,I2C_HandleTypeDef * i2c)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b088      	sub	sp, #32
 800088a:	af02      	add	r7, sp, #8
 800088c:	4603      	mov	r3, r0
 800088e:	6039      	str	r1, [r7, #0]
 8000890:	71fb      	strb	r3, [r7, #7]
    uint16_t controlRegister1;
    int value;
    int error;
        
    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1,i2c);
 8000892:	f107 020e 	add.w	r2, r7, #14
 8000896:	79f8      	ldrb	r0, [r7, #7]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	4613      	mov	r3, r2
 800089e:	2201      	movs	r2, #1
 80008a0:	f248 010d 	movw	r1, #32781	; 0x800d
 80008a4:	f002 fc64 	bl	8003170 <MLX90640_I2CRead>
 80008a8:	6178      	str	r0, [r7, #20]
    
    if(error == 0)
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d10d      	bne.n	80008cc <MLX90640_SetChessMode+0x46>
    {
        value = (controlRegister1 | 0x1000);
 80008b0:	89fb      	ldrh	r3, [r7, #14]
 80008b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	613b      	str	r3, [r7, #16]
        error = MLX90640_I2CWrite(slaveAddr, 0x800D, value,i2c);
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	b29a      	uxth	r2, r3
 80008be:	79f8      	ldrb	r0, [r7, #7]
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	f248 010d 	movw	r1, #32781	; 0x800d
 80008c6:	f002 fca3 	bl	8003210 <MLX90640_I2CWrite>
 80008ca:	6178      	str	r0, [r7, #20]
    }    
    
    return error;
 80008cc:	697b      	ldr	r3, [r7, #20]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <MLX90640_CalculateTo>:
}

//------------------------------------------------------------------------------

void MLX90640_CalculateTo(uint16_t *frameData, const paramsMLX90640 *params, float emissivity, float tr, float *result)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b0a0      	sub	sp, #128	; 0x80
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6178      	str	r0, [r7, #20]
 80008e0:	6139      	str	r1, [r7, #16]
 80008e2:	ed87 0a03 	vstr	s0, [r7, #12]
 80008e6:	edc7 0a02 	vstr	s1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
    float kvScale;
    float alphaScale;
    float kta;
    float kv;
    
    subPage = frameData[833];
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	f8b3 3682 	ldrh.w	r3, [r3, #1666]	; 0x682
 80008f2:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    vdd = MLX90640_GetVdd(frameData, params);
 80008f6:	6939      	ldr	r1, [r7, #16]
 80008f8:	6978      	ldr	r0, [r7, #20]
 80008fa:	f000 fc2d 	bl	8001158 <MLX90640_GetVdd>
 80008fe:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
    ta = MLX90640_GetTa(frameData, params);
 8000902:	6939      	ldr	r1, [r7, #16]
 8000904:	6978      	ldr	r0, [r7, #20]
 8000906:	f000 fca1 	bl	800124c <MLX90640_GetTa>
 800090a:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
    
    ta4 = (ta + 273.15f);
 800090e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000912:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 8000c60 <MLX90640_CalculateTo+0x388>
 8000916:	ee77 7a87 	vadd.f32	s15, s15, s14
 800091a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    ta4 = ta4 * ta4;
 800091e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000922:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000926:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    ta4 = ta4 * ta4;
 800092a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800092e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000932:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    tr4 = (tr + 273.15f);
 8000936:	edd7 7a02 	vldr	s15, [r7, #8]
 800093a:	ed9f 7ac9 	vldr	s14, [pc, #804]	; 8000c60 <MLX90640_CalculateTo+0x388>
 800093e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000942:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    tr4 = tr4 * tr4;
 8000946:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800094a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800094e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    tr4 = tr4 * tr4;
 8000952:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8000956:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800095a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    taTr = tr4 - (tr4-ta4)/emissivity;
 800095e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000962:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000966:	ee77 6a67 	vsub.f32	s13, s14, s15
 800096a:	ed97 7a03 	vldr	s14, [r7, #12]
 800096e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000972:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000976:	ee77 7a67 	vsub.f32	s15, s14, s15
 800097a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    
    ktaScale = pow(2,(double)params->ktaScale);
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	f893 3f4c 	ldrb.w	r3, [r3, #3916]	; 0xf4c
 8000984:	ee07 3a90 	vmov	s15, r3
 8000988:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800098c:	eeb0 1b47 	vmov.f64	d1, d7
 8000990:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8000994:	f018 f85c 	bl	8018a50 <pow>
 8000998:	eeb0 7b40 	vmov.f64	d7, d0
 800099c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009a0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    kvScale = pow(2,(double)params->kvScale);
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009aa:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
 80009ae:	ee07 3a90 	vmov	s15, r3
 80009b2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80009b6:	eeb0 1b47 	vmov.f64	d1, d7
 80009ba:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80009be:	f018 f847 	bl	8018a50 <pow>
 80009c2:	eeb0 7b40 	vmov.f64	d7, d0
 80009c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009ca:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    alphaScale = pow(2,(double)params->alphaScale);
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	f893 364a 	ldrb.w	r3, [r3, #1610]	; 0x64a
 80009d4:	ee07 3a90 	vmov	s15, r3
 80009d8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80009dc:	eeb0 1b47 	vmov.f64	d1, d7
 80009e0:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80009e4:	f018 f834 	bl	8018a50 <pow>
 80009e8:	eeb0 7b40 	vmov.f64	d7, d0
 80009ec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009f0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    
    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80009fa:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8000c4c <MLX90640_CalculateTo+0x374>
 80009fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000a0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a12:	edc7 7a06 	vstr	s15, [r7, #24]
    alphaCorrR[1] = 1 ;
 8000a16:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000a1a:	61fb      	str	r3, [r7, #28]
    alphaCorrR[2] = (1 + params->ksTo[1] * params->ct[2]);
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8000a28:	ee07 3a90 	vmov	s15, r3
 8000a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a3c:	edc7 7a08 	vstr	s15, [r7, #32]
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
 8000a40:	ed97 7a08 	vldr	s14, [r7, #32]
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8000a50:	461a      	mov	r2, r3
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	ee07 3a90 	vmov	s15, r3
 8000a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a72:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
//------------------------- Gain calculation -----------------------------------    
    gain = frameData[778];
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	f203 6314 	addw	r3, r3, #1556	; 0x614
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	ee07 3a90 	vmov	s15, r3
 8000a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a86:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    if(gain > 32767)
 8000a8a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8000a8e:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8000c50 <MLX90640_CalculateTo+0x378>
 8000a92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a9a:	dd07      	ble.n	8000aac <MLX90640_CalculateTo+0x1d4>
    {
        gain = gain - 65536;
 8000a9c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8000aa0:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8000c54 <MLX90640_CalculateTo+0x37c>
 8000aa4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000aa8:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    }
    
    gain = params->gainEE / gain; 
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000ab2:	ee07 3a90 	vmov	s15, r3
 8000ab6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000aba:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8000abe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ac2:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
  
//------------------------- To calculation -------------------------------------    
    mode = (frameData[832] & 0x1000) >> 5;
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	115b      	asrs	r3, r3, #5
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000ad6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
    irDataCP[0] = frameData[776];  
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	ee07 3a90 	vmov	s15, r3
 8000ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000aea:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    irDataCP[1] = frameData[808];
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	ee07 3a90 	vmov	s15, r3
 8000afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000afe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for( int i = 0; i < 2; i++)
 8000b02:	2300      	movs	r3, #0
 8000b04:	673b      	str	r3, [r7, #112]	; 0x70
 8000b06:	e034      	b.n	8000b72 <MLX90640_CalculateTo+0x29a>
    {
        if(irDataCP[i] > 32767)
 8000b08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	3380      	adds	r3, #128	; 0x80
 8000b0e:	443b      	add	r3, r7
 8000b10:	3b58      	subs	r3, #88	; 0x58
 8000b12:	edd3 7a00 	vldr	s15, [r3]
 8000b16:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8000c50 <MLX90640_CalculateTo+0x378>
 8000b1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b22:	dd11      	ble.n	8000b48 <MLX90640_CalculateTo+0x270>
        {
            irDataCP[i] = irDataCP[i] - 65536;
 8000b24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	3380      	adds	r3, #128	; 0x80
 8000b2a:	443b      	add	r3, r7
 8000b2c:	3b58      	subs	r3, #88	; 0x58
 8000b2e:	edd3 7a00 	vldr	s15, [r3]
 8000b32:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8000c54 <MLX90640_CalculateTo+0x37c>
 8000b36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	3380      	adds	r3, #128	; 0x80
 8000b40:	443b      	add	r3, r7
 8000b42:	3b58      	subs	r3, #88	; 0x58
 8000b44:	edc3 7a00 	vstr	s15, [r3]
        }
        irDataCP[i] = irDataCP[i] * gain;
 8000b48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	3380      	adds	r3, #128	; 0x80
 8000b4e:	443b      	add	r3, r7
 8000b50:	3b58      	subs	r3, #88	; 0x58
 8000b52:	ed93 7a00 	vldr	s14, [r3]
 8000b56:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8000b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	3380      	adds	r3, #128	; 0x80
 8000b64:	443b      	add	r3, r7
 8000b66:	3b58      	subs	r3, #88	; 0x58
 8000b68:	edc3 7a00 	vstr	s15, [r3]
    for( int i = 0; i < 2; i++)
 8000b6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b6e:	3301      	adds	r3, #1
 8000b70:	673b      	str	r3, [r7, #112]	; 0x70
 8000b72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	ddc7      	ble.n	8000b08 <MLX90640_CalculateTo+0x230>
    }
    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 8000b78:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b82:	f9b3 3258 	ldrsh.w	r3, [r3, #600]	; 0x258
 8000b86:	ee07 3a90 	vmov	s15, r3
 8000b8a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	ed93 6a08 	vldr	s12, [r3, #32]
 8000b94:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000b98:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 8000b9c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8000ba0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000ba4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000ba8:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000bac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	ed93 6a07 	vldr	s12, [r3, #28]
 8000bb6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000bba:	eddf 5a27 	vldr	s11, [pc, #156]	; 8000c58 <MLX90640_CalculateTo+0x380>
 8000bbe:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8000bc2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000bc6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000bca:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000bce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bd6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    if( mode ==  params->calibrationModeEE)
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000be0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d13d      	bne.n	8000c64 <MLX90640_CalculateTo+0x38c>
    {
        irDataCP[1] = irDataCP[1] - params->cpOffset[1] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 8000be8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000bf2:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	; 0x25a
 8000bf6:	ee07 3a90 	vmov	s15, r3
 8000bfa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	ed93 6a08 	vldr	s12, [r3, #32]
 8000c04:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000c08:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 8000c0c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8000c10:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000c14:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000c18:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000c1c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	ed93 6a07 	vldr	s12, [r3, #28]
 8000c26:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000c2a:	eddf 5a0b 	vldr	s11, [pc, #44]	; 8000c58 <MLX90640_CalculateTo+0x380>
 8000c2e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8000c32:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000c36:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000c3a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000c3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c46:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8000c4a:	e043      	b.n	8000cd4 <MLX90640_CalculateTo+0x3fc>
 8000c4c:	42200000 	.word	0x42200000
 8000c50:	46fffe00 	.word	0x46fffe00
 8000c54:	47800000 	.word	0x47800000
 8000c58:	40533333 	.word	0x40533333
 8000c5c:	358637bd 	.word	0x358637bd
 8000c60:	43889333 	.word	0x43889333
    }
    else
    {
      irDataCP[1] = irDataCP[1] - (params->cpOffset[1] + params->ilChessC[0]) * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 8000c64:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c6e:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	; 0x25a
 8000c72:	ee07 3a90 	vmov	s15, r3
 8000c76:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c80:	edd3 7a97 	vldr	s15, [r3, #604]	; 0x25c
 8000c84:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	ed93 6a08 	vldr	s12, [r3, #32]
 8000c8e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000c92:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 8000c96:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8000c9a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000c9e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000ca2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000ca6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	ed93 6a07 	vldr	s12, [r3, #28]
 8000cb0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000cb4:	ed5f 5a18 	vldr	s11, [pc, #-96]	; 8000c58 <MLX90640_CalculateTo+0x380>
 8000cb8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8000cbc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000cc0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000cc4:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000cc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cd0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }

    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000cd8:	e230      	b.n	800113c <MLX90640_CalculateTo+0x864>
    {
        ilPattern = pixelNumber / 32 - (pixelNumber / 64) * 2; 
 8000cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	da00      	bge.n	8000ce2 <MLX90640_CalculateTo+0x40a>
 8000ce0:	331f      	adds	r3, #31
 8000ce2:	115b      	asrs	r3, r3, #5
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	da00      	bge.n	8000cee <MLX90640_CalculateTo+0x416>
 8000cec:	333f      	adds	r3, #63	; 0x3f
 8000cee:	119b      	asrs	r3, r3, #6
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
        chessPattern = ilPattern ^ (pixelNumber - (pixelNumber/2)*2); 
 8000cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	bfb8      	it	lt
 8000d08:	425b      	neglt	r3, r3
 8000d0a:	b25a      	sxtb	r2, r3
 8000d0c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000d10:	4053      	eors	r3, r2
 8000d12:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
 8000d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d18:	3302      	adds	r3, #2
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	da00      	bge.n	8000d20 <MLX90640_CalculateTo+0x448>
 8000d1e:	3303      	adds	r3, #3
 8000d20:	109b      	asrs	r3, r3, #2
 8000d22:	461a      	mov	r2, r3
 8000d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d26:	3303      	adds	r3, #3
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	da00      	bge.n	8000d2e <MLX90640_CalculateTo+0x456>
 8000d2c:	3303      	adds	r3, #3
 8000d2e:	109b      	asrs	r3, r3, #2
 8000d30:	425b      	negs	r3, r3
 8000d32:	441a      	add	r2, r3
 8000d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d36:	3301      	adds	r3, #1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	da00      	bge.n	8000d3e <MLX90640_CalculateTo+0x466>
 8000d3c:	3303      	adds	r3, #3
 8000d3e:	109b      	asrs	r3, r3, #2
 8000d40:	441a      	add	r2, r3
 8000d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	da00      	bge.n	8000d4a <MLX90640_CalculateTo+0x472>
 8000d48:	3303      	adds	r3, #3
 8000d4a:	109b      	asrs	r3, r3, #2
 8000d4c:	425b      	negs	r3, r3
 8000d4e:	4413      	add	r3, r2
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	f997 3046 	ldrsb.w	r3, [r7, #70]	; 0x46
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	f1c3 0301 	rsb	r3, r3, #1
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	fb12 f303 	smulbb	r3, r2, r3
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        
        if(mode == 0)
 8000d68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d104      	bne.n	8000d7a <MLX90640_CalculateTo+0x4a2>
        {
          pattern = ilPattern; 
 8000d70:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000d74:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8000d78:	e003      	b.n	8000d82 <MLX90640_CalculateTo+0x4aa>
        }
        else 
        {
          pattern = chessPattern; 
 8000d7a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000d7e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
        }               
        
        if(pattern == frameData[833])
 8000d82:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	f202 6282 	addw	r2, r2, #1666	; 0x682
 8000d8c:	8812      	ldrh	r2, [r2, #0]
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	f040 81d1 	bne.w	8001136 <MLX90640_CalculateTo+0x85e>
        {    
            irData = frameData[pixelNumber];
 8000d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	ee07 3a90 	vmov	s15, r3
 8000da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000da6:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            if(irData > 32767)
 8000daa:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8000dae:	ed1f 7a58 	vldr	s14, [pc, #-352]	; 8000c50 <MLX90640_CalculateTo+0x378>
 8000db2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dba:	dd07      	ble.n	8000dcc <MLX90640_CalculateTo+0x4f4>
            {
                irData = irData - 65536;
 8000dbc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8000dc0:	ed1f 7a5c 	vldr	s14, [pc, #-368]	; 8000c54 <MLX90640_CalculateTo+0x37c>
 8000dc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000dc8:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            }
            irData = irData * gain;
 8000dcc:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8000dd0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8000dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dd8:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            
            kta = params->kta[pixelNumber]/ktaScale;
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000de0:	4413      	add	r3, r2
 8000de2:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8000de6:	f993 3000 	ldrsb.w	r3, [r3]
 8000dea:	ee07 3a90 	vmov	s15, r3
 8000dee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000df2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000df6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dfa:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            kv = params->kv[pixelNumber]/kvScale;
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e02:	4413      	add	r3, r2
 8000e04:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 8000e08:	f993 3000 	ldrsb.w	r3, [r3]
 8000e0c:	ee07 3a90 	vmov	s15, r3
 8000e10:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e14:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000e18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e1c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3f));
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e24:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	4413      	add	r3, r2
 8000e2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e30:	ee07 3a90 	vmov	s15, r3
 8000e34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e38:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000e3c:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8000e40:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8000e44:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000e48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000e50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000e54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e58:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000e5c:	ed5f 6a82 	vldr	s13, [pc, #-520]	; 8000c58 <MLX90640_CalculateTo+0x380>
 8000e60:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8000e64:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000e68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000e70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e78:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8000e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e80:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            
            if(mode !=  params->calibrationModeEE)
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e8a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d023      	beq.n	8000eda <MLX90640_CalculateTo+0x602>
            {
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern; 
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e98:	ed93 7a99 	vldr	s14, [r3, #612]	; 0x264
 8000e9c:	f997 3046 	ldrsb.w	r3, [r7, #70]	; 0x46
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	ee07 3a90 	vmov	s15, r3
 8000ea8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eb0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8000eb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ebe:	edd3 6a98 	vldr	s13, [r3, #608]	; 0x260
 8000ec2:	f997 3044 	ldrsb.w	r3, [r7, #68]	; 0x44
 8000ec6:	ee07 3a90 	vmov	s15, r3
 8000eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ece:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ed2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ed6:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            }                       
    
            irData = irData - params->tgc * irDataCP[subPage];
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	ed93 7a06 	vldr	s14, [r3, #24]
 8000ee0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	3380      	adds	r3, #128	; 0x80
 8000ee8:	443b      	add	r3, r7
 8000eea:	3b58      	subs	r3, #88	; 0x58
 8000eec:	edd3 7a00 	vldr	s15, [r3]
 8000ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ef4:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8000ef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000efc:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            irData = irData / emissivity;
 8000f00:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8000f04:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f0c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            
            alphaCompensated = SCALEALPHA*alphaScale/params->alpha[pixelNumber];
 8000f10:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000f14:	ed1f 7aaf 	vldr	s14, [pc, #-700]	; 8000c5c <MLX90640_CalculateTo+0x384>
 8000f18:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f20:	3324      	adds	r3, #36	; 0x24
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4413      	add	r3, r2
 8000f26:	885b      	ldrh	r3, [r3, #2]
 8000f28:	ee07 3a90 	vmov	s15, r3
 8000f2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f34:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            alphaCompensated = alphaCompensated*(1 + params->KsTa * (ta - 25));
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8000f3e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000f42:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8000f46:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f56:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f5e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                        
            Sx = alphaCompensated * alphaCompensated * alphaCompensated * (irData + alphaCompensated * taTr);
 8000f62:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000f66:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000f6a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000f6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f72:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8000f76:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000f7a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000f7e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8000f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f8a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            Sx = sqrt(sqrt(Sx)) * params->ksTo[1];            
 8000f8e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000f92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f96:	eeb0 0b47 	vmov.f64	d0, d7
 8000f9a:	f017 ffad 	bl	8018ef8 <sqrt>
 8000f9e:	eeb0 7b40 	vmov.f64	d7, d0
 8000fa2:	eeb0 0b47 	vmov.f64	d0, d7
 8000fa6:	f017 ffa7 	bl	8018ef8 <sqrt>
 8000faa:	eeb0 6b40 	vmov.f64	d6, d0
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000fb4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fb8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000fbc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fc0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            
            To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15f) + Sx) + taTr)) - 273.15f;                     
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000fca:	ed1f 7adb 	vldr	s14, [pc, #-876]	; 8000c60 <MLX90640_CalculateTo+0x388>
 8000fce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fda:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000fde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fe2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fea:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8000fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000ff2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ffa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ffe:	eeb0 0b47 	vmov.f64	d0, d7
 8001002:	f017 ff79 	bl	8018ef8 <sqrt>
 8001006:	eeb0 7b40 	vmov.f64	d7, d0
 800100a:	eeb0 0b47 	vmov.f64	d0, d7
 800100e:	f017 ff73 	bl	8018ef8 <sqrt>
 8001012:	eeb0 7b40 	vmov.f64	d7, d0
 8001016:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8001150 <MLX90640_CalculateTo+0x878>
 800101a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800101e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001022:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
                    
            if(To < params->ct[1])
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 800102c:	ee07 3a90 	vmov	s15, r3
 8001030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001034:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001038:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800103c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001040:	d503      	bpl.n	800104a <MLX90640_CalculateTo+0x772>
            {
                range = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001048:	e026      	b.n	8001098 <MLX90640_CalculateTo+0x7c0>
            }
            else if(To < params->ct[2])   
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8001050:	ee07 3a90 	vmov	s15, r3
 8001054:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001058:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800105c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001064:	d503      	bpl.n	800106e <MLX90640_CalculateTo+0x796>
            {
                range = 1;            
 8001066:	2301      	movs	r3, #1
 8001068:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 800106c:	e014      	b.n	8001098 <MLX90640_CalculateTo+0x7c0>
            }   
            else if(To < params->ct[3])
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8001074:	ee07 3a90 	vmov	s15, r3
 8001078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800107c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001080:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001088:	d503      	bpl.n	8001092 <MLX90640_CalculateTo+0x7ba>
            {
                range = 2;            
 800108a:	2302      	movs	r3, #2
 800108c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001090:	e002      	b.n	8001098 <MLX90640_CalculateTo+0x7c0>
            }
            else
            {
                range = 3;            
 8001092:	2303      	movs	r3, #3
 8001094:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
            }      
            
            To = sqrt(sqrt(irData / (alphaCompensated * alphaCorrR[range] * (1 + params->ksTo[range] * (To - params->ct[range]))) + taTr)) - 273.15f;
 8001098:	f997 3076 	ldrsb.w	r3, [r7, #118]	; 0x76
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	3380      	adds	r3, #128	; 0x80
 80010a0:	443b      	add	r3, r7
 80010a2:	3b68      	subs	r3, #104	; 0x68
 80010a4:	ed93 7a00 	vldr	s14, [r3]
 80010a8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80010ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010b0:	f997 3076 	ldrsb.w	r3, [r7, #118]	; 0x76
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	330a      	adds	r3, #10
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	3304      	adds	r3, #4
 80010be:	edd3 6a00 	vldr	s13, [r3]
 80010c2:	f997 2076 	ldrsb.w	r2, [r7, #118]	; 0x76
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	3220      	adds	r2, #32
 80010ca:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80010ce:	ee07 3a90 	vmov	s15, r3
 80010d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d6:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 80010da:	ee76 7a67 	vsub.f32	s15, s12, s15
 80010de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80010e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80010ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ee:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 80010f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010f6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80010fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001102:	eeb0 0b47 	vmov.f64	d0, d7
 8001106:	f017 fef7 	bl	8018ef8 <sqrt>
 800110a:	eeb0 7b40 	vmov.f64	d7, d0
 800110e:	eeb0 0b47 	vmov.f64	d0, d7
 8001112:	f017 fef1 	bl	8018ef8 <sqrt>
 8001116:	eeb0 7b40 	vmov.f64	d7, d0
 800111a:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001150 <MLX90640_CalculateTo+0x878>
 800111e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001122:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001126:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
                        
            result[pixelNumber] = To;
 800112a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001134:	601a      	str	r2, [r3, #0]
    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 8001136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001138:	3301      	adds	r3, #1
 800113a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800113c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800113e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001142:	f6ff adca 	blt.w	8000cda <MLX90640_CalculateTo+0x402>
        }
    }
}
 8001146:	bf00      	nop
 8001148:	bf00      	nop
 800114a:	3780      	adds	r7, #128	; 0x80
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	60000000 	.word	0x60000000
 8001154:	40711266 	.word	0x40711266

08001158 <MLX90640_GetVdd>:
}

//------------------------------------------------------------------------------

float MLX90640_GetVdd(uint16_t *frameData, const paramsMLX90640 *params)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	ed2d 8b02 	vpush	{d8}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
    float vdd;
    float resolutionCorrection;

    int resolutionRAM;    
    
    vdd = frameData[810];
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f203 6354 	addw	r3, r3, #1620	; 0x654
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	ee07 3a90 	vmov	s15, r3
 8001172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001176:	edc7 7a05 	vstr	s15, [r7, #20]
    if(vdd > 32767)
 800117a:	edd7 7a05 	vldr	s15, [r7, #20]
 800117e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001240 <MLX90640_GetVdd+0xe8>
 8001182:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118a:	dd07      	ble.n	800119c <MLX90640_GetVdd+0x44>
    {
        vdd = vdd - 65536;
 800118c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001190:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001244 <MLX90640_GetVdd+0xec>
 8001194:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001198:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    resolutionRAM = (frameData[832] & 0x0C00) >> 10;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	129b      	asrs	r3, r3, #10
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	613b      	str	r3, [r7, #16]
    resolutionCorrection = pow(2, (double)params->resolutionEE) / pow(2, (double)resolutionRAM);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011b2:	ee07 3a90 	vmov	s15, r3
 80011b6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80011ba:	eeb0 1b47 	vmov.f64	d1, d7
 80011be:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80011c2:	f017 fc45 	bl	8018a50 <pow>
 80011c6:	eeb0 8b40 	vmov.f64	d8, d0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	ee07 3a90 	vmov	s15, r3
 80011d0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80011d4:	eeb0 1b47 	vmov.f64	d1, d7
 80011d8:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80011dc:	f017 fc38 	bl	8018a50 <pow>
 80011e0:	eeb0 6b40 	vmov.f64	d6, d0
 80011e4:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80011e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011ec:	edc7 7a03 	vstr	s15, [r7, #12]
    vdd = (resolutionCorrection * vdd - params->vdd25) / params->kVdd + 3.3f;
 80011f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80011f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80011f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001202:	ee07 3a90 	vmov	s15, r3
 8001206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800120a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001214:	ee07 3a90 	vmov	s15, r3
 8001218:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800121c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001220:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001248 <MLX90640_GetVdd+0xf0>
 8001224:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001228:	edc7 7a05 	vstr	s15, [r7, #20]
    
    return vdd;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	ee07 3a90 	vmov	s15, r3
}
 8001232:	eeb0 0a67 	vmov.f32	s0, s15
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	ecbd 8b02 	vpop	{d8}
 800123e:	bd80      	pop	{r7, pc}
 8001240:	46fffe00 	.word	0x46fffe00
 8001244:	47800000 	.word	0x47800000
 8001248:	40533333 	.word	0x40533333

0800124c <MLX90640_GetTa>:

//------------------------------------------------------------------------------

float MLX90640_GetTa(uint16_t *frameData, const paramsMLX90640 *params)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
    float ptat;
    float ptatArt;
    float vdd;
    float ta;
    
    vdd = MLX90640_GetVdd(frameData, params);
 8001256:	6839      	ldr	r1, [r7, #0]
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ff7d 	bl	8001158 <MLX90640_GetVdd>
 800125e:	ed87 0a03 	vstr	s0, [r7, #12]
    
    ptat = frameData[800];
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	ee07 3a90 	vmov	s15, r3
 800126e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001272:	edc7 7a05 	vstr	s15, [r7, #20]
    if(ptat > 32767)
 8001276:	edd7 7a05 	vldr	s15, [r7, #20]
 800127a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800135c <MLX90640_GetTa+0x110>
 800127e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001286:	dd07      	ble.n	8001298 <MLX90640_GetTa+0x4c>
    {
        ptat = ptat - 65536;
 8001288:	edd7 7a05 	vldr	s15, [r7, #20]
 800128c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001360 <MLX90640_GetTa+0x114>
 8001290:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001294:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    
    ptatArt = frameData[768];
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	ee07 3a90 	vmov	s15, r3
 80012a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012a8:	edc7 7a04 	vstr	s15, [r7, #16]
    if(ptatArt > 32767)
 80012ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800135c <MLX90640_GetTa+0x110>
 80012b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	dd07      	ble.n	80012ce <MLX90640_GetTa+0x82>
    {
        ptatArt = ptatArt - 65536;
 80012be:	edd7 7a04 	vldr	s15, [r7, #16]
 80012c2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001360 <MLX90640_GetTa+0x114>
 80012c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012ca:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    ptatArt = (ptat / (ptat * params->alphaPTAT + ptatArt)) * pow(2, (double)18);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80012d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80012d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80012e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012e4:	edd7 6a05 	vldr	s13, [r7, #20]
 80012e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ec:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001364 <MLX90640_GetTa+0x118>
 80012f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f4:	edc7 7a04 	vstr	s15, [r7, #16]
    
    ta = (ptatArt / (1 + params->KvPTAT * (vdd - 3.3f)) - params->vPTAT25);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80012fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001302:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001368 <MLX90640_GetTa+0x11c>
 8001306:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800130a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800130e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001312:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001316:	edd7 6a04 	vldr	s13, [r7, #16]
 800131a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	899b      	ldrh	r3, [r3, #12]
 8001322:	ee07 3a90 	vmov	s15, r3
 8001326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800132e:	edc7 7a02 	vstr	s15, [r7, #8]
    ta = ta / params->KtPTAT + 25;
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	ed93 7a02 	vldr	s14, [r3, #8]
 8001338:	edd7 6a02 	vldr	s13, [r7, #8]
 800133c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001340:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001344:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001348:	edc7 7a02 	vstr	s15, [r7, #8]
    
    return ta;
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	ee07 3a90 	vmov	s15, r3
}
 8001352:	eeb0 0a67 	vmov.f32	s0, s15
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	46fffe00 	.word	0x46fffe00
 8001360:	47800000 	.word	0x47800000
 8001364:	48800000 	.word	0x48800000
 8001368:	40533333 	.word	0x40533333

0800136c <ExtractVDDParameters>:
}

//------------------------------------------------------------------------------

void ExtractVDDParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
    int16_t kVdd;
    int16_t vdd25;
    
    kVdd = eeData[51];
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3366      	adds	r3, #102	; 0x66
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	81fb      	strh	r3, [r7, #14]
    
    kVdd = (eeData[51] & 0xFF00) >> 8;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3366      	adds	r3, #102	; 0x66
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	b29b      	uxth	r3, r3
 8001388:	81fb      	strh	r3, [r7, #14]
    if(kVdd > 127)
 800138a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800138e:	2b7f      	cmp	r3, #127	; 0x7f
 8001390:	dd04      	ble.n	800139c <ExtractVDDParameters+0x30>
    {
        kVdd = kVdd - 256;
 8001392:	89fb      	ldrh	r3, [r7, #14]
 8001394:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001398:	b29b      	uxth	r3, r3
 800139a:	81fb      	strh	r3, [r7, #14]
    }
    kVdd = 32 * kVdd;
 800139c:	89fb      	ldrh	r3, [r7, #14]
 800139e:	015b      	lsls	r3, r3, #5
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	81fb      	strh	r3, [r7, #14]
    vdd25 = eeData[51] & 0x00FF;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3366      	adds	r3, #102	; 0x66
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	81bb      	strh	r3, [r7, #12]
    vdd25 = ((vdd25 - 256) << 5) - 8192;
 80013b0:	89bb      	ldrh	r3, [r7, #12]
 80013b2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	015b      	lsls	r3, r3, #5
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	81bb      	strh	r3, [r7, #12]
    
    mlx90640->kVdd = kVdd;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	89fa      	ldrh	r2, [r7, #14]
 80013c8:	801a      	strh	r2, [r3, #0]
    mlx90640->vdd25 = vdd25; 
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	89ba      	ldrh	r2, [r7, #12]
 80013ce:	805a      	strh	r2, [r3, #2]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	0000      	movs	r0, r0
	...

080013e0 <ExtractPTATParameters>:

//------------------------------------------------------------------------------

void ExtractPTATParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b087      	sub	sp, #28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
    float KvPTAT;
    float KtPTAT;
    int16_t vPTAT25;
    float alphaPTAT;
    
    KvPTAT = (eeData[50] & 0xFC00) >> 10;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3364      	adds	r3, #100	; 0x64
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	0a9b      	lsrs	r3, r3, #10
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	ee07 3a90 	vmov	s15, r3
 80013f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013fc:	edc7 7a05 	vstr	s15, [r7, #20]
    if(KvPTAT > 31)
 8001400:	edd7 7a05 	vldr	s15, [r7, #20]
 8001404:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8001408:	eef4 7ac7 	vcmpe.f32	s15, s14
 800140c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001410:	dd07      	ble.n	8001422 <ExtractPTATParameters+0x42>
    {
        KvPTAT = KvPTAT - 64;
 8001412:	edd7 7a05 	vldr	s15, [r7, #20]
 8001416:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80014d8 <ExtractPTATParameters+0xf8>
 800141a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800141e:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    KvPTAT = KvPTAT/4096;
 8001422:	ed97 7a05 	vldr	s14, [r7, #20]
 8001426:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80014dc <ExtractPTATParameters+0xfc>
 800142a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800142e:	edc7 7a05 	vstr	s15, [r7, #20]
    
    KtPTAT = eeData[50] & 0x03FF;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3364      	adds	r3, #100	; 0x64
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800143c:	ee07 3a90 	vmov	s15, r3
 8001440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001444:	edc7 7a04 	vstr	s15, [r7, #16]
    if(KtPTAT > 511)
 8001448:	edd7 7a04 	vldr	s15, [r7, #16]
 800144c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80014e0 <ExtractPTATParameters+0x100>
 8001450:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001458:	dd07      	ble.n	800146a <ExtractPTATParameters+0x8a>
    {
        KtPTAT = KtPTAT - 1024;
 800145a:	edd7 7a04 	vldr	s15, [r7, #16]
 800145e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80014e4 <ExtractPTATParameters+0x104>
 8001462:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001466:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    KtPTAT = KtPTAT/8;
 800146a:	ed97 7a04 	vldr	s14, [r7, #16]
 800146e:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001472:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001476:	edc7 7a04 	vstr	s15, [r7, #16]
    
    vPTAT25 = eeData[49];
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3362      	adds	r3, #98	; 0x62
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	81fb      	strh	r3, [r7, #14]
    
    alphaPTAT = (eeData[16] & 0xF000) / pow(2, (double)14) + 8.0f;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3320      	adds	r3, #32
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800148c:	ee07 3a90 	vmov	s15, r3
 8001490:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001494:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 80014d0 <ExtractPTATParameters+0xf0>
 8001498:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800149c:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 80014a0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80014a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014a8:	edc7 7a02 	vstr	s15, [r7, #8]
    
    mlx90640->KvPTAT = KvPTAT;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	605a      	str	r2, [r3, #4]
    mlx90640->KtPTAT = KtPTAT;    
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	609a      	str	r2, [r3, #8]
    mlx90640->vPTAT25 = vPTAT25;
 80014b8:	89fa      	ldrh	r2, [r7, #14]
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	819a      	strh	r2, [r3, #12]
    mlx90640->alphaPTAT = alphaPTAT;   
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	611a      	str	r2, [r3, #16]
}
 80014c4:	bf00      	nop
 80014c6:	371c      	adds	r7, #28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	00000000 	.word	0x00000000
 80014d4:	40d00000 	.word	0x40d00000
 80014d8:	42800000 	.word	0x42800000
 80014dc:	45800000 	.word	0x45800000
 80014e0:	43ff8000 	.word	0x43ff8000
 80014e4:	44800000 	.word	0x44800000

080014e8 <ExtractGainParameters>:

//------------------------------------------------------------------------------

void ExtractGainParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
    int16_t gainEE;
    
    gainEE = eeData[48];
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3360      	adds	r3, #96	; 0x60
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	81fb      	strh	r3, [r7, #14]
    if(gainEE > 32767)
    {
        gainEE = gainEE -65536;
    }
    
    mlx90640->gainEE = gainEE;    
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	89fa      	ldrh	r2, [r7, #14]
 80014fe:	829a      	strh	r2, [r3, #20]
}
 8001500:	bf00      	nop
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <ExtractTgcParameters>:

//------------------------------------------------------------------------------

void ExtractTgcParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
    float tgc;
    tgc = eeData[60] & 0x00FF;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3378      	adds	r3, #120	; 0x78
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	ee07 3a90 	vmov	s15, r3
 8001522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001526:	edc7 7a03 	vstr	s15, [r7, #12]
    if(tgc > 127)
 800152a:	edd7 7a03 	vldr	s15, [r7, #12]
 800152e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001570 <ExtractTgcParameters+0x64>
 8001532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153a:	dd07      	ble.n	800154c <ExtractTgcParameters+0x40>
    {
        tgc = tgc - 256;
 800153c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001540:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001574 <ExtractTgcParameters+0x68>
 8001544:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001548:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    tgc = tgc / 32.0f;
 800154c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001550:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001578 <ExtractTgcParameters+0x6c>
 8001554:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001558:	edc7 7a03 	vstr	s15, [r7, #12]
    
    mlx90640->tgc = tgc;        
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	619a      	str	r2, [r3, #24]
}
 8001562:	bf00      	nop
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	42fe0000 	.word	0x42fe0000
 8001574:	43800000 	.word	0x43800000
 8001578:	42000000 	.word	0x42000000

0800157c <ExtractResolutionParameters>:

//------------------------------------------------------------------------------

void ExtractResolutionParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
    uint8_t resolutionEE;
    resolutionEE = (eeData[56] & 0x3000) >> 12;    
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3370      	adds	r3, #112	; 0x70
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	131b      	asrs	r3, r3, #12
 800158e:	b2db      	uxtb	r3, r3
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	73fb      	strb	r3, [r7, #15]
    
    mlx90640->resolutionEE = resolutionEE;
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	7bfa      	ldrb	r2, [r7, #15]
 800159a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <ExtractKsTaParameters>:

//------------------------------------------------------------------------------

void ExtractKsTaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
    float KsTa;
    KsTa = (eeData[60] & 0xFF00) >> 8;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3378      	adds	r3, #120	; 0x78
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	b29b      	uxth	r3, r3
 80015c0:	ee07 3a90 	vmov	s15, r3
 80015c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c8:	edc7 7a03 	vstr	s15, [r7, #12]
    if(KsTa > 127)
 80015cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80015d0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001610 <ExtractKsTaParameters+0x64>
 80015d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015dc:	dd07      	ble.n	80015ee <ExtractKsTaParameters+0x42>
    {
        KsTa = KsTa -256;
 80015de:	edd7 7a03 	vldr	s15, [r7, #12]
 80015e2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001614 <ExtractKsTaParameters+0x68>
 80015e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015ea:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    KsTa = KsTa / 8192.0f;
 80015ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80015f2:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001618 <ExtractKsTaParameters+0x6c>
 80015f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015fa:	edc7 7a03 	vstr	s15, [r7, #12]
    
    mlx90640->KsTa = KsTa;
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	42fe0000 	.word	0x42fe0000
 8001614:	43800000 	.word	0x43800000
 8001618:	46000000 	.word	0x46000000

0800161c <ExtractKsToParameters>:

//------------------------------------------------------------------------------

void ExtractKsToParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 800161c:	b480      	push	{r7}
 800161e:	b087      	sub	sp, #28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
    int KsToScale;
    int8_t step;
    
    step = ((eeData[63] & 0x3000) >> 12) * 10;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	337e      	adds	r3, #126	; 0x7e
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	131b      	asrs	r3, r3, #12
 800162e:	b2db      	uxtb	r3, r3
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	b2db      	uxtb	r3, r3
 8001636:	461a      	mov	r2, r3
 8001638:	0092      	lsls	r2, r2, #2
 800163a:	4413      	add	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	b2db      	uxtb	r3, r3
 8001640:	74fb      	strb	r3, [r7, #19]
    
    mlx90640->ct[0] = -40;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	f64f 72d8 	movw	r2, #65496	; 0xffd8
 8001648:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    mlx90640->ct[1] = 0;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	2200      	movs	r2, #0
 8001650:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    mlx90640->ct[2] = (eeData[63] & 0x00F0) >> 4;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	337e      	adds	r3, #126	; 0x7e
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	111b      	asrs	r3, r3, #4
 800165c:	b21b      	sxth	r3, r3
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	b21a      	sxth	r2, r3
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    mlx90640->ct[3] = (eeData[63] & 0x0F00) >> 8;    
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	337e      	adds	r3, #126	; 0x7e
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	121b      	asrs	r3, r3, #8
 8001672:	b21b      	sxth	r3, r3
 8001674:	f003 030f 	and.w	r3, r3, #15
 8001678:	b21a      	sxth	r2, r3
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    
    mlx90640->ct[2] = mlx90640->ct[2]*step;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8001686:	b29a      	uxth	r2, r3
 8001688:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800168c:	b29b      	uxth	r3, r3
 800168e:	fb12 f303 	smulbb	r3, r2, r3
 8001692:	b29b      	uxth	r3, r3
 8001694:	b21a      	sxth	r2, r3
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    mlx90640->ct[3] = mlx90640->ct[2] + mlx90640->ct[3]*step;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80016aa:	b299      	uxth	r1, r3
 80016ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	fb11 f303 	smulbb	r3, r1, r3
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	4413      	add	r3, r2
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	b21a      	sxth	r2, r3
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    mlx90640->ct[4] = 400;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80016ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    
    KsToScale = (eeData[63] & 0x000F) + 8;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	337e      	adds	r3, #126	; 0x7e
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	f003 030f 	and.w	r3, r3, #15
 80016d8:	3308      	adds	r3, #8
 80016da:	60fb      	str	r3, [r7, #12]
    KsToScale = 1 << KsToScale;
 80016dc:	2201      	movs	r2, #1
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	60fb      	str	r3, [r7, #12]
    
    mlx90640->ksTo[0] = eeData[61] & 0x00FF;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	337a      	adds	r3, #122	; 0x7a
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	ee07 3a90 	vmov	s15, r3
 80016f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    mlx90640->ksTo[1] = (eeData[61] & 0xFF00) >> 8;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	337a      	adds	r3, #122	; 0x7a
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	0a1b      	lsrs	r3, r3, #8
 8001704:	b29b      	uxth	r3, r3
 8001706:	ee07 3a90 	vmov	s15, r3
 800170a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    mlx90640->ksTo[2] = eeData[62] & 0x00FF;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	337c      	adds	r3, #124	; 0x7c
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	b2db      	uxtb	r3, r3
 800171c:	ee07 3a90 	vmov	s15, r3
 8001720:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    mlx90640->ksTo[3] = (eeData[62] & 0xFF00) >> 8;      
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	337c      	adds	r3, #124	; 0x7c
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	b29b      	uxth	r3, r3
 8001734:	ee07 3a90 	vmov	s15, r3
 8001738:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    
    for(int i = 0; i < 4; i++)
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	e03c      	b.n	80017c2 <ExtractKsToParameters+0x1a6>
    {
        if(mlx90640->ksTo[i] > 127)
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	330a      	adds	r3, #10
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	3304      	adds	r3, #4
 8001754:	edd3 7a00 	vldr	s15, [r3]
 8001758:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80017dc <ExtractKsToParameters+0x1c0>
 800175c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001764:	dd13      	ble.n	800178e <ExtractKsToParameters+0x172>
        {
            mlx90640->ksTo[i] = mlx90640->ksTo[i] - 256;
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	330a      	adds	r3, #10
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	3304      	adds	r3, #4
 8001772:	edd3 7a00 	vldr	s15, [r3]
 8001776:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80017e0 <ExtractKsToParameters+0x1c4>
 800177a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	330a      	adds	r3, #10
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	3304      	adds	r3, #4
 800178a:	edc3 7a00 	vstr	s15, [r3]
        }
        mlx90640->ksTo[i] = mlx90640->ksTo[i] / KsToScale;
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	330a      	adds	r3, #10
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	3304      	adds	r3, #4
 800179a:	edd3 6a00 	vldr	s13, [r3]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	ee07 3a90 	vmov	s15, r3
 80017a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	330a      	adds	r3, #10
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	3304      	adds	r3, #4
 80017b8:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < 4; i++)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	3301      	adds	r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	ddbf      	ble.n	8001748 <ExtractKsToParameters+0x12c>
    } 
    
    mlx90640->ksTo[4] = -0.0002;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	4a06      	ldr	r2, [pc, #24]	; (80017e4 <ExtractKsToParameters+0x1c8>)
 80017cc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80017ce:	bf00      	nop
 80017d0:	371c      	adds	r7, #28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	42fe0000 	.word	0x42fe0000
 80017e0:	43800000 	.word	0x43800000
 80017e4:	b951b717 	.word	0xb951b717

080017e8 <ExtractAlphaParameters>:

//------------------------------------------------------------------------------

void ExtractAlphaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	ed2d 8b02 	vpush	{d8}
 80017ee:	f5ad 6d52 	sub.w	sp, sp, #3360	; 0xd20
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80017f8:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 80017fc:	6018      	str	r0, [r3, #0]
 80017fe:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001802:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8001806:	6019      	str	r1, [r3, #0]
    int accRow[24];
    int accColumn[32];
    int p = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
    uint8_t accRemScale;
    float alphaTemp[768];
    float temp;
    

    accRemScale = eeData[32] & 0x000F;
 800180e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001812:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	3340      	adds	r3, #64	; 0x40
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	f887 3cf3 	strb.w	r3, [r7, #3315]	; 0xcf3
    accColumnScale = (eeData[32] & 0x00F0) >> 4;
 8001826:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800182a:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	3340      	adds	r3, #64	; 0x40
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	111b      	asrs	r3, r3, #4
 8001836:	b2db      	uxtb	r3, r3
 8001838:	f003 030f 	and.w	r3, r3, #15
 800183c:	f887 3cf2 	strb.w	r3, [r7, #3314]	; 0xcf2
    accRowScale = (eeData[32] & 0x0F00) >> 8;
 8001840:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001844:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	3340      	adds	r3, #64	; 0x40
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	121b      	asrs	r3, r3, #8
 8001850:	b2db      	uxtb	r3, r3
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	f887 3cf1 	strb.w	r3, [r7, #3313]	; 0xcf1
    alphaScale = ((eeData[32] & 0xF000) >> 12) + 30;
 800185a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800185e:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	3340      	adds	r3, #64	; 0x40
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	0b1b      	lsrs	r3, r3, #12
 800186a:	b29b      	uxth	r3, r3
 800186c:	b2db      	uxtb	r3, r3
 800186e:	331e      	adds	r3, #30
 8001870:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    alphaRef = eeData[33];
 8001874:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001878:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	3342      	adds	r3, #66	; 0x42
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	f8c7 3cec 	str.w	r3, [r7, #3308]	; 0xcec
    
    for(int i = 0; i < 6; i++)
 8001886:	2300      	movs	r3, #0
 8001888:	f8c7 3d14 	str.w	r3, [r7, #3348]	; 0xd14
 800188c:	e062      	b.n	8001954 <ExtractAlphaParameters+0x16c>
    {
        p = i * 4;
 800188e:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
        accRow[p + 0] = (eeData[34 + i] & 0x000F);
 8001898:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 800189c:	3322      	adds	r3, #34	; 0x22
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80018a4:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	f003 020f 	and.w	r2, r3, #15
 80018b2:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 80018bc:	443b      	add	r3, r7
 80018be:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 1] = (eeData[34 + i] & 0x00F0) >> 4;
 80018c2:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 80018c6:	3322      	adds	r3, #34	; 0x22
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80018ce:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	4413      	add	r3, r2
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	111a      	asrs	r2, r3, #4
 80018da:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80018de:	3301      	adds	r3, #1
 80018e0:	f002 020f 	and.w	r2, r2, #15
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 80018ea:	443b      	add	r3, r7
 80018ec:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 2] = (eeData[34 + i] & 0x0F00) >> 8;
 80018f0:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 80018f4:	3322      	adds	r3, #34	; 0x22
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80018fc:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	4413      	add	r3, r2
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	121a      	asrs	r2, r3, #8
 8001908:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800190c:	3302      	adds	r3, #2
 800190e:	f002 020f 	and.w	r2, r2, #15
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001918:	443b      	add	r3, r7
 800191a:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 3] = (eeData[34 + i] & 0xF000) >> 12;
 800191e:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8001922:	3322      	adds	r3, #34	; 0x22
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 800192a:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 800192e:	6812      	ldr	r2, [r2, #0]
 8001930:	4413      	add	r3, r2
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	0b1b      	lsrs	r3, r3, #12
 8001936:	b29a      	uxth	r2, r3
 8001938:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800193c:	3303      	adds	r3, #3
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001944:	443b      	add	r3, r7
 8001946:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < 6; i++)
 800194a:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 800194e:	3301      	adds	r3, #1
 8001950:	f8c7 3d14 	str.w	r3, [r7, #3348]	; 0xd14
 8001954:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8001958:	2b05      	cmp	r3, #5
 800195a:	dd98      	ble.n	800188e <ExtractAlphaParameters+0xa6>
    }
    
    for(int i = 0; i < 24; i++)
 800195c:	2300      	movs	r3, #0
 800195e:	f8c7 3d10 	str.w	r3, [r7, #3344]	; 0xd10
 8001962:	e020      	b.n	80019a6 <ExtractAlphaParameters+0x1be>
    {
        if (accRow[i] > 7)
 8001964:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 800196e:	443b      	add	r3, r7
 8001970:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8001974:	2b07      	cmp	r3, #7
 8001976:	dd11      	ble.n	800199c <ExtractAlphaParameters+0x1b4>
        {
            accRow[i] = accRow[i] - 16;
 8001978:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001982:	443b      	add	r3, r7
 8001984:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8001988:	f1a3 0210 	sub.w	r2, r3, #16
 800198c:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001996:	443b      	add	r3, r7
 8001998:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < 24; i++)
 800199c:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 80019a0:	3301      	adds	r3, #1
 80019a2:	f8c7 3d10 	str.w	r3, [r7, #3344]	; 0xd10
 80019a6:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 80019aa:	2b17      	cmp	r3, #23
 80019ac:	ddda      	ble.n	8001964 <ExtractAlphaParameters+0x17c>
        }
    }
    
    for(int i = 0; i < 8; i++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 80019b4:	e062      	b.n	8001a7c <ExtractAlphaParameters+0x294>
    {
        p = i * 4;
 80019b6:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
        accColumn[p + 0] = (eeData[40 + i] & 0x000F);
 80019c0:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80019c4:	3328      	adds	r3, #40	; 0x28
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80019cc:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	f003 010f 	and.w	r1, r3, #15
 80019da:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80019de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80019e2:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 80019e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 1] = (eeData[40 + i] & 0x00F0) >> 4;
 80019ea:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80019ee:	3328      	adds	r3, #40	; 0x28
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80019f6:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	4413      	add	r3, r2
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	111b      	asrs	r3, r3, #4
 8001a02:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 8001a06:	3201      	adds	r2, #1
 8001a08:	f003 010f 	and.w	r1, r3, #15
 8001a0c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001a10:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 2] = (eeData[40 + i] & 0x0F00) >> 8;
 8001a18:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001a1c:	3328      	adds	r3, #40	; 0x28
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001a24:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001a28:	6812      	ldr	r2, [r2, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	121b      	asrs	r3, r3, #8
 8001a30:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 8001a34:	3202      	adds	r2, #2
 8001a36:	f003 010f 	and.w	r1, r3, #15
 8001a3a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001a3e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 3] = (eeData[40 + i] & 0xF000) >> 12;
 8001a46:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001a4a:	3328      	adds	r3, #40	; 0x28
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001a52:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	4413      	add	r3, r2
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	0b1b      	lsrs	r3, r3, #12
 8001a5e:	b299      	uxth	r1, r3
 8001a60:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001a64:	1cda      	adds	r2, r3, #3
 8001a66:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001a6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 8001a72:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001a76:	3301      	adds	r3, #1
 8001a78:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 8001a7c:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001a80:	2b07      	cmp	r3, #7
 8001a82:	dd98      	ble.n	80019b6 <ExtractAlphaParameters+0x1ce>
    }
    
    for(int i = 0; i < 32; i ++)
 8001a84:	2300      	movs	r3, #0
 8001a86:	f8c7 3d08 	str.w	r3, [r7, #3336]	; 0xd08
 8001a8a:	e020      	b.n	8001ace <ExtractAlphaParameters+0x2e6>
    {
        if (accColumn[i] > 7)
 8001a8c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001a90:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a94:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 8001a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a9c:	2b07      	cmp	r3, #7
 8001a9e:	dd11      	ble.n	8001ac4 <ExtractAlphaParameters+0x2dc>
        {
            accColumn[i] = accColumn[i] - 16;
 8001aa0:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001aa4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001aa8:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 8001aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab0:	f1a3 0110 	sub.w	r1, r3, #16
 8001ab4:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001ab8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001abc:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 8001ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 32; i ++)
 8001ac4:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 8001ac8:	3301      	adds	r3, #1
 8001aca:	f8c7 3d08 	str.w	r3, [r7, #3336]	; 0xd08
 8001ace:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 8001ad2:	2b1f      	cmp	r3, #31
 8001ad4:	ddda      	ble.n	8001a8c <ExtractAlphaParameters+0x2a4>
        }
    }

    for(int i = 0; i < 24; i++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 8001adc:	e12a      	b.n	8001d34 <ExtractAlphaParameters+0x54c>
    {
        for(int j = 0; j < 32; j ++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 8001ae4:	e11c      	b.n	8001d20 <ExtractAlphaParameters+0x538>
        {
            p = 32 * i +j;
 8001ae6:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8001aea:	015b      	lsls	r3, r3, #5
 8001aec:	f8d7 2d00 	ldr.w	r2, [r7, #3328]	; 0xd00
 8001af0:	4413      	add	r3, r2
 8001af2:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
            alphaTemp[p] = (eeData[64 + p] & 0x03F0) >> 4;
 8001af6:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001afa:	3340      	adds	r3, #64	; 0x40
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001b02:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	4413      	add	r3, r2
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	111b      	asrs	r3, r3, #4
 8001b0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b12:	ee07 3a90 	vmov	s15, r3
 8001b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b1a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001b1e:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001b22:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	edc3 7a00 	vstr	s15, [r3]
            if (alphaTemp[p] > 31)
 8001b2e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001b32:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001b36:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	edd3 7a00 	vldr	s15, [r3]
 8001b42:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8001b46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4e:	dd17      	ble.n	8001b80 <ExtractAlphaParameters+0x398>
            {
                alphaTemp[p] = alphaTemp[p] - 64;
 8001b50:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001b54:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001b58:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	edd3 7a00 	vldr	s15, [r3]
 8001b64:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8001e98 <ExtractAlphaParameters+0x6b0>
 8001b68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b6c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001b70:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001b74:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	edc3 7a00 	vstr	s15, [r3]
            }
            alphaTemp[p] = alphaTemp[p]*(1 << accRemScale);
 8001b80:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001b84:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001b88:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	ed93 7a00 	vldr	s14, [r3]
 8001b94:	f897 3cf3 	ldrb.w	r3, [r7, #3315]	; 0xcf3
 8001b98:	2201      	movs	r2, #1
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	ee07 3a90 	vmov	s15, r3
 8001ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001baa:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001bae:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001bb2:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
 8001bbe:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001bc8:	443b      	add	r3, r7
 8001bca:	f853 2c94 	ldr.w	r2, [r3, #-148]
 8001bce:	f897 3cf1 	ldrb.w	r3, [r7, #3313]	; 0xcf1
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	f8d7 3cec 	ldr.w	r3, [r7, #3308]	; 0xcec
 8001bd8:	441a      	add	r2, r3
 8001bda:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001bde:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001be2:	f8d7 1d00 	ldr.w	r1, [r7, #3328]	; 0xd00
 8001be6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001bea:	f897 3cf2 	ldrb.w	r3, [r7, #3314]	; 0xcf2
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	ee07 3a90 	vmov	s15, r3
 8001bf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bfc:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001c00:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001c04:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	edd3 7a00 	vldr	s15, [r3]
 8001c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c14:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001c18:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001c1c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = alphaTemp[p] / pow(2,(double)alphaScale);
 8001c28:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001c2c:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001c30:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	edd3 7a00 	vldr	s15, [r3]
 8001c3c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001c40:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 8001c44:	ee07 3a90 	vmov	s15, r3
 8001c48:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001c4c:	eeb0 1b47 	vmov.f64	d1, d7
 8001c50:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001c54:	f016 fefc 	bl	8018a50 <pow>
 8001c58:	eeb0 6b40 	vmov.f64	d6, d0
 8001c5c:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001c60:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c64:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001c68:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001c6c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = alphaTemp[p] - mlx90640->tgc * (mlx90640->cpAlpha[0] + mlx90640->cpAlpha[1])/2;
 8001c78:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001c7c:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001c80:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	ed93 7a00 	vldr	s14, [r3]
 8001c8c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001c90:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	edd3 6a06 	vldr	s13, [r3, #24]
 8001c9a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001c9e:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca8:	ed93 6a94 	vldr	s12, [r3, #592]	; 0x250
 8001cac:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001cb0:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cba:	edd3 7a95 	vldr	s15, [r3, #596]	; 0x254
 8001cbe:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001cc2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001cc6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001cca:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001cce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001cd6:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001cda:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = SCALEALPHA/alphaTemp[p];
 8001ce6:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001cea:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001cee:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	ed93 7a00 	vldr	s14, [r3]
 8001cfa:	eddf 6a68 	vldr	s13, [pc, #416]	; 8001e9c <ExtractAlphaParameters+0x6b4>
 8001cfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d02:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001d06:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001d0a:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < 32; j ++)
 8001d16:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 8001d20:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8001d24:	2b1f      	cmp	r3, #31
 8001d26:	f77f aede 	ble.w	8001ae6 <ExtractAlphaParameters+0x2fe>
    for(int i = 0; i < 24; i++)
 8001d2a:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8001d2e:	3301      	adds	r3, #1
 8001d30:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 8001d34:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8001d38:	2b17      	cmp	r3, #23
 8001d3a:	f77f aed0 	ble.w	8001ade <ExtractAlphaParameters+0x2f6>
        }
    }
    
    temp = alphaTemp[0];
 8001d3e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001d42:	f6a3 5314 	subw	r3, r3, #3348	; 0xd14
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8001d4c:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < 768; i++)
 8001d4e:	2301      	movs	r3, #1
 8001d50:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 8001d54:	e023      	b.n	8001d9e <ExtractAlphaParameters+0x5b6>
    {
        if (alphaTemp[i] > temp)
 8001d56:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001d5a:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001d5e:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	edd3 7a00 	vldr	s15, [r3]
 8001d6a:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8001d6e:	ed93 7a00 	vldr	s14, [r3]
 8001d72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7a:	d50b      	bpl.n	8001d94 <ExtractAlphaParameters+0x5ac>
        {
            temp = alphaTemp[i];
 8001d7c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001d80:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001d84:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8001d92:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < 768; i++)
 8001d94:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8001d98:	3301      	adds	r3, #1
 8001d9a:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 8001d9e:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8001da2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001da6:	dbd6      	blt.n	8001d56 <ExtractAlphaParameters+0x56e>
        }
    }
    
    alphaScale = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    while(temp < 32768)
 8001dae:	e00e      	b.n	8001dce <ExtractAlphaParameters+0x5e6>
    {
        temp = temp*2;
 8001db0:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8001db4:	edd3 7a00 	vldr	s15, [r3]
 8001db8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001dbc:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8001dc0:	edc3 7a00 	vstr	s15, [r3]
        alphaScale = alphaScale + 1;
 8001dc4:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 8001dc8:	3301      	adds	r3, #1
 8001dca:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    while(temp < 32768)
 8001dce:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8001dd2:	edd3 7a00 	vldr	s15, [r3]
 8001dd6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001ea0 <ExtractAlphaParameters+0x6b8>
 8001dda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de2:	d4e5      	bmi.n	8001db0 <ExtractAlphaParameters+0x5c8>
    } 
    
    for(int i = 0; i < 768; i++)
 8001de4:	2300      	movs	r3, #0
 8001de6:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
 8001dea:	e03f      	b.n	8001e6c <ExtractAlphaParameters+0x684>
    {
        temp = alphaTemp[i] * pow(2,(double)alphaScale);        
 8001dec:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001df0:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001df4:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	edd3 7a00 	vldr	s15, [r3]
 8001e00:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001e04:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 8001e08:	ee07 3a90 	vmov	s15, r3
 8001e0c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001e10:	eeb0 1b47 	vmov.f64	d1, d7
 8001e14:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001e18:	f016 fe1a 	bl	8018a50 <pow>
 8001e1c:	eeb0 7b40 	vmov.f64	d7, d0
 8001e20:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001e24:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e28:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8001e2c:	edc3 7a00 	vstr	s15, [r3]
        mlx90640->alpha[i] = (temp + 0.5f);        
 8001e30:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8001e34:	edd3 7a00 	vldr	s15, [r3]
 8001e38:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001e3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e44:	ee17 3a90 	vmov	r3, s15
 8001e48:	b299      	uxth	r1, r3
 8001e4a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001e4e:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8001e58:	3324      	adds	r3, #36	; 0x24
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	4413      	add	r3, r2
 8001e5e:	460a      	mov	r2, r1
 8001e60:	805a      	strh	r2, [r3, #2]
    for(int i = 0; i < 768; i++)
 8001e62:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8001e66:	3301      	adds	r3, #1
 8001e68:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
 8001e6c:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8001e70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e74:	dbba      	blt.n	8001dec <ExtractAlphaParameters+0x604>
        
    } 
    
    mlx90640->alphaScale = alphaScale;      
 8001e76:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001e7a:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f897 2d1f 	ldrb.w	r2, [r7, #3359]	; 0xd1f
 8001e84:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
   
}
 8001e88:	bf00      	nop
 8001e8a:	f507 6752 	add.w	r7, r7, #3360	; 0xd20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	ecbd 8b02 	vpop	{d8}
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	42800000 	.word	0x42800000
 8001e9c:	358637bd 	.word	0x358637bd
 8001ea0:	47000000 	.word	0x47000000

08001ea4 <ExtractOffsetParameters>:

//------------------------------------------------------------------------------

void ExtractOffsetParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b0c5      	sub	sp, #276	; 0x114
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001eae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001eb2:	6018      	str	r0, [r3, #0]
 8001eb4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001eb8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ebc:	6019      	str	r1, [r3, #0]
    int occRow[24];
    int occColumn[32];
    int p = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    uint8_t occRowScale;
    uint8_t occColumnScale;
    uint8_t occRemScale;
    

    occRemScale = (eeData[16] & 0x000F);
 8001ec4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001ec8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	3320      	adds	r3, #32
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	f003 030f 	and.w	r3, r3, #15
 8001ed8:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
    occColumnScale = (eeData[16] & 0x00F0) >> 4;
 8001edc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001ee0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	3320      	adds	r3, #32
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	111b      	asrs	r3, r3, #4
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    occRowScale = (eeData[16] & 0x0F00) >> 8;
 8001ef6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001efa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	3320      	adds	r3, #32
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	121b      	asrs	r3, r3, #8
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	f003 030f 	and.w	r3, r3, #15
 8001f0c:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
    offsetRef = eeData[17];
 8001f10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001f14:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	3322      	adds	r3, #34	; 0x22
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
    if (offsetRef > 32767)
    {
        offsetRef = offsetRef - 65536;
    }
    
    for(int i = 0; i < 6; i++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001f28:	e062      	b.n	8001ff0 <ExtractOffsetParameters+0x14c>
    {
        p = i * 4;
 8001f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        occRow[p + 0] = (eeData[18 + i] & 0x000F);
 8001f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001f38:	3312      	adds	r3, #18
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001f40:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001f44:	6812      	ldr	r2, [r2, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	f003 020f 	and.w	r2, r3, #15
 8001f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001f58:	443b      	add	r3, r7
 8001f5a:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 1] = (eeData[18 + i] & 0x00F0) >> 4;
 8001f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001f62:	3312      	adds	r3, #18
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001f6a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001f6e:	6812      	ldr	r2, [r2, #0]
 8001f70:	4413      	add	r3, r2
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	111a      	asrs	r2, r3, #4
 8001f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	f002 020f 	and.w	r2, r2, #15
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001f86:	443b      	add	r3, r7
 8001f88:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 2] = (eeData[18 + i] & 0x0F00) >> 8;
 8001f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001f90:	3312      	adds	r3, #18
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001f98:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	121a      	asrs	r2, r3, #8
 8001fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fa8:	3302      	adds	r3, #2
 8001faa:	f002 020f 	and.w	r2, r2, #15
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001fb4:	443b      	add	r3, r7
 8001fb6:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 3] = (eeData[18 + i] & 0xF000) >> 12;
 8001fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001fbe:	3312      	adds	r3, #18
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001fc6:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	4413      	add	r3, r2
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	0b1b      	lsrs	r3, r3, #12
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fd8:	3303      	adds	r3, #3
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001fe0:	443b      	add	r3, r7
 8001fe2:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 6; i++)
 8001fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001fea:	3301      	adds	r3, #1
 8001fec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001ff4:	2b05      	cmp	r3, #5
 8001ff6:	dd98      	ble.n	8001f2a <ExtractOffsetParameters+0x86>
    }
    
    for(int i = 0; i < 24; i++)
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001ffe:	e020      	b.n	8002042 <ExtractOffsetParameters+0x19e>
    {
        if (occRow[i] > 7)
 8002000:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800200a:	443b      	add	r3, r7
 800200c:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8002010:	2b07      	cmp	r3, #7
 8002012:	dd11      	ble.n	8002038 <ExtractOffsetParameters+0x194>
        {
            occRow[i] = occRow[i] - 16;
 8002014:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800201e:	443b      	add	r3, r7
 8002020:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8002024:	f1a3 0210 	sub.w	r2, r3, #16
 8002028:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002032:	443b      	add	r3, r7
 8002034:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 24; i++)
 8002038:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800203c:	3301      	adds	r3, #1
 800203e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002042:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002046:	2b17      	cmp	r3, #23
 8002048:	ddda      	ble.n	8002000 <ExtractOffsetParameters+0x15c>
        }
    }
    
    for(int i = 0; i < 8; i++)
 800204a:	2300      	movs	r3, #0
 800204c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002050:	e062      	b.n	8002118 <ExtractOffsetParameters+0x274>
    {
        p = i * 4;
 8002052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        occColumn[p + 0] = (eeData[24 + i] & 0x000F);
 800205c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002060:	3318      	adds	r3, #24
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002068:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	4413      	add	r3, r2
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	f003 010f 	and.w	r1, r3, #15
 8002076:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800207a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800207e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 1] = (eeData[24 + i] & 0x00F0) >> 4;
 8002086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800208a:	3318      	adds	r3, #24
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002092:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	4413      	add	r3, r2
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	111b      	asrs	r3, r3, #4
 800209e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80020a2:	3201      	adds	r2, #1
 80020a4:	f003 010f 	and.w	r1, r3, #15
 80020a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80020ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 2] = (eeData[24 + i] & 0x0F00) >> 8;
 80020b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80020b8:	3318      	adds	r3, #24
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80020c0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	4413      	add	r3, r2
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	121b      	asrs	r3, r3, #8
 80020cc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80020d0:	3202      	adds	r2, #2
 80020d2:	f003 010f 	and.w	r1, r3, #15
 80020d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80020da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 3] = (eeData[24 + i] & 0xF000) >> 12;
 80020e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80020e6:	3318      	adds	r3, #24
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80020ee:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	4413      	add	r3, r2
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	0b1b      	lsrs	r3, r3, #12
 80020fa:	b299      	uxth	r1, r3
 80020fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002100:	1cda      	adds	r2, r3, #3
 8002102:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002106:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800210a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 800210e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002112:	3301      	adds	r3, #1
 8002114:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800211c:	2b07      	cmp	r3, #7
 800211e:	dd98      	ble.n	8002052 <ExtractOffsetParameters+0x1ae>
    }
    
    for(int i = 0; i < 32; i ++)
 8002120:	2300      	movs	r3, #0
 8002122:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002126:	e020      	b.n	800216a <ExtractOffsetParameters+0x2c6>
    {
        if (occColumn[i] > 7)
 8002128:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800212c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002130:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8002134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002138:	2b07      	cmp	r3, #7
 800213a:	dd11      	ble.n	8002160 <ExtractOffsetParameters+0x2bc>
        {
            occColumn[i] = occColumn[i] - 16;
 800213c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002140:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002144:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8002148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800214c:	f1a3 0110 	sub.w	r1, r3, #16
 8002150:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002154:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002158:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800215c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 32; i ++)
 8002160:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002164:	3301      	adds	r3, #1
 8002166:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800216a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800216e:	2b1f      	cmp	r3, #31
 8002170:	ddda      	ble.n	8002128 <ExtractOffsetParameters+0x284>
        }
    }

    for(int i = 0; i < 24; i++)
 8002172:	2300      	movs	r3, #0
 8002174:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002178:	e0c0      	b.n	80022fc <ExtractOffsetParameters+0x458>
    {
        for(int j = 0; j < 32; j ++)
 800217a:	2300      	movs	r3, #0
 800217c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002180:	e0b2      	b.n	80022e8 <ExtractOffsetParameters+0x444>
        {
            p = 32 * i +j;
 8002182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002186:	015b      	lsls	r3, r3, #5
 8002188:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800218c:	4413      	add	r3, r2
 800218e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
            mlx90640->offset[p] = (eeData[64 + p] & 0xFC00) >> 10;
 8002192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002196:	3340      	adds	r3, #64	; 0x40
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800219e:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	4413      	add	r3, r2
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	0a9b      	lsrs	r3, r3, #10
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	b219      	sxth	r1, r3
 80021ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80021b2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021bc:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4413      	add	r3, r2
 80021c4:	460a      	mov	r2, r1
 80021c6:	809a      	strh	r2, [r3, #4]
            if (mlx90640->offset[p] > 31)
 80021c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80021cc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021d6:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	4413      	add	r3, r2
 80021de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021e2:	2b1f      	cmp	r3, #31
 80021e4:	dd1d      	ble.n	8002222 <ExtractOffsetParameters+0x37e>
            {
                mlx90640->offset[p] = mlx90640->offset[p] - 64;
 80021e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80021ea:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021f4:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	4413      	add	r3, r2
 80021fc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002200:	b29b      	uxth	r3, r3
 8002202:	3b40      	subs	r3, #64	; 0x40
 8002204:	b29b      	uxth	r3, r3
 8002206:	b219      	sxth	r1, r3
 8002208:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800220c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002216:	f503 7349 	add.w	r3, r3, #804	; 0x324
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	4413      	add	r3, r2
 800221e:	460a      	mov	r2, r1
 8002220:	809a      	strh	r2, [r3, #4]
            }
            mlx90640->offset[p] = mlx90640->offset[p]*(1 << occRemScale);
 8002222:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002226:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002230:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4413      	add	r3, r2
 8002238:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800223c:	461a      	mov	r2, r3
 800223e:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	b219      	sxth	r1, r3
 8002248:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800224c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002256:	f503 7349 	add.w	r3, r3, #804	; 0x324
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4413      	add	r3, r2
 800225e:	460a      	mov	r2, r1
 8002260:	809a      	strh	r2, [r3, #4]
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
 8002262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800226c:	443b      	add	r3, r7
 800226e:	f853 2c84 	ldr.w	r2, [r3, #-132]
 8002272:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	b29a      	uxth	r2, r3
 800227c:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002280:	4413      	add	r3, r2
 8002282:	b29a      	uxth	r2, r3
 8002284:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002288:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800228c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8002290:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002294:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8002298:	fa01 f303 	lsl.w	r3, r1, r3
 800229c:	b29b      	uxth	r3, r3
 800229e:	4413      	add	r3, r2
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022a6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022aa:	6819      	ldr	r1, [r3, #0]
 80022ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b0:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	440b      	add	r3, r1
 80022b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	4413      	add	r3, r2
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	b219      	sxth	r1, r3
 80022c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d2:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4413      	add	r3, r2
 80022da:	460a      	mov	r2, r1
 80022dc:	809a      	strh	r2, [r3, #4]
        for(int j = 0; j < 32; j ++)
 80022de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80022e2:	3301      	adds	r3, #1
 80022e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80022e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80022ec:	2b1f      	cmp	r3, #31
 80022ee:	f77f af48 	ble.w	8002182 <ExtractOffsetParameters+0x2de>
    for(int i = 0; i < 24; i++)
 80022f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022f6:	3301      	adds	r3, #1
 80022f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80022fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002300:	2b17      	cmp	r3, #23
 8002302:	f77f af3a 	ble.w	800217a <ExtractOffsetParameters+0x2d6>
        }
    }
}
 8002306:	bf00      	nop
 8002308:	bf00      	nop
 800230a:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <ExtractKtaPixelParameters>:

//------------------------------------------------------------------------------

void ExtractKtaPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	ed2d 8b02 	vpush	{d8}
 800231e:	f6ad 4d38 	subw	sp, sp, #3128	; 0xc38
 8002322:	af00      	add	r7, sp, #0
 8002324:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002328:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 800232c:	6018      	str	r0, [r3, #0]
 800232e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002332:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002336:	6019      	str	r1, [r3, #0]
    int p = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
    uint8_t ktaScale2;
    uint8_t split;
    float ktaTemp[768];
    float temp;
    
    KtaRoCo = (eeData[54] & 0xFF00) >> 8;
 800233e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002342:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	336c      	adds	r3, #108	; 0x6c
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	b29b      	uxth	r3, r3
 8002350:	f887 3c1b 	strb.w	r3, [r7, #3099]	; 0xc1b
    if (KtaRoCo > 127)
    {
        KtaRoCo = KtaRoCo - 256;
    }
    KtaRC[0] = KtaRoCo;
 8002354:	f897 3c1b 	ldrb.w	r3, [r7, #3099]	; 0xc1b
 8002358:	f887 3c10 	strb.w	r3, [r7, #3088]	; 0xc10
    
    KtaReCo = (eeData[54] & 0x00FF);
 800235c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002360:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	336c      	adds	r3, #108	; 0x6c
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	f887 3c1a 	strb.w	r3, [r7, #3098]	; 0xc1a
    if (KtaReCo > 127)
    {
        KtaReCo = KtaReCo - 256;
    }
    KtaRC[2] = KtaReCo;
 800236e:	f897 3c1a 	ldrb.w	r3, [r7, #3098]	; 0xc1a
 8002372:	f887 3c12 	strb.w	r3, [r7, #3090]	; 0xc12
      
    KtaRoCe = (eeData[55] & 0xFF00) >> 8;
 8002376:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800237a:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	336e      	adds	r3, #110	; 0x6e
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	0a1b      	lsrs	r3, r3, #8
 8002386:	b29b      	uxth	r3, r3
 8002388:	f887 3c19 	strb.w	r3, [r7, #3097]	; 0xc19
    if (KtaRoCe > 127)
    {
        KtaRoCe = KtaRoCe - 256;
    }
    KtaRC[1] = KtaRoCe;
 800238c:	f897 3c19 	ldrb.w	r3, [r7, #3097]	; 0xc19
 8002390:	f887 3c11 	strb.w	r3, [r7, #3089]	; 0xc11
      
    KtaReCe = (eeData[55] & 0x00FF);
 8002394:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002398:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	336e      	adds	r3, #110	; 0x6e
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	f887 3c18 	strb.w	r3, [r7, #3096]	; 0xc18
    if (KtaReCe > 127)
    {
        KtaReCe = KtaReCe - 256;
    }
    KtaRC[3] = KtaReCe;
 80023a6:	f897 3c18 	ldrb.w	r3, [r7, #3096]	; 0xc18
 80023aa:	f887 3c13 	strb.w	r3, [r7, #3091]	; 0xc13
  
    ktaScale1 = ((eeData[56] & 0x00F0) >> 4) + 8;
 80023ae:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80023b2:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	3370      	adds	r3, #112	; 0x70
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	111b      	asrs	r3, r3, #4
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f003 030f 	and.w	r3, r3, #15
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	3308      	adds	r3, #8
 80023c8:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    ktaScale2 = (eeData[56] & 0x000F);
 80023cc:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80023d0:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	3370      	adds	r3, #112	; 0x70
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	f003 030f 	and.w	r3, r3, #15
 80023e0:	f887 3c17 	strb.w	r3, [r7, #3095]	; 0xc17

    for(int i = 0; i < 24; i++)
 80023e4:	2300      	movs	r3, #0
 80023e6:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 80023ea:	e0e6      	b.n	80025ba <ExtractKtaPixelParameters+0x2a2>
    {
        for(int j = 0; j < 32; j ++)
 80023ec:	2300      	movs	r3, #0
 80023ee:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 80023f2:	e0d8      	b.n	80025a6 <ExtractKtaPixelParameters+0x28e>
        {
            p = 32 * i +j;
 80023f4:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 80023f8:	015b      	lsls	r3, r3, #5
 80023fa:	f8d7 2c28 	ldr.w	r2, [r7, #3112]	; 0xc28
 80023fe:	4413      	add	r3, r2
 8002400:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
            split = 2*(p/32 - (p/64)*2) + p%2;
 8002404:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002408:	2b00      	cmp	r3, #0
 800240a:	da00      	bge.n	800240e <ExtractKtaPixelParameters+0xf6>
 800240c:	331f      	adds	r3, #31
 800240e:	115b      	asrs	r3, r3, #5
 8002410:	461a      	mov	r2, r3
 8002412:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002416:	2b00      	cmp	r3, #0
 8002418:	da00      	bge.n	800241c <ExtractKtaPixelParameters+0x104>
 800241a:	333f      	adds	r3, #63	; 0x3f
 800241c:	119b      	asrs	r3, r3, #6
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	b2db      	uxtb	r3, r3
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	b2da      	uxtb	r2, r3
 8002428:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800242c:	2b00      	cmp	r3, #0
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	bfb8      	it	lt
 8002434:	425b      	neglt	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	4413      	add	r3, r2
 800243a:	f887 3c16 	strb.w	r3, [r7, #3094]	; 0xc16
            ktaTemp[p] = (eeData[64 + p] & 0x000E) >> 1;
 800243e:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002442:	3340      	adds	r3, #64	; 0x40
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	f607 4238 	addw	r2, r7, #3128	; 0xc38
 800244a:	f6a2 422c 	subw	r2, r2, #3116	; 0xc2c
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	4413      	add	r3, r2
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	105b      	asrs	r3, r3, #1
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002462:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002466:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800246a:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	edc3 7a00 	vstr	s15, [r3]
            if (ktaTemp[p] > 3)
 8002476:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800247a:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800247e:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	edd3 7a00 	vldr	s15, [r3]
 800248a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800248e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002496:	dd17      	ble.n	80024c8 <ExtractKtaPixelParameters+0x1b0>
            {
                ktaTemp[p] = ktaTemp[p] - 8;
 8002498:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800249c:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80024a0:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	edd3 7a00 	vldr	s15, [r3]
 80024ac:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80024b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024b4:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80024b8:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80024bc:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	edc3 7a00 	vstr	s15, [r3]
            }
            ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
 80024c8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80024cc:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80024d0:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	ed93 7a00 	vldr	s14, [r3]
 80024dc:	f897 3c17 	ldrb.w	r3, [r7, #3095]	; 0xc17
 80024e0:	2201      	movs	r2, #1
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	ee07 3a90 	vmov	s15, r3
 80024ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f2:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80024f6:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80024fa:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = KtaRC[split] + ktaTemp[p];
 8002506:	f897 3c16 	ldrb.w	r3, [r7, #3094]	; 0xc16
 800250a:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 800250e:	f107 0208 	add.w	r2, r7, #8
 8002512:	4413      	add	r3, r2
 8002514:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 8002518:	ee07 3a90 	vmov	s15, r3
 800251c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002520:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002524:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002528:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	edd3 7a00 	vldr	s15, [r3]
 8002534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002538:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800253c:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002540:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = ktaTemp[p] / pow(2,(double)ktaScale1);
 800254c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002550:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002554:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	edd3 7a00 	vldr	s15, [r3]
 8002560:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002564:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8002568:	ee07 3a90 	vmov	s15, r3
 800256c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002570:	eeb0 1b47 	vmov.f64	d1, d7
 8002574:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002578:	f016 fa6a 	bl	8018a50 <pow>
 800257c:	eeb0 6b40 	vmov.f64	d6, d0
 8002580:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002584:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002588:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800258c:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002590:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < 32; j ++)
 800259c:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 80025a0:	3301      	adds	r3, #1
 80025a2:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 80025a6:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 80025aa:	2b1f      	cmp	r3, #31
 80025ac:	f77f af22 	ble.w	80023f4 <ExtractKtaPixelParameters+0xdc>
    for(int i = 0; i < 24; i++)
 80025b0:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 80025b4:	3301      	adds	r3, #1
 80025b6:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 80025ba:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 80025be:	2b17      	cmp	r3, #23
 80025c0:	f77f af14 	ble.w	80023ec <ExtractKtaPixelParameters+0xd4>
            //ktaTemp[p] = ktaTemp[p] * mlx90640->offset[p];
        }
    }
    
    temp = fabs(ktaTemp[0]);
 80025c4:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80025c8:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 80025cc:	edd3 7a00 	vldr	s15, [r3]
 80025d0:	eef0 7ae7 	vabs.f32	s15, s15
 80025d4:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80025d8:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 80025dc:	2301      	movs	r3, #1
 80025de:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 80025e2:	e029      	b.n	8002638 <ExtractKtaPixelParameters+0x320>
    {
        if (fabs(ktaTemp[i]) > temp)
 80025e4:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80025e8:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80025ec:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	edd3 7a00 	vldr	s15, [r3]
 80025f8:	eef0 7ae7 	vabs.f32	s15, s15
 80025fc:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8002600:	ed93 7a00 	vldr	s14, [r3]
 8002604:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260c:	d50f      	bpl.n	800262e <ExtractKtaPixelParameters+0x316>
        {
            temp = fabs(ktaTemp[i]);
 800260e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002612:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002616:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	edd3 7a00 	vldr	s15, [r3]
 8002622:	eef0 7ae7 	vabs.f32	s15, s15
 8002626:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800262a:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 800262e:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8002632:	3301      	adds	r3, #1
 8002634:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8002638:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 800263c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002640:	dbd0      	blt.n	80025e4 <ExtractKtaPixelParameters+0x2cc>
        }
    }
    
    ktaScale1 = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    while(temp < 64)
 8002648:	e00e      	b.n	8002668 <ExtractKtaPixelParameters+0x350>
    {
        temp = temp*2;
 800264a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800264e:	edd3 7a00 	vldr	s15, [r3]
 8002652:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002656:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800265a:	edc3 7a00 	vstr	s15, [r3]
        ktaScale1 = ktaScale1 + 1;
 800265e:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8002662:	3301      	adds	r3, #1
 8002664:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    while(temp < 64)
 8002668:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800266c:	edd3 7a00 	vldr	s15, [r3]
 8002670:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800277c <ExtractKtaPixelParameters+0x464>
 8002674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267c:	d4e5      	bmi.n	800264a <ExtractKtaPixelParameters+0x332>
    }    
     
    for(int i = 0; i < 768; i++)
 800267e:	2300      	movs	r3, #0
 8002680:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8002684:	e064      	b.n	8002750 <ExtractKtaPixelParameters+0x438>
    {
        temp = ktaTemp[i] * pow(2,(double)ktaScale1);
 8002686:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800268a:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800268e:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	edd3 7a00 	vldr	s15, [r3]
 800269a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800269e:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 80026a2:	ee07 3a90 	vmov	s15, r3
 80026a6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80026aa:	eeb0 1b47 	vmov.f64	d1, d7
 80026ae:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80026b2:	f016 f9cd 	bl	8018a50 <pow>
 80026b6:	eeb0 7b40 	vmov.f64	d7, d0
 80026ba:	ee28 7b07 	vmul.f64	d7, d8, d7
 80026be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80026c2:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80026c6:	edc3 7a00 	vstr	s15, [r3]
        if (temp < 0)
 80026ca:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80026ce:	edd3 7a00 	vldr	s15, [r3]
 80026d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026da:	d51a      	bpl.n	8002712 <ExtractKtaPixelParameters+0x3fa>
        {
            mlx90640->kta[i] = (temp - 0.5f);
 80026dc:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80026e0:	edd3 7a00 	vldr	s15, [r3]
 80026e4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80026e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80026ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026f0:	edc7 7a01 	vstr	s15, [r7, #4]
 80026f4:	793b      	ldrb	r3, [r7, #4]
 80026f6:	b259      	sxtb	r1, r3
 80026f8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80026fc:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8002706:	4413      	add	r3, r2
 8002708:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 800270c:	460a      	mov	r2, r1
 800270e:	701a      	strb	r2, [r3, #0]
 8002710:	e019      	b.n	8002746 <ExtractKtaPixelParameters+0x42e>
        }
        else
        {
            mlx90640->kta[i] = (temp + 0.5f);
 8002712:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8002716:	edd3 7a00 	vldr	s15, [r3]
 800271a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800271e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002722:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002726:	edc7 7a01 	vstr	s15, [r7, #4]
 800272a:	793b      	ldrb	r3, [r7, #4]
 800272c:	b259      	sxtb	r1, r3
 800272e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002732:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 800273c:	4413      	add	r3, r2
 800273e:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8002742:	460a      	mov	r2, r1
 8002744:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 768; i++)
 8002746:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 800274a:	3301      	adds	r3, #1
 800274c:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8002750:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8002754:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002758:	db95      	blt.n	8002686 <ExtractKtaPixelParameters+0x36e>
        }        
        
    } 
    
    mlx90640->ktaScale = ktaScale1;           
 800275a:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800275e:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f897 2c37 	ldrb.w	r2, [r7, #3127]	; 0xc37
 8002768:	f883 2f4c 	strb.w	r2, [r3, #3916]	; 0xf4c
}
 800276c:	bf00      	nop
 800276e:	f607 4738 	addw	r7, r7, #3128	; 0xc38
 8002772:	46bd      	mov	sp, r7
 8002774:	ecbd 8b02 	vpop	{d8}
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	42800000 	.word	0x42800000

08002780 <ExtractKvPixelParameters>:


//------------------------------------------------------------------------------

void ExtractKvPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	ed2d 8b02 	vpush	{d8}
 8002786:	f6ad 4d38 	subw	sp, sp, #3128	; 0xc38
 800278a:	af00      	add	r7, sp, #0
 800278c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002790:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002794:	6018      	str	r0, [r3, #0]
 8002796:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800279a:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 800279e:	6019      	str	r1, [r3, #0]
    int p = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
    uint8_t kvScale;
    uint8_t split;
    float kvTemp[768];
    float temp;

    KvRoCo = (eeData[52] & 0xF000) >> 12;
 80027a6:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80027aa:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	3368      	adds	r3, #104	; 0x68
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	0b1b      	lsrs	r3, r3, #12
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    if (KvRoCo > 7)
 80027bc:	f997 3c37 	ldrsb.w	r3, [r7, #3127]	; 0xc37
 80027c0:	2b07      	cmp	r3, #7
 80027c2:	dd05      	ble.n	80027d0 <ExtractKvPixelParameters+0x50>
    {
        KvRoCo = KvRoCo - 16;
 80027c4:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 80027c8:	3b10      	subs	r3, #16
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    }
    KvT[0] = KvRoCo;
 80027d0:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 80027d4:	f887 3c10 	strb.w	r3, [r7, #3088]	; 0xc10
    
    KvReCo = (eeData[52] & 0x0F00) >> 8;
 80027d8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80027dc:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	3368      	adds	r3, #104	; 0x68
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	121b      	asrs	r3, r3, #8
 80027e8:	b25b      	sxtb	r3, r3
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	f887 3c35 	strb.w	r3, [r7, #3125]	; 0xc35
    if (KvReCo > 7)
 80027f2:	f997 3c35 	ldrsb.w	r3, [r7, #3125]	; 0xc35
 80027f6:	2b07      	cmp	r3, #7
 80027f8:	dd05      	ble.n	8002806 <ExtractKvPixelParameters+0x86>
    {
        KvReCo = KvReCo - 16;
 80027fa:	f897 3c35 	ldrb.w	r3, [r7, #3125]	; 0xc35
 80027fe:	3b10      	subs	r3, #16
 8002800:	b2db      	uxtb	r3, r3
 8002802:	f887 3c35 	strb.w	r3, [r7, #3125]	; 0xc35
    }
    KvT[2] = KvReCo;
 8002806:	f897 3c35 	ldrb.w	r3, [r7, #3125]	; 0xc35
 800280a:	f887 3c12 	strb.w	r3, [r7, #3090]	; 0xc12
      
    KvRoCe = (eeData[52] & 0x00F0) >> 4;
 800280e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002812:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	3368      	adds	r3, #104	; 0x68
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	111b      	asrs	r3, r3, #4
 800281e:	b25b      	sxtb	r3, r3
 8002820:	f003 030f 	and.w	r3, r3, #15
 8002824:	f887 3c36 	strb.w	r3, [r7, #3126]	; 0xc36
    if (KvRoCe > 7)
 8002828:	f997 3c36 	ldrsb.w	r3, [r7, #3126]	; 0xc36
 800282c:	2b07      	cmp	r3, #7
 800282e:	dd05      	ble.n	800283c <ExtractKvPixelParameters+0xbc>
    {
        KvRoCe = KvRoCe - 16;
 8002830:	f897 3c36 	ldrb.w	r3, [r7, #3126]	; 0xc36
 8002834:	3b10      	subs	r3, #16
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f887 3c36 	strb.w	r3, [r7, #3126]	; 0xc36
    }
    KvT[1] = KvRoCe;
 800283c:	f897 3c36 	ldrb.w	r3, [r7, #3126]	; 0xc36
 8002840:	f887 3c11 	strb.w	r3, [r7, #3089]	; 0xc11
      
    KvReCe = (eeData[52] & 0x000F);
 8002844:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002848:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	3368      	adds	r3, #104	; 0x68
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	b25b      	sxtb	r3, r3
 8002854:	f003 030f 	and.w	r3, r3, #15
 8002858:	f887 3c34 	strb.w	r3, [r7, #3124]	; 0xc34
    if (KvReCe > 7)
 800285c:	f997 3c34 	ldrsb.w	r3, [r7, #3124]	; 0xc34
 8002860:	2b07      	cmp	r3, #7
 8002862:	dd05      	ble.n	8002870 <ExtractKvPixelParameters+0xf0>
    {
        KvReCe = KvReCe - 16;
 8002864:	f897 3c34 	ldrb.w	r3, [r7, #3124]	; 0xc34
 8002868:	3b10      	subs	r3, #16
 800286a:	b2db      	uxtb	r3, r3
 800286c:	f887 3c34 	strb.w	r3, [r7, #3124]	; 0xc34
    }
    KvT[3] = KvReCe;
 8002870:	f897 3c34 	ldrb.w	r3, [r7, #3124]	; 0xc34
 8002874:	f887 3c13 	strb.w	r3, [r7, #3091]	; 0xc13
  
    kvScale = (eeData[56] & 0x0F00) >> 8;
 8002878:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800287c:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	3370      	adds	r3, #112	; 0x70
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	121b      	asrs	r3, r3, #8
 8002888:	b2db      	uxtb	r3, r3
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33


    for(int i = 0; i < 24; i++)
 8002892:	2300      	movs	r3, #0
 8002894:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8002898:	e075      	b.n	8002986 <ExtractKvPixelParameters+0x206>
    {
        for(int j = 0; j < 32; j ++)
 800289a:	2300      	movs	r3, #0
 800289c:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 80028a0:	e068      	b.n	8002974 <ExtractKvPixelParameters+0x1f4>
        {
            p = 32 * i +j;
 80028a2:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 80028a6:	015b      	lsls	r3, r3, #5
 80028a8:	f8d7 2c24 	ldr.w	r2, [r7, #3108]	; 0xc24
 80028ac:	4413      	add	r3, r2
 80028ae:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
            split = 2*(p/32 - (p/64)*2) + p%2;
 80028b2:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	da00      	bge.n	80028bc <ExtractKvPixelParameters+0x13c>
 80028ba:	331f      	adds	r3, #31
 80028bc:	115b      	asrs	r3, r3, #5
 80028be:	461a      	mov	r2, r3
 80028c0:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	da00      	bge.n	80028ca <ExtractKvPixelParameters+0x14a>
 80028c8:	333f      	adds	r3, #63	; 0x3f
 80028ca:	119b      	asrs	r3, r3, #6
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	bfb8      	it	lt
 80028e2:	425b      	neglt	r3, r3
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	4413      	add	r3, r2
 80028e8:	f887 3c17 	strb.w	r3, [r7, #3095]	; 0xc17
            kvTemp[p] = KvT[split];
 80028ec:	f897 3c17 	ldrb.w	r3, [r7, #3095]	; 0xc17
 80028f0:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 80028f4:	f107 0208 	add.w	r2, r7, #8
 80028f8:	4413      	add	r3, r2
 80028fa:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 80028fe:	ee07 3a90 	vmov	s15, r3
 8002902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002906:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800290a:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800290e:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	edc3 7a00 	vstr	s15, [r3]
            kvTemp[p] = kvTemp[p] / pow(2,(double)kvScale);
 800291a:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800291e:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002922:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	edd3 7a00 	vldr	s15, [r3]
 800292e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002932:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 8002936:	ee07 3a90 	vmov	s15, r3
 800293a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800293e:	eeb0 1b47 	vmov.f64	d1, d7
 8002942:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002946:	f016 f883 	bl	8018a50 <pow>
 800294a:	eeb0 6b40 	vmov.f64	d6, d0
 800294e:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002952:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002956:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800295a:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800295e:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < 32; j ++)
 800296a:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 800296e:	3301      	adds	r3, #1
 8002970:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8002974:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8002978:	2b1f      	cmp	r3, #31
 800297a:	dd92      	ble.n	80028a2 <ExtractKvPixelParameters+0x122>
    for(int i = 0; i < 24; i++)
 800297c:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8002980:	3301      	adds	r3, #1
 8002982:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8002986:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 800298a:	2b17      	cmp	r3, #23
 800298c:	dd85      	ble.n	800289a <ExtractKvPixelParameters+0x11a>
            //kvTemp[p] = kvTemp[p] * mlx90640->offset[p];
        }
    }
    
    temp = fabs(kvTemp[0]);
 800298e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002992:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8002996:	edd3 7a00 	vldr	s15, [r3]
 800299a:	eef0 7ae7 	vabs.f32	s15, s15
 800299e:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 80029a2:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 80029a6:	2301      	movs	r3, #1
 80029a8:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 80029ac:	e029      	b.n	8002a02 <ExtractKvPixelParameters+0x282>
    {
        if (fabs(kvTemp[i]) > temp)
 80029ae:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80029b2:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80029b6:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	edd3 7a00 	vldr	s15, [r3]
 80029c2:	eef0 7ae7 	vabs.f32	s15, s15
 80029c6:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 80029ca:	ed93 7a00 	vldr	s14, [r3]
 80029ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d6:	d50f      	bpl.n	80029f8 <ExtractKvPixelParameters+0x278>
        {
            temp = fabs(kvTemp[i]);
 80029d8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80029dc:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80029e0:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	edd3 7a00 	vldr	s15, [r3]
 80029ec:	eef0 7ae7 	vabs.f32	s15, s15
 80029f0:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 80029f4:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 80029f8:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80029fc:	3301      	adds	r3, #1
 80029fe:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8002a02:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8002a06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a0a:	dbd0      	blt.n	80029ae <ExtractKvPixelParameters+0x22e>
        }
    }
    
    kvScale = 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33
    while(temp < 64)
 8002a12:	e00e      	b.n	8002a32 <ExtractKvPixelParameters+0x2b2>
    {
        temp = temp*2;
 8002a14:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002a18:	edd3 7a00 	vldr	s15, [r3]
 8002a1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a20:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002a24:	edc3 7a00 	vstr	s15, [r3]
        kvScale = kvScale + 1;
 8002a28:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33
    while(temp < 64)
 8002a32:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002a36:	edd3 7a00 	vldr	s15, [r3]
 8002a3a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002b4c <ExtractKvPixelParameters+0x3cc>
 8002a3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a46:	d4e5      	bmi.n	8002a14 <ExtractKvPixelParameters+0x294>
    }    
     
    for(int i = 0; i < 768; i++)
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8002a4e:	e064      	b.n	8002b1a <ExtractKvPixelParameters+0x39a>
    {
        temp = kvTemp[i] * pow(2,(double)kvScale);
 8002a50:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002a54:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002a58:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	edd3 7a00 	vldr	s15, [r3]
 8002a64:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002a68:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 8002a6c:	ee07 3a90 	vmov	s15, r3
 8002a70:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002a74:	eeb0 1b47 	vmov.f64	d1, d7
 8002a78:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002a7c:	f015 ffe8 	bl	8018a50 <pow>
 8002a80:	eeb0 7b40 	vmov.f64	d7, d0
 8002a84:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002a88:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a8c:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002a90:	edc3 7a00 	vstr	s15, [r3]
        if (temp < 0)
 8002a94:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002a98:	edd3 7a00 	vldr	s15, [r3]
 8002a9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa4:	d51a      	bpl.n	8002adc <ExtractKvPixelParameters+0x35c>
        {
            mlx90640->kv[i] = (temp - 0.5f);
 8002aa6:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002aaa:	edd3 7a00 	vldr	s15, [r3]
 8002aae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ab2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ab6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002aba:	edc7 7a01 	vstr	s15, [r7, #4]
 8002abe:	793b      	ldrb	r3, [r7, #4]
 8002ac0:	b259      	sxtb	r1, r3
 8002ac2:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002ac6:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 8002ad6:	460a      	mov	r2, r1
 8002ad8:	701a      	strb	r2, [r3, #0]
 8002ada:	e019      	b.n	8002b10 <ExtractKvPixelParameters+0x390>
        }
        else
        {
            mlx90640->kv[i] = (temp + 0.5f);
 8002adc:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002ae0:	edd3 7a00 	vldr	s15, [r3]
 8002ae4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ae8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002aec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002af0:	edc7 7a01 	vstr	s15, [r7, #4]
 8002af4:	793b      	ldrb	r3, [r7, #4]
 8002af6:	b259      	sxtb	r1, r3
 8002af8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002afc:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002b06:	4413      	add	r3, r2
 8002b08:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 8002b0c:	460a      	mov	r2, r1
 8002b0e:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 768; i++)
 8002b10:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002b14:	3301      	adds	r3, #1
 8002b16:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8002b1a:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002b1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b22:	db95      	blt.n	8002a50 <ExtractKvPixelParameters+0x2d0>
        }        
        
    } 
    
    mlx90640->kvScale = kvScale;        
 8002b24:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002b28:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b32:	461a      	mov	r2, r3
 8002b34:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 8002b38:	f882 324d 	strb.w	r3, [r2, #589]	; 0x24d
}
 8002b3c:	bf00      	nop
 8002b3e:	f607 4738 	addw	r7, r7, #3128	; 0xc38
 8002b42:	46bd      	mov	sp, r7
 8002b44:	ecbd 8b02 	vpop	{d8}
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	42800000 	.word	0x42800000

08002b50 <ExtractCPParameters>:

//------------------------------------------------------------------------------

void ExtractCPParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	ed2d 8b02 	vpush	{d8}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
    float cpKta;
    uint8_t alphaScale;
    uint8_t ktaScale1;
    uint8_t kvScale;

    alphaScale = ((eeData[32] & 0xF000) >> 12) + 27;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3340      	adds	r3, #64	; 0x40
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	0b1b      	lsrs	r3, r3, #12
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	331b      	adds	r3, #27
 8002b6c:	75fb      	strb	r3, [r7, #23]
    
    offsetSP[0] = (eeData[58] & 0x03FF);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3374      	adds	r3, #116	; 0x74
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	b21b      	sxth	r3, r3
 8002b76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b7a:	b21b      	sxth	r3, r3
 8002b7c:	813b      	strh	r3, [r7, #8]
    if (offsetSP[0] > 511)
 8002b7e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b86:	db07      	blt.n	8002b98 <ExtractCPParameters+0x48>
    {
        offsetSP[0] = offsetSP[0] - 1024;
 8002b88:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	b21b      	sxth	r3, r3
 8002b96:	813b      	strh	r3, [r7, #8]
    }
    
    offsetSP[1] = (eeData[58] & 0xFC00) >> 10;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3374      	adds	r3, #116	; 0x74
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	0a9b      	lsrs	r3, r3, #10
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	b21b      	sxth	r3, r3
 8002ba4:	817b      	strh	r3, [r7, #10]
    if (offsetSP[1] > 31)
 8002ba6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002baa:	2b1f      	cmp	r3, #31
 8002bac:	dd06      	ble.n	8002bbc <ExtractCPParameters+0x6c>
    {
        offsetSP[1] = offsetSP[1] - 64;
 8002bae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b40      	subs	r3, #64	; 0x40
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	b21b      	sxth	r3, r3
 8002bba:	817b      	strh	r3, [r7, #10]
    }
    offsetSP[1] = offsetSP[1] + offsetSP[0]; 
 8002bbc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	b21b      	sxth	r3, r3
 8002bce:	817b      	strh	r3, [r7, #10]
    
    alphaSP[0] = (eeData[57] & 0x03FF);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3372      	adds	r3, #114	; 0x72
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bda:	ee07 3a90 	vmov	s15, r3
 8002bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be2:	edc7 7a03 	vstr	s15, [r7, #12]
    if (alphaSP[0] > 511)
 8002be6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bea:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8002dc0 <ExtractCPParameters+0x270>
 8002bee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf6:	dd07      	ble.n	8002c08 <ExtractCPParameters+0xb8>
    {
        alphaSP[0] = alphaSP[0] - 1024;
 8002bf8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bfc:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8002dc4 <ExtractCPParameters+0x274>
 8002c00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c04:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    alphaSP[0] = alphaSP[0] /  pow(2,(double)alphaScale);
 8002c08:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c0c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002c10:	7dfb      	ldrb	r3, [r7, #23]
 8002c12:	ee07 3a90 	vmov	s15, r3
 8002c16:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002c1a:	eeb0 1b47 	vmov.f64	d1, d7
 8002c1e:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002c22:	f015 ff15 	bl	8018a50 <pow>
 8002c26:	eeb0 6b40 	vmov.f64	d6, d0
 8002c2a:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002c2e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c32:	edc7 7a03 	vstr	s15, [r7, #12]
    
    alphaSP[1] = (eeData[57] & 0xFC00) >> 10;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3372      	adds	r3, #114	; 0x72
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	0a9b      	lsrs	r3, r3, #10
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	ee07 3a90 	vmov	s15, r3
 8002c44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c48:	edc7 7a04 	vstr	s15, [r7, #16]
    if (alphaSP[1] > 31)
 8002c4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c50:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8002c54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5c:	dd07      	ble.n	8002c6e <ExtractCPParameters+0x11e>
    {
        alphaSP[1] = alphaSP[1] - 64;
 8002c5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c62:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8002dc8 <ExtractCPParameters+0x278>
 8002c66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c6a:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    alphaSP[1] = (1 + alphaSP[1]/128) * alphaSP[0];
 8002c6e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c72:	eddf 6a56 	vldr	s13, [pc, #344]	; 8002dcc <ExtractCPParameters+0x27c>
 8002c76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002c82:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c8a:	edc7 7a04 	vstr	s15, [r7, #16]
    
    cpKta = (eeData[59] & 0x00FF);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3376      	adds	r3, #118	; 0x76
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	ee07 3a90 	vmov	s15, r3
 8002c9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c9e:	edc7 7a06 	vstr	s15, [r7, #24]
    if (cpKta > 127)
 8002ca2:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ca6:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002dd0 <ExtractCPParameters+0x280>
 8002caa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb2:	dd07      	ble.n	8002cc4 <ExtractCPParameters+0x174>
    {
        cpKta = cpKta - 256;
 8002cb4:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cb8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002dd4 <ExtractCPParameters+0x284>
 8002cbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002cc0:	edc7 7a06 	vstr	s15, [r7, #24]
    }
    ktaScale1 = ((eeData[56] & 0x00F0) >> 4) + 8;    
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3370      	adds	r3, #112	; 0x70
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	111b      	asrs	r3, r3, #4
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	3308      	adds	r3, #8
 8002cd6:	75bb      	strb	r3, [r7, #22]
    mlx90640->cpKta = cpKta / pow(2,(double)ktaScale1);
 8002cd8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cdc:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002ce0:	7dbb      	ldrb	r3, [r7, #22]
 8002ce2:	ee07 3a90 	vmov	s15, r3
 8002ce6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002cea:	eeb0 1b47 	vmov.f64	d1, d7
 8002cee:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002cf2:	f015 fead 	bl	8018a50 <pow>
 8002cf6:	eeb0 6b40 	vmov.f64	d6, d0
 8002cfa:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002cfe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	edc3 7a08 	vstr	s15, [r3, #32]
    
    cpKv = (eeData[59] & 0xFF00) >> 8;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3376      	adds	r3, #118	; 0x76
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	0a1b      	lsrs	r3, r3, #8
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	ee07 3a90 	vmov	s15, r3
 8002d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d1a:	edc7 7a07 	vstr	s15, [r7, #28]
    if (cpKv > 127)
 8002d1e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d22:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002dd0 <ExtractCPParameters+0x280>
 8002d26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2e:	dd07      	ble.n	8002d40 <ExtractCPParameters+0x1f0>
    {
        cpKv = cpKv - 256;
 8002d30:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d34:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002dd4 <ExtractCPParameters+0x284>
 8002d38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d3c:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    kvScale = (eeData[56] & 0x0F00) >> 8;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3370      	adds	r3, #112	; 0x70
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	121b      	asrs	r3, r3, #8
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	757b      	strb	r3, [r7, #21]
    mlx90640->cpKv = cpKv / pow(2,(double)kvScale);
 8002d50:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d54:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002d58:	7d7b      	ldrb	r3, [r7, #21]
 8002d5a:	ee07 3a90 	vmov	s15, r3
 8002d5e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002d62:	eeb0 1b47 	vmov.f64	d1, d7
 8002d66:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002d6a:	f015 fe71 	bl	8018a50 <pow>
 8002d6e:	eeb0 6b40 	vmov.f64	d6, d0
 8002d72:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002d76:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	edc3 7a07 	vstr	s15, [r3, #28]
       
    mlx90640->cpAlpha[0] = alphaSP[0];
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d88:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    mlx90640->cpAlpha[1] = alphaSP[1];
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d94:	f8c2 3254 	str.w	r3, [r2, #596]	; 0x254
    mlx90640->cpOffset[0] = offsetSP[0];
 8002d98:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002da2:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
    mlx90640->cpOffset[1] = offsetSP[1];  
 8002da6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002db0:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
}
 8002db4:	bf00      	nop
 8002db6:	3720      	adds	r7, #32
 8002db8:	46bd      	mov	sp, r7
 8002dba:	ecbd 8b02 	vpop	{d8}
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	43ff8000 	.word	0x43ff8000
 8002dc4:	44800000 	.word	0x44800000
 8002dc8:	42800000 	.word	0x42800000
 8002dcc:	43000000 	.word	0x43000000
 8002dd0:	42fe0000 	.word	0x42fe0000
 8002dd4:	43800000 	.word	0x43800000

08002dd8 <ExtractCILCParameters>:

//------------------------------------------------------------------------------

void ExtractCILCParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
    float ilChessC[3];
    uint8_t calibrationModeEE;
    
    calibrationModeEE = (eeData[10] & 0x0800) >> 4;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3314      	adds	r3, #20
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	111b      	asrs	r3, r3, #4
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002df0:	75fb      	strb	r3, [r7, #23]
    calibrationModeEE = calibrationModeEE ^ 0x80;
 8002df2:	7dfb      	ldrb	r3, [r7, #23]
 8002df4:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	75fb      	strb	r3, [r7, #23]

    ilChessC[0] = (eeData[53] & 0x003F);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	336a      	adds	r3, #106	; 0x6a
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e06:	ee07 3a90 	vmov	s15, r3
 8002e0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e0e:	edc7 7a02 	vstr	s15, [r7, #8]
    if (ilChessC[0] > 31)
 8002e12:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e16:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8002e1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e22:	dd07      	ble.n	8002e34 <ExtractCILCParameters+0x5c>
    {
        ilChessC[0] = ilChessC[0] - 64;
 8002e24:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e28:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002f10 <ExtractCILCParameters+0x138>
 8002e2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e30:	edc7 7a02 	vstr	s15, [r7, #8]
    }
    ilChessC[0] = ilChessC[0] / 16.0f;
 8002e34:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e38:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002e3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e40:	edc7 7a02 	vstr	s15, [r7, #8]
    
    ilChessC[1] = (eeData[53] & 0x07C0) >> 6;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	336a      	adds	r3, #106	; 0x6a
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	119b      	asrs	r3, r3, #6
 8002e4c:	f003 031f 	and.w	r3, r3, #31
 8002e50:	ee07 3a90 	vmov	s15, r3
 8002e54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e58:	edc7 7a03 	vstr	s15, [r7, #12]
    if (ilChessC[1] > 15)
 8002e5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e60:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8002e64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e6c:	dd07      	ble.n	8002e7e <ExtractCILCParameters+0xa6>
    {
        ilChessC[1] = ilChessC[1] - 32;
 8002e6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e72:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002f14 <ExtractCILCParameters+0x13c>
 8002e76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e7a:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    ilChessC[1] = ilChessC[1] / 2.0f;
 8002e7e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e82:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002e86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e8a:	edc7 7a03 	vstr	s15, [r7, #12]
    
    ilChessC[2] = (eeData[53] & 0xF800) >> 11;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	336a      	adds	r3, #106	; 0x6a
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	0adb      	lsrs	r3, r3, #11
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	ee07 3a90 	vmov	s15, r3
 8002e9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ea0:	edc7 7a04 	vstr	s15, [r7, #16]
    if (ilChessC[2] > 15)
 8002ea4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ea8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8002eac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb4:	dd07      	ble.n	8002ec6 <ExtractCILCParameters+0xee>
    {
        ilChessC[2] = ilChessC[2] - 32;
 8002eb6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002eba:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002f14 <ExtractCILCParameters+0x13c>
 8002ebe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ec2:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    ilChessC[2] = ilChessC[2] / 8.0f;
 8002ec6:	ed97 7a04 	vldr	s14, [r7, #16]
 8002eca:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002ece:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ed2:	edc7 7a04 	vstr	s15, [r7, #16]
    
    mlx90640->calibrationModeEE = calibrationModeEE;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	7dfa      	ldrb	r2, [r7, #23]
 8002eda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    mlx90640->ilChessC[0] = ilChessC[0];
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ee6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
    mlx90640->ilChessC[1] = ilChessC[1];
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ef2:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
    mlx90640->ilChessC[2] = ilChessC[2];
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002efe:	f8c2 3264 	str.w	r3, [r2, #612]	; 0x264
}
 8002f02:	bf00      	nop
 8002f04:	371c      	adds	r7, #28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	42800000 	.word	0x42800000
 8002f14:	42000000 	.word	0x42000000

08002f18 <ExtractDeviatingPixels>:

//------------------------------------------------------------------------------

int ExtractDeviatingPixels(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
    uint16_t pixCnt = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	82fb      	strh	r3, [r7, #22]
    uint16_t brokenPixCnt = 0;
 8002f26:	2300      	movs	r3, #0
 8002f28:	82bb      	strh	r3, [r7, #20]
    uint16_t outlierPixCnt = 0;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	827b      	strh	r3, [r7, #18]
    int warn = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
    int i;
    
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 8002f32:	2300      	movs	r3, #0
 8002f34:	82fb      	strh	r3, [r7, #22]
 8002f36:	e013      	b.n	8002f60 <ExtractDeviatingPixels+0x48>
    {
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
 8002f38:	8afa      	ldrh	r2, [r7, #22]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8002f40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002f44:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        mlx90640->outlierPixels[pixCnt] = 0xFFFF;
 8002f48:	8afb      	ldrh	r3, [r7, #22]
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	4413      	add	r3, r2
 8002f54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f58:	805a      	strh	r2, [r3, #2]
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 8002f5a:	8afb      	ldrh	r3, [r7, #22]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	82fb      	strh	r3, [r7, #22]
 8002f60:	8afb      	ldrh	r3, [r7, #22]
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d9e8      	bls.n	8002f38 <ExtractDeviatingPixels+0x20>
    }
        
    pixCnt = 0;    
 8002f66:	2300      	movs	r3, #0
 8002f68:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < 768 && brokenPixCnt < 5 && outlierPixCnt < 5)
 8002f6a:	e02a      	b.n	8002fc2 <ExtractDeviatingPixels+0xaa>
    {
        if(eeData[pixCnt+64] == 0)
 8002f6c:	8afb      	ldrh	r3, [r7, #22]
 8002f6e:	3340      	adds	r3, #64	; 0x40
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	881b      	ldrh	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10a      	bne.n	8002f92 <ExtractDeviatingPixels+0x7a>
        {
            mlx90640->brokenPixels[brokenPixCnt] = pixCnt;
 8002f7c:	8aba      	ldrh	r2, [r7, #20]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8002f84:	8af9      	ldrh	r1, [r7, #22]
 8002f86:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            brokenPixCnt = brokenPixCnt + 1;
 8002f8a:	8abb      	ldrh	r3, [r7, #20]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	82bb      	strh	r3, [r7, #20]
 8002f90:	e014      	b.n	8002fbc <ExtractDeviatingPixels+0xa4>
        }    
        else if((eeData[pixCnt+64] & 0x0001) != 0)
 8002f92:	8afb      	ldrh	r3, [r7, #22]
 8002f94:	3340      	adds	r3, #64	; 0x40
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <ExtractDeviatingPixels+0xa4>
        {
            mlx90640->outlierPixels[outlierPixCnt] = pixCnt;
 8002fa6:	8a7b      	ldrh	r3, [r7, #18]
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	4413      	add	r3, r2
 8002fb2:	8afa      	ldrh	r2, [r7, #22]
 8002fb4:	805a      	strh	r2, [r3, #2]
            outlierPixCnt = outlierPixCnt + 1;
 8002fb6:	8a7b      	ldrh	r3, [r7, #18]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	827b      	strh	r3, [r7, #18]
        }    
        
        pixCnt = pixCnt + 1;
 8002fbc:	8afb      	ldrh	r3, [r7, #22]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < 768 && brokenPixCnt < 5 && outlierPixCnt < 5)
 8002fc2:	8afb      	ldrh	r3, [r7, #22]
 8002fc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fc8:	d205      	bcs.n	8002fd6 <ExtractDeviatingPixels+0xbe>
 8002fca:	8abb      	ldrh	r3, [r7, #20]
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d802      	bhi.n	8002fd6 <ExtractDeviatingPixels+0xbe>
 8002fd0:	8a7b      	ldrh	r3, [r7, #18]
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d9ca      	bls.n	8002f6c <ExtractDeviatingPixels+0x54>
        
    } 
    
    if(brokenPixCnt > 4)  
 8002fd6:	8abb      	ldrh	r3, [r7, #20]
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d903      	bls.n	8002fe4 <ExtractDeviatingPixels+0xcc>
    {
        warn = -3;
 8002fdc:	f06f 0302 	mvn.w	r3, #2
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	e08f      	b.n	8003104 <ExtractDeviatingPixels+0x1ec>
    }         
    else if(outlierPixCnt > 4)  
 8002fe4:	8a7b      	ldrh	r3, [r7, #18]
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d903      	bls.n	8002ff2 <ExtractDeviatingPixels+0xda>
    {
        warn = -4;
 8002fea:	f06f 0303 	mvn.w	r3, #3
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	e088      	b.n	8003104 <ExtractDeviatingPixels+0x1ec>
    }
    else if((brokenPixCnt + outlierPixCnt) > 4)  
 8002ff2:	8aba      	ldrh	r2, [r7, #20]
 8002ff4:	8a7b      	ldrh	r3, [r7, #18]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	dd03      	ble.n	8003004 <ExtractDeviatingPixels+0xec>
    {
        warn = -5;
 8002ffc:	f06f 0304 	mvn.w	r3, #4
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	e07f      	b.n	8003104 <ExtractDeviatingPixels+0x1ec>
    } 
    else
    {
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8003004:	2300      	movs	r3, #0
 8003006:	82fb      	strh	r3, [r7, #22]
 8003008:	e022      	b.n	8003050 <ExtractDeviatingPixels+0x138>
        {
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 800300a:	8afb      	ldrh	r3, [r7, #22]
 800300c:	3301      	adds	r3, #1
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	e017      	b.n	8003042 <ExtractDeviatingPixels+0x12a>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->brokenPixels[i]);
 8003012:	8afa      	ldrh	r2, [r7, #22]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	f602 1234 	addw	r2, r2, #2356	; 0x934
 800301a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8003026:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800302a:	4619      	mov	r1, r3
 800302c:	f000 f86f 	bl	800310e <CheckAdjacentPixels>
 8003030:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <ExtractDeviatingPixels+0x124>
                {
                    return warn;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	e064      	b.n	8003106 <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	3301      	adds	r3, #1
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	8abb      	ldrh	r3, [r7, #20]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	429a      	cmp	r2, r3
 8003048:	dbe3      	blt.n	8003012 <ExtractDeviatingPixels+0xfa>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 800304a:	8afb      	ldrh	r3, [r7, #22]
 800304c:	3301      	adds	r3, #1
 800304e:	82fb      	strh	r3, [r7, #22]
 8003050:	8afa      	ldrh	r2, [r7, #22]
 8003052:	8abb      	ldrh	r3, [r7, #20]
 8003054:	429a      	cmp	r2, r3
 8003056:	d3d8      	bcc.n	800300a <ExtractDeviatingPixels+0xf2>
                }    
            }    
        }
        
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 8003058:	2300      	movs	r3, #0
 800305a:	82fb      	strh	r3, [r7, #22]
 800305c:	e024      	b.n	80030a8 <ExtractDeviatingPixels+0x190>
        {
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 800305e:	8afb      	ldrh	r3, [r7, #22]
 8003060:	3301      	adds	r3, #1
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	e019      	b.n	800309a <ExtractDeviatingPixels+0x182>
            {
                warn = CheckAdjacentPixels(mlx90640->outlierPixels[pixCnt],mlx90640->outlierPixels[i]);
 8003066:	8afb      	ldrh	r3, [r7, #22]
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	f603 1338 	addw	r3, r3, #2360	; 0x938
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	4413      	add	r3, r2
 8003072:	8858      	ldrh	r0, [r3, #2]
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f603 1338 	addw	r3, r3, #2360	; 0x938
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	4413      	add	r3, r2
 8003080:	885b      	ldrh	r3, [r3, #2]
 8003082:	4619      	mov	r1, r3
 8003084:	f000 f843 	bl	800310e <CheckAdjacentPixels>
 8003088:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <ExtractDeviatingPixels+0x17c>
                {
                    return warn;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	e038      	b.n	8003106 <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	3301      	adds	r3, #1
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	8a7b      	ldrh	r3, [r7, #18]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	429a      	cmp	r2, r3
 80030a0:	dbe1      	blt.n	8003066 <ExtractDeviatingPixels+0x14e>
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 80030a2:	8afb      	ldrh	r3, [r7, #22]
 80030a4:	3301      	adds	r3, #1
 80030a6:	82fb      	strh	r3, [r7, #22]
 80030a8:	8afa      	ldrh	r2, [r7, #22]
 80030aa:	8a7b      	ldrh	r3, [r7, #18]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d3d6      	bcc.n	800305e <ExtractDeviatingPixels+0x146>
                }    
            }    
        } 
        
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 80030b0:	2300      	movs	r3, #0
 80030b2:	82fb      	strh	r3, [r7, #22]
 80030b4:	e022      	b.n	80030fc <ExtractDeviatingPixels+0x1e4>
        {
            for(i=0; i<outlierPixCnt; i++)
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	e018      	b.n	80030ee <ExtractDeviatingPixels+0x1d6>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->outlierPixels[i]);
 80030bc:	8afa      	ldrh	r2, [r7, #22]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	f602 1234 	addw	r2, r2, #2356	; 0x934
 80030c4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f603 1338 	addw	r3, r3, #2360	; 0x938
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	4413      	add	r3, r2
 80030d4:	885b      	ldrh	r3, [r3, #2]
 80030d6:	4619      	mov	r1, r3
 80030d8:	f000 f819 	bl	800310e <CheckAdjacentPixels>
 80030dc:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <ExtractDeviatingPixels+0x1d0>
                {
                    return warn;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	e00e      	b.n	8003106 <ExtractDeviatingPixels+0x1ee>
            for(i=0; i<outlierPixCnt; i++)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	3301      	adds	r3, #1
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	8a7b      	ldrh	r3, [r7, #18]
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	dbe2      	blt.n	80030bc <ExtractDeviatingPixels+0x1a4>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 80030f6:	8afb      	ldrh	r3, [r7, #22]
 80030f8:	3301      	adds	r3, #1
 80030fa:	82fb      	strh	r3, [r7, #22]
 80030fc:	8afa      	ldrh	r2, [r7, #22]
 80030fe:	8abb      	ldrh	r3, [r7, #20]
 8003100:	429a      	cmp	r2, r3
 8003102:	d3d8      	bcc.n	80030b6 <ExtractDeviatingPixels+0x19e>
        }    
        
    }    
    
    
    return warn;
 8003104:	68fb      	ldr	r3, [r7, #12]
       
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <CheckAdjacentPixels>:

//------------------------------------------------------------------------------

 int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2)
 {
 800310e:	b480      	push	{r7}
 8003110:	b085      	sub	sp, #20
 8003112:	af00      	add	r7, sp, #0
 8003114:	4603      	mov	r3, r0
 8003116:	460a      	mov	r2, r1
 8003118:	80fb      	strh	r3, [r7, #6]
 800311a:	4613      	mov	r3, r2
 800311c:	80bb      	strh	r3, [r7, #4]
     int pixPosDif;
     
     pixPosDif = pix1 - pix2;
 800311e:	88fa      	ldrh	r2, [r7, #6]
 8003120:	88bb      	ldrh	r3, [r7, #4]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	60fb      	str	r3, [r7, #12]
     if(pixPosDif > -34 && pixPosDif < -30)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f113 0f21 	cmn.w	r3, #33	; 0x21
 800312c:	db06      	blt.n	800313c <CheckAdjacentPixels+0x2e>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f113 0f1e 	cmn.w	r3, #30
 8003134:	da02      	bge.n	800313c <CheckAdjacentPixels+0x2e>
     {
         return -6;
 8003136:	f06f 0305 	mvn.w	r3, #5
 800313a:	e013      	b.n	8003164 <CheckAdjacentPixels+0x56>
     } 
     if(pixPosDif > -2 && pixPosDif < 2)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003142:	db05      	blt.n	8003150 <CheckAdjacentPixels+0x42>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b01      	cmp	r3, #1
 8003148:	dc02      	bgt.n	8003150 <CheckAdjacentPixels+0x42>
     {
         return -6;
 800314a:	f06f 0305 	mvn.w	r3, #5
 800314e:	e009      	b.n	8003164 <CheckAdjacentPixels+0x56>
     } 
     if(pixPosDif > 30 && pixPosDif < 34)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b1e      	cmp	r3, #30
 8003154:	dd05      	ble.n	8003162 <CheckAdjacentPixels+0x54>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2b21      	cmp	r3, #33	; 0x21
 800315a:	dc02      	bgt.n	8003162 <CheckAdjacentPixels+0x54>
     {
         return -6;
 800315c:	f06f 0305 	mvn.w	r3, #5
 8003160:	e000      	b.n	8003164 <CheckAdjacentPixels+0x56>
     }
     
     return 0;    
 8003162:	2300      	movs	r3, #0
 }
 8003164:	4618      	mov	r0, r3
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <MLX90640_I2CRead>:
	MX_I2C1_Init();
}


int MLX90640_I2CRead(uint8_t slaveAddr, uint16_t startAddress, uint16_t nMemAddressRead, uint16_t *data,I2C_HandleTypeDef * i2c)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08c      	sub	sp, #48	; 0x30
 8003174:	af04      	add	r7, sp, #16
 8003176:	607b      	str	r3, [r7, #4]
 8003178:	4603      	mov	r3, r0
 800317a:	73fb      	strb	r3, [r7, #15]
 800317c:	460b      	mov	r3, r1
 800317e:	81bb      	strh	r3, [r7, #12]
 8003180:	4613      	mov	r3, r2
 8003182:	817b      	strh	r3, [r7, #10]

	uint8_t* p = (uint8_t*) data;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	61bb      	str	r3, [r7, #24]

	int ack = 0;                               
 8003188:	2300      	movs	r3, #0
 800318a:	617b      	str	r3, [r7, #20]
	int cnt = 0;
 800318c:	2300      	movs	r3, #0
 800318e:	61fb      	str	r3, [r7, #28]
	
	ack = HAL_I2C_Mem_Read(&hi2c1, (slaveAddr<<1), startAddress, I2C_MEMADD_SIZE_16BIT, p, nMemAddressRead*2, 500);
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	b29b      	uxth	r3, r3
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	b299      	uxth	r1, r3
 8003198:	897b      	ldrh	r3, [r7, #10]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	b29b      	uxth	r3, r3
 800319e:	89ba      	ldrh	r2, [r7, #12]
 80031a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80031a4:	9002      	str	r0, [sp, #8]
 80031a6:	9301      	str	r3, [sp, #4]
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	2302      	movs	r3, #2
 80031ae:	4817      	ldr	r0, [pc, #92]	; (800320c <MLX90640_I2CRead+0x9c>)
 80031b0:	f005 ff50 	bl	8009054 <HAL_I2C_Mem_Read>
 80031b4:	4603      	mov	r3, r0
 80031b6:	617b      	str	r3, [r7, #20]

	if (ack != HAL_OK)
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <MLX90640_I2CRead+0x54>
	{
			return -1;
 80031be:	f04f 33ff 	mov.w	r3, #4294967295
 80031c2:	e01f      	b.n	8003204 <MLX90640_I2CRead+0x94>
	}
	

	for(cnt=0; cnt < nMemAddressRead*2; cnt+=2) {
 80031c4:	2300      	movs	r3, #0
 80031c6:	61fb      	str	r3, [r7, #28]
 80031c8:	e016      	b.n	80031f8 <MLX90640_I2CRead+0x88>
		uint8_t tempBuffer = p[cnt+1];
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	3301      	adds	r3, #1
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4413      	add	r3, r2
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	74fb      	strb	r3, [r7, #19]
		p[cnt+1] = p[cnt];
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	441a      	add	r2, r3
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	3301      	adds	r3, #1
 80031e0:	69b9      	ldr	r1, [r7, #24]
 80031e2:	440b      	add	r3, r1
 80031e4:	7812      	ldrb	r2, [r2, #0]
 80031e6:	701a      	strb	r2, [r3, #0]
		p[cnt] = tempBuffer;
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4413      	add	r3, r2
 80031ee:	7cfa      	ldrb	r2, [r7, #19]
 80031f0:	701a      	strb	r2, [r3, #0]
	for(cnt=0; cnt < nMemAddressRead*2; cnt+=2) {
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	3302      	adds	r3, #2
 80031f6:	61fb      	str	r3, [r7, #28]
 80031f8:	897b      	ldrh	r3, [r7, #10]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	69fa      	ldr	r2, [r7, #28]
 80031fe:	429a      	cmp	r2, r3
 8003200:	dbe3      	blt.n	80031ca <MLX90640_I2CRead+0x5a>
	}

	return 0;   
 8003202:	2300      	movs	r3, #0
} 
 8003204:	4618      	mov	r0, r3
 8003206:	3720      	adds	r7, #32
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	20000ff8 	.word	0x20000ff8

08003210 <MLX90640_I2CWrite>:


int MLX90640_I2CWrite(uint8_t slaveAddr, uint16_t writeAddress, uint16_t data,I2C_HandleTypeDef * i2c)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	; 0x28
 8003214:	af04      	add	r7, sp, #16
 8003216:	607b      	str	r3, [r7, #4]
 8003218:	4603      	mov	r3, r0
 800321a:	73fb      	strb	r3, [r7, #15]
 800321c:	460b      	mov	r3, r1
 800321e:	81bb      	strh	r3, [r7, #12]
 8003220:	4613      	mov	r3, r2
 8003222:	817b      	strh	r3, [r7, #10]

	uint8_t sa;
	int ack = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
	uint8_t cmd[2];
	static uint16_t dataCheck;

	sa = (slaveAddr << 1);
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	74fb      	strb	r3, [r7, #19]

	cmd[0] = data >> 8;
 800322e:	897b      	ldrh	r3, [r7, #10]
 8003230:	0a1b      	lsrs	r3, r3, #8
 8003232:	b29b      	uxth	r3, r3
 8003234:	b2db      	uxtb	r3, r3
 8003236:	743b      	strb	r3, [r7, #16]
	cmd[1] = data & 0x00FF;
 8003238:	897b      	ldrh	r3, [r7, #10]
 800323a:	b2db      	uxtb	r3, r3
 800323c:	747b      	strb	r3, [r7, #17]


	ack = HAL_I2C_Mem_Write(&hi2c1, sa, writeAddress, I2C_MEMADD_SIZE_16BIT, cmd, sizeof(cmd), 500);
 800323e:	7cfb      	ldrb	r3, [r7, #19]
 8003240:	b299      	uxth	r1, r3
 8003242:	89ba      	ldrh	r2, [r7, #12]
 8003244:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003248:	9302      	str	r3, [sp, #8]
 800324a:	2302      	movs	r3, #2
 800324c:	9301      	str	r3, [sp, #4]
 800324e:	f107 0310 	add.w	r3, r7, #16
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	2302      	movs	r3, #2
 8003256:	4810      	ldr	r0, [pc, #64]	; (8003298 <MLX90640_I2CWrite+0x88>)
 8003258:	f005 fde8 	bl	8008e2c <HAL_I2C_Mem_Write>
 800325c:	4603      	mov	r3, r0
 800325e:	617b      	str	r3, [r7, #20]

	if (ack != HAL_OK)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <MLX90640_I2CWrite+0x5c>
	{
			return -1;
 8003266:	f04f 33ff 	mov.w	r3, #4294967295
 800326a:	e010      	b.n	800328e <MLX90640_I2CWrite+0x7e>
	}         
	
	MLX90640_I2CRead(slaveAddr,writeAddress,1, &dataCheck,i2c);
 800326c:	89b9      	ldrh	r1, [r7, #12]
 800326e:	7bf8      	ldrb	r0, [r7, #15]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	4b09      	ldr	r3, [pc, #36]	; (800329c <MLX90640_I2CWrite+0x8c>)
 8003276:	2201      	movs	r2, #1
 8003278:	f7ff ff7a 	bl	8003170 <MLX90640_I2CRead>
	
	if ( dataCheck != data)
 800327c:	4b07      	ldr	r3, [pc, #28]	; (800329c <MLX90640_I2CWrite+0x8c>)
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	897a      	ldrh	r2, [r7, #10]
 8003282:	429a      	cmp	r2, r3
 8003284:	d002      	beq.n	800328c <MLX90640_I2CWrite+0x7c>
	{
			return -2;
 8003286:	f06f 0301 	mvn.w	r3, #1
 800328a:	e000      	b.n	800328e <MLX90640_I2CWrite+0x7e>
	}    
	
	return 0;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	20000ff8 	.word	0x20000ff8
 800329c:	20000e84 	.word	0x20000e84

080032a0 <MPU9250_IsConnected>:
__weak void MPU9250_OnActivate()
{
}
#ifndef USE_SPI
bool MPU9250_IsConnected()
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&_MPU9250_I2C,_dev_add,1,HAL_MAX_DELAY)==HAL_OK)
 80032a4:	21d0      	movs	r1, #208	; 0xd0
 80032a6:	f04f 33ff 	mov.w	r3, #4294967295
 80032aa:	2201      	movs	r2, #1
 80032ac:	4805      	ldr	r0, [pc, #20]	; (80032c4 <MPU9250_IsConnected+0x24>)
 80032ae:	f005 ffeb 	bl	8009288 <HAL_I2C_IsDeviceReady>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <MPU9250_IsConnected+0x1c>
		return true;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e000      	b.n	80032be <MPU9250_IsConnected+0x1e>
	else
		return false;	
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	20001044 	.word	0x20001044

080032c8 <MPU_I2C_Write>:

void MPU_I2C_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af04      	add	r7, sp, #16
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	70fb      	strb	r3, [r7, #3]
 80032d4:	4613      	mov	r3, r2
 80032d6:	803b      	strh	r3, [r7, #0]
	HAL_I2C_Mem_Write(&_MPU9250_I2C,_dev_add,WriteAddr,I2C_MEMADD_SIZE_8BIT,pBuffer,NumByteToWrite,HAL_MAX_DELAY);
 80032d8:	21d0      	movs	r1, #208	; 0xd0
 80032da:	78fb      	ldrb	r3, [r7, #3]
 80032dc:	b29a      	uxth	r2, r3
 80032de:	f04f 33ff 	mov.w	r3, #4294967295
 80032e2:	9302      	str	r3, [sp, #8]
 80032e4:	883b      	ldrh	r3, [r7, #0]
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	2301      	movs	r3, #1
 80032ee:	4803      	ldr	r0, [pc, #12]	; (80032fc <MPU_I2C_Write+0x34>)
 80032f0:	f005 fd9c 	bl	8008e2c <HAL_I2C_Mem_Write>
}
 80032f4:	bf00      	nop
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	20001044 	.word	0x20001044

08003300 <MPU_I2C_Read>:

void MPU_I2C_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af02      	add	r7, sp, #8
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	460b      	mov	r3, r1
 800330a:	70fb      	strb	r3, [r7, #3]
 800330c:	4613      	mov	r3, r2
 800330e:	803b      	strh	r3, [r7, #0]
	uint8_t data = ReadAddr | READWRITE_CMD;
 8003310:	2280      	movs	r2, #128	; 0x80
 8003312:	78fb      	ldrb	r3, [r7, #3]
 8003314:	4313      	orrs	r3, r2
 8003316:	b2db      	uxtb	r3, r3
 8003318:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&_MPU9250_I2C,_dev_add,&data,1,HAL_MAX_DELAY);
 800331a:	21d0      	movs	r1, #208	; 0xd0
 800331c:	f107 020f 	add.w	r2, r7, #15
 8003320:	f04f 33ff 	mov.w	r3, #4294967295
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	2301      	movs	r3, #1
 8003328:	4807      	ldr	r0, [pc, #28]	; (8003348 <MPU_I2C_Read+0x48>)
 800332a:	f005 fb95 	bl	8008a58 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&_MPU9250_I2C,_dev_add,pBuffer,NumByteToRead,HAL_MAX_DELAY);
 800332e:	21d0      	movs	r1, #208	; 0xd0
 8003330:	883b      	ldrh	r3, [r7, #0]
 8003332:	f04f 32ff 	mov.w	r2, #4294967295
 8003336:	9200      	str	r2, [sp, #0]
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	4803      	ldr	r0, [pc, #12]	; (8003348 <MPU_I2C_Read+0x48>)
 800333c:	f005 fc80 	bl	8008c40 <HAL_I2C_Master_Receive>
}
 8003340:	bf00      	nop
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	20001044 	.word	0x20001044

0800334c <writeRegister>:
	MPU9250_Deactivate();
}
#endif
/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	460a      	mov	r2, r1
 8003356:	71fb      	strb	r3, [r7, #7]
 8003358:	4613      	mov	r3, r2
 800335a:	71bb      	strb	r3, [r7, #6]
	#ifdef USE_SPI
	MPU_SPI_Write(&data, subAddress, 1);
	#else
	MPU_I2C_Write(&data, subAddress, 1);
 800335c:	79f9      	ldrb	r1, [r7, #7]
 800335e:	1dbb      	adds	r3, r7, #6
 8003360:	2201      	movs	r2, #1
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff ffb0 	bl	80032c8 <MPU_I2C_Write>
	#endif
	HAL_Delay(10);
 8003368:	200a      	movs	r0, #10
 800336a:	f003 fa8d 	bl	8006888 <HAL_Delay>
}
 800336e:	bf00      	nop
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 8003376:	b580      	push	{r7, lr}
 8003378:	b082      	sub	sp, #8
 800337a:	af00      	add	r7, sp, #0
 800337c:	4603      	mov	r3, r0
 800337e:	603a      	str	r2, [r7, #0]
 8003380:	71fb      	strb	r3, [r7, #7]
 8003382:	460b      	mov	r3, r1
 8003384:	71bb      	strb	r3, [r7, #6]
	#ifdef USE_SPI
	MPU_SPI_Read(dest, subAddress, count);
	#else
	MPU_I2C_Read(dest, subAddress, count);
 8003386:	79bb      	ldrb	r3, [r7, #6]
 8003388:	b29a      	uxth	r2, r3
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	4619      	mov	r1, r3
 800338e:	6838      	ldr	r0, [r7, #0]
 8003390:	f7ff ffb6 	bl	8003300 <MPU_I2C_Read>
	#endif
}
 8003394:	bf00      	nop
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	460a      	mov	r2, r1
 80033a6:	71fb      	strb	r3, [r7, #7]
 80033a8:	4613      	mov	r3, r2
 80033aa:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for write
	writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 80033ac:	2325      	movs	r3, #37	; 0x25
 80033ae:	220c      	movs	r2, #12
 80033b0:	4611      	mov	r1, r2
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff ffca 	bl	800334c <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 80033b8:	2226      	movs	r2, #38	; 0x26
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	4619      	mov	r1, r3
 80033be:	4610      	mov	r0, r2
 80033c0:	f7ff ffc4 	bl	800334c <writeRegister>

	// store the data for write
	writeRegister(I2C_SLV0_DO,data);
 80033c4:	2263      	movs	r2, #99	; 0x63
 80033c6:	79bb      	ldrb	r3, [r7, #6]
 80033c8:	4619      	mov	r1, r3
 80033ca:	4610      	mov	r0, r2
 80033cc:	f7ff ffbe 	bl	800334c <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 80033d0:	2227      	movs	r2, #39	; 0x27
 80033d2:	2380      	movs	r3, #128	; 0x80
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	4619      	mov	r1, r3
 80033dc:	4610      	mov	r0, r2
 80033de:	f7ff ffb5 	bl	800334c <writeRegister>
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	4603      	mov	r3, r0
 80033f2:	603a      	str	r2, [r7, #0]
 80033f4:	71fb      	strb	r3, [r7, #7]
 80033f6:	460b      	mov	r3, r1
 80033f8:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 80033fa:	2025      	movs	r0, #37	; 0x25
 80033fc:	220c      	movs	r2, #12
 80033fe:	2380      	movs	r3, #128	; 0x80
 8003400:	4313      	orrs	r3, r2
 8003402:	b2db      	uxtb	r3, r3
 8003404:	4619      	mov	r1, r3
 8003406:	f7ff ffa1 	bl	800334c <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 800340a:	2226      	movs	r2, #38	; 0x26
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	4619      	mov	r1, r3
 8003410:	4610      	mov	r0, r2
 8003412:	f7ff ff9b 	bl	800334c <writeRegister>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 8003416:	2027      	movs	r0, #39	; 0x27
 8003418:	2280      	movs	r2, #128	; 0x80
 800341a:	79bb      	ldrb	r3, [r7, #6]
 800341c:	4313      	orrs	r3, r2
 800341e:	b2db      	uxtb	r3, r3
 8003420:	4619      	mov	r1, r3
 8003422:	f7ff ff93 	bl	800334c <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 8003426:	2001      	movs	r0, #1
 8003428:	f003 fa2e 	bl	8006888 <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
 800342c:	2049      	movs	r0, #73	; 0x49
 800342e:	79bb      	ldrb	r3, [r7, #6]
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	4619      	mov	r1, r3
 8003434:	f7ff ff9f 	bl	8003376 <readRegisters>
}
 8003438:	bf00      	nop
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(){
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I,1,_buffer);
 8003444:	2375      	movs	r3, #117	; 0x75
 8003446:	4a04      	ldr	r2, [pc, #16]	; (8003458 <whoAmI+0x18>)
 8003448:	2101      	movs	r1, #1
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff ff93 	bl	8003376 <readRegisters>

	// return the register value
	return _buffer[0];
 8003450:	4b01      	ldr	r3, [pc, #4]	; (8003458 <whoAmI+0x18>)
 8003452:	781b      	ldrb	r3, [r3, #0]
}
 8003454:	4618      	mov	r0, r3
 8003456:	bd80      	pop	{r7, pc}
 8003458:	20000e88 	.word	0x20000e88

0800345c <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(){
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readAK8963Registers(AK8963_WHO_AM_I,1,_buffer);
 8003460:	2300      	movs	r3, #0
 8003462:	4a04      	ldr	r2, [pc, #16]	; (8003474 <whoAmIAK8963+0x18>)
 8003464:	2101      	movs	r1, #1
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff ffbf 	bl	80033ea <readAK8963Registers>
	// return the register value
	return _buffer[0];
 800346c:	4b01      	ldr	r3, [pc, #4]	; (8003474 <whoAmIAK8963+0x18>)
 800346e:	781b      	ldrb	r3, [r3, #0]
}
 8003470:	4618      	mov	r0, r3
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20000e88 	.word	0x20000e88

08003478 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init()
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
	#ifndef USE_SPI
	int tries = 0;
 800347e:	2300      	movs	r3, #0
 8003480:	607b      	str	r3, [r7, #4]
	while(MPU9250_IsConnected() == false && tries < 5)
 8003482:	e005      	b.n	8003490 <MPU9250_Init+0x18>
	{
		tries++;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3301      	adds	r3, #1
 8003488:	607b      	str	r3, [r7, #4]
		HAL_Delay(100);
 800348a:	2064      	movs	r0, #100	; 0x64
 800348c:	f003 f9fc 	bl	8006888 <HAL_Delay>
	while(MPU9250_IsConnected() == false && tries < 5)
 8003490:	f7ff ff06 	bl	80032a0 <MPU9250_IsConnected>
 8003494:	4603      	mov	r3, r0
 8003496:	f083 0301 	eor.w	r3, r3, #1
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <MPU9250_Init+0x2e>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	ddee      	ble.n	8003484 <MPU9250_Init+0xc>
	}
	if(tries == 5)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b05      	cmp	r3, #5
 80034aa:	d101      	bne.n	80034b0 <MPU9250_Init+0x38>
	{
		return 1;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0a5      	b.n	80035fc <MPU9250_Init+0x184>
	}
	#endif
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 80034b0:	236b      	movs	r3, #107	; 0x6b
 80034b2:	2201      	movs	r2, #1
 80034b4:	4611      	mov	r1, r2
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff ff48 	bl	800334c <writeRegister>
	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 80034bc:	236a      	movs	r3, #106	; 0x6a
 80034be:	2220      	movs	r2, #32
 80034c0:	4611      	mov	r1, r2
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff ff42 	bl	800334c <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 80034c8:	2324      	movs	r3, #36	; 0x24
 80034ca:	220d      	movs	r2, #13
 80034cc:	4611      	mov	r1, r2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff ff3c 	bl	800334c <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80034d4:	230a      	movs	r3, #10
 80034d6:	2200      	movs	r2, #0
 80034d8:	4611      	mov	r1, r2
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff ff5e 	bl	800339c <writeAK8963Register>
	// reset the MPU9250
	writeRegister(PWR_MGMNT_1,PWR_RESET);
 80034e0:	236b      	movs	r3, #107	; 0x6b
 80034e2:	2280      	movs	r2, #128	; 0x80
 80034e4:	4611      	mov	r1, r2
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff ff30 	bl	800334c <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 80034ec:	200a      	movs	r0, #10
 80034ee:	f003 f9cb 	bl	8006888 <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
 80034f2:	230b      	movs	r3, #11
 80034f4:	2201      	movs	r2, #1
 80034f6:	4611      	mov	r1, r2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff ff4f 	bl	800339c <writeAK8963Register>
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 80034fe:	236b      	movs	r3, #107	; 0x6b
 8003500:	2201      	movs	r2, #1
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff ff21 	bl	800334c <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI();
 800350a:	f7ff ff99 	bl	8003440 <whoAmI>
 800350e:	4603      	mov	r3, r0
 8003510:	70fb      	strb	r3, [r7, #3]
	if((who != 0x71) && ( who != 0x73))
 8003512:	78fb      	ldrb	r3, [r7, #3]
 8003514:	2b71      	cmp	r3, #113	; 0x71
 8003516:	d004      	beq.n	8003522 <MPU9250_Init+0xaa>
 8003518:	78fb      	ldrb	r3, [r7, #3]
 800351a:	2b73      	cmp	r3, #115	; 0x73
 800351c:	d001      	beq.n	8003522 <MPU9250_Init+0xaa>
	{
		return 1;
 800351e:	2301      	movs	r3, #1
 8003520:	e06c      	b.n	80035fc <MPU9250_Init+0x184>
	}

	// enable accelerometer and gyro
	writeRegister(PWR_MGMNT_2,SEN_ENABLE);
 8003522:	236c      	movs	r3, #108	; 0x6c
 8003524:	2200      	movs	r2, #0
 8003526:	4611      	mov	r1, r2
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff ff0f 	bl	800334c <writeRegister>

	// setting accel range to 16G as default
	writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_2G);
 800352e:	231c      	movs	r3, #28
 8003530:	2200      	movs	r2, #0
 8003532:	4611      	mov	r1, r2
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff ff09 	bl	800334c <writeRegister>

	// setting the gyro range to 2000DPS as default
	writeRegister(GYRO_CONFIG,GYRO_FS_SEL_250DPS);
 800353a:	231b      	movs	r3, #27
 800353c:	2200      	movs	r2, #0
 800353e:	4611      	mov	r1, r2
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff ff03 	bl	800334c <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(ACCEL_CONFIG2,DLPF_184);
 8003546:	231d      	movs	r3, #29
 8003548:	2201      	movs	r2, #1
 800354a:	4611      	mov	r1, r2
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff fefd 	bl	800334c <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(CONFIG,DLPF_184);
 8003552:	231a      	movs	r3, #26
 8003554:	2201      	movs	r2, #1
 8003556:	4611      	mov	r1, r2
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff fef7 	bl	800334c <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(SMPDIV,0x00);
 800355e:	2319      	movs	r3, #25
 8003560:	2100      	movs	r1, #0
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff fef2 	bl	800334c <writeRegister>

	// enable I2C master mode
	writeRegister(USER_CTRL,I2C_MST_EN);
 8003568:	236a      	movs	r3, #106	; 0x6a
 800356a:	2220      	movs	r2, #32
 800356c:	4611      	mov	r1, r2
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff feec 	bl	800334c <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL,I2C_MST_CLK);
 8003574:	2324      	movs	r3, #36	; 0x24
 8003576:	220d      	movs	r2, #13
 8003578:	4611      	mov	r1, r2
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff fee6 	bl	800334c <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 0x48 )
 8003580:	f7ff ff6c 	bl	800345c <whoAmIAK8963>
 8003584:	4603      	mov	r3, r0
 8003586:	2b48      	cmp	r3, #72	; 0x48
 8003588:	d001      	beq.n	800358e <MPU9250_Init+0x116>
	{
		return 1;
 800358a:	2301      	movs	r3, #1
 800358c:	e036      	b.n	80035fc <MPU9250_Init+0x184>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 800358e:	230a      	movs	r3, #10
 8003590:	2200      	movs	r2, #0
 8003592:	4611      	mov	r1, r2
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff ff01 	bl	800339c <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 800359a:	2064      	movs	r0, #100	; 0x64
 800359c:	f003 f974 	bl	8006888 <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM);
 80035a0:	230a      	movs	r3, #10
 80035a2:	220f      	movs	r2, #15
 80035a4:	4611      	mov	r1, r2
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff fef8 	bl	800339c <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80035ac:	2064      	movs	r0, #100	; 0x64
 80035ae:	f003 f96b 	bl	8006888 <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 80035b2:	2310      	movs	r3, #16
 80035b4:	4a13      	ldr	r2, [pc, #76]	; (8003604 <MPU9250_Init+0x18c>)
 80035b6:	2103      	movs	r1, #3
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff ff16 	bl	80033ea <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80035be:	230a      	movs	r3, #10
 80035c0:	2200      	movs	r2, #0
 80035c2:	4611      	mov	r1, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff fee9 	bl	800339c <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80035ca:	2064      	movs	r0, #100	; 0x64
 80035cc:	f003 f95c 	bl	8006888 <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2);
 80035d0:	230a      	movs	r3, #10
 80035d2:	2216      	movs	r2, #22
 80035d4:	4611      	mov	r1, r2
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff fee0 	bl	800339c <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80035dc:	2064      	movs	r0, #100	; 0x64
 80035de:	f003 f953 	bl	8006888 <HAL_Delay>

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 80035e2:	236b      	movs	r3, #107	; 0x6b
 80035e4:	2201      	movs	r2, #1
 80035e6:	4611      	mov	r1, r2
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff feaf 	bl	800334c <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(AK8963_HXL,7,_buffer);
 80035ee:	2303      	movs	r3, #3
 80035f0:	4a05      	ldr	r2, [pc, #20]	; (8003608 <MPU9250_Init+0x190>)
 80035f2:	2107      	movs	r1, #7
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff fef8 	bl	80033ea <readAK8963Registers>

	// successful init, return 0
	return 0;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	20000ea0 	.word	0x20000ea0
 8003608:	20000e88 	.word	0x20000e88

0800360c <MPU9250_GetData>:
	writeRegister(SMPDIV, srd);
}

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
	// grab the data from the MPU9250
	readRegisters(ACCEL_OUT, 21, _buffer);
 8003618:	233b      	movs	r3, #59	; 0x3b
 800361a:	4a63      	ldr	r2, [pc, #396]	; (80037a8 <MPU9250_GetData+0x19c>)
 800361c:	2115      	movs	r1, #21
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff fea9 	bl	8003376 <readRegisters>

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8003624:	4b60      	ldr	r3, [pc, #384]	; (80037a8 <MPU9250_GetData+0x19c>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	021b      	lsls	r3, r3, #8
 800362a:	b21a      	sxth	r2, r3
 800362c:	4b5e      	ldr	r3, [pc, #376]	; (80037a8 <MPU9250_GetData+0x19c>)
 800362e:	785b      	ldrb	r3, [r3, #1]
 8003630:	b21b      	sxth	r3, r3
 8003632:	4313      	orrs	r3, r2
 8003634:	b21a      	sxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	801a      	strh	r2, [r3, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 800363a:	4b5b      	ldr	r3, [pc, #364]	; (80037a8 <MPU9250_GetData+0x19c>)
 800363c:	789b      	ldrb	r3, [r3, #2]
 800363e:	021b      	lsls	r3, r3, #8
 8003640:	b219      	sxth	r1, r3
 8003642:	4b59      	ldr	r3, [pc, #356]	; (80037a8 <MPU9250_GetData+0x19c>)
 8003644:	78db      	ldrb	r3, [r3, #3]
 8003646:	b21a      	sxth	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3302      	adds	r3, #2
 800364c:	430a      	orrs	r2, r1
 800364e:	b212      	sxth	r2, r2
 8003650:	801a      	strh	r2, [r3, #0]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8003652:	4b55      	ldr	r3, [pc, #340]	; (80037a8 <MPU9250_GetData+0x19c>)
 8003654:	791b      	ldrb	r3, [r3, #4]
 8003656:	021b      	lsls	r3, r3, #8
 8003658:	b219      	sxth	r1, r3
 800365a:	4b53      	ldr	r3, [pc, #332]	; (80037a8 <MPU9250_GetData+0x19c>)
 800365c:	795b      	ldrb	r3, [r3, #5]
 800365e:	b21a      	sxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	3304      	adds	r3, #4
 8003664:	430a      	orrs	r2, r1
 8003666:	b212      	sxth	r2, r2
 8003668:	801a      	strh	r2, [r3, #0]
	GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 800366a:	4b4f      	ldr	r3, [pc, #316]	; (80037a8 <MPU9250_GetData+0x19c>)
 800366c:	7a1b      	ldrb	r3, [r3, #8]
 800366e:	021b      	lsls	r3, r3, #8
 8003670:	b21a      	sxth	r2, r3
 8003672:	4b4d      	ldr	r3, [pc, #308]	; (80037a8 <MPU9250_GetData+0x19c>)
 8003674:	7a5b      	ldrb	r3, [r3, #9]
 8003676:	b21b      	sxth	r3, r3
 8003678:	4313      	orrs	r3, r2
 800367a:	b21a      	sxth	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8003680:	4b49      	ldr	r3, [pc, #292]	; (80037a8 <MPU9250_GetData+0x19c>)
 8003682:	7a9b      	ldrb	r3, [r3, #10]
 8003684:	021b      	lsls	r3, r3, #8
 8003686:	b219      	sxth	r1, r3
 8003688:	4b47      	ldr	r3, [pc, #284]	; (80037a8 <MPU9250_GetData+0x19c>)
 800368a:	7adb      	ldrb	r3, [r3, #11]
 800368c:	b21a      	sxth	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3302      	adds	r3, #2
 8003692:	430a      	orrs	r2, r1
 8003694:	b212      	sxth	r2, r2
 8003696:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 8003698:	4b43      	ldr	r3, [pc, #268]	; (80037a8 <MPU9250_GetData+0x19c>)
 800369a:	7b1b      	ldrb	r3, [r3, #12]
 800369c:	021b      	lsls	r3, r3, #8
 800369e:	b219      	sxth	r1, r3
 80036a0:	4b41      	ldr	r3, [pc, #260]	; (80037a8 <MPU9250_GetData+0x19c>)
 80036a2:	7b5b      	ldrb	r3, [r3, #13]
 80036a4:	b21a      	sxth	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3304      	adds	r3, #4
 80036aa:	430a      	orrs	r2, r1
 80036ac:	b212      	sxth	r2, r2
 80036ae:	801a      	strh	r2, [r3, #0]

	int16_t magx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 80036b0:	4b3d      	ldr	r3, [pc, #244]	; (80037a8 <MPU9250_GetData+0x19c>)
 80036b2:	7bdb      	ldrb	r3, [r3, #15]
 80036b4:	021b      	lsls	r3, r3, #8
 80036b6:	b21a      	sxth	r2, r3
 80036b8:	4b3b      	ldr	r3, [pc, #236]	; (80037a8 <MPU9250_GetData+0x19c>)
 80036ba:	7b9b      	ldrb	r3, [r3, #14]
 80036bc:	b21b      	sxth	r3, r3
 80036be:	4313      	orrs	r3, r2
 80036c0:	82fb      	strh	r3, [r7, #22]
	int16_t magy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 80036c2:	4b39      	ldr	r3, [pc, #228]	; (80037a8 <MPU9250_GetData+0x19c>)
 80036c4:	7c5b      	ldrb	r3, [r3, #17]
 80036c6:	021b      	lsls	r3, r3, #8
 80036c8:	b21a      	sxth	r2, r3
 80036ca:	4b37      	ldr	r3, [pc, #220]	; (80037a8 <MPU9250_GetData+0x19c>)
 80036cc:	7c1b      	ldrb	r3, [r3, #16]
 80036ce:	b21b      	sxth	r3, r3
 80036d0:	4313      	orrs	r3, r2
 80036d2:	82bb      	strh	r3, [r7, #20]
	int16_t magz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 80036d4:	4b34      	ldr	r3, [pc, #208]	; (80037a8 <MPU9250_GetData+0x19c>)
 80036d6:	7cdb      	ldrb	r3, [r3, #19]
 80036d8:	021b      	lsls	r3, r3, #8
 80036da:	b21a      	sxth	r2, r3
 80036dc:	4b32      	ldr	r3, [pc, #200]	; (80037a8 <MPU9250_GetData+0x19c>)
 80036de:	7c9b      	ldrb	r3, [r3, #18]
 80036e0:	b21b      	sxth	r3, r3
 80036e2:	4313      	orrs	r3, r2
 80036e4:	827b      	strh	r3, [r7, #18]

	MagData[0] = (int16_t)((float)magx * ((float)(_mag_adjust[0] - 128) / 256.0f + 1.0f));
 80036e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80036ea:	ee07 3a90 	vmov	s15, r3
 80036ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036f2:	4b2e      	ldr	r3, [pc, #184]	; (80037ac <MPU9250_GetData+0x1a0>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	3b80      	subs	r3, #128	; 0x80
 80036f8:	ee07 3a90 	vmov	s15, r3
 80036fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003700:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 80037b0 <MPU9250_GetData+0x1a4>
 8003704:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003708:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800370c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003714:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003718:	ee17 3a90 	vmov	r3, s15
 800371c:	b21a      	sxth	r2, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	801a      	strh	r2, [r3, #0]
	MagData[1] = (int16_t)((float)magy * ((float)(_mag_adjust[1] - 128) / 256.0f + 1.0f));
 8003722:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003726:	ee07 3a90 	vmov	s15, r3
 800372a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800372e:	4b1f      	ldr	r3, [pc, #124]	; (80037ac <MPU9250_GetData+0x1a0>)
 8003730:	785b      	ldrb	r3, [r3, #1]
 8003732:	3b80      	subs	r3, #128	; 0x80
 8003734:	ee07 3a90 	vmov	s15, r3
 8003738:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800373c:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 80037b0 <MPU9250_GetData+0x1a4>
 8003740:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003744:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003748:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800374c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	3302      	adds	r3, #2
 8003754:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003758:	ee17 2a90 	vmov	r2, s15
 800375c:	b212      	sxth	r2, r2
 800375e:	801a      	strh	r2, [r3, #0]
	MagData[2] = (int16_t)((float)magz * ((float)(_mag_adjust[2] - 128) / 256.0f + 1.0f));
 8003760:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003764:	ee07 3a90 	vmov	s15, r3
 8003768:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800376c:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <MPU9250_GetData+0x1a0>)
 800376e:	789b      	ldrb	r3, [r3, #2]
 8003770:	3b80      	subs	r3, #128	; 0x80
 8003772:	ee07 3a90 	vmov	s15, r3
 8003776:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800377a:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 80037b0 <MPU9250_GetData+0x1a4>
 800377e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800378a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	3304      	adds	r3, #4
 8003792:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003796:	ee17 2a90 	vmov	r2, s15
 800379a:	b212      	sxth	r2, r2
 800379c:	801a      	strh	r2, [r3, #0]
}
 800379e:	bf00      	nop
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000e88 	.word	0x20000e88
 80037ac:	20000ea0 	.word	0x20000ea0
 80037b0:	43800000 	.word	0x43800000

080037b4 <sdInit>:
		  statusRegister.SDCARD = SENSOR_OFF;
	  }
}

void sdInit(FATFS* fs)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
	  if (f_mount(fs, "", 0) == FR_OK)
 80037bc:	2200      	movs	r2, #0
 80037be:	490d      	ldr	r1, [pc, #52]	; (80037f4 <sdInit+0x40>)
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f00e fc7d 	bl	80120c0 <f_mount>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d109      	bne.n	80037e0 <sdInit+0x2c>
	  {
		  statusRegister.SDCARD = SENSOR_OK;
 80037cc:	4a0a      	ldr	r2, [pc, #40]	; (80037f8 <sdInit+0x44>)
 80037ce:	7813      	ldrb	r3, [r2, #0]
 80037d0:	2101      	movs	r1, #1
 80037d2:	f361 0302 	bfi	r3, r1, #0, #3
 80037d6:	7013      	strb	r3, [r2, #0]
		  if (DEBUG)
			  printf("SDCard mounting success!\n");
 80037d8:	4808      	ldr	r0, [pc, #32]	; (80037fc <sdInit+0x48>)
 80037da:	f00f fc07 	bl	8012fec <puts>
	  }else
	  {
		  statusRegister.SDCARD = SENSOR_INIT_FAIL;
		  //sdMountFailHandler();
	  }
}
 80037de:	e004      	b.n	80037ea <sdInit+0x36>
		  statusRegister.SDCARD = SENSOR_INIT_FAIL;
 80037e0:	4a05      	ldr	r2, [pc, #20]	; (80037f8 <sdInit+0x44>)
 80037e2:	7813      	ldrb	r3, [r2, #0]
 80037e4:	f043 0307 	orr.w	r3, r3, #7
 80037e8:	7013      	strb	r3, [r2, #0]
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	080190d0 	.word	0x080190d0
 80037f8:	2000215c 	.word	0x2000215c
 80037fc:	080190d4 	.word	0x080190d4

08003800 <openAllFiles>:
void openAllFiles()
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
	if(statusRegister.SDCARD == SENSOR_OK)
 8003804:	4b1c      	ldr	r3, [pc, #112]	; (8003878 <openAllFiles+0x78>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b01      	cmp	r3, #1
 8003810:	d130      	bne.n	8003874 <openAllFiles+0x74>
	{
		if(statusRegister.GYRO == SENSOR_OK){
 8003812:	4b19      	ldr	r3, [pc, #100]	; (8003878 <openAllFiles+0x78>)
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b40      	cmp	r3, #64	; 0x40
 800381e:	d106      	bne.n	800382e <openAllFiles+0x2e>
			openFile(gyro.File, gyro.path, FILE_DEFAULT_MODE);
 8003820:	4b16      	ldr	r3, [pc, #88]	; (800387c <openAllFiles+0x7c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2232      	movs	r2, #50	; 0x32
 8003826:	4916      	ldr	r1, [pc, #88]	; (8003880 <openAllFiles+0x80>)
 8003828:	4618      	mov	r0, r3
 800382a:	f000 f93f 	bl	8003aac <openFile>
		}
		if(statusRegister.MLXLF == SENSOR_OK){
 800382e:	4b12      	ldr	r3, [pc, #72]	; (8003878 <openAllFiles+0x78>)
 8003830:	785b      	ldrb	r3, [r3, #1]
 8003832:	f003 030e 	and.w	r3, r3, #14
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d106      	bne.n	800384a <openAllFiles+0x4a>
			openFile(mlxLFSensor.File, mlxLFSensor.path, FILE_DEFAULT_MODE);
 800383c:	4b11      	ldr	r3, [pc, #68]	; (8003884 <openAllFiles+0x84>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2232      	movs	r2, #50	; 0x32
 8003842:	4911      	ldr	r1, [pc, #68]	; (8003888 <openAllFiles+0x88>)
 8003844:	4618      	mov	r0, r3
 8003846:	f000 f931 	bl	8003aac <openFile>
		}
		if(statusRegister.VSSLF == SENSOR_OK){
 800384a:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <openAllFiles+0x78>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8003852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003856:	d106      	bne.n	8003866 <openAllFiles+0x66>
			openFile(absLFSensor.File, absLFSensor.path, FILE_DEFAULT_MODE);
 8003858:	4b0c      	ldr	r3, [pc, #48]	; (800388c <openAllFiles+0x8c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2232      	movs	r2, #50	; 0x32
 800385e:	490c      	ldr	r1, [pc, #48]	; (8003890 <openAllFiles+0x90>)
 8003860:	4618      	mov	r0, r3
 8003862:	f000 f923 	bl	8003aac <openFile>
		}
		if(statusRegister.DamperLF == SENSOR_OK){

		}
		openFile(gpsSensor.File,gpsSensor.path,FILE_DEFAULT_MODE);
 8003866:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <openAllFiles+0x94>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2232      	movs	r2, #50	; 0x32
 800386c:	490a      	ldr	r1, [pc, #40]	; (8003898 <openAllFiles+0x98>)
 800386e:	4618      	mov	r0, r3
 8003870:	f000 f91c 	bl	8003aac <openFile>
	}
}
 8003874:	bf00      	nop
 8003876:	bd80      	pop	{r7, pc}
 8003878:	2000215c 	.word	0x2000215c
 800387c:	20006068 	.word	0x20006068
 8003880:	2000606c 	.word	0x2000606c
 8003884:	20002300 	.word	0x20002300
 8003888:	20002304 	.word	0x20002304
 800388c:	20006110 	.word	0x20006110
 8003890:	20006114 	.word	0x20006114
 8003894:	20006178 	.word	0x20006178
 8003898:	2000617c 	.word	0x2000617c

0800389c <createHeaders>:
int createHeaders(FIL * file,char * path)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08c      	sub	sp, #48	; 0x30
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
	FRESULT fres;
	UINT bytesWritten = 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24

	fres = f_write(file,"timestamp,",strlen("timestamp,"),&bytesWritten);
 80038aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038ae:	220a      	movs	r2, #10
 80038b0:	496c      	ldr	r1, [pc, #432]	; (8003a64 <createHeaders+0x1c8>)
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f00e fe16 	bl	80124e4 <f_write>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(fres != FR_OK){
 80038be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d006      	beq.n	80038d4 <createHeaders+0x38>
		printf("Error while creating %s header",path);
 80038c6:	6839      	ldr	r1, [r7, #0]
 80038c8:	4867      	ldr	r0, [pc, #412]	; (8003a68 <createHeaders+0x1cc>)
 80038ca:	f00f fb2f 	bl	8012f2c <printf>
		return SD_WRITE_ERROR;
 80038ce:	f04f 33ff 	mov.w	r3, #4294967295
 80038d2:	e0c3      	b.n	8003a5c <createHeaders+0x1c0>
	}

	if(strstr(path,"GYRO") != NULL){
 80038d4:	4965      	ldr	r1, [pc, #404]	; (8003a6c <createHeaders+0x1d0>)
 80038d6:	6838      	ldr	r0, [r7, #0]
 80038d8:	f00f fbc8 	bl	801306c <strstr>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <createHeaders+0x5c>
		fres = f_write(file, "gyro_x,gyro_y,gyro_z,acc_x,acc_y,acc_z\r\n", strlen("gyro_x,gyro_y,gyro_z,acc_x,acc_y,acc_z\r\n"), &bytesWritten);
 80038e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038e6:	2228      	movs	r2, #40	; 0x28
 80038e8:	4961      	ldr	r1, [pc, #388]	; (8003a70 <createHeaders+0x1d4>)
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f00e fdfa 	bl	80124e4 <f_write>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80038f6:	e09b      	b.n	8003a30 <createHeaders+0x194>

	}else if(strstr(path,"MLX")!= NULL){
 80038f8:	495e      	ldr	r1, [pc, #376]	; (8003a74 <createHeaders+0x1d8>)
 80038fa:	6838      	ldr	r0, [r7, #0]
 80038fc:	f00f fbb6 	bl	801306c <strstr>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d049      	beq.n	800399a <createHeaders+0xfe>
		char headerData[25];
		fres =  f_write(file, "ID,", strlen("ID,"), &bytesWritten);
 8003906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800390a:	2203      	movs	r2, #3
 800390c:	495a      	ldr	r1, [pc, #360]	; (8003a78 <createHeaders+0x1dc>)
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f00e fde8 	bl	80124e4 <f_write>
 8003914:	4603      	mov	r3, r0
 8003916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for(int i=0;i<784;i++){
 800391a:	2300      	movs	r3, #0
 800391c:	62bb      	str	r3, [r7, #40]	; 0x28
 800391e:	e037      	b.n	8003990 <createHeaders+0xf4>
			sprintf(headerData,"float_%d,", i);
 8003920:	f107 0308 	add.w	r3, r7, #8
 8003924:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003926:	4955      	ldr	r1, [pc, #340]	; (8003a7c <createHeaders+0x1e0>)
 8003928:	4618      	mov	r0, r3
 800392a:	f00f fb77 	bl	801301c <sprintf>
			fres = fres | f_write(file, headerData, strlen(headerData), &bytesWritten);
 800392e:	f107 0308 	add.w	r3, r7, #8
 8003932:	4618      	mov	r0, r3
 8003934:	f7fc fc84 	bl	8000240 <strlen>
 8003938:	4602      	mov	r2, r0
 800393a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800393e:	f107 0108 	add.w	r1, r7, #8
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f00e fdce 	bl	80124e4 <f_write>
 8003948:	4603      	mov	r3, r0
 800394a:	461a      	mov	r2, r3
 800394c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003950:	4313      	orrs	r3, r2
 8003952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			sprintf(headerData,"id,");
 8003956:	f107 0308 	add.w	r3, r7, #8
 800395a:	4949      	ldr	r1, [pc, #292]	; (8003a80 <createHeaders+0x1e4>)
 800395c:	4618      	mov	r0, r3
 800395e:	f00f fb5d 	bl	801301c <sprintf>
			fres =  fres | f_write(file, headerData, strlen(headerData), &bytesWritten);
 8003962:	f107 0308 	add.w	r3, r7, #8
 8003966:	4618      	mov	r0, r3
 8003968:	f7fc fc6a 	bl	8000240 <strlen>
 800396c:	4602      	mov	r2, r0
 800396e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003972:	f107 0108 	add.w	r1, r7, #8
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f00e fdb4 	bl	80124e4 <f_write>
 800397c:	4603      	mov	r3, r0
 800397e:	461a      	mov	r2, r3
 8003980:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003984:	4313      	orrs	r3, r2
 8003986:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for(int i=0;i<784;i++){
 800398a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398c:	3301      	adds	r3, #1
 800398e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003992:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8003996:	dbc3      	blt.n	8003920 <createHeaders+0x84>
 8003998:	e04a      	b.n	8003a30 <createHeaders+0x194>
		}

	}else if(strstr(path,"ABS")!= NULL){
 800399a:	493a      	ldr	r1, [pc, #232]	; (8003a84 <createHeaders+0x1e8>)
 800399c:	6838      	ldr	r0, [r7, #0]
 800399e:	f00f fb65 	bl	801306c <strstr>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <createHeaders+0x122>
		fres = f_write(file, "ID,speed\r\n", strlen("ID,speed\r\n"), &bytesWritten);
 80039a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039ac:	220a      	movs	r2, #10
 80039ae:	4936      	ldr	r1, [pc, #216]	; (8003a88 <createHeaders+0x1ec>)
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f00e fd97 	bl	80124e4 <f_write>
 80039b6:	4603      	mov	r3, r0
 80039b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80039bc:	e038      	b.n	8003a30 <createHeaders+0x194>
	}else if(strstr(path,"DAMP")!= NULL){
 80039be:	4933      	ldr	r1, [pc, #204]	; (8003a8c <createHeaders+0x1f0>)
 80039c0:	6838      	ldr	r0, [r7, #0]
 80039c2:	f00f fb53 	bl	801306c <strstr>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00a      	beq.n	80039e2 <createHeaders+0x146>
		fres = f_write(file, "ID,length\r\n", strlen("ID,length\r\n"), &bytesWritten);
 80039cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039d0:	220b      	movs	r2, #11
 80039d2:	492f      	ldr	r1, [pc, #188]	; (8003a90 <createHeaders+0x1f4>)
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f00e fd85 	bl	80124e4 <f_write>
 80039da:	4603      	mov	r3, r0
 80039dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80039e0:	e026      	b.n	8003a30 <createHeaders+0x194>
	}else if(strstr(path,"WHEEL")!= NULL){
 80039e2:	492c      	ldr	r1, [pc, #176]	; (8003a94 <createHeaders+0x1f8>)
 80039e4:	6838      	ldr	r0, [r7, #0]
 80039e6:	f00f fb41 	bl	801306c <strstr>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <createHeaders+0x16a>
		fres = f_write(file, "ID,angle\r\n", strlen("ID,angle\r\n"), &bytesWritten);
 80039f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039f4:	220a      	movs	r2, #10
 80039f6:	4928      	ldr	r1, [pc, #160]	; (8003a98 <createHeaders+0x1fc>)
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f00e fd73 	bl	80124e4 <f_write>
 80039fe:	4603      	mov	r3, r0
 8003a00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003a04:	e014      	b.n	8003a30 <createHeaders+0x194>
	}else if(strstr(path,"GPS")!= NULL){
 8003a06:	4925      	ldr	r1, [pc, #148]	; (8003a9c <createHeaders+0x200>)
 8003a08:	6838      	ldr	r0, [r7, #0]
 8003a0a:	f00f fb2f 	bl	801306c <strstr>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00a      	beq.n	8003a2a <createHeaders+0x18e>
		fres = f_write(file, "LOG,utc,pos status,lat,lat dir,lon,lon dir,speed,,track,date,,mag var,var dir,mode ind,chs,ter\r\n", strlen("LOG,utc,pos status,lat,lat dir,lon,lon dir,speed,,track,date,,mag var,var dir,mode ind,chs,ter\r\n"), &bytesWritten);
 8003a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a18:	2260      	movs	r2, #96	; 0x60
 8003a1a:	4921      	ldr	r1, [pc, #132]	; (8003aa0 <createHeaders+0x204>)
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f00e fd61 	bl	80124e4 <f_write>
 8003a22:	4603      	mov	r3, r0
 8003a24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003a28:	e002      	b.n	8003a30 <createHeaders+0x194>
	}else
	{
		return WRONG_PARAMETER;
 8003a2a:	f06f 0302 	mvn.w	r3, #2
 8003a2e:	e015      	b.n	8003a5c <createHeaders+0x1c0>
	}

	if(fres != FR_OK){
 8003a30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d006      	beq.n	8003a46 <createHeaders+0x1aa>
		printf("Error while creating %s header\n",path);
 8003a38:	6839      	ldr	r1, [r7, #0]
 8003a3a:	481a      	ldr	r0, [pc, #104]	; (8003aa4 <createHeaders+0x208>)
 8003a3c:	f00f fa76 	bl	8012f2c <printf>
		return SD_WRITE_ERROR;
 8003a40:	f04f 33ff 	mov.w	r3, #4294967295
 8003a44:	e00a      	b.n	8003a5c <createHeaders+0x1c0>
	}
	fres =  f_write(file, "\n", strlen("\n"), &bytesWritten);
 8003a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	4916      	ldr	r1, [pc, #88]	; (8003aa8 <createHeaders+0x20c>)
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f00e fd48 	bl	80124e4 <f_write>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	return SD_OK;
 8003a5a:	2301      	movs	r3, #1

}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3730      	adds	r7, #48	; 0x30
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	080190f0 	.word	0x080190f0
 8003a68:	080190fc 	.word	0x080190fc
 8003a6c:	0801911c 	.word	0x0801911c
 8003a70:	08019124 	.word	0x08019124
 8003a74:	08019150 	.word	0x08019150
 8003a78:	08019154 	.word	0x08019154
 8003a7c:	08019158 	.word	0x08019158
 8003a80:	08019164 	.word	0x08019164
 8003a84:	08019168 	.word	0x08019168
 8003a88:	0801916c 	.word	0x0801916c
 8003a8c:	08019178 	.word	0x08019178
 8003a90:	08019180 	.word	0x08019180
 8003a94:	0801918c 	.word	0x0801918c
 8003a98:	08019194 	.word	0x08019194
 8003a9c:	080191a0 	.word	0x080191a0
 8003aa0:	080191a4 	.word	0x080191a4
 8003aa4:	08019208 	.word	0x08019208
 8003aa8:	08019228 	.word	0x08019228

08003aac <openFile>:


int openFile(FIL * file, char * path, BYTE mode)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08c      	sub	sp, #48	; 0x30
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	71fb      	strb	r3, [r7, #7]
	FILINFO fInfo;
	FRESULT fres = f_stat(path, &fInfo);
 8003aba:	f107 0310 	add.w	r3, r7, #16
 8003abe:	4619      	mov	r1, r3
 8003ac0:	68b8      	ldr	r0, [r7, #8]
 8003ac2:	f00e ff21 	bl	8012908 <f_stat>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(fres == FR_OK)
 8003acc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d114      	bne.n	8003afe <openFile+0x52>
	{
		fres = f_open(file, _TEXT(path), mode);
 8003ad4:	79fb      	ldrb	r3, [r7, #7]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	68b9      	ldr	r1, [r7, #8]
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f00e fb36 	bl	801214c <f_open>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(fres == FR_OK)
 8003ae6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d104      	bne.n	8003af8 <openFile+0x4c>
		{
			printf("Opening file: %s succeeded\n", path);
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	4818      	ldr	r0, [pc, #96]	; (8003b54 <openFile+0xa8>)
 8003af2:	f00f fa1b 	bl	8012f2c <printf>
 8003af6:	e025      	b.n	8003b44 <openFile+0x98>
		}else
		{
			return SD_READ_ERROR;
 8003af8:	f06f 0301 	mvn.w	r3, #1
 8003afc:	e026      	b.n	8003b4c <openFile+0xa0>
		}
	}else if(fres == FR_NO_FILE)
 8003afe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d11e      	bne.n	8003b44 <openFile+0x98>
	{
		fres = f_open(file, _TEXT(path), mode);
 8003b06:	79fb      	ldrb	r3, [r7, #7]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	68b9      	ldr	r1, [r7, #8]
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f00e fb1d 	bl	801214c <f_open>
 8003b12:	4603      	mov	r3, r0
 8003b14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(fres == FR_OK)
 8003b18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10e      	bne.n	8003b3e <openFile+0x92>
		{
			int res = createHeaders(file,path);
 8003b20:	68b9      	ldr	r1, [r7, #8]
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f7ff feba 	bl	800389c <createHeaders>
 8003b28:	62b8      	str	r0, [r7, #40]	; 0x28
			if(res != SD_OK)
 8003b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d001      	beq.n	8003b34 <openFile+0x88>
			{
				return res;
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	e00b      	b.n	8003b4c <openFile+0xa0>
			}

			printf("No file: %s, created new\n", path);
 8003b34:	68b9      	ldr	r1, [r7, #8]
 8003b36:	4808      	ldr	r0, [pc, #32]	; (8003b58 <openFile+0xac>)
 8003b38:	f00f f9f8 	bl	8012f2c <printf>
 8003b3c:	e002      	b.n	8003b44 <openFile+0x98>

		}else
		{
			return SD_READ_ERROR;
 8003b3e:	f06f 0301 	mvn.w	r3, #1
 8003b42:	e003      	b.n	8003b4c <openFile+0xa0>
		}
	}
	f_sync(file);
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f00e fe61 	bl	801280c <f_sync>
	return SD_OK;
 8003b4a:	2301      	movs	r3, #1


}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3730      	adds	r7, #48	; 0x30
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	0801922c 	.word	0x0801922c
 8003b58:	08019248 	.word	0x08019248

08003b5c <gpsSaveData>:
void gpsSaveData(GPSSensor * sens)
{
 8003b5c:	b5b0      	push	{r4, r5, r7, lr}
 8003b5e:	b0c4      	sub	sp, #272	; 0x110
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b66:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003b6a:	6018      	str	r0, [r3, #0]
	char dataBuffer[255];
	int writedBytes;
	FRESULT status = 0;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	//Save time stamp
	sprintf(dataBuffer, "%d,", HAL_GetTick());
 8003b72:	f002 fe7d 	bl	8006870 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	f107 0310 	add.w	r3, r7, #16
 8003b7c:	492a      	ldr	r1, [pc, #168]	; (8003c28 <gpsSaveData+0xcc>)
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f00f fa4c 	bl	801301c <sprintf>
	status = f_write(sens->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 8003b84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681c      	ldr	r4, [r3, #0]
 8003b90:	f107 0310 	add.w	r3, r7, #16
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7fc fb53 	bl	8000240 <strlen>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	f107 030c 	add.w	r3, r7, #12
 8003ba0:	f107 0110 	add.w	r1, r7, #16
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	f00e fc9d 	bl	80124e4 <f_write>
 8003baa:	4603      	mov	r3, r0
 8003bac:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	status = status | f_write(sens->File,sens->data,strlen(sens->data),&writedBytes);
 8003bb0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bb4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681c      	ldr	r4, [r3, #0]
 8003bbc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bc0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f203 1521 	addw	r5, r3, #289	; 0x121
 8003bca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f203 1321 	addw	r3, r3, #289	; 0x121
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fc fb31 	bl	8000240 <strlen>
 8003bde:	4602      	mov	r2, r0
 8003be0:	f107 030c 	add.w	r3, r7, #12
 8003be4:	4629      	mov	r1, r5
 8003be6:	4620      	mov	r0, r4
 8003be8:	f00e fc7c 	bl	80124e4 <f_write>
 8003bec:	4603      	mov	r3, r0
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	sens->dataReady = 0;
 8003bfa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bfe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	7e13      	ldrb	r3, [r2, #24]
 8003c06:	f36f 0300 	bfc	r3, #0, #1
 8003c0a:	7613      	strb	r3, [r2, #24]
	f_sync(sens->File);
 8003c0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c10:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f00e fdf7 	bl	801280c <f_sync>
}
 8003c1e:	bf00      	nop
 8003c20:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bdb0      	pop	{r4, r5, r7, pc}
 8003c28:	08019264 	.word	0x08019264

08003c2c <gyroSaveData>:
void gyroSaveData(GyroSensor* sens)
{
 8003c2c:	b590      	push	{r4, r7, lr}
 8003c2e:	b0c7      	sub	sp, #284	; 0x11c
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003c36:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003c3a:	6018      	str	r0, [r3, #0]
	char dataBuffer[255];
	int writedBytes;
	FRESULT status = 0;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	//Save time stamp
	sprintf(dataBuffer, "%d,", HAL_GetTick());
 8003c42:	f002 fe15 	bl	8006870 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	f107 030c 	add.w	r3, r7, #12
 8003c4c:	496c      	ldr	r1, [pc, #432]	; (8003e00 <gyroSaveData+0x1d4>)
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f00f f9e4 	bl	801301c <sprintf>
	status = f_write(sens->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 8003c54:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003c58:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681c      	ldr	r4, [r3, #0]
 8003c60:	f107 030c 	add.w	r3, r7, #12
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fc faeb 	bl	8000240 <strlen>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	f107 0308 	add.w	r3, r7, #8
 8003c70:	f107 010c 	add.w	r1, r7, #12
 8003c74:	4620      	mov	r0, r4
 8003c76:	f00e fc35 	bl	80124e4 <f_write>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	for (int i = 0; i < 3; i++)
 8003c80:	2300      	movs	r3, #0
 8003c82:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003c86:	e02f      	b.n	8003ce8 <gyroSaveData+0xbc>
	{
		sprintf(dataBuffer, "%f,", sens->data.gyro_data_calc[i]);
 8003c88:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003c8c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003c96:	3308      	adds	r3, #8
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca0:	f107 000c 	add.w	r0, r7, #12
 8003ca4:	4957      	ldr	r1, [pc, #348]	; (8003e04 <gyroSaveData+0x1d8>)
 8003ca6:	f00f f9b9 	bl	801301c <sprintf>
		status = status | f_write(sens->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 8003caa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003cae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681c      	ldr	r4, [r3, #0]
 8003cb6:	f107 030c 	add.w	r3, r7, #12
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fc fac0 	bl	8000240 <strlen>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	f107 0308 	add.w	r3, r7, #8
 8003cc6:	f107 010c 	add.w	r1, r7, #12
 8003cca:	4620      	mov	r0, r4
 8003ccc:	f00e fc0a 	bl	80124e4 <f_write>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	for (int i = 0; i < 3; i++)
 8003cde:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003ce8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	ddcb      	ble.n	8003c88 <gyroSaveData+0x5c>

	}
	for (int i = 0; i < 3; i++)
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003cf6:	e02f      	b.n	8003d58 <gyroSaveData+0x12c>
	{
		sprintf(dataBuffer, "%f,", sens->data.acc_data_calc[i]);
 8003cf8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003cfc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d06:	3305      	adds	r3, #5
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d10:	f107 000c 	add.w	r0, r7, #12
 8003d14:	493b      	ldr	r1, [pc, #236]	; (8003e04 <gyroSaveData+0x1d8>)
 8003d16:	f00f f981 	bl	801301c <sprintf>
		status = status | f_write(sens->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 8003d1a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003d1e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681c      	ldr	r4, [r3, #0]
 8003d26:	f107 030c 	add.w	r3, r7, #12
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fc fa88 	bl	8000240 <strlen>
 8003d30:	4602      	mov	r2, r0
 8003d32:	f107 0308 	add.w	r3, r7, #8
 8003d36:	f107 010c 	add.w	r1, r7, #12
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	f00e fbd2 	bl	80124e4 <f_write>
 8003d40:	4603      	mov	r3, r0
 8003d42:	461a      	mov	r2, r3
 8003d44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	for (int i = 0; i < 3; i++)
 8003d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d52:	3301      	adds	r3, #1
 8003d54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	ddcb      	ble.n	8003cf8 <gyroSaveData+0xcc>
	}

	sprintf(dataBuffer, "\r\n ");
 8003d60:	f107 030c 	add.w	r3, r7, #12
 8003d64:	4928      	ldr	r1, [pc, #160]	; (8003e08 <gyroSaveData+0x1dc>)
 8003d66:	4618      	mov	r0, r3
 8003d68:	f00f f958 	bl	801301c <sprintf>

	status = status | f_write(sens->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 8003d6c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003d70:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681c      	ldr	r4, [r3, #0]
 8003d78:	f107 030c 	add.w	r3, r7, #12
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fc fa5f 	bl	8000240 <strlen>
 8003d82:	4602      	mov	r2, r0
 8003d84:	f107 0308 	add.w	r3, r7, #8
 8003d88:	f107 010c 	add.w	r1, r7, #12
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	f00e fba9 	bl	80124e4 <f_write>
 8003d92:	4603      	mov	r3, r0
 8003d94:	461a      	mov	r2, r3
 8003d96:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	if(status != 0 && statusRegister.SDCARD < SENSOR_FAIL && statusRegister.SDCARD > SENSOR_OFF)
 8003da0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01c      	beq.n	8003de2 <gyroSaveData+0x1b6>
 8003da8:	4b18      	ldr	r3, [pc, #96]	; (8003e0c <gyroSaveData+0x1e0>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d815      	bhi.n	8003de2 <gyroSaveData+0x1b6>
 8003db6:	4b15      	ldr	r3, [pc, #84]	; (8003e0c <gyroSaveData+0x1e0>)
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00e      	beq.n	8003de2 <gyroSaveData+0x1b6>
	{
		statusRegister.SDCARD += 1;
 8003dc4:	4b11      	ldr	r3, [pc, #68]	; (8003e0c <gyroSaveData+0x1e0>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	3301      	adds	r3, #1
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	b2d9      	uxtb	r1, r3
 8003dd8:	4a0c      	ldr	r2, [pc, #48]	; (8003e0c <gyroSaveData+0x1e0>)
 8003dda:	7813      	ldrb	r3, [r2, #0]
 8003ddc:	f361 0302 	bfi	r3, r1, #0, #3
 8003de0:	7013      	strb	r3, [r2, #0]
	}
	f_sync(sens->File);
 8003de2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003de6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f00e fd0c 	bl	801280c <f_sync>

}
 8003df4:	bf00      	nop
 8003df6:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd90      	pop	{r4, r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	08019264 	.word	0x08019264
 8003e04:	08019268 	.word	0x08019268
 8003e08:	0801926c 	.word	0x0801926c
 8003e0c:	2000215c 	.word	0x2000215c

08003e10 <mlxSaveData>:

void mlxSaveData(MLXSensor* mlx)
{
 8003e10:	b590      	push	{r4, r7, lr}
 8003e12:	b0c7      	sub	sp, #284	; 0x11c
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e1a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003e1e:	6018      	str	r0, [r3, #0]
	char dataBuffer[255];
	int writedBytes;
	//Save time stamp and mlx ID
	sprintf(dataBuffer, "%d,%d", HAL_GetTick(),mlx->ID);
 8003e20:	f002 fd26 	bl	8006870 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e2a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	f107 0010 	add.w	r0, r7, #16
 8003e36:	493f      	ldr	r1, [pc, #252]	; (8003f34 <mlxSaveData+0x124>)
 8003e38:	f00f f8f0 	bl	801301c <sprintf>
	int fres = f_write(mlx->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 8003e3c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e40:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681c      	ldr	r4, [r3, #0]
 8003e48:	f107 0310 	add.w	r3, r7, #16
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fc f9f7 	bl	8000240 <strlen>
 8003e52:	4602      	mov	r2, r0
 8003e54:	f107 030c 	add.w	r3, r7, #12
 8003e58:	f107 0110 	add.w	r1, r7, #16
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	f00e fb41 	bl	80124e4 <f_write>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	for(int i=0;i<784;i++)
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003e6e:	e034      	b.n	8003eda <mlxSaveData+0xca>
	{
		sprintf(dataBuffer,"%2.2f,", mlx->data[i]);
 8003e70:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e74:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003e7e:	f203 43aa 	addw	r3, r3, #1194	; 0x4aa
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	edd3 7a00 	vldr	s15, [r3]
 8003e8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e8e:	f107 0010 	add.w	r0, r7, #16
 8003e92:	ec53 2b17 	vmov	r2, r3, d7
 8003e96:	4928      	ldr	r1, [pc, #160]	; (8003f38 <mlxSaveData+0x128>)
 8003e98:	f00f f8c0 	bl	801301c <sprintf>
		fres = fres | f_write(mlx->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 8003e9c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003ea0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681c      	ldr	r4, [r3, #0]
 8003ea8:	f107 0310 	add.w	r3, r7, #16
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7fc f9c7 	bl	8000240 <strlen>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	f107 030c 	add.w	r3, r7, #12
 8003eb8:	f107 0110 	add.w	r1, r7, #16
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	f00e fb11 	bl	80124e4 <f_write>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	for(int i=0;i<784;i++)
 8003ed0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003eda:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003ede:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8003ee2:	dbc5      	blt.n	8003e70 <mlxSaveData+0x60>
	}

	sprintf(dataBuffer, "\r\n ");
 8003ee4:	f107 0310 	add.w	r3, r7, #16
 8003ee8:	4914      	ldr	r1, [pc, #80]	; (8003f3c <mlxSaveData+0x12c>)
 8003eea:	4618      	mov	r0, r3
 8003eec:	f00f f896 	bl	801301c <sprintf>
	f_write(mlx->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 8003ef0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003ef4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681c      	ldr	r4, [r3, #0]
 8003efc:	f107 0310 	add.w	r3, r7, #16
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fc f99d 	bl	8000240 <strlen>
 8003f06:	4602      	mov	r2, r0
 8003f08:	f107 030c 	add.w	r3, r7, #12
 8003f0c:	f107 0110 	add.w	r1, r7, #16
 8003f10:	4620      	mov	r0, r4
 8003f12:	f00e fae7 	bl	80124e4 <f_write>
	f_sync(mlx->File);
 8003f16:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003f1a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f00e fc72 	bl	801280c <f_sync>
}
 8003f28:	bf00      	nop
 8003f2a:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd90      	pop	{r4, r7, pc}
 8003f32:	bf00      	nop
 8003f34:	08019270 	.word	0x08019270
 8003f38:	08019278 	.word	0x08019278
 8003f3c:	0801926c 	.word	0x0801926c

08003f40 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003f46:	463b      	mov	r3, r7
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	605a      	str	r2, [r3, #4]
 8003f4e:	609a      	str	r2, [r3, #8]
 8003f50:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003f52:	4b21      	ldr	r3, [pc, #132]	; (8003fd8 <MX_ADC1_Init+0x98>)
 8003f54:	4a21      	ldr	r2, [pc, #132]	; (8003fdc <MX_ADC1_Init+0x9c>)
 8003f56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003f58:	4b1f      	ldr	r3, [pc, #124]	; (8003fd8 <MX_ADC1_Init+0x98>)
 8003f5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f5e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003f60:	4b1d      	ldr	r3, [pc, #116]	; (8003fd8 <MX_ADC1_Init+0x98>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003f66:	4b1c      	ldr	r3, [pc, #112]	; (8003fd8 <MX_ADC1_Init+0x98>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003f6c:	4b1a      	ldr	r3, [pc, #104]	; (8003fd8 <MX_ADC1_Init+0x98>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003f72:	4b19      	ldr	r3, [pc, #100]	; (8003fd8 <MX_ADC1_Init+0x98>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003f7a:	4b17      	ldr	r3, [pc, #92]	; (8003fd8 <MX_ADC1_Init+0x98>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003f80:	4b15      	ldr	r3, [pc, #84]	; (8003fd8 <MX_ADC1_Init+0x98>)
 8003f82:	4a17      	ldr	r2, [pc, #92]	; (8003fe0 <MX_ADC1_Init+0xa0>)
 8003f84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003f86:	4b14      	ldr	r3, [pc, #80]	; (8003fd8 <MX_ADC1_Init+0x98>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003f8c:	4b12      	ldr	r3, [pc, #72]	; (8003fd8 <MX_ADC1_Init+0x98>)
 8003f8e:	2201      	movs	r2, #1
 8003f90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003f92:	4b11      	ldr	r3, [pc, #68]	; (8003fd8 <MX_ADC1_Init+0x98>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003f9a:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <MX_ADC1_Init+0x98>)
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003fa0:	480d      	ldr	r0, [pc, #52]	; (8003fd8 <MX_ADC1_Init+0x98>)
 8003fa2:	f002 fc95 	bl	80068d0 <HAL_ADC_Init>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003fac:	f001 fa86 	bl	80054bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003fbc:	463b      	mov	r3, r7
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	4805      	ldr	r0, [pc, #20]	; (8003fd8 <MX_ADC1_Init+0x98>)
 8003fc2:	f002 fdf7 	bl	8006bb4 <HAL_ADC_ConfigChannel>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003fcc:	f001 fa76 	bl	80054bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003fd0:	bf00      	nop
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	20000ea4 	.word	0x20000ea4
 8003fdc:	40012000 	.word	0x40012000
 8003fe0:	0f000001 	.word	0x0f000001

08003fe4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003fea:	463b      	mov	r3, r7
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	605a      	str	r2, [r3, #4]
 8003ff2:	609a      	str	r2, [r3, #8]
 8003ff4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003ff6:	4b21      	ldr	r3, [pc, #132]	; (800407c <MX_ADC2_Init+0x98>)
 8003ff8:	4a21      	ldr	r2, [pc, #132]	; (8004080 <MX_ADC2_Init+0x9c>)
 8003ffa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003ffc:	4b1f      	ldr	r3, [pc, #124]	; (800407c <MX_ADC2_Init+0x98>)
 8003ffe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004002:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004004:	4b1d      	ldr	r3, [pc, #116]	; (800407c <MX_ADC2_Init+0x98>)
 8004006:	2200      	movs	r2, #0
 8004008:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800400a:	4b1c      	ldr	r3, [pc, #112]	; (800407c <MX_ADC2_Init+0x98>)
 800400c:	2200      	movs	r2, #0
 800400e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8004010:	4b1a      	ldr	r3, [pc, #104]	; (800407c <MX_ADC2_Init+0x98>)
 8004012:	2200      	movs	r2, #0
 8004014:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004016:	4b19      	ldr	r3, [pc, #100]	; (800407c <MX_ADC2_Init+0x98>)
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800401e:	4b17      	ldr	r3, [pc, #92]	; (800407c <MX_ADC2_Init+0x98>)
 8004020:	2200      	movs	r2, #0
 8004022:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004024:	4b15      	ldr	r3, [pc, #84]	; (800407c <MX_ADC2_Init+0x98>)
 8004026:	4a17      	ldr	r2, [pc, #92]	; (8004084 <MX_ADC2_Init+0xa0>)
 8004028:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800402a:	4b14      	ldr	r3, [pc, #80]	; (800407c <MX_ADC2_Init+0x98>)
 800402c:	2200      	movs	r2, #0
 800402e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8004030:	4b12      	ldr	r3, [pc, #72]	; (800407c <MX_ADC2_Init+0x98>)
 8004032:	2201      	movs	r2, #1
 8004034:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8004036:	4b11      	ldr	r3, [pc, #68]	; (800407c <MX_ADC2_Init+0x98>)
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800403e:	4b0f      	ldr	r3, [pc, #60]	; (800407c <MX_ADC2_Init+0x98>)
 8004040:	2201      	movs	r2, #1
 8004042:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004044:	480d      	ldr	r0, [pc, #52]	; (800407c <MX_ADC2_Init+0x98>)
 8004046:	f002 fc43 	bl	80068d0 <HAL_ADC_Init>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8004050:	f001 fa34 	bl	80054bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004054:	2301      	movs	r3, #1
 8004056:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004058:	2301      	movs	r3, #1
 800405a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800405c:	2300      	movs	r3, #0
 800405e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004060:	463b      	mov	r3, r7
 8004062:	4619      	mov	r1, r3
 8004064:	4805      	ldr	r0, [pc, #20]	; (800407c <MX_ADC2_Init+0x98>)
 8004066:	f002 fda5 	bl	8006bb4 <HAL_ADC_ConfigChannel>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8004070:	f001 fa24 	bl	80054bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004074:	bf00      	nop
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	20000eec 	.word	0x20000eec
 8004080:	40012100 	.word	0x40012100
 8004084:	0f000001 	.word	0x0f000001

08004088 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800408e:	463b      	mov	r3, r7
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	605a      	str	r2, [r3, #4]
 8004096:	609a      	str	r2, [r3, #8]
 8004098:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800409a:	4b21      	ldr	r3, [pc, #132]	; (8004120 <MX_ADC3_Init+0x98>)
 800409c:	4a21      	ldr	r2, [pc, #132]	; (8004124 <MX_ADC3_Init+0x9c>)
 800409e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80040a0:	4b1f      	ldr	r3, [pc, #124]	; (8004120 <MX_ADC3_Init+0x98>)
 80040a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80040a6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80040a8:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <MX_ADC3_Init+0x98>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80040ae:	4b1c      	ldr	r3, [pc, #112]	; (8004120 <MX_ADC3_Init+0x98>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80040b4:	4b1a      	ldr	r3, [pc, #104]	; (8004120 <MX_ADC3_Init+0x98>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80040ba:	4b19      	ldr	r3, [pc, #100]	; (8004120 <MX_ADC3_Init+0x98>)
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80040c2:	4b17      	ldr	r3, [pc, #92]	; (8004120 <MX_ADC3_Init+0x98>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80040c8:	4b15      	ldr	r3, [pc, #84]	; (8004120 <MX_ADC3_Init+0x98>)
 80040ca:	4a17      	ldr	r2, [pc, #92]	; (8004128 <MX_ADC3_Init+0xa0>)
 80040cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80040ce:	4b14      	ldr	r3, [pc, #80]	; (8004120 <MX_ADC3_Init+0x98>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80040d4:	4b12      	ldr	r3, [pc, #72]	; (8004120 <MX_ADC3_Init+0x98>)
 80040d6:	2201      	movs	r2, #1
 80040d8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80040da:	4b11      	ldr	r3, [pc, #68]	; (8004120 <MX_ADC3_Init+0x98>)
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80040e2:	4b0f      	ldr	r3, [pc, #60]	; (8004120 <MX_ADC3_Init+0x98>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80040e8:	480d      	ldr	r0, [pc, #52]	; (8004120 <MX_ADC3_Init+0x98>)
 80040ea:	f002 fbf1 	bl	80068d0 <HAL_ADC_Init>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80040f4:	f001 f9e2 	bl	80054bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80040f8:	2309      	movs	r3, #9
 80040fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80040fc:	2301      	movs	r3, #1
 80040fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004100:	2307      	movs	r3, #7
 8004102:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004104:	463b      	mov	r3, r7
 8004106:	4619      	mov	r1, r3
 8004108:	4805      	ldr	r0, [pc, #20]	; (8004120 <MX_ADC3_Init+0x98>)
 800410a:	f002 fd53 	bl	8006bb4 <HAL_ADC_ConfigChannel>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8004114:	f001 f9d2 	bl	80054bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8004118:	bf00      	nop
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	20000f34 	.word	0x20000f34
 8004124:	40012200 	.word	0x40012200
 8004128:	0f000001 	.word	0x0f000001

0800412c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08e      	sub	sp, #56	; 0x38
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	605a      	str	r2, [r3, #4]
 800413e:	609a      	str	r2, [r3, #8]
 8004140:	60da      	str	r2, [r3, #12]
 8004142:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a57      	ldr	r2, [pc, #348]	; (80042a8 <HAL_ADC_MspInit+0x17c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d12c      	bne.n	80041a8 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800414e:	4b57      	ldr	r3, [pc, #348]	; (80042ac <HAL_ADC_MspInit+0x180>)
 8004150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004152:	4a56      	ldr	r2, [pc, #344]	; (80042ac <HAL_ADC_MspInit+0x180>)
 8004154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004158:	6453      	str	r3, [r2, #68]	; 0x44
 800415a:	4b54      	ldr	r3, [pc, #336]	; (80042ac <HAL_ADC_MspInit+0x180>)
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004162:	623b      	str	r3, [r7, #32]
 8004164:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004166:	4b51      	ldr	r3, [pc, #324]	; (80042ac <HAL_ADC_MspInit+0x180>)
 8004168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416a:	4a50      	ldr	r2, [pc, #320]	; (80042ac <HAL_ADC_MspInit+0x180>)
 800416c:	f043 0301 	orr.w	r3, r3, #1
 8004170:	6313      	str	r3, [r2, #48]	; 0x30
 8004172:	4b4e      	ldr	r3, [pc, #312]	; (80042ac <HAL_ADC_MspInit+0x180>)
 8004174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	61fb      	str	r3, [r7, #28]
 800417c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800417e:	2301      	movs	r3, #1
 8004180:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004182:	2303      	movs	r3, #3
 8004184:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004186:	2300      	movs	r3, #0
 8004188:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800418a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800418e:	4619      	mov	r1, r3
 8004190:	4847      	ldr	r0, [pc, #284]	; (80042b0 <HAL_ADC_MspInit+0x184>)
 8004192:	f004 fa25 	bl	80085e0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8004196:	2200      	movs	r2, #0
 8004198:	2100      	movs	r1, #0
 800419a:	2012      	movs	r0, #18
 800419c:	f003 fdd3 	bl	8007d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80041a0:	2012      	movs	r0, #18
 80041a2:	f003 fdec 	bl	8007d7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80041a6:	e07a      	b.n	800429e <HAL_ADC_MspInit+0x172>
  else if(adcHandle->Instance==ADC2)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a41      	ldr	r2, [pc, #260]	; (80042b4 <HAL_ADC_MspInit+0x188>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d12c      	bne.n	800420c <HAL_ADC_MspInit+0xe0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80041b2:	4b3e      	ldr	r3, [pc, #248]	; (80042ac <HAL_ADC_MspInit+0x180>)
 80041b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b6:	4a3d      	ldr	r2, [pc, #244]	; (80042ac <HAL_ADC_MspInit+0x180>)
 80041b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041bc:	6453      	str	r3, [r2, #68]	; 0x44
 80041be:	4b3b      	ldr	r3, [pc, #236]	; (80042ac <HAL_ADC_MspInit+0x180>)
 80041c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c6:	61bb      	str	r3, [r7, #24]
 80041c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ca:	4b38      	ldr	r3, [pc, #224]	; (80042ac <HAL_ADC_MspInit+0x180>)
 80041cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ce:	4a37      	ldr	r2, [pc, #220]	; (80042ac <HAL_ADC_MspInit+0x180>)
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	6313      	str	r3, [r2, #48]	; 0x30
 80041d6:	4b35      	ldr	r3, [pc, #212]	; (80042ac <HAL_ADC_MspInit+0x180>)
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80041e2:	2302      	movs	r3, #2
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041e6:	2303      	movs	r3, #3
 80041e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ea:	2300      	movs	r3, #0
 80041ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041f2:	4619      	mov	r1, r3
 80041f4:	482e      	ldr	r0, [pc, #184]	; (80042b0 <HAL_ADC_MspInit+0x184>)
 80041f6:	f004 f9f3 	bl	80085e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80041fa:	2200      	movs	r2, #0
 80041fc:	2100      	movs	r1, #0
 80041fe:	2012      	movs	r0, #18
 8004200:	f003 fda1 	bl	8007d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004204:	2012      	movs	r0, #18
 8004206:	f003 fdba 	bl	8007d7e <HAL_NVIC_EnableIRQ>
}
 800420a:	e048      	b.n	800429e <HAL_ADC_MspInit+0x172>
  else if(adcHandle->Instance==ADC3)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a29      	ldr	r2, [pc, #164]	; (80042b8 <HAL_ADC_MspInit+0x18c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d143      	bne.n	800429e <HAL_ADC_MspInit+0x172>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004216:	4b25      	ldr	r3, [pc, #148]	; (80042ac <HAL_ADC_MspInit+0x180>)
 8004218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421a:	4a24      	ldr	r2, [pc, #144]	; (80042ac <HAL_ADC_MspInit+0x180>)
 800421c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004220:	6453      	str	r3, [r2, #68]	; 0x44
 8004222:	4b22      	ldr	r3, [pc, #136]	; (80042ac <HAL_ADC_MspInit+0x180>)
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800422e:	4b1f      	ldr	r3, [pc, #124]	; (80042ac <HAL_ADC_MspInit+0x180>)
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	4a1e      	ldr	r2, [pc, #120]	; (80042ac <HAL_ADC_MspInit+0x180>)
 8004234:	f043 0320 	orr.w	r3, r3, #32
 8004238:	6313      	str	r3, [r2, #48]	; 0x30
 800423a:	4b1c      	ldr	r3, [pc, #112]	; (80042ac <HAL_ADC_MspInit+0x180>)
 800423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423e:	f003 0320 	and.w	r3, r3, #32
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004246:	4b19      	ldr	r3, [pc, #100]	; (80042ac <HAL_ADC_MspInit+0x180>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	4a18      	ldr	r2, [pc, #96]	; (80042ac <HAL_ADC_MspInit+0x180>)
 800424c:	f043 0304 	orr.w	r3, r3, #4
 8004250:	6313      	str	r3, [r2, #48]	; 0x30
 8004252:	4b16      	ldr	r3, [pc, #88]	; (80042ac <HAL_ADC_MspInit+0x180>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	60bb      	str	r3, [r7, #8]
 800425c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800425e:	2328      	movs	r3, #40	; 0x28
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004262:	2303      	movs	r3, #3
 8004264:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004266:	2300      	movs	r3, #0
 8004268:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800426a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800426e:	4619      	mov	r1, r3
 8004270:	4812      	ldr	r0, [pc, #72]	; (80042bc <HAL_ADC_MspInit+0x190>)
 8004272:	f004 f9b5 	bl	80085e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004276:	230c      	movs	r3, #12
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800427a:	2303      	movs	r3, #3
 800427c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427e:	2300      	movs	r3, #0
 8004280:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004286:	4619      	mov	r1, r3
 8004288:	480d      	ldr	r0, [pc, #52]	; (80042c0 <HAL_ADC_MspInit+0x194>)
 800428a:	f004 f9a9 	bl	80085e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800428e:	2200      	movs	r2, #0
 8004290:	2100      	movs	r1, #0
 8004292:	2012      	movs	r0, #18
 8004294:	f003 fd57 	bl	8007d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004298:	2012      	movs	r0, #18
 800429a:	f003 fd70 	bl	8007d7e <HAL_NVIC_EnableIRQ>
}
 800429e:	bf00      	nop
 80042a0:	3738      	adds	r7, #56	; 0x38
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40012000 	.word	0x40012000
 80042ac:	40023800 	.word	0x40023800
 80042b0:	40020000 	.word	0x40020000
 80042b4:	40012100 	.word	0x40012100
 80042b8:	40012200 	.word	0x40012200
 80042bc:	40021400 	.word	0x40021400
 80042c0:	40020800 	.word	0x40020800

080042c4 <_write>:
			}
	}
		HAL_UART_Transmit(&uartDef, EndMSG, sizeof(EndMSG), 10000);
};
int _write(int file, char *ptr, int len)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042d0:	2300      	movs	r3, #0
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	e009      	b.n	80042ea <_write+0x26>
	{
		__io_putchar(*ptr++);
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	60ba      	str	r2, [r7, #8]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 f80c 	bl	80042fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	3301      	adds	r3, #1
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	dbf1      	blt.n	80042d6 <_write+0x12>
	}
	return len;
 80042f2:	687b      	ldr	r3, [r7, #4]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <__io_putchar>:
int __io_putchar(int ch){
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
	if(ch == '\n')
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b0a      	cmp	r3, #10
 8004308:	d106      	bne.n	8004318 <__io_putchar+0x1c>
	{
		HAL_UART_Transmit(&uartDef, (uint8_t*)"\r", 1, HAL_MAX_DELAY);
 800430a:	f04f 33ff 	mov.w	r3, #4294967295
 800430e:	2201      	movs	r2, #1
 8004310:	4907      	ldr	r1, [pc, #28]	; (8004330 <__io_putchar+0x34>)
 8004312:	4808      	ldr	r0, [pc, #32]	; (8004334 <__io_putchar+0x38>)
 8004314:	f009 fe34 	bl	800df80 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&uartDef, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8004318:	1d39      	adds	r1, r7, #4
 800431a:	f04f 33ff 	mov.w	r3, #4294967295
 800431e:	2201      	movs	r2, #1
 8004320:	4804      	ldr	r0, [pc, #16]	; (8004334 <__io_putchar+0x38>)
 8004322:	f009 fe2d 	bl	800df80 <HAL_UART_Transmit>
	return 1;
 8004326:	2301      	movs	r3, #1
}
 8004328:	4618      	mov	r0, r3
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	080192d8 	.word	0x080192d8
 8004334:	20006504 	.word	0x20006504

08004338 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b08a      	sub	sp, #40	; 0x28
 800433c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800433e:	4b27      	ldr	r3, [pc, #156]	; (80043dc <MX_CAN1_Init+0xa4>)
 8004340:	4a27      	ldr	r2, [pc, #156]	; (80043e0 <MX_CAN1_Init+0xa8>)
 8004342:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8004344:	4b25      	ldr	r3, [pc, #148]	; (80043dc <MX_CAN1_Init+0xa4>)
 8004346:	2209      	movs	r2, #9
 8004348:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800434a:	4b24      	ldr	r3, [pc, #144]	; (80043dc <MX_CAN1_Init+0xa4>)
 800434c:	2200      	movs	r2, #0
 800434e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004350:	4b22      	ldr	r3, [pc, #136]	; (80043dc <MX_CAN1_Init+0xa4>)
 8004352:	2200      	movs	r2, #0
 8004354:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8004356:	4b21      	ldr	r3, [pc, #132]	; (80043dc <MX_CAN1_Init+0xa4>)
 8004358:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800435c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800435e:	4b1f      	ldr	r3, [pc, #124]	; (80043dc <MX_CAN1_Init+0xa4>)
 8004360:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004364:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8004366:	4b1d      	ldr	r3, [pc, #116]	; (80043dc <MX_CAN1_Init+0xa4>)
 8004368:	2200      	movs	r2, #0
 800436a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800436c:	4b1b      	ldr	r3, [pc, #108]	; (80043dc <MX_CAN1_Init+0xa4>)
 800436e:	2200      	movs	r2, #0
 8004370:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8004372:	4b1a      	ldr	r3, [pc, #104]	; (80043dc <MX_CAN1_Init+0xa4>)
 8004374:	2200      	movs	r2, #0
 8004376:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8004378:	4b18      	ldr	r3, [pc, #96]	; (80043dc <MX_CAN1_Init+0xa4>)
 800437a:	2201      	movs	r2, #1
 800437c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800437e:	4b17      	ldr	r3, [pc, #92]	; (80043dc <MX_CAN1_Init+0xa4>)
 8004380:	2200      	movs	r2, #0
 8004382:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8004384:	4b15      	ldr	r3, [pc, #84]	; (80043dc <MX_CAN1_Init+0xa4>)
 8004386:	2200      	movs	r2, #0
 8004388:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800438a:	4814      	ldr	r0, [pc, #80]	; (80043dc <MX_CAN1_Init+0xa4>)
 800438c:	f002 fe6c 	bl	8007068 <HAL_CAN_Init>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8004396:	f001 f891 	bl	80054bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800439a:	2301      	movs	r3, #1
 800439c:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 800439e:	2312      	movs	r3, #18
 80043a0:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80043a2:	2300      	movs	r3, #0
 80043a4:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0;
 80043a6:	2300      	movs	r3, #0
 80043a8:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 80043aa:	2300      	movs	r3, #0
 80043ac:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0;
 80043ae:	2300      	movs	r3, #0
 80043b0:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0;
 80043b2:	2300      	movs	r3, #0
 80043b4:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80043ba:	2301      	movs	r3, #1
 80043bc:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 10;
 80043be:	230a      	movs	r3, #10
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80043c2:	463b      	mov	r3, r7
 80043c4:	4619      	mov	r1, r3
 80043c6:	4805      	ldr	r0, [pc, #20]	; (80043dc <MX_CAN1_Init+0xa4>)
 80043c8:	f002 ff4a 	bl	8007260 <HAL_CAN_ConfigFilter>
  EcuInit(&EcuData);
 80043cc:	4805      	ldr	r0, [pc, #20]	; (80043e4 <MX_CAN1_Init+0xac>)
 80043ce:	f000 fa41 	bl	8004854 <EcuInit>
  /* USER CODE END CAN1_Init 2 */

}
 80043d2:	bf00      	nop
 80043d4:	3728      	adds	r7, #40	; 0x28
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20000fa4 	.word	0x20000fa4
 80043e0:	40006400 	.word	0x40006400
 80043e4:	20000f7c 	.word	0x20000f7c

080043e8 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80043ec:	4b17      	ldr	r3, [pc, #92]	; (800444c <MX_CAN2_Init+0x64>)
 80043ee:	4a18      	ldr	r2, [pc, #96]	; (8004450 <MX_CAN2_Init+0x68>)
 80043f0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 80043f2:	4b16      	ldr	r3, [pc, #88]	; (800444c <MX_CAN2_Init+0x64>)
 80043f4:	2209      	movs	r2, #9
 80043f6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80043f8:	4b14      	ldr	r3, [pc, #80]	; (800444c <MX_CAN2_Init+0x64>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80043fe:	4b13      	ldr	r3, [pc, #76]	; (800444c <MX_CAN2_Init+0x64>)
 8004400:	2200      	movs	r2, #0
 8004402:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8004404:	4b11      	ldr	r3, [pc, #68]	; (800444c <MX_CAN2_Init+0x64>)
 8004406:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800440a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 800440c:	4b0f      	ldr	r3, [pc, #60]	; (800444c <MX_CAN2_Init+0x64>)
 800440e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004412:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8004414:	4b0d      	ldr	r3, [pc, #52]	; (800444c <MX_CAN2_Init+0x64>)
 8004416:	2200      	movs	r2, #0
 8004418:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800441a:	4b0c      	ldr	r3, [pc, #48]	; (800444c <MX_CAN2_Init+0x64>)
 800441c:	2200      	movs	r2, #0
 800441e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8004420:	4b0a      	ldr	r3, [pc, #40]	; (800444c <MX_CAN2_Init+0x64>)
 8004422:	2200      	movs	r2, #0
 8004424:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <MX_CAN2_Init+0x64>)
 8004428:	2201      	movs	r2, #1
 800442a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800442c:	4b07      	ldr	r3, [pc, #28]	; (800444c <MX_CAN2_Init+0x64>)
 800442e:	2200      	movs	r2, #0
 8004430:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8004432:	4b06      	ldr	r3, [pc, #24]	; (800444c <MX_CAN2_Init+0x64>)
 8004434:	2200      	movs	r2, #0
 8004436:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8004438:	4804      	ldr	r0, [pc, #16]	; (800444c <MX_CAN2_Init+0x64>)
 800443a:	f002 fe15 	bl	8007068 <HAL_CAN_Init>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8004444:	f001 f83a 	bl	80054bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8004448:	bf00      	nop
 800444a:	bd80      	pop	{r7, pc}
 800444c:	20000fcc 	.word	0x20000fcc
 8004450:	40006800 	.word	0x40006800

08004454 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08e      	sub	sp, #56	; 0x38
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800445c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	605a      	str	r2, [r3, #4]
 8004466:	609a      	str	r2, [r3, #8]
 8004468:	60da      	str	r2, [r3, #12]
 800446a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a4b      	ldr	r2, [pc, #300]	; (80045a0 <HAL_CAN_MspInit+0x14c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d139      	bne.n	80044ea <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004476:	4b4b      	ldr	r3, [pc, #300]	; (80045a4 <HAL_CAN_MspInit+0x150>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3301      	adds	r3, #1
 800447c:	4a49      	ldr	r2, [pc, #292]	; (80045a4 <HAL_CAN_MspInit+0x150>)
 800447e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004480:	4b48      	ldr	r3, [pc, #288]	; (80045a4 <HAL_CAN_MspInit+0x150>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d10b      	bne.n	80044a0 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004488:	4b47      	ldr	r3, [pc, #284]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 800448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448c:	4a46      	ldr	r2, [pc, #280]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 800448e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004492:	6413      	str	r3, [r2, #64]	; 0x40
 8004494:	4b44      	ldr	r3, [pc, #272]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449c:	623b      	str	r3, [r7, #32]
 800449e:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80044a0:	4b41      	ldr	r3, [pc, #260]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	4a40      	ldr	r2, [pc, #256]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 80044a6:	f043 0308 	orr.w	r3, r3, #8
 80044aa:	6313      	str	r3, [r2, #48]	; 0x30
 80044ac:	4b3e      	ldr	r3, [pc, #248]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 80044ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	61fb      	str	r3, [r7, #28]
 80044b6:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80044b8:	2303      	movs	r3, #3
 80044ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044bc:	2302      	movs	r3, #2
 80044be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c0:	2300      	movs	r3, #0
 80044c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044c4:	2303      	movs	r3, #3
 80044c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80044c8:	2309      	movs	r3, #9
 80044ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044d0:	4619      	mov	r1, r3
 80044d2:	4836      	ldr	r0, [pc, #216]	; (80045ac <HAL_CAN_MspInit+0x158>)
 80044d4:	f004 f884 	bl	80085e0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80044d8:	2200      	movs	r2, #0
 80044da:	2100      	movs	r1, #0
 80044dc:	2014      	movs	r0, #20
 80044de:	f003 fc32 	bl	8007d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80044e2:	2014      	movs	r0, #20
 80044e4:	f003 fc4b 	bl	8007d7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80044e8:	e056      	b.n	8004598 <HAL_CAN_MspInit+0x144>
  else if(canHandle->Instance==CAN2)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a30      	ldr	r2, [pc, #192]	; (80045b0 <HAL_CAN_MspInit+0x15c>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d151      	bne.n	8004598 <HAL_CAN_MspInit+0x144>
    __HAL_RCC_CAN3_CLK_ENABLE();
 80044f4:	4b2c      	ldr	r3, [pc, #176]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 80044f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f8:	4a2b      	ldr	r2, [pc, #172]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 80044fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80044fe:	6413      	str	r3, [r2, #64]	; 0x40
 8004500:	4b29      	ldr	r3, [pc, #164]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004508:	61bb      	str	r3, [r7, #24]
 800450a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 800450c:	4b26      	ldr	r3, [pc, #152]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	4a25      	ldr	r2, [pc, #148]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 8004512:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004516:	6413      	str	r3, [r2, #64]	; 0x40
 8004518:	4b23      	ldr	r3, [pc, #140]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004520:	617b      	str	r3, [r7, #20]
 8004522:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004524:	4b1f      	ldr	r3, [pc, #124]	; (80045a4 <HAL_CAN_MspInit+0x150>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3301      	adds	r3, #1
 800452a:	4a1e      	ldr	r2, [pc, #120]	; (80045a4 <HAL_CAN_MspInit+0x150>)
 800452c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800452e:	4b1d      	ldr	r3, [pc, #116]	; (80045a4 <HAL_CAN_MspInit+0x150>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d10b      	bne.n	800454e <HAL_CAN_MspInit+0xfa>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004536:	4b1c      	ldr	r3, [pc, #112]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	4a1b      	ldr	r2, [pc, #108]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 800453c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004540:	6413      	str	r3, [r2, #64]	; 0x40
 8004542:	4b19      	ldr	r3, [pc, #100]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454a:	613b      	str	r3, [r7, #16]
 800454c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800454e:	4b16      	ldr	r3, [pc, #88]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 8004550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004552:	4a15      	ldr	r2, [pc, #84]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 8004554:	f043 0302 	orr.w	r3, r3, #2
 8004558:	6313      	str	r3, [r2, #48]	; 0x30
 800455a:	4b13      	ldr	r3, [pc, #76]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 800455c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004566:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800456c:	2302      	movs	r3, #2
 800456e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004570:	2300      	movs	r3, #0
 8004572:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004574:	2303      	movs	r3, #3
 8004576:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8004578:	2309      	movs	r3, #9
 800457a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800457c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004580:	4619      	mov	r1, r3
 8004582:	480c      	ldr	r0, [pc, #48]	; (80045b4 <HAL_CAN_MspInit+0x160>)
 8004584:	f004 f82c 	bl	80085e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8004588:	2200      	movs	r2, #0
 800458a:	2100      	movs	r1, #0
 800458c:	2040      	movs	r0, #64	; 0x40
 800458e:	f003 fbda 	bl	8007d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8004592:	2040      	movs	r0, #64	; 0x40
 8004594:	f003 fbf3 	bl	8007d7e <HAL_NVIC_EnableIRQ>
}
 8004598:	bf00      	nop
 800459a:	3738      	adds	r7, #56	; 0x38
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40006400 	.word	0x40006400
 80045a4:	20000ff4 	.word	0x20000ff4
 80045a8:	40023800 	.word	0x40023800
 80045ac:	40020c00 	.word	0x40020c00
 80045b0:	40006800 	.word	0x40006800
 80045b4:	40020400 	.word	0x40020400

080045b8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  /* USER CODE END CAN2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80045b8:	b590      	push	{r4, r7, lr}
 80045ba:	b091      	sub	sp, #68	; 0x44
 80045bc:	af04      	add	r7, sp, #16
 80045be:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80045c0:	f107 030c 	add.w	r3, r7, #12
 80045c4:	f107 0214 	add.w	r2, r7, #20
 80045c8:	2100      	movs	r1, #0
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f002 ff78 	bl	80074c0 <HAL_CAN_GetRxMessage>
	if (hcan->Instance == CAN1) {
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a12      	ldr	r2, [pc, #72]	; (8004620 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d10f      	bne.n	80045fa <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
		//ComputeEcumasterFrame(RxHeader, RxData);
		ComputeInternalFrame(RxHeader, RxData);
 80045da:	f107 030c 	add.w	r3, r7, #12
 80045de:	9303      	str	r3, [sp, #12]
 80045e0:	466c      	mov	r4, sp
 80045e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80045ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80045ee:	f107 0314 	add.w	r3, r7, #20
 80045f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045f4:	f000 f8e4 	bl	80047c0 <ComputeInternalFrame>
	} else {
		//ComputeInternalFrame(RxHeader, RxData);
		ComputeEcumasterFrame(RxHeader, RxData);
	}
}
 80045f8:	e00e      	b.n	8004618 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
		ComputeEcumasterFrame(RxHeader, RxData);
 80045fa:	f107 030c 	add.w	r3, r7, #12
 80045fe:	9303      	str	r3, [sp, #12]
 8004600:	466c      	mov	r4, sp
 8004602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004606:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800460a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800460e:	f107 0314 	add.w	r3, r7, #20
 8004612:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004614:	f000 f806 	bl	8004624 <ComputeEcumasterFrame>
}
 8004618:	bf00      	nop
 800461a:	3734      	adds	r7, #52	; 0x34
 800461c:	46bd      	mov	sp, r7
 800461e:	bd90      	pop	{r4, r7, pc}
 8004620:	40006400 	.word	0x40006400

08004624 <ComputeEcumasterFrame>:

void ComputeEcumasterFrame(CAN_RxHeaderTypeDef RxHeader, uint8_t *RxData) {
 8004624:	b084      	sub	sp, #16
 8004626:	b580      	push	{r7, lr}
 8004628:	af00      	add	r7, sp, #0
 800462a:	f107 0c08 	add.w	ip, r7, #8
 800462e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (RxHeader.StdId == Frame1) {
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004638:	d121      	bne.n	800467e <ComputeEcumasterFrame+0x5a>
		EcuData.rpm = LittleToBigEndian(&RxData[0]);
 800463a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800463c:	f000 f8cc 	bl	80047d8 <LittleToBigEndian>
 8004640:	4603      	mov	r3, r0
 8004642:	461a      	mov	r2, r3
 8004644:	4b5d      	ldr	r3, [pc, #372]	; (80047bc <ComputeEcumasterFrame+0x198>)
 8004646:	801a      	strh	r2, [r3, #0]
		EcuData.tps = RxData[2];
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	789a      	ldrb	r2, [r3, #2]
 800464c:	4b5b      	ldr	r3, [pc, #364]	; (80047bc <ComputeEcumasterFrame+0x198>)
 800464e:	709a      	strb	r2, [r3, #2]
		EcuData.iat = RxData[3];
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	78da      	ldrb	r2, [r3, #3]
 8004654:	4b59      	ldr	r3, [pc, #356]	; (80047bc <ComputeEcumasterFrame+0x198>)
 8004656:	70da      	strb	r2, [r3, #3]
		EcuData.map = LittleToBigEndian(&RxData[4]);
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	3304      	adds	r3, #4
 800465c:	4618      	mov	r0, r3
 800465e:	f000 f8bb 	bl	80047d8 <LittleToBigEndian>
 8004662:	4603      	mov	r3, r0
 8004664:	461a      	mov	r2, r3
 8004666:	4b55      	ldr	r3, [pc, #340]	; (80047bc <ComputeEcumasterFrame+0x198>)
 8004668:	809a      	strh	r2, [r3, #4]
		EcuData.injPW = LittleToBigEndian(&RxData[6]);
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	3306      	adds	r3, #6
 800466e:	4618      	mov	r0, r3
 8004670:	f000 f8b2 	bl	80047d8 <LittleToBigEndian>
 8004674:	4603      	mov	r3, r0
 8004676:	461a      	mov	r2, r3
 8004678:	4b50      	ldr	r3, [pc, #320]	; (80047bc <ComputeEcumasterFrame+0x198>)
 800467a:	80da      	strh	r2, [r3, #6]
		EcuData.TCDRPMRaw = LittleToBigEndian(&RxData[2]);
		EcuData.TCDRPM = LittleToBigEndian(&RxData[4]);
		EcuData.TCTorqueReduction = RxData[6];
		EcuData.PitLimitTorqueReduction = RxData[7];
	}
}
 800467c:	e097      	b.n	80047ae <ComputeEcumasterFrame+0x18a>
	} else if (RxHeader.StdId == Frame3) {
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f240 6202 	movw	r2, #1538	; 0x602
 8004684:	4293      	cmp	r3, r2
 8004686:	d118      	bne.n	80046ba <ComputeEcumasterFrame+0x96>
		EcuData.speed = LittleToBigEndian(&RxData[0]);
 8004688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800468a:	f000 f8a5 	bl	80047d8 <LittleToBigEndian>
 800468e:	4603      	mov	r3, r0
 8004690:	461a      	mov	r2, r3
 8004692:	4b4a      	ldr	r3, [pc, #296]	; (80047bc <ComputeEcumasterFrame+0x198>)
 8004694:	811a      	strh	r2, [r3, #8]
		EcuData.oilTemp = RxData[3];
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	78da      	ldrb	r2, [r3, #3]
 800469a:	4b48      	ldr	r3, [pc, #288]	; (80047bc <ComputeEcumasterFrame+0x198>)
 800469c:	72da      	strb	r2, [r3, #11]
		EcuData.oilPress = RxData[4];
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	791a      	ldrb	r2, [r3, #4]
 80046a2:	4b46      	ldr	r3, [pc, #280]	; (80047bc <ComputeEcumasterFrame+0x198>)
 80046a4:	731a      	strb	r2, [r3, #12]
		EcuData.clt = LittleToBigEndian(&RxData[6]);
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	3306      	adds	r3, #6
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 f894 	bl	80047d8 <LittleToBigEndian>
 80046b0:	4603      	mov	r3, r0
 80046b2:	b21a      	sxth	r2, r3
 80046b4:	4b41      	ldr	r3, [pc, #260]	; (80047bc <ComputeEcumasterFrame+0x198>)
 80046b6:	81da      	strh	r2, [r3, #14]
}
 80046b8:	e079      	b.n	80047ae <ComputeEcumasterFrame+0x18a>
	} else if (RxHeader.StdId == Frame4) {
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	f240 6203 	movw	r2, #1539	; 0x603
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d123      	bne.n	800470c <ComputeEcumasterFrame+0xe8>
		EcuData.ignAngle = RxData[0];
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	b25a      	sxtb	r2, r3
 80046ca:	4b3c      	ldr	r3, [pc, #240]	; (80047bc <ComputeEcumasterFrame+0x198>)
 80046cc:	741a      	strb	r2, [r3, #16]
		EcuData.ignDwell = RxData[1];
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	785a      	ldrb	r2, [r3, #1]
 80046d2:	4b3a      	ldr	r3, [pc, #232]	; (80047bc <ComputeEcumasterFrame+0x198>)
 80046d4:	745a      	strb	r2, [r3, #17]
		EcuData.lambda = RxData[2];
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	789a      	ldrb	r2, [r3, #2]
 80046da:	4b38      	ldr	r3, [pc, #224]	; (80047bc <ComputeEcumasterFrame+0x198>)
 80046dc:	749a      	strb	r2, [r3, #18]
		EcuData.lambdaCorrection = RxData[3];
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	78da      	ldrb	r2, [r3, #3]
 80046e2:	4b36      	ldr	r3, [pc, #216]	; (80047bc <ComputeEcumasterFrame+0x198>)
 80046e4:	74da      	strb	r2, [r3, #19]
		EcuData.egt1 = LittleToBigEndian(&RxData[4]);
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	3304      	adds	r3, #4
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 f874 	bl	80047d8 <LittleToBigEndian>
 80046f0:	4603      	mov	r3, r0
 80046f2:	461a      	mov	r2, r3
 80046f4:	4b31      	ldr	r3, [pc, #196]	; (80047bc <ComputeEcumasterFrame+0x198>)
 80046f6:	829a      	strh	r2, [r3, #20]
		EcuData.egt2 = LittleToBigEndian(&RxData[6]);
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	3306      	adds	r3, #6
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 f86b 	bl	80047d8 <LittleToBigEndian>
 8004702:	4603      	mov	r3, r0
 8004704:	461a      	mov	r2, r3
 8004706:	4b2d      	ldr	r3, [pc, #180]	; (80047bc <ComputeEcumasterFrame+0x198>)
 8004708:	82da      	strh	r2, [r3, #22]
}
 800470a:	e050      	b.n	80047ae <ComputeEcumasterFrame+0x18a>
	} else if (RxHeader.StdId == Frame5) {
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f240 6204 	movw	r2, #1540	; 0x604
 8004712:	4293      	cmp	r3, r2
 8004714:	d120      	bne.n	8004758 <ComputeEcumasterFrame+0x134>
		EcuData.gear = RxData[0];
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	781a      	ldrb	r2, [r3, #0]
 800471a:	4b28      	ldr	r3, [pc, #160]	; (80047bc <ComputeEcumasterFrame+0x198>)
 800471c:	761a      	strb	r2, [r3, #24]
		EcuData.ecuTemp = RxData[1];
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	3301      	adds	r3, #1
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	b25a      	sxtb	r2, r3
 8004726:	4b25      	ldr	r3, [pc, #148]	; (80047bc <ComputeEcumasterFrame+0x198>)
 8004728:	765a      	strb	r2, [r3, #25]
		EcuData.batt = LittleToBigEndian(&RxData[2]);
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	3302      	adds	r3, #2
 800472e:	4618      	mov	r0, r3
 8004730:	f000 f852 	bl	80047d8 <LittleToBigEndian>
 8004734:	4603      	mov	r3, r0
 8004736:	461a      	mov	r2, r3
 8004738:	4b20      	ldr	r3, [pc, #128]	; (80047bc <ComputeEcumasterFrame+0x198>)
 800473a:	835a      	strh	r2, [r3, #26]
		EcuData.errflag = LittleToBigEndian(&RxData[5]);
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	3305      	adds	r3, #5
 8004740:	4618      	mov	r0, r3
 8004742:	f000 f849 	bl	80047d8 <LittleToBigEndian>
 8004746:	4603      	mov	r3, r0
 8004748:	461a      	mov	r2, r3
 800474a:	4b1c      	ldr	r3, [pc, #112]	; (80047bc <ComputeEcumasterFrame+0x198>)
 800474c:	839a      	strh	r2, [r3, #28]
		EcuData.flags1 = RxData[7];
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	79da      	ldrb	r2, [r3, #7]
 8004752:	4b1a      	ldr	r3, [pc, #104]	; (80047bc <ComputeEcumasterFrame+0x198>)
 8004754:	779a      	strb	r2, [r3, #30]
}
 8004756:	e02a      	b.n	80047ae <ComputeEcumasterFrame+0x18a>
	} else if (RxHeader.StdId == Frame6) {
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f240 6205 	movw	r2, #1541	; 0x605
 800475e:	4293      	cmp	r3, r2
 8004760:	d125      	bne.n	80047ae <ComputeEcumasterFrame+0x18a>
		EcuData.DBWPosition = RxData[0];
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	781a      	ldrb	r2, [r3, #0]
 8004766:	4b15      	ldr	r3, [pc, #84]	; (80047bc <ComputeEcumasterFrame+0x198>)
 8004768:	77da      	strb	r2, [r3, #31]
		EcuData.DBWTrigger = RxData[1];
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	785a      	ldrb	r2, [r3, #1]
 800476e:	4b13      	ldr	r3, [pc, #76]	; (80047bc <ComputeEcumasterFrame+0x198>)
 8004770:	f883 2020 	strb.w	r2, [r3, #32]
		EcuData.TCDRPMRaw = LittleToBigEndian(&RxData[2]);
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	3302      	adds	r3, #2
 8004778:	4618      	mov	r0, r3
 800477a:	f000 f82d 	bl	80047d8 <LittleToBigEndian>
 800477e:	4603      	mov	r3, r0
 8004780:	461a      	mov	r2, r3
 8004782:	4b0e      	ldr	r3, [pc, #56]	; (80047bc <ComputeEcumasterFrame+0x198>)
 8004784:	845a      	strh	r2, [r3, #34]	; 0x22
		EcuData.TCDRPM = LittleToBigEndian(&RxData[4]);
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	3304      	adds	r3, #4
 800478a:	4618      	mov	r0, r3
 800478c:	f000 f824 	bl	80047d8 <LittleToBigEndian>
 8004790:	4603      	mov	r3, r0
 8004792:	b2da      	uxtb	r2, r3
 8004794:	4b09      	ldr	r3, [pc, #36]	; (80047bc <ComputeEcumasterFrame+0x198>)
 8004796:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		EcuData.TCTorqueReduction = RxData[6];
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	799a      	ldrb	r2, [r3, #6]
 800479e:	4b07      	ldr	r3, [pc, #28]	; (80047bc <ComputeEcumasterFrame+0x198>)
 80047a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		EcuData.PitLimitTorqueReduction = RxData[7];
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	79da      	ldrb	r2, [r3, #7]
 80047a8:	4b04      	ldr	r3, [pc, #16]	; (80047bc <ComputeEcumasterFrame+0x198>)
 80047aa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80047ae:	bf00      	nop
 80047b0:	46bd      	mov	sp, r7
 80047b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047b6:	b004      	add	sp, #16
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	20000f7c 	.word	0x20000f7c

080047c0 <ComputeInternalFrame>:

void ComputeInternalFrame(CAN_RxHeaderTypeDef RxHeader, uint8_t *RxData) {
 80047c0:	b084      	sub	sp, #16
 80047c2:	b490      	push	{r4, r7}
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	f107 0408 	add.w	r4, r7, #8
 80047ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 80047ce:	bf00      	nop
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bc90      	pop	{r4, r7}
 80047d4:	b004      	add	sp, #16
 80047d6:	4770      	bx	lr

080047d8 <LittleToBigEndian>:

uint16_t LittleToBigEndian(uint8_t *data) {
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
	uint16_t returnData = data[0] + data[1] * 0xFF;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3301      	adds	r3, #1
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	4619      	mov	r1, r3
 80047f0:	0209      	lsls	r1, r1, #8
 80047f2:	1acb      	subs	r3, r1, r3
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	4413      	add	r3, r2
 80047f8:	81fb      	strh	r3, [r7, #14]
	return returnData;
 80047fa:	89fb      	ldrh	r3, [r7, #14]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800480e:	4b10      	ldr	r3, [pc, #64]	; (8004850 <MX_DMA_Init+0x48>)
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	4a0f      	ldr	r2, [pc, #60]	; (8004850 <MX_DMA_Init+0x48>)
 8004814:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004818:	6313      	str	r3, [r2, #48]	; 0x30
 800481a:	4b0d      	ldr	r3, [pc, #52]	; (8004850 <MX_DMA_Init+0x48>)
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004822:	607b      	str	r3, [r7, #4]
 8004824:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004826:	2200      	movs	r2, #0
 8004828:	2100      	movs	r1, #0
 800482a:	2038      	movs	r0, #56	; 0x38
 800482c:	f003 fa8b 	bl	8007d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004830:	2038      	movs	r0, #56	; 0x38
 8004832:	f003 faa4 	bl	8007d7e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8004836:	2200      	movs	r2, #0
 8004838:	2100      	movs	r1, #0
 800483a:	2044      	movs	r0, #68	; 0x44
 800483c:	f003 fa83 	bl	8007d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8004840:	2044      	movs	r0, #68	; 0x44
 8004842:	f003 fa9c 	bl	8007d7e <HAL_NVIC_EnableIRQ>

}
 8004846:	bf00      	nop
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40023800 	.word	0x40023800

08004854 <EcuInit>:
 */

#include "ecumaster.h"

void EcuInit(EcumasterData* ecu)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
	ecu->rpm = 0;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	801a      	strh	r2, [r3, #0]
	ecu->tps =0;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	709a      	strb	r2, [r3, #2]
	ecu->iat =0;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	70da      	strb	r2, [r3, #3]
	ecu->map =0;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	809a      	strh	r2, [r3, #4]
	ecu->injPW =0;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	80da      	strh	r2, [r3, #6]
	ecu->baro =0;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	729a      	strb	r2, [r3, #10]
	ecu->batt =0;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	835a      	strh	r2, [r3, #26]
	ecu->clt =0;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	81da      	strh	r2, [r3, #14]
	ecu->ecuTemp =0;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	765a      	strb	r2, [r3, #25]
	ecu->speed =0;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	811a      	strh	r2, [r3, #8]
	ecu->oilTemp =0;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	72da      	strb	r2, [r3, #11]
	ecu->oilPress =0;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	731a      	strb	r2, [r3, #12]
	ecu->ignAngle =0;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	741a      	strb	r2, [r3, #16]
	ecu->ignDwell =0;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	745a      	strb	r2, [r3, #17]
	ecu->lambda =0;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	749a      	strb	r2, [r3, #18]
	ecu->lambdaCorrection =0;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	74da      	strb	r2, [r3, #19]
	ecu->egt1=0;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	829a      	strh	r2, [r3, #20]
	ecu->egt2=0;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	82da      	strh	r2, [r3, #22]
	ecu->gear=0;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	761a      	strb	r2, [r3, #24]
	ecu->ecuTemp=0;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	765a      	strb	r2, [r3, #25]
	ecu->batt=0;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	835a      	strh	r2, [r3, #26]
	ecu->errflag=0;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	839a      	strh	r2, [r3, #28]
	ecu->flags1=0;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	779a      	strb	r2, [r3, #30]
	ecu->DBWPosition=0;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	77da      	strb	r2, [r3, #31]
	ecu->DBWTrigger=0;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2020 	strb.w	r2, [r3, #32]
	ecu->TCDRPMRaw =0;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	845a      	strh	r2, [r3, #34]	; 0x22
	ecu->TCDRPM =0;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	ecu->TCTorqueReduction=0;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	ecu->PitLimitTorqueReduction=0;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
	...

08004920 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004920:	b480      	push	{r7}
 8004922:	b089      	sub	sp, #36	; 0x24
 8004924:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004926:	4b2d      	ldr	r3, [pc, #180]	; (80049dc <MX_GPIO_Init+0xbc>)
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	4a2c      	ldr	r2, [pc, #176]	; (80049dc <MX_GPIO_Init+0xbc>)
 800492c:	f043 0304 	orr.w	r3, r3, #4
 8004930:	6313      	str	r3, [r2, #48]	; 0x30
 8004932:	4b2a      	ldr	r3, [pc, #168]	; (80049dc <MX_GPIO_Init+0xbc>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	f003 0304 	and.w	r3, r3, #4
 800493a:	61fb      	str	r3, [r7, #28]
 800493c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800493e:	4b27      	ldr	r3, [pc, #156]	; (80049dc <MX_GPIO_Init+0xbc>)
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	4a26      	ldr	r2, [pc, #152]	; (80049dc <MX_GPIO_Init+0xbc>)
 8004944:	f043 0320 	orr.w	r3, r3, #32
 8004948:	6313      	str	r3, [r2, #48]	; 0x30
 800494a:	4b24      	ldr	r3, [pc, #144]	; (80049dc <MX_GPIO_Init+0xbc>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	f003 0320 	and.w	r3, r3, #32
 8004952:	61bb      	str	r3, [r7, #24]
 8004954:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004956:	4b21      	ldr	r3, [pc, #132]	; (80049dc <MX_GPIO_Init+0xbc>)
 8004958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495a:	4a20      	ldr	r2, [pc, #128]	; (80049dc <MX_GPIO_Init+0xbc>)
 800495c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004960:	6313      	str	r3, [r2, #48]	; 0x30
 8004962:	4b1e      	ldr	r3, [pc, #120]	; (80049dc <MX_GPIO_Init+0xbc>)
 8004964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800496e:	4b1b      	ldr	r3, [pc, #108]	; (80049dc <MX_GPIO_Init+0xbc>)
 8004970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004972:	4a1a      	ldr	r2, [pc, #104]	; (80049dc <MX_GPIO_Init+0xbc>)
 8004974:	f043 0301 	orr.w	r3, r3, #1
 8004978:	6313      	str	r3, [r2, #48]	; 0x30
 800497a:	4b18      	ldr	r3, [pc, #96]	; (80049dc <MX_GPIO_Init+0xbc>)
 800497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	613b      	str	r3, [r7, #16]
 8004984:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004986:	4b15      	ldr	r3, [pc, #84]	; (80049dc <MX_GPIO_Init+0xbc>)
 8004988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498a:	4a14      	ldr	r2, [pc, #80]	; (80049dc <MX_GPIO_Init+0xbc>)
 800498c:	f043 0302 	orr.w	r3, r3, #2
 8004990:	6313      	str	r3, [r2, #48]	; 0x30
 8004992:	4b12      	ldr	r3, [pc, #72]	; (80049dc <MX_GPIO_Init+0xbc>)
 8004994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800499e:	4b0f      	ldr	r3, [pc, #60]	; (80049dc <MX_GPIO_Init+0xbc>)
 80049a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a2:	4a0e      	ldr	r2, [pc, #56]	; (80049dc <MX_GPIO_Init+0xbc>)
 80049a4:	f043 0308 	orr.w	r3, r3, #8
 80049a8:	6313      	str	r3, [r2, #48]	; 0x30
 80049aa:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <MX_GPIO_Init+0xbc>)
 80049ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	60bb      	str	r3, [r7, #8]
 80049b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80049b6:	4b09      	ldr	r3, [pc, #36]	; (80049dc <MX_GPIO_Init+0xbc>)
 80049b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ba:	4a08      	ldr	r2, [pc, #32]	; (80049dc <MX_GPIO_Init+0xbc>)
 80049bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049c0:	6313      	str	r3, [r2, #48]	; 0x30
 80049c2:	4b06      	ldr	r3, [pc, #24]	; (80049dc <MX_GPIO_Init+0xbc>)
 80049c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ca:	607b      	str	r3, [r7, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]

}
 80049ce:	bf00      	nop
 80049d0:	3724      	adds	r7, #36	; 0x24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40023800 	.word	0x40023800

080049e0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c3;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80049e4:	4b1b      	ldr	r3, [pc, #108]	; (8004a54 <MX_I2C1_Init+0x74>)
 80049e6:	4a1c      	ldr	r2, [pc, #112]	; (8004a58 <MX_I2C1_Init+0x78>)
 80049e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 80049ea:	4b1a      	ldr	r3, [pc, #104]	; (8004a54 <MX_I2C1_Init+0x74>)
 80049ec:	4a1b      	ldr	r2, [pc, #108]	; (8004a5c <MX_I2C1_Init+0x7c>)
 80049ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80049f0:	4b18      	ldr	r3, [pc, #96]	; (8004a54 <MX_I2C1_Init+0x74>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80049f6:	4b17      	ldr	r3, [pc, #92]	; (8004a54 <MX_I2C1_Init+0x74>)
 80049f8:	2201      	movs	r2, #1
 80049fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80049fc:	4b15      	ldr	r3, [pc, #84]	; (8004a54 <MX_I2C1_Init+0x74>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004a02:	4b14      	ldr	r3, [pc, #80]	; (8004a54 <MX_I2C1_Init+0x74>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004a08:	4b12      	ldr	r3, [pc, #72]	; (8004a54 <MX_I2C1_Init+0x74>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004a0e:	4b11      	ldr	r3, [pc, #68]	; (8004a54 <MX_I2C1_Init+0x74>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004a14:	4b0f      	ldr	r3, [pc, #60]	; (8004a54 <MX_I2C1_Init+0x74>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004a1a:	480e      	ldr	r0, [pc, #56]	; (8004a54 <MX_I2C1_Init+0x74>)
 8004a1c:	f003 ff8c 	bl	8008938 <HAL_I2C_Init>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004a26:	f000 fd49 	bl	80054bc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	4809      	ldr	r0, [pc, #36]	; (8004a54 <MX_I2C1_Init+0x74>)
 8004a2e:	f005 f853 	bl	8009ad8 <HAL_I2CEx_ConfigAnalogFilter>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004a38:	f000 fd40 	bl	80054bc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	4805      	ldr	r0, [pc, #20]	; (8004a54 <MX_I2C1_Init+0x74>)
 8004a40:	f005 f895 	bl	8009b6e <HAL_I2CEx_ConfigDigitalFilter>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004a4a:	f000 fd37 	bl	80054bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004a4e:	bf00      	nop
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20000ff8 	.word	0x20000ff8
 8004a58:	40005400 	.word	0x40005400
 8004a5c:	6000030d 	.word	0x6000030d

08004a60 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004a64:	4b1b      	ldr	r3, [pc, #108]	; (8004ad4 <MX_I2C2_Init+0x74>)
 8004a66:	4a1c      	ldr	r2, [pc, #112]	; (8004ad8 <MX_I2C2_Init+0x78>)
 8004a68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x6000030D;
 8004a6a:	4b1a      	ldr	r3, [pc, #104]	; (8004ad4 <MX_I2C2_Init+0x74>)
 8004a6c:	4a1b      	ldr	r2, [pc, #108]	; (8004adc <MX_I2C2_Init+0x7c>)
 8004a6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004a70:	4b18      	ldr	r3, [pc, #96]	; (8004ad4 <MX_I2C2_Init+0x74>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004a76:	4b17      	ldr	r3, [pc, #92]	; (8004ad4 <MX_I2C2_Init+0x74>)
 8004a78:	2201      	movs	r2, #1
 8004a7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004a7c:	4b15      	ldr	r3, [pc, #84]	; (8004ad4 <MX_I2C2_Init+0x74>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004a82:	4b14      	ldr	r3, [pc, #80]	; (8004ad4 <MX_I2C2_Init+0x74>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004a88:	4b12      	ldr	r3, [pc, #72]	; (8004ad4 <MX_I2C2_Init+0x74>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004a8e:	4b11      	ldr	r3, [pc, #68]	; (8004ad4 <MX_I2C2_Init+0x74>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004a94:	4b0f      	ldr	r3, [pc, #60]	; (8004ad4 <MX_I2C2_Init+0x74>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004a9a:	480e      	ldr	r0, [pc, #56]	; (8004ad4 <MX_I2C2_Init+0x74>)
 8004a9c:	f003 ff4c 	bl	8008938 <HAL_I2C_Init>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8004aa6:	f000 fd09 	bl	80054bc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004aaa:	2100      	movs	r1, #0
 8004aac:	4809      	ldr	r0, [pc, #36]	; (8004ad4 <MX_I2C2_Init+0x74>)
 8004aae:	f005 f813 	bl	8009ad8 <HAL_I2CEx_ConfigAnalogFilter>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8004ab8:	f000 fd00 	bl	80054bc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004abc:	2100      	movs	r1, #0
 8004abe:	4805      	ldr	r0, [pc, #20]	; (8004ad4 <MX_I2C2_Init+0x74>)
 8004ac0:	f005 f855 	bl	8009b6e <HAL_I2CEx_ConfigDigitalFilter>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8004aca:	f000 fcf7 	bl	80054bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004ace:	bf00      	nop
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20001044 	.word	0x20001044
 8004ad8:	40005800 	.word	0x40005800
 8004adc:	6000030d 	.word	0x6000030d

08004ae0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004ae4:	4b1b      	ldr	r3, [pc, #108]	; (8004b54 <MX_I2C3_Init+0x74>)
 8004ae6:	4a1c      	ldr	r2, [pc, #112]	; (8004b58 <MX_I2C3_Init+0x78>)
 8004ae8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x6000030D;
 8004aea:	4b1a      	ldr	r3, [pc, #104]	; (8004b54 <MX_I2C3_Init+0x74>)
 8004aec:	4a1b      	ldr	r2, [pc, #108]	; (8004b5c <MX_I2C3_Init+0x7c>)
 8004aee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8004af0:	4b18      	ldr	r3, [pc, #96]	; (8004b54 <MX_I2C3_Init+0x74>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004af6:	4b17      	ldr	r3, [pc, #92]	; (8004b54 <MX_I2C3_Init+0x74>)
 8004af8:	2201      	movs	r2, #1
 8004afa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004afc:	4b15      	ldr	r3, [pc, #84]	; (8004b54 <MX_I2C3_Init+0x74>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8004b02:	4b14      	ldr	r3, [pc, #80]	; (8004b54 <MX_I2C3_Init+0x74>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004b08:	4b12      	ldr	r3, [pc, #72]	; (8004b54 <MX_I2C3_Init+0x74>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b0e:	4b11      	ldr	r3, [pc, #68]	; (8004b54 <MX_I2C3_Init+0x74>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b14:	4b0f      	ldr	r3, [pc, #60]	; (8004b54 <MX_I2C3_Init+0x74>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004b1a:	480e      	ldr	r0, [pc, #56]	; (8004b54 <MX_I2C3_Init+0x74>)
 8004b1c:	f003 ff0c 	bl	8008938 <HAL_I2C_Init>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8004b26:	f000 fcc9 	bl	80054bc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	4809      	ldr	r0, [pc, #36]	; (8004b54 <MX_I2C3_Init+0x74>)
 8004b2e:	f004 ffd3 	bl	8009ad8 <HAL_I2CEx_ConfigAnalogFilter>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8004b38:	f000 fcc0 	bl	80054bc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	4805      	ldr	r0, [pc, #20]	; (8004b54 <MX_I2C3_Init+0x74>)
 8004b40:	f005 f815 	bl	8009b6e <HAL_I2CEx_ConfigDigitalFilter>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8004b4a:	f000 fcb7 	bl	80054bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8004b4e:	bf00      	nop
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	20001090 	.word	0x20001090
 8004b58:	40005c00 	.word	0x40005c00
 8004b5c:	6000030d 	.word	0x6000030d

08004b60 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8004b64:	4b1b      	ldr	r3, [pc, #108]	; (8004bd4 <MX_I2C4_Init+0x74>)
 8004b66:	4a1c      	ldr	r2, [pc, #112]	; (8004bd8 <MX_I2C4_Init+0x78>)
 8004b68:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x6000030D;
 8004b6a:	4b1a      	ldr	r3, [pc, #104]	; (8004bd4 <MX_I2C4_Init+0x74>)
 8004b6c:	4a1b      	ldr	r2, [pc, #108]	; (8004bdc <MX_I2C4_Init+0x7c>)
 8004b6e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8004b70:	4b18      	ldr	r3, [pc, #96]	; (8004bd4 <MX_I2C4_Init+0x74>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b76:	4b17      	ldr	r3, [pc, #92]	; (8004bd4 <MX_I2C4_Init+0x74>)
 8004b78:	2201      	movs	r2, #1
 8004b7a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b7c:	4b15      	ldr	r3, [pc, #84]	; (8004bd4 <MX_I2C4_Init+0x74>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8004b82:	4b14      	ldr	r3, [pc, #80]	; (8004bd4 <MX_I2C4_Init+0x74>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004b88:	4b12      	ldr	r3, [pc, #72]	; (8004bd4 <MX_I2C4_Init+0x74>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b8e:	4b11      	ldr	r3, [pc, #68]	; (8004bd4 <MX_I2C4_Init+0x74>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b94:	4b0f      	ldr	r3, [pc, #60]	; (8004bd4 <MX_I2C4_Init+0x74>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8004b9a:	480e      	ldr	r0, [pc, #56]	; (8004bd4 <MX_I2C4_Init+0x74>)
 8004b9c:	f003 fecc 	bl	8008938 <HAL_I2C_Init>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8004ba6:	f000 fc89 	bl	80054bc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004baa:	2100      	movs	r1, #0
 8004bac:	4809      	ldr	r0, [pc, #36]	; (8004bd4 <MX_I2C4_Init+0x74>)
 8004bae:	f004 ff93 	bl	8009ad8 <HAL_I2CEx_ConfigAnalogFilter>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8004bb8:	f000 fc80 	bl	80054bc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	4805      	ldr	r0, [pc, #20]	; (8004bd4 <MX_I2C4_Init+0x74>)
 8004bc0:	f004 ffd5 	bl	8009b6e <HAL_I2CEx_ConfigDigitalFilter>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8004bca:	f000 fc77 	bl	80054bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8004bce:	bf00      	nop
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	200010dc 	.word	0x200010dc
 8004bd8:	40006000 	.word	0x40006000
 8004bdc:	6000030d 	.word	0x6000030d

08004be0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b090      	sub	sp, #64	; 0x40
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004be8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	605a      	str	r2, [r3, #4]
 8004bf2:	609a      	str	r2, [r3, #8]
 8004bf4:	60da      	str	r2, [r3, #12]
 8004bf6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a6b      	ldr	r2, [pc, #428]	; (8004dac <HAL_I2C_MspInit+0x1cc>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d128      	bne.n	8004c54 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c02:	4b6b      	ldr	r3, [pc, #428]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c06:	4a6a      	ldr	r2, [pc, #424]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004c08:	f043 0302 	orr.w	r3, r3, #2
 8004c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c0e:	4b68      	ldr	r3, [pc, #416]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MLX2_SCL_Pin|MLX2_SDA_Pin;
 8004c1a:	23c0      	movs	r3, #192	; 0xc0
 8004c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c1e:	2312      	movs	r3, #18
 8004c20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c22:	2300      	movs	r3, #0
 8004c24:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c26:	2303      	movs	r3, #3
 8004c28:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c2a:	2304      	movs	r3, #4
 8004c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c32:	4619      	mov	r1, r3
 8004c34:	485f      	ldr	r0, [pc, #380]	; (8004db4 <HAL_I2C_MspInit+0x1d4>)
 8004c36:	f003 fcd3 	bl	80085e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004c3a:	4b5d      	ldr	r3, [pc, #372]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	4a5c      	ldr	r2, [pc, #368]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004c40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c44:	6413      	str	r3, [r2, #64]	; 0x40
 8004c46:	4b5a      	ldr	r3, [pc, #360]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8004c52:	e0a7      	b.n	8004da4 <HAL_I2C_MspInit+0x1c4>
  else if(i2cHandle->Instance==I2C2)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a57      	ldr	r2, [pc, #348]	; (8004db8 <HAL_I2C_MspInit+0x1d8>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d128      	bne.n	8004cb0 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004c5e:	4b54      	ldr	r3, [pc, #336]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	4a53      	ldr	r2, [pc, #332]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004c64:	f043 0320 	orr.w	r3, r3, #32
 8004c68:	6313      	str	r3, [r2, #48]	; 0x30
 8004c6a:	4b51      	ldr	r3, [pc, #324]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	f003 0320 	and.w	r3, r3, #32
 8004c72:	623b      	str	r3, [r7, #32]
 8004c74:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GYRO_SDA_Pin|GYRO_SCL_Pin;
 8004c76:	2303      	movs	r3, #3
 8004c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c7a:	2312      	movs	r3, #18
 8004c7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c82:	2303      	movs	r3, #3
 8004c84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004c86:	2304      	movs	r3, #4
 8004c88:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004c8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c8e:	4619      	mov	r1, r3
 8004c90:	484a      	ldr	r0, [pc, #296]	; (8004dbc <HAL_I2C_MspInit+0x1dc>)
 8004c92:	f003 fca5 	bl	80085e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004c96:	4b46      	ldr	r3, [pc, #280]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	4a45      	ldr	r2, [pc, #276]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004c9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ca2:	4b43      	ldr	r3, [pc, #268]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004caa:	61fb      	str	r3, [r7, #28]
 8004cac:	69fb      	ldr	r3, [r7, #28]
}
 8004cae:	e079      	b.n	8004da4 <HAL_I2C_MspInit+0x1c4>
  else if(i2cHandle->Instance==I2C3)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a42      	ldr	r2, [pc, #264]	; (8004dc0 <HAL_I2C_MspInit+0x1e0>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d146      	bne.n	8004d48 <HAL_I2C_MspInit+0x168>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cba:	4b3d      	ldr	r3, [pc, #244]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbe:	4a3c      	ldr	r2, [pc, #240]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004cc0:	f043 0304 	orr.w	r3, r3, #4
 8004cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8004cc6:	4b3a      	ldr	r3, [pc, #232]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cca:	f003 0304 	and.w	r3, r3, #4
 8004cce:	61bb      	str	r3, [r7, #24]
 8004cd0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cd2:	4b37      	ldr	r3, [pc, #220]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd6:	4a36      	ldr	r2, [pc, #216]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004cd8:	f043 0301 	orr.w	r3, r3, #1
 8004cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8004cde:	4b34      	ldr	r3, [pc, #208]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	617b      	str	r3, [r7, #20]
 8004ce8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MLX1_SDA_Pin;
 8004cea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004cf0:	2312      	movs	r3, #18
 8004cf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004cfc:	2304      	movs	r3, #4
 8004cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(MLX1_SDA_GPIO_Port, &GPIO_InitStruct);
 8004d00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d04:	4619      	mov	r1, r3
 8004d06:	482f      	ldr	r0, [pc, #188]	; (8004dc4 <HAL_I2C_MspInit+0x1e4>)
 8004d08:	f003 fc6a 	bl	80085e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MLX1_SCL_Pin;
 8004d0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d12:	2312      	movs	r3, #18
 8004d14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d16:	2300      	movs	r3, #0
 8004d18:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004d1e:	2304      	movs	r3, #4
 8004d20:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(MLX1_SCL_GPIO_Port, &GPIO_InitStruct);
 8004d22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d26:	4619      	mov	r1, r3
 8004d28:	4827      	ldr	r0, [pc, #156]	; (8004dc8 <HAL_I2C_MspInit+0x1e8>)
 8004d2a:	f003 fc59 	bl	80085e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004d2e:	4b20      	ldr	r3, [pc, #128]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	4a1f      	ldr	r2, [pc, #124]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004d34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d38:	6413      	str	r3, [r2, #64]	; 0x40
 8004d3a:	4b1d      	ldr	r3, [pc, #116]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d42:	613b      	str	r3, [r7, #16]
 8004d44:	693b      	ldr	r3, [r7, #16]
}
 8004d46:	e02d      	b.n	8004da4 <HAL_I2C_MspInit+0x1c4>
  else if(i2cHandle->Instance==I2C4)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a1f      	ldr	r2, [pc, #124]	; (8004dcc <HAL_I2C_MspInit+0x1ec>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d128      	bne.n	8004da4 <HAL_I2C_MspInit+0x1c4>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004d52:	4b17      	ldr	r3, [pc, #92]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d56:	4a16      	ldr	r2, [pc, #88]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004d58:	f043 0320 	orr.w	r3, r3, #32
 8004d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d5e:	4b14      	ldr	r3, [pc, #80]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d62:	f003 0320 	and.w	r3, r3, #32
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004d6a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d70:	2312      	movs	r3, #18
 8004d72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d74:	2300      	movs	r3, #0
 8004d76:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8004d7c:	2304      	movs	r3, #4
 8004d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004d80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d84:	4619      	mov	r1, r3
 8004d86:	480d      	ldr	r0, [pc, #52]	; (8004dbc <HAL_I2C_MspInit+0x1dc>)
 8004d88:	f003 fc2a 	bl	80085e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8004d8c:	4b08      	ldr	r3, [pc, #32]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	4a07      	ldr	r2, [pc, #28]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004d92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d96:	6413      	str	r3, [r2, #64]	; 0x40
 8004d98:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004da0:	60bb      	str	r3, [r7, #8]
 8004da2:	68bb      	ldr	r3, [r7, #8]
}
 8004da4:	bf00      	nop
 8004da6:	3740      	adds	r7, #64	; 0x40
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40005400 	.word	0x40005400
 8004db0:	40023800 	.word	0x40023800
 8004db4:	40020400 	.word	0x40020400
 8004db8:	40005800 	.word	0x40005800
 8004dbc:	40021400 	.word	0x40021400
 8004dc0:	40005c00 	.word	0x40005c00
 8004dc4:	40020800 	.word	0x40020800
 8004dc8:	40020000 	.word	0x40020000
 8004dcc:	40006000 	.word	0x40006000

08004dd0 <statusToInt>:




int statusToInt()
{	int fullRegister = statusRegister.TeleBack;
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	4b39      	ldr	r3, [pc, #228]	; (8004ebc <statusToInt+0xec>)
 8004dd8:	78db      	ldrb	r3, [r3, #3]
 8004dda:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	607b      	str	r3, [r7, #4]
	fullRegister = fullRegister << 2;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.DamperRF) << 3;
 8004de8:	4b34      	ldr	r3, [pc, #208]	; (8004ebc <statusToInt+0xec>)
 8004dea:	78db      	ldrb	r3, [r3, #3]
 8004dec:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	461a      	mov	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	00db      	lsls	r3, r3, #3
 8004dfa:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.DamperLF) << 3;
 8004dfc:	4b2f      	ldr	r3, [pc, #188]	; (8004ebc <statusToInt+0xec>)
 8004dfe:	78db      	ldrb	r3, [r3, #3]
 8004e00:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	461a      	mov	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.Steering) << 3;
 8004e10:	4b2a      	ldr	r3, [pc, #168]	; (8004ebc <statusToInt+0xec>)
 8004e12:	789b      	ldrb	r3, [r3, #2]
 8004e14:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.VSSRF) << 3;
 8004e24:	4b25      	ldr	r3, [pc, #148]	; (8004ebc <statusToInt+0xec>)
 8004e26:	789b      	ldrb	r3, [r3, #2]
 8004e28:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	461a      	mov	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.VSSLF) << 3;
 8004e38:	4b20      	ldr	r3, [pc, #128]	; (8004ebc <statusToInt+0xec>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	461a      	mov	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.MLXRF) << 3;
 8004e4c:	4b1b      	ldr	r3, [pc, #108]	; (8004ebc <statusToInt+0xec>)
 8004e4e:	785b      	ldrb	r3, [r3, #1]
 8004e50:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	461a      	mov	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.MLXLF) << 3;
 8004e60:	4b16      	ldr	r3, [pc, #88]	; (8004ebc <statusToInt+0xec>)
 8004e62:	785b      	ldrb	r3, [r3, #1]
 8004e64:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	607b      	str	r3, [r7, #4]
	fullRegister = (fullRegister  | statusRegister.GYRO) << 3;
 8004e74:	4b11      	ldr	r3, [pc, #68]	; (8004ebc <statusToInt+0xec>)
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	461a      	mov	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	607b      	str	r3, [r7, #4]
	fullRegister = (fullRegister  | statusRegister.GPS) << 3;
 8004e88:	4b0c      	ldr	r3, [pc, #48]	; (8004ebc <statusToInt+0xec>)
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	461a      	mov	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	00db      	lsls	r3, r3, #3
 8004e9a:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.SDCARD);
 8004e9c:	4b07      	ldr	r3, [pc, #28]	; (8004ebc <statusToInt+0xec>)
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	607b      	str	r3, [r7, #4]
	return fullRegister;
 8004eae:	687b      	ldr	r3, [r7, #4]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	2000215c 	.word	0x2000215c

08004ec0 <printStatusRegister>:
void printStatusRegister()
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
	int fullRegister = statusToInt();
 8004ec6:	f7ff ff83 	bl	8004dd0 <statusToInt>
 8004eca:	60b8      	str	r0, [r7, #8]
	int b =0;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	607b      	str	r3, [r7, #4]
	for(int i=31;i>=0;i--)
 8004ed0:	231f      	movs	r3, #31
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	e022      	b.n	8004f1c <printStatusRegister+0x5c>
	{
		b = fullRegister >> i;
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	fa42 f303 	asr.w	r3, r2, r3
 8004ede:	607b      	str	r3, [r7, #4]
		if(b & 1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <printStatusRegister+0x32>
		{
			printf("1");
 8004eea:	2031      	movs	r0, #49	; 0x31
 8004eec:	f00e f830 	bl	8012f50 <putchar>
 8004ef0:	e002      	b.n	8004ef8 <printStatusRegister+0x38>
		}else
		{
			printf("0");
 8004ef2:	2030      	movs	r0, #48	; 0x30
 8004ef4:	f00e f82c 	bl	8012f50 <putchar>
		}
		if(i%3 == 0)
 8004ef8:	68f9      	ldr	r1, [r7, #12]
 8004efa:	4b0d      	ldr	r3, [pc, #52]	; (8004f30 <printStatusRegister+0x70>)
 8004efc:	fb83 3201 	smull	r3, r2, r3, r1
 8004f00:	17cb      	asrs	r3, r1, #31
 8004f02:	1ad2      	subs	r2, r2, r3
 8004f04:	4613      	mov	r3, r2
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	4413      	add	r3, r2
 8004f0a:	1aca      	subs	r2, r1, r3
 8004f0c:	2a00      	cmp	r2, #0
 8004f0e:	d102      	bne.n	8004f16 <printStatusRegister+0x56>
		{
			printf(" ");
 8004f10:	2020      	movs	r0, #32
 8004f12:	f00e f81d 	bl	8012f50 <putchar>
	for(int i=31;i>=0;i--)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	dad9      	bge.n	8004ed6 <printStatusRegister+0x16>
		}

	}
	printf("\n");
 8004f22:	200a      	movs	r0, #10
 8004f24:	f00e f814 	bl	8012f50 <putchar>
};
 8004f28:	bf00      	nop
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	55555556 	.word	0x55555556

08004f34 <initSensors>:

}

ADCSensor sWheelSensor;
void initSensors()
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af02      	add	r7, sp, #8
	  mlxInit(&mlxLFSensor,MLXLF,&hi2c1,0);
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	4a10      	ldr	r2, [pc, #64]	; (8004f80 <initSensors+0x4c>)
 8004f3e:	2102      	movs	r1, #2
 8004f40:	4810      	ldr	r0, [pc, #64]	; (8004f84 <initSensors+0x50>)
 8004f42:	f000 fe81 	bl	8005c48 <mlxInit>
	  //mlxInit(&mlxRFSensor,MLXRF,&hi2c3,mlxRFSensor.File);
	  gyroInit(&gyro);
 8004f46:	4810      	ldr	r0, [pc, #64]	; (8004f88 <initSensors+0x54>)
 8004f48:	f000 fda4 	bl	8005a94 <gyroInit>
	  absInit(&absLFSensor, ABSLF, &htim3, TIM_CHANNEL_1, 0);
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	2300      	movs	r3, #0
 8004f52:	4a0e      	ldr	r2, [pc, #56]	; (8004f8c <initSensors+0x58>)
 8004f54:	2104      	movs	r1, #4
 8004f56:	480e      	ldr	r0, [pc, #56]	; (8004f90 <initSensors+0x5c>)
 8004f58:	f000 fd50 	bl	80059fc <absInit>
	  absInit(&absRFSensor, ABSLF, &htim4, TIM_CHANNEL_1, 0);
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	2300      	movs	r3, #0
 8004f62:	4a0c      	ldr	r2, [pc, #48]	; (8004f94 <initSensors+0x60>)
 8004f64:	2104      	movs	r1, #4
 8004f66:	480c      	ldr	r0, [pc, #48]	; (8004f98 <initSensors+0x64>)
 8004f68:	f000 fd48 	bl	80059fc <absInit>
	  steeringInit(&sWheelSensor);
 8004f6c:	480b      	ldr	r0, [pc, #44]	; (8004f9c <initSensors+0x68>)
 8004f6e:	f000 fd0f 	bl	8005990 <steeringInit>
	  GPSInit(&gpsSensor);
 8004f72:	480b      	ldr	r0, [pc, #44]	; (8004fa0 <initSensors+0x6c>)
 8004f74:	f000 fc38 	bl	80057e8 <GPSInit>
	  //res = res | mlxInit(&rightFWheelMLX);


}
 8004f78:	bf00      	nop
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	20000ff8 	.word	0x20000ff8
 8004f84:	20002300 	.word	0x20002300
 8004f88:	20006068 	.word	0x20006068
 8004f8c:	2000639c 	.word	0x2000639c
 8004f90:	20006110 	.word	0x20006110
 8004f94:	200063e8 	.word	0x200063e8
 8004f98:	20006144 	.word	0x20006144
 8004f9c:	20002164 	.word	0x20002164
 8004fa0:	20006178 	.word	0x20006178

08004fa4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]

  if (htim == &htim14 )
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a3a      	ldr	r2, [pc, #232]	; (8005098 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d16c      	bne.n	800508e <HAL_TIM_PeriodElapsedCallback+0xea>
		 sdDeInit();
		 sdInit(&fileSystem);
		 openAllFiles();
	 }
	   	 */
	 statusRegister.checkTime -= 25;
 8004fb4:	4b39      	ldr	r3, [pc, #228]	; (800509c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8004fb6:	889b      	ldrh	r3, [r3, #4]
 8004fb8:	3b19      	subs	r3, #25
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	4b37      	ldr	r3, [pc, #220]	; (800509c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8004fbe:	809a      	strh	r2, [r3, #4]
	 if( statusRegister.checkTime <= 0)
 8004fc0:	4b36      	ldr	r3, [pc, #216]	; (800509c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8004fc2:	889b      	ldrh	r3, [r3, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d105      	bne.n	8004fd4 <HAL_TIM_PeriodElapsedCallback+0x30>
	 {
		 //Check all sensors
		 statusRegister.checkTime = SENSOR_ALL_CHECK_TIME;
 8004fc8:	4b34      	ldr	r3, [pc, #208]	; (800509c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8004fca:	f242 7210 	movw	r2, #10000	; 0x2710
 8004fce:	809a      	strh	r2, [r3, #4]
		 printStatusRegister();
 8004fd0:	f7ff ff76 	bl	8004ec0 <printStatusRegister>

	 }
	 mlxLFSensor.timeToNextRead -= 25;
 8004fd4:	4b32      	ldr	r3, [pc, #200]	; (80050a0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	3b19      	subs	r3, #25
 8004fda:	4a31      	ldr	r2, [pc, #196]	; (80050a0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8004fdc:	6213      	str	r3, [r2, #32]
	 if(mlxLFSensor.timeToNextRead <= 0)
 8004fde:	4b30      	ldr	r3, [pc, #192]	; (80050a0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	dc22      	bgt.n	800502c <HAL_TIM_PeriodElapsedCallback+0x88>
	 {
		mlxLFSensor.dataReady = 1;
 8004fe6:	4b2e      	ldr	r3, [pc, #184]	; (80050a0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8004fe8:	2201      	movs	r2, #1
 8004fea:	619a      	str	r2, [r3, #24]
		mlxLFSensor.timeToNextRead = MLX_DATA_RATE;
 8004fec:	4b2c      	ldr	r3, [pc, #176]	; (80050a0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8004fee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ff2:	621a      	str	r2, [r3, #32]
		HAL_UART_Transmit(&huart3, "KEEP ALIVE SIGNAL\n", strlen("KEEP ALIVE SIGNAL\n"), HAL_MAX_DELAY);
 8004ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff8:	2212      	movs	r2, #18
 8004ffa:	492a      	ldr	r1, [pc, #168]	; (80050a4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004ffc:	482a      	ldr	r0, [pc, #168]	; (80050a8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8004ffe:	f008 ffbf 	bl	800df80 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, "ECU DATA: ", strlen("ECU DATA: "), HAL_MAX_DELAY);
 8005002:	f04f 33ff 	mov.w	r3, #4294967295
 8005006:	220a      	movs	r2, #10
 8005008:	4928      	ldr	r1, [pc, #160]	; (80050ac <HAL_TIM_PeriodElapsedCallback+0x108>)
 800500a:	4827      	ldr	r0, [pc, #156]	; (80050a8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800500c:	f008 ffb8 	bl	800df80 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, &EcuData, sizeof(EcuData), HAL_MAX_DELAY);
 8005010:	f04f 33ff 	mov.w	r3, #4294967295
 8005014:	2228      	movs	r2, #40	; 0x28
 8005016:	4926      	ldr	r1, [pc, #152]	; (80050b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8005018:	4823      	ldr	r0, [pc, #140]	; (80050a8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800501a:	f008 ffb1 	bl	800df80 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, "\r\n", strlen("\r\n"), HAL_MAX_DELAY);
 800501e:	f04f 33ff 	mov.w	r3, #4294967295
 8005022:	2202      	movs	r2, #2
 8005024:	4923      	ldr	r1, [pc, #140]	; (80050b4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8005026:	4820      	ldr	r0, [pc, #128]	; (80050a8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8005028:	f008 ffaa 	bl	800df80 <HAL_UART_Transmit>
	 }
	 mlxRFSensor.timeToNextRead -= 25;
 800502c:	4b22      	ldr	r3, [pc, #136]	; (80050b8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	3b19      	subs	r3, #25
 8005032:	4a21      	ldr	r2, [pc, #132]	; (80050b8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8005034:	6213      	str	r3, [r2, #32]
	 if(mlxRFSensor.timeToNextRead <= 0)
 8005036:	4b20      	ldr	r3, [pc, #128]	; (80050b8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	2b00      	cmp	r3, #0
 800503c:	dc06      	bgt.n	800504c <HAL_TIM_PeriodElapsedCallback+0xa8>
	 {
	 	mlxRFSensor.dataReady = 1;
 800503e:	4b1e      	ldr	r3, [pc, #120]	; (80050b8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8005040:	2201      	movs	r2, #1
 8005042:	619a      	str	r2, [r3, #24]
	    mlxRFSensor.timeToNextRead = MLX_DATA_RATE;
 8005044:	4b1c      	ldr	r3, [pc, #112]	; (80050b8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8005046:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800504a:	621a      	str	r2, [r3, #32]
	 }
	 absLFSensor.timeToZeroSpeed -= 25;
 800504c:	4b1b      	ldr	r3, [pc, #108]	; (80050bc <HAL_TIM_PeriodElapsedCallback+0x118>)
 800504e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005050:	3b19      	subs	r3, #25
 8005052:	4a1a      	ldr	r2, [pc, #104]	; (80050bc <HAL_TIM_PeriodElapsedCallback+0x118>)
 8005054:	6293      	str	r3, [r2, #40]	; 0x28
	 if(absLFSensor.timeToZeroSpeed <= 0)
 8005056:	4b19      	ldr	r3, [pc, #100]	; (80050bc <HAL_TIM_PeriodElapsedCallback+0x118>)
 8005058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505a:	2b00      	cmp	r3, #0
 800505c:	dc08      	bgt.n	8005070 <HAL_TIM_PeriodElapsedCallback+0xcc>
	 {
		 absLFSensor.data = 0;
 800505e:	4b17      	ldr	r3, [pc, #92]	; (80050bc <HAL_TIM_PeriodElapsedCallback+0x118>)
 8005060:	2200      	movs	r2, #0
 8005062:	621a      	str	r2, [r3, #32]
		 absLFSensor.dataReady = 1;
 8005064:	4b15      	ldr	r3, [pc, #84]	; (80050bc <HAL_TIM_PeriodElapsedCallback+0x118>)
 8005066:	2201      	movs	r2, #1
 8005068:	619a      	str	r2, [r3, #24]
		 absLFSensor.timeToZeroSpeed = ABS_ZERO_SPEED_TIME;
 800506a:	4b14      	ldr	r3, [pc, #80]	; (80050bc <HAL_TIM_PeriodElapsedCallback+0x118>)
 800506c:	2264      	movs	r2, #100	; 0x64
 800506e:	629a      	str	r2, [r3, #40]	; 0x28
	 }
	 gyro.timeToNextRead -= 25;
 8005070:	4b13      	ldr	r3, [pc, #76]	; (80050c0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	3b19      	subs	r3, #25
 8005076:	4a12      	ldr	r2, [pc, #72]	; (80050c0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8005078:	6213      	str	r3, [r2, #32]
	 if(gyro.timeToNextRead <= 0)
 800507a:	4b11      	ldr	r3, [pc, #68]	; (80050c0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	2b00      	cmp	r3, #0
 8005080:	dc05      	bgt.n	800508e <HAL_TIM_PeriodElapsedCallback+0xea>
	 {
		 gyro.dataReady = 1;
 8005082:	4b0f      	ldr	r3, [pc, #60]	; (80050c0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8005084:	2201      	movs	r2, #1
 8005086:	619a      	str	r2, [r3, #24]
		 gyro.timeToNextRead = GYRO_DATA_RATE;
 8005088:	4b0d      	ldr	r3, [pc, #52]	; (80050c0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800508a:	22fa      	movs	r2, #250	; 0xfa
 800508c:	621a      	str	r2, [r3, #32]
	 }
  }
}
 800508e:	bf00      	nop
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20006434 	.word	0x20006434
 800509c:	2000215c 	.word	0x2000215c
 80050a0:	20002300 	.word	0x20002300
 80050a4:	080192fc 	.word	0x080192fc
 80050a8:	20006504 	.word	0x20006504
 80050ac:	08019310 	.word	0x08019310
 80050b0:	20000f7c 	.word	0x20000f7c
 80050b4:	0801931c 	.word	0x0801931c
 80050b8:	200041b4 	.word	0x200041b4
 80050bc:	20006110 	.word	0x20006110
 80050c0:	20006068 	.word	0x20006068

080050c4 <HAL_TIM_IC_CaptureCallback>:
}


//ABS
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  if (htim == absLFSensor.timer) {
 80050cc:	4b20      	ldr	r3, [pc, #128]	; (8005150 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d116      	bne.n	8005104 <HAL_TIM_IC_CaptureCallback+0x40>
    switch (HAL_TIM_GetActiveChannel(absLFSensor.timer)) {
 80050d6:	4b1e      	ldr	r3, [pc, #120]	; (8005150 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80050d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050da:	4618      	mov	r0, r3
 80050dc:	f008 fb2c 	bl	800d738 <HAL_TIM_GetActiveChannel>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d12a      	bne.n	800513c <HAL_TIM_IC_CaptureCallback+0x78>
      case HAL_TIM_ACTIVE_CHANNEL_1:
    	  absLFSensor.data = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80050e6:	2100      	movs	r1, #0
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f008 fac3 	bl	800d674 <HAL_TIM_ReadCapturedValue>
 80050ee:	4603      	mov	r3, r0
 80050f0:	461a      	mov	r2, r3
 80050f2:	4b17      	ldr	r3, [pc, #92]	; (8005150 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80050f4:	621a      	str	r2, [r3, #32]
    	  absLFSensor.timeToZeroSpeed = ABS_ZERO_SPEED_TIME;
 80050f6:	4b16      	ldr	r3, [pc, #88]	; (8005150 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80050f8:	2264      	movs	r2, #100	; 0x64
 80050fa:	629a      	str	r2, [r3, #40]	; 0x28
    	  absLFSensor.dataReady = 1;
 80050fc:	4b14      	ldr	r3, [pc, #80]	; (8005150 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80050fe:	2201      	movs	r2, #1
 8005100:	619a      	str	r2, [r3, #24]
        break;
 8005102:	e020      	b.n	8005146 <HAL_TIM_IC_CaptureCallback+0x82>
      default:
        break;
    }
  }else if(htim == absRFSensor.timer) {
 8005104:	4b13      	ldr	r3, [pc, #76]	; (8005154 <HAL_TIM_IC_CaptureCallback+0x90>)
 8005106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	429a      	cmp	r2, r3
 800510c:	d118      	bne.n	8005140 <HAL_TIM_IC_CaptureCallback+0x7c>
      switch (HAL_TIM_GetActiveChannel(absRFSensor.timer)) {
 800510e:	4b11      	ldr	r3, [pc, #68]	; (8005154 <HAL_TIM_IC_CaptureCallback+0x90>)
 8005110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005112:	4618      	mov	r0, r3
 8005114:	f008 fb10 	bl	800d738 <HAL_TIM_GetActiveChannel>
 8005118:	4603      	mov	r3, r0
 800511a:	2b01      	cmp	r3, #1
 800511c:	d112      	bne.n	8005144 <HAL_TIM_IC_CaptureCallback+0x80>
        case HAL_TIM_ACTIVE_CHANNEL_1:
        	absRFSensor.data = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800511e:	2100      	movs	r1, #0
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f008 faa7 	bl	800d674 <HAL_TIM_ReadCapturedValue>
 8005126:	4603      	mov	r3, r0
 8005128:	461a      	mov	r2, r3
 800512a:	4b0a      	ldr	r3, [pc, #40]	; (8005154 <HAL_TIM_IC_CaptureCallback+0x90>)
 800512c:	621a      	str	r2, [r3, #32]
        	absRFSensor.timeToZeroSpeed = ABS_ZERO_SPEED_TIME;
 800512e:	4b09      	ldr	r3, [pc, #36]	; (8005154 <HAL_TIM_IC_CaptureCallback+0x90>)
 8005130:	2264      	movs	r2, #100	; 0x64
 8005132:	629a      	str	r2, [r3, #40]	; 0x28
        	absRFSensor.dataReady = 1;
 8005134:	4b07      	ldr	r3, [pc, #28]	; (8005154 <HAL_TIM_IC_CaptureCallback+0x90>)
 8005136:	2201      	movs	r2, #1
 8005138:	619a      	str	r2, [r3, #24]
          break;
 800513a:	e004      	b.n	8005146 <HAL_TIM_IC_CaptureCallback+0x82>
        break;
 800513c:	bf00      	nop
 800513e:	e002      	b.n	8005146 <HAL_TIM_IC_CaptureCallback+0x82>
        default:
          break;
       }
  }
 8005140:	bf00      	nop
 8005142:	e000      	b.n	8005146 <HAL_TIM_IC_CaptureCallback+0x82>
          break;
 8005144:	bf00      	nop
}
 8005146:	bf00      	nop
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	20006110 	.word	0x20006110
 8005154:	20006144 	.word	0x20006144

08005158 <HAL_UART_RxCpltCallback>:
char received_command[255];
int command_lenght = 0;
uint8_t bufor;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]

	if(huart==&huart7)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a20      	ldr	r2, [pc, #128]	; (80051e4 <HAL_UART_RxCpltCallback+0x8c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d138      	bne.n	80051da <HAL_UART_RxCpltCallback+0x82>
				sendAllFilesToUart();
				openAllFiles();
			}
			received_command[0] = 0;
		}*/
		gpsSensor.bufor[gpsSensor.buforSize] = gpsSensor.Rx_data;
 8005168:	4b1f      	ldr	r3, [pc, #124]	; (80051e8 <HAL_UART_RxCpltCallback+0x90>)
 800516a:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 800516e:	4619      	mov	r1, r3
 8005170:	4b1d      	ldr	r3, [pc, #116]	; (80051e8 <HAL_UART_RxCpltCallback+0x90>)
 8005172:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005176:	4b1c      	ldr	r3, [pc, #112]	; (80051e8 <HAL_UART_RxCpltCallback+0x90>)
 8005178:	440b      	add	r3, r1
 800517a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		gpsSensor.buforSize++;
 800517e:	4b1a      	ldr	r3, [pc, #104]	; (80051e8 <HAL_UART_RxCpltCallback+0x90>)
 8005180:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8005184:	3301      	adds	r3, #1
 8005186:	b2da      	uxtb	r2, r3
 8005188:	4b17      	ldr	r3, [pc, #92]	; (80051e8 <HAL_UART_RxCpltCallback+0x90>)
 800518a:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
		  if(gpsSensor.Rx_data == '\n' && gpsSensor.saveLock == 0)
 800518e:	4b16      	ldr	r3, [pc, #88]	; (80051e8 <HAL_UART_RxCpltCallback+0x90>)
 8005190:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005194:	2b0a      	cmp	r3, #10
 8005196:	d118      	bne.n	80051ca <HAL_UART_RxCpltCallback+0x72>
 8005198:	4b13      	ldr	r3, [pc, #76]	; (80051e8 <HAL_UART_RxCpltCallback+0x90>)
 800519a:	7e1b      	ldrb	r3, [r3, #24]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d111      	bne.n	80051ca <HAL_UART_RxCpltCallback+0x72>
		  {
				gpsSensor.dataReady =0;
 80051a6:	4a10      	ldr	r2, [pc, #64]	; (80051e8 <HAL_UART_RxCpltCallback+0x90>)
 80051a8:	7e13      	ldrb	r3, [r2, #24]
 80051aa:	f36f 0300 	bfc	r3, #0, #1
 80051ae:	7613      	strb	r3, [r2, #24]
				strcpy(gpsSensor.data,gpsSensor.bufor);
 80051b0:	490e      	ldr	r1, [pc, #56]	; (80051ec <HAL_UART_RxCpltCallback+0x94>)
 80051b2:	480f      	ldr	r0, [pc, #60]	; (80051f0 <HAL_UART_RxCpltCallback+0x98>)
 80051b4:	f00d ff52 	bl	801305c <strcpy>
				gpsSensor.bufor[0]='\0';
 80051b8:	4b0b      	ldr	r3, [pc, #44]	; (80051e8 <HAL_UART_RxCpltCallback+0x90>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				gpsSensor.dataReady = 1;
 80051c0:	4a09      	ldr	r2, [pc, #36]	; (80051e8 <HAL_UART_RxCpltCallback+0x90>)
 80051c2:	7e13      	ldrb	r3, [r2, #24]
 80051c4:	f043 0301 	orr.w	r3, r3, #1
 80051c8:	7613      	strb	r3, [r2, #24]
		  }
		  HAL_UART_Receive_IT(gpsSensor.uart, &(gpsSensor.Rx_data), 1);
 80051ca:	4b07      	ldr	r3, [pc, #28]	; (80051e8 <HAL_UART_RxCpltCallback+0x90>)
 80051cc:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80051d0:	2201      	movs	r2, #1
 80051d2:	4908      	ldr	r1, [pc, #32]	; (80051f4 <HAL_UART_RxCpltCallback+0x9c>)
 80051d4:	4618      	mov	r0, r3
 80051d6:	f008 ff66 	bl	800e0a6 <HAL_UART_Receive_IT>
	}
}
 80051da:	bf00      	nop
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	20006480 	.word	0x20006480
 80051e8:	20006178 	.word	0x20006178
 80051ec:	20006199 	.word	0x20006199
 80051f0:	20006299 	.word	0x20006299
 80051f4:	20006198 	.word	0x20006198

080051f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b088      	sub	sp, #32
 80051fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80051fe:	f001 fadd 	bl	80067bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005202:	f000 f8a9 	bl	8005358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005206:	f7ff fb8b 	bl	8004920 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800520a:	f001 f9f3 	bl	80065f4 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 800520e:	f00a fef7 	bl	8010000 <MX_FATFS_Init>
  MX_DMA_Init();
 8005212:	f7ff faf9 	bl	8004808 <MX_DMA_Init>
  MX_I2C1_Init();
 8005216:	f7ff fbe3 	bl	80049e0 <MX_I2C1_Init>
  MX_I2C2_Init();
 800521a:	f7ff fc21 	bl	8004a60 <MX_I2C2_Init>
  MX_UART7_Init();
 800521e:	f001 f9b5 	bl	800658c <MX_UART7_Init>
  MX_SDMMC2_SD_Init();
 8005222:	f000 f9c7 	bl	80055b4 <MX_SDMMC2_SD_Init>
  MX_RTC_Init();
 8005226:	f000 f94f 	bl	80054c8 <MX_RTC_Init>
  MX_ADC1_Init();
 800522a:	f7fe fe89 	bl	8003f40 <MX_ADC1_Init>
  MX_ADC2_Init();
 800522e:	f7fe fed9 	bl	8003fe4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8005232:	f7fe ff29 	bl	8004088 <MX_ADC3_Init>
  MX_CAN1_Init();
 8005236:	f7ff f87f 	bl	8004338 <MX_CAN1_Init>
  MX_CAN2_Init();
 800523a:	f7ff f8d5 	bl	80043e8 <MX_CAN2_Init>
  MX_I2C3_Init();
 800523e:	f7ff fc4f 	bl	8004ae0 <MX_I2C3_Init>
  MX_I2C4_Init();
 8005242:	f7ff fc8d 	bl	8004b60 <MX_I2C4_Init>
  MX_TIM3_Init();
 8005246:	f000 ffbf 	bl	80061c8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800524a:	f001 f84b 	bl	80062e4 <MX_TIM4_Init>
  MX_TIM14_Init();
 800524e:	f001 f8d7 	bl	8006400 <MX_TIM14_Init>



  RTC_TimeTypeDef time;
  RTC_DateTypeDef date;
  statusRegister.checkTime = SENSOR_ALL_CHECK_TIME;
 8005252:	4b36      	ldr	r3, [pc, #216]	; (800532c <main+0x134>)
 8005254:	f242 7210 	movw	r2, #10000	; 0x2710
 8005258:	809a      	strh	r2, [r3, #4]

  HAL_CAN_Start(&hcan2);
 800525a:	4835      	ldr	r0, [pc, #212]	; (8005330 <main+0x138>)
 800525c:	f002 f8ec 	bl	8007438 <HAL_CAN_Start>
  HAL_CAN_Start(&hcan1);
 8005260:	4834      	ldr	r0, [pc, #208]	; (8005334 <main+0x13c>)
 8005262:	f002 f8e9 	bl	8007438 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8005266:	2102      	movs	r1, #2
 8005268:	4831      	ldr	r0, [pc, #196]	; (8005330 <main+0x138>)
 800526a:	f002 fa3b 	bl	80076e4 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800526e:	2102      	movs	r1, #2
 8005270:	4830      	ldr	r0, [pc, #192]	; (8005334 <main+0x13c>)
 8005272:	f002 fa37 	bl	80076e4 <HAL_CAN_ActivateNotification>
  HAL_Delay(200);
 8005276:	20c8      	movs	r0, #200	; 0xc8
 8005278:	f001 fb06 	bl	8006888 <HAL_Delay>


  HAL_Delay(1000);
 800527c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005280:	f001 fb02 	bl	8006888 <HAL_Delay>
  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8005284:	463b      	mov	r3, r7
 8005286:	2200      	movs	r2, #0
 8005288:	4619      	mov	r1, r3
 800528a:	482b      	ldr	r0, [pc, #172]	; (8005338 <main+0x140>)
 800528c:	f006 f82e 	bl	800b2ec <HAL_RTC_GetDate>
  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8005290:	1d3b      	adds	r3, r7, #4
 8005292:	2200      	movs	r2, #0
 8005294:	4619      	mov	r1, r3
 8005296:	4828      	ldr	r0, [pc, #160]	; (8005338 <main+0x140>)
 8005298:	f005 ff22 	bl	800b0e0 <HAL_RTC_GetTime>
  printf("Aktualny czas: %02d:%02d:%02d\n", time.Hours, time.Minutes, time.Seconds);
 800529c:	793b      	ldrb	r3, [r7, #4]
 800529e:	4619      	mov	r1, r3
 80052a0:	797b      	ldrb	r3, [r7, #5]
 80052a2:	461a      	mov	r2, r3
 80052a4:	79bb      	ldrb	r3, [r7, #6]
 80052a6:	4825      	ldr	r0, [pc, #148]	; (800533c <main+0x144>)
 80052a8:	f00d fe40 	bl	8012f2c <printf>
  initSensors();
 80052ac:	f7ff fe42 	bl	8004f34 <initSensors>
  sdInit(&fileSystem);
 80052b0:	4823      	ldr	r0, [pc, #140]	; (8005340 <main+0x148>)
 80052b2:	f7fe fa7f 	bl	80037b4 <sdInit>
  printStatusRegister();
 80052b6:	f7ff fe03 	bl	8004ec0 <printStatusRegister>

  openAllFiles();
 80052ba:	f7fe faa1 	bl	8003800 <openAllFiles>


  //
  HAL_TIM_Base_Start_IT(&htim14);
 80052be:	4821      	ldr	r0, [pc, #132]	; (8005344 <main+0x14c>)
 80052c0:	f007 fce6 	bl	800cc90 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start(&htim3);
 80052c4:	4820      	ldr	r0, [pc, #128]	; (8005348 <main+0x150>)
 80052c6:	f007 fc73 	bl	800cbb0 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80052ca:	2100      	movs	r1, #0
 80052cc:	481e      	ldr	r0, [pc, #120]	; (8005348 <main+0x150>)
 80052ce:	f007 fdb9 	bl	800ce44 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim4);
 80052d2:	481e      	ldr	r0, [pc, #120]	; (800534c <main+0x154>)
 80052d4:	f007 fc6c 	bl	800cbb0 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80052d8:	2100      	movs	r1, #0
 80052da:	481c      	ldr	r0, [pc, #112]	; (800534c <main+0x154>)
 80052dc:	f007 fdb2 	bl	800ce44 <HAL_TIM_IC_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if((statusRegister.SDCARD & 0b100) < SENSOR_FAIL)
 80052e0:	4b12      	ldr	r3, [pc, #72]	; (800532c <main+0x134>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	f003 0304 	and.w	r3, r3, #4
 80052ee:	2b03      	cmp	r3, #3
 80052f0:	dcf6      	bgt.n	80052e0 <main+0xe8>
	  {
		  for(int i=0;i<SENSORS_N;i++)
 80052f2:	2300      	movs	r3, #0
 80052f4:	61fb      	str	r3, [r7, #28]
 80052f6:	e014      	b.n	8005322 <main+0x12a>
		  if( _dataHandler[GYRO].sensorStruct)
 80052f8:	4b15      	ldr	r3, [pc, #84]	; (8005350 <main+0x158>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	3314      	adds	r3, #20
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00b      	beq.n	800531c <main+0x124>
		  {
			  _dataHandler[GYRO].getDataHandler(_dataHandler[GPS].sensorStruct);
 8005304:	4b12      	ldr	r3, [pc, #72]	; (8005350 <main+0x158>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3314      	adds	r3, #20
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	4a10      	ldr	r2, [pc, #64]	; (8005350 <main+0x158>)
 800530e:	6812      	ldr	r2, [r2, #0]
 8005310:	6852      	ldr	r2, [r2, #4]
 8005312:	4610      	mov	r0, r2
 8005314:	4798      	blx	r3
			  gyroSaveData(&gyro);
 8005316:	480f      	ldr	r0, [pc, #60]	; (8005354 <main+0x15c>)
 8005318:	f7fe fc88 	bl	8003c2c <gyroSaveData>
		  for(int i=0;i<SENSORS_N;i++)
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	3301      	adds	r3, #1
 8005320:	61fb      	str	r3, [r7, #28]
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	2b08      	cmp	r3, #8
 8005326:	dde7      	ble.n	80052f8 <main+0x100>
	  if((statusRegister.SDCARD & 0b100) < SENSOR_FAIL)
 8005328:	e7da      	b.n	80052e0 <main+0xe8>
 800532a:	bf00      	nop
 800532c:	2000215c 	.word	0x2000215c
 8005330:	20000fcc 	.word	0x20000fcc
 8005334:	20000fa4 	.word	0x20000fa4
 8005338:	2000219c 	.word	0x2000219c
 800533c:	08019320 	.word	0x08019320
 8005340:	20001128 	.word	0x20001128
 8005344:	20006434 	.word	0x20006434
 8005348:	2000639c 	.word	0x2000639c
 800534c:	200063e8 	.word	0x200063e8
 8005350:	20000000 	.word	0x20000000
 8005354:	20006068 	.word	0x20006068

08005358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b0b8      	sub	sp, #224	; 0xe0
 800535c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800535e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005362:	2234      	movs	r2, #52	; 0x34
 8005364:	2100      	movs	r1, #0
 8005366:	4618      	mov	r0, r3
 8005368:	f00d fdcc 	bl	8012f04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800536c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005370:	2200      	movs	r2, #0
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	605a      	str	r2, [r3, #4]
 8005376:	609a      	str	r2, [r3, #8]
 8005378:	60da      	str	r2, [r3, #12]
 800537a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800537c:	f107 0308 	add.w	r3, r7, #8
 8005380:	2290      	movs	r2, #144	; 0x90
 8005382:	2100      	movs	r1, #0
 8005384:	4618      	mov	r0, r3
 8005386:	f00d fdbd 	bl	8012f04 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800538a:	f004 fc3d 	bl	8009c08 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800538e:	4b48      	ldr	r3, [pc, #288]	; (80054b0 <SystemClock_Config+0x158>)
 8005390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005392:	4a47      	ldr	r2, [pc, #284]	; (80054b0 <SystemClock_Config+0x158>)
 8005394:	f023 0318 	bic.w	r3, r3, #24
 8005398:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800539a:	4b45      	ldr	r3, [pc, #276]	; (80054b0 <SystemClock_Config+0x158>)
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	4a44      	ldr	r2, [pc, #272]	; (80054b0 <SystemClock_Config+0x158>)
 80053a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053a4:	6413      	str	r3, [r2, #64]	; 0x40
 80053a6:	4b42      	ldr	r3, [pc, #264]	; (80054b0 <SystemClock_Config+0x158>)
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ae:	607b      	str	r3, [r7, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80053b2:	4b40      	ldr	r3, [pc, #256]	; (80054b4 <SystemClock_Config+0x15c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80053ba:	4a3e      	ldr	r2, [pc, #248]	; (80054b4 <SystemClock_Config+0x15c>)
 80053bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	4b3c      	ldr	r3, [pc, #240]	; (80054b4 <SystemClock_Config+0x15c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80053ca:	603b      	str	r3, [r7, #0]
 80053cc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80053ce:	2305      	movs	r3, #5
 80053d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80053d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80053dc:	2301      	movs	r3, #1
 80053de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80053e2:	2302      	movs	r3, #2
 80053e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80053e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80053ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 80053f0:	2319      	movs	r3, #25
 80053f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80053f6:	23d8      	movs	r3, #216	; 0xd8
 80053f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80053fc:	2302      	movs	r3, #2
 80053fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8005402:	2305      	movs	r3, #5
 8005404:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005408:	2302      	movs	r3, #2
 800540a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800540e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005412:	4618      	mov	r0, r3
 8005414:	f004 fc58 	bl	8009cc8 <HAL_RCC_OscConfig>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800541e:	f000 f84d 	bl	80054bc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005422:	f004 fc01 	bl	8009c28 <HAL_PWREx_EnableOverDrive>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800542c:	f000 f846 	bl	80054bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005430:	230f      	movs	r3, #15
 8005432:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005436:	2302      	movs	r3, #2
 8005438:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800543c:	2300      	movs	r3, #0
 800543e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005446:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800544a:	2300      	movs	r3, #0
 800544c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005450:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005454:	2103      	movs	r1, #3
 8005456:	4618      	mov	r0, r3
 8005458:	f004 fee4 	bl	800a224 <HAL_RCC_ClockConfig>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8005462:	f000 f82b 	bl	80054bc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8005466:	4b14      	ldr	r3, [pc, #80]	; (80054b8 <SystemClock_Config+0x160>)
 8005468:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_I2C4|RCC_PERIPHCLK_SDMMC2
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800546a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800546e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005470:	2300      	movs	r3, #0
 8005472:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8005474:	2300      	movs	r3, #0
 8005476:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005478:	2300      	movs	r3, #0
 800547a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800547c:	2300      	movs	r3, #0
 800547e:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8005480:	2300      	movs	r3, #0
 8005482:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8005484:	2300      	movs	r3, #0
 8005486:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8005488:	2300      	movs	r3, #0
 800548a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 800548e:	2300      	movs	r3, #0
 8005490:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005494:	f107 0308 	add.w	r3, r7, #8
 8005498:	4618      	mov	r0, r3
 800549a:	f005 f8a9 	bl	800a5f0 <HAL_RCCEx_PeriphCLKConfig>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <SystemClock_Config+0x150>
  {
    Error_Handler();
 80054a4:	f000 f80a 	bl	80054bc <Error_Handler>
  }
}
 80054a8:	bf00      	nop
 80054aa:	37e0      	adds	r7, #224	; 0xe0
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	40023800 	.word	0x40023800
 80054b4:	40007000 	.word	0x40007000
 80054b8:	0423d120 	.word	0x0423d120

080054bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80054bc:	b480      	push	{r7}
 80054be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80054c0:	b672      	cpsid	i
}
 80054c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80054c4:	e7fe      	b.n	80054c4 <Error_Handler+0x8>
	...

080054c8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b088      	sub	sp, #32
 80054cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80054ce:	f107 0308 	add.w	r3, r7, #8
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]
 80054d6:	605a      	str	r2, [r3, #4]
 80054d8:	609a      	str	r2, [r3, #8]
 80054da:	60da      	str	r2, [r3, #12]
 80054dc:	611a      	str	r2, [r3, #16]
 80054de:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80054e0:	2300      	movs	r3, #0
 80054e2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80054e4:	4b24      	ldr	r3, [pc, #144]	; (8005578 <MX_RTC_Init+0xb0>)
 80054e6:	4a25      	ldr	r2, [pc, #148]	; (800557c <MX_RTC_Init+0xb4>)
 80054e8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80054ea:	4b23      	ldr	r3, [pc, #140]	; (8005578 <MX_RTC_Init+0xb0>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80054f0:	4b21      	ldr	r3, [pc, #132]	; (8005578 <MX_RTC_Init+0xb0>)
 80054f2:	227f      	movs	r2, #127	; 0x7f
 80054f4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80054f6:	4b20      	ldr	r3, [pc, #128]	; (8005578 <MX_RTC_Init+0xb0>)
 80054f8:	22ff      	movs	r2, #255	; 0xff
 80054fa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80054fc:	4b1e      	ldr	r3, [pc, #120]	; (8005578 <MX_RTC_Init+0xb0>)
 80054fe:	2200      	movs	r2, #0
 8005500:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005502:	4b1d      	ldr	r3, [pc, #116]	; (8005578 <MX_RTC_Init+0xb0>)
 8005504:	2200      	movs	r2, #0
 8005506:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005508:	4b1b      	ldr	r3, [pc, #108]	; (8005578 <MX_RTC_Init+0xb0>)
 800550a:	2200      	movs	r2, #0
 800550c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800550e:	481a      	ldr	r0, [pc, #104]	; (8005578 <MX_RTC_Init+0xb0>)
 8005510:	f005 fc96 	bl	800ae40 <HAL_RTC_Init>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800551a:	f7ff ffcf 	bl	80054bc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800551e:	2300      	movs	r3, #0
 8005520:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8005522:	2300      	movs	r3, #0
 8005524:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8005526:	2300      	movs	r3, #0
 8005528:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800552a:	2300      	movs	r3, #0
 800552c:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800552e:	2300      	movs	r3, #0
 8005530:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8005532:	f107 0308 	add.w	r3, r7, #8
 8005536:	2201      	movs	r2, #1
 8005538:	4619      	mov	r1, r3
 800553a:	480f      	ldr	r0, [pc, #60]	; (8005578 <MX_RTC_Init+0xb0>)
 800553c:	f005 fd12 	bl	800af64 <HAL_RTC_SetTime>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8005546:	f7ff ffb9 	bl	80054bc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800554a:	2301      	movs	r3, #1
 800554c:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 800554e:	2301      	movs	r3, #1
 8005550:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8005552:	2301      	movs	r3, #1
 8005554:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8005556:	2300      	movs	r3, #0
 8005558:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800555a:	1d3b      	adds	r3, r7, #4
 800555c:	2201      	movs	r2, #1
 800555e:	4619      	mov	r1, r3
 8005560:	4805      	ldr	r0, [pc, #20]	; (8005578 <MX_RTC_Init+0xb0>)
 8005562:	f005 fe1b 	bl	800b19c <HAL_RTC_SetDate>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800556c:	f7ff ffa6 	bl	80054bc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8005570:	bf00      	nop
 8005572:	3720      	adds	r7, #32
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	2000219c 	.word	0x2000219c
 800557c:	40002800 	.word	0x40002800

08005580 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a07      	ldr	r2, [pc, #28]	; (80055ac <HAL_RTC_MspInit+0x2c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d105      	bne.n	800559e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005592:	4b07      	ldr	r3, [pc, #28]	; (80055b0 <HAL_RTC_MspInit+0x30>)
 8005594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005596:	4a06      	ldr	r2, [pc, #24]	; (80055b0 <HAL_RTC_MspInit+0x30>)
 8005598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800559c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40002800 	.word	0x40002800
 80055b0:	40023800 	.word	0x40023800

080055b4 <MX_SDMMC2_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc2_tx;

/* SDMMC2 init function */

void MX_SDMMC2_SD_Init(void)
{
 80055b4:	b480      	push	{r7}
 80055b6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 80055b8:	4b0c      	ldr	r3, [pc, #48]	; (80055ec <MX_SDMMC2_SD_Init+0x38>)
 80055ba:	4a0d      	ldr	r2, [pc, #52]	; (80055f0 <MX_SDMMC2_SD_Init+0x3c>)
 80055bc:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80055be:	4b0b      	ldr	r3, [pc, #44]	; (80055ec <MX_SDMMC2_SD_Init+0x38>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80055c4:	4b09      	ldr	r3, [pc, #36]	; (80055ec <MX_SDMMC2_SD_Init+0x38>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80055ca:	4b08      	ldr	r3, [pc, #32]	; (80055ec <MX_SDMMC2_SD_Init+0x38>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80055d0:	4b06      	ldr	r3, [pc, #24]	; (80055ec <MX_SDMMC2_SD_Init+0x38>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80055d6:	4b05      	ldr	r3, [pc, #20]	; (80055ec <MX_SDMMC2_SD_Init+0x38>)
 80055d8:	2200      	movs	r2, #0
 80055da:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 0;
 80055dc:	4b03      	ldr	r3, [pc, #12]	; (80055ec <MX_SDMMC2_SD_Init+0x38>)
 80055de:	2200      	movs	r2, #0
 80055e0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 80055e2:	bf00      	nop
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	200021bc 	.word	0x200021bc
 80055f0:	40011c00 	.word	0x40011c00

080055f4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b08a      	sub	sp, #40	; 0x28
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055fc:	f107 0314 	add.w	r3, r7, #20
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	605a      	str	r2, [r3, #4]
 8005606:	609a      	str	r2, [r3, #8]
 8005608:	60da      	str	r2, [r3, #12]
 800560a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC2)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a6d      	ldr	r2, [pc, #436]	; (80057c8 <HAL_SD_MspInit+0x1d4>)
 8005612:	4293      	cmp	r3, r2
 8005614:	f040 80d4 	bne.w	80057c0 <HAL_SD_MspInit+0x1cc>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* SDMMC2 clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8005618:	4b6c      	ldr	r3, [pc, #432]	; (80057cc <HAL_SD_MspInit+0x1d8>)
 800561a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561c:	4a6b      	ldr	r2, [pc, #428]	; (80057cc <HAL_SD_MspInit+0x1d8>)
 800561e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005622:	6453      	str	r3, [r2, #68]	; 0x44
 8005624:	4b69      	ldr	r3, [pc, #420]	; (80057cc <HAL_SD_MspInit+0x1d8>)
 8005626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562c:	613b      	str	r3, [r7, #16]
 800562e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005630:	4b66      	ldr	r3, [pc, #408]	; (80057cc <HAL_SD_MspInit+0x1d8>)
 8005632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005634:	4a65      	ldr	r2, [pc, #404]	; (80057cc <HAL_SD_MspInit+0x1d8>)
 8005636:	f043 0308 	orr.w	r3, r3, #8
 800563a:	6313      	str	r3, [r2, #48]	; 0x30
 800563c:	4b63      	ldr	r3, [pc, #396]	; (80057cc <HAL_SD_MspInit+0x1d8>)
 800563e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005640:	f003 0308 	and.w	r3, r3, #8
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005648:	4b60      	ldr	r3, [pc, #384]	; (80057cc <HAL_SD_MspInit+0x1d8>)
 800564a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564c:	4a5f      	ldr	r2, [pc, #380]	; (80057cc <HAL_SD_MspInit+0x1d8>)
 800564e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005652:	6313      	str	r3, [r2, #48]	; 0x30
 8005654:	4b5d      	ldr	r3, [pc, #372]	; (80057cc <HAL_SD_MspInit+0x1d8>)
 8005656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565c:	60bb      	str	r3, [r7, #8]
 800565e:	68bb      	ldr	r3, [r7, #8]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005660:	23c0      	movs	r3, #192	; 0xc0
 8005662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005664:	2302      	movs	r3, #2
 8005666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005668:	2300      	movs	r3, #0
 800566a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800566c:	2303      	movs	r3, #3
 800566e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8005670:	230b      	movs	r3, #11
 8005672:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005674:	f107 0314 	add.w	r3, r7, #20
 8005678:	4619      	mov	r1, r3
 800567a:	4855      	ldr	r0, [pc, #340]	; (80057d0 <HAL_SD_MspInit+0x1dc>)
 800567c:	f002 ffb0 	bl	80085e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8005680:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 8005684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005686:	2302      	movs	r3, #2
 8005688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800568a:	2300      	movs	r3, #0
 800568c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800568e:	2303      	movs	r3, #3
 8005690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8005692:	230b      	movs	r3, #11
 8005694:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005696:	f107 0314 	add.w	r3, r7, #20
 800569a:	4619      	mov	r1, r3
 800569c:	484d      	ldr	r0, [pc, #308]	; (80057d4 <HAL_SD_MspInit+0x1e0>)
 800569e:	f002 ff9f 	bl	80085e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80056a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80056a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056a8:	2302      	movs	r3, #2
 80056aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ac:	2300      	movs	r3, #0
 80056ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056b0:	2303      	movs	r3, #3
 80056b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 80056b4:	230a      	movs	r3, #10
 80056b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80056b8:	f107 0314 	add.w	r3, r7, #20
 80056bc:	4619      	mov	r1, r3
 80056be:	4845      	ldr	r0, [pc, #276]	; (80057d4 <HAL_SD_MspInit+0x1e0>)
 80056c0:	f002 ff8e 	bl	80085e0 <HAL_GPIO_Init>

    /* SDMMC2 DMA Init */
    /* SDMMC2_RX Init */
    hdma_sdmmc2_rx.Instance = DMA2_Stream0;
 80056c4:	4b44      	ldr	r3, [pc, #272]	; (80057d8 <HAL_SD_MspInit+0x1e4>)
 80056c6:	4a45      	ldr	r2, [pc, #276]	; (80057dc <HAL_SD_MspInit+0x1e8>)
 80056c8:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_rx.Init.Channel = DMA_CHANNEL_11;
 80056ca:	4b43      	ldr	r3, [pc, #268]	; (80057d8 <HAL_SD_MspInit+0x1e4>)
 80056cc:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 80056d0:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80056d2:	4b41      	ldr	r3, [pc, #260]	; (80057d8 <HAL_SD_MspInit+0x1e4>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056d8:	4b3f      	ldr	r3, [pc, #252]	; (80057d8 <HAL_SD_MspInit+0x1e4>)
 80056da:	2200      	movs	r2, #0
 80056dc:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80056de:	4b3e      	ldr	r3, [pc, #248]	; (80057d8 <HAL_SD_MspInit+0x1e4>)
 80056e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056e4:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80056e6:	4b3c      	ldr	r3, [pc, #240]	; (80057d8 <HAL_SD_MspInit+0x1e4>)
 80056e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80056ec:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80056ee:	4b3a      	ldr	r3, [pc, #232]	; (80057d8 <HAL_SD_MspInit+0x1e4>)
 80056f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80056f4:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_rx.Init.Mode = DMA_PFCTRL;
 80056f6:	4b38      	ldr	r3, [pc, #224]	; (80057d8 <HAL_SD_MspInit+0x1e4>)
 80056f8:	2220      	movs	r2, #32
 80056fa:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80056fc:	4b36      	ldr	r3, [pc, #216]	; (80057d8 <HAL_SD_MspInit+0x1e4>)
 80056fe:	2200      	movs	r2, #0
 8005700:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005702:	4b35      	ldr	r3, [pc, #212]	; (80057d8 <HAL_SD_MspInit+0x1e4>)
 8005704:	2204      	movs	r2, #4
 8005706:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005708:	4b33      	ldr	r3, [pc, #204]	; (80057d8 <HAL_SD_MspInit+0x1e4>)
 800570a:	2203      	movs	r2, #3
 800570c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc2_rx.Init.MemBurst = DMA_MBURST_INC4;
 800570e:	4b32      	ldr	r3, [pc, #200]	; (80057d8 <HAL_SD_MspInit+0x1e4>)
 8005710:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005714:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc2_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005716:	4b30      	ldr	r3, [pc, #192]	; (80057d8 <HAL_SD_MspInit+0x1e4>)
 8005718:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800571c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_rx) != HAL_OK)
 800571e:	482e      	ldr	r0, [pc, #184]	; (80057d8 <HAL_SD_MspInit+0x1e4>)
 8005720:	f002 fb48 	bl	8007db4 <HAL_DMA_Init>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <HAL_SD_MspInit+0x13a>
    {
      Error_Handler();
 800572a:	f7ff fec7 	bl	80054bc <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc2_rx);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a29      	ldr	r2, [pc, #164]	; (80057d8 <HAL_SD_MspInit+0x1e4>)
 8005732:	641a      	str	r2, [r3, #64]	; 0x40
 8005734:	4a28      	ldr	r2, [pc, #160]	; (80057d8 <HAL_SD_MspInit+0x1e4>)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC2_TX Init */
    hdma_sdmmc2_tx.Instance = DMA2_Stream5;
 800573a:	4b29      	ldr	r3, [pc, #164]	; (80057e0 <HAL_SD_MspInit+0x1ec>)
 800573c:	4a29      	ldr	r2, [pc, #164]	; (80057e4 <HAL_SD_MspInit+0x1f0>)
 800573e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_tx.Init.Channel = DMA_CHANNEL_11;
 8005740:	4b27      	ldr	r3, [pc, #156]	; (80057e0 <HAL_SD_MspInit+0x1ec>)
 8005742:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 8005746:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005748:	4b25      	ldr	r3, [pc, #148]	; (80057e0 <HAL_SD_MspInit+0x1ec>)
 800574a:	2240      	movs	r2, #64	; 0x40
 800574c:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800574e:	4b24      	ldr	r3, [pc, #144]	; (80057e0 <HAL_SD_MspInit+0x1ec>)
 8005750:	2200      	movs	r2, #0
 8005752:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005754:	4b22      	ldr	r3, [pc, #136]	; (80057e0 <HAL_SD_MspInit+0x1ec>)
 8005756:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800575a:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800575c:	4b20      	ldr	r3, [pc, #128]	; (80057e0 <HAL_SD_MspInit+0x1ec>)
 800575e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005762:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005764:	4b1e      	ldr	r3, [pc, #120]	; (80057e0 <HAL_SD_MspInit+0x1ec>)
 8005766:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800576a:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_tx.Init.Mode = DMA_PFCTRL;
 800576c:	4b1c      	ldr	r3, [pc, #112]	; (80057e0 <HAL_SD_MspInit+0x1ec>)
 800576e:	2220      	movs	r2, #32
 8005770:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005772:	4b1b      	ldr	r3, [pc, #108]	; (80057e0 <HAL_SD_MspInit+0x1ec>)
 8005774:	2200      	movs	r2, #0
 8005776:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005778:	4b19      	ldr	r3, [pc, #100]	; (80057e0 <HAL_SD_MspInit+0x1ec>)
 800577a:	2204      	movs	r2, #4
 800577c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800577e:	4b18      	ldr	r3, [pc, #96]	; (80057e0 <HAL_SD_MspInit+0x1ec>)
 8005780:	2203      	movs	r2, #3
 8005782:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc2_tx.Init.MemBurst = DMA_MBURST_INC4;
 8005784:	4b16      	ldr	r3, [pc, #88]	; (80057e0 <HAL_SD_MspInit+0x1ec>)
 8005786:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800578a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc2_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800578c:	4b14      	ldr	r3, [pc, #80]	; (80057e0 <HAL_SD_MspInit+0x1ec>)
 800578e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005792:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_tx) != HAL_OK)
 8005794:	4812      	ldr	r0, [pc, #72]	; (80057e0 <HAL_SD_MspInit+0x1ec>)
 8005796:	f002 fb0d 	bl	8007db4 <HAL_DMA_Init>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <HAL_SD_MspInit+0x1b0>
    {
      Error_Handler();
 80057a0:	f7ff fe8c 	bl	80054bc <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc2_tx);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a0e      	ldr	r2, [pc, #56]	; (80057e0 <HAL_SD_MspInit+0x1ec>)
 80057a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80057aa:	4a0d      	ldr	r2, [pc, #52]	; (80057e0 <HAL_SD_MspInit+0x1ec>)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 1, 0);
 80057b0:	2200      	movs	r2, #0
 80057b2:	2101      	movs	r1, #1
 80057b4:	2067      	movs	r0, #103	; 0x67
 80057b6:	f002 fac6 	bl	8007d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 80057ba:	2067      	movs	r0, #103	; 0x67
 80057bc:	f002 fadf 	bl	8007d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }
}
 80057c0:	bf00      	nop
 80057c2:	3728      	adds	r7, #40	; 0x28
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	40011c00 	.word	0x40011c00
 80057cc:	40023800 	.word	0x40023800
 80057d0:	40020c00 	.word	0x40020c00
 80057d4:	40021800 	.word	0x40021800
 80057d8:	20002240 	.word	0x20002240
 80057dc:	40026410 	.word	0x40026410
 80057e0:	200022a0 	.word	0x200022a0
 80057e4:	40026488 	.word	0x40026488

080057e8 <GPSInit>:
}


extern UART_HandleTypeDef huart3;
void GPSInit(GPSSensor * sens)
{
 80057e8:	b590      	push	{r4, r7, lr}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
	sens->File = (FIL*)malloc(sizeof(FIL));
 80057f0:	f241 0030 	movw	r0, #4144	; 0x1030
 80057f4:	f00d f942 	bl	8012a7c <malloc>
 80057f8:	4603      	mov	r3, r0
 80057fa:	461a      	mov	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	601a      	str	r2, [r3, #0]
	sens->saveRate = GPS_ERROR_TIME;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005806:	61da      	str	r2, [r3, #28]
	sens->uart = &huart7;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a48      	ldr	r2, [pc, #288]	; (800592c <GPSInit+0x144>)
 800580c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	sens->saveLock = 0;
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	7e13      	ldrb	r3, [r2, #24]
 8005814:	f36f 0341 	bfc	r3, #1, #1
 8005818:	7613      	strb	r3, [r2, #24]
	sens->buforSize = 0;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
	RTC_DateTypeDef date;
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8005822:	f107 030c 	add.w	r3, r7, #12
 8005826:	2200      	movs	r2, #0
 8005828:	4619      	mov	r1, r3
 800582a:	4841      	ldr	r0, [pc, #260]	; (8005930 <GPSInit+0x148>)
 800582c:	f005 fd5e 	bl	800b2ec <HAL_RTC_GetDate>
	sprintf(sens->path,"GPS%02d%02d.csv",date.Date,date.Month);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	1d18      	adds	r0, r3, #4
 8005834:	7bbb      	ldrb	r3, [r7, #14]
 8005836:	461a      	mov	r2, r3
 8005838:	7b7b      	ldrb	r3, [r7, #13]
 800583a:	493e      	ldr	r1, [pc, #248]	; (8005934 <GPSInit+0x14c>)
 800583c:	f00d fbee 	bl	801301c <sprintf>
	//HAL_UART_Transmit(sens->uart, commands[1], strlen(commands[1]), HAL_MAX_DELAY); // zmiana baudrate GPSa
	//ReInit_UART1(); // zmiana BaudRate na stm
	HAL_UART_Receive_IT(sens->uart, &(sens->Rx_data), 1); // aktywacja przerwan
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	3320      	adds	r3, #32
 800584a:	2201      	movs	r2, #1
 800584c:	4619      	mov	r1, r3
 800584e:	f008 fc2a 	bl	800e0a6 <HAL_UART_Receive_IT>
	HAL_Delay(100);
 8005852:	2064      	movs	r0, #100	; 0x64
 8005854:	f001 f818 	bl	8006888 <HAL_Delay>
	HAL_UART_Transmit(sens->uart, commands[0], strlen(commands[0]), HAL_MAX_DELAY);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 4220 	ldr.w	r4, [r3, #544]	; 0x220
 800585e:	4836      	ldr	r0, [pc, #216]	; (8005938 <GPSInit+0x150>)
 8005860:	f7fa fcee 	bl	8000240 <strlen>
 8005864:	4603      	mov	r3, r0
 8005866:	b29a      	uxth	r2, r3
 8005868:	f04f 33ff 	mov.w	r3, #4294967295
 800586c:	4932      	ldr	r1, [pc, #200]	; (8005938 <GPSInit+0x150>)
 800586e:	4620      	mov	r0, r4
 8005870:	f008 fb86 	bl	800df80 <HAL_UART_Transmit>
	HAL_Delay(100);
 8005874:	2064      	movs	r0, #100	; 0x64
 8005876:	f001 f807 	bl	8006888 <HAL_Delay>
	HAL_UART_Transmit(&huart3, (sens->data), strlen(sens->data), HAL_MAX_DELAY);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f203 1421 	addw	r4, r3, #289	; 0x121
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f203 1321 	addw	r3, r3, #289	; 0x121
 8005886:	4618      	mov	r0, r3
 8005888:	f7fa fcda 	bl	8000240 <strlen>
 800588c:	4603      	mov	r3, r0
 800588e:	b29a      	uxth	r2, r3
 8005890:	f04f 33ff 	mov.w	r3, #4294967295
 8005894:	4621      	mov	r1, r4
 8005896:	4829      	ldr	r0, [pc, #164]	; (800593c <GPSInit+0x154>)
 8005898:	f008 fb72 	bl	800df80 <HAL_UART_Transmit>

	HAL_UART_Transmit(sens->uart, commands[2], strlen(commands[2]), HAL_MAX_DELAY);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 4220 	ldr.w	r4, [r3, #544]	; 0x220
 80058a2:	4827      	ldr	r0, [pc, #156]	; (8005940 <GPSInit+0x158>)
 80058a4:	f7fa fccc 	bl	8000240 <strlen>
 80058a8:	4603      	mov	r3, r0
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	f04f 33ff 	mov.w	r3, #4294967295
 80058b0:	4923      	ldr	r1, [pc, #140]	; (8005940 <GPSInit+0x158>)
 80058b2:	4620      	mov	r0, r4
 80058b4:	f008 fb64 	bl	800df80 <HAL_UART_Transmit>
	HAL_Delay(100);
 80058b8:	2064      	movs	r0, #100	; 0x64
 80058ba:	f000 ffe5 	bl	8006888 <HAL_Delay>
	HAL_UART_Transmit(&huart3, (sens->data), strlen(sens->data), HAL_MAX_DELAY);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f203 1421 	addw	r4, r3, #289	; 0x121
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f203 1321 	addw	r3, r3, #289	; 0x121
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fa fcb8 	bl	8000240 <strlen>
 80058d0:	4603      	mov	r3, r0
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	f04f 33ff 	mov.w	r3, #4294967295
 80058d8:	4621      	mov	r1, r4
 80058da:	4818      	ldr	r0, [pc, #96]	; (800593c <GPSInit+0x154>)
 80058dc:	f008 fb50 	bl	800df80 <HAL_UART_Transmit>

	HAL_UART_Transmit(sens->uart, commands[3], strlen(commands[3]), HAL_MAX_DELAY);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 4220 	ldr.w	r4, [r3, #544]	; 0x220
 80058e6:	4817      	ldr	r0, [pc, #92]	; (8005944 <GPSInit+0x15c>)
 80058e8:	f7fa fcaa 	bl	8000240 <strlen>
 80058ec:	4603      	mov	r3, r0
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	f04f 33ff 	mov.w	r3, #4294967295
 80058f4:	4913      	ldr	r1, [pc, #76]	; (8005944 <GPSInit+0x15c>)
 80058f6:	4620      	mov	r0, r4
 80058f8:	f008 fb42 	bl	800df80 <HAL_UART_Transmit>
	HAL_Delay(100);
 80058fc:	2064      	movs	r0, #100	; 0x64
 80058fe:	f000 ffc3 	bl	8006888 <HAL_Delay>
	HAL_UART_Transmit(&huart3, (sens->data), strlen(sens->data), HAL_MAX_DELAY);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f203 1421 	addw	r4, r3, #289	; 0x121
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f203 1321 	addw	r3, r3, #289	; 0x121
 800590e:	4618      	mov	r0, r3
 8005910:	f7fa fc96 	bl	8000240 <strlen>
 8005914:	4603      	mov	r3, r0
 8005916:	b29a      	uxth	r2, r3
 8005918:	f04f 33ff 	mov.w	r3, #4294967295
 800591c:	4621      	mov	r1, r4
 800591e:	4807      	ldr	r0, [pc, #28]	; (800593c <GPSInit+0x154>)
 8005920:	f008 fb2e 	bl	800df80 <HAL_UART_Transmit>
}
 8005924:	bf00      	nop
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	bd90      	pop	{r4, r7, pc}
 800592c:	20006480 	.word	0x20006480
 8005930:	2000219c 	.word	0x2000219c
 8005934:	0801934c 	.word	0x0801934c
 8005938:	200000b4 	.word	0x200000b4
 800593c:	20006504 	.word	0x20006504
 8005940:	200002b2 	.word	0x200002b2
 8005944:	200003b1 	.word	0x200003b1

08005948 <adcInit>:
/* *******ADC SECTION  ********/
extern ADC_HandleTypeDef hadc1;
extern ADC_HandleTypeDef hadc2;
extern ADC_HandleTypeDef hadc3;
void adcInit(ADCSensor* sens,ADC_HandleTypeDef * adc,int channel,FIL* f)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
 8005954:	603b      	str	r3, [r7, #0]
	if(f == 0)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d108      	bne.n	800596e <adcInit+0x26>
	{
		sens->File = (FIL*)malloc(sizeof(FIL));
 800595c:	f241 0030 	movw	r0, #4144	; 0x1030
 8005960:	f00d f88c 	bl	8012a7c <malloc>
 8005964:	4603      	mov	r3, r0
 8005966:	461a      	mov	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	e002      	b.n	8005974 <adcInit+0x2c>
	}else
	{
		sens->File = f;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	601a      	str	r2, [r3, #0]
	}
	sens->adcChannel = channel;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	635a      	str	r2, [r3, #52]	; 0x34
	sens->adc = adc;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	631a      	str	r2, [r3, #48]	; 0x30
	sens->timeFromLastSuccRead = 0;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	621a      	str	r2, [r3, #32]
}
 8005986:	bf00      	nop
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
	...

08005990 <steeringInit>:
	sens->ID = id;
	sens->adcType = damper;
	sens->timeToNextRead = DAMPER_DATA_RATE;

}
void steeringInit(ADCSensor* sens){
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]

	adcInit(sens,&hadc1,0,0);
 8005998:	2300      	movs	r3, #0
 800599a:	2200      	movs	r2, #0
 800599c:	4913      	ldr	r1, [pc, #76]	; (80059ec <steeringInit+0x5c>)
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f7ff ffd2 	bl	8005948 <adcInit>
	statusRegister.Steering = SENSOR_OK;
 80059a4:	4a12      	ldr	r2, [pc, #72]	; (80059f0 <steeringInit+0x60>)
 80059a6:	7893      	ldrb	r3, [r2, #2]
 80059a8:	2101      	movs	r1, #1
 80059aa:	f361 1347 	bfi	r3, r1, #5, #3
 80059ae:	7093      	strb	r3, [r2, #2]
	sens->ID = WHEEL;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2206      	movs	r2, #6
 80059b4:	629a      	str	r2, [r3, #40]	; 0x28
	RTC_DateTypeDef date;
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80059b6:	f107 030c 	add.w	r3, r7, #12
 80059ba:	2200      	movs	r2, #0
 80059bc:	4619      	mov	r1, r3
 80059be:	480d      	ldr	r0, [pc, #52]	; (80059f4 <steeringInit+0x64>)
 80059c0:	f005 fc94 	bl	800b2ec <HAL_RTC_GetDate>
	sprintf(sens->path,"WHEEl%02d%02d.csv",date.Date,date.Month);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	1d18      	adds	r0, r3, #4
 80059c8:	7bbb      	ldrb	r3, [r7, #14]
 80059ca:	461a      	mov	r2, r3
 80059cc:	7b7b      	ldrb	r3, [r7, #13]
 80059ce:	490a      	ldr	r1, [pc, #40]	; (80059f8 <steeringInit+0x68>)
 80059d0:	f00d fb24 	bl	801301c <sprintf>
	sens->adcType = steeringWheel;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	sens->timeToNextRead = STEERING_DATA_RATE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2232      	movs	r2, #50	; 0x32
 80059e0:	61da      	str	r2, [r3, #28]
}
 80059e2:	bf00      	nop
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	20000ea4 	.word	0x20000ea4
 80059f0:	2000215c 	.word	0x2000215c
 80059f4:	2000219c 	.word	0x2000219c
 80059f8:	08019370 	.word	0x08019370

080059fc <absInit>:
	HAL_ADC_Start(sens->adc);
	HAL_ADC_PollForConversion(sens->adc, HAL_MAX_DELAY);
	sens->data = HAL_ADC_GetValue(sens->adc);
}
/******** ABS SECTION  ********/
void absInit(ABSSensor * sens,SENSORS id,TIM_HandleTypeDef* tim,int channel,FIL *f){
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	607a      	str	r2, [r7, #4]
 8005a06:	603b      	str	r3, [r7, #0]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	72fb      	strb	r3, [r7, #11]
	if(f == 0)
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d107      	bne.n	8005a22 <absInit+0x26>
	{
		sens->File = (FIL*)malloc(sizeof(FIL));
 8005a12:	f241 0030 	movw	r0, #4144	; 0x1030
 8005a16:	f00d f831 	bl	8012a7c <malloc>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	601a      	str	r2, [r3, #0]
	}
	switch(id){
 8005a22:	7afb      	ldrb	r3, [r7, #11]
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d002      	beq.n	8005a2e <absInit+0x32>
 8005a28:	2b05      	cmp	r3, #5
 8005a2a:	d007      	beq.n	8005a3c <absInit+0x40>
 8005a2c:	e00d      	b.n	8005a4a <absInit+0x4e>
	case ABSLF:
		statusRegister.VSSLF = SENSOR_OK;
 8005a2e:	4a16      	ldr	r2, [pc, #88]	; (8005a88 <absInit+0x8c>)
 8005a30:	6813      	ldr	r3, [r2, #0]
 8005a32:	2101      	movs	r1, #1
 8005a34:	f361 33d1 	bfi	r3, r1, #15, #3
 8005a38:	6013      	str	r3, [r2, #0]
		break;
 8005a3a:	e006      	b.n	8005a4a <absInit+0x4e>

	case ABSRF:
		statusRegister.VSSRF = SENSOR_OK;
 8005a3c:	4a12      	ldr	r2, [pc, #72]	; (8005a88 <absInit+0x8c>)
 8005a3e:	7893      	ldrb	r3, [r2, #2]
 8005a40:	2101      	movs	r1, #1
 8005a42:	f361 0384 	bfi	r3, r1, #2, #3
 8005a46:	7093      	strb	r3, [r2, #2]
		break;
 8005a48:	bf00      	nop
	}
	sens->dataReady = 0;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	619a      	str	r2, [r3, #24]
	sens->ID =id;
 8005a50:	7afa      	ldrb	r2, [r7, #11]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	625a      	str	r2, [r3, #36]	; 0x24
	RTC_DateTypeDef date;
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8005a56:	f107 0314 	add.w	r3, r7, #20
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	480b      	ldr	r0, [pc, #44]	; (8005a8c <absInit+0x90>)
 8005a60:	f005 fc44 	bl	800b2ec <HAL_RTC_GetDate>
	sprintf(sens->path,"ABS%02d%02d.csv",date.Date,date.Month);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	1d18      	adds	r0, r3, #4
 8005a68:	7dbb      	ldrb	r3, [r7, #22]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	7d7b      	ldrb	r3, [r7, #21]
 8005a6e:	4908      	ldr	r1, [pc, #32]	; (8005a90 <absInit+0x94>)
 8005a70:	f00d fad4 	bl	801301c <sprintf>
	sens->timer = tim;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	62da      	str	r2, [r3, #44]	; 0x2c
	sens->timerChannel = channel;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a80:	bf00      	nop
 8005a82:	3718      	adds	r7, #24
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	2000215c 	.word	0x2000215c
 8005a8c:	2000219c 	.word	0x2000219c
 8005a90:	08019384 	.word	0x08019384

08005a94 <gyroInit>:
}
/* *******GYRO SECTION  ********/

//GYRO FUNCS
void gyroInit(GyroSensor * sens)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
	int result = MPU9250_Init();
 8005a9c:	f7fd fcec 	bl	8003478 <MPU9250_Init>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	60fb      	str	r3, [r7, #12]
	if(result == 0)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d106      	bne.n	8005ab8 <gyroInit+0x24>
	{
		statusRegister.GYRO = SENSOR_OK;
 8005aaa:	4a18      	ldr	r2, [pc, #96]	; (8005b0c <gyroInit+0x78>)
 8005aac:	8813      	ldrh	r3, [r2, #0]
 8005aae:	2101      	movs	r1, #1
 8005ab0:	f361 1388 	bfi	r3, r1, #6, #3
 8005ab4:	8013      	strh	r3, [r2, #0]
 8005ab6:	e004      	b.n	8005ac2 <gyroInit+0x2e>
	}else{
		statusRegister.GYRO = SENSOR_INIT_FAIL;
 8005ab8:	4a14      	ldr	r2, [pc, #80]	; (8005b0c <gyroInit+0x78>)
 8005aba:	8813      	ldrh	r3, [r2, #0]
 8005abc:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 8005ac0:	8013      	strh	r3, [r2, #0]
	}
	sens->File = (FIL*)malloc(sizeof(FIL));
 8005ac2:	f241 0030 	movw	r0, #4144	; 0x1030
 8005ac6:	f00c ffd9 	bl	8012a7c <malloc>
 8005aca:	4603      	mov	r3, r0
 8005acc:	461a      	mov	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	601a      	str	r2, [r3, #0]

	RTC_DateTypeDef date;
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8005ad2:	f107 0308 	add.w	r3, r7, #8
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	4619      	mov	r1, r3
 8005ada:	480d      	ldr	r0, [pc, #52]	; (8005b10 <gyroInit+0x7c>)
 8005adc:	f005 fc06 	bl	800b2ec <HAL_RTC_GetDate>
	sprintf(sens->path,"GYRO%02d%02d.csv",date.Date,date.Month);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	1d18      	adds	r0, r3, #4
 8005ae4:	7abb      	ldrb	r3, [r7, #10]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	7a7b      	ldrb	r3, [r7, #9]
 8005aea:	490a      	ldr	r1, [pc, #40]	; (8005b14 <gyroInit+0x80>)
 8005aec:	f00d fa96 	bl	801301c <sprintf>
	sens->dataReady = 0;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	619a      	str	r2, [r3, #24]
	sens->saveRate = GYRO_DATA_RATE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	22fa      	movs	r2, #250	; 0xfa
 8005afa:	61da      	str	r2, [r3, #28]
	sens->timeToNextRead = GYRO_DATA_RATE;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	22fa      	movs	r2, #250	; 0xfa
 8005b00:	621a      	str	r2, [r3, #32]
}
 8005b02:	bf00      	nop
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	2000215c 	.word	0x2000215c
 8005b10:	2000219c 	.word	0x2000219c
 8005b14:	08019394 	.word	0x08019394

08005b18 <gyroConvertData>:
void gyroConvertData(struct gyroData * input, struct gyroDataCalc * output)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
	output->acc_data_calc[0] = (double) input->acc_data[0] / 16384;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b28:	ee07 3a90 	vmov	s15, r3
 8005b2c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8005b30:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8005bf0 <gyroConvertData+0xd8>
 8005b34:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	ed83 7b00 	vstr	d7, [r3]
	output->acc_data_calc[1] = (double) input->acc_data[1] / 16384;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005b44:	ee07 3a90 	vmov	s15, r3
 8005b48:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8005b4c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8005bf0 <gyroConvertData+0xd8>
 8005b50:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	ed83 7b02 	vstr	d7, [r3, #8]
	output->acc_data_calc[2] = (double) input->acc_data[2] / 16384;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005b60:	ee07 3a90 	vmov	s15, r3
 8005b64:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8005b68:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8005bf0 <gyroConvertData+0xd8>
 8005b6c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	ed83 7b04 	vstr	d7, [r3, #16]
	output->gyro_data_calc[0] = (double) input->gyro_data[0] * 250 / 32768;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8005b7c:	ee07 3a90 	vmov	s15, r3
 8005b80:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005b84:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8005bf8 <gyroConvertData+0xe0>
 8005b88:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005b8c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8005c00 <gyroConvertData+0xe8>
 8005b90:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	ed83 7b06 	vstr	d7, [r3, #24]
	output->gyro_data_calc[1] = (double) input->gyro_data[1] * 250 / 32768;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005ba0:	ee07 3a90 	vmov	s15, r3
 8005ba4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005ba8:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8005bf8 <gyroConvertData+0xe0>
 8005bac:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005bb0:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8005c00 <gyroConvertData+0xe8>
 8005bb4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	ed83 7b08 	vstr	d7, [r3, #32]
	output->gyro_data_calc[2] = (double) input->gyro_data[2] * 250 / 32768;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005bc4:	ee07 3a90 	vmov	s15, r3
 8005bc8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005bcc:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8005bf8 <gyroConvertData+0xe0>
 8005bd0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005bd4:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8005c00 <gyroConvertData+0xe8>
 8005bd8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28

}
 8005be2:	bf00      	nop
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	00000000 	.word	0x00000000
 8005bf4:	40d00000 	.word	0x40d00000
 8005bf8:	00000000 	.word	0x00000000
 8005bfc:	406f4000 	.word	0x406f4000
 8005c00:	00000000 	.word	0x00000000
 8005c04:	40e00000 	.word	0x40e00000

08005c08 <gyroGetData>:

void gyroGetData(GyroSensor * sens)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b088      	sub	sp, #32
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
	gyroData imu_9dof_data;
    MPU9250_GetData(imu_9dof_data.acc_data, imu_9dof_data.mag_data, imu_9dof_data.gyro_data);
 8005c10:	f107 030c 	add.w	r3, r7, #12
 8005c14:	f103 020c 	add.w	r2, r3, #12
 8005c18:	f107 030c 	add.w	r3, r7, #12
 8005c1c:	1d99      	adds	r1, r3, #6
 8005c1e:	f107 030c 	add.w	r3, r7, #12
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7fd fcf2 	bl	800360c <MPU9250_GetData>
    gyroConvertData(&imu_9dof_data, &sens->data);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8005c2e:	f107 030c 	add.w	r3, r7, #12
 8005c32:	4611      	mov	r1, r2
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7ff ff6f 	bl	8005b18 <gyroConvertData>
    sens->dataReady = 0;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	619a      	str	r2, [r3, #24]
}
 8005c40:	bf00      	nop
 8005c42:	3720      	adds	r7, #32
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <mlxInit>:



//MLX FUNCS
int mlxInit(MLXSensor *mlx,SENSORS id, I2C_HandleTypeDef * i2c,FIL * f)
{
 8005c48:	b590      	push	{r4, r7, lr}
 8005c4a:	f2ad 6d9c 	subw	sp, sp, #1692	; 0x69c
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	f507 64d3 	add.w	r4, r7, #1688	; 0x698
 8005c54:	f2a4 648c 	subw	r4, r4, #1676	; 0x68c
 8005c58:	6020      	str	r0, [r4, #0]
 8005c5a:	4608      	mov	r0, r1
 8005c5c:	f507 61d3 	add.w	r1, r7, #1688	; 0x698
 8005c60:	f2a1 6194 	subw	r1, r1, #1684	; 0x694
 8005c64:	600a      	str	r2, [r1, #0]
 8005c66:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8005c6a:	f5a2 62d3 	sub.w	r2, r2, #1688	; 0x698
 8005c6e:	6013      	str	r3, [r2, #0]
 8005c70:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005c74:	f2a3 638d 	subw	r3, r3, #1677	; 0x68d
 8005c78:	4602      	mov	r2, r0
 8005c7a:	701a      	strb	r2, [r3, #0]
		uint16_t eeMLX90640[832];
		if(f == 0)
 8005c7c:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005c80:	f5a3 63d3 	sub.w	r3, r3, #1688	; 0x698
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10c      	bne.n	8005ca4 <mlxInit+0x5c>
		{
			mlx->File = (FIL*)malloc(sizeof(FIL));
 8005c8a:	f241 0030 	movw	r0, #4144	; 0x1030
 8005c8e:	f00c fef5 	bl	8012a7c <malloc>
 8005c92:	4603      	mov	r3, r0
 8005c94:	461a      	mov	r2, r3
 8005c96:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005c9a:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	601a      	str	r2, [r3, #0]
 8005ca2:	e00a      	b.n	8005cba <mlxInit+0x72>
		}else
		{
			mlx->File = f;
 8005ca4:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005ca8:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8005cb2:	f5a2 62d3 	sub.w	r2, r2, #1688	; 0x698
 8005cb6:	6812      	ldr	r2, [r2, #0]
 8005cb8:	601a      	str	r2, [r3, #0]
		}
		RTC_DateTypeDef date;
		HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8005cba:	f107 0310 	add.w	r3, r7, #16
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	4861      	ldr	r0, [pc, #388]	; (8005e48 <mlxInit+0x200>)
 8005cc4:	f005 fb12 	bl	800b2ec <HAL_RTC_GetDate>
		sprintf(mlx->path,"MLX%02d%02d.csv",date.Date,date.Month);
 8005cc8:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005ccc:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	1d18      	adds	r0, r3, #4
 8005cd4:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005cd8:	f5a3 63d1 	sub.w	r3, r3, #1672	; 0x688
 8005cdc:	789b      	ldrb	r3, [r3, #2]
 8005cde:	461a      	mov	r2, r3
 8005ce0:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005ce4:	f5a3 63d1 	sub.w	r3, r3, #1672	; 0x688
 8005ce8:	785b      	ldrb	r3, [r3, #1]
 8005cea:	4958      	ldr	r1, [pc, #352]	; (8005e4c <mlxInit+0x204>)
 8005cec:	f00d f996 	bl	801301c <sprintf>
		mlx->timeToNextRead = MLX_DATA_RATE;
 8005cf0:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005cf4:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005cfe:	621a      	str	r2, [r3, #32]
		mlx->dataReady = 0;
 8005d00:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005d04:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	619a      	str	r2, [r3, #24]
	  	mlx->emissivity = 0.95;
 8005d0e:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005d12:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d1c:	f503 636b 	add.w	r3, r3, #3760	; 0xeb0
 8005d20:	4a4b      	ldr	r2, [pc, #300]	; (8005e50 <mlxInit+0x208>)
 8005d22:	601a      	str	r2, [r3, #0]
	  	mlx->ID = id;
 8005d24:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005d28:	f2a3 638d 	subw	r3, r3, #1677	; 0x68d
 8005d2c:	781a      	ldrb	r2, [r3, #0]
 8005d2e:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005d32:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	625a      	str	r2, [r3, #36]	; 0x24
		MLX90640_SetRefreshRate(MLX90640_ADDR, RefreshRate,mlx->i2c);
 8005d3a:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005d3e:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d46:	461a      	mov	r2, r3
 8005d48:	2104      	movs	r1, #4
 8005d4a:	2033      	movs	r0, #51	; 0x33
 8005d4c:	f7fa fd69 	bl	8000822 <MLX90640_SetRefreshRate>
	  	MLX90640_SetChessMode(MLX90640_ADDR,mlx->i2c);
 8005d50:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005d54:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	2033      	movs	r0, #51	; 0x33
 8005d60:	f7fa fd91 	bl	8000886 <MLX90640_SetChessMode>
	    int status = MLX90640_DumpEE(MLX90640_ADDR, eeMLX90640,mlx->i2c);
 8005d64:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005d68:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d70:	f107 0314 	add.w	r3, r7, #20
 8005d74:	4619      	mov	r1, r3
 8005d76:	2033      	movs	r0, #51	; 0x33
 8005d78:	f7fa fc3c 	bl	80005f4 <MLX90640_DumpEE>
 8005d7c:	f8c7 0694 	str.w	r0, [r7, #1684]	; 0x694
	    status = status | MLX90640_ExtractParameters(eeMLX90640, &mlx->mlx90640);
 8005d80:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005d84:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8005d8e:	f107 0314 	add.w	r3, r7, #20
 8005d92:	4611      	mov	r1, r2
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7fa fcff 	bl	8000798 <MLX90640_ExtractParameters>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	f8d7 3694 	ldr.w	r3, [r7, #1684]	; 0x694
 8005da0:	4313      	orrs	r3, r2
 8005da2:	f8c7 3694 	str.w	r3, [r7, #1684]	; 0x694
	    if (status != 0){
 8005da6:	f8d7 3694 	ldr.w	r3, [r7, #1684]	; 0x694
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d01d      	beq.n	8005dea <mlxInit+0x1a2>
	    	 if(mlx->ID == MLXLF)
 8005dae:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005db2:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d105      	bne.n	8005dca <mlxInit+0x182>
	    	 {
	    	    statusRegister.MLXLF = SENSOR_INIT_FAIL;
 8005dbe:	4a25      	ldr	r2, [pc, #148]	; (8005e54 <mlxInit+0x20c>)
 8005dc0:	7853      	ldrb	r3, [r2, #1]
 8005dc2:	f043 030e 	orr.w	r3, r3, #14
 8005dc6:	7053      	strb	r3, [r2, #1]
 8005dc8:	e00c      	b.n	8005de4 <mlxInit+0x19c>
	    	 }else if(mlx->ID == MLXRF)
 8005dca:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005dce:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	d104      	bne.n	8005de4 <mlxInit+0x19c>
	    	 {
	    	    statusRegister.MLXRF = SENSOR_INIT_FAIL;
 8005dda:	4a1e      	ldr	r2, [pc, #120]	; (8005e54 <mlxInit+0x20c>)
 8005ddc:	7853      	ldrb	r3, [r2, #1]
 8005dde:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8005de2:	7053      	strb	r3, [r2, #1]
	    	 }
	    	 return status;
 8005de4:	f8d7 3694 	ldr.w	r3, [r7, #1684]	; 0x694
 8005de8:	e028      	b.n	8005e3c <mlxInit+0x1f4>
	   }
	    mlx->i2c = i2c;
 8005dea:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005dee:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8005df8:	f2a2 6294 	subw	r2, r2, #1684	; 0x694
 8005dfc:	6812      	ldr	r2, [r2, #0]
 8005dfe:	629a      	str	r2, [r3, #40]	; 0x28

	    if(mlx->ID == MLXLF)
 8005e00:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005e04:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d106      	bne.n	8005e1e <mlxInit+0x1d6>
	    {
	    	statusRegister.MLXLF = SENSOR_OK;
 8005e10:	4a10      	ldr	r2, [pc, #64]	; (8005e54 <mlxInit+0x20c>)
 8005e12:	7853      	ldrb	r3, [r2, #1]
 8005e14:	2101      	movs	r1, #1
 8005e16:	f361 0343 	bfi	r3, r1, #1, #3
 8005e1a:	7053      	strb	r3, [r2, #1]
 8005e1c:	e00d      	b.n	8005e3a <mlxInit+0x1f2>
	    }else if(mlx->ID == MLXRF)
 8005e1e:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005e22:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d105      	bne.n	8005e3a <mlxInit+0x1f2>
	    {
	    	statusRegister.MLXRF = SENSOR_OK;
 8005e2e:	4a09      	ldr	r2, [pc, #36]	; (8005e54 <mlxInit+0x20c>)
 8005e30:	7853      	ldrb	r3, [r2, #1]
 8005e32:	2101      	movs	r1, #1
 8005e34:	f361 1306 	bfi	r3, r1, #4, #3
 8005e38:	7053      	strb	r3, [r2, #1]
	    }


	    return 0;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f207 679c 	addw	r7, r7, #1692	; 0x69c
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd90      	pop	{r4, r7, pc}
 8005e46:	bf00      	nop
 8005e48:	2000219c 	.word	0x2000219c
 8005e4c:	080193a8 	.word	0x080193a8
 8005e50:	3f733333 	.word	0x3f733333
 8005e54:	2000215c 	.word	0x2000215c

08005e58 <mlxGetData>:

//Copy and calcualte data from sensor memory to stm
int mlxGetData(MLXSensor* mlx){
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	f5ad 6dd2 	sub.w	sp, sp, #1680	; 0x690
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005e64:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005e68:	6018      	str	r0, [r3, #0]
	uint16_t frame[832];
	int status = MLX90640_GetFrameData(MLX90640_ADDR, frame,mlx->i2c);
 8005e6a:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005e6e:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e76:	f107 030c 	add.w	r3, r7, #12
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	2033      	movs	r0, #51	; 0x33
 8005e7e:	f7fa fbcf 	bl	8000620 <MLX90640_GetFrameData>
 8005e82:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
	if (status < 0)
 8005e86:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	da07      	bge.n	8005e9e <mlxGetData+0x46>
	{
		if(DEBUG)
			printf("Error while getting frame 1: %d\n",status);
 8005e8e:	f8d7 168c 	ldr.w	r1, [r7, #1676]	; 0x68c
 8005e92:	485d      	ldr	r0, [pc, #372]	; (8006008 <mlxGetData+0x1b0>)
 8005e94:	f00d f84a 	bl	8012f2c <printf>
		return status;
 8005e98:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8005e9c:	e0ae      	b.n	8005ffc <mlxGetData+0x1a4>
	}

	mlx->vdd = MLX90640_GetVdd(frame, &mlx->mlx90640);
 8005e9e:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005ea2:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8005eac:	f107 030c 	add.w	r3, r7, #12
 8005eb0:	4611      	mov	r1, r2
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fb f950 	bl	8001158 <MLX90640_GetVdd>
 8005eb8:	eef0 7a40 	vmov.f32	s15, s0
 8005ebc:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005ec0:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eca:	f603 63ac 	addw	r3, r3, #3756	; 0xeac
 8005ece:	edc3 7a00 	vstr	s15, [r3]
	mlx->ambientTemp = MLX90640_GetTa(frame, &mlx->mlx90640) - TA_SHIFT;
 8005ed2:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005ed6:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8005ee0:	f107 030c 	add.w	r3, r7, #12
 8005ee4:	4611      	mov	r1, r2
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fb f9b0 	bl	800124c <MLX90640_GetTa>
 8005eec:	eef0 7a40 	vmov.f32	s15, s0
 8005ef0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8005ef4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ef8:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005efc:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f06:	f603 63a8 	addw	r3, r3, #3752	; 0xea8
 8005f0a:	edc3 7a00 	vstr	s15, [r3]

	MLX90640_CalculateTo(frame, &mlx->mlx90640, mlx->emissivity , mlx->ambientTemp, mlx->data);
 8005f0e:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005f12:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8005f1c:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005f20:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f2a:	f503 636b 	add.w	r3, r3, #3760	; 0xeb0
 8005f2e:	edd3 7a00 	vldr	s15, [r3]
 8005f32:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005f36:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f40:	f603 63a8 	addw	r3, r3, #3752	; 0xea8
 8005f44:	ed93 7a00 	vldr	s14, [r3]
 8005f48:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005f4c:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8005f56:	4413      	add	r3, r2
 8005f58:	f107 000c 	add.w	r0, r7, #12
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	eef0 0a47 	vmov.f32	s1, s14
 8005f62:	eeb0 0a67 	vmov.f32	s0, s15
 8005f66:	f7fa fcb7 	bl	80008d8 <MLX90640_CalculateTo>
	status = MLX90640_GetFrameData(MLX90640_ADDR, frame,mlx->i2c);
 8005f6a:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005f6e:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f76:	f107 030c 	add.w	r3, r7, #12
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	2033      	movs	r0, #51	; 0x33
 8005f7e:	f7fa fb4f 	bl	8000620 <MLX90640_GetFrameData>
 8005f82:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
	if(status < 0)
 8005f86:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	da07      	bge.n	8005f9e <mlxGetData+0x146>
	{
		if(DEBUG)
			printf("Error while getting frame 2: %d\n",status);
 8005f8e:	f8d7 168c 	ldr.w	r1, [r7, #1676]	; 0x68c
 8005f92:	481e      	ldr	r0, [pc, #120]	; (800600c <mlxGetData+0x1b4>)
 8005f94:	f00c ffca 	bl	8012f2c <printf>
		return status;
 8005f98:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8005f9c:	e02e      	b.n	8005ffc <mlxGetData+0x1a4>
	}
	//mlx->dataReady = 1;
	MLX90640_CalculateTo(frame, &mlx->mlx90640, mlx->emissivity , mlx->ambientTemp, mlx->data);
 8005f9e:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005fa2:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8005fac:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005fb0:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fba:	f503 636b 	add.w	r3, r3, #3760	; 0xeb0
 8005fbe:	edd3 7a00 	vldr	s15, [r3]
 8005fc2:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005fc6:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fd0:	f603 63a8 	addw	r3, r3, #3752	; 0xea8
 8005fd4:	ed93 7a00 	vldr	s14, [r3]
 8005fd8:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005fdc:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f107 000c 	add.w	r0, r7, #12
 8005fec:	461a      	mov	r2, r3
 8005fee:	eef0 0a47 	vmov.f32	s1, s14
 8005ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ff6:	f7fa fc6f 	bl	80008d8 <MLX90640_CalculateTo>
	return 0;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f507 67d2 	add.w	r7, r7, #1680	; 0x690
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	080193b8 	.word	0x080193b8
 800600c:	080193dc 	.word	0x080193dc

08006010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8006016:	4b0f      	ldr	r3, [pc, #60]	; (8006054 <HAL_MspInit+0x44>)
 8006018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601a:	4a0e      	ldr	r2, [pc, #56]	; (8006054 <HAL_MspInit+0x44>)
 800601c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006020:	6413      	str	r3, [r2, #64]	; 0x40
 8006022:	4b0c      	ldr	r3, [pc, #48]	; (8006054 <HAL_MspInit+0x44>)
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800602a:	607b      	str	r3, [r7, #4]
 800602c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800602e:	4b09      	ldr	r3, [pc, #36]	; (8006054 <HAL_MspInit+0x44>)
 8006030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006032:	4a08      	ldr	r2, [pc, #32]	; (8006054 <HAL_MspInit+0x44>)
 8006034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006038:	6453      	str	r3, [r2, #68]	; 0x44
 800603a:	4b06      	ldr	r3, [pc, #24]	; (8006054 <HAL_MspInit+0x44>)
 800603c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800603e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006042:	603b      	str	r3, [r7, #0]
 8006044:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	40023800 	.word	0x40023800

08006058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006058:	b480      	push	{r7}
 800605a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800605c:	e7fe      	b.n	800605c <NMI_Handler+0x4>

0800605e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800605e:	b480      	push	{r7}
 8006060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006062:	e7fe      	b.n	8006062 <HardFault_Handler+0x4>

08006064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006064:	b480      	push	{r7}
 8006066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006068:	e7fe      	b.n	8006068 <MemManage_Handler+0x4>

0800606a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800606a:	b480      	push	{r7}
 800606c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800606e:	e7fe      	b.n	800606e <BusFault_Handler+0x4>

08006070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006070:	b480      	push	{r7}
 8006072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006074:	e7fe      	b.n	8006074 <UsageFault_Handler+0x4>

08006076 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006076:	b480      	push	{r7}
 8006078:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800607a:	bf00      	nop
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006084:	b480      	push	{r7}
 8006086:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006088:	bf00      	nop
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006092:	b480      	push	{r7}
 8006094:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006096:	bf00      	nop
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80060a4:	f000 fbd0 	bl	8006848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80060a8:	bf00      	nop
 80060aa:	bd80      	pop	{r7, pc}

080060ac <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80060b0:	4805      	ldr	r0, [pc, #20]	; (80060c8 <ADC_IRQHandler+0x1c>)
 80060b2:	f000 fc51 	bl	8006958 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80060b6:	4805      	ldr	r0, [pc, #20]	; (80060cc <ADC_IRQHandler+0x20>)
 80060b8:	f000 fc4e 	bl	8006958 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 80060bc:	4804      	ldr	r0, [pc, #16]	; (80060d0 <ADC_IRQHandler+0x24>)
 80060be:	f000 fc4b 	bl	8006958 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80060c2:	bf00      	nop
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	20000ea4 	.word	0x20000ea4
 80060cc:	20000eec 	.word	0x20000eec
 80060d0:	20000f34 	.word	0x20000f34

080060d4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80060d8:	4802      	ldr	r0, [pc, #8]	; (80060e4 <CAN1_RX0_IRQHandler+0x10>)
 80060da:	f001 fb29 	bl	8007730 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80060de:	bf00      	nop
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	20000fa4 	.word	0x20000fa4

080060e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80060ec:	4802      	ldr	r0, [pc, #8]	; (80060f8 <TIM3_IRQHandler+0x10>)
 80060ee:	f006 fff9 	bl	800d0e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80060f2:	bf00      	nop
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	2000639c 	.word	0x2000639c

080060fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006100:	4802      	ldr	r0, [pc, #8]	; (800610c <TIM4_IRQHandler+0x10>)
 8006102:	f006 ffef 	bl	800d0e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006106:	bf00      	nop
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	200063e8 	.word	0x200063e8

08006110 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006114:	4802      	ldr	r0, [pc, #8]	; (8006120 <USART3_IRQHandler+0x10>)
 8006116:	f008 f815 	bl	800e144 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800611a:	bf00      	nop
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	20006504 	.word	0x20006504

08006124 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8006128:	4802      	ldr	r0, [pc, #8]	; (8006134 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800612a:	f006 ffdb 	bl	800d0e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800612e:	bf00      	nop
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	20006434 	.word	0x20006434

08006138 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_rx);
 800613c:	4802      	ldr	r0, [pc, #8]	; (8006148 <DMA2_Stream0_IRQHandler+0x10>)
 800613e:	f001 ffd9 	bl	80080f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006142:	bf00      	nop
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	20002240 	.word	0x20002240

0800614c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8006150:	4802      	ldr	r0, [pc, #8]	; (800615c <CAN2_RX0_IRQHandler+0x10>)
 8006152:	f001 faed 	bl	8007730 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8006156:	bf00      	nop
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	20000fcc 	.word	0x20000fcc

08006160 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_tx);
 8006164:	4802      	ldr	r0, [pc, #8]	; (8006170 <DMA2_Stream5_IRQHandler+0x10>)
 8006166:	f001 ffc5 	bl	80080f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800616a:	bf00      	nop
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	200022a0 	.word	0x200022a0

08006174 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8006178:	4802      	ldr	r0, [pc, #8]	; (8006184 <UART7_IRQHandler+0x10>)
 800617a:	f007 ffe3 	bl	800e144 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800617e:	bf00      	nop
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	20006480 	.word	0x20006480

08006188 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 800618c:	4802      	ldr	r0, [pc, #8]	; (8006198 <SDMMC2_IRQHandler+0x10>)
 800618e:	f005 fc0d 	bl	800b9ac <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8006192:	bf00      	nop
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	200021bc 	.word	0x200021bc

0800619c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800619c:	b480      	push	{r7}
 800619e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80061a0:	4b08      	ldr	r3, [pc, #32]	; (80061c4 <SystemInit+0x28>)
 80061a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a6:	4a07      	ldr	r2, [pc, #28]	; (80061c4 <SystemInit+0x28>)
 80061a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80061b0:	4b04      	ldr	r3, [pc, #16]	; (80061c4 <SystemInit+0x28>)
 80061b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80061b6:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80061b8:	bf00      	nop
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	e000ed00 	.word	0xe000ed00

080061c8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim14;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b090      	sub	sp, #64	; 0x40
 80061cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80061ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80061d2:	2200      	movs	r2, #0
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	605a      	str	r2, [r3, #4]
 80061d8:	609a      	str	r2, [r3, #8]
 80061da:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80061dc:	f107 031c 	add.w	r3, r7, #28
 80061e0:	2200      	movs	r2, #0
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	605a      	str	r2, [r3, #4]
 80061e6:	609a      	str	r2, [r3, #8]
 80061e8:	60da      	str	r2, [r3, #12]
 80061ea:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80061ec:	f107 0310 	add.w	r3, r7, #16
 80061f0:	2200      	movs	r2, #0
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	605a      	str	r2, [r3, #4]
 80061f6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80061f8:	463b      	mov	r3, r7
 80061fa:	2200      	movs	r2, #0
 80061fc:	601a      	str	r2, [r3, #0]
 80061fe:	605a      	str	r2, [r3, #4]
 8006200:	609a      	str	r2, [r3, #8]
 8006202:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006204:	4b35      	ldr	r3, [pc, #212]	; (80062dc <MX_TIM3_Init+0x114>)
 8006206:	4a36      	ldr	r2, [pc, #216]	; (80062e0 <MX_TIM3_Init+0x118>)
 8006208:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31999;
 800620a:	4b34      	ldr	r3, [pc, #208]	; (80062dc <MX_TIM3_Init+0x114>)
 800620c:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8006210:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006212:	4b32      	ldr	r3, [pc, #200]	; (80062dc <MX_TIM3_Init+0x114>)
 8006214:	2200      	movs	r2, #0
 8006216:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8006218:	4b30      	ldr	r3, [pc, #192]	; (80062dc <MX_TIM3_Init+0x114>)
 800621a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800621e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006220:	4b2e      	ldr	r3, [pc, #184]	; (80062dc <MX_TIM3_Init+0x114>)
 8006222:	2200      	movs	r2, #0
 8006224:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006226:	4b2d      	ldr	r3, [pc, #180]	; (80062dc <MX_TIM3_Init+0x114>)
 8006228:	2200      	movs	r2, #0
 800622a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800622c:	482b      	ldr	r0, [pc, #172]	; (80062dc <MX_TIM3_Init+0x114>)
 800622e:	f006 fc68 	bl	800cb02 <HAL_TIM_Base_Init>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8006238:	f7ff f940 	bl	80054bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800623c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006240:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006242:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006246:	4619      	mov	r1, r3
 8006248:	4824      	ldr	r0, [pc, #144]	; (80062dc <MX_TIM3_Init+0x114>)
 800624a:	f007 f907 	bl	800d45c <HAL_TIM_ConfigClockSource>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8006254:	f7ff f932 	bl	80054bc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8006258:	4820      	ldr	r0, [pc, #128]	; (80062dc <MX_TIM3_Init+0x114>)
 800625a:	f006 fd91 	bl	800cd80 <HAL_TIM_IC_Init>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d001      	beq.n	8006268 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8006264:	f7ff f92a 	bl	80054bc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8006268:	2304      	movs	r3, #4
 800626a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 800626c:	2340      	movs	r3, #64	; 0x40
 800626e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8006270:	2300      	movs	r3, #0
 8006272:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8006274:	2300      	movs	r3, #0
 8006276:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8006278:	f107 031c 	add.w	r3, r7, #28
 800627c:	4619      	mov	r1, r3
 800627e:	4817      	ldr	r0, [pc, #92]	; (80062dc <MX_TIM3_Init+0x114>)
 8006280:	f007 f9b6 	bl	800d5f0 <HAL_TIM_SlaveConfigSynchro>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 800628a:	f7ff f917 	bl	80054bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800628e:	2300      	movs	r3, #0
 8006290:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006292:	2300      	movs	r3, #0
 8006294:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006296:	f107 0310 	add.w	r3, r7, #16
 800629a:	4619      	mov	r1, r3
 800629c:	480f      	ldr	r0, [pc, #60]	; (80062dc <MX_TIM3_Init+0x114>)
 800629e:	f007 fd75 	bl	800dd8c <HAL_TIMEx_MasterConfigSynchronization>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d001      	beq.n	80062ac <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80062a8:	f7ff f908 	bl	80054bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80062ac:	2302      	movs	r3, #2
 80062ae:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80062b0:	2301      	movs	r3, #1
 80062b2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80062b4:	2300      	movs	r3, #0
 80062b6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80062b8:	230f      	movs	r3, #15
 80062ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80062bc:	463b      	mov	r3, r7
 80062be:	2200      	movs	r2, #0
 80062c0:	4619      	mov	r1, r3
 80062c2:	4806      	ldr	r0, [pc, #24]	; (80062dc <MX_TIM3_Init+0x114>)
 80062c4:	f007 f82d 	bl	800d322 <HAL_TIM_IC_ConfigChannel>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <MX_TIM3_Init+0x10a>
  {
    Error_Handler();
 80062ce:	f7ff f8f5 	bl	80054bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80062d2:	bf00      	nop
 80062d4:	3740      	adds	r7, #64	; 0x40
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	2000639c 	.word	0x2000639c
 80062e0:	40000400 	.word	0x40000400

080062e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b090      	sub	sp, #64	; 0x40
 80062e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80062ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062ee:	2200      	movs	r2, #0
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	605a      	str	r2, [r3, #4]
 80062f4:	609a      	str	r2, [r3, #8]
 80062f6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80062f8:	f107 031c 	add.w	r3, r7, #28
 80062fc:	2200      	movs	r2, #0
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	605a      	str	r2, [r3, #4]
 8006302:	609a      	str	r2, [r3, #8]
 8006304:	60da      	str	r2, [r3, #12]
 8006306:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006308:	f107 0310 	add.w	r3, r7, #16
 800630c:	2200      	movs	r2, #0
 800630e:	601a      	str	r2, [r3, #0]
 8006310:	605a      	str	r2, [r3, #4]
 8006312:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8006314:	463b      	mov	r3, r7
 8006316:	2200      	movs	r2, #0
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	605a      	str	r2, [r3, #4]
 800631c:	609a      	str	r2, [r3, #8]
 800631e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006320:	4b35      	ldr	r3, [pc, #212]	; (80063f8 <MX_TIM4_Init+0x114>)
 8006322:	4a36      	ldr	r2, [pc, #216]	; (80063fc <MX_TIM4_Init+0x118>)
 8006324:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 31999;
 8006326:	4b34      	ldr	r3, [pc, #208]	; (80063f8 <MX_TIM4_Init+0x114>)
 8006328:	f647 42ff 	movw	r2, #31999	; 0x7cff
 800632c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800632e:	4b32      	ldr	r3, [pc, #200]	; (80063f8 <MX_TIM4_Init+0x114>)
 8006330:	2200      	movs	r2, #0
 8006332:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8006334:	4b30      	ldr	r3, [pc, #192]	; (80063f8 <MX_TIM4_Init+0x114>)
 8006336:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800633a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800633c:	4b2e      	ldr	r3, [pc, #184]	; (80063f8 <MX_TIM4_Init+0x114>)
 800633e:	2200      	movs	r2, #0
 8006340:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006342:	4b2d      	ldr	r3, [pc, #180]	; (80063f8 <MX_TIM4_Init+0x114>)
 8006344:	2200      	movs	r2, #0
 8006346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8006348:	482b      	ldr	r0, [pc, #172]	; (80063f8 <MX_TIM4_Init+0x114>)
 800634a:	f006 fbda 	bl	800cb02 <HAL_TIM_Base_Init>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8006354:	f7ff f8b2 	bl	80054bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800635c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800635e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006362:	4619      	mov	r1, r3
 8006364:	4824      	ldr	r0, [pc, #144]	; (80063f8 <MX_TIM4_Init+0x114>)
 8006366:	f007 f879 	bl	800d45c <HAL_TIM_ConfigClockSource>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8006370:	f7ff f8a4 	bl	80054bc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8006374:	4820      	ldr	r0, [pc, #128]	; (80063f8 <MX_TIM4_Init+0x114>)
 8006376:	f006 fd03 	bl	800cd80 <HAL_TIM_IC_Init>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8006380:	f7ff f89c 	bl	80054bc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8006384:	2304      	movs	r3, #4
 8006386:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8006388:	2340      	movs	r3, #64	; 0x40
 800638a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800638c:	2300      	movs	r3, #0
 800638e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8006390:	2300      	movs	r3, #0
 8006392:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8006394:	f107 031c 	add.w	r3, r7, #28
 8006398:	4619      	mov	r1, r3
 800639a:	4817      	ldr	r0, [pc, #92]	; (80063f8 <MX_TIM4_Init+0x114>)
 800639c:	f007 f928 	bl	800d5f0 <HAL_TIM_SlaveConfigSynchro>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d001      	beq.n	80063aa <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 80063a6:	f7ff f889 	bl	80054bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80063aa:	2300      	movs	r3, #0
 80063ac:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80063ae:	2300      	movs	r3, #0
 80063b0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80063b2:	f107 0310 	add.w	r3, r7, #16
 80063b6:	4619      	mov	r1, r3
 80063b8:	480f      	ldr	r0, [pc, #60]	; (80063f8 <MX_TIM4_Init+0x114>)
 80063ba:	f007 fce7 	bl	800dd8c <HAL_TIMEx_MasterConfigSynchronization>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <MX_TIM4_Init+0xe4>
  {
    Error_Handler();
 80063c4:	f7ff f87a 	bl	80054bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80063c8:	2302      	movs	r3, #2
 80063ca:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80063cc:	2301      	movs	r3, #1
 80063ce:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80063d0:	2300      	movs	r3, #0
 80063d2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80063d4:	230f      	movs	r3, #15
 80063d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80063d8:	463b      	mov	r3, r7
 80063da:	2200      	movs	r2, #0
 80063dc:	4619      	mov	r1, r3
 80063de:	4806      	ldr	r0, [pc, #24]	; (80063f8 <MX_TIM4_Init+0x114>)
 80063e0:	f006 ff9f 	bl	800d322 <HAL_TIM_IC_ConfigChannel>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <MX_TIM4_Init+0x10a>
  {
    Error_Handler();
 80063ea:	f7ff f867 	bl	80054bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80063ee:	bf00      	nop
 80063f0:	3740      	adds	r7, #64	; 0x40
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	200063e8 	.word	0x200063e8
 80063fc:	40000800 	.word	0x40000800

08006400 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8006404:	4b0e      	ldr	r3, [pc, #56]	; (8006440 <MX_TIM14_Init+0x40>)
 8006406:	4a0f      	ldr	r2, [pc, #60]	; (8006444 <MX_TIM14_Init+0x44>)
 8006408:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 10799;
 800640a:	4b0d      	ldr	r3, [pc, #52]	; (8006440 <MX_TIM14_Init+0x40>)
 800640c:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8006410:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006412:	4b0b      	ldr	r3, [pc, #44]	; (8006440 <MX_TIM14_Init+0x40>)
 8006414:	2200      	movs	r2, #0
 8006416:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 249;
 8006418:	4b09      	ldr	r3, [pc, #36]	; (8006440 <MX_TIM14_Init+0x40>)
 800641a:	22f9      	movs	r2, #249	; 0xf9
 800641c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800641e:	4b08      	ldr	r3, [pc, #32]	; (8006440 <MX_TIM14_Init+0x40>)
 8006420:	2200      	movs	r2, #0
 8006422:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006424:	4b06      	ldr	r3, [pc, #24]	; (8006440 <MX_TIM14_Init+0x40>)
 8006426:	2200      	movs	r2, #0
 8006428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800642a:	4805      	ldr	r0, [pc, #20]	; (8006440 <MX_TIM14_Init+0x40>)
 800642c:	f006 fb69 	bl	800cb02 <HAL_TIM_Base_Init>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8006436:	f7ff f841 	bl	80054bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800643a:	bf00      	nop
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	20006434 	.word	0x20006434
 8006444:	40002000 	.word	0x40002000

08006448 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b08c      	sub	sp, #48	; 0x30
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006450:	f107 031c 	add.w	r3, r7, #28
 8006454:	2200      	movs	r2, #0
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	605a      	str	r2, [r3, #4]
 800645a:	609a      	str	r2, [r3, #8]
 800645c:	60da      	str	r2, [r3, #12]
 800645e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a43      	ldr	r2, [pc, #268]	; (8006574 <HAL_TIM_Base_MspInit+0x12c>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d130      	bne.n	80064cc <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800646a:	4b43      	ldr	r3, [pc, #268]	; (8006578 <HAL_TIM_Base_MspInit+0x130>)
 800646c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646e:	4a42      	ldr	r2, [pc, #264]	; (8006578 <HAL_TIM_Base_MspInit+0x130>)
 8006470:	f043 0302 	orr.w	r3, r3, #2
 8006474:	6413      	str	r3, [r2, #64]	; 0x40
 8006476:	4b40      	ldr	r3, [pc, #256]	; (8006578 <HAL_TIM_Base_MspInit+0x130>)
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	f003 0302 	and.w	r3, r3, #2
 800647e:	61bb      	str	r3, [r7, #24]
 8006480:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006482:	4b3d      	ldr	r3, [pc, #244]	; (8006578 <HAL_TIM_Base_MspInit+0x130>)
 8006484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006486:	4a3c      	ldr	r2, [pc, #240]	; (8006578 <HAL_TIM_Base_MspInit+0x130>)
 8006488:	f043 0301 	orr.w	r3, r3, #1
 800648c:	6313      	str	r3, [r2, #48]	; 0x30
 800648e:	4b3a      	ldr	r3, [pc, #232]	; (8006578 <HAL_TIM_Base_MspInit+0x130>)
 8006490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	617b      	str	r3, [r7, #20]
 8006498:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = VSS2_Pin;
 800649a:	2340      	movs	r3, #64	; 0x40
 800649c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800649e:	2302      	movs	r3, #2
 80064a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064a2:	2300      	movs	r3, #0
 80064a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064a6:	2300      	movs	r3, #0
 80064a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80064aa:	2302      	movs	r3, #2
 80064ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VSS2_GPIO_Port, &GPIO_InitStruct);
 80064ae:	f107 031c 	add.w	r3, r7, #28
 80064b2:	4619      	mov	r1, r3
 80064b4:	4831      	ldr	r0, [pc, #196]	; (800657c <HAL_TIM_Base_MspInit+0x134>)
 80064b6:	f002 f893 	bl	80085e0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80064ba:	2200      	movs	r2, #0
 80064bc:	2101      	movs	r1, #1
 80064be:	201d      	movs	r0, #29
 80064c0:	f001 fc41 	bl	8007d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80064c4:	201d      	movs	r0, #29
 80064c6:	f001 fc5a 	bl	8007d7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80064ca:	e04f      	b.n	800656c <HAL_TIM_Base_MspInit+0x124>
  else if(tim_baseHandle->Instance==TIM4)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a2b      	ldr	r2, [pc, #172]	; (8006580 <HAL_TIM_Base_MspInit+0x138>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d131      	bne.n	800653a <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80064d6:	4b28      	ldr	r3, [pc, #160]	; (8006578 <HAL_TIM_Base_MspInit+0x130>)
 80064d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064da:	4a27      	ldr	r2, [pc, #156]	; (8006578 <HAL_TIM_Base_MspInit+0x130>)
 80064dc:	f043 0304 	orr.w	r3, r3, #4
 80064e0:	6413      	str	r3, [r2, #64]	; 0x40
 80064e2:	4b25      	ldr	r3, [pc, #148]	; (8006578 <HAL_TIM_Base_MspInit+0x130>)
 80064e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e6:	f003 0304 	and.w	r3, r3, #4
 80064ea:	613b      	str	r3, [r7, #16]
 80064ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80064ee:	4b22      	ldr	r3, [pc, #136]	; (8006578 <HAL_TIM_Base_MspInit+0x130>)
 80064f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f2:	4a21      	ldr	r2, [pc, #132]	; (8006578 <HAL_TIM_Base_MspInit+0x130>)
 80064f4:	f043 0308 	orr.w	r3, r3, #8
 80064f8:	6313      	str	r3, [r2, #48]	; 0x30
 80064fa:	4b1f      	ldr	r3, [pc, #124]	; (8006578 <HAL_TIM_Base_MspInit+0x130>)
 80064fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fe:	f003 0308 	and.w	r3, r3, #8
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VSS1_Pin;
 8006506:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800650a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800650c:	2302      	movs	r3, #2
 800650e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006510:	2300      	movs	r3, #0
 8006512:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006514:	2300      	movs	r3, #0
 8006516:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006518:	2302      	movs	r3, #2
 800651a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VSS1_GPIO_Port, &GPIO_InitStruct);
 800651c:	f107 031c 	add.w	r3, r7, #28
 8006520:	4619      	mov	r1, r3
 8006522:	4818      	ldr	r0, [pc, #96]	; (8006584 <HAL_TIM_Base_MspInit+0x13c>)
 8006524:	f002 f85c 	bl	80085e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8006528:	2200      	movs	r2, #0
 800652a:	2101      	movs	r1, #1
 800652c:	201e      	movs	r0, #30
 800652e:	f001 fc0a 	bl	8007d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006532:	201e      	movs	r0, #30
 8006534:	f001 fc23 	bl	8007d7e <HAL_NVIC_EnableIRQ>
}
 8006538:	e018      	b.n	800656c <HAL_TIM_Base_MspInit+0x124>
  else if(tim_baseHandle->Instance==TIM14)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a12      	ldr	r2, [pc, #72]	; (8006588 <HAL_TIM_Base_MspInit+0x140>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d113      	bne.n	800656c <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8006544:	4b0c      	ldr	r3, [pc, #48]	; (8006578 <HAL_TIM_Base_MspInit+0x130>)
 8006546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006548:	4a0b      	ldr	r2, [pc, #44]	; (8006578 <HAL_TIM_Base_MspInit+0x130>)
 800654a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800654e:	6413      	str	r3, [r2, #64]	; 0x40
 8006550:	4b09      	ldr	r3, [pc, #36]	; (8006578 <HAL_TIM_Base_MspInit+0x130>)
 8006552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006558:	60bb      	str	r3, [r7, #8]
 800655a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 800655c:	2200      	movs	r2, #0
 800655e:	2101      	movs	r1, #1
 8006560:	202d      	movs	r0, #45	; 0x2d
 8006562:	f001 fbf0 	bl	8007d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8006566:	202d      	movs	r0, #45	; 0x2d
 8006568:	f001 fc09 	bl	8007d7e <HAL_NVIC_EnableIRQ>
}
 800656c:	bf00      	nop
 800656e:	3730      	adds	r7, #48	; 0x30
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	40000400 	.word	0x40000400
 8006578:	40023800 	.word	0x40023800
 800657c:	40020000 	.word	0x40020000
 8006580:	40000800 	.word	0x40000800
 8006584:	40020c00 	.word	0x40020c00
 8006588:	40002000 	.word	0x40002000

0800658c <MX_UART7_Init>:
UART_HandleTypeDef huart7;
UART_HandleTypeDef huart3;

/* UART7 init function */
void MX_UART7_Init(void)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8006590:	4b16      	ldr	r3, [pc, #88]	; (80065ec <MX_UART7_Init+0x60>)
 8006592:	4a17      	ldr	r2, [pc, #92]	; (80065f0 <MX_UART7_Init+0x64>)
 8006594:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8006596:	4b15      	ldr	r3, [pc, #84]	; (80065ec <MX_UART7_Init+0x60>)
 8006598:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800659c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800659e:	4b13      	ldr	r3, [pc, #76]	; (80065ec <MX_UART7_Init+0x60>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80065a4:	4b11      	ldr	r3, [pc, #68]	; (80065ec <MX_UART7_Init+0x60>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80065aa:	4b10      	ldr	r3, [pc, #64]	; (80065ec <MX_UART7_Init+0x60>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80065b0:	4b0e      	ldr	r3, [pc, #56]	; (80065ec <MX_UART7_Init+0x60>)
 80065b2:	220c      	movs	r2, #12
 80065b4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80065b6:	4b0d      	ldr	r3, [pc, #52]	; (80065ec <MX_UART7_Init+0x60>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80065bc:	4b0b      	ldr	r3, [pc, #44]	; (80065ec <MX_UART7_Init+0x60>)
 80065be:	2200      	movs	r2, #0
 80065c0:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80065c2:	4b0a      	ldr	r3, [pc, #40]	; (80065ec <MX_UART7_Init+0x60>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80065c8:	4b08      	ldr	r3, [pc, #32]	; (80065ec <MX_UART7_Init+0x60>)
 80065ca:	2210      	movs	r2, #16
 80065cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80065ce:	4b07      	ldr	r3, [pc, #28]	; (80065ec <MX_UART7_Init+0x60>)
 80065d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80065d4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80065d6:	4805      	ldr	r0, [pc, #20]	; (80065ec <MX_UART7_Init+0x60>)
 80065d8:	f007 fc84 	bl	800dee4 <HAL_UART_Init>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <MX_UART7_Init+0x5a>
  {
    Error_Handler();
 80065e2:	f7fe ff6b 	bl	80054bc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80065e6:	bf00      	nop
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	20006480 	.word	0x20006480
 80065f0:	40007800 	.word	0x40007800

080065f4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80065f8:	4b16      	ldr	r3, [pc, #88]	; (8006654 <MX_USART3_UART_Init+0x60>)
 80065fa:	4a17      	ldr	r2, [pc, #92]	; (8006658 <MX_USART3_UART_Init+0x64>)
 80065fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57000;
 80065fe:	4b15      	ldr	r3, [pc, #84]	; (8006654 <MX_USART3_UART_Init+0x60>)
 8006600:	f64d 62a8 	movw	r2, #57000	; 0xdea8
 8006604:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006606:	4b13      	ldr	r3, [pc, #76]	; (8006654 <MX_USART3_UART_Init+0x60>)
 8006608:	2200      	movs	r2, #0
 800660a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800660c:	4b11      	ldr	r3, [pc, #68]	; (8006654 <MX_USART3_UART_Init+0x60>)
 800660e:	2200      	movs	r2, #0
 8006610:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006612:	4b10      	ldr	r3, [pc, #64]	; (8006654 <MX_USART3_UART_Init+0x60>)
 8006614:	2200      	movs	r2, #0
 8006616:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006618:	4b0e      	ldr	r3, [pc, #56]	; (8006654 <MX_USART3_UART_Init+0x60>)
 800661a:	220c      	movs	r2, #12
 800661c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800661e:	4b0d      	ldr	r3, [pc, #52]	; (8006654 <MX_USART3_UART_Init+0x60>)
 8006620:	2200      	movs	r2, #0
 8006622:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006624:	4b0b      	ldr	r3, [pc, #44]	; (8006654 <MX_USART3_UART_Init+0x60>)
 8006626:	2200      	movs	r2, #0
 8006628:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800662a:	4b0a      	ldr	r3, [pc, #40]	; (8006654 <MX_USART3_UART_Init+0x60>)
 800662c:	2200      	movs	r2, #0
 800662e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8006630:	4b08      	ldr	r3, [pc, #32]	; (8006654 <MX_USART3_UART_Init+0x60>)
 8006632:	2210      	movs	r2, #16
 8006634:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8006636:	4b07      	ldr	r3, [pc, #28]	; (8006654 <MX_USART3_UART_Init+0x60>)
 8006638:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800663c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800663e:	4805      	ldr	r0, [pc, #20]	; (8006654 <MX_USART3_UART_Init+0x60>)
 8006640:	f007 fc50 	bl	800dee4 <HAL_UART_Init>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 800664a:	f7fe ff37 	bl	80054bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800664e:	bf00      	nop
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	20006504 	.word	0x20006504
 8006658:	40004800 	.word	0x40004800

0800665c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b08c      	sub	sp, #48	; 0x30
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006664:	f107 031c 	add.w	r3, r7, #28
 8006668:	2200      	movs	r2, #0
 800666a:	601a      	str	r2, [r3, #0]
 800666c:	605a      	str	r2, [r3, #4]
 800666e:	609a      	str	r2, [r3, #8]
 8006670:	60da      	str	r2, [r3, #12]
 8006672:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a36      	ldr	r2, [pc, #216]	; (8006754 <HAL_UART_MspInit+0xf8>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d130      	bne.n	80066e0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800667e:	4b36      	ldr	r3, [pc, #216]	; (8006758 <HAL_UART_MspInit+0xfc>)
 8006680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006682:	4a35      	ldr	r2, [pc, #212]	; (8006758 <HAL_UART_MspInit+0xfc>)
 8006684:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006688:	6413      	str	r3, [r2, #64]	; 0x40
 800668a:	4b33      	ldr	r3, [pc, #204]	; (8006758 <HAL_UART_MspInit+0xfc>)
 800668c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006692:	61bb      	str	r3, [r7, #24]
 8006694:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006696:	4b30      	ldr	r3, [pc, #192]	; (8006758 <HAL_UART_MspInit+0xfc>)
 8006698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669a:	4a2f      	ldr	r2, [pc, #188]	; (8006758 <HAL_UART_MspInit+0xfc>)
 800669c:	f043 0320 	orr.w	r3, r3, #32
 80066a0:	6313      	str	r3, [r2, #48]	; 0x30
 80066a2:	4b2d      	ldr	r3, [pc, #180]	; (8006758 <HAL_UART_MspInit+0xfc>)
 80066a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a6:	f003 0320 	and.w	r3, r3, #32
 80066aa:	617b      	str	r3, [r7, #20]
 80066ac:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 80066ae:	23c0      	movs	r3, #192	; 0xc0
 80066b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066b2:	2302      	movs	r3, #2
 80066b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066b6:	2300      	movs	r3, #0
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066ba:	2303      	movs	r3, #3
 80066bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80066be:	2308      	movs	r3, #8
 80066c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80066c2:	f107 031c 	add.w	r3, r7, #28
 80066c6:	4619      	mov	r1, r3
 80066c8:	4824      	ldr	r0, [pc, #144]	; (800675c <HAL_UART_MspInit+0x100>)
 80066ca:	f001 ff89 	bl	80085e0 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 1, 0);
 80066ce:	2200      	movs	r2, #0
 80066d0:	2101      	movs	r1, #1
 80066d2:	2052      	movs	r0, #82	; 0x52
 80066d4:	f001 fb37 	bl	8007d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80066d8:	2052      	movs	r0, #82	; 0x52
 80066da:	f001 fb50 	bl	8007d7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80066de:	e035      	b.n	800674c <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a1e      	ldr	r2, [pc, #120]	; (8006760 <HAL_UART_MspInit+0x104>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d130      	bne.n	800674c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80066ea:	4b1b      	ldr	r3, [pc, #108]	; (8006758 <HAL_UART_MspInit+0xfc>)
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	4a1a      	ldr	r2, [pc, #104]	; (8006758 <HAL_UART_MspInit+0xfc>)
 80066f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066f4:	6413      	str	r3, [r2, #64]	; 0x40
 80066f6:	4b18      	ldr	r3, [pc, #96]	; (8006758 <HAL_UART_MspInit+0xfc>)
 80066f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066fe:	613b      	str	r3, [r7, #16]
 8006700:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006702:	4b15      	ldr	r3, [pc, #84]	; (8006758 <HAL_UART_MspInit+0xfc>)
 8006704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006706:	4a14      	ldr	r2, [pc, #80]	; (8006758 <HAL_UART_MspInit+0xfc>)
 8006708:	f043 0302 	orr.w	r3, r3, #2
 800670c:	6313      	str	r3, [r2, #48]	; 0x30
 800670e:	4b12      	ldr	r3, [pc, #72]	; (8006758 <HAL_UART_MspInit+0xfc>)
 8006710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006712:	f003 0302 	and.w	r3, r3, #2
 8006716:	60fb      	str	r3, [r7, #12]
 8006718:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART_DEBUG_TX_Pin|UART_DEBUG_RX_Pin;
 800671a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800671e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006720:	2302      	movs	r3, #2
 8006722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006724:	2300      	movs	r3, #0
 8006726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006728:	2303      	movs	r3, #3
 800672a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800672c:	2307      	movs	r3, #7
 800672e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006730:	f107 031c 	add.w	r3, r7, #28
 8006734:	4619      	mov	r1, r3
 8006736:	480b      	ldr	r0, [pc, #44]	; (8006764 <HAL_UART_MspInit+0x108>)
 8006738:	f001 ff52 	bl	80085e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 800673c:	2200      	movs	r2, #0
 800673e:	2101      	movs	r1, #1
 8006740:	2027      	movs	r0, #39	; 0x27
 8006742:	f001 fb00 	bl	8007d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006746:	2027      	movs	r0, #39	; 0x27
 8006748:	f001 fb19 	bl	8007d7e <HAL_NVIC_EnableIRQ>
}
 800674c:	bf00      	nop
 800674e:	3730      	adds	r7, #48	; 0x30
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	40007800 	.word	0x40007800
 8006758:	40023800 	.word	0x40023800
 800675c:	40021400 	.word	0x40021400
 8006760:	40004800 	.word	0x40004800
 8006764:	40020400 	.word	0x40020400

08006768 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006768:	f8df d034 	ldr.w	sp, [pc, #52]	; 80067a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800676c:	480d      	ldr	r0, [pc, #52]	; (80067a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800676e:	490e      	ldr	r1, [pc, #56]	; (80067a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006770:	4a0e      	ldr	r2, [pc, #56]	; (80067ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006774:	e002      	b.n	800677c <LoopCopyDataInit>

08006776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800677a:	3304      	adds	r3, #4

0800677c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800677c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800677e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006780:	d3f9      	bcc.n	8006776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006782:	4a0b      	ldr	r2, [pc, #44]	; (80067b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006784:	4c0b      	ldr	r4, [pc, #44]	; (80067b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006788:	e001      	b.n	800678e <LoopFillZerobss>

0800678a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800678a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800678c:	3204      	adds	r2, #4

0800678e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800678e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006790:	d3fb      	bcc.n	800678a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006792:	f7ff fd03 	bl	800619c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006796:	f00c f94d 	bl	8012a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800679a:	f7fe fd2d 	bl	80051f8 <main>
  bx  lr    
 800679e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80067a0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80067a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80067a8:	20000e68 	.word	0x20000e68
  ldr r2, =_sidata
 80067ac:	0801b18c 	.word	0x0801b18c
  ldr r2, =_sbss
 80067b0:	20000e68 	.word	0x20000e68
  ldr r4, =_ebss
 80067b4:	20006640 	.word	0x20006640

080067b8 <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80067b8:	e7fe      	b.n	80067b8 <CAN1_RX1_IRQHandler>
	...

080067bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 80067c0:	4b08      	ldr	r3, [pc, #32]	; (80067e4 <HAL_Init+0x28>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a07      	ldr	r2, [pc, #28]	; (80067e4 <HAL_Init+0x28>)
 80067c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067ca:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80067cc:	2003      	movs	r0, #3
 80067ce:	f001 faaf 	bl	8007d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80067d2:	2000      	movs	r0, #0
 80067d4:	f000 f808 	bl	80067e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80067d8:	f7ff fc1a 	bl	8006010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	40023c00 	.word	0x40023c00

080067e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80067f0:	4b12      	ldr	r3, [pc, #72]	; (800683c <HAL_InitTick+0x54>)
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	4b12      	ldr	r3, [pc, #72]	; (8006840 <HAL_InitTick+0x58>)
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	4619      	mov	r1, r3
 80067fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006802:	fbb2 f3f3 	udiv	r3, r2, r3
 8006806:	4618      	mov	r0, r3
 8006808:	f001 fac7 	bl	8007d9a <HAL_SYSTICK_Config>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e00e      	b.n	8006834 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b0f      	cmp	r3, #15
 800681a:	d80a      	bhi.n	8006832 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800681c:	2200      	movs	r2, #0
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	f04f 30ff 	mov.w	r0, #4294967295
 8006824:	f001 fa8f 	bl	8007d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006828:	4a06      	ldr	r2, [pc, #24]	; (8006844 <HAL_InitTick+0x5c>)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800682e:	2300      	movs	r3, #0
 8006830:	e000      	b.n	8006834 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
}
 8006834:	4618      	mov	r0, r3
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	200004b0 	.word	0x200004b0
 8006840:	200004b8 	.word	0x200004b8
 8006844:	200004b4 	.word	0x200004b4

08006848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006848:	b480      	push	{r7}
 800684a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800684c:	4b06      	ldr	r3, [pc, #24]	; (8006868 <HAL_IncTick+0x20>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	461a      	mov	r2, r3
 8006852:	4b06      	ldr	r3, [pc, #24]	; (800686c <HAL_IncTick+0x24>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4413      	add	r3, r2
 8006858:	4a04      	ldr	r2, [pc, #16]	; (800686c <HAL_IncTick+0x24>)
 800685a:	6013      	str	r3, [r2, #0]
}
 800685c:	bf00      	nop
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	200004b8 	.word	0x200004b8
 800686c:	20006588 	.word	0x20006588

08006870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006870:	b480      	push	{r7}
 8006872:	af00      	add	r7, sp, #0
  return uwTick;
 8006874:	4b03      	ldr	r3, [pc, #12]	; (8006884 <HAL_GetTick+0x14>)
 8006876:	681b      	ldr	r3, [r3, #0]
}
 8006878:	4618      	mov	r0, r3
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	20006588 	.word	0x20006588

08006888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006890:	f7ff ffee 	bl	8006870 <HAL_GetTick>
 8006894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a0:	d005      	beq.n	80068ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80068a2:	4b0a      	ldr	r3, [pc, #40]	; (80068cc <HAL_Delay+0x44>)
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	461a      	mov	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	4413      	add	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80068ae:	bf00      	nop
 80068b0:	f7ff ffde 	bl	8006870 <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d8f7      	bhi.n	80068b0 <HAL_Delay+0x28>
  {
  }
}
 80068c0:	bf00      	nop
 80068c2:	bf00      	nop
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	200004b8 	.word	0x200004b8

080068d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068d8:	2300      	movs	r3, #0
 80068da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e031      	b.n	800694a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d109      	bne.n	8006902 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7fd fc1c 	bl	800412c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	f003 0310 	and.w	r3, r3, #16
 800690a:	2b00      	cmp	r3, #0
 800690c:	d116      	bne.n	800693c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006912:	4b10      	ldr	r3, [pc, #64]	; (8006954 <HAL_ADC_Init+0x84>)
 8006914:	4013      	ands	r3, r2
 8006916:	f043 0202 	orr.w	r2, r3, #2
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 fa9e 	bl	8006e60 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692e:	f023 0303 	bic.w	r3, r3, #3
 8006932:	f043 0201 	orr.w	r2, r3, #1
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	641a      	str	r2, [r3, #64]	; 0x40
 800693a:	e001      	b.n	8006940 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006948:	7bfb      	ldrb	r3, [r7, #15]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	ffffeefd 	.word	0xffffeefd

08006958 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8006960:	2300      	movs	r3, #0
 8006962:	617b      	str	r3, [r7, #20]
 8006964:	2300      	movs	r3, #0
 8006966:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f003 0320 	and.w	r3, r3, #32
 8006986:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d049      	beq.n	8006a22 <HAL_ADC_IRQHandler+0xca>
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d046      	beq.n	8006a22 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006998:	f003 0310 	and.w	r3, r3, #16
 800699c:	2b00      	cmp	r3, #0
 800699e:	d105      	bne.n	80069ac <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d12b      	bne.n	8006a12 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d127      	bne.n	8006a12 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d006      	beq.n	80069de <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d119      	bne.n	8006a12 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f022 0220 	bic.w	r2, r2, #32
 80069ec:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d105      	bne.n	8006a12 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	f043 0201 	orr.w	r2, r3, #1
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f8b0 	bl	8006b78 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f06f 0212 	mvn.w	r2, #18
 8006a20:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f003 0304 	and.w	r3, r3, #4
 8006a28:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a30:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d057      	beq.n	8006ae8 <HAL_ADC_IRQHandler+0x190>
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d054      	beq.n	8006ae8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a42:	f003 0310 	and.w	r3, r3, #16
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d105      	bne.n	8006a56 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d139      	bne.n	8006ad8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d006      	beq.n	8006a80 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d12b      	bne.n	8006ad8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d124      	bne.n	8006ad8 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d11d      	bne.n	8006ad8 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d119      	bne.n	8006ad8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ab2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d105      	bne.n	8006ad8 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad0:	f043 0201 	orr.w	r2, r3, #1
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 fabb 	bl	8007054 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f06f 020c 	mvn.w	r2, #12
 8006ae6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d017      	beq.n	8006b2e <HAL_ADC_IRQHandler+0x1d6>
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d014      	beq.n	8006b2e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d10d      	bne.n	8006b2e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f834 	bl	8006b8c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f06f 0201 	mvn.w	r2, #1
 8006b2c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f003 0320 	and.w	r3, r3, #32
 8006b34:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b3c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d015      	beq.n	8006b70 <HAL_ADC_IRQHandler+0x218>
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d012      	beq.n	8006b70 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b4e:	f043 0202 	orr.w	r2, r3, #2
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f06f 0220 	mvn.w	r2, #32
 8006b5e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f81d 	bl	8006ba0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f06f 0220 	mvn.w	r2, #32
 8006b6e:	601a      	str	r2, [r3, #0]
  }
}
 8006b70:	bf00      	nop
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d101      	bne.n	8006bd0 <HAL_ADC_ConfigChannel+0x1c>
 8006bcc:	2302      	movs	r3, #2
 8006bce:	e136      	b.n	8006e3e <HAL_ADC_ConfigChannel+0x28a>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b09      	cmp	r3, #9
 8006bde:	d93a      	bls.n	8006c56 <HAL_ADC_ConfigChannel+0xa2>
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006be8:	d035      	beq.n	8006c56 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68d9      	ldr	r1, [r3, #12]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	005b      	lsls	r3, r3, #1
 8006bfc:	4413      	add	r3, r2
 8006bfe:	3b1e      	subs	r3, #30
 8006c00:	2207      	movs	r2, #7
 8006c02:	fa02 f303 	lsl.w	r3, r2, r3
 8006c06:	43da      	mvns	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	400a      	ands	r2, r1
 8006c0e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a8d      	ldr	r2, [pc, #564]	; (8006e4c <HAL_ADC_ConfigChannel+0x298>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d10a      	bne.n	8006c30 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68d9      	ldr	r1, [r3, #12]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	061a      	lsls	r2, r3, #24
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006c2e:	e035      	b.n	8006c9c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68d9      	ldr	r1, [r3, #12]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	689a      	ldr	r2, [r3, #8]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	4618      	mov	r0, r3
 8006c42:	4603      	mov	r3, r0
 8006c44:	005b      	lsls	r3, r3, #1
 8006c46:	4403      	add	r3, r0
 8006c48:	3b1e      	subs	r3, #30
 8006c4a:	409a      	lsls	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006c54:	e022      	b.n	8006c9c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	6919      	ldr	r1, [r3, #16]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	461a      	mov	r2, r3
 8006c64:	4613      	mov	r3, r2
 8006c66:	005b      	lsls	r3, r3, #1
 8006c68:	4413      	add	r3, r2
 8006c6a:	2207      	movs	r2, #7
 8006c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c70:	43da      	mvns	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	400a      	ands	r2, r1
 8006c78:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	6919      	ldr	r1, [r3, #16]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	689a      	ldr	r2, [r3, #8]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	005b      	lsls	r3, r3, #1
 8006c90:	4403      	add	r3, r0
 8006c92:	409a      	lsls	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	2b06      	cmp	r3, #6
 8006ca2:	d824      	bhi.n	8006cee <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	3b05      	subs	r3, #5
 8006cb6:	221f      	movs	r2, #31
 8006cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cbc:	43da      	mvns	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	400a      	ands	r2, r1
 8006cc4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	3b05      	subs	r3, #5
 8006ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	635a      	str	r2, [r3, #52]	; 0x34
 8006cec:	e04c      	b.n	8006d88 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	2b0c      	cmp	r3, #12
 8006cf4:	d824      	bhi.n	8006d40 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	4613      	mov	r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4413      	add	r3, r2
 8006d06:	3b23      	subs	r3, #35	; 0x23
 8006d08:	221f      	movs	r2, #31
 8006d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d0e:	43da      	mvns	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	400a      	ands	r2, r1
 8006d16:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	4618      	mov	r0, r3
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	685a      	ldr	r2, [r3, #4]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	3b23      	subs	r3, #35	; 0x23
 8006d32:	fa00 f203 	lsl.w	r2, r0, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	631a      	str	r2, [r3, #48]	; 0x30
 8006d3e:	e023      	b.n	8006d88 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	685a      	ldr	r2, [r3, #4]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4413      	add	r3, r2
 8006d50:	3b41      	subs	r3, #65	; 0x41
 8006d52:	221f      	movs	r2, #31
 8006d54:	fa02 f303 	lsl.w	r3, r2, r3
 8006d58:	43da      	mvns	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	400a      	ands	r2, r1
 8006d60:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	4618      	mov	r0, r3
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	4613      	mov	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	3b41      	subs	r3, #65	; 0x41
 8006d7c:	fa00 f203 	lsl.w	r2, r0, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	430a      	orrs	r2, r1
 8006d86:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a30      	ldr	r2, [pc, #192]	; (8006e50 <HAL_ADC_ConfigChannel+0x29c>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d10a      	bne.n	8006da8 <HAL_ADC_ConfigChannel+0x1f4>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d9a:	d105      	bne.n	8006da8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006d9c:	4b2d      	ldr	r3, [pc, #180]	; (8006e54 <HAL_ADC_ConfigChannel+0x2a0>)
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	4a2c      	ldr	r2, [pc, #176]	; (8006e54 <HAL_ADC_ConfigChannel+0x2a0>)
 8006da2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006da6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a28      	ldr	r2, [pc, #160]	; (8006e50 <HAL_ADC_ConfigChannel+0x29c>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d10f      	bne.n	8006dd2 <HAL_ADC_ConfigChannel+0x21e>
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b12      	cmp	r3, #18
 8006db8:	d10b      	bne.n	8006dd2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8006dba:	4b26      	ldr	r3, [pc, #152]	; (8006e54 <HAL_ADC_ConfigChannel+0x2a0>)
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	4a25      	ldr	r2, [pc, #148]	; (8006e54 <HAL_ADC_ConfigChannel+0x2a0>)
 8006dc0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006dc4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8006dc6:	4b23      	ldr	r3, [pc, #140]	; (8006e54 <HAL_ADC_ConfigChannel+0x2a0>)
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	4a22      	ldr	r2, [pc, #136]	; (8006e54 <HAL_ADC_ConfigChannel+0x2a0>)
 8006dcc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006dd0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a1e      	ldr	r2, [pc, #120]	; (8006e50 <HAL_ADC_ConfigChannel+0x29c>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d12b      	bne.n	8006e34 <HAL_ADC_ConfigChannel+0x280>
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a1a      	ldr	r2, [pc, #104]	; (8006e4c <HAL_ADC_ConfigChannel+0x298>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d003      	beq.n	8006dee <HAL_ADC_ConfigChannel+0x23a>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b11      	cmp	r3, #17
 8006dec:	d122      	bne.n	8006e34 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8006dee:	4b19      	ldr	r3, [pc, #100]	; (8006e54 <HAL_ADC_ConfigChannel+0x2a0>)
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	4a18      	ldr	r2, [pc, #96]	; (8006e54 <HAL_ADC_ConfigChannel+0x2a0>)
 8006df4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006df8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006dfa:	4b16      	ldr	r3, [pc, #88]	; (8006e54 <HAL_ADC_ConfigChannel+0x2a0>)
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	4a15      	ldr	r2, [pc, #84]	; (8006e54 <HAL_ADC_ConfigChannel+0x2a0>)
 8006e00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006e04:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a10      	ldr	r2, [pc, #64]	; (8006e4c <HAL_ADC_ConfigChannel+0x298>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d111      	bne.n	8006e34 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006e10:	4b11      	ldr	r3, [pc, #68]	; (8006e58 <HAL_ADC_ConfigChannel+0x2a4>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a11      	ldr	r2, [pc, #68]	; (8006e5c <HAL_ADC_ConfigChannel+0x2a8>)
 8006e16:	fba2 2303 	umull	r2, r3, r2, r3
 8006e1a:	0c9a      	lsrs	r2, r3, #18
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	005b      	lsls	r3, r3, #1
 8006e24:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006e26:	e002      	b.n	8006e2e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1f9      	bne.n	8006e28 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	10000012 	.word	0x10000012
 8006e50:	40012000 	.word	0x40012000
 8006e54:	40012300 	.word	0x40012300
 8006e58:	200004b0 	.word	0x200004b0
 8006e5c:	431bde83 	.word	0x431bde83

08006e60 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006e68:	4b78      	ldr	r3, [pc, #480]	; (800704c <ADC_Init+0x1ec>)
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	4a77      	ldr	r2, [pc, #476]	; (800704c <ADC_Init+0x1ec>)
 8006e6e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006e72:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006e74:	4b75      	ldr	r3, [pc, #468]	; (800704c <ADC_Init+0x1ec>)
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	4973      	ldr	r1, [pc, #460]	; (800704c <ADC_Init+0x1ec>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	685a      	ldr	r2, [r3, #4]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6859      	ldr	r1, [r3, #4]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	021a      	lsls	r2, r3, #8
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006eb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	6859      	ldr	r1, [r3, #4]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	430a      	orrs	r2, r1
 8006ec6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689a      	ldr	r2, [r3, #8]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ed6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6899      	ldr	r1, [r3, #8]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68da      	ldr	r2, [r3, #12]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eee:	4a58      	ldr	r2, [pc, #352]	; (8007050 <ADC_Init+0x1f0>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d022      	beq.n	8006f3a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689a      	ldr	r2, [r3, #8]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006f02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6899      	ldr	r1, [r3, #8]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	430a      	orrs	r2, r1
 8006f14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689a      	ldr	r2, [r3, #8]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006f24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	6899      	ldr	r1, [r3, #8]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	430a      	orrs	r2, r1
 8006f36:	609a      	str	r2, [r3, #8]
 8006f38:	e00f      	b.n	8006f5a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	689a      	ldr	r2, [r3, #8]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006f48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006f58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	689a      	ldr	r2, [r3, #8]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f022 0202 	bic.w	r2, r2, #2
 8006f68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	6899      	ldr	r1, [r3, #8]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	005a      	lsls	r2, r3, #1
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d01b      	beq.n	8006fc0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	685a      	ldr	r2, [r3, #4]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006fa6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6859      	ldr	r1, [r3, #4]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	035a      	lsls	r2, r3, #13
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	605a      	str	r2, [r3, #4]
 8006fbe:	e007      	b.n	8006fd0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	685a      	ldr	r2, [r3, #4]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006fde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	69db      	ldr	r3, [r3, #28]
 8006fea:	3b01      	subs	r3, #1
 8006fec:	051a      	lsls	r2, r3, #20
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	689a      	ldr	r2, [r3, #8]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007004:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6899      	ldr	r1, [r3, #8]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007012:	025a      	lsls	r2, r3, #9
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	430a      	orrs	r2, r1
 800701a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	689a      	ldr	r2, [r3, #8]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800702a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6899      	ldr	r1, [r3, #8]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	029a      	lsls	r2, r3, #10
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	430a      	orrs	r2, r1
 800703e:	609a      	str	r2, [r3, #8]
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	40012300 	.word	0x40012300
 8007050:	0f000001 	.word	0x0f000001

08007054 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e0ed      	b.n	8007256 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d102      	bne.n	800708c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7fd f9e4 	bl	8004454 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f042 0201 	orr.w	r2, r2, #1
 800709a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800709c:	f7ff fbe8 	bl	8006870 <HAL_GetTick>
 80070a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80070a2:	e012      	b.n	80070ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80070a4:	f7ff fbe4 	bl	8006870 <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	2b0a      	cmp	r3, #10
 80070b0:	d90b      	bls.n	80070ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2205      	movs	r2, #5
 80070c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e0c5      	b.n	8007256 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d0e5      	beq.n	80070a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f022 0202 	bic.w	r2, r2, #2
 80070e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80070e8:	f7ff fbc2 	bl	8006870 <HAL_GetTick>
 80070ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80070ee:	e012      	b.n	8007116 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80070f0:	f7ff fbbe 	bl	8006870 <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	2b0a      	cmp	r3, #10
 80070fc:	d90b      	bls.n	8007116 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007102:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2205      	movs	r2, #5
 800710e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e09f      	b.n	8007256 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	f003 0302 	and.w	r3, r3, #2
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1e5      	bne.n	80070f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	7e1b      	ldrb	r3, [r3, #24]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d108      	bne.n	800713e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800713a:	601a      	str	r2, [r3, #0]
 800713c:	e007      	b.n	800714e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800714c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	7e5b      	ldrb	r3, [r3, #25]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d108      	bne.n	8007168 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007164:	601a      	str	r2, [r3, #0]
 8007166:	e007      	b.n	8007178 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007176:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	7e9b      	ldrb	r3, [r3, #26]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d108      	bne.n	8007192 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f042 0220 	orr.w	r2, r2, #32
 800718e:	601a      	str	r2, [r3, #0]
 8007190:	e007      	b.n	80071a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f022 0220 	bic.w	r2, r2, #32
 80071a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	7edb      	ldrb	r3, [r3, #27]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d108      	bne.n	80071bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f022 0210 	bic.w	r2, r2, #16
 80071b8:	601a      	str	r2, [r3, #0]
 80071ba:	e007      	b.n	80071cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f042 0210 	orr.w	r2, r2, #16
 80071ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	7f1b      	ldrb	r3, [r3, #28]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d108      	bne.n	80071e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f042 0208 	orr.w	r2, r2, #8
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	e007      	b.n	80071f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f022 0208 	bic.w	r2, r2, #8
 80071f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	7f5b      	ldrb	r3, [r3, #29]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d108      	bne.n	8007210 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f042 0204 	orr.w	r2, r2, #4
 800720c:	601a      	str	r2, [r3, #0]
 800720e:	e007      	b.n	8007220 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f022 0204 	bic.w	r2, r2, #4
 800721e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	689a      	ldr	r2, [r3, #8]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	431a      	orrs	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	431a      	orrs	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	ea42 0103 	orr.w	r1, r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	1e5a      	subs	r2, r3, #1
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	430a      	orrs	r2, r1
 8007244:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
	...

08007260 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8007260:	b480      	push	{r7}
 8007262:	b087      	sub	sp, #28
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007276:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007278:	7cfb      	ldrb	r3, [r7, #19]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d003      	beq.n	8007286 <HAL_CAN_ConfigFilter+0x26>
 800727e:	7cfb      	ldrb	r3, [r7, #19]
 8007280:	2b02      	cmp	r3, #2
 8007282:	f040 80c7 	bne.w	8007414 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a69      	ldr	r2, [pc, #420]	; (8007430 <HAL_CAN_ConfigFilter+0x1d0>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d001      	beq.n	8007294 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8007290:	4b68      	ldr	r3, [pc, #416]	; (8007434 <HAL_CAN_ConfigFilter+0x1d4>)
 8007292:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800729a:	f043 0201 	orr.w	r2, r3, #1
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	4a63      	ldr	r2, [pc, #396]	; (8007434 <HAL_CAN_ConfigFilter+0x1d4>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d111      	bne.n	80072d0 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80072b2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c6:	021b      	lsls	r3, r3, #8
 80072c8:	431a      	orrs	r2, r3
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	f003 031f 	and.w	r3, r3, #31
 80072d8:	2201      	movs	r2, #1
 80072da:	fa02 f303 	lsl.w	r3, r2, r3
 80072de:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	43db      	mvns	r3, r3
 80072ea:	401a      	ands	r2, r3
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	69db      	ldr	r3, [r3, #28]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d123      	bne.n	8007342 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	43db      	mvns	r3, r3
 8007304:	401a      	ands	r2, r3
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007318:	683a      	ldr	r2, [r7, #0]
 800731a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800731c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	3248      	adds	r2, #72	; 0x48
 8007322:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007336:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007338:	6979      	ldr	r1, [r7, #20]
 800733a:	3348      	adds	r3, #72	; 0x48
 800733c:	00db      	lsls	r3, r3, #3
 800733e:	440b      	add	r3, r1
 8007340:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d122      	bne.n	8007390 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	431a      	orrs	r2, r3
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800736a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	3248      	adds	r2, #72	; 0x48
 8007370:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007384:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007386:	6979      	ldr	r1, [r7, #20]
 8007388:	3348      	adds	r3, #72	; 0x48
 800738a:	00db      	lsls	r3, r3, #3
 800738c:	440b      	add	r3, r1
 800738e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d109      	bne.n	80073ac <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	43db      	mvns	r3, r3
 80073a2:	401a      	ands	r2, r3
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80073aa:	e007      	b.n	80073bc <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	431a      	orrs	r2, r3
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d109      	bne.n	80073d8 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	43db      	mvns	r3, r3
 80073ce:	401a      	ands	r2, r3
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80073d6:	e007      	b.n	80073e8 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	431a      	orrs	r2, r3
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d107      	bne.n	8007400 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	431a      	orrs	r2, r3
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007406:	f023 0201 	bic.w	r2, r3, #1
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8007410:	2300      	movs	r3, #0
 8007412:	e006      	b.n	8007422 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007418:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
  }
}
 8007422:	4618      	mov	r0, r3
 8007424:	371c      	adds	r7, #28
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	40003400 	.word	0x40003400
 8007434:	40006400 	.word	0x40006400

08007438 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007446:	b2db      	uxtb	r3, r3
 8007448:	2b01      	cmp	r3, #1
 800744a:	d12e      	bne.n	80074aa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 0201 	bic.w	r2, r2, #1
 8007462:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007464:	f7ff fa04 	bl	8006870 <HAL_GetTick>
 8007468:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800746a:	e012      	b.n	8007492 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800746c:	f7ff fa00 	bl	8006870 <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	2b0a      	cmp	r3, #10
 8007478:	d90b      	bls.n	8007492 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2205      	movs	r2, #5
 800748a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e012      	b.n	80074b8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	f003 0301 	and.w	r3, r3, #1
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1e5      	bne.n	800746c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	e006      	b.n	80074b8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
  }
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80074c0:	b480      	push	{r7}
 80074c2:	b087      	sub	sp, #28
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	607a      	str	r2, [r7, #4]
 80074cc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80074d4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80074d6:	7dfb      	ldrb	r3, [r7, #23]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d003      	beq.n	80074e4 <HAL_CAN_GetRxMessage+0x24>
 80074dc:	7dfb      	ldrb	r3, [r7, #23]
 80074de:	2b02      	cmp	r3, #2
 80074e0:	f040 80f3 	bne.w	80076ca <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d10e      	bne.n	8007508 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	f003 0303 	and.w	r3, r3, #3
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d116      	bne.n	8007526 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e0e7      	b.n	80076d8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	f003 0303 	and.w	r3, r3, #3
 8007512:	2b00      	cmp	r3, #0
 8007514:	d107      	bne.n	8007526 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e0d8      	b.n	80076d8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	331b      	adds	r3, #27
 800752e:	011b      	lsls	r3, r3, #4
 8007530:	4413      	add	r3, r2
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0204 	and.w	r2, r3, #4
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10c      	bne.n	800755e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	331b      	adds	r3, #27
 800754c:	011b      	lsls	r3, r3, #4
 800754e:	4413      	add	r3, r2
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	0d5b      	lsrs	r3, r3, #21
 8007554:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	e00b      	b.n	8007576 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	331b      	adds	r3, #27
 8007566:	011b      	lsls	r3, r3, #4
 8007568:	4413      	add	r3, r2
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	08db      	lsrs	r3, r3, #3
 800756e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	331b      	adds	r3, #27
 800757e:	011b      	lsls	r3, r3, #4
 8007580:	4413      	add	r3, r2
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 0202 	and.w	r2, r3, #2
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	331b      	adds	r3, #27
 8007594:	011b      	lsls	r3, r3, #4
 8007596:	4413      	add	r3, r2
 8007598:	3304      	adds	r3, #4
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 020f 	and.w	r2, r3, #15
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	331b      	adds	r3, #27
 80075ac:	011b      	lsls	r3, r3, #4
 80075ae:	4413      	add	r3, r2
 80075b0:	3304      	adds	r3, #4
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	0a1b      	lsrs	r3, r3, #8
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	331b      	adds	r3, #27
 80075c4:	011b      	lsls	r3, r3, #4
 80075c6:	4413      	add	r3, r2
 80075c8:	3304      	adds	r3, #4
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	0c1b      	lsrs	r3, r3, #16
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	011b      	lsls	r3, r3, #4
 80075dc:	4413      	add	r3, r2
 80075de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	011b      	lsls	r3, r3, #4
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	0a1a      	lsrs	r2, r3, #8
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	3301      	adds	r3, #1
 8007600:	b2d2      	uxtb	r2, r2
 8007602:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	011b      	lsls	r3, r3, #4
 800760c:	4413      	add	r3, r2
 800760e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	0c1a      	lsrs	r2, r3, #16
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	3302      	adds	r3, #2
 800761a:	b2d2      	uxtb	r2, r2
 800761c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	011b      	lsls	r3, r3, #4
 8007626:	4413      	add	r3, r2
 8007628:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	0e1a      	lsrs	r2, r3, #24
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	3303      	adds	r3, #3
 8007634:	b2d2      	uxtb	r2, r2
 8007636:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	011b      	lsls	r3, r3, #4
 8007640:	4413      	add	r3, r2
 8007642:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	3304      	adds	r3, #4
 800764c:	b2d2      	uxtb	r2, r2
 800764e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	011b      	lsls	r3, r3, #4
 8007658:	4413      	add	r3, r2
 800765a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	0a1a      	lsrs	r2, r3, #8
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	3305      	adds	r3, #5
 8007666:	b2d2      	uxtb	r2, r2
 8007668:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	011b      	lsls	r3, r3, #4
 8007672:	4413      	add	r3, r2
 8007674:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	0c1a      	lsrs	r2, r3, #16
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	3306      	adds	r3, #6
 8007680:	b2d2      	uxtb	r2, r2
 8007682:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	011b      	lsls	r3, r3, #4
 800768c:	4413      	add	r3, r2
 800768e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	0e1a      	lsrs	r2, r3, #24
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	3307      	adds	r3, #7
 800769a:	b2d2      	uxtb	r2, r2
 800769c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d108      	bne.n	80076b6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68da      	ldr	r2, [r3, #12]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f042 0220 	orr.w	r2, r2, #32
 80076b2:	60da      	str	r2, [r3, #12]
 80076b4:	e007      	b.n	80076c6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	691a      	ldr	r2, [r3, #16]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f042 0220 	orr.w	r2, r2, #32
 80076c4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80076c6:	2300      	movs	r3, #0
 80076c8:	e006      	b.n	80076d8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
  }
}
 80076d8:	4618      	mov	r0, r3
 80076da:	371c      	adds	r7, #28
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80076f4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80076f6:	7bfb      	ldrb	r3, [r7, #15]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d002      	beq.n	8007702 <HAL_CAN_ActivateNotification+0x1e>
 80076fc:	7bfb      	ldrb	r3, [r7, #15]
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d109      	bne.n	8007716 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	6959      	ldr	r1, [r3, #20]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	683a      	ldr	r2, [r7, #0]
 800770e:	430a      	orrs	r2, r1
 8007710:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	e006      	b.n	8007724 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
  }
}
 8007724:	4618      	mov	r0, r3
 8007726:	3714      	adds	r7, #20
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b08a      	sub	sp, #40	; 0x28
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007738:	2300      	movs	r3, #0
 800773a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800776c:	6a3b      	ldr	r3, [r7, #32]
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	2b00      	cmp	r3, #0
 8007774:	d07c      	beq.n	8007870 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	f003 0301 	and.w	r3, r3, #1
 800777c:	2b00      	cmp	r3, #0
 800777e:	d023      	beq.n	80077c8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2201      	movs	r2, #1
 8007786:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	f003 0302 	and.w	r3, r3, #2
 800778e:	2b00      	cmp	r3, #0
 8007790:	d003      	beq.n	800779a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f983 	bl	8007a9e <HAL_CAN_TxMailbox0CompleteCallback>
 8007798:	e016      	b.n	80077c8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	f003 0304 	and.w	r3, r3, #4
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d004      	beq.n	80077ae <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80077a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80077aa:	627b      	str	r3, [r7, #36]	; 0x24
 80077ac:	e00c      	b.n	80077c8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	f003 0308 	and.w	r3, r3, #8
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d004      	beq.n	80077c2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80077b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80077be:	627b      	str	r3, [r7, #36]	; 0x24
 80077c0:	e002      	b.n	80077c8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f989 	bl	8007ada <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d024      	beq.n	800781c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d003      	beq.n	80077ee <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f963 	bl	8007ab2 <HAL_CAN_TxMailbox1CompleteCallback>
 80077ec:	e016      	b.n	800781c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d004      	beq.n	8007802 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80077fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007800:	e00c      	b.n	800781c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007808:	2b00      	cmp	r3, #0
 800780a:	d004      	beq.n	8007816 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800780c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007812:	627b      	str	r3, [r7, #36]	; 0x24
 8007814:	e002      	b.n	800781c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f969 	bl	8007aee <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d024      	beq.n	8007870 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800782e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d003      	beq.n	8007842 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f943 	bl	8007ac6 <HAL_CAN_TxMailbox2CompleteCallback>
 8007840:	e016      	b.n	8007870 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d004      	beq.n	8007856 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007852:	627b      	str	r3, [r7, #36]	; 0x24
 8007854:	e00c      	b.n	8007870 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800785c:	2b00      	cmp	r3, #0
 800785e:	d004      	beq.n	800786a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007866:	627b      	str	r3, [r7, #36]	; 0x24
 8007868:	e002      	b.n	8007870 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f949 	bl	8007b02 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007870:	6a3b      	ldr	r3, [r7, #32]
 8007872:	f003 0308 	and.w	r3, r3, #8
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00c      	beq.n	8007894 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	f003 0310 	and.w	r3, r3, #16
 8007880:	2b00      	cmp	r3, #0
 8007882:	d007      	beq.n	8007894 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007886:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800788a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2210      	movs	r2, #16
 8007892:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007894:	6a3b      	ldr	r3, [r7, #32]
 8007896:	f003 0304 	and.w	r3, r3, #4
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00b      	beq.n	80078b6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	f003 0308 	and.w	r3, r3, #8
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d006      	beq.n	80078b6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2208      	movs	r2, #8
 80078ae:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f930 	bl	8007b16 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80078b6:	6a3b      	ldr	r3, [r7, #32]
 80078b8:	f003 0302 	and.w	r3, r3, #2
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d009      	beq.n	80078d4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	f003 0303 	and.w	r3, r3, #3
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d002      	beq.n	80078d4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7fc fe72 	bl	80045b8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80078d4:	6a3b      	ldr	r3, [r7, #32]
 80078d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00c      	beq.n	80078f8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	f003 0310 	and.w	r3, r3, #16
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d007      	beq.n	80078f8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80078e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80078ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2210      	movs	r2, #16
 80078f6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80078f8:	6a3b      	ldr	r3, [r7, #32]
 80078fa:	f003 0320 	and.w	r3, r3, #32
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00b      	beq.n	800791a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	f003 0308 	and.w	r3, r3, #8
 8007908:	2b00      	cmp	r3, #0
 800790a:	d006      	beq.n	800791a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2208      	movs	r2, #8
 8007912:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f912 	bl	8007b3e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800791a:	6a3b      	ldr	r3, [r7, #32]
 800791c:	f003 0310 	and.w	r3, r3, #16
 8007920:	2b00      	cmp	r3, #0
 8007922:	d009      	beq.n	8007938 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	f003 0303 	and.w	r3, r3, #3
 800792e:	2b00      	cmp	r3, #0
 8007930:	d002      	beq.n	8007938 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f8f9 	bl	8007b2a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00b      	beq.n	800795a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	f003 0310 	and.w	r3, r3, #16
 8007948:	2b00      	cmp	r3, #0
 800794a:	d006      	beq.n	800795a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2210      	movs	r2, #16
 8007952:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f8fc 	bl	8007b52 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800795a:	6a3b      	ldr	r3, [r7, #32]
 800795c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00b      	beq.n	800797c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	f003 0308 	and.w	r3, r3, #8
 800796a:	2b00      	cmp	r3, #0
 800796c:	d006      	beq.n	800797c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2208      	movs	r2, #8
 8007974:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f8f5 	bl	8007b66 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800797c:	6a3b      	ldr	r3, [r7, #32]
 800797e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007982:	2b00      	cmp	r3, #0
 8007984:	d07b      	beq.n	8007a7e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	f003 0304 	and.w	r3, r3, #4
 800798c:	2b00      	cmp	r3, #0
 800798e:	d072      	beq.n	8007a76 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007990:	6a3b      	ldr	r3, [r7, #32]
 8007992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007996:	2b00      	cmp	r3, #0
 8007998:	d008      	beq.n	80079ac <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d003      	beq.n	80079ac <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80079a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a6:	f043 0301 	orr.w	r3, r3, #1
 80079aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80079ac:	6a3b      	ldr	r3, [r7, #32]
 80079ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d008      	beq.n	80079c8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d003      	beq.n	80079c8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	f043 0302 	orr.w	r3, r3, #2
 80079c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80079c8:	6a3b      	ldr	r3, [r7, #32]
 80079ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d008      	beq.n	80079e4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d003      	beq.n	80079e4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80079dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079de:	f043 0304 	orr.w	r3, r3, #4
 80079e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80079e4:	6a3b      	ldr	r3, [r7, #32]
 80079e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d043      	beq.n	8007a76 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d03e      	beq.n	8007a76 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079fe:	2b60      	cmp	r3, #96	; 0x60
 8007a00:	d02b      	beq.n	8007a5a <HAL_CAN_IRQHandler+0x32a>
 8007a02:	2b60      	cmp	r3, #96	; 0x60
 8007a04:	d82e      	bhi.n	8007a64 <HAL_CAN_IRQHandler+0x334>
 8007a06:	2b50      	cmp	r3, #80	; 0x50
 8007a08:	d022      	beq.n	8007a50 <HAL_CAN_IRQHandler+0x320>
 8007a0a:	2b50      	cmp	r3, #80	; 0x50
 8007a0c:	d82a      	bhi.n	8007a64 <HAL_CAN_IRQHandler+0x334>
 8007a0e:	2b40      	cmp	r3, #64	; 0x40
 8007a10:	d019      	beq.n	8007a46 <HAL_CAN_IRQHandler+0x316>
 8007a12:	2b40      	cmp	r3, #64	; 0x40
 8007a14:	d826      	bhi.n	8007a64 <HAL_CAN_IRQHandler+0x334>
 8007a16:	2b30      	cmp	r3, #48	; 0x30
 8007a18:	d010      	beq.n	8007a3c <HAL_CAN_IRQHandler+0x30c>
 8007a1a:	2b30      	cmp	r3, #48	; 0x30
 8007a1c:	d822      	bhi.n	8007a64 <HAL_CAN_IRQHandler+0x334>
 8007a1e:	2b10      	cmp	r3, #16
 8007a20:	d002      	beq.n	8007a28 <HAL_CAN_IRQHandler+0x2f8>
 8007a22:	2b20      	cmp	r3, #32
 8007a24:	d005      	beq.n	8007a32 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007a26:	e01d      	b.n	8007a64 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2a:	f043 0308 	orr.w	r3, r3, #8
 8007a2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007a30:	e019      	b.n	8007a66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a34:	f043 0310 	orr.w	r3, r3, #16
 8007a38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007a3a:	e014      	b.n	8007a66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3e:	f043 0320 	orr.w	r3, r3, #32
 8007a42:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007a44:	e00f      	b.n	8007a66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a4c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007a4e:	e00a      	b.n	8007a66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007a58:	e005      	b.n	8007a66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007a62:	e000      	b.n	8007a66 <HAL_CAN_IRQHandler+0x336>
            break;
 8007a64:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	699a      	ldr	r2, [r3, #24]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007a74:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2204      	movs	r2, #4
 8007a7c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d008      	beq.n	8007a96 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	431a      	orrs	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f872 	bl	8007b7a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007a96:	bf00      	nop
 8007a98:	3728      	adds	r7, #40	; 0x28
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b083      	sub	sp, #12
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007aa6:	bf00      	nop
 8007aa8:	370c      	adds	r7, #12
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	b083      	sub	sp, #12
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007aba:	bf00      	nop
 8007abc:	370c      	adds	r7, #12
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b083      	sub	sp, #12
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007ace:	bf00      	nop
 8007ad0:	370c      	adds	r7, #12
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b083      	sub	sp, #12
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007ae2:	bf00      	nop
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007aee:	b480      	push	{r7}
 8007af0:	b083      	sub	sp, #12
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007af6:	bf00      	nop
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b083      	sub	sp, #12
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007b0a:	bf00      	nop
 8007b0c:	370c      	adds	r7, #12
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr

08007b16 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b083      	sub	sp, #12
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007b1e:	bf00      	nop
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b083      	sub	sp, #12
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007b32:	bf00      	nop
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b083      	sub	sp, #12
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007b46:	bf00      	nop
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b083      	sub	sp, #12
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007b5a:	bf00      	nop
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b083      	sub	sp, #12
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007b6e:	bf00      	nop
 8007b70:	370c      	adds	r7, #12
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b083      	sub	sp, #12
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007b82:	bf00      	nop
 8007b84:	370c      	adds	r7, #12
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
	...

08007b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f003 0307 	and.w	r3, r3, #7
 8007b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007ba0:	4b0b      	ldr	r3, [pc, #44]	; (8007bd0 <__NVIC_SetPriorityGrouping+0x40>)
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007bac:	4013      	ands	r3, r2
 8007bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007bb8:	4b06      	ldr	r3, [pc, #24]	; (8007bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007bbe:	4a04      	ldr	r2, [pc, #16]	; (8007bd0 <__NVIC_SetPriorityGrouping+0x40>)
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	60d3      	str	r3, [r2, #12]
}
 8007bc4:	bf00      	nop
 8007bc6:	3714      	adds	r7, #20
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr
 8007bd0:	e000ed00 	.word	0xe000ed00
 8007bd4:	05fa0000 	.word	0x05fa0000

08007bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007bdc:	4b04      	ldr	r3, [pc, #16]	; (8007bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	0a1b      	lsrs	r3, r3, #8
 8007be2:	f003 0307 	and.w	r3, r3, #7
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr
 8007bf0:	e000ed00 	.word	0xe000ed00

08007bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	db0b      	blt.n	8007c1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c06:	79fb      	ldrb	r3, [r7, #7]
 8007c08:	f003 021f 	and.w	r2, r3, #31
 8007c0c:	4907      	ldr	r1, [pc, #28]	; (8007c2c <__NVIC_EnableIRQ+0x38>)
 8007c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c12:	095b      	lsrs	r3, r3, #5
 8007c14:	2001      	movs	r0, #1
 8007c16:	fa00 f202 	lsl.w	r2, r0, r2
 8007c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007c1e:	bf00      	nop
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	e000e100 	.word	0xe000e100

08007c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	4603      	mov	r3, r0
 8007c38:	6039      	str	r1, [r7, #0]
 8007c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	db0a      	blt.n	8007c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	b2da      	uxtb	r2, r3
 8007c48:	490c      	ldr	r1, [pc, #48]	; (8007c7c <__NVIC_SetPriority+0x4c>)
 8007c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c4e:	0112      	lsls	r2, r2, #4
 8007c50:	b2d2      	uxtb	r2, r2
 8007c52:	440b      	add	r3, r1
 8007c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007c58:	e00a      	b.n	8007c70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	b2da      	uxtb	r2, r3
 8007c5e:	4908      	ldr	r1, [pc, #32]	; (8007c80 <__NVIC_SetPriority+0x50>)
 8007c60:	79fb      	ldrb	r3, [r7, #7]
 8007c62:	f003 030f 	and.w	r3, r3, #15
 8007c66:	3b04      	subs	r3, #4
 8007c68:	0112      	lsls	r2, r2, #4
 8007c6a:	b2d2      	uxtb	r2, r2
 8007c6c:	440b      	add	r3, r1
 8007c6e:	761a      	strb	r2, [r3, #24]
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	e000e100 	.word	0xe000e100
 8007c80:	e000ed00 	.word	0xe000ed00

08007c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b089      	sub	sp, #36	; 0x24
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f003 0307 	and.w	r3, r3, #7
 8007c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	f1c3 0307 	rsb	r3, r3, #7
 8007c9e:	2b04      	cmp	r3, #4
 8007ca0:	bf28      	it	cs
 8007ca2:	2304      	movcs	r3, #4
 8007ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	3304      	adds	r3, #4
 8007caa:	2b06      	cmp	r3, #6
 8007cac:	d902      	bls.n	8007cb4 <NVIC_EncodePriority+0x30>
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	3b03      	subs	r3, #3
 8007cb2:	e000      	b.n	8007cb6 <NVIC_EncodePriority+0x32>
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc2:	43da      	mvns	r2, r3
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	401a      	ands	r2, r3
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8007cd6:	43d9      	mvns	r1, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007cdc:	4313      	orrs	r3, r2
         );
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3724      	adds	r7, #36	; 0x24
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
	...

08007cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007cfc:	d301      	bcc.n	8007d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e00f      	b.n	8007d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007d02:	4a0a      	ldr	r2, [pc, #40]	; (8007d2c <SysTick_Config+0x40>)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	3b01      	subs	r3, #1
 8007d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007d0a:	210f      	movs	r1, #15
 8007d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d10:	f7ff ff8e 	bl	8007c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007d14:	4b05      	ldr	r3, [pc, #20]	; (8007d2c <SysTick_Config+0x40>)
 8007d16:	2200      	movs	r2, #0
 8007d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007d1a:	4b04      	ldr	r3, [pc, #16]	; (8007d2c <SysTick_Config+0x40>)
 8007d1c:	2207      	movs	r2, #7
 8007d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	e000e010 	.word	0xe000e010

08007d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f7ff ff29 	bl	8007b90 <__NVIC_SetPriorityGrouping>
}
 8007d3e:	bf00      	nop
 8007d40:	3708      	adds	r7, #8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b086      	sub	sp, #24
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	60b9      	str	r1, [r7, #8]
 8007d50:	607a      	str	r2, [r7, #4]
 8007d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007d54:	2300      	movs	r3, #0
 8007d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007d58:	f7ff ff3e 	bl	8007bd8 <__NVIC_GetPriorityGrouping>
 8007d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	68b9      	ldr	r1, [r7, #8]
 8007d62:	6978      	ldr	r0, [r7, #20]
 8007d64:	f7ff ff8e 	bl	8007c84 <NVIC_EncodePriority>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d6e:	4611      	mov	r1, r2
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7ff ff5d 	bl	8007c30 <__NVIC_SetPriority>
}
 8007d76:	bf00      	nop
 8007d78:	3718      	adds	r7, #24
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b082      	sub	sp, #8
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	4603      	mov	r3, r0
 8007d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7ff ff31 	bl	8007bf4 <__NVIC_EnableIRQ>
}
 8007d92:	bf00      	nop
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b082      	sub	sp, #8
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f7ff ffa2 	bl	8007cec <SysTick_Config>
 8007da8:	4603      	mov	r3, r0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3708      	adds	r7, #8
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
	...

08007db4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007dc0:	f7fe fd56 	bl	8006870 <HAL_GetTick>
 8007dc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d101      	bne.n	8007dd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e099      	b.n	8007f04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f022 0201 	bic.w	r2, r2, #1
 8007dee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007df0:	e00f      	b.n	8007e12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007df2:	f7fe fd3d 	bl	8006870 <HAL_GetTick>
 8007df6:	4602      	mov	r2, r0
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	2b05      	cmp	r3, #5
 8007dfe:	d908      	bls.n	8007e12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2220      	movs	r2, #32
 8007e04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2203      	movs	r2, #3
 8007e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e078      	b.n	8007f04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 0301 	and.w	r3, r3, #1
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1e8      	bne.n	8007df2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007e28:	697a      	ldr	r2, [r7, #20]
 8007e2a:	4b38      	ldr	r3, [pc, #224]	; (8007f0c <HAL_DMA_Init+0x158>)
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	685a      	ldr	r2, [r3, #4]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007e3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a1b      	ldr	r3, [r3, #32]
 8007e5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e68:	2b04      	cmp	r3, #4
 8007e6a:	d107      	bne.n	8007e7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e74:	4313      	orrs	r3, r2
 8007e76:	697a      	ldr	r2, [r7, #20]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	f023 0307 	bic.w	r3, r3, #7
 8007e92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea2:	2b04      	cmp	r3, #4
 8007ea4:	d117      	bne.n	8007ed6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00e      	beq.n	8007ed6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fb15 	bl	80084e8 <DMA_CheckFifoParam>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d008      	beq.n	8007ed6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2240      	movs	r2, #64	; 0x40
 8007ec8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e016      	b.n	8007f04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 facc 	bl	800847c <DMA_CalcBaseAndBitshift>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eec:	223f      	movs	r2, #63	; 0x3f
 8007eee:	409a      	lsls	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2201      	movs	r2, #1
 8007efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3718      	adds	r7, #24
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	e010803f 	.word	0xe010803f

08007f10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
 8007f1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d101      	bne.n	8007f36 <HAL_DMA_Start_IT+0x26>
 8007f32:	2302      	movs	r3, #2
 8007f34:	e048      	b.n	8007fc8 <HAL_DMA_Start_IT+0xb8>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d137      	bne.n	8007fba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2202      	movs	r2, #2
 8007f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	68b9      	ldr	r1, [r7, #8]
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f000 fa5e 	bl	8008420 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f68:	223f      	movs	r2, #63	; 0x3f
 8007f6a:	409a      	lsls	r2, r3
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f042 0216 	orr.w	r2, r2, #22
 8007f7e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	695a      	ldr	r2, [r3, #20]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007f8e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d007      	beq.n	8007fa8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f042 0208 	orr.w	r2, r2, #8
 8007fa6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f042 0201 	orr.w	r2, r2, #1
 8007fb6:	601a      	str	r2, [r3, #0]
 8007fb8:	e005      	b.n	8007fc6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3718      	adds	r7, #24
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fdc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007fde:	f7fe fc47 	bl	8006870 <HAL_GetTick>
 8007fe2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b02      	cmp	r3, #2
 8007fee:	d008      	beq.n	8008002 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2280      	movs	r2, #128	; 0x80
 8007ff4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e052      	b.n	80080a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f022 0216 	bic.w	r2, r2, #22
 8008010:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	695a      	ldr	r2, [r3, #20]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008020:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008026:	2b00      	cmp	r3, #0
 8008028:	d103      	bne.n	8008032 <HAL_DMA_Abort+0x62>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800802e:	2b00      	cmp	r3, #0
 8008030:	d007      	beq.n	8008042 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f022 0208 	bic.w	r2, r2, #8
 8008040:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f022 0201 	bic.w	r2, r2, #1
 8008050:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008052:	e013      	b.n	800807c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008054:	f7fe fc0c 	bl	8006870 <HAL_GetTick>
 8008058:	4602      	mov	r2, r0
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	2b05      	cmp	r3, #5
 8008060:	d90c      	bls.n	800807c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2220      	movs	r2, #32
 8008066:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2203      	movs	r2, #3
 800806c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8008078:	2303      	movs	r3, #3
 800807a:	e015      	b.n	80080a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 0301 	and.w	r3, r3, #1
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1e4      	bne.n	8008054 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800808e:	223f      	movs	r2, #63	; 0x3f
 8008090:	409a      	lsls	r2, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3710      	adds	r7, #16
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d004      	beq.n	80080ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2280      	movs	r2, #128	; 0x80
 80080c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e00c      	b.n	80080e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2205      	movs	r2, #5
 80080d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f022 0201 	bic.w	r2, r2, #1
 80080e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80080fc:	2300      	movs	r3, #0
 80080fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8008100:	4b8e      	ldr	r3, [pc, #568]	; (800833c <HAL_DMA_IRQHandler+0x248>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a8e      	ldr	r2, [pc, #568]	; (8008340 <HAL_DMA_IRQHandler+0x24c>)
 8008106:	fba2 2303 	umull	r2, r3, r2, r3
 800810a:	0a9b      	lsrs	r3, r3, #10
 800810c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008112:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800811e:	2208      	movs	r2, #8
 8008120:	409a      	lsls	r2, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	4013      	ands	r3, r2
 8008126:	2b00      	cmp	r3, #0
 8008128:	d01a      	beq.n	8008160 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 0304 	and.w	r3, r3, #4
 8008134:	2b00      	cmp	r3, #0
 8008136:	d013      	beq.n	8008160 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f022 0204 	bic.w	r2, r2, #4
 8008146:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800814c:	2208      	movs	r2, #8
 800814e:	409a      	lsls	r2, r3
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008158:	f043 0201 	orr.w	r2, r3, #1
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008164:	2201      	movs	r2, #1
 8008166:	409a      	lsls	r2, r3
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	4013      	ands	r3, r2
 800816c:	2b00      	cmp	r3, #0
 800816e:	d012      	beq.n	8008196 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	695b      	ldr	r3, [r3, #20]
 8008176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00b      	beq.n	8008196 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008182:	2201      	movs	r2, #1
 8008184:	409a      	lsls	r2, r3
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800818e:	f043 0202 	orr.w	r2, r3, #2
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800819a:	2204      	movs	r2, #4
 800819c:	409a      	lsls	r2, r3
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	4013      	ands	r3, r2
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d012      	beq.n	80081cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 0302 	and.w	r3, r3, #2
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00b      	beq.n	80081cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081b8:	2204      	movs	r2, #4
 80081ba:	409a      	lsls	r2, r3
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081c4:	f043 0204 	orr.w	r2, r3, #4
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081d0:	2210      	movs	r2, #16
 80081d2:	409a      	lsls	r2, r3
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	4013      	ands	r3, r2
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d043      	beq.n	8008264 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0308 	and.w	r3, r3, #8
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d03c      	beq.n	8008264 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081ee:	2210      	movs	r2, #16
 80081f0:	409a      	lsls	r2, r3
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008200:	2b00      	cmp	r3, #0
 8008202:	d018      	beq.n	8008236 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800820e:	2b00      	cmp	r3, #0
 8008210:	d108      	bne.n	8008224 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008216:	2b00      	cmp	r3, #0
 8008218:	d024      	beq.n	8008264 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	4798      	blx	r3
 8008222:	e01f      	b.n	8008264 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008228:	2b00      	cmp	r3, #0
 800822a:	d01b      	beq.n	8008264 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	4798      	blx	r3
 8008234:	e016      	b.n	8008264 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008240:	2b00      	cmp	r3, #0
 8008242:	d107      	bne.n	8008254 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f022 0208 	bic.w	r2, r2, #8
 8008252:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008258:	2b00      	cmp	r3, #0
 800825a:	d003      	beq.n	8008264 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008268:	2220      	movs	r2, #32
 800826a:	409a      	lsls	r2, r3
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	4013      	ands	r3, r2
 8008270:	2b00      	cmp	r3, #0
 8008272:	f000 808f 	beq.w	8008394 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 0310 	and.w	r3, r3, #16
 8008280:	2b00      	cmp	r3, #0
 8008282:	f000 8087 	beq.w	8008394 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800828a:	2220      	movs	r2, #32
 800828c:	409a      	lsls	r2, r3
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008298:	b2db      	uxtb	r3, r3
 800829a:	2b05      	cmp	r3, #5
 800829c:	d136      	bne.n	800830c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f022 0216 	bic.w	r2, r2, #22
 80082ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	695a      	ldr	r2, [r3, #20]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d103      	bne.n	80082ce <HAL_DMA_IRQHandler+0x1da>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d007      	beq.n	80082de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f022 0208 	bic.w	r2, r2, #8
 80082dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082e2:	223f      	movs	r2, #63	; 0x3f
 80082e4:	409a      	lsls	r2, r3
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2201      	movs	r2, #1
 80082ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d07e      	beq.n	8008400 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	4798      	blx	r3
        }
        return;
 800830a:	e079      	b.n	8008400 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008316:	2b00      	cmp	r3, #0
 8008318:	d01d      	beq.n	8008356 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d10d      	bne.n	8008344 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800832c:	2b00      	cmp	r3, #0
 800832e:	d031      	beq.n	8008394 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	4798      	blx	r3
 8008338:	e02c      	b.n	8008394 <HAL_DMA_IRQHandler+0x2a0>
 800833a:	bf00      	nop
 800833c:	200004b0 	.word	0x200004b0
 8008340:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008348:	2b00      	cmp	r3, #0
 800834a:	d023      	beq.n	8008394 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	4798      	blx	r3
 8008354:	e01e      	b.n	8008394 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008360:	2b00      	cmp	r3, #0
 8008362:	d10f      	bne.n	8008384 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f022 0210 	bic.w	r2, r2, #16
 8008372:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008388:	2b00      	cmp	r3, #0
 800838a:	d003      	beq.n	8008394 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008398:	2b00      	cmp	r3, #0
 800839a:	d032      	beq.n	8008402 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083a0:	f003 0301 	and.w	r3, r3, #1
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d022      	beq.n	80083ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2205      	movs	r2, #5
 80083ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f022 0201 	bic.w	r2, r2, #1
 80083be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	3301      	adds	r3, #1
 80083c4:	60bb      	str	r3, [r7, #8]
 80083c6:	697a      	ldr	r2, [r7, #20]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d307      	bcc.n	80083dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 0301 	and.w	r3, r3, #1
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1f2      	bne.n	80083c0 <HAL_DMA_IRQHandler+0x2cc>
 80083da:	e000      	b.n	80083de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80083dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2201      	movs	r2, #1
 80083e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d005      	beq.n	8008402 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	4798      	blx	r3
 80083fe:	e000      	b.n	8008402 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008400:	bf00      	nop
    }
  }
}
 8008402:	3718      	adds	r7, #24
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008414:	4618      	mov	r0, r3
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]
 800842c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800843c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	2b40      	cmp	r3, #64	; 0x40
 800844c:	d108      	bne.n	8008460 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800845e:	e007      	b.n	8008470 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68ba      	ldr	r2, [r7, #8]
 8008466:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	60da      	str	r2, [r3, #12]
}
 8008470:	bf00      	nop
 8008472:	3714      	adds	r7, #20
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	b2db      	uxtb	r3, r3
 800848a:	3b10      	subs	r3, #16
 800848c:	4a13      	ldr	r2, [pc, #76]	; (80084dc <DMA_CalcBaseAndBitshift+0x60>)
 800848e:	fba2 2303 	umull	r2, r3, r2, r3
 8008492:	091b      	lsrs	r3, r3, #4
 8008494:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008496:	4a12      	ldr	r2, [pc, #72]	; (80084e0 <DMA_CalcBaseAndBitshift+0x64>)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	4413      	add	r3, r2
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	461a      	mov	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2b03      	cmp	r3, #3
 80084a8:	d908      	bls.n	80084bc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	461a      	mov	r2, r3
 80084b0:	4b0c      	ldr	r3, [pc, #48]	; (80084e4 <DMA_CalcBaseAndBitshift+0x68>)
 80084b2:	4013      	ands	r3, r2
 80084b4:	1d1a      	adds	r2, r3, #4
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	659a      	str	r2, [r3, #88]	; 0x58
 80084ba:	e006      	b.n	80084ca <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	461a      	mov	r2, r3
 80084c2:	4b08      	ldr	r3, [pc, #32]	; (80084e4 <DMA_CalcBaseAndBitshift+0x68>)
 80084c4:	4013      	ands	r3, r2
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3714      	adds	r7, #20
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	aaaaaaab 	.word	0xaaaaaaab
 80084e0:	08019468 	.word	0x08019468
 80084e4:	fffffc00 	.word	0xfffffc00

080084e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084f0:	2300      	movs	r3, #0
 80084f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d11f      	bne.n	8008542 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	2b03      	cmp	r3, #3
 8008506:	d856      	bhi.n	80085b6 <DMA_CheckFifoParam+0xce>
 8008508:	a201      	add	r2, pc, #4	; (adr r2, 8008510 <DMA_CheckFifoParam+0x28>)
 800850a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800850e:	bf00      	nop
 8008510:	08008521 	.word	0x08008521
 8008514:	08008533 	.word	0x08008533
 8008518:	08008521 	.word	0x08008521
 800851c:	080085b7 	.word	0x080085b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008524:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008528:	2b00      	cmp	r3, #0
 800852a:	d046      	beq.n	80085ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008530:	e043      	b.n	80085ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008536:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800853a:	d140      	bne.n	80085be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008540:	e03d      	b.n	80085be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	699b      	ldr	r3, [r3, #24]
 8008546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800854a:	d121      	bne.n	8008590 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	2b03      	cmp	r3, #3
 8008550:	d837      	bhi.n	80085c2 <DMA_CheckFifoParam+0xda>
 8008552:	a201      	add	r2, pc, #4	; (adr r2, 8008558 <DMA_CheckFifoParam+0x70>)
 8008554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008558:	08008569 	.word	0x08008569
 800855c:	0800856f 	.word	0x0800856f
 8008560:	08008569 	.word	0x08008569
 8008564:	08008581 	.word	0x08008581
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	73fb      	strb	r3, [r7, #15]
      break;
 800856c:	e030      	b.n	80085d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008572:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008576:	2b00      	cmp	r3, #0
 8008578:	d025      	beq.n	80085c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800857e:	e022      	b.n	80085c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008584:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008588:	d11f      	bne.n	80085ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800858e:	e01c      	b.n	80085ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	2b02      	cmp	r3, #2
 8008594:	d903      	bls.n	800859e <DMA_CheckFifoParam+0xb6>
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	2b03      	cmp	r3, #3
 800859a:	d003      	beq.n	80085a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800859c:	e018      	b.n	80085d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	73fb      	strb	r3, [r7, #15]
      break;
 80085a2:	e015      	b.n	80085d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00e      	beq.n	80085ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	73fb      	strb	r3, [r7, #15]
      break;
 80085b4:	e00b      	b.n	80085ce <DMA_CheckFifoParam+0xe6>
      break;
 80085b6:	bf00      	nop
 80085b8:	e00a      	b.n	80085d0 <DMA_CheckFifoParam+0xe8>
      break;
 80085ba:	bf00      	nop
 80085bc:	e008      	b.n	80085d0 <DMA_CheckFifoParam+0xe8>
      break;
 80085be:	bf00      	nop
 80085c0:	e006      	b.n	80085d0 <DMA_CheckFifoParam+0xe8>
      break;
 80085c2:	bf00      	nop
 80085c4:	e004      	b.n	80085d0 <DMA_CheckFifoParam+0xe8>
      break;
 80085c6:	bf00      	nop
 80085c8:	e002      	b.n	80085d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80085ca:	bf00      	nop
 80085cc:	e000      	b.n	80085d0 <DMA_CheckFifoParam+0xe8>
      break;
 80085ce:	bf00      	nop
    }
  } 
  
  return status; 
 80085d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3714      	adds	r7, #20
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop

080085e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b089      	sub	sp, #36	; 0x24
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80085ea:	2300      	movs	r3, #0
 80085ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80085ee:	2300      	movs	r3, #0
 80085f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80085f2:	2300      	movs	r3, #0
 80085f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80085f6:	2300      	movs	r3, #0
 80085f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80085fa:	2300      	movs	r3, #0
 80085fc:	61fb      	str	r3, [r7, #28]
 80085fe:	e175      	b.n	80088ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008600:	2201      	movs	r2, #1
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	fa02 f303 	lsl.w	r3, r2, r3
 8008608:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	697a      	ldr	r2, [r7, #20]
 8008610:	4013      	ands	r3, r2
 8008612:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008614:	693a      	ldr	r2, [r7, #16]
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	429a      	cmp	r2, r3
 800861a:	f040 8164 	bne.w	80088e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	f003 0303 	and.w	r3, r3, #3
 8008626:	2b01      	cmp	r3, #1
 8008628:	d005      	beq.n	8008636 <HAL_GPIO_Init+0x56>
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	f003 0303 	and.w	r3, r3, #3
 8008632:	2b02      	cmp	r3, #2
 8008634:	d130      	bne.n	8008698 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	005b      	lsls	r3, r3, #1
 8008640:	2203      	movs	r2, #3
 8008642:	fa02 f303 	lsl.w	r3, r2, r3
 8008646:	43db      	mvns	r3, r3
 8008648:	69ba      	ldr	r2, [r7, #24]
 800864a:	4013      	ands	r3, r2
 800864c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	68da      	ldr	r2, [r3, #12]
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	005b      	lsls	r3, r3, #1
 8008656:	fa02 f303 	lsl.w	r3, r2, r3
 800865a:	69ba      	ldr	r2, [r7, #24]
 800865c:	4313      	orrs	r3, r2
 800865e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	69ba      	ldr	r2, [r7, #24]
 8008664:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800866c:	2201      	movs	r2, #1
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	fa02 f303 	lsl.w	r3, r2, r3
 8008674:	43db      	mvns	r3, r3
 8008676:	69ba      	ldr	r2, [r7, #24]
 8008678:	4013      	ands	r3, r2
 800867a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	091b      	lsrs	r3, r3, #4
 8008682:	f003 0201 	and.w	r2, r3, #1
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	fa02 f303 	lsl.w	r3, r2, r3
 800868c:	69ba      	ldr	r2, [r7, #24]
 800868e:	4313      	orrs	r3, r2
 8008690:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	69ba      	ldr	r2, [r7, #24]
 8008696:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	f003 0303 	and.w	r3, r3, #3
 80086a0:	2b03      	cmp	r3, #3
 80086a2:	d017      	beq.n	80086d4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	005b      	lsls	r3, r3, #1
 80086ae:	2203      	movs	r2, #3
 80086b0:	fa02 f303 	lsl.w	r3, r2, r3
 80086b4:	43db      	mvns	r3, r3
 80086b6:	69ba      	ldr	r2, [r7, #24]
 80086b8:	4013      	ands	r3, r2
 80086ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	689a      	ldr	r2, [r3, #8]
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	005b      	lsls	r3, r3, #1
 80086c4:	fa02 f303 	lsl.w	r3, r2, r3
 80086c8:	69ba      	ldr	r2, [r7, #24]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	69ba      	ldr	r2, [r7, #24]
 80086d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	f003 0303 	and.w	r3, r3, #3
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d123      	bne.n	8008728 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	08da      	lsrs	r2, r3, #3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	3208      	adds	r2, #8
 80086e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	f003 0307 	and.w	r3, r3, #7
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	220f      	movs	r2, #15
 80086f8:	fa02 f303 	lsl.w	r3, r2, r3
 80086fc:	43db      	mvns	r3, r3
 80086fe:	69ba      	ldr	r2, [r7, #24]
 8008700:	4013      	ands	r3, r2
 8008702:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	691a      	ldr	r2, [r3, #16]
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	f003 0307 	and.w	r3, r3, #7
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	fa02 f303 	lsl.w	r3, r2, r3
 8008714:	69ba      	ldr	r2, [r7, #24]
 8008716:	4313      	orrs	r3, r2
 8008718:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	08da      	lsrs	r2, r3, #3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	3208      	adds	r2, #8
 8008722:	69b9      	ldr	r1, [r7, #24]
 8008724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	005b      	lsls	r3, r3, #1
 8008732:	2203      	movs	r2, #3
 8008734:	fa02 f303 	lsl.w	r3, r2, r3
 8008738:	43db      	mvns	r3, r3
 800873a:	69ba      	ldr	r2, [r7, #24]
 800873c:	4013      	ands	r3, r2
 800873e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	f003 0203 	and.w	r2, r3, #3
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	005b      	lsls	r3, r3, #1
 800874c:	fa02 f303 	lsl.w	r3, r2, r3
 8008750:	69ba      	ldr	r2, [r7, #24]
 8008752:	4313      	orrs	r3, r2
 8008754:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	69ba      	ldr	r2, [r7, #24]
 800875a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008764:	2b00      	cmp	r3, #0
 8008766:	f000 80be 	beq.w	80088e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800876a:	4b66      	ldr	r3, [pc, #408]	; (8008904 <HAL_GPIO_Init+0x324>)
 800876c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800876e:	4a65      	ldr	r2, [pc, #404]	; (8008904 <HAL_GPIO_Init+0x324>)
 8008770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008774:	6453      	str	r3, [r2, #68]	; 0x44
 8008776:	4b63      	ldr	r3, [pc, #396]	; (8008904 <HAL_GPIO_Init+0x324>)
 8008778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800877a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800877e:	60fb      	str	r3, [r7, #12]
 8008780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8008782:	4a61      	ldr	r2, [pc, #388]	; (8008908 <HAL_GPIO_Init+0x328>)
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	089b      	lsrs	r3, r3, #2
 8008788:	3302      	adds	r3, #2
 800878a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800878e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	f003 0303 	and.w	r3, r3, #3
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	220f      	movs	r2, #15
 800879a:	fa02 f303 	lsl.w	r3, r2, r3
 800879e:	43db      	mvns	r3, r3
 80087a0:	69ba      	ldr	r2, [r7, #24]
 80087a2:	4013      	ands	r3, r2
 80087a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a58      	ldr	r2, [pc, #352]	; (800890c <HAL_GPIO_Init+0x32c>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d037      	beq.n	800881e <HAL_GPIO_Init+0x23e>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a57      	ldr	r2, [pc, #348]	; (8008910 <HAL_GPIO_Init+0x330>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d031      	beq.n	800881a <HAL_GPIO_Init+0x23a>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4a56      	ldr	r2, [pc, #344]	; (8008914 <HAL_GPIO_Init+0x334>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d02b      	beq.n	8008816 <HAL_GPIO_Init+0x236>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4a55      	ldr	r2, [pc, #340]	; (8008918 <HAL_GPIO_Init+0x338>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d025      	beq.n	8008812 <HAL_GPIO_Init+0x232>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a54      	ldr	r2, [pc, #336]	; (800891c <HAL_GPIO_Init+0x33c>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d01f      	beq.n	800880e <HAL_GPIO_Init+0x22e>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a53      	ldr	r2, [pc, #332]	; (8008920 <HAL_GPIO_Init+0x340>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d019      	beq.n	800880a <HAL_GPIO_Init+0x22a>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a52      	ldr	r2, [pc, #328]	; (8008924 <HAL_GPIO_Init+0x344>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d013      	beq.n	8008806 <HAL_GPIO_Init+0x226>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a51      	ldr	r2, [pc, #324]	; (8008928 <HAL_GPIO_Init+0x348>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d00d      	beq.n	8008802 <HAL_GPIO_Init+0x222>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a50      	ldr	r2, [pc, #320]	; (800892c <HAL_GPIO_Init+0x34c>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d007      	beq.n	80087fe <HAL_GPIO_Init+0x21e>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a4f      	ldr	r2, [pc, #316]	; (8008930 <HAL_GPIO_Init+0x350>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d101      	bne.n	80087fa <HAL_GPIO_Init+0x21a>
 80087f6:	2309      	movs	r3, #9
 80087f8:	e012      	b.n	8008820 <HAL_GPIO_Init+0x240>
 80087fa:	230a      	movs	r3, #10
 80087fc:	e010      	b.n	8008820 <HAL_GPIO_Init+0x240>
 80087fe:	2308      	movs	r3, #8
 8008800:	e00e      	b.n	8008820 <HAL_GPIO_Init+0x240>
 8008802:	2307      	movs	r3, #7
 8008804:	e00c      	b.n	8008820 <HAL_GPIO_Init+0x240>
 8008806:	2306      	movs	r3, #6
 8008808:	e00a      	b.n	8008820 <HAL_GPIO_Init+0x240>
 800880a:	2305      	movs	r3, #5
 800880c:	e008      	b.n	8008820 <HAL_GPIO_Init+0x240>
 800880e:	2304      	movs	r3, #4
 8008810:	e006      	b.n	8008820 <HAL_GPIO_Init+0x240>
 8008812:	2303      	movs	r3, #3
 8008814:	e004      	b.n	8008820 <HAL_GPIO_Init+0x240>
 8008816:	2302      	movs	r3, #2
 8008818:	e002      	b.n	8008820 <HAL_GPIO_Init+0x240>
 800881a:	2301      	movs	r3, #1
 800881c:	e000      	b.n	8008820 <HAL_GPIO_Init+0x240>
 800881e:	2300      	movs	r3, #0
 8008820:	69fa      	ldr	r2, [r7, #28]
 8008822:	f002 0203 	and.w	r2, r2, #3
 8008826:	0092      	lsls	r2, r2, #2
 8008828:	4093      	lsls	r3, r2
 800882a:	69ba      	ldr	r2, [r7, #24]
 800882c:	4313      	orrs	r3, r2
 800882e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008830:	4935      	ldr	r1, [pc, #212]	; (8008908 <HAL_GPIO_Init+0x328>)
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	089b      	lsrs	r3, r3, #2
 8008836:	3302      	adds	r3, #2
 8008838:	69ba      	ldr	r2, [r7, #24]
 800883a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800883e:	4b3d      	ldr	r3, [pc, #244]	; (8008934 <HAL_GPIO_Init+0x354>)
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	43db      	mvns	r3, r3
 8008848:	69ba      	ldr	r2, [r7, #24]
 800884a:	4013      	ands	r3, r2
 800884c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008856:	2b00      	cmp	r3, #0
 8008858:	d003      	beq.n	8008862 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800885a:	69ba      	ldr	r2, [r7, #24]
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	4313      	orrs	r3, r2
 8008860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008862:	4a34      	ldr	r2, [pc, #208]	; (8008934 <HAL_GPIO_Init+0x354>)
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008868:	4b32      	ldr	r3, [pc, #200]	; (8008934 <HAL_GPIO_Init+0x354>)
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	43db      	mvns	r3, r3
 8008872:	69ba      	ldr	r2, [r7, #24]
 8008874:	4013      	ands	r3, r2
 8008876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008880:	2b00      	cmp	r3, #0
 8008882:	d003      	beq.n	800888c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008884:	69ba      	ldr	r2, [r7, #24]
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	4313      	orrs	r3, r2
 800888a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800888c:	4a29      	ldr	r2, [pc, #164]	; (8008934 <HAL_GPIO_Init+0x354>)
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008892:	4b28      	ldr	r3, [pc, #160]	; (8008934 <HAL_GPIO_Init+0x354>)
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	43db      	mvns	r3, r3
 800889c:	69ba      	ldr	r2, [r7, #24]
 800889e:	4013      	ands	r3, r2
 80088a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d003      	beq.n	80088b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80088ae:	69ba      	ldr	r2, [r7, #24]
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	4313      	orrs	r3, r2
 80088b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80088b6:	4a1f      	ldr	r2, [pc, #124]	; (8008934 <HAL_GPIO_Init+0x354>)
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80088bc:	4b1d      	ldr	r3, [pc, #116]	; (8008934 <HAL_GPIO_Init+0x354>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	43db      	mvns	r3, r3
 80088c6:	69ba      	ldr	r2, [r7, #24]
 80088c8:	4013      	ands	r3, r2
 80088ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d003      	beq.n	80088e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80088d8:	69ba      	ldr	r2, [r7, #24]
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	4313      	orrs	r3, r2
 80088de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80088e0:	4a14      	ldr	r2, [pc, #80]	; (8008934 <HAL_GPIO_Init+0x354>)
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	3301      	adds	r3, #1
 80088ea:	61fb      	str	r3, [r7, #28]
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	2b0f      	cmp	r3, #15
 80088f0:	f67f ae86 	bls.w	8008600 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80088f4:	bf00      	nop
 80088f6:	bf00      	nop
 80088f8:	3724      	adds	r7, #36	; 0x24
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	40023800 	.word	0x40023800
 8008908:	40013800 	.word	0x40013800
 800890c:	40020000 	.word	0x40020000
 8008910:	40020400 	.word	0x40020400
 8008914:	40020800 	.word	0x40020800
 8008918:	40020c00 	.word	0x40020c00
 800891c:	40021000 	.word	0x40021000
 8008920:	40021400 	.word	0x40021400
 8008924:	40021800 	.word	0x40021800
 8008928:	40021c00 	.word	0x40021c00
 800892c:	40022000 	.word	0x40022000
 8008930:	40022400 	.word	0x40022400
 8008934:	40013c00 	.word	0x40013c00

08008938 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d101      	bne.n	800894a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	e07f      	b.n	8008a4a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008950:	b2db      	uxtb	r3, r3
 8008952:	2b00      	cmp	r3, #0
 8008954:	d106      	bne.n	8008964 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f7fc f93e 	bl	8004be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2224      	movs	r2, #36	; 0x24
 8008968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f022 0201 	bic.w	r2, r2, #1
 800897a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	685a      	ldr	r2, [r3, #4]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008988:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	689a      	ldr	r2, [r3, #8]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008998:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d107      	bne.n	80089b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	689a      	ldr	r2, [r3, #8]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089ae:	609a      	str	r2, [r3, #8]
 80089b0:	e006      	b.n	80089c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	689a      	ldr	r2, [r3, #8]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80089be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d104      	bne.n	80089d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	6859      	ldr	r1, [r3, #4]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	4b1d      	ldr	r3, [pc, #116]	; (8008a54 <HAL_I2C_Init+0x11c>)
 80089de:	430b      	orrs	r3, r1
 80089e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	68da      	ldr	r2, [r3, #12]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80089f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	691a      	ldr	r2, [r3, #16]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	430a      	orrs	r2, r1
 8008a0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	69d9      	ldr	r1, [r3, #28]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6a1a      	ldr	r2, [r3, #32]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	430a      	orrs	r2, r1
 8008a1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f042 0201 	orr.w	r2, r2, #1
 8008a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2220      	movs	r2, #32
 8008a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3708      	adds	r7, #8
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	02008000 	.word	0x02008000

08008a58 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b088      	sub	sp, #32
 8008a5c:	af02      	add	r7, sp, #8
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	607a      	str	r2, [r7, #4]
 8008a62:	461a      	mov	r2, r3
 8008a64:	460b      	mov	r3, r1
 8008a66:	817b      	strh	r3, [r7, #10]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2b20      	cmp	r3, #32
 8008a76:	f040 80da 	bne.w	8008c2e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d101      	bne.n	8008a88 <HAL_I2C_Master_Transmit+0x30>
 8008a84:	2302      	movs	r3, #2
 8008a86:	e0d3      	b.n	8008c30 <HAL_I2C_Master_Transmit+0x1d8>
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008a90:	f7fd feee 	bl	8006870 <HAL_GetTick>
 8008a94:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	9300      	str	r3, [sp, #0]
 8008a9a:	2319      	movs	r3, #25
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f000 fdc4 	bl	8009630 <I2C_WaitOnFlagUntilTimeout>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d001      	beq.n	8008ab2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e0be      	b.n	8008c30 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2221      	movs	r2, #33	; 0x21
 8008ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2210      	movs	r2, #16
 8008abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	893a      	ldrh	r2, [r7, #8]
 8008ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	2bff      	cmp	r3, #255	; 0xff
 8008ae2:	d90e      	bls.n	8008b02 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	22ff      	movs	r2, #255	; 0xff
 8008ae8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008aee:	b2da      	uxtb	r2, r3
 8008af0:	8979      	ldrh	r1, [r7, #10]
 8008af2:	4b51      	ldr	r3, [pc, #324]	; (8008c38 <HAL_I2C_Master_Transmit+0x1e0>)
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f000 ffba 	bl	8009a74 <I2C_TransferConfig>
 8008b00:	e06c      	b.n	8008bdc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b10:	b2da      	uxtb	r2, r3
 8008b12:	8979      	ldrh	r1, [r7, #10]
 8008b14:	4b48      	ldr	r3, [pc, #288]	; (8008c38 <HAL_I2C_Master_Transmit+0x1e0>)
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f000 ffa9 	bl	8009a74 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008b22:	e05b      	b.n	8008bdc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b24:	697a      	ldr	r2, [r7, #20]
 8008b26:	6a39      	ldr	r1, [r7, #32]
 8008b28:	68f8      	ldr	r0, [r7, #12]
 8008b2a:	f000 fdc1 	bl	80096b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d001      	beq.n	8008b38 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	e07b      	b.n	8008c30 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3c:	781a      	ldrb	r2, [r3, #0]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b48:	1c5a      	adds	r2, r3, #1
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	3b01      	subs	r3, #1
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b60:	3b01      	subs	r3, #1
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d034      	beq.n	8008bdc <HAL_I2C_Master_Transmit+0x184>
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d130      	bne.n	8008bdc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	9300      	str	r3, [sp, #0]
 8008b7e:	6a3b      	ldr	r3, [r7, #32]
 8008b80:	2200      	movs	r2, #0
 8008b82:	2180      	movs	r1, #128	; 0x80
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	f000 fd53 	bl	8009630 <I2C_WaitOnFlagUntilTimeout>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d001      	beq.n	8008b94 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e04d      	b.n	8008c30 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	2bff      	cmp	r3, #255	; 0xff
 8008b9c:	d90e      	bls.n	8008bbc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	22ff      	movs	r2, #255	; 0xff
 8008ba2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ba8:	b2da      	uxtb	r2, r3
 8008baa:	8979      	ldrh	r1, [r7, #10]
 8008bac:	2300      	movs	r3, #0
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f000 ff5d 	bl	8009a74 <I2C_TransferConfig>
 8008bba:	e00f      	b.n	8008bdc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	8979      	ldrh	r1, [r7, #10]
 8008bce:	2300      	movs	r3, #0
 8008bd0:	9300      	str	r3, [sp, #0]
 8008bd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f000 ff4c 	bl	8009a74 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d19e      	bne.n	8008b24 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008be6:	697a      	ldr	r2, [r7, #20]
 8008be8:	6a39      	ldr	r1, [r7, #32]
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f000 fda0 	bl	8009730 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d001      	beq.n	8008bfa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e01a      	b.n	8008c30 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2220      	movs	r2, #32
 8008c00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	6859      	ldr	r1, [r3, #4]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	4b0b      	ldr	r3, [pc, #44]	; (8008c3c <HAL_I2C_Master_Transmit+0x1e4>)
 8008c0e:	400b      	ands	r3, r1
 8008c10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2220      	movs	r2, #32
 8008c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	e000      	b.n	8008c30 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8008c2e:	2302      	movs	r3, #2
  }
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3718      	adds	r7, #24
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	80002000 	.word	0x80002000
 8008c3c:	fe00e800 	.word	0xfe00e800

08008c40 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b088      	sub	sp, #32
 8008c44:	af02      	add	r7, sp, #8
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	607a      	str	r2, [r7, #4]
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	817b      	strh	r3, [r7, #10]
 8008c50:	4613      	mov	r3, r2
 8008c52:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	2b20      	cmp	r3, #32
 8008c5e:	f040 80db 	bne.w	8008e18 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d101      	bne.n	8008c70 <HAL_I2C_Master_Receive+0x30>
 8008c6c:	2302      	movs	r3, #2
 8008c6e:	e0d4      	b.n	8008e1a <HAL_I2C_Master_Receive+0x1da>
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2201      	movs	r2, #1
 8008c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008c78:	f7fd fdfa 	bl	8006870 <HAL_GetTick>
 8008c7c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	9300      	str	r3, [sp, #0]
 8008c82:	2319      	movs	r3, #25
 8008c84:	2201      	movs	r2, #1
 8008c86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f000 fcd0 	bl	8009630 <I2C_WaitOnFlagUntilTimeout>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d001      	beq.n	8008c9a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	e0bf      	b.n	8008e1a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2222      	movs	r2, #34	; 0x22
 8008c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2210      	movs	r2, #16
 8008ca6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2200      	movs	r2, #0
 8008cae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	893a      	ldrh	r2, [r7, #8]
 8008cba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	2bff      	cmp	r3, #255	; 0xff
 8008cca:	d90e      	bls.n	8008cea <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	22ff      	movs	r2, #255	; 0xff
 8008cd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cd6:	b2da      	uxtb	r2, r3
 8008cd8:	8979      	ldrh	r1, [r7, #10]
 8008cda:	4b52      	ldr	r3, [pc, #328]	; (8008e24 <HAL_I2C_Master_Receive+0x1e4>)
 8008cdc:	9300      	str	r3, [sp, #0]
 8008cde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ce2:	68f8      	ldr	r0, [r7, #12]
 8008ce4:	f000 fec6 	bl	8009a74 <I2C_TransferConfig>
 8008ce8:	e06d      	b.n	8008dc6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cf8:	b2da      	uxtb	r2, r3
 8008cfa:	8979      	ldrh	r1, [r7, #10]
 8008cfc:	4b49      	ldr	r3, [pc, #292]	; (8008e24 <HAL_I2C_Master_Receive+0x1e4>)
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d04:	68f8      	ldr	r0, [r7, #12]
 8008d06:	f000 feb5 	bl	8009a74 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8008d0a:	e05c      	b.n	8008dc6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d0c:	697a      	ldr	r2, [r7, #20]
 8008d0e:	6a39      	ldr	r1, [r7, #32]
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f000 fd49 	bl	80097a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d001      	beq.n	8008d20 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e07c      	b.n	8008e1a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2a:	b2d2      	uxtb	r2, r2
 8008d2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d32:	1c5a      	adds	r2, r3, #1
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d3c:	3b01      	subs	r3, #1
 8008d3e:	b29a      	uxth	r2, r3
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	b29a      	uxth	r2, r3
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d034      	beq.n	8008dc6 <HAL_I2C_Master_Receive+0x186>
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d130      	bne.n	8008dc6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	6a3b      	ldr	r3, [r7, #32]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	2180      	movs	r1, #128	; 0x80
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f000 fc5e 	bl	8009630 <I2C_WaitOnFlagUntilTimeout>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d001      	beq.n	8008d7e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e04d      	b.n	8008e1a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	2bff      	cmp	r3, #255	; 0xff
 8008d86:	d90e      	bls.n	8008da6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	22ff      	movs	r2, #255	; 0xff
 8008d8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d92:	b2da      	uxtb	r2, r3
 8008d94:	8979      	ldrh	r1, [r7, #10]
 8008d96:	2300      	movs	r3, #0
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d9e:	68f8      	ldr	r0, [r7, #12]
 8008da0:	f000 fe68 	bl	8009a74 <I2C_TransferConfig>
 8008da4:	e00f      	b.n	8008dc6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008daa:	b29a      	uxth	r2, r3
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008db4:	b2da      	uxtb	r2, r3
 8008db6:	8979      	ldrh	r1, [r7, #10]
 8008db8:	2300      	movs	r3, #0
 8008dba:	9300      	str	r3, [sp, #0]
 8008dbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f000 fe57 	bl	8009a74 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d19d      	bne.n	8008d0c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008dd0:	697a      	ldr	r2, [r7, #20]
 8008dd2:	6a39      	ldr	r1, [r7, #32]
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	f000 fcab 	bl	8009730 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d001      	beq.n	8008de4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	e01a      	b.n	8008e1a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2220      	movs	r2, #32
 8008dea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	6859      	ldr	r1, [r3, #4]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	4b0c      	ldr	r3, [pc, #48]	; (8008e28 <HAL_I2C_Master_Receive+0x1e8>)
 8008df8:	400b      	ands	r3, r1
 8008dfa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2220      	movs	r2, #32
 8008e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008e14:	2300      	movs	r3, #0
 8008e16:	e000      	b.n	8008e1a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008e18:	2302      	movs	r3, #2
  }
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3718      	adds	r7, #24
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	80002400 	.word	0x80002400
 8008e28:	fe00e800 	.word	0xfe00e800

08008e2c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b088      	sub	sp, #32
 8008e30:	af02      	add	r7, sp, #8
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	4608      	mov	r0, r1
 8008e36:	4611      	mov	r1, r2
 8008e38:	461a      	mov	r2, r3
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	817b      	strh	r3, [r7, #10]
 8008e3e:	460b      	mov	r3, r1
 8008e40:	813b      	strh	r3, [r7, #8]
 8008e42:	4613      	mov	r3, r2
 8008e44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	2b20      	cmp	r3, #32
 8008e50:	f040 80f9 	bne.w	8009046 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e54:	6a3b      	ldr	r3, [r7, #32]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d002      	beq.n	8008e60 <HAL_I2C_Mem_Write+0x34>
 8008e5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d105      	bne.n	8008e6c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e66:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e0ed      	b.n	8009048 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d101      	bne.n	8008e7a <HAL_I2C_Mem_Write+0x4e>
 8008e76:	2302      	movs	r3, #2
 8008e78:	e0e6      	b.n	8009048 <HAL_I2C_Mem_Write+0x21c>
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008e82:	f7fd fcf5 	bl	8006870 <HAL_GetTick>
 8008e86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	9300      	str	r3, [sp, #0]
 8008e8c:	2319      	movs	r3, #25
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008e94:	68f8      	ldr	r0, [r7, #12]
 8008e96:	f000 fbcb 	bl	8009630 <I2C_WaitOnFlagUntilTimeout>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d001      	beq.n	8008ea4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e0d1      	b.n	8009048 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2221      	movs	r2, #33	; 0x21
 8008ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2240      	movs	r2, #64	; 0x40
 8008eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6a3a      	ldr	r2, [r7, #32]
 8008ebe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008ecc:	88f8      	ldrh	r0, [r7, #6]
 8008ece:	893a      	ldrh	r2, [r7, #8]
 8008ed0:	8979      	ldrh	r1, [r7, #10]
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	9301      	str	r3, [sp, #4]
 8008ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed8:	9300      	str	r3, [sp, #0]
 8008eda:	4603      	mov	r3, r0
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f000 fadb 	bl	8009498 <I2C_RequestMemoryWrite>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d005      	beq.n	8008ef4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e0a9      	b.n	8009048 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	2bff      	cmp	r3, #255	; 0xff
 8008efc:	d90e      	bls.n	8008f1c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	22ff      	movs	r2, #255	; 0xff
 8008f02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f08:	b2da      	uxtb	r2, r3
 8008f0a:	8979      	ldrh	r1, [r7, #10]
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f14:	68f8      	ldr	r0, [r7, #12]
 8008f16:	f000 fdad 	bl	8009a74 <I2C_TransferConfig>
 8008f1a:	e00f      	b.n	8008f3c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f2a:	b2da      	uxtb	r2, r3
 8008f2c:	8979      	ldrh	r1, [r7, #10]
 8008f2e:	2300      	movs	r3, #0
 8008f30:	9300      	str	r3, [sp, #0]
 8008f32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f36:	68f8      	ldr	r0, [r7, #12]
 8008f38:	f000 fd9c 	bl	8009a74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f3c:	697a      	ldr	r2, [r7, #20]
 8008f3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f40:	68f8      	ldr	r0, [r7, #12]
 8008f42:	f000 fbb5 	bl	80096b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d001      	beq.n	8008f50 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e07b      	b.n	8009048 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f54:	781a      	ldrb	r2, [r3, #0]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f60:	1c5a      	adds	r2, r3, #1
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	b29a      	uxth	r2, r3
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	b29a      	uxth	r2, r3
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d034      	beq.n	8008ff4 <HAL_I2C_Mem_Write+0x1c8>
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d130      	bne.n	8008ff4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	9300      	str	r3, [sp, #0]
 8008f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f98:	2200      	movs	r2, #0
 8008f9a:	2180      	movs	r1, #128	; 0x80
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f000 fb47 	bl	8009630 <I2C_WaitOnFlagUntilTimeout>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d001      	beq.n	8008fac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	e04d      	b.n	8009048 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	2bff      	cmp	r3, #255	; 0xff
 8008fb4:	d90e      	bls.n	8008fd4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	22ff      	movs	r2, #255	; 0xff
 8008fba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	8979      	ldrh	r1, [r7, #10]
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f000 fd51 	bl	8009a74 <I2C_TransferConfig>
 8008fd2:	e00f      	b.n	8008ff4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fe2:	b2da      	uxtb	r2, r3
 8008fe4:	8979      	ldrh	r1, [r7, #10]
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	9300      	str	r3, [sp, #0]
 8008fea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	f000 fd40 	bl	8009a74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d19e      	bne.n	8008f3c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	f000 fb94 	bl	8009730 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d001      	beq.n	8009012 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	e01a      	b.n	8009048 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2220      	movs	r2, #32
 8009018:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	6859      	ldr	r1, [r3, #4]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	4b0a      	ldr	r3, [pc, #40]	; (8009050 <HAL_I2C_Mem_Write+0x224>)
 8009026:	400b      	ands	r3, r1
 8009028:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2220      	movs	r2, #32
 800902e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2200      	movs	r2, #0
 8009036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009042:	2300      	movs	r3, #0
 8009044:	e000      	b.n	8009048 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009046:	2302      	movs	r3, #2
  }
}
 8009048:	4618      	mov	r0, r3
 800904a:	3718      	adds	r7, #24
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	fe00e800 	.word	0xfe00e800

08009054 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b088      	sub	sp, #32
 8009058:	af02      	add	r7, sp, #8
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	4608      	mov	r0, r1
 800905e:	4611      	mov	r1, r2
 8009060:	461a      	mov	r2, r3
 8009062:	4603      	mov	r3, r0
 8009064:	817b      	strh	r3, [r7, #10]
 8009066:	460b      	mov	r3, r1
 8009068:	813b      	strh	r3, [r7, #8]
 800906a:	4613      	mov	r3, r2
 800906c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009074:	b2db      	uxtb	r3, r3
 8009076:	2b20      	cmp	r3, #32
 8009078:	f040 80fd 	bne.w	8009276 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800907c:	6a3b      	ldr	r3, [r7, #32]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d002      	beq.n	8009088 <HAL_I2C_Mem_Read+0x34>
 8009082:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009084:	2b00      	cmp	r3, #0
 8009086:	d105      	bne.n	8009094 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800908e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	e0f1      	b.n	8009278 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800909a:	2b01      	cmp	r3, #1
 800909c:	d101      	bne.n	80090a2 <HAL_I2C_Mem_Read+0x4e>
 800909e:	2302      	movs	r3, #2
 80090a0:	e0ea      	b.n	8009278 <HAL_I2C_Mem_Read+0x224>
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80090aa:	f7fd fbe1 	bl	8006870 <HAL_GetTick>
 80090ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	9300      	str	r3, [sp, #0]
 80090b4:	2319      	movs	r3, #25
 80090b6:	2201      	movs	r2, #1
 80090b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f000 fab7 	bl	8009630 <I2C_WaitOnFlagUntilTimeout>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d001      	beq.n	80090cc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	e0d5      	b.n	8009278 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2222      	movs	r2, #34	; 0x22
 80090d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2240      	movs	r2, #64	; 0x40
 80090d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	6a3a      	ldr	r2, [r7, #32]
 80090e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80090ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2200      	movs	r2, #0
 80090f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80090f4:	88f8      	ldrh	r0, [r7, #6]
 80090f6:	893a      	ldrh	r2, [r7, #8]
 80090f8:	8979      	ldrh	r1, [r7, #10]
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	9301      	str	r3, [sp, #4]
 80090fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	4603      	mov	r3, r0
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f000 fa1b 	bl	8009540 <I2C_RequestMemoryRead>
 800910a:	4603      	mov	r3, r0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d005      	beq.n	800911c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	e0ad      	b.n	8009278 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009120:	b29b      	uxth	r3, r3
 8009122:	2bff      	cmp	r3, #255	; 0xff
 8009124:	d90e      	bls.n	8009144 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	22ff      	movs	r2, #255	; 0xff
 800912a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009130:	b2da      	uxtb	r2, r3
 8009132:	8979      	ldrh	r1, [r7, #10]
 8009134:	4b52      	ldr	r3, [pc, #328]	; (8009280 <HAL_I2C_Mem_Read+0x22c>)
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f000 fc99 	bl	8009a74 <I2C_TransferConfig>
 8009142:	e00f      	b.n	8009164 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009148:	b29a      	uxth	r2, r3
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009152:	b2da      	uxtb	r2, r3
 8009154:	8979      	ldrh	r1, [r7, #10]
 8009156:	4b4a      	ldr	r3, [pc, #296]	; (8009280 <HAL_I2C_Mem_Read+0x22c>)
 8009158:	9300      	str	r3, [sp, #0]
 800915a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800915e:	68f8      	ldr	r0, [r7, #12]
 8009160:	f000 fc88 	bl	8009a74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916a:	2200      	movs	r2, #0
 800916c:	2104      	movs	r1, #4
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	f000 fa5e 	bl	8009630 <I2C_WaitOnFlagUntilTimeout>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d001      	beq.n	800917e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e07c      	b.n	8009278 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009188:	b2d2      	uxtb	r2, r2
 800918a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009190:	1c5a      	adds	r2, r3, #1
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800919a:	3b01      	subs	r3, #1
 800919c:	b29a      	uxth	r2, r3
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	3b01      	subs	r3, #1
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d034      	beq.n	8009224 <HAL_I2C_Mem_Read+0x1d0>
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d130      	bne.n	8009224 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	9300      	str	r3, [sp, #0]
 80091c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c8:	2200      	movs	r2, #0
 80091ca:	2180      	movs	r1, #128	; 0x80
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	f000 fa2f 	bl	8009630 <I2C_WaitOnFlagUntilTimeout>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d001      	beq.n	80091dc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	e04d      	b.n	8009278 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	2bff      	cmp	r3, #255	; 0xff
 80091e4:	d90e      	bls.n	8009204 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	22ff      	movs	r2, #255	; 0xff
 80091ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091f0:	b2da      	uxtb	r2, r3
 80091f2:	8979      	ldrh	r1, [r7, #10]
 80091f4:	2300      	movs	r3, #0
 80091f6:	9300      	str	r3, [sp, #0]
 80091f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f000 fc39 	bl	8009a74 <I2C_TransferConfig>
 8009202:	e00f      	b.n	8009224 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009208:	b29a      	uxth	r2, r3
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009212:	b2da      	uxtb	r2, r3
 8009214:	8979      	ldrh	r1, [r7, #10]
 8009216:	2300      	movs	r3, #0
 8009218:	9300      	str	r3, [sp, #0]
 800921a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f000 fc28 	bl	8009a74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009228:	b29b      	uxth	r3, r3
 800922a:	2b00      	cmp	r3, #0
 800922c:	d19a      	bne.n	8009164 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800922e:	697a      	ldr	r2, [r7, #20]
 8009230:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f000 fa7c 	bl	8009730 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d001      	beq.n	8009242 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	e01a      	b.n	8009278 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2220      	movs	r2, #32
 8009248:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	6859      	ldr	r1, [r3, #4]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	4b0b      	ldr	r3, [pc, #44]	; (8009284 <HAL_I2C_Mem_Read+0x230>)
 8009256:	400b      	ands	r3, r1
 8009258:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2220      	movs	r2, #32
 800925e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2200      	movs	r2, #0
 8009266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	e000      	b.n	8009278 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009276:	2302      	movs	r3, #2
  }
}
 8009278:	4618      	mov	r0, r3
 800927a:	3718      	adds	r7, #24
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	80002400 	.word	0x80002400
 8009284:	fe00e800 	.word	0xfe00e800

08009288 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b08a      	sub	sp, #40	; 0x28
 800928c:	af02      	add	r7, sp, #8
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	607a      	str	r2, [r7, #4]
 8009292:	603b      	str	r3, [r7, #0]
 8009294:	460b      	mov	r3, r1
 8009296:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8009298:	2300      	movs	r3, #0
 800929a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	2b20      	cmp	r3, #32
 80092a6:	f040 80ef 	bne.w	8009488 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	699b      	ldr	r3, [r3, #24]
 80092b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092b8:	d101      	bne.n	80092be <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80092ba:	2302      	movs	r3, #2
 80092bc:	e0e5      	b.n	800948a <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d101      	bne.n	80092cc <HAL_I2C_IsDeviceReady+0x44>
 80092c8:	2302      	movs	r3, #2
 80092ca:	e0de      	b.n	800948a <HAL_I2C_IsDeviceReady+0x202>
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2224      	movs	r2, #36	; 0x24
 80092d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d105      	bne.n	80092f6 <HAL_I2C_IsDeviceReady+0x6e>
 80092ea:	897b      	ldrh	r3, [r7, #10]
 80092ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80092f0:	4b68      	ldr	r3, [pc, #416]	; (8009494 <HAL_I2C_IsDeviceReady+0x20c>)
 80092f2:	4313      	orrs	r3, r2
 80092f4:	e004      	b.n	8009300 <HAL_I2C_IsDeviceReady+0x78>
 80092f6:	897b      	ldrh	r3, [r7, #10]
 80092f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092fc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8009300:	68fa      	ldr	r2, [r7, #12]
 8009302:	6812      	ldr	r2, [r2, #0]
 8009304:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8009306:	f7fd fab3 	bl	8006870 <HAL_GetTick>
 800930a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	699b      	ldr	r3, [r3, #24]
 8009312:	f003 0320 	and.w	r3, r3, #32
 8009316:	2b20      	cmp	r3, #32
 8009318:	bf0c      	ite	eq
 800931a:	2301      	moveq	r3, #1
 800931c:	2300      	movne	r3, #0
 800931e:	b2db      	uxtb	r3, r3
 8009320:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	699b      	ldr	r3, [r3, #24]
 8009328:	f003 0310 	and.w	r3, r3, #16
 800932c:	2b10      	cmp	r3, #16
 800932e:	bf0c      	ite	eq
 8009330:	2301      	moveq	r3, #1
 8009332:	2300      	movne	r3, #0
 8009334:	b2db      	uxtb	r3, r3
 8009336:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8009338:	e034      	b.n	80093a4 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009340:	d01a      	beq.n	8009378 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009342:	f7fd fa95 	bl	8006870 <HAL_GetTick>
 8009346:	4602      	mov	r2, r0
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	1ad3      	subs	r3, r2, r3
 800934c:	683a      	ldr	r2, [r7, #0]
 800934e:	429a      	cmp	r2, r3
 8009350:	d302      	bcc.n	8009358 <HAL_I2C_IsDeviceReady+0xd0>
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d10f      	bne.n	8009378 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2220      	movs	r2, #32
 800935c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009364:	f043 0220 	orr.w	r2, r3, #32
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2200      	movs	r2, #0
 8009370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	e088      	b.n	800948a <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	699b      	ldr	r3, [r3, #24]
 800937e:	f003 0320 	and.w	r3, r3, #32
 8009382:	2b20      	cmp	r3, #32
 8009384:	bf0c      	ite	eq
 8009386:	2301      	moveq	r3, #1
 8009388:	2300      	movne	r3, #0
 800938a:	b2db      	uxtb	r3, r3
 800938c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	699b      	ldr	r3, [r3, #24]
 8009394:	f003 0310 	and.w	r3, r3, #16
 8009398:	2b10      	cmp	r3, #16
 800939a:	bf0c      	ite	eq
 800939c:	2301      	moveq	r3, #1
 800939e:	2300      	movne	r3, #0
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80093a4:	7ffb      	ldrb	r3, [r7, #31]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d102      	bne.n	80093b0 <HAL_I2C_IsDeviceReady+0x128>
 80093aa:	7fbb      	ldrb	r3, [r7, #30]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d0c4      	beq.n	800933a <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	f003 0310 	and.w	r3, r3, #16
 80093ba:	2b10      	cmp	r3, #16
 80093bc:	d01a      	beq.n	80093f4 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	2200      	movs	r2, #0
 80093c6:	2120      	movs	r1, #32
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f000 f931 	bl	8009630 <I2C_WaitOnFlagUntilTimeout>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d001      	beq.n	80093d8 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	e058      	b.n	800948a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2220      	movs	r2, #32
 80093de:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2220      	movs	r2, #32
 80093e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80093f0:	2300      	movs	r3, #0
 80093f2:	e04a      	b.n	800948a <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80093f4:	69bb      	ldr	r3, [r7, #24]
 80093f6:	9300      	str	r3, [sp, #0]
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	2200      	movs	r2, #0
 80093fc:	2120      	movs	r1, #32
 80093fe:	68f8      	ldr	r0, [r7, #12]
 8009400:	f000 f916 	bl	8009630 <I2C_WaitOnFlagUntilTimeout>
 8009404:	4603      	mov	r3, r0
 8009406:	2b00      	cmp	r3, #0
 8009408:	d001      	beq.n	800940e <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	e03d      	b.n	800948a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2210      	movs	r2, #16
 8009414:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2220      	movs	r2, #32
 800941c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	429a      	cmp	r2, r3
 8009424:	d118      	bne.n	8009458 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	685a      	ldr	r2, [r3, #4]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009434:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	9300      	str	r3, [sp, #0]
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	2200      	movs	r2, #0
 800943e:	2120      	movs	r1, #32
 8009440:	68f8      	ldr	r0, [r7, #12]
 8009442:	f000 f8f5 	bl	8009630 <I2C_WaitOnFlagUntilTimeout>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d001      	beq.n	8009450 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	e01c      	b.n	800948a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2220      	movs	r2, #32
 8009456:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	3301      	adds	r3, #1
 800945c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	429a      	cmp	r2, r3
 8009464:	f63f af3d 	bhi.w	80092e2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2220      	movs	r2, #32
 800946c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009474:	f043 0220 	orr.w	r2, r3, #32
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2200      	movs	r2, #0
 8009480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	e000      	b.n	800948a <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8009488:	2302      	movs	r3, #2
  }
}
 800948a:	4618      	mov	r0, r3
 800948c:	3720      	adds	r7, #32
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	02002000 	.word	0x02002000

08009498 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b086      	sub	sp, #24
 800949c:	af02      	add	r7, sp, #8
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	4608      	mov	r0, r1
 80094a2:	4611      	mov	r1, r2
 80094a4:	461a      	mov	r2, r3
 80094a6:	4603      	mov	r3, r0
 80094a8:	817b      	strh	r3, [r7, #10]
 80094aa:	460b      	mov	r3, r1
 80094ac:	813b      	strh	r3, [r7, #8]
 80094ae:	4613      	mov	r3, r2
 80094b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80094b2:	88fb      	ldrh	r3, [r7, #6]
 80094b4:	b2da      	uxtb	r2, r3
 80094b6:	8979      	ldrh	r1, [r7, #10]
 80094b8:	4b20      	ldr	r3, [pc, #128]	; (800953c <I2C_RequestMemoryWrite+0xa4>)
 80094ba:	9300      	str	r3, [sp, #0]
 80094bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	f000 fad7 	bl	8009a74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094c6:	69fa      	ldr	r2, [r7, #28]
 80094c8:	69b9      	ldr	r1, [r7, #24]
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	f000 f8f0 	bl	80096b0 <I2C_WaitOnTXISFlagUntilTimeout>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d001      	beq.n	80094da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	e02c      	b.n	8009534 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80094da:	88fb      	ldrh	r3, [r7, #6]
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d105      	bne.n	80094ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80094e0:	893b      	ldrh	r3, [r7, #8]
 80094e2:	b2da      	uxtb	r2, r3
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	629a      	str	r2, [r3, #40]	; 0x28
 80094ea:	e015      	b.n	8009518 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80094ec:	893b      	ldrh	r3, [r7, #8]
 80094ee:	0a1b      	lsrs	r3, r3, #8
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	b2da      	uxtb	r2, r3
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094fa:	69fa      	ldr	r2, [r7, #28]
 80094fc:	69b9      	ldr	r1, [r7, #24]
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f000 f8d6 	bl	80096b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d001      	beq.n	800950e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	e012      	b.n	8009534 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800950e:	893b      	ldrh	r3, [r7, #8]
 8009510:	b2da      	uxtb	r2, r3
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	9300      	str	r3, [sp, #0]
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	2200      	movs	r2, #0
 8009520:	2180      	movs	r1, #128	; 0x80
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f000 f884 	bl	8009630 <I2C_WaitOnFlagUntilTimeout>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	e000      	b.n	8009534 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3710      	adds	r7, #16
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}
 800953c:	80002000 	.word	0x80002000

08009540 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b086      	sub	sp, #24
 8009544:	af02      	add	r7, sp, #8
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	4608      	mov	r0, r1
 800954a:	4611      	mov	r1, r2
 800954c:	461a      	mov	r2, r3
 800954e:	4603      	mov	r3, r0
 8009550:	817b      	strh	r3, [r7, #10]
 8009552:	460b      	mov	r3, r1
 8009554:	813b      	strh	r3, [r7, #8]
 8009556:	4613      	mov	r3, r2
 8009558:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800955a:	88fb      	ldrh	r3, [r7, #6]
 800955c:	b2da      	uxtb	r2, r3
 800955e:	8979      	ldrh	r1, [r7, #10]
 8009560:	4b20      	ldr	r3, [pc, #128]	; (80095e4 <I2C_RequestMemoryRead+0xa4>)
 8009562:	9300      	str	r3, [sp, #0]
 8009564:	2300      	movs	r3, #0
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	f000 fa84 	bl	8009a74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800956c:	69fa      	ldr	r2, [r7, #28]
 800956e:	69b9      	ldr	r1, [r7, #24]
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f000 f89d 	bl	80096b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	e02c      	b.n	80095da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009580:	88fb      	ldrh	r3, [r7, #6]
 8009582:	2b01      	cmp	r3, #1
 8009584:	d105      	bne.n	8009592 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009586:	893b      	ldrh	r3, [r7, #8]
 8009588:	b2da      	uxtb	r2, r3
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	629a      	str	r2, [r3, #40]	; 0x28
 8009590:	e015      	b.n	80095be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009592:	893b      	ldrh	r3, [r7, #8]
 8009594:	0a1b      	lsrs	r3, r3, #8
 8009596:	b29b      	uxth	r3, r3
 8009598:	b2da      	uxtb	r2, r3
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095a0:	69fa      	ldr	r2, [r7, #28]
 80095a2:	69b9      	ldr	r1, [r7, #24]
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f000 f883 	bl	80096b0 <I2C_WaitOnTXISFlagUntilTimeout>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d001      	beq.n	80095b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80095b0:	2301      	movs	r3, #1
 80095b2:	e012      	b.n	80095da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80095b4:	893b      	ldrh	r3, [r7, #8]
 80095b6:	b2da      	uxtb	r2, r3
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	9300      	str	r3, [sp, #0]
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	2200      	movs	r2, #0
 80095c6:	2140      	movs	r1, #64	; 0x40
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f000 f831 	bl	8009630 <I2C_WaitOnFlagUntilTimeout>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	e000      	b.n	80095da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	80002000 	.word	0x80002000

080095e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	699b      	ldr	r3, [r3, #24]
 80095f6:	f003 0302 	and.w	r3, r3, #2
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d103      	bne.n	8009606 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2200      	movs	r2, #0
 8009604:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	699b      	ldr	r3, [r3, #24]
 800960c:	f003 0301 	and.w	r3, r3, #1
 8009610:	2b01      	cmp	r3, #1
 8009612:	d007      	beq.n	8009624 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	699a      	ldr	r2, [r3, #24]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f042 0201 	orr.w	r2, r2, #1
 8009622:	619a      	str	r2, [r3, #24]
  }
}
 8009624:	bf00      	nop
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	603b      	str	r3, [r7, #0]
 800963c:	4613      	mov	r3, r2
 800963e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009640:	e022      	b.n	8009688 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009648:	d01e      	beq.n	8009688 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800964a:	f7fd f911 	bl	8006870 <HAL_GetTick>
 800964e:	4602      	mov	r2, r0
 8009650:	69bb      	ldr	r3, [r7, #24]
 8009652:	1ad3      	subs	r3, r2, r3
 8009654:	683a      	ldr	r2, [r7, #0]
 8009656:	429a      	cmp	r2, r3
 8009658:	d302      	bcc.n	8009660 <I2C_WaitOnFlagUntilTimeout+0x30>
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d113      	bne.n	8009688 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009664:	f043 0220 	orr.w	r2, r3, #32
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2220      	movs	r2, #32
 8009670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2200      	movs	r2, #0
 8009678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	e00f      	b.n	80096a8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	699a      	ldr	r2, [r3, #24]
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	4013      	ands	r3, r2
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	429a      	cmp	r2, r3
 8009696:	bf0c      	ite	eq
 8009698:	2301      	moveq	r3, #1
 800969a:	2300      	movne	r3, #0
 800969c:	b2db      	uxtb	r3, r3
 800969e:	461a      	mov	r2, r3
 80096a0:	79fb      	ldrb	r3, [r7, #7]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d0cd      	beq.n	8009642 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80096bc:	e02c      	b.n	8009718 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	68b9      	ldr	r1, [r7, #8]
 80096c2:	68f8      	ldr	r0, [r7, #12]
 80096c4:	f000 f8ea 	bl	800989c <I2C_IsErrorOccurred>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d001      	beq.n	80096d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	e02a      	b.n	8009728 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d8:	d01e      	beq.n	8009718 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096da:	f7fd f8c9 	bl	8006870 <HAL_GetTick>
 80096de:	4602      	mov	r2, r0
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	1ad3      	subs	r3, r2, r3
 80096e4:	68ba      	ldr	r2, [r7, #8]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d302      	bcc.n	80096f0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d113      	bne.n	8009718 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096f4:	f043 0220 	orr.w	r2, r3, #32
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2220      	movs	r2, #32
 8009700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2200      	movs	r2, #0
 8009708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2200      	movs	r2, #0
 8009710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	e007      	b.n	8009728 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	699b      	ldr	r3, [r3, #24]
 800971e:	f003 0302 	and.w	r3, r3, #2
 8009722:	2b02      	cmp	r3, #2
 8009724:	d1cb      	bne.n	80096be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009726:	2300      	movs	r3, #0
}
 8009728:	4618      	mov	r0, r3
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800973c:	e028      	b.n	8009790 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	68b9      	ldr	r1, [r7, #8]
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f000 f8aa 	bl	800989c <I2C_IsErrorOccurred>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d001      	beq.n	8009752 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	e026      	b.n	80097a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009752:	f7fd f88d 	bl	8006870 <HAL_GetTick>
 8009756:	4602      	mov	r2, r0
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	1ad3      	subs	r3, r2, r3
 800975c:	68ba      	ldr	r2, [r7, #8]
 800975e:	429a      	cmp	r2, r3
 8009760:	d302      	bcc.n	8009768 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d113      	bne.n	8009790 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800976c:	f043 0220 	orr.w	r2, r3, #32
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2220      	movs	r2, #32
 8009778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800978c:	2301      	movs	r3, #1
 800978e:	e007      	b.n	80097a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	699b      	ldr	r3, [r3, #24]
 8009796:	f003 0320 	and.w	r3, r3, #32
 800979a:	2b20      	cmp	r3, #32
 800979c:	d1cf      	bne.n	800973e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80097b4:	e064      	b.n	8009880 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	68b9      	ldr	r1, [r7, #8]
 80097ba:	68f8      	ldr	r0, [r7, #12]
 80097bc:	f000 f86e 	bl	800989c <I2C_IsErrorOccurred>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d001      	beq.n	80097ca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80097c6:	2301      	movs	r3, #1
 80097c8:	e062      	b.n	8009890 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	699b      	ldr	r3, [r3, #24]
 80097d0:	f003 0320 	and.w	r3, r3, #32
 80097d4:	2b20      	cmp	r3, #32
 80097d6:	d138      	bne.n	800984a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	699b      	ldr	r3, [r3, #24]
 80097de:	f003 0304 	and.w	r3, r3, #4
 80097e2:	2b04      	cmp	r3, #4
 80097e4:	d105      	bne.n	80097f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d001      	beq.n	80097f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80097ee:	2300      	movs	r3, #0
 80097f0:	e04e      	b.n	8009890 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	699b      	ldr	r3, [r3, #24]
 80097f8:	f003 0310 	and.w	r3, r3, #16
 80097fc:	2b10      	cmp	r3, #16
 80097fe:	d107      	bne.n	8009810 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2210      	movs	r2, #16
 8009806:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2204      	movs	r2, #4
 800980c:	645a      	str	r2, [r3, #68]	; 0x44
 800980e:	e002      	b.n	8009816 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2200      	movs	r2, #0
 8009814:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	2220      	movs	r2, #32
 800981c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	6859      	ldr	r1, [r3, #4]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	4b1b      	ldr	r3, [pc, #108]	; (8009898 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800982a:	400b      	ands	r3, r1
 800982c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2220      	movs	r2, #32
 8009832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2200      	movs	r2, #0
 800983a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2200      	movs	r2, #0
 8009842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	e022      	b.n	8009890 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800984a:	f7fd f811 	bl	8006870 <HAL_GetTick>
 800984e:	4602      	mov	r2, r0
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	1ad3      	subs	r3, r2, r3
 8009854:	68ba      	ldr	r2, [r7, #8]
 8009856:	429a      	cmp	r2, r3
 8009858:	d302      	bcc.n	8009860 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d10f      	bne.n	8009880 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009864:	f043 0220 	orr.w	r2, r3, #32
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2220      	movs	r2, #32
 8009870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2200      	movs	r2, #0
 8009878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	e007      	b.n	8009890 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	699b      	ldr	r3, [r3, #24]
 8009886:	f003 0304 	and.w	r3, r3, #4
 800988a:	2b04      	cmp	r3, #4
 800988c:	d193      	bne.n	80097b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3710      	adds	r7, #16
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	fe00e800 	.word	0xfe00e800

0800989c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b08a      	sub	sp, #40	; 0x28
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098a8:	2300      	movs	r3, #0
 80098aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	699b      	ldr	r3, [r3, #24]
 80098b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80098b6:	2300      	movs	r3, #0
 80098b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	f003 0310 	and.w	r3, r3, #16
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d075      	beq.n	80099b4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2210      	movs	r2, #16
 80098ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80098d0:	e056      	b.n	8009980 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098d8:	d052      	beq.n	8009980 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80098da:	f7fc ffc9 	bl	8006870 <HAL_GetTick>
 80098de:	4602      	mov	r2, r0
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	1ad3      	subs	r3, r2, r3
 80098e4:	68ba      	ldr	r2, [r7, #8]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d302      	bcc.n	80098f0 <I2C_IsErrorOccurred+0x54>
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d147      	bne.n	8009980 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009902:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	699b      	ldr	r3, [r3, #24]
 800990a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800990e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009912:	d12e      	bne.n	8009972 <I2C_IsErrorOccurred+0xd6>
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800991a:	d02a      	beq.n	8009972 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800991c:	7cfb      	ldrb	r3, [r7, #19]
 800991e:	2b20      	cmp	r3, #32
 8009920:	d027      	beq.n	8009972 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	685a      	ldr	r2, [r3, #4]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009930:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009932:	f7fc ff9d 	bl	8006870 <HAL_GetTick>
 8009936:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009938:	e01b      	b.n	8009972 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800993a:	f7fc ff99 	bl	8006870 <HAL_GetTick>
 800993e:	4602      	mov	r2, r0
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	1ad3      	subs	r3, r2, r3
 8009944:	2b19      	cmp	r3, #25
 8009946:	d914      	bls.n	8009972 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800994c:	f043 0220 	orr.w	r2, r3, #32
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2220      	movs	r2, #32
 8009958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2200      	movs	r2, #0
 8009960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2200      	movs	r2, #0
 8009968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	699b      	ldr	r3, [r3, #24]
 8009978:	f003 0320 	and.w	r3, r3, #32
 800997c:	2b20      	cmp	r3, #32
 800997e:	d1dc      	bne.n	800993a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	699b      	ldr	r3, [r3, #24]
 8009986:	f003 0320 	and.w	r3, r3, #32
 800998a:	2b20      	cmp	r3, #32
 800998c:	d003      	beq.n	8009996 <I2C_IsErrorOccurred+0xfa>
 800998e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009992:	2b00      	cmp	r3, #0
 8009994:	d09d      	beq.n	80098d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009996:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800999a:	2b00      	cmp	r3, #0
 800999c:	d103      	bne.n	80099a6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2220      	movs	r2, #32
 80099a4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80099a6:	6a3b      	ldr	r3, [r7, #32]
 80099a8:	f043 0304 	orr.w	r3, r3, #4
 80099ac:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	699b      	ldr	r3, [r3, #24]
 80099ba:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80099bc:	69bb      	ldr	r3, [r7, #24]
 80099be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d00b      	beq.n	80099de <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80099c6:	6a3b      	ldr	r3, [r7, #32]
 80099c8:	f043 0301 	orr.w	r3, r3, #1
 80099cc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80099d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d00b      	beq.n	8009a00 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80099e8:	6a3b      	ldr	r3, [r7, #32]
 80099ea:	f043 0308 	orr.w	r3, r3, #8
 80099ee:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80099f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80099fa:	2301      	movs	r3, #1
 80099fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009a00:	69bb      	ldr	r3, [r7, #24]
 8009a02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00b      	beq.n	8009a22 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009a0a:	6a3b      	ldr	r3, [r7, #32]
 8009a0c:	f043 0302 	orr.w	r3, r3, #2
 8009a10:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009a22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d01c      	beq.n	8009a64 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f7ff fddc 	bl	80095e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	6859      	ldr	r1, [r3, #4]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	4b0d      	ldr	r3, [pc, #52]	; (8009a70 <I2C_IsErrorOccurred+0x1d4>)
 8009a3c:	400b      	ands	r3, r1
 8009a3e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a44:	6a3b      	ldr	r3, [r7, #32]
 8009a46:	431a      	orrs	r2, r3
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2220      	movs	r2, #32
 8009a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009a64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3728      	adds	r7, #40	; 0x28
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	fe00e800 	.word	0xfe00e800

08009a74 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b087      	sub	sp, #28
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	607b      	str	r3, [r7, #4]
 8009a7e:	460b      	mov	r3, r1
 8009a80:	817b      	strh	r3, [r7, #10]
 8009a82:	4613      	mov	r3, r2
 8009a84:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009a86:	897b      	ldrh	r3, [r7, #10]
 8009a88:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009a8c:	7a7b      	ldrb	r3, [r7, #9]
 8009a8e:	041b      	lsls	r3, r3, #16
 8009a90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009a94:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009a9a:	6a3b      	ldr	r3, [r7, #32]
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009aa2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	685a      	ldr	r2, [r3, #4]
 8009aaa:	6a3b      	ldr	r3, [r7, #32]
 8009aac:	0d5b      	lsrs	r3, r3, #21
 8009aae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009ab2:	4b08      	ldr	r3, [pc, #32]	; (8009ad4 <I2C_TransferConfig+0x60>)
 8009ab4:	430b      	orrs	r3, r1
 8009ab6:	43db      	mvns	r3, r3
 8009ab8:	ea02 0103 	and.w	r1, r2, r3
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	697a      	ldr	r2, [r7, #20]
 8009ac2:	430a      	orrs	r2, r1
 8009ac4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009ac6:	bf00      	nop
 8009ac8:	371c      	adds	r7, #28
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	03ff63ff 	.word	0x03ff63ff

08009ad8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	2b20      	cmp	r3, #32
 8009aec:	d138      	bne.n	8009b60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d101      	bne.n	8009afc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009af8:	2302      	movs	r3, #2
 8009afa:	e032      	b.n	8009b62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2224      	movs	r2, #36	; 0x24
 8009b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f022 0201 	bic.w	r2, r2, #1
 8009b1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009b2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	6819      	ldr	r1, [r3, #0]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	683a      	ldr	r2, [r7, #0]
 8009b38:	430a      	orrs	r2, r1
 8009b3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f042 0201 	orr.w	r2, r2, #1
 8009b4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2220      	movs	r2, #32
 8009b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	e000      	b.n	8009b62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009b60:	2302      	movs	r3, #2
  }
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	370c      	adds	r7, #12
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009b6e:	b480      	push	{r7}
 8009b70:	b085      	sub	sp, #20
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
 8009b76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	2b20      	cmp	r3, #32
 8009b82:	d139      	bne.n	8009bf8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d101      	bne.n	8009b92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009b8e:	2302      	movs	r3, #2
 8009b90:	e033      	b.n	8009bfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2201      	movs	r2, #1
 8009b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2224      	movs	r2, #36	; 0x24
 8009b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f022 0201 	bic.w	r2, r2, #1
 8009bb0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009bc0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	021b      	lsls	r3, r3, #8
 8009bc6:	68fa      	ldr	r2, [r7, #12]
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	68fa      	ldr	r2, [r7, #12]
 8009bd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f042 0201 	orr.w	r2, r2, #1
 8009be2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2220      	movs	r2, #32
 8009be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	e000      	b.n	8009bfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009bf8:	2302      	movs	r3, #2
  }
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3714      	adds	r7, #20
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr
	...

08009c08 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009c0c:	4b05      	ldr	r3, [pc, #20]	; (8009c24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a04      	ldr	r2, [pc, #16]	; (8009c24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c16:	6013      	str	r3, [r2, #0]
}
 8009c18:	bf00      	nop
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	40007000 	.word	0x40007000

08009c28 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009c32:	4b23      	ldr	r3, [pc, #140]	; (8009cc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8009c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c36:	4a22      	ldr	r2, [pc, #136]	; (8009cc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8009c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8009c3e:	4b20      	ldr	r3, [pc, #128]	; (8009cc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8009c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c46:	603b      	str	r3, [r7, #0]
 8009c48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009c4a:	4b1e      	ldr	r3, [pc, #120]	; (8009cc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4a1d      	ldr	r2, [pc, #116]	; (8009cc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c54:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009c56:	f7fc fe0b 	bl	8006870 <HAL_GetTick>
 8009c5a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009c5c:	e009      	b.n	8009c72 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009c5e:	f7fc fe07 	bl	8006870 <HAL_GetTick>
 8009c62:	4602      	mov	r2, r0
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c6c:	d901      	bls.n	8009c72 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8009c6e:	2303      	movs	r3, #3
 8009c70:	e022      	b.n	8009cb8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009c72:	4b14      	ldr	r3, [pc, #80]	; (8009cc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c7e:	d1ee      	bne.n	8009c5e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009c80:	4b10      	ldr	r3, [pc, #64]	; (8009cc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a0f      	ldr	r2, [pc, #60]	; (8009cc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c8a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009c8c:	f7fc fdf0 	bl	8006870 <HAL_GetTick>
 8009c90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009c92:	e009      	b.n	8009ca8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009c94:	f7fc fdec 	bl	8006870 <HAL_GetTick>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	1ad3      	subs	r3, r2, r3
 8009c9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ca2:	d901      	bls.n	8009ca8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	e007      	b.n	8009cb8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009ca8:	4b06      	ldr	r3, [pc, #24]	; (8009cc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cb4:	d1ee      	bne.n	8009c94 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3708      	adds	r7, #8
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	40023800 	.word	0x40023800
 8009cc4:	40007000 	.word	0x40007000

08009cc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b086      	sub	sp, #24
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d101      	bne.n	8009cde <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e29b      	b.n	800a216 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f003 0301 	and.w	r3, r3, #1
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	f000 8087 	beq.w	8009dfa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009cec:	4b96      	ldr	r3, [pc, #600]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	f003 030c 	and.w	r3, r3, #12
 8009cf4:	2b04      	cmp	r3, #4
 8009cf6:	d00c      	beq.n	8009d12 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009cf8:	4b93      	ldr	r3, [pc, #588]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	f003 030c 	and.w	r3, r3, #12
 8009d00:	2b08      	cmp	r3, #8
 8009d02:	d112      	bne.n	8009d2a <HAL_RCC_OscConfig+0x62>
 8009d04:	4b90      	ldr	r3, [pc, #576]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d10:	d10b      	bne.n	8009d2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d12:	4b8d      	ldr	r3, [pc, #564]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d06c      	beq.n	8009df8 <HAL_RCC_OscConfig+0x130>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d168      	bne.n	8009df8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009d26:	2301      	movs	r3, #1
 8009d28:	e275      	b.n	800a216 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d32:	d106      	bne.n	8009d42 <HAL_RCC_OscConfig+0x7a>
 8009d34:	4b84      	ldr	r3, [pc, #528]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a83      	ldr	r2, [pc, #524]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d3e:	6013      	str	r3, [r2, #0]
 8009d40:	e02e      	b.n	8009da0 <HAL_RCC_OscConfig+0xd8>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d10c      	bne.n	8009d64 <HAL_RCC_OscConfig+0x9c>
 8009d4a:	4b7f      	ldr	r3, [pc, #508]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a7e      	ldr	r2, [pc, #504]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d54:	6013      	str	r3, [r2, #0]
 8009d56:	4b7c      	ldr	r3, [pc, #496]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a7b      	ldr	r2, [pc, #492]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009d5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d60:	6013      	str	r3, [r2, #0]
 8009d62:	e01d      	b.n	8009da0 <HAL_RCC_OscConfig+0xd8>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d6c:	d10c      	bne.n	8009d88 <HAL_RCC_OscConfig+0xc0>
 8009d6e:	4b76      	ldr	r3, [pc, #472]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a75      	ldr	r2, [pc, #468]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009d78:	6013      	str	r3, [r2, #0]
 8009d7a:	4b73      	ldr	r3, [pc, #460]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a72      	ldr	r2, [pc, #456]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d84:	6013      	str	r3, [r2, #0]
 8009d86:	e00b      	b.n	8009da0 <HAL_RCC_OscConfig+0xd8>
 8009d88:	4b6f      	ldr	r3, [pc, #444]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a6e      	ldr	r2, [pc, #440]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d92:	6013      	str	r3, [r2, #0]
 8009d94:	4b6c      	ldr	r3, [pc, #432]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a6b      	ldr	r2, [pc, #428]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d013      	beq.n	8009dd0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009da8:	f7fc fd62 	bl	8006870 <HAL_GetTick>
 8009dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009dae:	e008      	b.n	8009dc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009db0:	f7fc fd5e 	bl	8006870 <HAL_GetTick>
 8009db4:	4602      	mov	r2, r0
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	1ad3      	subs	r3, r2, r3
 8009dba:	2b64      	cmp	r3, #100	; 0x64
 8009dbc:	d901      	bls.n	8009dc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009dbe:	2303      	movs	r3, #3
 8009dc0:	e229      	b.n	800a216 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009dc2:	4b61      	ldr	r3, [pc, #388]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d0f0      	beq.n	8009db0 <HAL_RCC_OscConfig+0xe8>
 8009dce:	e014      	b.n	8009dfa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dd0:	f7fc fd4e 	bl	8006870 <HAL_GetTick>
 8009dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009dd6:	e008      	b.n	8009dea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009dd8:	f7fc fd4a 	bl	8006870 <HAL_GetTick>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	1ad3      	subs	r3, r2, r3
 8009de2:	2b64      	cmp	r3, #100	; 0x64
 8009de4:	d901      	bls.n	8009dea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009de6:	2303      	movs	r3, #3
 8009de8:	e215      	b.n	800a216 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009dea:	4b57      	ldr	r3, [pc, #348]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d1f0      	bne.n	8009dd8 <HAL_RCC_OscConfig+0x110>
 8009df6:	e000      	b.n	8009dfa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f003 0302 	and.w	r3, r3, #2
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d069      	beq.n	8009eda <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009e06:	4b50      	ldr	r3, [pc, #320]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	f003 030c 	and.w	r3, r3, #12
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d00b      	beq.n	8009e2a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009e12:	4b4d      	ldr	r3, [pc, #308]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	f003 030c 	and.w	r3, r3, #12
 8009e1a:	2b08      	cmp	r3, #8
 8009e1c:	d11c      	bne.n	8009e58 <HAL_RCC_OscConfig+0x190>
 8009e1e:	4b4a      	ldr	r3, [pc, #296]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d116      	bne.n	8009e58 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009e2a:	4b47      	ldr	r3, [pc, #284]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f003 0302 	and.w	r3, r3, #2
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d005      	beq.n	8009e42 <HAL_RCC_OscConfig+0x17a>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d001      	beq.n	8009e42 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e1e9      	b.n	800a216 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e42:	4b41      	ldr	r3, [pc, #260]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	00db      	lsls	r3, r3, #3
 8009e50:	493d      	ldr	r1, [pc, #244]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009e52:	4313      	orrs	r3, r2
 8009e54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009e56:	e040      	b.n	8009eda <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d023      	beq.n	8009ea8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009e60:	4b39      	ldr	r3, [pc, #228]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4a38      	ldr	r2, [pc, #224]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009e66:	f043 0301 	orr.w	r3, r3, #1
 8009e6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e6c:	f7fc fd00 	bl	8006870 <HAL_GetTick>
 8009e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e72:	e008      	b.n	8009e86 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e74:	f7fc fcfc 	bl	8006870 <HAL_GetTick>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	1ad3      	subs	r3, r2, r3
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	d901      	bls.n	8009e86 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8009e82:	2303      	movs	r3, #3
 8009e84:	e1c7      	b.n	800a216 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e86:	4b30      	ldr	r3, [pc, #192]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f003 0302 	and.w	r3, r3, #2
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d0f0      	beq.n	8009e74 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e92:	4b2d      	ldr	r3, [pc, #180]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	691b      	ldr	r3, [r3, #16]
 8009e9e:	00db      	lsls	r3, r3, #3
 8009ea0:	4929      	ldr	r1, [pc, #164]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	600b      	str	r3, [r1, #0]
 8009ea6:	e018      	b.n	8009eda <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009ea8:	4b27      	ldr	r3, [pc, #156]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a26      	ldr	r2, [pc, #152]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009eae:	f023 0301 	bic.w	r3, r3, #1
 8009eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eb4:	f7fc fcdc 	bl	8006870 <HAL_GetTick>
 8009eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009eba:	e008      	b.n	8009ece <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ebc:	f7fc fcd8 	bl	8006870 <HAL_GetTick>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	1ad3      	subs	r3, r2, r3
 8009ec6:	2b02      	cmp	r3, #2
 8009ec8:	d901      	bls.n	8009ece <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009eca:	2303      	movs	r3, #3
 8009ecc:	e1a3      	b.n	800a216 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ece:	4b1e      	ldr	r3, [pc, #120]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f003 0302 	and.w	r3, r3, #2
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d1f0      	bne.n	8009ebc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f003 0308 	and.w	r3, r3, #8
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d038      	beq.n	8009f58 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	695b      	ldr	r3, [r3, #20]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d019      	beq.n	8009f22 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009eee:	4b16      	ldr	r3, [pc, #88]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ef2:	4a15      	ldr	r2, [pc, #84]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009ef4:	f043 0301 	orr.w	r3, r3, #1
 8009ef8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009efa:	f7fc fcb9 	bl	8006870 <HAL_GetTick>
 8009efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009f00:	e008      	b.n	8009f14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f02:	f7fc fcb5 	bl	8006870 <HAL_GetTick>
 8009f06:	4602      	mov	r2, r0
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	1ad3      	subs	r3, r2, r3
 8009f0c:	2b02      	cmp	r3, #2
 8009f0e:	d901      	bls.n	8009f14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009f10:	2303      	movs	r3, #3
 8009f12:	e180      	b.n	800a216 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009f14:	4b0c      	ldr	r3, [pc, #48]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009f16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f18:	f003 0302 	and.w	r3, r3, #2
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d0f0      	beq.n	8009f02 <HAL_RCC_OscConfig+0x23a>
 8009f20:	e01a      	b.n	8009f58 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009f22:	4b09      	ldr	r3, [pc, #36]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f26:	4a08      	ldr	r2, [pc, #32]	; (8009f48 <HAL_RCC_OscConfig+0x280>)
 8009f28:	f023 0301 	bic.w	r3, r3, #1
 8009f2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f2e:	f7fc fc9f 	bl	8006870 <HAL_GetTick>
 8009f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009f34:	e00a      	b.n	8009f4c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f36:	f7fc fc9b 	bl	8006870 <HAL_GetTick>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	1ad3      	subs	r3, r2, r3
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d903      	bls.n	8009f4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009f44:	2303      	movs	r3, #3
 8009f46:	e166      	b.n	800a216 <HAL_RCC_OscConfig+0x54e>
 8009f48:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009f4c:	4b92      	ldr	r3, [pc, #584]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 8009f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f50:	f003 0302 	and.w	r3, r3, #2
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d1ee      	bne.n	8009f36 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f003 0304 	and.w	r3, r3, #4
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f000 80a4 	beq.w	800a0ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009f66:	4b8c      	ldr	r3, [pc, #560]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 8009f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d10d      	bne.n	8009f8e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f72:	4b89      	ldr	r3, [pc, #548]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 8009f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f76:	4a88      	ldr	r2, [pc, #544]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 8009f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8009f7e:	4b86      	ldr	r3, [pc, #536]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 8009f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f86:	60bb      	str	r3, [r7, #8]
 8009f88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009f8e:	4b83      	ldr	r3, [pc, #524]	; (800a19c <HAL_RCC_OscConfig+0x4d4>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d118      	bne.n	8009fcc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8009f9a:	4b80      	ldr	r3, [pc, #512]	; (800a19c <HAL_RCC_OscConfig+0x4d4>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a7f      	ldr	r2, [pc, #508]	; (800a19c <HAL_RCC_OscConfig+0x4d4>)
 8009fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009fa6:	f7fc fc63 	bl	8006870 <HAL_GetTick>
 8009faa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009fac:	e008      	b.n	8009fc0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009fae:	f7fc fc5f 	bl	8006870 <HAL_GetTick>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	1ad3      	subs	r3, r2, r3
 8009fb8:	2b64      	cmp	r3, #100	; 0x64
 8009fba:	d901      	bls.n	8009fc0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009fbc:	2303      	movs	r3, #3
 8009fbe:	e12a      	b.n	800a216 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009fc0:	4b76      	ldr	r3, [pc, #472]	; (800a19c <HAL_RCC_OscConfig+0x4d4>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d0f0      	beq.n	8009fae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	689b      	ldr	r3, [r3, #8]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d106      	bne.n	8009fe2 <HAL_RCC_OscConfig+0x31a>
 8009fd4:	4b70      	ldr	r3, [pc, #448]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 8009fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fd8:	4a6f      	ldr	r2, [pc, #444]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 8009fda:	f043 0301 	orr.w	r3, r3, #1
 8009fde:	6713      	str	r3, [r2, #112]	; 0x70
 8009fe0:	e02d      	b.n	800a03e <HAL_RCC_OscConfig+0x376>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d10c      	bne.n	800a004 <HAL_RCC_OscConfig+0x33c>
 8009fea:	4b6b      	ldr	r3, [pc, #428]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 8009fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fee:	4a6a      	ldr	r2, [pc, #424]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 8009ff0:	f023 0301 	bic.w	r3, r3, #1
 8009ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8009ff6:	4b68      	ldr	r3, [pc, #416]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 8009ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ffa:	4a67      	ldr	r2, [pc, #412]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 8009ffc:	f023 0304 	bic.w	r3, r3, #4
 800a000:	6713      	str	r3, [r2, #112]	; 0x70
 800a002:	e01c      	b.n	800a03e <HAL_RCC_OscConfig+0x376>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	2b05      	cmp	r3, #5
 800a00a:	d10c      	bne.n	800a026 <HAL_RCC_OscConfig+0x35e>
 800a00c:	4b62      	ldr	r3, [pc, #392]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 800a00e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a010:	4a61      	ldr	r2, [pc, #388]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 800a012:	f043 0304 	orr.w	r3, r3, #4
 800a016:	6713      	str	r3, [r2, #112]	; 0x70
 800a018:	4b5f      	ldr	r3, [pc, #380]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 800a01a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a01c:	4a5e      	ldr	r2, [pc, #376]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 800a01e:	f043 0301 	orr.w	r3, r3, #1
 800a022:	6713      	str	r3, [r2, #112]	; 0x70
 800a024:	e00b      	b.n	800a03e <HAL_RCC_OscConfig+0x376>
 800a026:	4b5c      	ldr	r3, [pc, #368]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 800a028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a02a:	4a5b      	ldr	r2, [pc, #364]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 800a02c:	f023 0301 	bic.w	r3, r3, #1
 800a030:	6713      	str	r3, [r2, #112]	; 0x70
 800a032:	4b59      	ldr	r3, [pc, #356]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 800a034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a036:	4a58      	ldr	r2, [pc, #352]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 800a038:	f023 0304 	bic.w	r3, r3, #4
 800a03c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d015      	beq.n	800a072 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a046:	f7fc fc13 	bl	8006870 <HAL_GetTick>
 800a04a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a04c:	e00a      	b.n	800a064 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a04e:	f7fc fc0f 	bl	8006870 <HAL_GetTick>
 800a052:	4602      	mov	r2, r0
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	1ad3      	subs	r3, r2, r3
 800a058:	f241 3288 	movw	r2, #5000	; 0x1388
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d901      	bls.n	800a064 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a060:	2303      	movs	r3, #3
 800a062:	e0d8      	b.n	800a216 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a064:	4b4c      	ldr	r3, [pc, #304]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 800a066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a068:	f003 0302 	and.w	r3, r3, #2
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d0ee      	beq.n	800a04e <HAL_RCC_OscConfig+0x386>
 800a070:	e014      	b.n	800a09c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a072:	f7fc fbfd 	bl	8006870 <HAL_GetTick>
 800a076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a078:	e00a      	b.n	800a090 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a07a:	f7fc fbf9 	bl	8006870 <HAL_GetTick>
 800a07e:	4602      	mov	r2, r0
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	1ad3      	subs	r3, r2, r3
 800a084:	f241 3288 	movw	r2, #5000	; 0x1388
 800a088:	4293      	cmp	r3, r2
 800a08a:	d901      	bls.n	800a090 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a08c:	2303      	movs	r3, #3
 800a08e:	e0c2      	b.n	800a216 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a090:	4b41      	ldr	r3, [pc, #260]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 800a092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a094:	f003 0302 	and.w	r3, r3, #2
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d1ee      	bne.n	800a07a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a09c:	7dfb      	ldrb	r3, [r7, #23]
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d105      	bne.n	800a0ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a0a2:	4b3d      	ldr	r3, [pc, #244]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 800a0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a6:	4a3c      	ldr	r2, [pc, #240]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 800a0a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a0ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	699b      	ldr	r3, [r3, #24]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	f000 80ae 	beq.w	800a214 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a0b8:	4b37      	ldr	r3, [pc, #220]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	f003 030c 	and.w	r3, r3, #12
 800a0c0:	2b08      	cmp	r3, #8
 800a0c2:	d06d      	beq.n	800a1a0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	699b      	ldr	r3, [r3, #24]
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d14b      	bne.n	800a164 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0cc:	4b32      	ldr	r3, [pc, #200]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a31      	ldr	r2, [pc, #196]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 800a0d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a0d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0d8:	f7fc fbca 	bl	8006870 <HAL_GetTick>
 800a0dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0de:	e008      	b.n	800a0f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0e0:	f7fc fbc6 	bl	8006870 <HAL_GetTick>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	1ad3      	subs	r3, r2, r3
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d901      	bls.n	800a0f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a0ee:	2303      	movs	r3, #3
 800a0f0:	e091      	b.n	800a216 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0f2:	4b29      	ldr	r3, [pc, #164]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1f0      	bne.n	800a0e0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	69da      	ldr	r2, [r3, #28]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6a1b      	ldr	r3, [r3, #32]
 800a106:	431a      	orrs	r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10c:	019b      	lsls	r3, r3, #6
 800a10e:	431a      	orrs	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a114:	085b      	lsrs	r3, r3, #1
 800a116:	3b01      	subs	r3, #1
 800a118:	041b      	lsls	r3, r3, #16
 800a11a:	431a      	orrs	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a120:	061b      	lsls	r3, r3, #24
 800a122:	431a      	orrs	r2, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a128:	071b      	lsls	r3, r3, #28
 800a12a:	491b      	ldr	r1, [pc, #108]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 800a12c:	4313      	orrs	r3, r2
 800a12e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a130:	4b19      	ldr	r3, [pc, #100]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a18      	ldr	r2, [pc, #96]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 800a136:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a13a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a13c:	f7fc fb98 	bl	8006870 <HAL_GetTick>
 800a140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a142:	e008      	b.n	800a156 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a144:	f7fc fb94 	bl	8006870 <HAL_GetTick>
 800a148:	4602      	mov	r2, r0
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	1ad3      	subs	r3, r2, r3
 800a14e:	2b02      	cmp	r3, #2
 800a150:	d901      	bls.n	800a156 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800a152:	2303      	movs	r3, #3
 800a154:	e05f      	b.n	800a216 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a156:	4b10      	ldr	r3, [pc, #64]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d0f0      	beq.n	800a144 <HAL_RCC_OscConfig+0x47c>
 800a162:	e057      	b.n	800a214 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a164:	4b0c      	ldr	r3, [pc, #48]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a0b      	ldr	r2, [pc, #44]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 800a16a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a16e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a170:	f7fc fb7e 	bl	8006870 <HAL_GetTick>
 800a174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a176:	e008      	b.n	800a18a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a178:	f7fc fb7a 	bl	8006870 <HAL_GetTick>
 800a17c:	4602      	mov	r2, r0
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	2b02      	cmp	r3, #2
 800a184:	d901      	bls.n	800a18a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800a186:	2303      	movs	r3, #3
 800a188:	e045      	b.n	800a216 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a18a:	4b03      	ldr	r3, [pc, #12]	; (800a198 <HAL_RCC_OscConfig+0x4d0>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1f0      	bne.n	800a178 <HAL_RCC_OscConfig+0x4b0>
 800a196:	e03d      	b.n	800a214 <HAL_RCC_OscConfig+0x54c>
 800a198:	40023800 	.word	0x40023800
 800a19c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a1a0:	4b1f      	ldr	r3, [pc, #124]	; (800a220 <HAL_RCC_OscConfig+0x558>)
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	699b      	ldr	r3, [r3, #24]
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d030      	beq.n	800a210 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d129      	bne.n	800a210 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d122      	bne.n	800a210 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a1ca:	68fa      	ldr	r2, [r7, #12]
 800a1cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a1d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d119      	bne.n	800a210 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e6:	085b      	lsrs	r3, r3, #1
 800a1e8:	3b01      	subs	r3, #1
 800a1ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d10f      	bne.n	800a210 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d107      	bne.n	800a210 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a20a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d001      	beq.n	800a214 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800a210:	2301      	movs	r3, #1
 800a212:	e000      	b.n	800a216 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	3718      	adds	r7, #24
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	40023800 	.word	0x40023800

0800a224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a22e:	2300      	movs	r3, #0
 800a230:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d101      	bne.n	800a23c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a238:	2301      	movs	r3, #1
 800a23a:	e0d0      	b.n	800a3de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a23c:	4b6a      	ldr	r3, [pc, #424]	; (800a3e8 <HAL_RCC_ClockConfig+0x1c4>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f003 030f 	and.w	r3, r3, #15
 800a244:	683a      	ldr	r2, [r7, #0]
 800a246:	429a      	cmp	r2, r3
 800a248:	d910      	bls.n	800a26c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a24a:	4b67      	ldr	r3, [pc, #412]	; (800a3e8 <HAL_RCC_ClockConfig+0x1c4>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f023 020f 	bic.w	r2, r3, #15
 800a252:	4965      	ldr	r1, [pc, #404]	; (800a3e8 <HAL_RCC_ClockConfig+0x1c4>)
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	4313      	orrs	r3, r2
 800a258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a25a:	4b63      	ldr	r3, [pc, #396]	; (800a3e8 <HAL_RCC_ClockConfig+0x1c4>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f003 030f 	and.w	r3, r3, #15
 800a262:	683a      	ldr	r2, [r7, #0]
 800a264:	429a      	cmp	r2, r3
 800a266:	d001      	beq.n	800a26c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a268:	2301      	movs	r3, #1
 800a26a:	e0b8      	b.n	800a3de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f003 0302 	and.w	r3, r3, #2
 800a274:	2b00      	cmp	r3, #0
 800a276:	d020      	beq.n	800a2ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f003 0304 	and.w	r3, r3, #4
 800a280:	2b00      	cmp	r3, #0
 800a282:	d005      	beq.n	800a290 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a284:	4b59      	ldr	r3, [pc, #356]	; (800a3ec <HAL_RCC_ClockConfig+0x1c8>)
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	4a58      	ldr	r2, [pc, #352]	; (800a3ec <HAL_RCC_ClockConfig+0x1c8>)
 800a28a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a28e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f003 0308 	and.w	r3, r3, #8
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d005      	beq.n	800a2a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a29c:	4b53      	ldr	r3, [pc, #332]	; (800a3ec <HAL_RCC_ClockConfig+0x1c8>)
 800a29e:	689b      	ldr	r3, [r3, #8]
 800a2a0:	4a52      	ldr	r2, [pc, #328]	; (800a3ec <HAL_RCC_ClockConfig+0x1c8>)
 800a2a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a2a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a2a8:	4b50      	ldr	r3, [pc, #320]	; (800a3ec <HAL_RCC_ClockConfig+0x1c8>)
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	494d      	ldr	r1, [pc, #308]	; (800a3ec <HAL_RCC_ClockConfig+0x1c8>)
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f003 0301 	and.w	r3, r3, #1
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d040      	beq.n	800a348 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d107      	bne.n	800a2de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a2ce:	4b47      	ldr	r3, [pc, #284]	; (800a3ec <HAL_RCC_ClockConfig+0x1c8>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d115      	bne.n	800a306 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e07f      	b.n	800a3de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	2b02      	cmp	r3, #2
 800a2e4:	d107      	bne.n	800a2f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a2e6:	4b41      	ldr	r3, [pc, #260]	; (800a3ec <HAL_RCC_ClockConfig+0x1c8>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d109      	bne.n	800a306 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e073      	b.n	800a3de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a2f6:	4b3d      	ldr	r3, [pc, #244]	; (800a3ec <HAL_RCC_ClockConfig+0x1c8>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f003 0302 	and.w	r3, r3, #2
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d101      	bne.n	800a306 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	e06b      	b.n	800a3de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a306:	4b39      	ldr	r3, [pc, #228]	; (800a3ec <HAL_RCC_ClockConfig+0x1c8>)
 800a308:	689b      	ldr	r3, [r3, #8]
 800a30a:	f023 0203 	bic.w	r2, r3, #3
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	4936      	ldr	r1, [pc, #216]	; (800a3ec <HAL_RCC_ClockConfig+0x1c8>)
 800a314:	4313      	orrs	r3, r2
 800a316:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a318:	f7fc faaa 	bl	8006870 <HAL_GetTick>
 800a31c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a31e:	e00a      	b.n	800a336 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a320:	f7fc faa6 	bl	8006870 <HAL_GetTick>
 800a324:	4602      	mov	r2, r0
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	1ad3      	subs	r3, r2, r3
 800a32a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a32e:	4293      	cmp	r3, r2
 800a330:	d901      	bls.n	800a336 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a332:	2303      	movs	r3, #3
 800a334:	e053      	b.n	800a3de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a336:	4b2d      	ldr	r3, [pc, #180]	; (800a3ec <HAL_RCC_ClockConfig+0x1c8>)
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	f003 020c 	and.w	r2, r3, #12
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	429a      	cmp	r2, r3
 800a346:	d1eb      	bne.n	800a320 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a348:	4b27      	ldr	r3, [pc, #156]	; (800a3e8 <HAL_RCC_ClockConfig+0x1c4>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f003 030f 	and.w	r3, r3, #15
 800a350:	683a      	ldr	r2, [r7, #0]
 800a352:	429a      	cmp	r2, r3
 800a354:	d210      	bcs.n	800a378 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a356:	4b24      	ldr	r3, [pc, #144]	; (800a3e8 <HAL_RCC_ClockConfig+0x1c4>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f023 020f 	bic.w	r2, r3, #15
 800a35e:	4922      	ldr	r1, [pc, #136]	; (800a3e8 <HAL_RCC_ClockConfig+0x1c4>)
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	4313      	orrs	r3, r2
 800a364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a366:	4b20      	ldr	r3, [pc, #128]	; (800a3e8 <HAL_RCC_ClockConfig+0x1c4>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f003 030f 	and.w	r3, r3, #15
 800a36e:	683a      	ldr	r2, [r7, #0]
 800a370:	429a      	cmp	r2, r3
 800a372:	d001      	beq.n	800a378 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a374:	2301      	movs	r3, #1
 800a376:	e032      	b.n	800a3de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f003 0304 	and.w	r3, r3, #4
 800a380:	2b00      	cmp	r3, #0
 800a382:	d008      	beq.n	800a396 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a384:	4b19      	ldr	r3, [pc, #100]	; (800a3ec <HAL_RCC_ClockConfig+0x1c8>)
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	4916      	ldr	r1, [pc, #88]	; (800a3ec <HAL_RCC_ClockConfig+0x1c8>)
 800a392:	4313      	orrs	r3, r2
 800a394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f003 0308 	and.w	r3, r3, #8
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d009      	beq.n	800a3b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a3a2:	4b12      	ldr	r3, [pc, #72]	; (800a3ec <HAL_RCC_ClockConfig+0x1c8>)
 800a3a4:	689b      	ldr	r3, [r3, #8]
 800a3a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	691b      	ldr	r3, [r3, #16]
 800a3ae:	00db      	lsls	r3, r3, #3
 800a3b0:	490e      	ldr	r1, [pc, #56]	; (800a3ec <HAL_RCC_ClockConfig+0x1c8>)
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a3b6:	f000 f821 	bl	800a3fc <HAL_RCC_GetSysClockFreq>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	4b0b      	ldr	r3, [pc, #44]	; (800a3ec <HAL_RCC_ClockConfig+0x1c8>)
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	091b      	lsrs	r3, r3, #4
 800a3c2:	f003 030f 	and.w	r3, r3, #15
 800a3c6:	490a      	ldr	r1, [pc, #40]	; (800a3f0 <HAL_RCC_ClockConfig+0x1cc>)
 800a3c8:	5ccb      	ldrb	r3, [r1, r3]
 800a3ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a3ce:	4a09      	ldr	r2, [pc, #36]	; (800a3f4 <HAL_RCC_ClockConfig+0x1d0>)
 800a3d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a3d2:	4b09      	ldr	r3, [pc, #36]	; (800a3f8 <HAL_RCC_ClockConfig+0x1d4>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7fc fa06 	bl	80067e8 <HAL_InitTick>

  return HAL_OK;
 800a3dc:	2300      	movs	r3, #0
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	40023c00 	.word	0x40023c00
 800a3ec:	40023800 	.word	0x40023800
 800a3f0:	08019450 	.word	0x08019450
 800a3f4:	200004b0 	.word	0x200004b0
 800a3f8:	200004b4 	.word	0x200004b4

0800a3fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a3fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a400:	b090      	sub	sp, #64	; 0x40
 800a402:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a404:	2300      	movs	r3, #0
 800a406:	637b      	str	r3, [r7, #52]	; 0x34
 800a408:	2300      	movs	r3, #0
 800a40a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a40c:	2300      	movs	r3, #0
 800a40e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800a410:	2300      	movs	r3, #0
 800a412:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a414:	4b59      	ldr	r3, [pc, #356]	; (800a57c <HAL_RCC_GetSysClockFreq+0x180>)
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	f003 030c 	and.w	r3, r3, #12
 800a41c:	2b08      	cmp	r3, #8
 800a41e:	d00d      	beq.n	800a43c <HAL_RCC_GetSysClockFreq+0x40>
 800a420:	2b08      	cmp	r3, #8
 800a422:	f200 80a1 	bhi.w	800a568 <HAL_RCC_GetSysClockFreq+0x16c>
 800a426:	2b00      	cmp	r3, #0
 800a428:	d002      	beq.n	800a430 <HAL_RCC_GetSysClockFreq+0x34>
 800a42a:	2b04      	cmp	r3, #4
 800a42c:	d003      	beq.n	800a436 <HAL_RCC_GetSysClockFreq+0x3a>
 800a42e:	e09b      	b.n	800a568 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a430:	4b53      	ldr	r3, [pc, #332]	; (800a580 <HAL_RCC_GetSysClockFreq+0x184>)
 800a432:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a434:	e09b      	b.n	800a56e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a436:	4b53      	ldr	r3, [pc, #332]	; (800a584 <HAL_RCC_GetSysClockFreq+0x188>)
 800a438:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a43a:	e098      	b.n	800a56e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a43c:	4b4f      	ldr	r3, [pc, #316]	; (800a57c <HAL_RCC_GetSysClockFreq+0x180>)
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a444:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a446:	4b4d      	ldr	r3, [pc, #308]	; (800a57c <HAL_RCC_GetSysClockFreq+0x180>)
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d028      	beq.n	800a4a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a452:	4b4a      	ldr	r3, [pc, #296]	; (800a57c <HAL_RCC_GetSysClockFreq+0x180>)
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	099b      	lsrs	r3, r3, #6
 800a458:	2200      	movs	r2, #0
 800a45a:	623b      	str	r3, [r7, #32]
 800a45c:	627a      	str	r2, [r7, #36]	; 0x24
 800a45e:	6a3b      	ldr	r3, [r7, #32]
 800a460:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a464:	2100      	movs	r1, #0
 800a466:	4b47      	ldr	r3, [pc, #284]	; (800a584 <HAL_RCC_GetSysClockFreq+0x188>)
 800a468:	fb03 f201 	mul.w	r2, r3, r1
 800a46c:	2300      	movs	r3, #0
 800a46e:	fb00 f303 	mul.w	r3, r0, r3
 800a472:	4413      	add	r3, r2
 800a474:	4a43      	ldr	r2, [pc, #268]	; (800a584 <HAL_RCC_GetSysClockFreq+0x188>)
 800a476:	fba0 1202 	umull	r1, r2, r0, r2
 800a47a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a47c:	460a      	mov	r2, r1
 800a47e:	62ba      	str	r2, [r7, #40]	; 0x28
 800a480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a482:	4413      	add	r3, r2
 800a484:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a488:	2200      	movs	r2, #0
 800a48a:	61bb      	str	r3, [r7, #24]
 800a48c:	61fa      	str	r2, [r7, #28]
 800a48e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a492:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a496:	f7f5 ff2b 	bl	80002f0 <__aeabi_uldivmod>
 800a49a:	4602      	mov	r2, r0
 800a49c:	460b      	mov	r3, r1
 800a49e:	4613      	mov	r3, r2
 800a4a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4a2:	e053      	b.n	800a54c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a4a4:	4b35      	ldr	r3, [pc, #212]	; (800a57c <HAL_RCC_GetSysClockFreq+0x180>)
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	099b      	lsrs	r3, r3, #6
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	613b      	str	r3, [r7, #16]
 800a4ae:	617a      	str	r2, [r7, #20]
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a4b6:	f04f 0b00 	mov.w	fp, #0
 800a4ba:	4652      	mov	r2, sl
 800a4bc:	465b      	mov	r3, fp
 800a4be:	f04f 0000 	mov.w	r0, #0
 800a4c2:	f04f 0100 	mov.w	r1, #0
 800a4c6:	0159      	lsls	r1, r3, #5
 800a4c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a4cc:	0150      	lsls	r0, r2, #5
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	ebb2 080a 	subs.w	r8, r2, sl
 800a4d6:	eb63 090b 	sbc.w	r9, r3, fp
 800a4da:	f04f 0200 	mov.w	r2, #0
 800a4de:	f04f 0300 	mov.w	r3, #0
 800a4e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a4e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a4ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a4ee:	ebb2 0408 	subs.w	r4, r2, r8
 800a4f2:	eb63 0509 	sbc.w	r5, r3, r9
 800a4f6:	f04f 0200 	mov.w	r2, #0
 800a4fa:	f04f 0300 	mov.w	r3, #0
 800a4fe:	00eb      	lsls	r3, r5, #3
 800a500:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a504:	00e2      	lsls	r2, r4, #3
 800a506:	4614      	mov	r4, r2
 800a508:	461d      	mov	r5, r3
 800a50a:	eb14 030a 	adds.w	r3, r4, sl
 800a50e:	603b      	str	r3, [r7, #0]
 800a510:	eb45 030b 	adc.w	r3, r5, fp
 800a514:	607b      	str	r3, [r7, #4]
 800a516:	f04f 0200 	mov.w	r2, #0
 800a51a:	f04f 0300 	mov.w	r3, #0
 800a51e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a522:	4629      	mov	r1, r5
 800a524:	028b      	lsls	r3, r1, #10
 800a526:	4621      	mov	r1, r4
 800a528:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a52c:	4621      	mov	r1, r4
 800a52e:	028a      	lsls	r2, r1, #10
 800a530:	4610      	mov	r0, r2
 800a532:	4619      	mov	r1, r3
 800a534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a536:	2200      	movs	r2, #0
 800a538:	60bb      	str	r3, [r7, #8]
 800a53a:	60fa      	str	r2, [r7, #12]
 800a53c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a540:	f7f5 fed6 	bl	80002f0 <__aeabi_uldivmod>
 800a544:	4602      	mov	r2, r0
 800a546:	460b      	mov	r3, r1
 800a548:	4613      	mov	r3, r2
 800a54a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a54c:	4b0b      	ldr	r3, [pc, #44]	; (800a57c <HAL_RCC_GetSysClockFreq+0x180>)
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	0c1b      	lsrs	r3, r3, #16
 800a552:	f003 0303 	and.w	r3, r3, #3
 800a556:	3301      	adds	r3, #1
 800a558:	005b      	lsls	r3, r3, #1
 800a55a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800a55c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a560:	fbb2 f3f3 	udiv	r3, r2, r3
 800a564:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a566:	e002      	b.n	800a56e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a568:	4b05      	ldr	r3, [pc, #20]	; (800a580 <HAL_RCC_GetSysClockFreq+0x184>)
 800a56a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a56c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800a570:	4618      	mov	r0, r3
 800a572:	3740      	adds	r7, #64	; 0x40
 800a574:	46bd      	mov	sp, r7
 800a576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a57a:	bf00      	nop
 800a57c:	40023800 	.word	0x40023800
 800a580:	00f42400 	.word	0x00f42400
 800a584:	017d7840 	.word	0x017d7840

0800a588 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a588:	b480      	push	{r7}
 800a58a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a58c:	4b03      	ldr	r3, [pc, #12]	; (800a59c <HAL_RCC_GetHCLKFreq+0x14>)
 800a58e:	681b      	ldr	r3, [r3, #0]
}
 800a590:	4618      	mov	r0, r3
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	200004b0 	.word	0x200004b0

0800a5a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a5a4:	f7ff fff0 	bl	800a588 <HAL_RCC_GetHCLKFreq>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	4b05      	ldr	r3, [pc, #20]	; (800a5c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	0a9b      	lsrs	r3, r3, #10
 800a5b0:	f003 0307 	and.w	r3, r3, #7
 800a5b4:	4903      	ldr	r1, [pc, #12]	; (800a5c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a5b6:	5ccb      	ldrb	r3, [r1, r3]
 800a5b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	40023800 	.word	0x40023800
 800a5c4:	08019460 	.word	0x08019460

0800a5c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a5cc:	f7ff ffdc 	bl	800a588 <HAL_RCC_GetHCLKFreq>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	4b05      	ldr	r3, [pc, #20]	; (800a5e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	0b5b      	lsrs	r3, r3, #13
 800a5d8:	f003 0307 	and.w	r3, r3, #7
 800a5dc:	4903      	ldr	r1, [pc, #12]	; (800a5ec <HAL_RCC_GetPCLK2Freq+0x24>)
 800a5de:	5ccb      	ldrb	r3, [r1, r3]
 800a5e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	40023800 	.word	0x40023800
 800a5ec:	08019460 	.word	0x08019460

0800a5f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b088      	sub	sp, #32
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800a600:	2300      	movs	r3, #0
 800a602:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800a604:	2300      	movs	r3, #0
 800a606:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800a608:	2300      	movs	r3, #0
 800a60a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f003 0301 	and.w	r3, r3, #1
 800a614:	2b00      	cmp	r3, #0
 800a616:	d012      	beq.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a618:	4b69      	ldr	r3, [pc, #420]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	4a68      	ldr	r2, [pc, #416]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a61e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a622:	6093      	str	r3, [r2, #8]
 800a624:	4b66      	ldr	r3, [pc, #408]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a626:	689a      	ldr	r2, [r3, #8]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a62c:	4964      	ldr	r1, [pc, #400]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a62e:	4313      	orrs	r3, r2
 800a630:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a636:	2b00      	cmp	r3, #0
 800a638:	d101      	bne.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800a63a:	2301      	movs	r3, #1
 800a63c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a646:	2b00      	cmp	r3, #0
 800a648:	d017      	beq.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a64a:	4b5d      	ldr	r3, [pc, #372]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a64c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a650:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a658:	4959      	ldr	r1, [pc, #356]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a65a:	4313      	orrs	r3, r2
 800a65c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a664:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a668:	d101      	bne.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800a66a:	2301      	movs	r3, #1
 800a66c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a672:	2b00      	cmp	r3, #0
 800a674:	d101      	bne.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800a676:	2301      	movs	r3, #1
 800a678:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a682:	2b00      	cmp	r3, #0
 800a684:	d017      	beq.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a686:	4b4e      	ldr	r3, [pc, #312]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a68c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a694:	494a      	ldr	r1, [pc, #296]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a696:	4313      	orrs	r3, r2
 800a698:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a6a4:	d101      	bne.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d101      	bne.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d001      	beq.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f003 0320 	and.w	r3, r3, #32
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	f000 808b 	beq.w	800a7ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a6d4:	4b3a      	ldr	r3, [pc, #232]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a6d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d8:	4a39      	ldr	r2, [pc, #228]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a6da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6de:	6413      	str	r3, [r2, #64]	; 0x40
 800a6e0:	4b37      	ldr	r3, [pc, #220]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a6e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6e8:	60bb      	str	r3, [r7, #8]
 800a6ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a6ec:	4b35      	ldr	r3, [pc, #212]	; (800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a34      	ldr	r2, [pc, #208]	; (800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a6f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6f8:	f7fc f8ba 	bl	8006870 <HAL_GetTick>
 800a6fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a6fe:	e008      	b.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a700:	f7fc f8b6 	bl	8006870 <HAL_GetTick>
 800a704:	4602      	mov	r2, r0
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	1ad3      	subs	r3, r2, r3
 800a70a:	2b64      	cmp	r3, #100	; 0x64
 800a70c:	d901      	bls.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800a70e:	2303      	movs	r3, #3
 800a710:	e38f      	b.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a712:	4b2c      	ldr	r3, [pc, #176]	; (800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d0f0      	beq.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a71e:	4b28      	ldr	r3, [pc, #160]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a726:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d035      	beq.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a736:	693a      	ldr	r2, [r7, #16]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d02e      	beq.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a73c:	4b20      	ldr	r3, [pc, #128]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a73e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a744:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a746:	4b1e      	ldr	r3, [pc, #120]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a74a:	4a1d      	ldr	r2, [pc, #116]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a74c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a750:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a752:	4b1b      	ldr	r3, [pc, #108]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a756:	4a1a      	ldr	r2, [pc, #104]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a75c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800a75e:	4a18      	ldr	r2, [pc, #96]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a764:	4b16      	ldr	r3, [pc, #88]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a768:	f003 0301 	and.w	r3, r3, #1
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d114      	bne.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a770:	f7fc f87e 	bl	8006870 <HAL_GetTick>
 800a774:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a776:	e00a      	b.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a778:	f7fc f87a 	bl	8006870 <HAL_GetTick>
 800a77c:	4602      	mov	r2, r0
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	1ad3      	subs	r3, r2, r3
 800a782:	f241 3288 	movw	r2, #5000	; 0x1388
 800a786:	4293      	cmp	r3, r2
 800a788:	d901      	bls.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800a78a:	2303      	movs	r3, #3
 800a78c:	e351      	b.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a78e:	4b0c      	ldr	r3, [pc, #48]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a792:	f003 0302 	and.w	r3, r3, #2
 800a796:	2b00      	cmp	r3, #0
 800a798:	d0ee      	beq.n	800a778 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a79e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7a6:	d111      	bne.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800a7a8:	4b05      	ldr	r3, [pc, #20]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a7b4:	4b04      	ldr	r3, [pc, #16]	; (800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800a7b6:	400b      	ands	r3, r1
 800a7b8:	4901      	ldr	r1, [pc, #4]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	608b      	str	r3, [r1, #8]
 800a7be:	e00b      	b.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800a7c0:	40023800 	.word	0x40023800
 800a7c4:	40007000 	.word	0x40007000
 800a7c8:	0ffffcff 	.word	0x0ffffcff
 800a7cc:	4bac      	ldr	r3, [pc, #688]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a7ce:	689b      	ldr	r3, [r3, #8]
 800a7d0:	4aab      	ldr	r2, [pc, #684]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a7d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a7d6:	6093      	str	r3, [r2, #8]
 800a7d8:	4ba9      	ldr	r3, [pc, #676]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a7da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a7e4:	49a6      	ldr	r1, [pc, #664]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f003 0310 	and.w	r3, r3, #16
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d010      	beq.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a7f6:	4ba2      	ldr	r3, [pc, #648]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a7f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7fc:	4aa0      	ldr	r2, [pc, #640]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a7fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a802:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800a806:	4b9e      	ldr	r3, [pc, #632]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a808:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a810:	499b      	ldr	r1, [pc, #620]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a812:	4313      	orrs	r3, r2
 800a814:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a820:	2b00      	cmp	r3, #0
 800a822:	d00a      	beq.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a824:	4b96      	ldr	r3, [pc, #600]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a82a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a832:	4993      	ldr	r1, [pc, #588]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a834:	4313      	orrs	r3, r2
 800a836:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00a      	beq.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a846:	4b8e      	ldr	r3, [pc, #568]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a84c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a854:	498a      	ldr	r1, [pc, #552]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a856:	4313      	orrs	r3, r2
 800a858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a864:	2b00      	cmp	r3, #0
 800a866:	d00a      	beq.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a868:	4b85      	ldr	r3, [pc, #532]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a86a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a86e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a876:	4982      	ldr	r1, [pc, #520]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a878:	4313      	orrs	r3, r2
 800a87a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00a      	beq.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a88a:	4b7d      	ldr	r3, [pc, #500]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a88c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a890:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a898:	4979      	ldr	r1, [pc, #484]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a89a:	4313      	orrs	r3, r2
 800a89c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d00a      	beq.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a8ac:	4b74      	ldr	r3, [pc, #464]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a8ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8b2:	f023 0203 	bic.w	r2, r3, #3
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8ba:	4971      	ldr	r1, [pc, #452]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d00a      	beq.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a8ce:	4b6c      	ldr	r3, [pc, #432]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a8d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8d4:	f023 020c 	bic.w	r2, r3, #12
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8dc:	4968      	ldr	r1, [pc, #416]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d00a      	beq.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a8f0:	4b63      	ldr	r3, [pc, #396]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a8f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8fe:	4960      	ldr	r1, [pc, #384]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a900:	4313      	orrs	r3, r2
 800a902:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d00a      	beq.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a912:	4b5b      	ldr	r3, [pc, #364]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a918:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a920:	4957      	ldr	r1, [pc, #348]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a922:	4313      	orrs	r3, r2
 800a924:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a930:	2b00      	cmp	r3, #0
 800a932:	d00a      	beq.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a934:	4b52      	ldr	r3, [pc, #328]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a93a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a942:	494f      	ldr	r1, [pc, #316]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a944:	4313      	orrs	r3, r2
 800a946:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a952:	2b00      	cmp	r3, #0
 800a954:	d00a      	beq.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800a956:	4b4a      	ldr	r3, [pc, #296]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a95c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a964:	4946      	ldr	r1, [pc, #280]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a966:	4313      	orrs	r3, r2
 800a968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a974:	2b00      	cmp	r3, #0
 800a976:	d00a      	beq.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800a978:	4b41      	ldr	r3, [pc, #260]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a97a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a97e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a986:	493e      	ldr	r1, [pc, #248]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a988:	4313      	orrs	r3, r2
 800a98a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a996:	2b00      	cmp	r3, #0
 800a998:	d00a      	beq.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800a99a:	4b39      	ldr	r3, [pc, #228]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a99c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9a8:	4935      	ldr	r1, [pc, #212]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00a      	beq.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a9bc:	4b30      	ldr	r3, [pc, #192]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a9be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9ca:	492d      	ldr	r1, [pc, #180]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d011      	beq.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a9de:	4b28      	ldr	r3, [pc, #160]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a9e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9ec:	4924      	ldr	r1, [pc, #144]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9fc:	d101      	bne.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f003 0308 	and.w	r3, r3, #8
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d001      	beq.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d00a      	beq.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800aa1e:	4b18      	ldr	r3, [pc, #96]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800aa20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa24:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa2c:	4914      	ldr	r1, [pc, #80]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00b      	beq.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800aa40:	4b0f      	ldr	r3, [pc, #60]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800aa42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa50:	490b      	ldr	r1, [pc, #44]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800aa52:	4313      	orrs	r3, r2
 800aa54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d00f      	beq.n	800aa84 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800aa64:	4b06      	ldr	r3, [pc, #24]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800aa66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa6a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa74:	4902      	ldr	r1, [pc, #8]	; (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800aa76:	4313      	orrs	r3, r2
 800aa78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800aa7c:	e002      	b.n	800aa84 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800aa7e:	bf00      	nop
 800aa80:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d00b      	beq.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800aa90:	4b8a      	ldr	r3, [pc, #552]	; (800acbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800aa92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa96:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaa0:	4986      	ldr	r1, [pc, #536]	; (800acbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d00b      	beq.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800aab4:	4b81      	ldr	r3, [pc, #516]	; (800acbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800aab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aaba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aac4:	497d      	ldr	r1, [pc, #500]	; (800acbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800aac6:	4313      	orrs	r3, r2
 800aac8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d006      	beq.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aada:	2b00      	cmp	r3, #0
 800aadc:	f000 80d6 	beq.w	800ac8c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800aae0:	4b76      	ldr	r3, [pc, #472]	; (800acbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a75      	ldr	r2, [pc, #468]	; (800acbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800aae6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800aaea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aaec:	f7fb fec0 	bl	8006870 <HAL_GetTick>
 800aaf0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800aaf2:	e008      	b.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800aaf4:	f7fb febc 	bl	8006870 <HAL_GetTick>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	1ad3      	subs	r3, r2, r3
 800aafe:	2b64      	cmp	r3, #100	; 0x64
 800ab00:	d901      	bls.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ab02:	2303      	movs	r3, #3
 800ab04:	e195      	b.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ab06:	4b6d      	ldr	r3, [pc, #436]	; (800acbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d1f0      	bne.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f003 0301 	and.w	r3, r3, #1
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d021      	beq.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d11d      	bne.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800ab26:	4b65      	ldr	r3, [pc, #404]	; (800acbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ab28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab2c:	0c1b      	lsrs	r3, r3, #16
 800ab2e:	f003 0303 	and.w	r3, r3, #3
 800ab32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ab34:	4b61      	ldr	r3, [pc, #388]	; (800acbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ab36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab3a:	0e1b      	lsrs	r3, r3, #24
 800ab3c:	f003 030f 	and.w	r3, r3, #15
 800ab40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	019a      	lsls	r2, r3, #6
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	041b      	lsls	r3, r3, #16
 800ab4c:	431a      	orrs	r2, r3
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	061b      	lsls	r3, r3, #24
 800ab52:	431a      	orrs	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	071b      	lsls	r3, r3, #28
 800ab5a:	4958      	ldr	r1, [pc, #352]	; (800acbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d004      	beq.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab76:	d00a      	beq.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d02e      	beq.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab8c:	d129      	bne.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800ab8e:	4b4b      	ldr	r3, [pc, #300]	; (800acbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ab90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab94:	0c1b      	lsrs	r3, r3, #16
 800ab96:	f003 0303 	and.w	r3, r3, #3
 800ab9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ab9c:	4b47      	ldr	r3, [pc, #284]	; (800acbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ab9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aba2:	0f1b      	lsrs	r3, r3, #28
 800aba4:	f003 0307 	and.w	r3, r3, #7
 800aba8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	019a      	lsls	r2, r3, #6
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	041b      	lsls	r3, r3, #16
 800abb4:	431a      	orrs	r2, r3
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	061b      	lsls	r3, r3, #24
 800abbc:	431a      	orrs	r2, r3
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	071b      	lsls	r3, r3, #28
 800abc2:	493e      	ldr	r1, [pc, #248]	; (800acbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800abc4:	4313      	orrs	r3, r2
 800abc6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800abca:	4b3c      	ldr	r3, [pc, #240]	; (800acbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800abcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abd0:	f023 021f 	bic.w	r2, r3, #31
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd8:	3b01      	subs	r3, #1
 800abda:	4938      	ldr	r1, [pc, #224]	; (800acbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800abdc:	4313      	orrs	r3, r2
 800abde:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800abea:	2b00      	cmp	r3, #0
 800abec:	d01d      	beq.n	800ac2a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800abee:	4b33      	ldr	r3, [pc, #204]	; (800acbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800abf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abf4:	0e1b      	lsrs	r3, r3, #24
 800abf6:	f003 030f 	and.w	r3, r3, #15
 800abfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800abfc:	4b2f      	ldr	r3, [pc, #188]	; (800acbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800abfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac02:	0f1b      	lsrs	r3, r3, #28
 800ac04:	f003 0307 	and.w	r3, r3, #7
 800ac08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	019a      	lsls	r2, r3, #6
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	691b      	ldr	r3, [r3, #16]
 800ac14:	041b      	lsls	r3, r3, #16
 800ac16:	431a      	orrs	r2, r3
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	061b      	lsls	r3, r3, #24
 800ac1c:	431a      	orrs	r2, r3
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	071b      	lsls	r3, r3, #28
 800ac22:	4926      	ldr	r1, [pc, #152]	; (800acbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ac24:	4313      	orrs	r3, r2
 800ac26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d011      	beq.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	019a      	lsls	r2, r3, #6
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	691b      	ldr	r3, [r3, #16]
 800ac40:	041b      	lsls	r3, r3, #16
 800ac42:	431a      	orrs	r2, r3
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	68db      	ldr	r3, [r3, #12]
 800ac48:	061b      	lsls	r3, r3, #24
 800ac4a:	431a      	orrs	r2, r3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	689b      	ldr	r3, [r3, #8]
 800ac50:	071b      	lsls	r3, r3, #28
 800ac52:	491a      	ldr	r1, [pc, #104]	; (800acbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ac54:	4313      	orrs	r3, r2
 800ac56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ac5a:	4b18      	ldr	r3, [pc, #96]	; (800acbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a17      	ldr	r2, [pc, #92]	; (800acbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ac60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ac64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac66:	f7fb fe03 	bl	8006870 <HAL_GetTick>
 800ac6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ac6c:	e008      	b.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ac6e:	f7fb fdff 	bl	8006870 <HAL_GetTick>
 800ac72:	4602      	mov	r2, r0
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	1ad3      	subs	r3, r2, r3
 800ac78:	2b64      	cmp	r3, #100	; 0x64
 800ac7a:	d901      	bls.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ac7c:	2303      	movs	r3, #3
 800ac7e:	e0d8      	b.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ac80:	4b0e      	ldr	r3, [pc, #56]	; (800acbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d0f0      	beq.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	f040 80ce 	bne.w	800ae30 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ac94:	4b09      	ldr	r3, [pc, #36]	; (800acbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a08      	ldr	r2, [pc, #32]	; (800acbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ac9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aca0:	f7fb fde6 	bl	8006870 <HAL_GetTick>
 800aca4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800aca6:	e00b      	b.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800aca8:	f7fb fde2 	bl	8006870 <HAL_GetTick>
 800acac:	4602      	mov	r2, r0
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	1ad3      	subs	r3, r2, r3
 800acb2:	2b64      	cmp	r3, #100	; 0x64
 800acb4:	d904      	bls.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800acb6:	2303      	movs	r3, #3
 800acb8:	e0bb      	b.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800acba:	bf00      	nop
 800acbc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800acc0:	4b5e      	ldr	r3, [pc, #376]	; (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800acc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800accc:	d0ec      	beq.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d003      	beq.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d009      	beq.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800acea:	2b00      	cmp	r3, #0
 800acec:	d02e      	beq.n	800ad4c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d12a      	bne.n	800ad4c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800acf6:	4b51      	ldr	r3, [pc, #324]	; (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800acf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acfc:	0c1b      	lsrs	r3, r3, #16
 800acfe:	f003 0303 	and.w	r3, r3, #3
 800ad02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ad04:	4b4d      	ldr	r3, [pc, #308]	; (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ad06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad0a:	0f1b      	lsrs	r3, r3, #28
 800ad0c:	f003 0307 	and.w	r3, r3, #7
 800ad10:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	695b      	ldr	r3, [r3, #20]
 800ad16:	019a      	lsls	r2, r3, #6
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	041b      	lsls	r3, r3, #16
 800ad1c:	431a      	orrs	r2, r3
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	699b      	ldr	r3, [r3, #24]
 800ad22:	061b      	lsls	r3, r3, #24
 800ad24:	431a      	orrs	r2, r3
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	071b      	lsls	r3, r3, #28
 800ad2a:	4944      	ldr	r1, [pc, #272]	; (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ad2c:	4313      	orrs	r3, r2
 800ad2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ad32:	4b42      	ldr	r3, [pc, #264]	; (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ad34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad38:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad40:	3b01      	subs	r3, #1
 800ad42:	021b      	lsls	r3, r3, #8
 800ad44:	493d      	ldr	r1, [pc, #244]	; (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ad46:	4313      	orrs	r3, r2
 800ad48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d022      	beq.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad60:	d11d      	bne.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ad62:	4b36      	ldr	r3, [pc, #216]	; (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ad64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad68:	0e1b      	lsrs	r3, r3, #24
 800ad6a:	f003 030f 	and.w	r3, r3, #15
 800ad6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ad70:	4b32      	ldr	r3, [pc, #200]	; (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ad72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad76:	0f1b      	lsrs	r3, r3, #28
 800ad78:	f003 0307 	and.w	r3, r3, #7
 800ad7c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	695b      	ldr	r3, [r3, #20]
 800ad82:	019a      	lsls	r2, r3, #6
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6a1b      	ldr	r3, [r3, #32]
 800ad88:	041b      	lsls	r3, r3, #16
 800ad8a:	431a      	orrs	r2, r3
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	061b      	lsls	r3, r3, #24
 800ad90:	431a      	orrs	r2, r3
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	071b      	lsls	r3, r3, #28
 800ad96:	4929      	ldr	r1, [pc, #164]	; (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f003 0308 	and.w	r3, r3, #8
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d028      	beq.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800adaa:	4b24      	ldr	r3, [pc, #144]	; (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800adac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adb0:	0e1b      	lsrs	r3, r3, #24
 800adb2:	f003 030f 	and.w	r3, r3, #15
 800adb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800adb8:	4b20      	ldr	r3, [pc, #128]	; (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800adba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adbe:	0c1b      	lsrs	r3, r3, #16
 800adc0:	f003 0303 	and.w	r3, r3, #3
 800adc4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	695b      	ldr	r3, [r3, #20]
 800adca:	019a      	lsls	r2, r3, #6
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	041b      	lsls	r3, r3, #16
 800add0:	431a      	orrs	r2, r3
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	061b      	lsls	r3, r3, #24
 800add6:	431a      	orrs	r2, r3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	69db      	ldr	r3, [r3, #28]
 800addc:	071b      	lsls	r3, r3, #28
 800adde:	4917      	ldr	r1, [pc, #92]	; (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ade0:	4313      	orrs	r3, r2
 800ade2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800ade6:	4b15      	ldr	r3, [pc, #84]	; (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ade8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf4:	4911      	ldr	r1, [pc, #68]	; (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800adf6:	4313      	orrs	r3, r2
 800adf8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800adfc:	4b0f      	ldr	r3, [pc, #60]	; (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4a0e      	ldr	r2, [pc, #56]	; (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ae02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae08:	f7fb fd32 	bl	8006870 <HAL_GetTick>
 800ae0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ae0e:	e008      	b.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ae10:	f7fb fd2e 	bl	8006870 <HAL_GetTick>
 800ae14:	4602      	mov	r2, r0
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	1ad3      	subs	r3, r2, r3
 800ae1a:	2b64      	cmp	r3, #100	; 0x64
 800ae1c:	d901      	bls.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ae1e:	2303      	movs	r3, #3
 800ae20:	e007      	b.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ae22:	4b06      	ldr	r3, [pc, #24]	; (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae2e:	d1ef      	bne.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800ae30:	2300      	movs	r3, #0
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3720      	adds	r7, #32
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	40023800 	.word	0x40023800

0800ae40 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d101      	bne.n	800ae52 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	e081      	b.n	800af56 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	7f5b      	ldrb	r3, [r3, #29]
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d105      	bne.n	800ae68 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f7fa fb8c 	bl	8005580 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2202      	movs	r2, #2
 800ae6c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	22ca      	movs	r2, #202	; 0xca
 800ae74:	625a      	str	r2, [r3, #36]	; 0x24
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2253      	movs	r2, #83	; 0x53
 800ae7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 faac 	bl	800b3dc <RTC_EnterInitMode>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d008      	beq.n	800ae9c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	22ff      	movs	r2, #255	; 0xff
 800ae90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2204      	movs	r2, #4
 800ae96:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	e05c      	b.n	800af56 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	6899      	ldr	r1, [r3, #8]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681a      	ldr	r2, [r3, #0]
 800aea6:	4b2e      	ldr	r3, [pc, #184]	; (800af60 <HAL_RTC_Init+0x120>)
 800aea8:	400b      	ands	r3, r1
 800aeaa:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	6899      	ldr	r1, [r3, #8]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	685a      	ldr	r2, [r3, #4]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	691b      	ldr	r3, [r3, #16]
 800aeba:	431a      	orrs	r2, r3
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	695b      	ldr	r3, [r3, #20]
 800aec0:	431a      	orrs	r2, r3
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	430a      	orrs	r2, r1
 800aec8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	68d2      	ldr	r2, [r2, #12]
 800aed2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	6919      	ldr	r1, [r3, #16]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	689b      	ldr	r3, [r3, #8]
 800aede:	041a      	lsls	r2, r3, #16
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	430a      	orrs	r2, r1
 800aee6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	68da      	ldr	r2, [r3, #12]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aef6:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	689b      	ldr	r3, [r3, #8]
 800aefe:	f003 0320 	and.w	r3, r3, #32
 800af02:	2b00      	cmp	r3, #0
 800af04:	d10e      	bne.n	800af24 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 fa40 	bl	800b38c <HAL_RTC_WaitForSynchro>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d008      	beq.n	800af24 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	22ff      	movs	r2, #255	; 0xff
 800af18:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2204      	movs	r2, #4
 800af1e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	e018      	b.n	800af56 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f022 0208 	bic.w	r2, r2, #8
 800af32:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	699a      	ldr	r2, [r3, #24]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	430a      	orrs	r2, r1
 800af44:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	22ff      	movs	r2, #255	; 0xff
 800af4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2201      	movs	r2, #1
 800af52:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800af54:	2300      	movs	r3, #0
  }
}
 800af56:	4618      	mov	r0, r3
 800af58:	3708      	adds	r7, #8
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	ff8fffbf 	.word	0xff8fffbf

0800af64 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800af64:	b590      	push	{r4, r7, lr}
 800af66:	b087      	sub	sp, #28
 800af68:	af00      	add	r7, sp, #0
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	60b9      	str	r1, [r7, #8]
 800af6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800af70:	2300      	movs	r3, #0
 800af72:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	7f1b      	ldrb	r3, [r3, #28]
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d101      	bne.n	800af80 <HAL_RTC_SetTime+0x1c>
 800af7c:	2302      	movs	r3, #2
 800af7e:	e0a8      	b.n	800b0d2 <HAL_RTC_SetTime+0x16e>
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2201      	movs	r2, #1
 800af84:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2202      	movs	r2, #2
 800af8a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d126      	bne.n	800afe0 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	689b      	ldr	r3, [r3, #8]
 800af98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d102      	bne.n	800afa6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	2200      	movs	r2, #0
 800afa4:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	4618      	mov	r0, r3
 800afac:	f000 fa42 	bl	800b434 <RTC_ByteToBcd2>
 800afb0:	4603      	mov	r3, r0
 800afb2:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	785b      	ldrb	r3, [r3, #1]
 800afb8:	4618      	mov	r0, r3
 800afba:	f000 fa3b 	bl	800b434 <RTC_ByteToBcd2>
 800afbe:	4603      	mov	r3, r0
 800afc0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800afc2:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	789b      	ldrb	r3, [r3, #2]
 800afc8:	4618      	mov	r0, r3
 800afca:	f000 fa33 	bl	800b434 <RTC_ByteToBcd2>
 800afce:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800afd0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	7b1b      	ldrb	r3, [r3, #12]
 800afd8:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800afda:	4313      	orrs	r3, r2
 800afdc:	617b      	str	r3, [r7, #20]
 800afde:	e018      	b.n	800b012 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	689b      	ldr	r3, [r3, #8]
 800afe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afea:	2b00      	cmp	r3, #0
 800afec:	d102      	bne.n	800aff4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	2200      	movs	r2, #0
 800aff2:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	785b      	ldrb	r3, [r3, #1]
 800affe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800b000:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800b002:	68ba      	ldr	r2, [r7, #8]
 800b004:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800b006:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	7b1b      	ldrb	r3, [r3, #12]
 800b00c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800b00e:	4313      	orrs	r3, r2
 800b010:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	22ca      	movs	r2, #202	; 0xca
 800b018:	625a      	str	r2, [r3, #36]	; 0x24
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	2253      	movs	r2, #83	; 0x53
 800b020:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	f000 f9da 	bl	800b3dc <RTC_EnterInitMode>
 800b028:	4603      	mov	r3, r0
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d00b      	beq.n	800b046 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	22ff      	movs	r2, #255	; 0xff
 800b034:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2204      	movs	r2, #4
 800b03a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2200      	movs	r2, #0
 800b040:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800b042:	2301      	movs	r3, #1
 800b044:	e045      	b.n	800b0d2 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	6979      	ldr	r1, [r7, #20]
 800b04c:	4b23      	ldr	r3, [pc, #140]	; (800b0dc <HAL_RTC_SetTime+0x178>)
 800b04e:	400b      	ands	r3, r1
 800b050:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	689a      	ldr	r2, [r3, #8]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b060:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	6899      	ldr	r1, [r3, #8]
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	691a      	ldr	r2, [r3, #16]
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	695b      	ldr	r3, [r3, #20]
 800b070:	431a      	orrs	r2, r3
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	430a      	orrs	r2, r1
 800b078:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	68da      	ldr	r2, [r3, #12]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b088:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	f003 0320 	and.w	r3, r3, #32
 800b094:	2b00      	cmp	r3, #0
 800b096:	d111      	bne.n	800b0bc <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	f000 f977 	bl	800b38c <HAL_RTC_WaitForSynchro>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d00b      	beq.n	800b0bc <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	22ff      	movs	r2, #255	; 0xff
 800b0aa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2204      	movs	r2, #4
 800b0b0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	e00a      	b.n	800b0d2 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	22ff      	movs	r2, #255	; 0xff
 800b0c2:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800b0d0:	2300      	movs	r3, #0
  }
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	371c      	adds	r7, #28
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd90      	pop	{r4, r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	007f7f7f 	.word	0x007f7f7f

0800b0e0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b086      	sub	sp, #24
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	60f8      	str	r0, [r7, #12]
 800b0e8:	60b9      	str	r1, [r7, #8]
 800b0ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	691b      	ldr	r3, [r3, #16]
 800b100:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	681a      	ldr	r2, [r3, #0]
 800b10e:	4b22      	ldr	r3, [pc, #136]	; (800b198 <HAL_RTC_GetTime+0xb8>)
 800b110:	4013      	ands	r3, r2
 800b112:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	0c1b      	lsrs	r3, r3, #16
 800b118:	b2db      	uxtb	r3, r3
 800b11a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b11e:	b2da      	uxtb	r2, r3
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	0a1b      	lsrs	r3, r3, #8
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b12e:	b2da      	uxtb	r2, r3
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	b2db      	uxtb	r3, r3
 800b138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b13c:	b2da      	uxtb	r2, r3
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	0c1b      	lsrs	r3, r3, #16
 800b146:	b2db      	uxtb	r3, r3
 800b148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b14c:	b2da      	uxtb	r2, r3
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d11a      	bne.n	800b18e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	4618      	mov	r0, r3
 800b15e:	f000 f987 	bl	800b470 <RTC_Bcd2ToByte>
 800b162:	4603      	mov	r3, r0
 800b164:	461a      	mov	r2, r3
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	785b      	ldrb	r3, [r3, #1]
 800b16e:	4618      	mov	r0, r3
 800b170:	f000 f97e 	bl	800b470 <RTC_Bcd2ToByte>
 800b174:	4603      	mov	r3, r0
 800b176:	461a      	mov	r2, r3
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	789b      	ldrb	r3, [r3, #2]
 800b180:	4618      	mov	r0, r3
 800b182:	f000 f975 	bl	800b470 <RTC_Bcd2ToByte>
 800b186:	4603      	mov	r3, r0
 800b188:	461a      	mov	r2, r3
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b18e:	2300      	movs	r3, #0
}
 800b190:	4618      	mov	r0, r3
 800b192:	3718      	adds	r7, #24
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}
 800b198:	007f7f7f 	.word	0x007f7f7f

0800b19c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b19c:	b590      	push	{r4, r7, lr}
 800b19e:	b087      	sub	sp, #28
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	60f8      	str	r0, [r7, #12]
 800b1a4:	60b9      	str	r1, [r7, #8]
 800b1a6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	7f1b      	ldrb	r3, [r3, #28]
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d101      	bne.n	800b1b8 <HAL_RTC_SetDate+0x1c>
 800b1b4:	2302      	movs	r3, #2
 800b1b6:	e092      	b.n	800b2de <HAL_RTC_SetDate+0x142>
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2202      	movs	r2, #2
 800b1c2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d10e      	bne.n	800b1e8 <HAL_RTC_SetDate+0x4c>
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	785b      	ldrb	r3, [r3, #1]
 800b1ce:	f003 0310 	and.w	r3, r3, #16
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d008      	beq.n	800b1e8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	785b      	ldrb	r3, [r3, #1]
 800b1da:	f023 0310 	bic.w	r3, r3, #16
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	330a      	adds	r3, #10
 800b1e2:	b2da      	uxtb	r2, r3
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d11c      	bne.n	800b228 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	78db      	ldrb	r3, [r3, #3]
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f000 f91e 	bl	800b434 <RTC_ByteToBcd2>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	785b      	ldrb	r3, [r3, #1]
 800b200:	4618      	mov	r0, r3
 800b202:	f000 f917 	bl	800b434 <RTC_ByteToBcd2>
 800b206:	4603      	mov	r3, r0
 800b208:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800b20a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	789b      	ldrb	r3, [r3, #2]
 800b210:	4618      	mov	r0, r3
 800b212:	f000 f90f 	bl	800b434 <RTC_ByteToBcd2>
 800b216:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800b218:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800b222:	4313      	orrs	r3, r2
 800b224:	617b      	str	r3, [r7, #20]
 800b226:	e00e      	b.n	800b246 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	78db      	ldrb	r3, [r3, #3]
 800b22c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	785b      	ldrb	r3, [r3, #1]
 800b232:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800b234:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800b236:	68ba      	ldr	r2, [r7, #8]
 800b238:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800b23a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800b242:	4313      	orrs	r3, r2
 800b244:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	22ca      	movs	r2, #202	; 0xca
 800b24c:	625a      	str	r2, [r3, #36]	; 0x24
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2253      	movs	r2, #83	; 0x53
 800b254:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b256:	68f8      	ldr	r0, [r7, #12]
 800b258:	f000 f8c0 	bl	800b3dc <RTC_EnterInitMode>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d00b      	beq.n	800b27a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	22ff      	movs	r2, #255	; 0xff
 800b268:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2204      	movs	r2, #4
 800b26e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2200      	movs	r2, #0
 800b274:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800b276:	2301      	movs	r3, #1
 800b278:	e031      	b.n	800b2de <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681a      	ldr	r2, [r3, #0]
 800b27e:	6979      	ldr	r1, [r7, #20]
 800b280:	4b19      	ldr	r3, [pc, #100]	; (800b2e8 <HAL_RTC_SetDate+0x14c>)
 800b282:	400b      	ands	r3, r1
 800b284:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	68da      	ldr	r2, [r3, #12]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b294:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	689b      	ldr	r3, [r3, #8]
 800b29c:	f003 0320 	and.w	r3, r3, #32
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d111      	bne.n	800b2c8 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b2a4:	68f8      	ldr	r0, [r7, #12]
 800b2a6:	f000 f871 	bl	800b38c <HAL_RTC_WaitForSynchro>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d00b      	beq.n	800b2c8 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	22ff      	movs	r2, #255	; 0xff
 800b2b6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2204      	movs	r2, #4
 800b2bc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	e00a      	b.n	800b2de <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	22ff      	movs	r2, #255	; 0xff
 800b2ce:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800b2dc:	2300      	movs	r3, #0
  }
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	371c      	adds	r7, #28
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd90      	pop	{r4, r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	00ffff3f 	.word	0x00ffff3f

0800b2ec <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b086      	sub	sp, #24
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	60b9      	str	r1, [r7, #8]
 800b2f6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	685a      	ldr	r2, [r3, #4]
 800b302:	4b21      	ldr	r3, [pc, #132]	; (800b388 <HAL_RTC_GetDate+0x9c>)
 800b304:	4013      	ands	r3, r2
 800b306:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	0c1b      	lsrs	r3, r3, #16
 800b30c:	b2da      	uxtb	r2, r3
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	0a1b      	lsrs	r3, r3, #8
 800b316:	b2db      	uxtb	r3, r3
 800b318:	f003 031f 	and.w	r3, r3, #31
 800b31c:	b2da      	uxtb	r2, r3
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	b2db      	uxtb	r3, r3
 800b326:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b32a:	b2da      	uxtb	r2, r3
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	0b5b      	lsrs	r3, r3, #13
 800b334:	b2db      	uxtb	r3, r3
 800b336:	f003 0307 	and.w	r3, r3, #7
 800b33a:	b2da      	uxtb	r2, r3
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d11a      	bne.n	800b37c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	78db      	ldrb	r3, [r3, #3]
 800b34a:	4618      	mov	r0, r3
 800b34c:	f000 f890 	bl	800b470 <RTC_Bcd2ToByte>
 800b350:	4603      	mov	r3, r0
 800b352:	461a      	mov	r2, r3
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	785b      	ldrb	r3, [r3, #1]
 800b35c:	4618      	mov	r0, r3
 800b35e:	f000 f887 	bl	800b470 <RTC_Bcd2ToByte>
 800b362:	4603      	mov	r3, r0
 800b364:	461a      	mov	r2, r3
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	789b      	ldrb	r3, [r3, #2]
 800b36e:	4618      	mov	r0, r3
 800b370:	f000 f87e 	bl	800b470 <RTC_Bcd2ToByte>
 800b374:	4603      	mov	r3, r0
 800b376:	461a      	mov	r2, r3
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3718      	adds	r7, #24
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	00ffff3f 	.word	0x00ffff3f

0800b38c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b394:	2300      	movs	r3, #0
 800b396:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	68da      	ldr	r2, [r3, #12]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b3a6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b3a8:	f7fb fa62 	bl	8006870 <HAL_GetTick>
 800b3ac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800b3ae:	e009      	b.n	800b3c4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b3b0:	f7fb fa5e 	bl	8006870 <HAL_GetTick>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	1ad3      	subs	r3, r2, r3
 800b3ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b3be:	d901      	bls.n	800b3c4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800b3c0:	2303      	movs	r3, #3
 800b3c2:	e007      	b.n	800b3d4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	68db      	ldr	r3, [r3, #12]
 800b3ca:	f003 0320 	and.w	r3, r3, #32
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d0ee      	beq.n	800b3b0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800b3d2:	2300      	movs	r3, #0
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3710      	adds	r7, #16
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	68db      	ldr	r3, [r3, #12]
 800b3ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d119      	bne.n	800b42a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b3fe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b400:	f7fb fa36 	bl	8006870 <HAL_GetTick>
 800b404:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b406:	e009      	b.n	800b41c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b408:	f7fb fa32 	bl	8006870 <HAL_GetTick>
 800b40c:	4602      	mov	r2, r0
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	1ad3      	subs	r3, r2, r3
 800b412:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b416:	d901      	bls.n	800b41c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800b418:	2303      	movs	r3, #3
 800b41a:	e007      	b.n	800b42c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b426:	2b00      	cmp	r3, #0
 800b428:	d0ee      	beq.n	800b408 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800b42a:	2300      	movs	r3, #0
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3710      	adds	r7, #16
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b434:	b480      	push	{r7}
 800b436:	b085      	sub	sp, #20
 800b438:	af00      	add	r7, sp, #0
 800b43a:	4603      	mov	r3, r0
 800b43c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800b43e:	2300      	movs	r3, #0
 800b440:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800b442:	e005      	b.n	800b450 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	3301      	adds	r3, #1
 800b448:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800b44a:	79fb      	ldrb	r3, [r7, #7]
 800b44c:	3b0a      	subs	r3, #10
 800b44e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800b450:	79fb      	ldrb	r3, [r7, #7]
 800b452:	2b09      	cmp	r3, #9
 800b454:	d8f6      	bhi.n	800b444 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	011b      	lsls	r3, r3, #4
 800b45c:	b2da      	uxtb	r2, r3
 800b45e:	79fb      	ldrb	r3, [r7, #7]
 800b460:	4313      	orrs	r3, r2
 800b462:	b2db      	uxtb	r3, r3
}
 800b464:	4618      	mov	r0, r3
 800b466:	3714      	adds	r7, #20
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800b470:	b480      	push	{r7}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	4603      	mov	r3, r0
 800b478:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800b47a:	2300      	movs	r3, #0
 800b47c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800b47e:	79fb      	ldrb	r3, [r7, #7]
 800b480:	091b      	lsrs	r3, r3, #4
 800b482:	b2db      	uxtb	r3, r3
 800b484:	461a      	mov	r2, r3
 800b486:	4613      	mov	r3, r2
 800b488:	009b      	lsls	r3, r3, #2
 800b48a:	4413      	add	r3, r2
 800b48c:	005b      	lsls	r3, r3, #1
 800b48e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800b490:	79fb      	ldrb	r3, [r7, #7]
 800b492:	f003 030f 	and.w	r3, r3, #15
 800b496:	b2da      	uxtb	r2, r3
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	4413      	add	r3, r2
 800b49e:	b2db      	uxtb	r3, r3
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3714      	adds	r7, #20
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr

0800b4ac <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d101      	bne.n	800b4be <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e022      	b.n	800b504 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d105      	bne.n	800b4d6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f7fa f88f 	bl	80055f4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2203      	movs	r2, #3
 800b4da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 f814 	bl	800b50c <HAL_SD_InitCard>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d001      	beq.n	800b4ee <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	e00a      	b.n	800b504 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2201      	movs	r2, #1
 800b4fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b502:	2300      	movs	r3, #0
}
 800b504:	4618      	mov	r0, r3
 800b506:	3708      	adds	r7, #8
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b50c:	b5b0      	push	{r4, r5, r7, lr}
 800b50e:	b08e      	sub	sp, #56	; 0x38
 800b510:	af04      	add	r7, sp, #16
 800b512:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b514:	2300      	movs	r3, #0
 800b516:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800b518:	2300      	movs	r3, #0
 800b51a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b51c:	2300      	movs	r3, #0
 800b51e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b520:	2300      	movs	r3, #0
 800b522:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b524:	2300      	movs	r3, #0
 800b526:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800b528:	2376      	movs	r3, #118	; 0x76
 800b52a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681d      	ldr	r5, [r3, #0]
 800b530:	466c      	mov	r4, sp
 800b532:	f107 0314 	add.w	r3, r7, #20
 800b536:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b53a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b53e:	f107 0308 	add.w	r3, r7, #8
 800b542:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b544:	4628      	mov	r0, r5
 800b546:	f003 ffe5 	bl	800f514 <SDMMC_Init>
 800b54a:	4603      	mov	r3, r0
 800b54c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800b550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b554:	2b00      	cmp	r3, #0
 800b556:	d001      	beq.n	800b55c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800b558:	2301      	movs	r3, #1
 800b55a:	e059      	b.n	800b610 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	685a      	ldr	r2, [r3, #4]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b56a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4618      	mov	r0, r3
 800b572:	f004 f819 	bl	800f5a8 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	685a      	ldr	r2, [r3, #4]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b584:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800b586:	2002      	movs	r0, #2
 800b588:	f7fb f97e 	bl	8006888 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f000 fff3 	bl	800c578 <SD_PowerON>
 800b592:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b594:	6a3b      	ldr	r3, [r7, #32]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d00b      	beq.n	800b5b2 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2201      	movs	r2, #1
 800b59e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5a6:	6a3b      	ldr	r3, [r7, #32]
 800b5a8:	431a      	orrs	r2, r3
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	e02e      	b.n	800b610 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f000 ff12 	bl	800c3dc <SD_InitCard>
 800b5b8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b5ba:	6a3b      	ldr	r3, [r7, #32]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d00b      	beq.n	800b5d8 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5cc:	6a3b      	ldr	r3, [r7, #32]
 800b5ce:	431a      	orrs	r2, r3
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e01b      	b.n	800b610 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f004 f873 	bl	800f6cc <SDMMC_CmdBlockLength>
 800b5e6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b5e8:	6a3b      	ldr	r3, [r7, #32]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d00f      	beq.n	800b60e <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	4a09      	ldr	r2, [pc, #36]	; (800b618 <HAL_SD_InitCard+0x10c>)
 800b5f4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5fa:	6a3b      	ldr	r3, [r7, #32]
 800b5fc:	431a      	orrs	r2, r3
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2201      	movs	r2, #1
 800b606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b60a:	2301      	movs	r3, #1
 800b60c:	e000      	b.n	800b610 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800b60e:	2300      	movs	r3, #0
}
 800b610:	4618      	mov	r0, r3
 800b612:	3728      	adds	r7, #40	; 0x28
 800b614:	46bd      	mov	sp, r7
 800b616:	bdb0      	pop	{r4, r5, r7, pc}
 800b618:	004005ff 	.word	0x004005ff

0800b61c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b08c      	sub	sp, #48	; 0x30
 800b620:	af00      	add	r7, sp, #0
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	607a      	str	r2, [r7, #4]
 800b628:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d107      	bne.n	800b644 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b638:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b640:	2301      	movs	r3, #1
 800b642:	e0c3      	b.n	800b7cc <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	f040 80bc 	bne.w	800b7ca <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2200      	movs	r2, #0
 800b656:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b658:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	441a      	add	r2, r3
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b662:	429a      	cmp	r2, r3
 800b664:	d907      	bls.n	800b676 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b66a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b672:	2301      	movs	r3, #1
 800b674:	e0aa      	b.n	800b7cc <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2203      	movs	r2, #3
 800b67a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	2200      	movs	r2, #0
 800b684:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800b694:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b69a:	4a4e      	ldr	r2, [pc, #312]	; (800b7d4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800b69c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a2:	4a4d      	ldr	r2, [pc, #308]	; (800b7d8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800b6a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6c6:	689a      	ldr	r2, [r3, #8]
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	430a      	orrs	r2, r1
 800b6d0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	3380      	adds	r3, #128	; 0x80
 800b6dc:	4619      	mov	r1, r3
 800b6de:	68ba      	ldr	r2, [r7, #8]
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	025b      	lsls	r3, r3, #9
 800b6e4:	089b      	lsrs	r3, r3, #2
 800b6e6:	f7fc fc13 	bl	8007f10 <HAL_DMA_Start_IT>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d017      	beq.n	800b720 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800b6fe:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a35      	ldr	r2, [pc, #212]	; (800b7dc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800b706:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b70c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2201      	movs	r2, #1
 800b718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b71c:	2301      	movs	r3, #1
 800b71e:	e055      	b.n	800b7cc <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f042 0208 	orr.w	r2, r2, #8
 800b72e:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b734:	2b01      	cmp	r3, #1
 800b736:	d002      	beq.n	800b73e <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800b738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b73a:	025b      	lsls	r3, r3, #9
 800b73c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b73e:	f04f 33ff 	mov.w	r3, #4294967295
 800b742:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	025b      	lsls	r3, r3, #9
 800b748:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b74a:	2390      	movs	r3, #144	; 0x90
 800b74c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b74e:	2302      	movs	r3, #2
 800b750:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b752:	2300      	movs	r3, #0
 800b754:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800b756:	2301      	movs	r3, #1
 800b758:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f107 0210 	add.w	r2, r7, #16
 800b762:	4611      	mov	r1, r2
 800b764:	4618      	mov	r0, r3
 800b766:	f003 ff85 	bl	800f674 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	2b01      	cmp	r3, #1
 800b76e:	d90a      	bls.n	800b786 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2282      	movs	r2, #130	; 0x82
 800b774:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b77c:	4618      	mov	r0, r3
 800b77e:	f003 ffe9 	bl	800f754 <SDMMC_CmdReadMultiBlock>
 800b782:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b784:	e009      	b.n	800b79a <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2281      	movs	r2, #129	; 0x81
 800b78a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b792:	4618      	mov	r0, r3
 800b794:	f003 ffbc 	bl	800f710 <SDMMC_CmdReadSingleBlock>
 800b798:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800b79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d012      	beq.n	800b7c6 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4a0d      	ldr	r2, [pc, #52]	; (800b7dc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800b7a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ae:	431a      	orrs	r2, r3
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e002      	b.n	800b7cc <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	e000      	b.n	800b7cc <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800b7ca:	2302      	movs	r3, #2
  }
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3730      	adds	r7, #48	; 0x30
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}
 800b7d4:	0800c1eb 	.word	0x0800c1eb
 800b7d8:	0800c25d 	.word	0x0800c25d
 800b7dc:	004005ff 	.word	0x004005ff

0800b7e0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b08c      	sub	sp, #48	; 0x30
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	60f8      	str	r0, [r7, #12]
 800b7e8:	60b9      	str	r1, [r7, #8]
 800b7ea:	607a      	str	r2, [r7, #4]
 800b7ec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d107      	bne.n	800b808 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7fc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b804:	2301      	movs	r3, #1
 800b806:	e0c6      	b.n	800b996 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	2b01      	cmp	r3, #1
 800b812:	f040 80bf 	bne.w	800b994 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2200      	movs	r2, #0
 800b81a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b81c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	441a      	add	r2, r3
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b826:	429a      	cmp	r2, r3
 800b828:	d907      	bls.n	800b83a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b82e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b836:	2301      	movs	r3, #1
 800b838:	e0ad      	b.n	800b996 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2203      	movs	r2, #3
 800b83e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2200      	movs	r2, #0
 800b848:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f042 021a 	orr.w	r2, r2, #26
 800b858:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b85e:	4a50      	ldr	r2, [pc, #320]	; (800b9a0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800b860:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b866:	4a4f      	ldr	r2, [pc, #316]	; (800b9a4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800b868:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b86e:	2200      	movs	r2, #0
 800b870:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b876:	2b01      	cmp	r3, #1
 800b878:	d002      	beq.n	800b880 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800b87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87c:	025b      	lsls	r3, r3, #9
 800b87e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	2b01      	cmp	r3, #1
 800b884:	d90a      	bls.n	800b89c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	22a0      	movs	r2, #160	; 0xa0
 800b88a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b892:	4618      	mov	r0, r3
 800b894:	f003 ffa2 	bl	800f7dc <SDMMC_CmdWriteMultiBlock>
 800b898:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b89a:	e009      	b.n	800b8b0 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2290      	movs	r2, #144	; 0x90
 800b8a0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f003 ff75 	bl	800f798 <SDMMC_CmdWriteSingleBlock>
 800b8ae:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d012      	beq.n	800b8dc <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	4a3b      	ldr	r2, [pc, #236]	; (800b9a8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800b8bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c4:	431a      	orrs	r2, r3
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	e05c      	b.n	800b996 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f042 0208 	orr.w	r2, r2, #8
 800b8ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8f0:	2240      	movs	r2, #64	; 0x40
 800b8f2:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b904:	689a      	ldr	r2, [r3, #8]
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	430a      	orrs	r2, r1
 800b90e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b914:	68b9      	ldr	r1, [r7, #8]
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	3380      	adds	r3, #128	; 0x80
 800b91c:	461a      	mov	r2, r3
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	025b      	lsls	r3, r3, #9
 800b922:	089b      	lsrs	r3, r3, #2
 800b924:	f7fc faf4 	bl	8007f10 <HAL_DMA_Start_IT>
 800b928:	4603      	mov	r3, r0
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d01a      	beq.n	800b964 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f022 021a 	bic.w	r2, r2, #26
 800b93c:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	4a19      	ldr	r2, [pc, #100]	; (800b9a8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800b944:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b94a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2201      	movs	r2, #1
 800b956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2200      	movs	r2, #0
 800b95e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b960:	2301      	movs	r3, #1
 800b962:	e018      	b.n	800b996 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b964:	f04f 33ff 	mov.w	r3, #4294967295
 800b968:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	025b      	lsls	r3, r3, #9
 800b96e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b970:	2390      	movs	r3, #144	; 0x90
 800b972:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800b974:	2300      	movs	r3, #0
 800b976:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b978:	2300      	movs	r3, #0
 800b97a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800b97c:	2301      	movs	r3, #1
 800b97e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f107 0210 	add.w	r2, r7, #16
 800b988:	4611      	mov	r1, r2
 800b98a:	4618      	mov	r0, r3
 800b98c:	f003 fe72 	bl	800f674 <SDMMC_ConfigData>

      return HAL_OK;
 800b990:	2300      	movs	r3, #0
 800b992:	e000      	b.n	800b996 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800b994:	2302      	movs	r3, #2
  }
}
 800b996:	4618      	mov	r0, r3
 800b998:	3730      	adds	r7, #48	; 0x30
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	0800c1c1 	.word	0x0800c1c1
 800b9a4:	0800c25d 	.word	0x0800c25d
 800b9a8:	004005ff 	.word	0x004005ff

0800b9ac <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b084      	sub	sp, #16
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9b8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d008      	beq.n	800b9da <HAL_SD_IRQHandler+0x2e>
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f003 0308 	and.w	r3, r3, #8
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d003      	beq.n	800b9da <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 ffef 	bl	800c9b6 <SD_Read_IT>
 800b9d8:	e15a      	b.n	800bc90 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	f000 808d 	beq.w	800bb04 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b9f2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681a      	ldr	r2, [r3, #0]
 800b9fe:	4b9a      	ldr	r3, [pc, #616]	; (800bc68 <HAL_SD_IRQHandler+0x2bc>)
 800ba00:	400b      	ands	r3, r1
 800ba02:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f022 0201 	bic.w	r2, r2, #1
 800ba12:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f003 0308 	and.w	r3, r3, #8
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d039      	beq.n	800ba92 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f003 0302 	and.w	r3, r3, #2
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d104      	bne.n	800ba32 <HAL_SD_IRQHandler+0x86>
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f003 0320 	and.w	r3, r3, #32
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d011      	beq.n	800ba56 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4618      	mov	r0, r3
 800ba38:	f003 fef2 	bl	800f820 <SDMMC_CmdStopTransfer>
 800ba3c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d008      	beq.n	800ba56 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	431a      	orrs	r2, r3
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f000 f921 	bl	800bc98 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f240 523a 	movw	r2, #1338	; 0x53a
 800ba5e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2201      	movs	r2, #1
 800ba64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	f003 0301 	and.w	r3, r3, #1
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d104      	bne.n	800ba82 <HAL_SD_IRQHandler+0xd6>
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f003 0302 	and.w	r3, r3, #2
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d003      	beq.n	800ba8a <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f004 fb62 	bl	801014c <HAL_SD_RxCpltCallback>
 800ba88:	e102      	b.n	800bc90 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f004 fb54 	bl	8010138 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ba90:	e0fe      	b.n	800bc90 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	f000 80f9 	beq.w	800bc90 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	f003 0320 	and.w	r3, r3, #32
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d011      	beq.n	800bacc <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4618      	mov	r0, r3
 800baae:	f003 feb7 	bl	800f820 <SDMMC_CmdStopTransfer>
 800bab2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d008      	beq.n	800bacc <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	431a      	orrs	r2, r3
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f000 f8e6 	bl	800bc98 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f003 0301 	and.w	r3, r3, #1
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	f040 80dc 	bne.w	800bc90 <HAL_SD_IRQHandler+0x2e4>
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f003 0302 	and.w	r3, r3, #2
 800bade:	2b00      	cmp	r3, #0
 800bae0:	f040 80d6 	bne.w	800bc90 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f022 0208 	bic.w	r2, r2, #8
 800baf2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2201      	movs	r2, #1
 800baf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f004 fb1b 	bl	8010138 <HAL_SD_TxCpltCallback>
}
 800bb02:	e0c5      	b.n	800bc90 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d008      	beq.n	800bb24 <HAL_SD_IRQHandler+0x178>
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f003 0308 	and.w	r3, r3, #8
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d003      	beq.n	800bb24 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 ff9b 	bl	800ca58 <SD_Write_IT>
 800bb22:	e0b5      	b.n	800bc90 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb2a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	f000 80ae 	beq.w	800bc90 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb3a:	f003 0302 	and.w	r3, r3, #2
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d005      	beq.n	800bb4e <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb46:	f043 0202 	orr.w	r2, r3, #2
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb54:	f003 0308 	and.w	r3, r3, #8
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d005      	beq.n	800bb68 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb60:	f043 0208 	orr.w	r2, r3, #8
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb6e:	f003 0320 	and.w	r3, r3, #32
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d005      	beq.n	800bb82 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb7a:	f043 0220 	orr.w	r2, r3, #32
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb88:	f003 0310 	and.w	r3, r3, #16
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d005      	beq.n	800bb9c <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb94:	f043 0210 	orr.w	r2, r3, #16
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f240 523a 	movw	r2, #1338	; 0x53a
 800bba4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800bbb4:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f003 fe30 	bl	800f820 <SDMMC_CmdStopTransfer>
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbc6:	431a      	orrs	r2, r3
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f003 0308 	and.w	r3, r3, #8
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d00a      	beq.n	800bbec <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2201      	movs	r2, #1
 800bbda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 f857 	bl	800bc98 <HAL_SD_ErrorCallback>
}
 800bbea:	e051      	b.n	800bc90 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d04c      	beq.n	800bc90 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f003 0310 	and.w	r3, r3, #16
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d104      	bne.n	800bc0a <HAL_SD_IRQHandler+0x25e>
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f003 0320 	and.w	r3, r3, #32
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d011      	beq.n	800bc2e <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc0e:	4a17      	ldr	r2, [pc, #92]	; (800bc6c <HAL_SD_IRQHandler+0x2c0>)
 800bc10:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7fc fa4a 	bl	80080b0 <HAL_DMA_Abort_IT>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d036      	beq.n	800bc90 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc26:	4618      	mov	r0, r3
 800bc28:	f000 fb6a 	bl	800c300 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800bc2c:	e030      	b.n	800bc90 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f003 0301 	and.w	r3, r3, #1
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d104      	bne.n	800bc42 <HAL_SD_IRQHandler+0x296>
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f003 0302 	and.w	r3, r3, #2
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d018      	beq.n	800bc74 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc46:	4a0a      	ldr	r2, [pc, #40]	; (800bc70 <HAL_SD_IRQHandler+0x2c4>)
 800bc48:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7fc fa2e 	bl	80080b0 <HAL_DMA_Abort_IT>
 800bc54:	4603      	mov	r3, r0
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d01a      	beq.n	800bc90 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f000 fb85 	bl	800c36e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800bc64:	e014      	b.n	800bc90 <HAL_SD_IRQHandler+0x2e4>
 800bc66:	bf00      	nop
 800bc68:	ffff3ec5 	.word	0xffff3ec5
 800bc6c:	0800c301 	.word	0x0800c301
 800bc70:	0800c36f 	.word	0x0800c36f
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2200      	movs	r2, #0
 800bc78:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2200      	movs	r2, #0
 800bc86:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f004 fa4b 	bl	8010124 <HAL_SD_AbortCallback>
}
 800bc8e:	e7ff      	b.n	800bc90 <HAL_SD_IRQHandler+0x2e4>
 800bc90:	bf00      	nop
 800bc92:	3710      	adds	r7, #16
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b083      	sub	sp, #12
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800bca0:	bf00      	nop
 800bca2:	370c      	adds	r7, #12
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr

0800bcac <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcba:	0f9b      	lsrs	r3, r3, #30
 800bcbc:	b2da      	uxtb	r2, r3
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcc6:	0e9b      	lsrs	r3, r3, #26
 800bcc8:	b2db      	uxtb	r3, r3
 800bcca:	f003 030f 	and.w	r3, r3, #15
 800bcce:	b2da      	uxtb	r2, r3
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcd8:	0e1b      	lsrs	r3, r3, #24
 800bcda:	b2db      	uxtb	r3, r3
 800bcdc:	f003 0303 	and.w	r3, r3, #3
 800bce0:	b2da      	uxtb	r2, r3
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcea:	0c1b      	lsrs	r3, r3, #16
 800bcec:	b2da      	uxtb	r2, r3
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcf6:	0a1b      	lsrs	r3, r3, #8
 800bcf8:	b2da      	uxtb	r2, r3
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd02:	b2da      	uxtb	r2, r3
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd0c:	0d1b      	lsrs	r3, r3, #20
 800bd0e:	b29a      	uxth	r2, r3
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd18:	0c1b      	lsrs	r3, r3, #16
 800bd1a:	b2db      	uxtb	r3, r3
 800bd1c:	f003 030f 	and.w	r3, r3, #15
 800bd20:	b2da      	uxtb	r2, r3
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd2a:	0bdb      	lsrs	r3, r3, #15
 800bd2c:	b2db      	uxtb	r3, r3
 800bd2e:	f003 0301 	and.w	r3, r3, #1
 800bd32:	b2da      	uxtb	r2, r3
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd3c:	0b9b      	lsrs	r3, r3, #14
 800bd3e:	b2db      	uxtb	r3, r3
 800bd40:	f003 0301 	and.w	r3, r3, #1
 800bd44:	b2da      	uxtb	r2, r3
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd4e:	0b5b      	lsrs	r3, r3, #13
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	f003 0301 	and.w	r3, r3, #1
 800bd56:	b2da      	uxtb	r2, r3
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd60:	0b1b      	lsrs	r3, r3, #12
 800bd62:	b2db      	uxtb	r3, r3
 800bd64:	f003 0301 	and.w	r3, r3, #1
 800bd68:	b2da      	uxtb	r2, r3
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	2200      	movs	r2, #0
 800bd72:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d163      	bne.n	800be44 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd80:	009a      	lsls	r2, r3, #2
 800bd82:	f640 73fc 	movw	r3, #4092	; 0xffc
 800bd86:	4013      	ands	r3, r2
 800bd88:	687a      	ldr	r2, [r7, #4]
 800bd8a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800bd8c:	0f92      	lsrs	r2, r2, #30
 800bd8e:	431a      	orrs	r2, r3
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd98:	0edb      	lsrs	r3, r3, #27
 800bd9a:	b2db      	uxtb	r3, r3
 800bd9c:	f003 0307 	and.w	r3, r3, #7
 800bda0:	b2da      	uxtb	r2, r3
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdaa:	0e1b      	lsrs	r3, r3, #24
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	f003 0307 	and.w	r3, r3, #7
 800bdb2:	b2da      	uxtb	r2, r3
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdbc:	0d5b      	lsrs	r3, r3, #21
 800bdbe:	b2db      	uxtb	r3, r3
 800bdc0:	f003 0307 	and.w	r3, r3, #7
 800bdc4:	b2da      	uxtb	r2, r3
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdce:	0c9b      	lsrs	r3, r3, #18
 800bdd0:	b2db      	uxtb	r3, r3
 800bdd2:	f003 0307 	and.w	r3, r3, #7
 800bdd6:	b2da      	uxtb	r2, r3
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bde0:	0bdb      	lsrs	r3, r3, #15
 800bde2:	b2db      	uxtb	r3, r3
 800bde4:	f003 0307 	and.w	r3, r3, #7
 800bde8:	b2da      	uxtb	r2, r3
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	691b      	ldr	r3, [r3, #16]
 800bdf2:	1c5a      	adds	r2, r3, #1
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	7e1b      	ldrb	r3, [r3, #24]
 800bdfc:	b2db      	uxtb	r3, r3
 800bdfe:	f003 0307 	and.w	r3, r3, #7
 800be02:	3302      	adds	r3, #2
 800be04:	2201      	movs	r2, #1
 800be06:	fa02 f303 	lsl.w	r3, r2, r3
 800be0a:	687a      	ldr	r2, [r7, #4]
 800be0c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800be0e:	fb03 f202 	mul.w	r2, r3, r2
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	7a1b      	ldrb	r3, [r3, #8]
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	f003 030f 	and.w	r3, r3, #15
 800be20:	2201      	movs	r2, #1
 800be22:	409a      	lsls	r2, r3
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be2c:	687a      	ldr	r2, [r7, #4]
 800be2e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800be30:	0a52      	lsrs	r2, r2, #9
 800be32:	fb03 f202 	mul.w	r2, r3, r2
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be40:	661a      	str	r2, [r3, #96]	; 0x60
 800be42:	e031      	b.n	800bea8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d11d      	bne.n	800be88 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be50:	041b      	lsls	r3, r3, #16
 800be52:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be5a:	0c1b      	lsrs	r3, r3, #16
 800be5c:	431a      	orrs	r2, r3
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	691b      	ldr	r3, [r3, #16]
 800be66:	3301      	adds	r3, #1
 800be68:	029a      	lsls	r2, r3, #10
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be7c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	661a      	str	r2, [r3, #96]	; 0x60
 800be86:	e00f      	b.n	800bea8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4a58      	ldr	r2, [pc, #352]	; (800bff0 <HAL_SD_GetCardCSD+0x344>)
 800be8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2201      	movs	r2, #1
 800bea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bea4:	2301      	movs	r3, #1
 800bea6:	e09d      	b.n	800bfe4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800beac:	0b9b      	lsrs	r3, r3, #14
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	f003 0301 	and.w	r3, r3, #1
 800beb4:	b2da      	uxtb	r2, r3
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bebe:	09db      	lsrs	r3, r3, #7
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bec6:	b2da      	uxtb	r2, r3
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bed6:	b2da      	uxtb	r2, r3
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bee0:	0fdb      	lsrs	r3, r3, #31
 800bee2:	b2da      	uxtb	r2, r3
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beec:	0f5b      	lsrs	r3, r3, #29
 800beee:	b2db      	uxtb	r3, r3
 800bef0:	f003 0303 	and.w	r3, r3, #3
 800bef4:	b2da      	uxtb	r2, r3
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800befe:	0e9b      	lsrs	r3, r3, #26
 800bf00:	b2db      	uxtb	r3, r3
 800bf02:	f003 0307 	and.w	r3, r3, #7
 800bf06:	b2da      	uxtb	r2, r3
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf10:	0d9b      	lsrs	r3, r3, #22
 800bf12:	b2db      	uxtb	r3, r3
 800bf14:	f003 030f 	and.w	r3, r3, #15
 800bf18:	b2da      	uxtb	r2, r3
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf22:	0d5b      	lsrs	r3, r3, #21
 800bf24:	b2db      	uxtb	r3, r3
 800bf26:	f003 0301 	and.w	r3, r3, #1
 800bf2a:	b2da      	uxtb	r2, r3
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	2200      	movs	r2, #0
 800bf36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf3e:	0c1b      	lsrs	r3, r3, #16
 800bf40:	b2db      	uxtb	r3, r3
 800bf42:	f003 0301 	and.w	r3, r3, #1
 800bf46:	b2da      	uxtb	r2, r3
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf52:	0bdb      	lsrs	r3, r3, #15
 800bf54:	b2db      	uxtb	r3, r3
 800bf56:	f003 0301 	and.w	r3, r3, #1
 800bf5a:	b2da      	uxtb	r2, r3
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf66:	0b9b      	lsrs	r3, r3, #14
 800bf68:	b2db      	uxtb	r3, r3
 800bf6a:	f003 0301 	and.w	r3, r3, #1
 800bf6e:	b2da      	uxtb	r2, r3
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf7a:	0b5b      	lsrs	r3, r3, #13
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	f003 0301 	and.w	r3, r3, #1
 800bf82:	b2da      	uxtb	r2, r3
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf8e:	0b1b      	lsrs	r3, r3, #12
 800bf90:	b2db      	uxtb	r3, r3
 800bf92:	f003 0301 	and.w	r3, r3, #1
 800bf96:	b2da      	uxtb	r2, r3
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfa2:	0a9b      	lsrs	r3, r3, #10
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	f003 0303 	and.w	r3, r3, #3
 800bfaa:	b2da      	uxtb	r2, r3
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfb6:	0a1b      	lsrs	r3, r3, #8
 800bfb8:	b2db      	uxtb	r3, r3
 800bfba:	f003 0303 	and.w	r3, r3, #3
 800bfbe:	b2da      	uxtb	r2, r3
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfca:	085b      	lsrs	r3, r3, #1
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfd2:	b2da      	uxtb	r2, r3
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	2201      	movs	r2, #1
 800bfde:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800bfe2:	2300      	movs	r3, #0
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	370c      	adds	r7, #12
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr
 800bff0:	004005ff 	.word	0x004005ff

0800bff4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b083      	sub	sp, #12
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c03e:	2300      	movs	r3, #0
}
 800c040:	4618      	mov	r0, r3
 800c042:	370c      	adds	r7, #12
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr

0800c04c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c04c:	b5b0      	push	{r4, r5, r7, lr}
 800c04e:	b08e      	sub	sp, #56	; 0x38
 800c050:	af04      	add	r7, sp, #16
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c056:	2300      	movs	r3, #0
 800c058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2203      	movs	r2, #3
 800c060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c068:	2b03      	cmp	r3, #3
 800c06a:	d02e      	beq.n	800c0ca <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c072:	d106      	bne.n	800c082 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c078:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	639a      	str	r2, [r3, #56]	; 0x38
 800c080:	e029      	b.n	800c0d6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c088:	d10a      	bne.n	800c0a0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f000 fb2a 	bl	800c6e4 <SD_WideBus_Enable>
 800c090:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c096:	6a3b      	ldr	r3, [r7, #32]
 800c098:	431a      	orrs	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	639a      	str	r2, [r3, #56]	; 0x38
 800c09e:	e01a      	b.n	800c0d6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d10a      	bne.n	800c0bc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f000 fb67 	bl	800c77a <SD_WideBus_Disable>
 800c0ac:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0b2:	6a3b      	ldr	r3, [r7, #32]
 800c0b4:	431a      	orrs	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	639a      	str	r2, [r3, #56]	; 0x38
 800c0ba:	e00c      	b.n	800c0d6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	639a      	str	r2, [r3, #56]	; 0x38
 800c0c8:	e005      	b.n	800c0d6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ce:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d00b      	beq.n	800c0f6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4a26      	ldr	r2, [pc, #152]	; (800c17c <HAL_SD_ConfigWideBusOperation+0x130>)
 800c0e4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c0f4:	e01f      	b.n	800c136 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	689b      	ldr	r3, [r3, #8]
 800c100:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	68db      	ldr	r3, [r3, #12]
 800c106:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	695b      	ldr	r3, [r3, #20]
 800c110:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	699b      	ldr	r3, [r3, #24]
 800c116:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681d      	ldr	r5, [r3, #0]
 800c11c:	466c      	mov	r4, sp
 800c11e:	f107 0314 	add.w	r3, r7, #20
 800c122:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c126:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c12a:	f107 0308 	add.w	r3, r7, #8
 800c12e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c130:	4628      	mov	r0, r5
 800c132:	f003 f9ef 	bl	800f514 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c13e:	4618      	mov	r0, r3
 800c140:	f003 fac4 	bl	800f6cc <SDMMC_CmdBlockLength>
 800c144:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c146:	6a3b      	ldr	r3, [r7, #32]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d00c      	beq.n	800c166 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4a0a      	ldr	r2, [pc, #40]	; (800c17c <HAL_SD_ConfigWideBusOperation+0x130>)
 800c152:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c158:	6a3b      	ldr	r3, [r7, #32]
 800c15a:	431a      	orrs	r2, r3
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800c160:	2301      	movs	r3, #1
 800c162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2201      	movs	r2, #1
 800c16a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800c16e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c172:	4618      	mov	r0, r3
 800c174:	3728      	adds	r7, #40	; 0x28
 800c176:	46bd      	mov	sp, r7
 800c178:	bdb0      	pop	{r4, r5, r7, pc}
 800c17a:	bf00      	nop
 800c17c:	004005ff 	.word	0x004005ff

0800c180 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b086      	sub	sp, #24
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c188:	2300      	movs	r3, #0
 800c18a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c18c:	f107 030c 	add.w	r3, r7, #12
 800c190:	4619      	mov	r1, r3
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 fa7e 	bl	800c694 <SD_SendStatus>
 800c198:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d005      	beq.n	800c1ac <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	431a      	orrs	r2, r3
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	0a5b      	lsrs	r3, r3, #9
 800c1b0:	f003 030f 	and.w	r3, r3, #15
 800c1b4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c1b6:	693b      	ldr	r3, [r7, #16]
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3718      	adds	r7, #24
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b085      	sub	sp, #20
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1cc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c1dc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800c1de:	bf00      	nop
 800c1e0:	3714      	adds	r7, #20
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e8:	4770      	bx	lr

0800c1ea <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c1ea:	b580      	push	{r7, lr}
 800c1ec:	b084      	sub	sp, #16
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1f6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1fc:	2b82      	cmp	r3, #130	; 0x82
 800c1fe:	d111      	bne.n	800c224 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4618      	mov	r0, r3
 800c206:	f003 fb0b 	bl	800f820 <SDMMC_CmdStopTransfer>
 800c20a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d008      	beq.n	800c224 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	431a      	orrs	r2, r3
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800c21e:	68f8      	ldr	r0, [r7, #12]
 800c220:	f7ff fd3a 	bl	800bc98 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f022 0208 	bic.w	r2, r2, #8
 800c232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f240 523a 	movw	r2, #1338	; 0x53a
 800c23c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2201      	movs	r2, #1
 800c242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2200      	movs	r2, #0
 800c24a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800c24c:	68f8      	ldr	r0, [r7, #12]
 800c24e:	f003 ff7d 	bl	801014c <HAL_SD_RxCpltCallback>
#endif
}
 800c252:	bf00      	nop
 800c254:	3710      	adds	r7, #16
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
	...

0800c25c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b086      	sub	sp, #24
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c268:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f7fc f8cc 	bl	8008408 <HAL_DMA_GetError>
 800c270:	4603      	mov	r3, r0
 800c272:	2b02      	cmp	r3, #2
 800c274:	d03e      	beq.n	800c2f4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c27a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c27c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c284:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d002      	beq.n	800c292 <SD_DMAError+0x36>
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2b01      	cmp	r3, #1
 800c290:	d12d      	bne.n	800c2ee <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a19      	ldr	r2, [pc, #100]	; (800c2fc <SD_DMAError+0xa0>)
 800c298:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c2a8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800c2b6:	6978      	ldr	r0, [r7, #20]
 800c2b8:	f7ff ff62 	bl	800c180 <HAL_SD_GetCardState>
 800c2bc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	2b06      	cmp	r3, #6
 800c2c2:	d002      	beq.n	800c2ca <SD_DMAError+0x6e>
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	2b05      	cmp	r3, #5
 800c2c8:	d10a      	bne.n	800c2e0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f003 faa6 	bl	800f820 <SDMMC_CmdStopTransfer>
 800c2d4:	4602      	mov	r2, r0
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2da:	431a      	orrs	r2, r3
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800c2ee:	6978      	ldr	r0, [r7, #20]
 800c2f0:	f7ff fcd2 	bl	800bc98 <HAL_SD_ErrorCallback>
#endif
  }
}
 800c2f4:	bf00      	nop
 800c2f6:	3718      	adds	r7, #24
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	004005ff 	.word	0x004005ff

0800c300 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c30c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f240 523a 	movw	r2, #1338	; 0x53a
 800c316:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800c318:	68f8      	ldr	r0, [r7, #12]
 800c31a:	f7ff ff31 	bl	800c180 <HAL_SD_GetCardState>
 800c31e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2201      	movs	r2, #1
 800c324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2200      	movs	r2, #0
 800c32c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	2b06      	cmp	r3, #6
 800c332:	d002      	beq.n	800c33a <SD_DMATxAbort+0x3a>
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	2b05      	cmp	r3, #5
 800c338:	d10a      	bne.n	800c350 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4618      	mov	r0, r3
 800c340:	f003 fa6e 	bl	800f820 <SDMMC_CmdStopTransfer>
 800c344:	4602      	mov	r2, r0
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c34a:	431a      	orrs	r2, r3
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c354:	2b00      	cmp	r3, #0
 800c356:	d103      	bne.n	800c360 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800c358:	68f8      	ldr	r0, [r7, #12]
 800c35a:	f003 fee3 	bl	8010124 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800c35e:	e002      	b.n	800c366 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800c360:	68f8      	ldr	r0, [r7, #12]
 800c362:	f7ff fc99 	bl	800bc98 <HAL_SD_ErrorCallback>
}
 800c366:	bf00      	nop
 800c368:	3710      	adds	r7, #16
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}

0800c36e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800c36e:	b580      	push	{r7, lr}
 800c370:	b084      	sub	sp, #16
 800c372:	af00      	add	r7, sp, #0
 800c374:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c37a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f240 523a 	movw	r2, #1338	; 0x53a
 800c384:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800c386:	68f8      	ldr	r0, [r7, #12]
 800c388:	f7ff fefa 	bl	800c180 <HAL_SD_GetCardState>
 800c38c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	2201      	movs	r2, #1
 800c392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2200      	movs	r2, #0
 800c39a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	2b06      	cmp	r3, #6
 800c3a0:	d002      	beq.n	800c3a8 <SD_DMARxAbort+0x3a>
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	2b05      	cmp	r3, #5
 800c3a6:	d10a      	bne.n	800c3be <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f003 fa37 	bl	800f820 <SDMMC_CmdStopTransfer>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3b8:	431a      	orrs	r2, r3
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d103      	bne.n	800c3ce <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800c3c6:	68f8      	ldr	r0, [r7, #12]
 800c3c8:	f003 feac 	bl	8010124 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800c3cc:	e002      	b.n	800c3d4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800c3ce:	68f8      	ldr	r0, [r7, #12]
 800c3d0:	f7ff fc62 	bl	800bc98 <HAL_SD_ErrorCallback>
}
 800c3d4:	bf00      	nop
 800c3d6:	3710      	adds	r7, #16
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c3dc:	b5b0      	push	{r4, r5, r7, lr}
 800c3de:	b094      	sub	sp, #80	; 0x50
 800c3e0:	af04      	add	r7, sp, #16
 800c3e2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f003 f8e9 	bl	800f5c4 <SDMMC_GetPowerState>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d102      	bne.n	800c3fe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c3f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c3fc:	e0b8      	b.n	800c570 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c402:	2b03      	cmp	r3, #3
 800c404:	d02f      	beq.n	800c466 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4618      	mov	r0, r3
 800c40c:	f003 fb13 	bl	800fa36 <SDMMC_CmdSendCID>
 800c410:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c414:	2b00      	cmp	r3, #0
 800c416:	d001      	beq.n	800c41c <SD_InitCard+0x40>
    {
      return errorstate;
 800c418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c41a:	e0a9      	b.n	800c570 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	2100      	movs	r1, #0
 800c422:	4618      	mov	r0, r3
 800c424:	f003 f913 	bl	800f64e <SDMMC_GetResponse>
 800c428:	4602      	mov	r2, r0
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	2104      	movs	r1, #4
 800c434:	4618      	mov	r0, r3
 800c436:	f003 f90a 	bl	800f64e <SDMMC_GetResponse>
 800c43a:	4602      	mov	r2, r0
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	2108      	movs	r1, #8
 800c446:	4618      	mov	r0, r3
 800c448:	f003 f901 	bl	800f64e <SDMMC_GetResponse>
 800c44c:	4602      	mov	r2, r0
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	210c      	movs	r1, #12
 800c458:	4618      	mov	r0, r3
 800c45a:	f003 f8f8 	bl	800f64e <SDMMC_GetResponse>
 800c45e:	4602      	mov	r2, r0
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c46a:	2b03      	cmp	r3, #3
 800c46c:	d00d      	beq.n	800c48a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f107 020e 	add.w	r2, r7, #14
 800c476:	4611      	mov	r1, r2
 800c478:	4618      	mov	r0, r3
 800c47a:	f003 fb19 	bl	800fab0 <SDMMC_CmdSetRelAdd>
 800c47e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c482:	2b00      	cmp	r3, #0
 800c484:	d001      	beq.n	800c48a <SD_InitCard+0xae>
    {
      return errorstate;
 800c486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c488:	e072      	b.n	800c570 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c48e:	2b03      	cmp	r3, #3
 800c490:	d036      	beq.n	800c500 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c492:	89fb      	ldrh	r3, [r7, #14]
 800c494:	461a      	mov	r2, r3
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681a      	ldr	r2, [r3, #0]
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4a2:	041b      	lsls	r3, r3, #16
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	4610      	mov	r0, r2
 800c4a8:	f003 fae3 	bl	800fa72 <SDMMC_CmdSendCSD>
 800c4ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c4ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d001      	beq.n	800c4b8 <SD_InitCard+0xdc>
    {
      return errorstate;
 800c4b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4b6:	e05b      	b.n	800c570 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	2100      	movs	r1, #0
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f003 f8c5 	bl	800f64e <SDMMC_GetResponse>
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	2104      	movs	r1, #4
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f003 f8bc 	bl	800f64e <SDMMC_GetResponse>
 800c4d6:	4602      	mov	r2, r0
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	2108      	movs	r1, #8
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f003 f8b3 	bl	800f64e <SDMMC_GetResponse>
 800c4e8:	4602      	mov	r2, r0
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	210c      	movs	r1, #12
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f003 f8aa 	bl	800f64e <SDMMC_GetResponse>
 800c4fa:	4602      	mov	r2, r0
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	2104      	movs	r1, #4
 800c506:	4618      	mov	r0, r3
 800c508:	f003 f8a1 	bl	800f64e <SDMMC_GetResponse>
 800c50c:	4603      	mov	r3, r0
 800c50e:	0d1a      	lsrs	r2, r3, #20
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c514:	f107 0310 	add.w	r3, r7, #16
 800c518:	4619      	mov	r1, r3
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f7ff fbc6 	bl	800bcac <HAL_SD_GetCardCSD>
 800c520:	4603      	mov	r3, r0
 800c522:	2b00      	cmp	r3, #0
 800c524:	d002      	beq.n	800c52c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c526:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c52a:	e021      	b.n	800c570 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6819      	ldr	r1, [r3, #0]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c534:	041b      	lsls	r3, r3, #16
 800c536:	2200      	movs	r2, #0
 800c538:	461c      	mov	r4, r3
 800c53a:	4615      	mov	r5, r2
 800c53c:	4622      	mov	r2, r4
 800c53e:	462b      	mov	r3, r5
 800c540:	4608      	mov	r0, r1
 800c542:	f003 f98f 	bl	800f864 <SDMMC_CmdSelDesel>
 800c546:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d001      	beq.n	800c552 <SD_InitCard+0x176>
  {
    return errorstate;
 800c54e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c550:	e00e      	b.n	800c570 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681d      	ldr	r5, [r3, #0]
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	466c      	mov	r4, sp
 800c55a:	f103 0210 	add.w	r2, r3, #16
 800c55e:	ca07      	ldmia	r2, {r0, r1, r2}
 800c560:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c564:	3304      	adds	r3, #4
 800c566:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c568:	4628      	mov	r0, r5
 800c56a:	f002 ffd3 	bl	800f514 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c56e:	2300      	movs	r3, #0
}
 800c570:	4618      	mov	r0, r3
 800c572:	3740      	adds	r7, #64	; 0x40
 800c574:	46bd      	mov	sp, r7
 800c576:	bdb0      	pop	{r4, r5, r7, pc}

0800c578 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b086      	sub	sp, #24
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c580:	2300      	movs	r3, #0
 800c582:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800c584:	2300      	movs	r3, #0
 800c586:	617b      	str	r3, [r7, #20]
 800c588:	2300      	movs	r3, #0
 800c58a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4618      	mov	r0, r3
 800c592:	f003 f98a 	bl	800f8aa <SDMMC_CmdGoIdleState>
 800c596:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d001      	beq.n	800c5a2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	e072      	b.n	800c688 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f003 f99d 	bl	800f8e6 <SDMMC_CmdOperCond>
 800c5ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d00d      	beq.n	800c5d0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f003 f973 	bl	800f8aa <SDMMC_CmdGoIdleState>
 800c5c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d004      	beq.n	800c5d6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	e05b      	b.n	800c688 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	d137      	bne.n	800c64e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	2100      	movs	r1, #0
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f003 f99d 	bl	800f924 <SDMMC_CmdAppCommand>
 800c5ea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d02d      	beq.n	800c64e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c5f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c5f6:	e047      	b.n	800c688 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	2100      	movs	r1, #0
 800c5fe:	4618      	mov	r0, r3
 800c600:	f003 f990 	bl	800f924 <SDMMC_CmdAppCommand>
 800c604:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d001      	beq.n	800c610 <SD_PowerON+0x98>
    {
      return errorstate;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	e03b      	b.n	800c688 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	491e      	ldr	r1, [pc, #120]	; (800c690 <SD_PowerON+0x118>)
 800c616:	4618      	mov	r0, r3
 800c618:	f003 f9a6 	bl	800f968 <SDMMC_CmdAppOperCommand>
 800c61c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d002      	beq.n	800c62a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c624:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c628:	e02e      	b.n	800c688 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	2100      	movs	r1, #0
 800c630:	4618      	mov	r0, r3
 800c632:	f003 f80c 	bl	800f64e <SDMMC_GetResponse>
 800c636:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	0fdb      	lsrs	r3, r3, #31
 800c63c:	2b01      	cmp	r3, #1
 800c63e:	d101      	bne.n	800c644 <SD_PowerON+0xcc>
 800c640:	2301      	movs	r3, #1
 800c642:	e000      	b.n	800c646 <SD_PowerON+0xce>
 800c644:	2300      	movs	r3, #0
 800c646:	613b      	str	r3, [r7, #16]

    count++;
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	3301      	adds	r3, #1
 800c64c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c654:	4293      	cmp	r3, r2
 800c656:	d802      	bhi.n	800c65e <SD_PowerON+0xe6>
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d0cc      	beq.n	800c5f8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c664:	4293      	cmp	r3, r2
 800c666:	d902      	bls.n	800c66e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c668:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c66c:	e00c      	b.n	800c688 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c674:	2b00      	cmp	r3, #0
 800c676:	d003      	beq.n	800c680 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2201      	movs	r2, #1
 800c67c:	645a      	str	r2, [r3, #68]	; 0x44
 800c67e:	e002      	b.n	800c686 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2200      	movs	r2, #0
 800c684:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800c686:	2300      	movs	r3, #0
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3718      	adds	r7, #24
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	c1100000 	.word	0xc1100000

0800c694 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b084      	sub	sp, #16
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d102      	bne.n	800c6aa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c6a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c6a8:	e018      	b.n	800c6dc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681a      	ldr	r2, [r3, #0]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6b2:	041b      	lsls	r3, r3, #16
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	4610      	mov	r0, r2
 800c6b8:	f003 fa1b 	bl	800faf2 <SDMMC_CmdSendStatus>
 800c6bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d001      	beq.n	800c6c8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	e009      	b.n	800c6dc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	2100      	movs	r1, #0
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f002 ffbd 	bl	800f64e <SDMMC_GetResponse>
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c6da:	2300      	movs	r3, #0
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3710      	adds	r7, #16
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}

0800c6e4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b086      	sub	sp, #24
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	60fb      	str	r3, [r7, #12]
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2100      	movs	r1, #0
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f002 ffa7 	bl	800f64e <SDMMC_GetResponse>
 800c700:	4603      	mov	r3, r0
 800c702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c706:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c70a:	d102      	bne.n	800c712 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c70c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c710:	e02f      	b.n	800c772 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c712:	f107 030c 	add.w	r3, r7, #12
 800c716:	4619      	mov	r1, r3
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f000 f879 	bl	800c810 <SD_FindSCR>
 800c71e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d001      	beq.n	800c72a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	e023      	b.n	800c772 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c730:	2b00      	cmp	r3, #0
 800c732:	d01c      	beq.n	800c76e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681a      	ldr	r2, [r3, #0]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c73c:	041b      	lsls	r3, r3, #16
 800c73e:	4619      	mov	r1, r3
 800c740:	4610      	mov	r0, r2
 800c742:	f003 f8ef 	bl	800f924 <SDMMC_CmdAppCommand>
 800c746:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d001      	beq.n	800c752 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	e00f      	b.n	800c772 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	2102      	movs	r1, #2
 800c758:	4618      	mov	r0, r3
 800c75a:	f003 f929 	bl	800f9b0 <SDMMC_CmdBusWidth>
 800c75e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d001      	beq.n	800c76a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	e003      	b.n	800c772 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c76a:	2300      	movs	r3, #0
 800c76c:	e001      	b.n	800c772 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c76e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c772:	4618      	mov	r0, r3
 800c774:	3718      	adds	r7, #24
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}

0800c77a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800c77a:	b580      	push	{r7, lr}
 800c77c:	b086      	sub	sp, #24
 800c77e:	af00      	add	r7, sp, #0
 800c780:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c782:	2300      	movs	r3, #0
 800c784:	60fb      	str	r3, [r7, #12]
 800c786:	2300      	movs	r3, #0
 800c788:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	2100      	movs	r1, #0
 800c790:	4618      	mov	r0, r3
 800c792:	f002 ff5c 	bl	800f64e <SDMMC_GetResponse>
 800c796:	4603      	mov	r3, r0
 800c798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c79c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7a0:	d102      	bne.n	800c7a8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c7a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c7a6:	e02f      	b.n	800c808 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c7a8:	f107 030c 	add.w	r3, r7, #12
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f000 f82e 	bl	800c810 <SD_FindSCR>
 800c7b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d001      	beq.n	800c7c0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	e023      	b.n	800c808 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d01c      	beq.n	800c804 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681a      	ldr	r2, [r3, #0]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7d2:	041b      	lsls	r3, r3, #16
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	4610      	mov	r0, r2
 800c7d8:	f003 f8a4 	bl	800f924 <SDMMC_CmdAppCommand>
 800c7dc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d001      	beq.n	800c7e8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	e00f      	b.n	800c808 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2100      	movs	r1, #0
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f003 f8de 	bl	800f9b0 <SDMMC_CmdBusWidth>
 800c7f4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d001      	beq.n	800c800 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	e003      	b.n	800c808 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c800:	2300      	movs	r3, #0
 800c802:	e001      	b.n	800c808 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c804:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3718      	adds	r7, #24
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}

0800c810 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800c810:	b590      	push	{r4, r7, lr}
 800c812:	b08f      	sub	sp, #60	; 0x3c
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c81a:	f7fa f829 	bl	8006870 <HAL_GetTick>
 800c81e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800c820:	2300      	movs	r3, #0
 800c822:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800c824:	2300      	movs	r3, #0
 800c826:	60bb      	str	r3, [r7, #8]
 800c828:	2300      	movs	r3, #0
 800c82a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	2108      	movs	r1, #8
 800c836:	4618      	mov	r0, r3
 800c838:	f002 ff48 	bl	800f6cc <SDMMC_CmdBlockLength>
 800c83c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c840:	2b00      	cmp	r3, #0
 800c842:	d001      	beq.n	800c848 <SD_FindSCR+0x38>
  {
    return errorstate;
 800c844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c846:	e0b2      	b.n	800c9ae <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681a      	ldr	r2, [r3, #0]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c850:	041b      	lsls	r3, r3, #16
 800c852:	4619      	mov	r1, r3
 800c854:	4610      	mov	r0, r2
 800c856:	f003 f865 	bl	800f924 <SDMMC_CmdAppCommand>
 800c85a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d001      	beq.n	800c866 <SD_FindSCR+0x56>
  {
    return errorstate;
 800c862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c864:	e0a3      	b.n	800c9ae <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c866:	f04f 33ff 	mov.w	r3, #4294967295
 800c86a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800c86c:	2308      	movs	r3, #8
 800c86e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800c870:	2330      	movs	r3, #48	; 0x30
 800c872:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c874:	2302      	movs	r3, #2
 800c876:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c878:	2300      	movs	r3, #0
 800c87a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c87c:	2301      	movs	r3, #1
 800c87e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f107 0210 	add.w	r2, r7, #16
 800c888:	4611      	mov	r1, r2
 800c88a:	4618      	mov	r0, r3
 800c88c:	f002 fef2 	bl	800f674 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4618      	mov	r0, r3
 800c896:	f003 f8ad 	bl	800f9f4 <SDMMC_CmdSendSCR>
 800c89a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d02a      	beq.n	800c8f8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800c8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a4:	e083      	b.n	800c9ae <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d00f      	beq.n	800c8d4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6819      	ldr	r1, [r3, #0]
 800c8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8ba:	009b      	lsls	r3, r3, #2
 800c8bc:	f107 0208 	add.w	r2, r7, #8
 800c8c0:	18d4      	adds	r4, r2, r3
 800c8c2:	4608      	mov	r0, r1
 800c8c4:	f002 fe52 	bl	800f56c <SDMMC_ReadFIFO>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	6023      	str	r3, [r4, #0]
      index++;
 800c8cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	637b      	str	r3, [r7, #52]	; 0x34
 800c8d2:	e006      	b.n	800c8e2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d012      	beq.n	800c908 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c8e2:	f7f9 ffc5 	bl	8006870 <HAL_GetTick>
 800c8e6:	4602      	mov	r2, r0
 800c8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ea:	1ad3      	subs	r3, r2, r3
 800c8ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8f0:	d102      	bne.n	800c8f8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c8f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c8f6:	e05a      	b.n	800c9ae <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8fe:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800c902:	2b00      	cmp	r3, #0
 800c904:	d0cf      	beq.n	800c8a6 <SD_FindSCR+0x96>
 800c906:	e000      	b.n	800c90a <SD_FindSCR+0xfa>
      break;
 800c908:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c910:	f003 0308 	and.w	r3, r3, #8
 800c914:	2b00      	cmp	r3, #0
 800c916:	d005      	beq.n	800c924 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	2208      	movs	r2, #8
 800c91e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c920:	2308      	movs	r3, #8
 800c922:	e044      	b.n	800c9ae <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c92a:	f003 0302 	and.w	r3, r3, #2
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d005      	beq.n	800c93e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	2202      	movs	r2, #2
 800c938:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c93a:	2302      	movs	r3, #2
 800c93c:	e037      	b.n	800c9ae <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c944:	f003 0320 	and.w	r3, r3, #32
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d005      	beq.n	800c958 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	2220      	movs	r2, #32
 800c952:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800c954:	2320      	movs	r3, #32
 800c956:	e02a      	b.n	800c9ae <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f240 523a 	movw	r2, #1338	; 0x53a
 800c960:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	061a      	lsls	r2, r3, #24
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	021b      	lsls	r3, r3, #8
 800c96a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c96e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	0a1b      	lsrs	r3, r3, #8
 800c974:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c978:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	0e1b      	lsrs	r3, r3, #24
 800c97e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c982:	601a      	str	r2, [r3, #0]
    scr++;
 800c984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c986:	3304      	adds	r3, #4
 800c988:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	061a      	lsls	r2, r3, #24
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	021b      	lsls	r3, r3, #8
 800c992:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c996:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	0a1b      	lsrs	r3, r3, #8
 800c99c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c9a0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	0e1b      	lsrs	r3, r3, #24
 800c9a6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9aa:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800c9ac:	2300      	movs	r3, #0
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	373c      	adds	r7, #60	; 0x3c
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd90      	pop	{r4, r7, pc}

0800c9b6 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800c9b6:	b580      	push	{r7, lr}
 800c9b8:	b086      	sub	sp, #24
 800c9ba:	af00      	add	r7, sp, #0
 800c9bc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9c2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9c8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c9ca:	693b      	ldr	r3, [r7, #16]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d03f      	beq.n	800ca50 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	617b      	str	r3, [r7, #20]
 800c9d4:	e033      	b.n	800ca3e <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f002 fdc6 	bl	800f56c <SDMMC_ReadFIFO>
 800c9e0:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	b2da      	uxtb	r2, r3
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	3b01      	subs	r3, #1
 800c9f4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	0a1b      	lsrs	r3, r3, #8
 800c9fa:	b2da      	uxtb	r2, r3
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	3301      	adds	r3, #1
 800ca04:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	3b01      	subs	r3, #1
 800ca0a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	0c1b      	lsrs	r3, r3, #16
 800ca10:	b2da      	uxtb	r2, r3
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	3301      	adds	r3, #1
 800ca1a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	3b01      	subs	r3, #1
 800ca20:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	0e1b      	lsrs	r3, r3, #24
 800ca26:	b2da      	uxtb	r2, r3
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	3b01      	subs	r3, #1
 800ca36:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	617b      	str	r3, [r7, #20]
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	2b07      	cmp	r3, #7
 800ca42:	d9c8      	bls.n	800c9d6 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	68fa      	ldr	r2, [r7, #12]
 800ca48:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	693a      	ldr	r2, [r7, #16]
 800ca4e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800ca50:	bf00      	nop
 800ca52:	3718      	adds	r7, #24
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b086      	sub	sp, #24
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6a1b      	ldr	r3, [r3, #32]
 800ca64:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca6a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d043      	beq.n	800cafa <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800ca72:	2300      	movs	r3, #0
 800ca74:	617b      	str	r3, [r7, #20]
 800ca76:	e037      	b.n	800cae8 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	781b      	ldrb	r3, [r3, #0]
 800ca7c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	3301      	adds	r3, #1
 800ca82:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	3b01      	subs	r3, #1
 800ca88:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	021a      	lsls	r2, r3, #8
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	4313      	orrs	r3, r2
 800ca94:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	3301      	adds	r3, #1
 800ca9a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	3b01      	subs	r3, #1
 800caa0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	781b      	ldrb	r3, [r3, #0]
 800caa6:	041a      	lsls	r2, r3, #16
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	4313      	orrs	r3, r2
 800caac:	60bb      	str	r3, [r7, #8]
      tmp++;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	3301      	adds	r3, #1
 800cab2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cab4:	693b      	ldr	r3, [r7, #16]
 800cab6:	3b01      	subs	r3, #1
 800cab8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	061a      	lsls	r2, r3, #24
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	4313      	orrs	r3, r2
 800cac4:	60bb      	str	r3, [r7, #8]
      tmp++;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	3301      	adds	r3, #1
 800caca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	3b01      	subs	r3, #1
 800cad0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f107 0208 	add.w	r2, r7, #8
 800cada:	4611      	mov	r1, r2
 800cadc:	4618      	mov	r0, r3
 800cade:	f002 fd52 	bl	800f586 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	3301      	adds	r3, #1
 800cae6:	617b      	str	r3, [r7, #20]
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	2b07      	cmp	r3, #7
 800caec:	d9c4      	bls.n	800ca78 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	68fa      	ldr	r2, [r7, #12]
 800caf2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	693a      	ldr	r2, [r7, #16]
 800caf8:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800cafa:	bf00      	nop
 800cafc:	3718      	adds	r7, #24
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b082      	sub	sp, #8
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d101      	bne.n	800cb14 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cb10:	2301      	movs	r3, #1
 800cb12:	e049      	b.n	800cba8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d106      	bne.n	800cb2e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2200      	movs	r2, #0
 800cb24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f7f9 fc8d 	bl	8006448 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2202      	movs	r2, #2
 800cb32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	3304      	adds	r3, #4
 800cb3e:	4619      	mov	r1, r3
 800cb40:	4610      	mov	r0, r2
 800cb42:	f000 fe05 	bl	800d750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2201      	movs	r2, #1
 800cb4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2201      	movs	r2, #1
 800cb52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2201      	movs	r2, #1
 800cb5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2201      	movs	r2, #1
 800cb62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2201      	movs	r2, #1
 800cb6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2201      	movs	r2, #1
 800cb72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2201      	movs	r2, #1
 800cb7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2201      	movs	r2, #1
 800cb82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2201      	movs	r2, #1
 800cb8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2201      	movs	r2, #1
 800cb92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2201      	movs	r2, #1
 800cb9a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2201      	movs	r2, #1
 800cba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cba6:	2300      	movs	r3, #0
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3708      	adds	r7, #8
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}

0800cbb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b085      	sub	sp, #20
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cbbe:	b2db      	uxtb	r3, r3
 800cbc0:	2b01      	cmp	r3, #1
 800cbc2:	d001      	beq.n	800cbc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	e04c      	b.n	800cc62 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2202      	movs	r2, #2
 800cbcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	4a26      	ldr	r2, [pc, #152]	; (800cc70 <HAL_TIM_Base_Start+0xc0>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d022      	beq.n	800cc20 <HAL_TIM_Base_Start+0x70>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbe2:	d01d      	beq.n	800cc20 <HAL_TIM_Base_Start+0x70>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	4a22      	ldr	r2, [pc, #136]	; (800cc74 <HAL_TIM_Base_Start+0xc4>)
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d018      	beq.n	800cc20 <HAL_TIM_Base_Start+0x70>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	4a21      	ldr	r2, [pc, #132]	; (800cc78 <HAL_TIM_Base_Start+0xc8>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d013      	beq.n	800cc20 <HAL_TIM_Base_Start+0x70>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4a1f      	ldr	r2, [pc, #124]	; (800cc7c <HAL_TIM_Base_Start+0xcc>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d00e      	beq.n	800cc20 <HAL_TIM_Base_Start+0x70>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	4a1e      	ldr	r2, [pc, #120]	; (800cc80 <HAL_TIM_Base_Start+0xd0>)
 800cc08:	4293      	cmp	r3, r2
 800cc0a:	d009      	beq.n	800cc20 <HAL_TIM_Base_Start+0x70>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4a1c      	ldr	r2, [pc, #112]	; (800cc84 <HAL_TIM_Base_Start+0xd4>)
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d004      	beq.n	800cc20 <HAL_TIM_Base_Start+0x70>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4a1b      	ldr	r2, [pc, #108]	; (800cc88 <HAL_TIM_Base_Start+0xd8>)
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d115      	bne.n	800cc4c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	689a      	ldr	r2, [r3, #8]
 800cc26:	4b19      	ldr	r3, [pc, #100]	; (800cc8c <HAL_TIM_Base_Start+0xdc>)
 800cc28:	4013      	ands	r3, r2
 800cc2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2b06      	cmp	r3, #6
 800cc30:	d015      	beq.n	800cc5e <HAL_TIM_Base_Start+0xae>
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc38:	d011      	beq.n	800cc5e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	681a      	ldr	r2, [r3, #0]
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f042 0201 	orr.w	r2, r2, #1
 800cc48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc4a:	e008      	b.n	800cc5e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	681a      	ldr	r2, [r3, #0]
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f042 0201 	orr.w	r2, r2, #1
 800cc5a:	601a      	str	r2, [r3, #0]
 800cc5c:	e000      	b.n	800cc60 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cc60:	2300      	movs	r3, #0
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3714      	adds	r7, #20
 800cc66:	46bd      	mov	sp, r7
 800cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6c:	4770      	bx	lr
 800cc6e:	bf00      	nop
 800cc70:	40010000 	.word	0x40010000
 800cc74:	40000400 	.word	0x40000400
 800cc78:	40000800 	.word	0x40000800
 800cc7c:	40000c00 	.word	0x40000c00
 800cc80:	40010400 	.word	0x40010400
 800cc84:	40014000 	.word	0x40014000
 800cc88:	40001800 	.word	0x40001800
 800cc8c:	00010007 	.word	0x00010007

0800cc90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b085      	sub	sp, #20
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	d001      	beq.n	800cca8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cca4:	2301      	movs	r3, #1
 800cca6:	e054      	b.n	800cd52 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2202      	movs	r2, #2
 800ccac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	68da      	ldr	r2, [r3, #12]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f042 0201 	orr.w	r2, r2, #1
 800ccbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4a26      	ldr	r2, [pc, #152]	; (800cd60 <HAL_TIM_Base_Start_IT+0xd0>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d022      	beq.n	800cd10 <HAL_TIM_Base_Start_IT+0x80>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ccd2:	d01d      	beq.n	800cd10 <HAL_TIM_Base_Start_IT+0x80>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	4a22      	ldr	r2, [pc, #136]	; (800cd64 <HAL_TIM_Base_Start_IT+0xd4>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d018      	beq.n	800cd10 <HAL_TIM_Base_Start_IT+0x80>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4a21      	ldr	r2, [pc, #132]	; (800cd68 <HAL_TIM_Base_Start_IT+0xd8>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d013      	beq.n	800cd10 <HAL_TIM_Base_Start_IT+0x80>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4a1f      	ldr	r2, [pc, #124]	; (800cd6c <HAL_TIM_Base_Start_IT+0xdc>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d00e      	beq.n	800cd10 <HAL_TIM_Base_Start_IT+0x80>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4a1e      	ldr	r2, [pc, #120]	; (800cd70 <HAL_TIM_Base_Start_IT+0xe0>)
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d009      	beq.n	800cd10 <HAL_TIM_Base_Start_IT+0x80>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a1c      	ldr	r2, [pc, #112]	; (800cd74 <HAL_TIM_Base_Start_IT+0xe4>)
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d004      	beq.n	800cd10 <HAL_TIM_Base_Start_IT+0x80>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4a1b      	ldr	r2, [pc, #108]	; (800cd78 <HAL_TIM_Base_Start_IT+0xe8>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d115      	bne.n	800cd3c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	689a      	ldr	r2, [r3, #8]
 800cd16:	4b19      	ldr	r3, [pc, #100]	; (800cd7c <HAL_TIM_Base_Start_IT+0xec>)
 800cd18:	4013      	ands	r3, r2
 800cd1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	2b06      	cmp	r3, #6
 800cd20:	d015      	beq.n	800cd4e <HAL_TIM_Base_Start_IT+0xbe>
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd28:	d011      	beq.n	800cd4e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	681a      	ldr	r2, [r3, #0]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f042 0201 	orr.w	r2, r2, #1
 800cd38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd3a:	e008      	b.n	800cd4e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	681a      	ldr	r2, [r3, #0]
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	f042 0201 	orr.w	r2, r2, #1
 800cd4a:	601a      	str	r2, [r3, #0]
 800cd4c:	e000      	b.n	800cd50 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cd50:	2300      	movs	r3, #0
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3714      	adds	r7, #20
 800cd56:	46bd      	mov	sp, r7
 800cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5c:	4770      	bx	lr
 800cd5e:	bf00      	nop
 800cd60:	40010000 	.word	0x40010000
 800cd64:	40000400 	.word	0x40000400
 800cd68:	40000800 	.word	0x40000800
 800cd6c:	40000c00 	.word	0x40000c00
 800cd70:	40010400 	.word	0x40010400
 800cd74:	40014000 	.word	0x40014000
 800cd78:	40001800 	.word	0x40001800
 800cd7c:	00010007 	.word	0x00010007

0800cd80 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b082      	sub	sp, #8
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d101      	bne.n	800cd92 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800cd8e:	2301      	movs	r3, #1
 800cd90:	e049      	b.n	800ce26 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd98:	b2db      	uxtb	r3, r3
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d106      	bne.n	800cdac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2200      	movs	r2, #0
 800cda2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f000 f841 	bl	800ce2e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2202      	movs	r2, #2
 800cdb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681a      	ldr	r2, [r3, #0]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	3304      	adds	r3, #4
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	4610      	mov	r0, r2
 800cdc0:	f000 fcc6 	bl	800d750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2201      	movs	r2, #1
 800cdc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2201      	movs	r2, #1
 800cdd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2201      	movs	r2, #1
 800cde0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2201      	movs	r2, #1
 800cde8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2201      	movs	r2, #1
 800ce00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2201      	movs	r2, #1
 800ce08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2201      	movs	r2, #1
 800ce10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2201      	movs	r2, #1
 800ce18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2201      	movs	r2, #1
 800ce20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ce24:	2300      	movs	r3, #0
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3708      	adds	r7, #8
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}

0800ce2e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800ce2e:	b480      	push	{r7}
 800ce30:	b083      	sub	sp, #12
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800ce36:	bf00      	nop
 800ce38:	370c      	adds	r7, #12
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce40:	4770      	bx	lr
	...

0800ce44 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b084      	sub	sp, #16
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
 800ce4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d104      	bne.n	800ce62 <HAL_TIM_IC_Start_IT+0x1e>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ce5e:	b2db      	uxtb	r3, r3
 800ce60:	e023      	b.n	800ceaa <HAL_TIM_IC_Start_IT+0x66>
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	2b04      	cmp	r3, #4
 800ce66:	d104      	bne.n	800ce72 <HAL_TIM_IC_Start_IT+0x2e>
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ce6e:	b2db      	uxtb	r3, r3
 800ce70:	e01b      	b.n	800ceaa <HAL_TIM_IC_Start_IT+0x66>
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	2b08      	cmp	r3, #8
 800ce76:	d104      	bne.n	800ce82 <HAL_TIM_IC_Start_IT+0x3e>
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ce7e:	b2db      	uxtb	r3, r3
 800ce80:	e013      	b.n	800ceaa <HAL_TIM_IC_Start_IT+0x66>
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	2b0c      	cmp	r3, #12
 800ce86:	d104      	bne.n	800ce92 <HAL_TIM_IC_Start_IT+0x4e>
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce8e:	b2db      	uxtb	r3, r3
 800ce90:	e00b      	b.n	800ceaa <HAL_TIM_IC_Start_IT+0x66>
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	2b10      	cmp	r3, #16
 800ce96:	d104      	bne.n	800cea2 <HAL_TIM_IC_Start_IT+0x5e>
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ce9e:	b2db      	uxtb	r3, r3
 800cea0:	e003      	b.n	800ceaa <HAL_TIM_IC_Start_IT+0x66>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cea8:	b2db      	uxtb	r3, r3
 800ceaa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d104      	bne.n	800cebc <HAL_TIM_IC_Start_IT+0x78>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ceb8:	b2db      	uxtb	r3, r3
 800ceba:	e013      	b.n	800cee4 <HAL_TIM_IC_Start_IT+0xa0>
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	2b04      	cmp	r3, #4
 800cec0:	d104      	bne.n	800cecc <HAL_TIM_IC_Start_IT+0x88>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cec8:	b2db      	uxtb	r3, r3
 800ceca:	e00b      	b.n	800cee4 <HAL_TIM_IC_Start_IT+0xa0>
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	2b08      	cmp	r3, #8
 800ced0:	d104      	bne.n	800cedc <HAL_TIM_IC_Start_IT+0x98>
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ced8:	b2db      	uxtb	r3, r3
 800ceda:	e003      	b.n	800cee4 <HAL_TIM_IC_Start_IT+0xa0>
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800cee2:	b2db      	uxtb	r3, r3
 800cee4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800cee6:	7bbb      	ldrb	r3, [r7, #14]
 800cee8:	2b01      	cmp	r3, #1
 800ceea:	d102      	bne.n	800cef2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800ceec:	7b7b      	ldrb	r3, [r7, #13]
 800ceee:	2b01      	cmp	r3, #1
 800cef0:	d001      	beq.n	800cef6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800cef2:	2301      	movs	r3, #1
 800cef4:	e0e2      	b.n	800d0bc <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d104      	bne.n	800cf06 <HAL_TIM_IC_Start_IT+0xc2>
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2202      	movs	r2, #2
 800cf00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cf04:	e023      	b.n	800cf4e <HAL_TIM_IC_Start_IT+0x10a>
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	2b04      	cmp	r3, #4
 800cf0a:	d104      	bne.n	800cf16 <HAL_TIM_IC_Start_IT+0xd2>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2202      	movs	r2, #2
 800cf10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf14:	e01b      	b.n	800cf4e <HAL_TIM_IC_Start_IT+0x10a>
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	2b08      	cmp	r3, #8
 800cf1a:	d104      	bne.n	800cf26 <HAL_TIM_IC_Start_IT+0xe2>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2202      	movs	r2, #2
 800cf20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cf24:	e013      	b.n	800cf4e <HAL_TIM_IC_Start_IT+0x10a>
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	2b0c      	cmp	r3, #12
 800cf2a:	d104      	bne.n	800cf36 <HAL_TIM_IC_Start_IT+0xf2>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2202      	movs	r2, #2
 800cf30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cf34:	e00b      	b.n	800cf4e <HAL_TIM_IC_Start_IT+0x10a>
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	2b10      	cmp	r3, #16
 800cf3a:	d104      	bne.n	800cf46 <HAL_TIM_IC_Start_IT+0x102>
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2202      	movs	r2, #2
 800cf40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cf44:	e003      	b.n	800cf4e <HAL_TIM_IC_Start_IT+0x10a>
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2202      	movs	r2, #2
 800cf4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d104      	bne.n	800cf5e <HAL_TIM_IC_Start_IT+0x11a>
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2202      	movs	r2, #2
 800cf58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf5c:	e013      	b.n	800cf86 <HAL_TIM_IC_Start_IT+0x142>
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	2b04      	cmp	r3, #4
 800cf62:	d104      	bne.n	800cf6e <HAL_TIM_IC_Start_IT+0x12a>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2202      	movs	r2, #2
 800cf68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf6c:	e00b      	b.n	800cf86 <HAL_TIM_IC_Start_IT+0x142>
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	2b08      	cmp	r3, #8
 800cf72:	d104      	bne.n	800cf7e <HAL_TIM_IC_Start_IT+0x13a>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2202      	movs	r2, #2
 800cf78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cf7c:	e003      	b.n	800cf86 <HAL_TIM_IC_Start_IT+0x142>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2202      	movs	r2, #2
 800cf82:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	2b0c      	cmp	r3, #12
 800cf8a:	d841      	bhi.n	800d010 <HAL_TIM_IC_Start_IT+0x1cc>
 800cf8c:	a201      	add	r2, pc, #4	; (adr r2, 800cf94 <HAL_TIM_IC_Start_IT+0x150>)
 800cf8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf92:	bf00      	nop
 800cf94:	0800cfc9 	.word	0x0800cfc9
 800cf98:	0800d011 	.word	0x0800d011
 800cf9c:	0800d011 	.word	0x0800d011
 800cfa0:	0800d011 	.word	0x0800d011
 800cfa4:	0800cfdb 	.word	0x0800cfdb
 800cfa8:	0800d011 	.word	0x0800d011
 800cfac:	0800d011 	.word	0x0800d011
 800cfb0:	0800d011 	.word	0x0800d011
 800cfb4:	0800cfed 	.word	0x0800cfed
 800cfb8:	0800d011 	.word	0x0800d011
 800cfbc:	0800d011 	.word	0x0800d011
 800cfc0:	0800d011 	.word	0x0800d011
 800cfc4:	0800cfff 	.word	0x0800cfff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	68da      	ldr	r2, [r3, #12]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f042 0202 	orr.w	r2, r2, #2
 800cfd6:	60da      	str	r2, [r3, #12]
      break;
 800cfd8:	e01d      	b.n	800d016 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	68da      	ldr	r2, [r3, #12]
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f042 0204 	orr.w	r2, r2, #4
 800cfe8:	60da      	str	r2, [r3, #12]
      break;
 800cfea:	e014      	b.n	800d016 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	68da      	ldr	r2, [r3, #12]
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f042 0208 	orr.w	r2, r2, #8
 800cffa:	60da      	str	r2, [r3, #12]
      break;
 800cffc:	e00b      	b.n	800d016 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	68da      	ldr	r2, [r3, #12]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f042 0210 	orr.w	r2, r2, #16
 800d00c:	60da      	str	r2, [r3, #12]
      break;
 800d00e:	e002      	b.n	800d016 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800d010:	2301      	movs	r3, #1
 800d012:	73fb      	strb	r3, [r7, #15]
      break;
 800d014:	bf00      	nop
  }

  if (status == HAL_OK)
 800d016:	7bfb      	ldrb	r3, [r7, #15]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d14e      	bne.n	800d0ba <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	2201      	movs	r2, #1
 800d022:	6839      	ldr	r1, [r7, #0]
 800d024:	4618      	mov	r0, r3
 800d026:	f000 fe8b 	bl	800dd40 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	4a25      	ldr	r2, [pc, #148]	; (800d0c4 <HAL_TIM_IC_Start_IT+0x280>)
 800d030:	4293      	cmp	r3, r2
 800d032:	d022      	beq.n	800d07a <HAL_TIM_IC_Start_IT+0x236>
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d03c:	d01d      	beq.n	800d07a <HAL_TIM_IC_Start_IT+0x236>
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	4a21      	ldr	r2, [pc, #132]	; (800d0c8 <HAL_TIM_IC_Start_IT+0x284>)
 800d044:	4293      	cmp	r3, r2
 800d046:	d018      	beq.n	800d07a <HAL_TIM_IC_Start_IT+0x236>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	4a1f      	ldr	r2, [pc, #124]	; (800d0cc <HAL_TIM_IC_Start_IT+0x288>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d013      	beq.n	800d07a <HAL_TIM_IC_Start_IT+0x236>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	4a1e      	ldr	r2, [pc, #120]	; (800d0d0 <HAL_TIM_IC_Start_IT+0x28c>)
 800d058:	4293      	cmp	r3, r2
 800d05a:	d00e      	beq.n	800d07a <HAL_TIM_IC_Start_IT+0x236>
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4a1c      	ldr	r2, [pc, #112]	; (800d0d4 <HAL_TIM_IC_Start_IT+0x290>)
 800d062:	4293      	cmp	r3, r2
 800d064:	d009      	beq.n	800d07a <HAL_TIM_IC_Start_IT+0x236>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	4a1b      	ldr	r2, [pc, #108]	; (800d0d8 <HAL_TIM_IC_Start_IT+0x294>)
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d004      	beq.n	800d07a <HAL_TIM_IC_Start_IT+0x236>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4a19      	ldr	r2, [pc, #100]	; (800d0dc <HAL_TIM_IC_Start_IT+0x298>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d115      	bne.n	800d0a6 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	689a      	ldr	r2, [r3, #8]
 800d080:	4b17      	ldr	r3, [pc, #92]	; (800d0e0 <HAL_TIM_IC_Start_IT+0x29c>)
 800d082:	4013      	ands	r3, r2
 800d084:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	2b06      	cmp	r3, #6
 800d08a:	d015      	beq.n	800d0b8 <HAL_TIM_IC_Start_IT+0x274>
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d092:	d011      	beq.n	800d0b8 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	681a      	ldr	r2, [r3, #0]
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f042 0201 	orr.w	r2, r2, #1
 800d0a2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0a4:	e008      	b.n	800d0b8 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	681a      	ldr	r2, [r3, #0]
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	f042 0201 	orr.w	r2, r2, #1
 800d0b4:	601a      	str	r2, [r3, #0]
 800d0b6:	e000      	b.n	800d0ba <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0b8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800d0ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3710      	adds	r7, #16
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}
 800d0c4:	40010000 	.word	0x40010000
 800d0c8:	40000400 	.word	0x40000400
 800d0cc:	40000800 	.word	0x40000800
 800d0d0:	40000c00 	.word	0x40000c00
 800d0d4:	40010400 	.word	0x40010400
 800d0d8:	40014000 	.word	0x40014000
 800d0dc:	40001800 	.word	0x40001800
 800d0e0:	00010007 	.word	0x00010007

0800d0e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b082      	sub	sp, #8
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	691b      	ldr	r3, [r3, #16]
 800d0f2:	f003 0302 	and.w	r3, r3, #2
 800d0f6:	2b02      	cmp	r3, #2
 800d0f8:	d122      	bne.n	800d140 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	68db      	ldr	r3, [r3, #12]
 800d100:	f003 0302 	and.w	r3, r3, #2
 800d104:	2b02      	cmp	r3, #2
 800d106:	d11b      	bne.n	800d140 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	f06f 0202 	mvn.w	r2, #2
 800d110:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2201      	movs	r2, #1
 800d116:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	699b      	ldr	r3, [r3, #24]
 800d11e:	f003 0303 	and.w	r3, r3, #3
 800d122:	2b00      	cmp	r3, #0
 800d124:	d003      	beq.n	800d12e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f7f7 ffcc 	bl	80050c4 <HAL_TIM_IC_CaptureCallback>
 800d12c:	e005      	b.n	800d13a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f000 fae4 	bl	800d6fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f000 faeb 	bl	800d710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2200      	movs	r2, #0
 800d13e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	691b      	ldr	r3, [r3, #16]
 800d146:	f003 0304 	and.w	r3, r3, #4
 800d14a:	2b04      	cmp	r3, #4
 800d14c:	d122      	bne.n	800d194 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	68db      	ldr	r3, [r3, #12]
 800d154:	f003 0304 	and.w	r3, r3, #4
 800d158:	2b04      	cmp	r3, #4
 800d15a:	d11b      	bne.n	800d194 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	f06f 0204 	mvn.w	r2, #4
 800d164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2202      	movs	r2, #2
 800d16a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	699b      	ldr	r3, [r3, #24]
 800d172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d176:	2b00      	cmp	r3, #0
 800d178:	d003      	beq.n	800d182 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f7f7 ffa2 	bl	80050c4 <HAL_TIM_IC_CaptureCallback>
 800d180:	e005      	b.n	800d18e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 faba 	bl	800d6fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f000 fac1 	bl	800d710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2200      	movs	r2, #0
 800d192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	691b      	ldr	r3, [r3, #16]
 800d19a:	f003 0308 	and.w	r3, r3, #8
 800d19e:	2b08      	cmp	r3, #8
 800d1a0:	d122      	bne.n	800d1e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	68db      	ldr	r3, [r3, #12]
 800d1a8:	f003 0308 	and.w	r3, r3, #8
 800d1ac:	2b08      	cmp	r3, #8
 800d1ae:	d11b      	bne.n	800d1e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f06f 0208 	mvn.w	r2, #8
 800d1b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2204      	movs	r2, #4
 800d1be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	69db      	ldr	r3, [r3, #28]
 800d1c6:	f003 0303 	and.w	r3, r3, #3
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d003      	beq.n	800d1d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f7f7 ff78 	bl	80050c4 <HAL_TIM_IC_CaptureCallback>
 800d1d4:	e005      	b.n	800d1e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f000 fa90 	bl	800d6fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f000 fa97 	bl	800d710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	691b      	ldr	r3, [r3, #16]
 800d1ee:	f003 0310 	and.w	r3, r3, #16
 800d1f2:	2b10      	cmp	r3, #16
 800d1f4:	d122      	bne.n	800d23c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	68db      	ldr	r3, [r3, #12]
 800d1fc:	f003 0310 	and.w	r3, r3, #16
 800d200:	2b10      	cmp	r3, #16
 800d202:	d11b      	bne.n	800d23c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	f06f 0210 	mvn.w	r2, #16
 800d20c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2208      	movs	r2, #8
 800d212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	69db      	ldr	r3, [r3, #28]
 800d21a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d003      	beq.n	800d22a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f7f7 ff4e 	bl	80050c4 <HAL_TIM_IC_CaptureCallback>
 800d228:	e005      	b.n	800d236 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f000 fa66 	bl	800d6fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f000 fa6d 	bl	800d710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2200      	movs	r2, #0
 800d23a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	691b      	ldr	r3, [r3, #16]
 800d242:	f003 0301 	and.w	r3, r3, #1
 800d246:	2b01      	cmp	r3, #1
 800d248:	d10e      	bne.n	800d268 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	68db      	ldr	r3, [r3, #12]
 800d250:	f003 0301 	and.w	r3, r3, #1
 800d254:	2b01      	cmp	r3, #1
 800d256:	d107      	bne.n	800d268 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f06f 0201 	mvn.w	r2, #1
 800d260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f7f7 fe9e 	bl	8004fa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	691b      	ldr	r3, [r3, #16]
 800d26e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d272:	2b80      	cmp	r3, #128	; 0x80
 800d274:	d10e      	bne.n	800d294 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	68db      	ldr	r3, [r3, #12]
 800d27c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d280:	2b80      	cmp	r3, #128	; 0x80
 800d282:	d107      	bne.n	800d294 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d28c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f000 fe14 	bl	800debc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	691b      	ldr	r3, [r3, #16]
 800d29a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d29e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2a2:	d10e      	bne.n	800d2c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	68db      	ldr	r3, [r3, #12]
 800d2aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2ae:	2b80      	cmp	r3, #128	; 0x80
 800d2b0:	d107      	bne.n	800d2c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d2ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f000 fe07 	bl	800ded0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	691b      	ldr	r3, [r3, #16]
 800d2c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2cc:	2b40      	cmp	r3, #64	; 0x40
 800d2ce:	d10e      	bne.n	800d2ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	68db      	ldr	r3, [r3, #12]
 800d2d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2da:	2b40      	cmp	r3, #64	; 0x40
 800d2dc:	d107      	bne.n	800d2ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d2e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f000 fa1b 	bl	800d724 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	691b      	ldr	r3, [r3, #16]
 800d2f4:	f003 0320 	and.w	r3, r3, #32
 800d2f8:	2b20      	cmp	r3, #32
 800d2fa:	d10e      	bne.n	800d31a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	68db      	ldr	r3, [r3, #12]
 800d302:	f003 0320 	and.w	r3, r3, #32
 800d306:	2b20      	cmp	r3, #32
 800d308:	d107      	bne.n	800d31a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f06f 0220 	mvn.w	r2, #32
 800d312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f000 fdc7 	bl	800dea8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d31a:	bf00      	nop
 800d31c:	3708      	adds	r7, #8
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}

0800d322 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800d322:	b580      	push	{r7, lr}
 800d324:	b086      	sub	sp, #24
 800d326:	af00      	add	r7, sp, #0
 800d328:	60f8      	str	r0, [r7, #12]
 800d32a:	60b9      	str	r1, [r7, #8]
 800d32c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d32e:	2300      	movs	r3, #0
 800d330:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d338:	2b01      	cmp	r3, #1
 800d33a:	d101      	bne.n	800d340 <HAL_TIM_IC_ConfigChannel+0x1e>
 800d33c:	2302      	movs	r3, #2
 800d33e:	e088      	b.n	800d452 <HAL_TIM_IC_ConfigChannel+0x130>
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	2201      	movs	r2, #1
 800d344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d11b      	bne.n	800d386 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	6818      	ldr	r0, [r3, #0]
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	6819      	ldr	r1, [r3, #0]
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	685a      	ldr	r2, [r3, #4]
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	68db      	ldr	r3, [r3, #12]
 800d35e:	f000 fb2b 	bl	800d9b8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	699a      	ldr	r2, [r3, #24]
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f022 020c 	bic.w	r2, r2, #12
 800d370:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	6999      	ldr	r1, [r3, #24]
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	689a      	ldr	r2, [r3, #8]
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	430a      	orrs	r2, r1
 800d382:	619a      	str	r2, [r3, #24]
 800d384:	e060      	b.n	800d448 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2b04      	cmp	r3, #4
 800d38a:	d11c      	bne.n	800d3c6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	6818      	ldr	r0, [r3, #0]
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	6819      	ldr	r1, [r3, #0]
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	685a      	ldr	r2, [r3, #4]
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	68db      	ldr	r3, [r3, #12]
 800d39c:	f000 fbaf 	bl	800dafe <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	699a      	ldr	r2, [r3, #24]
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d3ae:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	6999      	ldr	r1, [r3, #24]
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	689b      	ldr	r3, [r3, #8]
 800d3ba:	021a      	lsls	r2, r3, #8
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	430a      	orrs	r2, r1
 800d3c2:	619a      	str	r2, [r3, #24]
 800d3c4:	e040      	b.n	800d448 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2b08      	cmp	r3, #8
 800d3ca:	d11b      	bne.n	800d404 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	6818      	ldr	r0, [r3, #0]
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	6819      	ldr	r1, [r3, #0]
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	685a      	ldr	r2, [r3, #4]
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	68db      	ldr	r3, [r3, #12]
 800d3dc:	f000 fbfc 	bl	800dbd8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	69da      	ldr	r2, [r3, #28]
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f022 020c 	bic.w	r2, r2, #12
 800d3ee:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	69d9      	ldr	r1, [r3, #28]
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	689a      	ldr	r2, [r3, #8]
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	430a      	orrs	r2, r1
 800d400:	61da      	str	r2, [r3, #28]
 800d402:	e021      	b.n	800d448 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2b0c      	cmp	r3, #12
 800d408:	d11c      	bne.n	800d444 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	6818      	ldr	r0, [r3, #0]
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	6819      	ldr	r1, [r3, #0]
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	685a      	ldr	r2, [r3, #4]
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	68db      	ldr	r3, [r3, #12]
 800d41a:	f000 fc19 	bl	800dc50 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	69da      	ldr	r2, [r3, #28]
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d42c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	69d9      	ldr	r1, [r3, #28]
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	689b      	ldr	r3, [r3, #8]
 800d438:	021a      	lsls	r2, r3, #8
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	430a      	orrs	r2, r1
 800d440:	61da      	str	r2, [r3, #28]
 800d442:	e001      	b.n	800d448 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800d444:	2301      	movs	r3, #1
 800d446:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	2200      	movs	r2, #0
 800d44c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d450:	7dfb      	ldrb	r3, [r7, #23]
}
 800d452:	4618      	mov	r0, r3
 800d454:	3718      	adds	r7, #24
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
	...

0800d45c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b084      	sub	sp, #16
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d466:	2300      	movs	r3, #0
 800d468:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d470:	2b01      	cmp	r3, #1
 800d472:	d101      	bne.n	800d478 <HAL_TIM_ConfigClockSource+0x1c>
 800d474:	2302      	movs	r3, #2
 800d476:	e0b4      	b.n	800d5e2 <HAL_TIM_ConfigClockSource+0x186>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2201      	movs	r2, #1
 800d47c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2202      	movs	r2, #2
 800d484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	689b      	ldr	r3, [r3, #8]
 800d48e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d490:	68ba      	ldr	r2, [r7, #8]
 800d492:	4b56      	ldr	r3, [pc, #344]	; (800d5ec <HAL_TIM_ConfigClockSource+0x190>)
 800d494:	4013      	ands	r3, r2
 800d496:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d49e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	68ba      	ldr	r2, [r7, #8]
 800d4a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d4b0:	d03e      	beq.n	800d530 <HAL_TIM_ConfigClockSource+0xd4>
 800d4b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d4b6:	f200 8087 	bhi.w	800d5c8 <HAL_TIM_ConfigClockSource+0x16c>
 800d4ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4be:	f000 8086 	beq.w	800d5ce <HAL_TIM_ConfigClockSource+0x172>
 800d4c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4c6:	d87f      	bhi.n	800d5c8 <HAL_TIM_ConfigClockSource+0x16c>
 800d4c8:	2b70      	cmp	r3, #112	; 0x70
 800d4ca:	d01a      	beq.n	800d502 <HAL_TIM_ConfigClockSource+0xa6>
 800d4cc:	2b70      	cmp	r3, #112	; 0x70
 800d4ce:	d87b      	bhi.n	800d5c8 <HAL_TIM_ConfigClockSource+0x16c>
 800d4d0:	2b60      	cmp	r3, #96	; 0x60
 800d4d2:	d050      	beq.n	800d576 <HAL_TIM_ConfigClockSource+0x11a>
 800d4d4:	2b60      	cmp	r3, #96	; 0x60
 800d4d6:	d877      	bhi.n	800d5c8 <HAL_TIM_ConfigClockSource+0x16c>
 800d4d8:	2b50      	cmp	r3, #80	; 0x50
 800d4da:	d03c      	beq.n	800d556 <HAL_TIM_ConfigClockSource+0xfa>
 800d4dc:	2b50      	cmp	r3, #80	; 0x50
 800d4de:	d873      	bhi.n	800d5c8 <HAL_TIM_ConfigClockSource+0x16c>
 800d4e0:	2b40      	cmp	r3, #64	; 0x40
 800d4e2:	d058      	beq.n	800d596 <HAL_TIM_ConfigClockSource+0x13a>
 800d4e4:	2b40      	cmp	r3, #64	; 0x40
 800d4e6:	d86f      	bhi.n	800d5c8 <HAL_TIM_ConfigClockSource+0x16c>
 800d4e8:	2b30      	cmp	r3, #48	; 0x30
 800d4ea:	d064      	beq.n	800d5b6 <HAL_TIM_ConfigClockSource+0x15a>
 800d4ec:	2b30      	cmp	r3, #48	; 0x30
 800d4ee:	d86b      	bhi.n	800d5c8 <HAL_TIM_ConfigClockSource+0x16c>
 800d4f0:	2b20      	cmp	r3, #32
 800d4f2:	d060      	beq.n	800d5b6 <HAL_TIM_ConfigClockSource+0x15a>
 800d4f4:	2b20      	cmp	r3, #32
 800d4f6:	d867      	bhi.n	800d5c8 <HAL_TIM_ConfigClockSource+0x16c>
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d05c      	beq.n	800d5b6 <HAL_TIM_ConfigClockSource+0x15a>
 800d4fc:	2b10      	cmp	r3, #16
 800d4fe:	d05a      	beq.n	800d5b6 <HAL_TIM_ConfigClockSource+0x15a>
 800d500:	e062      	b.n	800d5c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6818      	ldr	r0, [r3, #0]
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	6899      	ldr	r1, [r3, #8]
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	685a      	ldr	r2, [r3, #4]
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	68db      	ldr	r3, [r3, #12]
 800d512:	f000 fbf5 	bl	800dd00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	689b      	ldr	r3, [r3, #8]
 800d51c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d524:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	68ba      	ldr	r2, [r7, #8]
 800d52c:	609a      	str	r2, [r3, #8]
      break;
 800d52e:	e04f      	b.n	800d5d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6818      	ldr	r0, [r3, #0]
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	6899      	ldr	r1, [r3, #8]
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	685a      	ldr	r2, [r3, #4]
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	68db      	ldr	r3, [r3, #12]
 800d540:	f000 fbde 	bl	800dd00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	689a      	ldr	r2, [r3, #8]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d552:	609a      	str	r2, [r3, #8]
      break;
 800d554:	e03c      	b.n	800d5d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6818      	ldr	r0, [r3, #0]
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	6859      	ldr	r1, [r3, #4]
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	68db      	ldr	r3, [r3, #12]
 800d562:	461a      	mov	r2, r3
 800d564:	f000 fa9c 	bl	800daa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	2150      	movs	r1, #80	; 0x50
 800d56e:	4618      	mov	r0, r3
 800d570:	f000 fbab 	bl	800dcca <TIM_ITRx_SetConfig>
      break;
 800d574:	e02c      	b.n	800d5d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6818      	ldr	r0, [r3, #0]
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	6859      	ldr	r1, [r3, #4]
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	68db      	ldr	r3, [r3, #12]
 800d582:	461a      	mov	r2, r3
 800d584:	f000 faf8 	bl	800db78 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	2160      	movs	r1, #96	; 0x60
 800d58e:	4618      	mov	r0, r3
 800d590:	f000 fb9b 	bl	800dcca <TIM_ITRx_SetConfig>
      break;
 800d594:	e01c      	b.n	800d5d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6818      	ldr	r0, [r3, #0]
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	6859      	ldr	r1, [r3, #4]
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	68db      	ldr	r3, [r3, #12]
 800d5a2:	461a      	mov	r2, r3
 800d5a4:	f000 fa7c 	bl	800daa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	2140      	movs	r1, #64	; 0x40
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f000 fb8b 	bl	800dcca <TIM_ITRx_SetConfig>
      break;
 800d5b4:	e00c      	b.n	800d5d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681a      	ldr	r2, [r3, #0]
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	4619      	mov	r1, r3
 800d5c0:	4610      	mov	r0, r2
 800d5c2:	f000 fb82 	bl	800dcca <TIM_ITRx_SetConfig>
      break;
 800d5c6:	e003      	b.n	800d5d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	73fb      	strb	r3, [r7, #15]
      break;
 800d5cc:	e000      	b.n	800d5d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d5ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2201      	movs	r2, #1
 800d5d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3710      	adds	r7, #16
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	fffeff88 	.word	0xfffeff88

0800d5f0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b082      	sub	sp, #8
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d600:	2b01      	cmp	r3, #1
 800d602:	d101      	bne.n	800d608 <HAL_TIM_SlaveConfigSynchro+0x18>
 800d604:	2302      	movs	r3, #2
 800d606:	e031      	b.n	800d66c <HAL_TIM_SlaveConfigSynchro+0x7c>
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2201      	movs	r2, #1
 800d60c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2202      	movs	r2, #2
 800d614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800d618:	6839      	ldr	r1, [r7, #0]
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f000 f938 	bl	800d890 <TIM_SlaveTimer_SetConfig>
 800d620:	4603      	mov	r3, r0
 800d622:	2b00      	cmp	r3, #0
 800d624:	d009      	beq.n	800d63a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2201      	movs	r2, #1
 800d62a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2200      	movs	r2, #0
 800d632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800d636:	2301      	movs	r3, #1
 800d638:	e018      	b.n	800d66c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	68da      	ldr	r2, [r3, #12]
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d648:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	68da      	ldr	r2, [r3, #12]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d658:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2201      	movs	r2, #1
 800d65e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2200      	movs	r2, #0
 800d666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d66a:	2300      	movs	r3, #0
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3708      	adds	r7, #8
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}

0800d674 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d674:	b480      	push	{r7}
 800d676:	b085      	sub	sp, #20
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800d67e:	2300      	movs	r3, #0
 800d680:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	2b0c      	cmp	r3, #12
 800d686:	d831      	bhi.n	800d6ec <HAL_TIM_ReadCapturedValue+0x78>
 800d688:	a201      	add	r2, pc, #4	; (adr r2, 800d690 <HAL_TIM_ReadCapturedValue+0x1c>)
 800d68a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d68e:	bf00      	nop
 800d690:	0800d6c5 	.word	0x0800d6c5
 800d694:	0800d6ed 	.word	0x0800d6ed
 800d698:	0800d6ed 	.word	0x0800d6ed
 800d69c:	0800d6ed 	.word	0x0800d6ed
 800d6a0:	0800d6cf 	.word	0x0800d6cf
 800d6a4:	0800d6ed 	.word	0x0800d6ed
 800d6a8:	0800d6ed 	.word	0x0800d6ed
 800d6ac:	0800d6ed 	.word	0x0800d6ed
 800d6b0:	0800d6d9 	.word	0x0800d6d9
 800d6b4:	0800d6ed 	.word	0x0800d6ed
 800d6b8:	0800d6ed 	.word	0x0800d6ed
 800d6bc:	0800d6ed 	.word	0x0800d6ed
 800d6c0:	0800d6e3 	.word	0x0800d6e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ca:	60fb      	str	r3, [r7, #12]

      break;
 800d6cc:	e00f      	b.n	800d6ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6d4:	60fb      	str	r3, [r7, #12]

      break;
 800d6d6:	e00a      	b.n	800d6ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6de:	60fb      	str	r3, [r7, #12]

      break;
 800d6e0:	e005      	b.n	800d6ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6e8:	60fb      	str	r3, [r7, #12]

      break;
 800d6ea:	e000      	b.n	800d6ee <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800d6ec:	bf00      	nop
  }

  return tmpreg;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3714      	adds	r7, #20
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fa:	4770      	bx	lr

0800d6fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b083      	sub	sp, #12
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d704:	bf00      	nop
 800d706:	370c      	adds	r7, #12
 800d708:	46bd      	mov	sp, r7
 800d70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70e:	4770      	bx	lr

0800d710 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d710:	b480      	push	{r7}
 800d712:	b083      	sub	sp, #12
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d718:	bf00      	nop
 800d71a:	370c      	adds	r7, #12
 800d71c:	46bd      	mov	sp, r7
 800d71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d722:	4770      	bx	lr

0800d724 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d724:	b480      	push	{r7}
 800d726:	b083      	sub	sp, #12
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d72c:	bf00      	nop
 800d72e:	370c      	adds	r7, #12
 800d730:	46bd      	mov	sp, r7
 800d732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d736:	4770      	bx	lr

0800d738 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(TIM_HandleTypeDef *htim)
{
 800d738:	b480      	push	{r7}
 800d73a:	b083      	sub	sp, #12
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	7f1b      	ldrb	r3, [r3, #28]
}
 800d744:	4618      	mov	r0, r3
 800d746:	370c      	adds	r7, #12
 800d748:	46bd      	mov	sp, r7
 800d74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74e:	4770      	bx	lr

0800d750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d750:	b480      	push	{r7}
 800d752:	b085      	sub	sp, #20
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	4a40      	ldr	r2, [pc, #256]	; (800d864 <TIM_Base_SetConfig+0x114>)
 800d764:	4293      	cmp	r3, r2
 800d766:	d013      	beq.n	800d790 <TIM_Base_SetConfig+0x40>
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d76e:	d00f      	beq.n	800d790 <TIM_Base_SetConfig+0x40>
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	4a3d      	ldr	r2, [pc, #244]	; (800d868 <TIM_Base_SetConfig+0x118>)
 800d774:	4293      	cmp	r3, r2
 800d776:	d00b      	beq.n	800d790 <TIM_Base_SetConfig+0x40>
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	4a3c      	ldr	r2, [pc, #240]	; (800d86c <TIM_Base_SetConfig+0x11c>)
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d007      	beq.n	800d790 <TIM_Base_SetConfig+0x40>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	4a3b      	ldr	r2, [pc, #236]	; (800d870 <TIM_Base_SetConfig+0x120>)
 800d784:	4293      	cmp	r3, r2
 800d786:	d003      	beq.n	800d790 <TIM_Base_SetConfig+0x40>
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	4a3a      	ldr	r2, [pc, #232]	; (800d874 <TIM_Base_SetConfig+0x124>)
 800d78c:	4293      	cmp	r3, r2
 800d78e:	d108      	bne.n	800d7a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	685b      	ldr	r3, [r3, #4]
 800d79c:	68fa      	ldr	r2, [r7, #12]
 800d79e:	4313      	orrs	r3, r2
 800d7a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	4a2f      	ldr	r2, [pc, #188]	; (800d864 <TIM_Base_SetConfig+0x114>)
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	d02b      	beq.n	800d802 <TIM_Base_SetConfig+0xb2>
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7b0:	d027      	beq.n	800d802 <TIM_Base_SetConfig+0xb2>
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	4a2c      	ldr	r2, [pc, #176]	; (800d868 <TIM_Base_SetConfig+0x118>)
 800d7b6:	4293      	cmp	r3, r2
 800d7b8:	d023      	beq.n	800d802 <TIM_Base_SetConfig+0xb2>
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	4a2b      	ldr	r2, [pc, #172]	; (800d86c <TIM_Base_SetConfig+0x11c>)
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	d01f      	beq.n	800d802 <TIM_Base_SetConfig+0xb2>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	4a2a      	ldr	r2, [pc, #168]	; (800d870 <TIM_Base_SetConfig+0x120>)
 800d7c6:	4293      	cmp	r3, r2
 800d7c8:	d01b      	beq.n	800d802 <TIM_Base_SetConfig+0xb2>
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	4a29      	ldr	r2, [pc, #164]	; (800d874 <TIM_Base_SetConfig+0x124>)
 800d7ce:	4293      	cmp	r3, r2
 800d7d0:	d017      	beq.n	800d802 <TIM_Base_SetConfig+0xb2>
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	4a28      	ldr	r2, [pc, #160]	; (800d878 <TIM_Base_SetConfig+0x128>)
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	d013      	beq.n	800d802 <TIM_Base_SetConfig+0xb2>
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	4a27      	ldr	r2, [pc, #156]	; (800d87c <TIM_Base_SetConfig+0x12c>)
 800d7de:	4293      	cmp	r3, r2
 800d7e0:	d00f      	beq.n	800d802 <TIM_Base_SetConfig+0xb2>
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	4a26      	ldr	r2, [pc, #152]	; (800d880 <TIM_Base_SetConfig+0x130>)
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	d00b      	beq.n	800d802 <TIM_Base_SetConfig+0xb2>
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	4a25      	ldr	r2, [pc, #148]	; (800d884 <TIM_Base_SetConfig+0x134>)
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	d007      	beq.n	800d802 <TIM_Base_SetConfig+0xb2>
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	4a24      	ldr	r2, [pc, #144]	; (800d888 <TIM_Base_SetConfig+0x138>)
 800d7f6:	4293      	cmp	r3, r2
 800d7f8:	d003      	beq.n	800d802 <TIM_Base_SetConfig+0xb2>
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	4a23      	ldr	r2, [pc, #140]	; (800d88c <TIM_Base_SetConfig+0x13c>)
 800d7fe:	4293      	cmp	r3, r2
 800d800:	d108      	bne.n	800d814 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	68db      	ldr	r3, [r3, #12]
 800d80e:	68fa      	ldr	r2, [r7, #12]
 800d810:	4313      	orrs	r3, r2
 800d812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	695b      	ldr	r3, [r3, #20]
 800d81e:	4313      	orrs	r3, r2
 800d820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	68fa      	ldr	r2, [r7, #12]
 800d826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	689a      	ldr	r2, [r3, #8]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	681a      	ldr	r2, [r3, #0]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	4a0a      	ldr	r2, [pc, #40]	; (800d864 <TIM_Base_SetConfig+0x114>)
 800d83c:	4293      	cmp	r3, r2
 800d83e:	d003      	beq.n	800d848 <TIM_Base_SetConfig+0xf8>
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	4a0c      	ldr	r2, [pc, #48]	; (800d874 <TIM_Base_SetConfig+0x124>)
 800d844:	4293      	cmp	r3, r2
 800d846:	d103      	bne.n	800d850 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	691a      	ldr	r2, [r3, #16]
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2201      	movs	r2, #1
 800d854:	615a      	str	r2, [r3, #20]
}
 800d856:	bf00      	nop
 800d858:	3714      	adds	r7, #20
 800d85a:	46bd      	mov	sp, r7
 800d85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d860:	4770      	bx	lr
 800d862:	bf00      	nop
 800d864:	40010000 	.word	0x40010000
 800d868:	40000400 	.word	0x40000400
 800d86c:	40000800 	.word	0x40000800
 800d870:	40000c00 	.word	0x40000c00
 800d874:	40010400 	.word	0x40010400
 800d878:	40014000 	.word	0x40014000
 800d87c:	40014400 	.word	0x40014400
 800d880:	40014800 	.word	0x40014800
 800d884:	40001800 	.word	0x40001800
 800d888:	40001c00 	.word	0x40001c00
 800d88c:	40002000 	.word	0x40002000

0800d890 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b086      	sub	sp, #24
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
 800d898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d89a:	2300      	movs	r3, #0
 800d89c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	689b      	ldr	r3, [r3, #8]
 800d8a4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d8ac:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	685b      	ldr	r3, [r3, #4]
 800d8b2:	693a      	ldr	r2, [r7, #16]
 800d8b4:	4313      	orrs	r3, r2
 800d8b6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800d8b8:	693a      	ldr	r2, [r7, #16]
 800d8ba:	4b3e      	ldr	r3, [pc, #248]	; (800d9b4 <TIM_SlaveTimer_SetConfig+0x124>)
 800d8bc:	4013      	ands	r3, r2
 800d8be:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	693a      	ldr	r2, [r7, #16]
 800d8c6:	4313      	orrs	r3, r2
 800d8c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	693a      	ldr	r2, [r7, #16]
 800d8d0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	685b      	ldr	r3, [r3, #4]
 800d8d6:	2b70      	cmp	r3, #112	; 0x70
 800d8d8:	d01a      	beq.n	800d910 <TIM_SlaveTimer_SetConfig+0x80>
 800d8da:	2b70      	cmp	r3, #112	; 0x70
 800d8dc:	d860      	bhi.n	800d9a0 <TIM_SlaveTimer_SetConfig+0x110>
 800d8de:	2b60      	cmp	r3, #96	; 0x60
 800d8e0:	d054      	beq.n	800d98c <TIM_SlaveTimer_SetConfig+0xfc>
 800d8e2:	2b60      	cmp	r3, #96	; 0x60
 800d8e4:	d85c      	bhi.n	800d9a0 <TIM_SlaveTimer_SetConfig+0x110>
 800d8e6:	2b50      	cmp	r3, #80	; 0x50
 800d8e8:	d046      	beq.n	800d978 <TIM_SlaveTimer_SetConfig+0xe8>
 800d8ea:	2b50      	cmp	r3, #80	; 0x50
 800d8ec:	d858      	bhi.n	800d9a0 <TIM_SlaveTimer_SetConfig+0x110>
 800d8ee:	2b40      	cmp	r3, #64	; 0x40
 800d8f0:	d019      	beq.n	800d926 <TIM_SlaveTimer_SetConfig+0x96>
 800d8f2:	2b40      	cmp	r3, #64	; 0x40
 800d8f4:	d854      	bhi.n	800d9a0 <TIM_SlaveTimer_SetConfig+0x110>
 800d8f6:	2b30      	cmp	r3, #48	; 0x30
 800d8f8:	d055      	beq.n	800d9a6 <TIM_SlaveTimer_SetConfig+0x116>
 800d8fa:	2b30      	cmp	r3, #48	; 0x30
 800d8fc:	d850      	bhi.n	800d9a0 <TIM_SlaveTimer_SetConfig+0x110>
 800d8fe:	2b20      	cmp	r3, #32
 800d900:	d051      	beq.n	800d9a6 <TIM_SlaveTimer_SetConfig+0x116>
 800d902:	2b20      	cmp	r3, #32
 800d904:	d84c      	bhi.n	800d9a0 <TIM_SlaveTimer_SetConfig+0x110>
 800d906:	2b00      	cmp	r3, #0
 800d908:	d04d      	beq.n	800d9a6 <TIM_SlaveTimer_SetConfig+0x116>
 800d90a:	2b10      	cmp	r3, #16
 800d90c:	d04b      	beq.n	800d9a6 <TIM_SlaveTimer_SetConfig+0x116>
 800d90e:	e047      	b.n	800d9a0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6818      	ldr	r0, [r3, #0]
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	68d9      	ldr	r1, [r3, #12]
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	689a      	ldr	r2, [r3, #8]
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	691b      	ldr	r3, [r3, #16]
 800d920:	f000 f9ee 	bl	800dd00 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800d924:	e040      	b.n	800d9a8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	2b05      	cmp	r3, #5
 800d92c:	d101      	bne.n	800d932 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800d92e:	2301      	movs	r3, #1
 800d930:	e03b      	b.n	800d9aa <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	6a1b      	ldr	r3, [r3, #32]
 800d938:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	6a1a      	ldr	r2, [r3, #32]
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	f022 0201 	bic.w	r2, r2, #1
 800d948:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	699b      	ldr	r3, [r3, #24]
 800d950:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d958:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	691b      	ldr	r3, [r3, #16]
 800d95e:	011b      	lsls	r3, r3, #4
 800d960:	68ba      	ldr	r2, [r7, #8]
 800d962:	4313      	orrs	r3, r2
 800d964:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	68ba      	ldr	r2, [r7, #8]
 800d96c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	68fa      	ldr	r2, [r7, #12]
 800d974:	621a      	str	r2, [r3, #32]
      break;
 800d976:	e017      	b.n	800d9a8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6818      	ldr	r0, [r3, #0]
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	6899      	ldr	r1, [r3, #8]
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	691b      	ldr	r3, [r3, #16]
 800d984:	461a      	mov	r2, r3
 800d986:	f000 f88b 	bl	800daa0 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800d98a:	e00d      	b.n	800d9a8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6818      	ldr	r0, [r3, #0]
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	6899      	ldr	r1, [r3, #8]
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	691b      	ldr	r3, [r3, #16]
 800d998:	461a      	mov	r2, r3
 800d99a:	f000 f8ed 	bl	800db78 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800d99e:	e003      	b.n	800d9a8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	75fb      	strb	r3, [r7, #23]
      break;
 800d9a4:	e000      	b.n	800d9a8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800d9a6:	bf00      	nop
  }

  return status;
 800d9a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3718      	adds	r7, #24
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}
 800d9b2:	bf00      	nop
 800d9b4:	fffefff8 	.word	0xfffefff8

0800d9b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b087      	sub	sp, #28
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	60f8      	str	r0, [r7, #12]
 800d9c0:	60b9      	str	r1, [r7, #8]
 800d9c2:	607a      	str	r2, [r7, #4]
 800d9c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	6a1b      	ldr	r3, [r3, #32]
 800d9ca:	f023 0201 	bic.w	r2, r3, #1
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	699b      	ldr	r3, [r3, #24]
 800d9d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	6a1b      	ldr	r3, [r3, #32]
 800d9dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	4a28      	ldr	r2, [pc, #160]	; (800da84 <TIM_TI1_SetConfig+0xcc>)
 800d9e2:	4293      	cmp	r3, r2
 800d9e4:	d01b      	beq.n	800da1e <TIM_TI1_SetConfig+0x66>
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d9ec:	d017      	beq.n	800da1e <TIM_TI1_SetConfig+0x66>
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	4a25      	ldr	r2, [pc, #148]	; (800da88 <TIM_TI1_SetConfig+0xd0>)
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	d013      	beq.n	800da1e <TIM_TI1_SetConfig+0x66>
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	4a24      	ldr	r2, [pc, #144]	; (800da8c <TIM_TI1_SetConfig+0xd4>)
 800d9fa:	4293      	cmp	r3, r2
 800d9fc:	d00f      	beq.n	800da1e <TIM_TI1_SetConfig+0x66>
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	4a23      	ldr	r2, [pc, #140]	; (800da90 <TIM_TI1_SetConfig+0xd8>)
 800da02:	4293      	cmp	r3, r2
 800da04:	d00b      	beq.n	800da1e <TIM_TI1_SetConfig+0x66>
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	4a22      	ldr	r2, [pc, #136]	; (800da94 <TIM_TI1_SetConfig+0xdc>)
 800da0a:	4293      	cmp	r3, r2
 800da0c:	d007      	beq.n	800da1e <TIM_TI1_SetConfig+0x66>
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	4a21      	ldr	r2, [pc, #132]	; (800da98 <TIM_TI1_SetConfig+0xe0>)
 800da12:	4293      	cmp	r3, r2
 800da14:	d003      	beq.n	800da1e <TIM_TI1_SetConfig+0x66>
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	4a20      	ldr	r2, [pc, #128]	; (800da9c <TIM_TI1_SetConfig+0xe4>)
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d101      	bne.n	800da22 <TIM_TI1_SetConfig+0x6a>
 800da1e:	2301      	movs	r3, #1
 800da20:	e000      	b.n	800da24 <TIM_TI1_SetConfig+0x6c>
 800da22:	2300      	movs	r3, #0
 800da24:	2b00      	cmp	r3, #0
 800da26:	d008      	beq.n	800da3a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	f023 0303 	bic.w	r3, r3, #3
 800da2e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800da30:	697a      	ldr	r2, [r7, #20]
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	4313      	orrs	r3, r2
 800da36:	617b      	str	r3, [r7, #20]
 800da38:	e003      	b.n	800da42 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	f043 0301 	orr.w	r3, r3, #1
 800da40:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800da48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	011b      	lsls	r3, r3, #4
 800da4e:	b2db      	uxtb	r3, r3
 800da50:	697a      	ldr	r2, [r7, #20]
 800da52:	4313      	orrs	r3, r2
 800da54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	f023 030a 	bic.w	r3, r3, #10
 800da5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	f003 030a 	and.w	r3, r3, #10
 800da64:	693a      	ldr	r2, [r7, #16]
 800da66:	4313      	orrs	r3, r2
 800da68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	697a      	ldr	r2, [r7, #20]
 800da6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	693a      	ldr	r2, [r7, #16]
 800da74:	621a      	str	r2, [r3, #32]
}
 800da76:	bf00      	nop
 800da78:	371c      	adds	r7, #28
 800da7a:	46bd      	mov	sp, r7
 800da7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da80:	4770      	bx	lr
 800da82:	bf00      	nop
 800da84:	40010000 	.word	0x40010000
 800da88:	40000400 	.word	0x40000400
 800da8c:	40000800 	.word	0x40000800
 800da90:	40000c00 	.word	0x40000c00
 800da94:	40010400 	.word	0x40010400
 800da98:	40014000 	.word	0x40014000
 800da9c:	40001800 	.word	0x40001800

0800daa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b087      	sub	sp, #28
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	60f8      	str	r0, [r7, #12]
 800daa8:	60b9      	str	r1, [r7, #8]
 800daaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	6a1b      	ldr	r3, [r3, #32]
 800dab0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	6a1b      	ldr	r3, [r3, #32]
 800dab6:	f023 0201 	bic.w	r2, r3, #1
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	699b      	ldr	r3, [r3, #24]
 800dac2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800daca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	011b      	lsls	r3, r3, #4
 800dad0:	693a      	ldr	r2, [r7, #16]
 800dad2:	4313      	orrs	r3, r2
 800dad4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	f023 030a 	bic.w	r3, r3, #10
 800dadc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dade:	697a      	ldr	r2, [r7, #20]
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	4313      	orrs	r3, r2
 800dae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	693a      	ldr	r2, [r7, #16]
 800daea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	697a      	ldr	r2, [r7, #20]
 800daf0:	621a      	str	r2, [r3, #32]
}
 800daf2:	bf00      	nop
 800daf4:	371c      	adds	r7, #28
 800daf6:	46bd      	mov	sp, r7
 800daf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafc:	4770      	bx	lr

0800dafe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800dafe:	b480      	push	{r7}
 800db00:	b087      	sub	sp, #28
 800db02:	af00      	add	r7, sp, #0
 800db04:	60f8      	str	r0, [r7, #12]
 800db06:	60b9      	str	r1, [r7, #8]
 800db08:	607a      	str	r2, [r7, #4]
 800db0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	6a1b      	ldr	r3, [r3, #32]
 800db10:	f023 0210 	bic.w	r2, r3, #16
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	699b      	ldr	r3, [r3, #24]
 800db1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	6a1b      	ldr	r3, [r3, #32]
 800db22:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	021b      	lsls	r3, r3, #8
 800db30:	697a      	ldr	r2, [r7, #20]
 800db32:	4313      	orrs	r3, r2
 800db34:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800db3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	031b      	lsls	r3, r3, #12
 800db42:	b29b      	uxth	r3, r3
 800db44:	697a      	ldr	r2, [r7, #20]
 800db46:	4313      	orrs	r3, r2
 800db48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800db50:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	011b      	lsls	r3, r3, #4
 800db56:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800db5a:	693a      	ldr	r2, [r7, #16]
 800db5c:	4313      	orrs	r3, r2
 800db5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	697a      	ldr	r2, [r7, #20]
 800db64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	693a      	ldr	r2, [r7, #16]
 800db6a:	621a      	str	r2, [r3, #32]
}
 800db6c:	bf00      	nop
 800db6e:	371c      	adds	r7, #28
 800db70:	46bd      	mov	sp, r7
 800db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db76:	4770      	bx	lr

0800db78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800db78:	b480      	push	{r7}
 800db7a:	b087      	sub	sp, #28
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	60f8      	str	r0, [r7, #12]
 800db80:	60b9      	str	r1, [r7, #8]
 800db82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	6a1b      	ldr	r3, [r3, #32]
 800db88:	f023 0210 	bic.w	r2, r3, #16
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	699b      	ldr	r3, [r3, #24]
 800db94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	6a1b      	ldr	r3, [r3, #32]
 800db9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dba2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	031b      	lsls	r3, r3, #12
 800dba8:	697a      	ldr	r2, [r7, #20]
 800dbaa:	4313      	orrs	r3, r2
 800dbac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dbb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	011b      	lsls	r3, r3, #4
 800dbba:	693a      	ldr	r2, [r7, #16]
 800dbbc:	4313      	orrs	r3, r2
 800dbbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	697a      	ldr	r2, [r7, #20]
 800dbc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	693a      	ldr	r2, [r7, #16]
 800dbca:	621a      	str	r2, [r3, #32]
}
 800dbcc:	bf00      	nop
 800dbce:	371c      	adds	r7, #28
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd6:	4770      	bx	lr

0800dbd8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800dbd8:	b480      	push	{r7}
 800dbda:	b087      	sub	sp, #28
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	60f8      	str	r0, [r7, #12]
 800dbe0:	60b9      	str	r1, [r7, #8]
 800dbe2:	607a      	str	r2, [r7, #4]
 800dbe4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	6a1b      	ldr	r3, [r3, #32]
 800dbea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	69db      	ldr	r3, [r3, #28]
 800dbf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	6a1b      	ldr	r3, [r3, #32]
 800dbfc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	f023 0303 	bic.w	r3, r3, #3
 800dc04:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800dc06:	697a      	ldr	r2, [r7, #20]
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	4313      	orrs	r3, r2
 800dc0c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dc14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	011b      	lsls	r3, r3, #4
 800dc1a:	b2db      	uxtb	r3, r3
 800dc1c:	697a      	ldr	r2, [r7, #20]
 800dc1e:	4313      	orrs	r3, r2
 800dc20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800dc28:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	021b      	lsls	r3, r3, #8
 800dc2e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800dc32:	693a      	ldr	r2, [r7, #16]
 800dc34:	4313      	orrs	r3, r2
 800dc36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	697a      	ldr	r2, [r7, #20]
 800dc3c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	693a      	ldr	r2, [r7, #16]
 800dc42:	621a      	str	r2, [r3, #32]
}
 800dc44:	bf00      	nop
 800dc46:	371c      	adds	r7, #28
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4e:	4770      	bx	lr

0800dc50 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800dc50:	b480      	push	{r7}
 800dc52:	b087      	sub	sp, #28
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	60f8      	str	r0, [r7, #12]
 800dc58:	60b9      	str	r1, [r7, #8]
 800dc5a:	607a      	str	r2, [r7, #4]
 800dc5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	6a1b      	ldr	r3, [r3, #32]
 800dc62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	69db      	ldr	r3, [r3, #28]
 800dc6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	6a1b      	ldr	r3, [r3, #32]
 800dc74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dc7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	021b      	lsls	r3, r3, #8
 800dc82:	697a      	ldr	r2, [r7, #20]
 800dc84:	4313      	orrs	r3, r2
 800dc86:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dc8e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	031b      	lsls	r3, r3, #12
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	697a      	ldr	r2, [r7, #20]
 800dc98:	4313      	orrs	r3, r2
 800dc9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800dca2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	031b      	lsls	r3, r3, #12
 800dca8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800dcac:	693a      	ldr	r2, [r7, #16]
 800dcae:	4313      	orrs	r3, r2
 800dcb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	697a      	ldr	r2, [r7, #20]
 800dcb6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	693a      	ldr	r2, [r7, #16]
 800dcbc:	621a      	str	r2, [r3, #32]
}
 800dcbe:	bf00      	nop
 800dcc0:	371c      	adds	r7, #28
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc8:	4770      	bx	lr

0800dcca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dcca:	b480      	push	{r7}
 800dccc:	b085      	sub	sp, #20
 800dcce:	af00      	add	r7, sp, #0
 800dcd0:	6078      	str	r0, [r7, #4]
 800dcd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	689b      	ldr	r3, [r3, #8]
 800dcd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dce0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dce2:	683a      	ldr	r2, [r7, #0]
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	4313      	orrs	r3, r2
 800dce8:	f043 0307 	orr.w	r3, r3, #7
 800dcec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	68fa      	ldr	r2, [r7, #12]
 800dcf2:	609a      	str	r2, [r3, #8]
}
 800dcf4:	bf00      	nop
 800dcf6:	3714      	adds	r7, #20
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr

0800dd00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dd00:	b480      	push	{r7}
 800dd02:	b087      	sub	sp, #28
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	60b9      	str	r1, [r7, #8]
 800dd0a:	607a      	str	r2, [r7, #4]
 800dd0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	689b      	ldr	r3, [r3, #8]
 800dd12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dd1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	021a      	lsls	r2, r3, #8
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	431a      	orrs	r2, r3
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	4313      	orrs	r3, r2
 800dd28:	697a      	ldr	r2, [r7, #20]
 800dd2a:	4313      	orrs	r3, r2
 800dd2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	697a      	ldr	r2, [r7, #20]
 800dd32:	609a      	str	r2, [r3, #8]
}
 800dd34:	bf00      	nop
 800dd36:	371c      	adds	r7, #28
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr

0800dd40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b087      	sub	sp, #28
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	60f8      	str	r0, [r7, #12]
 800dd48:	60b9      	str	r1, [r7, #8]
 800dd4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	f003 031f 	and.w	r3, r3, #31
 800dd52:	2201      	movs	r2, #1
 800dd54:	fa02 f303 	lsl.w	r3, r2, r3
 800dd58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	6a1a      	ldr	r2, [r3, #32]
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	43db      	mvns	r3, r3
 800dd62:	401a      	ands	r2, r3
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	6a1a      	ldr	r2, [r3, #32]
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	f003 031f 	and.w	r3, r3, #31
 800dd72:	6879      	ldr	r1, [r7, #4]
 800dd74:	fa01 f303 	lsl.w	r3, r1, r3
 800dd78:	431a      	orrs	r2, r3
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	621a      	str	r2, [r3, #32]
}
 800dd7e:	bf00      	nop
 800dd80:	371c      	adds	r7, #28
 800dd82:	46bd      	mov	sp, r7
 800dd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd88:	4770      	bx	lr
	...

0800dd8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	b085      	sub	sp, #20
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd9c:	2b01      	cmp	r3, #1
 800dd9e:	d101      	bne.n	800dda4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dda0:	2302      	movs	r3, #2
 800dda2:	e06d      	b.n	800de80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2201      	movs	r2, #1
 800dda8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2202      	movs	r2, #2
 800ddb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	689b      	ldr	r3, [r3, #8]
 800ddc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	4a30      	ldr	r2, [pc, #192]	; (800de8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ddca:	4293      	cmp	r3, r2
 800ddcc:	d004      	beq.n	800ddd8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	4a2f      	ldr	r2, [pc, #188]	; (800de90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ddd4:	4293      	cmp	r3, r2
 800ddd6:	d108      	bne.n	800ddea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ddde:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	685b      	ldr	r3, [r3, #4]
 800dde4:	68fa      	ldr	r2, [r7, #12]
 800dde6:	4313      	orrs	r3, r2
 800dde8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddf0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	68fa      	ldr	r2, [r7, #12]
 800ddf8:	4313      	orrs	r3, r2
 800ddfa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	68fa      	ldr	r2, [r7, #12]
 800de02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	4a20      	ldr	r2, [pc, #128]	; (800de8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800de0a:	4293      	cmp	r3, r2
 800de0c:	d022      	beq.n	800de54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de16:	d01d      	beq.n	800de54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	4a1d      	ldr	r2, [pc, #116]	; (800de94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800de1e:	4293      	cmp	r3, r2
 800de20:	d018      	beq.n	800de54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	4a1c      	ldr	r2, [pc, #112]	; (800de98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800de28:	4293      	cmp	r3, r2
 800de2a:	d013      	beq.n	800de54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	4a1a      	ldr	r2, [pc, #104]	; (800de9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800de32:	4293      	cmp	r3, r2
 800de34:	d00e      	beq.n	800de54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4a15      	ldr	r2, [pc, #84]	; (800de90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800de3c:	4293      	cmp	r3, r2
 800de3e:	d009      	beq.n	800de54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	4a16      	ldr	r2, [pc, #88]	; (800dea0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800de46:	4293      	cmp	r3, r2
 800de48:	d004      	beq.n	800de54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	4a15      	ldr	r2, [pc, #84]	; (800dea4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800de50:	4293      	cmp	r3, r2
 800de52:	d10c      	bne.n	800de6e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	689b      	ldr	r3, [r3, #8]
 800de60:	68ba      	ldr	r2, [r7, #8]
 800de62:	4313      	orrs	r3, r2
 800de64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	68ba      	ldr	r2, [r7, #8]
 800de6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2201      	movs	r2, #1
 800de72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2200      	movs	r2, #0
 800de7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800de7e:	2300      	movs	r3, #0
}
 800de80:	4618      	mov	r0, r3
 800de82:	3714      	adds	r7, #20
 800de84:	46bd      	mov	sp, r7
 800de86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8a:	4770      	bx	lr
 800de8c:	40010000 	.word	0x40010000
 800de90:	40010400 	.word	0x40010400
 800de94:	40000400 	.word	0x40000400
 800de98:	40000800 	.word	0x40000800
 800de9c:	40000c00 	.word	0x40000c00
 800dea0:	40014000 	.word	0x40014000
 800dea4:	40001800 	.word	0x40001800

0800dea8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dea8:	b480      	push	{r7}
 800deaa:	b083      	sub	sp, #12
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800deb0:	bf00      	nop
 800deb2:	370c      	adds	r7, #12
 800deb4:	46bd      	mov	sp, r7
 800deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deba:	4770      	bx	lr

0800debc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800debc:	b480      	push	{r7}
 800debe:	b083      	sub	sp, #12
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dec4:	bf00      	nop
 800dec6:	370c      	adds	r7, #12
 800dec8:	46bd      	mov	sp, r7
 800deca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dece:	4770      	bx	lr

0800ded0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ded0:	b480      	push	{r7}
 800ded2:	b083      	sub	sp, #12
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ded8:	bf00      	nop
 800deda:	370c      	adds	r7, #12
 800dedc:	46bd      	mov	sp, r7
 800dede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee2:	4770      	bx	lr

0800dee4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b082      	sub	sp, #8
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d101      	bne.n	800def6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800def2:	2301      	movs	r3, #1
 800def4:	e040      	b.n	800df78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800defa:	2b00      	cmp	r3, #0
 800defc:	d106      	bne.n	800df0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2200      	movs	r2, #0
 800df02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	f7f8 fba8 	bl	800665c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2224      	movs	r2, #36	; 0x24
 800df10:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	681a      	ldr	r2, [r3, #0]
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	f022 0201 	bic.w	r2, r2, #1
 800df20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f000 fc18 	bl	800e758 <UART_SetConfig>
 800df28:	4603      	mov	r3, r0
 800df2a:	2b01      	cmp	r3, #1
 800df2c:	d101      	bne.n	800df32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800df2e:	2301      	movs	r3, #1
 800df30:	e022      	b.n	800df78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df36:	2b00      	cmp	r3, #0
 800df38:	d002      	beq.n	800df40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f000 fe70 	bl	800ec20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	685a      	ldr	r2, [r3, #4]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800df4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	689a      	ldr	r2, [r3, #8]
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800df5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	681a      	ldr	r2, [r3, #0]
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	f042 0201 	orr.w	r2, r2, #1
 800df6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f000 fef7 	bl	800ed64 <UART_CheckIdleState>
 800df76:	4603      	mov	r3, r0
}
 800df78:	4618      	mov	r0, r3
 800df7a:	3708      	adds	r7, #8
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}

0800df80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b08a      	sub	sp, #40	; 0x28
 800df84:	af02      	add	r7, sp, #8
 800df86:	60f8      	str	r0, [r7, #12]
 800df88:	60b9      	str	r1, [r7, #8]
 800df8a:	603b      	str	r3, [r7, #0]
 800df8c:	4613      	mov	r3, r2
 800df8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df94:	2b20      	cmp	r3, #32
 800df96:	f040 8081 	bne.w	800e09c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d002      	beq.n	800dfa6 <HAL_UART_Transmit+0x26>
 800dfa0:	88fb      	ldrh	r3, [r7, #6]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d101      	bne.n	800dfaa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	e079      	b.n	800e09e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800dfb0:	2b01      	cmp	r3, #1
 800dfb2:	d101      	bne.n	800dfb8 <HAL_UART_Transmit+0x38>
 800dfb4:	2302      	movs	r3, #2
 800dfb6:	e072      	b.n	800e09e <HAL_UART_Transmit+0x11e>
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	2201      	movs	r2, #1
 800dfbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	2221      	movs	r2, #33	; 0x21
 800dfcc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dfce:	f7f8 fc4f 	bl	8006870 <HAL_GetTick>
 800dfd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	88fa      	ldrh	r2, [r7, #6]
 800dfd8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	88fa      	ldrh	r2, [r7, #6]
 800dfe0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	689b      	ldr	r3, [r3, #8]
 800dfe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dfec:	d108      	bne.n	800e000 <HAL_UART_Transmit+0x80>
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	691b      	ldr	r3, [r3, #16]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d104      	bne.n	800e000 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800dff6:	2300      	movs	r3, #0
 800dff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dffa:	68bb      	ldr	r3, [r7, #8]
 800dffc:	61bb      	str	r3, [r7, #24]
 800dffe:	e003      	b.n	800e008 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e004:	2300      	movs	r3, #0
 800e006:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	2200      	movs	r2, #0
 800e00c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800e010:	e02c      	b.n	800e06c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	9300      	str	r3, [sp, #0]
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	2200      	movs	r2, #0
 800e01a:	2180      	movs	r1, #128	; 0x80
 800e01c:	68f8      	ldr	r0, [r7, #12]
 800e01e:	f000 feea 	bl	800edf6 <UART_WaitOnFlagUntilTimeout>
 800e022:	4603      	mov	r3, r0
 800e024:	2b00      	cmp	r3, #0
 800e026:	d001      	beq.n	800e02c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800e028:	2303      	movs	r3, #3
 800e02a:	e038      	b.n	800e09e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800e02c:	69fb      	ldr	r3, [r7, #28]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d10b      	bne.n	800e04a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e032:	69bb      	ldr	r3, [r7, #24]
 800e034:	881b      	ldrh	r3, [r3, #0]
 800e036:	461a      	mov	r2, r3
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e040:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e042:	69bb      	ldr	r3, [r7, #24]
 800e044:	3302      	adds	r3, #2
 800e046:	61bb      	str	r3, [r7, #24]
 800e048:	e007      	b.n	800e05a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e04a:	69fb      	ldr	r3, [r7, #28]
 800e04c:	781a      	ldrb	r2, [r3, #0]
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e054:	69fb      	ldr	r3, [r7, #28]
 800e056:	3301      	adds	r3, #1
 800e058:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e060:	b29b      	uxth	r3, r3
 800e062:	3b01      	subs	r3, #1
 800e064:	b29a      	uxth	r2, r3
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e072:	b29b      	uxth	r3, r3
 800e074:	2b00      	cmp	r3, #0
 800e076:	d1cc      	bne.n	800e012 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	9300      	str	r3, [sp, #0]
 800e07c:	697b      	ldr	r3, [r7, #20]
 800e07e:	2200      	movs	r2, #0
 800e080:	2140      	movs	r1, #64	; 0x40
 800e082:	68f8      	ldr	r0, [r7, #12]
 800e084:	f000 feb7 	bl	800edf6 <UART_WaitOnFlagUntilTimeout>
 800e088:	4603      	mov	r3, r0
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d001      	beq.n	800e092 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800e08e:	2303      	movs	r3, #3
 800e090:	e005      	b.n	800e09e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	2220      	movs	r2, #32
 800e096:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800e098:	2300      	movs	r3, #0
 800e09a:	e000      	b.n	800e09e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800e09c:	2302      	movs	r3, #2
  }
}
 800e09e:	4618      	mov	r0, r3
 800e0a0:	3720      	adds	r7, #32
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}

0800e0a6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e0a6:	b580      	push	{r7, lr}
 800e0a8:	b08a      	sub	sp, #40	; 0x28
 800e0aa:	af00      	add	r7, sp, #0
 800e0ac:	60f8      	str	r0, [r7, #12]
 800e0ae:	60b9      	str	r1, [r7, #8]
 800e0b0:	4613      	mov	r3, r2
 800e0b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0b8:	2b20      	cmp	r3, #32
 800e0ba:	d13d      	bne.n	800e138 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d002      	beq.n	800e0c8 <HAL_UART_Receive_IT+0x22>
 800e0c2:	88fb      	ldrh	r3, [r7, #6]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d101      	bne.n	800e0cc <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	e036      	b.n	800e13a <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e0d2:	2b01      	cmp	r3, #1
 800e0d4:	d101      	bne.n	800e0da <HAL_UART_Receive_IT+0x34>
 800e0d6:	2302      	movs	r3, #2
 800e0d8:	e02f      	b.n	800e13a <HAL_UART_Receive_IT+0x94>
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	2201      	movs	r2, #1
 800e0de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	685b      	ldr	r3, [r3, #4]
 800e0ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d018      	beq.n	800e128 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	e853 3f00 	ldrex	r3, [r3]
 800e102:	613b      	str	r3, [r7, #16]
   return(result);
 800e104:	693b      	ldr	r3, [r7, #16]
 800e106:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e10a:	627b      	str	r3, [r7, #36]	; 0x24
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	461a      	mov	r2, r3
 800e112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e114:	623b      	str	r3, [r7, #32]
 800e116:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e118:	69f9      	ldr	r1, [r7, #28]
 800e11a:	6a3a      	ldr	r2, [r7, #32]
 800e11c:	e841 2300 	strex	r3, r2, [r1]
 800e120:	61bb      	str	r3, [r7, #24]
   return(result);
 800e122:	69bb      	ldr	r3, [r7, #24]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d1e6      	bne.n	800e0f6 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e128:	88fb      	ldrh	r3, [r7, #6]
 800e12a:	461a      	mov	r2, r3
 800e12c:	68b9      	ldr	r1, [r7, #8]
 800e12e:	68f8      	ldr	r0, [r7, #12]
 800e130:	f000 ff26 	bl	800ef80 <UART_Start_Receive_IT>
 800e134:	4603      	mov	r3, r0
 800e136:	e000      	b.n	800e13a <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800e138:	2302      	movs	r3, #2
  }
}
 800e13a:	4618      	mov	r0, r3
 800e13c:	3728      	adds	r7, #40	; 0x28
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}
	...

0800e144 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b0ba      	sub	sp, #232	; 0xe8
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	69db      	ldr	r3, [r3, #28]
 800e152:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	689b      	ldr	r3, [r3, #8]
 800e166:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e16a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e16e:	f640 030f 	movw	r3, #2063	; 0x80f
 800e172:	4013      	ands	r3, r2
 800e174:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e178:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d115      	bne.n	800e1ac <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e184:	f003 0320 	and.w	r3, r3, #32
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d00f      	beq.n	800e1ac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e18c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e190:	f003 0320 	and.w	r3, r3, #32
 800e194:	2b00      	cmp	r3, #0
 800e196:	d009      	beq.n	800e1ac <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	f000 82a4 	beq.w	800e6ea <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	4798      	blx	r3
      }
      return;
 800e1aa:	e29e      	b.n	800e6ea <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e1ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	f000 8117 	beq.w	800e3e4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e1b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e1ba:	f003 0301 	and.w	r3, r3, #1
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d106      	bne.n	800e1d0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800e1c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e1c6:	4b85      	ldr	r3, [pc, #532]	; (800e3dc <HAL_UART_IRQHandler+0x298>)
 800e1c8:	4013      	ands	r3, r2
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	f000 810a 	beq.w	800e3e4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e1d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1d4:	f003 0301 	and.w	r3, r3, #1
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d011      	beq.n	800e200 <HAL_UART_IRQHandler+0xbc>
 800e1dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e1e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d00b      	beq.n	800e200 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1f6:	f043 0201 	orr.w	r2, r3, #1
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e204:	f003 0302 	and.w	r3, r3, #2
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d011      	beq.n	800e230 <HAL_UART_IRQHandler+0xec>
 800e20c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e210:	f003 0301 	and.w	r3, r3, #1
 800e214:	2b00      	cmp	r3, #0
 800e216:	d00b      	beq.n	800e230 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	2202      	movs	r2, #2
 800e21e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e226:	f043 0204 	orr.w	r2, r3, #4
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e234:	f003 0304 	and.w	r3, r3, #4
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d011      	beq.n	800e260 <HAL_UART_IRQHandler+0x11c>
 800e23c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e240:	f003 0301 	and.w	r3, r3, #1
 800e244:	2b00      	cmp	r3, #0
 800e246:	d00b      	beq.n	800e260 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	2204      	movs	r2, #4
 800e24e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e256:	f043 0202 	orr.w	r2, r3, #2
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e264:	f003 0308 	and.w	r3, r3, #8
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d017      	beq.n	800e29c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e26c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e270:	f003 0320 	and.w	r3, r3, #32
 800e274:	2b00      	cmp	r3, #0
 800e276:	d105      	bne.n	800e284 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e278:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e27c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e280:	2b00      	cmp	r3, #0
 800e282:	d00b      	beq.n	800e29c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	2208      	movs	r2, #8
 800e28a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e292:	f043 0208 	orr.w	r2, r3, #8
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e29c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d012      	beq.n	800e2ce <HAL_UART_IRQHandler+0x18a>
 800e2a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d00c      	beq.n	800e2ce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e2bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2c4:	f043 0220 	orr.w	r2, r3, #32
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	f000 820a 	beq.w	800e6ee <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e2da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2de:	f003 0320 	and.w	r3, r3, #32
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d00d      	beq.n	800e302 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e2e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2ea:	f003 0320 	and.w	r3, r3, #32
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d007      	beq.n	800e302 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d003      	beq.n	800e302 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e308:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	689b      	ldr	r3, [r3, #8]
 800e312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e316:	2b40      	cmp	r3, #64	; 0x40
 800e318:	d005      	beq.n	800e326 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e31a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e31e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e322:	2b00      	cmp	r3, #0
 800e324:	d04f      	beq.n	800e3c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f000 fef4 	bl	800f114 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	689b      	ldr	r3, [r3, #8]
 800e332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e336:	2b40      	cmp	r3, #64	; 0x40
 800e338:	d141      	bne.n	800e3be <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	3308      	adds	r3, #8
 800e340:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e344:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e348:	e853 3f00 	ldrex	r3, [r3]
 800e34c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e350:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e354:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e358:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	3308      	adds	r3, #8
 800e362:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e366:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e36a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e36e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e372:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e376:	e841 2300 	strex	r3, r2, [r1]
 800e37a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e37e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e382:	2b00      	cmp	r3, #0
 800e384:	d1d9      	bne.n	800e33a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d013      	beq.n	800e3b6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e392:	4a13      	ldr	r2, [pc, #76]	; (800e3e0 <HAL_UART_IRQHandler+0x29c>)
 800e394:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e39a:	4618      	mov	r0, r3
 800e39c:	f7f9 fe88 	bl	80080b0 <HAL_DMA_Abort_IT>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d017      	beq.n	800e3d6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3ac:	687a      	ldr	r2, [r7, #4]
 800e3ae:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800e3b0:	4610      	mov	r0, r2
 800e3b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3b4:	e00f      	b.n	800e3d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f000 f9ae 	bl	800e718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3bc:	e00b      	b.n	800e3d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f000 f9aa 	bl	800e718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3c4:	e007      	b.n	800e3d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f000 f9a6 	bl	800e718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800e3d4:	e18b      	b.n	800e6ee <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3d6:	bf00      	nop
    return;
 800e3d8:	e189      	b.n	800e6ee <HAL_UART_IRQHandler+0x5aa>
 800e3da:	bf00      	nop
 800e3dc:	04000120 	.word	0x04000120
 800e3e0:	0800f1db 	.word	0x0800f1db

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e3e8:	2b01      	cmp	r3, #1
 800e3ea:	f040 8144 	bne.w	800e676 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e3ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3f2:	f003 0310 	and.w	r3, r3, #16
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	f000 813d 	beq.w	800e676 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e3fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e400:	f003 0310 	and.w	r3, r3, #16
 800e404:	2b00      	cmp	r3, #0
 800e406:	f000 8136 	beq.w	800e676 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	2210      	movs	r2, #16
 800e410:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	689b      	ldr	r3, [r3, #8]
 800e418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e41c:	2b40      	cmp	r3, #64	; 0x40
 800e41e:	f040 80b2 	bne.w	800e586 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	685b      	ldr	r3, [r3, #4]
 800e42a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e42e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e432:	2b00      	cmp	r3, #0
 800e434:	f000 815d 	beq.w	800e6f2 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e43e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e442:	429a      	cmp	r2, r3
 800e444:	f080 8155 	bcs.w	800e6f2 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e44e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e456:	69db      	ldr	r3, [r3, #28]
 800e458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e45c:	f000 8085 	beq.w	800e56a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e468:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e46c:	e853 3f00 	ldrex	r3, [r3]
 800e470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e474:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e47c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	461a      	mov	r2, r3
 800e486:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e48a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e48e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e492:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e496:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e49a:	e841 2300 	strex	r3, r2, [r1]
 800e49e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e4a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d1da      	bne.n	800e460 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	3308      	adds	r3, #8
 800e4b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4b4:	e853 3f00 	ldrex	r3, [r3]
 800e4b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e4ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e4bc:	f023 0301 	bic.w	r3, r3, #1
 800e4c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	3308      	adds	r3, #8
 800e4ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e4ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e4d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e4d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e4da:	e841 2300 	strex	r3, r2, [r1]
 800e4de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e4e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d1e1      	bne.n	800e4aa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	3308      	adds	r3, #8
 800e4ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e4f0:	e853 3f00 	ldrex	r3, [r3]
 800e4f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e4f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e4f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e4fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	3308      	adds	r3, #8
 800e506:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e50a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e50c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e50e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e510:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e512:	e841 2300 	strex	r3, r2, [r1]
 800e516:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d1e3      	bne.n	800e4e6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2220      	movs	r2, #32
 800e522:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2200      	movs	r2, #0
 800e528:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e532:	e853 3f00 	ldrex	r3, [r3]
 800e536:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e53a:	f023 0310 	bic.w	r3, r3, #16
 800e53e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	461a      	mov	r2, r3
 800e548:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e54c:	65bb      	str	r3, [r7, #88]	; 0x58
 800e54e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e550:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e552:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e554:	e841 2300 	strex	r3, r2, [r1]
 800e558:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e55a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d1e4      	bne.n	800e52a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e564:	4618      	mov	r0, r3
 800e566:	f7f9 fd33 	bl	8007fd0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e576:	b29b      	uxth	r3, r3
 800e578:	1ad3      	subs	r3, r2, r3
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	4619      	mov	r1, r3
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f000 f8d4 	bl	800e72c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e584:	e0b5      	b.n	800e6f2 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e592:	b29b      	uxth	r3, r3
 800e594:	1ad3      	subs	r3, r2, r3
 800e596:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e5a0:	b29b      	uxth	r3, r3
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	f000 80a7 	beq.w	800e6f6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 800e5a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	f000 80a2 	beq.w	800e6f6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ba:	e853 3f00 	ldrex	r3, [r3]
 800e5be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e5c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e5c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	461a      	mov	r2, r3
 800e5d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e5d4:	647b      	str	r3, [r7, #68]	; 0x44
 800e5d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e5da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e5dc:	e841 2300 	strex	r3, r2, [r1]
 800e5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e5e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d1e4      	bne.n	800e5b2 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	3308      	adds	r3, #8
 800e5ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f2:	e853 3f00 	ldrex	r3, [r3]
 800e5f6:	623b      	str	r3, [r7, #32]
   return(result);
 800e5f8:	6a3b      	ldr	r3, [r7, #32]
 800e5fa:	f023 0301 	bic.w	r3, r3, #1
 800e5fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	3308      	adds	r3, #8
 800e608:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e60c:	633a      	str	r2, [r7, #48]	; 0x30
 800e60e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e610:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e614:	e841 2300 	strex	r3, r2, [r1]
 800e618:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d1e3      	bne.n	800e5e8 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2220      	movs	r2, #32
 800e624:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2200      	movs	r2, #0
 800e62a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2200      	movs	r2, #0
 800e630:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	e853 3f00 	ldrex	r3, [r3]
 800e63e:	60fb      	str	r3, [r7, #12]
   return(result);
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	f023 0310 	bic.w	r3, r3, #16
 800e646:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	461a      	mov	r2, r3
 800e650:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e654:	61fb      	str	r3, [r7, #28]
 800e656:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e658:	69b9      	ldr	r1, [r7, #24]
 800e65a:	69fa      	ldr	r2, [r7, #28]
 800e65c:	e841 2300 	strex	r3, r2, [r1]
 800e660:	617b      	str	r3, [r7, #20]
   return(result);
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d1e4      	bne.n	800e632 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e668:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e66c:	4619      	mov	r1, r3
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f000 f85c 	bl	800e72c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e674:	e03f      	b.n	800e6f6 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e67a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d00e      	beq.n	800e6a0 <HAL_UART_IRQHandler+0x55c>
 800e682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d008      	beq.n	800e6a0 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e696:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f000 f853 	bl	800e744 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e69e:	e02d      	b.n	800e6fc <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e6a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d00e      	beq.n	800e6ca <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e6ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d008      	beq.n	800e6ca <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d01c      	beq.n	800e6fa <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	4798      	blx	r3
    }
    return;
 800e6c8:	e017      	b.n	800e6fa <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e6ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d012      	beq.n	800e6fc <HAL_UART_IRQHandler+0x5b8>
 800e6d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d00c      	beq.n	800e6fc <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f000 fd8f 	bl	800f206 <UART_EndTransmit_IT>
    return;
 800e6e8:	e008      	b.n	800e6fc <HAL_UART_IRQHandler+0x5b8>
      return;
 800e6ea:	bf00      	nop
 800e6ec:	e006      	b.n	800e6fc <HAL_UART_IRQHandler+0x5b8>
    return;
 800e6ee:	bf00      	nop
 800e6f0:	e004      	b.n	800e6fc <HAL_UART_IRQHandler+0x5b8>
      return;
 800e6f2:	bf00      	nop
 800e6f4:	e002      	b.n	800e6fc <HAL_UART_IRQHandler+0x5b8>
      return;
 800e6f6:	bf00      	nop
 800e6f8:	e000      	b.n	800e6fc <HAL_UART_IRQHandler+0x5b8>
    return;
 800e6fa:	bf00      	nop
  }

}
 800e6fc:	37e8      	adds	r7, #232	; 0xe8
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}
 800e702:	bf00      	nop

0800e704 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e704:	b480      	push	{r7}
 800e706:	b083      	sub	sp, #12
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e70c:	bf00      	nop
 800e70e:	370c      	adds	r7, #12
 800e710:	46bd      	mov	sp, r7
 800e712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e716:	4770      	bx	lr

0800e718 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e718:	b480      	push	{r7}
 800e71a:	b083      	sub	sp, #12
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e720:	bf00      	nop
 800e722:	370c      	adds	r7, #12
 800e724:	46bd      	mov	sp, r7
 800e726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72a:	4770      	bx	lr

0800e72c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e72c:	b480      	push	{r7}
 800e72e:	b083      	sub	sp, #12
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	460b      	mov	r3, r1
 800e736:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e738:	bf00      	nop
 800e73a:	370c      	adds	r7, #12
 800e73c:	46bd      	mov	sp, r7
 800e73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e742:	4770      	bx	lr

0800e744 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e744:	b480      	push	{r7}
 800e746:	b083      	sub	sp, #12
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e74c:	bf00      	nop
 800e74e:	370c      	adds	r7, #12
 800e750:	46bd      	mov	sp, r7
 800e752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e756:	4770      	bx	lr

0800e758 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b088      	sub	sp, #32
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e760:	2300      	movs	r3, #0
 800e762:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	689a      	ldr	r2, [r3, #8]
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	691b      	ldr	r3, [r3, #16]
 800e76c:	431a      	orrs	r2, r3
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	695b      	ldr	r3, [r3, #20]
 800e772:	431a      	orrs	r2, r3
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	69db      	ldr	r3, [r3, #28]
 800e778:	4313      	orrs	r3, r2
 800e77a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	681a      	ldr	r2, [r3, #0]
 800e782:	4ba6      	ldr	r3, [pc, #664]	; (800ea1c <UART_SetConfig+0x2c4>)
 800e784:	4013      	ands	r3, r2
 800e786:	687a      	ldr	r2, [r7, #4]
 800e788:	6812      	ldr	r2, [r2, #0]
 800e78a:	6979      	ldr	r1, [r7, #20]
 800e78c:	430b      	orrs	r3, r1
 800e78e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	685b      	ldr	r3, [r3, #4]
 800e796:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	68da      	ldr	r2, [r3, #12]
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	430a      	orrs	r2, r1
 800e7a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	699b      	ldr	r3, [r3, #24]
 800e7aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6a1b      	ldr	r3, [r3, #32]
 800e7b0:	697a      	ldr	r2, [r7, #20]
 800e7b2:	4313      	orrs	r3, r2
 800e7b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	689b      	ldr	r3, [r3, #8]
 800e7bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	697a      	ldr	r2, [r7, #20]
 800e7c6:	430a      	orrs	r2, r1
 800e7c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	4a94      	ldr	r2, [pc, #592]	; (800ea20 <UART_SetConfig+0x2c8>)
 800e7d0:	4293      	cmp	r3, r2
 800e7d2:	d120      	bne.n	800e816 <UART_SetConfig+0xbe>
 800e7d4:	4b93      	ldr	r3, [pc, #588]	; (800ea24 <UART_SetConfig+0x2cc>)
 800e7d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7da:	f003 0303 	and.w	r3, r3, #3
 800e7de:	2b03      	cmp	r3, #3
 800e7e0:	d816      	bhi.n	800e810 <UART_SetConfig+0xb8>
 800e7e2:	a201      	add	r2, pc, #4	; (adr r2, 800e7e8 <UART_SetConfig+0x90>)
 800e7e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7e8:	0800e7f9 	.word	0x0800e7f9
 800e7ec:	0800e805 	.word	0x0800e805
 800e7f0:	0800e7ff 	.word	0x0800e7ff
 800e7f4:	0800e80b 	.word	0x0800e80b
 800e7f8:	2301      	movs	r3, #1
 800e7fa:	77fb      	strb	r3, [r7, #31]
 800e7fc:	e150      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e7fe:	2302      	movs	r3, #2
 800e800:	77fb      	strb	r3, [r7, #31]
 800e802:	e14d      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e804:	2304      	movs	r3, #4
 800e806:	77fb      	strb	r3, [r7, #31]
 800e808:	e14a      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e80a:	2308      	movs	r3, #8
 800e80c:	77fb      	strb	r3, [r7, #31]
 800e80e:	e147      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e810:	2310      	movs	r3, #16
 800e812:	77fb      	strb	r3, [r7, #31]
 800e814:	e144      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	4a83      	ldr	r2, [pc, #524]	; (800ea28 <UART_SetConfig+0x2d0>)
 800e81c:	4293      	cmp	r3, r2
 800e81e:	d132      	bne.n	800e886 <UART_SetConfig+0x12e>
 800e820:	4b80      	ldr	r3, [pc, #512]	; (800ea24 <UART_SetConfig+0x2cc>)
 800e822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e826:	f003 030c 	and.w	r3, r3, #12
 800e82a:	2b0c      	cmp	r3, #12
 800e82c:	d828      	bhi.n	800e880 <UART_SetConfig+0x128>
 800e82e:	a201      	add	r2, pc, #4	; (adr r2, 800e834 <UART_SetConfig+0xdc>)
 800e830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e834:	0800e869 	.word	0x0800e869
 800e838:	0800e881 	.word	0x0800e881
 800e83c:	0800e881 	.word	0x0800e881
 800e840:	0800e881 	.word	0x0800e881
 800e844:	0800e875 	.word	0x0800e875
 800e848:	0800e881 	.word	0x0800e881
 800e84c:	0800e881 	.word	0x0800e881
 800e850:	0800e881 	.word	0x0800e881
 800e854:	0800e86f 	.word	0x0800e86f
 800e858:	0800e881 	.word	0x0800e881
 800e85c:	0800e881 	.word	0x0800e881
 800e860:	0800e881 	.word	0x0800e881
 800e864:	0800e87b 	.word	0x0800e87b
 800e868:	2300      	movs	r3, #0
 800e86a:	77fb      	strb	r3, [r7, #31]
 800e86c:	e118      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e86e:	2302      	movs	r3, #2
 800e870:	77fb      	strb	r3, [r7, #31]
 800e872:	e115      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e874:	2304      	movs	r3, #4
 800e876:	77fb      	strb	r3, [r7, #31]
 800e878:	e112      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e87a:	2308      	movs	r3, #8
 800e87c:	77fb      	strb	r3, [r7, #31]
 800e87e:	e10f      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e880:	2310      	movs	r3, #16
 800e882:	77fb      	strb	r3, [r7, #31]
 800e884:	e10c      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	4a68      	ldr	r2, [pc, #416]	; (800ea2c <UART_SetConfig+0x2d4>)
 800e88c:	4293      	cmp	r3, r2
 800e88e:	d120      	bne.n	800e8d2 <UART_SetConfig+0x17a>
 800e890:	4b64      	ldr	r3, [pc, #400]	; (800ea24 <UART_SetConfig+0x2cc>)
 800e892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e896:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e89a:	2b30      	cmp	r3, #48	; 0x30
 800e89c:	d013      	beq.n	800e8c6 <UART_SetConfig+0x16e>
 800e89e:	2b30      	cmp	r3, #48	; 0x30
 800e8a0:	d814      	bhi.n	800e8cc <UART_SetConfig+0x174>
 800e8a2:	2b20      	cmp	r3, #32
 800e8a4:	d009      	beq.n	800e8ba <UART_SetConfig+0x162>
 800e8a6:	2b20      	cmp	r3, #32
 800e8a8:	d810      	bhi.n	800e8cc <UART_SetConfig+0x174>
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d002      	beq.n	800e8b4 <UART_SetConfig+0x15c>
 800e8ae:	2b10      	cmp	r3, #16
 800e8b0:	d006      	beq.n	800e8c0 <UART_SetConfig+0x168>
 800e8b2:	e00b      	b.n	800e8cc <UART_SetConfig+0x174>
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	77fb      	strb	r3, [r7, #31]
 800e8b8:	e0f2      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e8ba:	2302      	movs	r3, #2
 800e8bc:	77fb      	strb	r3, [r7, #31]
 800e8be:	e0ef      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e8c0:	2304      	movs	r3, #4
 800e8c2:	77fb      	strb	r3, [r7, #31]
 800e8c4:	e0ec      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e8c6:	2308      	movs	r3, #8
 800e8c8:	77fb      	strb	r3, [r7, #31]
 800e8ca:	e0e9      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e8cc:	2310      	movs	r3, #16
 800e8ce:	77fb      	strb	r3, [r7, #31]
 800e8d0:	e0e6      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	4a56      	ldr	r2, [pc, #344]	; (800ea30 <UART_SetConfig+0x2d8>)
 800e8d8:	4293      	cmp	r3, r2
 800e8da:	d120      	bne.n	800e91e <UART_SetConfig+0x1c6>
 800e8dc:	4b51      	ldr	r3, [pc, #324]	; (800ea24 <UART_SetConfig+0x2cc>)
 800e8de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e8e6:	2bc0      	cmp	r3, #192	; 0xc0
 800e8e8:	d013      	beq.n	800e912 <UART_SetConfig+0x1ba>
 800e8ea:	2bc0      	cmp	r3, #192	; 0xc0
 800e8ec:	d814      	bhi.n	800e918 <UART_SetConfig+0x1c0>
 800e8ee:	2b80      	cmp	r3, #128	; 0x80
 800e8f0:	d009      	beq.n	800e906 <UART_SetConfig+0x1ae>
 800e8f2:	2b80      	cmp	r3, #128	; 0x80
 800e8f4:	d810      	bhi.n	800e918 <UART_SetConfig+0x1c0>
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d002      	beq.n	800e900 <UART_SetConfig+0x1a8>
 800e8fa:	2b40      	cmp	r3, #64	; 0x40
 800e8fc:	d006      	beq.n	800e90c <UART_SetConfig+0x1b4>
 800e8fe:	e00b      	b.n	800e918 <UART_SetConfig+0x1c0>
 800e900:	2300      	movs	r3, #0
 800e902:	77fb      	strb	r3, [r7, #31]
 800e904:	e0cc      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e906:	2302      	movs	r3, #2
 800e908:	77fb      	strb	r3, [r7, #31]
 800e90a:	e0c9      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e90c:	2304      	movs	r3, #4
 800e90e:	77fb      	strb	r3, [r7, #31]
 800e910:	e0c6      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e912:	2308      	movs	r3, #8
 800e914:	77fb      	strb	r3, [r7, #31]
 800e916:	e0c3      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e918:	2310      	movs	r3, #16
 800e91a:	77fb      	strb	r3, [r7, #31]
 800e91c:	e0c0      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	4a44      	ldr	r2, [pc, #272]	; (800ea34 <UART_SetConfig+0x2dc>)
 800e924:	4293      	cmp	r3, r2
 800e926:	d125      	bne.n	800e974 <UART_SetConfig+0x21c>
 800e928:	4b3e      	ldr	r3, [pc, #248]	; (800ea24 <UART_SetConfig+0x2cc>)
 800e92a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e92e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e932:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e936:	d017      	beq.n	800e968 <UART_SetConfig+0x210>
 800e938:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e93c:	d817      	bhi.n	800e96e <UART_SetConfig+0x216>
 800e93e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e942:	d00b      	beq.n	800e95c <UART_SetConfig+0x204>
 800e944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e948:	d811      	bhi.n	800e96e <UART_SetConfig+0x216>
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d003      	beq.n	800e956 <UART_SetConfig+0x1fe>
 800e94e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e952:	d006      	beq.n	800e962 <UART_SetConfig+0x20a>
 800e954:	e00b      	b.n	800e96e <UART_SetConfig+0x216>
 800e956:	2300      	movs	r3, #0
 800e958:	77fb      	strb	r3, [r7, #31]
 800e95a:	e0a1      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e95c:	2302      	movs	r3, #2
 800e95e:	77fb      	strb	r3, [r7, #31]
 800e960:	e09e      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e962:	2304      	movs	r3, #4
 800e964:	77fb      	strb	r3, [r7, #31]
 800e966:	e09b      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e968:	2308      	movs	r3, #8
 800e96a:	77fb      	strb	r3, [r7, #31]
 800e96c:	e098      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e96e:	2310      	movs	r3, #16
 800e970:	77fb      	strb	r3, [r7, #31]
 800e972:	e095      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	4a2f      	ldr	r2, [pc, #188]	; (800ea38 <UART_SetConfig+0x2e0>)
 800e97a:	4293      	cmp	r3, r2
 800e97c:	d125      	bne.n	800e9ca <UART_SetConfig+0x272>
 800e97e:	4b29      	ldr	r3, [pc, #164]	; (800ea24 <UART_SetConfig+0x2cc>)
 800e980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e984:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e988:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e98c:	d017      	beq.n	800e9be <UART_SetConfig+0x266>
 800e98e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e992:	d817      	bhi.n	800e9c4 <UART_SetConfig+0x26c>
 800e994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e998:	d00b      	beq.n	800e9b2 <UART_SetConfig+0x25a>
 800e99a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e99e:	d811      	bhi.n	800e9c4 <UART_SetConfig+0x26c>
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d003      	beq.n	800e9ac <UART_SetConfig+0x254>
 800e9a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e9a8:	d006      	beq.n	800e9b8 <UART_SetConfig+0x260>
 800e9aa:	e00b      	b.n	800e9c4 <UART_SetConfig+0x26c>
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	77fb      	strb	r3, [r7, #31]
 800e9b0:	e076      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e9b2:	2302      	movs	r3, #2
 800e9b4:	77fb      	strb	r3, [r7, #31]
 800e9b6:	e073      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e9b8:	2304      	movs	r3, #4
 800e9ba:	77fb      	strb	r3, [r7, #31]
 800e9bc:	e070      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e9be:	2308      	movs	r3, #8
 800e9c0:	77fb      	strb	r3, [r7, #31]
 800e9c2:	e06d      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e9c4:	2310      	movs	r3, #16
 800e9c6:	77fb      	strb	r3, [r7, #31]
 800e9c8:	e06a      	b.n	800eaa0 <UART_SetConfig+0x348>
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	4a1b      	ldr	r2, [pc, #108]	; (800ea3c <UART_SetConfig+0x2e4>)
 800e9d0:	4293      	cmp	r3, r2
 800e9d2:	d138      	bne.n	800ea46 <UART_SetConfig+0x2ee>
 800e9d4:	4b13      	ldr	r3, [pc, #76]	; (800ea24 <UART_SetConfig+0x2cc>)
 800e9d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e9da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e9de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e9e2:	d017      	beq.n	800ea14 <UART_SetConfig+0x2bc>
 800e9e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e9e8:	d82a      	bhi.n	800ea40 <UART_SetConfig+0x2e8>
 800e9ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e9ee:	d00b      	beq.n	800ea08 <UART_SetConfig+0x2b0>
 800e9f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e9f4:	d824      	bhi.n	800ea40 <UART_SetConfig+0x2e8>
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d003      	beq.n	800ea02 <UART_SetConfig+0x2aa>
 800e9fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e9fe:	d006      	beq.n	800ea0e <UART_SetConfig+0x2b6>
 800ea00:	e01e      	b.n	800ea40 <UART_SetConfig+0x2e8>
 800ea02:	2300      	movs	r3, #0
 800ea04:	77fb      	strb	r3, [r7, #31]
 800ea06:	e04b      	b.n	800eaa0 <UART_SetConfig+0x348>
 800ea08:	2302      	movs	r3, #2
 800ea0a:	77fb      	strb	r3, [r7, #31]
 800ea0c:	e048      	b.n	800eaa0 <UART_SetConfig+0x348>
 800ea0e:	2304      	movs	r3, #4
 800ea10:	77fb      	strb	r3, [r7, #31]
 800ea12:	e045      	b.n	800eaa0 <UART_SetConfig+0x348>
 800ea14:	2308      	movs	r3, #8
 800ea16:	77fb      	strb	r3, [r7, #31]
 800ea18:	e042      	b.n	800eaa0 <UART_SetConfig+0x348>
 800ea1a:	bf00      	nop
 800ea1c:	efff69f3 	.word	0xefff69f3
 800ea20:	40011000 	.word	0x40011000
 800ea24:	40023800 	.word	0x40023800
 800ea28:	40004400 	.word	0x40004400
 800ea2c:	40004800 	.word	0x40004800
 800ea30:	40004c00 	.word	0x40004c00
 800ea34:	40005000 	.word	0x40005000
 800ea38:	40011400 	.word	0x40011400
 800ea3c:	40007800 	.word	0x40007800
 800ea40:	2310      	movs	r3, #16
 800ea42:	77fb      	strb	r3, [r7, #31]
 800ea44:	e02c      	b.n	800eaa0 <UART_SetConfig+0x348>
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	4a72      	ldr	r2, [pc, #456]	; (800ec14 <UART_SetConfig+0x4bc>)
 800ea4c:	4293      	cmp	r3, r2
 800ea4e:	d125      	bne.n	800ea9c <UART_SetConfig+0x344>
 800ea50:	4b71      	ldr	r3, [pc, #452]	; (800ec18 <UART_SetConfig+0x4c0>)
 800ea52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ea56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ea5a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ea5e:	d017      	beq.n	800ea90 <UART_SetConfig+0x338>
 800ea60:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ea64:	d817      	bhi.n	800ea96 <UART_SetConfig+0x33e>
 800ea66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea6a:	d00b      	beq.n	800ea84 <UART_SetConfig+0x32c>
 800ea6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea70:	d811      	bhi.n	800ea96 <UART_SetConfig+0x33e>
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d003      	beq.n	800ea7e <UART_SetConfig+0x326>
 800ea76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ea7a:	d006      	beq.n	800ea8a <UART_SetConfig+0x332>
 800ea7c:	e00b      	b.n	800ea96 <UART_SetConfig+0x33e>
 800ea7e:	2300      	movs	r3, #0
 800ea80:	77fb      	strb	r3, [r7, #31]
 800ea82:	e00d      	b.n	800eaa0 <UART_SetConfig+0x348>
 800ea84:	2302      	movs	r3, #2
 800ea86:	77fb      	strb	r3, [r7, #31]
 800ea88:	e00a      	b.n	800eaa0 <UART_SetConfig+0x348>
 800ea8a:	2304      	movs	r3, #4
 800ea8c:	77fb      	strb	r3, [r7, #31]
 800ea8e:	e007      	b.n	800eaa0 <UART_SetConfig+0x348>
 800ea90:	2308      	movs	r3, #8
 800ea92:	77fb      	strb	r3, [r7, #31]
 800ea94:	e004      	b.n	800eaa0 <UART_SetConfig+0x348>
 800ea96:	2310      	movs	r3, #16
 800ea98:	77fb      	strb	r3, [r7, #31]
 800ea9a:	e001      	b.n	800eaa0 <UART_SetConfig+0x348>
 800ea9c:	2310      	movs	r3, #16
 800ea9e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	69db      	ldr	r3, [r3, #28]
 800eaa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eaa8:	d15b      	bne.n	800eb62 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800eaaa:	7ffb      	ldrb	r3, [r7, #31]
 800eaac:	2b08      	cmp	r3, #8
 800eaae:	d828      	bhi.n	800eb02 <UART_SetConfig+0x3aa>
 800eab0:	a201      	add	r2, pc, #4	; (adr r2, 800eab8 <UART_SetConfig+0x360>)
 800eab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eab6:	bf00      	nop
 800eab8:	0800eadd 	.word	0x0800eadd
 800eabc:	0800eae5 	.word	0x0800eae5
 800eac0:	0800eaed 	.word	0x0800eaed
 800eac4:	0800eb03 	.word	0x0800eb03
 800eac8:	0800eaf3 	.word	0x0800eaf3
 800eacc:	0800eb03 	.word	0x0800eb03
 800ead0:	0800eb03 	.word	0x0800eb03
 800ead4:	0800eb03 	.word	0x0800eb03
 800ead8:	0800eafb 	.word	0x0800eafb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eadc:	f7fb fd60 	bl	800a5a0 <HAL_RCC_GetPCLK1Freq>
 800eae0:	61b8      	str	r0, [r7, #24]
        break;
 800eae2:	e013      	b.n	800eb0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eae4:	f7fb fd70 	bl	800a5c8 <HAL_RCC_GetPCLK2Freq>
 800eae8:	61b8      	str	r0, [r7, #24]
        break;
 800eaea:	e00f      	b.n	800eb0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800eaec:	4b4b      	ldr	r3, [pc, #300]	; (800ec1c <UART_SetConfig+0x4c4>)
 800eaee:	61bb      	str	r3, [r7, #24]
        break;
 800eaf0:	e00c      	b.n	800eb0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800eaf2:	f7fb fc83 	bl	800a3fc <HAL_RCC_GetSysClockFreq>
 800eaf6:	61b8      	str	r0, [r7, #24]
        break;
 800eaf8:	e008      	b.n	800eb0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eafa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eafe:	61bb      	str	r3, [r7, #24]
        break;
 800eb00:	e004      	b.n	800eb0c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800eb02:	2300      	movs	r3, #0
 800eb04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800eb06:	2301      	movs	r3, #1
 800eb08:	77bb      	strb	r3, [r7, #30]
        break;
 800eb0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800eb0c:	69bb      	ldr	r3, [r7, #24]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d074      	beq.n	800ebfc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800eb12:	69bb      	ldr	r3, [r7, #24]
 800eb14:	005a      	lsls	r2, r3, #1
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	685b      	ldr	r3, [r3, #4]
 800eb1a:	085b      	lsrs	r3, r3, #1
 800eb1c:	441a      	add	r2, r3
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	685b      	ldr	r3, [r3, #4]
 800eb22:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	2b0f      	cmp	r3, #15
 800eb2c:	d916      	bls.n	800eb5c <UART_SetConfig+0x404>
 800eb2e:	693b      	ldr	r3, [r7, #16]
 800eb30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb34:	d212      	bcs.n	800eb5c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800eb36:	693b      	ldr	r3, [r7, #16]
 800eb38:	b29b      	uxth	r3, r3
 800eb3a:	f023 030f 	bic.w	r3, r3, #15
 800eb3e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eb40:	693b      	ldr	r3, [r7, #16]
 800eb42:	085b      	lsrs	r3, r3, #1
 800eb44:	b29b      	uxth	r3, r3
 800eb46:	f003 0307 	and.w	r3, r3, #7
 800eb4a:	b29a      	uxth	r2, r3
 800eb4c:	89fb      	ldrh	r3, [r7, #14]
 800eb4e:	4313      	orrs	r3, r2
 800eb50:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	89fa      	ldrh	r2, [r7, #14]
 800eb58:	60da      	str	r2, [r3, #12]
 800eb5a:	e04f      	b.n	800ebfc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	77bb      	strb	r3, [r7, #30]
 800eb60:	e04c      	b.n	800ebfc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800eb62:	7ffb      	ldrb	r3, [r7, #31]
 800eb64:	2b08      	cmp	r3, #8
 800eb66:	d828      	bhi.n	800ebba <UART_SetConfig+0x462>
 800eb68:	a201      	add	r2, pc, #4	; (adr r2, 800eb70 <UART_SetConfig+0x418>)
 800eb6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb6e:	bf00      	nop
 800eb70:	0800eb95 	.word	0x0800eb95
 800eb74:	0800eb9d 	.word	0x0800eb9d
 800eb78:	0800eba5 	.word	0x0800eba5
 800eb7c:	0800ebbb 	.word	0x0800ebbb
 800eb80:	0800ebab 	.word	0x0800ebab
 800eb84:	0800ebbb 	.word	0x0800ebbb
 800eb88:	0800ebbb 	.word	0x0800ebbb
 800eb8c:	0800ebbb 	.word	0x0800ebbb
 800eb90:	0800ebb3 	.word	0x0800ebb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eb94:	f7fb fd04 	bl	800a5a0 <HAL_RCC_GetPCLK1Freq>
 800eb98:	61b8      	str	r0, [r7, #24]
        break;
 800eb9a:	e013      	b.n	800ebc4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eb9c:	f7fb fd14 	bl	800a5c8 <HAL_RCC_GetPCLK2Freq>
 800eba0:	61b8      	str	r0, [r7, #24]
        break;
 800eba2:	e00f      	b.n	800ebc4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800eba4:	4b1d      	ldr	r3, [pc, #116]	; (800ec1c <UART_SetConfig+0x4c4>)
 800eba6:	61bb      	str	r3, [r7, #24]
        break;
 800eba8:	e00c      	b.n	800ebc4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ebaa:	f7fb fc27 	bl	800a3fc <HAL_RCC_GetSysClockFreq>
 800ebae:	61b8      	str	r0, [r7, #24]
        break;
 800ebb0:	e008      	b.n	800ebc4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ebb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ebb6:	61bb      	str	r3, [r7, #24]
        break;
 800ebb8:	e004      	b.n	800ebc4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	77bb      	strb	r3, [r7, #30]
        break;
 800ebc2:	bf00      	nop
    }

    if (pclk != 0U)
 800ebc4:	69bb      	ldr	r3, [r7, #24]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d018      	beq.n	800ebfc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	685b      	ldr	r3, [r3, #4]
 800ebce:	085a      	lsrs	r2, r3, #1
 800ebd0:	69bb      	ldr	r3, [r7, #24]
 800ebd2:	441a      	add	r2, r3
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	685b      	ldr	r3, [r3, #4]
 800ebd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebdc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	2b0f      	cmp	r3, #15
 800ebe2:	d909      	bls.n	800ebf8 <UART_SetConfig+0x4a0>
 800ebe4:	693b      	ldr	r3, [r7, #16]
 800ebe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ebea:	d205      	bcs.n	800ebf8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	b29a      	uxth	r2, r3
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	60da      	str	r2, [r3, #12]
 800ebf6:	e001      	b.n	800ebfc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2200      	movs	r2, #0
 800ec06:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ec08:	7fbb      	ldrb	r3, [r7, #30]
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3720      	adds	r7, #32
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}
 800ec12:	bf00      	nop
 800ec14:	40007c00 	.word	0x40007c00
 800ec18:	40023800 	.word	0x40023800
 800ec1c:	00f42400 	.word	0x00f42400

0800ec20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ec20:	b480      	push	{r7}
 800ec22:	b083      	sub	sp, #12
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec2c:	f003 0301 	and.w	r3, r3, #1
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d00a      	beq.n	800ec4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	685b      	ldr	r3, [r3, #4]
 800ec3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	430a      	orrs	r2, r1
 800ec48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec4e:	f003 0302 	and.w	r3, r3, #2
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d00a      	beq.n	800ec6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	685b      	ldr	r3, [r3, #4]
 800ec5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	430a      	orrs	r2, r1
 800ec6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec70:	f003 0304 	and.w	r3, r3, #4
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d00a      	beq.n	800ec8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	685b      	ldr	r3, [r3, #4]
 800ec7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	430a      	orrs	r2, r1
 800ec8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec92:	f003 0308 	and.w	r3, r3, #8
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d00a      	beq.n	800ecb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	685b      	ldr	r3, [r3, #4]
 800eca0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	430a      	orrs	r2, r1
 800ecae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecb4:	f003 0310 	and.w	r3, r3, #16
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d00a      	beq.n	800ecd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	689b      	ldr	r3, [r3, #8]
 800ecc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	430a      	orrs	r2, r1
 800ecd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecd6:	f003 0320 	and.w	r3, r3, #32
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d00a      	beq.n	800ecf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	689b      	ldr	r3, [r3, #8]
 800ece4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	430a      	orrs	r2, r1
 800ecf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d01a      	beq.n	800ed36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	685b      	ldr	r3, [r3, #4]
 800ed06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	430a      	orrs	r2, r1
 800ed14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed1e:	d10a      	bne.n	800ed36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	685b      	ldr	r3, [r3, #4]
 800ed26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	430a      	orrs	r2, r1
 800ed34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d00a      	beq.n	800ed58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	685b      	ldr	r3, [r3, #4]
 800ed48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	430a      	orrs	r2, r1
 800ed56:	605a      	str	r2, [r3, #4]
  }
}
 800ed58:	bf00      	nop
 800ed5a:	370c      	adds	r7, #12
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed62:	4770      	bx	lr

0800ed64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b086      	sub	sp, #24
 800ed68:	af02      	add	r7, sp, #8
 800ed6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2200      	movs	r2, #0
 800ed70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ed74:	f7f7 fd7c 	bl	8006870 <HAL_GetTick>
 800ed78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	f003 0308 	and.w	r3, r3, #8
 800ed84:	2b08      	cmp	r3, #8
 800ed86:	d10e      	bne.n	800eda6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ed88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ed8c:	9300      	str	r3, [sp, #0]
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	2200      	movs	r2, #0
 800ed92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f000 f82d 	bl	800edf6 <UART_WaitOnFlagUntilTimeout>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d001      	beq.n	800eda6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eda2:	2303      	movs	r3, #3
 800eda4:	e023      	b.n	800edee <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	f003 0304 	and.w	r3, r3, #4
 800edb0:	2b04      	cmp	r3, #4
 800edb2:	d10e      	bne.n	800edd2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800edb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800edb8:	9300      	str	r3, [sp, #0]
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	2200      	movs	r2, #0
 800edbe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	f000 f817 	bl	800edf6 <UART_WaitOnFlagUntilTimeout>
 800edc8:	4603      	mov	r3, r0
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d001      	beq.n	800edd2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800edce:	2303      	movs	r3, #3
 800edd0:	e00d      	b.n	800edee <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2220      	movs	r2, #32
 800edd6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2220      	movs	r2, #32
 800eddc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2200      	movs	r2, #0
 800ede2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2200      	movs	r2, #0
 800ede8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800edec:	2300      	movs	r3, #0
}
 800edee:	4618      	mov	r0, r3
 800edf0:	3710      	adds	r7, #16
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}

0800edf6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800edf6:	b580      	push	{r7, lr}
 800edf8:	b09c      	sub	sp, #112	; 0x70
 800edfa:	af00      	add	r7, sp, #0
 800edfc:	60f8      	str	r0, [r7, #12]
 800edfe:	60b9      	str	r1, [r7, #8]
 800ee00:	603b      	str	r3, [r7, #0]
 800ee02:	4613      	mov	r3, r2
 800ee04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ee06:	e0a5      	b.n	800ef54 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ee08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee0e:	f000 80a1 	beq.w	800ef54 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ee12:	f7f7 fd2d 	bl	8006870 <HAL_GetTick>
 800ee16:	4602      	mov	r2, r0
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	1ad3      	subs	r3, r2, r3
 800ee1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ee1e:	429a      	cmp	r2, r3
 800ee20:	d302      	bcc.n	800ee28 <UART_WaitOnFlagUntilTimeout+0x32>
 800ee22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d13e      	bne.n	800eea6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee30:	e853 3f00 	ldrex	r3, [r3]
 800ee34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ee36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ee3c:	667b      	str	r3, [r7, #100]	; 0x64
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	461a      	mov	r2, r3
 800ee44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee46:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ee48:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ee4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ee4e:	e841 2300 	strex	r3, r2, [r1]
 800ee52:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ee54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d1e6      	bne.n	800ee28 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	3308      	adds	r3, #8
 800ee60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee64:	e853 3f00 	ldrex	r3, [r3]
 800ee68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ee6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee6c:	f023 0301 	bic.w	r3, r3, #1
 800ee70:	663b      	str	r3, [r7, #96]	; 0x60
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	3308      	adds	r3, #8
 800ee78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ee7a:	64ba      	str	r2, [r7, #72]	; 0x48
 800ee7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee82:	e841 2300 	strex	r3, r2, [r1]
 800ee86:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ee88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d1e5      	bne.n	800ee5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	2220      	movs	r2, #32
 800ee92:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	2220      	movs	r2, #32
 800ee98:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800eea2:	2303      	movs	r3, #3
 800eea4:	e067      	b.n	800ef76 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	f003 0304 	and.w	r3, r3, #4
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d04f      	beq.n	800ef54 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	69db      	ldr	r3, [r3, #28]
 800eeba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eebe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eec2:	d147      	bne.n	800ef54 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eecc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed6:	e853 3f00 	ldrex	r3, [r3]
 800eeda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eede:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800eee2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	461a      	mov	r2, r3
 800eeea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eeec:	637b      	str	r3, [r7, #52]	; 0x34
 800eeee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eef0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eef2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eef4:	e841 2300 	strex	r3, r2, [r1]
 800eef8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800eefa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d1e6      	bne.n	800eece <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	3308      	adds	r3, #8
 800ef06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef08:	697b      	ldr	r3, [r7, #20]
 800ef0a:	e853 3f00 	ldrex	r3, [r3]
 800ef0e:	613b      	str	r3, [r7, #16]
   return(result);
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	f023 0301 	bic.w	r3, r3, #1
 800ef16:	66bb      	str	r3, [r7, #104]	; 0x68
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	3308      	adds	r3, #8
 800ef1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ef20:	623a      	str	r2, [r7, #32]
 800ef22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef24:	69f9      	ldr	r1, [r7, #28]
 800ef26:	6a3a      	ldr	r2, [r7, #32]
 800ef28:	e841 2300 	strex	r3, r2, [r1]
 800ef2c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ef2e:	69bb      	ldr	r3, [r7, #24]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d1e5      	bne.n	800ef00 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	2220      	movs	r2, #32
 800ef38:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	2220      	movs	r2, #32
 800ef3e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2220      	movs	r2, #32
 800ef44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800ef50:	2303      	movs	r3, #3
 800ef52:	e010      	b.n	800ef76 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	69da      	ldr	r2, [r3, #28]
 800ef5a:	68bb      	ldr	r3, [r7, #8]
 800ef5c:	4013      	ands	r3, r2
 800ef5e:	68ba      	ldr	r2, [r7, #8]
 800ef60:	429a      	cmp	r2, r3
 800ef62:	bf0c      	ite	eq
 800ef64:	2301      	moveq	r3, #1
 800ef66:	2300      	movne	r3, #0
 800ef68:	b2db      	uxtb	r3, r3
 800ef6a:	461a      	mov	r2, r3
 800ef6c:	79fb      	ldrb	r3, [r7, #7]
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	f43f af4a 	beq.w	800ee08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ef74:	2300      	movs	r3, #0
}
 800ef76:	4618      	mov	r0, r3
 800ef78:	3770      	adds	r7, #112	; 0x70
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bd80      	pop	{r7, pc}
	...

0800ef80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ef80:	b480      	push	{r7}
 800ef82:	b097      	sub	sp, #92	; 0x5c
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	60f8      	str	r0, [r7, #12]
 800ef88:	60b9      	str	r1, [r7, #8]
 800ef8a:	4613      	mov	r3, r2
 800ef8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	68ba      	ldr	r2, [r7, #8]
 800ef92:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	88fa      	ldrh	r2, [r7, #6]
 800ef98:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	88fa      	ldrh	r2, [r7, #6]
 800efa0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	2200      	movs	r2, #0
 800efa8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	689b      	ldr	r3, [r3, #8]
 800efae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800efb2:	d10e      	bne.n	800efd2 <UART_Start_Receive_IT+0x52>
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	691b      	ldr	r3, [r3, #16]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d105      	bne.n	800efc8 <UART_Start_Receive_IT+0x48>
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	f240 12ff 	movw	r2, #511	; 0x1ff
 800efc2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800efc6:	e02d      	b.n	800f024 <UART_Start_Receive_IT+0xa4>
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	22ff      	movs	r2, #255	; 0xff
 800efcc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800efd0:	e028      	b.n	800f024 <UART_Start_Receive_IT+0xa4>
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	689b      	ldr	r3, [r3, #8]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d10d      	bne.n	800eff6 <UART_Start_Receive_IT+0x76>
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	691b      	ldr	r3, [r3, #16]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d104      	bne.n	800efec <UART_Start_Receive_IT+0x6c>
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	22ff      	movs	r2, #255	; 0xff
 800efe6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800efea:	e01b      	b.n	800f024 <UART_Start_Receive_IT+0xa4>
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	227f      	movs	r2, #127	; 0x7f
 800eff0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800eff4:	e016      	b.n	800f024 <UART_Start_Receive_IT+0xa4>
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	689b      	ldr	r3, [r3, #8]
 800effa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800effe:	d10d      	bne.n	800f01c <UART_Start_Receive_IT+0x9c>
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	691b      	ldr	r3, [r3, #16]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d104      	bne.n	800f012 <UART_Start_Receive_IT+0x92>
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	227f      	movs	r2, #127	; 0x7f
 800f00c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f010:	e008      	b.n	800f024 <UART_Start_Receive_IT+0xa4>
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	223f      	movs	r2, #63	; 0x3f
 800f016:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f01a:	e003      	b.n	800f024 <UART_Start_Receive_IT+0xa4>
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	2200      	movs	r2, #0
 800f020:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	2200      	movs	r2, #0
 800f028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	2222      	movs	r2, #34	; 0x22
 800f030:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	3308      	adds	r3, #8
 800f038:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f03a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f03c:	e853 3f00 	ldrex	r3, [r3]
 800f040:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f044:	f043 0301 	orr.w	r3, r3, #1
 800f048:	657b      	str	r3, [r7, #84]	; 0x54
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	3308      	adds	r3, #8
 800f050:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f052:	64ba      	str	r2, [r7, #72]	; 0x48
 800f054:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f056:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f058:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f05a:	e841 2300 	strex	r3, r2, [r1]
 800f05e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f062:	2b00      	cmp	r3, #0
 800f064:	d1e5      	bne.n	800f032 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	689b      	ldr	r3, [r3, #8]
 800f06a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f06e:	d107      	bne.n	800f080 <UART_Start_Receive_IT+0x100>
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	691b      	ldr	r3, [r3, #16]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d103      	bne.n	800f080 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	4a24      	ldr	r2, [pc, #144]	; (800f10c <UART_Start_Receive_IT+0x18c>)
 800f07c:	665a      	str	r2, [r3, #100]	; 0x64
 800f07e:	e002      	b.n	800f086 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	4a23      	ldr	r2, [pc, #140]	; (800f110 <UART_Start_Receive_IT+0x190>)
 800f084:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	2200      	movs	r2, #0
 800f08a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	691b      	ldr	r3, [r3, #16]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d019      	beq.n	800f0ca <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f09e:	e853 3f00 	ldrex	r3, [r3]
 800f0a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f0aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0b4:	637b      	str	r3, [r7, #52]	; 0x34
 800f0b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f0ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f0bc:	e841 2300 	strex	r3, r2, [r1]
 800f0c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d1e6      	bne.n	800f096 <UART_Start_Receive_IT+0x116>
 800f0c8:	e018      	b.n	800f0fc <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0d0:	697b      	ldr	r3, [r7, #20]
 800f0d2:	e853 3f00 	ldrex	r3, [r3]
 800f0d6:	613b      	str	r3, [r7, #16]
   return(result);
 800f0d8:	693b      	ldr	r3, [r7, #16]
 800f0da:	f043 0320 	orr.w	r3, r3, #32
 800f0de:	653b      	str	r3, [r7, #80]	; 0x50
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	461a      	mov	r2, r3
 800f0e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0e8:	623b      	str	r3, [r7, #32]
 800f0ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0ec:	69f9      	ldr	r1, [r7, #28]
 800f0ee:	6a3a      	ldr	r2, [r7, #32]
 800f0f0:	e841 2300 	strex	r3, r2, [r1]
 800f0f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800f0f6:	69bb      	ldr	r3, [r7, #24]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d1e6      	bne.n	800f0ca <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 800f0fc:	2300      	movs	r3, #0
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	375c      	adds	r7, #92	; 0x5c
 800f102:	46bd      	mov	sp, r7
 800f104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f108:	4770      	bx	lr
 800f10a:	bf00      	nop
 800f10c:	0800f3b7 	.word	0x0800f3b7
 800f110:	0800f25b 	.word	0x0800f25b

0800f114 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f114:	b480      	push	{r7}
 800f116:	b095      	sub	sp, #84	; 0x54
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f124:	e853 3f00 	ldrex	r3, [r3]
 800f128:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f12c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f130:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	461a      	mov	r2, r3
 800f138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f13a:	643b      	str	r3, [r7, #64]	; 0x40
 800f13c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f13e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f140:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f142:	e841 2300 	strex	r3, r2, [r1]
 800f146:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d1e6      	bne.n	800f11c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	3308      	adds	r3, #8
 800f154:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f156:	6a3b      	ldr	r3, [r7, #32]
 800f158:	e853 3f00 	ldrex	r3, [r3]
 800f15c:	61fb      	str	r3, [r7, #28]
   return(result);
 800f15e:	69fb      	ldr	r3, [r7, #28]
 800f160:	f023 0301 	bic.w	r3, r3, #1
 800f164:	64bb      	str	r3, [r7, #72]	; 0x48
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	3308      	adds	r3, #8
 800f16c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f16e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f170:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f172:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f176:	e841 2300 	strex	r3, r2, [r1]
 800f17a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d1e5      	bne.n	800f14e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f186:	2b01      	cmp	r3, #1
 800f188:	d118      	bne.n	800f1bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	e853 3f00 	ldrex	r3, [r3]
 800f196:	60bb      	str	r3, [r7, #8]
   return(result);
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	f023 0310 	bic.w	r3, r3, #16
 800f19e:	647b      	str	r3, [r7, #68]	; 0x44
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	461a      	mov	r2, r3
 800f1a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1a8:	61bb      	str	r3, [r7, #24]
 800f1aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1ac:	6979      	ldr	r1, [r7, #20]
 800f1ae:	69ba      	ldr	r2, [r7, #24]
 800f1b0:	e841 2300 	strex	r3, r2, [r1]
 800f1b4:	613b      	str	r3, [r7, #16]
   return(result);
 800f1b6:	693b      	ldr	r3, [r7, #16]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d1e6      	bne.n	800f18a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2220      	movs	r2, #32
 800f1c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	665a      	str	r2, [r3, #100]	; 0x64
}
 800f1ce:	bf00      	nop
 800f1d0:	3754      	adds	r7, #84	; 0x54
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d8:	4770      	bx	lr

0800f1da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f1da:	b580      	push	{r7, lr}
 800f1dc:	b084      	sub	sp, #16
 800f1de:	af00      	add	r7, sp, #0
 800f1e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f1f8:	68f8      	ldr	r0, [r7, #12]
 800f1fa:	f7ff fa8d 	bl	800e718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f1fe:	bf00      	nop
 800f200:	3710      	adds	r7, #16
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}

0800f206 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f206:	b580      	push	{r7, lr}
 800f208:	b088      	sub	sp, #32
 800f20a:	af00      	add	r7, sp, #0
 800f20c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	e853 3f00 	ldrex	r3, [r3]
 800f21a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f21c:	68bb      	ldr	r3, [r7, #8]
 800f21e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f222:	61fb      	str	r3, [r7, #28]
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	461a      	mov	r2, r3
 800f22a:	69fb      	ldr	r3, [r7, #28]
 800f22c:	61bb      	str	r3, [r7, #24]
 800f22e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f230:	6979      	ldr	r1, [r7, #20]
 800f232:	69ba      	ldr	r2, [r7, #24]
 800f234:	e841 2300 	strex	r3, r2, [r1]
 800f238:	613b      	str	r3, [r7, #16]
   return(result);
 800f23a:	693b      	ldr	r3, [r7, #16]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d1e6      	bne.n	800f20e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2220      	movs	r2, #32
 800f244:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2200      	movs	r2, #0
 800f24a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	f7ff fa59 	bl	800e704 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f252:	bf00      	nop
 800f254:	3720      	adds	r7, #32
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}

0800f25a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f25a:	b580      	push	{r7, lr}
 800f25c:	b096      	sub	sp, #88	; 0x58
 800f25e:	af00      	add	r7, sp, #0
 800f260:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f268:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f270:	2b22      	cmp	r3, #34	; 0x22
 800f272:	f040 8094 	bne.w	800f39e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f27c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f280:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f284:	b2d9      	uxtb	r1, r3
 800f286:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f28a:	b2da      	uxtb	r2, r3
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f290:	400a      	ands	r2, r1
 800f292:	b2d2      	uxtb	r2, r2
 800f294:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f29a:	1c5a      	adds	r2, r3, #1
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f2a6:	b29b      	uxth	r3, r3
 800f2a8:	3b01      	subs	r3, #1
 800f2aa:	b29a      	uxth	r2, r3
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f2b8:	b29b      	uxth	r3, r3
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d177      	bne.n	800f3ae <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2c6:	e853 3f00 	ldrex	r3, [r3]
 800f2ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f2cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f2d2:	653b      	str	r3, [r7, #80]	; 0x50
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	461a      	mov	r2, r3
 800f2da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2dc:	647b      	str	r3, [r7, #68]	; 0x44
 800f2de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f2e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f2e4:	e841 2300 	strex	r3, r2, [r1]
 800f2e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f2ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d1e6      	bne.n	800f2be <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	3308      	adds	r3, #8
 800f2f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2fa:	e853 3f00 	ldrex	r3, [r3]
 800f2fe:	623b      	str	r3, [r7, #32]
   return(result);
 800f300:	6a3b      	ldr	r3, [r7, #32]
 800f302:	f023 0301 	bic.w	r3, r3, #1
 800f306:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	3308      	adds	r3, #8
 800f30e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f310:	633a      	str	r2, [r7, #48]	; 0x30
 800f312:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f314:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f316:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f318:	e841 2300 	strex	r3, r2, [r1]
 800f31c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f320:	2b00      	cmp	r3, #0
 800f322:	d1e5      	bne.n	800f2f0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2220      	movs	r2, #32
 800f328:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	2200      	movs	r2, #0
 800f32e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f334:	2b01      	cmp	r3, #1
 800f336:	d12e      	bne.n	800f396 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2200      	movs	r2, #0
 800f33c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	e853 3f00 	ldrex	r3, [r3]
 800f34a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f023 0310 	bic.w	r3, r3, #16
 800f352:	64bb      	str	r3, [r7, #72]	; 0x48
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	461a      	mov	r2, r3
 800f35a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f35c:	61fb      	str	r3, [r7, #28]
 800f35e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f360:	69b9      	ldr	r1, [r7, #24]
 800f362:	69fa      	ldr	r2, [r7, #28]
 800f364:	e841 2300 	strex	r3, r2, [r1]
 800f368:	617b      	str	r3, [r7, #20]
   return(result);
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d1e6      	bne.n	800f33e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	69db      	ldr	r3, [r3, #28]
 800f376:	f003 0310 	and.w	r3, r3, #16
 800f37a:	2b10      	cmp	r3, #16
 800f37c:	d103      	bne.n	800f386 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	2210      	movs	r2, #16
 800f384:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f38c:	4619      	mov	r1, r3
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f7ff f9cc 	bl	800e72c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f394:	e00b      	b.n	800f3ae <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800f396:	6878      	ldr	r0, [r7, #4]
 800f398:	f7f5 fede 	bl	8005158 <HAL_UART_RxCpltCallback>
}
 800f39c:	e007      	b.n	800f3ae <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	699a      	ldr	r2, [r3, #24]
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	f042 0208 	orr.w	r2, r2, #8
 800f3ac:	619a      	str	r2, [r3, #24]
}
 800f3ae:	bf00      	nop
 800f3b0:	3758      	adds	r7, #88	; 0x58
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}

0800f3b6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f3b6:	b580      	push	{r7, lr}
 800f3b8:	b096      	sub	sp, #88	; 0x58
 800f3ba:	af00      	add	r7, sp, #0
 800f3bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f3c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f3cc:	2b22      	cmp	r3, #34	; 0x22
 800f3ce:	f040 8094 	bne.w	800f4fa <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3d8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3e0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800f3e2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800f3e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f3ea:	4013      	ands	r3, r2
 800f3ec:	b29a      	uxth	r2, r3
 800f3ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3f0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3f6:	1c9a      	adds	r2, r3, #2
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f402:	b29b      	uxth	r3, r3
 800f404:	3b01      	subs	r3, #1
 800f406:	b29a      	uxth	r2, r3
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f414:	b29b      	uxth	r3, r3
 800f416:	2b00      	cmp	r3, #0
 800f418:	d177      	bne.n	800f50a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f422:	e853 3f00 	ldrex	r3, [r3]
 800f426:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f42a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f42e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	461a      	mov	r2, r3
 800f436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f438:	643b      	str	r3, [r7, #64]	; 0x40
 800f43a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f43c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f43e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f440:	e841 2300 	strex	r3, r2, [r1]
 800f444:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d1e6      	bne.n	800f41a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	3308      	adds	r3, #8
 800f452:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f454:	6a3b      	ldr	r3, [r7, #32]
 800f456:	e853 3f00 	ldrex	r3, [r3]
 800f45a:	61fb      	str	r3, [r7, #28]
   return(result);
 800f45c:	69fb      	ldr	r3, [r7, #28]
 800f45e:	f023 0301 	bic.w	r3, r3, #1
 800f462:	64bb      	str	r3, [r7, #72]	; 0x48
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	3308      	adds	r3, #8
 800f46a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f46c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f46e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f470:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f474:	e841 2300 	strex	r3, r2, [r1]
 800f478:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d1e5      	bne.n	800f44c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2220      	movs	r2, #32
 800f484:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2200      	movs	r2, #0
 800f48a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f490:	2b01      	cmp	r3, #1
 800f492:	d12e      	bne.n	800f4f2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2200      	movs	r2, #0
 800f498:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	e853 3f00 	ldrex	r3, [r3]
 800f4a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800f4a8:	68bb      	ldr	r3, [r7, #8]
 800f4aa:	f023 0310 	bic.w	r3, r3, #16
 800f4ae:	647b      	str	r3, [r7, #68]	; 0x44
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	461a      	mov	r2, r3
 800f4b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4b8:	61bb      	str	r3, [r7, #24]
 800f4ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4bc:	6979      	ldr	r1, [r7, #20]
 800f4be:	69ba      	ldr	r2, [r7, #24]
 800f4c0:	e841 2300 	strex	r3, r2, [r1]
 800f4c4:	613b      	str	r3, [r7, #16]
   return(result);
 800f4c6:	693b      	ldr	r3, [r7, #16]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d1e6      	bne.n	800f49a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	69db      	ldr	r3, [r3, #28]
 800f4d2:	f003 0310 	and.w	r3, r3, #16
 800f4d6:	2b10      	cmp	r3, #16
 800f4d8:	d103      	bne.n	800f4e2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	2210      	movs	r2, #16
 800f4e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f4e8:	4619      	mov	r1, r3
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f7ff f91e 	bl	800e72c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f4f0:	e00b      	b.n	800f50a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f7f5 fe30 	bl	8005158 <HAL_UART_RxCpltCallback>
}
 800f4f8:	e007      	b.n	800f50a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	699a      	ldr	r2, [r3, #24]
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	f042 0208 	orr.w	r2, r2, #8
 800f508:	619a      	str	r2, [r3, #24]
}
 800f50a:	bf00      	nop
 800f50c:	3758      	adds	r7, #88	; 0x58
 800f50e:	46bd      	mov	sp, r7
 800f510:	bd80      	pop	{r7, pc}
	...

0800f514 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800f514:	b084      	sub	sp, #16
 800f516:	b480      	push	{r7}
 800f518:	b085      	sub	sp, #20
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	6078      	str	r0, [r7, #4]
 800f51e:	f107 001c 	add.w	r0, r7, #28
 800f522:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f526:	2300      	movs	r3, #0
 800f528:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800f52a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800f52c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800f52e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800f530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800f532:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800f534:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800f536:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800f538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800f53a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800f53e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800f540:	68fa      	ldr	r2, [r7, #12]
 800f542:	4313      	orrs	r3, r2
 800f544:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	685a      	ldr	r2, [r3, #4]
 800f54a:	4b07      	ldr	r3, [pc, #28]	; (800f568 <SDMMC_Init+0x54>)
 800f54c:	4013      	ands	r3, r2
 800f54e:	68fa      	ldr	r2, [r7, #12]
 800f550:	431a      	orrs	r2, r3
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f556:	2300      	movs	r3, #0
}
 800f558:	4618      	mov	r0, r3
 800f55a:	3714      	adds	r7, #20
 800f55c:	46bd      	mov	sp, r7
 800f55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f562:	b004      	add	sp, #16
 800f564:	4770      	bx	lr
 800f566:	bf00      	nop
 800f568:	ffff8100 	.word	0xffff8100

0800f56c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800f56c:	b480      	push	{r7}
 800f56e:	b083      	sub	sp, #12
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800f57a:	4618      	mov	r0, r3
 800f57c:	370c      	adds	r7, #12
 800f57e:	46bd      	mov	sp, r7
 800f580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f584:	4770      	bx	lr

0800f586 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800f586:	b480      	push	{r7}
 800f588:	b083      	sub	sp, #12
 800f58a:	af00      	add	r7, sp, #0
 800f58c:	6078      	str	r0, [r7, #4]
 800f58e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	681a      	ldr	r2, [r3, #0]
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f59a:	2300      	movs	r3, #0
}
 800f59c:	4618      	mov	r0, r3
 800f59e:	370c      	adds	r7, #12
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a6:	4770      	bx	lr

0800f5a8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800f5a8:	b480      	push	{r7}
 800f5aa:	b083      	sub	sp, #12
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2203      	movs	r2, #3
 800f5b4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800f5b6:	2300      	movs	r3, #0
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	370c      	adds	r7, #12
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c2:	4770      	bx	lr

0800f5c4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	b083      	sub	sp, #12
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	f003 0303 	and.w	r3, r3, #3
}
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	370c      	adds	r7, #12
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5de:	4770      	bx	lr

0800f5e0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	b085      	sub	sp, #20
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
 800f5e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	681a      	ldr	r2, [r3, #0]
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f5fe:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f604:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f60a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f60c:	68fa      	ldr	r2, [r7, #12]
 800f60e:	4313      	orrs	r3, r2
 800f610:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	68da      	ldr	r2, [r3, #12]
 800f616:	4b06      	ldr	r3, [pc, #24]	; (800f630 <SDMMC_SendCommand+0x50>)
 800f618:	4013      	ands	r3, r2
 800f61a:	68fa      	ldr	r2, [r7, #12]
 800f61c:	431a      	orrs	r2, r3
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800f622:	2300      	movs	r3, #0
}
 800f624:	4618      	mov	r0, r3
 800f626:	3714      	adds	r7, #20
 800f628:	46bd      	mov	sp, r7
 800f62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62e:	4770      	bx	lr
 800f630:	fffff000 	.word	0xfffff000

0800f634 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800f634:	b480      	push	{r7}
 800f636:	b083      	sub	sp, #12
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	691b      	ldr	r3, [r3, #16]
 800f640:	b2db      	uxtb	r3, r3
}
 800f642:	4618      	mov	r0, r3
 800f644:	370c      	adds	r7, #12
 800f646:	46bd      	mov	sp, r7
 800f648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64c:	4770      	bx	lr

0800f64e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800f64e:	b480      	push	{r7}
 800f650:	b085      	sub	sp, #20
 800f652:	af00      	add	r7, sp, #0
 800f654:	6078      	str	r0, [r7, #4]
 800f656:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	3314      	adds	r3, #20
 800f65c:	461a      	mov	r2, r3
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	4413      	add	r3, r2
 800f662:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	681b      	ldr	r3, [r3, #0]
}  
 800f668:	4618      	mov	r0, r3
 800f66a:	3714      	adds	r7, #20
 800f66c:	46bd      	mov	sp, r7
 800f66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f672:	4770      	bx	lr

0800f674 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800f674:	b480      	push	{r7}
 800f676:	b085      	sub	sp, #20
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
 800f67c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f67e:	2300      	movs	r3, #0
 800f680:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800f682:	683b      	ldr	r3, [r7, #0]
 800f684:	681a      	ldr	r2, [r3, #0]
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	685a      	ldr	r2, [r3, #4]
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f69a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f6a0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f6a6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f6a8:	68fa      	ldr	r2, [r7, #12]
 800f6aa:	4313      	orrs	r3, r2
 800f6ac:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6b2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	431a      	orrs	r2, r3
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800f6be:	2300      	movs	r3, #0

}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	3714      	adds	r7, #20
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr

0800f6cc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b088      	sub	sp, #32
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
 800f6d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f6da:	2310      	movs	r3, #16
 800f6dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f6de:	2340      	movs	r3, #64	; 0x40
 800f6e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f6e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f6ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f6ec:	f107 0308 	add.w	r3, r7, #8
 800f6f0:	4619      	mov	r1, r3
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	f7ff ff74 	bl	800f5e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800f6f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f6fc:	2110      	movs	r1, #16
 800f6fe:	6878      	ldr	r0, [r7, #4]
 800f700:	f000 fa1a 	bl	800fb38 <SDMMC_GetCmdResp1>
 800f704:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f706:	69fb      	ldr	r3, [r7, #28]
}
 800f708:	4618      	mov	r0, r3
 800f70a:	3720      	adds	r7, #32
 800f70c:	46bd      	mov	sp, r7
 800f70e:	bd80      	pop	{r7, pc}

0800f710 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b088      	sub	sp, #32
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
 800f718:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f71e:	2311      	movs	r3, #17
 800f720:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f722:	2340      	movs	r3, #64	; 0x40
 800f724:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f726:	2300      	movs	r3, #0
 800f728:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f72a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f72e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f730:	f107 0308 	add.w	r3, r7, #8
 800f734:	4619      	mov	r1, r3
 800f736:	6878      	ldr	r0, [r7, #4]
 800f738:	f7ff ff52 	bl	800f5e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f73c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f740:	2111      	movs	r1, #17
 800f742:	6878      	ldr	r0, [r7, #4]
 800f744:	f000 f9f8 	bl	800fb38 <SDMMC_GetCmdResp1>
 800f748:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f74a:	69fb      	ldr	r3, [r7, #28]
}
 800f74c:	4618      	mov	r0, r3
 800f74e:	3720      	adds	r7, #32
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}

0800f754 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b088      	sub	sp, #32
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
 800f75c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f762:	2312      	movs	r3, #18
 800f764:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f766:	2340      	movs	r3, #64	; 0x40
 800f768:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f76a:	2300      	movs	r3, #0
 800f76c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f76e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f772:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f774:	f107 0308 	add.w	r3, r7, #8
 800f778:	4619      	mov	r1, r3
 800f77a:	6878      	ldr	r0, [r7, #4]
 800f77c:	f7ff ff30 	bl	800f5e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f780:	f241 3288 	movw	r2, #5000	; 0x1388
 800f784:	2112      	movs	r1, #18
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f000 f9d6 	bl	800fb38 <SDMMC_GetCmdResp1>
 800f78c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f78e:	69fb      	ldr	r3, [r7, #28]
}
 800f790:	4618      	mov	r0, r3
 800f792:	3720      	adds	r7, #32
 800f794:	46bd      	mov	sp, r7
 800f796:	bd80      	pop	{r7, pc}

0800f798 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b088      	sub	sp, #32
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
 800f7a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f7a2:	683b      	ldr	r3, [r7, #0]
 800f7a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f7a6:	2318      	movs	r3, #24
 800f7a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f7aa:	2340      	movs	r3, #64	; 0x40
 800f7ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f7b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f7b8:	f107 0308 	add.w	r3, r7, #8
 800f7bc:	4619      	mov	r1, r3
 800f7be:	6878      	ldr	r0, [r7, #4]
 800f7c0:	f7ff ff0e 	bl	800f5e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f7c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f7c8:	2118      	movs	r1, #24
 800f7ca:	6878      	ldr	r0, [r7, #4]
 800f7cc:	f000 f9b4 	bl	800fb38 <SDMMC_GetCmdResp1>
 800f7d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f7d2:	69fb      	ldr	r3, [r7, #28]
}
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	3720      	adds	r7, #32
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd80      	pop	{r7, pc}

0800f7dc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b088      	sub	sp, #32
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
 800f7e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f7ea:	2319      	movs	r3, #25
 800f7ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f7ee:	2340      	movs	r3, #64	; 0x40
 800f7f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f7f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f7fc:	f107 0308 	add.w	r3, r7, #8
 800f800:	4619      	mov	r1, r3
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f7ff feec 	bl	800f5e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f808:	f241 3288 	movw	r2, #5000	; 0x1388
 800f80c:	2119      	movs	r1, #25
 800f80e:	6878      	ldr	r0, [r7, #4]
 800f810:	f000 f992 	bl	800fb38 <SDMMC_GetCmdResp1>
 800f814:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f816:	69fb      	ldr	r3, [r7, #28]
}
 800f818:	4618      	mov	r0, r3
 800f81a:	3720      	adds	r7, #32
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}

0800f820 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b088      	sub	sp, #32
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f828:	2300      	movs	r3, #0
 800f82a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f82c:	230c      	movs	r3, #12
 800f82e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f830:	2340      	movs	r3, #64	; 0x40
 800f832:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f834:	2300      	movs	r3, #0
 800f836:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f838:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f83c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f83e:	f107 0308 	add.w	r3, r7, #8
 800f842:	4619      	mov	r1, r3
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f7ff fecb 	bl	800f5e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800f84a:	4a05      	ldr	r2, [pc, #20]	; (800f860 <SDMMC_CmdStopTransfer+0x40>)
 800f84c:	210c      	movs	r1, #12
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f000 f972 	bl	800fb38 <SDMMC_GetCmdResp1>
 800f854:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f856:	69fb      	ldr	r3, [r7, #28]
}
 800f858:	4618      	mov	r0, r3
 800f85a:	3720      	adds	r7, #32
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}
 800f860:	05f5e100 	.word	0x05f5e100

0800f864 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b08a      	sub	sp, #40	; 0x28
 800f868:	af00      	add	r7, sp, #0
 800f86a:	60f8      	str	r0, [r7, #12]
 800f86c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f874:	2307      	movs	r3, #7
 800f876:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f878:	2340      	movs	r3, #64	; 0x40
 800f87a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f87c:	2300      	movs	r3, #0
 800f87e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f884:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f886:	f107 0310 	add.w	r3, r7, #16
 800f88a:	4619      	mov	r1, r3
 800f88c:	68f8      	ldr	r0, [r7, #12]
 800f88e:	f7ff fea7 	bl	800f5e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800f892:	f241 3288 	movw	r2, #5000	; 0x1388
 800f896:	2107      	movs	r1, #7
 800f898:	68f8      	ldr	r0, [r7, #12]
 800f89a:	f000 f94d 	bl	800fb38 <SDMMC_GetCmdResp1>
 800f89e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800f8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	3728      	adds	r7, #40	; 0x28
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}

0800f8aa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800f8aa:	b580      	push	{r7, lr}
 800f8ac:	b088      	sub	sp, #32
 800f8ae:	af00      	add	r7, sp, #0
 800f8b0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f8be:	2300      	movs	r3, #0
 800f8c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f8c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f8c8:	f107 0308 	add.w	r3, r7, #8
 800f8cc:	4619      	mov	r1, r3
 800f8ce:	6878      	ldr	r0, [r7, #4]
 800f8d0:	f7ff fe86 	bl	800f5e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f000 fb67 	bl	800ffa8 <SDMMC_GetCmdError>
 800f8da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f8dc:	69fb      	ldr	r3, [r7, #28]
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	3720      	adds	r7, #32
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	bd80      	pop	{r7, pc}

0800f8e6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800f8e6:	b580      	push	{r7, lr}
 800f8e8:	b088      	sub	sp, #32
 800f8ea:	af00      	add	r7, sp, #0
 800f8ec:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f8ee:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800f8f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f8f4:	2308      	movs	r3, #8
 800f8f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f8f8:	2340      	movs	r3, #64	; 0x40
 800f8fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f900:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f904:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f906:	f107 0308 	add.w	r3, r7, #8
 800f90a:	4619      	mov	r1, r3
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f7ff fe67 	bl	800f5e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f000 fafa 	bl	800ff0c <SDMMC_GetCmdResp7>
 800f918:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f91a:	69fb      	ldr	r3, [r7, #28]
}
 800f91c:	4618      	mov	r0, r3
 800f91e:	3720      	adds	r7, #32
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}

0800f924 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b088      	sub	sp, #32
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
 800f92c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f932:	2337      	movs	r3, #55	; 0x37
 800f934:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f936:	2340      	movs	r3, #64	; 0x40
 800f938:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f93a:	2300      	movs	r3, #0
 800f93c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f93e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f942:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f944:	f107 0308 	add.w	r3, r7, #8
 800f948:	4619      	mov	r1, r3
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f7ff fe48 	bl	800f5e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800f950:	f241 3288 	movw	r2, #5000	; 0x1388
 800f954:	2137      	movs	r1, #55	; 0x37
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f000 f8ee 	bl	800fb38 <SDMMC_GetCmdResp1>
 800f95c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f95e:	69fb      	ldr	r3, [r7, #28]
}
 800f960:	4618      	mov	r0, r3
 800f962:	3720      	adds	r7, #32
 800f964:	46bd      	mov	sp, r7
 800f966:	bd80      	pop	{r7, pc}

0800f968 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b088      	sub	sp, #32
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
 800f970:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800f972:	683a      	ldr	r2, [r7, #0]
 800f974:	4b0d      	ldr	r3, [pc, #52]	; (800f9ac <SDMMC_CmdAppOperCommand+0x44>)
 800f976:	4313      	orrs	r3, r2
 800f978:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f97a:	2329      	movs	r3, #41	; 0x29
 800f97c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f97e:	2340      	movs	r3, #64	; 0x40
 800f980:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f982:	2300      	movs	r3, #0
 800f984:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f98a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f98c:	f107 0308 	add.w	r3, r7, #8
 800f990:	4619      	mov	r1, r3
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f7ff fe24 	bl	800f5e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	f000 fa03 	bl	800fda4 <SDMMC_GetCmdResp3>
 800f99e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f9a0:	69fb      	ldr	r3, [r7, #28]
}
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	3720      	adds	r7, #32
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}
 800f9aa:	bf00      	nop
 800f9ac:	80100000 	.word	0x80100000

0800f9b0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b088      	sub	sp, #32
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
 800f9b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800f9be:	2306      	movs	r3, #6
 800f9c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f9c2:	2340      	movs	r3, #64	; 0x40
 800f9c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f9ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f9d0:	f107 0308 	add.w	r3, r7, #8
 800f9d4:	4619      	mov	r1, r3
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f7ff fe02 	bl	800f5e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800f9dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800f9e0:	2106      	movs	r1, #6
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	f000 f8a8 	bl	800fb38 <SDMMC_GetCmdResp1>
 800f9e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f9ea:	69fb      	ldr	r3, [r7, #28]
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3720      	adds	r7, #32
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}

0800f9f4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b088      	sub	sp, #32
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800fa00:	2333      	movs	r3, #51	; 0x33
 800fa02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fa04:	2340      	movs	r3, #64	; 0x40
 800fa06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fa0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fa12:	f107 0308 	add.w	r3, r7, #8
 800fa16:	4619      	mov	r1, r3
 800fa18:	6878      	ldr	r0, [r7, #4]
 800fa1a:	f7ff fde1 	bl	800f5e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800fa1e:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa22:	2133      	movs	r1, #51	; 0x33
 800fa24:	6878      	ldr	r0, [r7, #4]
 800fa26:	f000 f887 	bl	800fb38 <SDMMC_GetCmdResp1>
 800fa2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa2c:	69fb      	ldr	r3, [r7, #28]
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	3720      	adds	r7, #32
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}

0800fa36 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800fa36:	b580      	push	{r7, lr}
 800fa38:	b088      	sub	sp, #32
 800fa3a:	af00      	add	r7, sp, #0
 800fa3c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800fa42:	2302      	movs	r3, #2
 800fa44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800fa46:	23c0      	movs	r3, #192	; 0xc0
 800fa48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fa4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fa54:	f107 0308 	add.w	r3, r7, #8
 800fa58:	4619      	mov	r1, r3
 800fa5a:	6878      	ldr	r0, [r7, #4]
 800fa5c:	f7ff fdc0 	bl	800f5e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f000 f957 	bl	800fd14 <SDMMC_GetCmdResp2>
 800fa66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa68:	69fb      	ldr	r3, [r7, #28]
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	3720      	adds	r7, #32
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}

0800fa72 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fa72:	b580      	push	{r7, lr}
 800fa74:	b088      	sub	sp, #32
 800fa76:	af00      	add	r7, sp, #0
 800fa78:	6078      	str	r0, [r7, #4]
 800fa7a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800fa80:	2309      	movs	r3, #9
 800fa82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800fa84:	23c0      	movs	r3, #192	; 0xc0
 800fa86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fa88:	2300      	movs	r3, #0
 800fa8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fa8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fa92:	f107 0308 	add.w	r3, r7, #8
 800fa96:	4619      	mov	r1, r3
 800fa98:	6878      	ldr	r0, [r7, #4]
 800fa9a:	f7ff fda1 	bl	800f5e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800fa9e:	6878      	ldr	r0, [r7, #4]
 800faa0:	f000 f938 	bl	800fd14 <SDMMC_GetCmdResp2>
 800faa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800faa6:	69fb      	ldr	r3, [r7, #28]
}
 800faa8:	4618      	mov	r0, r3
 800faaa:	3720      	adds	r7, #32
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}

0800fab0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b088      	sub	sp, #32
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
 800fab8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800faba:	2300      	movs	r3, #0
 800fabc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800fabe:	2303      	movs	r3, #3
 800fac0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fac2:	2340      	movs	r3, #64	; 0x40
 800fac4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fac6:	2300      	movs	r3, #0
 800fac8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800faca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800face:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fad0:	f107 0308 	add.w	r3, r7, #8
 800fad4:	4619      	mov	r1, r3
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f7ff fd82 	bl	800f5e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800fadc:	683a      	ldr	r2, [r7, #0]
 800fade:	2103      	movs	r1, #3
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f000 f99d 	bl	800fe20 <SDMMC_GetCmdResp6>
 800fae6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fae8:	69fb      	ldr	r3, [r7, #28]
}
 800faea:	4618      	mov	r0, r3
 800faec:	3720      	adds	r7, #32
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}

0800faf2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800faf2:	b580      	push	{r7, lr}
 800faf4:	b088      	sub	sp, #32
 800faf6:	af00      	add	r7, sp, #0
 800faf8:	6078      	str	r0, [r7, #4]
 800fafa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800fb00:	230d      	movs	r3, #13
 800fb02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fb04:	2340      	movs	r3, #64	; 0x40
 800fb06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fb08:	2300      	movs	r3, #0
 800fb0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fb0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fb12:	f107 0308 	add.w	r3, r7, #8
 800fb16:	4619      	mov	r1, r3
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f7ff fd61 	bl	800f5e0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800fb1e:	f241 3288 	movw	r2, #5000	; 0x1388
 800fb22:	210d      	movs	r1, #13
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f000 f807 	bl	800fb38 <SDMMC_GetCmdResp1>
 800fb2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb2c:	69fb      	ldr	r3, [r7, #28]
}
 800fb2e:	4618      	mov	r0, r3
 800fb30:	3720      	adds	r7, #32
 800fb32:	46bd      	mov	sp, r7
 800fb34:	bd80      	pop	{r7, pc}
	...

0800fb38 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b088      	sub	sp, #32
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	60f8      	str	r0, [r7, #12]
 800fb40:	460b      	mov	r3, r1
 800fb42:	607a      	str	r2, [r7, #4]
 800fb44:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800fb46:	4b70      	ldr	r3, [pc, #448]	; (800fd08 <SDMMC_GetCmdResp1+0x1d0>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	4a70      	ldr	r2, [pc, #448]	; (800fd0c <SDMMC_GetCmdResp1+0x1d4>)
 800fb4c:	fba2 2303 	umull	r2, r3, r2, r3
 800fb50:	0a5a      	lsrs	r2, r3, #9
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	fb02 f303 	mul.w	r3, r2, r3
 800fb58:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800fb5a:	69fb      	ldr	r3, [r7, #28]
 800fb5c:	1e5a      	subs	r2, r3, #1
 800fb5e:	61fa      	str	r2, [r7, #28]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d102      	bne.n	800fb6a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fb64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fb68:	e0c9      	b.n	800fcfe <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb6e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fb70:	69bb      	ldr	r3, [r7, #24]
 800fb72:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d0ef      	beq.n	800fb5a <SDMMC_GetCmdResp1+0x22>
 800fb7a:	69bb      	ldr	r3, [r7, #24]
 800fb7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d1ea      	bne.n	800fb5a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb88:	f003 0304 	and.w	r3, r3, #4
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d004      	beq.n	800fb9a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	2204      	movs	r2, #4
 800fb94:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fb96:	2304      	movs	r3, #4
 800fb98:	e0b1      	b.n	800fcfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb9e:	f003 0301 	and.w	r3, r3, #1
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d004      	beq.n	800fbb0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	2201      	movs	r2, #1
 800fbaa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fbac:	2301      	movs	r3, #1
 800fbae:	e0a6      	b.n	800fcfe <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	22c5      	movs	r2, #197	; 0xc5
 800fbb4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800fbb6:	68f8      	ldr	r0, [r7, #12]
 800fbb8:	f7ff fd3c 	bl	800f634 <SDMMC_GetCommandResponse>
 800fbbc:	4603      	mov	r3, r0
 800fbbe:	461a      	mov	r2, r3
 800fbc0:	7afb      	ldrb	r3, [r7, #11]
 800fbc2:	4293      	cmp	r3, r2
 800fbc4:	d001      	beq.n	800fbca <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	e099      	b.n	800fcfe <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800fbca:	2100      	movs	r1, #0
 800fbcc:	68f8      	ldr	r0, [r7, #12]
 800fbce:	f7ff fd3e 	bl	800f64e <SDMMC_GetResponse>
 800fbd2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800fbd4:	697a      	ldr	r2, [r7, #20]
 800fbd6:	4b4e      	ldr	r3, [pc, #312]	; (800fd10 <SDMMC_GetCmdResp1+0x1d8>)
 800fbd8:	4013      	ands	r3, r2
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d101      	bne.n	800fbe2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800fbde:	2300      	movs	r3, #0
 800fbe0:	e08d      	b.n	800fcfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	da02      	bge.n	800fbee <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800fbe8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fbec:	e087      	b.n	800fcfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800fbee:	697b      	ldr	r3, [r7, #20]
 800fbf0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d001      	beq.n	800fbfc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800fbf8:	2340      	movs	r3, #64	; 0x40
 800fbfa:	e080      	b.n	800fcfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800fbfc:	697b      	ldr	r3, [r7, #20]
 800fbfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d001      	beq.n	800fc0a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800fc06:	2380      	movs	r3, #128	; 0x80
 800fc08:	e079      	b.n	800fcfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d002      	beq.n	800fc1a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800fc14:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fc18:	e071      	b.n	800fcfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d002      	beq.n	800fc2a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800fc24:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fc28:	e069      	b.n	800fcfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d002      	beq.n	800fc3a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800fc34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc38:	e061      	b.n	800fcfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d002      	beq.n	800fc4a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800fc44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fc48:	e059      	b.n	800fcfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800fc4a:	697b      	ldr	r3, [r7, #20]
 800fc4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d002      	beq.n	800fc5a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fc54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fc58:	e051      	b.n	800fcfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d002      	beq.n	800fc6a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fc64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fc68:	e049      	b.n	800fcfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800fc6a:	697b      	ldr	r3, [r7, #20]
 800fc6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d002      	beq.n	800fc7a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800fc74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fc78:	e041      	b.n	800fcfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d002      	beq.n	800fc8a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800fc84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fc88:	e039      	b.n	800fcfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800fc8a:	697b      	ldr	r3, [r7, #20]
 800fc8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d002      	beq.n	800fc9a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800fc94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800fc98:	e031      	b.n	800fcfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800fc9a:	697b      	ldr	r3, [r7, #20]
 800fc9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d002      	beq.n	800fcaa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800fca4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fca8:	e029      	b.n	800fcfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800fcaa:	697b      	ldr	r3, [r7, #20]
 800fcac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d002      	beq.n	800fcba <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800fcb4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fcb8:	e021      	b.n	800fcfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d002      	beq.n	800fcca <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800fcc4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800fcc8:	e019      	b.n	800fcfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800fcca:	697b      	ldr	r3, [r7, #20]
 800fccc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d002      	beq.n	800fcda <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800fcd4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800fcd8:	e011      	b.n	800fcfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800fcda:	697b      	ldr	r3, [r7, #20]
 800fcdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d002      	beq.n	800fcea <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800fce4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800fce8:	e009      	b.n	800fcfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	f003 0308 	and.w	r3, r3, #8
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d002      	beq.n	800fcfa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800fcf4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fcf8:	e001      	b.n	800fcfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fcfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800fcfe:	4618      	mov	r0, r3
 800fd00:	3720      	adds	r7, #32
 800fd02:	46bd      	mov	sp, r7
 800fd04:	bd80      	pop	{r7, pc}
 800fd06:	bf00      	nop
 800fd08:	200004b0 	.word	0x200004b0
 800fd0c:	10624dd3 	.word	0x10624dd3
 800fd10:	fdffe008 	.word	0xfdffe008

0800fd14 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800fd14:	b480      	push	{r7}
 800fd16:	b085      	sub	sp, #20
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fd1c:	4b1f      	ldr	r3, [pc, #124]	; (800fd9c <SDMMC_GetCmdResp2+0x88>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	4a1f      	ldr	r2, [pc, #124]	; (800fda0 <SDMMC_GetCmdResp2+0x8c>)
 800fd22:	fba2 2303 	umull	r2, r3, r2, r3
 800fd26:	0a5b      	lsrs	r3, r3, #9
 800fd28:	f241 3288 	movw	r2, #5000	; 0x1388
 800fd2c:	fb02 f303 	mul.w	r3, r2, r3
 800fd30:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	1e5a      	subs	r2, r3, #1
 800fd36:	60fa      	str	r2, [r7, #12]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d102      	bne.n	800fd42 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fd3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fd40:	e026      	b.n	800fd90 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd46:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d0ef      	beq.n	800fd32 <SDMMC_GetCmdResp2+0x1e>
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d1ea      	bne.n	800fd32 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd60:	f003 0304 	and.w	r3, r3, #4
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d004      	beq.n	800fd72 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2204      	movs	r2, #4
 800fd6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fd6e:	2304      	movs	r3, #4
 800fd70:	e00e      	b.n	800fd90 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd76:	f003 0301 	and.w	r3, r3, #1
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d004      	beq.n	800fd88 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	2201      	movs	r2, #1
 800fd82:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fd84:	2301      	movs	r3, #1
 800fd86:	e003      	b.n	800fd90 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	22c5      	movs	r2, #197	; 0xc5
 800fd8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800fd8e:	2300      	movs	r3, #0
}
 800fd90:	4618      	mov	r0, r3
 800fd92:	3714      	adds	r7, #20
 800fd94:	46bd      	mov	sp, r7
 800fd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9a:	4770      	bx	lr
 800fd9c:	200004b0 	.word	0x200004b0
 800fda0:	10624dd3 	.word	0x10624dd3

0800fda4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800fda4:	b480      	push	{r7}
 800fda6:	b085      	sub	sp, #20
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fdac:	4b1a      	ldr	r3, [pc, #104]	; (800fe18 <SDMMC_GetCmdResp3+0x74>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	4a1a      	ldr	r2, [pc, #104]	; (800fe1c <SDMMC_GetCmdResp3+0x78>)
 800fdb2:	fba2 2303 	umull	r2, r3, r2, r3
 800fdb6:	0a5b      	lsrs	r3, r3, #9
 800fdb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800fdbc:	fb02 f303 	mul.w	r3, r2, r3
 800fdc0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	1e5a      	subs	r2, r3, #1
 800fdc6:	60fa      	str	r2, [r7, #12]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d102      	bne.n	800fdd2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fdcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fdd0:	e01b      	b.n	800fe0a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdd6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d0ef      	beq.n	800fdc2 <SDMMC_GetCmdResp3+0x1e>
 800fde2:	68bb      	ldr	r3, [r7, #8]
 800fde4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d1ea      	bne.n	800fdc2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdf0:	f003 0304 	and.w	r3, r3, #4
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d004      	beq.n	800fe02 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2204      	movs	r2, #4
 800fdfc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fdfe:	2304      	movs	r3, #4
 800fe00:	e003      	b.n	800fe0a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	22c5      	movs	r2, #197	; 0xc5
 800fe06:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800fe08:	2300      	movs	r3, #0
}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	3714      	adds	r7, #20
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe14:	4770      	bx	lr
 800fe16:	bf00      	nop
 800fe18:	200004b0 	.word	0x200004b0
 800fe1c:	10624dd3 	.word	0x10624dd3

0800fe20 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b088      	sub	sp, #32
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	60f8      	str	r0, [r7, #12]
 800fe28:	460b      	mov	r3, r1
 800fe2a:	607a      	str	r2, [r7, #4]
 800fe2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fe2e:	4b35      	ldr	r3, [pc, #212]	; (800ff04 <SDMMC_GetCmdResp6+0xe4>)
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	4a35      	ldr	r2, [pc, #212]	; (800ff08 <SDMMC_GetCmdResp6+0xe8>)
 800fe34:	fba2 2303 	umull	r2, r3, r2, r3
 800fe38:	0a5b      	lsrs	r3, r3, #9
 800fe3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800fe3e:	fb02 f303 	mul.w	r3, r2, r3
 800fe42:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800fe44:	69fb      	ldr	r3, [r7, #28]
 800fe46:	1e5a      	subs	r2, r3, #1
 800fe48:	61fa      	str	r2, [r7, #28]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d102      	bne.n	800fe54 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fe4e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fe52:	e052      	b.n	800fefa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe58:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fe5a:	69bb      	ldr	r3, [r7, #24]
 800fe5c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d0ef      	beq.n	800fe44 <SDMMC_GetCmdResp6+0x24>
 800fe64:	69bb      	ldr	r3, [r7, #24]
 800fe66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d1ea      	bne.n	800fe44 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe72:	f003 0304 	and.w	r3, r3, #4
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d004      	beq.n	800fe84 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	2204      	movs	r2, #4
 800fe7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fe80:	2304      	movs	r3, #4
 800fe82:	e03a      	b.n	800fefa <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe88:	f003 0301 	and.w	r3, r3, #1
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d004      	beq.n	800fe9a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	2201      	movs	r2, #1
 800fe94:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fe96:	2301      	movs	r3, #1
 800fe98:	e02f      	b.n	800fefa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800fe9a:	68f8      	ldr	r0, [r7, #12]
 800fe9c:	f7ff fbca 	bl	800f634 <SDMMC_GetCommandResponse>
 800fea0:	4603      	mov	r3, r0
 800fea2:	461a      	mov	r2, r3
 800fea4:	7afb      	ldrb	r3, [r7, #11]
 800fea6:	4293      	cmp	r3, r2
 800fea8:	d001      	beq.n	800feae <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800feaa:	2301      	movs	r3, #1
 800feac:	e025      	b.n	800fefa <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	22c5      	movs	r2, #197	; 0xc5
 800feb2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800feb4:	2100      	movs	r1, #0
 800feb6:	68f8      	ldr	r0, [r7, #12]
 800feb8:	f7ff fbc9 	bl	800f64e <SDMMC_GetResponse>
 800febc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800febe:	697b      	ldr	r3, [r7, #20]
 800fec0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d106      	bne.n	800fed6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800fec8:	697b      	ldr	r3, [r7, #20]
 800feca:	0c1b      	lsrs	r3, r3, #16
 800fecc:	b29a      	uxth	r2, r3
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800fed2:	2300      	movs	r3, #0
 800fed4:	e011      	b.n	800fefa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800fed6:	697b      	ldr	r3, [r7, #20]
 800fed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d002      	beq.n	800fee6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fee0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fee4:	e009      	b.n	800fefa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800fee6:	697b      	ldr	r3, [r7, #20]
 800fee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800feec:	2b00      	cmp	r3, #0
 800feee:	d002      	beq.n	800fef6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fef4:	e001      	b.n	800fefa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fef6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800fefa:	4618      	mov	r0, r3
 800fefc:	3720      	adds	r7, #32
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bd80      	pop	{r7, pc}
 800ff02:	bf00      	nop
 800ff04:	200004b0 	.word	0x200004b0
 800ff08:	10624dd3 	.word	0x10624dd3

0800ff0c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ff0c:	b480      	push	{r7}
 800ff0e:	b085      	sub	sp, #20
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ff14:	4b22      	ldr	r3, [pc, #136]	; (800ffa0 <SDMMC_GetCmdResp7+0x94>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	4a22      	ldr	r2, [pc, #136]	; (800ffa4 <SDMMC_GetCmdResp7+0x98>)
 800ff1a:	fba2 2303 	umull	r2, r3, r2, r3
 800ff1e:	0a5b      	lsrs	r3, r3, #9
 800ff20:	f241 3288 	movw	r2, #5000	; 0x1388
 800ff24:	fb02 f303 	mul.w	r3, r2, r3
 800ff28:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	1e5a      	subs	r2, r3, #1
 800ff2e:	60fa      	str	r2, [r7, #12]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d102      	bne.n	800ff3a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ff34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ff38:	e02c      	b.n	800ff94 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff3e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ff40:	68bb      	ldr	r3, [r7, #8]
 800ff42:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d0ef      	beq.n	800ff2a <SDMMC_GetCmdResp7+0x1e>
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d1ea      	bne.n	800ff2a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff58:	f003 0304 	and.w	r3, r3, #4
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d004      	beq.n	800ff6a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2204      	movs	r2, #4
 800ff64:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ff66:	2304      	movs	r3, #4
 800ff68:	e014      	b.n	800ff94 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff6e:	f003 0301 	and.w	r3, r3, #1
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d004      	beq.n	800ff80 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	2201      	movs	r2, #1
 800ff7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ff7c:	2301      	movs	r3, #1
 800ff7e:	e009      	b.n	800ff94 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d002      	beq.n	800ff92 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	2240      	movs	r2, #64	; 0x40
 800ff90:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ff92:	2300      	movs	r3, #0
  
}
 800ff94:	4618      	mov	r0, r3
 800ff96:	3714      	adds	r7, #20
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9e:	4770      	bx	lr
 800ffa0:	200004b0 	.word	0x200004b0
 800ffa4:	10624dd3 	.word	0x10624dd3

0800ffa8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ffa8:	b480      	push	{r7}
 800ffaa:	b085      	sub	sp, #20
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ffb0:	4b11      	ldr	r3, [pc, #68]	; (800fff8 <SDMMC_GetCmdError+0x50>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	4a11      	ldr	r2, [pc, #68]	; (800fffc <SDMMC_GetCmdError+0x54>)
 800ffb6:	fba2 2303 	umull	r2, r3, r2, r3
 800ffba:	0a5b      	lsrs	r3, r3, #9
 800ffbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ffc0:	fb02 f303 	mul.w	r3, r2, r3
 800ffc4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	1e5a      	subs	r2, r3, #1
 800ffca:	60fa      	str	r2, [r7, #12]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d102      	bne.n	800ffd6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ffd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ffd4:	e009      	b.n	800ffea <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d0f1      	beq.n	800ffc6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	22c5      	movs	r2, #197	; 0xc5
 800ffe6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ffe8:	2300      	movs	r3, #0
}
 800ffea:	4618      	mov	r0, r3
 800ffec:	3714      	adds	r7, #20
 800ffee:	46bd      	mov	sp, r7
 800fff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff4:	4770      	bx	lr
 800fff6:	bf00      	nop
 800fff8:	200004b0 	.word	0x200004b0
 800fffc:	10624dd3 	.word	0x10624dd3

08010000 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010004:	4904      	ldr	r1, [pc, #16]	; (8010018 <MX_FATFS_Init+0x18>)
 8010006:	4805      	ldr	r0, [pc, #20]	; (801001c <MX_FATFS_Init+0x1c>)
 8010008:	f002 fd04 	bl	8012a14 <FATFS_LinkDriver>
 801000c:	4603      	mov	r3, r0
 801000e:	461a      	mov	r2, r3
 8010010:	4b03      	ldr	r3, [pc, #12]	; (8010020 <MX_FATFS_Init+0x20>)
 8010012:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010014:	bf00      	nop
 8010016:	bd80      	pop	{r7, pc}
 8010018:	20006590 	.word	0x20006590
 801001c:	08019470 	.word	0x08019470
 8010020:	2000658c 	.word	0x2000658c

08010024 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010024:	b480      	push	{r7}
 8010026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010028:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801002a:	4618      	mov	r0, r3
 801002c:	46bd      	mov	sp, r7
 801002e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010032:	4770      	bx	lr

08010034 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b082      	sub	sp, #8
 8010038:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801003a:	2300      	movs	r3, #0
 801003c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801003e:	f000 f896 	bl	801016e <BSP_SD_IsDetected>
 8010042:	4603      	mov	r3, r0
 8010044:	2b01      	cmp	r3, #1
 8010046:	d001      	beq.n	801004c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010048:	2302      	movs	r3, #2
 801004a:	e012      	b.n	8010072 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 801004c:	480b      	ldr	r0, [pc, #44]	; (801007c <BSP_SD_Init+0x48>)
 801004e:	f7fb fa2d 	bl	800b4ac <HAL_SD_Init>
 8010052:	4603      	mov	r3, r0
 8010054:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010056:	79fb      	ldrb	r3, [r7, #7]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d109      	bne.n	8010070 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801005c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010060:	4806      	ldr	r0, [pc, #24]	; (801007c <BSP_SD_Init+0x48>)
 8010062:	f7fb fff3 	bl	800c04c <HAL_SD_ConfigWideBusOperation>
 8010066:	4603      	mov	r3, r0
 8010068:	2b00      	cmp	r3, #0
 801006a:	d001      	beq.n	8010070 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801006c:	2301      	movs	r3, #1
 801006e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010070:	79fb      	ldrb	r3, [r7, #7]
}
 8010072:	4618      	mov	r0, r3
 8010074:	3708      	adds	r7, #8
 8010076:	46bd      	mov	sp, r7
 8010078:	bd80      	pop	{r7, pc}
 801007a:	bf00      	nop
 801007c:	200021bc 	.word	0x200021bc

08010080 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b086      	sub	sp, #24
 8010084:	af00      	add	r7, sp, #0
 8010086:	60f8      	str	r0, [r7, #12]
 8010088:	60b9      	str	r1, [r7, #8]
 801008a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801008c:	2300      	movs	r3, #0
 801008e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	68ba      	ldr	r2, [r7, #8]
 8010094:	68f9      	ldr	r1, [r7, #12]
 8010096:	4806      	ldr	r0, [pc, #24]	; (80100b0 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010098:	f7fb fac0 	bl	800b61c <HAL_SD_ReadBlocks_DMA>
 801009c:	4603      	mov	r3, r0
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d001      	beq.n	80100a6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80100a2:	2301      	movs	r3, #1
 80100a4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80100a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80100a8:	4618      	mov	r0, r3
 80100aa:	3718      	adds	r7, #24
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bd80      	pop	{r7, pc}
 80100b0:	200021bc 	.word	0x200021bc

080100b4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b086      	sub	sp, #24
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	60f8      	str	r0, [r7, #12]
 80100bc:	60b9      	str	r1, [r7, #8]
 80100be:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80100c0:	2300      	movs	r3, #0
 80100c2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	68ba      	ldr	r2, [r7, #8]
 80100c8:	68f9      	ldr	r1, [r7, #12]
 80100ca:	4806      	ldr	r0, [pc, #24]	; (80100e4 <BSP_SD_WriteBlocks_DMA+0x30>)
 80100cc:	f7fb fb88 	bl	800b7e0 <HAL_SD_WriteBlocks_DMA>
 80100d0:	4603      	mov	r3, r0
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d001      	beq.n	80100da <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80100d6:	2301      	movs	r3, #1
 80100d8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80100da:	7dfb      	ldrb	r3, [r7, #23]
}
 80100dc:	4618      	mov	r0, r3
 80100de:	3718      	adds	r7, #24
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}
 80100e4:	200021bc 	.word	0x200021bc

080100e8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80100ec:	4805      	ldr	r0, [pc, #20]	; (8010104 <BSP_SD_GetCardState+0x1c>)
 80100ee:	f7fc f847 	bl	800c180 <HAL_SD_GetCardState>
 80100f2:	4603      	mov	r3, r0
 80100f4:	2b04      	cmp	r3, #4
 80100f6:	bf14      	ite	ne
 80100f8:	2301      	movne	r3, #1
 80100fa:	2300      	moveq	r3, #0
 80100fc:	b2db      	uxtb	r3, r3
}
 80100fe:	4618      	mov	r0, r3
 8010100:	bd80      	pop	{r7, pc}
 8010102:	bf00      	nop
 8010104:	200021bc 	.word	0x200021bc

08010108 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b082      	sub	sp, #8
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8010110:	6879      	ldr	r1, [r7, #4]
 8010112:	4803      	ldr	r0, [pc, #12]	; (8010120 <BSP_SD_GetCardInfo+0x18>)
 8010114:	f7fb ff6e 	bl	800bff4 <HAL_SD_GetCardInfo>
}
 8010118:	bf00      	nop
 801011a:	3708      	adds	r7, #8
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}
 8010120:	200021bc 	.word	0x200021bc

08010124 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b082      	sub	sp, #8
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 801012c:	f000 f818 	bl	8010160 <BSP_SD_AbortCallback>
}
 8010130:	bf00      	nop
 8010132:	3708      	adds	r7, #8
 8010134:	46bd      	mov	sp, r7
 8010136:	bd80      	pop	{r7, pc}

08010138 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b082      	sub	sp, #8
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010140:	f000 f98c 	bl	801045c <BSP_SD_WriteCpltCallback>
}
 8010144:	bf00      	nop
 8010146:	3708      	adds	r7, #8
 8010148:	46bd      	mov	sp, r7
 801014a:	bd80      	pop	{r7, pc}

0801014c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b082      	sub	sp, #8
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010154:	f000 f98e 	bl	8010474 <BSP_SD_ReadCpltCallback>
}
 8010158:	bf00      	nop
 801015a:	3708      	adds	r7, #8
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}

08010160 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8010160:	b480      	push	{r7}
 8010162:	af00      	add	r7, sp, #0

}
 8010164:	bf00      	nop
 8010166:	46bd      	mov	sp, r7
 8010168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016c:	4770      	bx	lr

0801016e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801016e:	b480      	push	{r7}
 8010170:	b083      	sub	sp, #12
 8010172:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010174:	2301      	movs	r3, #1
 8010176:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8010178:	79fb      	ldrb	r3, [r7, #7]
 801017a:	b2db      	uxtb	r3, r3
}
 801017c:	4618      	mov	r0, r3
 801017e:	370c      	adds	r7, #12
 8010180:	46bd      	mov	sp, r7
 8010182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010186:	4770      	bx	lr

08010188 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b084      	sub	sp, #16
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010190:	f7f6 fb6e 	bl	8006870 <HAL_GetTick>
 8010194:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010196:	e006      	b.n	80101a6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010198:	f7ff ffa6 	bl	80100e8 <BSP_SD_GetCardState>
 801019c:	4603      	mov	r3, r0
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d101      	bne.n	80101a6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80101a2:	2300      	movs	r3, #0
 80101a4:	e009      	b.n	80101ba <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80101a6:	f7f6 fb63 	bl	8006870 <HAL_GetTick>
 80101aa:	4602      	mov	r2, r0
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	1ad3      	subs	r3, r2, r3
 80101b0:	687a      	ldr	r2, [r7, #4]
 80101b2:	429a      	cmp	r2, r3
 80101b4:	d8f0      	bhi.n	8010198 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80101b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80101ba:	4618      	mov	r0, r3
 80101bc:	3710      	adds	r7, #16
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}
	...

080101c4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b082      	sub	sp, #8
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	4603      	mov	r3, r0
 80101cc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80101ce:	4b0b      	ldr	r3, [pc, #44]	; (80101fc <SD_CheckStatus+0x38>)
 80101d0:	2201      	movs	r2, #1
 80101d2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80101d4:	f7ff ff88 	bl	80100e8 <BSP_SD_GetCardState>
 80101d8:	4603      	mov	r3, r0
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d107      	bne.n	80101ee <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80101de:	4b07      	ldr	r3, [pc, #28]	; (80101fc <SD_CheckStatus+0x38>)
 80101e0:	781b      	ldrb	r3, [r3, #0]
 80101e2:	b2db      	uxtb	r3, r3
 80101e4:	f023 0301 	bic.w	r3, r3, #1
 80101e8:	b2da      	uxtb	r2, r3
 80101ea:	4b04      	ldr	r3, [pc, #16]	; (80101fc <SD_CheckStatus+0x38>)
 80101ec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80101ee:	4b03      	ldr	r3, [pc, #12]	; (80101fc <SD_CheckStatus+0x38>)
 80101f0:	781b      	ldrb	r3, [r3, #0]
 80101f2:	b2db      	uxtb	r3, r3
}
 80101f4:	4618      	mov	r0, r3
 80101f6:	3708      	adds	r7, #8
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bd80      	pop	{r7, pc}
 80101fc:	200004b9 	.word	0x200004b9

08010200 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b082      	sub	sp, #8
 8010204:	af00      	add	r7, sp, #0
 8010206:	4603      	mov	r3, r0
 8010208:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801020a:	f7ff ff13 	bl	8010034 <BSP_SD_Init>
 801020e:	4603      	mov	r3, r0
 8010210:	2b00      	cmp	r3, #0
 8010212:	d107      	bne.n	8010224 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010214:	79fb      	ldrb	r3, [r7, #7]
 8010216:	4618      	mov	r0, r3
 8010218:	f7ff ffd4 	bl	80101c4 <SD_CheckStatus>
 801021c:	4603      	mov	r3, r0
 801021e:	461a      	mov	r2, r3
 8010220:	4b04      	ldr	r3, [pc, #16]	; (8010234 <SD_initialize+0x34>)
 8010222:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010224:	4b03      	ldr	r3, [pc, #12]	; (8010234 <SD_initialize+0x34>)
 8010226:	781b      	ldrb	r3, [r3, #0]
 8010228:	b2db      	uxtb	r3, r3
}
 801022a:	4618      	mov	r0, r3
 801022c:	3708      	adds	r7, #8
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}
 8010232:	bf00      	nop
 8010234:	200004b9 	.word	0x200004b9

08010238 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
 801023e:	4603      	mov	r3, r0
 8010240:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010242:	79fb      	ldrb	r3, [r7, #7]
 8010244:	4618      	mov	r0, r3
 8010246:	f7ff ffbd 	bl	80101c4 <SD_CheckStatus>
 801024a:	4603      	mov	r3, r0
}
 801024c:	4618      	mov	r0, r3
 801024e:	3708      	adds	r7, #8
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}

08010254 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b086      	sub	sp, #24
 8010258:	af00      	add	r7, sp, #0
 801025a:	60b9      	str	r1, [r7, #8]
 801025c:	607a      	str	r2, [r7, #4]
 801025e:	603b      	str	r3, [r7, #0]
 8010260:	4603      	mov	r3, r0
 8010262:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010264:	2301      	movs	r3, #1
 8010266:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010268:	f247 5030 	movw	r0, #30000	; 0x7530
 801026c:	f7ff ff8c 	bl	8010188 <SD_CheckStatusWithTimeout>
 8010270:	4603      	mov	r3, r0
 8010272:	2b00      	cmp	r3, #0
 8010274:	da01      	bge.n	801027a <SD_read+0x26>
  {
    return res;
 8010276:	7dfb      	ldrb	r3, [r7, #23]
 8010278:	e03b      	b.n	80102f2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801027a:	683a      	ldr	r2, [r7, #0]
 801027c:	6879      	ldr	r1, [r7, #4]
 801027e:	68b8      	ldr	r0, [r7, #8]
 8010280:	f7ff fefe 	bl	8010080 <BSP_SD_ReadBlocks_DMA>
 8010284:	4603      	mov	r3, r0
 8010286:	2b00      	cmp	r3, #0
 8010288:	d132      	bne.n	80102f0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801028a:	4b1c      	ldr	r3, [pc, #112]	; (80102fc <SD_read+0xa8>)
 801028c:	2200      	movs	r2, #0
 801028e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010290:	f7f6 faee 	bl	8006870 <HAL_GetTick>
 8010294:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010296:	bf00      	nop
 8010298:	4b18      	ldr	r3, [pc, #96]	; (80102fc <SD_read+0xa8>)
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d108      	bne.n	80102b2 <SD_read+0x5e>
 80102a0:	f7f6 fae6 	bl	8006870 <HAL_GetTick>
 80102a4:	4602      	mov	r2, r0
 80102a6:	693b      	ldr	r3, [r7, #16]
 80102a8:	1ad3      	subs	r3, r2, r3
 80102aa:	f247 522f 	movw	r2, #29999	; 0x752f
 80102ae:	4293      	cmp	r3, r2
 80102b0:	d9f2      	bls.n	8010298 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80102b2:	4b12      	ldr	r3, [pc, #72]	; (80102fc <SD_read+0xa8>)
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d102      	bne.n	80102c0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80102ba:	2301      	movs	r3, #1
 80102bc:	75fb      	strb	r3, [r7, #23]
 80102be:	e017      	b.n	80102f0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80102c0:	4b0e      	ldr	r3, [pc, #56]	; (80102fc <SD_read+0xa8>)
 80102c2:	2200      	movs	r2, #0
 80102c4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80102c6:	f7f6 fad3 	bl	8006870 <HAL_GetTick>
 80102ca:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80102cc:	e007      	b.n	80102de <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80102ce:	f7ff ff0b 	bl	80100e8 <BSP_SD_GetCardState>
 80102d2:	4603      	mov	r3, r0
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d102      	bne.n	80102de <SD_read+0x8a>
          {
            res = RES_OK;
 80102d8:	2300      	movs	r3, #0
 80102da:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80102dc:	e008      	b.n	80102f0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80102de:	f7f6 fac7 	bl	8006870 <HAL_GetTick>
 80102e2:	4602      	mov	r2, r0
 80102e4:	693b      	ldr	r3, [r7, #16]
 80102e6:	1ad3      	subs	r3, r2, r3
 80102e8:	f247 522f 	movw	r2, #29999	; 0x752f
 80102ec:	4293      	cmp	r3, r2
 80102ee:	d9ee      	bls.n	80102ce <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80102f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80102f2:	4618      	mov	r0, r3
 80102f4:	3718      	adds	r7, #24
 80102f6:	46bd      	mov	sp, r7
 80102f8:	bd80      	pop	{r7, pc}
 80102fa:	bf00      	nop
 80102fc:	20006598 	.word	0x20006598

08010300 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b086      	sub	sp, #24
 8010304:	af00      	add	r7, sp, #0
 8010306:	60b9      	str	r1, [r7, #8]
 8010308:	607a      	str	r2, [r7, #4]
 801030a:	603b      	str	r3, [r7, #0]
 801030c:	4603      	mov	r3, r0
 801030e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010310:	2301      	movs	r3, #1
 8010312:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010314:	4b24      	ldr	r3, [pc, #144]	; (80103a8 <SD_write+0xa8>)
 8010316:	2200      	movs	r2, #0
 8010318:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801031a:	f247 5030 	movw	r0, #30000	; 0x7530
 801031e:	f7ff ff33 	bl	8010188 <SD_CheckStatusWithTimeout>
 8010322:	4603      	mov	r3, r0
 8010324:	2b00      	cmp	r3, #0
 8010326:	da01      	bge.n	801032c <SD_write+0x2c>
  {
    return res;
 8010328:	7dfb      	ldrb	r3, [r7, #23]
 801032a:	e038      	b.n	801039e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801032c:	683a      	ldr	r2, [r7, #0]
 801032e:	6879      	ldr	r1, [r7, #4]
 8010330:	68b8      	ldr	r0, [r7, #8]
 8010332:	f7ff febf 	bl	80100b4 <BSP_SD_WriteBlocks_DMA>
 8010336:	4603      	mov	r3, r0
 8010338:	2b00      	cmp	r3, #0
 801033a:	d12f      	bne.n	801039c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 801033c:	f7f6 fa98 	bl	8006870 <HAL_GetTick>
 8010340:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010342:	bf00      	nop
 8010344:	4b18      	ldr	r3, [pc, #96]	; (80103a8 <SD_write+0xa8>)
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d108      	bne.n	801035e <SD_write+0x5e>
 801034c:	f7f6 fa90 	bl	8006870 <HAL_GetTick>
 8010350:	4602      	mov	r2, r0
 8010352:	693b      	ldr	r3, [r7, #16]
 8010354:	1ad3      	subs	r3, r2, r3
 8010356:	f247 522f 	movw	r2, #29999	; 0x752f
 801035a:	4293      	cmp	r3, r2
 801035c:	d9f2      	bls.n	8010344 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801035e:	4b12      	ldr	r3, [pc, #72]	; (80103a8 <SD_write+0xa8>)
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d102      	bne.n	801036c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010366:	2301      	movs	r3, #1
 8010368:	75fb      	strb	r3, [r7, #23]
 801036a:	e017      	b.n	801039c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 801036c:	4b0e      	ldr	r3, [pc, #56]	; (80103a8 <SD_write+0xa8>)
 801036e:	2200      	movs	r2, #0
 8010370:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010372:	f7f6 fa7d 	bl	8006870 <HAL_GetTick>
 8010376:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010378:	e007      	b.n	801038a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801037a:	f7ff feb5 	bl	80100e8 <BSP_SD_GetCardState>
 801037e:	4603      	mov	r3, r0
 8010380:	2b00      	cmp	r3, #0
 8010382:	d102      	bne.n	801038a <SD_write+0x8a>
          {
            res = RES_OK;
 8010384:	2300      	movs	r3, #0
 8010386:	75fb      	strb	r3, [r7, #23]
            break;
 8010388:	e008      	b.n	801039c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801038a:	f7f6 fa71 	bl	8006870 <HAL_GetTick>
 801038e:	4602      	mov	r2, r0
 8010390:	693b      	ldr	r3, [r7, #16]
 8010392:	1ad3      	subs	r3, r2, r3
 8010394:	f247 522f 	movw	r2, #29999	; 0x752f
 8010398:	4293      	cmp	r3, r2
 801039a:	d9ee      	bls.n	801037a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 801039c:	7dfb      	ldrb	r3, [r7, #23]
}
 801039e:	4618      	mov	r0, r3
 80103a0:	3718      	adds	r7, #24
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}
 80103a6:	bf00      	nop
 80103a8:	20006594 	.word	0x20006594

080103ac <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b08c      	sub	sp, #48	; 0x30
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	4603      	mov	r3, r0
 80103b4:	603a      	str	r2, [r7, #0]
 80103b6:	71fb      	strb	r3, [r7, #7]
 80103b8:	460b      	mov	r3, r1
 80103ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80103bc:	2301      	movs	r3, #1
 80103be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80103c2:	4b25      	ldr	r3, [pc, #148]	; (8010458 <SD_ioctl+0xac>)
 80103c4:	781b      	ldrb	r3, [r3, #0]
 80103c6:	b2db      	uxtb	r3, r3
 80103c8:	f003 0301 	and.w	r3, r3, #1
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d001      	beq.n	80103d4 <SD_ioctl+0x28>
 80103d0:	2303      	movs	r3, #3
 80103d2:	e03c      	b.n	801044e <SD_ioctl+0xa2>

  switch (cmd)
 80103d4:	79bb      	ldrb	r3, [r7, #6]
 80103d6:	2b03      	cmp	r3, #3
 80103d8:	d834      	bhi.n	8010444 <SD_ioctl+0x98>
 80103da:	a201      	add	r2, pc, #4	; (adr r2, 80103e0 <SD_ioctl+0x34>)
 80103dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103e0:	080103f1 	.word	0x080103f1
 80103e4:	080103f9 	.word	0x080103f9
 80103e8:	08010411 	.word	0x08010411
 80103ec:	0801042b 	.word	0x0801042b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80103f0:	2300      	movs	r3, #0
 80103f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80103f6:	e028      	b.n	801044a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80103f8:	f107 030c 	add.w	r3, r7, #12
 80103fc:	4618      	mov	r0, r3
 80103fe:	f7ff fe83 	bl	8010108 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010408:	2300      	movs	r3, #0
 801040a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801040e:	e01c      	b.n	801044a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010410:	f107 030c 	add.w	r3, r7, #12
 8010414:	4618      	mov	r0, r3
 8010416:	f7ff fe77 	bl	8010108 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801041a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801041c:	b29a      	uxth	r2, r3
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010422:	2300      	movs	r3, #0
 8010424:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010428:	e00f      	b.n	801044a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801042a:	f107 030c 	add.w	r3, r7, #12
 801042e:	4618      	mov	r0, r3
 8010430:	f7ff fe6a 	bl	8010108 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010436:	0a5a      	lsrs	r2, r3, #9
 8010438:	683b      	ldr	r3, [r7, #0]
 801043a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801043c:	2300      	movs	r3, #0
 801043e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010442:	e002      	b.n	801044a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010444:	2304      	movs	r3, #4
 8010446:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801044a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801044e:	4618      	mov	r0, r3
 8010450:	3730      	adds	r7, #48	; 0x30
 8010452:	46bd      	mov	sp, r7
 8010454:	bd80      	pop	{r7, pc}
 8010456:	bf00      	nop
 8010458:	200004b9 	.word	0x200004b9

0801045c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801045c:	b480      	push	{r7}
 801045e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010460:	4b03      	ldr	r3, [pc, #12]	; (8010470 <BSP_SD_WriteCpltCallback+0x14>)
 8010462:	2201      	movs	r2, #1
 8010464:	601a      	str	r2, [r3, #0]
}
 8010466:	bf00      	nop
 8010468:	46bd      	mov	sp, r7
 801046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046e:	4770      	bx	lr
 8010470:	20006594 	.word	0x20006594

08010474 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010474:	b480      	push	{r7}
 8010476:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010478:	4b03      	ldr	r3, [pc, #12]	; (8010488 <BSP_SD_ReadCpltCallback+0x14>)
 801047a:	2201      	movs	r2, #1
 801047c:	601a      	str	r2, [r3, #0]
}
 801047e:	bf00      	nop
 8010480:	46bd      	mov	sp, r7
 8010482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010486:	4770      	bx	lr
 8010488:	20006598 	.word	0x20006598

0801048c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b084      	sub	sp, #16
 8010490:	af00      	add	r7, sp, #0
 8010492:	4603      	mov	r3, r0
 8010494:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010496:	79fb      	ldrb	r3, [r7, #7]
 8010498:	4a08      	ldr	r2, [pc, #32]	; (80104bc <disk_status+0x30>)
 801049a:	009b      	lsls	r3, r3, #2
 801049c:	4413      	add	r3, r2
 801049e:	685b      	ldr	r3, [r3, #4]
 80104a0:	685b      	ldr	r3, [r3, #4]
 80104a2:	79fa      	ldrb	r2, [r7, #7]
 80104a4:	4905      	ldr	r1, [pc, #20]	; (80104bc <disk_status+0x30>)
 80104a6:	440a      	add	r2, r1
 80104a8:	7a12      	ldrb	r2, [r2, #8]
 80104aa:	4610      	mov	r0, r2
 80104ac:	4798      	blx	r3
 80104ae:	4603      	mov	r3, r0
 80104b0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80104b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80104b4:	4618      	mov	r0, r3
 80104b6:	3710      	adds	r7, #16
 80104b8:	46bd      	mov	sp, r7
 80104ba:	bd80      	pop	{r7, pc}
 80104bc:	200065f4 	.word	0x200065f4

080104c0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b084      	sub	sp, #16
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	4603      	mov	r3, r0
 80104c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80104ca:	2300      	movs	r3, #0
 80104cc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80104ce:	79fb      	ldrb	r3, [r7, #7]
 80104d0:	4a0d      	ldr	r2, [pc, #52]	; (8010508 <disk_initialize+0x48>)
 80104d2:	5cd3      	ldrb	r3, [r2, r3]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d111      	bne.n	80104fc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80104d8:	79fb      	ldrb	r3, [r7, #7]
 80104da:	4a0b      	ldr	r2, [pc, #44]	; (8010508 <disk_initialize+0x48>)
 80104dc:	2101      	movs	r1, #1
 80104de:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80104e0:	79fb      	ldrb	r3, [r7, #7]
 80104e2:	4a09      	ldr	r2, [pc, #36]	; (8010508 <disk_initialize+0x48>)
 80104e4:	009b      	lsls	r3, r3, #2
 80104e6:	4413      	add	r3, r2
 80104e8:	685b      	ldr	r3, [r3, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	79fa      	ldrb	r2, [r7, #7]
 80104ee:	4906      	ldr	r1, [pc, #24]	; (8010508 <disk_initialize+0x48>)
 80104f0:	440a      	add	r2, r1
 80104f2:	7a12      	ldrb	r2, [r2, #8]
 80104f4:	4610      	mov	r0, r2
 80104f6:	4798      	blx	r3
 80104f8:	4603      	mov	r3, r0
 80104fa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80104fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80104fe:	4618      	mov	r0, r3
 8010500:	3710      	adds	r7, #16
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}
 8010506:	bf00      	nop
 8010508:	200065f4 	.word	0x200065f4

0801050c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801050c:	b590      	push	{r4, r7, lr}
 801050e:	b087      	sub	sp, #28
 8010510:	af00      	add	r7, sp, #0
 8010512:	60b9      	str	r1, [r7, #8]
 8010514:	607a      	str	r2, [r7, #4]
 8010516:	603b      	str	r3, [r7, #0]
 8010518:	4603      	mov	r3, r0
 801051a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801051c:	7bfb      	ldrb	r3, [r7, #15]
 801051e:	4a0a      	ldr	r2, [pc, #40]	; (8010548 <disk_read+0x3c>)
 8010520:	009b      	lsls	r3, r3, #2
 8010522:	4413      	add	r3, r2
 8010524:	685b      	ldr	r3, [r3, #4]
 8010526:	689c      	ldr	r4, [r3, #8]
 8010528:	7bfb      	ldrb	r3, [r7, #15]
 801052a:	4a07      	ldr	r2, [pc, #28]	; (8010548 <disk_read+0x3c>)
 801052c:	4413      	add	r3, r2
 801052e:	7a18      	ldrb	r0, [r3, #8]
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	687a      	ldr	r2, [r7, #4]
 8010534:	68b9      	ldr	r1, [r7, #8]
 8010536:	47a0      	blx	r4
 8010538:	4603      	mov	r3, r0
 801053a:	75fb      	strb	r3, [r7, #23]
  return res;
 801053c:	7dfb      	ldrb	r3, [r7, #23]
}
 801053e:	4618      	mov	r0, r3
 8010540:	371c      	adds	r7, #28
 8010542:	46bd      	mov	sp, r7
 8010544:	bd90      	pop	{r4, r7, pc}
 8010546:	bf00      	nop
 8010548:	200065f4 	.word	0x200065f4

0801054c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801054c:	b590      	push	{r4, r7, lr}
 801054e:	b087      	sub	sp, #28
 8010550:	af00      	add	r7, sp, #0
 8010552:	60b9      	str	r1, [r7, #8]
 8010554:	607a      	str	r2, [r7, #4]
 8010556:	603b      	str	r3, [r7, #0]
 8010558:	4603      	mov	r3, r0
 801055a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801055c:	7bfb      	ldrb	r3, [r7, #15]
 801055e:	4a0a      	ldr	r2, [pc, #40]	; (8010588 <disk_write+0x3c>)
 8010560:	009b      	lsls	r3, r3, #2
 8010562:	4413      	add	r3, r2
 8010564:	685b      	ldr	r3, [r3, #4]
 8010566:	68dc      	ldr	r4, [r3, #12]
 8010568:	7bfb      	ldrb	r3, [r7, #15]
 801056a:	4a07      	ldr	r2, [pc, #28]	; (8010588 <disk_write+0x3c>)
 801056c:	4413      	add	r3, r2
 801056e:	7a18      	ldrb	r0, [r3, #8]
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	687a      	ldr	r2, [r7, #4]
 8010574:	68b9      	ldr	r1, [r7, #8]
 8010576:	47a0      	blx	r4
 8010578:	4603      	mov	r3, r0
 801057a:	75fb      	strb	r3, [r7, #23]
  return res;
 801057c:	7dfb      	ldrb	r3, [r7, #23]
}
 801057e:	4618      	mov	r0, r3
 8010580:	371c      	adds	r7, #28
 8010582:	46bd      	mov	sp, r7
 8010584:	bd90      	pop	{r4, r7, pc}
 8010586:	bf00      	nop
 8010588:	200065f4 	.word	0x200065f4

0801058c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b084      	sub	sp, #16
 8010590:	af00      	add	r7, sp, #0
 8010592:	4603      	mov	r3, r0
 8010594:	603a      	str	r2, [r7, #0]
 8010596:	71fb      	strb	r3, [r7, #7]
 8010598:	460b      	mov	r3, r1
 801059a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801059c:	79fb      	ldrb	r3, [r7, #7]
 801059e:	4a09      	ldr	r2, [pc, #36]	; (80105c4 <disk_ioctl+0x38>)
 80105a0:	009b      	lsls	r3, r3, #2
 80105a2:	4413      	add	r3, r2
 80105a4:	685b      	ldr	r3, [r3, #4]
 80105a6:	691b      	ldr	r3, [r3, #16]
 80105a8:	79fa      	ldrb	r2, [r7, #7]
 80105aa:	4906      	ldr	r1, [pc, #24]	; (80105c4 <disk_ioctl+0x38>)
 80105ac:	440a      	add	r2, r1
 80105ae:	7a10      	ldrb	r0, [r2, #8]
 80105b0:	79b9      	ldrb	r1, [r7, #6]
 80105b2:	683a      	ldr	r2, [r7, #0]
 80105b4:	4798      	blx	r3
 80105b6:	4603      	mov	r3, r0
 80105b8:	73fb      	strb	r3, [r7, #15]
  return res;
 80105ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80105bc:	4618      	mov	r0, r3
 80105be:	3710      	adds	r7, #16
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}
 80105c4:	200065f4 	.word	0x200065f4

080105c8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80105c8:	b480      	push	{r7}
 80105ca:	b085      	sub	sp, #20
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	3301      	adds	r3, #1
 80105d4:	781b      	ldrb	r3, [r3, #0]
 80105d6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80105d8:	89fb      	ldrh	r3, [r7, #14]
 80105da:	021b      	lsls	r3, r3, #8
 80105dc:	b21a      	sxth	r2, r3
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	781b      	ldrb	r3, [r3, #0]
 80105e2:	b21b      	sxth	r3, r3
 80105e4:	4313      	orrs	r3, r2
 80105e6:	b21b      	sxth	r3, r3
 80105e8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80105ea:	89fb      	ldrh	r3, [r7, #14]
}
 80105ec:	4618      	mov	r0, r3
 80105ee:	3714      	adds	r7, #20
 80105f0:	46bd      	mov	sp, r7
 80105f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f6:	4770      	bx	lr

080105f8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80105f8:	b480      	push	{r7}
 80105fa:	b085      	sub	sp, #20
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	3303      	adds	r3, #3
 8010604:	781b      	ldrb	r3, [r3, #0]
 8010606:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	021b      	lsls	r3, r3, #8
 801060c:	687a      	ldr	r2, [r7, #4]
 801060e:	3202      	adds	r2, #2
 8010610:	7812      	ldrb	r2, [r2, #0]
 8010612:	4313      	orrs	r3, r2
 8010614:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	021b      	lsls	r3, r3, #8
 801061a:	687a      	ldr	r2, [r7, #4]
 801061c:	3201      	adds	r2, #1
 801061e:	7812      	ldrb	r2, [r2, #0]
 8010620:	4313      	orrs	r3, r2
 8010622:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	021b      	lsls	r3, r3, #8
 8010628:	687a      	ldr	r2, [r7, #4]
 801062a:	7812      	ldrb	r2, [r2, #0]
 801062c:	4313      	orrs	r3, r2
 801062e:	60fb      	str	r3, [r7, #12]
	return rv;
 8010630:	68fb      	ldr	r3, [r7, #12]
}
 8010632:	4618      	mov	r0, r3
 8010634:	3714      	adds	r7, #20
 8010636:	46bd      	mov	sp, r7
 8010638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063c:	4770      	bx	lr

0801063e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801063e:	b480      	push	{r7}
 8010640:	b083      	sub	sp, #12
 8010642:	af00      	add	r7, sp, #0
 8010644:	6078      	str	r0, [r7, #4]
 8010646:	460b      	mov	r3, r1
 8010648:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	1c5a      	adds	r2, r3, #1
 801064e:	607a      	str	r2, [r7, #4]
 8010650:	887a      	ldrh	r2, [r7, #2]
 8010652:	b2d2      	uxtb	r2, r2
 8010654:	701a      	strb	r2, [r3, #0]
 8010656:	887b      	ldrh	r3, [r7, #2]
 8010658:	0a1b      	lsrs	r3, r3, #8
 801065a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	1c5a      	adds	r2, r3, #1
 8010660:	607a      	str	r2, [r7, #4]
 8010662:	887a      	ldrh	r2, [r7, #2]
 8010664:	b2d2      	uxtb	r2, r2
 8010666:	701a      	strb	r2, [r3, #0]
}
 8010668:	bf00      	nop
 801066a:	370c      	adds	r7, #12
 801066c:	46bd      	mov	sp, r7
 801066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010672:	4770      	bx	lr

08010674 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010674:	b480      	push	{r7}
 8010676:	b083      	sub	sp, #12
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
 801067c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	1c5a      	adds	r2, r3, #1
 8010682:	607a      	str	r2, [r7, #4]
 8010684:	683a      	ldr	r2, [r7, #0]
 8010686:	b2d2      	uxtb	r2, r2
 8010688:	701a      	strb	r2, [r3, #0]
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	0a1b      	lsrs	r3, r3, #8
 801068e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	1c5a      	adds	r2, r3, #1
 8010694:	607a      	str	r2, [r7, #4]
 8010696:	683a      	ldr	r2, [r7, #0]
 8010698:	b2d2      	uxtb	r2, r2
 801069a:	701a      	strb	r2, [r3, #0]
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	0a1b      	lsrs	r3, r3, #8
 80106a0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	1c5a      	adds	r2, r3, #1
 80106a6:	607a      	str	r2, [r7, #4]
 80106a8:	683a      	ldr	r2, [r7, #0]
 80106aa:	b2d2      	uxtb	r2, r2
 80106ac:	701a      	strb	r2, [r3, #0]
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	0a1b      	lsrs	r3, r3, #8
 80106b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	1c5a      	adds	r2, r3, #1
 80106b8:	607a      	str	r2, [r7, #4]
 80106ba:	683a      	ldr	r2, [r7, #0]
 80106bc:	b2d2      	uxtb	r2, r2
 80106be:	701a      	strb	r2, [r3, #0]
}
 80106c0:	bf00      	nop
 80106c2:	370c      	adds	r7, #12
 80106c4:	46bd      	mov	sp, r7
 80106c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ca:	4770      	bx	lr

080106cc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80106cc:	b480      	push	{r7}
 80106ce:	b087      	sub	sp, #28
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	60f8      	str	r0, [r7, #12]
 80106d4:	60b9      	str	r1, [r7, #8]
 80106d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80106dc:	68bb      	ldr	r3, [r7, #8]
 80106de:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d00d      	beq.n	8010702 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80106e6:	693a      	ldr	r2, [r7, #16]
 80106e8:	1c53      	adds	r3, r2, #1
 80106ea:	613b      	str	r3, [r7, #16]
 80106ec:	697b      	ldr	r3, [r7, #20]
 80106ee:	1c59      	adds	r1, r3, #1
 80106f0:	6179      	str	r1, [r7, #20]
 80106f2:	7812      	ldrb	r2, [r2, #0]
 80106f4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	3b01      	subs	r3, #1
 80106fa:	607b      	str	r3, [r7, #4]
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d1f1      	bne.n	80106e6 <mem_cpy+0x1a>
	}
}
 8010702:	bf00      	nop
 8010704:	371c      	adds	r7, #28
 8010706:	46bd      	mov	sp, r7
 8010708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070c:	4770      	bx	lr

0801070e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801070e:	b480      	push	{r7}
 8010710:	b087      	sub	sp, #28
 8010712:	af00      	add	r7, sp, #0
 8010714:	60f8      	str	r0, [r7, #12]
 8010716:	60b9      	str	r1, [r7, #8]
 8010718:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801071e:	697b      	ldr	r3, [r7, #20]
 8010720:	1c5a      	adds	r2, r3, #1
 8010722:	617a      	str	r2, [r7, #20]
 8010724:	68ba      	ldr	r2, [r7, #8]
 8010726:	b2d2      	uxtb	r2, r2
 8010728:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	3b01      	subs	r3, #1
 801072e:	607b      	str	r3, [r7, #4]
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d1f3      	bne.n	801071e <mem_set+0x10>
}
 8010736:	bf00      	nop
 8010738:	bf00      	nop
 801073a:	371c      	adds	r7, #28
 801073c:	46bd      	mov	sp, r7
 801073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010742:	4770      	bx	lr

08010744 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010744:	b480      	push	{r7}
 8010746:	b089      	sub	sp, #36	; 0x24
 8010748:	af00      	add	r7, sp, #0
 801074a:	60f8      	str	r0, [r7, #12]
 801074c:	60b9      	str	r1, [r7, #8]
 801074e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	61fb      	str	r3, [r7, #28]
 8010754:	68bb      	ldr	r3, [r7, #8]
 8010756:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010758:	2300      	movs	r3, #0
 801075a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801075c:	69fb      	ldr	r3, [r7, #28]
 801075e:	1c5a      	adds	r2, r3, #1
 8010760:	61fa      	str	r2, [r7, #28]
 8010762:	781b      	ldrb	r3, [r3, #0]
 8010764:	4619      	mov	r1, r3
 8010766:	69bb      	ldr	r3, [r7, #24]
 8010768:	1c5a      	adds	r2, r3, #1
 801076a:	61ba      	str	r2, [r7, #24]
 801076c:	781b      	ldrb	r3, [r3, #0]
 801076e:	1acb      	subs	r3, r1, r3
 8010770:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	3b01      	subs	r3, #1
 8010776:	607b      	str	r3, [r7, #4]
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d002      	beq.n	8010784 <mem_cmp+0x40>
 801077e:	697b      	ldr	r3, [r7, #20]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d0eb      	beq.n	801075c <mem_cmp+0x18>

	return r;
 8010784:	697b      	ldr	r3, [r7, #20]
}
 8010786:	4618      	mov	r0, r3
 8010788:	3724      	adds	r7, #36	; 0x24
 801078a:	46bd      	mov	sp, r7
 801078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010790:	4770      	bx	lr

08010792 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010792:	b480      	push	{r7}
 8010794:	b083      	sub	sp, #12
 8010796:	af00      	add	r7, sp, #0
 8010798:	6078      	str	r0, [r7, #4]
 801079a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801079c:	e002      	b.n	80107a4 <chk_chr+0x12>
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	3301      	adds	r3, #1
 80107a2:	607b      	str	r3, [r7, #4]
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	781b      	ldrb	r3, [r3, #0]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d005      	beq.n	80107b8 <chk_chr+0x26>
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	781b      	ldrb	r3, [r3, #0]
 80107b0:	461a      	mov	r2, r3
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	4293      	cmp	r3, r2
 80107b6:	d1f2      	bne.n	801079e <chk_chr+0xc>
	return *str;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	781b      	ldrb	r3, [r3, #0]
}
 80107bc:	4618      	mov	r0, r3
 80107be:	370c      	adds	r7, #12
 80107c0:	46bd      	mov	sp, r7
 80107c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c6:	4770      	bx	lr

080107c8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80107c8:	b480      	push	{r7}
 80107ca:	b085      	sub	sp, #20
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
 80107d0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80107d2:	2300      	movs	r3, #0
 80107d4:	60bb      	str	r3, [r7, #8]
 80107d6:	68bb      	ldr	r3, [r7, #8]
 80107d8:	60fb      	str	r3, [r7, #12]
 80107da:	e029      	b.n	8010830 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80107dc:	4a27      	ldr	r2, [pc, #156]	; (801087c <chk_lock+0xb4>)
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	011b      	lsls	r3, r3, #4
 80107e2:	4413      	add	r3, r2
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d01d      	beq.n	8010826 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80107ea:	4a24      	ldr	r2, [pc, #144]	; (801087c <chk_lock+0xb4>)
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	011b      	lsls	r3, r3, #4
 80107f0:	4413      	add	r3, r2
 80107f2:	681a      	ldr	r2, [r3, #0]
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	429a      	cmp	r2, r3
 80107fa:	d116      	bne.n	801082a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80107fc:	4a1f      	ldr	r2, [pc, #124]	; (801087c <chk_lock+0xb4>)
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	011b      	lsls	r3, r3, #4
 8010802:	4413      	add	r3, r2
 8010804:	3304      	adds	r3, #4
 8010806:	681a      	ldr	r2, [r3, #0]
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801080c:	429a      	cmp	r2, r3
 801080e:	d10c      	bne.n	801082a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010810:	4a1a      	ldr	r2, [pc, #104]	; (801087c <chk_lock+0xb4>)
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	011b      	lsls	r3, r3, #4
 8010816:	4413      	add	r3, r2
 8010818:	3308      	adds	r3, #8
 801081a:	681a      	ldr	r2, [r3, #0]
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010820:	429a      	cmp	r2, r3
 8010822:	d102      	bne.n	801082a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010824:	e007      	b.n	8010836 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010826:	2301      	movs	r3, #1
 8010828:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	3301      	adds	r3, #1
 801082e:	60fb      	str	r3, [r7, #12]
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	2b04      	cmp	r3, #4
 8010834:	d9d2      	bls.n	80107dc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	2b05      	cmp	r3, #5
 801083a:	d109      	bne.n	8010850 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d102      	bne.n	8010848 <chk_lock+0x80>
 8010842:	683b      	ldr	r3, [r7, #0]
 8010844:	2b02      	cmp	r3, #2
 8010846:	d101      	bne.n	801084c <chk_lock+0x84>
 8010848:	2300      	movs	r3, #0
 801084a:	e010      	b.n	801086e <chk_lock+0xa6>
 801084c:	2312      	movs	r3, #18
 801084e:	e00e      	b.n	801086e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d108      	bne.n	8010868 <chk_lock+0xa0>
 8010856:	4a09      	ldr	r2, [pc, #36]	; (801087c <chk_lock+0xb4>)
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	011b      	lsls	r3, r3, #4
 801085c:	4413      	add	r3, r2
 801085e:	330c      	adds	r3, #12
 8010860:	881b      	ldrh	r3, [r3, #0]
 8010862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010866:	d101      	bne.n	801086c <chk_lock+0xa4>
 8010868:	2310      	movs	r3, #16
 801086a:	e000      	b.n	801086e <chk_lock+0xa6>
 801086c:	2300      	movs	r3, #0
}
 801086e:	4618      	mov	r0, r3
 8010870:	3714      	adds	r7, #20
 8010872:	46bd      	mov	sp, r7
 8010874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010878:	4770      	bx	lr
 801087a:	bf00      	nop
 801087c:	200065a4 	.word	0x200065a4

08010880 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010880:	b480      	push	{r7}
 8010882:	b083      	sub	sp, #12
 8010884:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010886:	2300      	movs	r3, #0
 8010888:	607b      	str	r3, [r7, #4]
 801088a:	e002      	b.n	8010892 <enq_lock+0x12>
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	3301      	adds	r3, #1
 8010890:	607b      	str	r3, [r7, #4]
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	2b04      	cmp	r3, #4
 8010896:	d806      	bhi.n	80108a6 <enq_lock+0x26>
 8010898:	4a09      	ldr	r2, [pc, #36]	; (80108c0 <enq_lock+0x40>)
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	011b      	lsls	r3, r3, #4
 801089e:	4413      	add	r3, r2
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d1f2      	bne.n	801088c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	2b05      	cmp	r3, #5
 80108aa:	bf14      	ite	ne
 80108ac:	2301      	movne	r3, #1
 80108ae:	2300      	moveq	r3, #0
 80108b0:	b2db      	uxtb	r3, r3
}
 80108b2:	4618      	mov	r0, r3
 80108b4:	370c      	adds	r7, #12
 80108b6:	46bd      	mov	sp, r7
 80108b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108bc:	4770      	bx	lr
 80108be:	bf00      	nop
 80108c0:	200065a4 	.word	0x200065a4

080108c4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80108c4:	b480      	push	{r7}
 80108c6:	b085      	sub	sp, #20
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
 80108cc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80108ce:	2300      	movs	r3, #0
 80108d0:	60fb      	str	r3, [r7, #12]
 80108d2:	e01f      	b.n	8010914 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80108d4:	4a41      	ldr	r2, [pc, #260]	; (80109dc <inc_lock+0x118>)
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	011b      	lsls	r3, r3, #4
 80108da:	4413      	add	r3, r2
 80108dc:	681a      	ldr	r2, [r3, #0]
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	429a      	cmp	r2, r3
 80108e4:	d113      	bne.n	801090e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80108e6:	4a3d      	ldr	r2, [pc, #244]	; (80109dc <inc_lock+0x118>)
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	011b      	lsls	r3, r3, #4
 80108ec:	4413      	add	r3, r2
 80108ee:	3304      	adds	r3, #4
 80108f0:	681a      	ldr	r2, [r3, #0]
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80108f6:	429a      	cmp	r2, r3
 80108f8:	d109      	bne.n	801090e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80108fa:	4a38      	ldr	r2, [pc, #224]	; (80109dc <inc_lock+0x118>)
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	011b      	lsls	r3, r3, #4
 8010900:	4413      	add	r3, r2
 8010902:	3308      	adds	r3, #8
 8010904:	681a      	ldr	r2, [r3, #0]
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801090a:	429a      	cmp	r2, r3
 801090c:	d006      	beq.n	801091c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	3301      	adds	r3, #1
 8010912:	60fb      	str	r3, [r7, #12]
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	2b04      	cmp	r3, #4
 8010918:	d9dc      	bls.n	80108d4 <inc_lock+0x10>
 801091a:	e000      	b.n	801091e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801091c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	2b05      	cmp	r3, #5
 8010922:	d132      	bne.n	801098a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010924:	2300      	movs	r3, #0
 8010926:	60fb      	str	r3, [r7, #12]
 8010928:	e002      	b.n	8010930 <inc_lock+0x6c>
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	3301      	adds	r3, #1
 801092e:	60fb      	str	r3, [r7, #12]
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	2b04      	cmp	r3, #4
 8010934:	d806      	bhi.n	8010944 <inc_lock+0x80>
 8010936:	4a29      	ldr	r2, [pc, #164]	; (80109dc <inc_lock+0x118>)
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	011b      	lsls	r3, r3, #4
 801093c:	4413      	add	r3, r2
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d1f2      	bne.n	801092a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	2b05      	cmp	r3, #5
 8010948:	d101      	bne.n	801094e <inc_lock+0x8a>
 801094a:	2300      	movs	r3, #0
 801094c:	e040      	b.n	80109d0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681a      	ldr	r2, [r3, #0]
 8010952:	4922      	ldr	r1, [pc, #136]	; (80109dc <inc_lock+0x118>)
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	011b      	lsls	r3, r3, #4
 8010958:	440b      	add	r3, r1
 801095a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	689a      	ldr	r2, [r3, #8]
 8010960:	491e      	ldr	r1, [pc, #120]	; (80109dc <inc_lock+0x118>)
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	011b      	lsls	r3, r3, #4
 8010966:	440b      	add	r3, r1
 8010968:	3304      	adds	r3, #4
 801096a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	695a      	ldr	r2, [r3, #20]
 8010970:	491a      	ldr	r1, [pc, #104]	; (80109dc <inc_lock+0x118>)
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	011b      	lsls	r3, r3, #4
 8010976:	440b      	add	r3, r1
 8010978:	3308      	adds	r3, #8
 801097a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801097c:	4a17      	ldr	r2, [pc, #92]	; (80109dc <inc_lock+0x118>)
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	011b      	lsls	r3, r3, #4
 8010982:	4413      	add	r3, r2
 8010984:	330c      	adds	r3, #12
 8010986:	2200      	movs	r2, #0
 8010988:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801098a:	683b      	ldr	r3, [r7, #0]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d009      	beq.n	80109a4 <inc_lock+0xe0>
 8010990:	4a12      	ldr	r2, [pc, #72]	; (80109dc <inc_lock+0x118>)
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	011b      	lsls	r3, r3, #4
 8010996:	4413      	add	r3, r2
 8010998:	330c      	adds	r3, #12
 801099a:	881b      	ldrh	r3, [r3, #0]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d001      	beq.n	80109a4 <inc_lock+0xe0>
 80109a0:	2300      	movs	r3, #0
 80109a2:	e015      	b.n	80109d0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80109a4:	683b      	ldr	r3, [r7, #0]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d108      	bne.n	80109bc <inc_lock+0xf8>
 80109aa:	4a0c      	ldr	r2, [pc, #48]	; (80109dc <inc_lock+0x118>)
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	011b      	lsls	r3, r3, #4
 80109b0:	4413      	add	r3, r2
 80109b2:	330c      	adds	r3, #12
 80109b4:	881b      	ldrh	r3, [r3, #0]
 80109b6:	3301      	adds	r3, #1
 80109b8:	b29a      	uxth	r2, r3
 80109ba:	e001      	b.n	80109c0 <inc_lock+0xfc>
 80109bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80109c0:	4906      	ldr	r1, [pc, #24]	; (80109dc <inc_lock+0x118>)
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	011b      	lsls	r3, r3, #4
 80109c6:	440b      	add	r3, r1
 80109c8:	330c      	adds	r3, #12
 80109ca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	3301      	adds	r3, #1
}
 80109d0:	4618      	mov	r0, r3
 80109d2:	3714      	adds	r7, #20
 80109d4:	46bd      	mov	sp, r7
 80109d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109da:	4770      	bx	lr
 80109dc:	200065a4 	.word	0x200065a4

080109e0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80109e0:	b480      	push	{r7}
 80109e2:	b085      	sub	sp, #20
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80109e8:	2300      	movs	r3, #0
 80109ea:	60fb      	str	r3, [r7, #12]
 80109ec:	e010      	b.n	8010a10 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80109ee:	4a0d      	ldr	r2, [pc, #52]	; (8010a24 <clear_lock+0x44>)
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	011b      	lsls	r3, r3, #4
 80109f4:	4413      	add	r3, r2
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	687a      	ldr	r2, [r7, #4]
 80109fa:	429a      	cmp	r2, r3
 80109fc:	d105      	bne.n	8010a0a <clear_lock+0x2a>
 80109fe:	4a09      	ldr	r2, [pc, #36]	; (8010a24 <clear_lock+0x44>)
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	011b      	lsls	r3, r3, #4
 8010a04:	4413      	add	r3, r2
 8010a06:	2200      	movs	r2, #0
 8010a08:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	3301      	adds	r3, #1
 8010a0e:	60fb      	str	r3, [r7, #12]
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	2b04      	cmp	r3, #4
 8010a14:	d9eb      	bls.n	80109ee <clear_lock+0xe>
	}
}
 8010a16:	bf00      	nop
 8010a18:	bf00      	nop
 8010a1a:	3714      	adds	r7, #20
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a22:	4770      	bx	lr
 8010a24:	200065a4 	.word	0x200065a4

08010a28 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b086      	sub	sp, #24
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010a30:	2300      	movs	r3, #0
 8010a32:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	78db      	ldrb	r3, [r3, #3]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d034      	beq.n	8010aa6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a40:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	7858      	ldrb	r0, [r3, #1]
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010a4c:	2301      	movs	r3, #1
 8010a4e:	697a      	ldr	r2, [r7, #20]
 8010a50:	f7ff fd7c 	bl	801054c <disk_write>
 8010a54:	4603      	mov	r3, r0
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d002      	beq.n	8010a60 <sync_window+0x38>
			res = FR_DISK_ERR;
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	73fb      	strb	r3, [r7, #15]
 8010a5e:	e022      	b.n	8010aa6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2200      	movs	r2, #0
 8010a64:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a6a:	697a      	ldr	r2, [r7, #20]
 8010a6c:	1ad2      	subs	r2, r2, r3
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	69db      	ldr	r3, [r3, #28]
 8010a72:	429a      	cmp	r2, r3
 8010a74:	d217      	bcs.n	8010aa6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	789b      	ldrb	r3, [r3, #2]
 8010a7a:	613b      	str	r3, [r7, #16]
 8010a7c:	e010      	b.n	8010aa0 <sync_window+0x78>
					wsect += fs->fsize;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	69db      	ldr	r3, [r3, #28]
 8010a82:	697a      	ldr	r2, [r7, #20]
 8010a84:	4413      	add	r3, r2
 8010a86:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	7858      	ldrb	r0, [r3, #1]
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010a92:	2301      	movs	r3, #1
 8010a94:	697a      	ldr	r2, [r7, #20]
 8010a96:	f7ff fd59 	bl	801054c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010a9a:	693b      	ldr	r3, [r7, #16]
 8010a9c:	3b01      	subs	r3, #1
 8010a9e:	613b      	str	r3, [r7, #16]
 8010aa0:	693b      	ldr	r3, [r7, #16]
 8010aa2:	2b01      	cmp	r3, #1
 8010aa4:	d8eb      	bhi.n	8010a7e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	3718      	adds	r7, #24
 8010aac:	46bd      	mov	sp, r7
 8010aae:	bd80      	pop	{r7, pc}

08010ab0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b084      	sub	sp, #16
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
 8010ab8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010aba:	2300      	movs	r3, #0
 8010abc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ac2:	683a      	ldr	r2, [r7, #0]
 8010ac4:	429a      	cmp	r2, r3
 8010ac6:	d01b      	beq.n	8010b00 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010ac8:	6878      	ldr	r0, [r7, #4]
 8010aca:	f7ff ffad 	bl	8010a28 <sync_window>
 8010ace:	4603      	mov	r3, r0
 8010ad0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010ad2:	7bfb      	ldrb	r3, [r7, #15]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d113      	bne.n	8010b00 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	7858      	ldrb	r0, [r3, #1]
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010ae2:	2301      	movs	r3, #1
 8010ae4:	683a      	ldr	r2, [r7, #0]
 8010ae6:	f7ff fd11 	bl	801050c <disk_read>
 8010aea:	4603      	mov	r3, r0
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d004      	beq.n	8010afa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010af0:	f04f 33ff 	mov.w	r3, #4294967295
 8010af4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010af6:	2301      	movs	r3, #1
 8010af8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	683a      	ldr	r2, [r7, #0]
 8010afe:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8010b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b02:	4618      	mov	r0, r3
 8010b04:	3710      	adds	r7, #16
 8010b06:	46bd      	mov	sp, r7
 8010b08:	bd80      	pop	{r7, pc}
	...

08010b0c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b084      	sub	sp, #16
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010b14:	6878      	ldr	r0, [r7, #4]
 8010b16:	f7ff ff87 	bl	8010a28 <sync_window>
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010b1e:	7bfb      	ldrb	r3, [r7, #15]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d159      	bne.n	8010bd8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	781b      	ldrb	r3, [r3, #0]
 8010b28:	2b03      	cmp	r3, #3
 8010b2a:	d149      	bne.n	8010bc0 <sync_fs+0xb4>
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	791b      	ldrb	r3, [r3, #4]
 8010b30:	2b01      	cmp	r3, #1
 8010b32:	d145      	bne.n	8010bc0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	899b      	ldrh	r3, [r3, #12]
 8010b3e:	461a      	mov	r2, r3
 8010b40:	2100      	movs	r1, #0
 8010b42:	f7ff fde4 	bl	801070e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	3334      	adds	r3, #52	; 0x34
 8010b4a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010b4e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010b52:	4618      	mov	r0, r3
 8010b54:	f7ff fd73 	bl	801063e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	3334      	adds	r3, #52	; 0x34
 8010b5c:	4921      	ldr	r1, [pc, #132]	; (8010be4 <sync_fs+0xd8>)
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f7ff fd88 	bl	8010674 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	3334      	adds	r3, #52	; 0x34
 8010b68:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010b6c:	491e      	ldr	r1, [pc, #120]	; (8010be8 <sync_fs+0xdc>)
 8010b6e:	4618      	mov	r0, r3
 8010b70:	f7ff fd80 	bl	8010674 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	3334      	adds	r3, #52	; 0x34
 8010b78:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	695b      	ldr	r3, [r3, #20]
 8010b80:	4619      	mov	r1, r3
 8010b82:	4610      	mov	r0, r2
 8010b84:	f7ff fd76 	bl	8010674 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	3334      	adds	r3, #52	; 0x34
 8010b8c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	691b      	ldr	r3, [r3, #16]
 8010b94:	4619      	mov	r1, r3
 8010b96:	4610      	mov	r0, r2
 8010b98:	f7ff fd6c 	bl	8010674 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	6a1b      	ldr	r3, [r3, #32]
 8010ba0:	1c5a      	adds	r2, r3, #1
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	7858      	ldrb	r0, [r3, #1]
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	f7ff fcc9 	bl	801054c <disk_write>
			fs->fsi_flag = 0;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	785b      	ldrb	r3, [r3, #1]
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	2100      	movs	r1, #0
 8010bc8:	4618      	mov	r0, r3
 8010bca:	f7ff fcdf 	bl	801058c <disk_ioctl>
 8010bce:	4603      	mov	r3, r0
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d001      	beq.n	8010bd8 <sync_fs+0xcc>
 8010bd4:	2301      	movs	r3, #1
 8010bd6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bda:	4618      	mov	r0, r3
 8010bdc:	3710      	adds	r7, #16
 8010bde:	46bd      	mov	sp, r7
 8010be0:	bd80      	pop	{r7, pc}
 8010be2:	bf00      	nop
 8010be4:	41615252 	.word	0x41615252
 8010be8:	61417272 	.word	0x61417272

08010bec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010bec:	b480      	push	{r7}
 8010bee:	b083      	sub	sp, #12
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
 8010bf4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010bf6:	683b      	ldr	r3, [r7, #0]
 8010bf8:	3b02      	subs	r3, #2
 8010bfa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	699b      	ldr	r3, [r3, #24]
 8010c00:	3b02      	subs	r3, #2
 8010c02:	683a      	ldr	r2, [r7, #0]
 8010c04:	429a      	cmp	r2, r3
 8010c06:	d301      	bcc.n	8010c0c <clust2sect+0x20>
 8010c08:	2300      	movs	r3, #0
 8010c0a:	e008      	b.n	8010c1e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	895b      	ldrh	r3, [r3, #10]
 8010c10:	461a      	mov	r2, r3
 8010c12:	683b      	ldr	r3, [r7, #0]
 8010c14:	fb03 f202 	mul.w	r2, r3, r2
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c1c:	4413      	add	r3, r2
}
 8010c1e:	4618      	mov	r0, r3
 8010c20:	370c      	adds	r7, #12
 8010c22:	46bd      	mov	sp, r7
 8010c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c28:	4770      	bx	lr

08010c2a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010c2a:	b580      	push	{r7, lr}
 8010c2c:	b086      	sub	sp, #24
 8010c2e:	af00      	add	r7, sp, #0
 8010c30:	6078      	str	r0, [r7, #4]
 8010c32:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	2b01      	cmp	r3, #1
 8010c3e:	d904      	bls.n	8010c4a <get_fat+0x20>
 8010c40:	693b      	ldr	r3, [r7, #16]
 8010c42:	699b      	ldr	r3, [r3, #24]
 8010c44:	683a      	ldr	r2, [r7, #0]
 8010c46:	429a      	cmp	r2, r3
 8010c48:	d302      	bcc.n	8010c50 <get_fat+0x26>
		val = 1;	/* Internal error */
 8010c4a:	2301      	movs	r3, #1
 8010c4c:	617b      	str	r3, [r7, #20]
 8010c4e:	e0bb      	b.n	8010dc8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010c50:	f04f 33ff 	mov.w	r3, #4294967295
 8010c54:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010c56:	693b      	ldr	r3, [r7, #16]
 8010c58:	781b      	ldrb	r3, [r3, #0]
 8010c5a:	2b03      	cmp	r3, #3
 8010c5c:	f000 8083 	beq.w	8010d66 <get_fat+0x13c>
 8010c60:	2b03      	cmp	r3, #3
 8010c62:	f300 80a7 	bgt.w	8010db4 <get_fat+0x18a>
 8010c66:	2b01      	cmp	r3, #1
 8010c68:	d002      	beq.n	8010c70 <get_fat+0x46>
 8010c6a:	2b02      	cmp	r3, #2
 8010c6c:	d056      	beq.n	8010d1c <get_fat+0xf2>
 8010c6e:	e0a1      	b.n	8010db4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	60fb      	str	r3, [r7, #12]
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	085b      	lsrs	r3, r3, #1
 8010c78:	68fa      	ldr	r2, [r7, #12]
 8010c7a:	4413      	add	r3, r2
 8010c7c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010c7e:	693b      	ldr	r3, [r7, #16]
 8010c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c82:	693b      	ldr	r3, [r7, #16]
 8010c84:	899b      	ldrh	r3, [r3, #12]
 8010c86:	4619      	mov	r1, r3
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8010c8e:	4413      	add	r3, r2
 8010c90:	4619      	mov	r1, r3
 8010c92:	6938      	ldr	r0, [r7, #16]
 8010c94:	f7ff ff0c 	bl	8010ab0 <move_window>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	f040 808d 	bne.w	8010dba <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	1c5a      	adds	r2, r3, #1
 8010ca4:	60fa      	str	r2, [r7, #12]
 8010ca6:	693a      	ldr	r2, [r7, #16]
 8010ca8:	8992      	ldrh	r2, [r2, #12]
 8010caa:	fbb3 f1f2 	udiv	r1, r3, r2
 8010cae:	fb01 f202 	mul.w	r2, r1, r2
 8010cb2:	1a9b      	subs	r3, r3, r2
 8010cb4:	693a      	ldr	r2, [r7, #16]
 8010cb6:	4413      	add	r3, r2
 8010cb8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010cbc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010cbe:	693b      	ldr	r3, [r7, #16]
 8010cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010cc2:	693b      	ldr	r3, [r7, #16]
 8010cc4:	899b      	ldrh	r3, [r3, #12]
 8010cc6:	4619      	mov	r1, r3
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8010cce:	4413      	add	r3, r2
 8010cd0:	4619      	mov	r1, r3
 8010cd2:	6938      	ldr	r0, [r7, #16]
 8010cd4:	f7ff feec 	bl	8010ab0 <move_window>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d16f      	bne.n	8010dbe <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010cde:	693b      	ldr	r3, [r7, #16]
 8010ce0:	899b      	ldrh	r3, [r3, #12]
 8010ce2:	461a      	mov	r2, r3
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	fbb3 f1f2 	udiv	r1, r3, r2
 8010cea:	fb01 f202 	mul.w	r2, r1, r2
 8010cee:	1a9b      	subs	r3, r3, r2
 8010cf0:	693a      	ldr	r2, [r7, #16]
 8010cf2:	4413      	add	r3, r2
 8010cf4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010cf8:	021b      	lsls	r3, r3, #8
 8010cfa:	461a      	mov	r2, r3
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	4313      	orrs	r3, r2
 8010d00:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	f003 0301 	and.w	r3, r3, #1
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d002      	beq.n	8010d12 <get_fat+0xe8>
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	091b      	lsrs	r3, r3, #4
 8010d10:	e002      	b.n	8010d18 <get_fat+0xee>
 8010d12:	68bb      	ldr	r3, [r7, #8]
 8010d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010d18:	617b      	str	r3, [r7, #20]
			break;
 8010d1a:	e055      	b.n	8010dc8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010d1c:	693b      	ldr	r3, [r7, #16]
 8010d1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d20:	693b      	ldr	r3, [r7, #16]
 8010d22:	899b      	ldrh	r3, [r3, #12]
 8010d24:	085b      	lsrs	r3, r3, #1
 8010d26:	b29b      	uxth	r3, r3
 8010d28:	4619      	mov	r1, r3
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8010d30:	4413      	add	r3, r2
 8010d32:	4619      	mov	r1, r3
 8010d34:	6938      	ldr	r0, [r7, #16]
 8010d36:	f7ff febb 	bl	8010ab0 <move_window>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d140      	bne.n	8010dc2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010d40:	693b      	ldr	r3, [r7, #16]
 8010d42:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	005b      	lsls	r3, r3, #1
 8010d4a:	693a      	ldr	r2, [r7, #16]
 8010d4c:	8992      	ldrh	r2, [r2, #12]
 8010d4e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010d52:	fb00 f202 	mul.w	r2, r0, r2
 8010d56:	1a9b      	subs	r3, r3, r2
 8010d58:	440b      	add	r3, r1
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	f7ff fc34 	bl	80105c8 <ld_word>
 8010d60:	4603      	mov	r3, r0
 8010d62:	617b      	str	r3, [r7, #20]
			break;
 8010d64:	e030      	b.n	8010dc8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010d66:	693b      	ldr	r3, [r7, #16]
 8010d68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d6a:	693b      	ldr	r3, [r7, #16]
 8010d6c:	899b      	ldrh	r3, [r3, #12]
 8010d6e:	089b      	lsrs	r3, r3, #2
 8010d70:	b29b      	uxth	r3, r3
 8010d72:	4619      	mov	r1, r3
 8010d74:	683b      	ldr	r3, [r7, #0]
 8010d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8010d7a:	4413      	add	r3, r2
 8010d7c:	4619      	mov	r1, r3
 8010d7e:	6938      	ldr	r0, [r7, #16]
 8010d80:	f7ff fe96 	bl	8010ab0 <move_window>
 8010d84:	4603      	mov	r3, r0
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d11d      	bne.n	8010dc6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010d8a:	693b      	ldr	r3, [r7, #16]
 8010d8c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	009b      	lsls	r3, r3, #2
 8010d94:	693a      	ldr	r2, [r7, #16]
 8010d96:	8992      	ldrh	r2, [r2, #12]
 8010d98:	fbb3 f0f2 	udiv	r0, r3, r2
 8010d9c:	fb00 f202 	mul.w	r2, r0, r2
 8010da0:	1a9b      	subs	r3, r3, r2
 8010da2:	440b      	add	r3, r1
 8010da4:	4618      	mov	r0, r3
 8010da6:	f7ff fc27 	bl	80105f8 <ld_dword>
 8010daa:	4603      	mov	r3, r0
 8010dac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010db0:	617b      	str	r3, [r7, #20]
			break;
 8010db2:	e009      	b.n	8010dc8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010db4:	2301      	movs	r3, #1
 8010db6:	617b      	str	r3, [r7, #20]
 8010db8:	e006      	b.n	8010dc8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010dba:	bf00      	nop
 8010dbc:	e004      	b.n	8010dc8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010dbe:	bf00      	nop
 8010dc0:	e002      	b.n	8010dc8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010dc2:	bf00      	nop
 8010dc4:	e000      	b.n	8010dc8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010dc6:	bf00      	nop
		}
	}

	return val;
 8010dc8:	697b      	ldr	r3, [r7, #20]
}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	3718      	adds	r7, #24
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}

08010dd2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010dd2:	b590      	push	{r4, r7, lr}
 8010dd4:	b089      	sub	sp, #36	; 0x24
 8010dd6:	af00      	add	r7, sp, #0
 8010dd8:	60f8      	str	r0, [r7, #12]
 8010dda:	60b9      	str	r1, [r7, #8]
 8010ddc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010dde:	2302      	movs	r3, #2
 8010de0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010de2:	68bb      	ldr	r3, [r7, #8]
 8010de4:	2b01      	cmp	r3, #1
 8010de6:	f240 8102 	bls.w	8010fee <put_fat+0x21c>
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	699b      	ldr	r3, [r3, #24]
 8010dee:	68ba      	ldr	r2, [r7, #8]
 8010df0:	429a      	cmp	r2, r3
 8010df2:	f080 80fc 	bcs.w	8010fee <put_fat+0x21c>
		switch (fs->fs_type) {
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	781b      	ldrb	r3, [r3, #0]
 8010dfa:	2b03      	cmp	r3, #3
 8010dfc:	f000 80b6 	beq.w	8010f6c <put_fat+0x19a>
 8010e00:	2b03      	cmp	r3, #3
 8010e02:	f300 80fd 	bgt.w	8011000 <put_fat+0x22e>
 8010e06:	2b01      	cmp	r3, #1
 8010e08:	d003      	beq.n	8010e12 <put_fat+0x40>
 8010e0a:	2b02      	cmp	r3, #2
 8010e0c:	f000 8083 	beq.w	8010f16 <put_fat+0x144>
 8010e10:	e0f6      	b.n	8011000 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010e12:	68bb      	ldr	r3, [r7, #8]
 8010e14:	61bb      	str	r3, [r7, #24]
 8010e16:	69bb      	ldr	r3, [r7, #24]
 8010e18:	085b      	lsrs	r3, r3, #1
 8010e1a:	69ba      	ldr	r2, [r7, #24]
 8010e1c:	4413      	add	r3, r2
 8010e1e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	899b      	ldrh	r3, [r3, #12]
 8010e28:	4619      	mov	r1, r3
 8010e2a:	69bb      	ldr	r3, [r7, #24]
 8010e2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e30:	4413      	add	r3, r2
 8010e32:	4619      	mov	r1, r3
 8010e34:	68f8      	ldr	r0, [r7, #12]
 8010e36:	f7ff fe3b 	bl	8010ab0 <move_window>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010e3e:	7ffb      	ldrb	r3, [r7, #31]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	f040 80d6 	bne.w	8010ff2 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010e4c:	69bb      	ldr	r3, [r7, #24]
 8010e4e:	1c5a      	adds	r2, r3, #1
 8010e50:	61ba      	str	r2, [r7, #24]
 8010e52:	68fa      	ldr	r2, [r7, #12]
 8010e54:	8992      	ldrh	r2, [r2, #12]
 8010e56:	fbb3 f0f2 	udiv	r0, r3, r2
 8010e5a:	fb00 f202 	mul.w	r2, r0, r2
 8010e5e:	1a9b      	subs	r3, r3, r2
 8010e60:	440b      	add	r3, r1
 8010e62:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010e64:	68bb      	ldr	r3, [r7, #8]
 8010e66:	f003 0301 	and.w	r3, r3, #1
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d00d      	beq.n	8010e8a <put_fat+0xb8>
 8010e6e:	697b      	ldr	r3, [r7, #20]
 8010e70:	781b      	ldrb	r3, [r3, #0]
 8010e72:	b25b      	sxtb	r3, r3
 8010e74:	f003 030f 	and.w	r3, r3, #15
 8010e78:	b25a      	sxtb	r2, r3
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	b2db      	uxtb	r3, r3
 8010e7e:	011b      	lsls	r3, r3, #4
 8010e80:	b25b      	sxtb	r3, r3
 8010e82:	4313      	orrs	r3, r2
 8010e84:	b25b      	sxtb	r3, r3
 8010e86:	b2db      	uxtb	r3, r3
 8010e88:	e001      	b.n	8010e8e <put_fat+0xbc>
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	b2db      	uxtb	r3, r3
 8010e8e:	697a      	ldr	r2, [r7, #20]
 8010e90:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	2201      	movs	r2, #1
 8010e96:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	899b      	ldrh	r3, [r3, #12]
 8010ea0:	4619      	mov	r1, r3
 8010ea2:	69bb      	ldr	r3, [r7, #24]
 8010ea4:	fbb3 f3f1 	udiv	r3, r3, r1
 8010ea8:	4413      	add	r3, r2
 8010eaa:	4619      	mov	r1, r3
 8010eac:	68f8      	ldr	r0, [r7, #12]
 8010eae:	f7ff fdff 	bl	8010ab0 <move_window>
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010eb6:	7ffb      	ldrb	r3, [r7, #31]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	f040 809c 	bne.w	8010ff6 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	899b      	ldrh	r3, [r3, #12]
 8010ec8:	461a      	mov	r2, r3
 8010eca:	69bb      	ldr	r3, [r7, #24]
 8010ecc:	fbb3 f0f2 	udiv	r0, r3, r2
 8010ed0:	fb00 f202 	mul.w	r2, r0, r2
 8010ed4:	1a9b      	subs	r3, r3, r2
 8010ed6:	440b      	add	r3, r1
 8010ed8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010eda:	68bb      	ldr	r3, [r7, #8]
 8010edc:	f003 0301 	and.w	r3, r3, #1
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d003      	beq.n	8010eec <put_fat+0x11a>
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	091b      	lsrs	r3, r3, #4
 8010ee8:	b2db      	uxtb	r3, r3
 8010eea:	e00e      	b.n	8010f0a <put_fat+0x138>
 8010eec:	697b      	ldr	r3, [r7, #20]
 8010eee:	781b      	ldrb	r3, [r3, #0]
 8010ef0:	b25b      	sxtb	r3, r3
 8010ef2:	f023 030f 	bic.w	r3, r3, #15
 8010ef6:	b25a      	sxtb	r2, r3
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	0a1b      	lsrs	r3, r3, #8
 8010efc:	b25b      	sxtb	r3, r3
 8010efe:	f003 030f 	and.w	r3, r3, #15
 8010f02:	b25b      	sxtb	r3, r3
 8010f04:	4313      	orrs	r3, r2
 8010f06:	b25b      	sxtb	r3, r3
 8010f08:	b2db      	uxtb	r3, r3
 8010f0a:	697a      	ldr	r2, [r7, #20]
 8010f0c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	2201      	movs	r2, #1
 8010f12:	70da      	strb	r2, [r3, #3]
			break;
 8010f14:	e074      	b.n	8011000 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	899b      	ldrh	r3, [r3, #12]
 8010f1e:	085b      	lsrs	r3, r3, #1
 8010f20:	b29b      	uxth	r3, r3
 8010f22:	4619      	mov	r1, r3
 8010f24:	68bb      	ldr	r3, [r7, #8]
 8010f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8010f2a:	4413      	add	r3, r2
 8010f2c:	4619      	mov	r1, r3
 8010f2e:	68f8      	ldr	r0, [r7, #12]
 8010f30:	f7ff fdbe 	bl	8010ab0 <move_window>
 8010f34:	4603      	mov	r3, r0
 8010f36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010f38:	7ffb      	ldrb	r3, [r7, #31]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d15d      	bne.n	8010ffa <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010f44:	68bb      	ldr	r3, [r7, #8]
 8010f46:	005b      	lsls	r3, r3, #1
 8010f48:	68fa      	ldr	r2, [r7, #12]
 8010f4a:	8992      	ldrh	r2, [r2, #12]
 8010f4c:	fbb3 f0f2 	udiv	r0, r3, r2
 8010f50:	fb00 f202 	mul.w	r2, r0, r2
 8010f54:	1a9b      	subs	r3, r3, r2
 8010f56:	440b      	add	r3, r1
 8010f58:	687a      	ldr	r2, [r7, #4]
 8010f5a:	b292      	uxth	r2, r2
 8010f5c:	4611      	mov	r1, r2
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f7ff fb6d 	bl	801063e <st_word>
			fs->wflag = 1;
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	2201      	movs	r2, #1
 8010f68:	70da      	strb	r2, [r3, #3]
			break;
 8010f6a:	e049      	b.n	8011000 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	899b      	ldrh	r3, [r3, #12]
 8010f74:	089b      	lsrs	r3, r3, #2
 8010f76:	b29b      	uxth	r3, r3
 8010f78:	4619      	mov	r1, r3
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8010f80:	4413      	add	r3, r2
 8010f82:	4619      	mov	r1, r3
 8010f84:	68f8      	ldr	r0, [r7, #12]
 8010f86:	f7ff fd93 	bl	8010ab0 <move_window>
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010f8e:	7ffb      	ldrb	r3, [r7, #31]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d134      	bne.n	8010ffe <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010fa0:	68bb      	ldr	r3, [r7, #8]
 8010fa2:	009b      	lsls	r3, r3, #2
 8010fa4:	68fa      	ldr	r2, [r7, #12]
 8010fa6:	8992      	ldrh	r2, [r2, #12]
 8010fa8:	fbb3 f0f2 	udiv	r0, r3, r2
 8010fac:	fb00 f202 	mul.w	r2, r0, r2
 8010fb0:	1a9b      	subs	r3, r3, r2
 8010fb2:	440b      	add	r3, r1
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	f7ff fb1f 	bl	80105f8 <ld_dword>
 8010fba:	4603      	mov	r3, r0
 8010fbc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010fc0:	4323      	orrs	r3, r4
 8010fc2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010fca:	68bb      	ldr	r3, [r7, #8]
 8010fcc:	009b      	lsls	r3, r3, #2
 8010fce:	68fa      	ldr	r2, [r7, #12]
 8010fd0:	8992      	ldrh	r2, [r2, #12]
 8010fd2:	fbb3 f0f2 	udiv	r0, r3, r2
 8010fd6:	fb00 f202 	mul.w	r2, r0, r2
 8010fda:	1a9b      	subs	r3, r3, r2
 8010fdc:	440b      	add	r3, r1
 8010fde:	6879      	ldr	r1, [r7, #4]
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7ff fb47 	bl	8010674 <st_dword>
			fs->wflag = 1;
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	2201      	movs	r2, #1
 8010fea:	70da      	strb	r2, [r3, #3]
			break;
 8010fec:	e008      	b.n	8011000 <put_fat+0x22e>
		}
	}
 8010fee:	bf00      	nop
 8010ff0:	e006      	b.n	8011000 <put_fat+0x22e>
			if (res != FR_OK) break;
 8010ff2:	bf00      	nop
 8010ff4:	e004      	b.n	8011000 <put_fat+0x22e>
			if (res != FR_OK) break;
 8010ff6:	bf00      	nop
 8010ff8:	e002      	b.n	8011000 <put_fat+0x22e>
			if (res != FR_OK) break;
 8010ffa:	bf00      	nop
 8010ffc:	e000      	b.n	8011000 <put_fat+0x22e>
			if (res != FR_OK) break;
 8010ffe:	bf00      	nop
	return res;
 8011000:	7ffb      	ldrb	r3, [r7, #31]
}
 8011002:	4618      	mov	r0, r3
 8011004:	3724      	adds	r7, #36	; 0x24
 8011006:	46bd      	mov	sp, r7
 8011008:	bd90      	pop	{r4, r7, pc}

0801100a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801100a:	b580      	push	{r7, lr}
 801100c:	b088      	sub	sp, #32
 801100e:	af00      	add	r7, sp, #0
 8011010:	60f8      	str	r0, [r7, #12]
 8011012:	60b9      	str	r1, [r7, #8]
 8011014:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011016:	2300      	movs	r3, #0
 8011018:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011020:	68bb      	ldr	r3, [r7, #8]
 8011022:	2b01      	cmp	r3, #1
 8011024:	d904      	bls.n	8011030 <remove_chain+0x26>
 8011026:	69bb      	ldr	r3, [r7, #24]
 8011028:	699b      	ldr	r3, [r3, #24]
 801102a:	68ba      	ldr	r2, [r7, #8]
 801102c:	429a      	cmp	r2, r3
 801102e:	d301      	bcc.n	8011034 <remove_chain+0x2a>
 8011030:	2302      	movs	r3, #2
 8011032:	e04b      	b.n	80110cc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d00c      	beq.n	8011054 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801103a:	f04f 32ff 	mov.w	r2, #4294967295
 801103e:	6879      	ldr	r1, [r7, #4]
 8011040:	69b8      	ldr	r0, [r7, #24]
 8011042:	f7ff fec6 	bl	8010dd2 <put_fat>
 8011046:	4603      	mov	r3, r0
 8011048:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801104a:	7ffb      	ldrb	r3, [r7, #31]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d001      	beq.n	8011054 <remove_chain+0x4a>
 8011050:	7ffb      	ldrb	r3, [r7, #31]
 8011052:	e03b      	b.n	80110cc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011054:	68b9      	ldr	r1, [r7, #8]
 8011056:	68f8      	ldr	r0, [r7, #12]
 8011058:	f7ff fde7 	bl	8010c2a <get_fat>
 801105c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801105e:	697b      	ldr	r3, [r7, #20]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d031      	beq.n	80110c8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011064:	697b      	ldr	r3, [r7, #20]
 8011066:	2b01      	cmp	r3, #1
 8011068:	d101      	bne.n	801106e <remove_chain+0x64>
 801106a:	2302      	movs	r3, #2
 801106c:	e02e      	b.n	80110cc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801106e:	697b      	ldr	r3, [r7, #20]
 8011070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011074:	d101      	bne.n	801107a <remove_chain+0x70>
 8011076:	2301      	movs	r3, #1
 8011078:	e028      	b.n	80110cc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801107a:	2200      	movs	r2, #0
 801107c:	68b9      	ldr	r1, [r7, #8]
 801107e:	69b8      	ldr	r0, [r7, #24]
 8011080:	f7ff fea7 	bl	8010dd2 <put_fat>
 8011084:	4603      	mov	r3, r0
 8011086:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011088:	7ffb      	ldrb	r3, [r7, #31]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d001      	beq.n	8011092 <remove_chain+0x88>
 801108e:	7ffb      	ldrb	r3, [r7, #31]
 8011090:	e01c      	b.n	80110cc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011092:	69bb      	ldr	r3, [r7, #24]
 8011094:	695a      	ldr	r2, [r3, #20]
 8011096:	69bb      	ldr	r3, [r7, #24]
 8011098:	699b      	ldr	r3, [r3, #24]
 801109a:	3b02      	subs	r3, #2
 801109c:	429a      	cmp	r2, r3
 801109e:	d20b      	bcs.n	80110b8 <remove_chain+0xae>
			fs->free_clst++;
 80110a0:	69bb      	ldr	r3, [r7, #24]
 80110a2:	695b      	ldr	r3, [r3, #20]
 80110a4:	1c5a      	adds	r2, r3, #1
 80110a6:	69bb      	ldr	r3, [r7, #24]
 80110a8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80110aa:	69bb      	ldr	r3, [r7, #24]
 80110ac:	791b      	ldrb	r3, [r3, #4]
 80110ae:	f043 0301 	orr.w	r3, r3, #1
 80110b2:	b2da      	uxtb	r2, r3
 80110b4:	69bb      	ldr	r3, [r7, #24]
 80110b6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80110b8:	697b      	ldr	r3, [r7, #20]
 80110ba:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80110bc:	69bb      	ldr	r3, [r7, #24]
 80110be:	699b      	ldr	r3, [r3, #24]
 80110c0:	68ba      	ldr	r2, [r7, #8]
 80110c2:	429a      	cmp	r2, r3
 80110c4:	d3c6      	bcc.n	8011054 <remove_chain+0x4a>
 80110c6:	e000      	b.n	80110ca <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80110c8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80110ca:	2300      	movs	r3, #0
}
 80110cc:	4618      	mov	r0, r3
 80110ce:	3720      	adds	r7, #32
 80110d0:	46bd      	mov	sp, r7
 80110d2:	bd80      	pop	{r7, pc}

080110d4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b088      	sub	sp, #32
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]
 80110dc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80110e4:	683b      	ldr	r3, [r7, #0]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d10d      	bne.n	8011106 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80110ea:	693b      	ldr	r3, [r7, #16]
 80110ec:	691b      	ldr	r3, [r3, #16]
 80110ee:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80110f0:	69bb      	ldr	r3, [r7, #24]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d004      	beq.n	8011100 <create_chain+0x2c>
 80110f6:	693b      	ldr	r3, [r7, #16]
 80110f8:	699b      	ldr	r3, [r3, #24]
 80110fa:	69ba      	ldr	r2, [r7, #24]
 80110fc:	429a      	cmp	r2, r3
 80110fe:	d31b      	bcc.n	8011138 <create_chain+0x64>
 8011100:	2301      	movs	r3, #1
 8011102:	61bb      	str	r3, [r7, #24]
 8011104:	e018      	b.n	8011138 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011106:	6839      	ldr	r1, [r7, #0]
 8011108:	6878      	ldr	r0, [r7, #4]
 801110a:	f7ff fd8e 	bl	8010c2a <get_fat>
 801110e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	2b01      	cmp	r3, #1
 8011114:	d801      	bhi.n	801111a <create_chain+0x46>
 8011116:	2301      	movs	r3, #1
 8011118:	e070      	b.n	80111fc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011120:	d101      	bne.n	8011126 <create_chain+0x52>
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	e06a      	b.n	80111fc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011126:	693b      	ldr	r3, [r7, #16]
 8011128:	699b      	ldr	r3, [r3, #24]
 801112a:	68fa      	ldr	r2, [r7, #12]
 801112c:	429a      	cmp	r2, r3
 801112e:	d201      	bcs.n	8011134 <create_chain+0x60>
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	e063      	b.n	80111fc <create_chain+0x128>
		scl = clst;
 8011134:	683b      	ldr	r3, [r7, #0]
 8011136:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011138:	69bb      	ldr	r3, [r7, #24]
 801113a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801113c:	69fb      	ldr	r3, [r7, #28]
 801113e:	3301      	adds	r3, #1
 8011140:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011142:	693b      	ldr	r3, [r7, #16]
 8011144:	699b      	ldr	r3, [r3, #24]
 8011146:	69fa      	ldr	r2, [r7, #28]
 8011148:	429a      	cmp	r2, r3
 801114a:	d307      	bcc.n	801115c <create_chain+0x88>
				ncl = 2;
 801114c:	2302      	movs	r3, #2
 801114e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011150:	69fa      	ldr	r2, [r7, #28]
 8011152:	69bb      	ldr	r3, [r7, #24]
 8011154:	429a      	cmp	r2, r3
 8011156:	d901      	bls.n	801115c <create_chain+0x88>
 8011158:	2300      	movs	r3, #0
 801115a:	e04f      	b.n	80111fc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801115c:	69f9      	ldr	r1, [r7, #28]
 801115e:	6878      	ldr	r0, [r7, #4]
 8011160:	f7ff fd63 	bl	8010c2a <get_fat>
 8011164:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d00e      	beq.n	801118a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	2b01      	cmp	r3, #1
 8011170:	d003      	beq.n	801117a <create_chain+0xa6>
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011178:	d101      	bne.n	801117e <create_chain+0xaa>
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	e03e      	b.n	80111fc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801117e:	69fa      	ldr	r2, [r7, #28]
 8011180:	69bb      	ldr	r3, [r7, #24]
 8011182:	429a      	cmp	r2, r3
 8011184:	d1da      	bne.n	801113c <create_chain+0x68>
 8011186:	2300      	movs	r3, #0
 8011188:	e038      	b.n	80111fc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801118a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801118c:	f04f 32ff 	mov.w	r2, #4294967295
 8011190:	69f9      	ldr	r1, [r7, #28]
 8011192:	6938      	ldr	r0, [r7, #16]
 8011194:	f7ff fe1d 	bl	8010dd2 <put_fat>
 8011198:	4603      	mov	r3, r0
 801119a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801119c:	7dfb      	ldrb	r3, [r7, #23]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d109      	bne.n	80111b6 <create_chain+0xe2>
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d006      	beq.n	80111b6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80111a8:	69fa      	ldr	r2, [r7, #28]
 80111aa:	6839      	ldr	r1, [r7, #0]
 80111ac:	6938      	ldr	r0, [r7, #16]
 80111ae:	f7ff fe10 	bl	8010dd2 <put_fat>
 80111b2:	4603      	mov	r3, r0
 80111b4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80111b6:	7dfb      	ldrb	r3, [r7, #23]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d116      	bne.n	80111ea <create_chain+0x116>
		fs->last_clst = ncl;
 80111bc:	693b      	ldr	r3, [r7, #16]
 80111be:	69fa      	ldr	r2, [r7, #28]
 80111c0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80111c2:	693b      	ldr	r3, [r7, #16]
 80111c4:	695a      	ldr	r2, [r3, #20]
 80111c6:	693b      	ldr	r3, [r7, #16]
 80111c8:	699b      	ldr	r3, [r3, #24]
 80111ca:	3b02      	subs	r3, #2
 80111cc:	429a      	cmp	r2, r3
 80111ce:	d804      	bhi.n	80111da <create_chain+0x106>
 80111d0:	693b      	ldr	r3, [r7, #16]
 80111d2:	695b      	ldr	r3, [r3, #20]
 80111d4:	1e5a      	subs	r2, r3, #1
 80111d6:	693b      	ldr	r3, [r7, #16]
 80111d8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80111da:	693b      	ldr	r3, [r7, #16]
 80111dc:	791b      	ldrb	r3, [r3, #4]
 80111de:	f043 0301 	orr.w	r3, r3, #1
 80111e2:	b2da      	uxtb	r2, r3
 80111e4:	693b      	ldr	r3, [r7, #16]
 80111e6:	711a      	strb	r2, [r3, #4]
 80111e8:	e007      	b.n	80111fa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80111ea:	7dfb      	ldrb	r3, [r7, #23]
 80111ec:	2b01      	cmp	r3, #1
 80111ee:	d102      	bne.n	80111f6 <create_chain+0x122>
 80111f0:	f04f 33ff 	mov.w	r3, #4294967295
 80111f4:	e000      	b.n	80111f8 <create_chain+0x124>
 80111f6:	2301      	movs	r3, #1
 80111f8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80111fa:	69fb      	ldr	r3, [r7, #28]
}
 80111fc:	4618      	mov	r0, r3
 80111fe:	3720      	adds	r7, #32
 8011200:	46bd      	mov	sp, r7
 8011202:	bd80      	pop	{r7, pc}

08011204 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011204:	b480      	push	{r7}
 8011206:	b087      	sub	sp, #28
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
 801120c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011218:	3304      	adds	r3, #4
 801121a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	899b      	ldrh	r3, [r3, #12]
 8011220:	461a      	mov	r2, r3
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	fbb3 f3f2 	udiv	r3, r3, r2
 8011228:	68fa      	ldr	r2, [r7, #12]
 801122a:	8952      	ldrh	r2, [r2, #10]
 801122c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011230:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	1d1a      	adds	r2, r3, #4
 8011236:	613a      	str	r2, [r7, #16]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801123c:	68bb      	ldr	r3, [r7, #8]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d101      	bne.n	8011246 <clmt_clust+0x42>
 8011242:	2300      	movs	r3, #0
 8011244:	e010      	b.n	8011268 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011246:	697a      	ldr	r2, [r7, #20]
 8011248:	68bb      	ldr	r3, [r7, #8]
 801124a:	429a      	cmp	r2, r3
 801124c:	d307      	bcc.n	801125e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801124e:	697a      	ldr	r2, [r7, #20]
 8011250:	68bb      	ldr	r3, [r7, #8]
 8011252:	1ad3      	subs	r3, r2, r3
 8011254:	617b      	str	r3, [r7, #20]
 8011256:	693b      	ldr	r3, [r7, #16]
 8011258:	3304      	adds	r3, #4
 801125a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801125c:	e7e9      	b.n	8011232 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801125e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011260:	693b      	ldr	r3, [r7, #16]
 8011262:	681a      	ldr	r2, [r3, #0]
 8011264:	697b      	ldr	r3, [r7, #20]
 8011266:	4413      	add	r3, r2
}
 8011268:	4618      	mov	r0, r3
 801126a:	371c      	adds	r7, #28
 801126c:	46bd      	mov	sp, r7
 801126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011272:	4770      	bx	lr

08011274 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011274:	b580      	push	{r7, lr}
 8011276:	b086      	sub	sp, #24
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
 801127c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801128a:	d204      	bcs.n	8011296 <dir_sdi+0x22>
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	f003 031f 	and.w	r3, r3, #31
 8011292:	2b00      	cmp	r3, #0
 8011294:	d001      	beq.n	801129a <dir_sdi+0x26>
		return FR_INT_ERR;
 8011296:	2302      	movs	r3, #2
 8011298:	e071      	b.n	801137e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	683a      	ldr	r2, [r7, #0]
 801129e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	689b      	ldr	r3, [r3, #8]
 80112a4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80112a6:	697b      	ldr	r3, [r7, #20]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d106      	bne.n	80112ba <dir_sdi+0x46>
 80112ac:	693b      	ldr	r3, [r7, #16]
 80112ae:	781b      	ldrb	r3, [r3, #0]
 80112b0:	2b02      	cmp	r3, #2
 80112b2:	d902      	bls.n	80112ba <dir_sdi+0x46>
		clst = fs->dirbase;
 80112b4:	693b      	ldr	r3, [r7, #16]
 80112b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112b8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80112ba:	697b      	ldr	r3, [r7, #20]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d10c      	bne.n	80112da <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80112c0:	683b      	ldr	r3, [r7, #0]
 80112c2:	095b      	lsrs	r3, r3, #5
 80112c4:	693a      	ldr	r2, [r7, #16]
 80112c6:	8912      	ldrh	r2, [r2, #8]
 80112c8:	4293      	cmp	r3, r2
 80112ca:	d301      	bcc.n	80112d0 <dir_sdi+0x5c>
 80112cc:	2302      	movs	r3, #2
 80112ce:	e056      	b.n	801137e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80112d0:	693b      	ldr	r3, [r7, #16]
 80112d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	61da      	str	r2, [r3, #28]
 80112d8:	e02d      	b.n	8011336 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80112da:	693b      	ldr	r3, [r7, #16]
 80112dc:	895b      	ldrh	r3, [r3, #10]
 80112de:	461a      	mov	r2, r3
 80112e0:	693b      	ldr	r3, [r7, #16]
 80112e2:	899b      	ldrh	r3, [r3, #12]
 80112e4:	fb02 f303 	mul.w	r3, r2, r3
 80112e8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80112ea:	e019      	b.n	8011320 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	6979      	ldr	r1, [r7, #20]
 80112f0:	4618      	mov	r0, r3
 80112f2:	f7ff fc9a 	bl	8010c2a <get_fat>
 80112f6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80112f8:	697b      	ldr	r3, [r7, #20]
 80112fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112fe:	d101      	bne.n	8011304 <dir_sdi+0x90>
 8011300:	2301      	movs	r3, #1
 8011302:	e03c      	b.n	801137e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011304:	697b      	ldr	r3, [r7, #20]
 8011306:	2b01      	cmp	r3, #1
 8011308:	d904      	bls.n	8011314 <dir_sdi+0xa0>
 801130a:	693b      	ldr	r3, [r7, #16]
 801130c:	699b      	ldr	r3, [r3, #24]
 801130e:	697a      	ldr	r2, [r7, #20]
 8011310:	429a      	cmp	r2, r3
 8011312:	d301      	bcc.n	8011318 <dir_sdi+0xa4>
 8011314:	2302      	movs	r3, #2
 8011316:	e032      	b.n	801137e <dir_sdi+0x10a>
			ofs -= csz;
 8011318:	683a      	ldr	r2, [r7, #0]
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	1ad3      	subs	r3, r2, r3
 801131e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011320:	683a      	ldr	r2, [r7, #0]
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	429a      	cmp	r2, r3
 8011326:	d2e1      	bcs.n	80112ec <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8011328:	6979      	ldr	r1, [r7, #20]
 801132a:	6938      	ldr	r0, [r7, #16]
 801132c:	f7ff fc5e 	bl	8010bec <clust2sect>
 8011330:	4602      	mov	r2, r0
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	697a      	ldr	r2, [r7, #20]
 801133a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	69db      	ldr	r3, [r3, #28]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d101      	bne.n	8011348 <dir_sdi+0xd4>
 8011344:	2302      	movs	r3, #2
 8011346:	e01a      	b.n	801137e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	69da      	ldr	r2, [r3, #28]
 801134c:	693b      	ldr	r3, [r7, #16]
 801134e:	899b      	ldrh	r3, [r3, #12]
 8011350:	4619      	mov	r1, r3
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	fbb3 f3f1 	udiv	r3, r3, r1
 8011358:	441a      	add	r2, r3
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801135e:	693b      	ldr	r3, [r7, #16]
 8011360:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011364:	693b      	ldr	r3, [r7, #16]
 8011366:	899b      	ldrh	r3, [r3, #12]
 8011368:	461a      	mov	r2, r3
 801136a:	683b      	ldr	r3, [r7, #0]
 801136c:	fbb3 f0f2 	udiv	r0, r3, r2
 8011370:	fb00 f202 	mul.w	r2, r0, r2
 8011374:	1a9b      	subs	r3, r3, r2
 8011376:	18ca      	adds	r2, r1, r3
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801137c:	2300      	movs	r3, #0
}
 801137e:	4618      	mov	r0, r3
 8011380:	3718      	adds	r7, #24
 8011382:	46bd      	mov	sp, r7
 8011384:	bd80      	pop	{r7, pc}

08011386 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011386:	b580      	push	{r7, lr}
 8011388:	b086      	sub	sp, #24
 801138a:	af00      	add	r7, sp, #0
 801138c:	6078      	str	r0, [r7, #4]
 801138e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	695b      	ldr	r3, [r3, #20]
 801139a:	3320      	adds	r3, #32
 801139c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	69db      	ldr	r3, [r3, #28]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d003      	beq.n	80113ae <dir_next+0x28>
 80113a6:	68bb      	ldr	r3, [r7, #8]
 80113a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80113ac:	d301      	bcc.n	80113b2 <dir_next+0x2c>
 80113ae:	2304      	movs	r3, #4
 80113b0:	e0bb      	b.n	801152a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	899b      	ldrh	r3, [r3, #12]
 80113b6:	461a      	mov	r2, r3
 80113b8:	68bb      	ldr	r3, [r7, #8]
 80113ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80113be:	fb01 f202 	mul.w	r2, r1, r2
 80113c2:	1a9b      	subs	r3, r3, r2
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	f040 809d 	bne.w	8011504 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	69db      	ldr	r3, [r3, #28]
 80113ce:	1c5a      	adds	r2, r3, #1
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	699b      	ldr	r3, [r3, #24]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d10b      	bne.n	80113f4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80113dc:	68bb      	ldr	r3, [r7, #8]
 80113de:	095b      	lsrs	r3, r3, #5
 80113e0:	68fa      	ldr	r2, [r7, #12]
 80113e2:	8912      	ldrh	r2, [r2, #8]
 80113e4:	4293      	cmp	r3, r2
 80113e6:	f0c0 808d 	bcc.w	8011504 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	2200      	movs	r2, #0
 80113ee:	61da      	str	r2, [r3, #28]
 80113f0:	2304      	movs	r3, #4
 80113f2:	e09a      	b.n	801152a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	899b      	ldrh	r3, [r3, #12]
 80113f8:	461a      	mov	r2, r3
 80113fa:	68bb      	ldr	r3, [r7, #8]
 80113fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8011400:	68fa      	ldr	r2, [r7, #12]
 8011402:	8952      	ldrh	r2, [r2, #10]
 8011404:	3a01      	subs	r2, #1
 8011406:	4013      	ands	r3, r2
 8011408:	2b00      	cmp	r3, #0
 801140a:	d17b      	bne.n	8011504 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801140c:	687a      	ldr	r2, [r7, #4]
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	699b      	ldr	r3, [r3, #24]
 8011412:	4619      	mov	r1, r3
 8011414:	4610      	mov	r0, r2
 8011416:	f7ff fc08 	bl	8010c2a <get_fat>
 801141a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801141c:	697b      	ldr	r3, [r7, #20]
 801141e:	2b01      	cmp	r3, #1
 8011420:	d801      	bhi.n	8011426 <dir_next+0xa0>
 8011422:	2302      	movs	r3, #2
 8011424:	e081      	b.n	801152a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011426:	697b      	ldr	r3, [r7, #20]
 8011428:	f1b3 3fff 	cmp.w	r3, #4294967295
 801142c:	d101      	bne.n	8011432 <dir_next+0xac>
 801142e:	2301      	movs	r3, #1
 8011430:	e07b      	b.n	801152a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	699b      	ldr	r3, [r3, #24]
 8011436:	697a      	ldr	r2, [r7, #20]
 8011438:	429a      	cmp	r2, r3
 801143a:	d359      	bcc.n	80114f0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801143c:	683b      	ldr	r3, [r7, #0]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d104      	bne.n	801144c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	2200      	movs	r2, #0
 8011446:	61da      	str	r2, [r3, #28]
 8011448:	2304      	movs	r3, #4
 801144a:	e06e      	b.n	801152a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801144c:	687a      	ldr	r2, [r7, #4]
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	699b      	ldr	r3, [r3, #24]
 8011452:	4619      	mov	r1, r3
 8011454:	4610      	mov	r0, r2
 8011456:	f7ff fe3d 	bl	80110d4 <create_chain>
 801145a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801145c:	697b      	ldr	r3, [r7, #20]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d101      	bne.n	8011466 <dir_next+0xe0>
 8011462:	2307      	movs	r3, #7
 8011464:	e061      	b.n	801152a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011466:	697b      	ldr	r3, [r7, #20]
 8011468:	2b01      	cmp	r3, #1
 801146a:	d101      	bne.n	8011470 <dir_next+0xea>
 801146c:	2302      	movs	r3, #2
 801146e:	e05c      	b.n	801152a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011470:	697b      	ldr	r3, [r7, #20]
 8011472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011476:	d101      	bne.n	801147c <dir_next+0xf6>
 8011478:	2301      	movs	r3, #1
 801147a:	e056      	b.n	801152a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801147c:	68f8      	ldr	r0, [r7, #12]
 801147e:	f7ff fad3 	bl	8010a28 <sync_window>
 8011482:	4603      	mov	r3, r0
 8011484:	2b00      	cmp	r3, #0
 8011486:	d001      	beq.n	801148c <dir_next+0x106>
 8011488:	2301      	movs	r3, #1
 801148a:	e04e      	b.n	801152a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	899b      	ldrh	r3, [r3, #12]
 8011496:	461a      	mov	r2, r3
 8011498:	2100      	movs	r1, #0
 801149a:	f7ff f938 	bl	801070e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801149e:	2300      	movs	r3, #0
 80114a0:	613b      	str	r3, [r7, #16]
 80114a2:	6979      	ldr	r1, [r7, #20]
 80114a4:	68f8      	ldr	r0, [r7, #12]
 80114a6:	f7ff fba1 	bl	8010bec <clust2sect>
 80114aa:	4602      	mov	r2, r0
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	631a      	str	r2, [r3, #48]	; 0x30
 80114b0:	e012      	b.n	80114d8 <dir_next+0x152>
						fs->wflag = 1;
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	2201      	movs	r2, #1
 80114b6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80114b8:	68f8      	ldr	r0, [r7, #12]
 80114ba:	f7ff fab5 	bl	8010a28 <sync_window>
 80114be:	4603      	mov	r3, r0
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d001      	beq.n	80114c8 <dir_next+0x142>
 80114c4:	2301      	movs	r3, #1
 80114c6:	e030      	b.n	801152a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80114c8:	693b      	ldr	r3, [r7, #16]
 80114ca:	3301      	adds	r3, #1
 80114cc:	613b      	str	r3, [r7, #16]
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114d2:	1c5a      	adds	r2, r3, #1
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	631a      	str	r2, [r3, #48]	; 0x30
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	895b      	ldrh	r3, [r3, #10]
 80114dc:	461a      	mov	r2, r3
 80114de:	693b      	ldr	r3, [r7, #16]
 80114e0:	4293      	cmp	r3, r2
 80114e2:	d3e6      	bcc.n	80114b2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80114e8:	693b      	ldr	r3, [r7, #16]
 80114ea:	1ad2      	subs	r2, r2, r3
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	697a      	ldr	r2, [r7, #20]
 80114f4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80114f6:	6979      	ldr	r1, [r7, #20]
 80114f8:	68f8      	ldr	r0, [r7, #12]
 80114fa:	f7ff fb77 	bl	8010bec <clust2sect>
 80114fe:	4602      	mov	r2, r0
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	68ba      	ldr	r2, [r7, #8]
 8011508:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	899b      	ldrh	r3, [r3, #12]
 8011514:	461a      	mov	r2, r3
 8011516:	68bb      	ldr	r3, [r7, #8]
 8011518:	fbb3 f0f2 	udiv	r0, r3, r2
 801151c:	fb00 f202 	mul.w	r2, r0, r2
 8011520:	1a9b      	subs	r3, r3, r2
 8011522:	18ca      	adds	r2, r1, r3
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011528:	2300      	movs	r3, #0
}
 801152a:	4618      	mov	r0, r3
 801152c:	3718      	adds	r7, #24
 801152e:	46bd      	mov	sp, r7
 8011530:	bd80      	pop	{r7, pc}

08011532 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011532:	b580      	push	{r7, lr}
 8011534:	b086      	sub	sp, #24
 8011536:	af00      	add	r7, sp, #0
 8011538:	6078      	str	r0, [r7, #4]
 801153a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011542:	2100      	movs	r1, #0
 8011544:	6878      	ldr	r0, [r7, #4]
 8011546:	f7ff fe95 	bl	8011274 <dir_sdi>
 801154a:	4603      	mov	r3, r0
 801154c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801154e:	7dfb      	ldrb	r3, [r7, #23]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d12b      	bne.n	80115ac <dir_alloc+0x7a>
		n = 0;
 8011554:	2300      	movs	r3, #0
 8011556:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	69db      	ldr	r3, [r3, #28]
 801155c:	4619      	mov	r1, r3
 801155e:	68f8      	ldr	r0, [r7, #12]
 8011560:	f7ff faa6 	bl	8010ab0 <move_window>
 8011564:	4603      	mov	r3, r0
 8011566:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011568:	7dfb      	ldrb	r3, [r7, #23]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d11d      	bne.n	80115aa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	6a1b      	ldr	r3, [r3, #32]
 8011572:	781b      	ldrb	r3, [r3, #0]
 8011574:	2be5      	cmp	r3, #229	; 0xe5
 8011576:	d004      	beq.n	8011582 <dir_alloc+0x50>
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	6a1b      	ldr	r3, [r3, #32]
 801157c:	781b      	ldrb	r3, [r3, #0]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d107      	bne.n	8011592 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011582:	693b      	ldr	r3, [r7, #16]
 8011584:	3301      	adds	r3, #1
 8011586:	613b      	str	r3, [r7, #16]
 8011588:	693a      	ldr	r2, [r7, #16]
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	429a      	cmp	r2, r3
 801158e:	d102      	bne.n	8011596 <dir_alloc+0x64>
 8011590:	e00c      	b.n	80115ac <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011592:	2300      	movs	r3, #0
 8011594:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011596:	2101      	movs	r1, #1
 8011598:	6878      	ldr	r0, [r7, #4]
 801159a:	f7ff fef4 	bl	8011386 <dir_next>
 801159e:	4603      	mov	r3, r0
 80115a0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80115a2:	7dfb      	ldrb	r3, [r7, #23]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d0d7      	beq.n	8011558 <dir_alloc+0x26>
 80115a8:	e000      	b.n	80115ac <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80115aa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80115ac:	7dfb      	ldrb	r3, [r7, #23]
 80115ae:	2b04      	cmp	r3, #4
 80115b0:	d101      	bne.n	80115b6 <dir_alloc+0x84>
 80115b2:	2307      	movs	r3, #7
 80115b4:	75fb      	strb	r3, [r7, #23]
	return res;
 80115b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80115b8:	4618      	mov	r0, r3
 80115ba:	3718      	adds	r7, #24
 80115bc:	46bd      	mov	sp, r7
 80115be:	bd80      	pop	{r7, pc}

080115c0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b084      	sub	sp, #16
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
 80115c8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	331a      	adds	r3, #26
 80115ce:	4618      	mov	r0, r3
 80115d0:	f7fe fffa 	bl	80105c8 <ld_word>
 80115d4:	4603      	mov	r3, r0
 80115d6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	781b      	ldrb	r3, [r3, #0]
 80115dc:	2b03      	cmp	r3, #3
 80115de:	d109      	bne.n	80115f4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	3314      	adds	r3, #20
 80115e4:	4618      	mov	r0, r3
 80115e6:	f7fe ffef 	bl	80105c8 <ld_word>
 80115ea:	4603      	mov	r3, r0
 80115ec:	041b      	lsls	r3, r3, #16
 80115ee:	68fa      	ldr	r2, [r7, #12]
 80115f0:	4313      	orrs	r3, r2
 80115f2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80115f4:	68fb      	ldr	r3, [r7, #12]
}
 80115f6:	4618      	mov	r0, r3
 80115f8:	3710      	adds	r7, #16
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}

080115fe <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80115fe:	b580      	push	{r7, lr}
 8011600:	b084      	sub	sp, #16
 8011602:	af00      	add	r7, sp, #0
 8011604:	60f8      	str	r0, [r7, #12]
 8011606:	60b9      	str	r1, [r7, #8]
 8011608:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801160a:	68bb      	ldr	r3, [r7, #8]
 801160c:	331a      	adds	r3, #26
 801160e:	687a      	ldr	r2, [r7, #4]
 8011610:	b292      	uxth	r2, r2
 8011612:	4611      	mov	r1, r2
 8011614:	4618      	mov	r0, r3
 8011616:	f7ff f812 	bl	801063e <st_word>
	if (fs->fs_type == FS_FAT32) {
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	781b      	ldrb	r3, [r3, #0]
 801161e:	2b03      	cmp	r3, #3
 8011620:	d109      	bne.n	8011636 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011622:	68bb      	ldr	r3, [r7, #8]
 8011624:	f103 0214 	add.w	r2, r3, #20
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	0c1b      	lsrs	r3, r3, #16
 801162c:	b29b      	uxth	r3, r3
 801162e:	4619      	mov	r1, r3
 8011630:	4610      	mov	r0, r2
 8011632:	f7ff f804 	bl	801063e <st_word>
	}
}
 8011636:	bf00      	nop
 8011638:	3710      	adds	r7, #16
 801163a:	46bd      	mov	sp, r7
 801163c:	bd80      	pop	{r7, pc}

0801163e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801163e:	b580      	push	{r7, lr}
 8011640:	b086      	sub	sp, #24
 8011642:	af00      	add	r7, sp, #0
 8011644:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801164c:	2100      	movs	r1, #0
 801164e:	6878      	ldr	r0, [r7, #4]
 8011650:	f7ff fe10 	bl	8011274 <dir_sdi>
 8011654:	4603      	mov	r3, r0
 8011656:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011658:	7dfb      	ldrb	r3, [r7, #23]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d001      	beq.n	8011662 <dir_find+0x24>
 801165e:	7dfb      	ldrb	r3, [r7, #23]
 8011660:	e03e      	b.n	80116e0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	69db      	ldr	r3, [r3, #28]
 8011666:	4619      	mov	r1, r3
 8011668:	6938      	ldr	r0, [r7, #16]
 801166a:	f7ff fa21 	bl	8010ab0 <move_window>
 801166e:	4603      	mov	r3, r0
 8011670:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011672:	7dfb      	ldrb	r3, [r7, #23]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d12f      	bne.n	80116d8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	6a1b      	ldr	r3, [r3, #32]
 801167c:	781b      	ldrb	r3, [r3, #0]
 801167e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011680:	7bfb      	ldrb	r3, [r7, #15]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d102      	bne.n	801168c <dir_find+0x4e>
 8011686:	2304      	movs	r3, #4
 8011688:	75fb      	strb	r3, [r7, #23]
 801168a:	e028      	b.n	80116de <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	6a1b      	ldr	r3, [r3, #32]
 8011690:	330b      	adds	r3, #11
 8011692:	781b      	ldrb	r3, [r3, #0]
 8011694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011698:	b2da      	uxtb	r2, r3
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	6a1b      	ldr	r3, [r3, #32]
 80116a2:	330b      	adds	r3, #11
 80116a4:	781b      	ldrb	r3, [r3, #0]
 80116a6:	f003 0308 	and.w	r3, r3, #8
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d10a      	bne.n	80116c4 <dir_find+0x86>
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	6a18      	ldr	r0, [r3, #32]
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	3324      	adds	r3, #36	; 0x24
 80116b6:	220b      	movs	r2, #11
 80116b8:	4619      	mov	r1, r3
 80116ba:	f7ff f843 	bl	8010744 <mem_cmp>
 80116be:	4603      	mov	r3, r0
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d00b      	beq.n	80116dc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80116c4:	2100      	movs	r1, #0
 80116c6:	6878      	ldr	r0, [r7, #4]
 80116c8:	f7ff fe5d 	bl	8011386 <dir_next>
 80116cc:	4603      	mov	r3, r0
 80116ce:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80116d0:	7dfb      	ldrb	r3, [r7, #23]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d0c5      	beq.n	8011662 <dir_find+0x24>
 80116d6:	e002      	b.n	80116de <dir_find+0xa0>
		if (res != FR_OK) break;
 80116d8:	bf00      	nop
 80116da:	e000      	b.n	80116de <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80116dc:	bf00      	nop

	return res;
 80116de:	7dfb      	ldrb	r3, [r7, #23]
}
 80116e0:	4618      	mov	r0, r3
 80116e2:	3718      	adds	r7, #24
 80116e4:	46bd      	mov	sp, r7
 80116e6:	bd80      	pop	{r7, pc}

080116e8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b084      	sub	sp, #16
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80116f6:	2101      	movs	r1, #1
 80116f8:	6878      	ldr	r0, [r7, #4]
 80116fa:	f7ff ff1a 	bl	8011532 <dir_alloc>
 80116fe:	4603      	mov	r3, r0
 8011700:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011702:	7bfb      	ldrb	r3, [r7, #15]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d11c      	bne.n	8011742 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	69db      	ldr	r3, [r3, #28]
 801170c:	4619      	mov	r1, r3
 801170e:	68b8      	ldr	r0, [r7, #8]
 8011710:	f7ff f9ce 	bl	8010ab0 <move_window>
 8011714:	4603      	mov	r3, r0
 8011716:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011718:	7bfb      	ldrb	r3, [r7, #15]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d111      	bne.n	8011742 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	6a1b      	ldr	r3, [r3, #32]
 8011722:	2220      	movs	r2, #32
 8011724:	2100      	movs	r1, #0
 8011726:	4618      	mov	r0, r3
 8011728:	f7fe fff1 	bl	801070e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	6a18      	ldr	r0, [r3, #32]
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	3324      	adds	r3, #36	; 0x24
 8011734:	220b      	movs	r2, #11
 8011736:	4619      	mov	r1, r3
 8011738:	f7fe ffc8 	bl	80106cc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801173c:	68bb      	ldr	r3, [r7, #8]
 801173e:	2201      	movs	r2, #1
 8011740:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8011742:	7bfb      	ldrb	r3, [r7, #15]
}
 8011744:	4618      	mov	r0, r3
 8011746:	3710      	adds	r7, #16
 8011748:	46bd      	mov	sp, r7
 801174a:	bd80      	pop	{r7, pc}

0801174c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801174c:	b580      	push	{r7, lr}
 801174e:	b086      	sub	sp, #24
 8011750:	af00      	add	r7, sp, #0
 8011752:	6078      	str	r0, [r7, #4]
 8011754:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	2200      	movs	r2, #0
 801175a:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	69db      	ldr	r3, [r3, #28]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d04e      	beq.n	8011802 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8011764:	2300      	movs	r3, #0
 8011766:	613b      	str	r3, [r7, #16]
 8011768:	693b      	ldr	r3, [r7, #16]
 801176a:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 801176c:	e021      	b.n	80117b2 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	6a1a      	ldr	r2, [r3, #32]
 8011772:	697b      	ldr	r3, [r7, #20]
 8011774:	1c59      	adds	r1, r3, #1
 8011776:	6179      	str	r1, [r7, #20]
 8011778:	4413      	add	r3, r2
 801177a:	781b      	ldrb	r3, [r3, #0]
 801177c:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 801177e:	7bfb      	ldrb	r3, [r7, #15]
 8011780:	2b20      	cmp	r3, #32
 8011782:	d100      	bne.n	8011786 <get_fileinfo+0x3a>
 8011784:	e015      	b.n	80117b2 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8011786:	7bfb      	ldrb	r3, [r7, #15]
 8011788:	2b05      	cmp	r3, #5
 801178a:	d101      	bne.n	8011790 <get_fileinfo+0x44>
 801178c:	23e5      	movs	r3, #229	; 0xe5
 801178e:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8011790:	697b      	ldr	r3, [r7, #20]
 8011792:	2b09      	cmp	r3, #9
 8011794:	d106      	bne.n	80117a4 <get_fileinfo+0x58>
 8011796:	693b      	ldr	r3, [r7, #16]
 8011798:	1c5a      	adds	r2, r3, #1
 801179a:	613a      	str	r2, [r7, #16]
 801179c:	683a      	ldr	r2, [r7, #0]
 801179e:	4413      	add	r3, r2
 80117a0:	222e      	movs	r2, #46	; 0x2e
 80117a2:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80117a4:	693b      	ldr	r3, [r7, #16]
 80117a6:	1c5a      	adds	r2, r3, #1
 80117a8:	613a      	str	r2, [r7, #16]
 80117aa:	683a      	ldr	r2, [r7, #0]
 80117ac:	4413      	add	r3, r2
 80117ae:	7bfa      	ldrb	r2, [r7, #15]
 80117b0:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80117b2:	697b      	ldr	r3, [r7, #20]
 80117b4:	2b0a      	cmp	r3, #10
 80117b6:	d9da      	bls.n	801176e <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80117b8:	683a      	ldr	r2, [r7, #0]
 80117ba:	693b      	ldr	r3, [r7, #16]
 80117bc:	4413      	add	r3, r2
 80117be:	3309      	adds	r3, #9
 80117c0:	2200      	movs	r2, #0
 80117c2:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	6a1b      	ldr	r3, [r3, #32]
 80117c8:	7ada      	ldrb	r2, [r3, #11]
 80117ca:	683b      	ldr	r3, [r7, #0]
 80117cc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	6a1b      	ldr	r3, [r3, #32]
 80117d2:	331c      	adds	r3, #28
 80117d4:	4618      	mov	r0, r3
 80117d6:	f7fe ff0f 	bl	80105f8 <ld_dword>
 80117da:	4602      	mov	r2, r0
 80117dc:	683b      	ldr	r3, [r7, #0]
 80117de:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	6a1b      	ldr	r3, [r3, #32]
 80117e4:	3316      	adds	r3, #22
 80117e6:	4618      	mov	r0, r3
 80117e8:	f7fe ff06 	bl	80105f8 <ld_dword>
 80117ec:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80117ee:	68bb      	ldr	r3, [r7, #8]
 80117f0:	b29a      	uxth	r2, r3
 80117f2:	683b      	ldr	r3, [r7, #0]
 80117f4:	80da      	strh	r2, [r3, #6]
 80117f6:	68bb      	ldr	r3, [r7, #8]
 80117f8:	0c1b      	lsrs	r3, r3, #16
 80117fa:	b29a      	uxth	r2, r3
 80117fc:	683b      	ldr	r3, [r7, #0]
 80117fe:	809a      	strh	r2, [r3, #4]
 8011800:	e000      	b.n	8011804 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8011802:	bf00      	nop
}
 8011804:	3718      	adds	r7, #24
 8011806:	46bd      	mov	sp, r7
 8011808:	bd80      	pop	{r7, pc}
	...

0801180c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801180c:	b580      	push	{r7, lr}
 801180e:	b088      	sub	sp, #32
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
 8011814:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8011816:	683b      	ldr	r3, [r7, #0]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	60fb      	str	r3, [r7, #12]
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	3324      	adds	r3, #36	; 0x24
 8011820:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8011822:	220b      	movs	r2, #11
 8011824:	2120      	movs	r1, #32
 8011826:	68b8      	ldr	r0, [r7, #8]
 8011828:	f7fe ff71 	bl	801070e <mem_set>
	si = i = 0; ni = 8;
 801182c:	2300      	movs	r3, #0
 801182e:	613b      	str	r3, [r7, #16]
 8011830:	693b      	ldr	r3, [r7, #16]
 8011832:	61fb      	str	r3, [r7, #28]
 8011834:	2308      	movs	r3, #8
 8011836:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011838:	69fb      	ldr	r3, [r7, #28]
 801183a:	1c5a      	adds	r2, r3, #1
 801183c:	61fa      	str	r2, [r7, #28]
 801183e:	68fa      	ldr	r2, [r7, #12]
 8011840:	4413      	add	r3, r2
 8011842:	781b      	ldrb	r3, [r3, #0]
 8011844:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011846:	7efb      	ldrb	r3, [r7, #27]
 8011848:	2b20      	cmp	r3, #32
 801184a:	d94e      	bls.n	80118ea <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801184c:	7efb      	ldrb	r3, [r7, #27]
 801184e:	2b2f      	cmp	r3, #47	; 0x2f
 8011850:	d006      	beq.n	8011860 <create_name+0x54>
 8011852:	7efb      	ldrb	r3, [r7, #27]
 8011854:	2b5c      	cmp	r3, #92	; 0x5c
 8011856:	d110      	bne.n	801187a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011858:	e002      	b.n	8011860 <create_name+0x54>
 801185a:	69fb      	ldr	r3, [r7, #28]
 801185c:	3301      	adds	r3, #1
 801185e:	61fb      	str	r3, [r7, #28]
 8011860:	68fa      	ldr	r2, [r7, #12]
 8011862:	69fb      	ldr	r3, [r7, #28]
 8011864:	4413      	add	r3, r2
 8011866:	781b      	ldrb	r3, [r3, #0]
 8011868:	2b2f      	cmp	r3, #47	; 0x2f
 801186a:	d0f6      	beq.n	801185a <create_name+0x4e>
 801186c:	68fa      	ldr	r2, [r7, #12]
 801186e:	69fb      	ldr	r3, [r7, #28]
 8011870:	4413      	add	r3, r2
 8011872:	781b      	ldrb	r3, [r3, #0]
 8011874:	2b5c      	cmp	r3, #92	; 0x5c
 8011876:	d0f0      	beq.n	801185a <create_name+0x4e>
			break;
 8011878:	e038      	b.n	80118ec <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801187a:	7efb      	ldrb	r3, [r7, #27]
 801187c:	2b2e      	cmp	r3, #46	; 0x2e
 801187e:	d003      	beq.n	8011888 <create_name+0x7c>
 8011880:	693a      	ldr	r2, [r7, #16]
 8011882:	697b      	ldr	r3, [r7, #20]
 8011884:	429a      	cmp	r2, r3
 8011886:	d30c      	bcc.n	80118a2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8011888:	697b      	ldr	r3, [r7, #20]
 801188a:	2b0b      	cmp	r3, #11
 801188c:	d002      	beq.n	8011894 <create_name+0x88>
 801188e:	7efb      	ldrb	r3, [r7, #27]
 8011890:	2b2e      	cmp	r3, #46	; 0x2e
 8011892:	d001      	beq.n	8011898 <create_name+0x8c>
 8011894:	2306      	movs	r3, #6
 8011896:	e044      	b.n	8011922 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8011898:	2308      	movs	r3, #8
 801189a:	613b      	str	r3, [r7, #16]
 801189c:	230b      	movs	r3, #11
 801189e:	617b      	str	r3, [r7, #20]
			continue;
 80118a0:	e022      	b.n	80118e8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80118a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	da04      	bge.n	80118b4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80118aa:	7efb      	ldrb	r3, [r7, #27]
 80118ac:	3b80      	subs	r3, #128	; 0x80
 80118ae:	4a1f      	ldr	r2, [pc, #124]	; (801192c <create_name+0x120>)
 80118b0:	5cd3      	ldrb	r3, [r2, r3]
 80118b2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80118b4:	7efb      	ldrb	r3, [r7, #27]
 80118b6:	4619      	mov	r1, r3
 80118b8:	481d      	ldr	r0, [pc, #116]	; (8011930 <create_name+0x124>)
 80118ba:	f7fe ff6a 	bl	8010792 <chk_chr>
 80118be:	4603      	mov	r3, r0
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d001      	beq.n	80118c8 <create_name+0xbc>
 80118c4:	2306      	movs	r3, #6
 80118c6:	e02c      	b.n	8011922 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80118c8:	7efb      	ldrb	r3, [r7, #27]
 80118ca:	2b60      	cmp	r3, #96	; 0x60
 80118cc:	d905      	bls.n	80118da <create_name+0xce>
 80118ce:	7efb      	ldrb	r3, [r7, #27]
 80118d0:	2b7a      	cmp	r3, #122	; 0x7a
 80118d2:	d802      	bhi.n	80118da <create_name+0xce>
 80118d4:	7efb      	ldrb	r3, [r7, #27]
 80118d6:	3b20      	subs	r3, #32
 80118d8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80118da:	693b      	ldr	r3, [r7, #16]
 80118dc:	1c5a      	adds	r2, r3, #1
 80118de:	613a      	str	r2, [r7, #16]
 80118e0:	68ba      	ldr	r2, [r7, #8]
 80118e2:	4413      	add	r3, r2
 80118e4:	7efa      	ldrb	r2, [r7, #27]
 80118e6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80118e8:	e7a6      	b.n	8011838 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80118ea:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80118ec:	68fa      	ldr	r2, [r7, #12]
 80118ee:	69fb      	ldr	r3, [r7, #28]
 80118f0:	441a      	add	r2, r3
 80118f2:	683b      	ldr	r3, [r7, #0]
 80118f4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80118f6:	693b      	ldr	r3, [r7, #16]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d101      	bne.n	8011900 <create_name+0xf4>
 80118fc:	2306      	movs	r3, #6
 80118fe:	e010      	b.n	8011922 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011900:	68bb      	ldr	r3, [r7, #8]
 8011902:	781b      	ldrb	r3, [r3, #0]
 8011904:	2be5      	cmp	r3, #229	; 0xe5
 8011906:	d102      	bne.n	801190e <create_name+0x102>
 8011908:	68bb      	ldr	r3, [r7, #8]
 801190a:	2205      	movs	r2, #5
 801190c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801190e:	7efb      	ldrb	r3, [r7, #27]
 8011910:	2b20      	cmp	r3, #32
 8011912:	d801      	bhi.n	8011918 <create_name+0x10c>
 8011914:	2204      	movs	r2, #4
 8011916:	e000      	b.n	801191a <create_name+0x10e>
 8011918:	2200      	movs	r2, #0
 801191a:	68bb      	ldr	r3, [r7, #8]
 801191c:	330b      	adds	r3, #11
 801191e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011920:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8011922:	4618      	mov	r0, r3
 8011924:	3720      	adds	r7, #32
 8011926:	46bd      	mov	sp, r7
 8011928:	bd80      	pop	{r7, pc}
 801192a:	bf00      	nop
 801192c:	08019484 	.word	0x08019484
 8011930:	0801940c 	.word	0x0801940c

08011934 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b086      	sub	sp, #24
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
 801193c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011942:	693b      	ldr	r3, [r7, #16]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011948:	e002      	b.n	8011950 <follow_path+0x1c>
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	3301      	adds	r3, #1
 801194e:	603b      	str	r3, [r7, #0]
 8011950:	683b      	ldr	r3, [r7, #0]
 8011952:	781b      	ldrb	r3, [r3, #0]
 8011954:	2b2f      	cmp	r3, #47	; 0x2f
 8011956:	d0f8      	beq.n	801194a <follow_path+0x16>
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	781b      	ldrb	r3, [r3, #0]
 801195c:	2b5c      	cmp	r3, #92	; 0x5c
 801195e:	d0f4      	beq.n	801194a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011960:	693b      	ldr	r3, [r7, #16]
 8011962:	2200      	movs	r2, #0
 8011964:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011966:	683b      	ldr	r3, [r7, #0]
 8011968:	781b      	ldrb	r3, [r3, #0]
 801196a:	2b1f      	cmp	r3, #31
 801196c:	d80a      	bhi.n	8011984 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	2280      	movs	r2, #128	; 0x80
 8011972:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8011976:	2100      	movs	r1, #0
 8011978:	6878      	ldr	r0, [r7, #4]
 801197a:	f7ff fc7b 	bl	8011274 <dir_sdi>
 801197e:	4603      	mov	r3, r0
 8011980:	75fb      	strb	r3, [r7, #23]
 8011982:	e048      	b.n	8011a16 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011984:	463b      	mov	r3, r7
 8011986:	4619      	mov	r1, r3
 8011988:	6878      	ldr	r0, [r7, #4]
 801198a:	f7ff ff3f 	bl	801180c <create_name>
 801198e:	4603      	mov	r3, r0
 8011990:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011992:	7dfb      	ldrb	r3, [r7, #23]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d139      	bne.n	8011a0c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011998:	6878      	ldr	r0, [r7, #4]
 801199a:	f7ff fe50 	bl	801163e <dir_find>
 801199e:	4603      	mov	r3, r0
 80119a0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80119a8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80119aa:	7dfb      	ldrb	r3, [r7, #23]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d00a      	beq.n	80119c6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80119b0:	7dfb      	ldrb	r3, [r7, #23]
 80119b2:	2b04      	cmp	r3, #4
 80119b4:	d12c      	bne.n	8011a10 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80119b6:	7afb      	ldrb	r3, [r7, #11]
 80119b8:	f003 0304 	and.w	r3, r3, #4
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d127      	bne.n	8011a10 <follow_path+0xdc>
 80119c0:	2305      	movs	r3, #5
 80119c2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80119c4:	e024      	b.n	8011a10 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80119c6:	7afb      	ldrb	r3, [r7, #11]
 80119c8:	f003 0304 	and.w	r3, r3, #4
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d121      	bne.n	8011a14 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80119d0:	693b      	ldr	r3, [r7, #16]
 80119d2:	799b      	ldrb	r3, [r3, #6]
 80119d4:	f003 0310 	and.w	r3, r3, #16
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d102      	bne.n	80119e2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80119dc:	2305      	movs	r3, #5
 80119de:	75fb      	strb	r3, [r7, #23]
 80119e0:	e019      	b.n	8011a16 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	695b      	ldr	r3, [r3, #20]
 80119ec:	68fa      	ldr	r2, [r7, #12]
 80119ee:	8992      	ldrh	r2, [r2, #12]
 80119f0:	fbb3 f0f2 	udiv	r0, r3, r2
 80119f4:	fb00 f202 	mul.w	r2, r0, r2
 80119f8:	1a9b      	subs	r3, r3, r2
 80119fa:	440b      	add	r3, r1
 80119fc:	4619      	mov	r1, r3
 80119fe:	68f8      	ldr	r0, [r7, #12]
 8011a00:	f7ff fdde 	bl	80115c0 <ld_clust>
 8011a04:	4602      	mov	r2, r0
 8011a06:	693b      	ldr	r3, [r7, #16]
 8011a08:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011a0a:	e7bb      	b.n	8011984 <follow_path+0x50>
			if (res != FR_OK) break;
 8011a0c:	bf00      	nop
 8011a0e:	e002      	b.n	8011a16 <follow_path+0xe2>
				break;
 8011a10:	bf00      	nop
 8011a12:	e000      	b.n	8011a16 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011a14:	bf00      	nop
			}
		}
	}

	return res;
 8011a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a18:	4618      	mov	r0, r3
 8011a1a:	3718      	adds	r7, #24
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd80      	pop	{r7, pc}

08011a20 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011a20:	b480      	push	{r7}
 8011a22:	b087      	sub	sp, #28
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011a28:	f04f 33ff 	mov.w	r3, #4294967295
 8011a2c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d031      	beq.n	8011a9a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	617b      	str	r3, [r7, #20]
 8011a3c:	e002      	b.n	8011a44 <get_ldnumber+0x24>
 8011a3e:	697b      	ldr	r3, [r7, #20]
 8011a40:	3301      	adds	r3, #1
 8011a42:	617b      	str	r3, [r7, #20]
 8011a44:	697b      	ldr	r3, [r7, #20]
 8011a46:	781b      	ldrb	r3, [r3, #0]
 8011a48:	2b20      	cmp	r3, #32
 8011a4a:	d903      	bls.n	8011a54 <get_ldnumber+0x34>
 8011a4c:	697b      	ldr	r3, [r7, #20]
 8011a4e:	781b      	ldrb	r3, [r3, #0]
 8011a50:	2b3a      	cmp	r3, #58	; 0x3a
 8011a52:	d1f4      	bne.n	8011a3e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011a54:	697b      	ldr	r3, [r7, #20]
 8011a56:	781b      	ldrb	r3, [r3, #0]
 8011a58:	2b3a      	cmp	r3, #58	; 0x3a
 8011a5a:	d11c      	bne.n	8011a96 <get_ldnumber+0x76>
			tp = *path;
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	1c5a      	adds	r2, r3, #1
 8011a66:	60fa      	str	r2, [r7, #12]
 8011a68:	781b      	ldrb	r3, [r3, #0]
 8011a6a:	3b30      	subs	r3, #48	; 0x30
 8011a6c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011a6e:	68bb      	ldr	r3, [r7, #8]
 8011a70:	2b09      	cmp	r3, #9
 8011a72:	d80e      	bhi.n	8011a92 <get_ldnumber+0x72>
 8011a74:	68fa      	ldr	r2, [r7, #12]
 8011a76:	697b      	ldr	r3, [r7, #20]
 8011a78:	429a      	cmp	r2, r3
 8011a7a:	d10a      	bne.n	8011a92 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011a7c:	68bb      	ldr	r3, [r7, #8]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d107      	bne.n	8011a92 <get_ldnumber+0x72>
					vol = (int)i;
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011a86:	697b      	ldr	r3, [r7, #20]
 8011a88:	3301      	adds	r3, #1
 8011a8a:	617b      	str	r3, [r7, #20]
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	697a      	ldr	r2, [r7, #20]
 8011a90:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011a92:	693b      	ldr	r3, [r7, #16]
 8011a94:	e002      	b.n	8011a9c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011a96:	2300      	movs	r3, #0
 8011a98:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011a9a:	693b      	ldr	r3, [r7, #16]
}
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	371c      	adds	r7, #28
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa6:	4770      	bx	lr

08011aa8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b082      	sub	sp, #8
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
 8011ab0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	70da      	strb	r2, [r3, #3]
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	f04f 32ff 	mov.w	r2, #4294967295
 8011abe:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011ac0:	6839      	ldr	r1, [r7, #0]
 8011ac2:	6878      	ldr	r0, [r7, #4]
 8011ac4:	f7fe fff4 	bl	8010ab0 <move_window>
 8011ac8:	4603      	mov	r3, r0
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d001      	beq.n	8011ad2 <check_fs+0x2a>
 8011ace:	2304      	movs	r3, #4
 8011ad0:	e038      	b.n	8011b44 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	3334      	adds	r3, #52	; 0x34
 8011ad6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011ada:	4618      	mov	r0, r3
 8011adc:	f7fe fd74 	bl	80105c8 <ld_word>
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	461a      	mov	r2, r3
 8011ae4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011ae8:	429a      	cmp	r2, r3
 8011aea:	d001      	beq.n	8011af0 <check_fs+0x48>
 8011aec:	2303      	movs	r3, #3
 8011aee:	e029      	b.n	8011b44 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011af6:	2be9      	cmp	r3, #233	; 0xe9
 8011af8:	d009      	beq.n	8011b0e <check_fs+0x66>
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011b00:	2beb      	cmp	r3, #235	; 0xeb
 8011b02:	d11e      	bne.n	8011b42 <check_fs+0x9a>
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8011b0a:	2b90      	cmp	r3, #144	; 0x90
 8011b0c:	d119      	bne.n	8011b42 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	3334      	adds	r3, #52	; 0x34
 8011b12:	3336      	adds	r3, #54	; 0x36
 8011b14:	4618      	mov	r0, r3
 8011b16:	f7fe fd6f 	bl	80105f8 <ld_dword>
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011b20:	4a0a      	ldr	r2, [pc, #40]	; (8011b4c <check_fs+0xa4>)
 8011b22:	4293      	cmp	r3, r2
 8011b24:	d101      	bne.n	8011b2a <check_fs+0x82>
 8011b26:	2300      	movs	r3, #0
 8011b28:	e00c      	b.n	8011b44 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	3334      	adds	r3, #52	; 0x34
 8011b2e:	3352      	adds	r3, #82	; 0x52
 8011b30:	4618      	mov	r0, r3
 8011b32:	f7fe fd61 	bl	80105f8 <ld_dword>
 8011b36:	4603      	mov	r3, r0
 8011b38:	4a05      	ldr	r2, [pc, #20]	; (8011b50 <check_fs+0xa8>)
 8011b3a:	4293      	cmp	r3, r2
 8011b3c:	d101      	bne.n	8011b42 <check_fs+0x9a>
 8011b3e:	2300      	movs	r3, #0
 8011b40:	e000      	b.n	8011b44 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011b42:	2302      	movs	r3, #2
}
 8011b44:	4618      	mov	r0, r3
 8011b46:	3708      	adds	r7, #8
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	bd80      	pop	{r7, pc}
 8011b4c:	00544146 	.word	0x00544146
 8011b50:	33544146 	.word	0x33544146

08011b54 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b096      	sub	sp, #88	; 0x58
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	60f8      	str	r0, [r7, #12]
 8011b5c:	60b9      	str	r1, [r7, #8]
 8011b5e:	4613      	mov	r3, r2
 8011b60:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011b62:	68bb      	ldr	r3, [r7, #8]
 8011b64:	2200      	movs	r2, #0
 8011b66:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011b68:	68f8      	ldr	r0, [r7, #12]
 8011b6a:	f7ff ff59 	bl	8011a20 <get_ldnumber>
 8011b6e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	da01      	bge.n	8011b7a <find_volume+0x26>
 8011b76:	230b      	movs	r3, #11
 8011b78:	e262      	b.n	8012040 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011b7a:	4a9f      	ldr	r2, [pc, #636]	; (8011df8 <find_volume+0x2a4>)
 8011b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011b82:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d101      	bne.n	8011b8e <find_volume+0x3a>
 8011b8a:	230c      	movs	r3, #12
 8011b8c:	e258      	b.n	8012040 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8011b8e:	68bb      	ldr	r3, [r7, #8]
 8011b90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011b92:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011b94:	79fb      	ldrb	r3, [r7, #7]
 8011b96:	f023 0301 	bic.w	r3, r3, #1
 8011b9a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b9e:	781b      	ldrb	r3, [r3, #0]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d01a      	beq.n	8011bda <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ba6:	785b      	ldrb	r3, [r3, #1]
 8011ba8:	4618      	mov	r0, r3
 8011baa:	f7fe fc6f 	bl	801048c <disk_status>
 8011bae:	4603      	mov	r3, r0
 8011bb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011bb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011bb8:	f003 0301 	and.w	r3, r3, #1
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d10c      	bne.n	8011bda <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011bc0:	79fb      	ldrb	r3, [r7, #7]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d007      	beq.n	8011bd6 <find_volume+0x82>
 8011bc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011bca:	f003 0304 	and.w	r3, r3, #4
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d001      	beq.n	8011bd6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011bd2:	230a      	movs	r3, #10
 8011bd4:	e234      	b.n	8012040 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	e232      	b.n	8012040 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bdc:	2200      	movs	r2, #0
 8011bde:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011be2:	b2da      	uxtb	r2, r3
 8011be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011be6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bea:	785b      	ldrb	r3, [r3, #1]
 8011bec:	4618      	mov	r0, r3
 8011bee:	f7fe fc67 	bl	80104c0 <disk_initialize>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011bf8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011bfc:	f003 0301 	and.w	r3, r3, #1
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d001      	beq.n	8011c08 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011c04:	2303      	movs	r3, #3
 8011c06:	e21b      	b.n	8012040 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011c08:	79fb      	ldrb	r3, [r7, #7]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d007      	beq.n	8011c1e <find_volume+0xca>
 8011c0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c12:	f003 0304 	and.w	r3, r3, #4
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d001      	beq.n	8011c1e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8011c1a:	230a      	movs	r3, #10
 8011c1c:	e210      	b.n	8012040 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8011c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c20:	7858      	ldrb	r0, [r3, #1]
 8011c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c24:	330c      	adds	r3, #12
 8011c26:	461a      	mov	r2, r3
 8011c28:	2102      	movs	r1, #2
 8011c2a:	f7fe fcaf 	bl	801058c <disk_ioctl>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d001      	beq.n	8011c38 <find_volume+0xe4>
 8011c34:	2301      	movs	r3, #1
 8011c36:	e203      	b.n	8012040 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8011c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c3a:	899b      	ldrh	r3, [r3, #12]
 8011c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011c40:	d80d      	bhi.n	8011c5e <find_volume+0x10a>
 8011c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c44:	899b      	ldrh	r3, [r3, #12]
 8011c46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011c4a:	d308      	bcc.n	8011c5e <find_volume+0x10a>
 8011c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c4e:	899b      	ldrh	r3, [r3, #12]
 8011c50:	461a      	mov	r2, r3
 8011c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c54:	899b      	ldrh	r3, [r3, #12]
 8011c56:	3b01      	subs	r3, #1
 8011c58:	4013      	ands	r3, r2
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d001      	beq.n	8011c62 <find_volume+0x10e>
 8011c5e:	2301      	movs	r3, #1
 8011c60:	e1ee      	b.n	8012040 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011c62:	2300      	movs	r3, #0
 8011c64:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011c66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011c68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011c6a:	f7ff ff1d 	bl	8011aa8 <check_fs>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011c74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011c78:	2b02      	cmp	r3, #2
 8011c7a:	d149      	bne.n	8011d10 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	643b      	str	r3, [r7, #64]	; 0x40
 8011c80:	e01e      	b.n	8011cc0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c84:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c8a:	011b      	lsls	r3, r3, #4
 8011c8c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011c90:	4413      	add	r3, r2
 8011c92:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c96:	3304      	adds	r3, #4
 8011c98:	781b      	ldrb	r3, [r3, #0]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d006      	beq.n	8011cac <find_volume+0x158>
 8011c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ca0:	3308      	adds	r3, #8
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	f7fe fca8 	bl	80105f8 <ld_dword>
 8011ca8:	4602      	mov	r2, r0
 8011caa:	e000      	b.n	8011cae <find_volume+0x15a>
 8011cac:	2200      	movs	r2, #0
 8011cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011cb0:	009b      	lsls	r3, r3, #2
 8011cb2:	3358      	adds	r3, #88	; 0x58
 8011cb4:	443b      	add	r3, r7
 8011cb6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011cbc:	3301      	adds	r3, #1
 8011cbe:	643b      	str	r3, [r7, #64]	; 0x40
 8011cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011cc2:	2b03      	cmp	r3, #3
 8011cc4:	d9dd      	bls.n	8011c82 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d002      	beq.n	8011cd6 <find_volume+0x182>
 8011cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011cd2:	3b01      	subs	r3, #1
 8011cd4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011cd8:	009b      	lsls	r3, r3, #2
 8011cda:	3358      	adds	r3, #88	; 0x58
 8011cdc:	443b      	add	r3, r7
 8011cde:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011ce2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d005      	beq.n	8011cf6 <find_volume+0x1a2>
 8011cea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011cec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011cee:	f7ff fedb 	bl	8011aa8 <check_fs>
 8011cf2:	4603      	mov	r3, r0
 8011cf4:	e000      	b.n	8011cf8 <find_volume+0x1a4>
 8011cf6:	2303      	movs	r3, #3
 8011cf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011cfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d00:	2b01      	cmp	r3, #1
 8011d02:	d905      	bls.n	8011d10 <find_volume+0x1bc>
 8011d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d06:	3301      	adds	r3, #1
 8011d08:	643b      	str	r3, [r7, #64]	; 0x40
 8011d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d0c:	2b03      	cmp	r3, #3
 8011d0e:	d9e2      	bls.n	8011cd6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011d10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d14:	2b04      	cmp	r3, #4
 8011d16:	d101      	bne.n	8011d1c <find_volume+0x1c8>
 8011d18:	2301      	movs	r3, #1
 8011d1a:	e191      	b.n	8012040 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011d1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d20:	2b01      	cmp	r3, #1
 8011d22:	d901      	bls.n	8011d28 <find_volume+0x1d4>
 8011d24:	230d      	movs	r3, #13
 8011d26:	e18b      	b.n	8012040 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d2a:	3334      	adds	r3, #52	; 0x34
 8011d2c:	330b      	adds	r3, #11
 8011d2e:	4618      	mov	r0, r3
 8011d30:	f7fe fc4a 	bl	80105c8 <ld_word>
 8011d34:	4603      	mov	r3, r0
 8011d36:	461a      	mov	r2, r3
 8011d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d3a:	899b      	ldrh	r3, [r3, #12]
 8011d3c:	429a      	cmp	r2, r3
 8011d3e:	d001      	beq.n	8011d44 <find_volume+0x1f0>
 8011d40:	230d      	movs	r3, #13
 8011d42:	e17d      	b.n	8012040 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d46:	3334      	adds	r3, #52	; 0x34
 8011d48:	3316      	adds	r3, #22
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	f7fe fc3c 	bl	80105c8 <ld_word>
 8011d50:	4603      	mov	r3, r0
 8011d52:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d106      	bne.n	8011d68 <find_volume+0x214>
 8011d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d5c:	3334      	adds	r3, #52	; 0x34
 8011d5e:	3324      	adds	r3, #36	; 0x24
 8011d60:	4618      	mov	r0, r3
 8011d62:	f7fe fc49 	bl	80105f8 <ld_dword>
 8011d66:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011d6c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d70:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8011d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d76:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d7a:	789b      	ldrb	r3, [r3, #2]
 8011d7c:	2b01      	cmp	r3, #1
 8011d7e:	d005      	beq.n	8011d8c <find_volume+0x238>
 8011d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d82:	789b      	ldrb	r3, [r3, #2]
 8011d84:	2b02      	cmp	r3, #2
 8011d86:	d001      	beq.n	8011d8c <find_volume+0x238>
 8011d88:	230d      	movs	r3, #13
 8011d8a:	e159      	b.n	8012040 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d8e:	789b      	ldrb	r3, [r3, #2]
 8011d90:	461a      	mov	r2, r3
 8011d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d94:	fb02 f303 	mul.w	r3, r2, r3
 8011d98:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011da0:	b29a      	uxth	r2, r3
 8011da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011da4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011da8:	895b      	ldrh	r3, [r3, #10]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d008      	beq.n	8011dc0 <find_volume+0x26c>
 8011dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011db0:	895b      	ldrh	r3, [r3, #10]
 8011db2:	461a      	mov	r2, r3
 8011db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011db6:	895b      	ldrh	r3, [r3, #10]
 8011db8:	3b01      	subs	r3, #1
 8011dba:	4013      	ands	r3, r2
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d001      	beq.n	8011dc4 <find_volume+0x270>
 8011dc0:	230d      	movs	r3, #13
 8011dc2:	e13d      	b.n	8012040 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dc6:	3334      	adds	r3, #52	; 0x34
 8011dc8:	3311      	adds	r3, #17
 8011dca:	4618      	mov	r0, r3
 8011dcc:	f7fe fbfc 	bl	80105c8 <ld_word>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	461a      	mov	r2, r3
 8011dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dd6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dda:	891b      	ldrh	r3, [r3, #8]
 8011ddc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011dde:	8992      	ldrh	r2, [r2, #12]
 8011de0:	0952      	lsrs	r2, r2, #5
 8011de2:	b292      	uxth	r2, r2
 8011de4:	fbb3 f1f2 	udiv	r1, r3, r2
 8011de8:	fb01 f202 	mul.w	r2, r1, r2
 8011dec:	1a9b      	subs	r3, r3, r2
 8011dee:	b29b      	uxth	r3, r3
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d003      	beq.n	8011dfc <find_volume+0x2a8>
 8011df4:	230d      	movs	r3, #13
 8011df6:	e123      	b.n	8012040 <find_volume+0x4ec>
 8011df8:	2000659c 	.word	0x2000659c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dfe:	3334      	adds	r3, #52	; 0x34
 8011e00:	3313      	adds	r3, #19
 8011e02:	4618      	mov	r0, r3
 8011e04:	f7fe fbe0 	bl	80105c8 <ld_word>
 8011e08:	4603      	mov	r3, r0
 8011e0a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d106      	bne.n	8011e20 <find_volume+0x2cc>
 8011e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e14:	3334      	adds	r3, #52	; 0x34
 8011e16:	3320      	adds	r3, #32
 8011e18:	4618      	mov	r0, r3
 8011e1a:	f7fe fbed 	bl	80105f8 <ld_dword>
 8011e1e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e22:	3334      	adds	r3, #52	; 0x34
 8011e24:	330e      	adds	r3, #14
 8011e26:	4618      	mov	r0, r3
 8011e28:	f7fe fbce 	bl	80105c8 <ld_word>
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011e30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d101      	bne.n	8011e3a <find_volume+0x2e6>
 8011e36:	230d      	movs	r3, #13
 8011e38:	e102      	b.n	8012040 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011e3a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e3e:	4413      	add	r3, r2
 8011e40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011e42:	8911      	ldrh	r1, [r2, #8]
 8011e44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011e46:	8992      	ldrh	r2, [r2, #12]
 8011e48:	0952      	lsrs	r2, r2, #5
 8011e4a:	b292      	uxth	r2, r2
 8011e4c:	fbb1 f2f2 	udiv	r2, r1, r2
 8011e50:	b292      	uxth	r2, r2
 8011e52:	4413      	add	r3, r2
 8011e54:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011e56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e5a:	429a      	cmp	r2, r3
 8011e5c:	d201      	bcs.n	8011e62 <find_volume+0x30e>
 8011e5e:	230d      	movs	r3, #13
 8011e60:	e0ee      	b.n	8012040 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011e62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e66:	1ad3      	subs	r3, r2, r3
 8011e68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011e6a:	8952      	ldrh	r2, [r2, #10]
 8011e6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011e70:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d101      	bne.n	8011e7c <find_volume+0x328>
 8011e78:	230d      	movs	r3, #13
 8011e7a:	e0e1      	b.n	8012040 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8011e7c:	2303      	movs	r3, #3
 8011e7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e84:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011e88:	4293      	cmp	r3, r2
 8011e8a:	d802      	bhi.n	8011e92 <find_volume+0x33e>
 8011e8c:	2302      	movs	r3, #2
 8011e8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e94:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011e98:	4293      	cmp	r3, r2
 8011e9a:	d802      	bhi.n	8011ea2 <find_volume+0x34e>
 8011e9c:	2301      	movs	r3, #1
 8011e9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ea4:	1c9a      	adds	r2, r3, #2
 8011ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ea8:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8011eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011eae:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011eb0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011eb4:	441a      	add	r2, r3
 8011eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eb8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8011eba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ebe:	441a      	add	r2, r3
 8011ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ec2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8011ec4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011ec8:	2b03      	cmp	r3, #3
 8011eca:	d11e      	bne.n	8011f0a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ece:	3334      	adds	r3, #52	; 0x34
 8011ed0:	332a      	adds	r3, #42	; 0x2a
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f7fe fb78 	bl	80105c8 <ld_word>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d001      	beq.n	8011ee2 <find_volume+0x38e>
 8011ede:	230d      	movs	r3, #13
 8011ee0:	e0ae      	b.n	8012040 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ee4:	891b      	ldrh	r3, [r3, #8]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d001      	beq.n	8011eee <find_volume+0x39a>
 8011eea:	230d      	movs	r3, #13
 8011eec:	e0a8      	b.n	8012040 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ef0:	3334      	adds	r3, #52	; 0x34
 8011ef2:	332c      	adds	r3, #44	; 0x2c
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	f7fe fb7f 	bl	80105f8 <ld_dword>
 8011efa:	4602      	mov	r2, r0
 8011efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011efe:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f02:	699b      	ldr	r3, [r3, #24]
 8011f04:	009b      	lsls	r3, r3, #2
 8011f06:	647b      	str	r3, [r7, #68]	; 0x44
 8011f08:	e01f      	b.n	8011f4a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f0c:	891b      	ldrh	r3, [r3, #8]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d101      	bne.n	8011f16 <find_volume+0x3c2>
 8011f12:	230d      	movs	r3, #13
 8011f14:	e094      	b.n	8012040 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f1c:	441a      	add	r2, r3
 8011f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f20:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011f22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011f26:	2b02      	cmp	r3, #2
 8011f28:	d103      	bne.n	8011f32 <find_volume+0x3de>
 8011f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f2c:	699b      	ldr	r3, [r3, #24]
 8011f2e:	005b      	lsls	r3, r3, #1
 8011f30:	e00a      	b.n	8011f48 <find_volume+0x3f4>
 8011f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f34:	699a      	ldr	r2, [r3, #24]
 8011f36:	4613      	mov	r3, r2
 8011f38:	005b      	lsls	r3, r3, #1
 8011f3a:	4413      	add	r3, r2
 8011f3c:	085a      	lsrs	r2, r3, #1
 8011f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f40:	699b      	ldr	r3, [r3, #24]
 8011f42:	f003 0301 	and.w	r3, r3, #1
 8011f46:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011f48:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f4c:	69da      	ldr	r2, [r3, #28]
 8011f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f50:	899b      	ldrh	r3, [r3, #12]
 8011f52:	4619      	mov	r1, r3
 8011f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f56:	440b      	add	r3, r1
 8011f58:	3b01      	subs	r3, #1
 8011f5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011f5c:	8989      	ldrh	r1, [r1, #12]
 8011f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f62:	429a      	cmp	r2, r3
 8011f64:	d201      	bcs.n	8011f6a <find_volume+0x416>
 8011f66:	230d      	movs	r3, #13
 8011f68:	e06a      	b.n	8012040 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8011f70:	615a      	str	r2, [r3, #20]
 8011f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f74:	695a      	ldr	r2, [r3, #20]
 8011f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f78:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8011f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f7c:	2280      	movs	r2, #128	; 0x80
 8011f7e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011f80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011f84:	2b03      	cmp	r3, #3
 8011f86:	d149      	bne.n	801201c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f8a:	3334      	adds	r3, #52	; 0x34
 8011f8c:	3330      	adds	r3, #48	; 0x30
 8011f8e:	4618      	mov	r0, r3
 8011f90:	f7fe fb1a 	bl	80105c8 <ld_word>
 8011f94:	4603      	mov	r3, r0
 8011f96:	2b01      	cmp	r3, #1
 8011f98:	d140      	bne.n	801201c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f9c:	3301      	adds	r3, #1
 8011f9e:	4619      	mov	r1, r3
 8011fa0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011fa2:	f7fe fd85 	bl	8010ab0 <move_window>
 8011fa6:	4603      	mov	r3, r0
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d137      	bne.n	801201c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8011fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fae:	2200      	movs	r2, #0
 8011fb0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fb4:	3334      	adds	r3, #52	; 0x34
 8011fb6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f7fe fb04 	bl	80105c8 <ld_word>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	461a      	mov	r2, r3
 8011fc4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011fc8:	429a      	cmp	r2, r3
 8011fca:	d127      	bne.n	801201c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fce:	3334      	adds	r3, #52	; 0x34
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	f7fe fb11 	bl	80105f8 <ld_dword>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	4a1b      	ldr	r2, [pc, #108]	; (8012048 <find_volume+0x4f4>)
 8011fda:	4293      	cmp	r3, r2
 8011fdc:	d11e      	bne.n	801201c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fe0:	3334      	adds	r3, #52	; 0x34
 8011fe2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f7fe fb06 	bl	80105f8 <ld_dword>
 8011fec:	4603      	mov	r3, r0
 8011fee:	4a17      	ldr	r2, [pc, #92]	; (801204c <find_volume+0x4f8>)
 8011ff0:	4293      	cmp	r3, r2
 8011ff2:	d113      	bne.n	801201c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ff6:	3334      	adds	r3, #52	; 0x34
 8011ff8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	f7fe fafb 	bl	80105f8 <ld_dword>
 8012002:	4602      	mov	r2, r0
 8012004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012006:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801200a:	3334      	adds	r3, #52	; 0x34
 801200c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012010:	4618      	mov	r0, r3
 8012012:	f7fe faf1 	bl	80105f8 <ld_dword>
 8012016:	4602      	mov	r2, r0
 8012018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801201a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801201c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801201e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012022:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012024:	4b0a      	ldr	r3, [pc, #40]	; (8012050 <find_volume+0x4fc>)
 8012026:	881b      	ldrh	r3, [r3, #0]
 8012028:	3301      	adds	r3, #1
 801202a:	b29a      	uxth	r2, r3
 801202c:	4b08      	ldr	r3, [pc, #32]	; (8012050 <find_volume+0x4fc>)
 801202e:	801a      	strh	r2, [r3, #0]
 8012030:	4b07      	ldr	r3, [pc, #28]	; (8012050 <find_volume+0x4fc>)
 8012032:	881a      	ldrh	r2, [r3, #0]
 8012034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012036:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012038:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801203a:	f7fe fcd1 	bl	80109e0 <clear_lock>
#endif
	return FR_OK;
 801203e:	2300      	movs	r3, #0
}
 8012040:	4618      	mov	r0, r3
 8012042:	3758      	adds	r7, #88	; 0x58
 8012044:	46bd      	mov	sp, r7
 8012046:	bd80      	pop	{r7, pc}
 8012048:	41615252 	.word	0x41615252
 801204c:	61417272 	.word	0x61417272
 8012050:	200065a0 	.word	0x200065a0

08012054 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012054:	b580      	push	{r7, lr}
 8012056:	b084      	sub	sp, #16
 8012058:	af00      	add	r7, sp, #0
 801205a:	6078      	str	r0, [r7, #4]
 801205c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801205e:	2309      	movs	r3, #9
 8012060:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d01c      	beq.n	80120a2 <validate+0x4e>
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d018      	beq.n	80120a2 <validate+0x4e>
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	781b      	ldrb	r3, [r3, #0]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d013      	beq.n	80120a2 <validate+0x4e>
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	889a      	ldrh	r2, [r3, #4]
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	88db      	ldrh	r3, [r3, #6]
 8012084:	429a      	cmp	r2, r3
 8012086:	d10c      	bne.n	80120a2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	785b      	ldrb	r3, [r3, #1]
 801208e:	4618      	mov	r0, r3
 8012090:	f7fe f9fc 	bl	801048c <disk_status>
 8012094:	4603      	mov	r3, r0
 8012096:	f003 0301 	and.w	r3, r3, #1
 801209a:	2b00      	cmp	r3, #0
 801209c:	d101      	bne.n	80120a2 <validate+0x4e>
			res = FR_OK;
 801209e:	2300      	movs	r3, #0
 80120a0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80120a2:	7bfb      	ldrb	r3, [r7, #15]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d102      	bne.n	80120ae <validate+0x5a>
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	e000      	b.n	80120b0 <validate+0x5c>
 80120ae:	2300      	movs	r3, #0
 80120b0:	683a      	ldr	r2, [r7, #0]
 80120b2:	6013      	str	r3, [r2, #0]
	return res;
 80120b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80120b6:	4618      	mov	r0, r3
 80120b8:	3710      	adds	r7, #16
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bd80      	pop	{r7, pc}
	...

080120c0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b088      	sub	sp, #32
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	60f8      	str	r0, [r7, #12]
 80120c8:	60b9      	str	r1, [r7, #8]
 80120ca:	4613      	mov	r3, r2
 80120cc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80120ce:	68bb      	ldr	r3, [r7, #8]
 80120d0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80120d2:	f107 0310 	add.w	r3, r7, #16
 80120d6:	4618      	mov	r0, r3
 80120d8:	f7ff fca2 	bl	8011a20 <get_ldnumber>
 80120dc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80120de:	69fb      	ldr	r3, [r7, #28]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	da01      	bge.n	80120e8 <f_mount+0x28>
 80120e4:	230b      	movs	r3, #11
 80120e6:	e02b      	b.n	8012140 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80120e8:	4a17      	ldr	r2, [pc, #92]	; (8012148 <f_mount+0x88>)
 80120ea:	69fb      	ldr	r3, [r7, #28]
 80120ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80120f0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80120f2:	69bb      	ldr	r3, [r7, #24]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d005      	beq.n	8012104 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80120f8:	69b8      	ldr	r0, [r7, #24]
 80120fa:	f7fe fc71 	bl	80109e0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80120fe:	69bb      	ldr	r3, [r7, #24]
 8012100:	2200      	movs	r2, #0
 8012102:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d002      	beq.n	8012110 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	2200      	movs	r2, #0
 801210e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012110:	68fa      	ldr	r2, [r7, #12]
 8012112:	490d      	ldr	r1, [pc, #52]	; (8012148 <f_mount+0x88>)
 8012114:	69fb      	ldr	r3, [r7, #28]
 8012116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	2b00      	cmp	r3, #0
 801211e:	d002      	beq.n	8012126 <f_mount+0x66>
 8012120:	79fb      	ldrb	r3, [r7, #7]
 8012122:	2b01      	cmp	r3, #1
 8012124:	d001      	beq.n	801212a <f_mount+0x6a>
 8012126:	2300      	movs	r3, #0
 8012128:	e00a      	b.n	8012140 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801212a:	f107 010c 	add.w	r1, r7, #12
 801212e:	f107 0308 	add.w	r3, r7, #8
 8012132:	2200      	movs	r2, #0
 8012134:	4618      	mov	r0, r3
 8012136:	f7ff fd0d 	bl	8011b54 <find_volume>
 801213a:	4603      	mov	r3, r0
 801213c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801213e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012140:	4618      	mov	r0, r3
 8012142:	3720      	adds	r7, #32
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}
 8012148:	2000659c 	.word	0x2000659c

0801214c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b098      	sub	sp, #96	; 0x60
 8012150:	af00      	add	r7, sp, #0
 8012152:	60f8      	str	r0, [r7, #12]
 8012154:	60b9      	str	r1, [r7, #8]
 8012156:	4613      	mov	r3, r2
 8012158:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d101      	bne.n	8012164 <f_open+0x18>
 8012160:	2309      	movs	r3, #9
 8012162:	e1bb      	b.n	80124dc <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012164:	79fb      	ldrb	r3, [r7, #7]
 8012166:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801216a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801216c:	79fa      	ldrb	r2, [r7, #7]
 801216e:	f107 0110 	add.w	r1, r7, #16
 8012172:	f107 0308 	add.w	r3, r7, #8
 8012176:	4618      	mov	r0, r3
 8012178:	f7ff fcec 	bl	8011b54 <find_volume>
 801217c:	4603      	mov	r3, r0
 801217e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8012182:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012186:	2b00      	cmp	r3, #0
 8012188:	f040 819f 	bne.w	80124ca <f_open+0x37e>
		dj.obj.fs = fs;
 801218c:	693b      	ldr	r3, [r7, #16]
 801218e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012190:	68ba      	ldr	r2, [r7, #8]
 8012192:	f107 0314 	add.w	r3, r7, #20
 8012196:	4611      	mov	r1, r2
 8012198:	4618      	mov	r0, r3
 801219a:	f7ff fbcb 	bl	8011934 <follow_path>
 801219e:	4603      	mov	r3, r0
 80121a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80121a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d11a      	bne.n	80121e2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80121ac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80121b0:	b25b      	sxtb	r3, r3
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	da03      	bge.n	80121be <f_open+0x72>
				res = FR_INVALID_NAME;
 80121b6:	2306      	movs	r3, #6
 80121b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80121bc:	e011      	b.n	80121e2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80121be:	79fb      	ldrb	r3, [r7, #7]
 80121c0:	f023 0301 	bic.w	r3, r3, #1
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	bf14      	ite	ne
 80121c8:	2301      	movne	r3, #1
 80121ca:	2300      	moveq	r3, #0
 80121cc:	b2db      	uxtb	r3, r3
 80121ce:	461a      	mov	r2, r3
 80121d0:	f107 0314 	add.w	r3, r7, #20
 80121d4:	4611      	mov	r1, r2
 80121d6:	4618      	mov	r0, r3
 80121d8:	f7fe faf6 	bl	80107c8 <chk_lock>
 80121dc:	4603      	mov	r3, r0
 80121de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80121e2:	79fb      	ldrb	r3, [r7, #7]
 80121e4:	f003 031c 	and.w	r3, r3, #28
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d07f      	beq.n	80122ec <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80121ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d017      	beq.n	8012224 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80121f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80121f8:	2b04      	cmp	r3, #4
 80121fa:	d10e      	bne.n	801221a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80121fc:	f7fe fb40 	bl	8010880 <enq_lock>
 8012200:	4603      	mov	r3, r0
 8012202:	2b00      	cmp	r3, #0
 8012204:	d006      	beq.n	8012214 <f_open+0xc8>
 8012206:	f107 0314 	add.w	r3, r7, #20
 801220a:	4618      	mov	r0, r3
 801220c:	f7ff fa6c 	bl	80116e8 <dir_register>
 8012210:	4603      	mov	r3, r0
 8012212:	e000      	b.n	8012216 <f_open+0xca>
 8012214:	2312      	movs	r3, #18
 8012216:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801221a:	79fb      	ldrb	r3, [r7, #7]
 801221c:	f043 0308 	orr.w	r3, r3, #8
 8012220:	71fb      	strb	r3, [r7, #7]
 8012222:	e010      	b.n	8012246 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012224:	7ebb      	ldrb	r3, [r7, #26]
 8012226:	f003 0311 	and.w	r3, r3, #17
 801222a:	2b00      	cmp	r3, #0
 801222c:	d003      	beq.n	8012236 <f_open+0xea>
					res = FR_DENIED;
 801222e:	2307      	movs	r3, #7
 8012230:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012234:	e007      	b.n	8012246 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012236:	79fb      	ldrb	r3, [r7, #7]
 8012238:	f003 0304 	and.w	r3, r3, #4
 801223c:	2b00      	cmp	r3, #0
 801223e:	d002      	beq.n	8012246 <f_open+0xfa>
 8012240:	2308      	movs	r3, #8
 8012242:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012246:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801224a:	2b00      	cmp	r3, #0
 801224c:	d168      	bne.n	8012320 <f_open+0x1d4>
 801224e:	79fb      	ldrb	r3, [r7, #7]
 8012250:	f003 0308 	and.w	r3, r3, #8
 8012254:	2b00      	cmp	r3, #0
 8012256:	d063      	beq.n	8012320 <f_open+0x1d4>
				dw = GET_FATTIME();
 8012258:	f7fd fee4 	bl	8010024 <get_fattime>
 801225c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801225e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012260:	330e      	adds	r3, #14
 8012262:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012264:	4618      	mov	r0, r3
 8012266:	f7fe fa05 	bl	8010674 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801226a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801226c:	3316      	adds	r3, #22
 801226e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012270:	4618      	mov	r0, r3
 8012272:	f7fe f9ff 	bl	8010674 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012278:	330b      	adds	r3, #11
 801227a:	2220      	movs	r2, #32
 801227c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801227e:	693b      	ldr	r3, [r7, #16]
 8012280:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012282:	4611      	mov	r1, r2
 8012284:	4618      	mov	r0, r3
 8012286:	f7ff f99b 	bl	80115c0 <ld_clust>
 801228a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801228c:	693b      	ldr	r3, [r7, #16]
 801228e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012290:	2200      	movs	r2, #0
 8012292:	4618      	mov	r0, r3
 8012294:	f7ff f9b3 	bl	80115fe <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801229a:	331c      	adds	r3, #28
 801229c:	2100      	movs	r1, #0
 801229e:	4618      	mov	r0, r3
 80122a0:	f7fe f9e8 	bl	8010674 <st_dword>
					fs->wflag = 1;
 80122a4:	693b      	ldr	r3, [r7, #16]
 80122a6:	2201      	movs	r2, #1
 80122a8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80122aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d037      	beq.n	8012320 <f_open+0x1d4>
						dw = fs->winsect;
 80122b0:	693b      	ldr	r3, [r7, #16]
 80122b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122b4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80122b6:	f107 0314 	add.w	r3, r7, #20
 80122ba:	2200      	movs	r2, #0
 80122bc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80122be:	4618      	mov	r0, r3
 80122c0:	f7fe fea3 	bl	801100a <remove_chain>
 80122c4:	4603      	mov	r3, r0
 80122c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80122ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d126      	bne.n	8012320 <f_open+0x1d4>
							res = move_window(fs, dw);
 80122d2:	693b      	ldr	r3, [r7, #16]
 80122d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80122d6:	4618      	mov	r0, r3
 80122d8:	f7fe fbea 	bl	8010ab0 <move_window>
 80122dc:	4603      	mov	r3, r0
 80122de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80122e2:	693b      	ldr	r3, [r7, #16]
 80122e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80122e6:	3a01      	subs	r2, #1
 80122e8:	611a      	str	r2, [r3, #16]
 80122ea:	e019      	b.n	8012320 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80122ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d115      	bne.n	8012320 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80122f4:	7ebb      	ldrb	r3, [r7, #26]
 80122f6:	f003 0310 	and.w	r3, r3, #16
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d003      	beq.n	8012306 <f_open+0x1ba>
					res = FR_NO_FILE;
 80122fe:	2304      	movs	r3, #4
 8012300:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012304:	e00c      	b.n	8012320 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012306:	79fb      	ldrb	r3, [r7, #7]
 8012308:	f003 0302 	and.w	r3, r3, #2
 801230c:	2b00      	cmp	r3, #0
 801230e:	d007      	beq.n	8012320 <f_open+0x1d4>
 8012310:	7ebb      	ldrb	r3, [r7, #26]
 8012312:	f003 0301 	and.w	r3, r3, #1
 8012316:	2b00      	cmp	r3, #0
 8012318:	d002      	beq.n	8012320 <f_open+0x1d4>
						res = FR_DENIED;
 801231a:	2307      	movs	r3, #7
 801231c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8012320:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012324:	2b00      	cmp	r3, #0
 8012326:	d128      	bne.n	801237a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012328:	79fb      	ldrb	r3, [r7, #7]
 801232a:	f003 0308 	and.w	r3, r3, #8
 801232e:	2b00      	cmp	r3, #0
 8012330:	d003      	beq.n	801233a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8012332:	79fb      	ldrb	r3, [r7, #7]
 8012334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012338:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801233a:	693b      	ldr	r3, [r7, #16]
 801233c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012342:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012348:	79fb      	ldrb	r3, [r7, #7]
 801234a:	f023 0301 	bic.w	r3, r3, #1
 801234e:	2b00      	cmp	r3, #0
 8012350:	bf14      	ite	ne
 8012352:	2301      	movne	r3, #1
 8012354:	2300      	moveq	r3, #0
 8012356:	b2db      	uxtb	r3, r3
 8012358:	461a      	mov	r2, r3
 801235a:	f107 0314 	add.w	r3, r7, #20
 801235e:	4611      	mov	r1, r2
 8012360:	4618      	mov	r0, r3
 8012362:	f7fe faaf 	bl	80108c4 <inc_lock>
 8012366:	4602      	mov	r2, r0
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	691b      	ldr	r3, [r3, #16]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d102      	bne.n	801237a <f_open+0x22e>
 8012374:	2302      	movs	r3, #2
 8012376:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801237a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801237e:	2b00      	cmp	r3, #0
 8012380:	f040 80a3 	bne.w	80124ca <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012384:	693b      	ldr	r3, [r7, #16]
 8012386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012388:	4611      	mov	r1, r2
 801238a:	4618      	mov	r0, r3
 801238c:	f7ff f918 	bl	80115c0 <ld_clust>
 8012390:	4602      	mov	r2, r0
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012398:	331c      	adds	r3, #28
 801239a:	4618      	mov	r0, r3
 801239c:	f7fe f92c 	bl	80105f8 <ld_dword>
 80123a0:	4602      	mov	r2, r0
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	2200      	movs	r2, #0
 80123aa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80123ac:	693a      	ldr	r2, [r7, #16]
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80123b2:	693b      	ldr	r3, [r7, #16]
 80123b4:	88da      	ldrh	r2, [r3, #6]
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	79fa      	ldrb	r2, [r7, #7]
 80123be:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	2200      	movs	r2, #0
 80123c4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	2200      	movs	r2, #0
 80123ca:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	2200      	movs	r2, #0
 80123d0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	3330      	adds	r3, #48	; 0x30
 80123d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80123da:	2100      	movs	r1, #0
 80123dc:	4618      	mov	r0, r3
 80123de:	f7fe f996 	bl	801070e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80123e2:	79fb      	ldrb	r3, [r7, #7]
 80123e4:	f003 0320 	and.w	r3, r3, #32
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d06e      	beq.n	80124ca <f_open+0x37e>
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	68db      	ldr	r3, [r3, #12]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d06a      	beq.n	80124ca <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	68da      	ldr	r2, [r3, #12]
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80123fc:	693b      	ldr	r3, [r7, #16]
 80123fe:	895b      	ldrh	r3, [r3, #10]
 8012400:	461a      	mov	r2, r3
 8012402:	693b      	ldr	r3, [r7, #16]
 8012404:	899b      	ldrh	r3, [r3, #12]
 8012406:	fb02 f303 	mul.w	r3, r2, r3
 801240a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	689b      	ldr	r3, [r3, #8]
 8012410:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	68db      	ldr	r3, [r3, #12]
 8012416:	657b      	str	r3, [r7, #84]	; 0x54
 8012418:	e016      	b.n	8012448 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801241e:	4618      	mov	r0, r3
 8012420:	f7fe fc03 	bl	8010c2a <get_fat>
 8012424:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012426:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012428:	2b01      	cmp	r3, #1
 801242a:	d802      	bhi.n	8012432 <f_open+0x2e6>
 801242c:	2302      	movs	r3, #2
 801242e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012432:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012438:	d102      	bne.n	8012440 <f_open+0x2f4>
 801243a:	2301      	movs	r3, #1
 801243c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012440:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012444:	1ad3      	subs	r3, r2, r3
 8012446:	657b      	str	r3, [r7, #84]	; 0x54
 8012448:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801244c:	2b00      	cmp	r3, #0
 801244e:	d103      	bne.n	8012458 <f_open+0x30c>
 8012450:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012454:	429a      	cmp	r2, r3
 8012456:	d8e0      	bhi.n	801241a <f_open+0x2ce>
				}
				fp->clust = clst;
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801245c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801245e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012462:	2b00      	cmp	r3, #0
 8012464:	d131      	bne.n	80124ca <f_open+0x37e>
 8012466:	693b      	ldr	r3, [r7, #16]
 8012468:	899b      	ldrh	r3, [r3, #12]
 801246a:	461a      	mov	r2, r3
 801246c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801246e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012472:	fb01 f202 	mul.w	r2, r1, r2
 8012476:	1a9b      	subs	r3, r3, r2
 8012478:	2b00      	cmp	r3, #0
 801247a:	d026      	beq.n	80124ca <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801247c:	693b      	ldr	r3, [r7, #16]
 801247e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012480:	4618      	mov	r0, r3
 8012482:	f7fe fbb3 	bl	8010bec <clust2sect>
 8012486:	6478      	str	r0, [r7, #68]	; 0x44
 8012488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801248a:	2b00      	cmp	r3, #0
 801248c:	d103      	bne.n	8012496 <f_open+0x34a>
						res = FR_INT_ERR;
 801248e:	2302      	movs	r3, #2
 8012490:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012494:	e019      	b.n	80124ca <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012496:	693b      	ldr	r3, [r7, #16]
 8012498:	899b      	ldrh	r3, [r3, #12]
 801249a:	461a      	mov	r2, r3
 801249c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801249e:	fbb3 f2f2 	udiv	r2, r3, r2
 80124a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124a4:	441a      	add	r2, r3
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80124aa:	693b      	ldr	r3, [r7, #16]
 80124ac:	7858      	ldrb	r0, [r3, #1]
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	6a1a      	ldr	r2, [r3, #32]
 80124b8:	2301      	movs	r3, #1
 80124ba:	f7fe f827 	bl	801050c <disk_read>
 80124be:	4603      	mov	r3, r0
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d002      	beq.n	80124ca <f_open+0x37e>
 80124c4:	2301      	movs	r3, #1
 80124c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80124ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d002      	beq.n	80124d8 <f_open+0x38c>
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	2200      	movs	r2, #0
 80124d6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80124d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80124dc:	4618      	mov	r0, r3
 80124de:	3760      	adds	r7, #96	; 0x60
 80124e0:	46bd      	mov	sp, r7
 80124e2:	bd80      	pop	{r7, pc}

080124e4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b08c      	sub	sp, #48	; 0x30
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	60f8      	str	r0, [r7, #12]
 80124ec:	60b9      	str	r1, [r7, #8]
 80124ee:	607a      	str	r2, [r7, #4]
 80124f0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80124f2:	68bb      	ldr	r3, [r7, #8]
 80124f4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80124f6:	683b      	ldr	r3, [r7, #0]
 80124f8:	2200      	movs	r2, #0
 80124fa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	f107 0210 	add.w	r2, r7, #16
 8012502:	4611      	mov	r1, r2
 8012504:	4618      	mov	r0, r3
 8012506:	f7ff fda5 	bl	8012054 <validate>
 801250a:	4603      	mov	r3, r0
 801250c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012510:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012514:	2b00      	cmp	r3, #0
 8012516:	d107      	bne.n	8012528 <f_write+0x44>
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	7d5b      	ldrb	r3, [r3, #21]
 801251c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8012520:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012524:	2b00      	cmp	r3, #0
 8012526:	d002      	beq.n	801252e <f_write+0x4a>
 8012528:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801252c:	e16a      	b.n	8012804 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	7d1b      	ldrb	r3, [r3, #20]
 8012532:	f003 0302 	and.w	r3, r3, #2
 8012536:	2b00      	cmp	r3, #0
 8012538:	d101      	bne.n	801253e <f_write+0x5a>
 801253a:	2307      	movs	r3, #7
 801253c:	e162      	b.n	8012804 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	699a      	ldr	r2, [r3, #24]
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	441a      	add	r2, r3
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	699b      	ldr	r3, [r3, #24]
 801254a:	429a      	cmp	r2, r3
 801254c:	f080 814c 	bcs.w	80127e8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	699b      	ldr	r3, [r3, #24]
 8012554:	43db      	mvns	r3, r3
 8012556:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8012558:	e146      	b.n	80127e8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	699b      	ldr	r3, [r3, #24]
 801255e:	693a      	ldr	r2, [r7, #16]
 8012560:	8992      	ldrh	r2, [r2, #12]
 8012562:	fbb3 f1f2 	udiv	r1, r3, r2
 8012566:	fb01 f202 	mul.w	r2, r1, r2
 801256a:	1a9b      	subs	r3, r3, r2
 801256c:	2b00      	cmp	r3, #0
 801256e:	f040 80f1 	bne.w	8012754 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	699b      	ldr	r3, [r3, #24]
 8012576:	693a      	ldr	r2, [r7, #16]
 8012578:	8992      	ldrh	r2, [r2, #12]
 801257a:	fbb3 f3f2 	udiv	r3, r3, r2
 801257e:	693a      	ldr	r2, [r7, #16]
 8012580:	8952      	ldrh	r2, [r2, #10]
 8012582:	3a01      	subs	r2, #1
 8012584:	4013      	ands	r3, r2
 8012586:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8012588:	69bb      	ldr	r3, [r7, #24]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d143      	bne.n	8012616 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	699b      	ldr	r3, [r3, #24]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d10c      	bne.n	80125b0 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	689b      	ldr	r3, [r3, #8]
 801259a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801259c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d11a      	bne.n	80125d8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	2100      	movs	r1, #0
 80125a6:	4618      	mov	r0, r3
 80125a8:	f7fe fd94 	bl	80110d4 <create_chain>
 80125ac:	62b8      	str	r0, [r7, #40]	; 0x28
 80125ae:	e013      	b.n	80125d8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d007      	beq.n	80125c8 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	699b      	ldr	r3, [r3, #24]
 80125bc:	4619      	mov	r1, r3
 80125be:	68f8      	ldr	r0, [r7, #12]
 80125c0:	f7fe fe20 	bl	8011204 <clmt_clust>
 80125c4:	62b8      	str	r0, [r7, #40]	; 0x28
 80125c6:	e007      	b.n	80125d8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80125c8:	68fa      	ldr	r2, [r7, #12]
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	69db      	ldr	r3, [r3, #28]
 80125ce:	4619      	mov	r1, r3
 80125d0:	4610      	mov	r0, r2
 80125d2:	f7fe fd7f 	bl	80110d4 <create_chain>
 80125d6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80125d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125da:	2b00      	cmp	r3, #0
 80125dc:	f000 8109 	beq.w	80127f2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80125e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125e2:	2b01      	cmp	r3, #1
 80125e4:	d104      	bne.n	80125f0 <f_write+0x10c>
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	2202      	movs	r2, #2
 80125ea:	755a      	strb	r2, [r3, #21]
 80125ec:	2302      	movs	r3, #2
 80125ee:	e109      	b.n	8012804 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80125f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125f6:	d104      	bne.n	8012602 <f_write+0x11e>
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	2201      	movs	r2, #1
 80125fc:	755a      	strb	r2, [r3, #21]
 80125fe:	2301      	movs	r3, #1
 8012600:	e100      	b.n	8012804 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012606:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	689b      	ldr	r3, [r3, #8]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d102      	bne.n	8012616 <f_write+0x132>
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012614:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	7d1b      	ldrb	r3, [r3, #20]
 801261a:	b25b      	sxtb	r3, r3
 801261c:	2b00      	cmp	r3, #0
 801261e:	da18      	bge.n	8012652 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012620:	693b      	ldr	r3, [r7, #16]
 8012622:	7858      	ldrb	r0, [r3, #1]
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	6a1a      	ldr	r2, [r3, #32]
 801262e:	2301      	movs	r3, #1
 8012630:	f7fd ff8c 	bl	801054c <disk_write>
 8012634:	4603      	mov	r3, r0
 8012636:	2b00      	cmp	r3, #0
 8012638:	d004      	beq.n	8012644 <f_write+0x160>
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	2201      	movs	r2, #1
 801263e:	755a      	strb	r2, [r3, #21]
 8012640:	2301      	movs	r3, #1
 8012642:	e0df      	b.n	8012804 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	7d1b      	ldrb	r3, [r3, #20]
 8012648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801264c:	b2da      	uxtb	r2, r3
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012652:	693a      	ldr	r2, [r7, #16]
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	69db      	ldr	r3, [r3, #28]
 8012658:	4619      	mov	r1, r3
 801265a:	4610      	mov	r0, r2
 801265c:	f7fe fac6 	bl	8010bec <clust2sect>
 8012660:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012662:	697b      	ldr	r3, [r7, #20]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d104      	bne.n	8012672 <f_write+0x18e>
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	2202      	movs	r2, #2
 801266c:	755a      	strb	r2, [r3, #21]
 801266e:	2302      	movs	r3, #2
 8012670:	e0c8      	b.n	8012804 <f_write+0x320>
			sect += csect;
 8012672:	697a      	ldr	r2, [r7, #20]
 8012674:	69bb      	ldr	r3, [r7, #24]
 8012676:	4413      	add	r3, r2
 8012678:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801267a:	693b      	ldr	r3, [r7, #16]
 801267c:	899b      	ldrh	r3, [r3, #12]
 801267e:	461a      	mov	r2, r3
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	fbb3 f3f2 	udiv	r3, r3, r2
 8012686:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012688:	6a3b      	ldr	r3, [r7, #32]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d043      	beq.n	8012716 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801268e:	69ba      	ldr	r2, [r7, #24]
 8012690:	6a3b      	ldr	r3, [r7, #32]
 8012692:	4413      	add	r3, r2
 8012694:	693a      	ldr	r2, [r7, #16]
 8012696:	8952      	ldrh	r2, [r2, #10]
 8012698:	4293      	cmp	r3, r2
 801269a:	d905      	bls.n	80126a8 <f_write+0x1c4>
					cc = fs->csize - csect;
 801269c:	693b      	ldr	r3, [r7, #16]
 801269e:	895b      	ldrh	r3, [r3, #10]
 80126a0:	461a      	mov	r2, r3
 80126a2:	69bb      	ldr	r3, [r7, #24]
 80126a4:	1ad3      	subs	r3, r2, r3
 80126a6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80126a8:	693b      	ldr	r3, [r7, #16]
 80126aa:	7858      	ldrb	r0, [r3, #1]
 80126ac:	6a3b      	ldr	r3, [r7, #32]
 80126ae:	697a      	ldr	r2, [r7, #20]
 80126b0:	69f9      	ldr	r1, [r7, #28]
 80126b2:	f7fd ff4b 	bl	801054c <disk_write>
 80126b6:	4603      	mov	r3, r0
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d004      	beq.n	80126c6 <f_write+0x1e2>
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	2201      	movs	r2, #1
 80126c0:	755a      	strb	r2, [r3, #21]
 80126c2:	2301      	movs	r3, #1
 80126c4:	e09e      	b.n	8012804 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	6a1a      	ldr	r2, [r3, #32]
 80126ca:	697b      	ldr	r3, [r7, #20]
 80126cc:	1ad3      	subs	r3, r2, r3
 80126ce:	6a3a      	ldr	r2, [r7, #32]
 80126d0:	429a      	cmp	r2, r3
 80126d2:	d918      	bls.n	8012706 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	6a1a      	ldr	r2, [r3, #32]
 80126de:	697b      	ldr	r3, [r7, #20]
 80126e0:	1ad3      	subs	r3, r2, r3
 80126e2:	693a      	ldr	r2, [r7, #16]
 80126e4:	8992      	ldrh	r2, [r2, #12]
 80126e6:	fb02 f303 	mul.w	r3, r2, r3
 80126ea:	69fa      	ldr	r2, [r7, #28]
 80126ec:	18d1      	adds	r1, r2, r3
 80126ee:	693b      	ldr	r3, [r7, #16]
 80126f0:	899b      	ldrh	r3, [r3, #12]
 80126f2:	461a      	mov	r2, r3
 80126f4:	f7fd ffea 	bl	80106cc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	7d1b      	ldrb	r3, [r3, #20]
 80126fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012700:	b2da      	uxtb	r2, r3
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012706:	693b      	ldr	r3, [r7, #16]
 8012708:	899b      	ldrh	r3, [r3, #12]
 801270a:	461a      	mov	r2, r3
 801270c:	6a3b      	ldr	r3, [r7, #32]
 801270e:	fb02 f303 	mul.w	r3, r2, r3
 8012712:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8012714:	e04b      	b.n	80127ae <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	6a1b      	ldr	r3, [r3, #32]
 801271a:	697a      	ldr	r2, [r7, #20]
 801271c:	429a      	cmp	r2, r3
 801271e:	d016      	beq.n	801274e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	699a      	ldr	r2, [r3, #24]
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012728:	429a      	cmp	r2, r3
 801272a:	d210      	bcs.n	801274e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801272c:	693b      	ldr	r3, [r7, #16]
 801272e:	7858      	ldrb	r0, [r3, #1]
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012736:	2301      	movs	r3, #1
 8012738:	697a      	ldr	r2, [r7, #20]
 801273a:	f7fd fee7 	bl	801050c <disk_read>
 801273e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8012740:	2b00      	cmp	r3, #0
 8012742:	d004      	beq.n	801274e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	2201      	movs	r2, #1
 8012748:	755a      	strb	r2, [r3, #21]
 801274a:	2301      	movs	r3, #1
 801274c:	e05a      	b.n	8012804 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	697a      	ldr	r2, [r7, #20]
 8012752:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012754:	693b      	ldr	r3, [r7, #16]
 8012756:	899b      	ldrh	r3, [r3, #12]
 8012758:	4618      	mov	r0, r3
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	699b      	ldr	r3, [r3, #24]
 801275e:	693a      	ldr	r2, [r7, #16]
 8012760:	8992      	ldrh	r2, [r2, #12]
 8012762:	fbb3 f1f2 	udiv	r1, r3, r2
 8012766:	fb01 f202 	mul.w	r2, r1, r2
 801276a:	1a9b      	subs	r3, r3, r2
 801276c:	1ac3      	subs	r3, r0, r3
 801276e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8012770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	429a      	cmp	r2, r3
 8012776:	d901      	bls.n	801277c <f_write+0x298>
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	699b      	ldr	r3, [r3, #24]
 8012786:	693a      	ldr	r2, [r7, #16]
 8012788:	8992      	ldrh	r2, [r2, #12]
 801278a:	fbb3 f0f2 	udiv	r0, r3, r2
 801278e:	fb00 f202 	mul.w	r2, r0, r2
 8012792:	1a9b      	subs	r3, r3, r2
 8012794:	440b      	add	r3, r1
 8012796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012798:	69f9      	ldr	r1, [r7, #28]
 801279a:	4618      	mov	r0, r3
 801279c:	f7fd ff96 	bl	80106cc <mem_cpy>
		fp->flag |= FA_DIRTY;
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	7d1b      	ldrb	r3, [r3, #20]
 80127a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80127a8:	b2da      	uxtb	r2, r3
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80127ae:	69fa      	ldr	r2, [r7, #28]
 80127b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127b2:	4413      	add	r3, r2
 80127b4:	61fb      	str	r3, [r7, #28]
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	699a      	ldr	r2, [r3, #24]
 80127ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127bc:	441a      	add	r2, r3
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	619a      	str	r2, [r3, #24]
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	68da      	ldr	r2, [r3, #12]
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	699b      	ldr	r3, [r3, #24]
 80127ca:	429a      	cmp	r2, r3
 80127cc:	bf38      	it	cc
 80127ce:	461a      	movcc	r2, r3
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	60da      	str	r2, [r3, #12]
 80127d4:	683b      	ldr	r3, [r7, #0]
 80127d6:	681a      	ldr	r2, [r3, #0]
 80127d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127da:	441a      	add	r2, r3
 80127dc:	683b      	ldr	r3, [r7, #0]
 80127de:	601a      	str	r2, [r3, #0]
 80127e0:	687a      	ldr	r2, [r7, #4]
 80127e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127e4:	1ad3      	subs	r3, r2, r3
 80127e6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	f47f aeb5 	bne.w	801255a <f_write+0x76>
 80127f0:	e000      	b.n	80127f4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80127f2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	7d1b      	ldrb	r3, [r3, #20]
 80127f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127fc:	b2da      	uxtb	r2, r3
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8012802:	2300      	movs	r3, #0
}
 8012804:	4618      	mov	r0, r3
 8012806:	3730      	adds	r7, #48	; 0x30
 8012808:	46bd      	mov	sp, r7
 801280a:	bd80      	pop	{r7, pc}

0801280c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b086      	sub	sp, #24
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	f107 0208 	add.w	r2, r7, #8
 801281a:	4611      	mov	r1, r2
 801281c:	4618      	mov	r0, r3
 801281e:	f7ff fc19 	bl	8012054 <validate>
 8012822:	4603      	mov	r3, r0
 8012824:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012826:	7dfb      	ldrb	r3, [r7, #23]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d168      	bne.n	80128fe <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	7d1b      	ldrb	r3, [r3, #20]
 8012830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012834:	2b00      	cmp	r3, #0
 8012836:	d062      	beq.n	80128fe <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	7d1b      	ldrb	r3, [r3, #20]
 801283c:	b25b      	sxtb	r3, r3
 801283e:	2b00      	cmp	r3, #0
 8012840:	da15      	bge.n	801286e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012842:	68bb      	ldr	r3, [r7, #8]
 8012844:	7858      	ldrb	r0, [r3, #1]
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	6a1a      	ldr	r2, [r3, #32]
 8012850:	2301      	movs	r3, #1
 8012852:	f7fd fe7b 	bl	801054c <disk_write>
 8012856:	4603      	mov	r3, r0
 8012858:	2b00      	cmp	r3, #0
 801285a:	d001      	beq.n	8012860 <f_sync+0x54>
 801285c:	2301      	movs	r3, #1
 801285e:	e04f      	b.n	8012900 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	7d1b      	ldrb	r3, [r3, #20]
 8012864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012868:	b2da      	uxtb	r2, r3
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801286e:	f7fd fbd9 	bl	8010024 <get_fattime>
 8012872:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012874:	68ba      	ldr	r2, [r7, #8]
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801287a:	4619      	mov	r1, r3
 801287c:	4610      	mov	r0, r2
 801287e:	f7fe f917 	bl	8010ab0 <move_window>
 8012882:	4603      	mov	r3, r0
 8012884:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012886:	7dfb      	ldrb	r3, [r7, #23]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d138      	bne.n	80128fe <f_sync+0xf2>
					dir = fp->dir_ptr;
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012890:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	330b      	adds	r3, #11
 8012896:	781a      	ldrb	r2, [r3, #0]
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	330b      	adds	r3, #11
 801289c:	f042 0220 	orr.w	r2, r2, #32
 80128a0:	b2d2      	uxtb	r2, r2
 80128a2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	6818      	ldr	r0, [r3, #0]
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	689b      	ldr	r3, [r3, #8]
 80128ac:	461a      	mov	r2, r3
 80128ae:	68f9      	ldr	r1, [r7, #12]
 80128b0:	f7fe fea5 	bl	80115fe <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	f103 021c 	add.w	r2, r3, #28
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	68db      	ldr	r3, [r3, #12]
 80128be:	4619      	mov	r1, r3
 80128c0:	4610      	mov	r0, r2
 80128c2:	f7fd fed7 	bl	8010674 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	3316      	adds	r3, #22
 80128ca:	6939      	ldr	r1, [r7, #16]
 80128cc:	4618      	mov	r0, r3
 80128ce:	f7fd fed1 	bl	8010674 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	3312      	adds	r3, #18
 80128d6:	2100      	movs	r1, #0
 80128d8:	4618      	mov	r0, r3
 80128da:	f7fd feb0 	bl	801063e <st_word>
					fs->wflag = 1;
 80128de:	68bb      	ldr	r3, [r7, #8]
 80128e0:	2201      	movs	r2, #1
 80128e2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80128e4:	68bb      	ldr	r3, [r7, #8]
 80128e6:	4618      	mov	r0, r3
 80128e8:	f7fe f910 	bl	8010b0c <sync_fs>
 80128ec:	4603      	mov	r3, r0
 80128ee:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	7d1b      	ldrb	r3, [r3, #20]
 80128f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80128f8:	b2da      	uxtb	r2, r3
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80128fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8012900:	4618      	mov	r0, r3
 8012902:	3718      	adds	r7, #24
 8012904:	46bd      	mov	sp, r7
 8012906:	bd80      	pop	{r7, pc}

08012908 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8012908:	b580      	push	{r7, lr}
 801290a:	b090      	sub	sp, #64	; 0x40
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
 8012910:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8012912:	f107 010c 	add.w	r1, r7, #12
 8012916:	1d3b      	adds	r3, r7, #4
 8012918:	2200      	movs	r2, #0
 801291a:	4618      	mov	r0, r3
 801291c:	f7ff f91a 	bl	8011b54 <find_volume>
 8012920:	4603      	mov	r3, r0
 8012922:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8012926:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801292a:	2b00      	cmp	r3, #0
 801292c:	d11f      	bne.n	801296e <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801292e:	687a      	ldr	r2, [r7, #4]
 8012930:	f107 030c 	add.w	r3, r7, #12
 8012934:	4611      	mov	r1, r2
 8012936:	4618      	mov	r0, r3
 8012938:	f7fe fffc 	bl	8011934 <follow_path>
 801293c:	4603      	mov	r3, r0
 801293e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8012942:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012946:	2b00      	cmp	r3, #0
 8012948:	d111      	bne.n	801296e <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 801294a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801294e:	b25b      	sxtb	r3, r3
 8012950:	2b00      	cmp	r3, #0
 8012952:	da03      	bge.n	801295c <f_stat+0x54>
				res = FR_INVALID_NAME;
 8012954:	2306      	movs	r3, #6
 8012956:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801295a:	e008      	b.n	801296e <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 801295c:	683b      	ldr	r3, [r7, #0]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d005      	beq.n	801296e <f_stat+0x66>
 8012962:	f107 030c 	add.w	r3, r7, #12
 8012966:	6839      	ldr	r1, [r7, #0]
 8012968:	4618      	mov	r0, r3
 801296a:	f7fe feef 	bl	801174c <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 801296e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012972:	4618      	mov	r0, r3
 8012974:	3740      	adds	r7, #64	; 0x40
 8012976:	46bd      	mov	sp, r7
 8012978:	bd80      	pop	{r7, pc}
	...

0801297c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801297c:	b480      	push	{r7}
 801297e:	b087      	sub	sp, #28
 8012980:	af00      	add	r7, sp, #0
 8012982:	60f8      	str	r0, [r7, #12]
 8012984:	60b9      	str	r1, [r7, #8]
 8012986:	4613      	mov	r3, r2
 8012988:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801298a:	2301      	movs	r3, #1
 801298c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801298e:	2300      	movs	r3, #0
 8012990:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012992:	4b1f      	ldr	r3, [pc, #124]	; (8012a10 <FATFS_LinkDriverEx+0x94>)
 8012994:	7a5b      	ldrb	r3, [r3, #9]
 8012996:	b2db      	uxtb	r3, r3
 8012998:	2b00      	cmp	r3, #0
 801299a:	d131      	bne.n	8012a00 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801299c:	4b1c      	ldr	r3, [pc, #112]	; (8012a10 <FATFS_LinkDriverEx+0x94>)
 801299e:	7a5b      	ldrb	r3, [r3, #9]
 80129a0:	b2db      	uxtb	r3, r3
 80129a2:	461a      	mov	r2, r3
 80129a4:	4b1a      	ldr	r3, [pc, #104]	; (8012a10 <FATFS_LinkDriverEx+0x94>)
 80129a6:	2100      	movs	r1, #0
 80129a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80129aa:	4b19      	ldr	r3, [pc, #100]	; (8012a10 <FATFS_LinkDriverEx+0x94>)
 80129ac:	7a5b      	ldrb	r3, [r3, #9]
 80129ae:	b2db      	uxtb	r3, r3
 80129b0:	4a17      	ldr	r2, [pc, #92]	; (8012a10 <FATFS_LinkDriverEx+0x94>)
 80129b2:	009b      	lsls	r3, r3, #2
 80129b4:	4413      	add	r3, r2
 80129b6:	68fa      	ldr	r2, [r7, #12]
 80129b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80129ba:	4b15      	ldr	r3, [pc, #84]	; (8012a10 <FATFS_LinkDriverEx+0x94>)
 80129bc:	7a5b      	ldrb	r3, [r3, #9]
 80129be:	b2db      	uxtb	r3, r3
 80129c0:	461a      	mov	r2, r3
 80129c2:	4b13      	ldr	r3, [pc, #76]	; (8012a10 <FATFS_LinkDriverEx+0x94>)
 80129c4:	4413      	add	r3, r2
 80129c6:	79fa      	ldrb	r2, [r7, #7]
 80129c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80129ca:	4b11      	ldr	r3, [pc, #68]	; (8012a10 <FATFS_LinkDriverEx+0x94>)
 80129cc:	7a5b      	ldrb	r3, [r3, #9]
 80129ce:	b2db      	uxtb	r3, r3
 80129d0:	1c5a      	adds	r2, r3, #1
 80129d2:	b2d1      	uxtb	r1, r2
 80129d4:	4a0e      	ldr	r2, [pc, #56]	; (8012a10 <FATFS_LinkDriverEx+0x94>)
 80129d6:	7251      	strb	r1, [r2, #9]
 80129d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80129da:	7dbb      	ldrb	r3, [r7, #22]
 80129dc:	3330      	adds	r3, #48	; 0x30
 80129de:	b2da      	uxtb	r2, r3
 80129e0:	68bb      	ldr	r3, [r7, #8]
 80129e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80129e4:	68bb      	ldr	r3, [r7, #8]
 80129e6:	3301      	adds	r3, #1
 80129e8:	223a      	movs	r2, #58	; 0x3a
 80129ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80129ec:	68bb      	ldr	r3, [r7, #8]
 80129ee:	3302      	adds	r3, #2
 80129f0:	222f      	movs	r2, #47	; 0x2f
 80129f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80129f4:	68bb      	ldr	r3, [r7, #8]
 80129f6:	3303      	adds	r3, #3
 80129f8:	2200      	movs	r2, #0
 80129fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80129fc:	2300      	movs	r3, #0
 80129fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012a00:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a02:	4618      	mov	r0, r3
 8012a04:	371c      	adds	r7, #28
 8012a06:	46bd      	mov	sp, r7
 8012a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0c:	4770      	bx	lr
 8012a0e:	bf00      	nop
 8012a10:	200065f4 	.word	0x200065f4

08012a14 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b082      	sub	sp, #8
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
 8012a1c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012a1e:	2200      	movs	r2, #0
 8012a20:	6839      	ldr	r1, [r7, #0]
 8012a22:	6878      	ldr	r0, [r7, #4]
 8012a24:	f7ff ffaa 	bl	801297c <FATFS_LinkDriverEx>
 8012a28:	4603      	mov	r3, r0
}
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	3708      	adds	r7, #8
 8012a2e:	46bd      	mov	sp, r7
 8012a30:	bd80      	pop	{r7, pc}
	...

08012a34 <__libc_init_array>:
 8012a34:	b570      	push	{r4, r5, r6, lr}
 8012a36:	4d0d      	ldr	r5, [pc, #52]	; (8012a6c <__libc_init_array+0x38>)
 8012a38:	4c0d      	ldr	r4, [pc, #52]	; (8012a70 <__libc_init_array+0x3c>)
 8012a3a:	1b64      	subs	r4, r4, r5
 8012a3c:	10a4      	asrs	r4, r4, #2
 8012a3e:	2600      	movs	r6, #0
 8012a40:	42a6      	cmp	r6, r4
 8012a42:	d109      	bne.n	8012a58 <__libc_init_array+0x24>
 8012a44:	4d0b      	ldr	r5, [pc, #44]	; (8012a74 <__libc_init_array+0x40>)
 8012a46:	4c0c      	ldr	r4, [pc, #48]	; (8012a78 <__libc_init_array+0x44>)
 8012a48:	f006 fb32 	bl	80190b0 <_init>
 8012a4c:	1b64      	subs	r4, r4, r5
 8012a4e:	10a4      	asrs	r4, r4, #2
 8012a50:	2600      	movs	r6, #0
 8012a52:	42a6      	cmp	r6, r4
 8012a54:	d105      	bne.n	8012a62 <__libc_init_array+0x2e>
 8012a56:	bd70      	pop	{r4, r5, r6, pc}
 8012a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a5c:	4798      	blx	r3
 8012a5e:	3601      	adds	r6, #1
 8012a60:	e7ee      	b.n	8012a40 <__libc_init_array+0xc>
 8012a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a66:	4798      	blx	r3
 8012a68:	3601      	adds	r6, #1
 8012a6a:	e7f2      	b.n	8012a52 <__libc_init_array+0x1e>
 8012a6c:	0801b180 	.word	0x0801b180
 8012a70:	0801b180 	.word	0x0801b180
 8012a74:	0801b180 	.word	0x0801b180
 8012a78:	0801b188 	.word	0x0801b188

08012a7c <malloc>:
 8012a7c:	4b02      	ldr	r3, [pc, #8]	; (8012a88 <malloc+0xc>)
 8012a7e:	4601      	mov	r1, r0
 8012a80:	6818      	ldr	r0, [r3, #0]
 8012a82:	f000 b803 	b.w	8012a8c <_malloc_r>
 8012a86:	bf00      	nop
 8012a88:	200004bc 	.word	0x200004bc

08012a8c <_malloc_r>:
 8012a8c:	f101 030b 	add.w	r3, r1, #11
 8012a90:	2b16      	cmp	r3, #22
 8012a92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a96:	4605      	mov	r5, r0
 8012a98:	d906      	bls.n	8012aa8 <_malloc_r+0x1c>
 8012a9a:	f033 0707 	bics.w	r7, r3, #7
 8012a9e:	d504      	bpl.n	8012aaa <_malloc_r+0x1e>
 8012aa0:	230c      	movs	r3, #12
 8012aa2:	602b      	str	r3, [r5, #0]
 8012aa4:	2400      	movs	r4, #0
 8012aa6:	e1a5      	b.n	8012df4 <_malloc_r+0x368>
 8012aa8:	2710      	movs	r7, #16
 8012aaa:	42b9      	cmp	r1, r7
 8012aac:	d8f8      	bhi.n	8012aa0 <_malloc_r+0x14>
 8012aae:	4628      	mov	r0, r5
 8012ab0:	f000 fa30 	bl	8012f14 <__malloc_lock>
 8012ab4:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8012ab8:	4eb0      	ldr	r6, [pc, #704]	; (8012d7c <_malloc_r+0x2f0>)
 8012aba:	d237      	bcs.n	8012b2c <_malloc_r+0xa0>
 8012abc:	f107 0208 	add.w	r2, r7, #8
 8012ac0:	4432      	add	r2, r6
 8012ac2:	f1a2 0108 	sub.w	r1, r2, #8
 8012ac6:	6854      	ldr	r4, [r2, #4]
 8012ac8:	428c      	cmp	r4, r1
 8012aca:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8012ace:	d102      	bne.n	8012ad6 <_malloc_r+0x4a>
 8012ad0:	68d4      	ldr	r4, [r2, #12]
 8012ad2:	42a2      	cmp	r2, r4
 8012ad4:	d010      	beq.n	8012af8 <_malloc_r+0x6c>
 8012ad6:	6863      	ldr	r3, [r4, #4]
 8012ad8:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8012adc:	f023 0303 	bic.w	r3, r3, #3
 8012ae0:	60ca      	str	r2, [r1, #12]
 8012ae2:	4423      	add	r3, r4
 8012ae4:	6091      	str	r1, [r2, #8]
 8012ae6:	685a      	ldr	r2, [r3, #4]
 8012ae8:	f042 0201 	orr.w	r2, r2, #1
 8012aec:	605a      	str	r2, [r3, #4]
 8012aee:	4628      	mov	r0, r5
 8012af0:	f000 fa16 	bl	8012f20 <__malloc_unlock>
 8012af4:	3408      	adds	r4, #8
 8012af6:	e17d      	b.n	8012df4 <_malloc_r+0x368>
 8012af8:	3302      	adds	r3, #2
 8012afa:	6934      	ldr	r4, [r6, #16]
 8012afc:	49a0      	ldr	r1, [pc, #640]	; (8012d80 <_malloc_r+0x2f4>)
 8012afe:	428c      	cmp	r4, r1
 8012b00:	d077      	beq.n	8012bf2 <_malloc_r+0x166>
 8012b02:	6862      	ldr	r2, [r4, #4]
 8012b04:	f022 0c03 	bic.w	ip, r2, #3
 8012b08:	ebac 0007 	sub.w	r0, ip, r7
 8012b0c:	280f      	cmp	r0, #15
 8012b0e:	dd48      	ble.n	8012ba2 <_malloc_r+0x116>
 8012b10:	19e2      	adds	r2, r4, r7
 8012b12:	f040 0301 	orr.w	r3, r0, #1
 8012b16:	f047 0701 	orr.w	r7, r7, #1
 8012b1a:	6067      	str	r7, [r4, #4]
 8012b1c:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8012b20:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8012b24:	6053      	str	r3, [r2, #4]
 8012b26:	f844 000c 	str.w	r0, [r4, ip]
 8012b2a:	e7e0      	b.n	8012aee <_malloc_r+0x62>
 8012b2c:	0a7b      	lsrs	r3, r7, #9
 8012b2e:	d02a      	beq.n	8012b86 <_malloc_r+0xfa>
 8012b30:	2b04      	cmp	r3, #4
 8012b32:	d812      	bhi.n	8012b5a <_malloc_r+0xce>
 8012b34:	09bb      	lsrs	r3, r7, #6
 8012b36:	3338      	adds	r3, #56	; 0x38
 8012b38:	1c5a      	adds	r2, r3, #1
 8012b3a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8012b3e:	f1a2 0c08 	sub.w	ip, r2, #8
 8012b42:	6854      	ldr	r4, [r2, #4]
 8012b44:	4564      	cmp	r4, ip
 8012b46:	d006      	beq.n	8012b56 <_malloc_r+0xca>
 8012b48:	6862      	ldr	r2, [r4, #4]
 8012b4a:	f022 0203 	bic.w	r2, r2, #3
 8012b4e:	1bd0      	subs	r0, r2, r7
 8012b50:	280f      	cmp	r0, #15
 8012b52:	dd1c      	ble.n	8012b8e <_malloc_r+0x102>
 8012b54:	3b01      	subs	r3, #1
 8012b56:	3301      	adds	r3, #1
 8012b58:	e7cf      	b.n	8012afa <_malloc_r+0x6e>
 8012b5a:	2b14      	cmp	r3, #20
 8012b5c:	d801      	bhi.n	8012b62 <_malloc_r+0xd6>
 8012b5e:	335b      	adds	r3, #91	; 0x5b
 8012b60:	e7ea      	b.n	8012b38 <_malloc_r+0xac>
 8012b62:	2b54      	cmp	r3, #84	; 0x54
 8012b64:	d802      	bhi.n	8012b6c <_malloc_r+0xe0>
 8012b66:	0b3b      	lsrs	r3, r7, #12
 8012b68:	336e      	adds	r3, #110	; 0x6e
 8012b6a:	e7e5      	b.n	8012b38 <_malloc_r+0xac>
 8012b6c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8012b70:	d802      	bhi.n	8012b78 <_malloc_r+0xec>
 8012b72:	0bfb      	lsrs	r3, r7, #15
 8012b74:	3377      	adds	r3, #119	; 0x77
 8012b76:	e7df      	b.n	8012b38 <_malloc_r+0xac>
 8012b78:	f240 5254 	movw	r2, #1364	; 0x554
 8012b7c:	4293      	cmp	r3, r2
 8012b7e:	d804      	bhi.n	8012b8a <_malloc_r+0xfe>
 8012b80:	0cbb      	lsrs	r3, r7, #18
 8012b82:	337c      	adds	r3, #124	; 0x7c
 8012b84:	e7d8      	b.n	8012b38 <_malloc_r+0xac>
 8012b86:	233f      	movs	r3, #63	; 0x3f
 8012b88:	e7d6      	b.n	8012b38 <_malloc_r+0xac>
 8012b8a:	237e      	movs	r3, #126	; 0x7e
 8012b8c:	e7d4      	b.n	8012b38 <_malloc_r+0xac>
 8012b8e:	2800      	cmp	r0, #0
 8012b90:	68e1      	ldr	r1, [r4, #12]
 8012b92:	db04      	blt.n	8012b9e <_malloc_r+0x112>
 8012b94:	68a3      	ldr	r3, [r4, #8]
 8012b96:	60d9      	str	r1, [r3, #12]
 8012b98:	608b      	str	r3, [r1, #8]
 8012b9a:	18a3      	adds	r3, r4, r2
 8012b9c:	e7a3      	b.n	8012ae6 <_malloc_r+0x5a>
 8012b9e:	460c      	mov	r4, r1
 8012ba0:	e7d0      	b.n	8012b44 <_malloc_r+0xb8>
 8012ba2:	2800      	cmp	r0, #0
 8012ba4:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8012ba8:	db07      	blt.n	8012bba <_malloc_r+0x12e>
 8012baa:	44a4      	add	ip, r4
 8012bac:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8012bb0:	f043 0301 	orr.w	r3, r3, #1
 8012bb4:	f8cc 3004 	str.w	r3, [ip, #4]
 8012bb8:	e799      	b.n	8012aee <_malloc_r+0x62>
 8012bba:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8012bbe:	6870      	ldr	r0, [r6, #4]
 8012bc0:	f080 8096 	bcs.w	8012cf0 <_malloc_r+0x264>
 8012bc4:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8012bc8:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8012bcc:	f04f 0c01 	mov.w	ip, #1
 8012bd0:	3201      	adds	r2, #1
 8012bd2:	fa0c fc0e 	lsl.w	ip, ip, lr
 8012bd6:	ea4c 0000 	orr.w	r0, ip, r0
 8012bda:	6070      	str	r0, [r6, #4]
 8012bdc:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8012be0:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8012be4:	3808      	subs	r0, #8
 8012be6:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8012bea:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8012bee:	f8cc 400c 	str.w	r4, [ip, #12]
 8012bf2:	2001      	movs	r0, #1
 8012bf4:	109a      	asrs	r2, r3, #2
 8012bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8012bfa:	6870      	ldr	r0, [r6, #4]
 8012bfc:	4290      	cmp	r0, r2
 8012bfe:	d326      	bcc.n	8012c4e <_malloc_r+0x1c2>
 8012c00:	4210      	tst	r0, r2
 8012c02:	d106      	bne.n	8012c12 <_malloc_r+0x186>
 8012c04:	f023 0303 	bic.w	r3, r3, #3
 8012c08:	0052      	lsls	r2, r2, #1
 8012c0a:	4210      	tst	r0, r2
 8012c0c:	f103 0304 	add.w	r3, r3, #4
 8012c10:	d0fa      	beq.n	8012c08 <_malloc_r+0x17c>
 8012c12:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8012c16:	46c1      	mov	r9, r8
 8012c18:	469e      	mov	lr, r3
 8012c1a:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8012c1e:	454c      	cmp	r4, r9
 8012c20:	f040 80ba 	bne.w	8012d98 <_malloc_r+0x30c>
 8012c24:	f10e 0e01 	add.w	lr, lr, #1
 8012c28:	f01e 0f03 	tst.w	lr, #3
 8012c2c:	f109 0908 	add.w	r9, r9, #8
 8012c30:	d1f3      	bne.n	8012c1a <_malloc_r+0x18e>
 8012c32:	0798      	lsls	r0, r3, #30
 8012c34:	f040 80e4 	bne.w	8012e00 <_malloc_r+0x374>
 8012c38:	6873      	ldr	r3, [r6, #4]
 8012c3a:	ea23 0302 	bic.w	r3, r3, r2
 8012c3e:	6073      	str	r3, [r6, #4]
 8012c40:	6870      	ldr	r0, [r6, #4]
 8012c42:	0052      	lsls	r2, r2, #1
 8012c44:	4290      	cmp	r0, r2
 8012c46:	d302      	bcc.n	8012c4e <_malloc_r+0x1c2>
 8012c48:	2a00      	cmp	r2, #0
 8012c4a:	f040 80e6 	bne.w	8012e1a <_malloc_r+0x38e>
 8012c4e:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8012c52:	f8da 3004 	ldr.w	r3, [sl, #4]
 8012c56:	f023 0903 	bic.w	r9, r3, #3
 8012c5a:	45b9      	cmp	r9, r7
 8012c5c:	d304      	bcc.n	8012c68 <_malloc_r+0x1dc>
 8012c5e:	eba9 0207 	sub.w	r2, r9, r7
 8012c62:	2a0f      	cmp	r2, #15
 8012c64:	f300 8142 	bgt.w	8012eec <_malloc_r+0x460>
 8012c68:	4b46      	ldr	r3, [pc, #280]	; (8012d84 <_malloc_r+0x2f8>)
 8012c6a:	6819      	ldr	r1, [r3, #0]
 8012c6c:	3110      	adds	r1, #16
 8012c6e:	4439      	add	r1, r7
 8012c70:	2008      	movs	r0, #8
 8012c72:	9101      	str	r1, [sp, #4]
 8012c74:	f001 fbde 	bl	8014434 <sysconf>
 8012c78:	4a43      	ldr	r2, [pc, #268]	; (8012d88 <_malloc_r+0x2fc>)
 8012c7a:	9901      	ldr	r1, [sp, #4]
 8012c7c:	6813      	ldr	r3, [r2, #0]
 8012c7e:	3301      	adds	r3, #1
 8012c80:	bf1f      	itttt	ne
 8012c82:	f101 31ff 	addne.w	r1, r1, #4294967295
 8012c86:	1809      	addne	r1, r1, r0
 8012c88:	4243      	negne	r3, r0
 8012c8a:	4019      	andne	r1, r3
 8012c8c:	4680      	mov	r8, r0
 8012c8e:	4628      	mov	r0, r5
 8012c90:	9101      	str	r1, [sp, #4]
 8012c92:	f000 f9b3 	bl	8012ffc <_sbrk_r>
 8012c96:	1c42      	adds	r2, r0, #1
 8012c98:	eb0a 0b09 	add.w	fp, sl, r9
 8012c9c:	4604      	mov	r4, r0
 8012c9e:	f000 80f8 	beq.w	8012e92 <_malloc_r+0x406>
 8012ca2:	4583      	cmp	fp, r0
 8012ca4:	9901      	ldr	r1, [sp, #4]
 8012ca6:	4a38      	ldr	r2, [pc, #224]	; (8012d88 <_malloc_r+0x2fc>)
 8012ca8:	d902      	bls.n	8012cb0 <_malloc_r+0x224>
 8012caa:	45b2      	cmp	sl, r6
 8012cac:	f040 80f1 	bne.w	8012e92 <_malloc_r+0x406>
 8012cb0:	4b36      	ldr	r3, [pc, #216]	; (8012d8c <_malloc_r+0x300>)
 8012cb2:	6818      	ldr	r0, [r3, #0]
 8012cb4:	45a3      	cmp	fp, r4
 8012cb6:	eb00 0e01 	add.w	lr, r0, r1
 8012cba:	f8c3 e000 	str.w	lr, [r3]
 8012cbe:	f108 3cff 	add.w	ip, r8, #4294967295
 8012cc2:	f040 80ac 	bne.w	8012e1e <_malloc_r+0x392>
 8012cc6:	ea1b 0f0c 	tst.w	fp, ip
 8012cca:	f040 80a8 	bne.w	8012e1e <_malloc_r+0x392>
 8012cce:	68b2      	ldr	r2, [r6, #8]
 8012cd0:	4449      	add	r1, r9
 8012cd2:	f041 0101 	orr.w	r1, r1, #1
 8012cd6:	6051      	str	r1, [r2, #4]
 8012cd8:	4a2d      	ldr	r2, [pc, #180]	; (8012d90 <_malloc_r+0x304>)
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	6811      	ldr	r1, [r2, #0]
 8012cde:	428b      	cmp	r3, r1
 8012ce0:	bf88      	it	hi
 8012ce2:	6013      	strhi	r3, [r2, #0]
 8012ce4:	4a2b      	ldr	r2, [pc, #172]	; (8012d94 <_malloc_r+0x308>)
 8012ce6:	6811      	ldr	r1, [r2, #0]
 8012ce8:	428b      	cmp	r3, r1
 8012cea:	bf88      	it	hi
 8012cec:	6013      	strhi	r3, [r2, #0]
 8012cee:	e0d0      	b.n	8012e92 <_malloc_r+0x406>
 8012cf0:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8012cf4:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8012cf8:	d218      	bcs.n	8012d2c <_malloc_r+0x2a0>
 8012cfa:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8012cfe:	3238      	adds	r2, #56	; 0x38
 8012d00:	f102 0e01 	add.w	lr, r2, #1
 8012d04:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8012d08:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8012d0c:	45f0      	cmp	r8, lr
 8012d0e:	d12b      	bne.n	8012d68 <_malloc_r+0x2dc>
 8012d10:	1092      	asrs	r2, r2, #2
 8012d12:	f04f 0c01 	mov.w	ip, #1
 8012d16:	fa0c f202 	lsl.w	r2, ip, r2
 8012d1a:	4310      	orrs	r0, r2
 8012d1c:	6070      	str	r0, [r6, #4]
 8012d1e:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8012d22:	f8c8 4008 	str.w	r4, [r8, #8]
 8012d26:	f8ce 400c 	str.w	r4, [lr, #12]
 8012d2a:	e762      	b.n	8012bf2 <_malloc_r+0x166>
 8012d2c:	2a14      	cmp	r2, #20
 8012d2e:	d801      	bhi.n	8012d34 <_malloc_r+0x2a8>
 8012d30:	325b      	adds	r2, #91	; 0x5b
 8012d32:	e7e5      	b.n	8012d00 <_malloc_r+0x274>
 8012d34:	2a54      	cmp	r2, #84	; 0x54
 8012d36:	d803      	bhi.n	8012d40 <_malloc_r+0x2b4>
 8012d38:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8012d3c:	326e      	adds	r2, #110	; 0x6e
 8012d3e:	e7df      	b.n	8012d00 <_malloc_r+0x274>
 8012d40:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8012d44:	d803      	bhi.n	8012d4e <_malloc_r+0x2c2>
 8012d46:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8012d4a:	3277      	adds	r2, #119	; 0x77
 8012d4c:	e7d8      	b.n	8012d00 <_malloc_r+0x274>
 8012d4e:	f240 5e54 	movw	lr, #1364	; 0x554
 8012d52:	4572      	cmp	r2, lr
 8012d54:	bf9a      	itte	ls
 8012d56:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8012d5a:	327c      	addls	r2, #124	; 0x7c
 8012d5c:	227e      	movhi	r2, #126	; 0x7e
 8012d5e:	e7cf      	b.n	8012d00 <_malloc_r+0x274>
 8012d60:	f8de e008 	ldr.w	lr, [lr, #8]
 8012d64:	45f0      	cmp	r8, lr
 8012d66:	d005      	beq.n	8012d74 <_malloc_r+0x2e8>
 8012d68:	f8de 2004 	ldr.w	r2, [lr, #4]
 8012d6c:	f022 0203 	bic.w	r2, r2, #3
 8012d70:	4562      	cmp	r2, ip
 8012d72:	d8f5      	bhi.n	8012d60 <_malloc_r+0x2d4>
 8012d74:	f8de 800c 	ldr.w	r8, [lr, #12]
 8012d78:	e7d1      	b.n	8012d1e <_malloc_r+0x292>
 8012d7a:	bf00      	nop
 8012d7c:	200008e8 	.word	0x200008e8
 8012d80:	200008f0 	.word	0x200008f0
 8012d84:	20006630 	.word	0x20006630
 8012d88:	20000cf0 	.word	0x20000cf0
 8012d8c:	20006600 	.word	0x20006600
 8012d90:	20006628 	.word	0x20006628
 8012d94:	2000662c 	.word	0x2000662c
 8012d98:	6860      	ldr	r0, [r4, #4]
 8012d9a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8012d9e:	f020 0003 	bic.w	r0, r0, #3
 8012da2:	eba0 0a07 	sub.w	sl, r0, r7
 8012da6:	f1ba 0f0f 	cmp.w	sl, #15
 8012daa:	dd12      	ble.n	8012dd2 <_malloc_r+0x346>
 8012dac:	68a3      	ldr	r3, [r4, #8]
 8012dae:	19e2      	adds	r2, r4, r7
 8012db0:	f047 0701 	orr.w	r7, r7, #1
 8012db4:	6067      	str	r7, [r4, #4]
 8012db6:	f8c3 c00c 	str.w	ip, [r3, #12]
 8012dba:	f8cc 3008 	str.w	r3, [ip, #8]
 8012dbe:	f04a 0301 	orr.w	r3, sl, #1
 8012dc2:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8012dc6:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8012dca:	6053      	str	r3, [r2, #4]
 8012dcc:	f844 a000 	str.w	sl, [r4, r0]
 8012dd0:	e68d      	b.n	8012aee <_malloc_r+0x62>
 8012dd2:	f1ba 0f00 	cmp.w	sl, #0
 8012dd6:	db11      	blt.n	8012dfc <_malloc_r+0x370>
 8012dd8:	4420      	add	r0, r4
 8012dda:	6843      	ldr	r3, [r0, #4]
 8012ddc:	f043 0301 	orr.w	r3, r3, #1
 8012de0:	6043      	str	r3, [r0, #4]
 8012de2:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8012de6:	4628      	mov	r0, r5
 8012de8:	f8c3 c00c 	str.w	ip, [r3, #12]
 8012dec:	f8cc 3008 	str.w	r3, [ip, #8]
 8012df0:	f000 f896 	bl	8012f20 <__malloc_unlock>
 8012df4:	4620      	mov	r0, r4
 8012df6:	b003      	add	sp, #12
 8012df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dfc:	4664      	mov	r4, ip
 8012dfe:	e70e      	b.n	8012c1e <_malloc_r+0x192>
 8012e00:	f858 0908 	ldr.w	r0, [r8], #-8
 8012e04:	4540      	cmp	r0, r8
 8012e06:	f103 33ff 	add.w	r3, r3, #4294967295
 8012e0a:	f43f af12 	beq.w	8012c32 <_malloc_r+0x1a6>
 8012e0e:	e717      	b.n	8012c40 <_malloc_r+0x1b4>
 8012e10:	3304      	adds	r3, #4
 8012e12:	0052      	lsls	r2, r2, #1
 8012e14:	4210      	tst	r0, r2
 8012e16:	d0fb      	beq.n	8012e10 <_malloc_r+0x384>
 8012e18:	e6fb      	b.n	8012c12 <_malloc_r+0x186>
 8012e1a:	4673      	mov	r3, lr
 8012e1c:	e7fa      	b.n	8012e14 <_malloc_r+0x388>
 8012e1e:	6810      	ldr	r0, [r2, #0]
 8012e20:	3001      	adds	r0, #1
 8012e22:	bf1b      	ittet	ne
 8012e24:	eba4 0b0b 	subne.w	fp, r4, fp
 8012e28:	eb0b 020e 	addne.w	r2, fp, lr
 8012e2c:	6014      	streq	r4, [r2, #0]
 8012e2e:	601a      	strne	r2, [r3, #0]
 8012e30:	f014 0b07 	ands.w	fp, r4, #7
 8012e34:	bf1a      	itte	ne
 8012e36:	f1cb 0008 	rsbne	r0, fp, #8
 8012e3a:	1824      	addne	r4, r4, r0
 8012e3c:	4658      	moveq	r0, fp
 8012e3e:	1862      	adds	r2, r4, r1
 8012e40:	ea02 010c 	and.w	r1, r2, ip
 8012e44:	4480      	add	r8, r0
 8012e46:	eba8 0801 	sub.w	r8, r8, r1
 8012e4a:	ea08 080c 	and.w	r8, r8, ip
 8012e4e:	4641      	mov	r1, r8
 8012e50:	4628      	mov	r0, r5
 8012e52:	9201      	str	r2, [sp, #4]
 8012e54:	f000 f8d2 	bl	8012ffc <_sbrk_r>
 8012e58:	1c43      	adds	r3, r0, #1
 8012e5a:	9a01      	ldr	r2, [sp, #4]
 8012e5c:	4b28      	ldr	r3, [pc, #160]	; (8012f00 <_malloc_r+0x474>)
 8012e5e:	d107      	bne.n	8012e70 <_malloc_r+0x3e4>
 8012e60:	f1bb 0f00 	cmp.w	fp, #0
 8012e64:	d023      	beq.n	8012eae <_malloc_r+0x422>
 8012e66:	f1ab 0008 	sub.w	r0, fp, #8
 8012e6a:	4410      	add	r0, r2
 8012e6c:	f04f 0800 	mov.w	r8, #0
 8012e70:	681a      	ldr	r2, [r3, #0]
 8012e72:	60b4      	str	r4, [r6, #8]
 8012e74:	1b00      	subs	r0, r0, r4
 8012e76:	4440      	add	r0, r8
 8012e78:	4442      	add	r2, r8
 8012e7a:	f040 0001 	orr.w	r0, r0, #1
 8012e7e:	45b2      	cmp	sl, r6
 8012e80:	601a      	str	r2, [r3, #0]
 8012e82:	6060      	str	r0, [r4, #4]
 8012e84:	f43f af28 	beq.w	8012cd8 <_malloc_r+0x24c>
 8012e88:	f1b9 0f0f 	cmp.w	r9, #15
 8012e8c:	d812      	bhi.n	8012eb4 <_malloc_r+0x428>
 8012e8e:	2301      	movs	r3, #1
 8012e90:	6063      	str	r3, [r4, #4]
 8012e92:	68b3      	ldr	r3, [r6, #8]
 8012e94:	685b      	ldr	r3, [r3, #4]
 8012e96:	f023 0303 	bic.w	r3, r3, #3
 8012e9a:	42bb      	cmp	r3, r7
 8012e9c:	eba3 0207 	sub.w	r2, r3, r7
 8012ea0:	d301      	bcc.n	8012ea6 <_malloc_r+0x41a>
 8012ea2:	2a0f      	cmp	r2, #15
 8012ea4:	dc22      	bgt.n	8012eec <_malloc_r+0x460>
 8012ea6:	4628      	mov	r0, r5
 8012ea8:	f000 f83a 	bl	8012f20 <__malloc_unlock>
 8012eac:	e5fa      	b.n	8012aa4 <_malloc_r+0x18>
 8012eae:	4610      	mov	r0, r2
 8012eb0:	46d8      	mov	r8, fp
 8012eb2:	e7dd      	b.n	8012e70 <_malloc_r+0x3e4>
 8012eb4:	f8da 2004 	ldr.w	r2, [sl, #4]
 8012eb8:	f1a9 090c 	sub.w	r9, r9, #12
 8012ebc:	f029 0907 	bic.w	r9, r9, #7
 8012ec0:	f002 0201 	and.w	r2, r2, #1
 8012ec4:	ea42 0209 	orr.w	r2, r2, r9
 8012ec8:	f8ca 2004 	str.w	r2, [sl, #4]
 8012ecc:	2105      	movs	r1, #5
 8012ece:	eb0a 0209 	add.w	r2, sl, r9
 8012ed2:	f1b9 0f0f 	cmp.w	r9, #15
 8012ed6:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8012eda:	f67f aefd 	bls.w	8012cd8 <_malloc_r+0x24c>
 8012ede:	f10a 0108 	add.w	r1, sl, #8
 8012ee2:	4628      	mov	r0, r5
 8012ee4:	f003 fcf2 	bl	80168cc <_free_r>
 8012ee8:	4b05      	ldr	r3, [pc, #20]	; (8012f00 <_malloc_r+0x474>)
 8012eea:	e6f5      	b.n	8012cd8 <_malloc_r+0x24c>
 8012eec:	68b4      	ldr	r4, [r6, #8]
 8012eee:	f047 0301 	orr.w	r3, r7, #1
 8012ef2:	4427      	add	r7, r4
 8012ef4:	f042 0201 	orr.w	r2, r2, #1
 8012ef8:	6063      	str	r3, [r4, #4]
 8012efa:	60b7      	str	r7, [r6, #8]
 8012efc:	607a      	str	r2, [r7, #4]
 8012efe:	e5f6      	b.n	8012aee <_malloc_r+0x62>
 8012f00:	20006600 	.word	0x20006600

08012f04 <memset>:
 8012f04:	4402      	add	r2, r0
 8012f06:	4603      	mov	r3, r0
 8012f08:	4293      	cmp	r3, r2
 8012f0a:	d100      	bne.n	8012f0e <memset+0xa>
 8012f0c:	4770      	bx	lr
 8012f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8012f12:	e7f9      	b.n	8012f08 <memset+0x4>

08012f14 <__malloc_lock>:
 8012f14:	4801      	ldr	r0, [pc, #4]	; (8012f1c <__malloc_lock+0x8>)
 8012f16:	f003 bf09 	b.w	8016d2c <__retarget_lock_acquire_recursive>
 8012f1a:	bf00      	nop
 8012f1c:	20006635 	.word	0x20006635

08012f20 <__malloc_unlock>:
 8012f20:	4801      	ldr	r0, [pc, #4]	; (8012f28 <__malloc_unlock+0x8>)
 8012f22:	f003 bf04 	b.w	8016d2e <__retarget_lock_release_recursive>
 8012f26:	bf00      	nop
 8012f28:	20006635 	.word	0x20006635

08012f2c <printf>:
 8012f2c:	b40f      	push	{r0, r1, r2, r3}
 8012f2e:	b507      	push	{r0, r1, r2, lr}
 8012f30:	4906      	ldr	r1, [pc, #24]	; (8012f4c <printf+0x20>)
 8012f32:	ab04      	add	r3, sp, #16
 8012f34:	6808      	ldr	r0, [r1, #0]
 8012f36:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f3a:	6881      	ldr	r1, [r0, #8]
 8012f3c:	9301      	str	r3, [sp, #4]
 8012f3e:	f001 fa87 	bl	8014450 <_vfprintf_r>
 8012f42:	b003      	add	sp, #12
 8012f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f48:	b004      	add	sp, #16
 8012f4a:	4770      	bx	lr
 8012f4c:	200004bc 	.word	0x200004bc

08012f50 <putchar>:
 8012f50:	4b02      	ldr	r3, [pc, #8]	; (8012f5c <putchar+0xc>)
 8012f52:	4601      	mov	r1, r0
 8012f54:	6818      	ldr	r0, [r3, #0]
 8012f56:	6882      	ldr	r2, [r0, #8]
 8012f58:	f004 bab4 	b.w	80174c4 <_putc_r>
 8012f5c:	200004bc 	.word	0x200004bc

08012f60 <_puts_r>:
 8012f60:	b530      	push	{r4, r5, lr}
 8012f62:	4605      	mov	r5, r0
 8012f64:	b089      	sub	sp, #36	; 0x24
 8012f66:	4608      	mov	r0, r1
 8012f68:	460c      	mov	r4, r1
 8012f6a:	f7ed f969 	bl	8000240 <strlen>
 8012f6e:	4b1e      	ldr	r3, [pc, #120]	; (8012fe8 <_puts_r+0x88>)
 8012f70:	9306      	str	r3, [sp, #24]
 8012f72:	2301      	movs	r3, #1
 8012f74:	e9cd 4004 	strd	r4, r0, [sp, #16]
 8012f78:	9307      	str	r3, [sp, #28]
 8012f7a:	4418      	add	r0, r3
 8012f7c:	ab04      	add	r3, sp, #16
 8012f7e:	9301      	str	r3, [sp, #4]
 8012f80:	2302      	movs	r3, #2
 8012f82:	9302      	str	r3, [sp, #8]
 8012f84:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8012f86:	68ac      	ldr	r4, [r5, #8]
 8012f88:	9003      	str	r0, [sp, #12]
 8012f8a:	b913      	cbnz	r3, 8012f92 <_puts_r+0x32>
 8012f8c:	4628      	mov	r0, r5
 8012f8e:	f003 fc0d 	bl	80167ac <__sinit>
 8012f92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012f94:	07db      	lsls	r3, r3, #31
 8012f96:	d405      	bmi.n	8012fa4 <_puts_r+0x44>
 8012f98:	89a3      	ldrh	r3, [r4, #12]
 8012f9a:	0598      	lsls	r0, r3, #22
 8012f9c:	d402      	bmi.n	8012fa4 <_puts_r+0x44>
 8012f9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012fa0:	f003 fec4 	bl	8016d2c <__retarget_lock_acquire_recursive>
 8012fa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012fa8:	0499      	lsls	r1, r3, #18
 8012faa:	d406      	bmi.n	8012fba <_puts_r+0x5a>
 8012fac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012fb0:	81a3      	strh	r3, [r4, #12]
 8012fb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012fb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012fb8:	6663      	str	r3, [r4, #100]	; 0x64
 8012fba:	4628      	mov	r0, r5
 8012fbc:	aa01      	add	r2, sp, #4
 8012fbe:	4621      	mov	r1, r4
 8012fc0:	f003 fd44 	bl	8016a4c <__sfvwrite_r>
 8012fc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012fc6:	2800      	cmp	r0, #0
 8012fc8:	bf14      	ite	ne
 8012fca:	f04f 35ff 	movne.w	r5, #4294967295
 8012fce:	250a      	moveq	r5, #10
 8012fd0:	07da      	lsls	r2, r3, #31
 8012fd2:	d405      	bmi.n	8012fe0 <_puts_r+0x80>
 8012fd4:	89a3      	ldrh	r3, [r4, #12]
 8012fd6:	059b      	lsls	r3, r3, #22
 8012fd8:	d402      	bmi.n	8012fe0 <_puts_r+0x80>
 8012fda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012fdc:	f003 fea7 	bl	8016d2e <__retarget_lock_release_recursive>
 8012fe0:	4628      	mov	r0, r5
 8012fe2:	b009      	add	sp, #36	; 0x24
 8012fe4:	bd30      	pop	{r4, r5, pc}
 8012fe6:	bf00      	nop
 8012fe8:	080197ae 	.word	0x080197ae

08012fec <puts>:
 8012fec:	4b02      	ldr	r3, [pc, #8]	; (8012ff8 <puts+0xc>)
 8012fee:	4601      	mov	r1, r0
 8012ff0:	6818      	ldr	r0, [r3, #0]
 8012ff2:	f7ff bfb5 	b.w	8012f60 <_puts_r>
 8012ff6:	bf00      	nop
 8012ff8:	200004bc 	.word	0x200004bc

08012ffc <_sbrk_r>:
 8012ffc:	b538      	push	{r3, r4, r5, lr}
 8012ffe:	4d06      	ldr	r5, [pc, #24]	; (8013018 <_sbrk_r+0x1c>)
 8013000:	2300      	movs	r3, #0
 8013002:	4604      	mov	r4, r0
 8013004:	4608      	mov	r0, r1
 8013006:	602b      	str	r3, [r5, #0]
 8013008:	f006 f842 	bl	8019090 <_sbrk>
 801300c:	1c43      	adds	r3, r0, #1
 801300e:	d102      	bne.n	8013016 <_sbrk_r+0x1a>
 8013010:	682b      	ldr	r3, [r5, #0]
 8013012:	b103      	cbz	r3, 8013016 <_sbrk_r+0x1a>
 8013014:	6023      	str	r3, [r4, #0]
 8013016:	bd38      	pop	{r3, r4, r5, pc}
 8013018:	20006638 	.word	0x20006638

0801301c <sprintf>:
 801301c:	b40e      	push	{r1, r2, r3}
 801301e:	b500      	push	{lr}
 8013020:	b09c      	sub	sp, #112	; 0x70
 8013022:	ab1d      	add	r3, sp, #116	; 0x74
 8013024:	9002      	str	r0, [sp, #8]
 8013026:	9006      	str	r0, [sp, #24]
 8013028:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801302c:	4809      	ldr	r0, [pc, #36]	; (8013054 <sprintf+0x38>)
 801302e:	9107      	str	r1, [sp, #28]
 8013030:	9104      	str	r1, [sp, #16]
 8013032:	4909      	ldr	r1, [pc, #36]	; (8013058 <sprintf+0x3c>)
 8013034:	f853 2b04 	ldr.w	r2, [r3], #4
 8013038:	9105      	str	r1, [sp, #20]
 801303a:	6800      	ldr	r0, [r0, #0]
 801303c:	9301      	str	r3, [sp, #4]
 801303e:	a902      	add	r1, sp, #8
 8013040:	f000 f82a 	bl	8013098 <_svfprintf_r>
 8013044:	9b02      	ldr	r3, [sp, #8]
 8013046:	2200      	movs	r2, #0
 8013048:	701a      	strb	r2, [r3, #0]
 801304a:	b01c      	add	sp, #112	; 0x70
 801304c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013050:	b003      	add	sp, #12
 8013052:	4770      	bx	lr
 8013054:	200004bc 	.word	0x200004bc
 8013058:	ffff0208 	.word	0xffff0208

0801305c <strcpy>:
 801305c:	4603      	mov	r3, r0
 801305e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013062:	f803 2b01 	strb.w	r2, [r3], #1
 8013066:	2a00      	cmp	r2, #0
 8013068:	d1f9      	bne.n	801305e <strcpy+0x2>
 801306a:	4770      	bx	lr

0801306c <strstr>:
 801306c:	780a      	ldrb	r2, [r1, #0]
 801306e:	b570      	push	{r4, r5, r6, lr}
 8013070:	b96a      	cbnz	r2, 801308e <strstr+0x22>
 8013072:	bd70      	pop	{r4, r5, r6, pc}
 8013074:	429a      	cmp	r2, r3
 8013076:	d109      	bne.n	801308c <strstr+0x20>
 8013078:	460c      	mov	r4, r1
 801307a:	4605      	mov	r5, r0
 801307c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013080:	2b00      	cmp	r3, #0
 8013082:	d0f6      	beq.n	8013072 <strstr+0x6>
 8013084:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8013088:	429e      	cmp	r6, r3
 801308a:	d0f7      	beq.n	801307c <strstr+0x10>
 801308c:	3001      	adds	r0, #1
 801308e:	7803      	ldrb	r3, [r0, #0]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d1ef      	bne.n	8013074 <strstr+0x8>
 8013094:	4618      	mov	r0, r3
 8013096:	e7ec      	b.n	8013072 <strstr+0x6>

08013098 <_svfprintf_r>:
 8013098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801309c:	ed2d 8b04 	vpush	{d8-d9}
 80130a0:	b0cb      	sub	sp, #300	; 0x12c
 80130a2:	468b      	mov	fp, r1
 80130a4:	4692      	mov	sl, r2
 80130a6:	4698      	mov	r8, r3
 80130a8:	4607      	mov	r7, r0
 80130aa:	f003 fe39 	bl	8016d20 <_localeconv_r>
 80130ae:	6803      	ldr	r3, [r0, #0]
 80130b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80130b2:	4618      	mov	r0, r3
 80130b4:	f7ed f8c4 	bl	8000240 <strlen>
 80130b8:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80130bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80130be:	061a      	lsls	r2, r3, #24
 80130c0:	d519      	bpl.n	80130f6 <_svfprintf_r+0x5e>
 80130c2:	f8db 3010 	ldr.w	r3, [fp, #16]
 80130c6:	b9b3      	cbnz	r3, 80130f6 <_svfprintf_r+0x5e>
 80130c8:	2140      	movs	r1, #64	; 0x40
 80130ca:	4638      	mov	r0, r7
 80130cc:	f7ff fcde 	bl	8012a8c <_malloc_r>
 80130d0:	f8cb 0000 	str.w	r0, [fp]
 80130d4:	f8cb 0010 	str.w	r0, [fp, #16]
 80130d8:	b950      	cbnz	r0, 80130f0 <_svfprintf_r+0x58>
 80130da:	230c      	movs	r3, #12
 80130dc:	603b      	str	r3, [r7, #0]
 80130de:	f04f 33ff 	mov.w	r3, #4294967295
 80130e2:	930a      	str	r3, [sp, #40]	; 0x28
 80130e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80130e6:	b04b      	add	sp, #300	; 0x12c
 80130e8:	ecbd 8b04 	vpop	{d8-d9}
 80130ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130f0:	2340      	movs	r3, #64	; 0x40
 80130f2:	f8cb 3014 	str.w	r3, [fp, #20]
 80130f6:	2300      	movs	r3, #0
 80130f8:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
 80130fc:	ed9f 8b96 	vldr	d8, [pc, #600]	; 8013358 <_svfprintf_r+0x2c0>
 8013100:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8013104:	ac21      	add	r4, sp, #132	; 0x84
 8013106:	941e      	str	r4, [sp, #120]	; 0x78
 8013108:	9303      	str	r3, [sp, #12]
 801310a:	9308      	str	r3, [sp, #32]
 801310c:	930e      	str	r3, [sp, #56]	; 0x38
 801310e:	9310      	str	r3, [sp, #64]	; 0x40
 8013110:	930a      	str	r3, [sp, #40]	; 0x28
 8013112:	4653      	mov	r3, sl
 8013114:	461d      	mov	r5, r3
 8013116:	f813 2b01 	ldrb.w	r2, [r3], #1
 801311a:	b10a      	cbz	r2, 8013120 <_svfprintf_r+0x88>
 801311c:	2a25      	cmp	r2, #37	; 0x25
 801311e:	d1f9      	bne.n	8013114 <_svfprintf_r+0x7c>
 8013120:	ebb5 060a 	subs.w	r6, r5, sl
 8013124:	d00d      	beq.n	8013142 <_svfprintf_r+0xaa>
 8013126:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013128:	4433      	add	r3, r6
 801312a:	9320      	str	r3, [sp, #128]	; 0x80
 801312c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801312e:	3301      	adds	r3, #1
 8013130:	2b07      	cmp	r3, #7
 8013132:	e9c4 a600 	strd	sl, r6, [r4]
 8013136:	931f      	str	r3, [sp, #124]	; 0x7c
 8013138:	dc77      	bgt.n	801322a <_svfprintf_r+0x192>
 801313a:	3408      	adds	r4, #8
 801313c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801313e:	4433      	add	r3, r6
 8013140:	930a      	str	r3, [sp, #40]	; 0x28
 8013142:	782b      	ldrb	r3, [r5, #0]
 8013144:	2b00      	cmp	r3, #0
 8013146:	f001 8135 	beq.w	80143b4 <_svfprintf_r+0x131c>
 801314a:	2200      	movs	r2, #0
 801314c:	1c6b      	adds	r3, r5, #1
 801314e:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 8013152:	f04f 36ff 	mov.w	r6, #4294967295
 8013156:	920c      	str	r2, [sp, #48]	; 0x30
 8013158:	4615      	mov	r5, r2
 801315a:	f04f 092b 	mov.w	r9, #43	; 0x2b
 801315e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013162:	9204      	str	r2, [sp, #16]
 8013164:	9309      	str	r3, [sp, #36]	; 0x24
 8013166:	9b04      	ldr	r3, [sp, #16]
 8013168:	3b20      	subs	r3, #32
 801316a:	2b5a      	cmp	r3, #90	; 0x5a
 801316c:	f200 8590 	bhi.w	8013c90 <_svfprintf_r+0xbf8>
 8013170:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013174:	058e007d 	.word	0x058e007d
 8013178:	0085058e 	.word	0x0085058e
 801317c:	058e058e 	.word	0x058e058e
 8013180:	0065058e 	.word	0x0065058e
 8013184:	058e058e 	.word	0x058e058e
 8013188:	00920088 	.word	0x00920088
 801318c:	008f058e 	.word	0x008f058e
 8013190:	058e0095 	.word	0x058e0095
 8013194:	00b200af 	.word	0x00b200af
 8013198:	00b200b2 	.word	0x00b200b2
 801319c:	00b200b2 	.word	0x00b200b2
 80131a0:	00b200b2 	.word	0x00b200b2
 80131a4:	00b200b2 	.word	0x00b200b2
 80131a8:	058e058e 	.word	0x058e058e
 80131ac:	058e058e 	.word	0x058e058e
 80131b0:	058e058e 	.word	0x058e058e
 80131b4:	012d058e 	.word	0x012d058e
 80131b8:	00e0058e 	.word	0x00e0058e
 80131bc:	012d00fa 	.word	0x012d00fa
 80131c0:	012d012d 	.word	0x012d012d
 80131c4:	058e058e 	.word	0x058e058e
 80131c8:	058e058e 	.word	0x058e058e
 80131cc:	058e00c3 	.word	0x058e00c3
 80131d0:	0455058e 	.word	0x0455058e
 80131d4:	058e058e 	.word	0x058e058e
 80131d8:	04a3058e 	.word	0x04a3058e
 80131dc:	04c7058e 	.word	0x04c7058e
 80131e0:	058e058e 	.word	0x058e058e
 80131e4:	058e04ed 	.word	0x058e04ed
 80131e8:	058e058e 	.word	0x058e058e
 80131ec:	058e058e 	.word	0x058e058e
 80131f0:	058e058e 	.word	0x058e058e
 80131f4:	012d058e 	.word	0x012d058e
 80131f8:	00e0058e 	.word	0x00e0058e
 80131fc:	012d00fc 	.word	0x012d00fc
 8013200:	012d012d 	.word	0x012d012d
 8013204:	00fc00c6 	.word	0x00fc00c6
 8013208:	058e00da 	.word	0x058e00da
 801320c:	058e00d3 	.word	0x058e00d3
 8013210:	0457042e 	.word	0x0457042e
 8013214:	00da0490 	.word	0x00da0490
 8013218:	04a3058e 	.word	0x04a3058e
 801321c:	04c9007b 	.word	0x04c9007b
 8013220:	058e058e 	.word	0x058e058e
 8013224:	058e050d 	.word	0x058e050d
 8013228:	007b      	.short	0x007b
 801322a:	aa1e      	add	r2, sp, #120	; 0x78
 801322c:	4659      	mov	r1, fp
 801322e:	4638      	mov	r0, r7
 8013230:	f004 fbb0 	bl	8017994 <__ssprint_r>
 8013234:	2800      	cmp	r0, #0
 8013236:	f040 8126 	bne.w	8013486 <_svfprintf_r+0x3ee>
 801323a:	ac21      	add	r4, sp, #132	; 0x84
 801323c:	e77e      	b.n	801313c <_svfprintf_r+0xa4>
 801323e:	4638      	mov	r0, r7
 8013240:	f003 fd6e 	bl	8016d20 <_localeconv_r>
 8013244:	6843      	ldr	r3, [r0, #4]
 8013246:	9310      	str	r3, [sp, #64]	; 0x40
 8013248:	4618      	mov	r0, r3
 801324a:	f7ec fff9 	bl	8000240 <strlen>
 801324e:	900e      	str	r0, [sp, #56]	; 0x38
 8013250:	4638      	mov	r0, r7
 8013252:	f003 fd65 	bl	8016d20 <_localeconv_r>
 8013256:	6883      	ldr	r3, [r0, #8]
 8013258:	9308      	str	r3, [sp, #32]
 801325a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801325c:	b12b      	cbz	r3, 801326a <_svfprintf_r+0x1d2>
 801325e:	9b08      	ldr	r3, [sp, #32]
 8013260:	b11b      	cbz	r3, 801326a <_svfprintf_r+0x1d2>
 8013262:	781b      	ldrb	r3, [r3, #0]
 8013264:	b10b      	cbz	r3, 801326a <_svfprintf_r+0x1d2>
 8013266:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 801326a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801326c:	e777      	b.n	801315e <_svfprintf_r+0xc6>
 801326e:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8013272:	2b00      	cmp	r3, #0
 8013274:	d1f9      	bne.n	801326a <_svfprintf_r+0x1d2>
 8013276:	2320      	movs	r3, #32
 8013278:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 801327c:	e7f5      	b.n	801326a <_svfprintf_r+0x1d2>
 801327e:	f045 0501 	orr.w	r5, r5, #1
 8013282:	e7f2      	b.n	801326a <_svfprintf_r+0x1d2>
 8013284:	f858 3b04 	ldr.w	r3, [r8], #4
 8013288:	930c      	str	r3, [sp, #48]	; 0x30
 801328a:	2b00      	cmp	r3, #0
 801328c:	daed      	bge.n	801326a <_svfprintf_r+0x1d2>
 801328e:	425b      	negs	r3, r3
 8013290:	930c      	str	r3, [sp, #48]	; 0x30
 8013292:	f045 0504 	orr.w	r5, r5, #4
 8013296:	e7e8      	b.n	801326a <_svfprintf_r+0x1d2>
 8013298:	f88d 905b 	strb.w	r9, [sp, #91]	; 0x5b
 801329c:	e7e5      	b.n	801326a <_svfprintf_r+0x1d2>
 801329e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80132a0:	f812 3b01 	ldrb.w	r3, [r2], #1
 80132a4:	9304      	str	r3, [sp, #16]
 80132a6:	2b2a      	cmp	r3, #42	; 0x2a
 80132a8:	d111      	bne.n	80132ce <_svfprintf_r+0x236>
 80132aa:	f858 6b04 	ldr.w	r6, [r8], #4
 80132ae:	9209      	str	r2, [sp, #36]	; 0x24
 80132b0:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 80132b4:	e7d9      	b.n	801326a <_svfprintf_r+0x1d2>
 80132b6:	210a      	movs	r1, #10
 80132b8:	fb01 3606 	mla	r6, r1, r6, r3
 80132bc:	f812 3b01 	ldrb.w	r3, [r2], #1
 80132c0:	9304      	str	r3, [sp, #16]
 80132c2:	9b04      	ldr	r3, [sp, #16]
 80132c4:	3b30      	subs	r3, #48	; 0x30
 80132c6:	2b09      	cmp	r3, #9
 80132c8:	d9f5      	bls.n	80132b6 <_svfprintf_r+0x21e>
 80132ca:	9209      	str	r2, [sp, #36]	; 0x24
 80132cc:	e74b      	b.n	8013166 <_svfprintf_r+0xce>
 80132ce:	2600      	movs	r6, #0
 80132d0:	e7f7      	b.n	80132c2 <_svfprintf_r+0x22a>
 80132d2:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80132d6:	e7c8      	b.n	801326a <_svfprintf_r+0x1d2>
 80132d8:	2300      	movs	r3, #0
 80132da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80132dc:	930c      	str	r3, [sp, #48]	; 0x30
 80132de:	9b04      	ldr	r3, [sp, #16]
 80132e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80132e2:	3b30      	subs	r3, #48	; 0x30
 80132e4:	200a      	movs	r0, #10
 80132e6:	fb00 3301 	mla	r3, r0, r1, r3
 80132ea:	930c      	str	r3, [sp, #48]	; 0x30
 80132ec:	f812 3b01 	ldrb.w	r3, [r2], #1
 80132f0:	9304      	str	r3, [sp, #16]
 80132f2:	3b30      	subs	r3, #48	; 0x30
 80132f4:	2b09      	cmp	r3, #9
 80132f6:	d9f2      	bls.n	80132de <_svfprintf_r+0x246>
 80132f8:	e7e7      	b.n	80132ca <_svfprintf_r+0x232>
 80132fa:	f045 0508 	orr.w	r5, r5, #8
 80132fe:	e7b4      	b.n	801326a <_svfprintf_r+0x1d2>
 8013300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013302:	781b      	ldrb	r3, [r3, #0]
 8013304:	2b68      	cmp	r3, #104	; 0x68
 8013306:	bf01      	itttt	eq
 8013308:	9b09      	ldreq	r3, [sp, #36]	; 0x24
 801330a:	3301      	addeq	r3, #1
 801330c:	9309      	streq	r3, [sp, #36]	; 0x24
 801330e:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
 8013312:	bf18      	it	ne
 8013314:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
 8013318:	e7a7      	b.n	801326a <_svfprintf_r+0x1d2>
 801331a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801331c:	781b      	ldrb	r3, [r3, #0]
 801331e:	2b6c      	cmp	r3, #108	; 0x6c
 8013320:	d105      	bne.n	801332e <_svfprintf_r+0x296>
 8013322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013324:	3301      	adds	r3, #1
 8013326:	9309      	str	r3, [sp, #36]	; 0x24
 8013328:	f045 0520 	orr.w	r5, r5, #32
 801332c:	e79d      	b.n	801326a <_svfprintf_r+0x1d2>
 801332e:	f045 0510 	orr.w	r5, r5, #16
 8013332:	e79a      	b.n	801326a <_svfprintf_r+0x1d2>
 8013334:	4642      	mov	r2, r8
 8013336:	2000      	movs	r0, #0
 8013338:	f852 3b04 	ldr.w	r3, [r2], #4
 801333c:	9205      	str	r2, [sp, #20]
 801333e:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 8013342:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
 8013346:	e9cd 0006 	strd	r0, r0, [sp, #24]
 801334a:	9002      	str	r0, [sp, #8]
 801334c:	2601      	movs	r6, #1
 801334e:	4681      	mov	r9, r0
 8013350:	4680      	mov	r8, r0
 8013352:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 8013356:	e18e      	b.n	8013676 <_svfprintf_r+0x5de>
	...
 8013360:	ffffffff 	.word	0xffffffff
 8013364:	7fefffff 	.word	0x7fefffff
 8013368:	f045 0510 	orr.w	r5, r5, #16
 801336c:	06ab      	lsls	r3, r5, #26
 801336e:	d516      	bpl.n	801339e <_svfprintf_r+0x306>
 8013370:	f108 0307 	add.w	r3, r8, #7
 8013374:	f023 0307 	bic.w	r3, r3, #7
 8013378:	461a      	mov	r2, r3
 801337a:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801337e:	f852 8b08 	ldr.w	r8, [r2], #8
 8013382:	9205      	str	r2, [sp, #20]
 8013384:	f1b9 0f00 	cmp.w	r9, #0
 8013388:	da07      	bge.n	801339a <_svfprintf_r+0x302>
 801338a:	f1d8 0800 	rsbs	r8, r8, #0
 801338e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8013392:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
 8013396:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 801339a:	2301      	movs	r3, #1
 801339c:	e354      	b.n	8013a48 <_svfprintf_r+0x9b0>
 801339e:	4642      	mov	r2, r8
 80133a0:	06e8      	lsls	r0, r5, #27
 80133a2:	f852 3b04 	ldr.w	r3, [r2], #4
 80133a6:	9205      	str	r2, [sp, #20]
 80133a8:	d503      	bpl.n	80133b2 <_svfprintf_r+0x31a>
 80133aa:	4698      	mov	r8, r3
 80133ac:	ea4f 79e3 	mov.w	r9, r3, asr #31
 80133b0:	e7e8      	b.n	8013384 <_svfprintf_r+0x2ec>
 80133b2:	0669      	lsls	r1, r5, #25
 80133b4:	d504      	bpl.n	80133c0 <_svfprintf_r+0x328>
 80133b6:	fa0f f883 	sxth.w	r8, r3
 80133ba:	f343 39c0 	sbfx	r9, r3, #15, #1
 80133be:	e7e1      	b.n	8013384 <_svfprintf_r+0x2ec>
 80133c0:	05aa      	lsls	r2, r5, #22
 80133c2:	d5f2      	bpl.n	80133aa <_svfprintf_r+0x312>
 80133c4:	fa4f f883 	sxtb.w	r8, r3
 80133c8:	f343 19c0 	sbfx	r9, r3, #7, #1
 80133cc:	e7da      	b.n	8013384 <_svfprintf_r+0x2ec>
 80133ce:	f108 0807 	add.w	r8, r8, #7
 80133d2:	f028 0307 	bic.w	r3, r8, #7
 80133d6:	ecb3 8b02 	vldmia	r3!, {d8}
 80133da:	ed1f 7b1f 	vldr	d7, [pc, #-124]	; 8013360 <_svfprintf_r+0x2c8>
 80133de:	eeb0 6bc8 	vabs.f64	d6, d8
 80133e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80133e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133ea:	9305      	str	r3, [sp, #20]
 80133ec:	dd18      	ble.n	8013420 <_svfprintf_r+0x388>
 80133ee:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 80133f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133f6:	d502      	bpl.n	80133fe <_svfprintf_r+0x366>
 80133f8:	232d      	movs	r3, #45	; 0x2d
 80133fa:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 80133fe:	4a26      	ldr	r2, [pc, #152]	; (8013498 <_svfprintf_r+0x400>)
 8013400:	4826      	ldr	r0, [pc, #152]	; (801349c <_svfprintf_r+0x404>)
 8013402:	9b04      	ldr	r3, [sp, #16]
 8013404:	2b47      	cmp	r3, #71	; 0x47
 8013406:	bfd4      	ite	le
 8013408:	4692      	movle	sl, r2
 801340a:	4682      	movgt	sl, r0
 801340c:	2300      	movs	r3, #0
 801340e:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8013412:	9302      	str	r3, [sp, #8]
 8013414:	2603      	movs	r6, #3
 8013416:	4699      	mov	r9, r3
 8013418:	e9cd 3306 	strd	r3, r3, [sp, #24]
 801341c:	4698      	mov	r8, r3
 801341e:	e12a      	b.n	8013676 <_svfprintf_r+0x5de>
 8013420:	eeb4 8b48 	vcmp.f64	d8, d8
 8013424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013428:	d70a      	bvc.n	8013440 <_svfprintf_r+0x3a8>
 801342a:	ee18 3a90 	vmov	r3, s17
 801342e:	2b00      	cmp	r3, #0
 8013430:	bfb8      	it	lt
 8013432:	232d      	movlt	r3, #45	; 0x2d
 8013434:	4a1a      	ldr	r2, [pc, #104]	; (80134a0 <_svfprintf_r+0x408>)
 8013436:	481b      	ldr	r0, [pc, #108]	; (80134a4 <_svfprintf_r+0x40c>)
 8013438:	bfb8      	it	lt
 801343a:	f88d 305b 	strblt.w	r3, [sp, #91]	; 0x5b
 801343e:	e7e0      	b.n	8013402 <_svfprintf_r+0x36a>
 8013440:	9b04      	ldr	r3, [sp, #16]
 8013442:	f023 0920 	bic.w	r9, r3, #32
 8013446:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 801344a:	d12d      	bne.n	80134a8 <_svfprintf_r+0x410>
 801344c:	2330      	movs	r3, #48	; 0x30
 801344e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8013452:	9b04      	ldr	r3, [sp, #16]
 8013454:	2b61      	cmp	r3, #97	; 0x61
 8013456:	bf0c      	ite	eq
 8013458:	2378      	moveq	r3, #120	; 0x78
 801345a:	2358      	movne	r3, #88	; 0x58
 801345c:	2e63      	cmp	r6, #99	; 0x63
 801345e:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 8013462:	f045 0502 	orr.w	r5, r5, #2
 8013466:	f340 81db 	ble.w	8013820 <_svfprintf_r+0x788>
 801346a:	1c71      	adds	r1, r6, #1
 801346c:	4638      	mov	r0, r7
 801346e:	f7ff fb0d 	bl	8012a8c <_malloc_r>
 8013472:	4682      	mov	sl, r0
 8013474:	2800      	cmp	r0, #0
 8013476:	f040 81d8 	bne.w	801382a <_svfprintf_r+0x792>
 801347a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801347e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013482:	f8ab 300c 	strh.w	r3, [fp, #12]
 8013486:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801348a:	f013 0f40 	tst.w	r3, #64	; 0x40
 801348e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013490:	bf18      	it	ne
 8013492:	f04f 33ff 	movne.w	r3, #4294967295
 8013496:	e624      	b.n	80130e2 <_svfprintf_r+0x4a>
 8013498:	08019508 	.word	0x08019508
 801349c:	0801950c 	.word	0x0801950c
 80134a0:	08019510 	.word	0x08019510
 80134a4:	08019514 	.word	0x08019514
 80134a8:	1c73      	adds	r3, r6, #1
 80134aa:	f000 81c0 	beq.w	801382e <_svfprintf_r+0x796>
 80134ae:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80134b2:	f040 81c0 	bne.w	8013836 <_svfprintf_r+0x79e>
 80134b6:	2e00      	cmp	r6, #0
 80134b8:	f040 81bd 	bne.w	8013836 <_svfprintf_r+0x79e>
 80134bc:	9602      	str	r6, [sp, #8]
 80134be:	2601      	movs	r6, #1
 80134c0:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 80134c4:	930d      	str	r3, [sp, #52]	; 0x34
 80134c6:	ee18 3a90 	vmov	r3, s17
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	f280 81b6 	bge.w	801383c <_svfprintf_r+0x7a4>
 80134d0:	eeb1 9b48 	vneg.f64	d9, d8
 80134d4:	232d      	movs	r3, #45	; 0x2d
 80134d6:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 80134da:	9313      	str	r3, [sp, #76]	; 0x4c
 80134dc:	f040 81c7 	bne.w	801386e <_svfprintf_r+0x7d6>
 80134e0:	eeb0 0b49 	vmov.f64	d0, d9
 80134e4:	a818      	add	r0, sp, #96	; 0x60
 80134e6:	f004 f9c7 	bl	8017878 <frexp>
 80134ea:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
 80134ee:	ee20 0b07 	vmul.f64	d0, d0, d7
 80134f2:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80134f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134fa:	bf08      	it	eq
 80134fc:	2301      	moveq	r3, #1
 80134fe:	9a04      	ldr	r2, [sp, #16]
 8013500:	bf08      	it	eq
 8013502:	9318      	streq	r3, [sp, #96]	; 0x60
 8013504:	49b5      	ldr	r1, [pc, #724]	; (80137dc <_svfprintf_r+0x744>)
 8013506:	4bb6      	ldr	r3, [pc, #728]	; (80137e0 <_svfprintf_r+0x748>)
 8013508:	eeb3 7b00 	vmov.f64	d7, #48	; 0x41800000  16.0
 801350c:	2a61      	cmp	r2, #97	; 0x61
 801350e:	bf18      	it	ne
 8013510:	4619      	movne	r1, r3
 8013512:	1e72      	subs	r2, r6, #1
 8013514:	4653      	mov	r3, sl
 8013516:	ee20 0b07 	vmul.f64	d0, d0, d7
 801351a:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 801351e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013522:	ee16 ca90 	vmov	ip, s13
 8013526:	f811 000c 	ldrb.w	r0, [r1, ip]
 801352a:	f803 0b01 	strb.w	r0, [r3], #1
 801352e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013532:	4610      	mov	r0, r2
 8013534:	ee30 0b46 	vsub.f64	d0, d0, d6
 8013538:	d006      	beq.n	8013548 <_svfprintf_r+0x4b0>
 801353a:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801353e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013542:	f102 32ff 	add.w	r2, r2, #4294967295
 8013546:	d1e6      	bne.n	8013516 <_svfprintf_r+0x47e>
 8013548:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801354c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013554:	dc09      	bgt.n	801356a <_svfprintf_r+0x4d2>
 8013556:	eeb4 0b47 	vcmp.f64	d0, d7
 801355a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801355e:	f040 8180 	bne.w	8013862 <_svfprintf_r+0x7ca>
 8013562:	f01c 0f01 	tst.w	ip, #1
 8013566:	f000 817c 	beq.w	8013862 <_svfprintf_r+0x7ca>
 801356a:	f891 c00f 	ldrb.w	ip, [r1, #15]
 801356e:	931c      	str	r3, [sp, #112]	; 0x70
 8013570:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8013574:	981c      	ldr	r0, [sp, #112]	; 0x70
 8013576:	1e42      	subs	r2, r0, #1
 8013578:	921c      	str	r2, [sp, #112]	; 0x70
 801357a:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 801357e:	4562      	cmp	r2, ip
 8013580:	f000 8160 	beq.w	8013844 <_svfprintf_r+0x7ac>
 8013584:	2a39      	cmp	r2, #57	; 0x39
 8013586:	bf16      	itet	ne
 8013588:	3201      	addne	r2, #1
 801358a:	7a8a      	ldrbeq	r2, [r1, #10]
 801358c:	b2d2      	uxtbne	r2, r2
 801358e:	f800 2c01 	strb.w	r2, [r0, #-1]
 8013592:	eba3 030a 	sub.w	r3, r3, sl
 8013596:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801359a:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801359e:	9303      	str	r3, [sp, #12]
 80135a0:	f040 81a7 	bne.w	80138f2 <_svfprintf_r+0x85a>
 80135a4:	f118 0f03 	cmn.w	r8, #3
 80135a8:	db02      	blt.n	80135b0 <_svfprintf_r+0x518>
 80135aa:	4546      	cmp	r6, r8
 80135ac:	f280 81c9 	bge.w	8013942 <_svfprintf_r+0x8aa>
 80135b0:	9b04      	ldr	r3, [sp, #16]
 80135b2:	3b02      	subs	r3, #2
 80135b4:	9304      	str	r3, [sp, #16]
 80135b6:	9904      	ldr	r1, [sp, #16]
 80135b8:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80135bc:	f021 0120 	bic.w	r1, r1, #32
 80135c0:	2941      	cmp	r1, #65	; 0x41
 80135c2:	bf08      	it	eq
 80135c4:	320f      	addeq	r2, #15
 80135c6:	f108 33ff 	add.w	r3, r8, #4294967295
 80135ca:	bf06      	itte	eq
 80135cc:	b2d2      	uxtbeq	r2, r2
 80135ce:	2101      	moveq	r1, #1
 80135d0:	2100      	movne	r1, #0
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	9318      	str	r3, [sp, #96]	; 0x60
 80135d6:	bfb8      	it	lt
 80135d8:	f1c8 0301 	rsblt	r3, r8, #1
 80135dc:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
 80135e0:	bfb4      	ite	lt
 80135e2:	222d      	movlt	r2, #45	; 0x2d
 80135e4:	222b      	movge	r2, #43	; 0x2b
 80135e6:	2b09      	cmp	r3, #9
 80135e8:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 80135ec:	f340 8198 	ble.w	8013920 <_svfprintf_r+0x888>
 80135f0:	f10d 0277 	add.w	r2, sp, #119	; 0x77
 80135f4:	200a      	movs	r0, #10
 80135f6:	4611      	mov	r1, r2
 80135f8:	fb93 f6f0 	sdiv	r6, r3, r0
 80135fc:	fb00 3016 	mls	r0, r0, r6, r3
 8013600:	3030      	adds	r0, #48	; 0x30
 8013602:	f801 0c01 	strb.w	r0, [r1, #-1]
 8013606:	4618      	mov	r0, r3
 8013608:	2863      	cmp	r0, #99	; 0x63
 801360a:	f102 32ff 	add.w	r2, r2, #4294967295
 801360e:	4633      	mov	r3, r6
 8013610:	dcf0      	bgt.n	80135f4 <_svfprintf_r+0x55c>
 8013612:	3330      	adds	r3, #48	; 0x30
 8013614:	1e88      	subs	r0, r1, #2
 8013616:	f802 3c01 	strb.w	r3, [r2, #-1]
 801361a:	f10d 0677 	add.w	r6, sp, #119	; 0x77
 801361e:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 8013622:	4603      	mov	r3, r0
 8013624:	42b3      	cmp	r3, r6
 8013626:	f0c0 8176 	bcc.w	8013916 <_svfprintf_r+0x87e>
 801362a:	f10d 0279 	add.w	r2, sp, #121	; 0x79
 801362e:	1a52      	subs	r2, r2, r1
 8013630:	42b0      	cmp	r0, r6
 8013632:	bf88      	it	hi
 8013634:	2200      	movhi	r2, #0
 8013636:	f10d 036a 	add.w	r3, sp, #106	; 0x6a
 801363a:	441a      	add	r2, r3
 801363c:	ab1a      	add	r3, sp, #104	; 0x68
 801363e:	1ad3      	subs	r3, r2, r3
 8013640:	9a03      	ldr	r2, [sp, #12]
 8013642:	9311      	str	r3, [sp, #68]	; 0x44
 8013644:	2a01      	cmp	r2, #1
 8013646:	eb03 0602 	add.w	r6, r3, r2
 801364a:	dc01      	bgt.n	8013650 <_svfprintf_r+0x5b8>
 801364c:	07e8      	lsls	r0, r5, #31
 801364e:	d501      	bpl.n	8013654 <_svfprintf_r+0x5bc>
 8013650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013652:	441e      	add	r6, r3
 8013654:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8013658:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 801365c:	930d      	str	r3, [sp, #52]	; 0x34
 801365e:	2300      	movs	r3, #0
 8013660:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8013664:	4698      	mov	r8, r3
 8013666:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013668:	b113      	cbz	r3, 8013670 <_svfprintf_r+0x5d8>
 801366a:	232d      	movs	r3, #45	; 0x2d
 801366c:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8013670:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8013672:	f04f 0900 	mov.w	r9, #0
 8013676:	45b1      	cmp	r9, r6
 8013678:	464b      	mov	r3, r9
 801367a:	bfb8      	it	lt
 801367c:	4633      	movlt	r3, r6
 801367e:	930d      	str	r3, [sp, #52]	; 0x34
 8013680:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8013684:	b113      	cbz	r3, 801368c <_svfprintf_r+0x5f4>
 8013686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013688:	3301      	adds	r3, #1
 801368a:	930d      	str	r3, [sp, #52]	; 0x34
 801368c:	f015 0302 	ands.w	r3, r5, #2
 8013690:	9313      	str	r3, [sp, #76]	; 0x4c
 8013692:	bf1e      	ittt	ne
 8013694:	9b0d      	ldrne	r3, [sp, #52]	; 0x34
 8013696:	3302      	addne	r3, #2
 8013698:	930d      	strne	r3, [sp, #52]	; 0x34
 801369a:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 801369e:	9314      	str	r3, [sp, #80]	; 0x50
 80136a0:	d120      	bne.n	80136e4 <_svfprintf_r+0x64c>
 80136a2:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 80136a6:	1a9b      	subs	r3, r3, r2
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	dd1b      	ble.n	80136e4 <_svfprintf_r+0x64c>
 80136ac:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 80136b0:	494c      	ldr	r1, [pc, #304]	; (80137e4 <_svfprintf_r+0x74c>)
 80136b2:	6021      	str	r1, [r4, #0]
 80136b4:	2b10      	cmp	r3, #16
 80136b6:	f102 0201 	add.w	r2, r2, #1
 80136ba:	f104 0008 	add.w	r0, r4, #8
 80136be:	f300 82f7 	bgt.w	8013cb0 <_svfprintf_r+0xc18>
 80136c2:	eb0c 0103 	add.w	r1, ip, r3
 80136c6:	2a07      	cmp	r2, #7
 80136c8:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 80136cc:	6063      	str	r3, [r4, #4]
 80136ce:	f340 8304 	ble.w	8013cda <_svfprintf_r+0xc42>
 80136d2:	aa1e      	add	r2, sp, #120	; 0x78
 80136d4:	4659      	mov	r1, fp
 80136d6:	4638      	mov	r0, r7
 80136d8:	f004 f95c 	bl	8017994 <__ssprint_r>
 80136dc:	2800      	cmp	r0, #0
 80136de:	f040 8646 	bne.w	801436e <_svfprintf_r+0x12d6>
 80136e2:	ac21      	add	r4, sp, #132	; 0x84
 80136e4:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 80136e8:	b173      	cbz	r3, 8013708 <_svfprintf_r+0x670>
 80136ea:	f10d 035b 	add.w	r3, sp, #91	; 0x5b
 80136ee:	6023      	str	r3, [r4, #0]
 80136f0:	2301      	movs	r3, #1
 80136f2:	6063      	str	r3, [r4, #4]
 80136f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80136f6:	3301      	adds	r3, #1
 80136f8:	9320      	str	r3, [sp, #128]	; 0x80
 80136fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80136fc:	3301      	adds	r3, #1
 80136fe:	2b07      	cmp	r3, #7
 8013700:	931f      	str	r3, [sp, #124]	; 0x7c
 8013702:	f300 82ec 	bgt.w	8013cde <_svfprintf_r+0xc46>
 8013706:	3408      	adds	r4, #8
 8013708:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801370a:	b16b      	cbz	r3, 8013728 <_svfprintf_r+0x690>
 801370c:	ab17      	add	r3, sp, #92	; 0x5c
 801370e:	6023      	str	r3, [r4, #0]
 8013710:	2302      	movs	r3, #2
 8013712:	6063      	str	r3, [r4, #4]
 8013714:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013716:	3302      	adds	r3, #2
 8013718:	9320      	str	r3, [sp, #128]	; 0x80
 801371a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801371c:	3301      	adds	r3, #1
 801371e:	2b07      	cmp	r3, #7
 8013720:	931f      	str	r3, [sp, #124]	; 0x7c
 8013722:	f300 82e6 	bgt.w	8013cf2 <_svfprintf_r+0xc5a>
 8013726:	3408      	adds	r4, #8
 8013728:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801372a:	2b80      	cmp	r3, #128	; 0x80
 801372c:	d120      	bne.n	8013770 <_svfprintf_r+0x6d8>
 801372e:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8013732:	1a9b      	subs	r3, r3, r2
 8013734:	2b00      	cmp	r3, #0
 8013736:	dd1b      	ble.n	8013770 <_svfprintf_r+0x6d8>
 8013738:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 801373c:	492a      	ldr	r1, [pc, #168]	; (80137e8 <_svfprintf_r+0x750>)
 801373e:	6021      	str	r1, [r4, #0]
 8013740:	2b10      	cmp	r3, #16
 8013742:	f102 0201 	add.w	r2, r2, #1
 8013746:	f104 0008 	add.w	r0, r4, #8
 801374a:	f300 82dc 	bgt.w	8013d06 <_svfprintf_r+0xc6e>
 801374e:	eb0c 0103 	add.w	r1, ip, r3
 8013752:	2a07      	cmp	r2, #7
 8013754:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8013758:	6063      	str	r3, [r4, #4]
 801375a:	f340 82e9 	ble.w	8013d30 <_svfprintf_r+0xc98>
 801375e:	aa1e      	add	r2, sp, #120	; 0x78
 8013760:	4659      	mov	r1, fp
 8013762:	4638      	mov	r0, r7
 8013764:	f004 f916 	bl	8017994 <__ssprint_r>
 8013768:	2800      	cmp	r0, #0
 801376a:	f040 8600 	bne.w	801436e <_svfprintf_r+0x12d6>
 801376e:	ac21      	add	r4, sp, #132	; 0x84
 8013770:	eba9 0906 	sub.w	r9, r9, r6
 8013774:	f1b9 0f00 	cmp.w	r9, #0
 8013778:	dd1c      	ble.n	80137b4 <_svfprintf_r+0x71c>
 801377a:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	; 0x7c
 801377e:	481a      	ldr	r0, [pc, #104]	; (80137e8 <_svfprintf_r+0x750>)
 8013780:	6020      	str	r0, [r4, #0]
 8013782:	f1b9 0f10 	cmp.w	r9, #16
 8013786:	f102 0201 	add.w	r2, r2, #1
 801378a:	f104 0108 	add.w	r1, r4, #8
 801378e:	f300 82d1 	bgt.w	8013d34 <_svfprintf_r+0xc9c>
 8013792:	444b      	add	r3, r9
 8013794:	2a07      	cmp	r2, #7
 8013796:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 801379a:	f8c4 9004 	str.w	r9, [r4, #4]
 801379e:	f340 82dd 	ble.w	8013d5c <_svfprintf_r+0xcc4>
 80137a2:	aa1e      	add	r2, sp, #120	; 0x78
 80137a4:	4659      	mov	r1, fp
 80137a6:	4638      	mov	r0, r7
 80137a8:	f004 f8f4 	bl	8017994 <__ssprint_r>
 80137ac:	2800      	cmp	r0, #0
 80137ae:	f040 85de 	bne.w	801436e <_svfprintf_r+0x12d6>
 80137b2:	ac21      	add	r4, sp, #132	; 0x84
 80137b4:	05e9      	lsls	r1, r5, #23
 80137b6:	9820      	ldr	r0, [sp, #128]	; 0x80
 80137b8:	f100 82d6 	bmi.w	8013d68 <_svfprintf_r+0xcd0>
 80137bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80137be:	3301      	adds	r3, #1
 80137c0:	4430      	add	r0, r6
 80137c2:	2b07      	cmp	r3, #7
 80137c4:	e9c4 a600 	strd	sl, r6, [r4]
 80137c8:	9020      	str	r0, [sp, #128]	; 0x80
 80137ca:	931f      	str	r3, [sp, #124]	; 0x7c
 80137cc:	f300 8310 	bgt.w	8013df0 <_svfprintf_r+0xd58>
 80137d0:	3408      	adds	r4, #8
 80137d2:	076b      	lsls	r3, r5, #29
 80137d4:	f100 85ac 	bmi.w	8014330 <_svfprintf_r+0x1298>
 80137d8:	e008      	b.n	80137ec <_svfprintf_r+0x754>
 80137da:	bf00      	nop
 80137dc:	08019518 	.word	0x08019518
 80137e0:	08019529 	.word	0x08019529
 80137e4:	0801953c 	.word	0x0801953c
 80137e8:	0801954c 	.word	0x0801954c
 80137ec:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
 80137f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137f2:	428a      	cmp	r2, r1
 80137f4:	bfac      	ite	ge
 80137f6:	189b      	addge	r3, r3, r2
 80137f8:	185b      	addlt	r3, r3, r1
 80137fa:	930a      	str	r3, [sp, #40]	; 0x28
 80137fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80137fe:	b13b      	cbz	r3, 8013810 <_svfprintf_r+0x778>
 8013800:	aa1e      	add	r2, sp, #120	; 0x78
 8013802:	4659      	mov	r1, fp
 8013804:	4638      	mov	r0, r7
 8013806:	f004 f8c5 	bl	8017994 <__ssprint_r>
 801380a:	2800      	cmp	r0, #0
 801380c:	f040 85af 	bne.w	801436e <_svfprintf_r+0x12d6>
 8013810:	2300      	movs	r3, #0
 8013812:	931f      	str	r3, [sp, #124]	; 0x7c
 8013814:	9b02      	ldr	r3, [sp, #8]
 8013816:	2b00      	cmp	r3, #0
 8013818:	f040 85c6 	bne.w	80143a8 <_svfprintf_r+0x1310>
 801381c:	ac21      	add	r4, sp, #132	; 0x84
 801381e:	e0e3      	b.n	80139e8 <_svfprintf_r+0x950>
 8013820:	2300      	movs	r3, #0
 8013822:	9302      	str	r3, [sp, #8]
 8013824:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 8013828:	e64a      	b.n	80134c0 <_svfprintf_r+0x428>
 801382a:	9002      	str	r0, [sp, #8]
 801382c:	e648      	b.n	80134c0 <_svfprintf_r+0x428>
 801382e:	2300      	movs	r3, #0
 8013830:	9302      	str	r3, [sp, #8]
 8013832:	2606      	movs	r6, #6
 8013834:	e644      	b.n	80134c0 <_svfprintf_r+0x428>
 8013836:	2300      	movs	r3, #0
 8013838:	9302      	str	r3, [sp, #8]
 801383a:	e641      	b.n	80134c0 <_svfprintf_r+0x428>
 801383c:	2300      	movs	r3, #0
 801383e:	eeb0 9b48 	vmov.f64	d9, d8
 8013842:	e648      	b.n	80134d6 <_svfprintf_r+0x43e>
 8013844:	f800 ec01 	strb.w	lr, [r0, #-1]
 8013848:	e694      	b.n	8013574 <_svfprintf_r+0x4dc>
 801384a:	f802 eb01 	strb.w	lr, [r2], #1
 801384e:	ebac 0102 	sub.w	r1, ip, r2
 8013852:	2900      	cmp	r1, #0
 8013854:	daf9      	bge.n	801384a <_svfprintf_r+0x7b2>
 8013856:	1c42      	adds	r2, r0, #1
 8013858:	3001      	adds	r0, #1
 801385a:	bfb8      	it	lt
 801385c:	2200      	movlt	r2, #0
 801385e:	4413      	add	r3, r2
 8013860:	e697      	b.n	8013592 <_svfprintf_r+0x4fa>
 8013862:	461a      	mov	r2, r3
 8013864:	eb03 0c00 	add.w	ip, r3, r0
 8013868:	f04f 0e30 	mov.w	lr, #48	; 0x30
 801386c:	e7ef      	b.n	801384e <_svfprintf_r+0x7b6>
 801386e:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 8013872:	d006      	beq.n	8013882 <_svfprintf_r+0x7ea>
 8013874:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
 8013878:	d118      	bne.n	80138ac <_svfprintf_r+0x814>
 801387a:	f106 0801 	add.w	r8, r6, #1
 801387e:	2102      	movs	r1, #2
 8013880:	e001      	b.n	8013886 <_svfprintf_r+0x7ee>
 8013882:	46b0      	mov	r8, r6
 8013884:	2103      	movs	r1, #3
 8013886:	ab1c      	add	r3, sp, #112	; 0x70
 8013888:	9301      	str	r3, [sp, #4]
 801388a:	ab19      	add	r3, sp, #100	; 0x64
 801388c:	9300      	str	r3, [sp, #0]
 801388e:	4642      	mov	r2, r8
 8013890:	ab18      	add	r3, sp, #96	; 0x60
 8013892:	4638      	mov	r0, r7
 8013894:	eeb0 0b49 	vmov.f64	d0, d9
 8013898:	f002 f932 	bl	8015b00 <_dtoa_r>
 801389c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80138a0:	4682      	mov	sl, r0
 80138a2:	d105      	bne.n	80138b0 <_svfprintf_r+0x818>
 80138a4:	07eb      	lsls	r3, r5, #31
 80138a6:	d403      	bmi.n	80138b0 <_svfprintf_r+0x818>
 80138a8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80138aa:	e672      	b.n	8013592 <_svfprintf_r+0x4fa>
 80138ac:	46b0      	mov	r8, r6
 80138ae:	e7e6      	b.n	801387e <_svfprintf_r+0x7e6>
 80138b0:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 80138b4:	eb0a 0308 	add.w	r3, sl, r8
 80138b8:	d10d      	bne.n	80138d6 <_svfprintf_r+0x83e>
 80138ba:	f89a 2000 	ldrb.w	r2, [sl]
 80138be:	2a30      	cmp	r2, #48	; 0x30
 80138c0:	d107      	bne.n	80138d2 <_svfprintf_r+0x83a>
 80138c2:	eeb5 9b40 	vcmp.f64	d9, #0.0
 80138c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138ca:	bf1c      	itt	ne
 80138cc:	f1c8 0201 	rsbne	r2, r8, #1
 80138d0:	9218      	strne	r2, [sp, #96]	; 0x60
 80138d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80138d4:	4413      	add	r3, r2
 80138d6:	eeb5 9b40 	vcmp.f64	d9, #0.0
 80138da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138de:	bf08      	it	eq
 80138e0:	931c      	streq	r3, [sp, #112]	; 0x70
 80138e2:	2130      	movs	r1, #48	; 0x30
 80138e4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80138e6:	4293      	cmp	r3, r2
 80138e8:	d9de      	bls.n	80138a8 <_svfprintf_r+0x810>
 80138ea:	1c50      	adds	r0, r2, #1
 80138ec:	901c      	str	r0, [sp, #112]	; 0x70
 80138ee:	7011      	strb	r1, [r2, #0]
 80138f0:	e7f8      	b.n	80138e4 <_svfprintf_r+0x84c>
 80138f2:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 80138f6:	f47f ae5e 	bne.w	80135b6 <_svfprintf_r+0x51e>
 80138fa:	f005 0301 	and.w	r3, r5, #1
 80138fe:	f1b8 0f00 	cmp.w	r8, #0
 8013902:	ea43 0306 	orr.w	r3, r3, r6
 8013906:	dd18      	ble.n	801393a <_svfprintf_r+0x8a2>
 8013908:	b383      	cbz	r3, 801396c <_svfprintf_r+0x8d4>
 801390a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801390c:	4443      	add	r3, r8
 801390e:	441e      	add	r6, r3
 8013910:	2366      	movs	r3, #102	; 0x66
 8013912:	9304      	str	r3, [sp, #16]
 8013914:	e02f      	b.n	8013976 <_svfprintf_r+0x8de>
 8013916:	f813 cb01 	ldrb.w	ip, [r3], #1
 801391a:	f802 cb01 	strb.w	ip, [r2], #1
 801391e:	e681      	b.n	8013624 <_svfprintf_r+0x58c>
 8013920:	b941      	cbnz	r1, 8013934 <_svfprintf_r+0x89c>
 8013922:	2230      	movs	r2, #48	; 0x30
 8013924:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
 8013928:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 801392c:	3330      	adds	r3, #48	; 0x30
 801392e:	f802 3b01 	strb.w	r3, [r2], #1
 8013932:	e683      	b.n	801363c <_svfprintf_r+0x5a4>
 8013934:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 8013938:	e7f8      	b.n	801392c <_svfprintf_r+0x894>
 801393a:	b1cb      	cbz	r3, 8013970 <_svfprintf_r+0x8d8>
 801393c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801393e:	3301      	adds	r3, #1
 8013940:	e7e5      	b.n	801390e <_svfprintf_r+0x876>
 8013942:	9b03      	ldr	r3, [sp, #12]
 8013944:	4598      	cmp	r8, r3
 8013946:	db06      	blt.n	8013956 <_svfprintf_r+0x8be>
 8013948:	07e9      	lsls	r1, r5, #31
 801394a:	d52a      	bpl.n	80139a2 <_svfprintf_r+0x90a>
 801394c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801394e:	eb08 0603 	add.w	r6, r8, r3
 8013952:	2367      	movs	r3, #103	; 0x67
 8013954:	e7dd      	b.n	8013912 <_svfprintf_r+0x87a>
 8013956:	9b03      	ldr	r3, [sp, #12]
 8013958:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801395a:	f1b8 0f00 	cmp.w	r8, #0
 801395e:	eb03 0602 	add.w	r6, r3, r2
 8013962:	dcf6      	bgt.n	8013952 <_svfprintf_r+0x8ba>
 8013964:	f1c8 0301 	rsb	r3, r8, #1
 8013968:	441e      	add	r6, r3
 801396a:	e7f2      	b.n	8013952 <_svfprintf_r+0x8ba>
 801396c:	4646      	mov	r6, r8
 801396e:	e7cf      	b.n	8013910 <_svfprintf_r+0x878>
 8013970:	2366      	movs	r3, #102	; 0x66
 8013972:	9304      	str	r3, [sp, #16]
 8013974:	2601      	movs	r6, #1
 8013976:	f415 6380 	ands.w	r3, r5, #1024	; 0x400
 801397a:	9307      	str	r3, [sp, #28]
 801397c:	d025      	beq.n	80139ca <_svfprintf_r+0x932>
 801397e:	2300      	movs	r3, #0
 8013980:	f1b8 0f00 	cmp.w	r8, #0
 8013984:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8013988:	f77f ae6d 	ble.w	8013666 <_svfprintf_r+0x5ce>
 801398c:	9b08      	ldr	r3, [sp, #32]
 801398e:	781b      	ldrb	r3, [r3, #0]
 8013990:	2bff      	cmp	r3, #255	; 0xff
 8013992:	d108      	bne.n	80139a6 <_svfprintf_r+0x90e>
 8013994:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013998:	4413      	add	r3, r2
 801399a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801399c:	fb02 6603 	mla	r6, r2, r3, r6
 80139a0:	e661      	b.n	8013666 <_svfprintf_r+0x5ce>
 80139a2:	4646      	mov	r6, r8
 80139a4:	e7d5      	b.n	8013952 <_svfprintf_r+0x8ba>
 80139a6:	4543      	cmp	r3, r8
 80139a8:	daf4      	bge.n	8013994 <_svfprintf_r+0x8fc>
 80139aa:	eba8 0803 	sub.w	r8, r8, r3
 80139ae:	9b08      	ldr	r3, [sp, #32]
 80139b0:	785b      	ldrb	r3, [r3, #1]
 80139b2:	b133      	cbz	r3, 80139c2 <_svfprintf_r+0x92a>
 80139b4:	9b07      	ldr	r3, [sp, #28]
 80139b6:	3301      	adds	r3, #1
 80139b8:	9307      	str	r3, [sp, #28]
 80139ba:	9b08      	ldr	r3, [sp, #32]
 80139bc:	3301      	adds	r3, #1
 80139be:	9308      	str	r3, [sp, #32]
 80139c0:	e7e4      	b.n	801398c <_svfprintf_r+0x8f4>
 80139c2:	9b06      	ldr	r3, [sp, #24]
 80139c4:	3301      	adds	r3, #1
 80139c6:	9306      	str	r3, [sp, #24]
 80139c8:	e7e0      	b.n	801398c <_svfprintf_r+0x8f4>
 80139ca:	9b07      	ldr	r3, [sp, #28]
 80139cc:	9306      	str	r3, [sp, #24]
 80139ce:	e64a      	b.n	8013666 <_svfprintf_r+0x5ce>
 80139d0:	f108 0304 	add.w	r3, r8, #4
 80139d4:	06aa      	lsls	r2, r5, #26
 80139d6:	9305      	str	r3, [sp, #20]
 80139d8:	d50c      	bpl.n	80139f4 <_svfprintf_r+0x95c>
 80139da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80139dc:	f8d8 3000 	ldr.w	r3, [r8]
 80139e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80139e2:	17d2      	asrs	r2, r2, #31
 80139e4:	e9c3 1200 	strd	r1, r2, [r3]
 80139e8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80139ec:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80139f0:	f7ff bb8f 	b.w	8013112 <_svfprintf_r+0x7a>
 80139f4:	06eb      	lsls	r3, r5, #27
 80139f6:	d504      	bpl.n	8013a02 <_svfprintf_r+0x96a>
 80139f8:	f8d8 3000 	ldr.w	r3, [r8]
 80139fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80139fe:	601a      	str	r2, [r3, #0]
 8013a00:	e7f2      	b.n	80139e8 <_svfprintf_r+0x950>
 8013a02:	066e      	lsls	r6, r5, #25
 8013a04:	d504      	bpl.n	8013a10 <_svfprintf_r+0x978>
 8013a06:	f8d8 3000 	ldr.w	r3, [r8]
 8013a0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013a0c:	801a      	strh	r2, [r3, #0]
 8013a0e:	e7eb      	b.n	80139e8 <_svfprintf_r+0x950>
 8013a10:	05ad      	lsls	r5, r5, #22
 8013a12:	d5f1      	bpl.n	80139f8 <_svfprintf_r+0x960>
 8013a14:	f8d8 3000 	ldr.w	r3, [r8]
 8013a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013a1a:	701a      	strb	r2, [r3, #0]
 8013a1c:	e7e4      	b.n	80139e8 <_svfprintf_r+0x950>
 8013a1e:	f045 0510 	orr.w	r5, r5, #16
 8013a22:	f015 0320 	ands.w	r3, r5, #32
 8013a26:	d020      	beq.n	8013a6a <_svfprintf_r+0x9d2>
 8013a28:	f108 0307 	add.w	r3, r8, #7
 8013a2c:	f023 0307 	bic.w	r3, r3, #7
 8013a30:	461a      	mov	r2, r3
 8013a32:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8013a36:	f852 8b08 	ldr.w	r8, [r2], #8
 8013a3a:	9205      	str	r2, [sp, #20]
 8013a3c:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8013a40:	2300      	movs	r3, #0
 8013a42:	2200      	movs	r2, #0
 8013a44:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 8013a48:	1c72      	adds	r2, r6, #1
 8013a4a:	f000 84c3 	beq.w	80143d4 <_svfprintf_r+0x133c>
 8013a4e:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8013a52:	9202      	str	r2, [sp, #8]
 8013a54:	ea58 0209 	orrs.w	r2, r8, r9
 8013a58:	f040 84c1 	bne.w	80143de <_svfprintf_r+0x1346>
 8013a5c:	2e00      	cmp	r6, #0
 8013a5e:	f000 810d 	beq.w	8013c7c <_svfprintf_r+0xbe4>
 8013a62:	2b01      	cmp	r3, #1
 8013a64:	f040 84be 	bne.w	80143e4 <_svfprintf_r+0x134c>
 8013a68:	e0ad      	b.n	8013bc6 <_svfprintf_r+0xb2e>
 8013a6a:	4642      	mov	r2, r8
 8013a6c:	f015 0910 	ands.w	r9, r5, #16
 8013a70:	f852 8b04 	ldr.w	r8, [r2], #4
 8013a74:	9205      	str	r2, [sp, #20]
 8013a76:	d001      	beq.n	8013a7c <_svfprintf_r+0x9e4>
 8013a78:	4699      	mov	r9, r3
 8013a7a:	e7df      	b.n	8013a3c <_svfprintf_r+0x9a4>
 8013a7c:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8013a80:	d002      	beq.n	8013a88 <_svfprintf_r+0x9f0>
 8013a82:	fa1f f888 	uxth.w	r8, r8
 8013a86:	e7d9      	b.n	8013a3c <_svfprintf_r+0x9a4>
 8013a88:	f415 7900 	ands.w	r9, r5, #512	; 0x200
 8013a8c:	d0d6      	beq.n	8013a3c <_svfprintf_r+0x9a4>
 8013a8e:	fa5f f888 	uxtb.w	r8, r8
 8013a92:	e7f1      	b.n	8013a78 <_svfprintf_r+0x9e0>
 8013a94:	4643      	mov	r3, r8
 8013a96:	2278      	movs	r2, #120	; 0x78
 8013a98:	f853 8b04 	ldr.w	r8, [r3], #4
 8013a9c:	9305      	str	r3, [sp, #20]
 8013a9e:	2330      	movs	r3, #48	; 0x30
 8013aa0:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8013aa4:	4bae      	ldr	r3, [pc, #696]	; (8013d60 <_svfprintf_r+0xcc8>)
 8013aa6:	9312      	str	r3, [sp, #72]	; 0x48
 8013aa8:	f04f 0900 	mov.w	r9, #0
 8013aac:	f045 0502 	orr.w	r5, r5, #2
 8013ab0:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
 8013ab4:	2302      	movs	r3, #2
 8013ab6:	9204      	str	r2, [sp, #16]
 8013ab8:	e7c3      	b.n	8013a42 <_svfprintf_r+0x9aa>
 8013aba:	4643      	mov	r3, r8
 8013abc:	1c70      	adds	r0, r6, #1
 8013abe:	f853 ab04 	ldr.w	sl, [r3], #4
 8013ac2:	9305      	str	r3, [sp, #20]
 8013ac4:	f04f 0800 	mov.w	r8, #0
 8013ac8:	f88d 805b 	strb.w	r8, [sp, #91]	; 0x5b
 8013acc:	d010      	beq.n	8013af0 <_svfprintf_r+0xa58>
 8013ace:	4632      	mov	r2, r6
 8013ad0:	4641      	mov	r1, r8
 8013ad2:	4650      	mov	r0, sl
 8013ad4:	f7ec fbbc 	bl	8000250 <memchr>
 8013ad8:	9002      	str	r0, [sp, #8]
 8013ada:	2800      	cmp	r0, #0
 8013adc:	f000 80e5 	beq.w	8013caa <_svfprintf_r+0xc12>
 8013ae0:	e9cd 8806 	strd	r8, r8, [sp, #24]
 8013ae4:	eba0 060a 	sub.w	r6, r0, sl
 8013ae8:	f8cd 8008 	str.w	r8, [sp, #8]
 8013aec:	46c1      	mov	r9, r8
 8013aee:	e5c2      	b.n	8013676 <_svfprintf_r+0x5de>
 8013af0:	4650      	mov	r0, sl
 8013af2:	f7ec fba5 	bl	8000240 <strlen>
 8013af6:	46c1      	mov	r9, r8
 8013af8:	4606      	mov	r6, r0
 8013afa:	f8cd 8008 	str.w	r8, [sp, #8]
 8013afe:	464b      	mov	r3, r9
 8013b00:	e48a      	b.n	8013418 <_svfprintf_r+0x380>
 8013b02:	f045 0510 	orr.w	r5, r5, #16
 8013b06:	f015 0320 	ands.w	r3, r5, #32
 8013b0a:	d00b      	beq.n	8013b24 <_svfprintf_r+0xa8c>
 8013b0c:	f108 0307 	add.w	r3, r8, #7
 8013b10:	f023 0307 	bic.w	r3, r3, #7
 8013b14:	461a      	mov	r2, r3
 8013b16:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8013b1a:	f852 8b08 	ldr.w	r8, [r2], #8
 8013b1e:	9205      	str	r2, [sp, #20]
 8013b20:	2301      	movs	r3, #1
 8013b22:	e78e      	b.n	8013a42 <_svfprintf_r+0x9aa>
 8013b24:	4642      	mov	r2, r8
 8013b26:	f015 0910 	ands.w	r9, r5, #16
 8013b2a:	f852 8b04 	ldr.w	r8, [r2], #4
 8013b2e:	9205      	str	r2, [sp, #20]
 8013b30:	d001      	beq.n	8013b36 <_svfprintf_r+0xa9e>
 8013b32:	4699      	mov	r9, r3
 8013b34:	e7f4      	b.n	8013b20 <_svfprintf_r+0xa88>
 8013b36:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8013b3a:	d002      	beq.n	8013b42 <_svfprintf_r+0xaaa>
 8013b3c:	fa1f f888 	uxth.w	r8, r8
 8013b40:	e7ee      	b.n	8013b20 <_svfprintf_r+0xa88>
 8013b42:	f415 7900 	ands.w	r9, r5, #512	; 0x200
 8013b46:	d0eb      	beq.n	8013b20 <_svfprintf_r+0xa88>
 8013b48:	fa5f f888 	uxtb.w	r8, r8
 8013b4c:	e7f1      	b.n	8013b32 <_svfprintf_r+0xa9a>
 8013b4e:	4b85      	ldr	r3, [pc, #532]	; (8013d64 <_svfprintf_r+0xccc>)
 8013b50:	9312      	str	r3, [sp, #72]	; 0x48
 8013b52:	f015 0320 	ands.w	r3, r5, #32
 8013b56:	d01c      	beq.n	8013b92 <_svfprintf_r+0xafa>
 8013b58:	f108 0307 	add.w	r3, r8, #7
 8013b5c:	f023 0307 	bic.w	r3, r3, #7
 8013b60:	461a      	mov	r2, r3
 8013b62:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8013b66:	f852 8b08 	ldr.w	r8, [r2], #8
 8013b6a:	9205      	str	r2, [sp, #20]
 8013b6c:	07e9      	lsls	r1, r5, #31
 8013b6e:	d50a      	bpl.n	8013b86 <_svfprintf_r+0xaee>
 8013b70:	ea58 0309 	orrs.w	r3, r8, r9
 8013b74:	d007      	beq.n	8013b86 <_svfprintf_r+0xaee>
 8013b76:	2330      	movs	r3, #48	; 0x30
 8013b78:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8013b7c:	9b04      	ldr	r3, [sp, #16]
 8013b7e:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 8013b82:	f045 0502 	orr.w	r5, r5, #2
 8013b86:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8013b8a:	2302      	movs	r3, #2
 8013b8c:	e759      	b.n	8013a42 <_svfprintf_r+0x9aa>
 8013b8e:	4b74      	ldr	r3, [pc, #464]	; (8013d60 <_svfprintf_r+0xcc8>)
 8013b90:	e7de      	b.n	8013b50 <_svfprintf_r+0xab8>
 8013b92:	4642      	mov	r2, r8
 8013b94:	f015 0910 	ands.w	r9, r5, #16
 8013b98:	f852 8b04 	ldr.w	r8, [r2], #4
 8013b9c:	9205      	str	r2, [sp, #20]
 8013b9e:	d001      	beq.n	8013ba4 <_svfprintf_r+0xb0c>
 8013ba0:	4699      	mov	r9, r3
 8013ba2:	e7e3      	b.n	8013b6c <_svfprintf_r+0xad4>
 8013ba4:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8013ba8:	d002      	beq.n	8013bb0 <_svfprintf_r+0xb18>
 8013baa:	fa1f f888 	uxth.w	r8, r8
 8013bae:	e7dd      	b.n	8013b6c <_svfprintf_r+0xad4>
 8013bb0:	f415 7900 	ands.w	r9, r5, #512	; 0x200
 8013bb4:	d0da      	beq.n	8013b6c <_svfprintf_r+0xad4>
 8013bb6:	fa5f f888 	uxtb.w	r8, r8
 8013bba:	e7f1      	b.n	8013ba0 <_svfprintf_r+0xb08>
 8013bbc:	f1b8 0f0a 	cmp.w	r8, #10
 8013bc0:	f179 0300 	sbcs.w	r3, r9, #0
 8013bc4:	d207      	bcs.n	8013bd6 <_svfprintf_r+0xb3e>
 8013bc6:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8013bca:	f88d 8127 	strb.w	r8, [sp, #295]	; 0x127
 8013bce:	f20d 1a27 	addw	sl, sp, #295	; 0x127
 8013bd2:	f000 bc25 	b.w	8014420 <_svfprintf_r+0x1388>
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	9303      	str	r3, [sp, #12]
 8013bda:	9b02      	ldr	r3, [sp, #8]
 8013bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013be0:	ad4a      	add	r5, sp, #296	; 0x128
 8013be2:	9306      	str	r3, [sp, #24]
 8013be4:	220a      	movs	r2, #10
 8013be6:	2300      	movs	r3, #0
 8013be8:	4640      	mov	r0, r8
 8013bea:	4649      	mov	r1, r9
 8013bec:	f7ec fb80 	bl	80002f0 <__aeabi_uldivmod>
 8013bf0:	9b03      	ldr	r3, [sp, #12]
 8013bf2:	3301      	adds	r3, #1
 8013bf4:	9303      	str	r3, [sp, #12]
 8013bf6:	9b06      	ldr	r3, [sp, #24]
 8013bf8:	3230      	adds	r2, #48	; 0x30
 8013bfa:	f105 3aff 	add.w	sl, r5, #4294967295
 8013bfe:	f805 2c01 	strb.w	r2, [r5, #-1]
 8013c02:	b1db      	cbz	r3, 8013c3c <_svfprintf_r+0xba4>
 8013c04:	9b08      	ldr	r3, [sp, #32]
 8013c06:	9a03      	ldr	r2, [sp, #12]
 8013c08:	781b      	ldrb	r3, [r3, #0]
 8013c0a:	429a      	cmp	r2, r3
 8013c0c:	d116      	bne.n	8013c3c <_svfprintf_r+0xba4>
 8013c0e:	2aff      	cmp	r2, #255	; 0xff
 8013c10:	d014      	beq.n	8013c3c <_svfprintf_r+0xba4>
 8013c12:	f1b8 0f0a 	cmp.w	r8, #10
 8013c16:	f179 0300 	sbcs.w	r3, r9, #0
 8013c1a:	d30f      	bcc.n	8013c3c <_svfprintf_r+0xba4>
 8013c1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013c1e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8013c20:	ebaa 0a03 	sub.w	sl, sl, r3
 8013c24:	461a      	mov	r2, r3
 8013c26:	4650      	mov	r0, sl
 8013c28:	f003 fea1 	bl	801796e <strncpy>
 8013c2c:	9b08      	ldr	r3, [sp, #32]
 8013c2e:	785b      	ldrb	r3, [r3, #1]
 8013c30:	b11b      	cbz	r3, 8013c3a <_svfprintf_r+0xba2>
 8013c32:	9b08      	ldr	r3, [sp, #32]
 8013c34:	3301      	adds	r3, #1
 8013c36:	9308      	str	r3, [sp, #32]
 8013c38:	2300      	movs	r3, #0
 8013c3a:	9303      	str	r3, [sp, #12]
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	220a      	movs	r2, #10
 8013c40:	4640      	mov	r0, r8
 8013c42:	4649      	mov	r1, r9
 8013c44:	f7ec fb54 	bl	80002f0 <__aeabi_uldivmod>
 8013c48:	f1b8 0f0a 	cmp.w	r8, #10
 8013c4c:	f179 0300 	sbcs.w	r3, r9, #0
 8013c50:	f0c0 83e6 	bcc.w	8014420 <_svfprintf_r+0x1388>
 8013c54:	4680      	mov	r8, r0
 8013c56:	4689      	mov	r9, r1
 8013c58:	4655      	mov	r5, sl
 8013c5a:	e7c3      	b.n	8013be4 <_svfprintf_r+0xb4c>
 8013c5c:	f008 030f 	and.w	r3, r8, #15
 8013c60:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013c62:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8013c66:	5cd3      	ldrb	r3, [r2, r3]
 8013c68:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 8013c6c:	ea48 7809 	orr.w	r8, r8, r9, lsl #28
 8013c70:	ea4f 1919 	mov.w	r9, r9, lsr #4
 8013c74:	ea58 0309 	orrs.w	r3, r8, r9
 8013c78:	d1f0      	bne.n	8013c5c <_svfprintf_r+0xbc4>
 8013c7a:	e3d1      	b.n	8014420 <_svfprintf_r+0x1388>
 8013c7c:	b92b      	cbnz	r3, 8013c8a <_svfprintf_r+0xbf2>
 8013c7e:	07e8      	lsls	r0, r5, #31
 8013c80:	d503      	bpl.n	8013c8a <_svfprintf_r+0xbf2>
 8013c82:	2330      	movs	r3, #48	; 0x30
 8013c84:	f88d 3127 	strb.w	r3, [sp, #295]	; 0x127
 8013c88:	e7a1      	b.n	8013bce <_svfprintf_r+0xb36>
 8013c8a:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 8013c8e:	e3c7      	b.n	8014420 <_svfprintf_r+0x1388>
 8013c90:	9b04      	ldr	r3, [sp, #16]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	f000 838e 	beq.w	80143b4 <_svfprintf_r+0x131c>
 8013c98:	2000      	movs	r0, #0
 8013c9a:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 8013c9e:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
 8013ca2:	f8cd 8014 	str.w	r8, [sp, #20]
 8013ca6:	f7ff bb4e 	b.w	8013346 <_svfprintf_r+0x2ae>
 8013caa:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8013cae:	e726      	b.n	8013afe <_svfprintf_r+0xa66>
 8013cb0:	2110      	movs	r1, #16
 8013cb2:	6061      	str	r1, [r4, #4]
 8013cb4:	2a07      	cmp	r2, #7
 8013cb6:	4461      	add	r1, ip
 8013cb8:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8013cbc:	dd0a      	ble.n	8013cd4 <_svfprintf_r+0xc3c>
 8013cbe:	aa1e      	add	r2, sp, #120	; 0x78
 8013cc0:	4659      	mov	r1, fp
 8013cc2:	4638      	mov	r0, r7
 8013cc4:	9315      	str	r3, [sp, #84]	; 0x54
 8013cc6:	f003 fe65 	bl	8017994 <__ssprint_r>
 8013cca:	2800      	cmp	r0, #0
 8013ccc:	f040 834f 	bne.w	801436e <_svfprintf_r+0x12d6>
 8013cd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013cd2:	a821      	add	r0, sp, #132	; 0x84
 8013cd4:	3b10      	subs	r3, #16
 8013cd6:	4604      	mov	r4, r0
 8013cd8:	e4e8      	b.n	80136ac <_svfprintf_r+0x614>
 8013cda:	4604      	mov	r4, r0
 8013cdc:	e502      	b.n	80136e4 <_svfprintf_r+0x64c>
 8013cde:	aa1e      	add	r2, sp, #120	; 0x78
 8013ce0:	4659      	mov	r1, fp
 8013ce2:	4638      	mov	r0, r7
 8013ce4:	f003 fe56 	bl	8017994 <__ssprint_r>
 8013ce8:	2800      	cmp	r0, #0
 8013cea:	f040 8340 	bne.w	801436e <_svfprintf_r+0x12d6>
 8013cee:	ac21      	add	r4, sp, #132	; 0x84
 8013cf0:	e50a      	b.n	8013708 <_svfprintf_r+0x670>
 8013cf2:	aa1e      	add	r2, sp, #120	; 0x78
 8013cf4:	4659      	mov	r1, fp
 8013cf6:	4638      	mov	r0, r7
 8013cf8:	f003 fe4c 	bl	8017994 <__ssprint_r>
 8013cfc:	2800      	cmp	r0, #0
 8013cfe:	f040 8336 	bne.w	801436e <_svfprintf_r+0x12d6>
 8013d02:	ac21      	add	r4, sp, #132	; 0x84
 8013d04:	e510      	b.n	8013728 <_svfprintf_r+0x690>
 8013d06:	2110      	movs	r1, #16
 8013d08:	6061      	str	r1, [r4, #4]
 8013d0a:	2a07      	cmp	r2, #7
 8013d0c:	4461      	add	r1, ip
 8013d0e:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8013d12:	dd0a      	ble.n	8013d2a <_svfprintf_r+0xc92>
 8013d14:	aa1e      	add	r2, sp, #120	; 0x78
 8013d16:	4659      	mov	r1, fp
 8013d18:	4638      	mov	r0, r7
 8013d1a:	9313      	str	r3, [sp, #76]	; 0x4c
 8013d1c:	f003 fe3a 	bl	8017994 <__ssprint_r>
 8013d20:	2800      	cmp	r0, #0
 8013d22:	f040 8324 	bne.w	801436e <_svfprintf_r+0x12d6>
 8013d26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013d28:	a821      	add	r0, sp, #132	; 0x84
 8013d2a:	3b10      	subs	r3, #16
 8013d2c:	4604      	mov	r4, r0
 8013d2e:	e503      	b.n	8013738 <_svfprintf_r+0x6a0>
 8013d30:	4604      	mov	r4, r0
 8013d32:	e51d      	b.n	8013770 <_svfprintf_r+0x6d8>
 8013d34:	2010      	movs	r0, #16
 8013d36:	4403      	add	r3, r0
 8013d38:	2a07      	cmp	r2, #7
 8013d3a:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 8013d3e:	6060      	str	r0, [r4, #4]
 8013d40:	dd08      	ble.n	8013d54 <_svfprintf_r+0xcbc>
 8013d42:	aa1e      	add	r2, sp, #120	; 0x78
 8013d44:	4659      	mov	r1, fp
 8013d46:	4638      	mov	r0, r7
 8013d48:	f003 fe24 	bl	8017994 <__ssprint_r>
 8013d4c:	2800      	cmp	r0, #0
 8013d4e:	f040 830e 	bne.w	801436e <_svfprintf_r+0x12d6>
 8013d52:	a921      	add	r1, sp, #132	; 0x84
 8013d54:	f1a9 0910 	sub.w	r9, r9, #16
 8013d58:	460c      	mov	r4, r1
 8013d5a:	e50e      	b.n	801377a <_svfprintf_r+0x6e2>
 8013d5c:	460c      	mov	r4, r1
 8013d5e:	e529      	b.n	80137b4 <_svfprintf_r+0x71c>
 8013d60:	08019518 	.word	0x08019518
 8013d64:	08019529 	.word	0x08019529
 8013d68:	9b04      	ldr	r3, [sp, #16]
 8013d6a:	2b65      	cmp	r3, #101	; 0x65
 8013d6c:	f340 8252 	ble.w	8014214 <_svfprintf_r+0x117c>
 8013d70:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d78:	d16b      	bne.n	8013e52 <_svfprintf_r+0xdba>
 8013d7a:	4b74      	ldr	r3, [pc, #464]	; (8013f4c <_svfprintf_r+0xeb4>)
 8013d7c:	6023      	str	r3, [r4, #0]
 8013d7e:	2301      	movs	r3, #1
 8013d80:	4418      	add	r0, r3
 8013d82:	6063      	str	r3, [r4, #4]
 8013d84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013d86:	9020      	str	r0, [sp, #128]	; 0x80
 8013d88:	3301      	adds	r3, #1
 8013d8a:	2b07      	cmp	r3, #7
 8013d8c:	931f      	str	r3, [sp, #124]	; 0x7c
 8013d8e:	dc39      	bgt.n	8013e04 <_svfprintf_r+0xd6c>
 8013d90:	3408      	adds	r4, #8
 8013d92:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013d94:	9a03      	ldr	r2, [sp, #12]
 8013d96:	4293      	cmp	r3, r2
 8013d98:	db02      	blt.n	8013da0 <_svfprintf_r+0xd08>
 8013d9a:	07ea      	lsls	r2, r5, #31
 8013d9c:	f57f ad19 	bpl.w	80137d2 <_svfprintf_r+0x73a>
 8013da0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013da2:	6023      	str	r3, [r4, #0]
 8013da4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013da6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013da8:	6063      	str	r3, [r4, #4]
 8013daa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013dac:	4413      	add	r3, r2
 8013dae:	9320      	str	r3, [sp, #128]	; 0x80
 8013db0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013db2:	3301      	adds	r3, #1
 8013db4:	2b07      	cmp	r3, #7
 8013db6:	931f      	str	r3, [sp, #124]	; 0x7c
 8013db8:	dc2e      	bgt.n	8013e18 <_svfprintf_r+0xd80>
 8013dba:	3408      	adds	r4, #8
 8013dbc:	9b03      	ldr	r3, [sp, #12]
 8013dbe:	1e5e      	subs	r6, r3, #1
 8013dc0:	2e00      	cmp	r6, #0
 8013dc2:	f77f ad06 	ble.w	80137d2 <_svfprintf_r+0x73a>
 8013dc6:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8013f50 <_svfprintf_r+0xeb8>
 8013dca:	f04f 0910 	mov.w	r9, #16
 8013dce:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8013dd2:	2e10      	cmp	r6, #16
 8013dd4:	f103 0301 	add.w	r3, r3, #1
 8013dd8:	f104 0108 	add.w	r1, r4, #8
 8013ddc:	f8c4 8000 	str.w	r8, [r4]
 8013de0:	dc24      	bgt.n	8013e2c <_svfprintf_r+0xd94>
 8013de2:	6066      	str	r6, [r4, #4]
 8013de4:	2b07      	cmp	r3, #7
 8013de6:	4416      	add	r6, r2
 8013de8:	e9cd 361f 	strd	r3, r6, [sp, #124]	; 0x7c
 8013dec:	f340 829d 	ble.w	801432a <_svfprintf_r+0x1292>
 8013df0:	aa1e      	add	r2, sp, #120	; 0x78
 8013df2:	4659      	mov	r1, fp
 8013df4:	4638      	mov	r0, r7
 8013df6:	f003 fdcd 	bl	8017994 <__ssprint_r>
 8013dfa:	2800      	cmp	r0, #0
 8013dfc:	f040 82b7 	bne.w	801436e <_svfprintf_r+0x12d6>
 8013e00:	ac21      	add	r4, sp, #132	; 0x84
 8013e02:	e4e6      	b.n	80137d2 <_svfprintf_r+0x73a>
 8013e04:	aa1e      	add	r2, sp, #120	; 0x78
 8013e06:	4659      	mov	r1, fp
 8013e08:	4638      	mov	r0, r7
 8013e0a:	f003 fdc3 	bl	8017994 <__ssprint_r>
 8013e0e:	2800      	cmp	r0, #0
 8013e10:	f040 82ad 	bne.w	801436e <_svfprintf_r+0x12d6>
 8013e14:	ac21      	add	r4, sp, #132	; 0x84
 8013e16:	e7bc      	b.n	8013d92 <_svfprintf_r+0xcfa>
 8013e18:	aa1e      	add	r2, sp, #120	; 0x78
 8013e1a:	4659      	mov	r1, fp
 8013e1c:	4638      	mov	r0, r7
 8013e1e:	f003 fdb9 	bl	8017994 <__ssprint_r>
 8013e22:	2800      	cmp	r0, #0
 8013e24:	f040 82a3 	bne.w	801436e <_svfprintf_r+0x12d6>
 8013e28:	ac21      	add	r4, sp, #132	; 0x84
 8013e2a:	e7c7      	b.n	8013dbc <_svfprintf_r+0xd24>
 8013e2c:	3210      	adds	r2, #16
 8013e2e:	2b07      	cmp	r3, #7
 8013e30:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 8013e34:	f8c4 9004 	str.w	r9, [r4, #4]
 8013e38:	dd08      	ble.n	8013e4c <_svfprintf_r+0xdb4>
 8013e3a:	aa1e      	add	r2, sp, #120	; 0x78
 8013e3c:	4659      	mov	r1, fp
 8013e3e:	4638      	mov	r0, r7
 8013e40:	f003 fda8 	bl	8017994 <__ssprint_r>
 8013e44:	2800      	cmp	r0, #0
 8013e46:	f040 8292 	bne.w	801436e <_svfprintf_r+0x12d6>
 8013e4a:	a921      	add	r1, sp, #132	; 0x84
 8013e4c:	3e10      	subs	r6, #16
 8013e4e:	460c      	mov	r4, r1
 8013e50:	e7bd      	b.n	8013dce <_svfprintf_r+0xd36>
 8013e52:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	dc7d      	bgt.n	8013f54 <_svfprintf_r+0xebc>
 8013e58:	4b3c      	ldr	r3, [pc, #240]	; (8013f4c <_svfprintf_r+0xeb4>)
 8013e5a:	6023      	str	r3, [r4, #0]
 8013e5c:	2301      	movs	r3, #1
 8013e5e:	4418      	add	r0, r3
 8013e60:	6063      	str	r3, [r4, #4]
 8013e62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013e64:	9020      	str	r0, [sp, #128]	; 0x80
 8013e66:	3301      	adds	r3, #1
 8013e68:	2b07      	cmp	r3, #7
 8013e6a:	931f      	str	r3, [sp, #124]	; 0x7c
 8013e6c:	dc47      	bgt.n	8013efe <_svfprintf_r+0xe66>
 8013e6e:	3408      	adds	r4, #8
 8013e70:	9903      	ldr	r1, [sp, #12]
 8013e72:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013e74:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013e76:	430a      	orrs	r2, r1
 8013e78:	f005 0101 	and.w	r1, r5, #1
 8013e7c:	430a      	orrs	r2, r1
 8013e7e:	f43f aca8 	beq.w	80137d2 <_svfprintf_r+0x73a>
 8013e82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013e84:	6022      	str	r2, [r4, #0]
 8013e86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013e88:	6062      	str	r2, [r4, #4]
 8013e8a:	4413      	add	r3, r2
 8013e8c:	9320      	str	r3, [sp, #128]	; 0x80
 8013e8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013e90:	3301      	adds	r3, #1
 8013e92:	2b07      	cmp	r3, #7
 8013e94:	931f      	str	r3, [sp, #124]	; 0x7c
 8013e96:	dc3c      	bgt.n	8013f12 <_svfprintf_r+0xe7a>
 8013e98:	f104 0308 	add.w	r3, r4, #8
 8013e9c:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8013e9e:	2e00      	cmp	r6, #0
 8013ea0:	da1c      	bge.n	8013edc <_svfprintf_r+0xe44>
 8013ea2:	4c2b      	ldr	r4, [pc, #172]	; (8013f50 <_svfprintf_r+0xeb8>)
 8013ea4:	4276      	negs	r6, r6
 8013ea6:	461a      	mov	r2, r3
 8013ea8:	f04f 0810 	mov.w	r8, #16
 8013eac:	e9dd 101f 	ldrd	r1, r0, [sp, #124]	; 0x7c
 8013eb0:	2e10      	cmp	r6, #16
 8013eb2:	f101 0101 	add.w	r1, r1, #1
 8013eb6:	f103 0308 	add.w	r3, r3, #8
 8013eba:	6014      	str	r4, [r2, #0]
 8013ebc:	dc33      	bgt.n	8013f26 <_svfprintf_r+0xe8e>
 8013ebe:	6056      	str	r6, [r2, #4]
 8013ec0:	2907      	cmp	r1, #7
 8013ec2:	4406      	add	r6, r0
 8013ec4:	e9cd 161f 	strd	r1, r6, [sp, #124]	; 0x7c
 8013ec8:	dd08      	ble.n	8013edc <_svfprintf_r+0xe44>
 8013eca:	aa1e      	add	r2, sp, #120	; 0x78
 8013ecc:	4659      	mov	r1, fp
 8013ece:	4638      	mov	r0, r7
 8013ed0:	f003 fd60 	bl	8017994 <__ssprint_r>
 8013ed4:	2800      	cmp	r0, #0
 8013ed6:	f040 824a 	bne.w	801436e <_svfprintf_r+0x12d6>
 8013eda:	ab21      	add	r3, sp, #132	; 0x84
 8013edc:	9a03      	ldr	r2, [sp, #12]
 8013ede:	605a      	str	r2, [r3, #4]
 8013ee0:	9903      	ldr	r1, [sp, #12]
 8013ee2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013ee4:	f8c3 a000 	str.w	sl, [r3]
 8013ee8:	440a      	add	r2, r1
 8013eea:	9220      	str	r2, [sp, #128]	; 0x80
 8013eec:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013eee:	3201      	adds	r2, #1
 8013ef0:	2a07      	cmp	r2, #7
 8013ef2:	921f      	str	r2, [sp, #124]	; 0x7c
 8013ef4:	f73f af7c 	bgt.w	8013df0 <_svfprintf_r+0xd58>
 8013ef8:	f103 0408 	add.w	r4, r3, #8
 8013efc:	e469      	b.n	80137d2 <_svfprintf_r+0x73a>
 8013efe:	aa1e      	add	r2, sp, #120	; 0x78
 8013f00:	4659      	mov	r1, fp
 8013f02:	4638      	mov	r0, r7
 8013f04:	f003 fd46 	bl	8017994 <__ssprint_r>
 8013f08:	2800      	cmp	r0, #0
 8013f0a:	f040 8230 	bne.w	801436e <_svfprintf_r+0x12d6>
 8013f0e:	ac21      	add	r4, sp, #132	; 0x84
 8013f10:	e7ae      	b.n	8013e70 <_svfprintf_r+0xdd8>
 8013f12:	aa1e      	add	r2, sp, #120	; 0x78
 8013f14:	4659      	mov	r1, fp
 8013f16:	4638      	mov	r0, r7
 8013f18:	f003 fd3c 	bl	8017994 <__ssprint_r>
 8013f1c:	2800      	cmp	r0, #0
 8013f1e:	f040 8226 	bne.w	801436e <_svfprintf_r+0x12d6>
 8013f22:	ab21      	add	r3, sp, #132	; 0x84
 8013f24:	e7ba      	b.n	8013e9c <_svfprintf_r+0xe04>
 8013f26:	3010      	adds	r0, #16
 8013f28:	2907      	cmp	r1, #7
 8013f2a:	e9cd 101f 	strd	r1, r0, [sp, #124]	; 0x7c
 8013f2e:	f8c2 8004 	str.w	r8, [r2, #4]
 8013f32:	dd08      	ble.n	8013f46 <_svfprintf_r+0xeae>
 8013f34:	aa1e      	add	r2, sp, #120	; 0x78
 8013f36:	4659      	mov	r1, fp
 8013f38:	4638      	mov	r0, r7
 8013f3a:	f003 fd2b 	bl	8017994 <__ssprint_r>
 8013f3e:	2800      	cmp	r0, #0
 8013f40:	f040 8215 	bne.w	801436e <_svfprintf_r+0x12d6>
 8013f44:	ab21      	add	r3, sp, #132	; 0x84
 8013f46:	3e10      	subs	r6, #16
 8013f48:	461a      	mov	r2, r3
 8013f4a:	e7af      	b.n	8013eac <_svfprintf_r+0xe14>
 8013f4c:	0801953a 	.word	0x0801953a
 8013f50:	0801954c 	.word	0x0801954c
 8013f54:	9b03      	ldr	r3, [sp, #12]
 8013f56:	4543      	cmp	r3, r8
 8013f58:	bfa8      	it	ge
 8013f5a:	4643      	movge	r3, r8
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	4699      	mov	r9, r3
 8013f60:	dd0a      	ble.n	8013f78 <_svfprintf_r+0xee0>
 8013f62:	4418      	add	r0, r3
 8013f64:	e9c4 a300 	strd	sl, r3, [r4]
 8013f68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013f6a:	9020      	str	r0, [sp, #128]	; 0x80
 8013f6c:	3301      	adds	r3, #1
 8013f6e:	2b07      	cmp	r3, #7
 8013f70:	931f      	str	r3, [sp, #124]	; 0x7c
 8013f72:	f300 8094 	bgt.w	801409e <_svfprintf_r+0x1006>
 8013f76:	3408      	adds	r4, #8
 8013f78:	f1b9 0f00 	cmp.w	r9, #0
 8013f7c:	bfac      	ite	ge
 8013f7e:	eba8 0609 	subge.w	r6, r8, r9
 8013f82:	4646      	movlt	r6, r8
 8013f84:	2e00      	cmp	r6, #0
 8013f86:	dd1c      	ble.n	8013fc2 <_svfprintf_r+0xf2a>
 8013f88:	f8df 9440 	ldr.w	r9, [pc, #1088]	; 80143cc <_svfprintf_r+0x1334>
 8013f8c:	f8c4 9000 	str.w	r9, [r4]
 8013f90:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8013f94:	2e10      	cmp	r6, #16
 8013f96:	f103 0301 	add.w	r3, r3, #1
 8013f9a:	f104 0108 	add.w	r1, r4, #8
 8013f9e:	f300 8088 	bgt.w	80140b2 <_svfprintf_r+0x101a>
 8013fa2:	6066      	str	r6, [r4, #4]
 8013fa4:	2b07      	cmp	r3, #7
 8013fa6:	4416      	add	r6, r2
 8013fa8:	e9cd 361f 	strd	r3, r6, [sp, #124]	; 0x7c
 8013fac:	f340 8094 	ble.w	80140d8 <_svfprintf_r+0x1040>
 8013fb0:	aa1e      	add	r2, sp, #120	; 0x78
 8013fb2:	4659      	mov	r1, fp
 8013fb4:	4638      	mov	r0, r7
 8013fb6:	f003 fced 	bl	8017994 <__ssprint_r>
 8013fba:	2800      	cmp	r0, #0
 8013fbc:	f040 81d7 	bne.w	801436e <_svfprintf_r+0x12d6>
 8013fc0:	ac21      	add	r4, sp, #132	; 0x84
 8013fc2:	056b      	lsls	r3, r5, #21
 8013fc4:	eb0a 0608 	add.w	r6, sl, r8
 8013fc8:	d50c      	bpl.n	8013fe4 <_svfprintf_r+0xf4c>
 8013fca:	9b07      	ldr	r3, [sp, #28]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	f040 8085 	bne.w	80140dc <_svfprintf_r+0x1044>
 8013fd2:	9b06      	ldr	r3, [sp, #24]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	f040 8084 	bne.w	80140e2 <_svfprintf_r+0x104a>
 8013fda:	9b03      	ldr	r3, [sp, #12]
 8013fdc:	4453      	add	r3, sl
 8013fde:	429e      	cmp	r6, r3
 8013fe0:	bf28      	it	cs
 8013fe2:	461e      	movcs	r6, r3
 8013fe4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013fe6:	9a03      	ldr	r2, [sp, #12]
 8013fe8:	4293      	cmp	r3, r2
 8013fea:	db01      	blt.n	8013ff0 <_svfprintf_r+0xf58>
 8013fec:	07e8      	lsls	r0, r5, #31
 8013fee:	d50e      	bpl.n	801400e <_svfprintf_r+0xf76>
 8013ff0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ff2:	6023      	str	r3, [r4, #0]
 8013ff4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013ff6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013ff8:	6063      	str	r3, [r4, #4]
 8013ffa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013ffc:	4413      	add	r3, r2
 8013ffe:	9320      	str	r3, [sp, #128]	; 0x80
 8014000:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014002:	3301      	adds	r3, #1
 8014004:	2b07      	cmp	r3, #7
 8014006:	931f      	str	r3, [sp, #124]	; 0x7c
 8014008:	f300 80f0 	bgt.w	80141ec <_svfprintf_r+0x1154>
 801400c:	3408      	adds	r4, #8
 801400e:	9b03      	ldr	r3, [sp, #12]
 8014010:	9903      	ldr	r1, [sp, #12]
 8014012:	eb0a 0203 	add.w	r2, sl, r3
 8014016:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014018:	1b92      	subs	r2, r2, r6
 801401a:	eba1 0803 	sub.w	r8, r1, r3
 801401e:	4590      	cmp	r8, r2
 8014020:	bfa8      	it	ge
 8014022:	4690      	movge	r8, r2
 8014024:	f1b8 0f00 	cmp.w	r8, #0
 8014028:	dd0b      	ble.n	8014042 <_svfprintf_r+0xfaa>
 801402a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801402c:	4443      	add	r3, r8
 801402e:	9320      	str	r3, [sp, #128]	; 0x80
 8014030:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014032:	3301      	adds	r3, #1
 8014034:	2b07      	cmp	r3, #7
 8014036:	e9c4 6800 	strd	r6, r8, [r4]
 801403a:	931f      	str	r3, [sp, #124]	; 0x7c
 801403c:	f300 80e0 	bgt.w	8014200 <_svfprintf_r+0x1168>
 8014040:	3408      	adds	r4, #8
 8014042:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8014044:	9b03      	ldr	r3, [sp, #12]
 8014046:	f1b8 0f00 	cmp.w	r8, #0
 801404a:	eba3 0606 	sub.w	r6, r3, r6
 801404e:	bfa8      	it	ge
 8014050:	eba6 0608 	subge.w	r6, r6, r8
 8014054:	2e00      	cmp	r6, #0
 8014056:	f77f abbc 	ble.w	80137d2 <_svfprintf_r+0x73a>
 801405a:	f8df 8370 	ldr.w	r8, [pc, #880]	; 80143cc <_svfprintf_r+0x1334>
 801405e:	f04f 0910 	mov.w	r9, #16
 8014062:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8014066:	2e10      	cmp	r6, #16
 8014068:	f103 0301 	add.w	r3, r3, #1
 801406c:	f104 0108 	add.w	r1, r4, #8
 8014070:	f8c4 8000 	str.w	r8, [r4]
 8014074:	f77f aeb5 	ble.w	8013de2 <_svfprintf_r+0xd4a>
 8014078:	3210      	adds	r2, #16
 801407a:	2b07      	cmp	r3, #7
 801407c:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 8014080:	f8c4 9004 	str.w	r9, [r4, #4]
 8014084:	dd08      	ble.n	8014098 <_svfprintf_r+0x1000>
 8014086:	aa1e      	add	r2, sp, #120	; 0x78
 8014088:	4659      	mov	r1, fp
 801408a:	4638      	mov	r0, r7
 801408c:	f003 fc82 	bl	8017994 <__ssprint_r>
 8014090:	2800      	cmp	r0, #0
 8014092:	f040 816c 	bne.w	801436e <_svfprintf_r+0x12d6>
 8014096:	a921      	add	r1, sp, #132	; 0x84
 8014098:	3e10      	subs	r6, #16
 801409a:	460c      	mov	r4, r1
 801409c:	e7e1      	b.n	8014062 <_svfprintf_r+0xfca>
 801409e:	aa1e      	add	r2, sp, #120	; 0x78
 80140a0:	4659      	mov	r1, fp
 80140a2:	4638      	mov	r0, r7
 80140a4:	f003 fc76 	bl	8017994 <__ssprint_r>
 80140a8:	2800      	cmp	r0, #0
 80140aa:	f040 8160 	bne.w	801436e <_svfprintf_r+0x12d6>
 80140ae:	ac21      	add	r4, sp, #132	; 0x84
 80140b0:	e762      	b.n	8013f78 <_svfprintf_r+0xee0>
 80140b2:	2010      	movs	r0, #16
 80140b4:	4402      	add	r2, r0
 80140b6:	2b07      	cmp	r3, #7
 80140b8:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 80140bc:	6060      	str	r0, [r4, #4]
 80140be:	dd08      	ble.n	80140d2 <_svfprintf_r+0x103a>
 80140c0:	aa1e      	add	r2, sp, #120	; 0x78
 80140c2:	4659      	mov	r1, fp
 80140c4:	4638      	mov	r0, r7
 80140c6:	f003 fc65 	bl	8017994 <__ssprint_r>
 80140ca:	2800      	cmp	r0, #0
 80140cc:	f040 814f 	bne.w	801436e <_svfprintf_r+0x12d6>
 80140d0:	a921      	add	r1, sp, #132	; 0x84
 80140d2:	3e10      	subs	r6, #16
 80140d4:	460c      	mov	r4, r1
 80140d6:	e759      	b.n	8013f8c <_svfprintf_r+0xef4>
 80140d8:	460c      	mov	r4, r1
 80140da:	e772      	b.n	8013fc2 <_svfprintf_r+0xf2a>
 80140dc:	9b06      	ldr	r3, [sp, #24]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d053      	beq.n	801418a <_svfprintf_r+0x10f2>
 80140e2:	9b06      	ldr	r3, [sp, #24]
 80140e4:	3b01      	subs	r3, #1
 80140e6:	9306      	str	r3, [sp, #24]
 80140e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80140ea:	6023      	str	r3, [r4, #0]
 80140ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80140ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80140f0:	6063      	str	r3, [r4, #4]
 80140f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80140f4:	4413      	add	r3, r2
 80140f6:	9320      	str	r3, [sp, #128]	; 0x80
 80140f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80140fa:	3301      	adds	r3, #1
 80140fc:	2b07      	cmp	r3, #7
 80140fe:	931f      	str	r3, [sp, #124]	; 0x7c
 8014100:	dc4a      	bgt.n	8014198 <_svfprintf_r+0x1100>
 8014102:	3408      	adds	r4, #8
 8014104:	9b03      	ldr	r3, [sp, #12]
 8014106:	9a08      	ldr	r2, [sp, #32]
 8014108:	eb0a 0903 	add.w	r9, sl, r3
 801410c:	eba9 0306 	sub.w	r3, r9, r6
 8014110:	f892 9000 	ldrb.w	r9, [r2]
 8014114:	4599      	cmp	r9, r3
 8014116:	bfa8      	it	ge
 8014118:	4699      	movge	r9, r3
 801411a:	f1b9 0f00 	cmp.w	r9, #0
 801411e:	dd0a      	ble.n	8014136 <_svfprintf_r+0x109e>
 8014120:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014122:	444b      	add	r3, r9
 8014124:	9320      	str	r3, [sp, #128]	; 0x80
 8014126:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014128:	3301      	adds	r3, #1
 801412a:	2b07      	cmp	r3, #7
 801412c:	e9c4 6900 	strd	r6, r9, [r4]
 8014130:	931f      	str	r3, [sp, #124]	; 0x7c
 8014132:	dc3b      	bgt.n	80141ac <_svfprintf_r+0x1114>
 8014134:	3408      	adds	r4, #8
 8014136:	9b08      	ldr	r3, [sp, #32]
 8014138:	f893 8000 	ldrb.w	r8, [r3]
 801413c:	f1b9 0f00 	cmp.w	r9, #0
 8014140:	bfa8      	it	ge
 8014142:	eba8 0809 	subge.w	r8, r8, r9
 8014146:	f1b8 0f00 	cmp.w	r8, #0
 801414a:	dd1a      	ble.n	8014182 <_svfprintf_r+0x10ea>
 801414c:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8014150:	489e      	ldr	r0, [pc, #632]	; (80143cc <_svfprintf_r+0x1334>)
 8014152:	6020      	str	r0, [r4, #0]
 8014154:	f1b8 0f10 	cmp.w	r8, #16
 8014158:	f103 0301 	add.w	r3, r3, #1
 801415c:	f104 0108 	add.w	r1, r4, #8
 8014160:	dc2e      	bgt.n	80141c0 <_svfprintf_r+0x1128>
 8014162:	4442      	add	r2, r8
 8014164:	2b07      	cmp	r3, #7
 8014166:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 801416a:	f8c4 8004 	str.w	r8, [r4, #4]
 801416e:	dd3b      	ble.n	80141e8 <_svfprintf_r+0x1150>
 8014170:	aa1e      	add	r2, sp, #120	; 0x78
 8014172:	4659      	mov	r1, fp
 8014174:	4638      	mov	r0, r7
 8014176:	f003 fc0d 	bl	8017994 <__ssprint_r>
 801417a:	2800      	cmp	r0, #0
 801417c:	f040 80f7 	bne.w	801436e <_svfprintf_r+0x12d6>
 8014180:	ac21      	add	r4, sp, #132	; 0x84
 8014182:	9b08      	ldr	r3, [sp, #32]
 8014184:	781b      	ldrb	r3, [r3, #0]
 8014186:	441e      	add	r6, r3
 8014188:	e71f      	b.n	8013fca <_svfprintf_r+0xf32>
 801418a:	9b08      	ldr	r3, [sp, #32]
 801418c:	3b01      	subs	r3, #1
 801418e:	9308      	str	r3, [sp, #32]
 8014190:	9b07      	ldr	r3, [sp, #28]
 8014192:	3b01      	subs	r3, #1
 8014194:	9307      	str	r3, [sp, #28]
 8014196:	e7a7      	b.n	80140e8 <_svfprintf_r+0x1050>
 8014198:	aa1e      	add	r2, sp, #120	; 0x78
 801419a:	4659      	mov	r1, fp
 801419c:	4638      	mov	r0, r7
 801419e:	f003 fbf9 	bl	8017994 <__ssprint_r>
 80141a2:	2800      	cmp	r0, #0
 80141a4:	f040 80e3 	bne.w	801436e <_svfprintf_r+0x12d6>
 80141a8:	ac21      	add	r4, sp, #132	; 0x84
 80141aa:	e7ab      	b.n	8014104 <_svfprintf_r+0x106c>
 80141ac:	aa1e      	add	r2, sp, #120	; 0x78
 80141ae:	4659      	mov	r1, fp
 80141b0:	4638      	mov	r0, r7
 80141b2:	f003 fbef 	bl	8017994 <__ssprint_r>
 80141b6:	2800      	cmp	r0, #0
 80141b8:	f040 80d9 	bne.w	801436e <_svfprintf_r+0x12d6>
 80141bc:	ac21      	add	r4, sp, #132	; 0x84
 80141be:	e7ba      	b.n	8014136 <_svfprintf_r+0x109e>
 80141c0:	2010      	movs	r0, #16
 80141c2:	4402      	add	r2, r0
 80141c4:	2b07      	cmp	r3, #7
 80141c6:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 80141ca:	6060      	str	r0, [r4, #4]
 80141cc:	dd08      	ble.n	80141e0 <_svfprintf_r+0x1148>
 80141ce:	aa1e      	add	r2, sp, #120	; 0x78
 80141d0:	4659      	mov	r1, fp
 80141d2:	4638      	mov	r0, r7
 80141d4:	f003 fbde 	bl	8017994 <__ssprint_r>
 80141d8:	2800      	cmp	r0, #0
 80141da:	f040 80c8 	bne.w	801436e <_svfprintf_r+0x12d6>
 80141de:	a921      	add	r1, sp, #132	; 0x84
 80141e0:	f1a8 0810 	sub.w	r8, r8, #16
 80141e4:	460c      	mov	r4, r1
 80141e6:	e7b1      	b.n	801414c <_svfprintf_r+0x10b4>
 80141e8:	460c      	mov	r4, r1
 80141ea:	e7ca      	b.n	8014182 <_svfprintf_r+0x10ea>
 80141ec:	aa1e      	add	r2, sp, #120	; 0x78
 80141ee:	4659      	mov	r1, fp
 80141f0:	4638      	mov	r0, r7
 80141f2:	f003 fbcf 	bl	8017994 <__ssprint_r>
 80141f6:	2800      	cmp	r0, #0
 80141f8:	f040 80b9 	bne.w	801436e <_svfprintf_r+0x12d6>
 80141fc:	ac21      	add	r4, sp, #132	; 0x84
 80141fe:	e706      	b.n	801400e <_svfprintf_r+0xf76>
 8014200:	aa1e      	add	r2, sp, #120	; 0x78
 8014202:	4659      	mov	r1, fp
 8014204:	4638      	mov	r0, r7
 8014206:	f003 fbc5 	bl	8017994 <__ssprint_r>
 801420a:	2800      	cmp	r0, #0
 801420c:	f040 80af 	bne.w	801436e <_svfprintf_r+0x12d6>
 8014210:	ac21      	add	r4, sp, #132	; 0x84
 8014212:	e716      	b.n	8014042 <_svfprintf_r+0xfaa>
 8014214:	9903      	ldr	r1, [sp, #12]
 8014216:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8014218:	2901      	cmp	r1, #1
 801421a:	f100 0001 	add.w	r0, r0, #1
 801421e:	f102 0201 	add.w	r2, r2, #1
 8014222:	f104 0308 	add.w	r3, r4, #8
 8014226:	dc01      	bgt.n	801422c <_svfprintf_r+0x1194>
 8014228:	07e9      	lsls	r1, r5, #31
 801422a:	d573      	bpl.n	8014314 <_svfprintf_r+0x127c>
 801422c:	2101      	movs	r1, #1
 801422e:	2a07      	cmp	r2, #7
 8014230:	e9cd 201f 	strd	r2, r0, [sp, #124]	; 0x7c
 8014234:	f8c4 a000 	str.w	sl, [r4]
 8014238:	6061      	str	r1, [r4, #4]
 801423a:	dd08      	ble.n	801424e <_svfprintf_r+0x11b6>
 801423c:	aa1e      	add	r2, sp, #120	; 0x78
 801423e:	4659      	mov	r1, fp
 8014240:	4638      	mov	r0, r7
 8014242:	f003 fba7 	bl	8017994 <__ssprint_r>
 8014246:	2800      	cmp	r0, #0
 8014248:	f040 8091 	bne.w	801436e <_svfprintf_r+0x12d6>
 801424c:	ab21      	add	r3, sp, #132	; 0x84
 801424e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014250:	601a      	str	r2, [r3, #0]
 8014252:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014254:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014256:	605a      	str	r2, [r3, #4]
 8014258:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801425a:	440a      	add	r2, r1
 801425c:	9220      	str	r2, [sp, #128]	; 0x80
 801425e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8014260:	3201      	adds	r2, #1
 8014262:	2a07      	cmp	r2, #7
 8014264:	921f      	str	r2, [sp, #124]	; 0x7c
 8014266:	dc25      	bgt.n	80142b4 <_svfprintf_r+0x121c>
 8014268:	3308      	adds	r3, #8
 801426a:	9a03      	ldr	r2, [sp, #12]
 801426c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014274:	f102 34ff 	add.w	r4, r2, #4294967295
 8014278:	d025      	beq.n	80142c6 <_svfprintf_r+0x122e>
 801427a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801427c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801427e:	f10a 0001 	add.w	r0, sl, #1
 8014282:	e9c3 0400 	strd	r0, r4, [r3]
 8014286:	9803      	ldr	r0, [sp, #12]
 8014288:	3101      	adds	r1, #1
 801428a:	3a01      	subs	r2, #1
 801428c:	4402      	add	r2, r0
 801428e:	2907      	cmp	r1, #7
 8014290:	e9cd 121f 	strd	r1, r2, [sp, #124]	; 0x7c
 8014294:	dd47      	ble.n	8014326 <_svfprintf_r+0x128e>
 8014296:	aa1e      	add	r2, sp, #120	; 0x78
 8014298:	4659      	mov	r1, fp
 801429a:	4638      	mov	r0, r7
 801429c:	f003 fb7a 	bl	8017994 <__ssprint_r>
 80142a0:	2800      	cmp	r0, #0
 80142a2:	d164      	bne.n	801436e <_svfprintf_r+0x12d6>
 80142a4:	ab21      	add	r3, sp, #132	; 0x84
 80142a6:	aa1a      	add	r2, sp, #104	; 0x68
 80142a8:	601a      	str	r2, [r3, #0]
 80142aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80142ac:	605a      	str	r2, [r3, #4]
 80142ae:	9911      	ldr	r1, [sp, #68]	; 0x44
 80142b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80142b2:	e619      	b.n	8013ee8 <_svfprintf_r+0xe50>
 80142b4:	aa1e      	add	r2, sp, #120	; 0x78
 80142b6:	4659      	mov	r1, fp
 80142b8:	4638      	mov	r0, r7
 80142ba:	f003 fb6b 	bl	8017994 <__ssprint_r>
 80142be:	2800      	cmp	r0, #0
 80142c0:	d155      	bne.n	801436e <_svfprintf_r+0x12d6>
 80142c2:	ab21      	add	r3, sp, #132	; 0x84
 80142c4:	e7d1      	b.n	801426a <_svfprintf_r+0x11d2>
 80142c6:	2c00      	cmp	r4, #0
 80142c8:	dded      	ble.n	80142a6 <_svfprintf_r+0x120e>
 80142ca:	4e40      	ldr	r6, [pc, #256]	; (80143cc <_svfprintf_r+0x1334>)
 80142cc:	f04f 0810 	mov.w	r8, #16
 80142d0:	e9dd 211f 	ldrd	r2, r1, [sp, #124]	; 0x7c
 80142d4:	2c10      	cmp	r4, #16
 80142d6:	f102 0201 	add.w	r2, r2, #1
 80142da:	f103 0008 	add.w	r0, r3, #8
 80142de:	601e      	str	r6, [r3, #0]
 80142e0:	dc07      	bgt.n	80142f2 <_svfprintf_r+0x125a>
 80142e2:	605c      	str	r4, [r3, #4]
 80142e4:	2a07      	cmp	r2, #7
 80142e6:	440c      	add	r4, r1
 80142e8:	e9cd 241f 	strd	r2, r4, [sp, #124]	; 0x7c
 80142ec:	dcd3      	bgt.n	8014296 <_svfprintf_r+0x11fe>
 80142ee:	4603      	mov	r3, r0
 80142f0:	e7d9      	b.n	80142a6 <_svfprintf_r+0x120e>
 80142f2:	3110      	adds	r1, #16
 80142f4:	2a07      	cmp	r2, #7
 80142f6:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 80142fa:	f8c3 8004 	str.w	r8, [r3, #4]
 80142fe:	dd06      	ble.n	801430e <_svfprintf_r+0x1276>
 8014300:	aa1e      	add	r2, sp, #120	; 0x78
 8014302:	4659      	mov	r1, fp
 8014304:	4638      	mov	r0, r7
 8014306:	f003 fb45 	bl	8017994 <__ssprint_r>
 801430a:	bb80      	cbnz	r0, 801436e <_svfprintf_r+0x12d6>
 801430c:	a821      	add	r0, sp, #132	; 0x84
 801430e:	3c10      	subs	r4, #16
 8014310:	4603      	mov	r3, r0
 8014312:	e7dd      	b.n	80142d0 <_svfprintf_r+0x1238>
 8014314:	2101      	movs	r1, #1
 8014316:	2a07      	cmp	r2, #7
 8014318:	e9cd 201f 	strd	r2, r0, [sp, #124]	; 0x7c
 801431c:	f8c4 a000 	str.w	sl, [r4]
 8014320:	6061      	str	r1, [r4, #4]
 8014322:	ddc0      	ble.n	80142a6 <_svfprintf_r+0x120e>
 8014324:	e7b7      	b.n	8014296 <_svfprintf_r+0x11fe>
 8014326:	3308      	adds	r3, #8
 8014328:	e7bd      	b.n	80142a6 <_svfprintf_r+0x120e>
 801432a:	460c      	mov	r4, r1
 801432c:	f7ff ba51 	b.w	80137d2 <_svfprintf_r+0x73a>
 8014330:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8014334:	1a9d      	subs	r5, r3, r2
 8014336:	2d00      	cmp	r5, #0
 8014338:	f77f aa58 	ble.w	80137ec <_svfprintf_r+0x754>
 801433c:	4e24      	ldr	r6, [pc, #144]	; (80143d0 <_svfprintf_r+0x1338>)
 801433e:	f04f 0810 	mov.w	r8, #16
 8014342:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8014346:	2d10      	cmp	r5, #16
 8014348:	f103 0301 	add.w	r3, r3, #1
 801434c:	6026      	str	r6, [r4, #0]
 801434e:	dc18      	bgt.n	8014382 <_svfprintf_r+0x12ea>
 8014350:	6065      	str	r5, [r4, #4]
 8014352:	2b07      	cmp	r3, #7
 8014354:	4415      	add	r5, r2
 8014356:	e9cd 351f 	strd	r3, r5, [sp, #124]	; 0x7c
 801435a:	f77f aa47 	ble.w	80137ec <_svfprintf_r+0x754>
 801435e:	aa1e      	add	r2, sp, #120	; 0x78
 8014360:	4659      	mov	r1, fp
 8014362:	4638      	mov	r0, r7
 8014364:	f003 fb16 	bl	8017994 <__ssprint_r>
 8014368:	2800      	cmp	r0, #0
 801436a:	f43f aa3f 	beq.w	80137ec <_svfprintf_r+0x754>
 801436e:	9b02      	ldr	r3, [sp, #8]
 8014370:	2b00      	cmp	r3, #0
 8014372:	f43f a888 	beq.w	8013486 <_svfprintf_r+0x3ee>
 8014376:	4619      	mov	r1, r3
 8014378:	4638      	mov	r0, r7
 801437a:	f002 faa7 	bl	80168cc <_free_r>
 801437e:	f7ff b882 	b.w	8013486 <_svfprintf_r+0x3ee>
 8014382:	3210      	adds	r2, #16
 8014384:	2b07      	cmp	r3, #7
 8014386:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 801438a:	f8c4 8004 	str.w	r8, [r4, #4]
 801438e:	dc02      	bgt.n	8014396 <_svfprintf_r+0x12fe>
 8014390:	3408      	adds	r4, #8
 8014392:	3d10      	subs	r5, #16
 8014394:	e7d5      	b.n	8014342 <_svfprintf_r+0x12aa>
 8014396:	aa1e      	add	r2, sp, #120	; 0x78
 8014398:	4659      	mov	r1, fp
 801439a:	4638      	mov	r0, r7
 801439c:	f003 fafa 	bl	8017994 <__ssprint_r>
 80143a0:	2800      	cmp	r0, #0
 80143a2:	d1e4      	bne.n	801436e <_svfprintf_r+0x12d6>
 80143a4:	ac21      	add	r4, sp, #132	; 0x84
 80143a6:	e7f4      	b.n	8014392 <_svfprintf_r+0x12fa>
 80143a8:	9902      	ldr	r1, [sp, #8]
 80143aa:	4638      	mov	r0, r7
 80143ac:	f002 fa8e 	bl	80168cc <_free_r>
 80143b0:	f7ff ba34 	b.w	801381c <_svfprintf_r+0x784>
 80143b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	f43f a865 	beq.w	8013486 <_svfprintf_r+0x3ee>
 80143bc:	aa1e      	add	r2, sp, #120	; 0x78
 80143be:	4659      	mov	r1, fp
 80143c0:	4638      	mov	r0, r7
 80143c2:	f003 fae7 	bl	8017994 <__ssprint_r>
 80143c6:	f7ff b85e 	b.w	8013486 <_svfprintf_r+0x3ee>
 80143ca:	bf00      	nop
 80143cc:	0801954c 	.word	0x0801954c
 80143d0:	0801953c 	.word	0x0801953c
 80143d4:	ea58 0209 	orrs.w	r2, r8, r9
 80143d8:	9502      	str	r5, [sp, #8]
 80143da:	f43f ab42 	beq.w	8013a62 <_svfprintf_r+0x9ca>
 80143de:	2b01      	cmp	r3, #1
 80143e0:	f43f abec 	beq.w	8013bbc <_svfprintf_r+0xb24>
 80143e4:	2b02      	cmp	r3, #2
 80143e6:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 80143ea:	f43f ac37 	beq.w	8013c5c <_svfprintf_r+0xbc4>
 80143ee:	f008 0307 	and.w	r3, r8, #7
 80143f2:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 80143f6:	ea48 7849 	orr.w	r8, r8, r9, lsl #29
 80143fa:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 80143fe:	3330      	adds	r3, #48	; 0x30
 8014400:	ea58 0109 	orrs.w	r1, r8, r9
 8014404:	4652      	mov	r2, sl
 8014406:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 801440a:	d1f0      	bne.n	80143ee <_svfprintf_r+0x1356>
 801440c:	9902      	ldr	r1, [sp, #8]
 801440e:	07cd      	lsls	r5, r1, #31
 8014410:	d506      	bpl.n	8014420 <_svfprintf_r+0x1388>
 8014412:	2b30      	cmp	r3, #48	; 0x30
 8014414:	d004      	beq.n	8014420 <_svfprintf_r+0x1388>
 8014416:	2330      	movs	r3, #48	; 0x30
 8014418:	f80a 3c01 	strb.w	r3, [sl, #-1]
 801441c:	f1a2 0a02 	sub.w	sl, r2, #2
 8014420:	ab4a      	add	r3, sp, #296	; 0x128
 8014422:	46b1      	mov	r9, r6
 8014424:	eba3 060a 	sub.w	r6, r3, sl
 8014428:	2300      	movs	r3, #0
 801442a:	9d02      	ldr	r5, [sp, #8]
 801442c:	9302      	str	r3, [sp, #8]
 801442e:	f7fe bff3 	b.w	8013418 <_svfprintf_r+0x380>
 8014432:	bf00      	nop

08014434 <sysconf>:
 8014434:	2808      	cmp	r0, #8
 8014436:	b508      	push	{r3, lr}
 8014438:	d006      	beq.n	8014448 <sysconf+0x14>
 801443a:	f002 f8b7 	bl	80165ac <__errno>
 801443e:	2316      	movs	r3, #22
 8014440:	6003      	str	r3, [r0, #0]
 8014442:	f04f 30ff 	mov.w	r0, #4294967295
 8014446:	bd08      	pop	{r3, pc}
 8014448:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801444c:	e7fb      	b.n	8014446 <sysconf+0x12>
	...

08014450 <_vfprintf_r>:
 8014450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014454:	ed2d 8b04 	vpush	{d8-d9}
 8014458:	b0cb      	sub	sp, #300	; 0x12c
 801445a:	460d      	mov	r5, r1
 801445c:	4692      	mov	sl, r2
 801445e:	461c      	mov	r4, r3
 8014460:	4698      	mov	r8, r3
 8014462:	4606      	mov	r6, r0
 8014464:	f002 fc5c 	bl	8016d20 <_localeconv_r>
 8014468:	6803      	ldr	r3, [r0, #0]
 801446a:	930f      	str	r3, [sp, #60]	; 0x3c
 801446c:	4618      	mov	r0, r3
 801446e:	f7eb fee7 	bl	8000240 <strlen>
 8014472:	900a      	str	r0, [sp, #40]	; 0x28
 8014474:	b126      	cbz	r6, 8014480 <_vfprintf_r+0x30>
 8014476:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8014478:	b913      	cbnz	r3, 8014480 <_vfprintf_r+0x30>
 801447a:	4630      	mov	r0, r6
 801447c:	f002 f996 	bl	80167ac <__sinit>
 8014480:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014482:	07d8      	lsls	r0, r3, #31
 8014484:	d405      	bmi.n	8014492 <_vfprintf_r+0x42>
 8014486:	89ab      	ldrh	r3, [r5, #12]
 8014488:	0599      	lsls	r1, r3, #22
 801448a:	d402      	bmi.n	8014492 <_vfprintf_r+0x42>
 801448c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801448e:	f002 fc4d 	bl	8016d2c <__retarget_lock_acquire_recursive>
 8014492:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8014496:	049a      	lsls	r2, r3, #18
 8014498:	d406      	bmi.n	80144a8 <_vfprintf_r+0x58>
 801449a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801449e:	81ab      	strh	r3, [r5, #12]
 80144a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80144a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80144a6:	666b      	str	r3, [r5, #100]	; 0x64
 80144a8:	89ab      	ldrh	r3, [r5, #12]
 80144aa:	071f      	lsls	r7, r3, #28
 80144ac:	d501      	bpl.n	80144b2 <_vfprintf_r+0x62>
 80144ae:	692b      	ldr	r3, [r5, #16]
 80144b0:	b9bb      	cbnz	r3, 80144e2 <_vfprintf_r+0x92>
 80144b2:	4629      	mov	r1, r5
 80144b4:	4630      	mov	r0, r6
 80144b6:	f001 fa2f 	bl	8015918 <__swsetup_r>
 80144ba:	b190      	cbz	r0, 80144e2 <_vfprintf_r+0x92>
 80144bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80144be:	07dc      	lsls	r4, r3, #31
 80144c0:	d508      	bpl.n	80144d4 <_vfprintf_r+0x84>
 80144c2:	f04f 33ff 	mov.w	r3, #4294967295
 80144c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80144c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80144ca:	b04b      	add	sp, #300	; 0x12c
 80144cc:	ecbd 8b04 	vpop	{d8-d9}
 80144d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144d4:	89ab      	ldrh	r3, [r5, #12]
 80144d6:	0598      	lsls	r0, r3, #22
 80144d8:	d4f3      	bmi.n	80144c2 <_vfprintf_r+0x72>
 80144da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80144dc:	f002 fc27 	bl	8016d2e <__retarget_lock_release_recursive>
 80144e0:	e7ef      	b.n	80144c2 <_vfprintf_r+0x72>
 80144e2:	89ab      	ldrh	r3, [r5, #12]
 80144e4:	f003 021a 	and.w	r2, r3, #26
 80144e8:	2a0a      	cmp	r2, #10
 80144ea:	d116      	bne.n	801451a <_vfprintf_r+0xca>
 80144ec:	f9b5 200e 	ldrsh.w	r2, [r5, #14]
 80144f0:	2a00      	cmp	r2, #0
 80144f2:	db12      	blt.n	801451a <_vfprintf_r+0xca>
 80144f4:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80144f6:	07d1      	lsls	r1, r2, #31
 80144f8:	d404      	bmi.n	8014504 <_vfprintf_r+0xb4>
 80144fa:	059a      	lsls	r2, r3, #22
 80144fc:	d402      	bmi.n	8014504 <_vfprintf_r+0xb4>
 80144fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014500:	f002 fc15 	bl	8016d2e <__retarget_lock_release_recursive>
 8014504:	4623      	mov	r3, r4
 8014506:	4652      	mov	r2, sl
 8014508:	4629      	mov	r1, r5
 801450a:	4630      	mov	r0, r6
 801450c:	b04b      	add	sp, #300	; 0x12c
 801450e:	ecbd 8b04 	vpop	{d8-d9}
 8014512:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014516:	f001 b9bf 	b.w	8015898 <__sbprintf>
 801451a:	2300      	movs	r3, #0
 801451c:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
 8014520:	ed9f 8b97 	vldr	d8, [pc, #604]	; 8014780 <_vfprintf_r+0x330>
 8014524:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8014528:	ac21      	add	r4, sp, #132	; 0x84
 801452a:	941e      	str	r4, [sp, #120]	; 0x78
 801452c:	9303      	str	r3, [sp, #12]
 801452e:	9308      	str	r3, [sp, #32]
 8014530:	930e      	str	r3, [sp, #56]	; 0x38
 8014532:	9310      	str	r3, [sp, #64]	; 0x40
 8014534:	930b      	str	r3, [sp, #44]	; 0x2c
 8014536:	4653      	mov	r3, sl
 8014538:	461f      	mov	r7, r3
 801453a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801453e:	b10a      	cbz	r2, 8014544 <_vfprintf_r+0xf4>
 8014540:	2a25      	cmp	r2, #37	; 0x25
 8014542:	d1f9      	bne.n	8014538 <_vfprintf_r+0xe8>
 8014544:	ebb7 090a 	subs.w	r9, r7, sl
 8014548:	d00d      	beq.n	8014566 <_vfprintf_r+0x116>
 801454a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801454c:	444b      	add	r3, r9
 801454e:	9320      	str	r3, [sp, #128]	; 0x80
 8014550:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014552:	3301      	adds	r3, #1
 8014554:	2b07      	cmp	r3, #7
 8014556:	e9c4 a900 	strd	sl, r9, [r4]
 801455a:	931f      	str	r3, [sp, #124]	; 0x7c
 801455c:	dc77      	bgt.n	801464e <_vfprintf_r+0x1fe>
 801455e:	3408      	adds	r4, #8
 8014560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014562:	444b      	add	r3, r9
 8014564:	930b      	str	r3, [sp, #44]	; 0x2c
 8014566:	783b      	ldrb	r3, [r7, #0]
 8014568:	2b00      	cmp	r3, #0
 801456a:	f001 8150 	beq.w	801580e <_vfprintf_r+0x13be>
 801456e:	2200      	movs	r2, #0
 8014570:	1c7b      	adds	r3, r7, #1
 8014572:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 8014576:	f04f 37ff 	mov.w	r7, #4294967295
 801457a:	920c      	str	r2, [sp, #48]	; 0x30
 801457c:	4693      	mov	fp, r2
 801457e:	f04f 092b 	mov.w	r9, #43	; 0x2b
 8014582:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014586:	9204      	str	r2, [sp, #16]
 8014588:	9309      	str	r3, [sp, #36]	; 0x24
 801458a:	9b04      	ldr	r3, [sp, #16]
 801458c:	3b20      	subs	r3, #32
 801458e:	2b5a      	cmp	r3, #90	; 0x5a
 8014590:	f200 85a7 	bhi.w	80150e2 <_vfprintf_r+0xc92>
 8014594:	e8df f013 	tbh	[pc, r3, lsl #1]
 8014598:	05a5007d 	.word	0x05a5007d
 801459c:	008505a5 	.word	0x008505a5
 80145a0:	05a505a5 	.word	0x05a505a5
 80145a4:	006505a5 	.word	0x006505a5
 80145a8:	05a505a5 	.word	0x05a505a5
 80145ac:	00920088 	.word	0x00920088
 80145b0:	008f05a5 	.word	0x008f05a5
 80145b4:	05a50095 	.word	0x05a50095
 80145b8:	00b100ae 	.word	0x00b100ae
 80145bc:	00b100b1 	.word	0x00b100b1
 80145c0:	00b100b1 	.word	0x00b100b1
 80145c4:	00b100b1 	.word	0x00b100b1
 80145c8:	00b100b1 	.word	0x00b100b1
 80145cc:	05a505a5 	.word	0x05a505a5
 80145d0:	05a505a5 	.word	0x05a505a5
 80145d4:	05a505a5 	.word	0x05a505a5
 80145d8:	013305a5 	.word	0x013305a5
 80145dc:	00df05a5 	.word	0x00df05a5
 80145e0:	013300fc 	.word	0x013300fc
 80145e4:	01330133 	.word	0x01330133
 80145e8:	05a505a5 	.word	0x05a505a5
 80145ec:	05a505a5 	.word	0x05a505a5
 80145f0:	05a500c2 	.word	0x05a500c2
 80145f4:	046905a5 	.word	0x046905a5
 80145f8:	05a505a5 	.word	0x05a505a5
 80145fc:	04b705a5 	.word	0x04b705a5
 8014600:	04db05a5 	.word	0x04db05a5
 8014604:	05a505a5 	.word	0x05a505a5
 8014608:	05a50501 	.word	0x05a50501
 801460c:	05a505a5 	.word	0x05a505a5
 8014610:	05a505a5 	.word	0x05a505a5
 8014614:	05a505a5 	.word	0x05a505a5
 8014618:	013305a5 	.word	0x013305a5
 801461c:	00df05a5 	.word	0x00df05a5
 8014620:	013300fe 	.word	0x013300fe
 8014624:	01330133 	.word	0x01330133
 8014628:	00fe00c5 	.word	0x00fe00c5
 801462c:	05a500d9 	.word	0x05a500d9
 8014630:	05a500d2 	.word	0x05a500d2
 8014634:	046b043e 	.word	0x046b043e
 8014638:	00d904a4 	.word	0x00d904a4
 801463c:	04b705a5 	.word	0x04b705a5
 8014640:	04dd007b 	.word	0x04dd007b
 8014644:	05a505a5 	.word	0x05a505a5
 8014648:	05a50522 	.word	0x05a50522
 801464c:	007b      	.short	0x007b
 801464e:	aa1e      	add	r2, sp, #120	; 0x78
 8014650:	4629      	mov	r1, r5
 8014652:	4630      	mov	r0, r6
 8014654:	f003 fa19 	bl	8017a8a <__sprint_r>
 8014658:	2800      	cmp	r0, #0
 801465a:	f040 812a 	bne.w	80148b2 <_vfprintf_r+0x462>
 801465e:	ac21      	add	r4, sp, #132	; 0x84
 8014660:	e77e      	b.n	8014560 <_vfprintf_r+0x110>
 8014662:	4630      	mov	r0, r6
 8014664:	f002 fb5c 	bl	8016d20 <_localeconv_r>
 8014668:	6843      	ldr	r3, [r0, #4]
 801466a:	9310      	str	r3, [sp, #64]	; 0x40
 801466c:	4618      	mov	r0, r3
 801466e:	f7eb fde7 	bl	8000240 <strlen>
 8014672:	900e      	str	r0, [sp, #56]	; 0x38
 8014674:	4630      	mov	r0, r6
 8014676:	f002 fb53 	bl	8016d20 <_localeconv_r>
 801467a:	6883      	ldr	r3, [r0, #8]
 801467c:	9308      	str	r3, [sp, #32]
 801467e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014680:	b12b      	cbz	r3, 801468e <_vfprintf_r+0x23e>
 8014682:	9b08      	ldr	r3, [sp, #32]
 8014684:	b11b      	cbz	r3, 801468e <_vfprintf_r+0x23e>
 8014686:	781b      	ldrb	r3, [r3, #0]
 8014688:	b10b      	cbz	r3, 801468e <_vfprintf_r+0x23e>
 801468a:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 801468e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014690:	e777      	b.n	8014582 <_vfprintf_r+0x132>
 8014692:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8014696:	2b00      	cmp	r3, #0
 8014698:	d1f9      	bne.n	801468e <_vfprintf_r+0x23e>
 801469a:	2320      	movs	r3, #32
 801469c:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 80146a0:	e7f5      	b.n	801468e <_vfprintf_r+0x23e>
 80146a2:	f04b 0b01 	orr.w	fp, fp, #1
 80146a6:	e7f2      	b.n	801468e <_vfprintf_r+0x23e>
 80146a8:	f858 3b04 	ldr.w	r3, [r8], #4
 80146ac:	930c      	str	r3, [sp, #48]	; 0x30
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	daed      	bge.n	801468e <_vfprintf_r+0x23e>
 80146b2:	425b      	negs	r3, r3
 80146b4:	930c      	str	r3, [sp, #48]	; 0x30
 80146b6:	f04b 0b04 	orr.w	fp, fp, #4
 80146ba:	e7e8      	b.n	801468e <_vfprintf_r+0x23e>
 80146bc:	f88d 905b 	strb.w	r9, [sp, #91]	; 0x5b
 80146c0:	e7e5      	b.n	801468e <_vfprintf_r+0x23e>
 80146c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80146c8:	9204      	str	r2, [sp, #16]
 80146ca:	2a2a      	cmp	r2, #42	; 0x2a
 80146cc:	d110      	bne.n	80146f0 <_vfprintf_r+0x2a0>
 80146ce:	f858 7b04 	ldr.w	r7, [r8], #4
 80146d2:	9309      	str	r3, [sp, #36]	; 0x24
 80146d4:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
 80146d8:	e7d9      	b.n	801468e <_vfprintf_r+0x23e>
 80146da:	210a      	movs	r1, #10
 80146dc:	fb01 2707 	mla	r7, r1, r7, r2
 80146e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80146e4:	9204      	str	r2, [sp, #16]
 80146e6:	9a04      	ldr	r2, [sp, #16]
 80146e8:	3a30      	subs	r2, #48	; 0x30
 80146ea:	2a09      	cmp	r2, #9
 80146ec:	d9f5      	bls.n	80146da <_vfprintf_r+0x28a>
 80146ee:	e74b      	b.n	8014588 <_vfprintf_r+0x138>
 80146f0:	2700      	movs	r7, #0
 80146f2:	e7f8      	b.n	80146e6 <_vfprintf_r+0x296>
 80146f4:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 80146f8:	e7c9      	b.n	801468e <_vfprintf_r+0x23e>
 80146fa:	2200      	movs	r2, #0
 80146fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146fe:	920c      	str	r2, [sp, #48]	; 0x30
 8014700:	9a04      	ldr	r2, [sp, #16]
 8014702:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014704:	3a30      	subs	r2, #48	; 0x30
 8014706:	200a      	movs	r0, #10
 8014708:	fb00 2201 	mla	r2, r0, r1, r2
 801470c:	920c      	str	r2, [sp, #48]	; 0x30
 801470e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014712:	9204      	str	r2, [sp, #16]
 8014714:	3a30      	subs	r2, #48	; 0x30
 8014716:	2a09      	cmp	r2, #9
 8014718:	d9f2      	bls.n	8014700 <_vfprintf_r+0x2b0>
 801471a:	e735      	b.n	8014588 <_vfprintf_r+0x138>
 801471c:	f04b 0b08 	orr.w	fp, fp, #8
 8014720:	e7b5      	b.n	801468e <_vfprintf_r+0x23e>
 8014722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014724:	781b      	ldrb	r3, [r3, #0]
 8014726:	2b68      	cmp	r3, #104	; 0x68
 8014728:	bf01      	itttt	eq
 801472a:	9b09      	ldreq	r3, [sp, #36]	; 0x24
 801472c:	3301      	addeq	r3, #1
 801472e:	9309      	streq	r3, [sp, #36]	; 0x24
 8014730:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8014734:	bf18      	it	ne
 8014736:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 801473a:	e7a8      	b.n	801468e <_vfprintf_r+0x23e>
 801473c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801473e:	781b      	ldrb	r3, [r3, #0]
 8014740:	2b6c      	cmp	r3, #108	; 0x6c
 8014742:	d105      	bne.n	8014750 <_vfprintf_r+0x300>
 8014744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014746:	3301      	adds	r3, #1
 8014748:	9309      	str	r3, [sp, #36]	; 0x24
 801474a:	f04b 0b20 	orr.w	fp, fp, #32
 801474e:	e79e      	b.n	801468e <_vfprintf_r+0x23e>
 8014750:	f04b 0b10 	orr.w	fp, fp, #16
 8014754:	e79b      	b.n	801468e <_vfprintf_r+0x23e>
 8014756:	4642      	mov	r2, r8
 8014758:	2000      	movs	r0, #0
 801475a:	f852 3b04 	ldr.w	r3, [r2], #4
 801475e:	9205      	str	r2, [sp, #20]
 8014760:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 8014764:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
 8014768:	e9cd 0006 	strd	r0, r0, [sp, #24]
 801476c:	9002      	str	r0, [sp, #8]
 801476e:	2701      	movs	r7, #1
 8014770:	4681      	mov	r9, r0
 8014772:	4680      	mov	r8, r0
 8014774:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 8014778:	e19b      	b.n	8014ab2 <_vfprintf_r+0x662>
 801477a:	bf00      	nop
 801477c:	f3af 8000 	nop.w
	...
 8014788:	ffffffff 	.word	0xffffffff
 801478c:	7fefffff 	.word	0x7fefffff
 8014790:	f04b 0b10 	orr.w	fp, fp, #16
 8014794:	f01b 0f20 	tst.w	fp, #32
 8014798:	d016      	beq.n	80147c8 <_vfprintf_r+0x378>
 801479a:	f108 0807 	add.w	r8, r8, #7
 801479e:	f028 0307 	bic.w	r3, r8, #7
 80147a2:	461a      	mov	r2, r3
 80147a4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80147a8:	f852 8b08 	ldr.w	r8, [r2], #8
 80147ac:	9205      	str	r2, [sp, #20]
 80147ae:	f1b9 0f00 	cmp.w	r9, #0
 80147b2:	da07      	bge.n	80147c4 <_vfprintf_r+0x374>
 80147b4:	f1d8 0800 	rsbs	r8, r8, #0
 80147b8:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80147bc:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
 80147c0:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 80147c4:	2301      	movs	r3, #1
 80147c6:	e365      	b.n	8014e94 <_vfprintf_r+0xa44>
 80147c8:	4642      	mov	r2, r8
 80147ca:	f01b 0f10 	tst.w	fp, #16
 80147ce:	f852 3b04 	ldr.w	r3, [r2], #4
 80147d2:	9205      	str	r2, [sp, #20]
 80147d4:	d003      	beq.n	80147de <_vfprintf_r+0x38e>
 80147d6:	4698      	mov	r8, r3
 80147d8:	ea4f 79e3 	mov.w	r9, r3, asr #31
 80147dc:	e7e7      	b.n	80147ae <_vfprintf_r+0x35e>
 80147de:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80147e2:	d004      	beq.n	80147ee <_vfprintf_r+0x39e>
 80147e4:	fa0f f883 	sxth.w	r8, r3
 80147e8:	f343 39c0 	sbfx	r9, r3, #15, #1
 80147ec:	e7df      	b.n	80147ae <_vfprintf_r+0x35e>
 80147ee:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80147f2:	d0f0      	beq.n	80147d6 <_vfprintf_r+0x386>
 80147f4:	fa4f f883 	sxtb.w	r8, r3
 80147f8:	f343 19c0 	sbfx	r9, r3, #7, #1
 80147fc:	e7d7      	b.n	80147ae <_vfprintf_r+0x35e>
 80147fe:	f108 0807 	add.w	r8, r8, #7
 8014802:	f028 0307 	bic.w	r3, r8, #7
 8014806:	ecb3 8b02 	vldmia	r3!, {d8}
 801480a:	ed1f 7b21 	vldr	d7, [pc, #-132]	; 8014788 <_vfprintf_r+0x338>
 801480e:	eeb0 6bc8 	vabs.f64	d6, d8
 8014812:	eeb4 6b47 	vcmp.f64	d6, d7
 8014816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801481a:	9305      	str	r3, [sp, #20]
 801481c:	dd18      	ble.n	8014850 <_vfprintf_r+0x400>
 801481e:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8014822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014826:	d502      	bpl.n	801482e <_vfprintf_r+0x3de>
 8014828:	232d      	movs	r3, #45	; 0x2d
 801482a:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 801482e:	4a28      	ldr	r2, [pc, #160]	; (80148d0 <_vfprintf_r+0x480>)
 8014830:	4828      	ldr	r0, [pc, #160]	; (80148d4 <_vfprintf_r+0x484>)
 8014832:	9b04      	ldr	r3, [sp, #16]
 8014834:	2b47      	cmp	r3, #71	; 0x47
 8014836:	bfd4      	ite	le
 8014838:	4692      	movle	sl, r2
 801483a:	4682      	movgt	sl, r0
 801483c:	2300      	movs	r3, #0
 801483e:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 8014842:	9302      	str	r3, [sp, #8]
 8014844:	2703      	movs	r7, #3
 8014846:	4699      	mov	r9, r3
 8014848:	e9cd 3306 	strd	r3, r3, [sp, #24]
 801484c:	4698      	mov	r8, r3
 801484e:	e130      	b.n	8014ab2 <_vfprintf_r+0x662>
 8014850:	eeb4 8b48 	vcmp.f64	d8, d8
 8014854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014858:	d70a      	bvc.n	8014870 <_vfprintf_r+0x420>
 801485a:	ee18 3a90 	vmov	r3, s17
 801485e:	2b00      	cmp	r3, #0
 8014860:	bfb8      	it	lt
 8014862:	232d      	movlt	r3, #45	; 0x2d
 8014864:	4a1c      	ldr	r2, [pc, #112]	; (80148d8 <_vfprintf_r+0x488>)
 8014866:	481d      	ldr	r0, [pc, #116]	; (80148dc <_vfprintf_r+0x48c>)
 8014868:	bfb8      	it	lt
 801486a:	f88d 305b 	strblt.w	r3, [sp, #91]	; 0x5b
 801486e:	e7e0      	b.n	8014832 <_vfprintf_r+0x3e2>
 8014870:	9b04      	ldr	r3, [sp, #16]
 8014872:	f023 0920 	bic.w	r9, r3, #32
 8014876:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 801487a:	d131      	bne.n	80148e0 <_vfprintf_r+0x490>
 801487c:	2330      	movs	r3, #48	; 0x30
 801487e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8014882:	9b04      	ldr	r3, [sp, #16]
 8014884:	2b61      	cmp	r3, #97	; 0x61
 8014886:	bf0c      	ite	eq
 8014888:	2378      	moveq	r3, #120	; 0x78
 801488a:	2358      	movne	r3, #88	; 0x58
 801488c:	2f63      	cmp	r7, #99	; 0x63
 801488e:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 8014892:	f04b 0b02 	orr.w	fp, fp, #2
 8014896:	f340 81e3 	ble.w	8014c60 <_vfprintf_r+0x810>
 801489a:	1c79      	adds	r1, r7, #1
 801489c:	4630      	mov	r0, r6
 801489e:	f7fe f8f5 	bl	8012a8c <_malloc_r>
 80148a2:	4682      	mov	sl, r0
 80148a4:	2800      	cmp	r0, #0
 80148a6:	f040 81e0 	bne.w	8014c6a <_vfprintf_r+0x81a>
 80148aa:	89ab      	ldrh	r3, [r5, #12]
 80148ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80148b0:	81ab      	strh	r3, [r5, #12]
 80148b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80148b4:	07d9      	lsls	r1, r3, #31
 80148b6:	d405      	bmi.n	80148c4 <_vfprintf_r+0x474>
 80148b8:	89ab      	ldrh	r3, [r5, #12]
 80148ba:	059a      	lsls	r2, r3, #22
 80148bc:	d402      	bmi.n	80148c4 <_vfprintf_r+0x474>
 80148be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80148c0:	f002 fa35 	bl	8016d2e <__retarget_lock_release_recursive>
 80148c4:	89ab      	ldrh	r3, [r5, #12]
 80148c6:	065b      	lsls	r3, r3, #25
 80148c8:	f57f adfe 	bpl.w	80144c8 <_vfprintf_r+0x78>
 80148cc:	e5f9      	b.n	80144c2 <_vfprintf_r+0x72>
 80148ce:	bf00      	nop
 80148d0:	08019508 	.word	0x08019508
 80148d4:	0801950c 	.word	0x0801950c
 80148d8:	08019510 	.word	0x08019510
 80148dc:	08019514 	.word	0x08019514
 80148e0:	1c7b      	adds	r3, r7, #1
 80148e2:	f000 81c4 	beq.w	8014c6e <_vfprintf_r+0x81e>
 80148e6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80148ea:	f040 81c4 	bne.w	8014c76 <_vfprintf_r+0x826>
 80148ee:	2f00      	cmp	r7, #0
 80148f0:	f040 81c1 	bne.w	8014c76 <_vfprintf_r+0x826>
 80148f4:	9702      	str	r7, [sp, #8]
 80148f6:	2701      	movs	r7, #1
 80148f8:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 80148fc:	930d      	str	r3, [sp, #52]	; 0x34
 80148fe:	ee18 3a90 	vmov	r3, s17
 8014902:	2b00      	cmp	r3, #0
 8014904:	f280 81ba 	bge.w	8014c7c <_vfprintf_r+0x82c>
 8014908:	eeb1 9b48 	vneg.f64	d9, d8
 801490c:	232d      	movs	r3, #45	; 0x2d
 801490e:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 8014912:	9313      	str	r3, [sp, #76]	; 0x4c
 8014914:	f040 81cb 	bne.w	8014cae <_vfprintf_r+0x85e>
 8014918:	eeb0 0b49 	vmov.f64	d0, d9
 801491c:	a818      	add	r0, sp, #96	; 0x60
 801491e:	f002 ffab 	bl	8017878 <frexp>
 8014922:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
 8014926:	ee20 0b07 	vmul.f64	d0, d0, d7
 801492a:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801492e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014932:	bf08      	it	eq
 8014934:	2301      	moveq	r3, #1
 8014936:	9a04      	ldr	r2, [sp, #16]
 8014938:	bf08      	it	eq
 801493a:	9318      	streq	r3, [sp, #96]	; 0x60
 801493c:	49b7      	ldr	r1, [pc, #732]	; (8014c1c <_vfprintf_r+0x7cc>)
 801493e:	4bb8      	ldr	r3, [pc, #736]	; (8014c20 <_vfprintf_r+0x7d0>)
 8014940:	eeb3 7b00 	vmov.f64	d7, #48	; 0x41800000  16.0
 8014944:	2a61      	cmp	r2, #97	; 0x61
 8014946:	bf18      	it	ne
 8014948:	4619      	movne	r1, r3
 801494a:	1e7a      	subs	r2, r7, #1
 801494c:	4653      	mov	r3, sl
 801494e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014952:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8014956:	f1b2 3fff 	cmp.w	r2, #4294967295
 801495a:	ee16 ca90 	vmov	ip, s13
 801495e:	f811 000c 	ldrb.w	r0, [r1, ip]
 8014962:	f803 0b01 	strb.w	r0, [r3], #1
 8014966:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801496a:	4610      	mov	r0, r2
 801496c:	ee30 0b46 	vsub.f64	d0, d0, d6
 8014970:	d006      	beq.n	8014980 <_vfprintf_r+0x530>
 8014972:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8014976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801497a:	f102 32ff 	add.w	r2, r2, #4294967295
 801497e:	d1e6      	bne.n	801494e <_vfprintf_r+0x4fe>
 8014980:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8014984:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8014988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801498c:	dc09      	bgt.n	80149a2 <_vfprintf_r+0x552>
 801498e:	eeb4 0b47 	vcmp.f64	d0, d7
 8014992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014996:	f040 8184 	bne.w	8014ca2 <_vfprintf_r+0x852>
 801499a:	f01c 0f01 	tst.w	ip, #1
 801499e:	f000 8180 	beq.w	8014ca2 <_vfprintf_r+0x852>
 80149a2:	f891 c00f 	ldrb.w	ip, [r1, #15]
 80149a6:	931c      	str	r3, [sp, #112]	; 0x70
 80149a8:	f04f 0e30 	mov.w	lr, #48	; 0x30
 80149ac:	981c      	ldr	r0, [sp, #112]	; 0x70
 80149ae:	1e42      	subs	r2, r0, #1
 80149b0:	921c      	str	r2, [sp, #112]	; 0x70
 80149b2:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 80149b6:	4562      	cmp	r2, ip
 80149b8:	f000 8164 	beq.w	8014c84 <_vfprintf_r+0x834>
 80149bc:	2a39      	cmp	r2, #57	; 0x39
 80149be:	bf16      	itet	ne
 80149c0:	3201      	addne	r2, #1
 80149c2:	7a8a      	ldrbeq	r2, [r1, #10]
 80149c4:	b2d2      	uxtbne	r2, r2
 80149c6:	f800 2c01 	strb.w	r2, [r0, #-1]
 80149ca:	eba3 030a 	sub.w	r3, r3, sl
 80149ce:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80149d2:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80149d6:	9303      	str	r3, [sp, #12]
 80149d8:	f040 81ac 	bne.w	8014d34 <_vfprintf_r+0x8e4>
 80149dc:	f118 0f03 	cmn.w	r8, #3
 80149e0:	db02      	blt.n	80149e8 <_vfprintf_r+0x598>
 80149e2:	4547      	cmp	r7, r8
 80149e4:	f280 81ce 	bge.w	8014d84 <_vfprintf_r+0x934>
 80149e8:	9b04      	ldr	r3, [sp, #16]
 80149ea:	3b02      	subs	r3, #2
 80149ec:	9304      	str	r3, [sp, #16]
 80149ee:	9904      	ldr	r1, [sp, #16]
 80149f0:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80149f4:	f021 0120 	bic.w	r1, r1, #32
 80149f8:	2941      	cmp	r1, #65	; 0x41
 80149fa:	bf08      	it	eq
 80149fc:	320f      	addeq	r2, #15
 80149fe:	f108 33ff 	add.w	r3, r8, #4294967295
 8014a02:	bf06      	itte	eq
 8014a04:	b2d2      	uxtbeq	r2, r2
 8014a06:	2101      	moveq	r1, #1
 8014a08:	2100      	movne	r1, #0
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	9318      	str	r3, [sp, #96]	; 0x60
 8014a0e:	bfb8      	it	lt
 8014a10:	f1c8 0301 	rsblt	r3, r8, #1
 8014a14:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
 8014a18:	bfb4      	ite	lt
 8014a1a:	222d      	movlt	r2, #45	; 0x2d
 8014a1c:	222b      	movge	r2, #43	; 0x2b
 8014a1e:	2b09      	cmp	r3, #9
 8014a20:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 8014a24:	f340 819d 	ble.w	8014d62 <_vfprintf_r+0x912>
 8014a28:	f10d 0277 	add.w	r2, sp, #119	; 0x77
 8014a2c:	200a      	movs	r0, #10
 8014a2e:	4611      	mov	r1, r2
 8014a30:	fb93 f7f0 	sdiv	r7, r3, r0
 8014a34:	fb00 3017 	mls	r0, r0, r7, r3
 8014a38:	3030      	adds	r0, #48	; 0x30
 8014a3a:	f801 0c01 	strb.w	r0, [r1, #-1]
 8014a3e:	4618      	mov	r0, r3
 8014a40:	2863      	cmp	r0, #99	; 0x63
 8014a42:	f102 32ff 	add.w	r2, r2, #4294967295
 8014a46:	463b      	mov	r3, r7
 8014a48:	dcf0      	bgt.n	8014a2c <_vfprintf_r+0x5dc>
 8014a4a:	3330      	adds	r3, #48	; 0x30
 8014a4c:	1e88      	subs	r0, r1, #2
 8014a4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014a52:	f10d 0777 	add.w	r7, sp, #119	; 0x77
 8014a56:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 8014a5a:	4603      	mov	r3, r0
 8014a5c:	42bb      	cmp	r3, r7
 8014a5e:	f0c0 817b 	bcc.w	8014d58 <_vfprintf_r+0x908>
 8014a62:	f10d 0279 	add.w	r2, sp, #121	; 0x79
 8014a66:	1a52      	subs	r2, r2, r1
 8014a68:	42b8      	cmp	r0, r7
 8014a6a:	bf88      	it	hi
 8014a6c:	2200      	movhi	r2, #0
 8014a6e:	f10d 036a 	add.w	r3, sp, #106	; 0x6a
 8014a72:	441a      	add	r2, r3
 8014a74:	ab1a      	add	r3, sp, #104	; 0x68
 8014a76:	1ad3      	subs	r3, r2, r3
 8014a78:	9a03      	ldr	r2, [sp, #12]
 8014a7a:	9311      	str	r3, [sp, #68]	; 0x44
 8014a7c:	2a01      	cmp	r2, #1
 8014a7e:	eb03 0702 	add.w	r7, r3, r2
 8014a82:	dc02      	bgt.n	8014a8a <_vfprintf_r+0x63a>
 8014a84:	f01b 0f01 	tst.w	fp, #1
 8014a88:	d001      	beq.n	8014a8e <_vfprintf_r+0x63e>
 8014a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a8c:	441f      	add	r7, r3
 8014a8e:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 8014a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014a96:	930d      	str	r3, [sp, #52]	; 0x34
 8014a98:	2300      	movs	r3, #0
 8014a9a:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8014a9e:	4698      	mov	r8, r3
 8014aa0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014aa2:	b113      	cbz	r3, 8014aaa <_vfprintf_r+0x65a>
 8014aa4:	232d      	movs	r3, #45	; 0x2d
 8014aa6:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8014aaa:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8014aae:	f04f 0900 	mov.w	r9, #0
 8014ab2:	45b9      	cmp	r9, r7
 8014ab4:	464b      	mov	r3, r9
 8014ab6:	bfb8      	it	lt
 8014ab8:	463b      	movlt	r3, r7
 8014aba:	930d      	str	r3, [sp, #52]	; 0x34
 8014abc:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8014ac0:	b113      	cbz	r3, 8014ac8 <_vfprintf_r+0x678>
 8014ac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ac4:	3301      	adds	r3, #1
 8014ac6:	930d      	str	r3, [sp, #52]	; 0x34
 8014ac8:	f01b 0302 	ands.w	r3, fp, #2
 8014acc:	9313      	str	r3, [sp, #76]	; 0x4c
 8014ace:	bf1e      	ittt	ne
 8014ad0:	9b0d      	ldrne	r3, [sp, #52]	; 0x34
 8014ad2:	3302      	addne	r3, #2
 8014ad4:	930d      	strne	r3, [sp, #52]	; 0x34
 8014ad6:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8014ada:	9314      	str	r3, [sp, #80]	; 0x50
 8014adc:	d120      	bne.n	8014b20 <_vfprintf_r+0x6d0>
 8014ade:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8014ae2:	1a9b      	subs	r3, r3, r2
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	dd1b      	ble.n	8014b20 <_vfprintf_r+0x6d0>
 8014ae8:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 8014aec:	494d      	ldr	r1, [pc, #308]	; (8014c24 <_vfprintf_r+0x7d4>)
 8014aee:	6021      	str	r1, [r4, #0]
 8014af0:	2b10      	cmp	r3, #16
 8014af2:	f102 0201 	add.w	r2, r2, #1
 8014af6:	f104 0008 	add.w	r0, r4, #8
 8014afa:	f300 8302 	bgt.w	8015102 <_vfprintf_r+0xcb2>
 8014afe:	eb0c 0103 	add.w	r1, ip, r3
 8014b02:	2a07      	cmp	r2, #7
 8014b04:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8014b08:	6063      	str	r3, [r4, #4]
 8014b0a:	f340 830f 	ble.w	801512c <_vfprintf_r+0xcdc>
 8014b0e:	aa1e      	add	r2, sp, #120	; 0x78
 8014b10:	4629      	mov	r1, r5
 8014b12:	4630      	mov	r0, r6
 8014b14:	f002 ffb9 	bl	8017a8a <__sprint_r>
 8014b18:	2800      	cmp	r0, #0
 8014b1a:	f040 8655 	bne.w	80157c8 <_vfprintf_r+0x1378>
 8014b1e:	ac21      	add	r4, sp, #132	; 0x84
 8014b20:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8014b24:	b173      	cbz	r3, 8014b44 <_vfprintf_r+0x6f4>
 8014b26:	f10d 035b 	add.w	r3, sp, #91	; 0x5b
 8014b2a:	6023      	str	r3, [r4, #0]
 8014b2c:	2301      	movs	r3, #1
 8014b2e:	6063      	str	r3, [r4, #4]
 8014b30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014b32:	3301      	adds	r3, #1
 8014b34:	9320      	str	r3, [sp, #128]	; 0x80
 8014b36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014b38:	3301      	adds	r3, #1
 8014b3a:	2b07      	cmp	r3, #7
 8014b3c:	931f      	str	r3, [sp, #124]	; 0x7c
 8014b3e:	f300 82f7 	bgt.w	8015130 <_vfprintf_r+0xce0>
 8014b42:	3408      	adds	r4, #8
 8014b44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014b46:	b16b      	cbz	r3, 8014b64 <_vfprintf_r+0x714>
 8014b48:	ab17      	add	r3, sp, #92	; 0x5c
 8014b4a:	6023      	str	r3, [r4, #0]
 8014b4c:	2302      	movs	r3, #2
 8014b4e:	6063      	str	r3, [r4, #4]
 8014b50:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014b52:	3302      	adds	r3, #2
 8014b54:	9320      	str	r3, [sp, #128]	; 0x80
 8014b56:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014b58:	3301      	adds	r3, #1
 8014b5a:	2b07      	cmp	r3, #7
 8014b5c:	931f      	str	r3, [sp, #124]	; 0x7c
 8014b5e:	f300 82f1 	bgt.w	8015144 <_vfprintf_r+0xcf4>
 8014b62:	3408      	adds	r4, #8
 8014b64:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014b66:	2b80      	cmp	r3, #128	; 0x80
 8014b68:	d120      	bne.n	8014bac <_vfprintf_r+0x75c>
 8014b6a:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8014b6e:	1a9b      	subs	r3, r3, r2
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	dd1b      	ble.n	8014bac <_vfprintf_r+0x75c>
 8014b74:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 8014b78:	492b      	ldr	r1, [pc, #172]	; (8014c28 <_vfprintf_r+0x7d8>)
 8014b7a:	6021      	str	r1, [r4, #0]
 8014b7c:	2b10      	cmp	r3, #16
 8014b7e:	f102 0201 	add.w	r2, r2, #1
 8014b82:	f104 0008 	add.w	r0, r4, #8
 8014b86:	f300 82e7 	bgt.w	8015158 <_vfprintf_r+0xd08>
 8014b8a:	eb0c 0103 	add.w	r1, ip, r3
 8014b8e:	2a07      	cmp	r2, #7
 8014b90:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8014b94:	6063      	str	r3, [r4, #4]
 8014b96:	f340 82f4 	ble.w	8015182 <_vfprintf_r+0xd32>
 8014b9a:	aa1e      	add	r2, sp, #120	; 0x78
 8014b9c:	4629      	mov	r1, r5
 8014b9e:	4630      	mov	r0, r6
 8014ba0:	f002 ff73 	bl	8017a8a <__sprint_r>
 8014ba4:	2800      	cmp	r0, #0
 8014ba6:	f040 860f 	bne.w	80157c8 <_vfprintf_r+0x1378>
 8014baa:	ac21      	add	r4, sp, #132	; 0x84
 8014bac:	eba9 0907 	sub.w	r9, r9, r7
 8014bb0:	f1b9 0f00 	cmp.w	r9, #0
 8014bb4:	dd1c      	ble.n	8014bf0 <_vfprintf_r+0x7a0>
 8014bb6:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	; 0x7c
 8014bba:	481b      	ldr	r0, [pc, #108]	; (8014c28 <_vfprintf_r+0x7d8>)
 8014bbc:	6020      	str	r0, [r4, #0]
 8014bbe:	f1b9 0f10 	cmp.w	r9, #16
 8014bc2:	f102 0201 	add.w	r2, r2, #1
 8014bc6:	f104 0108 	add.w	r1, r4, #8
 8014bca:	f300 82dc 	bgt.w	8015186 <_vfprintf_r+0xd36>
 8014bce:	444b      	add	r3, r9
 8014bd0:	2a07      	cmp	r2, #7
 8014bd2:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 8014bd6:	f8c4 9004 	str.w	r9, [r4, #4]
 8014bda:	f340 82e8 	ble.w	80151ae <_vfprintf_r+0xd5e>
 8014bde:	aa1e      	add	r2, sp, #120	; 0x78
 8014be0:	4629      	mov	r1, r5
 8014be2:	4630      	mov	r0, r6
 8014be4:	f002 ff51 	bl	8017a8a <__sprint_r>
 8014be8:	2800      	cmp	r0, #0
 8014bea:	f040 85ed 	bne.w	80157c8 <_vfprintf_r+0x1378>
 8014bee:	ac21      	add	r4, sp, #132	; 0x84
 8014bf0:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8014bf4:	9820      	ldr	r0, [sp, #128]	; 0x80
 8014bf6:	f040 82e1 	bne.w	80151bc <_vfprintf_r+0xd6c>
 8014bfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014bfc:	3301      	adds	r3, #1
 8014bfe:	4438      	add	r0, r7
 8014c00:	2b07      	cmp	r3, #7
 8014c02:	e9c4 a700 	strd	sl, r7, [r4]
 8014c06:	9020      	str	r0, [sp, #128]	; 0x80
 8014c08:	931f      	str	r3, [sp, #124]	; 0x7c
 8014c0a:	f300 831c 	bgt.w	8015246 <_vfprintf_r+0xdf6>
 8014c0e:	3408      	adds	r4, #8
 8014c10:	f01b 0f04 	tst.w	fp, #4
 8014c14:	f040 85b7 	bne.w	8015786 <_vfprintf_r+0x1336>
 8014c18:	e008      	b.n	8014c2c <_vfprintf_r+0x7dc>
 8014c1a:	bf00      	nop
 8014c1c:	08019518 	.word	0x08019518
 8014c20:	08019529 	.word	0x08019529
 8014c24:	0801955c 	.word	0x0801955c
 8014c28:	0801956c 	.word	0x0801956c
 8014c2c:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
 8014c30:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014c32:	428a      	cmp	r2, r1
 8014c34:	bfac      	ite	ge
 8014c36:	189b      	addge	r3, r3, r2
 8014c38:	185b      	addlt	r3, r3, r1
 8014c3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8014c3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014c3e:	b13b      	cbz	r3, 8014c50 <_vfprintf_r+0x800>
 8014c40:	aa1e      	add	r2, sp, #120	; 0x78
 8014c42:	4629      	mov	r1, r5
 8014c44:	4630      	mov	r0, r6
 8014c46:	f002 ff20 	bl	8017a8a <__sprint_r>
 8014c4a:	2800      	cmp	r0, #0
 8014c4c:	f040 85bc 	bne.w	80157c8 <_vfprintf_r+0x1378>
 8014c50:	2300      	movs	r3, #0
 8014c52:	931f      	str	r3, [sp, #124]	; 0x7c
 8014c54:	9b02      	ldr	r3, [sp, #8]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	f040 85d3 	bne.w	8015802 <_vfprintf_r+0x13b2>
 8014c5c:	ac21      	add	r4, sp, #132	; 0x84
 8014c5e:	e0e6      	b.n	8014e2e <_vfprintf_r+0x9de>
 8014c60:	2300      	movs	r3, #0
 8014c62:	9302      	str	r3, [sp, #8]
 8014c64:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 8014c68:	e646      	b.n	80148f8 <_vfprintf_r+0x4a8>
 8014c6a:	9002      	str	r0, [sp, #8]
 8014c6c:	e644      	b.n	80148f8 <_vfprintf_r+0x4a8>
 8014c6e:	2300      	movs	r3, #0
 8014c70:	9302      	str	r3, [sp, #8]
 8014c72:	2706      	movs	r7, #6
 8014c74:	e640      	b.n	80148f8 <_vfprintf_r+0x4a8>
 8014c76:	2300      	movs	r3, #0
 8014c78:	9302      	str	r3, [sp, #8]
 8014c7a:	e63d      	b.n	80148f8 <_vfprintf_r+0x4a8>
 8014c7c:	2300      	movs	r3, #0
 8014c7e:	eeb0 9b48 	vmov.f64	d9, d8
 8014c82:	e644      	b.n	801490e <_vfprintf_r+0x4be>
 8014c84:	f800 ec01 	strb.w	lr, [r0, #-1]
 8014c88:	e690      	b.n	80149ac <_vfprintf_r+0x55c>
 8014c8a:	f802 eb01 	strb.w	lr, [r2], #1
 8014c8e:	ebac 0102 	sub.w	r1, ip, r2
 8014c92:	2900      	cmp	r1, #0
 8014c94:	daf9      	bge.n	8014c8a <_vfprintf_r+0x83a>
 8014c96:	1c42      	adds	r2, r0, #1
 8014c98:	3001      	adds	r0, #1
 8014c9a:	bfb8      	it	lt
 8014c9c:	2200      	movlt	r2, #0
 8014c9e:	4413      	add	r3, r2
 8014ca0:	e693      	b.n	80149ca <_vfprintf_r+0x57a>
 8014ca2:	461a      	mov	r2, r3
 8014ca4:	eb03 0c00 	add.w	ip, r3, r0
 8014ca8:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8014cac:	e7ef      	b.n	8014c8e <_vfprintf_r+0x83e>
 8014cae:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 8014cb2:	d006      	beq.n	8014cc2 <_vfprintf_r+0x872>
 8014cb4:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
 8014cb8:	d119      	bne.n	8014cee <_vfprintf_r+0x89e>
 8014cba:	f107 0801 	add.w	r8, r7, #1
 8014cbe:	2102      	movs	r1, #2
 8014cc0:	e001      	b.n	8014cc6 <_vfprintf_r+0x876>
 8014cc2:	46b8      	mov	r8, r7
 8014cc4:	2103      	movs	r1, #3
 8014cc6:	ab1c      	add	r3, sp, #112	; 0x70
 8014cc8:	9301      	str	r3, [sp, #4]
 8014cca:	ab19      	add	r3, sp, #100	; 0x64
 8014ccc:	9300      	str	r3, [sp, #0]
 8014cce:	4642      	mov	r2, r8
 8014cd0:	ab18      	add	r3, sp, #96	; 0x60
 8014cd2:	4630      	mov	r0, r6
 8014cd4:	eeb0 0b49 	vmov.f64	d0, d9
 8014cd8:	f000 ff12 	bl	8015b00 <_dtoa_r>
 8014cdc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8014ce0:	4682      	mov	sl, r0
 8014ce2:	d106      	bne.n	8014cf2 <_vfprintf_r+0x8a2>
 8014ce4:	f01b 0f01 	tst.w	fp, #1
 8014ce8:	d103      	bne.n	8014cf2 <_vfprintf_r+0x8a2>
 8014cea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014cec:	e66d      	b.n	80149ca <_vfprintf_r+0x57a>
 8014cee:	46b8      	mov	r8, r7
 8014cf0:	e7e5      	b.n	8014cbe <_vfprintf_r+0x86e>
 8014cf2:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 8014cf6:	eb0a 0308 	add.w	r3, sl, r8
 8014cfa:	d10d      	bne.n	8014d18 <_vfprintf_r+0x8c8>
 8014cfc:	f89a 2000 	ldrb.w	r2, [sl]
 8014d00:	2a30      	cmp	r2, #48	; 0x30
 8014d02:	d107      	bne.n	8014d14 <_vfprintf_r+0x8c4>
 8014d04:	eeb5 9b40 	vcmp.f64	d9, #0.0
 8014d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d0c:	bf1c      	itt	ne
 8014d0e:	f1c8 0201 	rsbne	r2, r8, #1
 8014d12:	9218      	strne	r2, [sp, #96]	; 0x60
 8014d14:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014d16:	4413      	add	r3, r2
 8014d18:	eeb5 9b40 	vcmp.f64	d9, #0.0
 8014d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d20:	bf08      	it	eq
 8014d22:	931c      	streq	r3, [sp, #112]	; 0x70
 8014d24:	2130      	movs	r1, #48	; 0x30
 8014d26:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014d28:	4293      	cmp	r3, r2
 8014d2a:	d9de      	bls.n	8014cea <_vfprintf_r+0x89a>
 8014d2c:	1c50      	adds	r0, r2, #1
 8014d2e:	901c      	str	r0, [sp, #112]	; 0x70
 8014d30:	7011      	strb	r1, [r2, #0]
 8014d32:	e7f8      	b.n	8014d26 <_vfprintf_r+0x8d6>
 8014d34:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 8014d38:	f47f ae59 	bne.w	80149ee <_vfprintf_r+0x59e>
 8014d3c:	f00b 0301 	and.w	r3, fp, #1
 8014d40:	f1b8 0f00 	cmp.w	r8, #0
 8014d44:	ea43 0307 	orr.w	r3, r3, r7
 8014d48:	dd18      	ble.n	8014d7c <_vfprintf_r+0x92c>
 8014d4a:	b38b      	cbz	r3, 8014db0 <_vfprintf_r+0x960>
 8014d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d4e:	4443      	add	r3, r8
 8014d50:	441f      	add	r7, r3
 8014d52:	2366      	movs	r3, #102	; 0x66
 8014d54:	9304      	str	r3, [sp, #16]
 8014d56:	e030      	b.n	8014dba <_vfprintf_r+0x96a>
 8014d58:	f813 cb01 	ldrb.w	ip, [r3], #1
 8014d5c:	f802 cb01 	strb.w	ip, [r2], #1
 8014d60:	e67c      	b.n	8014a5c <_vfprintf_r+0x60c>
 8014d62:	b941      	cbnz	r1, 8014d76 <_vfprintf_r+0x926>
 8014d64:	2230      	movs	r2, #48	; 0x30
 8014d66:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
 8014d6a:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 8014d6e:	3330      	adds	r3, #48	; 0x30
 8014d70:	f802 3b01 	strb.w	r3, [r2], #1
 8014d74:	e67e      	b.n	8014a74 <_vfprintf_r+0x624>
 8014d76:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 8014d7a:	e7f8      	b.n	8014d6e <_vfprintf_r+0x91e>
 8014d7c:	b1d3      	cbz	r3, 8014db4 <_vfprintf_r+0x964>
 8014d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d80:	3301      	adds	r3, #1
 8014d82:	e7e5      	b.n	8014d50 <_vfprintf_r+0x900>
 8014d84:	9b03      	ldr	r3, [sp, #12]
 8014d86:	4543      	cmp	r3, r8
 8014d88:	dc07      	bgt.n	8014d9a <_vfprintf_r+0x94a>
 8014d8a:	f01b 0f01 	tst.w	fp, #1
 8014d8e:	d02a      	beq.n	8014de6 <_vfprintf_r+0x996>
 8014d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d92:	eb08 0703 	add.w	r7, r8, r3
 8014d96:	2367      	movs	r3, #103	; 0x67
 8014d98:	e7dc      	b.n	8014d54 <_vfprintf_r+0x904>
 8014d9a:	9b03      	ldr	r3, [sp, #12]
 8014d9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014d9e:	f1b8 0f00 	cmp.w	r8, #0
 8014da2:	eb03 0702 	add.w	r7, r3, r2
 8014da6:	dcf6      	bgt.n	8014d96 <_vfprintf_r+0x946>
 8014da8:	f1c8 0301 	rsb	r3, r8, #1
 8014dac:	441f      	add	r7, r3
 8014dae:	e7f2      	b.n	8014d96 <_vfprintf_r+0x946>
 8014db0:	4647      	mov	r7, r8
 8014db2:	e7ce      	b.n	8014d52 <_vfprintf_r+0x902>
 8014db4:	2366      	movs	r3, #102	; 0x66
 8014db6:	9304      	str	r3, [sp, #16]
 8014db8:	2701      	movs	r7, #1
 8014dba:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 8014dbe:	9307      	str	r3, [sp, #28]
 8014dc0:	d025      	beq.n	8014e0e <_vfprintf_r+0x9be>
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	f1b8 0f00 	cmp.w	r8, #0
 8014dc8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8014dcc:	f77f ae68 	ble.w	8014aa0 <_vfprintf_r+0x650>
 8014dd0:	9b08      	ldr	r3, [sp, #32]
 8014dd2:	781b      	ldrb	r3, [r3, #0]
 8014dd4:	2bff      	cmp	r3, #255	; 0xff
 8014dd6:	d108      	bne.n	8014dea <_vfprintf_r+0x99a>
 8014dd8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014ddc:	4413      	add	r3, r2
 8014dde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014de0:	fb02 7703 	mla	r7, r2, r3, r7
 8014de4:	e65c      	b.n	8014aa0 <_vfprintf_r+0x650>
 8014de6:	4647      	mov	r7, r8
 8014de8:	e7d5      	b.n	8014d96 <_vfprintf_r+0x946>
 8014dea:	4543      	cmp	r3, r8
 8014dec:	daf4      	bge.n	8014dd8 <_vfprintf_r+0x988>
 8014dee:	eba8 0803 	sub.w	r8, r8, r3
 8014df2:	9b08      	ldr	r3, [sp, #32]
 8014df4:	785b      	ldrb	r3, [r3, #1]
 8014df6:	b133      	cbz	r3, 8014e06 <_vfprintf_r+0x9b6>
 8014df8:	9b07      	ldr	r3, [sp, #28]
 8014dfa:	3301      	adds	r3, #1
 8014dfc:	9307      	str	r3, [sp, #28]
 8014dfe:	9b08      	ldr	r3, [sp, #32]
 8014e00:	3301      	adds	r3, #1
 8014e02:	9308      	str	r3, [sp, #32]
 8014e04:	e7e4      	b.n	8014dd0 <_vfprintf_r+0x980>
 8014e06:	9b06      	ldr	r3, [sp, #24]
 8014e08:	3301      	adds	r3, #1
 8014e0a:	9306      	str	r3, [sp, #24]
 8014e0c:	e7e0      	b.n	8014dd0 <_vfprintf_r+0x980>
 8014e0e:	9b07      	ldr	r3, [sp, #28]
 8014e10:	9306      	str	r3, [sp, #24]
 8014e12:	e645      	b.n	8014aa0 <_vfprintf_r+0x650>
 8014e14:	f108 0304 	add.w	r3, r8, #4
 8014e18:	f01b 0f20 	tst.w	fp, #32
 8014e1c:	9305      	str	r3, [sp, #20]
 8014e1e:	d00c      	beq.n	8014e3a <_vfprintf_r+0x9ea>
 8014e20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014e22:	f8d8 3000 	ldr.w	r3, [r8]
 8014e26:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014e28:	17d2      	asrs	r2, r2, #31
 8014e2a:	e9c3 1200 	strd	r1, r2, [r3]
 8014e2e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8014e32:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8014e36:	f7ff bb7e 	b.w	8014536 <_vfprintf_r+0xe6>
 8014e3a:	f01b 0f10 	tst.w	fp, #16
 8014e3e:	d004      	beq.n	8014e4a <_vfprintf_r+0x9fa>
 8014e40:	f8d8 3000 	ldr.w	r3, [r8]
 8014e44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014e46:	601a      	str	r2, [r3, #0]
 8014e48:	e7f1      	b.n	8014e2e <_vfprintf_r+0x9de>
 8014e4a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8014e4e:	d004      	beq.n	8014e5a <_vfprintf_r+0xa0a>
 8014e50:	f8d8 3000 	ldr.w	r3, [r8]
 8014e54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014e56:	801a      	strh	r2, [r3, #0]
 8014e58:	e7e9      	b.n	8014e2e <_vfprintf_r+0x9de>
 8014e5a:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8014e5e:	d0ef      	beq.n	8014e40 <_vfprintf_r+0x9f0>
 8014e60:	f8d8 3000 	ldr.w	r3, [r8]
 8014e64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014e66:	701a      	strb	r2, [r3, #0]
 8014e68:	e7e1      	b.n	8014e2e <_vfprintf_r+0x9de>
 8014e6a:	f04b 0b10 	orr.w	fp, fp, #16
 8014e6e:	f01b 0320 	ands.w	r3, fp, #32
 8014e72:	d020      	beq.n	8014eb6 <_vfprintf_r+0xa66>
 8014e74:	f108 0807 	add.w	r8, r8, #7
 8014e78:	f028 0307 	bic.w	r3, r8, #7
 8014e7c:	461a      	mov	r2, r3
 8014e7e:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8014e82:	f852 8b08 	ldr.w	r8, [r2], #8
 8014e86:	9205      	str	r2, [sp, #20]
 8014e88:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8014e8c:	2300      	movs	r3, #0
 8014e8e:	2200      	movs	r2, #0
 8014e90:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 8014e94:	1c7a      	adds	r2, r7, #1
 8014e96:	f000 84cd 	beq.w	8015834 <_vfprintf_r+0x13e4>
 8014e9a:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 8014e9e:	9202      	str	r2, [sp, #8]
 8014ea0:	ea58 0209 	orrs.w	r2, r8, r9
 8014ea4:	f040 84cc 	bne.w	8015840 <_vfprintf_r+0x13f0>
 8014ea8:	2f00      	cmp	r7, #0
 8014eaa:	f000 810f 	beq.w	80150cc <_vfprintf_r+0xc7c>
 8014eae:	2b01      	cmp	r3, #1
 8014eb0:	f040 84c9 	bne.w	8015846 <_vfprintf_r+0x13f6>
 8014eb4:	e0ae      	b.n	8015014 <_vfprintf_r+0xbc4>
 8014eb6:	4642      	mov	r2, r8
 8014eb8:	f01b 0910 	ands.w	r9, fp, #16
 8014ebc:	f852 8b04 	ldr.w	r8, [r2], #4
 8014ec0:	9205      	str	r2, [sp, #20]
 8014ec2:	d001      	beq.n	8014ec8 <_vfprintf_r+0xa78>
 8014ec4:	4699      	mov	r9, r3
 8014ec6:	e7df      	b.n	8014e88 <_vfprintf_r+0xa38>
 8014ec8:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8014ecc:	d002      	beq.n	8014ed4 <_vfprintf_r+0xa84>
 8014ece:	fa1f f888 	uxth.w	r8, r8
 8014ed2:	e7d9      	b.n	8014e88 <_vfprintf_r+0xa38>
 8014ed4:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
 8014ed8:	d0d6      	beq.n	8014e88 <_vfprintf_r+0xa38>
 8014eda:	fa5f f888 	uxtb.w	r8, r8
 8014ede:	e7f1      	b.n	8014ec4 <_vfprintf_r+0xa74>
 8014ee0:	4643      	mov	r3, r8
 8014ee2:	2278      	movs	r2, #120	; 0x78
 8014ee4:	f853 8b04 	ldr.w	r8, [r3], #4
 8014ee8:	9305      	str	r3, [sp, #20]
 8014eea:	2330      	movs	r3, #48	; 0x30
 8014eec:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8014ef0:	4bb0      	ldr	r3, [pc, #704]	; (80151b4 <_vfprintf_r+0xd64>)
 8014ef2:	9312      	str	r3, [sp, #72]	; 0x48
 8014ef4:	f04f 0900 	mov.w	r9, #0
 8014ef8:	f04b 0b02 	orr.w	fp, fp, #2
 8014efc:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
 8014f00:	2302      	movs	r3, #2
 8014f02:	9204      	str	r2, [sp, #16]
 8014f04:	e7c3      	b.n	8014e8e <_vfprintf_r+0xa3e>
 8014f06:	4643      	mov	r3, r8
 8014f08:	1c79      	adds	r1, r7, #1
 8014f0a:	f853 ab04 	ldr.w	sl, [r3], #4
 8014f0e:	9305      	str	r3, [sp, #20]
 8014f10:	f04f 0800 	mov.w	r8, #0
 8014f14:	f88d 805b 	strb.w	r8, [sp, #91]	; 0x5b
 8014f18:	d010      	beq.n	8014f3c <_vfprintf_r+0xaec>
 8014f1a:	463a      	mov	r2, r7
 8014f1c:	4641      	mov	r1, r8
 8014f1e:	4650      	mov	r0, sl
 8014f20:	f7eb f996 	bl	8000250 <memchr>
 8014f24:	9002      	str	r0, [sp, #8]
 8014f26:	2800      	cmp	r0, #0
 8014f28:	f000 80e8 	beq.w	80150fc <_vfprintf_r+0xcac>
 8014f2c:	e9cd 8806 	strd	r8, r8, [sp, #24]
 8014f30:	eba0 070a 	sub.w	r7, r0, sl
 8014f34:	f8cd 8008 	str.w	r8, [sp, #8]
 8014f38:	46c1      	mov	r9, r8
 8014f3a:	e5ba      	b.n	8014ab2 <_vfprintf_r+0x662>
 8014f3c:	4650      	mov	r0, sl
 8014f3e:	f7eb f97f 	bl	8000240 <strlen>
 8014f42:	46c1      	mov	r9, r8
 8014f44:	4607      	mov	r7, r0
 8014f46:	f8cd 8008 	str.w	r8, [sp, #8]
 8014f4a:	464b      	mov	r3, r9
 8014f4c:	e47c      	b.n	8014848 <_vfprintf_r+0x3f8>
 8014f4e:	f04b 0b10 	orr.w	fp, fp, #16
 8014f52:	f01b 0320 	ands.w	r3, fp, #32
 8014f56:	d00b      	beq.n	8014f70 <_vfprintf_r+0xb20>
 8014f58:	f108 0807 	add.w	r8, r8, #7
 8014f5c:	f028 0307 	bic.w	r3, r8, #7
 8014f60:	461a      	mov	r2, r3
 8014f62:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8014f66:	f852 8b08 	ldr.w	r8, [r2], #8
 8014f6a:	9205      	str	r2, [sp, #20]
 8014f6c:	2301      	movs	r3, #1
 8014f6e:	e78e      	b.n	8014e8e <_vfprintf_r+0xa3e>
 8014f70:	4642      	mov	r2, r8
 8014f72:	f01b 0910 	ands.w	r9, fp, #16
 8014f76:	f852 8b04 	ldr.w	r8, [r2], #4
 8014f7a:	9205      	str	r2, [sp, #20]
 8014f7c:	d001      	beq.n	8014f82 <_vfprintf_r+0xb32>
 8014f7e:	4699      	mov	r9, r3
 8014f80:	e7f4      	b.n	8014f6c <_vfprintf_r+0xb1c>
 8014f82:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8014f86:	d002      	beq.n	8014f8e <_vfprintf_r+0xb3e>
 8014f88:	fa1f f888 	uxth.w	r8, r8
 8014f8c:	e7ee      	b.n	8014f6c <_vfprintf_r+0xb1c>
 8014f8e:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
 8014f92:	d0eb      	beq.n	8014f6c <_vfprintf_r+0xb1c>
 8014f94:	fa5f f888 	uxtb.w	r8, r8
 8014f98:	e7f1      	b.n	8014f7e <_vfprintf_r+0xb2e>
 8014f9a:	4b87      	ldr	r3, [pc, #540]	; (80151b8 <_vfprintf_r+0xd68>)
 8014f9c:	9312      	str	r3, [sp, #72]	; 0x48
 8014f9e:	f01b 0320 	ands.w	r3, fp, #32
 8014fa2:	d01d      	beq.n	8014fe0 <_vfprintf_r+0xb90>
 8014fa4:	f108 0807 	add.w	r8, r8, #7
 8014fa8:	f028 0307 	bic.w	r3, r8, #7
 8014fac:	461a      	mov	r2, r3
 8014fae:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8014fb2:	f852 8b08 	ldr.w	r8, [r2], #8
 8014fb6:	9205      	str	r2, [sp, #20]
 8014fb8:	f01b 0f01 	tst.w	fp, #1
 8014fbc:	d00a      	beq.n	8014fd4 <_vfprintf_r+0xb84>
 8014fbe:	ea58 0309 	orrs.w	r3, r8, r9
 8014fc2:	d007      	beq.n	8014fd4 <_vfprintf_r+0xb84>
 8014fc4:	2330      	movs	r3, #48	; 0x30
 8014fc6:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8014fca:	9b04      	ldr	r3, [sp, #16]
 8014fcc:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 8014fd0:	f04b 0b02 	orr.w	fp, fp, #2
 8014fd4:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8014fd8:	2302      	movs	r3, #2
 8014fda:	e758      	b.n	8014e8e <_vfprintf_r+0xa3e>
 8014fdc:	4b75      	ldr	r3, [pc, #468]	; (80151b4 <_vfprintf_r+0xd64>)
 8014fde:	e7dd      	b.n	8014f9c <_vfprintf_r+0xb4c>
 8014fe0:	4642      	mov	r2, r8
 8014fe2:	f01b 0910 	ands.w	r9, fp, #16
 8014fe6:	f852 8b04 	ldr.w	r8, [r2], #4
 8014fea:	9205      	str	r2, [sp, #20]
 8014fec:	d001      	beq.n	8014ff2 <_vfprintf_r+0xba2>
 8014fee:	4699      	mov	r9, r3
 8014ff0:	e7e2      	b.n	8014fb8 <_vfprintf_r+0xb68>
 8014ff2:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8014ff6:	d002      	beq.n	8014ffe <_vfprintf_r+0xbae>
 8014ff8:	fa1f f888 	uxth.w	r8, r8
 8014ffc:	e7dc      	b.n	8014fb8 <_vfprintf_r+0xb68>
 8014ffe:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
 8015002:	d0d9      	beq.n	8014fb8 <_vfprintf_r+0xb68>
 8015004:	fa5f f888 	uxtb.w	r8, r8
 8015008:	e7f1      	b.n	8014fee <_vfprintf_r+0xb9e>
 801500a:	f1b8 0f0a 	cmp.w	r8, #10
 801500e:	f179 0300 	sbcs.w	r3, r9, #0
 8015012:	d207      	bcs.n	8015024 <_vfprintf_r+0xbd4>
 8015014:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8015018:	f88d 8127 	strb.w	r8, [sp, #295]	; 0x127
 801501c:	f20d 1a27 	addw	sl, sp, #295	; 0x127
 8015020:	f000 bc2f 	b.w	8015882 <_vfprintf_r+0x1432>
 8015024:	2300      	movs	r3, #0
 8015026:	9303      	str	r3, [sp, #12]
 8015028:	9b02      	ldr	r3, [sp, #8]
 801502a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801502e:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 8015032:	9306      	str	r3, [sp, #24]
 8015034:	220a      	movs	r2, #10
 8015036:	2300      	movs	r3, #0
 8015038:	4640      	mov	r0, r8
 801503a:	4649      	mov	r1, r9
 801503c:	f7eb f958 	bl	80002f0 <__aeabi_uldivmod>
 8015040:	9b03      	ldr	r3, [sp, #12]
 8015042:	3301      	adds	r3, #1
 8015044:	9303      	str	r3, [sp, #12]
 8015046:	9b06      	ldr	r3, [sp, #24]
 8015048:	3230      	adds	r2, #48	; 0x30
 801504a:	f10b 3aff 	add.w	sl, fp, #4294967295
 801504e:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8015052:	b1db      	cbz	r3, 801508c <_vfprintf_r+0xc3c>
 8015054:	9b08      	ldr	r3, [sp, #32]
 8015056:	9a03      	ldr	r2, [sp, #12]
 8015058:	781b      	ldrb	r3, [r3, #0]
 801505a:	429a      	cmp	r2, r3
 801505c:	d116      	bne.n	801508c <_vfprintf_r+0xc3c>
 801505e:	2aff      	cmp	r2, #255	; 0xff
 8015060:	d014      	beq.n	801508c <_vfprintf_r+0xc3c>
 8015062:	f1b8 0f0a 	cmp.w	r8, #10
 8015066:	f179 0300 	sbcs.w	r3, r9, #0
 801506a:	d30f      	bcc.n	801508c <_vfprintf_r+0xc3c>
 801506c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801506e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015070:	ebaa 0a03 	sub.w	sl, sl, r3
 8015074:	461a      	mov	r2, r3
 8015076:	4650      	mov	r0, sl
 8015078:	f002 fc79 	bl	801796e <strncpy>
 801507c:	9b08      	ldr	r3, [sp, #32]
 801507e:	785b      	ldrb	r3, [r3, #1]
 8015080:	b11b      	cbz	r3, 801508a <_vfprintf_r+0xc3a>
 8015082:	9b08      	ldr	r3, [sp, #32]
 8015084:	3301      	adds	r3, #1
 8015086:	9308      	str	r3, [sp, #32]
 8015088:	2300      	movs	r3, #0
 801508a:	9303      	str	r3, [sp, #12]
 801508c:	2300      	movs	r3, #0
 801508e:	220a      	movs	r2, #10
 8015090:	4640      	mov	r0, r8
 8015092:	4649      	mov	r1, r9
 8015094:	f7eb f92c 	bl	80002f0 <__aeabi_uldivmod>
 8015098:	f1b8 0f0a 	cmp.w	r8, #10
 801509c:	f179 0300 	sbcs.w	r3, r9, #0
 80150a0:	f0c0 83ef 	bcc.w	8015882 <_vfprintf_r+0x1432>
 80150a4:	4680      	mov	r8, r0
 80150a6:	4689      	mov	r9, r1
 80150a8:	46d3      	mov	fp, sl
 80150aa:	e7c3      	b.n	8015034 <_vfprintf_r+0xbe4>
 80150ac:	f008 030f 	and.w	r3, r8, #15
 80150b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80150b2:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80150b6:	5cd3      	ldrb	r3, [r2, r3]
 80150b8:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 80150bc:	ea48 7809 	orr.w	r8, r8, r9, lsl #28
 80150c0:	ea4f 1919 	mov.w	r9, r9, lsr #4
 80150c4:	ea58 0309 	orrs.w	r3, r8, r9
 80150c8:	d1f0      	bne.n	80150ac <_vfprintf_r+0xc5c>
 80150ca:	e3da      	b.n	8015882 <_vfprintf_r+0x1432>
 80150cc:	b933      	cbnz	r3, 80150dc <_vfprintf_r+0xc8c>
 80150ce:	f01b 0f01 	tst.w	fp, #1
 80150d2:	d003      	beq.n	80150dc <_vfprintf_r+0xc8c>
 80150d4:	2330      	movs	r3, #48	; 0x30
 80150d6:	f88d 3127 	strb.w	r3, [sp, #295]	; 0x127
 80150da:	e79f      	b.n	801501c <_vfprintf_r+0xbcc>
 80150dc:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 80150e0:	e3cf      	b.n	8015882 <_vfprintf_r+0x1432>
 80150e2:	9b04      	ldr	r3, [sp, #16]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	f000 8392 	beq.w	801580e <_vfprintf_r+0x13be>
 80150ea:	2000      	movs	r0, #0
 80150ec:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 80150f0:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
 80150f4:	f8cd 8014 	str.w	r8, [sp, #20]
 80150f8:	f7ff bb36 	b.w	8014768 <_vfprintf_r+0x318>
 80150fc:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8015100:	e723      	b.n	8014f4a <_vfprintf_r+0xafa>
 8015102:	2110      	movs	r1, #16
 8015104:	6061      	str	r1, [r4, #4]
 8015106:	2a07      	cmp	r2, #7
 8015108:	4461      	add	r1, ip
 801510a:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 801510e:	dd0a      	ble.n	8015126 <_vfprintf_r+0xcd6>
 8015110:	aa1e      	add	r2, sp, #120	; 0x78
 8015112:	4629      	mov	r1, r5
 8015114:	4630      	mov	r0, r6
 8015116:	9315      	str	r3, [sp, #84]	; 0x54
 8015118:	f002 fcb7 	bl	8017a8a <__sprint_r>
 801511c:	2800      	cmp	r0, #0
 801511e:	f040 8353 	bne.w	80157c8 <_vfprintf_r+0x1378>
 8015122:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015124:	a821      	add	r0, sp, #132	; 0x84
 8015126:	3b10      	subs	r3, #16
 8015128:	4604      	mov	r4, r0
 801512a:	e4dd      	b.n	8014ae8 <_vfprintf_r+0x698>
 801512c:	4604      	mov	r4, r0
 801512e:	e4f7      	b.n	8014b20 <_vfprintf_r+0x6d0>
 8015130:	aa1e      	add	r2, sp, #120	; 0x78
 8015132:	4629      	mov	r1, r5
 8015134:	4630      	mov	r0, r6
 8015136:	f002 fca8 	bl	8017a8a <__sprint_r>
 801513a:	2800      	cmp	r0, #0
 801513c:	f040 8344 	bne.w	80157c8 <_vfprintf_r+0x1378>
 8015140:	ac21      	add	r4, sp, #132	; 0x84
 8015142:	e4ff      	b.n	8014b44 <_vfprintf_r+0x6f4>
 8015144:	aa1e      	add	r2, sp, #120	; 0x78
 8015146:	4629      	mov	r1, r5
 8015148:	4630      	mov	r0, r6
 801514a:	f002 fc9e 	bl	8017a8a <__sprint_r>
 801514e:	2800      	cmp	r0, #0
 8015150:	f040 833a 	bne.w	80157c8 <_vfprintf_r+0x1378>
 8015154:	ac21      	add	r4, sp, #132	; 0x84
 8015156:	e505      	b.n	8014b64 <_vfprintf_r+0x714>
 8015158:	2110      	movs	r1, #16
 801515a:	6061      	str	r1, [r4, #4]
 801515c:	2a07      	cmp	r2, #7
 801515e:	4461      	add	r1, ip
 8015160:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8015164:	dd0a      	ble.n	801517c <_vfprintf_r+0xd2c>
 8015166:	aa1e      	add	r2, sp, #120	; 0x78
 8015168:	4629      	mov	r1, r5
 801516a:	4630      	mov	r0, r6
 801516c:	9313      	str	r3, [sp, #76]	; 0x4c
 801516e:	f002 fc8c 	bl	8017a8a <__sprint_r>
 8015172:	2800      	cmp	r0, #0
 8015174:	f040 8328 	bne.w	80157c8 <_vfprintf_r+0x1378>
 8015178:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801517a:	a821      	add	r0, sp, #132	; 0x84
 801517c:	3b10      	subs	r3, #16
 801517e:	4604      	mov	r4, r0
 8015180:	e4f8      	b.n	8014b74 <_vfprintf_r+0x724>
 8015182:	4604      	mov	r4, r0
 8015184:	e512      	b.n	8014bac <_vfprintf_r+0x75c>
 8015186:	2010      	movs	r0, #16
 8015188:	4403      	add	r3, r0
 801518a:	2a07      	cmp	r2, #7
 801518c:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 8015190:	6060      	str	r0, [r4, #4]
 8015192:	dd08      	ble.n	80151a6 <_vfprintf_r+0xd56>
 8015194:	aa1e      	add	r2, sp, #120	; 0x78
 8015196:	4629      	mov	r1, r5
 8015198:	4630      	mov	r0, r6
 801519a:	f002 fc76 	bl	8017a8a <__sprint_r>
 801519e:	2800      	cmp	r0, #0
 80151a0:	f040 8312 	bne.w	80157c8 <_vfprintf_r+0x1378>
 80151a4:	a921      	add	r1, sp, #132	; 0x84
 80151a6:	f1a9 0910 	sub.w	r9, r9, #16
 80151aa:	460c      	mov	r4, r1
 80151ac:	e503      	b.n	8014bb6 <_vfprintf_r+0x766>
 80151ae:	460c      	mov	r4, r1
 80151b0:	e51e      	b.n	8014bf0 <_vfprintf_r+0x7a0>
 80151b2:	bf00      	nop
 80151b4:	08019518 	.word	0x08019518
 80151b8:	08019529 	.word	0x08019529
 80151bc:	9b04      	ldr	r3, [sp, #16]
 80151be:	2b65      	cmp	r3, #101	; 0x65
 80151c0:	f340 8252 	ble.w	8015668 <_vfprintf_r+0x1218>
 80151c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80151c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151cc:	d16c      	bne.n	80152a8 <_vfprintf_r+0xe58>
 80151ce:	4b75      	ldr	r3, [pc, #468]	; (80153a4 <_vfprintf_r+0xf54>)
 80151d0:	6023      	str	r3, [r4, #0]
 80151d2:	2301      	movs	r3, #1
 80151d4:	4418      	add	r0, r3
 80151d6:	6063      	str	r3, [r4, #4]
 80151d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80151da:	9020      	str	r0, [sp, #128]	; 0x80
 80151dc:	3301      	adds	r3, #1
 80151de:	2b07      	cmp	r3, #7
 80151e0:	931f      	str	r3, [sp, #124]	; 0x7c
 80151e2:	dc3a      	bgt.n	801525a <_vfprintf_r+0xe0a>
 80151e4:	3408      	adds	r4, #8
 80151e6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80151e8:	9a03      	ldr	r2, [sp, #12]
 80151ea:	4293      	cmp	r3, r2
 80151ec:	db03      	blt.n	80151f6 <_vfprintf_r+0xda6>
 80151ee:	f01b 0f01 	tst.w	fp, #1
 80151f2:	f43f ad0d 	beq.w	8014c10 <_vfprintf_r+0x7c0>
 80151f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80151f8:	6023      	str	r3, [r4, #0]
 80151fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80151fe:	6063      	str	r3, [r4, #4]
 8015200:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015202:	4413      	add	r3, r2
 8015204:	9320      	str	r3, [sp, #128]	; 0x80
 8015206:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015208:	3301      	adds	r3, #1
 801520a:	2b07      	cmp	r3, #7
 801520c:	931f      	str	r3, [sp, #124]	; 0x7c
 801520e:	dc2e      	bgt.n	801526e <_vfprintf_r+0xe1e>
 8015210:	3408      	adds	r4, #8
 8015212:	9b03      	ldr	r3, [sp, #12]
 8015214:	1e5f      	subs	r7, r3, #1
 8015216:	2f00      	cmp	r7, #0
 8015218:	f77f acfa 	ble.w	8014c10 <_vfprintf_r+0x7c0>
 801521c:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80153a8 <_vfprintf_r+0xf58>
 8015220:	f04f 0910 	mov.w	r9, #16
 8015224:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8015228:	2f10      	cmp	r7, #16
 801522a:	f103 0301 	add.w	r3, r3, #1
 801522e:	f104 0108 	add.w	r1, r4, #8
 8015232:	f8c4 8000 	str.w	r8, [r4]
 8015236:	dc24      	bgt.n	8015282 <_vfprintf_r+0xe32>
 8015238:	443a      	add	r2, r7
 801523a:	6067      	str	r7, [r4, #4]
 801523c:	9220      	str	r2, [sp, #128]	; 0x80
 801523e:	2b07      	cmp	r3, #7
 8015240:	931f      	str	r3, [sp, #124]	; 0x7c
 8015242:	f340 829d 	ble.w	8015780 <_vfprintf_r+0x1330>
 8015246:	aa1e      	add	r2, sp, #120	; 0x78
 8015248:	4629      	mov	r1, r5
 801524a:	4630      	mov	r0, r6
 801524c:	f002 fc1d 	bl	8017a8a <__sprint_r>
 8015250:	2800      	cmp	r0, #0
 8015252:	f040 82b9 	bne.w	80157c8 <_vfprintf_r+0x1378>
 8015256:	ac21      	add	r4, sp, #132	; 0x84
 8015258:	e4da      	b.n	8014c10 <_vfprintf_r+0x7c0>
 801525a:	aa1e      	add	r2, sp, #120	; 0x78
 801525c:	4629      	mov	r1, r5
 801525e:	4630      	mov	r0, r6
 8015260:	f002 fc13 	bl	8017a8a <__sprint_r>
 8015264:	2800      	cmp	r0, #0
 8015266:	f040 82af 	bne.w	80157c8 <_vfprintf_r+0x1378>
 801526a:	ac21      	add	r4, sp, #132	; 0x84
 801526c:	e7bb      	b.n	80151e6 <_vfprintf_r+0xd96>
 801526e:	aa1e      	add	r2, sp, #120	; 0x78
 8015270:	4629      	mov	r1, r5
 8015272:	4630      	mov	r0, r6
 8015274:	f002 fc09 	bl	8017a8a <__sprint_r>
 8015278:	2800      	cmp	r0, #0
 801527a:	f040 82a5 	bne.w	80157c8 <_vfprintf_r+0x1378>
 801527e:	ac21      	add	r4, sp, #132	; 0x84
 8015280:	e7c7      	b.n	8015212 <_vfprintf_r+0xdc2>
 8015282:	3210      	adds	r2, #16
 8015284:	2b07      	cmp	r3, #7
 8015286:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 801528a:	f8c4 9004 	str.w	r9, [r4, #4]
 801528e:	dd08      	ble.n	80152a2 <_vfprintf_r+0xe52>
 8015290:	aa1e      	add	r2, sp, #120	; 0x78
 8015292:	4629      	mov	r1, r5
 8015294:	4630      	mov	r0, r6
 8015296:	f002 fbf8 	bl	8017a8a <__sprint_r>
 801529a:	2800      	cmp	r0, #0
 801529c:	f040 8294 	bne.w	80157c8 <_vfprintf_r+0x1378>
 80152a0:	a921      	add	r1, sp, #132	; 0x84
 80152a2:	3f10      	subs	r7, #16
 80152a4:	460c      	mov	r4, r1
 80152a6:	e7bd      	b.n	8015224 <_vfprintf_r+0xdd4>
 80152a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	dc7e      	bgt.n	80153ac <_vfprintf_r+0xf5c>
 80152ae:	4b3d      	ldr	r3, [pc, #244]	; (80153a4 <_vfprintf_r+0xf54>)
 80152b0:	6023      	str	r3, [r4, #0]
 80152b2:	2301      	movs	r3, #1
 80152b4:	4418      	add	r0, r3
 80152b6:	6063      	str	r3, [r4, #4]
 80152b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80152ba:	9020      	str	r0, [sp, #128]	; 0x80
 80152bc:	3301      	adds	r3, #1
 80152be:	2b07      	cmp	r3, #7
 80152c0:	931f      	str	r3, [sp, #124]	; 0x7c
 80152c2:	dc47      	bgt.n	8015354 <_vfprintf_r+0xf04>
 80152c4:	3408      	adds	r4, #8
 80152c6:	9903      	ldr	r1, [sp, #12]
 80152c8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80152ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80152cc:	430a      	orrs	r2, r1
 80152ce:	f00b 0101 	and.w	r1, fp, #1
 80152d2:	430a      	orrs	r2, r1
 80152d4:	f43f ac9c 	beq.w	8014c10 <_vfprintf_r+0x7c0>
 80152d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80152da:	6022      	str	r2, [r4, #0]
 80152dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80152de:	6062      	str	r2, [r4, #4]
 80152e0:	4413      	add	r3, r2
 80152e2:	9320      	str	r3, [sp, #128]	; 0x80
 80152e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80152e6:	3301      	adds	r3, #1
 80152e8:	2b07      	cmp	r3, #7
 80152ea:	931f      	str	r3, [sp, #124]	; 0x7c
 80152ec:	dc3c      	bgt.n	8015368 <_vfprintf_r+0xf18>
 80152ee:	f104 0308 	add.w	r3, r4, #8
 80152f2:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80152f4:	2f00      	cmp	r7, #0
 80152f6:	da1c      	bge.n	8015332 <_vfprintf_r+0xee2>
 80152f8:	4c2b      	ldr	r4, [pc, #172]	; (80153a8 <_vfprintf_r+0xf58>)
 80152fa:	427f      	negs	r7, r7
 80152fc:	461a      	mov	r2, r3
 80152fe:	f04f 0810 	mov.w	r8, #16
 8015302:	e9dd 101f 	ldrd	r1, r0, [sp, #124]	; 0x7c
 8015306:	2f10      	cmp	r7, #16
 8015308:	f101 0101 	add.w	r1, r1, #1
 801530c:	f103 0308 	add.w	r3, r3, #8
 8015310:	6014      	str	r4, [r2, #0]
 8015312:	dc33      	bgt.n	801537c <_vfprintf_r+0xf2c>
 8015314:	6057      	str	r7, [r2, #4]
 8015316:	2907      	cmp	r1, #7
 8015318:	4407      	add	r7, r0
 801531a:	e9cd 171f 	strd	r1, r7, [sp, #124]	; 0x7c
 801531e:	dd08      	ble.n	8015332 <_vfprintf_r+0xee2>
 8015320:	aa1e      	add	r2, sp, #120	; 0x78
 8015322:	4629      	mov	r1, r5
 8015324:	4630      	mov	r0, r6
 8015326:	f002 fbb0 	bl	8017a8a <__sprint_r>
 801532a:	2800      	cmp	r0, #0
 801532c:	f040 824c 	bne.w	80157c8 <_vfprintf_r+0x1378>
 8015330:	ab21      	add	r3, sp, #132	; 0x84
 8015332:	9a03      	ldr	r2, [sp, #12]
 8015334:	605a      	str	r2, [r3, #4]
 8015336:	9903      	ldr	r1, [sp, #12]
 8015338:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801533a:	f8c3 a000 	str.w	sl, [r3]
 801533e:	440a      	add	r2, r1
 8015340:	9220      	str	r2, [sp, #128]	; 0x80
 8015342:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8015344:	3201      	adds	r2, #1
 8015346:	2a07      	cmp	r2, #7
 8015348:	921f      	str	r2, [sp, #124]	; 0x7c
 801534a:	f73f af7c 	bgt.w	8015246 <_vfprintf_r+0xdf6>
 801534e:	f103 0408 	add.w	r4, r3, #8
 8015352:	e45d      	b.n	8014c10 <_vfprintf_r+0x7c0>
 8015354:	aa1e      	add	r2, sp, #120	; 0x78
 8015356:	4629      	mov	r1, r5
 8015358:	4630      	mov	r0, r6
 801535a:	f002 fb96 	bl	8017a8a <__sprint_r>
 801535e:	2800      	cmp	r0, #0
 8015360:	f040 8232 	bne.w	80157c8 <_vfprintf_r+0x1378>
 8015364:	ac21      	add	r4, sp, #132	; 0x84
 8015366:	e7ae      	b.n	80152c6 <_vfprintf_r+0xe76>
 8015368:	aa1e      	add	r2, sp, #120	; 0x78
 801536a:	4629      	mov	r1, r5
 801536c:	4630      	mov	r0, r6
 801536e:	f002 fb8c 	bl	8017a8a <__sprint_r>
 8015372:	2800      	cmp	r0, #0
 8015374:	f040 8228 	bne.w	80157c8 <_vfprintf_r+0x1378>
 8015378:	ab21      	add	r3, sp, #132	; 0x84
 801537a:	e7ba      	b.n	80152f2 <_vfprintf_r+0xea2>
 801537c:	3010      	adds	r0, #16
 801537e:	2907      	cmp	r1, #7
 8015380:	e9cd 101f 	strd	r1, r0, [sp, #124]	; 0x7c
 8015384:	f8c2 8004 	str.w	r8, [r2, #4]
 8015388:	dd08      	ble.n	801539c <_vfprintf_r+0xf4c>
 801538a:	aa1e      	add	r2, sp, #120	; 0x78
 801538c:	4629      	mov	r1, r5
 801538e:	4630      	mov	r0, r6
 8015390:	f002 fb7b 	bl	8017a8a <__sprint_r>
 8015394:	2800      	cmp	r0, #0
 8015396:	f040 8217 	bne.w	80157c8 <_vfprintf_r+0x1378>
 801539a:	ab21      	add	r3, sp, #132	; 0x84
 801539c:	3f10      	subs	r7, #16
 801539e:	461a      	mov	r2, r3
 80153a0:	e7af      	b.n	8015302 <_vfprintf_r+0xeb2>
 80153a2:	bf00      	nop
 80153a4:	0801953a 	.word	0x0801953a
 80153a8:	0801956c 	.word	0x0801956c
 80153ac:	9b03      	ldr	r3, [sp, #12]
 80153ae:	4543      	cmp	r3, r8
 80153b0:	bfa8      	it	ge
 80153b2:	4643      	movge	r3, r8
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	4699      	mov	r9, r3
 80153b8:	dd0a      	ble.n	80153d0 <_vfprintf_r+0xf80>
 80153ba:	4418      	add	r0, r3
 80153bc:	e9c4 a300 	strd	sl, r3, [r4]
 80153c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80153c2:	9020      	str	r0, [sp, #128]	; 0x80
 80153c4:	3301      	adds	r3, #1
 80153c6:	2b07      	cmp	r3, #7
 80153c8:	931f      	str	r3, [sp, #124]	; 0x7c
 80153ca:	f300 8084 	bgt.w	80154d6 <_vfprintf_r+0x1086>
 80153ce:	3408      	adds	r4, #8
 80153d0:	f1b9 0f00 	cmp.w	r9, #0
 80153d4:	bfac      	ite	ge
 80153d6:	eba8 0709 	subge.w	r7, r8, r9
 80153da:	4647      	movlt	r7, r8
 80153dc:	2f00      	cmp	r7, #0
 80153de:	dd1b      	ble.n	8015418 <_vfprintf_r+0xfc8>
 80153e0:	f8df 9448 	ldr.w	r9, [pc, #1096]	; 801582c <_vfprintf_r+0x13dc>
 80153e4:	f8c4 9000 	str.w	r9, [r4]
 80153e8:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 80153ec:	2f10      	cmp	r7, #16
 80153ee:	f103 0301 	add.w	r3, r3, #1
 80153f2:	f104 0108 	add.w	r1, r4, #8
 80153f6:	dc78      	bgt.n	80154ea <_vfprintf_r+0x109a>
 80153f8:	6067      	str	r7, [r4, #4]
 80153fa:	2b07      	cmp	r3, #7
 80153fc:	4417      	add	r7, r2
 80153fe:	e9cd 371f 	strd	r3, r7, [sp, #124]	; 0x7c
 8015402:	f340 8085 	ble.w	8015510 <_vfprintf_r+0x10c0>
 8015406:	aa1e      	add	r2, sp, #120	; 0x78
 8015408:	4629      	mov	r1, r5
 801540a:	4630      	mov	r0, r6
 801540c:	f002 fb3d 	bl	8017a8a <__sprint_r>
 8015410:	2800      	cmp	r0, #0
 8015412:	f040 81d9 	bne.w	80157c8 <_vfprintf_r+0x1378>
 8015416:	ac21      	add	r4, sp, #132	; 0x84
 8015418:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 801541c:	44d0      	add	r8, sl
 801541e:	d00a      	beq.n	8015436 <_vfprintf_r+0xfe6>
 8015420:	9b07      	ldr	r3, [sp, #28]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d176      	bne.n	8015514 <_vfprintf_r+0x10c4>
 8015426:	9b06      	ldr	r3, [sp, #24]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d176      	bne.n	801551a <_vfprintf_r+0x10ca>
 801542c:	9b03      	ldr	r3, [sp, #12]
 801542e:	4453      	add	r3, sl
 8015430:	4598      	cmp	r8, r3
 8015432:	bf28      	it	cs
 8015434:	4698      	movcs	r8, r3
 8015436:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015438:	9a03      	ldr	r2, [sp, #12]
 801543a:	4293      	cmp	r3, r2
 801543c:	db02      	blt.n	8015444 <_vfprintf_r+0xff4>
 801543e:	f01b 0f01 	tst.w	fp, #1
 8015442:	d00e      	beq.n	8015462 <_vfprintf_r+0x1012>
 8015444:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015446:	6023      	str	r3, [r4, #0]
 8015448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801544a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801544c:	6063      	str	r3, [r4, #4]
 801544e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015450:	4413      	add	r3, r2
 8015452:	9320      	str	r3, [sp, #128]	; 0x80
 8015454:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015456:	3301      	adds	r3, #1
 8015458:	2b07      	cmp	r3, #7
 801545a:	931f      	str	r3, [sp, #124]	; 0x7c
 801545c:	f300 80dd 	bgt.w	801561a <_vfprintf_r+0x11ca>
 8015460:	3408      	adds	r4, #8
 8015462:	9b03      	ldr	r3, [sp, #12]
 8015464:	9903      	ldr	r1, [sp, #12]
 8015466:	eb0a 0203 	add.w	r2, sl, r3
 801546a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801546c:	eba2 0208 	sub.w	r2, r2, r8
 8015470:	eba1 0903 	sub.w	r9, r1, r3
 8015474:	4591      	cmp	r9, r2
 8015476:	bfa8      	it	ge
 8015478:	4691      	movge	r9, r2
 801547a:	f1b9 0f00 	cmp.w	r9, #0
 801547e:	dd0b      	ble.n	8015498 <_vfprintf_r+0x1048>
 8015480:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015482:	444b      	add	r3, r9
 8015484:	9320      	str	r3, [sp, #128]	; 0x80
 8015486:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015488:	3301      	adds	r3, #1
 801548a:	2b07      	cmp	r3, #7
 801548c:	e9c4 8900 	strd	r8, r9, [r4]
 8015490:	931f      	str	r3, [sp, #124]	; 0x7c
 8015492:	f300 80cc 	bgt.w	801562e <_vfprintf_r+0x11de>
 8015496:	3408      	adds	r4, #8
 8015498:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801549a:	9b03      	ldr	r3, [sp, #12]
 801549c:	f1b9 0f00 	cmp.w	r9, #0
 80154a0:	eba3 0707 	sub.w	r7, r3, r7
 80154a4:	bfa8      	it	ge
 80154a6:	eba7 0709 	subge.w	r7, r7, r9
 80154aa:	2f00      	cmp	r7, #0
 80154ac:	f77f abb0 	ble.w	8014c10 <_vfprintf_r+0x7c0>
 80154b0:	f8df 8378 	ldr.w	r8, [pc, #888]	; 801582c <_vfprintf_r+0x13dc>
 80154b4:	f04f 0910 	mov.w	r9, #16
 80154b8:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 80154bc:	2f10      	cmp	r7, #16
 80154be:	f103 0301 	add.w	r3, r3, #1
 80154c2:	f104 0108 	add.w	r1, r4, #8
 80154c6:	f8c4 8000 	str.w	r8, [r4]
 80154ca:	f300 80ba 	bgt.w	8015642 <_vfprintf_r+0x11f2>
 80154ce:	6067      	str	r7, [r4, #4]
 80154d0:	4417      	add	r7, r2
 80154d2:	9720      	str	r7, [sp, #128]	; 0x80
 80154d4:	e6b3      	b.n	801523e <_vfprintf_r+0xdee>
 80154d6:	aa1e      	add	r2, sp, #120	; 0x78
 80154d8:	4629      	mov	r1, r5
 80154da:	4630      	mov	r0, r6
 80154dc:	f002 fad5 	bl	8017a8a <__sprint_r>
 80154e0:	2800      	cmp	r0, #0
 80154e2:	f040 8171 	bne.w	80157c8 <_vfprintf_r+0x1378>
 80154e6:	ac21      	add	r4, sp, #132	; 0x84
 80154e8:	e772      	b.n	80153d0 <_vfprintf_r+0xf80>
 80154ea:	2010      	movs	r0, #16
 80154ec:	4402      	add	r2, r0
 80154ee:	2b07      	cmp	r3, #7
 80154f0:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 80154f4:	6060      	str	r0, [r4, #4]
 80154f6:	dd08      	ble.n	801550a <_vfprintf_r+0x10ba>
 80154f8:	aa1e      	add	r2, sp, #120	; 0x78
 80154fa:	4629      	mov	r1, r5
 80154fc:	4630      	mov	r0, r6
 80154fe:	f002 fac4 	bl	8017a8a <__sprint_r>
 8015502:	2800      	cmp	r0, #0
 8015504:	f040 8160 	bne.w	80157c8 <_vfprintf_r+0x1378>
 8015508:	a921      	add	r1, sp, #132	; 0x84
 801550a:	3f10      	subs	r7, #16
 801550c:	460c      	mov	r4, r1
 801550e:	e769      	b.n	80153e4 <_vfprintf_r+0xf94>
 8015510:	460c      	mov	r4, r1
 8015512:	e781      	b.n	8015418 <_vfprintf_r+0xfc8>
 8015514:	9b06      	ldr	r3, [sp, #24]
 8015516:	2b00      	cmp	r3, #0
 8015518:	d04f      	beq.n	80155ba <_vfprintf_r+0x116a>
 801551a:	9b06      	ldr	r3, [sp, #24]
 801551c:	3b01      	subs	r3, #1
 801551e:	9306      	str	r3, [sp, #24]
 8015520:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015522:	6023      	str	r3, [r4, #0]
 8015524:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015526:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015528:	6063      	str	r3, [r4, #4]
 801552a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801552c:	4413      	add	r3, r2
 801552e:	9320      	str	r3, [sp, #128]	; 0x80
 8015530:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015532:	3301      	adds	r3, #1
 8015534:	2b07      	cmp	r3, #7
 8015536:	931f      	str	r3, [sp, #124]	; 0x7c
 8015538:	dc46      	bgt.n	80155c8 <_vfprintf_r+0x1178>
 801553a:	3408      	adds	r4, #8
 801553c:	9b03      	ldr	r3, [sp, #12]
 801553e:	9a08      	ldr	r2, [sp, #32]
 8015540:	eb0a 0903 	add.w	r9, sl, r3
 8015544:	eba9 0308 	sub.w	r3, r9, r8
 8015548:	f892 9000 	ldrb.w	r9, [r2]
 801554c:	4599      	cmp	r9, r3
 801554e:	bfa8      	it	ge
 8015550:	4699      	movge	r9, r3
 8015552:	f1b9 0f00 	cmp.w	r9, #0
 8015556:	dd0a      	ble.n	801556e <_vfprintf_r+0x111e>
 8015558:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801555a:	444b      	add	r3, r9
 801555c:	9320      	str	r3, [sp, #128]	; 0x80
 801555e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015560:	3301      	adds	r3, #1
 8015562:	2b07      	cmp	r3, #7
 8015564:	e9c4 8900 	strd	r8, r9, [r4]
 8015568:	931f      	str	r3, [sp, #124]	; 0x7c
 801556a:	dc37      	bgt.n	80155dc <_vfprintf_r+0x118c>
 801556c:	3408      	adds	r4, #8
 801556e:	9b08      	ldr	r3, [sp, #32]
 8015570:	781f      	ldrb	r7, [r3, #0]
 8015572:	f1b9 0f00 	cmp.w	r9, #0
 8015576:	bfa8      	it	ge
 8015578:	eba7 0709 	subge.w	r7, r7, r9
 801557c:	2f00      	cmp	r7, #0
 801557e:	dd18      	ble.n	80155b2 <_vfprintf_r+0x1162>
 8015580:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8015584:	48a9      	ldr	r0, [pc, #676]	; (801582c <_vfprintf_r+0x13dc>)
 8015586:	6020      	str	r0, [r4, #0]
 8015588:	2f10      	cmp	r7, #16
 801558a:	f103 0301 	add.w	r3, r3, #1
 801558e:	f104 0108 	add.w	r1, r4, #8
 8015592:	dc2d      	bgt.n	80155f0 <_vfprintf_r+0x11a0>
 8015594:	6067      	str	r7, [r4, #4]
 8015596:	2b07      	cmp	r3, #7
 8015598:	4417      	add	r7, r2
 801559a:	e9cd 371f 	strd	r3, r7, [sp, #124]	; 0x7c
 801559e:	dd3a      	ble.n	8015616 <_vfprintf_r+0x11c6>
 80155a0:	aa1e      	add	r2, sp, #120	; 0x78
 80155a2:	4629      	mov	r1, r5
 80155a4:	4630      	mov	r0, r6
 80155a6:	f002 fa70 	bl	8017a8a <__sprint_r>
 80155aa:	2800      	cmp	r0, #0
 80155ac:	f040 810c 	bne.w	80157c8 <_vfprintf_r+0x1378>
 80155b0:	ac21      	add	r4, sp, #132	; 0x84
 80155b2:	9b08      	ldr	r3, [sp, #32]
 80155b4:	781b      	ldrb	r3, [r3, #0]
 80155b6:	4498      	add	r8, r3
 80155b8:	e732      	b.n	8015420 <_vfprintf_r+0xfd0>
 80155ba:	9b08      	ldr	r3, [sp, #32]
 80155bc:	3b01      	subs	r3, #1
 80155be:	9308      	str	r3, [sp, #32]
 80155c0:	9b07      	ldr	r3, [sp, #28]
 80155c2:	3b01      	subs	r3, #1
 80155c4:	9307      	str	r3, [sp, #28]
 80155c6:	e7ab      	b.n	8015520 <_vfprintf_r+0x10d0>
 80155c8:	aa1e      	add	r2, sp, #120	; 0x78
 80155ca:	4629      	mov	r1, r5
 80155cc:	4630      	mov	r0, r6
 80155ce:	f002 fa5c 	bl	8017a8a <__sprint_r>
 80155d2:	2800      	cmp	r0, #0
 80155d4:	f040 80f8 	bne.w	80157c8 <_vfprintf_r+0x1378>
 80155d8:	ac21      	add	r4, sp, #132	; 0x84
 80155da:	e7af      	b.n	801553c <_vfprintf_r+0x10ec>
 80155dc:	aa1e      	add	r2, sp, #120	; 0x78
 80155de:	4629      	mov	r1, r5
 80155e0:	4630      	mov	r0, r6
 80155e2:	f002 fa52 	bl	8017a8a <__sprint_r>
 80155e6:	2800      	cmp	r0, #0
 80155e8:	f040 80ee 	bne.w	80157c8 <_vfprintf_r+0x1378>
 80155ec:	ac21      	add	r4, sp, #132	; 0x84
 80155ee:	e7be      	b.n	801556e <_vfprintf_r+0x111e>
 80155f0:	2010      	movs	r0, #16
 80155f2:	4402      	add	r2, r0
 80155f4:	2b07      	cmp	r3, #7
 80155f6:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 80155fa:	6060      	str	r0, [r4, #4]
 80155fc:	dd08      	ble.n	8015610 <_vfprintf_r+0x11c0>
 80155fe:	aa1e      	add	r2, sp, #120	; 0x78
 8015600:	4629      	mov	r1, r5
 8015602:	4630      	mov	r0, r6
 8015604:	f002 fa41 	bl	8017a8a <__sprint_r>
 8015608:	2800      	cmp	r0, #0
 801560a:	f040 80dd 	bne.w	80157c8 <_vfprintf_r+0x1378>
 801560e:	a921      	add	r1, sp, #132	; 0x84
 8015610:	3f10      	subs	r7, #16
 8015612:	460c      	mov	r4, r1
 8015614:	e7b4      	b.n	8015580 <_vfprintf_r+0x1130>
 8015616:	460c      	mov	r4, r1
 8015618:	e7cb      	b.n	80155b2 <_vfprintf_r+0x1162>
 801561a:	aa1e      	add	r2, sp, #120	; 0x78
 801561c:	4629      	mov	r1, r5
 801561e:	4630      	mov	r0, r6
 8015620:	f002 fa33 	bl	8017a8a <__sprint_r>
 8015624:	2800      	cmp	r0, #0
 8015626:	f040 80cf 	bne.w	80157c8 <_vfprintf_r+0x1378>
 801562a:	ac21      	add	r4, sp, #132	; 0x84
 801562c:	e719      	b.n	8015462 <_vfprintf_r+0x1012>
 801562e:	aa1e      	add	r2, sp, #120	; 0x78
 8015630:	4629      	mov	r1, r5
 8015632:	4630      	mov	r0, r6
 8015634:	f002 fa29 	bl	8017a8a <__sprint_r>
 8015638:	2800      	cmp	r0, #0
 801563a:	f040 80c5 	bne.w	80157c8 <_vfprintf_r+0x1378>
 801563e:	ac21      	add	r4, sp, #132	; 0x84
 8015640:	e72a      	b.n	8015498 <_vfprintf_r+0x1048>
 8015642:	3210      	adds	r2, #16
 8015644:	2b07      	cmp	r3, #7
 8015646:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 801564a:	f8c4 9004 	str.w	r9, [r4, #4]
 801564e:	dd08      	ble.n	8015662 <_vfprintf_r+0x1212>
 8015650:	aa1e      	add	r2, sp, #120	; 0x78
 8015652:	4629      	mov	r1, r5
 8015654:	4630      	mov	r0, r6
 8015656:	f002 fa18 	bl	8017a8a <__sprint_r>
 801565a:	2800      	cmp	r0, #0
 801565c:	f040 80b4 	bne.w	80157c8 <_vfprintf_r+0x1378>
 8015660:	a921      	add	r1, sp, #132	; 0x84
 8015662:	3f10      	subs	r7, #16
 8015664:	460c      	mov	r4, r1
 8015666:	e727      	b.n	80154b8 <_vfprintf_r+0x1068>
 8015668:	9903      	ldr	r1, [sp, #12]
 801566a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801566c:	2901      	cmp	r1, #1
 801566e:	f100 0001 	add.w	r0, r0, #1
 8015672:	f102 0201 	add.w	r2, r2, #1
 8015676:	f104 0308 	add.w	r3, r4, #8
 801567a:	dc02      	bgt.n	8015682 <_vfprintf_r+0x1232>
 801567c:	f01b 0f01 	tst.w	fp, #1
 8015680:	d073      	beq.n	801576a <_vfprintf_r+0x131a>
 8015682:	2101      	movs	r1, #1
 8015684:	2a07      	cmp	r2, #7
 8015686:	e9cd 201f 	strd	r2, r0, [sp, #124]	; 0x7c
 801568a:	f8c4 a000 	str.w	sl, [r4]
 801568e:	6061      	str	r1, [r4, #4]
 8015690:	dd08      	ble.n	80156a4 <_vfprintf_r+0x1254>
 8015692:	aa1e      	add	r2, sp, #120	; 0x78
 8015694:	4629      	mov	r1, r5
 8015696:	4630      	mov	r0, r6
 8015698:	f002 f9f7 	bl	8017a8a <__sprint_r>
 801569c:	2800      	cmp	r0, #0
 801569e:	f040 8093 	bne.w	80157c8 <_vfprintf_r+0x1378>
 80156a2:	ab21      	add	r3, sp, #132	; 0x84
 80156a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80156a6:	601a      	str	r2, [r3, #0]
 80156a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80156aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80156ac:	605a      	str	r2, [r3, #4]
 80156ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80156b0:	440a      	add	r2, r1
 80156b2:	9220      	str	r2, [sp, #128]	; 0x80
 80156b4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80156b6:	3201      	adds	r2, #1
 80156b8:	2a07      	cmp	r2, #7
 80156ba:	921f      	str	r2, [sp, #124]	; 0x7c
 80156bc:	dc25      	bgt.n	801570a <_vfprintf_r+0x12ba>
 80156be:	3308      	adds	r3, #8
 80156c0:	9a03      	ldr	r2, [sp, #12]
 80156c2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80156c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156ca:	f102 34ff 	add.w	r4, r2, #4294967295
 80156ce:	d025      	beq.n	801571c <_vfprintf_r+0x12cc>
 80156d0:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80156d2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80156d4:	f10a 0001 	add.w	r0, sl, #1
 80156d8:	e9c3 0400 	strd	r0, r4, [r3]
 80156dc:	9803      	ldr	r0, [sp, #12]
 80156de:	3101      	adds	r1, #1
 80156e0:	3a01      	subs	r2, #1
 80156e2:	4402      	add	r2, r0
 80156e4:	2907      	cmp	r1, #7
 80156e6:	e9cd 121f 	strd	r1, r2, [sp, #124]	; 0x7c
 80156ea:	dd47      	ble.n	801577c <_vfprintf_r+0x132c>
 80156ec:	aa1e      	add	r2, sp, #120	; 0x78
 80156ee:	4629      	mov	r1, r5
 80156f0:	4630      	mov	r0, r6
 80156f2:	f002 f9ca 	bl	8017a8a <__sprint_r>
 80156f6:	2800      	cmp	r0, #0
 80156f8:	d166      	bne.n	80157c8 <_vfprintf_r+0x1378>
 80156fa:	ab21      	add	r3, sp, #132	; 0x84
 80156fc:	aa1a      	add	r2, sp, #104	; 0x68
 80156fe:	601a      	str	r2, [r3, #0]
 8015700:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015702:	605a      	str	r2, [r3, #4]
 8015704:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015706:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015708:	e619      	b.n	801533e <_vfprintf_r+0xeee>
 801570a:	aa1e      	add	r2, sp, #120	; 0x78
 801570c:	4629      	mov	r1, r5
 801570e:	4630      	mov	r0, r6
 8015710:	f002 f9bb 	bl	8017a8a <__sprint_r>
 8015714:	2800      	cmp	r0, #0
 8015716:	d157      	bne.n	80157c8 <_vfprintf_r+0x1378>
 8015718:	ab21      	add	r3, sp, #132	; 0x84
 801571a:	e7d1      	b.n	80156c0 <_vfprintf_r+0x1270>
 801571c:	2c00      	cmp	r4, #0
 801571e:	dded      	ble.n	80156fc <_vfprintf_r+0x12ac>
 8015720:	4f42      	ldr	r7, [pc, #264]	; (801582c <_vfprintf_r+0x13dc>)
 8015722:	f04f 0810 	mov.w	r8, #16
 8015726:	e9dd 211f 	ldrd	r2, r1, [sp, #124]	; 0x7c
 801572a:	2c10      	cmp	r4, #16
 801572c:	f102 0201 	add.w	r2, r2, #1
 8015730:	f103 0008 	add.w	r0, r3, #8
 8015734:	601f      	str	r7, [r3, #0]
 8015736:	dc07      	bgt.n	8015748 <_vfprintf_r+0x12f8>
 8015738:	605c      	str	r4, [r3, #4]
 801573a:	2a07      	cmp	r2, #7
 801573c:	440c      	add	r4, r1
 801573e:	e9cd 241f 	strd	r2, r4, [sp, #124]	; 0x7c
 8015742:	dcd3      	bgt.n	80156ec <_vfprintf_r+0x129c>
 8015744:	4603      	mov	r3, r0
 8015746:	e7d9      	b.n	80156fc <_vfprintf_r+0x12ac>
 8015748:	3110      	adds	r1, #16
 801574a:	2a07      	cmp	r2, #7
 801574c:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8015750:	f8c3 8004 	str.w	r8, [r3, #4]
 8015754:	dd06      	ble.n	8015764 <_vfprintf_r+0x1314>
 8015756:	aa1e      	add	r2, sp, #120	; 0x78
 8015758:	4629      	mov	r1, r5
 801575a:	4630      	mov	r0, r6
 801575c:	f002 f995 	bl	8017a8a <__sprint_r>
 8015760:	bb90      	cbnz	r0, 80157c8 <_vfprintf_r+0x1378>
 8015762:	a821      	add	r0, sp, #132	; 0x84
 8015764:	3c10      	subs	r4, #16
 8015766:	4603      	mov	r3, r0
 8015768:	e7dd      	b.n	8015726 <_vfprintf_r+0x12d6>
 801576a:	2101      	movs	r1, #1
 801576c:	2a07      	cmp	r2, #7
 801576e:	e9cd 201f 	strd	r2, r0, [sp, #124]	; 0x7c
 8015772:	f8c4 a000 	str.w	sl, [r4]
 8015776:	6061      	str	r1, [r4, #4]
 8015778:	ddc0      	ble.n	80156fc <_vfprintf_r+0x12ac>
 801577a:	e7b7      	b.n	80156ec <_vfprintf_r+0x129c>
 801577c:	3308      	adds	r3, #8
 801577e:	e7bd      	b.n	80156fc <_vfprintf_r+0x12ac>
 8015780:	460c      	mov	r4, r1
 8015782:	f7ff ba45 	b.w	8014c10 <_vfprintf_r+0x7c0>
 8015786:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 801578a:	1a9f      	subs	r7, r3, r2
 801578c:	2f00      	cmp	r7, #0
 801578e:	f77f aa4d 	ble.w	8014c2c <_vfprintf_r+0x7dc>
 8015792:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8015830 <_vfprintf_r+0x13e0>
 8015796:	f04f 0910 	mov.w	r9, #16
 801579a:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 801579e:	2f10      	cmp	r7, #16
 80157a0:	f103 0301 	add.w	r3, r3, #1
 80157a4:	f8c4 8000 	str.w	r8, [r4]
 80157a8:	dc18      	bgt.n	80157dc <_vfprintf_r+0x138c>
 80157aa:	6067      	str	r7, [r4, #4]
 80157ac:	2b07      	cmp	r3, #7
 80157ae:	4417      	add	r7, r2
 80157b0:	e9cd 371f 	strd	r3, r7, [sp, #124]	; 0x7c
 80157b4:	f77f aa3a 	ble.w	8014c2c <_vfprintf_r+0x7dc>
 80157b8:	aa1e      	add	r2, sp, #120	; 0x78
 80157ba:	4629      	mov	r1, r5
 80157bc:	4630      	mov	r0, r6
 80157be:	f002 f964 	bl	8017a8a <__sprint_r>
 80157c2:	2800      	cmp	r0, #0
 80157c4:	f43f aa32 	beq.w	8014c2c <_vfprintf_r+0x7dc>
 80157c8:	9b02      	ldr	r3, [sp, #8]
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	f43f a871 	beq.w	80148b2 <_vfprintf_r+0x462>
 80157d0:	4619      	mov	r1, r3
 80157d2:	4630      	mov	r0, r6
 80157d4:	f001 f87a 	bl	80168cc <_free_r>
 80157d8:	f7ff b86b 	b.w	80148b2 <_vfprintf_r+0x462>
 80157dc:	3210      	adds	r2, #16
 80157de:	2b07      	cmp	r3, #7
 80157e0:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 80157e4:	f8c4 9004 	str.w	r9, [r4, #4]
 80157e8:	dc02      	bgt.n	80157f0 <_vfprintf_r+0x13a0>
 80157ea:	3408      	adds	r4, #8
 80157ec:	3f10      	subs	r7, #16
 80157ee:	e7d4      	b.n	801579a <_vfprintf_r+0x134a>
 80157f0:	aa1e      	add	r2, sp, #120	; 0x78
 80157f2:	4629      	mov	r1, r5
 80157f4:	4630      	mov	r0, r6
 80157f6:	f002 f948 	bl	8017a8a <__sprint_r>
 80157fa:	2800      	cmp	r0, #0
 80157fc:	d1e4      	bne.n	80157c8 <_vfprintf_r+0x1378>
 80157fe:	ac21      	add	r4, sp, #132	; 0x84
 8015800:	e7f4      	b.n	80157ec <_vfprintf_r+0x139c>
 8015802:	9902      	ldr	r1, [sp, #8]
 8015804:	4630      	mov	r0, r6
 8015806:	f001 f861 	bl	80168cc <_free_r>
 801580a:	f7ff ba27 	b.w	8014c5c <_vfprintf_r+0x80c>
 801580e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015810:	b91b      	cbnz	r3, 801581a <_vfprintf_r+0x13ca>
 8015812:	2300      	movs	r3, #0
 8015814:	931f      	str	r3, [sp, #124]	; 0x7c
 8015816:	f7ff b84c 	b.w	80148b2 <_vfprintf_r+0x462>
 801581a:	aa1e      	add	r2, sp, #120	; 0x78
 801581c:	4629      	mov	r1, r5
 801581e:	4630      	mov	r0, r6
 8015820:	f002 f933 	bl	8017a8a <__sprint_r>
 8015824:	2800      	cmp	r0, #0
 8015826:	d0f4      	beq.n	8015812 <_vfprintf_r+0x13c2>
 8015828:	f7ff b843 	b.w	80148b2 <_vfprintf_r+0x462>
 801582c:	0801956c 	.word	0x0801956c
 8015830:	0801955c 	.word	0x0801955c
 8015834:	ea58 0209 	orrs.w	r2, r8, r9
 8015838:	f8cd b008 	str.w	fp, [sp, #8]
 801583c:	f43f ab37 	beq.w	8014eae <_vfprintf_r+0xa5e>
 8015840:	2b01      	cmp	r3, #1
 8015842:	f43f abe2 	beq.w	801500a <_vfprintf_r+0xbba>
 8015846:	2b02      	cmp	r3, #2
 8015848:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 801584c:	f43f ac2e 	beq.w	80150ac <_vfprintf_r+0xc5c>
 8015850:	f008 0307 	and.w	r3, r8, #7
 8015854:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 8015858:	ea48 7849 	orr.w	r8, r8, r9, lsl #29
 801585c:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 8015860:	3330      	adds	r3, #48	; 0x30
 8015862:	ea58 0109 	orrs.w	r1, r8, r9
 8015866:	4652      	mov	r2, sl
 8015868:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 801586c:	d1f0      	bne.n	8015850 <_vfprintf_r+0x1400>
 801586e:	9902      	ldr	r1, [sp, #8]
 8015870:	07c8      	lsls	r0, r1, #31
 8015872:	d506      	bpl.n	8015882 <_vfprintf_r+0x1432>
 8015874:	2b30      	cmp	r3, #48	; 0x30
 8015876:	d004      	beq.n	8015882 <_vfprintf_r+0x1432>
 8015878:	2330      	movs	r3, #48	; 0x30
 801587a:	f80a 3c01 	strb.w	r3, [sl, #-1]
 801587e:	f1a2 0a02 	sub.w	sl, r2, #2
 8015882:	ab4a      	add	r3, sp, #296	; 0x128
 8015884:	46b9      	mov	r9, r7
 8015886:	eba3 070a 	sub.w	r7, r3, sl
 801588a:	2300      	movs	r3, #0
 801588c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8015890:	9302      	str	r3, [sp, #8]
 8015892:	f7fe bfd9 	b.w	8014848 <_vfprintf_r+0x3f8>
 8015896:	bf00      	nop

08015898 <__sbprintf>:
 8015898:	b570      	push	{r4, r5, r6, lr}
 801589a:	460c      	mov	r4, r1
 801589c:	8989      	ldrh	r1, [r1, #12]
 801589e:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 80158a2:	f021 0102 	bic.w	r1, r1, #2
 80158a6:	f8ad 1014 	strh.w	r1, [sp, #20]
 80158aa:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80158ac:	911b      	str	r1, [sp, #108]	; 0x6c
 80158ae:	89e1      	ldrh	r1, [r4, #14]
 80158b0:	f8ad 1016 	strh.w	r1, [sp, #22]
 80158b4:	69e1      	ldr	r1, [r4, #28]
 80158b6:	9109      	str	r1, [sp, #36]	; 0x24
 80158b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80158ba:	910b      	str	r1, [sp, #44]	; 0x2c
 80158bc:	a91c      	add	r1, sp, #112	; 0x70
 80158be:	9102      	str	r1, [sp, #8]
 80158c0:	9106      	str	r1, [sp, #24]
 80158c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80158c6:	4606      	mov	r6, r0
 80158c8:	9104      	str	r1, [sp, #16]
 80158ca:	9107      	str	r1, [sp, #28]
 80158cc:	a818      	add	r0, sp, #96	; 0x60
 80158ce:	2100      	movs	r1, #0
 80158d0:	e9cd 3200 	strd	r3, r2, [sp]
 80158d4:	9108      	str	r1, [sp, #32]
 80158d6:	f001 fa27 	bl	8016d28 <__retarget_lock_init_recursive>
 80158da:	e9dd 3200 	ldrd	r3, r2, [sp]
 80158de:	a902      	add	r1, sp, #8
 80158e0:	4630      	mov	r0, r6
 80158e2:	f7fe fdb5 	bl	8014450 <_vfprintf_r>
 80158e6:	1e05      	subs	r5, r0, #0
 80158e8:	db07      	blt.n	80158fa <__sbprintf+0x62>
 80158ea:	a902      	add	r1, sp, #8
 80158ec:	4630      	mov	r0, r6
 80158ee:	f000 fef1 	bl	80166d4 <_fflush_r>
 80158f2:	2800      	cmp	r0, #0
 80158f4:	bf18      	it	ne
 80158f6:	f04f 35ff 	movne.w	r5, #4294967295
 80158fa:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80158fe:	9818      	ldr	r0, [sp, #96]	; 0x60
 8015900:	065b      	lsls	r3, r3, #25
 8015902:	bf42      	ittt	mi
 8015904:	89a3      	ldrhmi	r3, [r4, #12]
 8015906:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801590a:	81a3      	strhmi	r3, [r4, #12]
 801590c:	f001 fa0d 	bl	8016d2a <__retarget_lock_close_recursive>
 8015910:	4628      	mov	r0, r5
 8015912:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8015916:	bd70      	pop	{r4, r5, r6, pc}

08015918 <__swsetup_r>:
 8015918:	b538      	push	{r3, r4, r5, lr}
 801591a:	4b2a      	ldr	r3, [pc, #168]	; (80159c4 <__swsetup_r+0xac>)
 801591c:	4605      	mov	r5, r0
 801591e:	6818      	ldr	r0, [r3, #0]
 8015920:	460c      	mov	r4, r1
 8015922:	b118      	cbz	r0, 801592c <__swsetup_r+0x14>
 8015924:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8015926:	b90b      	cbnz	r3, 801592c <__swsetup_r+0x14>
 8015928:	f000 ff40 	bl	80167ac <__sinit>
 801592c:	89a3      	ldrh	r3, [r4, #12]
 801592e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015932:	0718      	lsls	r0, r3, #28
 8015934:	d422      	bmi.n	801597c <__swsetup_r+0x64>
 8015936:	06d9      	lsls	r1, r3, #27
 8015938:	d407      	bmi.n	801594a <__swsetup_r+0x32>
 801593a:	2309      	movs	r3, #9
 801593c:	602b      	str	r3, [r5, #0]
 801593e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015942:	81a3      	strh	r3, [r4, #12]
 8015944:	f04f 30ff 	mov.w	r0, #4294967295
 8015948:	e034      	b.n	80159b4 <__swsetup_r+0x9c>
 801594a:	0758      	lsls	r0, r3, #29
 801594c:	d512      	bpl.n	8015974 <__swsetup_r+0x5c>
 801594e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8015950:	b141      	cbz	r1, 8015964 <__swsetup_r+0x4c>
 8015952:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8015956:	4299      	cmp	r1, r3
 8015958:	d002      	beq.n	8015960 <__swsetup_r+0x48>
 801595a:	4628      	mov	r0, r5
 801595c:	f000 ffb6 	bl	80168cc <_free_r>
 8015960:	2300      	movs	r3, #0
 8015962:	6323      	str	r3, [r4, #48]	; 0x30
 8015964:	89a3      	ldrh	r3, [r4, #12]
 8015966:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801596a:	81a3      	strh	r3, [r4, #12]
 801596c:	2300      	movs	r3, #0
 801596e:	6063      	str	r3, [r4, #4]
 8015970:	6923      	ldr	r3, [r4, #16]
 8015972:	6023      	str	r3, [r4, #0]
 8015974:	89a3      	ldrh	r3, [r4, #12]
 8015976:	f043 0308 	orr.w	r3, r3, #8
 801597a:	81a3      	strh	r3, [r4, #12]
 801597c:	6923      	ldr	r3, [r4, #16]
 801597e:	b94b      	cbnz	r3, 8015994 <__swsetup_r+0x7c>
 8015980:	89a3      	ldrh	r3, [r4, #12]
 8015982:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801598a:	d003      	beq.n	8015994 <__swsetup_r+0x7c>
 801598c:	4621      	mov	r1, r4
 801598e:	4628      	mov	r0, r5
 8015990:	f001 f9fa 	bl	8016d88 <__smakebuf_r>
 8015994:	89a0      	ldrh	r0, [r4, #12]
 8015996:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801599a:	f010 0301 	ands.w	r3, r0, #1
 801599e:	d00a      	beq.n	80159b6 <__swsetup_r+0x9e>
 80159a0:	2300      	movs	r3, #0
 80159a2:	60a3      	str	r3, [r4, #8]
 80159a4:	6963      	ldr	r3, [r4, #20]
 80159a6:	425b      	negs	r3, r3
 80159a8:	61a3      	str	r3, [r4, #24]
 80159aa:	6923      	ldr	r3, [r4, #16]
 80159ac:	b943      	cbnz	r3, 80159c0 <__swsetup_r+0xa8>
 80159ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80159b2:	d1c4      	bne.n	801593e <__swsetup_r+0x26>
 80159b4:	bd38      	pop	{r3, r4, r5, pc}
 80159b6:	0781      	lsls	r1, r0, #30
 80159b8:	bf58      	it	pl
 80159ba:	6963      	ldrpl	r3, [r4, #20]
 80159bc:	60a3      	str	r3, [r4, #8]
 80159be:	e7f4      	b.n	80159aa <__swsetup_r+0x92>
 80159c0:	2000      	movs	r0, #0
 80159c2:	e7f7      	b.n	80159b4 <__swsetup_r+0x9c>
 80159c4:	200004bc 	.word	0x200004bc

080159c8 <register_fini>:
 80159c8:	4b02      	ldr	r3, [pc, #8]	; (80159d4 <register_fini+0xc>)
 80159ca:	b113      	cbz	r3, 80159d2 <register_fini+0xa>
 80159cc:	4802      	ldr	r0, [pc, #8]	; (80159d8 <register_fini+0x10>)
 80159ce:	f000 b805 	b.w	80159dc <atexit>
 80159d2:	4770      	bx	lr
 80159d4:	00000000 	.word	0x00000000
 80159d8:	080167fd 	.word	0x080167fd

080159dc <atexit>:
 80159dc:	2300      	movs	r3, #0
 80159de:	4601      	mov	r1, r0
 80159e0:	461a      	mov	r2, r3
 80159e2:	4618      	mov	r0, r3
 80159e4:	f002 bdb6 	b.w	8018554 <__register_exitproc>

080159e8 <quorem>:
 80159e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159ec:	6903      	ldr	r3, [r0, #16]
 80159ee:	690c      	ldr	r4, [r1, #16]
 80159f0:	42a3      	cmp	r3, r4
 80159f2:	4607      	mov	r7, r0
 80159f4:	f2c0 8081 	blt.w	8015afa <quorem+0x112>
 80159f8:	3c01      	subs	r4, #1
 80159fa:	f101 0814 	add.w	r8, r1, #20
 80159fe:	f100 0514 	add.w	r5, r0, #20
 8015a02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015a06:	9301      	str	r3, [sp, #4]
 8015a08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015a0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015a10:	3301      	adds	r3, #1
 8015a12:	429a      	cmp	r2, r3
 8015a14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015a18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015a1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8015a20:	d331      	bcc.n	8015a86 <quorem+0x9e>
 8015a22:	f04f 0e00 	mov.w	lr, #0
 8015a26:	4640      	mov	r0, r8
 8015a28:	46ac      	mov	ip, r5
 8015a2a:	46f2      	mov	sl, lr
 8015a2c:	f850 2b04 	ldr.w	r2, [r0], #4
 8015a30:	b293      	uxth	r3, r2
 8015a32:	fb06 e303 	mla	r3, r6, r3, lr
 8015a36:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8015a3a:	b29b      	uxth	r3, r3
 8015a3c:	ebaa 0303 	sub.w	r3, sl, r3
 8015a40:	f8dc a000 	ldr.w	sl, [ip]
 8015a44:	0c12      	lsrs	r2, r2, #16
 8015a46:	fa13 f38a 	uxtah	r3, r3, sl
 8015a4a:	fb06 e202 	mla	r2, r6, r2, lr
 8015a4e:	9300      	str	r3, [sp, #0]
 8015a50:	9b00      	ldr	r3, [sp, #0]
 8015a52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015a56:	b292      	uxth	r2, r2
 8015a58:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8015a5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015a60:	f8bd 3000 	ldrh.w	r3, [sp]
 8015a64:	4581      	cmp	r9, r0
 8015a66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015a6a:	f84c 3b04 	str.w	r3, [ip], #4
 8015a6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015a72:	d2db      	bcs.n	8015a2c <quorem+0x44>
 8015a74:	f855 300b 	ldr.w	r3, [r5, fp]
 8015a78:	b92b      	cbnz	r3, 8015a86 <quorem+0x9e>
 8015a7a:	9b01      	ldr	r3, [sp, #4]
 8015a7c:	3b04      	subs	r3, #4
 8015a7e:	429d      	cmp	r5, r3
 8015a80:	461a      	mov	r2, r3
 8015a82:	d32e      	bcc.n	8015ae2 <quorem+0xfa>
 8015a84:	613c      	str	r4, [r7, #16]
 8015a86:	4638      	mov	r0, r7
 8015a88:	f001 fc1a 	bl	80172c0 <__mcmp>
 8015a8c:	2800      	cmp	r0, #0
 8015a8e:	db24      	blt.n	8015ada <quorem+0xf2>
 8015a90:	3601      	adds	r6, #1
 8015a92:	4628      	mov	r0, r5
 8015a94:	f04f 0c00 	mov.w	ip, #0
 8015a98:	f858 2b04 	ldr.w	r2, [r8], #4
 8015a9c:	f8d0 e000 	ldr.w	lr, [r0]
 8015aa0:	b293      	uxth	r3, r2
 8015aa2:	ebac 0303 	sub.w	r3, ip, r3
 8015aa6:	0c12      	lsrs	r2, r2, #16
 8015aa8:	fa13 f38e 	uxtah	r3, r3, lr
 8015aac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015ab0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015ab4:	b29b      	uxth	r3, r3
 8015ab6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015aba:	45c1      	cmp	r9, r8
 8015abc:	f840 3b04 	str.w	r3, [r0], #4
 8015ac0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015ac4:	d2e8      	bcs.n	8015a98 <quorem+0xb0>
 8015ac6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015aca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015ace:	b922      	cbnz	r2, 8015ada <quorem+0xf2>
 8015ad0:	3b04      	subs	r3, #4
 8015ad2:	429d      	cmp	r5, r3
 8015ad4:	461a      	mov	r2, r3
 8015ad6:	d30a      	bcc.n	8015aee <quorem+0x106>
 8015ad8:	613c      	str	r4, [r7, #16]
 8015ada:	4630      	mov	r0, r6
 8015adc:	b003      	add	sp, #12
 8015ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ae2:	6812      	ldr	r2, [r2, #0]
 8015ae4:	3b04      	subs	r3, #4
 8015ae6:	2a00      	cmp	r2, #0
 8015ae8:	d1cc      	bne.n	8015a84 <quorem+0x9c>
 8015aea:	3c01      	subs	r4, #1
 8015aec:	e7c7      	b.n	8015a7e <quorem+0x96>
 8015aee:	6812      	ldr	r2, [r2, #0]
 8015af0:	3b04      	subs	r3, #4
 8015af2:	2a00      	cmp	r2, #0
 8015af4:	d1f0      	bne.n	8015ad8 <quorem+0xf0>
 8015af6:	3c01      	subs	r4, #1
 8015af8:	e7eb      	b.n	8015ad2 <quorem+0xea>
 8015afa:	2000      	movs	r0, #0
 8015afc:	e7ee      	b.n	8015adc <quorem+0xf4>
	...

08015b00 <_dtoa_r>:
 8015b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b04:	ed2d 8b02 	vpush	{d8}
 8015b08:	b091      	sub	sp, #68	; 0x44
 8015b0a:	ed8d 0b02 	vstr	d0, [sp, #8]
 8015b0e:	9106      	str	r1, [sp, #24]
 8015b10:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8015b12:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8015b14:	9208      	str	r2, [sp, #32]
 8015b16:	ec59 8b10 	vmov	r8, r9, d0
 8015b1a:	4606      	mov	r6, r0
 8015b1c:	930c      	str	r3, [sp, #48]	; 0x30
 8015b1e:	b141      	cbz	r1, 8015b32 <_dtoa_r+0x32>
 8015b20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015b22:	604a      	str	r2, [r1, #4]
 8015b24:	2301      	movs	r3, #1
 8015b26:	4093      	lsls	r3, r2
 8015b28:	608b      	str	r3, [r1, #8]
 8015b2a:	f001 f9ba 	bl	8016ea2 <_Bfree>
 8015b2e:	2300      	movs	r3, #0
 8015b30:	6433      	str	r3, [r6, #64]	; 0x40
 8015b32:	f1b9 0300 	subs.w	r3, r9, #0
 8015b36:	bfbb      	ittet	lt
 8015b38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8015b3c:	9303      	strlt	r3, [sp, #12]
 8015b3e:	2300      	movge	r3, #0
 8015b40:	2201      	movlt	r2, #1
 8015b42:	bfac      	ite	ge
 8015b44:	6023      	strge	r3, [r4, #0]
 8015b46:	6022      	strlt	r2, [r4, #0]
 8015b48:	4b99      	ldr	r3, [pc, #612]	; (8015db0 <_dtoa_r+0x2b0>)
 8015b4a:	9c03      	ldr	r4, [sp, #12]
 8015b4c:	43a3      	bics	r3, r4
 8015b4e:	d11c      	bne.n	8015b8a <_dtoa_r+0x8a>
 8015b50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015b52:	f242 730f 	movw	r3, #9999	; 0x270f
 8015b56:	6013      	str	r3, [r2, #0]
 8015b58:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8015b5c:	ea53 0308 	orrs.w	r3, r3, r8
 8015b60:	f000 84f8 	beq.w	8016554 <_dtoa_r+0xa54>
 8015b64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015b66:	b90b      	cbnz	r3, 8015b6c <_dtoa_r+0x6c>
 8015b68:	4b92      	ldr	r3, [pc, #584]	; (8015db4 <_dtoa_r+0x2b4>)
 8015b6a:	e01f      	b.n	8015bac <_dtoa_r+0xac>
 8015b6c:	4b91      	ldr	r3, [pc, #580]	; (8015db4 <_dtoa_r+0x2b4>)
 8015b6e:	9301      	str	r3, [sp, #4]
 8015b70:	3303      	adds	r3, #3
 8015b72:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015b74:	6013      	str	r3, [r2, #0]
 8015b76:	9801      	ldr	r0, [sp, #4]
 8015b78:	b011      	add	sp, #68	; 0x44
 8015b7a:	ecbd 8b02 	vpop	{d8}
 8015b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b82:	4b8d      	ldr	r3, [pc, #564]	; (8015db8 <_dtoa_r+0x2b8>)
 8015b84:	9301      	str	r3, [sp, #4]
 8015b86:	3308      	adds	r3, #8
 8015b88:	e7f3      	b.n	8015b72 <_dtoa_r+0x72>
 8015b8a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8015b8e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b96:	d10b      	bne.n	8015bb0 <_dtoa_r+0xb0>
 8015b98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015b9a:	2301      	movs	r3, #1
 8015b9c:	6013      	str	r3, [r2, #0]
 8015b9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	f000 84d4 	beq.w	801654e <_dtoa_r+0xa4e>
 8015ba6:	4885      	ldr	r0, [pc, #532]	; (8015dbc <_dtoa_r+0x2bc>)
 8015ba8:	6018      	str	r0, [r3, #0]
 8015baa:	1e43      	subs	r3, r0, #1
 8015bac:	9301      	str	r3, [sp, #4]
 8015bae:	e7e2      	b.n	8015b76 <_dtoa_r+0x76>
 8015bb0:	a90f      	add	r1, sp, #60	; 0x3c
 8015bb2:	aa0e      	add	r2, sp, #56	; 0x38
 8015bb4:	4630      	mov	r0, r6
 8015bb6:	eeb0 0b48 	vmov.f64	d0, d8
 8015bba:	f001 fc27 	bl	801740c <__d2b>
 8015bbe:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8015bc2:	4605      	mov	r5, r0
 8015bc4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015bc6:	2900      	cmp	r1, #0
 8015bc8:	d046      	beq.n	8015c58 <_dtoa_r+0x158>
 8015bca:	ee18 4a90 	vmov	r4, s17
 8015bce:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8015bd2:	ec53 2b18 	vmov	r2, r3, d8
 8015bd6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8015bda:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015bde:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8015be2:	2400      	movs	r4, #0
 8015be4:	ec43 2b16 	vmov	d6, r2, r3
 8015be8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8015bec:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8015d98 <_dtoa_r+0x298>
 8015bf0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8015bf4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8015da0 <_dtoa_r+0x2a0>
 8015bf8:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015bfc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8015da8 <_dtoa_r+0x2a8>
 8015c00:	ee07 1a90 	vmov	s15, r1
 8015c04:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8015c08:	eeb0 7b46 	vmov.f64	d7, d6
 8015c0c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8015c10:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8015c14:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8015c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c1c:	ee16 ba90 	vmov	fp, s13
 8015c20:	940a      	str	r4, [sp, #40]	; 0x28
 8015c22:	d508      	bpl.n	8015c36 <_dtoa_r+0x136>
 8015c24:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8015c28:	eeb4 6b47 	vcmp.f64	d6, d7
 8015c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c30:	bf18      	it	ne
 8015c32:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8015c36:	f1bb 0f16 	cmp.w	fp, #22
 8015c3a:	d82f      	bhi.n	8015c9c <_dtoa_r+0x19c>
 8015c3c:	4b60      	ldr	r3, [pc, #384]	; (8015dc0 <_dtoa_r+0x2c0>)
 8015c3e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015c42:	ed93 7b00 	vldr	d7, [r3]
 8015c46:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c4e:	d501      	bpl.n	8015c54 <_dtoa_r+0x154>
 8015c50:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015c54:	2300      	movs	r3, #0
 8015c56:	e022      	b.n	8015c9e <_dtoa_r+0x19e>
 8015c58:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015c5a:	4401      	add	r1, r0
 8015c5c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8015c60:	2b20      	cmp	r3, #32
 8015c62:	bfc1      	itttt	gt
 8015c64:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015c68:	fa04 f303 	lslgt.w	r3, r4, r3
 8015c6c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8015c70:	fa28 f804 	lsrgt.w	r8, r8, r4
 8015c74:	bfd6      	itet	le
 8015c76:	f1c3 0320 	rsble	r3, r3, #32
 8015c7a:	ea43 0808 	orrgt.w	r8, r3, r8
 8015c7e:	fa08 f803 	lslle.w	r8, r8, r3
 8015c82:	ee07 8a90 	vmov	s15, r8
 8015c86:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015c8a:	3901      	subs	r1, #1
 8015c8c:	ee17 4a90 	vmov	r4, s15
 8015c90:	ec53 2b17 	vmov	r2, r3, d7
 8015c94:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8015c98:	2401      	movs	r4, #1
 8015c9a:	e7a3      	b.n	8015be4 <_dtoa_r+0xe4>
 8015c9c:	2301      	movs	r3, #1
 8015c9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015ca0:	1a43      	subs	r3, r0, r1
 8015ca2:	1e5a      	subs	r2, r3, #1
 8015ca4:	bf45      	ittet	mi
 8015ca6:	f1c3 0301 	rsbmi	r3, r3, #1
 8015caa:	9304      	strmi	r3, [sp, #16]
 8015cac:	2300      	movpl	r3, #0
 8015cae:	2300      	movmi	r3, #0
 8015cb0:	9205      	str	r2, [sp, #20]
 8015cb2:	bf54      	ite	pl
 8015cb4:	9304      	strpl	r3, [sp, #16]
 8015cb6:	9305      	strmi	r3, [sp, #20]
 8015cb8:	f1bb 0f00 	cmp.w	fp, #0
 8015cbc:	db18      	blt.n	8015cf0 <_dtoa_r+0x1f0>
 8015cbe:	9b05      	ldr	r3, [sp, #20]
 8015cc0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8015cc4:	445b      	add	r3, fp
 8015cc6:	9305      	str	r3, [sp, #20]
 8015cc8:	2300      	movs	r3, #0
 8015cca:	9a06      	ldr	r2, [sp, #24]
 8015ccc:	2a09      	cmp	r2, #9
 8015cce:	d84a      	bhi.n	8015d66 <_dtoa_r+0x266>
 8015cd0:	2a05      	cmp	r2, #5
 8015cd2:	bfc4      	itt	gt
 8015cd4:	3a04      	subgt	r2, #4
 8015cd6:	9206      	strgt	r2, [sp, #24]
 8015cd8:	9a06      	ldr	r2, [sp, #24]
 8015cda:	f1a2 0202 	sub.w	r2, r2, #2
 8015cde:	bfcc      	ite	gt
 8015ce0:	2400      	movgt	r4, #0
 8015ce2:	2401      	movle	r4, #1
 8015ce4:	2a03      	cmp	r2, #3
 8015ce6:	d849      	bhi.n	8015d7c <_dtoa_r+0x27c>
 8015ce8:	e8df f002 	tbb	[pc, r2]
 8015cec:	3b2d2f0b 	.word	0x3b2d2f0b
 8015cf0:	9b04      	ldr	r3, [sp, #16]
 8015cf2:	2200      	movs	r2, #0
 8015cf4:	eba3 030b 	sub.w	r3, r3, fp
 8015cf8:	9304      	str	r3, [sp, #16]
 8015cfa:	9209      	str	r2, [sp, #36]	; 0x24
 8015cfc:	f1cb 0300 	rsb	r3, fp, #0
 8015d00:	e7e3      	b.n	8015cca <_dtoa_r+0x1ca>
 8015d02:	2200      	movs	r2, #0
 8015d04:	9207      	str	r2, [sp, #28]
 8015d06:	9a08      	ldr	r2, [sp, #32]
 8015d08:	2a00      	cmp	r2, #0
 8015d0a:	dc3a      	bgt.n	8015d82 <_dtoa_r+0x282>
 8015d0c:	f04f 0a01 	mov.w	sl, #1
 8015d10:	46d1      	mov	r9, sl
 8015d12:	4652      	mov	r2, sl
 8015d14:	f8cd a020 	str.w	sl, [sp, #32]
 8015d18:	2100      	movs	r1, #0
 8015d1a:	6471      	str	r1, [r6, #68]	; 0x44
 8015d1c:	2004      	movs	r0, #4
 8015d1e:	f100 0714 	add.w	r7, r0, #20
 8015d22:	4297      	cmp	r7, r2
 8015d24:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8015d26:	d931      	bls.n	8015d8c <_dtoa_r+0x28c>
 8015d28:	4630      	mov	r0, r6
 8015d2a:	930d      	str	r3, [sp, #52]	; 0x34
 8015d2c:	f001 f894 	bl	8016e58 <_Balloc>
 8015d30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d32:	9001      	str	r0, [sp, #4]
 8015d34:	4602      	mov	r2, r0
 8015d36:	2800      	cmp	r0, #0
 8015d38:	d148      	bne.n	8015dcc <_dtoa_r+0x2cc>
 8015d3a:	4b22      	ldr	r3, [pc, #136]	; (8015dc4 <_dtoa_r+0x2c4>)
 8015d3c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015d40:	4821      	ldr	r0, [pc, #132]	; (8015dc8 <_dtoa_r+0x2c8>)
 8015d42:	f002 fc49 	bl	80185d8 <__assert_func>
 8015d46:	2201      	movs	r2, #1
 8015d48:	e7dc      	b.n	8015d04 <_dtoa_r+0x204>
 8015d4a:	2200      	movs	r2, #0
 8015d4c:	9207      	str	r2, [sp, #28]
 8015d4e:	9a08      	ldr	r2, [sp, #32]
 8015d50:	eb0b 0a02 	add.w	sl, fp, r2
 8015d54:	f10a 0901 	add.w	r9, sl, #1
 8015d58:	464a      	mov	r2, r9
 8015d5a:	2a01      	cmp	r2, #1
 8015d5c:	bfb8      	it	lt
 8015d5e:	2201      	movlt	r2, #1
 8015d60:	e7da      	b.n	8015d18 <_dtoa_r+0x218>
 8015d62:	2201      	movs	r2, #1
 8015d64:	e7f2      	b.n	8015d4c <_dtoa_r+0x24c>
 8015d66:	2401      	movs	r4, #1
 8015d68:	2200      	movs	r2, #0
 8015d6a:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8015d6e:	f04f 3aff 	mov.w	sl, #4294967295
 8015d72:	2100      	movs	r1, #0
 8015d74:	46d1      	mov	r9, sl
 8015d76:	2212      	movs	r2, #18
 8015d78:	9108      	str	r1, [sp, #32]
 8015d7a:	e7cd      	b.n	8015d18 <_dtoa_r+0x218>
 8015d7c:	2201      	movs	r2, #1
 8015d7e:	9207      	str	r2, [sp, #28]
 8015d80:	e7f5      	b.n	8015d6e <_dtoa_r+0x26e>
 8015d82:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015d86:	46d1      	mov	r9, sl
 8015d88:	4652      	mov	r2, sl
 8015d8a:	e7c5      	b.n	8015d18 <_dtoa_r+0x218>
 8015d8c:	3101      	adds	r1, #1
 8015d8e:	6471      	str	r1, [r6, #68]	; 0x44
 8015d90:	0040      	lsls	r0, r0, #1
 8015d92:	e7c4      	b.n	8015d1e <_dtoa_r+0x21e>
 8015d94:	f3af 8000 	nop.w
 8015d98:	636f4361 	.word	0x636f4361
 8015d9c:	3fd287a7 	.word	0x3fd287a7
 8015da0:	8b60c8b3 	.word	0x8b60c8b3
 8015da4:	3fc68a28 	.word	0x3fc68a28
 8015da8:	509f79fb 	.word	0x509f79fb
 8015dac:	3fd34413 	.word	0x3fd34413
 8015db0:	7ff00000 	.word	0x7ff00000
 8015db4:	0801957c 	.word	0x0801957c
 8015db8:	08019580 	.word	0x08019580
 8015dbc:	0801953b 	.word	0x0801953b
 8015dc0:	08019680 	.word	0x08019680
 8015dc4:	08019589 	.word	0x08019589
 8015dc8:	0801959a 	.word	0x0801959a
 8015dcc:	9a01      	ldr	r2, [sp, #4]
 8015dce:	6432      	str	r2, [r6, #64]	; 0x40
 8015dd0:	f1b9 0f0e 	cmp.w	r9, #14
 8015dd4:	d86c      	bhi.n	8015eb0 <_dtoa_r+0x3b0>
 8015dd6:	2c00      	cmp	r4, #0
 8015dd8:	d06a      	beq.n	8015eb0 <_dtoa_r+0x3b0>
 8015dda:	f1bb 0f00 	cmp.w	fp, #0
 8015dde:	f340 80a0 	ble.w	8015f22 <_dtoa_r+0x422>
 8015de2:	49c1      	ldr	r1, [pc, #772]	; (80160e8 <_dtoa_r+0x5e8>)
 8015de4:	f00b 020f 	and.w	r2, fp, #15
 8015de8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8015dec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8015df0:	ed92 7b00 	vldr	d7, [r2]
 8015df4:	ea4f 112b 	mov.w	r1, fp, asr #4
 8015df8:	f000 8087 	beq.w	8015f0a <_dtoa_r+0x40a>
 8015dfc:	4abb      	ldr	r2, [pc, #748]	; (80160ec <_dtoa_r+0x5ec>)
 8015dfe:	ed92 6b08 	vldr	d6, [r2, #32]
 8015e02:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8015e06:	ed8d 6b02 	vstr	d6, [sp, #8]
 8015e0a:	f001 010f 	and.w	r1, r1, #15
 8015e0e:	2203      	movs	r2, #3
 8015e10:	48b6      	ldr	r0, [pc, #728]	; (80160ec <_dtoa_r+0x5ec>)
 8015e12:	2900      	cmp	r1, #0
 8015e14:	d17b      	bne.n	8015f0e <_dtoa_r+0x40e>
 8015e16:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015e1a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015e1e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015e22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015e24:	2900      	cmp	r1, #0
 8015e26:	f000 80a2 	beq.w	8015f6e <_dtoa_r+0x46e>
 8015e2a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8015e2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015e32:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e3a:	f140 8098 	bpl.w	8015f6e <_dtoa_r+0x46e>
 8015e3e:	f1b9 0f00 	cmp.w	r9, #0
 8015e42:	f000 8094 	beq.w	8015f6e <_dtoa_r+0x46e>
 8015e46:	f1ba 0f00 	cmp.w	sl, #0
 8015e4a:	dd2f      	ble.n	8015eac <_dtoa_r+0x3ac>
 8015e4c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8015e50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015e54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015e58:	f10b 37ff 	add.w	r7, fp, #4294967295
 8015e5c:	3201      	adds	r2, #1
 8015e5e:	4650      	mov	r0, sl
 8015e60:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015e64:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8015e68:	ee07 2a90 	vmov	s15, r2
 8015e6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015e70:	eea7 5b06 	vfma.f64	d5, d7, d6
 8015e74:	ee15 4a90 	vmov	r4, s11
 8015e78:	ec52 1b15 	vmov	r1, r2, d5
 8015e7c:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8015e80:	2800      	cmp	r0, #0
 8015e82:	d177      	bne.n	8015f74 <_dtoa_r+0x474>
 8015e84:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015e88:	ee36 6b47 	vsub.f64	d6, d6, d7
 8015e8c:	ec42 1b17 	vmov	d7, r1, r2
 8015e90:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e98:	f300 8262 	bgt.w	8016360 <_dtoa_r+0x860>
 8015e9c:	eeb1 7b47 	vneg.f64	d7, d7
 8015ea0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ea8:	f100 8257 	bmi.w	801635a <_dtoa_r+0x85a>
 8015eac:	ed8d 8b02 	vstr	d8, [sp, #8]
 8015eb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015eb2:	2a00      	cmp	r2, #0
 8015eb4:	f2c0 811c 	blt.w	80160f0 <_dtoa_r+0x5f0>
 8015eb8:	f1bb 0f0e 	cmp.w	fp, #14
 8015ebc:	f300 8118 	bgt.w	80160f0 <_dtoa_r+0x5f0>
 8015ec0:	4b89      	ldr	r3, [pc, #548]	; (80160e8 <_dtoa_r+0x5e8>)
 8015ec2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015ec6:	ed93 6b00 	vldr	d6, [r3]
 8015eca:	9b08      	ldr	r3, [sp, #32]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	f280 80b7 	bge.w	8016040 <_dtoa_r+0x540>
 8015ed2:	f1b9 0f00 	cmp.w	r9, #0
 8015ed6:	f300 80b3 	bgt.w	8016040 <_dtoa_r+0x540>
 8015eda:	f040 823e 	bne.w	801635a <_dtoa_r+0x85a>
 8015ede:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015ee2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8015ee6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015eea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ef2:	464c      	mov	r4, r9
 8015ef4:	464f      	mov	r7, r9
 8015ef6:	f280 8214 	bge.w	8016322 <_dtoa_r+0x822>
 8015efa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015efe:	2331      	movs	r3, #49	; 0x31
 8015f00:	f808 3b01 	strb.w	r3, [r8], #1
 8015f04:	f10b 0b01 	add.w	fp, fp, #1
 8015f08:	e210      	b.n	801632c <_dtoa_r+0x82c>
 8015f0a:	2202      	movs	r2, #2
 8015f0c:	e780      	b.n	8015e10 <_dtoa_r+0x310>
 8015f0e:	07cc      	lsls	r4, r1, #31
 8015f10:	d504      	bpl.n	8015f1c <_dtoa_r+0x41c>
 8015f12:	ed90 6b00 	vldr	d6, [r0]
 8015f16:	3201      	adds	r2, #1
 8015f18:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015f1c:	1049      	asrs	r1, r1, #1
 8015f1e:	3008      	adds	r0, #8
 8015f20:	e777      	b.n	8015e12 <_dtoa_r+0x312>
 8015f22:	d022      	beq.n	8015f6a <_dtoa_r+0x46a>
 8015f24:	f1cb 0100 	rsb	r1, fp, #0
 8015f28:	4a6f      	ldr	r2, [pc, #444]	; (80160e8 <_dtoa_r+0x5e8>)
 8015f2a:	f001 000f 	and.w	r0, r1, #15
 8015f2e:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8015f32:	ed92 7b00 	vldr	d7, [r2]
 8015f36:	ee28 7b07 	vmul.f64	d7, d8, d7
 8015f3a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015f3e:	486b      	ldr	r0, [pc, #428]	; (80160ec <_dtoa_r+0x5ec>)
 8015f40:	1109      	asrs	r1, r1, #4
 8015f42:	2400      	movs	r4, #0
 8015f44:	2202      	movs	r2, #2
 8015f46:	b929      	cbnz	r1, 8015f54 <_dtoa_r+0x454>
 8015f48:	2c00      	cmp	r4, #0
 8015f4a:	f43f af6a 	beq.w	8015e22 <_dtoa_r+0x322>
 8015f4e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015f52:	e766      	b.n	8015e22 <_dtoa_r+0x322>
 8015f54:	07cf      	lsls	r7, r1, #31
 8015f56:	d505      	bpl.n	8015f64 <_dtoa_r+0x464>
 8015f58:	ed90 6b00 	vldr	d6, [r0]
 8015f5c:	3201      	adds	r2, #1
 8015f5e:	2401      	movs	r4, #1
 8015f60:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015f64:	1049      	asrs	r1, r1, #1
 8015f66:	3008      	adds	r0, #8
 8015f68:	e7ed      	b.n	8015f46 <_dtoa_r+0x446>
 8015f6a:	2202      	movs	r2, #2
 8015f6c:	e759      	b.n	8015e22 <_dtoa_r+0x322>
 8015f6e:	465f      	mov	r7, fp
 8015f70:	4648      	mov	r0, r9
 8015f72:	e775      	b.n	8015e60 <_dtoa_r+0x360>
 8015f74:	ec42 1b17 	vmov	d7, r1, r2
 8015f78:	4a5b      	ldr	r2, [pc, #364]	; (80160e8 <_dtoa_r+0x5e8>)
 8015f7a:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8015f7e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8015f82:	9a01      	ldr	r2, [sp, #4]
 8015f84:	1814      	adds	r4, r2, r0
 8015f86:	9a07      	ldr	r2, [sp, #28]
 8015f88:	b352      	cbz	r2, 8015fe0 <_dtoa_r+0x4e0>
 8015f8a:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8015f8e:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8015f92:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015f96:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8015f9a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8015f9e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015fa2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015fa6:	ee14 2a90 	vmov	r2, s9
 8015faa:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015fae:	3230      	adds	r2, #48	; 0x30
 8015fb0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015fb4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fbc:	f808 2b01 	strb.w	r2, [r8], #1
 8015fc0:	d439      	bmi.n	8016036 <_dtoa_r+0x536>
 8015fc2:	ee32 5b46 	vsub.f64	d5, d2, d6
 8015fc6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8015fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fce:	d472      	bmi.n	80160b6 <_dtoa_r+0x5b6>
 8015fd0:	45a0      	cmp	r8, r4
 8015fd2:	f43f af6b 	beq.w	8015eac <_dtoa_r+0x3ac>
 8015fd6:	ee27 7b03 	vmul.f64	d7, d7, d3
 8015fda:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015fde:	e7e0      	b.n	8015fa2 <_dtoa_r+0x4a2>
 8015fe0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015fe4:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015fe8:	4621      	mov	r1, r4
 8015fea:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8015fee:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015ff2:	ee14 2a90 	vmov	r2, s9
 8015ff6:	3230      	adds	r2, #48	; 0x30
 8015ff8:	f808 2b01 	strb.w	r2, [r8], #1
 8015ffc:	45a0      	cmp	r8, r4
 8015ffe:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8016002:	ee36 6b45 	vsub.f64	d6, d6, d5
 8016006:	d118      	bne.n	801603a <_dtoa_r+0x53a>
 8016008:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801600c:	ee37 4b05 	vadd.f64	d4, d7, d5
 8016010:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8016014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016018:	dc4d      	bgt.n	80160b6 <_dtoa_r+0x5b6>
 801601a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801601e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016026:	f57f af41 	bpl.w	8015eac <_dtoa_r+0x3ac>
 801602a:	4688      	mov	r8, r1
 801602c:	3901      	subs	r1, #1
 801602e:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8016032:	2b30      	cmp	r3, #48	; 0x30
 8016034:	d0f9      	beq.n	801602a <_dtoa_r+0x52a>
 8016036:	46bb      	mov	fp, r7
 8016038:	e02a      	b.n	8016090 <_dtoa_r+0x590>
 801603a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801603e:	e7d6      	b.n	8015fee <_dtoa_r+0x4ee>
 8016040:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016044:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8016048:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801604c:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8016050:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8016054:	ee15 3a10 	vmov	r3, s10
 8016058:	3330      	adds	r3, #48	; 0x30
 801605a:	f808 3b01 	strb.w	r3, [r8], #1
 801605e:	9b01      	ldr	r3, [sp, #4]
 8016060:	eba8 0303 	sub.w	r3, r8, r3
 8016064:	4599      	cmp	r9, r3
 8016066:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801606a:	eea3 7b46 	vfms.f64	d7, d3, d6
 801606e:	d133      	bne.n	80160d8 <_dtoa_r+0x5d8>
 8016070:	ee37 7b07 	vadd.f64	d7, d7, d7
 8016074:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8016078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801607c:	dc1a      	bgt.n	80160b4 <_dtoa_r+0x5b4>
 801607e:	eeb4 7b46 	vcmp.f64	d7, d6
 8016082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016086:	d103      	bne.n	8016090 <_dtoa_r+0x590>
 8016088:	ee15 3a10 	vmov	r3, s10
 801608c:	07d9      	lsls	r1, r3, #31
 801608e:	d411      	bmi.n	80160b4 <_dtoa_r+0x5b4>
 8016090:	4629      	mov	r1, r5
 8016092:	4630      	mov	r0, r6
 8016094:	f000 ff05 	bl	8016ea2 <_Bfree>
 8016098:	2300      	movs	r3, #0
 801609a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801609c:	f888 3000 	strb.w	r3, [r8]
 80160a0:	f10b 0301 	add.w	r3, fp, #1
 80160a4:	6013      	str	r3, [r2, #0]
 80160a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	f43f ad64 	beq.w	8015b76 <_dtoa_r+0x76>
 80160ae:	f8c3 8000 	str.w	r8, [r3]
 80160b2:	e560      	b.n	8015b76 <_dtoa_r+0x76>
 80160b4:	465f      	mov	r7, fp
 80160b6:	4643      	mov	r3, r8
 80160b8:	4698      	mov	r8, r3
 80160ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80160be:	2a39      	cmp	r2, #57	; 0x39
 80160c0:	d106      	bne.n	80160d0 <_dtoa_r+0x5d0>
 80160c2:	9a01      	ldr	r2, [sp, #4]
 80160c4:	429a      	cmp	r2, r3
 80160c6:	d1f7      	bne.n	80160b8 <_dtoa_r+0x5b8>
 80160c8:	9901      	ldr	r1, [sp, #4]
 80160ca:	2230      	movs	r2, #48	; 0x30
 80160cc:	3701      	adds	r7, #1
 80160ce:	700a      	strb	r2, [r1, #0]
 80160d0:	781a      	ldrb	r2, [r3, #0]
 80160d2:	3201      	adds	r2, #1
 80160d4:	701a      	strb	r2, [r3, #0]
 80160d6:	e7ae      	b.n	8016036 <_dtoa_r+0x536>
 80160d8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80160dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80160e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160e4:	d1b2      	bne.n	801604c <_dtoa_r+0x54c>
 80160e6:	e7d3      	b.n	8016090 <_dtoa_r+0x590>
 80160e8:	08019680 	.word	0x08019680
 80160ec:	08019658 	.word	0x08019658
 80160f0:	9907      	ldr	r1, [sp, #28]
 80160f2:	2900      	cmp	r1, #0
 80160f4:	f000 80d0 	beq.w	8016298 <_dtoa_r+0x798>
 80160f8:	9906      	ldr	r1, [sp, #24]
 80160fa:	2901      	cmp	r1, #1
 80160fc:	f300 80b4 	bgt.w	8016268 <_dtoa_r+0x768>
 8016100:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016102:	2900      	cmp	r1, #0
 8016104:	f000 80ac 	beq.w	8016260 <_dtoa_r+0x760>
 8016108:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801610c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8016110:	461c      	mov	r4, r3
 8016112:	930a      	str	r3, [sp, #40]	; 0x28
 8016114:	9b04      	ldr	r3, [sp, #16]
 8016116:	4413      	add	r3, r2
 8016118:	9304      	str	r3, [sp, #16]
 801611a:	9b05      	ldr	r3, [sp, #20]
 801611c:	2101      	movs	r1, #1
 801611e:	4413      	add	r3, r2
 8016120:	4630      	mov	r0, r6
 8016122:	9305      	str	r3, [sp, #20]
 8016124:	f000 ff5c 	bl	8016fe0 <__i2b>
 8016128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801612a:	4607      	mov	r7, r0
 801612c:	f1b8 0f00 	cmp.w	r8, #0
 8016130:	dd0d      	ble.n	801614e <_dtoa_r+0x64e>
 8016132:	9a05      	ldr	r2, [sp, #20]
 8016134:	2a00      	cmp	r2, #0
 8016136:	dd0a      	ble.n	801614e <_dtoa_r+0x64e>
 8016138:	4542      	cmp	r2, r8
 801613a:	9904      	ldr	r1, [sp, #16]
 801613c:	bfa8      	it	ge
 801613e:	4642      	movge	r2, r8
 8016140:	1a89      	subs	r1, r1, r2
 8016142:	9104      	str	r1, [sp, #16]
 8016144:	9905      	ldr	r1, [sp, #20]
 8016146:	eba8 0802 	sub.w	r8, r8, r2
 801614a:	1a8a      	subs	r2, r1, r2
 801614c:	9205      	str	r2, [sp, #20]
 801614e:	b303      	cbz	r3, 8016192 <_dtoa_r+0x692>
 8016150:	9a07      	ldr	r2, [sp, #28]
 8016152:	2a00      	cmp	r2, #0
 8016154:	f000 80a5 	beq.w	80162a2 <_dtoa_r+0x7a2>
 8016158:	2c00      	cmp	r4, #0
 801615a:	dd13      	ble.n	8016184 <_dtoa_r+0x684>
 801615c:	4639      	mov	r1, r7
 801615e:	4622      	mov	r2, r4
 8016160:	4630      	mov	r0, r6
 8016162:	930d      	str	r3, [sp, #52]	; 0x34
 8016164:	f000 fffc 	bl	8017160 <__pow5mult>
 8016168:	462a      	mov	r2, r5
 801616a:	4601      	mov	r1, r0
 801616c:	4607      	mov	r7, r0
 801616e:	4630      	mov	r0, r6
 8016170:	f000 ff4c 	bl	801700c <__multiply>
 8016174:	4629      	mov	r1, r5
 8016176:	900a      	str	r0, [sp, #40]	; 0x28
 8016178:	4630      	mov	r0, r6
 801617a:	f000 fe92 	bl	8016ea2 <_Bfree>
 801617e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016180:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016182:	4615      	mov	r5, r2
 8016184:	1b1a      	subs	r2, r3, r4
 8016186:	d004      	beq.n	8016192 <_dtoa_r+0x692>
 8016188:	4629      	mov	r1, r5
 801618a:	4630      	mov	r0, r6
 801618c:	f000 ffe8 	bl	8017160 <__pow5mult>
 8016190:	4605      	mov	r5, r0
 8016192:	2101      	movs	r1, #1
 8016194:	4630      	mov	r0, r6
 8016196:	f000 ff23 	bl	8016fe0 <__i2b>
 801619a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801619c:	2b00      	cmp	r3, #0
 801619e:	4604      	mov	r4, r0
 80161a0:	f340 8081 	ble.w	80162a6 <_dtoa_r+0x7a6>
 80161a4:	461a      	mov	r2, r3
 80161a6:	4601      	mov	r1, r0
 80161a8:	4630      	mov	r0, r6
 80161aa:	f000 ffd9 	bl	8017160 <__pow5mult>
 80161ae:	9b06      	ldr	r3, [sp, #24]
 80161b0:	2b01      	cmp	r3, #1
 80161b2:	4604      	mov	r4, r0
 80161b4:	dd7a      	ble.n	80162ac <_dtoa_r+0x7ac>
 80161b6:	2300      	movs	r3, #0
 80161b8:	930a      	str	r3, [sp, #40]	; 0x28
 80161ba:	6922      	ldr	r2, [r4, #16]
 80161bc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80161c0:	6910      	ldr	r0, [r2, #16]
 80161c2:	f000 febd 	bl	8016f40 <__hi0bits>
 80161c6:	f1c0 0020 	rsb	r0, r0, #32
 80161ca:	9b05      	ldr	r3, [sp, #20]
 80161cc:	4418      	add	r0, r3
 80161ce:	f010 001f 	ands.w	r0, r0, #31
 80161d2:	f000 808c 	beq.w	80162ee <_dtoa_r+0x7ee>
 80161d6:	f1c0 0220 	rsb	r2, r0, #32
 80161da:	2a04      	cmp	r2, #4
 80161dc:	f340 8085 	ble.w	80162ea <_dtoa_r+0x7ea>
 80161e0:	f1c0 001c 	rsb	r0, r0, #28
 80161e4:	9b04      	ldr	r3, [sp, #16]
 80161e6:	4403      	add	r3, r0
 80161e8:	9304      	str	r3, [sp, #16]
 80161ea:	9b05      	ldr	r3, [sp, #20]
 80161ec:	4403      	add	r3, r0
 80161ee:	4480      	add	r8, r0
 80161f0:	9305      	str	r3, [sp, #20]
 80161f2:	9b04      	ldr	r3, [sp, #16]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	dd05      	ble.n	8016204 <_dtoa_r+0x704>
 80161f8:	4629      	mov	r1, r5
 80161fa:	461a      	mov	r2, r3
 80161fc:	4630      	mov	r0, r6
 80161fe:	f000 ffef 	bl	80171e0 <__lshift>
 8016202:	4605      	mov	r5, r0
 8016204:	9b05      	ldr	r3, [sp, #20]
 8016206:	2b00      	cmp	r3, #0
 8016208:	dd05      	ble.n	8016216 <_dtoa_r+0x716>
 801620a:	4621      	mov	r1, r4
 801620c:	461a      	mov	r2, r3
 801620e:	4630      	mov	r0, r6
 8016210:	f000 ffe6 	bl	80171e0 <__lshift>
 8016214:	4604      	mov	r4, r0
 8016216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016218:	2b00      	cmp	r3, #0
 801621a:	d06a      	beq.n	80162f2 <_dtoa_r+0x7f2>
 801621c:	4621      	mov	r1, r4
 801621e:	4628      	mov	r0, r5
 8016220:	f001 f84e 	bl	80172c0 <__mcmp>
 8016224:	2800      	cmp	r0, #0
 8016226:	da64      	bge.n	80162f2 <_dtoa_r+0x7f2>
 8016228:	2300      	movs	r3, #0
 801622a:	4629      	mov	r1, r5
 801622c:	220a      	movs	r2, #10
 801622e:	4630      	mov	r0, r6
 8016230:	f000 fe40 	bl	8016eb4 <__multadd>
 8016234:	9b07      	ldr	r3, [sp, #28]
 8016236:	f10b 3bff 	add.w	fp, fp, #4294967295
 801623a:	4605      	mov	r5, r0
 801623c:	2b00      	cmp	r3, #0
 801623e:	f000 8190 	beq.w	8016562 <_dtoa_r+0xa62>
 8016242:	4639      	mov	r1, r7
 8016244:	2300      	movs	r3, #0
 8016246:	220a      	movs	r2, #10
 8016248:	4630      	mov	r0, r6
 801624a:	f000 fe33 	bl	8016eb4 <__multadd>
 801624e:	f1ba 0f00 	cmp.w	sl, #0
 8016252:	4607      	mov	r7, r0
 8016254:	f300 808d 	bgt.w	8016372 <_dtoa_r+0x872>
 8016258:	9b06      	ldr	r3, [sp, #24]
 801625a:	2b02      	cmp	r3, #2
 801625c:	dc50      	bgt.n	8016300 <_dtoa_r+0x800>
 801625e:	e088      	b.n	8016372 <_dtoa_r+0x872>
 8016260:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016262:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016266:	e751      	b.n	801610c <_dtoa_r+0x60c>
 8016268:	f109 34ff 	add.w	r4, r9, #4294967295
 801626c:	42a3      	cmp	r3, r4
 801626e:	bfbf      	itttt	lt
 8016270:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8016272:	1ae3      	sublt	r3, r4, r3
 8016274:	18d2      	addlt	r2, r2, r3
 8016276:	9209      	strlt	r2, [sp, #36]	; 0x24
 8016278:	bfb6      	itet	lt
 801627a:	4623      	movlt	r3, r4
 801627c:	1b1c      	subge	r4, r3, r4
 801627e:	2400      	movlt	r4, #0
 8016280:	f1b9 0f00 	cmp.w	r9, #0
 8016284:	bfb5      	itete	lt
 8016286:	9a04      	ldrlt	r2, [sp, #16]
 8016288:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801628c:	eba2 0809 	sublt.w	r8, r2, r9
 8016290:	464a      	movge	r2, r9
 8016292:	bfb8      	it	lt
 8016294:	2200      	movlt	r2, #0
 8016296:	e73c      	b.n	8016112 <_dtoa_r+0x612>
 8016298:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801629c:	9f07      	ldr	r7, [sp, #28]
 801629e:	461c      	mov	r4, r3
 80162a0:	e744      	b.n	801612c <_dtoa_r+0x62c>
 80162a2:	461a      	mov	r2, r3
 80162a4:	e770      	b.n	8016188 <_dtoa_r+0x688>
 80162a6:	9b06      	ldr	r3, [sp, #24]
 80162a8:	2b01      	cmp	r3, #1
 80162aa:	dc18      	bgt.n	80162de <_dtoa_r+0x7de>
 80162ac:	9b02      	ldr	r3, [sp, #8]
 80162ae:	b9b3      	cbnz	r3, 80162de <_dtoa_r+0x7de>
 80162b0:	9b03      	ldr	r3, [sp, #12]
 80162b2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80162b6:	b9a2      	cbnz	r2, 80162e2 <_dtoa_r+0x7e2>
 80162b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80162bc:	0d12      	lsrs	r2, r2, #20
 80162be:	0512      	lsls	r2, r2, #20
 80162c0:	b18a      	cbz	r2, 80162e6 <_dtoa_r+0x7e6>
 80162c2:	9b04      	ldr	r3, [sp, #16]
 80162c4:	3301      	adds	r3, #1
 80162c6:	9304      	str	r3, [sp, #16]
 80162c8:	9b05      	ldr	r3, [sp, #20]
 80162ca:	3301      	adds	r3, #1
 80162cc:	9305      	str	r3, [sp, #20]
 80162ce:	2301      	movs	r3, #1
 80162d0:	930a      	str	r3, [sp, #40]	; 0x28
 80162d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	f47f af70 	bne.w	80161ba <_dtoa_r+0x6ba>
 80162da:	2001      	movs	r0, #1
 80162dc:	e775      	b.n	80161ca <_dtoa_r+0x6ca>
 80162de:	2300      	movs	r3, #0
 80162e0:	e7f6      	b.n	80162d0 <_dtoa_r+0x7d0>
 80162e2:	9b02      	ldr	r3, [sp, #8]
 80162e4:	e7f4      	b.n	80162d0 <_dtoa_r+0x7d0>
 80162e6:	920a      	str	r2, [sp, #40]	; 0x28
 80162e8:	e7f3      	b.n	80162d2 <_dtoa_r+0x7d2>
 80162ea:	d082      	beq.n	80161f2 <_dtoa_r+0x6f2>
 80162ec:	4610      	mov	r0, r2
 80162ee:	301c      	adds	r0, #28
 80162f0:	e778      	b.n	80161e4 <_dtoa_r+0x6e4>
 80162f2:	f1b9 0f00 	cmp.w	r9, #0
 80162f6:	dc37      	bgt.n	8016368 <_dtoa_r+0x868>
 80162f8:	9b06      	ldr	r3, [sp, #24]
 80162fa:	2b02      	cmp	r3, #2
 80162fc:	dd34      	ble.n	8016368 <_dtoa_r+0x868>
 80162fe:	46ca      	mov	sl, r9
 8016300:	f1ba 0f00 	cmp.w	sl, #0
 8016304:	d10d      	bne.n	8016322 <_dtoa_r+0x822>
 8016306:	4621      	mov	r1, r4
 8016308:	4653      	mov	r3, sl
 801630a:	2205      	movs	r2, #5
 801630c:	4630      	mov	r0, r6
 801630e:	f000 fdd1 	bl	8016eb4 <__multadd>
 8016312:	4601      	mov	r1, r0
 8016314:	4604      	mov	r4, r0
 8016316:	4628      	mov	r0, r5
 8016318:	f000 ffd2 	bl	80172c0 <__mcmp>
 801631c:	2800      	cmp	r0, #0
 801631e:	f73f adec 	bgt.w	8015efa <_dtoa_r+0x3fa>
 8016322:	9b08      	ldr	r3, [sp, #32]
 8016324:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016328:	ea6f 0b03 	mvn.w	fp, r3
 801632c:	f04f 0900 	mov.w	r9, #0
 8016330:	4621      	mov	r1, r4
 8016332:	4630      	mov	r0, r6
 8016334:	f000 fdb5 	bl	8016ea2 <_Bfree>
 8016338:	2f00      	cmp	r7, #0
 801633a:	f43f aea9 	beq.w	8016090 <_dtoa_r+0x590>
 801633e:	f1b9 0f00 	cmp.w	r9, #0
 8016342:	d005      	beq.n	8016350 <_dtoa_r+0x850>
 8016344:	45b9      	cmp	r9, r7
 8016346:	d003      	beq.n	8016350 <_dtoa_r+0x850>
 8016348:	4649      	mov	r1, r9
 801634a:	4630      	mov	r0, r6
 801634c:	f000 fda9 	bl	8016ea2 <_Bfree>
 8016350:	4639      	mov	r1, r7
 8016352:	4630      	mov	r0, r6
 8016354:	f000 fda5 	bl	8016ea2 <_Bfree>
 8016358:	e69a      	b.n	8016090 <_dtoa_r+0x590>
 801635a:	2400      	movs	r4, #0
 801635c:	4627      	mov	r7, r4
 801635e:	e7e0      	b.n	8016322 <_dtoa_r+0x822>
 8016360:	46bb      	mov	fp, r7
 8016362:	4604      	mov	r4, r0
 8016364:	4607      	mov	r7, r0
 8016366:	e5c8      	b.n	8015efa <_dtoa_r+0x3fa>
 8016368:	9b07      	ldr	r3, [sp, #28]
 801636a:	46ca      	mov	sl, r9
 801636c:	2b00      	cmp	r3, #0
 801636e:	f000 80ff 	beq.w	8016570 <_dtoa_r+0xa70>
 8016372:	f1b8 0f00 	cmp.w	r8, #0
 8016376:	dd05      	ble.n	8016384 <_dtoa_r+0x884>
 8016378:	4639      	mov	r1, r7
 801637a:	4642      	mov	r2, r8
 801637c:	4630      	mov	r0, r6
 801637e:	f000 ff2f 	bl	80171e0 <__lshift>
 8016382:	4607      	mov	r7, r0
 8016384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016386:	2b00      	cmp	r3, #0
 8016388:	d05c      	beq.n	8016444 <_dtoa_r+0x944>
 801638a:	6879      	ldr	r1, [r7, #4]
 801638c:	4630      	mov	r0, r6
 801638e:	f000 fd63 	bl	8016e58 <_Balloc>
 8016392:	4680      	mov	r8, r0
 8016394:	b920      	cbnz	r0, 80163a0 <_dtoa_r+0x8a0>
 8016396:	4b82      	ldr	r3, [pc, #520]	; (80165a0 <_dtoa_r+0xaa0>)
 8016398:	4602      	mov	r2, r0
 801639a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801639e:	e4cf      	b.n	8015d40 <_dtoa_r+0x240>
 80163a0:	693a      	ldr	r2, [r7, #16]
 80163a2:	3202      	adds	r2, #2
 80163a4:	0092      	lsls	r2, r2, #2
 80163a6:	f107 010c 	add.w	r1, r7, #12
 80163aa:	300c      	adds	r0, #12
 80163ac:	f000 fd2c 	bl	8016e08 <memcpy>
 80163b0:	2201      	movs	r2, #1
 80163b2:	4641      	mov	r1, r8
 80163b4:	4630      	mov	r0, r6
 80163b6:	f000 ff13 	bl	80171e0 <__lshift>
 80163ba:	9b01      	ldr	r3, [sp, #4]
 80163bc:	3301      	adds	r3, #1
 80163be:	9304      	str	r3, [sp, #16]
 80163c0:	9b01      	ldr	r3, [sp, #4]
 80163c2:	4453      	add	r3, sl
 80163c4:	9308      	str	r3, [sp, #32]
 80163c6:	9b02      	ldr	r3, [sp, #8]
 80163c8:	f003 0301 	and.w	r3, r3, #1
 80163cc:	46b9      	mov	r9, r7
 80163ce:	9307      	str	r3, [sp, #28]
 80163d0:	4607      	mov	r7, r0
 80163d2:	9b04      	ldr	r3, [sp, #16]
 80163d4:	4621      	mov	r1, r4
 80163d6:	3b01      	subs	r3, #1
 80163d8:	4628      	mov	r0, r5
 80163da:	9302      	str	r3, [sp, #8]
 80163dc:	f7ff fb04 	bl	80159e8 <quorem>
 80163e0:	4603      	mov	r3, r0
 80163e2:	3330      	adds	r3, #48	; 0x30
 80163e4:	9005      	str	r0, [sp, #20]
 80163e6:	4649      	mov	r1, r9
 80163e8:	4628      	mov	r0, r5
 80163ea:	9309      	str	r3, [sp, #36]	; 0x24
 80163ec:	f000 ff68 	bl	80172c0 <__mcmp>
 80163f0:	463a      	mov	r2, r7
 80163f2:	4682      	mov	sl, r0
 80163f4:	4621      	mov	r1, r4
 80163f6:	4630      	mov	r0, r6
 80163f8:	f000 ff7e 	bl	80172f8 <__mdiff>
 80163fc:	68c2      	ldr	r2, [r0, #12]
 80163fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016400:	4680      	mov	r8, r0
 8016402:	bb0a      	cbnz	r2, 8016448 <_dtoa_r+0x948>
 8016404:	4601      	mov	r1, r0
 8016406:	4628      	mov	r0, r5
 8016408:	f000 ff5a 	bl	80172c0 <__mcmp>
 801640c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801640e:	4602      	mov	r2, r0
 8016410:	4641      	mov	r1, r8
 8016412:	4630      	mov	r0, r6
 8016414:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8016418:	f000 fd43 	bl	8016ea2 <_Bfree>
 801641c:	9b06      	ldr	r3, [sp, #24]
 801641e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016420:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8016424:	ea43 0102 	orr.w	r1, r3, r2
 8016428:	9b07      	ldr	r3, [sp, #28]
 801642a:	430b      	orrs	r3, r1
 801642c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801642e:	d10d      	bne.n	801644c <_dtoa_r+0x94c>
 8016430:	2b39      	cmp	r3, #57	; 0x39
 8016432:	d029      	beq.n	8016488 <_dtoa_r+0x988>
 8016434:	f1ba 0f00 	cmp.w	sl, #0
 8016438:	dd01      	ble.n	801643e <_dtoa_r+0x93e>
 801643a:	9b05      	ldr	r3, [sp, #20]
 801643c:	3331      	adds	r3, #49	; 0x31
 801643e:	9a02      	ldr	r2, [sp, #8]
 8016440:	7013      	strb	r3, [r2, #0]
 8016442:	e775      	b.n	8016330 <_dtoa_r+0x830>
 8016444:	4638      	mov	r0, r7
 8016446:	e7b8      	b.n	80163ba <_dtoa_r+0x8ba>
 8016448:	2201      	movs	r2, #1
 801644a:	e7e1      	b.n	8016410 <_dtoa_r+0x910>
 801644c:	f1ba 0f00 	cmp.w	sl, #0
 8016450:	db06      	blt.n	8016460 <_dtoa_r+0x960>
 8016452:	9906      	ldr	r1, [sp, #24]
 8016454:	ea41 0a0a 	orr.w	sl, r1, sl
 8016458:	9907      	ldr	r1, [sp, #28]
 801645a:	ea5a 0101 	orrs.w	r1, sl, r1
 801645e:	d120      	bne.n	80164a2 <_dtoa_r+0x9a2>
 8016460:	2a00      	cmp	r2, #0
 8016462:	ddec      	ble.n	801643e <_dtoa_r+0x93e>
 8016464:	4629      	mov	r1, r5
 8016466:	2201      	movs	r2, #1
 8016468:	4630      	mov	r0, r6
 801646a:	9304      	str	r3, [sp, #16]
 801646c:	f000 feb8 	bl	80171e0 <__lshift>
 8016470:	4621      	mov	r1, r4
 8016472:	4605      	mov	r5, r0
 8016474:	f000 ff24 	bl	80172c0 <__mcmp>
 8016478:	2800      	cmp	r0, #0
 801647a:	9b04      	ldr	r3, [sp, #16]
 801647c:	dc02      	bgt.n	8016484 <_dtoa_r+0x984>
 801647e:	d1de      	bne.n	801643e <_dtoa_r+0x93e>
 8016480:	07da      	lsls	r2, r3, #31
 8016482:	d5dc      	bpl.n	801643e <_dtoa_r+0x93e>
 8016484:	2b39      	cmp	r3, #57	; 0x39
 8016486:	d1d8      	bne.n	801643a <_dtoa_r+0x93a>
 8016488:	9a02      	ldr	r2, [sp, #8]
 801648a:	2339      	movs	r3, #57	; 0x39
 801648c:	7013      	strb	r3, [r2, #0]
 801648e:	4643      	mov	r3, r8
 8016490:	4698      	mov	r8, r3
 8016492:	3b01      	subs	r3, #1
 8016494:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8016498:	2a39      	cmp	r2, #57	; 0x39
 801649a:	d051      	beq.n	8016540 <_dtoa_r+0xa40>
 801649c:	3201      	adds	r2, #1
 801649e:	701a      	strb	r2, [r3, #0]
 80164a0:	e746      	b.n	8016330 <_dtoa_r+0x830>
 80164a2:	2a00      	cmp	r2, #0
 80164a4:	dd03      	ble.n	80164ae <_dtoa_r+0x9ae>
 80164a6:	2b39      	cmp	r3, #57	; 0x39
 80164a8:	d0ee      	beq.n	8016488 <_dtoa_r+0x988>
 80164aa:	3301      	adds	r3, #1
 80164ac:	e7c7      	b.n	801643e <_dtoa_r+0x93e>
 80164ae:	9a04      	ldr	r2, [sp, #16]
 80164b0:	9908      	ldr	r1, [sp, #32]
 80164b2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80164b6:	428a      	cmp	r2, r1
 80164b8:	d02b      	beq.n	8016512 <_dtoa_r+0xa12>
 80164ba:	4629      	mov	r1, r5
 80164bc:	2300      	movs	r3, #0
 80164be:	220a      	movs	r2, #10
 80164c0:	4630      	mov	r0, r6
 80164c2:	f000 fcf7 	bl	8016eb4 <__multadd>
 80164c6:	45b9      	cmp	r9, r7
 80164c8:	4605      	mov	r5, r0
 80164ca:	f04f 0300 	mov.w	r3, #0
 80164ce:	f04f 020a 	mov.w	r2, #10
 80164d2:	4649      	mov	r1, r9
 80164d4:	4630      	mov	r0, r6
 80164d6:	d107      	bne.n	80164e8 <_dtoa_r+0x9e8>
 80164d8:	f000 fcec 	bl	8016eb4 <__multadd>
 80164dc:	4681      	mov	r9, r0
 80164de:	4607      	mov	r7, r0
 80164e0:	9b04      	ldr	r3, [sp, #16]
 80164e2:	3301      	adds	r3, #1
 80164e4:	9304      	str	r3, [sp, #16]
 80164e6:	e774      	b.n	80163d2 <_dtoa_r+0x8d2>
 80164e8:	f000 fce4 	bl	8016eb4 <__multadd>
 80164ec:	4639      	mov	r1, r7
 80164ee:	4681      	mov	r9, r0
 80164f0:	2300      	movs	r3, #0
 80164f2:	220a      	movs	r2, #10
 80164f4:	4630      	mov	r0, r6
 80164f6:	f000 fcdd 	bl	8016eb4 <__multadd>
 80164fa:	4607      	mov	r7, r0
 80164fc:	e7f0      	b.n	80164e0 <_dtoa_r+0x9e0>
 80164fe:	f1ba 0f00 	cmp.w	sl, #0
 8016502:	9a01      	ldr	r2, [sp, #4]
 8016504:	bfcc      	ite	gt
 8016506:	46d0      	movgt	r8, sl
 8016508:	f04f 0801 	movle.w	r8, #1
 801650c:	4490      	add	r8, r2
 801650e:	f04f 0900 	mov.w	r9, #0
 8016512:	4629      	mov	r1, r5
 8016514:	2201      	movs	r2, #1
 8016516:	4630      	mov	r0, r6
 8016518:	9302      	str	r3, [sp, #8]
 801651a:	f000 fe61 	bl	80171e0 <__lshift>
 801651e:	4621      	mov	r1, r4
 8016520:	4605      	mov	r5, r0
 8016522:	f000 fecd 	bl	80172c0 <__mcmp>
 8016526:	2800      	cmp	r0, #0
 8016528:	dcb1      	bgt.n	801648e <_dtoa_r+0x98e>
 801652a:	d102      	bne.n	8016532 <_dtoa_r+0xa32>
 801652c:	9b02      	ldr	r3, [sp, #8]
 801652e:	07db      	lsls	r3, r3, #31
 8016530:	d4ad      	bmi.n	801648e <_dtoa_r+0x98e>
 8016532:	4643      	mov	r3, r8
 8016534:	4698      	mov	r8, r3
 8016536:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801653a:	2a30      	cmp	r2, #48	; 0x30
 801653c:	d0fa      	beq.n	8016534 <_dtoa_r+0xa34>
 801653e:	e6f7      	b.n	8016330 <_dtoa_r+0x830>
 8016540:	9a01      	ldr	r2, [sp, #4]
 8016542:	429a      	cmp	r2, r3
 8016544:	d1a4      	bne.n	8016490 <_dtoa_r+0x990>
 8016546:	f10b 0b01 	add.w	fp, fp, #1
 801654a:	2331      	movs	r3, #49	; 0x31
 801654c:	e778      	b.n	8016440 <_dtoa_r+0x940>
 801654e:	4b15      	ldr	r3, [pc, #84]	; (80165a4 <_dtoa_r+0xaa4>)
 8016550:	f7ff bb2c 	b.w	8015bac <_dtoa_r+0xac>
 8016554:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016556:	2b00      	cmp	r3, #0
 8016558:	f47f ab13 	bne.w	8015b82 <_dtoa_r+0x82>
 801655c:	4b12      	ldr	r3, [pc, #72]	; (80165a8 <_dtoa_r+0xaa8>)
 801655e:	f7ff bb25 	b.w	8015bac <_dtoa_r+0xac>
 8016562:	f1ba 0f00 	cmp.w	sl, #0
 8016566:	dc03      	bgt.n	8016570 <_dtoa_r+0xa70>
 8016568:	9b06      	ldr	r3, [sp, #24]
 801656a:	2b02      	cmp	r3, #2
 801656c:	f73f aec8 	bgt.w	8016300 <_dtoa_r+0x800>
 8016570:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016574:	4621      	mov	r1, r4
 8016576:	4628      	mov	r0, r5
 8016578:	f7ff fa36 	bl	80159e8 <quorem>
 801657c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8016580:	f808 3b01 	strb.w	r3, [r8], #1
 8016584:	9a01      	ldr	r2, [sp, #4]
 8016586:	eba8 0202 	sub.w	r2, r8, r2
 801658a:	4592      	cmp	sl, r2
 801658c:	ddb7      	ble.n	80164fe <_dtoa_r+0x9fe>
 801658e:	4629      	mov	r1, r5
 8016590:	2300      	movs	r3, #0
 8016592:	220a      	movs	r2, #10
 8016594:	4630      	mov	r0, r6
 8016596:	f000 fc8d 	bl	8016eb4 <__multadd>
 801659a:	4605      	mov	r5, r0
 801659c:	e7ea      	b.n	8016574 <_dtoa_r+0xa74>
 801659e:	bf00      	nop
 80165a0:	08019589 	.word	0x08019589
 80165a4:	0801953a 	.word	0x0801953a
 80165a8:	08019580 	.word	0x08019580

080165ac <__errno>:
 80165ac:	4b01      	ldr	r3, [pc, #4]	; (80165b4 <__errno+0x8>)
 80165ae:	6818      	ldr	r0, [r3, #0]
 80165b0:	4770      	bx	lr
 80165b2:	bf00      	nop
 80165b4:	200004bc 	.word	0x200004bc

080165b8 <__sflush_r>:
 80165b8:	898b      	ldrh	r3, [r1, #12]
 80165ba:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80165be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165c2:	4605      	mov	r5, r0
 80165c4:	0718      	lsls	r0, r3, #28
 80165c6:	460c      	mov	r4, r1
 80165c8:	d45f      	bmi.n	801668a <__sflush_r+0xd2>
 80165ca:	684b      	ldr	r3, [r1, #4]
 80165cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	818a      	strh	r2, [r1, #12]
 80165d4:	dc05      	bgt.n	80165e2 <__sflush_r+0x2a>
 80165d6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80165d8:	2b00      	cmp	r3, #0
 80165da:	dc02      	bgt.n	80165e2 <__sflush_r+0x2a>
 80165dc:	2000      	movs	r0, #0
 80165de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80165e4:	2e00      	cmp	r6, #0
 80165e6:	d0f9      	beq.n	80165dc <__sflush_r+0x24>
 80165e8:	2300      	movs	r3, #0
 80165ea:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80165ee:	682f      	ldr	r7, [r5, #0]
 80165f0:	602b      	str	r3, [r5, #0]
 80165f2:	d036      	beq.n	8016662 <__sflush_r+0xaa>
 80165f4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80165f6:	89a3      	ldrh	r3, [r4, #12]
 80165f8:	075a      	lsls	r2, r3, #29
 80165fa:	d505      	bpl.n	8016608 <__sflush_r+0x50>
 80165fc:	6863      	ldr	r3, [r4, #4]
 80165fe:	1ac0      	subs	r0, r0, r3
 8016600:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016602:	b10b      	cbz	r3, 8016608 <__sflush_r+0x50>
 8016604:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016606:	1ac0      	subs	r0, r0, r3
 8016608:	2300      	movs	r3, #0
 801660a:	4602      	mov	r2, r0
 801660c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801660e:	69e1      	ldr	r1, [r4, #28]
 8016610:	4628      	mov	r0, r5
 8016612:	47b0      	blx	r6
 8016614:	1c43      	adds	r3, r0, #1
 8016616:	89a3      	ldrh	r3, [r4, #12]
 8016618:	d106      	bne.n	8016628 <__sflush_r+0x70>
 801661a:	6829      	ldr	r1, [r5, #0]
 801661c:	291d      	cmp	r1, #29
 801661e:	d830      	bhi.n	8016682 <__sflush_r+0xca>
 8016620:	4a2b      	ldr	r2, [pc, #172]	; (80166d0 <__sflush_r+0x118>)
 8016622:	40ca      	lsrs	r2, r1
 8016624:	07d6      	lsls	r6, r2, #31
 8016626:	d52c      	bpl.n	8016682 <__sflush_r+0xca>
 8016628:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801662c:	b21b      	sxth	r3, r3
 801662e:	2200      	movs	r2, #0
 8016630:	6062      	str	r2, [r4, #4]
 8016632:	04d9      	lsls	r1, r3, #19
 8016634:	6922      	ldr	r2, [r4, #16]
 8016636:	81a3      	strh	r3, [r4, #12]
 8016638:	6022      	str	r2, [r4, #0]
 801663a:	d504      	bpl.n	8016646 <__sflush_r+0x8e>
 801663c:	1c42      	adds	r2, r0, #1
 801663e:	d101      	bne.n	8016644 <__sflush_r+0x8c>
 8016640:	682b      	ldr	r3, [r5, #0]
 8016642:	b903      	cbnz	r3, 8016646 <__sflush_r+0x8e>
 8016644:	6520      	str	r0, [r4, #80]	; 0x50
 8016646:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016648:	602f      	str	r7, [r5, #0]
 801664a:	2900      	cmp	r1, #0
 801664c:	d0c6      	beq.n	80165dc <__sflush_r+0x24>
 801664e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8016652:	4299      	cmp	r1, r3
 8016654:	d002      	beq.n	801665c <__sflush_r+0xa4>
 8016656:	4628      	mov	r0, r5
 8016658:	f000 f938 	bl	80168cc <_free_r>
 801665c:	2000      	movs	r0, #0
 801665e:	6320      	str	r0, [r4, #48]	; 0x30
 8016660:	e7bd      	b.n	80165de <__sflush_r+0x26>
 8016662:	69e1      	ldr	r1, [r4, #28]
 8016664:	2301      	movs	r3, #1
 8016666:	4628      	mov	r0, r5
 8016668:	47b0      	blx	r6
 801666a:	1c41      	adds	r1, r0, #1
 801666c:	d1c3      	bne.n	80165f6 <__sflush_r+0x3e>
 801666e:	682b      	ldr	r3, [r5, #0]
 8016670:	2b00      	cmp	r3, #0
 8016672:	d0c0      	beq.n	80165f6 <__sflush_r+0x3e>
 8016674:	2b1d      	cmp	r3, #29
 8016676:	d001      	beq.n	801667c <__sflush_r+0xc4>
 8016678:	2b16      	cmp	r3, #22
 801667a:	d101      	bne.n	8016680 <__sflush_r+0xc8>
 801667c:	602f      	str	r7, [r5, #0]
 801667e:	e7ad      	b.n	80165dc <__sflush_r+0x24>
 8016680:	89a3      	ldrh	r3, [r4, #12]
 8016682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016686:	81a3      	strh	r3, [r4, #12]
 8016688:	e7a9      	b.n	80165de <__sflush_r+0x26>
 801668a:	690f      	ldr	r7, [r1, #16]
 801668c:	2f00      	cmp	r7, #0
 801668e:	d0a5      	beq.n	80165dc <__sflush_r+0x24>
 8016690:	079b      	lsls	r3, r3, #30
 8016692:	680e      	ldr	r6, [r1, #0]
 8016694:	bf08      	it	eq
 8016696:	694b      	ldreq	r3, [r1, #20]
 8016698:	600f      	str	r7, [r1, #0]
 801669a:	bf18      	it	ne
 801669c:	2300      	movne	r3, #0
 801669e:	eba6 0807 	sub.w	r8, r6, r7
 80166a2:	608b      	str	r3, [r1, #8]
 80166a4:	f1b8 0f00 	cmp.w	r8, #0
 80166a8:	dd98      	ble.n	80165dc <__sflush_r+0x24>
 80166aa:	69e1      	ldr	r1, [r4, #28]
 80166ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80166ae:	4643      	mov	r3, r8
 80166b0:	463a      	mov	r2, r7
 80166b2:	4628      	mov	r0, r5
 80166b4:	47b0      	blx	r6
 80166b6:	2800      	cmp	r0, #0
 80166b8:	dc06      	bgt.n	80166c8 <__sflush_r+0x110>
 80166ba:	89a3      	ldrh	r3, [r4, #12]
 80166bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80166c0:	81a3      	strh	r3, [r4, #12]
 80166c2:	f04f 30ff 	mov.w	r0, #4294967295
 80166c6:	e78a      	b.n	80165de <__sflush_r+0x26>
 80166c8:	4407      	add	r7, r0
 80166ca:	eba8 0800 	sub.w	r8, r8, r0
 80166ce:	e7e9      	b.n	80166a4 <__sflush_r+0xec>
 80166d0:	20400001 	.word	0x20400001

080166d4 <_fflush_r>:
 80166d4:	b538      	push	{r3, r4, r5, lr}
 80166d6:	460c      	mov	r4, r1
 80166d8:	4605      	mov	r5, r0
 80166da:	b118      	cbz	r0, 80166e4 <_fflush_r+0x10>
 80166dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80166de:	b90b      	cbnz	r3, 80166e4 <_fflush_r+0x10>
 80166e0:	f000 f864 	bl	80167ac <__sinit>
 80166e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80166e8:	b1bb      	cbz	r3, 801671a <_fflush_r+0x46>
 80166ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80166ec:	07d0      	lsls	r0, r2, #31
 80166ee:	d404      	bmi.n	80166fa <_fflush_r+0x26>
 80166f0:	0599      	lsls	r1, r3, #22
 80166f2:	d402      	bmi.n	80166fa <_fflush_r+0x26>
 80166f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80166f6:	f000 fb19 	bl	8016d2c <__retarget_lock_acquire_recursive>
 80166fa:	4628      	mov	r0, r5
 80166fc:	4621      	mov	r1, r4
 80166fe:	f7ff ff5b 	bl	80165b8 <__sflush_r>
 8016702:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016704:	07da      	lsls	r2, r3, #31
 8016706:	4605      	mov	r5, r0
 8016708:	d405      	bmi.n	8016716 <_fflush_r+0x42>
 801670a:	89a3      	ldrh	r3, [r4, #12]
 801670c:	059b      	lsls	r3, r3, #22
 801670e:	d402      	bmi.n	8016716 <_fflush_r+0x42>
 8016710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016712:	f000 fb0c 	bl	8016d2e <__retarget_lock_release_recursive>
 8016716:	4628      	mov	r0, r5
 8016718:	bd38      	pop	{r3, r4, r5, pc}
 801671a:	461d      	mov	r5, r3
 801671c:	e7fb      	b.n	8016716 <_fflush_r+0x42>
	...

08016720 <std>:
 8016720:	2300      	movs	r3, #0
 8016722:	b510      	push	{r4, lr}
 8016724:	4604      	mov	r4, r0
 8016726:	e9c0 3300 	strd	r3, r3, [r0]
 801672a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801672e:	6083      	str	r3, [r0, #8]
 8016730:	8181      	strh	r1, [r0, #12]
 8016732:	6643      	str	r3, [r0, #100]	; 0x64
 8016734:	81c2      	strh	r2, [r0, #14]
 8016736:	6183      	str	r3, [r0, #24]
 8016738:	4619      	mov	r1, r3
 801673a:	2208      	movs	r2, #8
 801673c:	305c      	adds	r0, #92	; 0x5c
 801673e:	f7fc fbe1 	bl	8012f04 <memset>
 8016742:	4b07      	ldr	r3, [pc, #28]	; (8016760 <std+0x40>)
 8016744:	6223      	str	r3, [r4, #32]
 8016746:	4b07      	ldr	r3, [pc, #28]	; (8016764 <std+0x44>)
 8016748:	6263      	str	r3, [r4, #36]	; 0x24
 801674a:	4b07      	ldr	r3, [pc, #28]	; (8016768 <std+0x48>)
 801674c:	62a3      	str	r3, [r4, #40]	; 0x28
 801674e:	4b07      	ldr	r3, [pc, #28]	; (801676c <std+0x4c>)
 8016750:	61e4      	str	r4, [r4, #28]
 8016752:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016754:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801675c:	f000 bae4 	b.w	8016d28 <__retarget_lock_init_recursive>
 8016760:	080178e9 	.word	0x080178e9
 8016764:	0801790b 	.word	0x0801790b
 8016768:	08017943 	.word	0x08017943
 801676c:	08017967 	.word	0x08017967

08016770 <_cleanup_r>:
 8016770:	4901      	ldr	r1, [pc, #4]	; (8016778 <_cleanup_r+0x8>)
 8016772:	f000 bab5 	b.w	8016ce0 <_fwalk_reent>
 8016776:	bf00      	nop
 8016778:	080186a1 	.word	0x080186a1

0801677c <__sfp_lock_acquire>:
 801677c:	4801      	ldr	r0, [pc, #4]	; (8016784 <__sfp_lock_acquire+0x8>)
 801677e:	f000 bad5 	b.w	8016d2c <__retarget_lock_acquire_recursive>
 8016782:	bf00      	nop
 8016784:	20006636 	.word	0x20006636

08016788 <__sfp_lock_release>:
 8016788:	4801      	ldr	r0, [pc, #4]	; (8016790 <__sfp_lock_release+0x8>)
 801678a:	f000 bad0 	b.w	8016d2e <__retarget_lock_release_recursive>
 801678e:	bf00      	nop
 8016790:	20006636 	.word	0x20006636

08016794 <__sinit_lock_acquire>:
 8016794:	4801      	ldr	r0, [pc, #4]	; (801679c <__sinit_lock_acquire+0x8>)
 8016796:	f000 bac9 	b.w	8016d2c <__retarget_lock_acquire_recursive>
 801679a:	bf00      	nop
 801679c:	20006637 	.word	0x20006637

080167a0 <__sinit_lock_release>:
 80167a0:	4801      	ldr	r0, [pc, #4]	; (80167a8 <__sinit_lock_release+0x8>)
 80167a2:	f000 bac4 	b.w	8016d2e <__retarget_lock_release_recursive>
 80167a6:	bf00      	nop
 80167a8:	20006637 	.word	0x20006637

080167ac <__sinit>:
 80167ac:	b510      	push	{r4, lr}
 80167ae:	4604      	mov	r4, r0
 80167b0:	f7ff fff0 	bl	8016794 <__sinit_lock_acquire>
 80167b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80167b6:	b11a      	cbz	r2, 80167c0 <__sinit+0x14>
 80167b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167bc:	f7ff bff0 	b.w	80167a0 <__sinit_lock_release>
 80167c0:	4b0d      	ldr	r3, [pc, #52]	; (80167f8 <__sinit+0x4c>)
 80167c2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80167c4:	2303      	movs	r3, #3
 80167c6:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 80167ca:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 80167ce:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 80167d2:	6860      	ldr	r0, [r4, #4]
 80167d4:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 80167d8:	2104      	movs	r1, #4
 80167da:	f7ff ffa1 	bl	8016720 <std>
 80167de:	68a0      	ldr	r0, [r4, #8]
 80167e0:	2201      	movs	r2, #1
 80167e2:	2109      	movs	r1, #9
 80167e4:	f7ff ff9c 	bl	8016720 <std>
 80167e8:	68e0      	ldr	r0, [r4, #12]
 80167ea:	2202      	movs	r2, #2
 80167ec:	2112      	movs	r1, #18
 80167ee:	f7ff ff97 	bl	8016720 <std>
 80167f2:	2301      	movs	r3, #1
 80167f4:	63a3      	str	r3, [r4, #56]	; 0x38
 80167f6:	e7df      	b.n	80167b8 <__sinit+0xc>
 80167f8:	08016771 	.word	0x08016771

080167fc <__libc_fini_array>:
 80167fc:	b538      	push	{r3, r4, r5, lr}
 80167fe:	4d07      	ldr	r5, [pc, #28]	; (801681c <__libc_fini_array+0x20>)
 8016800:	4c07      	ldr	r4, [pc, #28]	; (8016820 <__libc_fini_array+0x24>)
 8016802:	1b64      	subs	r4, r4, r5
 8016804:	10a4      	asrs	r4, r4, #2
 8016806:	b91c      	cbnz	r4, 8016810 <__libc_fini_array+0x14>
 8016808:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801680c:	f002 bc56 	b.w	80190bc <_fini>
 8016810:	3c01      	subs	r4, #1
 8016812:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8016816:	4798      	blx	r3
 8016818:	e7f5      	b.n	8016806 <__libc_fini_array+0xa>
 801681a:	bf00      	nop
 801681c:	0801b188 	.word	0x0801b188
 8016820:	0801b18c 	.word	0x0801b18c

08016824 <_malloc_trim_r>:
 8016824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016828:	4606      	mov	r6, r0
 801682a:	2008      	movs	r0, #8
 801682c:	460c      	mov	r4, r1
 801682e:	f7fd fe01 	bl	8014434 <sysconf>
 8016832:	4f23      	ldr	r7, [pc, #140]	; (80168c0 <_malloc_trim_r+0x9c>)
 8016834:	4680      	mov	r8, r0
 8016836:	4630      	mov	r0, r6
 8016838:	f7fc fb6c 	bl	8012f14 <__malloc_lock>
 801683c:	68bb      	ldr	r3, [r7, #8]
 801683e:	685d      	ldr	r5, [r3, #4]
 8016840:	f025 0503 	bic.w	r5, r5, #3
 8016844:	1b2c      	subs	r4, r5, r4
 8016846:	3c11      	subs	r4, #17
 8016848:	4444      	add	r4, r8
 801684a:	fbb4 f4f8 	udiv	r4, r4, r8
 801684e:	3c01      	subs	r4, #1
 8016850:	fb08 f404 	mul.w	r4, r8, r4
 8016854:	45a0      	cmp	r8, r4
 8016856:	dd05      	ble.n	8016864 <_malloc_trim_r+0x40>
 8016858:	4630      	mov	r0, r6
 801685a:	f7fc fb61 	bl	8012f20 <__malloc_unlock>
 801685e:	2000      	movs	r0, #0
 8016860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016864:	2100      	movs	r1, #0
 8016866:	4630      	mov	r0, r6
 8016868:	f7fc fbc8 	bl	8012ffc <_sbrk_r>
 801686c:	68bb      	ldr	r3, [r7, #8]
 801686e:	442b      	add	r3, r5
 8016870:	4298      	cmp	r0, r3
 8016872:	d1f1      	bne.n	8016858 <_malloc_trim_r+0x34>
 8016874:	4261      	negs	r1, r4
 8016876:	4630      	mov	r0, r6
 8016878:	f7fc fbc0 	bl	8012ffc <_sbrk_r>
 801687c:	3001      	adds	r0, #1
 801687e:	d110      	bne.n	80168a2 <_malloc_trim_r+0x7e>
 8016880:	2100      	movs	r1, #0
 8016882:	4630      	mov	r0, r6
 8016884:	f7fc fbba 	bl	8012ffc <_sbrk_r>
 8016888:	68ba      	ldr	r2, [r7, #8]
 801688a:	1a83      	subs	r3, r0, r2
 801688c:	2b0f      	cmp	r3, #15
 801688e:	dde3      	ble.n	8016858 <_malloc_trim_r+0x34>
 8016890:	490c      	ldr	r1, [pc, #48]	; (80168c4 <_malloc_trim_r+0xa0>)
 8016892:	6809      	ldr	r1, [r1, #0]
 8016894:	1a40      	subs	r0, r0, r1
 8016896:	490c      	ldr	r1, [pc, #48]	; (80168c8 <_malloc_trim_r+0xa4>)
 8016898:	f043 0301 	orr.w	r3, r3, #1
 801689c:	6008      	str	r0, [r1, #0]
 801689e:	6053      	str	r3, [r2, #4]
 80168a0:	e7da      	b.n	8016858 <_malloc_trim_r+0x34>
 80168a2:	68bb      	ldr	r3, [r7, #8]
 80168a4:	4a08      	ldr	r2, [pc, #32]	; (80168c8 <_malloc_trim_r+0xa4>)
 80168a6:	1b2d      	subs	r5, r5, r4
 80168a8:	f045 0501 	orr.w	r5, r5, #1
 80168ac:	605d      	str	r5, [r3, #4]
 80168ae:	6813      	ldr	r3, [r2, #0]
 80168b0:	4630      	mov	r0, r6
 80168b2:	1b1b      	subs	r3, r3, r4
 80168b4:	6013      	str	r3, [r2, #0]
 80168b6:	f7fc fb33 	bl	8012f20 <__malloc_unlock>
 80168ba:	2001      	movs	r0, #1
 80168bc:	e7d0      	b.n	8016860 <_malloc_trim_r+0x3c>
 80168be:	bf00      	nop
 80168c0:	200008e8 	.word	0x200008e8
 80168c4:	20000cf0 	.word	0x20000cf0
 80168c8:	20006600 	.word	0x20006600

080168cc <_free_r>:
 80168cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168ce:	4605      	mov	r5, r0
 80168d0:	460f      	mov	r7, r1
 80168d2:	2900      	cmp	r1, #0
 80168d4:	f000 80b1 	beq.w	8016a3a <_free_r+0x16e>
 80168d8:	f7fc fb1c 	bl	8012f14 <__malloc_lock>
 80168dc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80168e0:	4856      	ldr	r0, [pc, #344]	; (8016a3c <_free_r+0x170>)
 80168e2:	f022 0401 	bic.w	r4, r2, #1
 80168e6:	f1a7 0308 	sub.w	r3, r7, #8
 80168ea:	eb03 0c04 	add.w	ip, r3, r4
 80168ee:	6881      	ldr	r1, [r0, #8]
 80168f0:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80168f4:	4561      	cmp	r1, ip
 80168f6:	f026 0603 	bic.w	r6, r6, #3
 80168fa:	f002 0201 	and.w	r2, r2, #1
 80168fe:	d11b      	bne.n	8016938 <_free_r+0x6c>
 8016900:	4434      	add	r4, r6
 8016902:	b93a      	cbnz	r2, 8016914 <_free_r+0x48>
 8016904:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8016908:	1a9b      	subs	r3, r3, r2
 801690a:	4414      	add	r4, r2
 801690c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8016910:	60ca      	str	r2, [r1, #12]
 8016912:	6091      	str	r1, [r2, #8]
 8016914:	f044 0201 	orr.w	r2, r4, #1
 8016918:	605a      	str	r2, [r3, #4]
 801691a:	6083      	str	r3, [r0, #8]
 801691c:	4b48      	ldr	r3, [pc, #288]	; (8016a40 <_free_r+0x174>)
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	42a3      	cmp	r3, r4
 8016922:	d804      	bhi.n	801692e <_free_r+0x62>
 8016924:	4b47      	ldr	r3, [pc, #284]	; (8016a44 <_free_r+0x178>)
 8016926:	4628      	mov	r0, r5
 8016928:	6819      	ldr	r1, [r3, #0]
 801692a:	f7ff ff7b 	bl	8016824 <_malloc_trim_r>
 801692e:	4628      	mov	r0, r5
 8016930:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016934:	f7fc baf4 	b.w	8012f20 <__malloc_unlock>
 8016938:	f8cc 6004 	str.w	r6, [ip, #4]
 801693c:	2a00      	cmp	r2, #0
 801693e:	d138      	bne.n	80169b2 <_free_r+0xe6>
 8016940:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8016944:	1a5b      	subs	r3, r3, r1
 8016946:	440c      	add	r4, r1
 8016948:	6899      	ldr	r1, [r3, #8]
 801694a:	f100 0708 	add.w	r7, r0, #8
 801694e:	42b9      	cmp	r1, r7
 8016950:	d031      	beq.n	80169b6 <_free_r+0xea>
 8016952:	68df      	ldr	r7, [r3, #12]
 8016954:	60cf      	str	r7, [r1, #12]
 8016956:	60b9      	str	r1, [r7, #8]
 8016958:	eb0c 0106 	add.w	r1, ip, r6
 801695c:	6849      	ldr	r1, [r1, #4]
 801695e:	07c9      	lsls	r1, r1, #31
 8016960:	d40b      	bmi.n	801697a <_free_r+0xae>
 8016962:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8016966:	4434      	add	r4, r6
 8016968:	bb3a      	cbnz	r2, 80169ba <_free_r+0xee>
 801696a:	4e37      	ldr	r6, [pc, #220]	; (8016a48 <_free_r+0x17c>)
 801696c:	42b1      	cmp	r1, r6
 801696e:	d124      	bne.n	80169ba <_free_r+0xee>
 8016970:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016974:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8016978:	2201      	movs	r2, #1
 801697a:	f044 0101 	orr.w	r1, r4, #1
 801697e:	6059      	str	r1, [r3, #4]
 8016980:	511c      	str	r4, [r3, r4]
 8016982:	2a00      	cmp	r2, #0
 8016984:	d1d3      	bne.n	801692e <_free_r+0x62>
 8016986:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 801698a:	d21b      	bcs.n	80169c4 <_free_r+0xf8>
 801698c:	0961      	lsrs	r1, r4, #5
 801698e:	08e2      	lsrs	r2, r4, #3
 8016990:	2401      	movs	r4, #1
 8016992:	408c      	lsls	r4, r1
 8016994:	6841      	ldr	r1, [r0, #4]
 8016996:	3201      	adds	r2, #1
 8016998:	430c      	orrs	r4, r1
 801699a:	6044      	str	r4, [r0, #4]
 801699c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 80169a0:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 80169a4:	3908      	subs	r1, #8
 80169a6:	e9c3 4102 	strd	r4, r1, [r3, #8]
 80169aa:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 80169ae:	60e3      	str	r3, [r4, #12]
 80169b0:	e7bd      	b.n	801692e <_free_r+0x62>
 80169b2:	2200      	movs	r2, #0
 80169b4:	e7d0      	b.n	8016958 <_free_r+0x8c>
 80169b6:	2201      	movs	r2, #1
 80169b8:	e7ce      	b.n	8016958 <_free_r+0x8c>
 80169ba:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80169be:	60ce      	str	r6, [r1, #12]
 80169c0:	60b1      	str	r1, [r6, #8]
 80169c2:	e7da      	b.n	801697a <_free_r+0xae>
 80169c4:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 80169c8:	ea4f 2254 	mov.w	r2, r4, lsr #9
 80169cc:	d214      	bcs.n	80169f8 <_free_r+0x12c>
 80169ce:	09a2      	lsrs	r2, r4, #6
 80169d0:	3238      	adds	r2, #56	; 0x38
 80169d2:	1c51      	adds	r1, r2, #1
 80169d4:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 80169d8:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 80169dc:	428e      	cmp	r6, r1
 80169de:	d125      	bne.n	8016a2c <_free_r+0x160>
 80169e0:	2401      	movs	r4, #1
 80169e2:	1092      	asrs	r2, r2, #2
 80169e4:	fa04 f202 	lsl.w	r2, r4, r2
 80169e8:	6844      	ldr	r4, [r0, #4]
 80169ea:	4322      	orrs	r2, r4
 80169ec:	6042      	str	r2, [r0, #4]
 80169ee:	e9c3 1602 	strd	r1, r6, [r3, #8]
 80169f2:	60b3      	str	r3, [r6, #8]
 80169f4:	60cb      	str	r3, [r1, #12]
 80169f6:	e79a      	b.n	801692e <_free_r+0x62>
 80169f8:	2a14      	cmp	r2, #20
 80169fa:	d801      	bhi.n	8016a00 <_free_r+0x134>
 80169fc:	325b      	adds	r2, #91	; 0x5b
 80169fe:	e7e8      	b.n	80169d2 <_free_r+0x106>
 8016a00:	2a54      	cmp	r2, #84	; 0x54
 8016a02:	d802      	bhi.n	8016a0a <_free_r+0x13e>
 8016a04:	0b22      	lsrs	r2, r4, #12
 8016a06:	326e      	adds	r2, #110	; 0x6e
 8016a08:	e7e3      	b.n	80169d2 <_free_r+0x106>
 8016a0a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8016a0e:	d802      	bhi.n	8016a16 <_free_r+0x14a>
 8016a10:	0be2      	lsrs	r2, r4, #15
 8016a12:	3277      	adds	r2, #119	; 0x77
 8016a14:	e7dd      	b.n	80169d2 <_free_r+0x106>
 8016a16:	f240 5154 	movw	r1, #1364	; 0x554
 8016a1a:	428a      	cmp	r2, r1
 8016a1c:	bf9a      	itte	ls
 8016a1e:	0ca2      	lsrls	r2, r4, #18
 8016a20:	327c      	addls	r2, #124	; 0x7c
 8016a22:	227e      	movhi	r2, #126	; 0x7e
 8016a24:	e7d5      	b.n	80169d2 <_free_r+0x106>
 8016a26:	6889      	ldr	r1, [r1, #8]
 8016a28:	428e      	cmp	r6, r1
 8016a2a:	d004      	beq.n	8016a36 <_free_r+0x16a>
 8016a2c:	684a      	ldr	r2, [r1, #4]
 8016a2e:	f022 0203 	bic.w	r2, r2, #3
 8016a32:	42a2      	cmp	r2, r4
 8016a34:	d8f7      	bhi.n	8016a26 <_free_r+0x15a>
 8016a36:	68ce      	ldr	r6, [r1, #12]
 8016a38:	e7d9      	b.n	80169ee <_free_r+0x122>
 8016a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a3c:	200008e8 	.word	0x200008e8
 8016a40:	20000cf4 	.word	0x20000cf4
 8016a44:	20006630 	.word	0x20006630
 8016a48:	200008f0 	.word	0x200008f0

08016a4c <__sfvwrite_r>:
 8016a4c:	6893      	ldr	r3, [r2, #8]
 8016a4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a52:	4606      	mov	r6, r0
 8016a54:	460c      	mov	r4, r1
 8016a56:	4690      	mov	r8, r2
 8016a58:	b91b      	cbnz	r3, 8016a62 <__sfvwrite_r+0x16>
 8016a5a:	2000      	movs	r0, #0
 8016a5c:	b003      	add	sp, #12
 8016a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a62:	898b      	ldrh	r3, [r1, #12]
 8016a64:	0718      	lsls	r0, r3, #28
 8016a66:	d550      	bpl.n	8016b0a <__sfvwrite_r+0xbe>
 8016a68:	690b      	ldr	r3, [r1, #16]
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d04d      	beq.n	8016b0a <__sfvwrite_r+0xbe>
 8016a6e:	89a3      	ldrh	r3, [r4, #12]
 8016a70:	f8d8 7000 	ldr.w	r7, [r8]
 8016a74:	f013 0902 	ands.w	r9, r3, #2
 8016a78:	d16c      	bne.n	8016b54 <__sfvwrite_r+0x108>
 8016a7a:	f013 0301 	ands.w	r3, r3, #1
 8016a7e:	f000 809c 	beq.w	8016bba <__sfvwrite_r+0x16e>
 8016a82:	4648      	mov	r0, r9
 8016a84:	46ca      	mov	sl, r9
 8016a86:	46cb      	mov	fp, r9
 8016a88:	f1bb 0f00 	cmp.w	fp, #0
 8016a8c:	f000 8103 	beq.w	8016c96 <__sfvwrite_r+0x24a>
 8016a90:	b950      	cbnz	r0, 8016aa8 <__sfvwrite_r+0x5c>
 8016a92:	465a      	mov	r2, fp
 8016a94:	210a      	movs	r1, #10
 8016a96:	4650      	mov	r0, sl
 8016a98:	f7e9 fbda 	bl	8000250 <memchr>
 8016a9c:	2800      	cmp	r0, #0
 8016a9e:	f000 80ff 	beq.w	8016ca0 <__sfvwrite_r+0x254>
 8016aa2:	3001      	adds	r0, #1
 8016aa4:	eba0 090a 	sub.w	r9, r0, sl
 8016aa8:	6820      	ldr	r0, [r4, #0]
 8016aaa:	6921      	ldr	r1, [r4, #16]
 8016aac:	6963      	ldr	r3, [r4, #20]
 8016aae:	45d9      	cmp	r9, fp
 8016ab0:	464a      	mov	r2, r9
 8016ab2:	bf28      	it	cs
 8016ab4:	465a      	movcs	r2, fp
 8016ab6:	4288      	cmp	r0, r1
 8016ab8:	f240 80f5 	bls.w	8016ca6 <__sfvwrite_r+0x25a>
 8016abc:	68a5      	ldr	r5, [r4, #8]
 8016abe:	441d      	add	r5, r3
 8016ac0:	42aa      	cmp	r2, r5
 8016ac2:	f340 80f0 	ble.w	8016ca6 <__sfvwrite_r+0x25a>
 8016ac6:	4651      	mov	r1, sl
 8016ac8:	462a      	mov	r2, r5
 8016aca:	f000 f9ab 	bl	8016e24 <memmove>
 8016ace:	6823      	ldr	r3, [r4, #0]
 8016ad0:	442b      	add	r3, r5
 8016ad2:	6023      	str	r3, [r4, #0]
 8016ad4:	4621      	mov	r1, r4
 8016ad6:	4630      	mov	r0, r6
 8016ad8:	f7ff fdfc 	bl	80166d4 <_fflush_r>
 8016adc:	2800      	cmp	r0, #0
 8016ade:	d167      	bne.n	8016bb0 <__sfvwrite_r+0x164>
 8016ae0:	ebb9 0905 	subs.w	r9, r9, r5
 8016ae4:	f040 80f7 	bne.w	8016cd6 <__sfvwrite_r+0x28a>
 8016ae8:	4621      	mov	r1, r4
 8016aea:	4630      	mov	r0, r6
 8016aec:	f7ff fdf2 	bl	80166d4 <_fflush_r>
 8016af0:	2800      	cmp	r0, #0
 8016af2:	d15d      	bne.n	8016bb0 <__sfvwrite_r+0x164>
 8016af4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8016af8:	44aa      	add	sl, r5
 8016afa:	ebab 0b05 	sub.w	fp, fp, r5
 8016afe:	1b55      	subs	r5, r2, r5
 8016b00:	f8c8 5008 	str.w	r5, [r8, #8]
 8016b04:	2d00      	cmp	r5, #0
 8016b06:	d1bf      	bne.n	8016a88 <__sfvwrite_r+0x3c>
 8016b08:	e7a7      	b.n	8016a5a <__sfvwrite_r+0xe>
 8016b0a:	4621      	mov	r1, r4
 8016b0c:	4630      	mov	r0, r6
 8016b0e:	f7fe ff03 	bl	8015918 <__swsetup_r>
 8016b12:	2800      	cmp	r0, #0
 8016b14:	d0ab      	beq.n	8016a6e <__sfvwrite_r+0x22>
 8016b16:	f04f 30ff 	mov.w	r0, #4294967295
 8016b1a:	e79f      	b.n	8016a5c <__sfvwrite_r+0x10>
 8016b1c:	e9d7 b900 	ldrd	fp, r9, [r7]
 8016b20:	3708      	adds	r7, #8
 8016b22:	f1b9 0f00 	cmp.w	r9, #0
 8016b26:	d0f9      	beq.n	8016b1c <__sfvwrite_r+0xd0>
 8016b28:	45d1      	cmp	r9, sl
 8016b2a:	464b      	mov	r3, r9
 8016b2c:	69e1      	ldr	r1, [r4, #28]
 8016b2e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016b30:	bf28      	it	cs
 8016b32:	4653      	movcs	r3, sl
 8016b34:	465a      	mov	r2, fp
 8016b36:	4630      	mov	r0, r6
 8016b38:	47a8      	blx	r5
 8016b3a:	2800      	cmp	r0, #0
 8016b3c:	dd38      	ble.n	8016bb0 <__sfvwrite_r+0x164>
 8016b3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016b42:	4483      	add	fp, r0
 8016b44:	eba9 0900 	sub.w	r9, r9, r0
 8016b48:	1a18      	subs	r0, r3, r0
 8016b4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8016b4e:	2800      	cmp	r0, #0
 8016b50:	d1e7      	bne.n	8016b22 <__sfvwrite_r+0xd6>
 8016b52:	e782      	b.n	8016a5a <__sfvwrite_r+0xe>
 8016b54:	f04f 0b00 	mov.w	fp, #0
 8016b58:	f8df a180 	ldr.w	sl, [pc, #384]	; 8016cdc <__sfvwrite_r+0x290>
 8016b5c:	46d9      	mov	r9, fp
 8016b5e:	e7e0      	b.n	8016b22 <__sfvwrite_r+0xd6>
 8016b60:	e9d7 9a00 	ldrd	r9, sl, [r7]
 8016b64:	3708      	adds	r7, #8
 8016b66:	f1ba 0f00 	cmp.w	sl, #0
 8016b6a:	d0f9      	beq.n	8016b60 <__sfvwrite_r+0x114>
 8016b6c:	89a3      	ldrh	r3, [r4, #12]
 8016b6e:	6820      	ldr	r0, [r4, #0]
 8016b70:	68a2      	ldr	r2, [r4, #8]
 8016b72:	0599      	lsls	r1, r3, #22
 8016b74:	d563      	bpl.n	8016c3e <__sfvwrite_r+0x1f2>
 8016b76:	4552      	cmp	r2, sl
 8016b78:	d836      	bhi.n	8016be8 <__sfvwrite_r+0x19c>
 8016b7a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8016b7e:	d033      	beq.n	8016be8 <__sfvwrite_r+0x19c>
 8016b80:	6921      	ldr	r1, [r4, #16]
 8016b82:	6965      	ldr	r5, [r4, #20]
 8016b84:	eba0 0b01 	sub.w	fp, r0, r1
 8016b88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016b8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016b90:	f10b 0201 	add.w	r2, fp, #1
 8016b94:	106d      	asrs	r5, r5, #1
 8016b96:	4452      	add	r2, sl
 8016b98:	4295      	cmp	r5, r2
 8016b9a:	bf38      	it	cc
 8016b9c:	4615      	movcc	r5, r2
 8016b9e:	055b      	lsls	r3, r3, #21
 8016ba0:	d53d      	bpl.n	8016c1e <__sfvwrite_r+0x1d2>
 8016ba2:	4629      	mov	r1, r5
 8016ba4:	4630      	mov	r0, r6
 8016ba6:	f7fb ff71 	bl	8012a8c <_malloc_r>
 8016baa:	b948      	cbnz	r0, 8016bc0 <__sfvwrite_r+0x174>
 8016bac:	230c      	movs	r3, #12
 8016bae:	6033      	str	r3, [r6, #0]
 8016bb0:	89a3      	ldrh	r3, [r4, #12]
 8016bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016bb6:	81a3      	strh	r3, [r4, #12]
 8016bb8:	e7ad      	b.n	8016b16 <__sfvwrite_r+0xca>
 8016bba:	4699      	mov	r9, r3
 8016bbc:	469a      	mov	sl, r3
 8016bbe:	e7d2      	b.n	8016b66 <__sfvwrite_r+0x11a>
 8016bc0:	465a      	mov	r2, fp
 8016bc2:	6921      	ldr	r1, [r4, #16]
 8016bc4:	9001      	str	r0, [sp, #4]
 8016bc6:	f000 f91f 	bl	8016e08 <memcpy>
 8016bca:	89a2      	ldrh	r2, [r4, #12]
 8016bcc:	9b01      	ldr	r3, [sp, #4]
 8016bce:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8016bd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8016bd6:	81a2      	strh	r2, [r4, #12]
 8016bd8:	6123      	str	r3, [r4, #16]
 8016bda:	6165      	str	r5, [r4, #20]
 8016bdc:	445b      	add	r3, fp
 8016bde:	eba5 050b 	sub.w	r5, r5, fp
 8016be2:	6023      	str	r3, [r4, #0]
 8016be4:	4652      	mov	r2, sl
 8016be6:	60a5      	str	r5, [r4, #8]
 8016be8:	4552      	cmp	r2, sl
 8016bea:	bf28      	it	cs
 8016bec:	4652      	movcs	r2, sl
 8016bee:	6820      	ldr	r0, [r4, #0]
 8016bf0:	9201      	str	r2, [sp, #4]
 8016bf2:	4649      	mov	r1, r9
 8016bf4:	f000 f916 	bl	8016e24 <memmove>
 8016bf8:	68a3      	ldr	r3, [r4, #8]
 8016bfa:	9a01      	ldr	r2, [sp, #4]
 8016bfc:	1a9b      	subs	r3, r3, r2
 8016bfe:	60a3      	str	r3, [r4, #8]
 8016c00:	6823      	ldr	r3, [r4, #0]
 8016c02:	441a      	add	r2, r3
 8016c04:	4655      	mov	r5, sl
 8016c06:	6022      	str	r2, [r4, #0]
 8016c08:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8016c0c:	44a9      	add	r9, r5
 8016c0e:	ebaa 0a05 	sub.w	sl, sl, r5
 8016c12:	1b45      	subs	r5, r0, r5
 8016c14:	f8c8 5008 	str.w	r5, [r8, #8]
 8016c18:	2d00      	cmp	r5, #0
 8016c1a:	d1a4      	bne.n	8016b66 <__sfvwrite_r+0x11a>
 8016c1c:	e71d      	b.n	8016a5a <__sfvwrite_r+0xe>
 8016c1e:	462a      	mov	r2, r5
 8016c20:	4630      	mov	r0, r6
 8016c22:	f000 fc83 	bl	801752c <_realloc_r>
 8016c26:	4603      	mov	r3, r0
 8016c28:	2800      	cmp	r0, #0
 8016c2a:	d1d5      	bne.n	8016bd8 <__sfvwrite_r+0x18c>
 8016c2c:	6921      	ldr	r1, [r4, #16]
 8016c2e:	4630      	mov	r0, r6
 8016c30:	f7ff fe4c 	bl	80168cc <_free_r>
 8016c34:	89a3      	ldrh	r3, [r4, #12]
 8016c36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016c3a:	81a3      	strh	r3, [r4, #12]
 8016c3c:	e7b6      	b.n	8016bac <__sfvwrite_r+0x160>
 8016c3e:	6923      	ldr	r3, [r4, #16]
 8016c40:	4283      	cmp	r3, r0
 8016c42:	d302      	bcc.n	8016c4a <__sfvwrite_r+0x1fe>
 8016c44:	6961      	ldr	r1, [r4, #20]
 8016c46:	4551      	cmp	r1, sl
 8016c48:	d915      	bls.n	8016c76 <__sfvwrite_r+0x22a>
 8016c4a:	4552      	cmp	r2, sl
 8016c4c:	bf28      	it	cs
 8016c4e:	4652      	movcs	r2, sl
 8016c50:	4649      	mov	r1, r9
 8016c52:	4615      	mov	r5, r2
 8016c54:	f000 f8e6 	bl	8016e24 <memmove>
 8016c58:	68a3      	ldr	r3, [r4, #8]
 8016c5a:	6822      	ldr	r2, [r4, #0]
 8016c5c:	1b5b      	subs	r3, r3, r5
 8016c5e:	442a      	add	r2, r5
 8016c60:	60a3      	str	r3, [r4, #8]
 8016c62:	6022      	str	r2, [r4, #0]
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	d1cf      	bne.n	8016c08 <__sfvwrite_r+0x1bc>
 8016c68:	4621      	mov	r1, r4
 8016c6a:	4630      	mov	r0, r6
 8016c6c:	f7ff fd32 	bl	80166d4 <_fflush_r>
 8016c70:	2800      	cmp	r0, #0
 8016c72:	d0c9      	beq.n	8016c08 <__sfvwrite_r+0x1bc>
 8016c74:	e79c      	b.n	8016bb0 <__sfvwrite_r+0x164>
 8016c76:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016c7a:	459a      	cmp	sl, r3
 8016c7c:	bf38      	it	cc
 8016c7e:	4653      	movcc	r3, sl
 8016c80:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016c82:	fb93 f3f1 	sdiv	r3, r3, r1
 8016c86:	464a      	mov	r2, r9
 8016c88:	434b      	muls	r3, r1
 8016c8a:	4630      	mov	r0, r6
 8016c8c:	69e1      	ldr	r1, [r4, #28]
 8016c8e:	47a8      	blx	r5
 8016c90:	1e05      	subs	r5, r0, #0
 8016c92:	dcb9      	bgt.n	8016c08 <__sfvwrite_r+0x1bc>
 8016c94:	e78c      	b.n	8016bb0 <__sfvwrite_r+0x164>
 8016c96:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8016c9a:	2000      	movs	r0, #0
 8016c9c:	3708      	adds	r7, #8
 8016c9e:	e6f3      	b.n	8016a88 <__sfvwrite_r+0x3c>
 8016ca0:	f10b 0901 	add.w	r9, fp, #1
 8016ca4:	e700      	b.n	8016aa8 <__sfvwrite_r+0x5c>
 8016ca6:	4293      	cmp	r3, r2
 8016ca8:	dc08      	bgt.n	8016cbc <__sfvwrite_r+0x270>
 8016caa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016cac:	69e1      	ldr	r1, [r4, #28]
 8016cae:	4652      	mov	r2, sl
 8016cb0:	4630      	mov	r0, r6
 8016cb2:	47a8      	blx	r5
 8016cb4:	1e05      	subs	r5, r0, #0
 8016cb6:	f73f af13 	bgt.w	8016ae0 <__sfvwrite_r+0x94>
 8016cba:	e779      	b.n	8016bb0 <__sfvwrite_r+0x164>
 8016cbc:	4651      	mov	r1, sl
 8016cbe:	9201      	str	r2, [sp, #4]
 8016cc0:	f000 f8b0 	bl	8016e24 <memmove>
 8016cc4:	9a01      	ldr	r2, [sp, #4]
 8016cc6:	68a3      	ldr	r3, [r4, #8]
 8016cc8:	1a9b      	subs	r3, r3, r2
 8016cca:	60a3      	str	r3, [r4, #8]
 8016ccc:	6823      	ldr	r3, [r4, #0]
 8016cce:	4413      	add	r3, r2
 8016cd0:	6023      	str	r3, [r4, #0]
 8016cd2:	4615      	mov	r5, r2
 8016cd4:	e704      	b.n	8016ae0 <__sfvwrite_r+0x94>
 8016cd6:	2001      	movs	r0, #1
 8016cd8:	e70c      	b.n	8016af4 <__sfvwrite_r+0xa8>
 8016cda:	bf00      	nop
 8016cdc:	7ffffc00 	.word	0x7ffffc00

08016ce0 <_fwalk_reent>:
 8016ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ce4:	4606      	mov	r6, r0
 8016ce6:	4688      	mov	r8, r1
 8016ce8:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 8016cec:	2700      	movs	r7, #0
 8016cee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016cf2:	f1b9 0901 	subs.w	r9, r9, #1
 8016cf6:	d505      	bpl.n	8016d04 <_fwalk_reent+0x24>
 8016cf8:	6824      	ldr	r4, [r4, #0]
 8016cfa:	2c00      	cmp	r4, #0
 8016cfc:	d1f7      	bne.n	8016cee <_fwalk_reent+0xe>
 8016cfe:	4638      	mov	r0, r7
 8016d00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016d04:	89ab      	ldrh	r3, [r5, #12]
 8016d06:	2b01      	cmp	r3, #1
 8016d08:	d907      	bls.n	8016d1a <_fwalk_reent+0x3a>
 8016d0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016d0e:	3301      	adds	r3, #1
 8016d10:	d003      	beq.n	8016d1a <_fwalk_reent+0x3a>
 8016d12:	4629      	mov	r1, r5
 8016d14:	4630      	mov	r0, r6
 8016d16:	47c0      	blx	r8
 8016d18:	4307      	orrs	r7, r0
 8016d1a:	3568      	adds	r5, #104	; 0x68
 8016d1c:	e7e9      	b.n	8016cf2 <_fwalk_reent+0x12>
	...

08016d20 <_localeconv_r>:
 8016d20:	4800      	ldr	r0, [pc, #0]	; (8016d24 <_localeconv_r+0x4>)
 8016d22:	4770      	bx	lr
 8016d24:	20000dec 	.word	0x20000dec

08016d28 <__retarget_lock_init_recursive>:
 8016d28:	4770      	bx	lr

08016d2a <__retarget_lock_close_recursive>:
 8016d2a:	4770      	bx	lr

08016d2c <__retarget_lock_acquire_recursive>:
 8016d2c:	4770      	bx	lr

08016d2e <__retarget_lock_release_recursive>:
 8016d2e:	4770      	bx	lr

08016d30 <__swhatbuf_r>:
 8016d30:	b570      	push	{r4, r5, r6, lr}
 8016d32:	460e      	mov	r6, r1
 8016d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d38:	2900      	cmp	r1, #0
 8016d3a:	b096      	sub	sp, #88	; 0x58
 8016d3c:	4614      	mov	r4, r2
 8016d3e:	461d      	mov	r5, r3
 8016d40:	da0a      	bge.n	8016d58 <__swhatbuf_r+0x28>
 8016d42:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 8016d46:	2300      	movs	r3, #0
 8016d48:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 8016d4c:	602b      	str	r3, [r5, #0]
 8016d4e:	d116      	bne.n	8016d7e <__swhatbuf_r+0x4e>
 8016d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016d54:	6023      	str	r3, [r4, #0]
 8016d56:	e015      	b.n	8016d84 <__swhatbuf_r+0x54>
 8016d58:	466a      	mov	r2, sp
 8016d5a:	f001 fd77 	bl	801884c <_fstat_r>
 8016d5e:	2800      	cmp	r0, #0
 8016d60:	dbef      	blt.n	8016d42 <__swhatbuf_r+0x12>
 8016d62:	9a01      	ldr	r2, [sp, #4]
 8016d64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016d68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016d6c:	425a      	negs	r2, r3
 8016d6e:	415a      	adcs	r2, r3
 8016d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016d74:	602a      	str	r2, [r5, #0]
 8016d76:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8016d7a:	6023      	str	r3, [r4, #0]
 8016d7c:	e002      	b.n	8016d84 <__swhatbuf_r+0x54>
 8016d7e:	2240      	movs	r2, #64	; 0x40
 8016d80:	6022      	str	r2, [r4, #0]
 8016d82:	4618      	mov	r0, r3
 8016d84:	b016      	add	sp, #88	; 0x58
 8016d86:	bd70      	pop	{r4, r5, r6, pc}

08016d88 <__smakebuf_r>:
 8016d88:	898b      	ldrh	r3, [r1, #12]
 8016d8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016d8c:	079d      	lsls	r5, r3, #30
 8016d8e:	4606      	mov	r6, r0
 8016d90:	460c      	mov	r4, r1
 8016d92:	d507      	bpl.n	8016da4 <__smakebuf_r+0x1c>
 8016d94:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8016d98:	6023      	str	r3, [r4, #0]
 8016d9a:	6123      	str	r3, [r4, #16]
 8016d9c:	2301      	movs	r3, #1
 8016d9e:	6163      	str	r3, [r4, #20]
 8016da0:	b002      	add	sp, #8
 8016da2:	bd70      	pop	{r4, r5, r6, pc}
 8016da4:	ab01      	add	r3, sp, #4
 8016da6:	466a      	mov	r2, sp
 8016da8:	f7ff ffc2 	bl	8016d30 <__swhatbuf_r>
 8016dac:	9900      	ldr	r1, [sp, #0]
 8016dae:	4605      	mov	r5, r0
 8016db0:	4630      	mov	r0, r6
 8016db2:	f7fb fe6b 	bl	8012a8c <_malloc_r>
 8016db6:	b948      	cbnz	r0, 8016dcc <__smakebuf_r+0x44>
 8016db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016dbc:	059a      	lsls	r2, r3, #22
 8016dbe:	d4ef      	bmi.n	8016da0 <__smakebuf_r+0x18>
 8016dc0:	f023 0303 	bic.w	r3, r3, #3
 8016dc4:	f043 0302 	orr.w	r3, r3, #2
 8016dc8:	81a3      	strh	r3, [r4, #12]
 8016dca:	e7e3      	b.n	8016d94 <__smakebuf_r+0xc>
 8016dcc:	4b0d      	ldr	r3, [pc, #52]	; (8016e04 <__smakebuf_r+0x7c>)
 8016dce:	63f3      	str	r3, [r6, #60]	; 0x3c
 8016dd0:	89a3      	ldrh	r3, [r4, #12]
 8016dd2:	6020      	str	r0, [r4, #0]
 8016dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016dd8:	81a3      	strh	r3, [r4, #12]
 8016dda:	9b00      	ldr	r3, [sp, #0]
 8016ddc:	6163      	str	r3, [r4, #20]
 8016dde:	9b01      	ldr	r3, [sp, #4]
 8016de0:	6120      	str	r0, [r4, #16]
 8016de2:	b15b      	cbz	r3, 8016dfc <__smakebuf_r+0x74>
 8016de4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016de8:	4630      	mov	r0, r6
 8016dea:	f001 fd41 	bl	8018870 <_isatty_r>
 8016dee:	b128      	cbz	r0, 8016dfc <__smakebuf_r+0x74>
 8016df0:	89a3      	ldrh	r3, [r4, #12]
 8016df2:	f023 0303 	bic.w	r3, r3, #3
 8016df6:	f043 0301 	orr.w	r3, r3, #1
 8016dfa:	81a3      	strh	r3, [r4, #12]
 8016dfc:	89a0      	ldrh	r0, [r4, #12]
 8016dfe:	4305      	orrs	r5, r0
 8016e00:	81a5      	strh	r5, [r4, #12]
 8016e02:	e7cd      	b.n	8016da0 <__smakebuf_r+0x18>
 8016e04:	08016771 	.word	0x08016771

08016e08 <memcpy>:
 8016e08:	440a      	add	r2, r1
 8016e0a:	4291      	cmp	r1, r2
 8016e0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8016e10:	d100      	bne.n	8016e14 <memcpy+0xc>
 8016e12:	4770      	bx	lr
 8016e14:	b510      	push	{r4, lr}
 8016e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016e1e:	4291      	cmp	r1, r2
 8016e20:	d1f9      	bne.n	8016e16 <memcpy+0xe>
 8016e22:	bd10      	pop	{r4, pc}

08016e24 <memmove>:
 8016e24:	4288      	cmp	r0, r1
 8016e26:	b510      	push	{r4, lr}
 8016e28:	eb01 0402 	add.w	r4, r1, r2
 8016e2c:	d902      	bls.n	8016e34 <memmove+0x10>
 8016e2e:	4284      	cmp	r4, r0
 8016e30:	4623      	mov	r3, r4
 8016e32:	d807      	bhi.n	8016e44 <memmove+0x20>
 8016e34:	1e43      	subs	r3, r0, #1
 8016e36:	42a1      	cmp	r1, r4
 8016e38:	d008      	beq.n	8016e4c <memmove+0x28>
 8016e3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016e3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016e42:	e7f8      	b.n	8016e36 <memmove+0x12>
 8016e44:	4402      	add	r2, r0
 8016e46:	4601      	mov	r1, r0
 8016e48:	428a      	cmp	r2, r1
 8016e4a:	d100      	bne.n	8016e4e <memmove+0x2a>
 8016e4c:	bd10      	pop	{r4, pc}
 8016e4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016e52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016e56:	e7f7      	b.n	8016e48 <memmove+0x24>

08016e58 <_Balloc>:
 8016e58:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016e5a:	b570      	push	{r4, r5, r6, lr}
 8016e5c:	4605      	mov	r5, r0
 8016e5e:	460c      	mov	r4, r1
 8016e60:	b17b      	cbz	r3, 8016e82 <_Balloc+0x2a>
 8016e62:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8016e64:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016e68:	b9a0      	cbnz	r0, 8016e94 <_Balloc+0x3c>
 8016e6a:	2101      	movs	r1, #1
 8016e6c:	fa01 f604 	lsl.w	r6, r1, r4
 8016e70:	1d72      	adds	r2, r6, #5
 8016e72:	0092      	lsls	r2, r2, #2
 8016e74:	4628      	mov	r0, r5
 8016e76:	f001 fbcd 	bl	8018614 <_calloc_r>
 8016e7a:	b148      	cbz	r0, 8016e90 <_Balloc+0x38>
 8016e7c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8016e80:	e00b      	b.n	8016e9a <_Balloc+0x42>
 8016e82:	2221      	movs	r2, #33	; 0x21
 8016e84:	2104      	movs	r1, #4
 8016e86:	f001 fbc5 	bl	8018614 <_calloc_r>
 8016e8a:	64e8      	str	r0, [r5, #76]	; 0x4c
 8016e8c:	2800      	cmp	r0, #0
 8016e8e:	d1e8      	bne.n	8016e62 <_Balloc+0xa>
 8016e90:	2000      	movs	r0, #0
 8016e92:	bd70      	pop	{r4, r5, r6, pc}
 8016e94:	6802      	ldr	r2, [r0, #0]
 8016e96:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8016e9a:	2300      	movs	r3, #0
 8016e9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016ea0:	e7f7      	b.n	8016e92 <_Balloc+0x3a>

08016ea2 <_Bfree>:
 8016ea2:	b131      	cbz	r1, 8016eb2 <_Bfree+0x10>
 8016ea4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016ea6:	684a      	ldr	r2, [r1, #4]
 8016ea8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8016eac:	6008      	str	r0, [r1, #0]
 8016eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8016eb2:	4770      	bx	lr

08016eb4 <__multadd>:
 8016eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016eb8:	690d      	ldr	r5, [r1, #16]
 8016eba:	4607      	mov	r7, r0
 8016ebc:	460c      	mov	r4, r1
 8016ebe:	461e      	mov	r6, r3
 8016ec0:	f101 0c14 	add.w	ip, r1, #20
 8016ec4:	2000      	movs	r0, #0
 8016ec6:	f8dc 3000 	ldr.w	r3, [ip]
 8016eca:	b299      	uxth	r1, r3
 8016ecc:	fb02 6101 	mla	r1, r2, r1, r6
 8016ed0:	0c1e      	lsrs	r6, r3, #16
 8016ed2:	0c0b      	lsrs	r3, r1, #16
 8016ed4:	fb02 3306 	mla	r3, r2, r6, r3
 8016ed8:	b289      	uxth	r1, r1
 8016eda:	3001      	adds	r0, #1
 8016edc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016ee0:	4285      	cmp	r5, r0
 8016ee2:	f84c 1b04 	str.w	r1, [ip], #4
 8016ee6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016eea:	dcec      	bgt.n	8016ec6 <__multadd+0x12>
 8016eec:	b30e      	cbz	r6, 8016f32 <__multadd+0x7e>
 8016eee:	68a3      	ldr	r3, [r4, #8]
 8016ef0:	42ab      	cmp	r3, r5
 8016ef2:	dc19      	bgt.n	8016f28 <__multadd+0x74>
 8016ef4:	6861      	ldr	r1, [r4, #4]
 8016ef6:	4638      	mov	r0, r7
 8016ef8:	3101      	adds	r1, #1
 8016efa:	f7ff ffad 	bl	8016e58 <_Balloc>
 8016efe:	4680      	mov	r8, r0
 8016f00:	b928      	cbnz	r0, 8016f0e <__multadd+0x5a>
 8016f02:	4602      	mov	r2, r0
 8016f04:	4b0c      	ldr	r3, [pc, #48]	; (8016f38 <__multadd+0x84>)
 8016f06:	480d      	ldr	r0, [pc, #52]	; (8016f3c <__multadd+0x88>)
 8016f08:	21b5      	movs	r1, #181	; 0xb5
 8016f0a:	f001 fb65 	bl	80185d8 <__assert_func>
 8016f0e:	6922      	ldr	r2, [r4, #16]
 8016f10:	3202      	adds	r2, #2
 8016f12:	f104 010c 	add.w	r1, r4, #12
 8016f16:	0092      	lsls	r2, r2, #2
 8016f18:	300c      	adds	r0, #12
 8016f1a:	f7ff ff75 	bl	8016e08 <memcpy>
 8016f1e:	4621      	mov	r1, r4
 8016f20:	4638      	mov	r0, r7
 8016f22:	f7ff ffbe 	bl	8016ea2 <_Bfree>
 8016f26:	4644      	mov	r4, r8
 8016f28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016f2c:	3501      	adds	r5, #1
 8016f2e:	615e      	str	r6, [r3, #20]
 8016f30:	6125      	str	r5, [r4, #16]
 8016f32:	4620      	mov	r0, r4
 8016f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f38:	08019589 	.word	0x08019589
 8016f3c:	080195f5 	.word	0x080195f5

08016f40 <__hi0bits>:
 8016f40:	0c03      	lsrs	r3, r0, #16
 8016f42:	041b      	lsls	r3, r3, #16
 8016f44:	b9d3      	cbnz	r3, 8016f7c <__hi0bits+0x3c>
 8016f46:	0400      	lsls	r0, r0, #16
 8016f48:	2310      	movs	r3, #16
 8016f4a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016f4e:	bf04      	itt	eq
 8016f50:	0200      	lsleq	r0, r0, #8
 8016f52:	3308      	addeq	r3, #8
 8016f54:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016f58:	bf04      	itt	eq
 8016f5a:	0100      	lsleq	r0, r0, #4
 8016f5c:	3304      	addeq	r3, #4
 8016f5e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016f62:	bf04      	itt	eq
 8016f64:	0080      	lsleq	r0, r0, #2
 8016f66:	3302      	addeq	r3, #2
 8016f68:	2800      	cmp	r0, #0
 8016f6a:	db05      	blt.n	8016f78 <__hi0bits+0x38>
 8016f6c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016f70:	f103 0301 	add.w	r3, r3, #1
 8016f74:	bf08      	it	eq
 8016f76:	2320      	moveq	r3, #32
 8016f78:	4618      	mov	r0, r3
 8016f7a:	4770      	bx	lr
 8016f7c:	2300      	movs	r3, #0
 8016f7e:	e7e4      	b.n	8016f4a <__hi0bits+0xa>

08016f80 <__lo0bits>:
 8016f80:	6803      	ldr	r3, [r0, #0]
 8016f82:	f013 0207 	ands.w	r2, r3, #7
 8016f86:	4601      	mov	r1, r0
 8016f88:	d00b      	beq.n	8016fa2 <__lo0bits+0x22>
 8016f8a:	07da      	lsls	r2, r3, #31
 8016f8c:	d423      	bmi.n	8016fd6 <__lo0bits+0x56>
 8016f8e:	0798      	lsls	r0, r3, #30
 8016f90:	bf49      	itett	mi
 8016f92:	085b      	lsrmi	r3, r3, #1
 8016f94:	089b      	lsrpl	r3, r3, #2
 8016f96:	2001      	movmi	r0, #1
 8016f98:	600b      	strmi	r3, [r1, #0]
 8016f9a:	bf5c      	itt	pl
 8016f9c:	600b      	strpl	r3, [r1, #0]
 8016f9e:	2002      	movpl	r0, #2
 8016fa0:	4770      	bx	lr
 8016fa2:	b298      	uxth	r0, r3
 8016fa4:	b9a8      	cbnz	r0, 8016fd2 <__lo0bits+0x52>
 8016fa6:	0c1b      	lsrs	r3, r3, #16
 8016fa8:	2010      	movs	r0, #16
 8016faa:	b2da      	uxtb	r2, r3
 8016fac:	b90a      	cbnz	r2, 8016fb2 <__lo0bits+0x32>
 8016fae:	3008      	adds	r0, #8
 8016fb0:	0a1b      	lsrs	r3, r3, #8
 8016fb2:	071a      	lsls	r2, r3, #28
 8016fb4:	bf04      	itt	eq
 8016fb6:	091b      	lsreq	r3, r3, #4
 8016fb8:	3004      	addeq	r0, #4
 8016fba:	079a      	lsls	r2, r3, #30
 8016fbc:	bf04      	itt	eq
 8016fbe:	089b      	lsreq	r3, r3, #2
 8016fc0:	3002      	addeq	r0, #2
 8016fc2:	07da      	lsls	r2, r3, #31
 8016fc4:	d403      	bmi.n	8016fce <__lo0bits+0x4e>
 8016fc6:	085b      	lsrs	r3, r3, #1
 8016fc8:	f100 0001 	add.w	r0, r0, #1
 8016fcc:	d005      	beq.n	8016fda <__lo0bits+0x5a>
 8016fce:	600b      	str	r3, [r1, #0]
 8016fd0:	4770      	bx	lr
 8016fd2:	4610      	mov	r0, r2
 8016fd4:	e7e9      	b.n	8016faa <__lo0bits+0x2a>
 8016fd6:	2000      	movs	r0, #0
 8016fd8:	4770      	bx	lr
 8016fda:	2020      	movs	r0, #32
 8016fdc:	4770      	bx	lr
	...

08016fe0 <__i2b>:
 8016fe0:	b510      	push	{r4, lr}
 8016fe2:	460c      	mov	r4, r1
 8016fe4:	2101      	movs	r1, #1
 8016fe6:	f7ff ff37 	bl	8016e58 <_Balloc>
 8016fea:	4602      	mov	r2, r0
 8016fec:	b928      	cbnz	r0, 8016ffa <__i2b+0x1a>
 8016fee:	4b05      	ldr	r3, [pc, #20]	; (8017004 <__i2b+0x24>)
 8016ff0:	4805      	ldr	r0, [pc, #20]	; (8017008 <__i2b+0x28>)
 8016ff2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8016ff6:	f001 faef 	bl	80185d8 <__assert_func>
 8016ffa:	2301      	movs	r3, #1
 8016ffc:	6144      	str	r4, [r0, #20]
 8016ffe:	6103      	str	r3, [r0, #16]
 8017000:	bd10      	pop	{r4, pc}
 8017002:	bf00      	nop
 8017004:	08019589 	.word	0x08019589
 8017008:	080195f5 	.word	0x080195f5

0801700c <__multiply>:
 801700c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017010:	4691      	mov	r9, r2
 8017012:	690a      	ldr	r2, [r1, #16]
 8017014:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017018:	429a      	cmp	r2, r3
 801701a:	bfb8      	it	lt
 801701c:	460b      	movlt	r3, r1
 801701e:	460c      	mov	r4, r1
 8017020:	bfbc      	itt	lt
 8017022:	464c      	movlt	r4, r9
 8017024:	4699      	movlt	r9, r3
 8017026:	6927      	ldr	r7, [r4, #16]
 8017028:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801702c:	68a3      	ldr	r3, [r4, #8]
 801702e:	6861      	ldr	r1, [r4, #4]
 8017030:	eb07 060a 	add.w	r6, r7, sl
 8017034:	42b3      	cmp	r3, r6
 8017036:	b085      	sub	sp, #20
 8017038:	bfb8      	it	lt
 801703a:	3101      	addlt	r1, #1
 801703c:	f7ff ff0c 	bl	8016e58 <_Balloc>
 8017040:	b930      	cbnz	r0, 8017050 <__multiply+0x44>
 8017042:	4602      	mov	r2, r0
 8017044:	4b44      	ldr	r3, [pc, #272]	; (8017158 <__multiply+0x14c>)
 8017046:	4845      	ldr	r0, [pc, #276]	; (801715c <__multiply+0x150>)
 8017048:	f240 115d 	movw	r1, #349	; 0x15d
 801704c:	f001 fac4 	bl	80185d8 <__assert_func>
 8017050:	f100 0514 	add.w	r5, r0, #20
 8017054:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017058:	462b      	mov	r3, r5
 801705a:	2200      	movs	r2, #0
 801705c:	4543      	cmp	r3, r8
 801705e:	d321      	bcc.n	80170a4 <__multiply+0x98>
 8017060:	f104 0314 	add.w	r3, r4, #20
 8017064:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8017068:	f109 0314 	add.w	r3, r9, #20
 801706c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8017070:	9202      	str	r2, [sp, #8]
 8017072:	1b3a      	subs	r2, r7, r4
 8017074:	3a15      	subs	r2, #21
 8017076:	f022 0203 	bic.w	r2, r2, #3
 801707a:	3204      	adds	r2, #4
 801707c:	f104 0115 	add.w	r1, r4, #21
 8017080:	428f      	cmp	r7, r1
 8017082:	bf38      	it	cc
 8017084:	2204      	movcc	r2, #4
 8017086:	9201      	str	r2, [sp, #4]
 8017088:	9a02      	ldr	r2, [sp, #8]
 801708a:	9303      	str	r3, [sp, #12]
 801708c:	429a      	cmp	r2, r3
 801708e:	d80c      	bhi.n	80170aa <__multiply+0x9e>
 8017090:	2e00      	cmp	r6, #0
 8017092:	dd03      	ble.n	801709c <__multiply+0x90>
 8017094:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017098:	2b00      	cmp	r3, #0
 801709a:	d05a      	beq.n	8017152 <__multiply+0x146>
 801709c:	6106      	str	r6, [r0, #16]
 801709e:	b005      	add	sp, #20
 80170a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170a4:	f843 2b04 	str.w	r2, [r3], #4
 80170a8:	e7d8      	b.n	801705c <__multiply+0x50>
 80170aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80170ae:	f1ba 0f00 	cmp.w	sl, #0
 80170b2:	d024      	beq.n	80170fe <__multiply+0xf2>
 80170b4:	f104 0e14 	add.w	lr, r4, #20
 80170b8:	46a9      	mov	r9, r5
 80170ba:	f04f 0c00 	mov.w	ip, #0
 80170be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80170c2:	f8d9 1000 	ldr.w	r1, [r9]
 80170c6:	fa1f fb82 	uxth.w	fp, r2
 80170ca:	b289      	uxth	r1, r1
 80170cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80170d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80170d4:	f8d9 2000 	ldr.w	r2, [r9]
 80170d8:	4461      	add	r1, ip
 80170da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80170de:	fb0a c20b 	mla	r2, sl, fp, ip
 80170e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80170e6:	b289      	uxth	r1, r1
 80170e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80170ec:	4577      	cmp	r7, lr
 80170ee:	f849 1b04 	str.w	r1, [r9], #4
 80170f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80170f6:	d8e2      	bhi.n	80170be <__multiply+0xb2>
 80170f8:	9a01      	ldr	r2, [sp, #4]
 80170fa:	f845 c002 	str.w	ip, [r5, r2]
 80170fe:	9a03      	ldr	r2, [sp, #12]
 8017100:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8017104:	3304      	adds	r3, #4
 8017106:	f1b9 0f00 	cmp.w	r9, #0
 801710a:	d020      	beq.n	801714e <__multiply+0x142>
 801710c:	6829      	ldr	r1, [r5, #0]
 801710e:	f104 0c14 	add.w	ip, r4, #20
 8017112:	46ae      	mov	lr, r5
 8017114:	f04f 0a00 	mov.w	sl, #0
 8017118:	f8bc b000 	ldrh.w	fp, [ip]
 801711c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8017120:	fb09 220b 	mla	r2, r9, fp, r2
 8017124:	4492      	add	sl, r2
 8017126:	b289      	uxth	r1, r1
 8017128:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801712c:	f84e 1b04 	str.w	r1, [lr], #4
 8017130:	f85c 2b04 	ldr.w	r2, [ip], #4
 8017134:	f8be 1000 	ldrh.w	r1, [lr]
 8017138:	0c12      	lsrs	r2, r2, #16
 801713a:	fb09 1102 	mla	r1, r9, r2, r1
 801713e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8017142:	4567      	cmp	r7, ip
 8017144:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017148:	d8e6      	bhi.n	8017118 <__multiply+0x10c>
 801714a:	9a01      	ldr	r2, [sp, #4]
 801714c:	50a9      	str	r1, [r5, r2]
 801714e:	3504      	adds	r5, #4
 8017150:	e79a      	b.n	8017088 <__multiply+0x7c>
 8017152:	3e01      	subs	r6, #1
 8017154:	e79c      	b.n	8017090 <__multiply+0x84>
 8017156:	bf00      	nop
 8017158:	08019589 	.word	0x08019589
 801715c:	080195f5 	.word	0x080195f5

08017160 <__pow5mult>:
 8017160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017164:	4615      	mov	r5, r2
 8017166:	f012 0203 	ands.w	r2, r2, #3
 801716a:	4606      	mov	r6, r0
 801716c:	460f      	mov	r7, r1
 801716e:	d007      	beq.n	8017180 <__pow5mult+0x20>
 8017170:	4c1a      	ldr	r4, [pc, #104]	; (80171dc <__pow5mult+0x7c>)
 8017172:	3a01      	subs	r2, #1
 8017174:	2300      	movs	r3, #0
 8017176:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801717a:	f7ff fe9b 	bl	8016eb4 <__multadd>
 801717e:	4607      	mov	r7, r0
 8017180:	10ad      	asrs	r5, r5, #2
 8017182:	d027      	beq.n	80171d4 <__pow5mult+0x74>
 8017184:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8017186:	b944      	cbnz	r4, 801719a <__pow5mult+0x3a>
 8017188:	f240 2171 	movw	r1, #625	; 0x271
 801718c:	4630      	mov	r0, r6
 801718e:	f7ff ff27 	bl	8016fe0 <__i2b>
 8017192:	2300      	movs	r3, #0
 8017194:	64b0      	str	r0, [r6, #72]	; 0x48
 8017196:	4604      	mov	r4, r0
 8017198:	6003      	str	r3, [r0, #0]
 801719a:	f04f 0900 	mov.w	r9, #0
 801719e:	07eb      	lsls	r3, r5, #31
 80171a0:	d50a      	bpl.n	80171b8 <__pow5mult+0x58>
 80171a2:	4639      	mov	r1, r7
 80171a4:	4622      	mov	r2, r4
 80171a6:	4630      	mov	r0, r6
 80171a8:	f7ff ff30 	bl	801700c <__multiply>
 80171ac:	4639      	mov	r1, r7
 80171ae:	4680      	mov	r8, r0
 80171b0:	4630      	mov	r0, r6
 80171b2:	f7ff fe76 	bl	8016ea2 <_Bfree>
 80171b6:	4647      	mov	r7, r8
 80171b8:	106d      	asrs	r5, r5, #1
 80171ba:	d00b      	beq.n	80171d4 <__pow5mult+0x74>
 80171bc:	6820      	ldr	r0, [r4, #0]
 80171be:	b938      	cbnz	r0, 80171d0 <__pow5mult+0x70>
 80171c0:	4622      	mov	r2, r4
 80171c2:	4621      	mov	r1, r4
 80171c4:	4630      	mov	r0, r6
 80171c6:	f7ff ff21 	bl	801700c <__multiply>
 80171ca:	6020      	str	r0, [r4, #0]
 80171cc:	f8c0 9000 	str.w	r9, [r0]
 80171d0:	4604      	mov	r4, r0
 80171d2:	e7e4      	b.n	801719e <__pow5mult+0x3e>
 80171d4:	4638      	mov	r0, r7
 80171d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80171da:	bf00      	nop
 80171dc:	08019748 	.word	0x08019748

080171e0 <__lshift>:
 80171e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80171e4:	460c      	mov	r4, r1
 80171e6:	6849      	ldr	r1, [r1, #4]
 80171e8:	6923      	ldr	r3, [r4, #16]
 80171ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80171ee:	68a3      	ldr	r3, [r4, #8]
 80171f0:	4607      	mov	r7, r0
 80171f2:	4691      	mov	r9, r2
 80171f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80171f8:	f108 0601 	add.w	r6, r8, #1
 80171fc:	42b3      	cmp	r3, r6
 80171fe:	db0b      	blt.n	8017218 <__lshift+0x38>
 8017200:	4638      	mov	r0, r7
 8017202:	f7ff fe29 	bl	8016e58 <_Balloc>
 8017206:	4605      	mov	r5, r0
 8017208:	b948      	cbnz	r0, 801721e <__lshift+0x3e>
 801720a:	4602      	mov	r2, r0
 801720c:	4b2a      	ldr	r3, [pc, #168]	; (80172b8 <__lshift+0xd8>)
 801720e:	482b      	ldr	r0, [pc, #172]	; (80172bc <__lshift+0xdc>)
 8017210:	f240 11d9 	movw	r1, #473	; 0x1d9
 8017214:	f001 f9e0 	bl	80185d8 <__assert_func>
 8017218:	3101      	adds	r1, #1
 801721a:	005b      	lsls	r3, r3, #1
 801721c:	e7ee      	b.n	80171fc <__lshift+0x1c>
 801721e:	2300      	movs	r3, #0
 8017220:	f100 0114 	add.w	r1, r0, #20
 8017224:	f100 0210 	add.w	r2, r0, #16
 8017228:	4618      	mov	r0, r3
 801722a:	4553      	cmp	r3, sl
 801722c:	db37      	blt.n	801729e <__lshift+0xbe>
 801722e:	6920      	ldr	r0, [r4, #16]
 8017230:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017234:	f104 0314 	add.w	r3, r4, #20
 8017238:	f019 091f 	ands.w	r9, r9, #31
 801723c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017240:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8017244:	d02f      	beq.n	80172a6 <__lshift+0xc6>
 8017246:	f1c9 0e20 	rsb	lr, r9, #32
 801724a:	468a      	mov	sl, r1
 801724c:	f04f 0c00 	mov.w	ip, #0
 8017250:	681a      	ldr	r2, [r3, #0]
 8017252:	fa02 f209 	lsl.w	r2, r2, r9
 8017256:	ea42 020c 	orr.w	r2, r2, ip
 801725a:	f84a 2b04 	str.w	r2, [sl], #4
 801725e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017262:	4298      	cmp	r0, r3
 8017264:	fa22 fc0e 	lsr.w	ip, r2, lr
 8017268:	d8f2      	bhi.n	8017250 <__lshift+0x70>
 801726a:	1b03      	subs	r3, r0, r4
 801726c:	3b15      	subs	r3, #21
 801726e:	f023 0303 	bic.w	r3, r3, #3
 8017272:	3304      	adds	r3, #4
 8017274:	f104 0215 	add.w	r2, r4, #21
 8017278:	4290      	cmp	r0, r2
 801727a:	bf38      	it	cc
 801727c:	2304      	movcc	r3, #4
 801727e:	f841 c003 	str.w	ip, [r1, r3]
 8017282:	f1bc 0f00 	cmp.w	ip, #0
 8017286:	d001      	beq.n	801728c <__lshift+0xac>
 8017288:	f108 0602 	add.w	r6, r8, #2
 801728c:	3e01      	subs	r6, #1
 801728e:	4638      	mov	r0, r7
 8017290:	612e      	str	r6, [r5, #16]
 8017292:	4621      	mov	r1, r4
 8017294:	f7ff fe05 	bl	8016ea2 <_Bfree>
 8017298:	4628      	mov	r0, r5
 801729a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801729e:	f842 0f04 	str.w	r0, [r2, #4]!
 80172a2:	3301      	adds	r3, #1
 80172a4:	e7c1      	b.n	801722a <__lshift+0x4a>
 80172a6:	3904      	subs	r1, #4
 80172a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80172ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80172b0:	4298      	cmp	r0, r3
 80172b2:	d8f9      	bhi.n	80172a8 <__lshift+0xc8>
 80172b4:	e7ea      	b.n	801728c <__lshift+0xac>
 80172b6:	bf00      	nop
 80172b8:	08019589 	.word	0x08019589
 80172bc:	080195f5 	.word	0x080195f5

080172c0 <__mcmp>:
 80172c0:	b530      	push	{r4, r5, lr}
 80172c2:	6902      	ldr	r2, [r0, #16]
 80172c4:	690c      	ldr	r4, [r1, #16]
 80172c6:	1b12      	subs	r2, r2, r4
 80172c8:	d10e      	bne.n	80172e8 <__mcmp+0x28>
 80172ca:	f100 0314 	add.w	r3, r0, #20
 80172ce:	3114      	adds	r1, #20
 80172d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80172d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80172d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80172dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80172e0:	42a5      	cmp	r5, r4
 80172e2:	d003      	beq.n	80172ec <__mcmp+0x2c>
 80172e4:	d305      	bcc.n	80172f2 <__mcmp+0x32>
 80172e6:	2201      	movs	r2, #1
 80172e8:	4610      	mov	r0, r2
 80172ea:	bd30      	pop	{r4, r5, pc}
 80172ec:	4283      	cmp	r3, r0
 80172ee:	d3f3      	bcc.n	80172d8 <__mcmp+0x18>
 80172f0:	e7fa      	b.n	80172e8 <__mcmp+0x28>
 80172f2:	f04f 32ff 	mov.w	r2, #4294967295
 80172f6:	e7f7      	b.n	80172e8 <__mcmp+0x28>

080172f8 <__mdiff>:
 80172f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172fc:	460c      	mov	r4, r1
 80172fe:	4606      	mov	r6, r0
 8017300:	4611      	mov	r1, r2
 8017302:	4620      	mov	r0, r4
 8017304:	4690      	mov	r8, r2
 8017306:	f7ff ffdb 	bl	80172c0 <__mcmp>
 801730a:	1e05      	subs	r5, r0, #0
 801730c:	d110      	bne.n	8017330 <__mdiff+0x38>
 801730e:	4629      	mov	r1, r5
 8017310:	4630      	mov	r0, r6
 8017312:	f7ff fda1 	bl	8016e58 <_Balloc>
 8017316:	b930      	cbnz	r0, 8017326 <__mdiff+0x2e>
 8017318:	4b3a      	ldr	r3, [pc, #232]	; (8017404 <__mdiff+0x10c>)
 801731a:	4602      	mov	r2, r0
 801731c:	f240 2132 	movw	r1, #562	; 0x232
 8017320:	4839      	ldr	r0, [pc, #228]	; (8017408 <__mdiff+0x110>)
 8017322:	f001 f959 	bl	80185d8 <__assert_func>
 8017326:	2301      	movs	r3, #1
 8017328:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801732c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017330:	bfa4      	itt	ge
 8017332:	4643      	movge	r3, r8
 8017334:	46a0      	movge	r8, r4
 8017336:	4630      	mov	r0, r6
 8017338:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801733c:	bfa6      	itte	ge
 801733e:	461c      	movge	r4, r3
 8017340:	2500      	movge	r5, #0
 8017342:	2501      	movlt	r5, #1
 8017344:	f7ff fd88 	bl	8016e58 <_Balloc>
 8017348:	b920      	cbnz	r0, 8017354 <__mdiff+0x5c>
 801734a:	4b2e      	ldr	r3, [pc, #184]	; (8017404 <__mdiff+0x10c>)
 801734c:	4602      	mov	r2, r0
 801734e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8017352:	e7e5      	b.n	8017320 <__mdiff+0x28>
 8017354:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017358:	6926      	ldr	r6, [r4, #16]
 801735a:	60c5      	str	r5, [r0, #12]
 801735c:	f104 0914 	add.w	r9, r4, #20
 8017360:	f108 0514 	add.w	r5, r8, #20
 8017364:	f100 0e14 	add.w	lr, r0, #20
 8017368:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801736c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8017370:	f108 0210 	add.w	r2, r8, #16
 8017374:	46f2      	mov	sl, lr
 8017376:	2100      	movs	r1, #0
 8017378:	f859 3b04 	ldr.w	r3, [r9], #4
 801737c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8017380:	fa1f f883 	uxth.w	r8, r3
 8017384:	fa11 f18b 	uxtah	r1, r1, fp
 8017388:	0c1b      	lsrs	r3, r3, #16
 801738a:	eba1 0808 	sub.w	r8, r1, r8
 801738e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8017392:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8017396:	fa1f f888 	uxth.w	r8, r8
 801739a:	1419      	asrs	r1, r3, #16
 801739c:	454e      	cmp	r6, r9
 801739e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80173a2:	f84a 3b04 	str.w	r3, [sl], #4
 80173a6:	d8e7      	bhi.n	8017378 <__mdiff+0x80>
 80173a8:	1b33      	subs	r3, r6, r4
 80173aa:	3b15      	subs	r3, #21
 80173ac:	f023 0303 	bic.w	r3, r3, #3
 80173b0:	3304      	adds	r3, #4
 80173b2:	3415      	adds	r4, #21
 80173b4:	42a6      	cmp	r6, r4
 80173b6:	bf38      	it	cc
 80173b8:	2304      	movcc	r3, #4
 80173ba:	441d      	add	r5, r3
 80173bc:	4473      	add	r3, lr
 80173be:	469e      	mov	lr, r3
 80173c0:	462e      	mov	r6, r5
 80173c2:	4566      	cmp	r6, ip
 80173c4:	d30e      	bcc.n	80173e4 <__mdiff+0xec>
 80173c6:	f10c 0203 	add.w	r2, ip, #3
 80173ca:	1b52      	subs	r2, r2, r5
 80173cc:	f022 0203 	bic.w	r2, r2, #3
 80173d0:	3d03      	subs	r5, #3
 80173d2:	45ac      	cmp	ip, r5
 80173d4:	bf38      	it	cc
 80173d6:	2200      	movcc	r2, #0
 80173d8:	441a      	add	r2, r3
 80173da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80173de:	b17b      	cbz	r3, 8017400 <__mdiff+0x108>
 80173e0:	6107      	str	r7, [r0, #16]
 80173e2:	e7a3      	b.n	801732c <__mdiff+0x34>
 80173e4:	f856 8b04 	ldr.w	r8, [r6], #4
 80173e8:	fa11 f288 	uxtah	r2, r1, r8
 80173ec:	1414      	asrs	r4, r2, #16
 80173ee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80173f2:	b292      	uxth	r2, r2
 80173f4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80173f8:	f84e 2b04 	str.w	r2, [lr], #4
 80173fc:	1421      	asrs	r1, r4, #16
 80173fe:	e7e0      	b.n	80173c2 <__mdiff+0xca>
 8017400:	3f01      	subs	r7, #1
 8017402:	e7ea      	b.n	80173da <__mdiff+0xe2>
 8017404:	08019589 	.word	0x08019589
 8017408:	080195f5 	.word	0x080195f5

0801740c <__d2b>:
 801740c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017410:	4689      	mov	r9, r1
 8017412:	2101      	movs	r1, #1
 8017414:	ec57 6b10 	vmov	r6, r7, d0
 8017418:	4690      	mov	r8, r2
 801741a:	f7ff fd1d 	bl	8016e58 <_Balloc>
 801741e:	4604      	mov	r4, r0
 8017420:	b930      	cbnz	r0, 8017430 <__d2b+0x24>
 8017422:	4602      	mov	r2, r0
 8017424:	4b25      	ldr	r3, [pc, #148]	; (80174bc <__d2b+0xb0>)
 8017426:	4826      	ldr	r0, [pc, #152]	; (80174c0 <__d2b+0xb4>)
 8017428:	f240 310a 	movw	r1, #778	; 0x30a
 801742c:	f001 f8d4 	bl	80185d8 <__assert_func>
 8017430:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8017434:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017438:	bb35      	cbnz	r5, 8017488 <__d2b+0x7c>
 801743a:	2e00      	cmp	r6, #0
 801743c:	9301      	str	r3, [sp, #4]
 801743e:	d028      	beq.n	8017492 <__d2b+0x86>
 8017440:	4668      	mov	r0, sp
 8017442:	9600      	str	r6, [sp, #0]
 8017444:	f7ff fd9c 	bl	8016f80 <__lo0bits>
 8017448:	9900      	ldr	r1, [sp, #0]
 801744a:	b300      	cbz	r0, 801748e <__d2b+0x82>
 801744c:	9a01      	ldr	r2, [sp, #4]
 801744e:	f1c0 0320 	rsb	r3, r0, #32
 8017452:	fa02 f303 	lsl.w	r3, r2, r3
 8017456:	430b      	orrs	r3, r1
 8017458:	40c2      	lsrs	r2, r0
 801745a:	6163      	str	r3, [r4, #20]
 801745c:	9201      	str	r2, [sp, #4]
 801745e:	9b01      	ldr	r3, [sp, #4]
 8017460:	61a3      	str	r3, [r4, #24]
 8017462:	2b00      	cmp	r3, #0
 8017464:	bf14      	ite	ne
 8017466:	2202      	movne	r2, #2
 8017468:	2201      	moveq	r2, #1
 801746a:	6122      	str	r2, [r4, #16]
 801746c:	b1d5      	cbz	r5, 80174a4 <__d2b+0x98>
 801746e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8017472:	4405      	add	r5, r0
 8017474:	f8c9 5000 	str.w	r5, [r9]
 8017478:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801747c:	f8c8 0000 	str.w	r0, [r8]
 8017480:	4620      	mov	r0, r4
 8017482:	b003      	add	sp, #12
 8017484:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017488:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801748c:	e7d5      	b.n	801743a <__d2b+0x2e>
 801748e:	6161      	str	r1, [r4, #20]
 8017490:	e7e5      	b.n	801745e <__d2b+0x52>
 8017492:	a801      	add	r0, sp, #4
 8017494:	f7ff fd74 	bl	8016f80 <__lo0bits>
 8017498:	9b01      	ldr	r3, [sp, #4]
 801749a:	6163      	str	r3, [r4, #20]
 801749c:	2201      	movs	r2, #1
 801749e:	6122      	str	r2, [r4, #16]
 80174a0:	3020      	adds	r0, #32
 80174a2:	e7e3      	b.n	801746c <__d2b+0x60>
 80174a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80174a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80174ac:	f8c9 0000 	str.w	r0, [r9]
 80174b0:	6918      	ldr	r0, [r3, #16]
 80174b2:	f7ff fd45 	bl	8016f40 <__hi0bits>
 80174b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80174ba:	e7df      	b.n	801747c <__d2b+0x70>
 80174bc:	08019589 	.word	0x08019589
 80174c0:	080195f5 	.word	0x080195f5

080174c4 <_putc_r>:
 80174c4:	b570      	push	{r4, r5, r6, lr}
 80174c6:	460d      	mov	r5, r1
 80174c8:	4614      	mov	r4, r2
 80174ca:	4606      	mov	r6, r0
 80174cc:	b118      	cbz	r0, 80174d6 <_putc_r+0x12>
 80174ce:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80174d0:	b90b      	cbnz	r3, 80174d6 <_putc_r+0x12>
 80174d2:	f7ff f96b 	bl	80167ac <__sinit>
 80174d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80174d8:	07d8      	lsls	r0, r3, #31
 80174da:	d405      	bmi.n	80174e8 <_putc_r+0x24>
 80174dc:	89a3      	ldrh	r3, [r4, #12]
 80174de:	0599      	lsls	r1, r3, #22
 80174e0:	d402      	bmi.n	80174e8 <_putc_r+0x24>
 80174e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80174e4:	f7ff fc22 	bl	8016d2c <__retarget_lock_acquire_recursive>
 80174e8:	68a3      	ldr	r3, [r4, #8]
 80174ea:	3b01      	subs	r3, #1
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	60a3      	str	r3, [r4, #8]
 80174f0:	da05      	bge.n	80174fe <_putc_r+0x3a>
 80174f2:	69a2      	ldr	r2, [r4, #24]
 80174f4:	4293      	cmp	r3, r2
 80174f6:	db12      	blt.n	801751e <_putc_r+0x5a>
 80174f8:	b2eb      	uxtb	r3, r5
 80174fa:	2b0a      	cmp	r3, #10
 80174fc:	d00f      	beq.n	801751e <_putc_r+0x5a>
 80174fe:	6823      	ldr	r3, [r4, #0]
 8017500:	1c5a      	adds	r2, r3, #1
 8017502:	6022      	str	r2, [r4, #0]
 8017504:	701d      	strb	r5, [r3, #0]
 8017506:	b2ed      	uxtb	r5, r5
 8017508:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801750a:	07da      	lsls	r2, r3, #31
 801750c:	d405      	bmi.n	801751a <_putc_r+0x56>
 801750e:	89a3      	ldrh	r3, [r4, #12]
 8017510:	059b      	lsls	r3, r3, #22
 8017512:	d402      	bmi.n	801751a <_putc_r+0x56>
 8017514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017516:	f7ff fc0a 	bl	8016d2e <__retarget_lock_release_recursive>
 801751a:	4628      	mov	r0, r5
 801751c:	bd70      	pop	{r4, r5, r6, pc}
 801751e:	4629      	mov	r1, r5
 8017520:	4622      	mov	r2, r4
 8017522:	4630      	mov	r0, r6
 8017524:	f000 ffba 	bl	801849c <__swbuf_r>
 8017528:	4605      	mov	r5, r0
 801752a:	e7ed      	b.n	8017508 <_putc_r+0x44>

0801752c <_realloc_r>:
 801752c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017530:	4681      	mov	r9, r0
 8017532:	460c      	mov	r4, r1
 8017534:	b929      	cbnz	r1, 8017542 <_realloc_r+0x16>
 8017536:	4611      	mov	r1, r2
 8017538:	b003      	add	sp, #12
 801753a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801753e:	f7fb baa5 	b.w	8012a8c <_malloc_r>
 8017542:	9201      	str	r2, [sp, #4]
 8017544:	f7fb fce6 	bl	8012f14 <__malloc_lock>
 8017548:	9a01      	ldr	r2, [sp, #4]
 801754a:	f102 080b 	add.w	r8, r2, #11
 801754e:	f1b8 0f16 	cmp.w	r8, #22
 8017552:	d90b      	bls.n	801756c <_realloc_r+0x40>
 8017554:	f038 0807 	bics.w	r8, r8, #7
 8017558:	d50a      	bpl.n	8017570 <_realloc_r+0x44>
 801755a:	230c      	movs	r3, #12
 801755c:	f8c9 3000 	str.w	r3, [r9]
 8017560:	f04f 0b00 	mov.w	fp, #0
 8017564:	4658      	mov	r0, fp
 8017566:	b003      	add	sp, #12
 8017568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801756c:	f04f 0810 	mov.w	r8, #16
 8017570:	4590      	cmp	r8, r2
 8017572:	d3f2      	bcc.n	801755a <_realloc_r+0x2e>
 8017574:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8017578:	f025 0603 	bic.w	r6, r5, #3
 801757c:	45b0      	cmp	r8, r6
 801757e:	f1a4 0a08 	sub.w	sl, r4, #8
 8017582:	f340 816e 	ble.w	8017862 <_realloc_r+0x336>
 8017586:	499b      	ldr	r1, [pc, #620]	; (80177f4 <_realloc_r+0x2c8>)
 8017588:	f8d1 c008 	ldr.w	ip, [r1, #8]
 801758c:	eb0a 0306 	add.w	r3, sl, r6
 8017590:	459c      	cmp	ip, r3
 8017592:	6859      	ldr	r1, [r3, #4]
 8017594:	d005      	beq.n	80175a2 <_realloc_r+0x76>
 8017596:	f021 0001 	bic.w	r0, r1, #1
 801759a:	4418      	add	r0, r3
 801759c:	6840      	ldr	r0, [r0, #4]
 801759e:	07c7      	lsls	r7, r0, #31
 80175a0:	d427      	bmi.n	80175f2 <_realloc_r+0xc6>
 80175a2:	f021 0103 	bic.w	r1, r1, #3
 80175a6:	459c      	cmp	ip, r3
 80175a8:	eb06 0701 	add.w	r7, r6, r1
 80175ac:	d119      	bne.n	80175e2 <_realloc_r+0xb6>
 80175ae:	f108 0010 	add.w	r0, r8, #16
 80175b2:	42b8      	cmp	r0, r7
 80175b4:	dc1f      	bgt.n	80175f6 <_realloc_r+0xca>
 80175b6:	eb0a 0308 	add.w	r3, sl, r8
 80175ba:	4a8e      	ldr	r2, [pc, #568]	; (80177f4 <_realloc_r+0x2c8>)
 80175bc:	eba7 0708 	sub.w	r7, r7, r8
 80175c0:	f047 0701 	orr.w	r7, r7, #1
 80175c4:	6093      	str	r3, [r2, #8]
 80175c6:	605f      	str	r7, [r3, #4]
 80175c8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80175cc:	f003 0301 	and.w	r3, r3, #1
 80175d0:	ea43 0308 	orr.w	r3, r3, r8
 80175d4:	f844 3c04 	str.w	r3, [r4, #-4]
 80175d8:	4648      	mov	r0, r9
 80175da:	f7fb fca1 	bl	8012f20 <__malloc_unlock>
 80175de:	46a3      	mov	fp, r4
 80175e0:	e7c0      	b.n	8017564 <_realloc_r+0x38>
 80175e2:	45b8      	cmp	r8, r7
 80175e4:	dc07      	bgt.n	80175f6 <_realloc_r+0xca>
 80175e6:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 80175ea:	60da      	str	r2, [r3, #12]
 80175ec:	6093      	str	r3, [r2, #8]
 80175ee:	4655      	mov	r5, sl
 80175f0:	e07f      	b.n	80176f2 <_realloc_r+0x1c6>
 80175f2:	2100      	movs	r1, #0
 80175f4:	460b      	mov	r3, r1
 80175f6:	07e8      	lsls	r0, r5, #31
 80175f8:	f100 80e5 	bmi.w	80177c6 <_realloc_r+0x29a>
 80175fc:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8017600:	ebaa 0505 	sub.w	r5, sl, r5
 8017604:	6868      	ldr	r0, [r5, #4]
 8017606:	f020 0003 	bic.w	r0, r0, #3
 801760a:	eb00 0b06 	add.w	fp, r0, r6
 801760e:	2b00      	cmp	r3, #0
 8017610:	f000 80a5 	beq.w	801775e <_realloc_r+0x232>
 8017614:	459c      	cmp	ip, r3
 8017616:	eb01 070b 	add.w	r7, r1, fp
 801761a:	d14a      	bne.n	80176b2 <_realloc_r+0x186>
 801761c:	f108 0310 	add.w	r3, r8, #16
 8017620:	42bb      	cmp	r3, r7
 8017622:	f300 809c 	bgt.w	801775e <_realloc_r+0x232>
 8017626:	46ab      	mov	fp, r5
 8017628:	68eb      	ldr	r3, [r5, #12]
 801762a:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 801762e:	60d3      	str	r3, [r2, #12]
 8017630:	609a      	str	r2, [r3, #8]
 8017632:	1f32      	subs	r2, r6, #4
 8017634:	2a24      	cmp	r2, #36	; 0x24
 8017636:	d837      	bhi.n	80176a8 <_realloc_r+0x17c>
 8017638:	2a13      	cmp	r2, #19
 801763a:	d933      	bls.n	80176a4 <_realloc_r+0x178>
 801763c:	6823      	ldr	r3, [r4, #0]
 801763e:	60ab      	str	r3, [r5, #8]
 8017640:	6863      	ldr	r3, [r4, #4]
 8017642:	60eb      	str	r3, [r5, #12]
 8017644:	2a1b      	cmp	r2, #27
 8017646:	d81b      	bhi.n	8017680 <_realloc_r+0x154>
 8017648:	3408      	adds	r4, #8
 801764a:	f105 0310 	add.w	r3, r5, #16
 801764e:	6822      	ldr	r2, [r4, #0]
 8017650:	601a      	str	r2, [r3, #0]
 8017652:	6862      	ldr	r2, [r4, #4]
 8017654:	605a      	str	r2, [r3, #4]
 8017656:	68a2      	ldr	r2, [r4, #8]
 8017658:	609a      	str	r2, [r3, #8]
 801765a:	eb05 0308 	add.w	r3, r5, r8
 801765e:	4a65      	ldr	r2, [pc, #404]	; (80177f4 <_realloc_r+0x2c8>)
 8017660:	eba7 0708 	sub.w	r7, r7, r8
 8017664:	f047 0701 	orr.w	r7, r7, #1
 8017668:	6093      	str	r3, [r2, #8]
 801766a:	605f      	str	r7, [r3, #4]
 801766c:	686b      	ldr	r3, [r5, #4]
 801766e:	f003 0301 	and.w	r3, r3, #1
 8017672:	ea43 0308 	orr.w	r3, r3, r8
 8017676:	606b      	str	r3, [r5, #4]
 8017678:	4648      	mov	r0, r9
 801767a:	f7fb fc51 	bl	8012f20 <__malloc_unlock>
 801767e:	e771      	b.n	8017564 <_realloc_r+0x38>
 8017680:	68a3      	ldr	r3, [r4, #8]
 8017682:	612b      	str	r3, [r5, #16]
 8017684:	68e3      	ldr	r3, [r4, #12]
 8017686:	616b      	str	r3, [r5, #20]
 8017688:	2a24      	cmp	r2, #36	; 0x24
 801768a:	bf01      	itttt	eq
 801768c:	6923      	ldreq	r3, [r4, #16]
 801768e:	61ab      	streq	r3, [r5, #24]
 8017690:	6962      	ldreq	r2, [r4, #20]
 8017692:	61ea      	streq	r2, [r5, #28]
 8017694:	bf19      	ittee	ne
 8017696:	3410      	addne	r4, #16
 8017698:	f105 0318 	addne.w	r3, r5, #24
 801769c:	f105 0320 	addeq.w	r3, r5, #32
 80176a0:	3418      	addeq	r4, #24
 80176a2:	e7d4      	b.n	801764e <_realloc_r+0x122>
 80176a4:	465b      	mov	r3, fp
 80176a6:	e7d2      	b.n	801764e <_realloc_r+0x122>
 80176a8:	4621      	mov	r1, r4
 80176aa:	4658      	mov	r0, fp
 80176ac:	f7ff fbba 	bl	8016e24 <memmove>
 80176b0:	e7d3      	b.n	801765a <_realloc_r+0x12e>
 80176b2:	45b8      	cmp	r8, r7
 80176b4:	dc53      	bgt.n	801775e <_realloc_r+0x232>
 80176b6:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 80176ba:	4628      	mov	r0, r5
 80176bc:	60da      	str	r2, [r3, #12]
 80176be:	6093      	str	r3, [r2, #8]
 80176c0:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80176c4:	68eb      	ldr	r3, [r5, #12]
 80176c6:	60d3      	str	r3, [r2, #12]
 80176c8:	609a      	str	r2, [r3, #8]
 80176ca:	1f32      	subs	r2, r6, #4
 80176cc:	2a24      	cmp	r2, #36	; 0x24
 80176ce:	d842      	bhi.n	8017756 <_realloc_r+0x22a>
 80176d0:	2a13      	cmp	r2, #19
 80176d2:	d908      	bls.n	80176e6 <_realloc_r+0x1ba>
 80176d4:	6823      	ldr	r3, [r4, #0]
 80176d6:	60ab      	str	r3, [r5, #8]
 80176d8:	6863      	ldr	r3, [r4, #4]
 80176da:	60eb      	str	r3, [r5, #12]
 80176dc:	2a1b      	cmp	r2, #27
 80176de:	d828      	bhi.n	8017732 <_realloc_r+0x206>
 80176e0:	3408      	adds	r4, #8
 80176e2:	f105 0010 	add.w	r0, r5, #16
 80176e6:	6823      	ldr	r3, [r4, #0]
 80176e8:	6003      	str	r3, [r0, #0]
 80176ea:	6863      	ldr	r3, [r4, #4]
 80176ec:	6043      	str	r3, [r0, #4]
 80176ee:	68a3      	ldr	r3, [r4, #8]
 80176f0:	6083      	str	r3, [r0, #8]
 80176f2:	686b      	ldr	r3, [r5, #4]
 80176f4:	eba7 0008 	sub.w	r0, r7, r8
 80176f8:	280f      	cmp	r0, #15
 80176fa:	f003 0301 	and.w	r3, r3, #1
 80176fe:	eb05 0207 	add.w	r2, r5, r7
 8017702:	f240 80b0 	bls.w	8017866 <_realloc_r+0x33a>
 8017706:	eb05 0108 	add.w	r1, r5, r8
 801770a:	ea48 0303 	orr.w	r3, r8, r3
 801770e:	f040 0001 	orr.w	r0, r0, #1
 8017712:	606b      	str	r3, [r5, #4]
 8017714:	6048      	str	r0, [r1, #4]
 8017716:	6853      	ldr	r3, [r2, #4]
 8017718:	f043 0301 	orr.w	r3, r3, #1
 801771c:	6053      	str	r3, [r2, #4]
 801771e:	3108      	adds	r1, #8
 8017720:	4648      	mov	r0, r9
 8017722:	f7ff f8d3 	bl	80168cc <_free_r>
 8017726:	4648      	mov	r0, r9
 8017728:	f7fb fbfa 	bl	8012f20 <__malloc_unlock>
 801772c:	f105 0b08 	add.w	fp, r5, #8
 8017730:	e718      	b.n	8017564 <_realloc_r+0x38>
 8017732:	68a3      	ldr	r3, [r4, #8]
 8017734:	612b      	str	r3, [r5, #16]
 8017736:	68e3      	ldr	r3, [r4, #12]
 8017738:	616b      	str	r3, [r5, #20]
 801773a:	2a24      	cmp	r2, #36	; 0x24
 801773c:	bf01      	itttt	eq
 801773e:	6923      	ldreq	r3, [r4, #16]
 8017740:	61ab      	streq	r3, [r5, #24]
 8017742:	6963      	ldreq	r3, [r4, #20]
 8017744:	61eb      	streq	r3, [r5, #28]
 8017746:	bf19      	ittee	ne
 8017748:	3410      	addne	r4, #16
 801774a:	f105 0018 	addne.w	r0, r5, #24
 801774e:	f105 0020 	addeq.w	r0, r5, #32
 8017752:	3418      	addeq	r4, #24
 8017754:	e7c7      	b.n	80176e6 <_realloc_r+0x1ba>
 8017756:	4621      	mov	r1, r4
 8017758:	f7ff fb64 	bl	8016e24 <memmove>
 801775c:	e7c9      	b.n	80176f2 <_realloc_r+0x1c6>
 801775e:	45d8      	cmp	r8, fp
 8017760:	dc31      	bgt.n	80177c6 <_realloc_r+0x29a>
 8017762:	4628      	mov	r0, r5
 8017764:	68eb      	ldr	r3, [r5, #12]
 8017766:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801776a:	60d3      	str	r3, [r2, #12]
 801776c:	609a      	str	r2, [r3, #8]
 801776e:	1f32      	subs	r2, r6, #4
 8017770:	2a24      	cmp	r2, #36	; 0x24
 8017772:	d824      	bhi.n	80177be <_realloc_r+0x292>
 8017774:	2a13      	cmp	r2, #19
 8017776:	d908      	bls.n	801778a <_realloc_r+0x25e>
 8017778:	6823      	ldr	r3, [r4, #0]
 801777a:	60ab      	str	r3, [r5, #8]
 801777c:	6863      	ldr	r3, [r4, #4]
 801777e:	60eb      	str	r3, [r5, #12]
 8017780:	2a1b      	cmp	r2, #27
 8017782:	d80a      	bhi.n	801779a <_realloc_r+0x26e>
 8017784:	3408      	adds	r4, #8
 8017786:	f105 0010 	add.w	r0, r5, #16
 801778a:	6823      	ldr	r3, [r4, #0]
 801778c:	6003      	str	r3, [r0, #0]
 801778e:	6863      	ldr	r3, [r4, #4]
 8017790:	6043      	str	r3, [r0, #4]
 8017792:	68a3      	ldr	r3, [r4, #8]
 8017794:	6083      	str	r3, [r0, #8]
 8017796:	465f      	mov	r7, fp
 8017798:	e7ab      	b.n	80176f2 <_realloc_r+0x1c6>
 801779a:	68a3      	ldr	r3, [r4, #8]
 801779c:	612b      	str	r3, [r5, #16]
 801779e:	68e3      	ldr	r3, [r4, #12]
 80177a0:	616b      	str	r3, [r5, #20]
 80177a2:	2a24      	cmp	r2, #36	; 0x24
 80177a4:	bf01      	itttt	eq
 80177a6:	6923      	ldreq	r3, [r4, #16]
 80177a8:	61ab      	streq	r3, [r5, #24]
 80177aa:	6963      	ldreq	r3, [r4, #20]
 80177ac:	61eb      	streq	r3, [r5, #28]
 80177ae:	bf19      	ittee	ne
 80177b0:	3410      	addne	r4, #16
 80177b2:	f105 0018 	addne.w	r0, r5, #24
 80177b6:	f105 0020 	addeq.w	r0, r5, #32
 80177ba:	3418      	addeq	r4, #24
 80177bc:	e7e5      	b.n	801778a <_realloc_r+0x25e>
 80177be:	4621      	mov	r1, r4
 80177c0:	f7ff fb30 	bl	8016e24 <memmove>
 80177c4:	e7e7      	b.n	8017796 <_realloc_r+0x26a>
 80177c6:	4611      	mov	r1, r2
 80177c8:	4648      	mov	r0, r9
 80177ca:	f7fb f95f 	bl	8012a8c <_malloc_r>
 80177ce:	4683      	mov	fp, r0
 80177d0:	2800      	cmp	r0, #0
 80177d2:	f43f af51 	beq.w	8017678 <_realloc_r+0x14c>
 80177d6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80177da:	f023 0301 	bic.w	r3, r3, #1
 80177de:	4453      	add	r3, sl
 80177e0:	f1a0 0208 	sub.w	r2, r0, #8
 80177e4:	4293      	cmp	r3, r2
 80177e6:	d107      	bne.n	80177f8 <_realloc_r+0x2cc>
 80177e8:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80177ec:	f027 0703 	bic.w	r7, r7, #3
 80177f0:	4437      	add	r7, r6
 80177f2:	e6fc      	b.n	80175ee <_realloc_r+0xc2>
 80177f4:	200008e8 	.word	0x200008e8
 80177f8:	1f32      	subs	r2, r6, #4
 80177fa:	2a24      	cmp	r2, #36	; 0x24
 80177fc:	d82d      	bhi.n	801785a <_realloc_r+0x32e>
 80177fe:	2a13      	cmp	r2, #19
 8017800:	d928      	bls.n	8017854 <_realloc_r+0x328>
 8017802:	6823      	ldr	r3, [r4, #0]
 8017804:	6003      	str	r3, [r0, #0]
 8017806:	6863      	ldr	r3, [r4, #4]
 8017808:	6043      	str	r3, [r0, #4]
 801780a:	2a1b      	cmp	r2, #27
 801780c:	d80e      	bhi.n	801782c <_realloc_r+0x300>
 801780e:	f104 0208 	add.w	r2, r4, #8
 8017812:	f100 0308 	add.w	r3, r0, #8
 8017816:	6811      	ldr	r1, [r2, #0]
 8017818:	6019      	str	r1, [r3, #0]
 801781a:	6851      	ldr	r1, [r2, #4]
 801781c:	6059      	str	r1, [r3, #4]
 801781e:	6892      	ldr	r2, [r2, #8]
 8017820:	609a      	str	r2, [r3, #8]
 8017822:	4621      	mov	r1, r4
 8017824:	4648      	mov	r0, r9
 8017826:	f7ff f851 	bl	80168cc <_free_r>
 801782a:	e725      	b.n	8017678 <_realloc_r+0x14c>
 801782c:	68a3      	ldr	r3, [r4, #8]
 801782e:	6083      	str	r3, [r0, #8]
 8017830:	68e3      	ldr	r3, [r4, #12]
 8017832:	60c3      	str	r3, [r0, #12]
 8017834:	2a24      	cmp	r2, #36	; 0x24
 8017836:	bf01      	itttt	eq
 8017838:	6923      	ldreq	r3, [r4, #16]
 801783a:	6103      	streq	r3, [r0, #16]
 801783c:	6961      	ldreq	r1, [r4, #20]
 801783e:	6141      	streq	r1, [r0, #20]
 8017840:	bf19      	ittee	ne
 8017842:	f104 0210 	addne.w	r2, r4, #16
 8017846:	f100 0310 	addne.w	r3, r0, #16
 801784a:	f104 0218 	addeq.w	r2, r4, #24
 801784e:	f100 0318 	addeq.w	r3, r0, #24
 8017852:	e7e0      	b.n	8017816 <_realloc_r+0x2ea>
 8017854:	4603      	mov	r3, r0
 8017856:	4622      	mov	r2, r4
 8017858:	e7dd      	b.n	8017816 <_realloc_r+0x2ea>
 801785a:	4621      	mov	r1, r4
 801785c:	f7ff fae2 	bl	8016e24 <memmove>
 8017860:	e7df      	b.n	8017822 <_realloc_r+0x2f6>
 8017862:	4637      	mov	r7, r6
 8017864:	e6c3      	b.n	80175ee <_realloc_r+0xc2>
 8017866:	431f      	orrs	r7, r3
 8017868:	606f      	str	r7, [r5, #4]
 801786a:	6853      	ldr	r3, [r2, #4]
 801786c:	f043 0301 	orr.w	r3, r3, #1
 8017870:	6053      	str	r3, [r2, #4]
 8017872:	e758      	b.n	8017726 <_realloc_r+0x1fa>
 8017874:	0000      	movs	r0, r0
	...

08017878 <frexp>:
 8017878:	2200      	movs	r2, #0
 801787a:	ee10 1a90 	vmov	r1, s1
 801787e:	6002      	str	r2, [r0, #0]
 8017880:	4a17      	ldr	r2, [pc, #92]	; (80178e0 <frexp+0x68>)
 8017882:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017886:	4293      	cmp	r3, r2
 8017888:	dc23      	bgt.n	80178d2 <frexp+0x5a>
 801788a:	ee10 2a10 	vmov	r2, s0
 801788e:	431a      	orrs	r2, r3
 8017890:	d01f      	beq.n	80178d2 <frexp+0x5a>
 8017892:	4a14      	ldr	r2, [pc, #80]	; (80178e4 <frexp+0x6c>)
 8017894:	400a      	ands	r2, r1
 8017896:	b952      	cbnz	r2, 80178ae <frexp+0x36>
 8017898:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80178d8 <frexp+0x60>
 801789c:	ee20 0b07 	vmul.f64	d0, d0, d7
 80178a0:	ee10 1a90 	vmov	r1, s1
 80178a4:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80178a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80178ac:	6002      	str	r2, [r0, #0]
 80178ae:	6802      	ldr	r2, [r0, #0]
 80178b0:	151b      	asrs	r3, r3, #20
 80178b2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80178b6:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80178ba:	4413      	add	r3, r2
 80178bc:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80178c0:	6003      	str	r3, [r0, #0]
 80178c2:	ec53 2b10 	vmov	r2, r3, d0
 80178c6:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 80178ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80178ce:	ec43 2b10 	vmov	d0, r2, r3
 80178d2:	4770      	bx	lr
 80178d4:	f3af 8000 	nop.w
 80178d8:	00000000 	.word	0x00000000
 80178dc:	43500000 	.word	0x43500000
 80178e0:	7fefffff 	.word	0x7fefffff
 80178e4:	7ff00000 	.word	0x7ff00000

080178e8 <__sread>:
 80178e8:	b510      	push	{r4, lr}
 80178ea:	460c      	mov	r4, r1
 80178ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178f0:	f000 fff8 	bl	80188e4 <_read_r>
 80178f4:	2800      	cmp	r0, #0
 80178f6:	bfab      	itete	ge
 80178f8:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 80178fa:	89a3      	ldrhlt	r3, [r4, #12]
 80178fc:	181b      	addge	r3, r3, r0
 80178fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017902:	bfac      	ite	ge
 8017904:	6523      	strge	r3, [r4, #80]	; 0x50
 8017906:	81a3      	strhlt	r3, [r4, #12]
 8017908:	bd10      	pop	{r4, pc}

0801790a <__swrite>:
 801790a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801790e:	461f      	mov	r7, r3
 8017910:	898b      	ldrh	r3, [r1, #12]
 8017912:	05db      	lsls	r3, r3, #23
 8017914:	4605      	mov	r5, r0
 8017916:	460c      	mov	r4, r1
 8017918:	4616      	mov	r6, r2
 801791a:	d505      	bpl.n	8017928 <__swrite+0x1e>
 801791c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017920:	2302      	movs	r3, #2
 8017922:	2200      	movs	r2, #0
 8017924:	f000 ffba 	bl	801889c <_lseek_r>
 8017928:	89a3      	ldrh	r3, [r4, #12]
 801792a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801792e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017932:	81a3      	strh	r3, [r4, #12]
 8017934:	4632      	mov	r2, r6
 8017936:	463b      	mov	r3, r7
 8017938:	4628      	mov	r0, r5
 801793a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801793e:	f000 bdf7 	b.w	8018530 <_write_r>

08017942 <__sseek>:
 8017942:	b510      	push	{r4, lr}
 8017944:	460c      	mov	r4, r1
 8017946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801794a:	f000 ffa7 	bl	801889c <_lseek_r>
 801794e:	1c43      	adds	r3, r0, #1
 8017950:	89a3      	ldrh	r3, [r4, #12]
 8017952:	bf15      	itete	ne
 8017954:	6520      	strne	r0, [r4, #80]	; 0x50
 8017956:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801795a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801795e:	81a3      	strheq	r3, [r4, #12]
 8017960:	bf18      	it	ne
 8017962:	81a3      	strhne	r3, [r4, #12]
 8017964:	bd10      	pop	{r4, pc}

08017966 <__sclose>:
 8017966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801796a:	f000 be89 	b.w	8018680 <_close_r>

0801796e <strncpy>:
 801796e:	b510      	push	{r4, lr}
 8017970:	3901      	subs	r1, #1
 8017972:	4603      	mov	r3, r0
 8017974:	b132      	cbz	r2, 8017984 <strncpy+0x16>
 8017976:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801797a:	f803 4b01 	strb.w	r4, [r3], #1
 801797e:	3a01      	subs	r2, #1
 8017980:	2c00      	cmp	r4, #0
 8017982:	d1f7      	bne.n	8017974 <strncpy+0x6>
 8017984:	441a      	add	r2, r3
 8017986:	2100      	movs	r1, #0
 8017988:	4293      	cmp	r3, r2
 801798a:	d100      	bne.n	801798e <strncpy+0x20>
 801798c:	bd10      	pop	{r4, pc}
 801798e:	f803 1b01 	strb.w	r1, [r3], #1
 8017992:	e7f9      	b.n	8017988 <strncpy+0x1a>

08017994 <__ssprint_r>:
 8017994:	6893      	ldr	r3, [r2, #8]
 8017996:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801799a:	4680      	mov	r8, r0
 801799c:	460c      	mov	r4, r1
 801799e:	4617      	mov	r7, r2
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d061      	beq.n	8017a68 <__ssprint_r+0xd4>
 80179a4:	2300      	movs	r3, #0
 80179a6:	f8d2 a000 	ldr.w	sl, [r2]
 80179aa:	9301      	str	r3, [sp, #4]
 80179ac:	469b      	mov	fp, r3
 80179ae:	f1bb 0f00 	cmp.w	fp, #0
 80179b2:	d02b      	beq.n	8017a0c <__ssprint_r+0x78>
 80179b4:	68a6      	ldr	r6, [r4, #8]
 80179b6:	455e      	cmp	r6, fp
 80179b8:	d844      	bhi.n	8017a44 <__ssprint_r+0xb0>
 80179ba:	89a2      	ldrh	r2, [r4, #12]
 80179bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80179c0:	d03e      	beq.n	8017a40 <__ssprint_r+0xac>
 80179c2:	6820      	ldr	r0, [r4, #0]
 80179c4:	6921      	ldr	r1, [r4, #16]
 80179c6:	6965      	ldr	r5, [r4, #20]
 80179c8:	eba0 0901 	sub.w	r9, r0, r1
 80179cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80179d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80179d4:	f109 0001 	add.w	r0, r9, #1
 80179d8:	106d      	asrs	r5, r5, #1
 80179da:	4458      	add	r0, fp
 80179dc:	4285      	cmp	r5, r0
 80179de:	bf38      	it	cc
 80179e0:	4605      	movcc	r5, r0
 80179e2:	0553      	lsls	r3, r2, #21
 80179e4:	d545      	bpl.n	8017a72 <__ssprint_r+0xde>
 80179e6:	4629      	mov	r1, r5
 80179e8:	4640      	mov	r0, r8
 80179ea:	f7fb f84f 	bl	8012a8c <_malloc_r>
 80179ee:	4606      	mov	r6, r0
 80179f0:	b9a0      	cbnz	r0, 8017a1c <__ssprint_r+0x88>
 80179f2:	230c      	movs	r3, #12
 80179f4:	f8c8 3000 	str.w	r3, [r8]
 80179f8:	89a3      	ldrh	r3, [r4, #12]
 80179fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80179fe:	81a3      	strh	r3, [r4, #12]
 8017a00:	2300      	movs	r3, #0
 8017a02:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8017a06:	f04f 30ff 	mov.w	r0, #4294967295
 8017a0a:	e02f      	b.n	8017a6c <__ssprint_r+0xd8>
 8017a0c:	f8da 3000 	ldr.w	r3, [sl]
 8017a10:	f8da b004 	ldr.w	fp, [sl, #4]
 8017a14:	9301      	str	r3, [sp, #4]
 8017a16:	f10a 0a08 	add.w	sl, sl, #8
 8017a1a:	e7c8      	b.n	80179ae <__ssprint_r+0x1a>
 8017a1c:	464a      	mov	r2, r9
 8017a1e:	6921      	ldr	r1, [r4, #16]
 8017a20:	f7ff f9f2 	bl	8016e08 <memcpy>
 8017a24:	89a2      	ldrh	r2, [r4, #12]
 8017a26:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8017a2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8017a2e:	81a2      	strh	r2, [r4, #12]
 8017a30:	6126      	str	r6, [r4, #16]
 8017a32:	6165      	str	r5, [r4, #20]
 8017a34:	444e      	add	r6, r9
 8017a36:	eba5 0509 	sub.w	r5, r5, r9
 8017a3a:	6026      	str	r6, [r4, #0]
 8017a3c:	60a5      	str	r5, [r4, #8]
 8017a3e:	465e      	mov	r6, fp
 8017a40:	455e      	cmp	r6, fp
 8017a42:	d900      	bls.n	8017a46 <__ssprint_r+0xb2>
 8017a44:	465e      	mov	r6, fp
 8017a46:	4632      	mov	r2, r6
 8017a48:	9901      	ldr	r1, [sp, #4]
 8017a4a:	6820      	ldr	r0, [r4, #0]
 8017a4c:	f7ff f9ea 	bl	8016e24 <memmove>
 8017a50:	68a2      	ldr	r2, [r4, #8]
 8017a52:	1b92      	subs	r2, r2, r6
 8017a54:	60a2      	str	r2, [r4, #8]
 8017a56:	6822      	ldr	r2, [r4, #0]
 8017a58:	4432      	add	r2, r6
 8017a5a:	6022      	str	r2, [r4, #0]
 8017a5c:	68ba      	ldr	r2, [r7, #8]
 8017a5e:	eba2 030b 	sub.w	r3, r2, fp
 8017a62:	60bb      	str	r3, [r7, #8]
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d1d1      	bne.n	8017a0c <__ssprint_r+0x78>
 8017a68:	2000      	movs	r0, #0
 8017a6a:	6078      	str	r0, [r7, #4]
 8017a6c:	b003      	add	sp, #12
 8017a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a72:	462a      	mov	r2, r5
 8017a74:	4640      	mov	r0, r8
 8017a76:	f7ff fd59 	bl	801752c <_realloc_r>
 8017a7a:	4606      	mov	r6, r0
 8017a7c:	2800      	cmp	r0, #0
 8017a7e:	d1d7      	bne.n	8017a30 <__ssprint_r+0x9c>
 8017a80:	6921      	ldr	r1, [r4, #16]
 8017a82:	4640      	mov	r0, r8
 8017a84:	f7fe ff22 	bl	80168cc <_free_r>
 8017a88:	e7b3      	b.n	80179f2 <__ssprint_r+0x5e>

08017a8a <__sprint_r>:
 8017a8a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a8e:	6893      	ldr	r3, [r2, #8]
 8017a90:	4680      	mov	r8, r0
 8017a92:	460f      	mov	r7, r1
 8017a94:	4614      	mov	r4, r2
 8017a96:	b91b      	cbnz	r3, 8017aa0 <__sprint_r+0x16>
 8017a98:	6053      	str	r3, [r2, #4]
 8017a9a:	4618      	mov	r0, r3
 8017a9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017aa0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8017aa2:	049d      	lsls	r5, r3, #18
 8017aa4:	d520      	bpl.n	8017ae8 <__sprint_r+0x5e>
 8017aa6:	6815      	ldr	r5, [r2, #0]
 8017aa8:	3508      	adds	r5, #8
 8017aaa:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8017aae:	f04f 0900 	mov.w	r9, #0
 8017ab2:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8017ab6:	45ca      	cmp	sl, r9
 8017ab8:	dc0b      	bgt.n	8017ad2 <__sprint_r+0x48>
 8017aba:	68a3      	ldr	r3, [r4, #8]
 8017abc:	f026 0003 	bic.w	r0, r6, #3
 8017ac0:	1a18      	subs	r0, r3, r0
 8017ac2:	60a0      	str	r0, [r4, #8]
 8017ac4:	3508      	adds	r5, #8
 8017ac6:	2800      	cmp	r0, #0
 8017ac8:	d1ef      	bne.n	8017aaa <__sprint_r+0x20>
 8017aca:	2300      	movs	r3, #0
 8017acc:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8017ad0:	e7e4      	b.n	8017a9c <__sprint_r+0x12>
 8017ad2:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8017ad6:	463a      	mov	r2, r7
 8017ad8:	4640      	mov	r0, r8
 8017ada:	f000 fe8c 	bl	80187f6 <_fputwc_r>
 8017ade:	1c43      	adds	r3, r0, #1
 8017ae0:	d0f3      	beq.n	8017aca <__sprint_r+0x40>
 8017ae2:	f109 0901 	add.w	r9, r9, #1
 8017ae6:	e7e6      	b.n	8017ab6 <__sprint_r+0x2c>
 8017ae8:	f7fe ffb0 	bl	8016a4c <__sfvwrite_r>
 8017aec:	e7ed      	b.n	8017aca <__sprint_r+0x40>
	...

08017af0 <_vfiprintf_r>:
 8017af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017af4:	ed2d 8b02 	vpush	{d8}
 8017af8:	b0b9      	sub	sp, #228	; 0xe4
 8017afa:	460f      	mov	r7, r1
 8017afc:	9201      	str	r2, [sp, #4]
 8017afe:	461d      	mov	r5, r3
 8017b00:	461c      	mov	r4, r3
 8017b02:	4681      	mov	r9, r0
 8017b04:	b118      	cbz	r0, 8017b0e <_vfiprintf_r+0x1e>
 8017b06:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8017b08:	b90b      	cbnz	r3, 8017b0e <_vfiprintf_r+0x1e>
 8017b0a:	f7fe fe4f 	bl	80167ac <__sinit>
 8017b0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017b10:	07d8      	lsls	r0, r3, #31
 8017b12:	d405      	bmi.n	8017b20 <_vfiprintf_r+0x30>
 8017b14:	89bb      	ldrh	r3, [r7, #12]
 8017b16:	0599      	lsls	r1, r3, #22
 8017b18:	d402      	bmi.n	8017b20 <_vfiprintf_r+0x30>
 8017b1a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8017b1c:	f7ff f906 	bl	8016d2c <__retarget_lock_acquire_recursive>
 8017b20:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8017b24:	049a      	lsls	r2, r3, #18
 8017b26:	d406      	bmi.n	8017b36 <_vfiprintf_r+0x46>
 8017b28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017b2c:	81bb      	strh	r3, [r7, #12]
 8017b2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017b30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8017b34:	667b      	str	r3, [r7, #100]	; 0x64
 8017b36:	89bb      	ldrh	r3, [r7, #12]
 8017b38:	071e      	lsls	r6, r3, #28
 8017b3a:	d501      	bpl.n	8017b40 <_vfiprintf_r+0x50>
 8017b3c:	693b      	ldr	r3, [r7, #16]
 8017b3e:	b9bb      	cbnz	r3, 8017b70 <_vfiprintf_r+0x80>
 8017b40:	4639      	mov	r1, r7
 8017b42:	4648      	mov	r0, r9
 8017b44:	f7fd fee8 	bl	8015918 <__swsetup_r>
 8017b48:	b190      	cbz	r0, 8017b70 <_vfiprintf_r+0x80>
 8017b4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017b4c:	07d8      	lsls	r0, r3, #31
 8017b4e:	d508      	bpl.n	8017b62 <_vfiprintf_r+0x72>
 8017b50:	f04f 33ff 	mov.w	r3, #4294967295
 8017b54:	9302      	str	r3, [sp, #8]
 8017b56:	9802      	ldr	r0, [sp, #8]
 8017b58:	b039      	add	sp, #228	; 0xe4
 8017b5a:	ecbd 8b02 	vpop	{d8}
 8017b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b62:	89bb      	ldrh	r3, [r7, #12]
 8017b64:	0599      	lsls	r1, r3, #22
 8017b66:	d4f3      	bmi.n	8017b50 <_vfiprintf_r+0x60>
 8017b68:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8017b6a:	f7ff f8e0 	bl	8016d2e <__retarget_lock_release_recursive>
 8017b6e:	e7ef      	b.n	8017b50 <_vfiprintf_r+0x60>
 8017b70:	89bb      	ldrh	r3, [r7, #12]
 8017b72:	f003 021a 	and.w	r2, r3, #26
 8017b76:	2a0a      	cmp	r2, #10
 8017b78:	d116      	bne.n	8017ba8 <_vfiprintf_r+0xb8>
 8017b7a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8017b7e:	2a00      	cmp	r2, #0
 8017b80:	db12      	blt.n	8017ba8 <_vfiprintf_r+0xb8>
 8017b82:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017b84:	07d2      	lsls	r2, r2, #31
 8017b86:	d404      	bmi.n	8017b92 <_vfiprintf_r+0xa2>
 8017b88:	059e      	lsls	r6, r3, #22
 8017b8a:	d402      	bmi.n	8017b92 <_vfiprintf_r+0xa2>
 8017b8c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8017b8e:	f7ff f8ce 	bl	8016d2e <__retarget_lock_release_recursive>
 8017b92:	9a01      	ldr	r2, [sp, #4]
 8017b94:	462b      	mov	r3, r5
 8017b96:	4639      	mov	r1, r7
 8017b98:	4648      	mov	r0, r9
 8017b9a:	b039      	add	sp, #228	; 0xe4
 8017b9c:	ecbd 8b02 	vpop	{d8}
 8017ba0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ba4:	f000 bc3a 	b.w	801841c <__sbprintf>
 8017ba8:	2300      	movs	r3, #0
 8017baa:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8017bae:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8017bb2:	ae0f      	add	r6, sp, #60	; 0x3c
 8017bb4:	ee08 3a10 	vmov	s16, r3
 8017bb8:	960c      	str	r6, [sp, #48]	; 0x30
 8017bba:	9307      	str	r3, [sp, #28]
 8017bbc:	9302      	str	r3, [sp, #8]
 8017bbe:	9b01      	ldr	r3, [sp, #4]
 8017bc0:	461d      	mov	r5, r3
 8017bc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017bc6:	b10a      	cbz	r2, 8017bcc <_vfiprintf_r+0xdc>
 8017bc8:	2a25      	cmp	r2, #37	; 0x25
 8017bca:	d1f9      	bne.n	8017bc0 <_vfiprintf_r+0xd0>
 8017bcc:	9b01      	ldr	r3, [sp, #4]
 8017bce:	ebb5 0803 	subs.w	r8, r5, r3
 8017bd2:	d00d      	beq.n	8017bf0 <_vfiprintf_r+0x100>
 8017bd4:	e9c6 3800 	strd	r3, r8, [r6]
 8017bd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017bda:	4443      	add	r3, r8
 8017bdc:	930e      	str	r3, [sp, #56]	; 0x38
 8017bde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017be0:	3301      	adds	r3, #1
 8017be2:	2b07      	cmp	r3, #7
 8017be4:	930d      	str	r3, [sp, #52]	; 0x34
 8017be6:	dc75      	bgt.n	8017cd4 <_vfiprintf_r+0x1e4>
 8017be8:	3608      	adds	r6, #8
 8017bea:	9b02      	ldr	r3, [sp, #8]
 8017bec:	4443      	add	r3, r8
 8017bee:	9302      	str	r3, [sp, #8]
 8017bf0:	782b      	ldrb	r3, [r5, #0]
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	f000 83d6 	beq.w	80183a4 <_vfiprintf_r+0x8b4>
 8017bf8:	2300      	movs	r3, #0
 8017bfa:	f04f 31ff 	mov.w	r1, #4294967295
 8017bfe:	1c6a      	adds	r2, r5, #1
 8017c00:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8017c04:	9100      	str	r1, [sp, #0]
 8017c06:	9303      	str	r3, [sp, #12]
 8017c08:	469a      	mov	sl, r3
 8017c0a:	f812 3b01 	ldrb.w	r3, [r2], #1
 8017c0e:	9201      	str	r2, [sp, #4]
 8017c10:	f1a3 0220 	sub.w	r2, r3, #32
 8017c14:	2a5a      	cmp	r2, #90	; 0x5a
 8017c16:	f200 831f 	bhi.w	8018258 <_vfiprintf_r+0x768>
 8017c1a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8017c1e:	009b      	.short	0x009b
 8017c20:	031d031d 	.word	0x031d031d
 8017c24:	031d00a3 	.word	0x031d00a3
 8017c28:	031d031d 	.word	0x031d031d
 8017c2c:	031d0082 	.word	0x031d0082
 8017c30:	00a6031d 	.word	0x00a6031d
 8017c34:	031d00b0 	.word	0x031d00b0
 8017c38:	00b200ad 	.word	0x00b200ad
 8017c3c:	00cd031d 	.word	0x00cd031d
 8017c40:	00d000d0 	.word	0x00d000d0
 8017c44:	00d000d0 	.word	0x00d000d0
 8017c48:	00d000d0 	.word	0x00d000d0
 8017c4c:	00d000d0 	.word	0x00d000d0
 8017c50:	031d00d0 	.word	0x031d00d0
 8017c54:	031d031d 	.word	0x031d031d
 8017c58:	031d031d 	.word	0x031d031d
 8017c5c:	031d031d 	.word	0x031d031d
 8017c60:	031d031d 	.word	0x031d031d
 8017c64:	010800fa 	.word	0x010800fa
 8017c68:	031d031d 	.word	0x031d031d
 8017c6c:	031d031d 	.word	0x031d031d
 8017c70:	031d031d 	.word	0x031d031d
 8017c74:	031d031d 	.word	0x031d031d
 8017c78:	031d031d 	.word	0x031d031d
 8017c7c:	031d0158 	.word	0x031d0158
 8017c80:	031d031d 	.word	0x031d031d
 8017c84:	031d01a1 	.word	0x031d01a1
 8017c88:	031d027e 	.word	0x031d027e
 8017c8c:	029e031d 	.word	0x029e031d
 8017c90:	031d031d 	.word	0x031d031d
 8017c94:	031d031d 	.word	0x031d031d
 8017c98:	031d031d 	.word	0x031d031d
 8017c9c:	031d031d 	.word	0x031d031d
 8017ca0:	031d031d 	.word	0x031d031d
 8017ca4:	010a00fa 	.word	0x010a00fa
 8017ca8:	031d031d 	.word	0x031d031d
 8017cac:	00e0031d 	.word	0x00e0031d
 8017cb0:	00f4010a 	.word	0x00f4010a
 8017cb4:	00ed031d 	.word	0x00ed031d
 8017cb8:	0136031d 	.word	0x0136031d
 8017cbc:	018f015a 	.word	0x018f015a
 8017cc0:	031d00f4 	.word	0x031d00f4
 8017cc4:	009901a1 	.word	0x009901a1
 8017cc8:	031d0280 	.word	0x031d0280
 8017ccc:	0065031d 	.word	0x0065031d
 8017cd0:	0099031d 	.word	0x0099031d
 8017cd4:	aa0c      	add	r2, sp, #48	; 0x30
 8017cd6:	4639      	mov	r1, r7
 8017cd8:	4648      	mov	r0, r9
 8017cda:	f7ff fed6 	bl	8017a8a <__sprint_r>
 8017cde:	2800      	cmp	r0, #0
 8017ce0:	f040 833f 	bne.w	8018362 <_vfiprintf_r+0x872>
 8017ce4:	ae0f      	add	r6, sp, #60	; 0x3c
 8017ce6:	e780      	b.n	8017bea <_vfiprintf_r+0xfa>
 8017ce8:	4a9c      	ldr	r2, [pc, #624]	; (8017f5c <_vfiprintf_r+0x46c>)
 8017cea:	9205      	str	r2, [sp, #20]
 8017cec:	f01a 0220 	ands.w	r2, sl, #32
 8017cf0:	f000 8235 	beq.w	801815e <_vfiprintf_r+0x66e>
 8017cf4:	3407      	adds	r4, #7
 8017cf6:	f024 0207 	bic.w	r2, r4, #7
 8017cfa:	4693      	mov	fp, r2
 8017cfc:	6855      	ldr	r5, [r2, #4]
 8017cfe:	f85b 4b08 	ldr.w	r4, [fp], #8
 8017d02:	f01a 0f01 	tst.w	sl, #1
 8017d06:	d009      	beq.n	8017d1c <_vfiprintf_r+0x22c>
 8017d08:	ea54 0205 	orrs.w	r2, r4, r5
 8017d0c:	bf1f      	itttt	ne
 8017d0e:	2230      	movne	r2, #48	; 0x30
 8017d10:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 8017d14:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 8017d18:	f04a 0a02 	orrne.w	sl, sl, #2
 8017d1c:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8017d20:	e11a      	b.n	8017f58 <_vfiprintf_r+0x468>
 8017d22:	4648      	mov	r0, r9
 8017d24:	f7fe fffc 	bl	8016d20 <_localeconv_r>
 8017d28:	6843      	ldr	r3, [r0, #4]
 8017d2a:	4618      	mov	r0, r3
 8017d2c:	ee08 3a10 	vmov	s16, r3
 8017d30:	f7e8 fa86 	bl	8000240 <strlen>
 8017d34:	9007      	str	r0, [sp, #28]
 8017d36:	4648      	mov	r0, r9
 8017d38:	f7fe fff2 	bl	8016d20 <_localeconv_r>
 8017d3c:	6883      	ldr	r3, [r0, #8]
 8017d3e:	9306      	str	r3, [sp, #24]
 8017d40:	9b07      	ldr	r3, [sp, #28]
 8017d42:	b12b      	cbz	r3, 8017d50 <_vfiprintf_r+0x260>
 8017d44:	9b06      	ldr	r3, [sp, #24]
 8017d46:	b11b      	cbz	r3, 8017d50 <_vfiprintf_r+0x260>
 8017d48:	781b      	ldrb	r3, [r3, #0]
 8017d4a:	b10b      	cbz	r3, 8017d50 <_vfiprintf_r+0x260>
 8017d4c:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8017d50:	9a01      	ldr	r2, [sp, #4]
 8017d52:	e75a      	b.n	8017c0a <_vfiprintf_r+0x11a>
 8017d54:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d1f9      	bne.n	8017d50 <_vfiprintf_r+0x260>
 8017d5c:	2320      	movs	r3, #32
 8017d5e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8017d62:	e7f5      	b.n	8017d50 <_vfiprintf_r+0x260>
 8017d64:	f04a 0a01 	orr.w	sl, sl, #1
 8017d68:	e7f2      	b.n	8017d50 <_vfiprintf_r+0x260>
 8017d6a:	f854 3b04 	ldr.w	r3, [r4], #4
 8017d6e:	9303      	str	r3, [sp, #12]
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	daed      	bge.n	8017d50 <_vfiprintf_r+0x260>
 8017d74:	425b      	negs	r3, r3
 8017d76:	9303      	str	r3, [sp, #12]
 8017d78:	f04a 0a04 	orr.w	sl, sl, #4
 8017d7c:	e7e8      	b.n	8017d50 <_vfiprintf_r+0x260>
 8017d7e:	232b      	movs	r3, #43	; 0x2b
 8017d80:	e7ed      	b.n	8017d5e <_vfiprintf_r+0x26e>
 8017d82:	9a01      	ldr	r2, [sp, #4]
 8017d84:	f812 3b01 	ldrb.w	r3, [r2], #1
 8017d88:	2b2a      	cmp	r3, #42	; 0x2a
 8017d8a:	d112      	bne.n	8017db2 <_vfiprintf_r+0x2c2>
 8017d8c:	f854 0b04 	ldr.w	r0, [r4], #4
 8017d90:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8017d94:	e9cd 3200 	strd	r3, r2, [sp]
 8017d98:	e7da      	b.n	8017d50 <_vfiprintf_r+0x260>
 8017d9a:	9b00      	ldr	r3, [sp, #0]
 8017d9c:	200a      	movs	r0, #10
 8017d9e:	fb00 1303 	mla	r3, r0, r3, r1
 8017da2:	9300      	str	r3, [sp, #0]
 8017da4:	f812 3b01 	ldrb.w	r3, [r2], #1
 8017da8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8017dac:	2909      	cmp	r1, #9
 8017dae:	d9f4      	bls.n	8017d9a <_vfiprintf_r+0x2aa>
 8017db0:	e72d      	b.n	8017c0e <_vfiprintf_r+0x11e>
 8017db2:	2100      	movs	r1, #0
 8017db4:	9100      	str	r1, [sp, #0]
 8017db6:	e7f7      	b.n	8017da8 <_vfiprintf_r+0x2b8>
 8017db8:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8017dbc:	e7c8      	b.n	8017d50 <_vfiprintf_r+0x260>
 8017dbe:	2100      	movs	r1, #0
 8017dc0:	9a01      	ldr	r2, [sp, #4]
 8017dc2:	9103      	str	r1, [sp, #12]
 8017dc4:	9903      	ldr	r1, [sp, #12]
 8017dc6:	3b30      	subs	r3, #48	; 0x30
 8017dc8:	200a      	movs	r0, #10
 8017dca:	fb00 3301 	mla	r3, r0, r1, r3
 8017dce:	9303      	str	r3, [sp, #12]
 8017dd0:	f812 3b01 	ldrb.w	r3, [r2], #1
 8017dd4:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8017dd8:	2909      	cmp	r1, #9
 8017dda:	d9f3      	bls.n	8017dc4 <_vfiprintf_r+0x2d4>
 8017ddc:	e717      	b.n	8017c0e <_vfiprintf_r+0x11e>
 8017dde:	9b01      	ldr	r3, [sp, #4]
 8017de0:	781b      	ldrb	r3, [r3, #0]
 8017de2:	2b68      	cmp	r3, #104	; 0x68
 8017de4:	bf01      	itttt	eq
 8017de6:	9b01      	ldreq	r3, [sp, #4]
 8017de8:	3301      	addeq	r3, #1
 8017dea:	9301      	streq	r3, [sp, #4]
 8017dec:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8017df0:	bf18      	it	ne
 8017df2:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8017df6:	e7ab      	b.n	8017d50 <_vfiprintf_r+0x260>
 8017df8:	9b01      	ldr	r3, [sp, #4]
 8017dfa:	781b      	ldrb	r3, [r3, #0]
 8017dfc:	2b6c      	cmp	r3, #108	; 0x6c
 8017dfe:	d105      	bne.n	8017e0c <_vfiprintf_r+0x31c>
 8017e00:	9b01      	ldr	r3, [sp, #4]
 8017e02:	3301      	adds	r3, #1
 8017e04:	9301      	str	r3, [sp, #4]
 8017e06:	f04a 0a20 	orr.w	sl, sl, #32
 8017e0a:	e7a1      	b.n	8017d50 <_vfiprintf_r+0x260>
 8017e0c:	f04a 0a10 	orr.w	sl, sl, #16
 8017e10:	e79e      	b.n	8017d50 <_vfiprintf_r+0x260>
 8017e12:	46a3      	mov	fp, r4
 8017e14:	2100      	movs	r1, #0
 8017e16:	f85b 3b04 	ldr.w	r3, [fp], #4
 8017e1a:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8017e1e:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8017e22:	2301      	movs	r3, #1
 8017e24:	9300      	str	r3, [sp, #0]
 8017e26:	460d      	mov	r5, r1
 8017e28:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 8017e2c:	e0ad      	b.n	8017f8a <_vfiprintf_r+0x49a>
 8017e2e:	f04a 0a10 	orr.w	sl, sl, #16
 8017e32:	f01a 0f20 	tst.w	sl, #32
 8017e36:	d011      	beq.n	8017e5c <_vfiprintf_r+0x36c>
 8017e38:	3407      	adds	r4, #7
 8017e3a:	f024 0307 	bic.w	r3, r4, #7
 8017e3e:	469b      	mov	fp, r3
 8017e40:	685d      	ldr	r5, [r3, #4]
 8017e42:	f85b 4b08 	ldr.w	r4, [fp], #8
 8017e46:	2d00      	cmp	r5, #0
 8017e48:	da06      	bge.n	8017e58 <_vfiprintf_r+0x368>
 8017e4a:	4264      	negs	r4, r4
 8017e4c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8017e50:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8017e54:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8017e58:	2301      	movs	r3, #1
 8017e5a:	e04a      	b.n	8017ef2 <_vfiprintf_r+0x402>
 8017e5c:	46a3      	mov	fp, r4
 8017e5e:	f01a 0f10 	tst.w	sl, #16
 8017e62:	f85b 5b04 	ldr.w	r5, [fp], #4
 8017e66:	d002      	beq.n	8017e6e <_vfiprintf_r+0x37e>
 8017e68:	462c      	mov	r4, r5
 8017e6a:	17ed      	asrs	r5, r5, #31
 8017e6c:	e7eb      	b.n	8017e46 <_vfiprintf_r+0x356>
 8017e6e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8017e72:	d003      	beq.n	8017e7c <_vfiprintf_r+0x38c>
 8017e74:	b22c      	sxth	r4, r5
 8017e76:	f345 35c0 	sbfx	r5, r5, #15, #1
 8017e7a:	e7e4      	b.n	8017e46 <_vfiprintf_r+0x356>
 8017e7c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8017e80:	d0f2      	beq.n	8017e68 <_vfiprintf_r+0x378>
 8017e82:	b26c      	sxtb	r4, r5
 8017e84:	f345 15c0 	sbfx	r5, r5, #7, #1
 8017e88:	e7dd      	b.n	8017e46 <_vfiprintf_r+0x356>
 8017e8a:	f01a 0f20 	tst.w	sl, #32
 8017e8e:	f104 0b04 	add.w	fp, r4, #4
 8017e92:	d007      	beq.n	8017ea4 <_vfiprintf_r+0x3b4>
 8017e94:	9a02      	ldr	r2, [sp, #8]
 8017e96:	6823      	ldr	r3, [r4, #0]
 8017e98:	9902      	ldr	r1, [sp, #8]
 8017e9a:	17d2      	asrs	r2, r2, #31
 8017e9c:	e9c3 1200 	strd	r1, r2, [r3]
 8017ea0:	465c      	mov	r4, fp
 8017ea2:	e68c      	b.n	8017bbe <_vfiprintf_r+0xce>
 8017ea4:	f01a 0f10 	tst.w	sl, #16
 8017ea8:	d003      	beq.n	8017eb2 <_vfiprintf_r+0x3c2>
 8017eaa:	6823      	ldr	r3, [r4, #0]
 8017eac:	9a02      	ldr	r2, [sp, #8]
 8017eae:	601a      	str	r2, [r3, #0]
 8017eb0:	e7f6      	b.n	8017ea0 <_vfiprintf_r+0x3b0>
 8017eb2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8017eb6:	d003      	beq.n	8017ec0 <_vfiprintf_r+0x3d0>
 8017eb8:	6823      	ldr	r3, [r4, #0]
 8017eba:	9a02      	ldr	r2, [sp, #8]
 8017ebc:	801a      	strh	r2, [r3, #0]
 8017ebe:	e7ef      	b.n	8017ea0 <_vfiprintf_r+0x3b0>
 8017ec0:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8017ec4:	d0f1      	beq.n	8017eaa <_vfiprintf_r+0x3ba>
 8017ec6:	6823      	ldr	r3, [r4, #0]
 8017ec8:	9a02      	ldr	r2, [sp, #8]
 8017eca:	701a      	strb	r2, [r3, #0]
 8017ecc:	e7e8      	b.n	8017ea0 <_vfiprintf_r+0x3b0>
 8017ece:	f04a 0a10 	orr.w	sl, sl, #16
 8017ed2:	f01a 0320 	ands.w	r3, sl, #32
 8017ed6:	d01f      	beq.n	8017f18 <_vfiprintf_r+0x428>
 8017ed8:	3407      	adds	r4, #7
 8017eda:	f024 0307 	bic.w	r3, r4, #7
 8017ede:	469b      	mov	fp, r3
 8017ee0:	685d      	ldr	r5, [r3, #4]
 8017ee2:	f85b 4b08 	ldr.w	r4, [fp], #8
 8017ee6:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8017eea:	2300      	movs	r3, #0
 8017eec:	2200      	movs	r2, #0
 8017eee:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 8017ef2:	9a00      	ldr	r2, [sp, #0]
 8017ef4:	3201      	adds	r2, #1
 8017ef6:	f000 8262 	beq.w	80183be <_vfiprintf_r+0x8ce>
 8017efa:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8017efe:	9204      	str	r2, [sp, #16]
 8017f00:	ea54 0205 	orrs.w	r2, r4, r5
 8017f04:	f040 8261 	bne.w	80183ca <_vfiprintf_r+0x8da>
 8017f08:	9a00      	ldr	r2, [sp, #0]
 8017f0a:	2a00      	cmp	r2, #0
 8017f0c:	f000 8199 	beq.w	8018242 <_vfiprintf_r+0x752>
 8017f10:	2b01      	cmp	r3, #1
 8017f12:	f040 825d 	bne.w	80183d0 <_vfiprintf_r+0x8e0>
 8017f16:	e139      	b.n	801818c <_vfiprintf_r+0x69c>
 8017f18:	46a3      	mov	fp, r4
 8017f1a:	f01a 0510 	ands.w	r5, sl, #16
 8017f1e:	f85b 4b04 	ldr.w	r4, [fp], #4
 8017f22:	d001      	beq.n	8017f28 <_vfiprintf_r+0x438>
 8017f24:	461d      	mov	r5, r3
 8017f26:	e7de      	b.n	8017ee6 <_vfiprintf_r+0x3f6>
 8017f28:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8017f2c:	d001      	beq.n	8017f32 <_vfiprintf_r+0x442>
 8017f2e:	b2a4      	uxth	r4, r4
 8017f30:	e7d9      	b.n	8017ee6 <_vfiprintf_r+0x3f6>
 8017f32:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8017f36:	d0d6      	beq.n	8017ee6 <_vfiprintf_r+0x3f6>
 8017f38:	b2e4      	uxtb	r4, r4
 8017f3a:	e7f3      	b.n	8017f24 <_vfiprintf_r+0x434>
 8017f3c:	2330      	movs	r3, #48	; 0x30
 8017f3e:	46a3      	mov	fp, r4
 8017f40:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8017f44:	2378      	movs	r3, #120	; 0x78
 8017f46:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 8017f4a:	f85b 4b04 	ldr.w	r4, [fp], #4
 8017f4e:	4b03      	ldr	r3, [pc, #12]	; (8017f5c <_vfiprintf_r+0x46c>)
 8017f50:	9305      	str	r3, [sp, #20]
 8017f52:	2500      	movs	r5, #0
 8017f54:	f04a 0a02 	orr.w	sl, sl, #2
 8017f58:	2302      	movs	r3, #2
 8017f5a:	e7c7      	b.n	8017eec <_vfiprintf_r+0x3fc>
 8017f5c:	08019518 	.word	0x08019518
 8017f60:	9b00      	ldr	r3, [sp, #0]
 8017f62:	46a3      	mov	fp, r4
 8017f64:	2500      	movs	r5, #0
 8017f66:	1c5c      	adds	r4, r3, #1
 8017f68:	f85b 8b04 	ldr.w	r8, [fp], #4
 8017f6c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8017f70:	f000 80ce 	beq.w	8018110 <_vfiprintf_r+0x620>
 8017f74:	461a      	mov	r2, r3
 8017f76:	4629      	mov	r1, r5
 8017f78:	4640      	mov	r0, r8
 8017f7a:	f7e8 f969 	bl	8000250 <memchr>
 8017f7e:	2800      	cmp	r0, #0
 8017f80:	f000 8174 	beq.w	801826c <_vfiprintf_r+0x77c>
 8017f84:	eba0 0308 	sub.w	r3, r0, r8
 8017f88:	9300      	str	r3, [sp, #0]
 8017f8a:	9b00      	ldr	r3, [sp, #0]
 8017f8c:	42ab      	cmp	r3, r5
 8017f8e:	bfb8      	it	lt
 8017f90:	462b      	movlt	r3, r5
 8017f92:	9304      	str	r3, [sp, #16]
 8017f94:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8017f98:	b113      	cbz	r3, 8017fa0 <_vfiprintf_r+0x4b0>
 8017f9a:	9b04      	ldr	r3, [sp, #16]
 8017f9c:	3301      	adds	r3, #1
 8017f9e:	9304      	str	r3, [sp, #16]
 8017fa0:	f01a 0302 	ands.w	r3, sl, #2
 8017fa4:	9308      	str	r3, [sp, #32]
 8017fa6:	bf1e      	ittt	ne
 8017fa8:	9b04      	ldrne	r3, [sp, #16]
 8017faa:	3302      	addne	r3, #2
 8017fac:	9304      	strne	r3, [sp, #16]
 8017fae:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8017fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8017fb4:	d11f      	bne.n	8017ff6 <_vfiprintf_r+0x506>
 8017fb6:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8017fba:	1a9c      	subs	r4, r3, r2
 8017fbc:	2c00      	cmp	r4, #0
 8017fbe:	dd1a      	ble.n	8017ff6 <_vfiprintf_r+0x506>
 8017fc0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8017fc4:	48aa      	ldr	r0, [pc, #680]	; (8018270 <_vfiprintf_r+0x780>)
 8017fc6:	6030      	str	r0, [r6, #0]
 8017fc8:	2c10      	cmp	r4, #16
 8017fca:	f103 0301 	add.w	r3, r3, #1
 8017fce:	f106 0108 	add.w	r1, r6, #8
 8017fd2:	f300 8153 	bgt.w	801827c <_vfiprintf_r+0x78c>
 8017fd6:	6074      	str	r4, [r6, #4]
 8017fd8:	2b07      	cmp	r3, #7
 8017fda:	4414      	add	r4, r2
 8017fdc:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8017fe0:	f340 815e 	ble.w	80182a0 <_vfiprintf_r+0x7b0>
 8017fe4:	aa0c      	add	r2, sp, #48	; 0x30
 8017fe6:	4639      	mov	r1, r7
 8017fe8:	4648      	mov	r0, r9
 8017fea:	f7ff fd4e 	bl	8017a8a <__sprint_r>
 8017fee:	2800      	cmp	r0, #0
 8017ff0:	f040 81b7 	bne.w	8018362 <_vfiprintf_r+0x872>
 8017ff4:	ae0f      	add	r6, sp, #60	; 0x3c
 8017ff6:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8017ffa:	b173      	cbz	r3, 801801a <_vfiprintf_r+0x52a>
 8017ffc:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 8018000:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018002:	6032      	str	r2, [r6, #0]
 8018004:	2201      	movs	r2, #1
 8018006:	6072      	str	r2, [r6, #4]
 8018008:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801800a:	3301      	adds	r3, #1
 801800c:	3201      	adds	r2, #1
 801800e:	2b07      	cmp	r3, #7
 8018010:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8018014:	f300 8146 	bgt.w	80182a4 <_vfiprintf_r+0x7b4>
 8018018:	3608      	adds	r6, #8
 801801a:	9b08      	ldr	r3, [sp, #32]
 801801c:	b16b      	cbz	r3, 801803a <_vfiprintf_r+0x54a>
 801801e:	aa0b      	add	r2, sp, #44	; 0x2c
 8018020:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018022:	6032      	str	r2, [r6, #0]
 8018024:	2202      	movs	r2, #2
 8018026:	6072      	str	r2, [r6, #4]
 8018028:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801802a:	3301      	adds	r3, #1
 801802c:	3202      	adds	r2, #2
 801802e:	2b07      	cmp	r3, #7
 8018030:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8018034:	f300 813f 	bgt.w	80182b6 <_vfiprintf_r+0x7c6>
 8018038:	3608      	adds	r6, #8
 801803a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801803c:	2b80      	cmp	r3, #128	; 0x80
 801803e:	d11f      	bne.n	8018080 <_vfiprintf_r+0x590>
 8018040:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8018044:	1a9c      	subs	r4, r3, r2
 8018046:	2c00      	cmp	r4, #0
 8018048:	dd1a      	ble.n	8018080 <_vfiprintf_r+0x590>
 801804a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 801804e:	4889      	ldr	r0, [pc, #548]	; (8018274 <_vfiprintf_r+0x784>)
 8018050:	6030      	str	r0, [r6, #0]
 8018052:	2c10      	cmp	r4, #16
 8018054:	f103 0301 	add.w	r3, r3, #1
 8018058:	f106 0108 	add.w	r1, r6, #8
 801805c:	f300 8134 	bgt.w	80182c8 <_vfiprintf_r+0x7d8>
 8018060:	6074      	str	r4, [r6, #4]
 8018062:	2b07      	cmp	r3, #7
 8018064:	4414      	add	r4, r2
 8018066:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 801806a:	f340 813f 	ble.w	80182ec <_vfiprintf_r+0x7fc>
 801806e:	aa0c      	add	r2, sp, #48	; 0x30
 8018070:	4639      	mov	r1, r7
 8018072:	4648      	mov	r0, r9
 8018074:	f7ff fd09 	bl	8017a8a <__sprint_r>
 8018078:	2800      	cmp	r0, #0
 801807a:	f040 8172 	bne.w	8018362 <_vfiprintf_r+0x872>
 801807e:	ae0f      	add	r6, sp, #60	; 0x3c
 8018080:	9b00      	ldr	r3, [sp, #0]
 8018082:	1aec      	subs	r4, r5, r3
 8018084:	2c00      	cmp	r4, #0
 8018086:	dd1a      	ble.n	80180be <_vfiprintf_r+0x5ce>
 8018088:	4d7a      	ldr	r5, [pc, #488]	; (8018274 <_vfiprintf_r+0x784>)
 801808a:	6035      	str	r5, [r6, #0]
 801808c:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 8018090:	2c10      	cmp	r4, #16
 8018092:	f103 0301 	add.w	r3, r3, #1
 8018096:	f106 0208 	add.w	r2, r6, #8
 801809a:	f300 8129 	bgt.w	80182f0 <_vfiprintf_r+0x800>
 801809e:	6074      	str	r4, [r6, #4]
 80180a0:	2b07      	cmp	r3, #7
 80180a2:	440c      	add	r4, r1
 80180a4:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 80180a8:	f340 8133 	ble.w	8018312 <_vfiprintf_r+0x822>
 80180ac:	aa0c      	add	r2, sp, #48	; 0x30
 80180ae:	4639      	mov	r1, r7
 80180b0:	4648      	mov	r0, r9
 80180b2:	f7ff fcea 	bl	8017a8a <__sprint_r>
 80180b6:	2800      	cmp	r0, #0
 80180b8:	f040 8153 	bne.w	8018362 <_vfiprintf_r+0x872>
 80180bc:	ae0f      	add	r6, sp, #60	; 0x3c
 80180be:	9b00      	ldr	r3, [sp, #0]
 80180c0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80180c2:	6073      	str	r3, [r6, #4]
 80180c4:	4418      	add	r0, r3
 80180c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80180c8:	f8c6 8000 	str.w	r8, [r6]
 80180cc:	3301      	adds	r3, #1
 80180ce:	2b07      	cmp	r3, #7
 80180d0:	900e      	str	r0, [sp, #56]	; 0x38
 80180d2:	930d      	str	r3, [sp, #52]	; 0x34
 80180d4:	f300 811f 	bgt.w	8018316 <_vfiprintf_r+0x826>
 80180d8:	f106 0308 	add.w	r3, r6, #8
 80180dc:	f01a 0f04 	tst.w	sl, #4
 80180e0:	f040 8121 	bne.w	8018326 <_vfiprintf_r+0x836>
 80180e4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80180e8:	9904      	ldr	r1, [sp, #16]
 80180ea:	428a      	cmp	r2, r1
 80180ec:	bfac      	ite	ge
 80180ee:	189b      	addge	r3, r3, r2
 80180f0:	185b      	addlt	r3, r3, r1
 80180f2:	9302      	str	r3, [sp, #8]
 80180f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80180f6:	b13b      	cbz	r3, 8018108 <_vfiprintf_r+0x618>
 80180f8:	aa0c      	add	r2, sp, #48	; 0x30
 80180fa:	4639      	mov	r1, r7
 80180fc:	4648      	mov	r0, r9
 80180fe:	f7ff fcc4 	bl	8017a8a <__sprint_r>
 8018102:	2800      	cmp	r0, #0
 8018104:	f040 812d 	bne.w	8018362 <_vfiprintf_r+0x872>
 8018108:	2300      	movs	r3, #0
 801810a:	930d      	str	r3, [sp, #52]	; 0x34
 801810c:	ae0f      	add	r6, sp, #60	; 0x3c
 801810e:	e6c7      	b.n	8017ea0 <_vfiprintf_r+0x3b0>
 8018110:	4640      	mov	r0, r8
 8018112:	f7e8 f895 	bl	8000240 <strlen>
 8018116:	9000      	str	r0, [sp, #0]
 8018118:	e737      	b.n	8017f8a <_vfiprintf_r+0x49a>
 801811a:	f04a 0a10 	orr.w	sl, sl, #16
 801811e:	f01a 0320 	ands.w	r3, sl, #32
 8018122:	d008      	beq.n	8018136 <_vfiprintf_r+0x646>
 8018124:	3407      	adds	r4, #7
 8018126:	f024 0307 	bic.w	r3, r4, #7
 801812a:	469b      	mov	fp, r3
 801812c:	685d      	ldr	r5, [r3, #4]
 801812e:	f85b 4b08 	ldr.w	r4, [fp], #8
 8018132:	2301      	movs	r3, #1
 8018134:	e6da      	b.n	8017eec <_vfiprintf_r+0x3fc>
 8018136:	46a3      	mov	fp, r4
 8018138:	f01a 0510 	ands.w	r5, sl, #16
 801813c:	f85b 4b04 	ldr.w	r4, [fp], #4
 8018140:	d001      	beq.n	8018146 <_vfiprintf_r+0x656>
 8018142:	461d      	mov	r5, r3
 8018144:	e7f5      	b.n	8018132 <_vfiprintf_r+0x642>
 8018146:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 801814a:	d001      	beq.n	8018150 <_vfiprintf_r+0x660>
 801814c:	b2a4      	uxth	r4, r4
 801814e:	e7f0      	b.n	8018132 <_vfiprintf_r+0x642>
 8018150:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8018154:	d0ed      	beq.n	8018132 <_vfiprintf_r+0x642>
 8018156:	b2e4      	uxtb	r4, r4
 8018158:	e7f3      	b.n	8018142 <_vfiprintf_r+0x652>
 801815a:	4a47      	ldr	r2, [pc, #284]	; (8018278 <_vfiprintf_r+0x788>)
 801815c:	e5c5      	b.n	8017cea <_vfiprintf_r+0x1fa>
 801815e:	46a3      	mov	fp, r4
 8018160:	f01a 0510 	ands.w	r5, sl, #16
 8018164:	f85b 4b04 	ldr.w	r4, [fp], #4
 8018168:	d001      	beq.n	801816e <_vfiprintf_r+0x67e>
 801816a:	4615      	mov	r5, r2
 801816c:	e5c9      	b.n	8017d02 <_vfiprintf_r+0x212>
 801816e:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 8018172:	d001      	beq.n	8018178 <_vfiprintf_r+0x688>
 8018174:	b2a4      	uxth	r4, r4
 8018176:	e5c4      	b.n	8017d02 <_vfiprintf_r+0x212>
 8018178:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 801817c:	f43f adc1 	beq.w	8017d02 <_vfiprintf_r+0x212>
 8018180:	b2e4      	uxtb	r4, r4
 8018182:	e7f2      	b.n	801816a <_vfiprintf_r+0x67a>
 8018184:	2c0a      	cmp	r4, #10
 8018186:	f175 0300 	sbcs.w	r3, r5, #0
 801818a:	d205      	bcs.n	8018198 <_vfiprintf_r+0x6a8>
 801818c:	3430      	adds	r4, #48	; 0x30
 801818e:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 8018192:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 8018196:	e137      	b.n	8018408 <_vfiprintf_r+0x918>
 8018198:	ab38      	add	r3, sp, #224	; 0xe0
 801819a:	9308      	str	r3, [sp, #32]
 801819c:	9b04      	ldr	r3, [sp, #16]
 801819e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80181a2:	f04f 0a00 	mov.w	sl, #0
 80181a6:	9309      	str	r3, [sp, #36]	; 0x24
 80181a8:	9b08      	ldr	r3, [sp, #32]
 80181aa:	220a      	movs	r2, #10
 80181ac:	f103 38ff 	add.w	r8, r3, #4294967295
 80181b0:	4620      	mov	r0, r4
 80181b2:	2300      	movs	r3, #0
 80181b4:	4629      	mov	r1, r5
 80181b6:	f7e8 f89b 	bl	80002f0 <__aeabi_uldivmod>
 80181ba:	9b08      	ldr	r3, [sp, #32]
 80181bc:	3230      	adds	r2, #48	; 0x30
 80181be:	f803 2c01 	strb.w	r2, [r3, #-1]
 80181c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181c4:	f10a 0a01 	add.w	sl, sl, #1
 80181c8:	b1db      	cbz	r3, 8018202 <_vfiprintf_r+0x712>
 80181ca:	9b06      	ldr	r3, [sp, #24]
 80181cc:	781b      	ldrb	r3, [r3, #0]
 80181ce:	4553      	cmp	r3, sl
 80181d0:	d117      	bne.n	8018202 <_vfiprintf_r+0x712>
 80181d2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80181d6:	d014      	beq.n	8018202 <_vfiprintf_r+0x712>
 80181d8:	2c0a      	cmp	r4, #10
 80181da:	f175 0300 	sbcs.w	r3, r5, #0
 80181de:	d310      	bcc.n	8018202 <_vfiprintf_r+0x712>
 80181e0:	9b07      	ldr	r3, [sp, #28]
 80181e2:	eba8 0803 	sub.w	r8, r8, r3
 80181e6:	461a      	mov	r2, r3
 80181e8:	ee18 1a10 	vmov	r1, s16
 80181ec:	4640      	mov	r0, r8
 80181ee:	f7ff fbbe 	bl	801796e <strncpy>
 80181f2:	9b06      	ldr	r3, [sp, #24]
 80181f4:	785b      	ldrb	r3, [r3, #1]
 80181f6:	b1a3      	cbz	r3, 8018222 <_vfiprintf_r+0x732>
 80181f8:	9b06      	ldr	r3, [sp, #24]
 80181fa:	3301      	adds	r3, #1
 80181fc:	9306      	str	r3, [sp, #24]
 80181fe:	f04f 0a00 	mov.w	sl, #0
 8018202:	2300      	movs	r3, #0
 8018204:	220a      	movs	r2, #10
 8018206:	4620      	mov	r0, r4
 8018208:	4629      	mov	r1, r5
 801820a:	f7e8 f871 	bl	80002f0 <__aeabi_uldivmod>
 801820e:	2c0a      	cmp	r4, #10
 8018210:	f175 0300 	sbcs.w	r3, r5, #0
 8018214:	f0c0 80f8 	bcc.w	8018408 <_vfiprintf_r+0x918>
 8018218:	4604      	mov	r4, r0
 801821a:	460d      	mov	r5, r1
 801821c:	f8cd 8020 	str.w	r8, [sp, #32]
 8018220:	e7c2      	b.n	80181a8 <_vfiprintf_r+0x6b8>
 8018222:	469a      	mov	sl, r3
 8018224:	e7ed      	b.n	8018202 <_vfiprintf_r+0x712>
 8018226:	f004 030f 	and.w	r3, r4, #15
 801822a:	9a05      	ldr	r2, [sp, #20]
 801822c:	0924      	lsrs	r4, r4, #4
 801822e:	5cd3      	ldrb	r3, [r2, r3]
 8018230:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8018234:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8018238:	092d      	lsrs	r5, r5, #4
 801823a:	ea54 0305 	orrs.w	r3, r4, r5
 801823e:	d1f2      	bne.n	8018226 <_vfiprintf_r+0x736>
 8018240:	e0e2      	b.n	8018408 <_vfiprintf_r+0x918>
 8018242:	b933      	cbnz	r3, 8018252 <_vfiprintf_r+0x762>
 8018244:	f01a 0f01 	tst.w	sl, #1
 8018248:	d003      	beq.n	8018252 <_vfiprintf_r+0x762>
 801824a:	2330      	movs	r3, #48	; 0x30
 801824c:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 8018250:	e79f      	b.n	8018192 <_vfiprintf_r+0x6a2>
 8018252:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8018256:	e0d7      	b.n	8018408 <_vfiprintf_r+0x918>
 8018258:	2b00      	cmp	r3, #0
 801825a:	f000 80a3 	beq.w	80183a4 <_vfiprintf_r+0x8b4>
 801825e:	2100      	movs	r1, #0
 8018260:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8018264:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8018268:	46a3      	mov	fp, r4
 801826a:	e5da      	b.n	8017e22 <_vfiprintf_r+0x332>
 801826c:	4605      	mov	r5, r0
 801826e:	e68c      	b.n	8017f8a <_vfiprintf_r+0x49a>
 8018270:	08019754 	.word	0x08019754
 8018274:	08019764 	.word	0x08019764
 8018278:	08019529 	.word	0x08019529
 801827c:	2010      	movs	r0, #16
 801827e:	4402      	add	r2, r0
 8018280:	2b07      	cmp	r3, #7
 8018282:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8018286:	6070      	str	r0, [r6, #4]
 8018288:	dd07      	ble.n	801829a <_vfiprintf_r+0x7aa>
 801828a:	aa0c      	add	r2, sp, #48	; 0x30
 801828c:	4639      	mov	r1, r7
 801828e:	4648      	mov	r0, r9
 8018290:	f7ff fbfb 	bl	8017a8a <__sprint_r>
 8018294:	2800      	cmp	r0, #0
 8018296:	d164      	bne.n	8018362 <_vfiprintf_r+0x872>
 8018298:	a90f      	add	r1, sp, #60	; 0x3c
 801829a:	3c10      	subs	r4, #16
 801829c:	460e      	mov	r6, r1
 801829e:	e68f      	b.n	8017fc0 <_vfiprintf_r+0x4d0>
 80182a0:	460e      	mov	r6, r1
 80182a2:	e6a8      	b.n	8017ff6 <_vfiprintf_r+0x506>
 80182a4:	aa0c      	add	r2, sp, #48	; 0x30
 80182a6:	4639      	mov	r1, r7
 80182a8:	4648      	mov	r0, r9
 80182aa:	f7ff fbee 	bl	8017a8a <__sprint_r>
 80182ae:	2800      	cmp	r0, #0
 80182b0:	d157      	bne.n	8018362 <_vfiprintf_r+0x872>
 80182b2:	ae0f      	add	r6, sp, #60	; 0x3c
 80182b4:	e6b1      	b.n	801801a <_vfiprintf_r+0x52a>
 80182b6:	aa0c      	add	r2, sp, #48	; 0x30
 80182b8:	4639      	mov	r1, r7
 80182ba:	4648      	mov	r0, r9
 80182bc:	f7ff fbe5 	bl	8017a8a <__sprint_r>
 80182c0:	2800      	cmp	r0, #0
 80182c2:	d14e      	bne.n	8018362 <_vfiprintf_r+0x872>
 80182c4:	ae0f      	add	r6, sp, #60	; 0x3c
 80182c6:	e6b8      	b.n	801803a <_vfiprintf_r+0x54a>
 80182c8:	2010      	movs	r0, #16
 80182ca:	4402      	add	r2, r0
 80182cc:	2b07      	cmp	r3, #7
 80182ce:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 80182d2:	6070      	str	r0, [r6, #4]
 80182d4:	dd07      	ble.n	80182e6 <_vfiprintf_r+0x7f6>
 80182d6:	aa0c      	add	r2, sp, #48	; 0x30
 80182d8:	4639      	mov	r1, r7
 80182da:	4648      	mov	r0, r9
 80182dc:	f7ff fbd5 	bl	8017a8a <__sprint_r>
 80182e0:	2800      	cmp	r0, #0
 80182e2:	d13e      	bne.n	8018362 <_vfiprintf_r+0x872>
 80182e4:	a90f      	add	r1, sp, #60	; 0x3c
 80182e6:	3c10      	subs	r4, #16
 80182e8:	460e      	mov	r6, r1
 80182ea:	e6ae      	b.n	801804a <_vfiprintf_r+0x55a>
 80182ec:	460e      	mov	r6, r1
 80182ee:	e6c7      	b.n	8018080 <_vfiprintf_r+0x590>
 80182f0:	2010      	movs	r0, #16
 80182f2:	4401      	add	r1, r0
 80182f4:	2b07      	cmp	r3, #7
 80182f6:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80182fa:	6070      	str	r0, [r6, #4]
 80182fc:	dd06      	ble.n	801830c <_vfiprintf_r+0x81c>
 80182fe:	aa0c      	add	r2, sp, #48	; 0x30
 8018300:	4639      	mov	r1, r7
 8018302:	4648      	mov	r0, r9
 8018304:	f7ff fbc1 	bl	8017a8a <__sprint_r>
 8018308:	bb58      	cbnz	r0, 8018362 <_vfiprintf_r+0x872>
 801830a:	aa0f      	add	r2, sp, #60	; 0x3c
 801830c:	3c10      	subs	r4, #16
 801830e:	4616      	mov	r6, r2
 8018310:	e6bb      	b.n	801808a <_vfiprintf_r+0x59a>
 8018312:	4616      	mov	r6, r2
 8018314:	e6d3      	b.n	80180be <_vfiprintf_r+0x5ce>
 8018316:	aa0c      	add	r2, sp, #48	; 0x30
 8018318:	4639      	mov	r1, r7
 801831a:	4648      	mov	r0, r9
 801831c:	f7ff fbb5 	bl	8017a8a <__sprint_r>
 8018320:	b9f8      	cbnz	r0, 8018362 <_vfiprintf_r+0x872>
 8018322:	ab0f      	add	r3, sp, #60	; 0x3c
 8018324:	e6da      	b.n	80180dc <_vfiprintf_r+0x5ec>
 8018326:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 801832a:	1a54      	subs	r4, r2, r1
 801832c:	2c00      	cmp	r4, #0
 801832e:	f77f aed9 	ble.w	80180e4 <_vfiprintf_r+0x5f4>
 8018332:	4d39      	ldr	r5, [pc, #228]	; (8018418 <_vfiprintf_r+0x928>)
 8018334:	2610      	movs	r6, #16
 8018336:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801833a:	2c10      	cmp	r4, #16
 801833c:	f102 0201 	add.w	r2, r2, #1
 8018340:	601d      	str	r5, [r3, #0]
 8018342:	dc1d      	bgt.n	8018380 <_vfiprintf_r+0x890>
 8018344:	605c      	str	r4, [r3, #4]
 8018346:	2a07      	cmp	r2, #7
 8018348:	440c      	add	r4, r1
 801834a:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 801834e:	f77f aec9 	ble.w	80180e4 <_vfiprintf_r+0x5f4>
 8018352:	aa0c      	add	r2, sp, #48	; 0x30
 8018354:	4639      	mov	r1, r7
 8018356:	4648      	mov	r0, r9
 8018358:	f7ff fb97 	bl	8017a8a <__sprint_r>
 801835c:	2800      	cmp	r0, #0
 801835e:	f43f aec1 	beq.w	80180e4 <_vfiprintf_r+0x5f4>
 8018362:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018364:	07d9      	lsls	r1, r3, #31
 8018366:	d405      	bmi.n	8018374 <_vfiprintf_r+0x884>
 8018368:	89bb      	ldrh	r3, [r7, #12]
 801836a:	059a      	lsls	r2, r3, #22
 801836c:	d402      	bmi.n	8018374 <_vfiprintf_r+0x884>
 801836e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8018370:	f7fe fcdd 	bl	8016d2e <__retarget_lock_release_recursive>
 8018374:	89bb      	ldrh	r3, [r7, #12]
 8018376:	065b      	lsls	r3, r3, #25
 8018378:	f57f abed 	bpl.w	8017b56 <_vfiprintf_r+0x66>
 801837c:	f7ff bbe8 	b.w	8017b50 <_vfiprintf_r+0x60>
 8018380:	3110      	adds	r1, #16
 8018382:	2a07      	cmp	r2, #7
 8018384:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 8018388:	605e      	str	r6, [r3, #4]
 801838a:	dc02      	bgt.n	8018392 <_vfiprintf_r+0x8a2>
 801838c:	3308      	adds	r3, #8
 801838e:	3c10      	subs	r4, #16
 8018390:	e7d1      	b.n	8018336 <_vfiprintf_r+0x846>
 8018392:	aa0c      	add	r2, sp, #48	; 0x30
 8018394:	4639      	mov	r1, r7
 8018396:	4648      	mov	r0, r9
 8018398:	f7ff fb77 	bl	8017a8a <__sprint_r>
 801839c:	2800      	cmp	r0, #0
 801839e:	d1e0      	bne.n	8018362 <_vfiprintf_r+0x872>
 80183a0:	ab0f      	add	r3, sp, #60	; 0x3c
 80183a2:	e7f4      	b.n	801838e <_vfiprintf_r+0x89e>
 80183a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80183a6:	b913      	cbnz	r3, 80183ae <_vfiprintf_r+0x8be>
 80183a8:	2300      	movs	r3, #0
 80183aa:	930d      	str	r3, [sp, #52]	; 0x34
 80183ac:	e7d9      	b.n	8018362 <_vfiprintf_r+0x872>
 80183ae:	aa0c      	add	r2, sp, #48	; 0x30
 80183b0:	4639      	mov	r1, r7
 80183b2:	4648      	mov	r0, r9
 80183b4:	f7ff fb69 	bl	8017a8a <__sprint_r>
 80183b8:	2800      	cmp	r0, #0
 80183ba:	d0f5      	beq.n	80183a8 <_vfiprintf_r+0x8b8>
 80183bc:	e7d1      	b.n	8018362 <_vfiprintf_r+0x872>
 80183be:	ea54 0205 	orrs.w	r2, r4, r5
 80183c2:	f8cd a010 	str.w	sl, [sp, #16]
 80183c6:	f43f ada3 	beq.w	8017f10 <_vfiprintf_r+0x420>
 80183ca:	2b01      	cmp	r3, #1
 80183cc:	f43f aeda 	beq.w	8018184 <_vfiprintf_r+0x694>
 80183d0:	2b02      	cmp	r3, #2
 80183d2:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 80183d6:	f43f af26 	beq.w	8018226 <_vfiprintf_r+0x736>
 80183da:	f004 0307 	and.w	r3, r4, #7
 80183de:	08e4      	lsrs	r4, r4, #3
 80183e0:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 80183e4:	08ed      	lsrs	r5, r5, #3
 80183e6:	3330      	adds	r3, #48	; 0x30
 80183e8:	ea54 0105 	orrs.w	r1, r4, r5
 80183ec:	4642      	mov	r2, r8
 80183ee:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80183f2:	d1f2      	bne.n	80183da <_vfiprintf_r+0x8ea>
 80183f4:	9904      	ldr	r1, [sp, #16]
 80183f6:	07c8      	lsls	r0, r1, #31
 80183f8:	d506      	bpl.n	8018408 <_vfiprintf_r+0x918>
 80183fa:	2b30      	cmp	r3, #48	; 0x30
 80183fc:	d004      	beq.n	8018408 <_vfiprintf_r+0x918>
 80183fe:	2330      	movs	r3, #48	; 0x30
 8018400:	f808 3c01 	strb.w	r3, [r8, #-1]
 8018404:	f1a2 0802 	sub.w	r8, r2, #2
 8018408:	ab38      	add	r3, sp, #224	; 0xe0
 801840a:	eba3 0308 	sub.w	r3, r3, r8
 801840e:	9d00      	ldr	r5, [sp, #0]
 8018410:	f8dd a010 	ldr.w	sl, [sp, #16]
 8018414:	9300      	str	r3, [sp, #0]
 8018416:	e5b8      	b.n	8017f8a <_vfiprintf_r+0x49a>
 8018418:	08019754 	.word	0x08019754

0801841c <__sbprintf>:
 801841c:	b570      	push	{r4, r5, r6, lr}
 801841e:	460c      	mov	r4, r1
 8018420:	8989      	ldrh	r1, [r1, #12]
 8018422:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8018426:	f021 0102 	bic.w	r1, r1, #2
 801842a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801842e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8018430:	911b      	str	r1, [sp, #108]	; 0x6c
 8018432:	89e1      	ldrh	r1, [r4, #14]
 8018434:	f8ad 1016 	strh.w	r1, [sp, #22]
 8018438:	69e1      	ldr	r1, [r4, #28]
 801843a:	9109      	str	r1, [sp, #36]	; 0x24
 801843c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801843e:	910b      	str	r1, [sp, #44]	; 0x2c
 8018440:	a91c      	add	r1, sp, #112	; 0x70
 8018442:	9102      	str	r1, [sp, #8]
 8018444:	9106      	str	r1, [sp, #24]
 8018446:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801844a:	4606      	mov	r6, r0
 801844c:	9104      	str	r1, [sp, #16]
 801844e:	9107      	str	r1, [sp, #28]
 8018450:	a818      	add	r0, sp, #96	; 0x60
 8018452:	2100      	movs	r1, #0
 8018454:	e9cd 3200 	strd	r3, r2, [sp]
 8018458:	9108      	str	r1, [sp, #32]
 801845a:	f7fe fc65 	bl	8016d28 <__retarget_lock_init_recursive>
 801845e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018462:	a902      	add	r1, sp, #8
 8018464:	4630      	mov	r0, r6
 8018466:	f7ff fb43 	bl	8017af0 <_vfiprintf_r>
 801846a:	1e05      	subs	r5, r0, #0
 801846c:	db07      	blt.n	801847e <__sbprintf+0x62>
 801846e:	a902      	add	r1, sp, #8
 8018470:	4630      	mov	r0, r6
 8018472:	f7fe f92f 	bl	80166d4 <_fflush_r>
 8018476:	2800      	cmp	r0, #0
 8018478:	bf18      	it	ne
 801847a:	f04f 35ff 	movne.w	r5, #4294967295
 801847e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8018482:	9818      	ldr	r0, [sp, #96]	; 0x60
 8018484:	065b      	lsls	r3, r3, #25
 8018486:	bf42      	ittt	mi
 8018488:	89a3      	ldrhmi	r3, [r4, #12]
 801848a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801848e:	81a3      	strhmi	r3, [r4, #12]
 8018490:	f7fe fc4b 	bl	8016d2a <__retarget_lock_close_recursive>
 8018494:	4628      	mov	r0, r5
 8018496:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 801849a:	bd70      	pop	{r4, r5, r6, pc}

0801849c <__swbuf_r>:
 801849c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801849e:	460e      	mov	r6, r1
 80184a0:	4614      	mov	r4, r2
 80184a2:	4605      	mov	r5, r0
 80184a4:	b118      	cbz	r0, 80184ae <__swbuf_r+0x12>
 80184a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80184a8:	b90b      	cbnz	r3, 80184ae <__swbuf_r+0x12>
 80184aa:	f7fe f97f 	bl	80167ac <__sinit>
 80184ae:	69a3      	ldr	r3, [r4, #24]
 80184b0:	60a3      	str	r3, [r4, #8]
 80184b2:	89a3      	ldrh	r3, [r4, #12]
 80184b4:	0719      	lsls	r1, r3, #28
 80184b6:	d529      	bpl.n	801850c <__swbuf_r+0x70>
 80184b8:	6923      	ldr	r3, [r4, #16]
 80184ba:	b33b      	cbz	r3, 801850c <__swbuf_r+0x70>
 80184bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80184c0:	b2f6      	uxtb	r6, r6
 80184c2:	049a      	lsls	r2, r3, #18
 80184c4:	4637      	mov	r7, r6
 80184c6:	d52a      	bpl.n	801851e <__swbuf_r+0x82>
 80184c8:	6823      	ldr	r3, [r4, #0]
 80184ca:	6920      	ldr	r0, [r4, #16]
 80184cc:	1a18      	subs	r0, r3, r0
 80184ce:	6963      	ldr	r3, [r4, #20]
 80184d0:	4283      	cmp	r3, r0
 80184d2:	dc04      	bgt.n	80184de <__swbuf_r+0x42>
 80184d4:	4621      	mov	r1, r4
 80184d6:	4628      	mov	r0, r5
 80184d8:	f7fe f8fc 	bl	80166d4 <_fflush_r>
 80184dc:	b9e0      	cbnz	r0, 8018518 <__swbuf_r+0x7c>
 80184de:	68a3      	ldr	r3, [r4, #8]
 80184e0:	3b01      	subs	r3, #1
 80184e2:	60a3      	str	r3, [r4, #8]
 80184e4:	6823      	ldr	r3, [r4, #0]
 80184e6:	1c5a      	adds	r2, r3, #1
 80184e8:	6022      	str	r2, [r4, #0]
 80184ea:	701e      	strb	r6, [r3, #0]
 80184ec:	6962      	ldr	r2, [r4, #20]
 80184ee:	1c43      	adds	r3, r0, #1
 80184f0:	429a      	cmp	r2, r3
 80184f2:	d004      	beq.n	80184fe <__swbuf_r+0x62>
 80184f4:	89a3      	ldrh	r3, [r4, #12]
 80184f6:	07db      	lsls	r3, r3, #31
 80184f8:	d506      	bpl.n	8018508 <__swbuf_r+0x6c>
 80184fa:	2e0a      	cmp	r6, #10
 80184fc:	d104      	bne.n	8018508 <__swbuf_r+0x6c>
 80184fe:	4621      	mov	r1, r4
 8018500:	4628      	mov	r0, r5
 8018502:	f7fe f8e7 	bl	80166d4 <_fflush_r>
 8018506:	b938      	cbnz	r0, 8018518 <__swbuf_r+0x7c>
 8018508:	4638      	mov	r0, r7
 801850a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801850c:	4621      	mov	r1, r4
 801850e:	4628      	mov	r0, r5
 8018510:	f7fd fa02 	bl	8015918 <__swsetup_r>
 8018514:	2800      	cmp	r0, #0
 8018516:	d0d1      	beq.n	80184bc <__swbuf_r+0x20>
 8018518:	f04f 37ff 	mov.w	r7, #4294967295
 801851c:	e7f4      	b.n	8018508 <__swbuf_r+0x6c>
 801851e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018522:	81a3      	strh	r3, [r4, #12]
 8018524:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018526:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801852a:	6663      	str	r3, [r4, #100]	; 0x64
 801852c:	e7cc      	b.n	80184c8 <__swbuf_r+0x2c>
	...

08018530 <_write_r>:
 8018530:	b538      	push	{r3, r4, r5, lr}
 8018532:	4d07      	ldr	r5, [pc, #28]	; (8018550 <_write_r+0x20>)
 8018534:	4604      	mov	r4, r0
 8018536:	4608      	mov	r0, r1
 8018538:	4611      	mov	r1, r2
 801853a:	2200      	movs	r2, #0
 801853c:	602a      	str	r2, [r5, #0]
 801853e:	461a      	mov	r2, r3
 8018540:	f7eb fec0 	bl	80042c4 <_write>
 8018544:	1c43      	adds	r3, r0, #1
 8018546:	d102      	bne.n	801854e <_write_r+0x1e>
 8018548:	682b      	ldr	r3, [r5, #0]
 801854a:	b103      	cbz	r3, 801854e <_write_r+0x1e>
 801854c:	6023      	str	r3, [r4, #0]
 801854e:	bd38      	pop	{r3, r4, r5, pc}
 8018550:	20006638 	.word	0x20006638

08018554 <__register_exitproc>:
 8018554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018558:	f8df a078 	ldr.w	sl, [pc, #120]	; 80185d4 <__register_exitproc+0x80>
 801855c:	4606      	mov	r6, r0
 801855e:	f8da 0000 	ldr.w	r0, [sl]
 8018562:	4698      	mov	r8, r3
 8018564:	460f      	mov	r7, r1
 8018566:	4691      	mov	r9, r2
 8018568:	f7fe fbe0 	bl	8016d2c <__retarget_lock_acquire_recursive>
 801856c:	4b18      	ldr	r3, [pc, #96]	; (80185d0 <__register_exitproc+0x7c>)
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8018574:	b91c      	cbnz	r4, 801857e <__register_exitproc+0x2a>
 8018576:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 801857a:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 801857e:	6865      	ldr	r5, [r4, #4]
 8018580:	f8da 0000 	ldr.w	r0, [sl]
 8018584:	2d1f      	cmp	r5, #31
 8018586:	dd05      	ble.n	8018594 <__register_exitproc+0x40>
 8018588:	f7fe fbd1 	bl	8016d2e <__retarget_lock_release_recursive>
 801858c:	f04f 30ff 	mov.w	r0, #4294967295
 8018590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018594:	b19e      	cbz	r6, 80185be <__register_exitproc+0x6a>
 8018596:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801859a:	2201      	movs	r2, #1
 801859c:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 80185a0:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 80185a4:	40aa      	lsls	r2, r5
 80185a6:	4313      	orrs	r3, r2
 80185a8:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 80185ac:	2e02      	cmp	r6, #2
 80185ae:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 80185b2:	bf02      	ittt	eq
 80185b4:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 80185b8:	4313      	orreq	r3, r2
 80185ba:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 80185be:	1c6b      	adds	r3, r5, #1
 80185c0:	3502      	adds	r5, #2
 80185c2:	6063      	str	r3, [r4, #4]
 80185c4:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 80185c8:	f7fe fbb1 	bl	8016d2e <__retarget_lock_release_recursive>
 80185cc:	2000      	movs	r0, #0
 80185ce:	e7df      	b.n	8018590 <__register_exitproc+0x3c>
 80185d0:	08019504 	.word	0x08019504
 80185d4:	20000cf8 	.word	0x20000cf8

080185d8 <__assert_func>:
 80185d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80185da:	4614      	mov	r4, r2
 80185dc:	461a      	mov	r2, r3
 80185de:	4b09      	ldr	r3, [pc, #36]	; (8018604 <__assert_func+0x2c>)
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	4605      	mov	r5, r0
 80185e4:	68d8      	ldr	r0, [r3, #12]
 80185e6:	b14c      	cbz	r4, 80185fc <__assert_func+0x24>
 80185e8:	4b07      	ldr	r3, [pc, #28]	; (8018608 <__assert_func+0x30>)
 80185ea:	9100      	str	r1, [sp, #0]
 80185ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80185f0:	4906      	ldr	r1, [pc, #24]	; (801860c <__assert_func+0x34>)
 80185f2:	462b      	mov	r3, r5
 80185f4:	f000 f8ac 	bl	8018750 <fiprintf>
 80185f8:	f000 f9a9 	bl	801894e <abort>
 80185fc:	4b04      	ldr	r3, [pc, #16]	; (8018610 <__assert_func+0x38>)
 80185fe:	461c      	mov	r4, r3
 8018600:	e7f3      	b.n	80185ea <__assert_func+0x12>
 8018602:	bf00      	nop
 8018604:	200004bc 	.word	0x200004bc
 8018608:	08019774 	.word	0x08019774
 801860c:	08019781 	.word	0x08019781
 8018610:	080197af 	.word	0x080197af

08018614 <_calloc_r>:
 8018614:	b538      	push	{r3, r4, r5, lr}
 8018616:	fba1 1502 	umull	r1, r5, r1, r2
 801861a:	b92d      	cbnz	r5, 8018628 <_calloc_r+0x14>
 801861c:	f7fa fa36 	bl	8012a8c <_malloc_r>
 8018620:	4604      	mov	r4, r0
 8018622:	b938      	cbnz	r0, 8018634 <_calloc_r+0x20>
 8018624:	4620      	mov	r0, r4
 8018626:	bd38      	pop	{r3, r4, r5, pc}
 8018628:	f7fd ffc0 	bl	80165ac <__errno>
 801862c:	230c      	movs	r3, #12
 801862e:	6003      	str	r3, [r0, #0]
 8018630:	2400      	movs	r4, #0
 8018632:	e7f7      	b.n	8018624 <_calloc_r+0x10>
 8018634:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8018638:	f022 0203 	bic.w	r2, r2, #3
 801863c:	3a04      	subs	r2, #4
 801863e:	2a24      	cmp	r2, #36	; 0x24
 8018640:	d819      	bhi.n	8018676 <_calloc_r+0x62>
 8018642:	2a13      	cmp	r2, #19
 8018644:	d915      	bls.n	8018672 <_calloc_r+0x5e>
 8018646:	2a1b      	cmp	r2, #27
 8018648:	e9c0 5500 	strd	r5, r5, [r0]
 801864c:	d806      	bhi.n	801865c <_calloc_r+0x48>
 801864e:	f100 0308 	add.w	r3, r0, #8
 8018652:	2200      	movs	r2, #0
 8018654:	e9c3 2200 	strd	r2, r2, [r3]
 8018658:	609a      	str	r2, [r3, #8]
 801865a:	e7e3      	b.n	8018624 <_calloc_r+0x10>
 801865c:	2a24      	cmp	r2, #36	; 0x24
 801865e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8018662:	bf11      	iteee	ne
 8018664:	f100 0310 	addne.w	r3, r0, #16
 8018668:	6105      	streq	r5, [r0, #16]
 801866a:	f100 0318 	addeq.w	r3, r0, #24
 801866e:	6145      	streq	r5, [r0, #20]
 8018670:	e7ef      	b.n	8018652 <_calloc_r+0x3e>
 8018672:	4603      	mov	r3, r0
 8018674:	e7ed      	b.n	8018652 <_calloc_r+0x3e>
 8018676:	4629      	mov	r1, r5
 8018678:	f7fa fc44 	bl	8012f04 <memset>
 801867c:	e7d2      	b.n	8018624 <_calloc_r+0x10>
	...

08018680 <_close_r>:
 8018680:	b538      	push	{r3, r4, r5, lr}
 8018682:	4d06      	ldr	r5, [pc, #24]	; (801869c <_close_r+0x1c>)
 8018684:	2300      	movs	r3, #0
 8018686:	4604      	mov	r4, r0
 8018688:	4608      	mov	r0, r1
 801868a:	602b      	str	r3, [r5, #0]
 801868c:	f000 fcc8 	bl	8019020 <_close>
 8018690:	1c43      	adds	r3, r0, #1
 8018692:	d102      	bne.n	801869a <_close_r+0x1a>
 8018694:	682b      	ldr	r3, [r5, #0]
 8018696:	b103      	cbz	r3, 801869a <_close_r+0x1a>
 8018698:	6023      	str	r3, [r4, #0]
 801869a:	bd38      	pop	{r3, r4, r5, pc}
 801869c:	20006638 	.word	0x20006638

080186a0 <_fclose_r>:
 80186a0:	b570      	push	{r4, r5, r6, lr}
 80186a2:	4606      	mov	r6, r0
 80186a4:	460c      	mov	r4, r1
 80186a6:	b911      	cbnz	r1, 80186ae <_fclose_r+0xe>
 80186a8:	2500      	movs	r5, #0
 80186aa:	4628      	mov	r0, r5
 80186ac:	bd70      	pop	{r4, r5, r6, pc}
 80186ae:	b118      	cbz	r0, 80186b8 <_fclose_r+0x18>
 80186b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80186b2:	b90b      	cbnz	r3, 80186b8 <_fclose_r+0x18>
 80186b4:	f7fe f87a 	bl	80167ac <__sinit>
 80186b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80186ba:	07d8      	lsls	r0, r3, #31
 80186bc:	d405      	bmi.n	80186ca <_fclose_r+0x2a>
 80186be:	89a3      	ldrh	r3, [r4, #12]
 80186c0:	0599      	lsls	r1, r3, #22
 80186c2:	d402      	bmi.n	80186ca <_fclose_r+0x2a>
 80186c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80186c6:	f7fe fb31 	bl	8016d2c <__retarget_lock_acquire_recursive>
 80186ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80186ce:	b93b      	cbnz	r3, 80186e0 <_fclose_r+0x40>
 80186d0:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80186d2:	f015 0501 	ands.w	r5, r5, #1
 80186d6:	d1e7      	bne.n	80186a8 <_fclose_r+0x8>
 80186d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80186da:	f7fe fb28 	bl	8016d2e <__retarget_lock_release_recursive>
 80186de:	e7e4      	b.n	80186aa <_fclose_r+0xa>
 80186e0:	4621      	mov	r1, r4
 80186e2:	4630      	mov	r0, r6
 80186e4:	f7fd ff68 	bl	80165b8 <__sflush_r>
 80186e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80186ea:	4605      	mov	r5, r0
 80186ec:	b133      	cbz	r3, 80186fc <_fclose_r+0x5c>
 80186ee:	69e1      	ldr	r1, [r4, #28]
 80186f0:	4630      	mov	r0, r6
 80186f2:	4798      	blx	r3
 80186f4:	2800      	cmp	r0, #0
 80186f6:	bfb8      	it	lt
 80186f8:	f04f 35ff 	movlt.w	r5, #4294967295
 80186fc:	89a3      	ldrh	r3, [r4, #12]
 80186fe:	061a      	lsls	r2, r3, #24
 8018700:	d503      	bpl.n	801870a <_fclose_r+0x6a>
 8018702:	6921      	ldr	r1, [r4, #16]
 8018704:	4630      	mov	r0, r6
 8018706:	f7fe f8e1 	bl	80168cc <_free_r>
 801870a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801870c:	b141      	cbz	r1, 8018720 <_fclose_r+0x80>
 801870e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8018712:	4299      	cmp	r1, r3
 8018714:	d002      	beq.n	801871c <_fclose_r+0x7c>
 8018716:	4630      	mov	r0, r6
 8018718:	f7fe f8d8 	bl	80168cc <_free_r>
 801871c:	2300      	movs	r3, #0
 801871e:	6323      	str	r3, [r4, #48]	; 0x30
 8018720:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8018722:	b121      	cbz	r1, 801872e <_fclose_r+0x8e>
 8018724:	4630      	mov	r0, r6
 8018726:	f7fe f8d1 	bl	80168cc <_free_r>
 801872a:	2300      	movs	r3, #0
 801872c:	6463      	str	r3, [r4, #68]	; 0x44
 801872e:	f7fe f825 	bl	801677c <__sfp_lock_acquire>
 8018732:	2300      	movs	r3, #0
 8018734:	81a3      	strh	r3, [r4, #12]
 8018736:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018738:	07db      	lsls	r3, r3, #31
 801873a:	d402      	bmi.n	8018742 <_fclose_r+0xa2>
 801873c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801873e:	f7fe faf6 	bl	8016d2e <__retarget_lock_release_recursive>
 8018742:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018744:	f7fe faf1 	bl	8016d2a <__retarget_lock_close_recursive>
 8018748:	f7fe f81e 	bl	8016788 <__sfp_lock_release>
 801874c:	e7ad      	b.n	80186aa <_fclose_r+0xa>
	...

08018750 <fiprintf>:
 8018750:	b40e      	push	{r1, r2, r3}
 8018752:	b503      	push	{r0, r1, lr}
 8018754:	4601      	mov	r1, r0
 8018756:	ab03      	add	r3, sp, #12
 8018758:	4805      	ldr	r0, [pc, #20]	; (8018770 <fiprintf+0x20>)
 801875a:	f853 2b04 	ldr.w	r2, [r3], #4
 801875e:	6800      	ldr	r0, [r0, #0]
 8018760:	9301      	str	r3, [sp, #4]
 8018762:	f7ff f9c5 	bl	8017af0 <_vfiprintf_r>
 8018766:	b002      	add	sp, #8
 8018768:	f85d eb04 	ldr.w	lr, [sp], #4
 801876c:	b003      	add	sp, #12
 801876e:	4770      	bx	lr
 8018770:	200004bc 	.word	0x200004bc

08018774 <__fputwc>:
 8018774:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018778:	4680      	mov	r8, r0
 801877a:	460e      	mov	r6, r1
 801877c:	4615      	mov	r5, r2
 801877e:	f000 f887 	bl	8018890 <__locale_mb_cur_max>
 8018782:	2801      	cmp	r0, #1
 8018784:	d11c      	bne.n	80187c0 <__fputwc+0x4c>
 8018786:	1e73      	subs	r3, r6, #1
 8018788:	2bfe      	cmp	r3, #254	; 0xfe
 801878a:	d819      	bhi.n	80187c0 <__fputwc+0x4c>
 801878c:	f88d 6004 	strb.w	r6, [sp, #4]
 8018790:	4604      	mov	r4, r0
 8018792:	2700      	movs	r7, #0
 8018794:	f10d 0904 	add.w	r9, sp, #4
 8018798:	42a7      	cmp	r7, r4
 801879a:	d020      	beq.n	80187de <__fputwc+0x6a>
 801879c:	68ab      	ldr	r3, [r5, #8]
 801879e:	f817 1009 	ldrb.w	r1, [r7, r9]
 80187a2:	3b01      	subs	r3, #1
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	60ab      	str	r3, [r5, #8]
 80187a8:	da04      	bge.n	80187b4 <__fputwc+0x40>
 80187aa:	69aa      	ldr	r2, [r5, #24]
 80187ac:	4293      	cmp	r3, r2
 80187ae:	db1a      	blt.n	80187e6 <__fputwc+0x72>
 80187b0:	290a      	cmp	r1, #10
 80187b2:	d018      	beq.n	80187e6 <__fputwc+0x72>
 80187b4:	682b      	ldr	r3, [r5, #0]
 80187b6:	1c5a      	adds	r2, r3, #1
 80187b8:	602a      	str	r2, [r5, #0]
 80187ba:	7019      	strb	r1, [r3, #0]
 80187bc:	3701      	adds	r7, #1
 80187be:	e7eb      	b.n	8018798 <__fputwc+0x24>
 80187c0:	a901      	add	r1, sp, #4
 80187c2:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 80187c6:	4632      	mov	r2, r6
 80187c8:	4640      	mov	r0, r8
 80187ca:	f000 f89d 	bl	8018908 <_wcrtomb_r>
 80187ce:	1c41      	adds	r1, r0, #1
 80187d0:	4604      	mov	r4, r0
 80187d2:	d1de      	bne.n	8018792 <__fputwc+0x1e>
 80187d4:	89ab      	ldrh	r3, [r5, #12]
 80187d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80187da:	81ab      	strh	r3, [r5, #12]
 80187dc:	4606      	mov	r6, r0
 80187de:	4630      	mov	r0, r6
 80187e0:	b003      	add	sp, #12
 80187e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80187e6:	462a      	mov	r2, r5
 80187e8:	4640      	mov	r0, r8
 80187ea:	f7ff fe57 	bl	801849c <__swbuf_r>
 80187ee:	1c42      	adds	r2, r0, #1
 80187f0:	d1e4      	bne.n	80187bc <__fputwc+0x48>
 80187f2:	4606      	mov	r6, r0
 80187f4:	e7f3      	b.n	80187de <__fputwc+0x6a>

080187f6 <_fputwc_r>:
 80187f6:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80187f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80187fa:	4614      	mov	r4, r2
 80187fc:	07da      	lsls	r2, r3, #31
 80187fe:	4605      	mov	r5, r0
 8018800:	d407      	bmi.n	8018812 <_fputwc_r+0x1c>
 8018802:	89a3      	ldrh	r3, [r4, #12]
 8018804:	059b      	lsls	r3, r3, #22
 8018806:	d404      	bmi.n	8018812 <_fputwc_r+0x1c>
 8018808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801880a:	9101      	str	r1, [sp, #4]
 801880c:	f7fe fa8e 	bl	8016d2c <__retarget_lock_acquire_recursive>
 8018810:	9901      	ldr	r1, [sp, #4]
 8018812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018816:	0498      	lsls	r0, r3, #18
 8018818:	d406      	bmi.n	8018828 <_fputwc_r+0x32>
 801881a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801881e:	81a3      	strh	r3, [r4, #12]
 8018820:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018822:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018826:	6663      	str	r3, [r4, #100]	; 0x64
 8018828:	4622      	mov	r2, r4
 801882a:	4628      	mov	r0, r5
 801882c:	f7ff ffa2 	bl	8018774 <__fputwc>
 8018830:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018832:	07da      	lsls	r2, r3, #31
 8018834:	4605      	mov	r5, r0
 8018836:	d405      	bmi.n	8018844 <_fputwc_r+0x4e>
 8018838:	89a3      	ldrh	r3, [r4, #12]
 801883a:	059b      	lsls	r3, r3, #22
 801883c:	d402      	bmi.n	8018844 <_fputwc_r+0x4e>
 801883e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018840:	f7fe fa75 	bl	8016d2e <__retarget_lock_release_recursive>
 8018844:	4628      	mov	r0, r5
 8018846:	b003      	add	sp, #12
 8018848:	bd30      	pop	{r4, r5, pc}
	...

0801884c <_fstat_r>:
 801884c:	b538      	push	{r3, r4, r5, lr}
 801884e:	4d07      	ldr	r5, [pc, #28]	; (801886c <_fstat_r+0x20>)
 8018850:	2300      	movs	r3, #0
 8018852:	4604      	mov	r4, r0
 8018854:	4608      	mov	r0, r1
 8018856:	4611      	mov	r1, r2
 8018858:	602b      	str	r3, [r5, #0]
 801885a:	f000 fbe9 	bl	8019030 <_fstat>
 801885e:	1c43      	adds	r3, r0, #1
 8018860:	d102      	bne.n	8018868 <_fstat_r+0x1c>
 8018862:	682b      	ldr	r3, [r5, #0]
 8018864:	b103      	cbz	r3, 8018868 <_fstat_r+0x1c>
 8018866:	6023      	str	r3, [r4, #0]
 8018868:	bd38      	pop	{r3, r4, r5, pc}
 801886a:	bf00      	nop
 801886c:	20006638 	.word	0x20006638

08018870 <_isatty_r>:
 8018870:	b538      	push	{r3, r4, r5, lr}
 8018872:	4d06      	ldr	r5, [pc, #24]	; (801888c <_isatty_r+0x1c>)
 8018874:	2300      	movs	r3, #0
 8018876:	4604      	mov	r4, r0
 8018878:	4608      	mov	r0, r1
 801887a:	602b      	str	r3, [r5, #0]
 801887c:	f000 fbe8 	bl	8019050 <_isatty>
 8018880:	1c43      	adds	r3, r0, #1
 8018882:	d102      	bne.n	801888a <_isatty_r+0x1a>
 8018884:	682b      	ldr	r3, [r5, #0]
 8018886:	b103      	cbz	r3, 801888a <_isatty_r+0x1a>
 8018888:	6023      	str	r3, [r4, #0]
 801888a:	bd38      	pop	{r3, r4, r5, pc}
 801888c:	20006638 	.word	0x20006638

08018890 <__locale_mb_cur_max>:
 8018890:	4b01      	ldr	r3, [pc, #4]	; (8018898 <__locale_mb_cur_max+0x8>)
 8018892:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8018896:	4770      	bx	lr
 8018898:	20000cfc 	.word	0x20000cfc

0801889c <_lseek_r>:
 801889c:	b538      	push	{r3, r4, r5, lr}
 801889e:	4d07      	ldr	r5, [pc, #28]	; (80188bc <_lseek_r+0x20>)
 80188a0:	4604      	mov	r4, r0
 80188a2:	4608      	mov	r0, r1
 80188a4:	4611      	mov	r1, r2
 80188a6:	2200      	movs	r2, #0
 80188a8:	602a      	str	r2, [r5, #0]
 80188aa:	461a      	mov	r2, r3
 80188ac:	f000 fbe0 	bl	8019070 <_lseek>
 80188b0:	1c43      	adds	r3, r0, #1
 80188b2:	d102      	bne.n	80188ba <_lseek_r+0x1e>
 80188b4:	682b      	ldr	r3, [r5, #0]
 80188b6:	b103      	cbz	r3, 80188ba <_lseek_r+0x1e>
 80188b8:	6023      	str	r3, [r4, #0]
 80188ba:	bd38      	pop	{r3, r4, r5, pc}
 80188bc:	20006638 	.word	0x20006638

080188c0 <__ascii_mbtowc>:
 80188c0:	b082      	sub	sp, #8
 80188c2:	b901      	cbnz	r1, 80188c6 <__ascii_mbtowc+0x6>
 80188c4:	a901      	add	r1, sp, #4
 80188c6:	b142      	cbz	r2, 80188da <__ascii_mbtowc+0x1a>
 80188c8:	b14b      	cbz	r3, 80188de <__ascii_mbtowc+0x1e>
 80188ca:	7813      	ldrb	r3, [r2, #0]
 80188cc:	600b      	str	r3, [r1, #0]
 80188ce:	7812      	ldrb	r2, [r2, #0]
 80188d0:	1e10      	subs	r0, r2, #0
 80188d2:	bf18      	it	ne
 80188d4:	2001      	movne	r0, #1
 80188d6:	b002      	add	sp, #8
 80188d8:	4770      	bx	lr
 80188da:	4610      	mov	r0, r2
 80188dc:	e7fb      	b.n	80188d6 <__ascii_mbtowc+0x16>
 80188de:	f06f 0001 	mvn.w	r0, #1
 80188e2:	e7f8      	b.n	80188d6 <__ascii_mbtowc+0x16>

080188e4 <_read_r>:
 80188e4:	b538      	push	{r3, r4, r5, lr}
 80188e6:	4d07      	ldr	r5, [pc, #28]	; (8018904 <_read_r+0x20>)
 80188e8:	4604      	mov	r4, r0
 80188ea:	4608      	mov	r0, r1
 80188ec:	4611      	mov	r1, r2
 80188ee:	2200      	movs	r2, #0
 80188f0:	602a      	str	r2, [r5, #0]
 80188f2:	461a      	mov	r2, r3
 80188f4:	f000 fbc4 	bl	8019080 <_read>
 80188f8:	1c43      	adds	r3, r0, #1
 80188fa:	d102      	bne.n	8018902 <_read_r+0x1e>
 80188fc:	682b      	ldr	r3, [r5, #0]
 80188fe:	b103      	cbz	r3, 8018902 <_read_r+0x1e>
 8018900:	6023      	str	r3, [r4, #0]
 8018902:	bd38      	pop	{r3, r4, r5, pc}
 8018904:	20006638 	.word	0x20006638

08018908 <_wcrtomb_r>:
 8018908:	b5f0      	push	{r4, r5, r6, r7, lr}
 801890a:	4c09      	ldr	r4, [pc, #36]	; (8018930 <_wcrtomb_r+0x28>)
 801890c:	b085      	sub	sp, #20
 801890e:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8018912:	4605      	mov	r5, r0
 8018914:	461e      	mov	r6, r3
 8018916:	b909      	cbnz	r1, 801891c <_wcrtomb_r+0x14>
 8018918:	460a      	mov	r2, r1
 801891a:	a901      	add	r1, sp, #4
 801891c:	47b8      	blx	r7
 801891e:	1c43      	adds	r3, r0, #1
 8018920:	bf01      	itttt	eq
 8018922:	2300      	moveq	r3, #0
 8018924:	6033      	streq	r3, [r6, #0]
 8018926:	238a      	moveq	r3, #138	; 0x8a
 8018928:	602b      	streq	r3, [r5, #0]
 801892a:	b005      	add	sp, #20
 801892c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801892e:	bf00      	nop
 8018930:	20000cfc 	.word	0x20000cfc

08018934 <__ascii_wctomb>:
 8018934:	b149      	cbz	r1, 801894a <__ascii_wctomb+0x16>
 8018936:	2aff      	cmp	r2, #255	; 0xff
 8018938:	bf85      	ittet	hi
 801893a:	238a      	movhi	r3, #138	; 0x8a
 801893c:	6003      	strhi	r3, [r0, #0]
 801893e:	700a      	strbls	r2, [r1, #0]
 8018940:	f04f 30ff 	movhi.w	r0, #4294967295
 8018944:	bf98      	it	ls
 8018946:	2001      	movls	r0, #1
 8018948:	4770      	bx	lr
 801894a:	4608      	mov	r0, r1
 801894c:	4770      	bx	lr

0801894e <abort>:
 801894e:	b508      	push	{r3, lr}
 8018950:	2006      	movs	r0, #6
 8018952:	f000 f82d 	bl	80189b0 <raise>
 8018956:	2001      	movs	r0, #1
 8018958:	f000 fba8 	bl	80190ac <_exit>

0801895c <_raise_r>:
 801895c:	291f      	cmp	r1, #31
 801895e:	b538      	push	{r3, r4, r5, lr}
 8018960:	4604      	mov	r4, r0
 8018962:	460d      	mov	r5, r1
 8018964:	d904      	bls.n	8018970 <_raise_r+0x14>
 8018966:	2316      	movs	r3, #22
 8018968:	6003      	str	r3, [r0, #0]
 801896a:	f04f 30ff 	mov.w	r0, #4294967295
 801896e:	bd38      	pop	{r3, r4, r5, pc}
 8018970:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8018974:	b112      	cbz	r2, 801897c <_raise_r+0x20>
 8018976:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801897a:	b94b      	cbnz	r3, 8018990 <_raise_r+0x34>
 801897c:	4620      	mov	r0, r4
 801897e:	f000 f831 	bl	80189e4 <_getpid_r>
 8018982:	462a      	mov	r2, r5
 8018984:	4601      	mov	r1, r0
 8018986:	4620      	mov	r0, r4
 8018988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801898c:	f000 b818 	b.w	80189c0 <_kill_r>
 8018990:	2b01      	cmp	r3, #1
 8018992:	d00a      	beq.n	80189aa <_raise_r+0x4e>
 8018994:	1c59      	adds	r1, r3, #1
 8018996:	d103      	bne.n	80189a0 <_raise_r+0x44>
 8018998:	2316      	movs	r3, #22
 801899a:	6003      	str	r3, [r0, #0]
 801899c:	2001      	movs	r0, #1
 801899e:	e7e6      	b.n	801896e <_raise_r+0x12>
 80189a0:	2400      	movs	r4, #0
 80189a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80189a6:	4628      	mov	r0, r5
 80189a8:	4798      	blx	r3
 80189aa:	2000      	movs	r0, #0
 80189ac:	e7df      	b.n	801896e <_raise_r+0x12>
	...

080189b0 <raise>:
 80189b0:	4b02      	ldr	r3, [pc, #8]	; (80189bc <raise+0xc>)
 80189b2:	4601      	mov	r1, r0
 80189b4:	6818      	ldr	r0, [r3, #0]
 80189b6:	f7ff bfd1 	b.w	801895c <_raise_r>
 80189ba:	bf00      	nop
 80189bc:	200004bc 	.word	0x200004bc

080189c0 <_kill_r>:
 80189c0:	b538      	push	{r3, r4, r5, lr}
 80189c2:	4d07      	ldr	r5, [pc, #28]	; (80189e0 <_kill_r+0x20>)
 80189c4:	2300      	movs	r3, #0
 80189c6:	4604      	mov	r4, r0
 80189c8:	4608      	mov	r0, r1
 80189ca:	4611      	mov	r1, r2
 80189cc:	602b      	str	r3, [r5, #0]
 80189ce:	f000 fb47 	bl	8019060 <_kill>
 80189d2:	1c43      	adds	r3, r0, #1
 80189d4:	d102      	bne.n	80189dc <_kill_r+0x1c>
 80189d6:	682b      	ldr	r3, [r5, #0]
 80189d8:	b103      	cbz	r3, 80189dc <_kill_r+0x1c>
 80189da:	6023      	str	r3, [r4, #0]
 80189dc:	bd38      	pop	{r3, r4, r5, pc}
 80189de:	bf00      	nop
 80189e0:	20006638 	.word	0x20006638

080189e4 <_getpid_r>:
 80189e4:	f000 bb2c 	b.w	8019040 <_getpid>

080189e8 <checkint>:
 80189e8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80189ec:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80189f0:	429a      	cmp	r2, r3
 80189f2:	b570      	push	{r4, r5, r6, lr}
 80189f4:	dd2a      	ble.n	8018a4c <checkint+0x64>
 80189f6:	f240 4333 	movw	r3, #1075	; 0x433
 80189fa:	429a      	cmp	r2, r3
 80189fc:	dc24      	bgt.n	8018a48 <checkint+0x60>
 80189fe:	1a9b      	subs	r3, r3, r2
 8018a00:	f1a3 0620 	sub.w	r6, r3, #32
 8018a04:	f04f 32ff 	mov.w	r2, #4294967295
 8018a08:	fa02 f403 	lsl.w	r4, r2, r3
 8018a0c:	fa02 f606 	lsl.w	r6, r2, r6
 8018a10:	f1c3 0520 	rsb	r5, r3, #32
 8018a14:	fa22 f505 	lsr.w	r5, r2, r5
 8018a18:	4334      	orrs	r4, r6
 8018a1a:	432c      	orrs	r4, r5
 8018a1c:	409a      	lsls	r2, r3
 8018a1e:	ea20 0202 	bic.w	r2, r0, r2
 8018a22:	ea21 0404 	bic.w	r4, r1, r4
 8018a26:	4322      	orrs	r2, r4
 8018a28:	f1a3 0420 	sub.w	r4, r3, #32
 8018a2c:	f1c3 0220 	rsb	r2, r3, #32
 8018a30:	d10c      	bne.n	8018a4c <checkint+0x64>
 8018a32:	40d8      	lsrs	r0, r3
 8018a34:	fa01 f302 	lsl.w	r3, r1, r2
 8018a38:	4318      	orrs	r0, r3
 8018a3a:	40e1      	lsrs	r1, r4
 8018a3c:	4308      	orrs	r0, r1
 8018a3e:	f000 0001 	and.w	r0, r0, #1
 8018a42:	f1d0 0002 	rsbs	r0, r0, #2
 8018a46:	bd70      	pop	{r4, r5, r6, pc}
 8018a48:	2002      	movs	r0, #2
 8018a4a:	e7fc      	b.n	8018a46 <checkint+0x5e>
 8018a4c:	2000      	movs	r0, #0
 8018a4e:	e7fa      	b.n	8018a46 <checkint+0x5e>

08018a50 <pow>:
 8018a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a54:	ee10 4a90 	vmov	r4, s1
 8018a58:	ed2d 8b0a 	vpush	{d8-d12}
 8018a5c:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8018a60:	ee11 7a90 	vmov	r7, s3
 8018a64:	f10a 32ff 	add.w	r2, sl, #4294967295
 8018a68:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8018a6c:	429a      	cmp	r2, r3
 8018a6e:	ee10 6a10 	vmov	r6, s0
 8018a72:	ee11 0a10 	vmov	r0, s2
 8018a76:	b086      	sub	sp, #24
 8018a78:	46d4      	mov	ip, sl
 8018a7a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 8018a7e:	d806      	bhi.n	8018a8e <pow+0x3e>
 8018a80:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8018a84:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8018a88:	2b7f      	cmp	r3, #127	; 0x7f
 8018a8a:	f240 8156 	bls.w	8018d3a <pow+0x2ea>
 8018a8e:	1802      	adds	r2, r0, r0
 8018a90:	eb47 0107 	adc.w	r1, r7, r7
 8018a94:	f06f 0e01 	mvn.w	lr, #1
 8018a98:	f112 39ff 	adds.w	r9, r2, #4294967295
 8018a9c:	f141 38ff 	adc.w	r8, r1, #4294967295
 8018aa0:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8018aa4:	45ce      	cmp	lr, r9
 8018aa6:	eb73 0808 	sbcs.w	r8, r3, r8
 8018aaa:	d23f      	bcs.n	8018b2c <pow+0xdc>
 8018aac:	ea52 0301 	orrs.w	r3, r2, r1
 8018ab0:	f04f 0300 	mov.w	r3, #0
 8018ab4:	d10c      	bne.n	8018ad0 <pow+0x80>
 8018ab6:	19b6      	adds	r6, r6, r6
 8018ab8:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8018abc:	4164      	adcs	r4, r4
 8018abe:	42b3      	cmp	r3, r6
 8018ac0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8018ac4:	41a3      	sbcs	r3, r4
 8018ac6:	f0c0 808c 	bcc.w	8018be2 <pow+0x192>
 8018aca:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8018ace:	e028      	b.n	8018b22 <pow+0xd2>
 8018ad0:	4da3      	ldr	r5, [pc, #652]	; (8018d60 <pow+0x310>)
 8018ad2:	42ac      	cmp	r4, r5
 8018ad4:	bf08      	it	eq
 8018ad6:	429e      	cmpeq	r6, r3
 8018ad8:	d107      	bne.n	8018aea <pow+0x9a>
 8018ada:	1800      	adds	r0, r0, r0
 8018adc:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8018ae0:	417f      	adcs	r7, r7
 8018ae2:	4283      	cmp	r3, r0
 8018ae4:	4b9f      	ldr	r3, [pc, #636]	; (8018d64 <pow+0x314>)
 8018ae6:	41bb      	sbcs	r3, r7
 8018ae8:	e7ed      	b.n	8018ac6 <pow+0x76>
 8018aea:	19b6      	adds	r6, r6, r6
 8018aec:	489e      	ldr	r0, [pc, #632]	; (8018d68 <pow+0x318>)
 8018aee:	4164      	adcs	r4, r4
 8018af0:	42b3      	cmp	r3, r6
 8018af2:	eb70 0504 	sbcs.w	r5, r0, r4
 8018af6:	d374      	bcc.n	8018be2 <pow+0x192>
 8018af8:	4281      	cmp	r1, r0
 8018afa:	bf08      	it	eq
 8018afc:	429a      	cmpeq	r2, r3
 8018afe:	d170      	bne.n	8018be2 <pow+0x192>
 8018b00:	4a9a      	ldr	r2, [pc, #616]	; (8018d6c <pow+0x31c>)
 8018b02:	4294      	cmp	r4, r2
 8018b04:	bf08      	it	eq
 8018b06:	429e      	cmpeq	r6, r3
 8018b08:	d0df      	beq.n	8018aca <pow+0x7a>
 8018b0a:	4294      	cmp	r4, r2
 8018b0c:	ea6f 0707 	mvn.w	r7, r7
 8018b10:	bf34      	ite	cc
 8018b12:	2400      	movcc	r4, #0
 8018b14:	2401      	movcs	r4, #1
 8018b16:	0fff      	lsrs	r7, r7, #31
 8018b18:	42bc      	cmp	r4, r7
 8018b1a:	f040 81d9 	bne.w	8018ed0 <pow+0x480>
 8018b1e:	ee21 0b01 	vmul.f64	d0, d1, d1
 8018b22:	b006      	add	sp, #24
 8018b24:	ecbd 8b0a 	vpop	{d8-d12}
 8018b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b2c:	eb16 0806 	adds.w	r8, r6, r6
 8018b30:	eb44 0904 	adc.w	r9, r4, r4
 8018b34:	f118 31ff 	adds.w	r1, r8, #4294967295
 8018b38:	f169 0200 	sbc.w	r2, r9, #0
 8018b3c:	458e      	cmp	lr, r1
 8018b3e:	4193      	sbcs	r3, r2
 8018b40:	d223      	bcs.n	8018b8a <pow+0x13a>
 8018b42:	ee20 0b00 	vmul.f64	d0, d0, d0
 8018b46:	2c00      	cmp	r4, #0
 8018b48:	da12      	bge.n	8018b70 <pow+0x120>
 8018b4a:	4639      	mov	r1, r7
 8018b4c:	f7ff ff4c 	bl	80189e8 <checkint>
 8018b50:	2801      	cmp	r0, #1
 8018b52:	d10d      	bne.n	8018b70 <pow+0x120>
 8018b54:	eeb1 0b40 	vneg.f64	d0, d0
 8018b58:	ea58 0309 	orrs.w	r3, r8, r9
 8018b5c:	d10a      	bne.n	8018b74 <pow+0x124>
 8018b5e:	2f00      	cmp	r7, #0
 8018b60:	dadf      	bge.n	8018b22 <pow+0xd2>
 8018b62:	b006      	add	sp, #24
 8018b64:	ecbd 8b0a 	vpop	{d8-d12}
 8018b68:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b6c:	f000 ba14 	b.w	8018f98 <__math_divzero>
 8018b70:	2000      	movs	r0, #0
 8018b72:	e7f1      	b.n	8018b58 <pow+0x108>
 8018b74:	2f00      	cmp	r7, #0
 8018b76:	dad4      	bge.n	8018b22 <pow+0xd2>
 8018b78:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8018b7c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8018b80:	ed8d 7b00 	vstr	d7, [sp]
 8018b84:	ed9d 0b00 	vldr	d0, [sp]
 8018b88:	e7cb      	b.n	8018b22 <pow+0xd2>
 8018b8a:	2c00      	cmp	r4, #0
 8018b8c:	da2c      	bge.n	8018be8 <pow+0x198>
 8018b8e:	4639      	mov	r1, r7
 8018b90:	f7ff ff2a 	bl	80189e8 <checkint>
 8018b94:	b930      	cbnz	r0, 8018ba4 <pow+0x154>
 8018b96:	b006      	add	sp, #24
 8018b98:	ecbd 8b0a 	vpop	{d8-d12}
 8018b9c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ba0:	f000 ba12 	b.w	8018fc8 <__math_invalid>
 8018ba4:	2801      	cmp	r0, #1
 8018ba6:	bf14      	ite	ne
 8018ba8:	2000      	movne	r0, #0
 8018baa:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8018bae:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8018bb2:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8018bb6:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8018bba:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8018bbe:	2b7f      	cmp	r3, #127	; 0x7f
 8018bc0:	d92d      	bls.n	8018c1e <pow+0x1ce>
 8018bc2:	4b67      	ldr	r3, [pc, #412]	; (8018d60 <pow+0x310>)
 8018bc4:	2000      	movs	r0, #0
 8018bc6:	429c      	cmp	r4, r3
 8018bc8:	bf08      	it	eq
 8018bca:	4286      	cmpeq	r6, r0
 8018bcc:	f43f af7d 	beq.w	8018aca <pow+0x7a>
 8018bd0:	f240 31bd 	movw	r1, #957	; 0x3bd
 8018bd4:	428a      	cmp	r2, r1
 8018bd6:	d80c      	bhi.n	8018bf2 <pow+0x1a2>
 8018bd8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8018bdc:	42b0      	cmp	r0, r6
 8018bde:	41a3      	sbcs	r3, r4
 8018be0:	d204      	bcs.n	8018bec <pow+0x19c>
 8018be2:	ee31 0b00 	vadd.f64	d0, d1, d0
 8018be6:	e79c      	b.n	8018b22 <pow+0xd2>
 8018be8:	2000      	movs	r0, #0
 8018bea:	e7e4      	b.n	8018bb6 <pow+0x166>
 8018bec:	ee30 0b41 	vsub.f64	d0, d0, d1
 8018bf0:	e797      	b.n	8018b22 <pow+0xd2>
 8018bf2:	2e01      	cmp	r6, #1
 8018bf4:	eb74 0303 	sbcs.w	r3, r4, r3
 8018bf8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8018bfc:	bf34      	ite	cc
 8018bfe:	2301      	movcc	r3, #1
 8018c00:	2300      	movcs	r3, #0
 8018c02:	4295      	cmp	r5, r2
 8018c04:	bf8c      	ite	hi
 8018c06:	2500      	movhi	r5, #0
 8018c08:	2501      	movls	r5, #1
 8018c0a:	42ab      	cmp	r3, r5
 8018c0c:	f000 809d 	beq.w	8018d4a <pow+0x2fa>
 8018c10:	b006      	add	sp, #24
 8018c12:	ecbd 8b0a 	vpop	{d8-d12}
 8018c16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c1a:	f000 b9b5 	b.w	8018f88 <__math_oflow>
 8018c1e:	f1bc 0f00 	cmp.w	ip, #0
 8018c22:	d10b      	bne.n	8018c3c <pow+0x1ec>
 8018c24:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8018d58 <pow+0x308>
 8018c28:	ee20 7b07 	vmul.f64	d7, d0, d7
 8018c2c:	ec53 2b17 	vmov	r2, r3, d7
 8018c30:	ee17 6a10 	vmov	r6, s14
 8018c34:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8018c38:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8018c3c:	4b4c      	ldr	r3, [pc, #304]	; (8018d70 <pow+0x320>)
 8018c3e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8018c42:	4423      	add	r3, r4
 8018c44:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8018c48:	1519      	asrs	r1, r3, #20
 8018c4a:	0d1b      	lsrs	r3, r3, #20
 8018c4c:	051b      	lsls	r3, r3, #20
 8018c4e:	eba4 0903 	sub.w	r9, r4, r3
 8018c52:	4b48      	ldr	r3, [pc, #288]	; (8018d74 <pow+0x324>)
 8018c54:	ee04 1a10 	vmov	s8, r1
 8018c58:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8018c5c:	f1b6 0800 	subs.w	r8, r6, #0
 8018c60:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8018c64:	ec49 8b15 	vmov	d5, r8, r9
 8018c68:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8018c6c:	eea5 6b07 	vfma.f64	d6, d5, d7
 8018c70:	ed93 7b00 	vldr	d7, [r3]
 8018c74:	ed93 5b02 	vldr	d5, [r3, #8]
 8018c78:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8018c7c:	eea4 2b07 	vfma.f64	d2, d4, d7
 8018c80:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8018c84:	ee36 ab02 	vadd.f64	d10, d6, d2
 8018c88:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8018c8c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8018c90:	ed93 5b04 	vldr	d5, [r3, #16]
 8018c94:	ee32 2b06 	vadd.f64	d2, d2, d6
 8018c98:	ee37 7b02 	vadd.f64	d7, d7, d2
 8018c9c:	ee26 5b05 	vmul.f64	d5, d6, d5
 8018ca0:	ed93 4b08 	vldr	d4, [r3, #32]
 8018ca4:	ee26 0b05 	vmul.f64	d0, d6, d5
 8018ca8:	eeb0 9b40 	vmov.f64	d9, d0
 8018cac:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8018cb0:	ed93 5b06 	vldr	d5, [r3, #24]
 8018cb4:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8018cb8:	ee26 bb00 	vmul.f64	d11, d6, d0
 8018cbc:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8018cc0:	eea6 5b04 	vfma.f64	d5, d6, d4
 8018cc4:	ee3a ab48 	vsub.f64	d10, d10, d8
 8018cc8:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8018ccc:	ee37 9b09 	vadd.f64	d9, d7, d9
 8018cd0:	ee3a ab00 	vadd.f64	d10, d10, d0
 8018cd4:	eea6 4b03 	vfma.f64	d4, d6, d3
 8018cd8:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8018cdc:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8018ce0:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8018ce4:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8018ce8:	eea0 4b03 	vfma.f64	d4, d0, d3
 8018cec:	eea0 5b04 	vfma.f64	d5, d0, d4
 8018cf0:	eeab ab05 	vfma.f64	d10, d11, d5
 8018cf4:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8018cf8:	ee21 7b06 	vmul.f64	d7, d1, d6
 8018cfc:	ee17 3a90 	vmov	r3, s15
 8018d00:	eeb0 5b47 	vmov.f64	d5, d7
 8018d04:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8018d08:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8018d0c:	18b2      	adds	r2, r6, r2
 8018d0e:	2a3e      	cmp	r2, #62	; 0x3e
 8018d10:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8018d14:	ee38 8b46 	vsub.f64	d8, d8, d6
 8018d18:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8018d1c:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8018d20:	d92b      	bls.n	8018d7a <pow+0x32a>
 8018d22:	2a00      	cmp	r2, #0
 8018d24:	da0b      	bge.n	8018d3e <pow+0x2ee>
 8018d26:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8018d2a:	ee37 0b00 	vadd.f64	d0, d7, d0
 8018d2e:	2800      	cmp	r0, #0
 8018d30:	f43f aef7 	beq.w	8018b22 <pow+0xd2>
 8018d34:	eeb1 0b40 	vneg.f64	d0, d0
 8018d38:	e6f3      	b.n	8018b22 <pow+0xd2>
 8018d3a:	2000      	movs	r0, #0
 8018d3c:	e77e      	b.n	8018c3c <pow+0x1ec>
 8018d3e:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8018d42:	d919      	bls.n	8018d78 <pow+0x328>
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	f6bf af63 	bge.w	8018c10 <pow+0x1c0>
 8018d4a:	b006      	add	sp, #24
 8018d4c:	ecbd 8b0a 	vpop	{d8-d12}
 8018d50:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d54:	f000 b910 	b.w	8018f78 <__math_uflow>
 8018d58:	00000000 	.word	0x00000000
 8018d5c:	43300000 	.word	0x43300000
 8018d60:	3ff00000 	.word	0x3ff00000
 8018d64:	fff00000 	.word	0xfff00000
 8018d68:	ffe00000 	.word	0xffe00000
 8018d6c:	7fe00000 	.word	0x7fe00000
 8018d70:	c0196aab 	.word	0xc0196aab
 8018d74:	080198c0 	.word	0x080198c0
 8018d78:	2600      	movs	r6, #0
 8018d7a:	495d      	ldr	r1, [pc, #372]	; (8018ef0 <pow+0x4a0>)
 8018d7c:	ed91 4b02 	vldr	d4, [r1, #8]
 8018d80:	ed91 3b00 	vldr	d3, [r1]
 8018d84:	eeb0 6b44 	vmov.f64	d6, d4
 8018d88:	eea7 6b03 	vfma.f64	d6, d7, d3
 8018d8c:	ee16 5a10 	vmov	r5, s12
 8018d90:	ee36 6b44 	vsub.f64	d6, d6, d4
 8018d94:	ed91 4b04 	vldr	d4, [r1, #16]
 8018d98:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8018d9c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8018da0:	eeb0 0b47 	vmov.f64	d0, d7
 8018da4:	ed91 7b06 	vldr	d7, [r1, #24]
 8018da8:	18dc      	adds	r4, r3, r3
 8018daa:	f104 030f 	add.w	r3, r4, #15
 8018dae:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8018db2:	eea6 0b07 	vfma.f64	d0, d6, d7
 8018db6:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8018dba:	ee35 0b00 	vadd.f64	d0, d5, d0
 8018dbe:	ee20 6b00 	vmul.f64	d6, d0, d0
 8018dc2:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8018dc6:	ed91 5b08 	vldr	d5, [r1, #32]
 8018dca:	ee30 7b07 	vadd.f64	d7, d0, d7
 8018dce:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8018dd2:	eea0 5b04 	vfma.f64	d5, d0, d4
 8018dd6:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8018dda:	eea6 7b05 	vfma.f64	d7, d6, d5
 8018dde:	ee26 6b06 	vmul.f64	d6, d6, d6
 8018de2:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8018de6:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8018dea:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8018dee:	eea0 5b04 	vfma.f64	d5, d0, d4
 8018df2:	1940      	adds	r0, r0, r5
 8018df4:	2700      	movs	r7, #0
 8018df6:	eb17 020c 	adds.w	r2, r7, ip
 8018dfa:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8018dfe:	eea6 7b05 	vfma.f64	d7, d6, d5
 8018e02:	2e00      	cmp	r6, #0
 8018e04:	d15f      	bne.n	8018ec6 <pow+0x476>
 8018e06:	42bd      	cmp	r5, r7
 8018e08:	db13      	blt.n	8018e32 <pow+0x3e2>
 8018e0a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8018e0e:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8018e12:	4610      	mov	r0, r2
 8018e14:	ec41 0b10 	vmov	d0, r0, r1
 8018e18:	eea7 0b00 	vfma.f64	d0, d7, d0
 8018e1c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8018ed8 <pow+0x488>
 8018e20:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018e24:	b006      	add	sp, #24
 8018e26:	ecbd 8b0a 	vpop	{d8-d12}
 8018e2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e2e:	f000 b8e3 	b.w	8018ff8 <__math_check_oflow>
 8018e32:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8018e36:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8018e3a:	4610      	mov	r0, r2
 8018e3c:	ec41 0b15 	vmov	d5, r0, r1
 8018e40:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8018e44:	ee27 6b05 	vmul.f64	d6, d7, d5
 8018e48:	ee35 7b06 	vadd.f64	d7, d5, d6
 8018e4c:	eeb0 3bc7 	vabs.f64	d3, d7
 8018e50:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8018e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e58:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8018ee0 <pow+0x490>
 8018e5c:	d52a      	bpl.n	8018eb4 <pow+0x464>
 8018e5e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8018e62:	ee35 5b47 	vsub.f64	d5, d5, d7
 8018e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e6a:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8018e6e:	ee35 6b06 	vadd.f64	d6, d5, d6
 8018e72:	bf48      	it	mi
 8018e74:	eeb0 4b43 	vmovmi.f64	d4, d3
 8018e78:	ee37 3b04 	vadd.f64	d3, d7, d4
 8018e7c:	ee34 5b43 	vsub.f64	d5, d4, d3
 8018e80:	ee35 7b07 	vadd.f64	d7, d5, d7
 8018e84:	ee37 7b06 	vadd.f64	d7, d7, d6
 8018e88:	ee37 7b03 	vadd.f64	d7, d7, d3
 8018e8c:	ee37 7b44 	vsub.f64	d7, d7, d4
 8018e90:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e98:	d104      	bne.n	8018ea4 <pow+0x454>
 8018e9a:	4632      	mov	r2, r6
 8018e9c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8018ea0:	ec43 2b17 	vmov	d7, r2, r3
 8018ea4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8018ea8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8018eac:	ee26 6b00 	vmul.f64	d6, d6, d0
 8018eb0:	ed8d 6b04 	vstr	d6, [sp, #16]
 8018eb4:	ee27 0b00 	vmul.f64	d0, d7, d0
 8018eb8:	b006      	add	sp, #24
 8018eba:	ecbd 8b0a 	vpop	{d8-d12}
 8018ebe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ec2:	f000 b890 	b.w	8018fe6 <__math_check_uflow>
 8018ec6:	ec43 2b10 	vmov	d0, r2, r3
 8018eca:	eea7 0b00 	vfma.f64	d0, d7, d0
 8018ece:	e628      	b.n	8018b22 <pow+0xd2>
 8018ed0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8018ee8 <pow+0x498>
 8018ed4:	e625      	b.n	8018b22 <pow+0xd2>
 8018ed6:	bf00      	nop
 8018ed8:	00000000 	.word	0x00000000
 8018edc:	7f000000 	.word	0x7f000000
 8018ee0:	00000000 	.word	0x00000000
 8018ee4:	00100000 	.word	0x00100000
	...
 8018ef0:	0801a908 	.word	0x0801a908
 8018ef4:	00000000 	.word	0x00000000

08018ef8 <sqrt>:
 8018ef8:	b508      	push	{r3, lr}
 8018efa:	ed2d 8b04 	vpush	{d8-d9}
 8018efe:	eeb0 8b40 	vmov.f64	d8, d0
 8018f02:	f000 f819 	bl	8018f38 <__ieee754_sqrt>
 8018f06:	eeb4 8b48 	vcmp.f64	d8, d8
 8018f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f0e:	d60c      	bvs.n	8018f2a <sqrt+0x32>
 8018f10:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8018f30 <sqrt+0x38>
 8018f14:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8018f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f1c:	d505      	bpl.n	8018f2a <sqrt+0x32>
 8018f1e:	f7fd fb45 	bl	80165ac <__errno>
 8018f22:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8018f26:	2321      	movs	r3, #33	; 0x21
 8018f28:	6003      	str	r3, [r0, #0]
 8018f2a:	ecbd 8b04 	vpop	{d8-d9}
 8018f2e:	bd08      	pop	{r3, pc}
	...

08018f38 <__ieee754_sqrt>:
 8018f38:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8018f3c:	4770      	bx	lr

08018f3e <with_errno>:
 8018f3e:	b513      	push	{r0, r1, r4, lr}
 8018f40:	4604      	mov	r4, r0
 8018f42:	ed8d 0b00 	vstr	d0, [sp]
 8018f46:	f7fd fb31 	bl	80165ac <__errno>
 8018f4a:	ed9d 0b00 	vldr	d0, [sp]
 8018f4e:	6004      	str	r4, [r0, #0]
 8018f50:	b002      	add	sp, #8
 8018f52:	bd10      	pop	{r4, pc}

08018f54 <xflow>:
 8018f54:	b082      	sub	sp, #8
 8018f56:	b158      	cbz	r0, 8018f70 <xflow+0x1c>
 8018f58:	eeb1 7b40 	vneg.f64	d7, d0
 8018f5c:	ed8d 7b00 	vstr	d7, [sp]
 8018f60:	ed9d 7b00 	vldr	d7, [sp]
 8018f64:	2022      	movs	r0, #34	; 0x22
 8018f66:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018f6a:	b002      	add	sp, #8
 8018f6c:	f7ff bfe7 	b.w	8018f3e <with_errno>
 8018f70:	eeb0 7b40 	vmov.f64	d7, d0
 8018f74:	e7f2      	b.n	8018f5c <xflow+0x8>
	...

08018f78 <__math_uflow>:
 8018f78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018f80 <__math_uflow+0x8>
 8018f7c:	f7ff bfea 	b.w	8018f54 <xflow>
 8018f80:	00000000 	.word	0x00000000
 8018f84:	10000000 	.word	0x10000000

08018f88 <__math_oflow>:
 8018f88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018f90 <__math_oflow+0x8>
 8018f8c:	f7ff bfe2 	b.w	8018f54 <xflow>
 8018f90:	00000000 	.word	0x00000000
 8018f94:	70000000 	.word	0x70000000

08018f98 <__math_divzero>:
 8018f98:	b082      	sub	sp, #8
 8018f9a:	2800      	cmp	r0, #0
 8018f9c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8018fa0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8018fa4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8018fa8:	ed8d 7b00 	vstr	d7, [sp]
 8018fac:	ed9d 0b00 	vldr	d0, [sp]
 8018fb0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8018fc0 <__math_divzero+0x28>
 8018fb4:	2022      	movs	r0, #34	; 0x22
 8018fb6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8018fba:	b002      	add	sp, #8
 8018fbc:	f7ff bfbf 	b.w	8018f3e <with_errno>
	...

08018fc8 <__math_invalid>:
 8018fc8:	eeb0 7b40 	vmov.f64	d7, d0
 8018fcc:	eeb4 7b47 	vcmp.f64	d7, d7
 8018fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fd4:	ee30 6b40 	vsub.f64	d6, d0, d0
 8018fd8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8018fdc:	d602      	bvs.n	8018fe4 <__math_invalid+0x1c>
 8018fde:	2021      	movs	r0, #33	; 0x21
 8018fe0:	f7ff bfad 	b.w	8018f3e <with_errno>
 8018fe4:	4770      	bx	lr

08018fe6 <__math_check_uflow>:
 8018fe6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8018fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fee:	d102      	bne.n	8018ff6 <__math_check_uflow+0x10>
 8018ff0:	2022      	movs	r0, #34	; 0x22
 8018ff2:	f7ff bfa4 	b.w	8018f3e <with_errno>
 8018ff6:	4770      	bx	lr

08018ff8 <__math_check_oflow>:
 8018ff8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8019018 <__math_check_oflow+0x20>
 8018ffc:	eeb0 7bc0 	vabs.f64	d7, d0
 8019000:	eeb4 7b46 	vcmp.f64	d7, d6
 8019004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019008:	dd02      	ble.n	8019010 <__math_check_oflow+0x18>
 801900a:	2022      	movs	r0, #34	; 0x22
 801900c:	f7ff bf97 	b.w	8018f3e <with_errno>
 8019010:	4770      	bx	lr
 8019012:	bf00      	nop
 8019014:	f3af 8000 	nop.w
 8019018:	ffffffff 	.word	0xffffffff
 801901c:	7fefffff 	.word	0x7fefffff

08019020 <_close>:
 8019020:	4b02      	ldr	r3, [pc, #8]	; (801902c <_close+0xc>)
 8019022:	2258      	movs	r2, #88	; 0x58
 8019024:	601a      	str	r2, [r3, #0]
 8019026:	f04f 30ff 	mov.w	r0, #4294967295
 801902a:	4770      	bx	lr
 801902c:	20006638 	.word	0x20006638

08019030 <_fstat>:
 8019030:	4b02      	ldr	r3, [pc, #8]	; (801903c <_fstat+0xc>)
 8019032:	2258      	movs	r2, #88	; 0x58
 8019034:	601a      	str	r2, [r3, #0]
 8019036:	f04f 30ff 	mov.w	r0, #4294967295
 801903a:	4770      	bx	lr
 801903c:	20006638 	.word	0x20006638

08019040 <_getpid>:
 8019040:	4b02      	ldr	r3, [pc, #8]	; (801904c <_getpid+0xc>)
 8019042:	2258      	movs	r2, #88	; 0x58
 8019044:	601a      	str	r2, [r3, #0]
 8019046:	f04f 30ff 	mov.w	r0, #4294967295
 801904a:	4770      	bx	lr
 801904c:	20006638 	.word	0x20006638

08019050 <_isatty>:
 8019050:	4b02      	ldr	r3, [pc, #8]	; (801905c <_isatty+0xc>)
 8019052:	2258      	movs	r2, #88	; 0x58
 8019054:	601a      	str	r2, [r3, #0]
 8019056:	2000      	movs	r0, #0
 8019058:	4770      	bx	lr
 801905a:	bf00      	nop
 801905c:	20006638 	.word	0x20006638

08019060 <_kill>:
 8019060:	4b02      	ldr	r3, [pc, #8]	; (801906c <_kill+0xc>)
 8019062:	2258      	movs	r2, #88	; 0x58
 8019064:	601a      	str	r2, [r3, #0]
 8019066:	f04f 30ff 	mov.w	r0, #4294967295
 801906a:	4770      	bx	lr
 801906c:	20006638 	.word	0x20006638

08019070 <_lseek>:
 8019070:	4b02      	ldr	r3, [pc, #8]	; (801907c <_lseek+0xc>)
 8019072:	2258      	movs	r2, #88	; 0x58
 8019074:	601a      	str	r2, [r3, #0]
 8019076:	f04f 30ff 	mov.w	r0, #4294967295
 801907a:	4770      	bx	lr
 801907c:	20006638 	.word	0x20006638

08019080 <_read>:
 8019080:	4b02      	ldr	r3, [pc, #8]	; (801908c <_read+0xc>)
 8019082:	2258      	movs	r2, #88	; 0x58
 8019084:	601a      	str	r2, [r3, #0]
 8019086:	f04f 30ff 	mov.w	r0, #4294967295
 801908a:	4770      	bx	lr
 801908c:	20006638 	.word	0x20006638

08019090 <_sbrk>:
 8019090:	4a04      	ldr	r2, [pc, #16]	; (80190a4 <_sbrk+0x14>)
 8019092:	6811      	ldr	r1, [r2, #0]
 8019094:	4603      	mov	r3, r0
 8019096:	b909      	cbnz	r1, 801909c <_sbrk+0xc>
 8019098:	4903      	ldr	r1, [pc, #12]	; (80190a8 <_sbrk+0x18>)
 801909a:	6011      	str	r1, [r2, #0]
 801909c:	6810      	ldr	r0, [r2, #0]
 801909e:	4403      	add	r3, r0
 80190a0:	6013      	str	r3, [r2, #0]
 80190a2:	4770      	bx	lr
 80190a4:	2000663c 	.word	0x2000663c
 80190a8:	20006640 	.word	0x20006640

080190ac <_exit>:
 80190ac:	e7fe      	b.n	80190ac <_exit>
	...

080190b0 <_init>:
 80190b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190b2:	bf00      	nop
 80190b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80190b6:	bc08      	pop	{r3}
 80190b8:	469e      	mov	lr, r3
 80190ba:	4770      	bx	lr

080190bc <_fini>:
 80190bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190be:	bf00      	nop
 80190c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80190c2:	bc08      	pop	{r3}
 80190c4:	469e      	mov	lr, r3
 80190c6:	4770      	bx	lr
