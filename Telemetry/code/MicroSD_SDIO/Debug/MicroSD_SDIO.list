
MicroSD_SDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018db8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020a8  08018fb8  08018fb8  00028fb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b060  0801b060  00030e68  2**0
                  CONTENTS
  4 .ARM          00000008  0801b060  0801b060  0002b060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b068  0801b068  00030e68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801b068  0801b068  0002b068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b070  0801b070  0002b070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000e68  20000000  0801b074  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000057d8  20000e68  0801bedc  00030e68  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006640  0801bedc  00036640  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030e68  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ed04  00000000  00000000  00030e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000601e  00000000  00000000  0005fb9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002070  00000000  00000000  00065bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001dc8  00000000  00000000  00067c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030143  00000000  00000000  000699f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002dd8d  00000000  00000000  00099b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113823  00000000  00000000  000c78c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001db0e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d90  00000000  00000000  001db134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000b4  00000000  00000000  001e4ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  001e4f78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000e68 	.word	0x20000e68
 800021c:	00000000 	.word	0x00000000
 8000220:	08018fa0 	.word	0x08018fa0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000e6c 	.word	0x20000e6c
 800023c:	08018fa0 	.word	0x08018fa0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MLX90640_DumpEE>:
int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2);  
float GetMedian(float *values, int n);
int IsPixelBad(uint16_t pixel,paramsMLX90640 *params);
  
int MLX90640_DumpEE(uint8_t slaveAddr, uint16_t *eeData,I2C_HandleTypeDef * i2c)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af02      	add	r7, sp, #8
 80005fa:	4603      	mov	r3, r0
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
 8000600:	73fb      	strb	r3, [r7, #15]
     return MLX90640_I2CRead(slaveAddr, 0x2400, 832, eeData,i2c);
 8000602:	7bf8      	ldrb	r0, [r7, #15]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	f44f 7250 	mov.w	r2, #832	; 0x340
 800060e:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8000612:	f002 fdad 	bl	8003170 <MLX90640_I2CRead>
 8000616:	4603      	mov	r3, r0
}
 8000618:	4618      	mov	r0, r3
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <MLX90640_GetFrameData>:

int MLX90640_GetFrameData(uint8_t slaveAddr, uint16_t *frameData,I2C_HandleTypeDef * i2c)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b0aa      	sub	sp, #168	; 0xa8
 8000624:	af02      	add	r7, sp, #8
 8000626:	4603      	mov	r3, r0
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
 800062c:	73fb      	strb	r3, [r7, #15]
    uint16_t dataReady = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    uint16_t controlRegister1;
    uint16_t statusRegister;
    int error = 1;
 8000634:	2301      	movs	r3, #1
 8000636:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    uint16_t data[64];
    uint8_t cnt = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
    
    while(dataReady == 0)
 8000640:	e019      	b.n	8000676 <MLX90640_GetFrameData+0x56>
    {
        error = MLX90640_I2CRead(slaveAddr, 0x8000, 1, &statusRegister,i2c);
 8000642:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8000646:	7bf8      	ldrb	r0, [r7, #15]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	4613      	mov	r3, r2
 800064e:	2201      	movs	r2, #1
 8000650:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000654:	f002 fd8c 	bl	8003170 <MLX90640_I2CRead>
 8000658:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        if(error != 0)
 800065c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <MLX90640_GetFrameData+0x4a>
        {
            return error;
 8000664:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000668:	e090      	b.n	800078c <MLX90640_GetFrameData+0x16c>
        }    
        dataReady = statusRegister & 0x0008;
 800066a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800066e:	f003 0308 	and.w	r3, r3, #8
 8000672:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while(dataReady == 0)
 8000676:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800067a:	2b00      	cmp	r3, #0
 800067c:	d0e1      	beq.n	8000642 <MLX90640_GetFrameData+0x22>
    }

    error = MLX90640_I2CWrite(slaveAddr, 0x8000, 0x0030,i2c);
 800067e:	7bf8      	ldrb	r0, [r7, #15]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2230      	movs	r2, #48	; 0x30
 8000684:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000688:	f002 fdc2 	bl	8003210 <MLX90640_I2CWrite>
 800068c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    if(error == -1)
 8000690:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000698:	d102      	bne.n	80006a0 <MLX90640_GetFrameData+0x80>
    {
        return error;
 800069a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800069e:	e075      	b.n	800078c <MLX90640_GetFrameData+0x16c>
    }

    error = MLX90640_I2CRead(slaveAddr, 0x0400, 768, frameData,i2c);
 80006a0:	7bf8      	ldrb	r0, [r7, #15]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80006ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b0:	f002 fd5e 	bl	8003170 <MLX90640_I2CRead>
 80006b4:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    if(error != 0)
 80006b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d002      	beq.n	80006c6 <MLX90640_GetFrameData+0xa6>
    {
        return error;
 80006c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80006c4:	e062      	b.n	800078c <MLX90640_GetFrameData+0x16c>
    }
    
    error = MLX90640_I2CRead(slaveAddr, 0x0700, 64, data,i2c);
 80006c6:	f107 0214 	add.w	r2, r7, #20
 80006ca:	7bf8      	ldrb	r0, [r7, #15]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	4613      	mov	r3, r2
 80006d2:	2240      	movs	r2, #64	; 0x40
 80006d4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80006d8:	f002 fd4a 	bl	8003170 <MLX90640_I2CRead>
 80006dc:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    if(error != 0)
 80006e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d002      	beq.n	80006ee <MLX90640_GetFrameData+0xce>
    {
        return error;
 80006e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80006ec:	e04e      	b.n	800078c <MLX90640_GetFrameData+0x16c>
    }

    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1,i2c);
 80006ee:	f107 0296 	add.w	r2, r7, #150	; 0x96
 80006f2:	7bf8      	ldrb	r0, [r7, #15]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	9300      	str	r3, [sp, #0]
 80006f8:	4613      	mov	r3, r2
 80006fa:	2201      	movs	r2, #1
 80006fc:	f248 010d 	movw	r1, #32781	; 0x800d
 8000700:	f002 fd36 	bl	8003170 <MLX90640_I2CRead>
 8000704:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    frameData[832] = controlRegister1;
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 800070e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8000712:	801a      	strh	r2, [r3, #0]
    frameData[833] = statusRegister & 0x0001;
 8000714:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	f203 6382 	addw	r3, r3, #1666	; 0x682
 800071e:	f002 0201 	and.w	r2, r2, #1
 8000722:	b292      	uxth	r2, r2
 8000724:	801a      	strh	r2, [r3, #0]

    if(error != 0)
 8000726:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800072a:	2b00      	cmp	r3, #0
 800072c:	d002      	beq.n	8000734 <MLX90640_GetFrameData+0x114>
    {
        return error;
 800072e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000732:	e02b      	b.n	800078c <MLX90640_GetFrameData+0x16c>
    }
    
    //error = ValidateAuxData(data);
    if(error == 0)
 8000734:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000738:	2b00      	cmp	r3, #0
 800073a:	d11b      	bne.n	8000774 <MLX90640_GetFrameData+0x154>
    {
        for(cnt=0; cnt<64; cnt++)
 800073c:	2300      	movs	r3, #0
 800073e:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 8000742:	e013      	b.n	800076c <MLX90640_GetFrameData+0x14c>
        {
            frameData[cnt+768] = data[cnt];
 8000744:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8000748:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 800074c:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8000750:	0052      	lsls	r2, r2, #1
 8000752:	68b9      	ldr	r1, [r7, #8]
 8000754:	440a      	add	r2, r1
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	33a0      	adds	r3, #160	; 0xa0
 800075a:	443b      	add	r3, r7
 800075c:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 8000760:	8013      	strh	r3, [r2, #0]
        for(cnt=0; cnt<64; cnt++)
 8000762:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8000766:	3301      	adds	r3, #1
 8000768:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 800076c:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8000770:	2b3f      	cmp	r3, #63	; 0x3f
 8000772:	d9e7      	bls.n	8000744 <MLX90640_GetFrameData+0x124>
        }
    }


    printf("%d \n", frameData[833]);
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	f203 6382 	addw	r3, r3, #1666	; 0x682
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	4619      	mov	r1, r3
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MLX90640_GetFrameData+0x174>)
 8000780:	f012 fb4a 	bl	8012e18 <printf>
    return frameData[833];    
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	f203 6382 	addw	r3, r3, #1666	; 0x682
 800078a:	881b      	ldrh	r3, [r3, #0]
}
 800078c:	4618      	mov	r0, r3
 800078e:	37a0      	adds	r7, #160	; 0xa0
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	08018fb8 	.word	0x08018fb8

08000798 <MLX90640_ExtractParameters>:

int MLX90640_ExtractParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
    int error = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
    
    ExtractVDDParameters(eeData, mlx90640);
 80007a6:	6839      	ldr	r1, [r7, #0]
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f000 fddf 	bl	800136c <ExtractVDDParameters>
    ExtractPTATParameters(eeData, mlx90640);
 80007ae:	6839      	ldr	r1, [r7, #0]
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f000 fe15 	bl	80013e0 <ExtractPTATParameters>
    ExtractGainParameters(eeData, mlx90640);
 80007b6:	6839      	ldr	r1, [r7, #0]
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f000 fe95 	bl	80014e8 <ExtractGainParameters>
    ExtractTgcParameters(eeData, mlx90640);
 80007be:	6839      	ldr	r1, [r7, #0]
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f000 fea3 	bl	800150c <ExtractTgcParameters>
    ExtractResolutionParameters(eeData, mlx90640);
 80007c6:	6839      	ldr	r1, [r7, #0]
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f000 fed7 	bl	800157c <ExtractResolutionParameters>
    ExtractKsTaParameters(eeData, mlx90640);
 80007ce:	6839      	ldr	r1, [r7, #0]
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f000 feeb 	bl	80015ac <ExtractKsTaParameters>
    ExtractKsToParameters(eeData, mlx90640);
 80007d6:	6839      	ldr	r1, [r7, #0]
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f000 ff1f 	bl	800161c <ExtractKsToParameters>
    ExtractCPParameters(eeData, mlx90640);
 80007de:	6839      	ldr	r1, [r7, #0]
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f002 f9b5 	bl	8002b50 <ExtractCPParameters>
    ExtractAlphaParameters(eeData, mlx90640);
 80007e6:	6839      	ldr	r1, [r7, #0]
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f000 fffd 	bl	80017e8 <ExtractAlphaParameters>
    ExtractOffsetParameters(eeData, mlx90640);
 80007ee:	6839      	ldr	r1, [r7, #0]
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f001 fb57 	bl	8001ea4 <ExtractOffsetParameters>
    ExtractKtaPixelParameters(eeData, mlx90640);
 80007f6:	6839      	ldr	r1, [r7, #0]
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f001 fd8d 	bl	8002318 <ExtractKtaPixelParameters>
    ExtractKvPixelParameters(eeData, mlx90640);
 80007fe:	6839      	ldr	r1, [r7, #0]
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f001 ffbd 	bl	8002780 <ExtractKvPixelParameters>
    ExtractCILCParameters(eeData, mlx90640);
 8000806:	6839      	ldr	r1, [r7, #0]
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f002 fae5 	bl	8002dd8 <ExtractCILCParameters>
    error = ExtractDeviatingPixels(eeData, mlx90640);  
 800080e:	6839      	ldr	r1, [r7, #0]
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f002 fb81 	bl	8002f18 <ExtractDeviatingPixels>
 8000816:	60f8      	str	r0, [r7, #12]
    
    return error;
 8000818:	68fb      	ldr	r3, [r7, #12]

}
 800081a:	4618      	mov	r0, r3
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <MLX90640_SetRefreshRate>:
}

//------------------------------------------------------------------------------

int MLX90640_SetRefreshRate(uint8_t slaveAddr, uint8_t refreshRate,I2C_HandleTypeDef * i2c)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b088      	sub	sp, #32
 8000826:	af02      	add	r7, sp, #8
 8000828:	4603      	mov	r3, r0
 800082a:	603a      	str	r2, [r7, #0]
 800082c:	71fb      	strb	r3, [r7, #7]
 800082e:	460b      	mov	r3, r1
 8000830:	71bb      	strb	r3, [r7, #6]
    uint16_t controlRegister1;
    int value;
    int error;
    
    value = (refreshRate & 0x07)<<7;
 8000832:	79bb      	ldrb	r3, [r7, #6]
 8000834:	01db      	lsls	r3, r3, #7
 8000836:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800083a:	613b      	str	r3, [r7, #16]
    
    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1,i2c);
 800083c:	f107 020e 	add.w	r2, r7, #14
 8000840:	79f8      	ldrb	r0, [r7, #7]
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	4613      	mov	r3, r2
 8000848:	2201      	movs	r2, #1
 800084a:	f248 010d 	movw	r1, #32781	; 0x800d
 800084e:	f002 fc8f 	bl	8003170 <MLX90640_I2CRead>
 8000852:	6178      	str	r0, [r7, #20]
    if(error == 0)
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d110      	bne.n	800087c <MLX90640_SetRefreshRate+0x5a>
    {
        value = (controlRegister1 & 0xFC7F) | value;
 800085a:	89fb      	ldrh	r3, [r7, #14]
 800085c:	461a      	mov	r2, r3
 800085e:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 8000862:	4013      	ands	r3, r2
 8000864:	693a      	ldr	r2, [r7, #16]
 8000866:	4313      	orrs	r3, r2
 8000868:	613b      	str	r3, [r7, #16]
        error = MLX90640_I2CWrite(slaveAddr, 0x800D, value,i2c);
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	b29a      	uxth	r2, r3
 800086e:	79f8      	ldrb	r0, [r7, #7]
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	f248 010d 	movw	r1, #32781	; 0x800d
 8000876:	f002 fccb 	bl	8003210 <MLX90640_I2CWrite>
 800087a:	6178      	str	r0, [r7, #20]
    }    
    
    return error;
 800087c:	697b      	ldr	r3, [r7, #20]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <MLX90640_SetChessMode>:
}

//------------------------------------------------------------------------------

int MLX90640_SetChessMode(uint8_t slaveAddr,I2C_HandleTypeDef * i2c)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b088      	sub	sp, #32
 800088a:	af02      	add	r7, sp, #8
 800088c:	4603      	mov	r3, r0
 800088e:	6039      	str	r1, [r7, #0]
 8000890:	71fb      	strb	r3, [r7, #7]
    uint16_t controlRegister1;
    int value;
    int error;
        
    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1,i2c);
 8000892:	f107 020e 	add.w	r2, r7, #14
 8000896:	79f8      	ldrb	r0, [r7, #7]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	4613      	mov	r3, r2
 800089e:	2201      	movs	r2, #1
 80008a0:	f248 010d 	movw	r1, #32781	; 0x800d
 80008a4:	f002 fc64 	bl	8003170 <MLX90640_I2CRead>
 80008a8:	6178      	str	r0, [r7, #20]
    
    if(error == 0)
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d10d      	bne.n	80008cc <MLX90640_SetChessMode+0x46>
    {
        value = (controlRegister1 | 0x1000);
 80008b0:	89fb      	ldrh	r3, [r7, #14]
 80008b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	613b      	str	r3, [r7, #16]
        error = MLX90640_I2CWrite(slaveAddr, 0x800D, value,i2c);
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	b29a      	uxth	r2, r3
 80008be:	79f8      	ldrb	r0, [r7, #7]
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	f248 010d 	movw	r1, #32781	; 0x800d
 80008c6:	f002 fca3 	bl	8003210 <MLX90640_I2CWrite>
 80008ca:	6178      	str	r0, [r7, #20]
    }    
    
    return error;
 80008cc:	697b      	ldr	r3, [r7, #20]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <MLX90640_CalculateTo>:
}

//------------------------------------------------------------------------------

void MLX90640_CalculateTo(uint16_t *frameData, const paramsMLX90640 *params, float emissivity, float tr, float *result)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b0a0      	sub	sp, #128	; 0x80
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6178      	str	r0, [r7, #20]
 80008e0:	6139      	str	r1, [r7, #16]
 80008e2:	ed87 0a03 	vstr	s0, [r7, #12]
 80008e6:	edc7 0a02 	vstr	s1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
    float kvScale;
    float alphaScale;
    float kta;
    float kv;
    
    subPage = frameData[833];
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	f8b3 3682 	ldrh.w	r3, [r3, #1666]	; 0x682
 80008f2:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    vdd = MLX90640_GetVdd(frameData, params);
 80008f6:	6939      	ldr	r1, [r7, #16]
 80008f8:	6978      	ldr	r0, [r7, #20]
 80008fa:	f000 fc2d 	bl	8001158 <MLX90640_GetVdd>
 80008fe:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
    ta = MLX90640_GetTa(frameData, params);
 8000902:	6939      	ldr	r1, [r7, #16]
 8000904:	6978      	ldr	r0, [r7, #20]
 8000906:	f000 fca1 	bl	800124c <MLX90640_GetTa>
 800090a:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
    
    ta4 = (ta + 273.15f);
 800090e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000912:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 8000c60 <MLX90640_CalculateTo+0x388>
 8000916:	ee77 7a87 	vadd.f32	s15, s15, s14
 800091a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    ta4 = ta4 * ta4;
 800091e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000922:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000926:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    ta4 = ta4 * ta4;
 800092a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800092e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000932:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    tr4 = (tr + 273.15f);
 8000936:	edd7 7a02 	vldr	s15, [r7, #8]
 800093a:	ed9f 7ac9 	vldr	s14, [pc, #804]	; 8000c60 <MLX90640_CalculateTo+0x388>
 800093e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000942:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    tr4 = tr4 * tr4;
 8000946:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800094a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800094e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    tr4 = tr4 * tr4;
 8000952:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8000956:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800095a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    taTr = tr4 - (tr4-ta4)/emissivity;
 800095e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000962:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000966:	ee77 6a67 	vsub.f32	s13, s14, s15
 800096a:	ed97 7a03 	vldr	s14, [r7, #12]
 800096e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000972:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000976:	ee77 7a67 	vsub.f32	s15, s14, s15
 800097a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    
    ktaScale = pow(2,(double)params->ktaScale);
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	f893 3f4c 	ldrb.w	r3, [r3, #3916]	; 0xf4c
 8000984:	ee07 3a90 	vmov	s15, r3
 8000988:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800098c:	eeb0 1b47 	vmov.f64	d1, d7
 8000990:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8000994:	f017 ffd4 	bl	8018940 <pow>
 8000998:	eeb0 7b40 	vmov.f64	d7, d0
 800099c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009a0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    kvScale = pow(2,(double)params->kvScale);
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009aa:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
 80009ae:	ee07 3a90 	vmov	s15, r3
 80009b2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80009b6:	eeb0 1b47 	vmov.f64	d1, d7
 80009ba:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80009be:	f017 ffbf 	bl	8018940 <pow>
 80009c2:	eeb0 7b40 	vmov.f64	d7, d0
 80009c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009ca:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    alphaScale = pow(2,(double)params->alphaScale);
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	f893 364a 	ldrb.w	r3, [r3, #1610]	; 0x64a
 80009d4:	ee07 3a90 	vmov	s15, r3
 80009d8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80009dc:	eeb0 1b47 	vmov.f64	d1, d7
 80009e0:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80009e4:	f017 ffac 	bl	8018940 <pow>
 80009e8:	eeb0 7b40 	vmov.f64	d7, d0
 80009ec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009f0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    
    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80009fa:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8000c4c <MLX90640_CalculateTo+0x374>
 80009fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000a0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a12:	edc7 7a06 	vstr	s15, [r7, #24]
    alphaCorrR[1] = 1 ;
 8000a16:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000a1a:	61fb      	str	r3, [r7, #28]
    alphaCorrR[2] = (1 + params->ksTo[1] * params->ct[2]);
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8000a28:	ee07 3a90 	vmov	s15, r3
 8000a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a3c:	edc7 7a08 	vstr	s15, [r7, #32]
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
 8000a40:	ed97 7a08 	vldr	s14, [r7, #32]
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8000a50:	461a      	mov	r2, r3
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	ee07 3a90 	vmov	s15, r3
 8000a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a72:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
//------------------------- Gain calculation -----------------------------------    
    gain = frameData[778];
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	f203 6314 	addw	r3, r3, #1556	; 0x614
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	ee07 3a90 	vmov	s15, r3
 8000a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a86:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    if(gain > 32767)
 8000a8a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8000a8e:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8000c50 <MLX90640_CalculateTo+0x378>
 8000a92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a9a:	dd07      	ble.n	8000aac <MLX90640_CalculateTo+0x1d4>
    {
        gain = gain - 65536;
 8000a9c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8000aa0:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8000c54 <MLX90640_CalculateTo+0x37c>
 8000aa4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000aa8:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    }
    
    gain = params->gainEE / gain; 
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000ab2:	ee07 3a90 	vmov	s15, r3
 8000ab6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000aba:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8000abe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ac2:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
  
//------------------------- To calculation -------------------------------------    
    mode = (frameData[832] & 0x1000) >> 5;
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	115b      	asrs	r3, r3, #5
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000ad6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
    irDataCP[0] = frameData[776];  
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	ee07 3a90 	vmov	s15, r3
 8000ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000aea:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    irDataCP[1] = frameData[808];
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	ee07 3a90 	vmov	s15, r3
 8000afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000afe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for( int i = 0; i < 2; i++)
 8000b02:	2300      	movs	r3, #0
 8000b04:	673b      	str	r3, [r7, #112]	; 0x70
 8000b06:	e034      	b.n	8000b72 <MLX90640_CalculateTo+0x29a>
    {
        if(irDataCP[i] > 32767)
 8000b08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	3380      	adds	r3, #128	; 0x80
 8000b0e:	443b      	add	r3, r7
 8000b10:	3b58      	subs	r3, #88	; 0x58
 8000b12:	edd3 7a00 	vldr	s15, [r3]
 8000b16:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8000c50 <MLX90640_CalculateTo+0x378>
 8000b1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b22:	dd11      	ble.n	8000b48 <MLX90640_CalculateTo+0x270>
        {
            irDataCP[i] = irDataCP[i] - 65536;
 8000b24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	3380      	adds	r3, #128	; 0x80
 8000b2a:	443b      	add	r3, r7
 8000b2c:	3b58      	subs	r3, #88	; 0x58
 8000b2e:	edd3 7a00 	vldr	s15, [r3]
 8000b32:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8000c54 <MLX90640_CalculateTo+0x37c>
 8000b36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	3380      	adds	r3, #128	; 0x80
 8000b40:	443b      	add	r3, r7
 8000b42:	3b58      	subs	r3, #88	; 0x58
 8000b44:	edc3 7a00 	vstr	s15, [r3]
        }
        irDataCP[i] = irDataCP[i] * gain;
 8000b48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	3380      	adds	r3, #128	; 0x80
 8000b4e:	443b      	add	r3, r7
 8000b50:	3b58      	subs	r3, #88	; 0x58
 8000b52:	ed93 7a00 	vldr	s14, [r3]
 8000b56:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8000b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	3380      	adds	r3, #128	; 0x80
 8000b64:	443b      	add	r3, r7
 8000b66:	3b58      	subs	r3, #88	; 0x58
 8000b68:	edc3 7a00 	vstr	s15, [r3]
    for( int i = 0; i < 2; i++)
 8000b6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b6e:	3301      	adds	r3, #1
 8000b70:	673b      	str	r3, [r7, #112]	; 0x70
 8000b72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	ddc7      	ble.n	8000b08 <MLX90640_CalculateTo+0x230>
    }
    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 8000b78:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b82:	f9b3 3258 	ldrsh.w	r3, [r3, #600]	; 0x258
 8000b86:	ee07 3a90 	vmov	s15, r3
 8000b8a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	ed93 6a08 	vldr	s12, [r3, #32]
 8000b94:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000b98:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 8000b9c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8000ba0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000ba4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000ba8:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000bac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	ed93 6a07 	vldr	s12, [r3, #28]
 8000bb6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000bba:	eddf 5a27 	vldr	s11, [pc, #156]	; 8000c58 <MLX90640_CalculateTo+0x380>
 8000bbe:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8000bc2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000bc6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000bca:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000bce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bd6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    if( mode ==  params->calibrationModeEE)
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000be0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d13d      	bne.n	8000c64 <MLX90640_CalculateTo+0x38c>
    {
        irDataCP[1] = irDataCP[1] - params->cpOffset[1] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 8000be8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000bf2:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	; 0x25a
 8000bf6:	ee07 3a90 	vmov	s15, r3
 8000bfa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	ed93 6a08 	vldr	s12, [r3, #32]
 8000c04:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000c08:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 8000c0c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8000c10:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000c14:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000c18:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000c1c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	ed93 6a07 	vldr	s12, [r3, #28]
 8000c26:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000c2a:	eddf 5a0b 	vldr	s11, [pc, #44]	; 8000c58 <MLX90640_CalculateTo+0x380>
 8000c2e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8000c32:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000c36:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000c3a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000c3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c46:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8000c4a:	e043      	b.n	8000cd4 <MLX90640_CalculateTo+0x3fc>
 8000c4c:	42200000 	.word	0x42200000
 8000c50:	46fffe00 	.word	0x46fffe00
 8000c54:	47800000 	.word	0x47800000
 8000c58:	40533333 	.word	0x40533333
 8000c5c:	358637bd 	.word	0x358637bd
 8000c60:	43889333 	.word	0x43889333
    }
    else
    {
      irDataCP[1] = irDataCP[1] - (params->cpOffset[1] + params->ilChessC[0]) * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 8000c64:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c6e:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	; 0x25a
 8000c72:	ee07 3a90 	vmov	s15, r3
 8000c76:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c80:	edd3 7a97 	vldr	s15, [r3, #604]	; 0x25c
 8000c84:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	ed93 6a08 	vldr	s12, [r3, #32]
 8000c8e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000c92:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 8000c96:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8000c9a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000c9e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000ca2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000ca6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	ed93 6a07 	vldr	s12, [r3, #28]
 8000cb0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000cb4:	ed5f 5a18 	vldr	s11, [pc, #-96]	; 8000c58 <MLX90640_CalculateTo+0x380>
 8000cb8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8000cbc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000cc0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000cc4:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000cc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cd0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }

    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000cd8:	e230      	b.n	800113c <MLX90640_CalculateTo+0x864>
    {
        ilPattern = pixelNumber / 32 - (pixelNumber / 64) * 2; 
 8000cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	da00      	bge.n	8000ce2 <MLX90640_CalculateTo+0x40a>
 8000ce0:	331f      	adds	r3, #31
 8000ce2:	115b      	asrs	r3, r3, #5
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	da00      	bge.n	8000cee <MLX90640_CalculateTo+0x416>
 8000cec:	333f      	adds	r3, #63	; 0x3f
 8000cee:	119b      	asrs	r3, r3, #6
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
        chessPattern = ilPattern ^ (pixelNumber - (pixelNumber/2)*2); 
 8000cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	bfb8      	it	lt
 8000d08:	425b      	neglt	r3, r3
 8000d0a:	b25a      	sxtb	r2, r3
 8000d0c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000d10:	4053      	eors	r3, r2
 8000d12:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
 8000d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d18:	3302      	adds	r3, #2
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	da00      	bge.n	8000d20 <MLX90640_CalculateTo+0x448>
 8000d1e:	3303      	adds	r3, #3
 8000d20:	109b      	asrs	r3, r3, #2
 8000d22:	461a      	mov	r2, r3
 8000d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d26:	3303      	adds	r3, #3
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	da00      	bge.n	8000d2e <MLX90640_CalculateTo+0x456>
 8000d2c:	3303      	adds	r3, #3
 8000d2e:	109b      	asrs	r3, r3, #2
 8000d30:	425b      	negs	r3, r3
 8000d32:	441a      	add	r2, r3
 8000d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d36:	3301      	adds	r3, #1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	da00      	bge.n	8000d3e <MLX90640_CalculateTo+0x466>
 8000d3c:	3303      	adds	r3, #3
 8000d3e:	109b      	asrs	r3, r3, #2
 8000d40:	441a      	add	r2, r3
 8000d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	da00      	bge.n	8000d4a <MLX90640_CalculateTo+0x472>
 8000d48:	3303      	adds	r3, #3
 8000d4a:	109b      	asrs	r3, r3, #2
 8000d4c:	425b      	negs	r3, r3
 8000d4e:	4413      	add	r3, r2
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	f997 3046 	ldrsb.w	r3, [r7, #70]	; 0x46
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	f1c3 0301 	rsb	r3, r3, #1
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	fb12 f303 	smulbb	r3, r2, r3
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        
        if(mode == 0)
 8000d68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d104      	bne.n	8000d7a <MLX90640_CalculateTo+0x4a2>
        {
          pattern = ilPattern; 
 8000d70:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000d74:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8000d78:	e003      	b.n	8000d82 <MLX90640_CalculateTo+0x4aa>
        }
        else 
        {
          pattern = chessPattern; 
 8000d7a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000d7e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
        }               
        
        if(pattern == frameData[833])
 8000d82:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	f202 6282 	addw	r2, r2, #1666	; 0x682
 8000d8c:	8812      	ldrh	r2, [r2, #0]
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	f040 81d1 	bne.w	8001136 <MLX90640_CalculateTo+0x85e>
        {    
            irData = frameData[pixelNumber];
 8000d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	ee07 3a90 	vmov	s15, r3
 8000da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000da6:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            if(irData > 32767)
 8000daa:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8000dae:	ed1f 7a58 	vldr	s14, [pc, #-352]	; 8000c50 <MLX90640_CalculateTo+0x378>
 8000db2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dba:	dd07      	ble.n	8000dcc <MLX90640_CalculateTo+0x4f4>
            {
                irData = irData - 65536;
 8000dbc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8000dc0:	ed1f 7a5c 	vldr	s14, [pc, #-368]	; 8000c54 <MLX90640_CalculateTo+0x37c>
 8000dc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000dc8:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            }
            irData = irData * gain;
 8000dcc:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8000dd0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8000dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dd8:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            
            kta = params->kta[pixelNumber]/ktaScale;
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000de0:	4413      	add	r3, r2
 8000de2:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8000de6:	f993 3000 	ldrsb.w	r3, [r3]
 8000dea:	ee07 3a90 	vmov	s15, r3
 8000dee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000df2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000df6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dfa:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            kv = params->kv[pixelNumber]/kvScale;
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e02:	4413      	add	r3, r2
 8000e04:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 8000e08:	f993 3000 	ldrsb.w	r3, [r3]
 8000e0c:	ee07 3a90 	vmov	s15, r3
 8000e10:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e14:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000e18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e1c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3f));
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e24:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	4413      	add	r3, r2
 8000e2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e30:	ee07 3a90 	vmov	s15, r3
 8000e34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e38:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000e3c:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8000e40:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8000e44:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000e48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000e50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000e54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e58:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000e5c:	ed5f 6a82 	vldr	s13, [pc, #-520]	; 8000c58 <MLX90640_CalculateTo+0x380>
 8000e60:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8000e64:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000e68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000e70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e78:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8000e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e80:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            
            if(mode !=  params->calibrationModeEE)
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e8a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d023      	beq.n	8000eda <MLX90640_CalculateTo+0x602>
            {
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern; 
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e98:	ed93 7a99 	vldr	s14, [r3, #612]	; 0x264
 8000e9c:	f997 3046 	ldrsb.w	r3, [r7, #70]	; 0x46
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	ee07 3a90 	vmov	s15, r3
 8000ea8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eb0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8000eb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ebe:	edd3 6a98 	vldr	s13, [r3, #608]	; 0x260
 8000ec2:	f997 3044 	ldrsb.w	r3, [r7, #68]	; 0x44
 8000ec6:	ee07 3a90 	vmov	s15, r3
 8000eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ece:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ed2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ed6:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            }                       
    
            irData = irData - params->tgc * irDataCP[subPage];
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	ed93 7a06 	vldr	s14, [r3, #24]
 8000ee0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	3380      	adds	r3, #128	; 0x80
 8000ee8:	443b      	add	r3, r7
 8000eea:	3b58      	subs	r3, #88	; 0x58
 8000eec:	edd3 7a00 	vldr	s15, [r3]
 8000ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ef4:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8000ef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000efc:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            irData = irData / emissivity;
 8000f00:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8000f04:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f0c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            
            alphaCompensated = SCALEALPHA*alphaScale/params->alpha[pixelNumber];
 8000f10:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000f14:	ed1f 7aaf 	vldr	s14, [pc, #-700]	; 8000c5c <MLX90640_CalculateTo+0x384>
 8000f18:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f20:	3324      	adds	r3, #36	; 0x24
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4413      	add	r3, r2
 8000f26:	885b      	ldrh	r3, [r3, #2]
 8000f28:	ee07 3a90 	vmov	s15, r3
 8000f2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f34:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            alphaCompensated = alphaCompensated*(1 + params->KsTa * (ta - 25));
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8000f3e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000f42:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8000f46:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f56:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f5e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                        
            Sx = alphaCompensated * alphaCompensated * alphaCompensated * (irData + alphaCompensated * taTr);
 8000f62:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000f66:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000f6a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000f6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f72:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8000f76:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000f7a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000f7e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8000f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f8a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            Sx = sqrt(sqrt(Sx)) * params->ksTo[1];            
 8000f8e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000f92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f96:	eeb0 0b47 	vmov.f64	d0, d7
 8000f9a:	f017 ff25 	bl	8018de8 <sqrt>
 8000f9e:	eeb0 7b40 	vmov.f64	d7, d0
 8000fa2:	eeb0 0b47 	vmov.f64	d0, d7
 8000fa6:	f017 ff1f 	bl	8018de8 <sqrt>
 8000faa:	eeb0 6b40 	vmov.f64	d6, d0
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000fb4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fb8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000fbc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fc0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            
            To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15f) + Sx) + taTr)) - 273.15f;                     
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000fca:	ed1f 7adb 	vldr	s14, [pc, #-876]	; 8000c60 <MLX90640_CalculateTo+0x388>
 8000fce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fda:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000fde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fe2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fea:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8000fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000ff2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ffa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ffe:	eeb0 0b47 	vmov.f64	d0, d7
 8001002:	f017 fef1 	bl	8018de8 <sqrt>
 8001006:	eeb0 7b40 	vmov.f64	d7, d0
 800100a:	eeb0 0b47 	vmov.f64	d0, d7
 800100e:	f017 feeb 	bl	8018de8 <sqrt>
 8001012:	eeb0 7b40 	vmov.f64	d7, d0
 8001016:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8001150 <MLX90640_CalculateTo+0x878>
 800101a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800101e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001022:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
                    
            if(To < params->ct[1])
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 800102c:	ee07 3a90 	vmov	s15, r3
 8001030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001034:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001038:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800103c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001040:	d503      	bpl.n	800104a <MLX90640_CalculateTo+0x772>
            {
                range = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001048:	e026      	b.n	8001098 <MLX90640_CalculateTo+0x7c0>
            }
            else if(To < params->ct[2])   
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8001050:	ee07 3a90 	vmov	s15, r3
 8001054:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001058:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800105c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001064:	d503      	bpl.n	800106e <MLX90640_CalculateTo+0x796>
            {
                range = 1;            
 8001066:	2301      	movs	r3, #1
 8001068:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 800106c:	e014      	b.n	8001098 <MLX90640_CalculateTo+0x7c0>
            }   
            else if(To < params->ct[3])
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8001074:	ee07 3a90 	vmov	s15, r3
 8001078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800107c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001080:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001088:	d503      	bpl.n	8001092 <MLX90640_CalculateTo+0x7ba>
            {
                range = 2;            
 800108a:	2302      	movs	r3, #2
 800108c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001090:	e002      	b.n	8001098 <MLX90640_CalculateTo+0x7c0>
            }
            else
            {
                range = 3;            
 8001092:	2303      	movs	r3, #3
 8001094:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
            }      
            
            To = sqrt(sqrt(irData / (alphaCompensated * alphaCorrR[range] * (1 + params->ksTo[range] * (To - params->ct[range]))) + taTr)) - 273.15f;
 8001098:	f997 3076 	ldrsb.w	r3, [r7, #118]	; 0x76
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	3380      	adds	r3, #128	; 0x80
 80010a0:	443b      	add	r3, r7
 80010a2:	3b68      	subs	r3, #104	; 0x68
 80010a4:	ed93 7a00 	vldr	s14, [r3]
 80010a8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80010ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010b0:	f997 3076 	ldrsb.w	r3, [r7, #118]	; 0x76
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	330a      	adds	r3, #10
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	3304      	adds	r3, #4
 80010be:	edd3 6a00 	vldr	s13, [r3]
 80010c2:	f997 2076 	ldrsb.w	r2, [r7, #118]	; 0x76
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	3220      	adds	r2, #32
 80010ca:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80010ce:	ee07 3a90 	vmov	s15, r3
 80010d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d6:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 80010da:	ee76 7a67 	vsub.f32	s15, s12, s15
 80010de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80010e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80010ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ee:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 80010f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010f6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80010fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001102:	eeb0 0b47 	vmov.f64	d0, d7
 8001106:	f017 fe6f 	bl	8018de8 <sqrt>
 800110a:	eeb0 7b40 	vmov.f64	d7, d0
 800110e:	eeb0 0b47 	vmov.f64	d0, d7
 8001112:	f017 fe69 	bl	8018de8 <sqrt>
 8001116:	eeb0 7b40 	vmov.f64	d7, d0
 800111a:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001150 <MLX90640_CalculateTo+0x878>
 800111e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001122:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001126:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
                        
            result[pixelNumber] = To;
 800112a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001134:	601a      	str	r2, [r3, #0]
    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 8001136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001138:	3301      	adds	r3, #1
 800113a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800113c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800113e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001142:	f6ff adca 	blt.w	8000cda <MLX90640_CalculateTo+0x402>
        }
    }
}
 8001146:	bf00      	nop
 8001148:	bf00      	nop
 800114a:	3780      	adds	r7, #128	; 0x80
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	60000000 	.word	0x60000000
 8001154:	40711266 	.word	0x40711266

08001158 <MLX90640_GetVdd>:
}

//------------------------------------------------------------------------------

float MLX90640_GetVdd(uint16_t *frameData, const paramsMLX90640 *params)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	ed2d 8b02 	vpush	{d8}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
    float vdd;
    float resolutionCorrection;

    int resolutionRAM;    
    
    vdd = frameData[810];
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f203 6354 	addw	r3, r3, #1620	; 0x654
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	ee07 3a90 	vmov	s15, r3
 8001172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001176:	edc7 7a05 	vstr	s15, [r7, #20]
    if(vdd > 32767)
 800117a:	edd7 7a05 	vldr	s15, [r7, #20]
 800117e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001240 <MLX90640_GetVdd+0xe8>
 8001182:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118a:	dd07      	ble.n	800119c <MLX90640_GetVdd+0x44>
    {
        vdd = vdd - 65536;
 800118c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001190:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001244 <MLX90640_GetVdd+0xec>
 8001194:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001198:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    resolutionRAM = (frameData[832] & 0x0C00) >> 10;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	129b      	asrs	r3, r3, #10
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	613b      	str	r3, [r7, #16]
    resolutionCorrection = pow(2, (double)params->resolutionEE) / pow(2, (double)resolutionRAM);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011b2:	ee07 3a90 	vmov	s15, r3
 80011b6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80011ba:	eeb0 1b47 	vmov.f64	d1, d7
 80011be:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80011c2:	f017 fbbd 	bl	8018940 <pow>
 80011c6:	eeb0 8b40 	vmov.f64	d8, d0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	ee07 3a90 	vmov	s15, r3
 80011d0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80011d4:	eeb0 1b47 	vmov.f64	d1, d7
 80011d8:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80011dc:	f017 fbb0 	bl	8018940 <pow>
 80011e0:	eeb0 6b40 	vmov.f64	d6, d0
 80011e4:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80011e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011ec:	edc7 7a03 	vstr	s15, [r7, #12]
    vdd = (resolutionCorrection * vdd - params->vdd25) / params->kVdd + 3.3f;
 80011f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80011f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80011f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001202:	ee07 3a90 	vmov	s15, r3
 8001206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800120a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001214:	ee07 3a90 	vmov	s15, r3
 8001218:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800121c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001220:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001248 <MLX90640_GetVdd+0xf0>
 8001224:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001228:	edc7 7a05 	vstr	s15, [r7, #20]
    
    return vdd;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	ee07 3a90 	vmov	s15, r3
}
 8001232:	eeb0 0a67 	vmov.f32	s0, s15
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	ecbd 8b02 	vpop	{d8}
 800123e:	bd80      	pop	{r7, pc}
 8001240:	46fffe00 	.word	0x46fffe00
 8001244:	47800000 	.word	0x47800000
 8001248:	40533333 	.word	0x40533333

0800124c <MLX90640_GetTa>:

//------------------------------------------------------------------------------

float MLX90640_GetTa(uint16_t *frameData, const paramsMLX90640 *params)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
    float ptat;
    float ptatArt;
    float vdd;
    float ta;
    
    vdd = MLX90640_GetVdd(frameData, params);
 8001256:	6839      	ldr	r1, [r7, #0]
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ff7d 	bl	8001158 <MLX90640_GetVdd>
 800125e:	ed87 0a03 	vstr	s0, [r7, #12]
    
    ptat = frameData[800];
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	ee07 3a90 	vmov	s15, r3
 800126e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001272:	edc7 7a05 	vstr	s15, [r7, #20]
    if(ptat > 32767)
 8001276:	edd7 7a05 	vldr	s15, [r7, #20]
 800127a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800135c <MLX90640_GetTa+0x110>
 800127e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001286:	dd07      	ble.n	8001298 <MLX90640_GetTa+0x4c>
    {
        ptat = ptat - 65536;
 8001288:	edd7 7a05 	vldr	s15, [r7, #20]
 800128c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001360 <MLX90640_GetTa+0x114>
 8001290:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001294:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    
    ptatArt = frameData[768];
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	ee07 3a90 	vmov	s15, r3
 80012a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012a8:	edc7 7a04 	vstr	s15, [r7, #16]
    if(ptatArt > 32767)
 80012ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800135c <MLX90640_GetTa+0x110>
 80012b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	dd07      	ble.n	80012ce <MLX90640_GetTa+0x82>
    {
        ptatArt = ptatArt - 65536;
 80012be:	edd7 7a04 	vldr	s15, [r7, #16]
 80012c2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001360 <MLX90640_GetTa+0x114>
 80012c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012ca:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    ptatArt = (ptat / (ptat * params->alphaPTAT + ptatArt)) * pow(2, (double)18);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80012d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80012d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80012e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012e4:	edd7 6a05 	vldr	s13, [r7, #20]
 80012e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ec:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001364 <MLX90640_GetTa+0x118>
 80012f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f4:	edc7 7a04 	vstr	s15, [r7, #16]
    
    ta = (ptatArt / (1 + params->KvPTAT * (vdd - 3.3f)) - params->vPTAT25);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80012fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001302:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001368 <MLX90640_GetTa+0x11c>
 8001306:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800130a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800130e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001312:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001316:	edd7 6a04 	vldr	s13, [r7, #16]
 800131a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	899b      	ldrh	r3, [r3, #12]
 8001322:	ee07 3a90 	vmov	s15, r3
 8001326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800132e:	edc7 7a02 	vstr	s15, [r7, #8]
    ta = ta / params->KtPTAT + 25;
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	ed93 7a02 	vldr	s14, [r3, #8]
 8001338:	edd7 6a02 	vldr	s13, [r7, #8]
 800133c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001340:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001344:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001348:	edc7 7a02 	vstr	s15, [r7, #8]
    
    return ta;
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	ee07 3a90 	vmov	s15, r3
}
 8001352:	eeb0 0a67 	vmov.f32	s0, s15
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	46fffe00 	.word	0x46fffe00
 8001360:	47800000 	.word	0x47800000
 8001364:	48800000 	.word	0x48800000
 8001368:	40533333 	.word	0x40533333

0800136c <ExtractVDDParameters>:
}

//------------------------------------------------------------------------------

void ExtractVDDParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
    int16_t kVdd;
    int16_t vdd25;
    
    kVdd = eeData[51];
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3366      	adds	r3, #102	; 0x66
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	81fb      	strh	r3, [r7, #14]
    
    kVdd = (eeData[51] & 0xFF00) >> 8;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3366      	adds	r3, #102	; 0x66
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	b29b      	uxth	r3, r3
 8001388:	81fb      	strh	r3, [r7, #14]
    if(kVdd > 127)
 800138a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800138e:	2b7f      	cmp	r3, #127	; 0x7f
 8001390:	dd04      	ble.n	800139c <ExtractVDDParameters+0x30>
    {
        kVdd = kVdd - 256;
 8001392:	89fb      	ldrh	r3, [r7, #14]
 8001394:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001398:	b29b      	uxth	r3, r3
 800139a:	81fb      	strh	r3, [r7, #14]
    }
    kVdd = 32 * kVdd;
 800139c:	89fb      	ldrh	r3, [r7, #14]
 800139e:	015b      	lsls	r3, r3, #5
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	81fb      	strh	r3, [r7, #14]
    vdd25 = eeData[51] & 0x00FF;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3366      	adds	r3, #102	; 0x66
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	81bb      	strh	r3, [r7, #12]
    vdd25 = ((vdd25 - 256) << 5) - 8192;
 80013b0:	89bb      	ldrh	r3, [r7, #12]
 80013b2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	015b      	lsls	r3, r3, #5
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	81bb      	strh	r3, [r7, #12]
    
    mlx90640->kVdd = kVdd;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	89fa      	ldrh	r2, [r7, #14]
 80013c8:	801a      	strh	r2, [r3, #0]
    mlx90640->vdd25 = vdd25; 
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	89ba      	ldrh	r2, [r7, #12]
 80013ce:	805a      	strh	r2, [r3, #2]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	0000      	movs	r0, r0
	...

080013e0 <ExtractPTATParameters>:

//------------------------------------------------------------------------------

void ExtractPTATParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b087      	sub	sp, #28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
    float KvPTAT;
    float KtPTAT;
    int16_t vPTAT25;
    float alphaPTAT;
    
    KvPTAT = (eeData[50] & 0xFC00) >> 10;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3364      	adds	r3, #100	; 0x64
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	0a9b      	lsrs	r3, r3, #10
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	ee07 3a90 	vmov	s15, r3
 80013f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013fc:	edc7 7a05 	vstr	s15, [r7, #20]
    if(KvPTAT > 31)
 8001400:	edd7 7a05 	vldr	s15, [r7, #20]
 8001404:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8001408:	eef4 7ac7 	vcmpe.f32	s15, s14
 800140c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001410:	dd07      	ble.n	8001422 <ExtractPTATParameters+0x42>
    {
        KvPTAT = KvPTAT - 64;
 8001412:	edd7 7a05 	vldr	s15, [r7, #20]
 8001416:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80014d8 <ExtractPTATParameters+0xf8>
 800141a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800141e:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    KvPTAT = KvPTAT/4096;
 8001422:	ed97 7a05 	vldr	s14, [r7, #20]
 8001426:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80014dc <ExtractPTATParameters+0xfc>
 800142a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800142e:	edc7 7a05 	vstr	s15, [r7, #20]
    
    KtPTAT = eeData[50] & 0x03FF;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3364      	adds	r3, #100	; 0x64
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800143c:	ee07 3a90 	vmov	s15, r3
 8001440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001444:	edc7 7a04 	vstr	s15, [r7, #16]
    if(KtPTAT > 511)
 8001448:	edd7 7a04 	vldr	s15, [r7, #16]
 800144c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80014e0 <ExtractPTATParameters+0x100>
 8001450:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001458:	dd07      	ble.n	800146a <ExtractPTATParameters+0x8a>
    {
        KtPTAT = KtPTAT - 1024;
 800145a:	edd7 7a04 	vldr	s15, [r7, #16]
 800145e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80014e4 <ExtractPTATParameters+0x104>
 8001462:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001466:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    KtPTAT = KtPTAT/8;
 800146a:	ed97 7a04 	vldr	s14, [r7, #16]
 800146e:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001472:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001476:	edc7 7a04 	vstr	s15, [r7, #16]
    
    vPTAT25 = eeData[49];
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3362      	adds	r3, #98	; 0x62
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	81fb      	strh	r3, [r7, #14]
    
    alphaPTAT = (eeData[16] & 0xF000) / pow(2, (double)14) + 8.0f;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3320      	adds	r3, #32
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800148c:	ee07 3a90 	vmov	s15, r3
 8001490:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001494:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 80014d0 <ExtractPTATParameters+0xf0>
 8001498:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800149c:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 80014a0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80014a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014a8:	edc7 7a02 	vstr	s15, [r7, #8]
    
    mlx90640->KvPTAT = KvPTAT;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	605a      	str	r2, [r3, #4]
    mlx90640->KtPTAT = KtPTAT;    
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	609a      	str	r2, [r3, #8]
    mlx90640->vPTAT25 = vPTAT25;
 80014b8:	89fa      	ldrh	r2, [r7, #14]
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	819a      	strh	r2, [r3, #12]
    mlx90640->alphaPTAT = alphaPTAT;   
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	611a      	str	r2, [r3, #16]
}
 80014c4:	bf00      	nop
 80014c6:	371c      	adds	r7, #28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	00000000 	.word	0x00000000
 80014d4:	40d00000 	.word	0x40d00000
 80014d8:	42800000 	.word	0x42800000
 80014dc:	45800000 	.word	0x45800000
 80014e0:	43ff8000 	.word	0x43ff8000
 80014e4:	44800000 	.word	0x44800000

080014e8 <ExtractGainParameters>:

//------------------------------------------------------------------------------

void ExtractGainParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
    int16_t gainEE;
    
    gainEE = eeData[48];
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3360      	adds	r3, #96	; 0x60
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	81fb      	strh	r3, [r7, #14]
    if(gainEE > 32767)
    {
        gainEE = gainEE -65536;
    }
    
    mlx90640->gainEE = gainEE;    
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	89fa      	ldrh	r2, [r7, #14]
 80014fe:	829a      	strh	r2, [r3, #20]
}
 8001500:	bf00      	nop
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <ExtractTgcParameters>:

//------------------------------------------------------------------------------

void ExtractTgcParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
    float tgc;
    tgc = eeData[60] & 0x00FF;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3378      	adds	r3, #120	; 0x78
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	ee07 3a90 	vmov	s15, r3
 8001522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001526:	edc7 7a03 	vstr	s15, [r7, #12]
    if(tgc > 127)
 800152a:	edd7 7a03 	vldr	s15, [r7, #12]
 800152e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001570 <ExtractTgcParameters+0x64>
 8001532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153a:	dd07      	ble.n	800154c <ExtractTgcParameters+0x40>
    {
        tgc = tgc - 256;
 800153c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001540:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001574 <ExtractTgcParameters+0x68>
 8001544:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001548:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    tgc = tgc / 32.0f;
 800154c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001550:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001578 <ExtractTgcParameters+0x6c>
 8001554:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001558:	edc7 7a03 	vstr	s15, [r7, #12]
    
    mlx90640->tgc = tgc;        
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	619a      	str	r2, [r3, #24]
}
 8001562:	bf00      	nop
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	42fe0000 	.word	0x42fe0000
 8001574:	43800000 	.word	0x43800000
 8001578:	42000000 	.word	0x42000000

0800157c <ExtractResolutionParameters>:

//------------------------------------------------------------------------------

void ExtractResolutionParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
    uint8_t resolutionEE;
    resolutionEE = (eeData[56] & 0x3000) >> 12;    
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3370      	adds	r3, #112	; 0x70
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	131b      	asrs	r3, r3, #12
 800158e:	b2db      	uxtb	r3, r3
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	73fb      	strb	r3, [r7, #15]
    
    mlx90640->resolutionEE = resolutionEE;
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	7bfa      	ldrb	r2, [r7, #15]
 800159a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <ExtractKsTaParameters>:

//------------------------------------------------------------------------------

void ExtractKsTaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
    float KsTa;
    KsTa = (eeData[60] & 0xFF00) >> 8;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3378      	adds	r3, #120	; 0x78
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	b29b      	uxth	r3, r3
 80015c0:	ee07 3a90 	vmov	s15, r3
 80015c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c8:	edc7 7a03 	vstr	s15, [r7, #12]
    if(KsTa > 127)
 80015cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80015d0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001610 <ExtractKsTaParameters+0x64>
 80015d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015dc:	dd07      	ble.n	80015ee <ExtractKsTaParameters+0x42>
    {
        KsTa = KsTa -256;
 80015de:	edd7 7a03 	vldr	s15, [r7, #12]
 80015e2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001614 <ExtractKsTaParameters+0x68>
 80015e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015ea:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    KsTa = KsTa / 8192.0f;
 80015ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80015f2:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001618 <ExtractKsTaParameters+0x6c>
 80015f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015fa:	edc7 7a03 	vstr	s15, [r7, #12]
    
    mlx90640->KsTa = KsTa;
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	42fe0000 	.word	0x42fe0000
 8001614:	43800000 	.word	0x43800000
 8001618:	46000000 	.word	0x46000000

0800161c <ExtractKsToParameters>:

//------------------------------------------------------------------------------

void ExtractKsToParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 800161c:	b480      	push	{r7}
 800161e:	b087      	sub	sp, #28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
    int KsToScale;
    int8_t step;
    
    step = ((eeData[63] & 0x3000) >> 12) * 10;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	337e      	adds	r3, #126	; 0x7e
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	131b      	asrs	r3, r3, #12
 800162e:	b2db      	uxtb	r3, r3
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	b2db      	uxtb	r3, r3
 8001636:	461a      	mov	r2, r3
 8001638:	0092      	lsls	r2, r2, #2
 800163a:	4413      	add	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	b2db      	uxtb	r3, r3
 8001640:	74fb      	strb	r3, [r7, #19]
    
    mlx90640->ct[0] = -40;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	f64f 72d8 	movw	r2, #65496	; 0xffd8
 8001648:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    mlx90640->ct[1] = 0;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	2200      	movs	r2, #0
 8001650:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    mlx90640->ct[2] = (eeData[63] & 0x00F0) >> 4;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	337e      	adds	r3, #126	; 0x7e
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	111b      	asrs	r3, r3, #4
 800165c:	b21b      	sxth	r3, r3
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	b21a      	sxth	r2, r3
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    mlx90640->ct[3] = (eeData[63] & 0x0F00) >> 8;    
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	337e      	adds	r3, #126	; 0x7e
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	121b      	asrs	r3, r3, #8
 8001672:	b21b      	sxth	r3, r3
 8001674:	f003 030f 	and.w	r3, r3, #15
 8001678:	b21a      	sxth	r2, r3
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    
    mlx90640->ct[2] = mlx90640->ct[2]*step;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8001686:	b29a      	uxth	r2, r3
 8001688:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800168c:	b29b      	uxth	r3, r3
 800168e:	fb12 f303 	smulbb	r3, r2, r3
 8001692:	b29b      	uxth	r3, r3
 8001694:	b21a      	sxth	r2, r3
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    mlx90640->ct[3] = mlx90640->ct[2] + mlx90640->ct[3]*step;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80016aa:	b299      	uxth	r1, r3
 80016ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	fb11 f303 	smulbb	r3, r1, r3
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	4413      	add	r3, r2
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	b21a      	sxth	r2, r3
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    mlx90640->ct[4] = 400;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80016ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    
    KsToScale = (eeData[63] & 0x000F) + 8;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	337e      	adds	r3, #126	; 0x7e
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	f003 030f 	and.w	r3, r3, #15
 80016d8:	3308      	adds	r3, #8
 80016da:	60fb      	str	r3, [r7, #12]
    KsToScale = 1 << KsToScale;
 80016dc:	2201      	movs	r2, #1
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	60fb      	str	r3, [r7, #12]
    
    mlx90640->ksTo[0] = eeData[61] & 0x00FF;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	337a      	adds	r3, #122	; 0x7a
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	ee07 3a90 	vmov	s15, r3
 80016f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    mlx90640->ksTo[1] = (eeData[61] & 0xFF00) >> 8;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	337a      	adds	r3, #122	; 0x7a
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	0a1b      	lsrs	r3, r3, #8
 8001704:	b29b      	uxth	r3, r3
 8001706:	ee07 3a90 	vmov	s15, r3
 800170a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    mlx90640->ksTo[2] = eeData[62] & 0x00FF;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	337c      	adds	r3, #124	; 0x7c
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	b2db      	uxtb	r3, r3
 800171c:	ee07 3a90 	vmov	s15, r3
 8001720:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    mlx90640->ksTo[3] = (eeData[62] & 0xFF00) >> 8;      
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	337c      	adds	r3, #124	; 0x7c
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	b29b      	uxth	r3, r3
 8001734:	ee07 3a90 	vmov	s15, r3
 8001738:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    
    for(int i = 0; i < 4; i++)
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	e03c      	b.n	80017c2 <ExtractKsToParameters+0x1a6>
    {
        if(mlx90640->ksTo[i] > 127)
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	330a      	adds	r3, #10
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	3304      	adds	r3, #4
 8001754:	edd3 7a00 	vldr	s15, [r3]
 8001758:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80017dc <ExtractKsToParameters+0x1c0>
 800175c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001764:	dd13      	ble.n	800178e <ExtractKsToParameters+0x172>
        {
            mlx90640->ksTo[i] = mlx90640->ksTo[i] - 256;
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	330a      	adds	r3, #10
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	3304      	adds	r3, #4
 8001772:	edd3 7a00 	vldr	s15, [r3]
 8001776:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80017e0 <ExtractKsToParameters+0x1c4>
 800177a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	330a      	adds	r3, #10
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	3304      	adds	r3, #4
 800178a:	edc3 7a00 	vstr	s15, [r3]
        }
        mlx90640->ksTo[i] = mlx90640->ksTo[i] / KsToScale;
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	330a      	adds	r3, #10
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	3304      	adds	r3, #4
 800179a:	edd3 6a00 	vldr	s13, [r3]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	ee07 3a90 	vmov	s15, r3
 80017a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	330a      	adds	r3, #10
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	3304      	adds	r3, #4
 80017b8:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < 4; i++)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	3301      	adds	r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	ddbf      	ble.n	8001748 <ExtractKsToParameters+0x12c>
    } 
    
    mlx90640->ksTo[4] = -0.0002;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	4a06      	ldr	r2, [pc, #24]	; (80017e4 <ExtractKsToParameters+0x1c8>)
 80017cc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80017ce:	bf00      	nop
 80017d0:	371c      	adds	r7, #28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	42fe0000 	.word	0x42fe0000
 80017e0:	43800000 	.word	0x43800000
 80017e4:	b951b717 	.word	0xb951b717

080017e8 <ExtractAlphaParameters>:

//------------------------------------------------------------------------------

void ExtractAlphaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	ed2d 8b02 	vpush	{d8}
 80017ee:	f5ad 6d52 	sub.w	sp, sp, #3360	; 0xd20
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80017f8:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 80017fc:	6018      	str	r0, [r3, #0]
 80017fe:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001802:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8001806:	6019      	str	r1, [r3, #0]
    int accRow[24];
    int accColumn[32];
    int p = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
    uint8_t accRemScale;
    float alphaTemp[768];
    float temp;
    

    accRemScale = eeData[32] & 0x000F;
 800180e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001812:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	3340      	adds	r3, #64	; 0x40
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	f887 3cf3 	strb.w	r3, [r7, #3315]	; 0xcf3
    accColumnScale = (eeData[32] & 0x00F0) >> 4;
 8001826:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800182a:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	3340      	adds	r3, #64	; 0x40
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	111b      	asrs	r3, r3, #4
 8001836:	b2db      	uxtb	r3, r3
 8001838:	f003 030f 	and.w	r3, r3, #15
 800183c:	f887 3cf2 	strb.w	r3, [r7, #3314]	; 0xcf2
    accRowScale = (eeData[32] & 0x0F00) >> 8;
 8001840:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001844:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	3340      	adds	r3, #64	; 0x40
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	121b      	asrs	r3, r3, #8
 8001850:	b2db      	uxtb	r3, r3
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	f887 3cf1 	strb.w	r3, [r7, #3313]	; 0xcf1
    alphaScale = ((eeData[32] & 0xF000) >> 12) + 30;
 800185a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800185e:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	3340      	adds	r3, #64	; 0x40
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	0b1b      	lsrs	r3, r3, #12
 800186a:	b29b      	uxth	r3, r3
 800186c:	b2db      	uxtb	r3, r3
 800186e:	331e      	adds	r3, #30
 8001870:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    alphaRef = eeData[33];
 8001874:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001878:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	3342      	adds	r3, #66	; 0x42
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	f8c7 3cec 	str.w	r3, [r7, #3308]	; 0xcec
    
    for(int i = 0; i < 6; i++)
 8001886:	2300      	movs	r3, #0
 8001888:	f8c7 3d14 	str.w	r3, [r7, #3348]	; 0xd14
 800188c:	e062      	b.n	8001954 <ExtractAlphaParameters+0x16c>
    {
        p = i * 4;
 800188e:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
        accRow[p + 0] = (eeData[34 + i] & 0x000F);
 8001898:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 800189c:	3322      	adds	r3, #34	; 0x22
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80018a4:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	f003 020f 	and.w	r2, r3, #15
 80018b2:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 80018bc:	443b      	add	r3, r7
 80018be:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 1] = (eeData[34 + i] & 0x00F0) >> 4;
 80018c2:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 80018c6:	3322      	adds	r3, #34	; 0x22
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80018ce:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	4413      	add	r3, r2
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	111a      	asrs	r2, r3, #4
 80018da:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80018de:	3301      	adds	r3, #1
 80018e0:	f002 020f 	and.w	r2, r2, #15
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 80018ea:	443b      	add	r3, r7
 80018ec:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 2] = (eeData[34 + i] & 0x0F00) >> 8;
 80018f0:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 80018f4:	3322      	adds	r3, #34	; 0x22
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80018fc:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	4413      	add	r3, r2
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	121a      	asrs	r2, r3, #8
 8001908:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800190c:	3302      	adds	r3, #2
 800190e:	f002 020f 	and.w	r2, r2, #15
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001918:	443b      	add	r3, r7
 800191a:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 3] = (eeData[34 + i] & 0xF000) >> 12;
 800191e:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8001922:	3322      	adds	r3, #34	; 0x22
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 800192a:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 800192e:	6812      	ldr	r2, [r2, #0]
 8001930:	4413      	add	r3, r2
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	0b1b      	lsrs	r3, r3, #12
 8001936:	b29a      	uxth	r2, r3
 8001938:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800193c:	3303      	adds	r3, #3
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001944:	443b      	add	r3, r7
 8001946:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < 6; i++)
 800194a:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 800194e:	3301      	adds	r3, #1
 8001950:	f8c7 3d14 	str.w	r3, [r7, #3348]	; 0xd14
 8001954:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8001958:	2b05      	cmp	r3, #5
 800195a:	dd98      	ble.n	800188e <ExtractAlphaParameters+0xa6>
    }
    
    for(int i = 0; i < 24; i++)
 800195c:	2300      	movs	r3, #0
 800195e:	f8c7 3d10 	str.w	r3, [r7, #3344]	; 0xd10
 8001962:	e020      	b.n	80019a6 <ExtractAlphaParameters+0x1be>
    {
        if (accRow[i] > 7)
 8001964:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 800196e:	443b      	add	r3, r7
 8001970:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8001974:	2b07      	cmp	r3, #7
 8001976:	dd11      	ble.n	800199c <ExtractAlphaParameters+0x1b4>
        {
            accRow[i] = accRow[i] - 16;
 8001978:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001982:	443b      	add	r3, r7
 8001984:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8001988:	f1a3 0210 	sub.w	r2, r3, #16
 800198c:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001996:	443b      	add	r3, r7
 8001998:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < 24; i++)
 800199c:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 80019a0:	3301      	adds	r3, #1
 80019a2:	f8c7 3d10 	str.w	r3, [r7, #3344]	; 0xd10
 80019a6:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 80019aa:	2b17      	cmp	r3, #23
 80019ac:	ddda      	ble.n	8001964 <ExtractAlphaParameters+0x17c>
        }
    }
    
    for(int i = 0; i < 8; i++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 80019b4:	e062      	b.n	8001a7c <ExtractAlphaParameters+0x294>
    {
        p = i * 4;
 80019b6:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
        accColumn[p + 0] = (eeData[40 + i] & 0x000F);
 80019c0:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80019c4:	3328      	adds	r3, #40	; 0x28
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80019cc:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	f003 010f 	and.w	r1, r3, #15
 80019da:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80019de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80019e2:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 80019e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 1] = (eeData[40 + i] & 0x00F0) >> 4;
 80019ea:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80019ee:	3328      	adds	r3, #40	; 0x28
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80019f6:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	4413      	add	r3, r2
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	111b      	asrs	r3, r3, #4
 8001a02:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 8001a06:	3201      	adds	r2, #1
 8001a08:	f003 010f 	and.w	r1, r3, #15
 8001a0c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001a10:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 2] = (eeData[40 + i] & 0x0F00) >> 8;
 8001a18:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001a1c:	3328      	adds	r3, #40	; 0x28
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001a24:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001a28:	6812      	ldr	r2, [r2, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	121b      	asrs	r3, r3, #8
 8001a30:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 8001a34:	3202      	adds	r2, #2
 8001a36:	f003 010f 	and.w	r1, r3, #15
 8001a3a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001a3e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 3] = (eeData[40 + i] & 0xF000) >> 12;
 8001a46:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001a4a:	3328      	adds	r3, #40	; 0x28
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001a52:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	4413      	add	r3, r2
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	0b1b      	lsrs	r3, r3, #12
 8001a5e:	b299      	uxth	r1, r3
 8001a60:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001a64:	1cda      	adds	r2, r3, #3
 8001a66:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001a6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 8001a72:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001a76:	3301      	adds	r3, #1
 8001a78:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 8001a7c:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001a80:	2b07      	cmp	r3, #7
 8001a82:	dd98      	ble.n	80019b6 <ExtractAlphaParameters+0x1ce>
    }
    
    for(int i = 0; i < 32; i ++)
 8001a84:	2300      	movs	r3, #0
 8001a86:	f8c7 3d08 	str.w	r3, [r7, #3336]	; 0xd08
 8001a8a:	e020      	b.n	8001ace <ExtractAlphaParameters+0x2e6>
    {
        if (accColumn[i] > 7)
 8001a8c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001a90:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a94:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 8001a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a9c:	2b07      	cmp	r3, #7
 8001a9e:	dd11      	ble.n	8001ac4 <ExtractAlphaParameters+0x2dc>
        {
            accColumn[i] = accColumn[i] - 16;
 8001aa0:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001aa4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001aa8:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 8001aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab0:	f1a3 0110 	sub.w	r1, r3, #16
 8001ab4:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001ab8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001abc:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 8001ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 32; i ++)
 8001ac4:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 8001ac8:	3301      	adds	r3, #1
 8001aca:	f8c7 3d08 	str.w	r3, [r7, #3336]	; 0xd08
 8001ace:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 8001ad2:	2b1f      	cmp	r3, #31
 8001ad4:	ddda      	ble.n	8001a8c <ExtractAlphaParameters+0x2a4>
        }
    }

    for(int i = 0; i < 24; i++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 8001adc:	e12a      	b.n	8001d34 <ExtractAlphaParameters+0x54c>
    {
        for(int j = 0; j < 32; j ++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 8001ae4:	e11c      	b.n	8001d20 <ExtractAlphaParameters+0x538>
        {
            p = 32 * i +j;
 8001ae6:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8001aea:	015b      	lsls	r3, r3, #5
 8001aec:	f8d7 2d00 	ldr.w	r2, [r7, #3328]	; 0xd00
 8001af0:	4413      	add	r3, r2
 8001af2:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
            alphaTemp[p] = (eeData[64 + p] & 0x03F0) >> 4;
 8001af6:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001afa:	3340      	adds	r3, #64	; 0x40
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001b02:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	4413      	add	r3, r2
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	111b      	asrs	r3, r3, #4
 8001b0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b12:	ee07 3a90 	vmov	s15, r3
 8001b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b1a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001b1e:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001b22:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	edc3 7a00 	vstr	s15, [r3]
            if (alphaTemp[p] > 31)
 8001b2e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001b32:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001b36:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	edd3 7a00 	vldr	s15, [r3]
 8001b42:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8001b46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4e:	dd17      	ble.n	8001b80 <ExtractAlphaParameters+0x398>
            {
                alphaTemp[p] = alphaTemp[p] - 64;
 8001b50:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001b54:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001b58:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	edd3 7a00 	vldr	s15, [r3]
 8001b64:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8001e98 <ExtractAlphaParameters+0x6b0>
 8001b68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b6c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001b70:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001b74:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	edc3 7a00 	vstr	s15, [r3]
            }
            alphaTemp[p] = alphaTemp[p]*(1 << accRemScale);
 8001b80:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001b84:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001b88:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	ed93 7a00 	vldr	s14, [r3]
 8001b94:	f897 3cf3 	ldrb.w	r3, [r7, #3315]	; 0xcf3
 8001b98:	2201      	movs	r2, #1
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	ee07 3a90 	vmov	s15, r3
 8001ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001baa:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001bae:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001bb2:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
 8001bbe:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001bc8:	443b      	add	r3, r7
 8001bca:	f853 2c94 	ldr.w	r2, [r3, #-148]
 8001bce:	f897 3cf1 	ldrb.w	r3, [r7, #3313]	; 0xcf1
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	f8d7 3cec 	ldr.w	r3, [r7, #3308]	; 0xcec
 8001bd8:	441a      	add	r2, r3
 8001bda:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001bde:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001be2:	f8d7 1d00 	ldr.w	r1, [r7, #3328]	; 0xd00
 8001be6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001bea:	f897 3cf2 	ldrb.w	r3, [r7, #3314]	; 0xcf2
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	ee07 3a90 	vmov	s15, r3
 8001bf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bfc:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001c00:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001c04:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	edd3 7a00 	vldr	s15, [r3]
 8001c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c14:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001c18:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001c1c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = alphaTemp[p] / pow(2,(double)alphaScale);
 8001c28:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001c2c:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001c30:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	edd3 7a00 	vldr	s15, [r3]
 8001c3c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001c40:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 8001c44:	ee07 3a90 	vmov	s15, r3
 8001c48:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001c4c:	eeb0 1b47 	vmov.f64	d1, d7
 8001c50:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001c54:	f016 fe74 	bl	8018940 <pow>
 8001c58:	eeb0 6b40 	vmov.f64	d6, d0
 8001c5c:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001c60:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c64:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001c68:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001c6c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = alphaTemp[p] - mlx90640->tgc * (mlx90640->cpAlpha[0] + mlx90640->cpAlpha[1])/2;
 8001c78:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001c7c:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001c80:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	ed93 7a00 	vldr	s14, [r3]
 8001c8c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001c90:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	edd3 6a06 	vldr	s13, [r3, #24]
 8001c9a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001c9e:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca8:	ed93 6a94 	vldr	s12, [r3, #592]	; 0x250
 8001cac:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001cb0:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cba:	edd3 7a95 	vldr	s15, [r3, #596]	; 0x254
 8001cbe:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001cc2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001cc6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001cca:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001cce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001cd6:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001cda:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = SCALEALPHA/alphaTemp[p];
 8001ce6:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001cea:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001cee:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	ed93 7a00 	vldr	s14, [r3]
 8001cfa:	eddf 6a68 	vldr	s13, [pc, #416]	; 8001e9c <ExtractAlphaParameters+0x6b4>
 8001cfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d02:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001d06:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001d0a:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < 32; j ++)
 8001d16:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 8001d20:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8001d24:	2b1f      	cmp	r3, #31
 8001d26:	f77f aede 	ble.w	8001ae6 <ExtractAlphaParameters+0x2fe>
    for(int i = 0; i < 24; i++)
 8001d2a:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8001d2e:	3301      	adds	r3, #1
 8001d30:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 8001d34:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8001d38:	2b17      	cmp	r3, #23
 8001d3a:	f77f aed0 	ble.w	8001ade <ExtractAlphaParameters+0x2f6>
        }
    }
    
    temp = alphaTemp[0];
 8001d3e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001d42:	f6a3 5314 	subw	r3, r3, #3348	; 0xd14
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8001d4c:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < 768; i++)
 8001d4e:	2301      	movs	r3, #1
 8001d50:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 8001d54:	e023      	b.n	8001d9e <ExtractAlphaParameters+0x5b6>
    {
        if (alphaTemp[i] > temp)
 8001d56:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001d5a:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001d5e:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	edd3 7a00 	vldr	s15, [r3]
 8001d6a:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8001d6e:	ed93 7a00 	vldr	s14, [r3]
 8001d72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7a:	d50b      	bpl.n	8001d94 <ExtractAlphaParameters+0x5ac>
        {
            temp = alphaTemp[i];
 8001d7c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001d80:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001d84:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8001d92:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < 768; i++)
 8001d94:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8001d98:	3301      	adds	r3, #1
 8001d9a:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 8001d9e:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8001da2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001da6:	dbd6      	blt.n	8001d56 <ExtractAlphaParameters+0x56e>
        }
    }
    
    alphaScale = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    while(temp < 32768)
 8001dae:	e00e      	b.n	8001dce <ExtractAlphaParameters+0x5e6>
    {
        temp = temp*2;
 8001db0:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8001db4:	edd3 7a00 	vldr	s15, [r3]
 8001db8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001dbc:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8001dc0:	edc3 7a00 	vstr	s15, [r3]
        alphaScale = alphaScale + 1;
 8001dc4:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 8001dc8:	3301      	adds	r3, #1
 8001dca:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    while(temp < 32768)
 8001dce:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8001dd2:	edd3 7a00 	vldr	s15, [r3]
 8001dd6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001ea0 <ExtractAlphaParameters+0x6b8>
 8001dda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de2:	d4e5      	bmi.n	8001db0 <ExtractAlphaParameters+0x5c8>
    } 
    
    for(int i = 0; i < 768; i++)
 8001de4:	2300      	movs	r3, #0
 8001de6:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
 8001dea:	e03f      	b.n	8001e6c <ExtractAlphaParameters+0x684>
    {
        temp = alphaTemp[i] * pow(2,(double)alphaScale);        
 8001dec:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001df0:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001df4:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	edd3 7a00 	vldr	s15, [r3]
 8001e00:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001e04:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 8001e08:	ee07 3a90 	vmov	s15, r3
 8001e0c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001e10:	eeb0 1b47 	vmov.f64	d1, d7
 8001e14:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001e18:	f016 fd92 	bl	8018940 <pow>
 8001e1c:	eeb0 7b40 	vmov.f64	d7, d0
 8001e20:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001e24:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e28:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8001e2c:	edc3 7a00 	vstr	s15, [r3]
        mlx90640->alpha[i] = (temp + 0.5f);        
 8001e30:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8001e34:	edd3 7a00 	vldr	s15, [r3]
 8001e38:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001e3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e44:	ee17 3a90 	vmov	r3, s15
 8001e48:	b299      	uxth	r1, r3
 8001e4a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001e4e:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8001e58:	3324      	adds	r3, #36	; 0x24
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	4413      	add	r3, r2
 8001e5e:	460a      	mov	r2, r1
 8001e60:	805a      	strh	r2, [r3, #2]
    for(int i = 0; i < 768; i++)
 8001e62:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8001e66:	3301      	adds	r3, #1
 8001e68:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
 8001e6c:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8001e70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e74:	dbba      	blt.n	8001dec <ExtractAlphaParameters+0x604>
        
    } 
    
    mlx90640->alphaScale = alphaScale;      
 8001e76:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001e7a:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f897 2d1f 	ldrb.w	r2, [r7, #3359]	; 0xd1f
 8001e84:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
   
}
 8001e88:	bf00      	nop
 8001e8a:	f507 6752 	add.w	r7, r7, #3360	; 0xd20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	ecbd 8b02 	vpop	{d8}
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	42800000 	.word	0x42800000
 8001e9c:	358637bd 	.word	0x358637bd
 8001ea0:	47000000 	.word	0x47000000

08001ea4 <ExtractOffsetParameters>:

//------------------------------------------------------------------------------

void ExtractOffsetParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b0c5      	sub	sp, #276	; 0x114
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001eae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001eb2:	6018      	str	r0, [r3, #0]
 8001eb4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001eb8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ebc:	6019      	str	r1, [r3, #0]
    int occRow[24];
    int occColumn[32];
    int p = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    uint8_t occRowScale;
    uint8_t occColumnScale;
    uint8_t occRemScale;
    

    occRemScale = (eeData[16] & 0x000F);
 8001ec4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001ec8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	3320      	adds	r3, #32
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	f003 030f 	and.w	r3, r3, #15
 8001ed8:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
    occColumnScale = (eeData[16] & 0x00F0) >> 4;
 8001edc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001ee0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	3320      	adds	r3, #32
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	111b      	asrs	r3, r3, #4
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    occRowScale = (eeData[16] & 0x0F00) >> 8;
 8001ef6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001efa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	3320      	adds	r3, #32
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	121b      	asrs	r3, r3, #8
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	f003 030f 	and.w	r3, r3, #15
 8001f0c:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
    offsetRef = eeData[17];
 8001f10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001f14:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	3322      	adds	r3, #34	; 0x22
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
    if (offsetRef > 32767)
    {
        offsetRef = offsetRef - 65536;
    }
    
    for(int i = 0; i < 6; i++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001f28:	e062      	b.n	8001ff0 <ExtractOffsetParameters+0x14c>
    {
        p = i * 4;
 8001f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        occRow[p + 0] = (eeData[18 + i] & 0x000F);
 8001f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001f38:	3312      	adds	r3, #18
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001f40:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001f44:	6812      	ldr	r2, [r2, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	f003 020f 	and.w	r2, r3, #15
 8001f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001f58:	443b      	add	r3, r7
 8001f5a:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 1] = (eeData[18 + i] & 0x00F0) >> 4;
 8001f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001f62:	3312      	adds	r3, #18
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001f6a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001f6e:	6812      	ldr	r2, [r2, #0]
 8001f70:	4413      	add	r3, r2
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	111a      	asrs	r2, r3, #4
 8001f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	f002 020f 	and.w	r2, r2, #15
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001f86:	443b      	add	r3, r7
 8001f88:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 2] = (eeData[18 + i] & 0x0F00) >> 8;
 8001f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001f90:	3312      	adds	r3, #18
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001f98:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	121a      	asrs	r2, r3, #8
 8001fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fa8:	3302      	adds	r3, #2
 8001faa:	f002 020f 	and.w	r2, r2, #15
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001fb4:	443b      	add	r3, r7
 8001fb6:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 3] = (eeData[18 + i] & 0xF000) >> 12;
 8001fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001fbe:	3312      	adds	r3, #18
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001fc6:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	4413      	add	r3, r2
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	0b1b      	lsrs	r3, r3, #12
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fd8:	3303      	adds	r3, #3
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001fe0:	443b      	add	r3, r7
 8001fe2:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 6; i++)
 8001fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001fea:	3301      	adds	r3, #1
 8001fec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001ff4:	2b05      	cmp	r3, #5
 8001ff6:	dd98      	ble.n	8001f2a <ExtractOffsetParameters+0x86>
    }
    
    for(int i = 0; i < 24; i++)
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001ffe:	e020      	b.n	8002042 <ExtractOffsetParameters+0x19e>
    {
        if (occRow[i] > 7)
 8002000:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800200a:	443b      	add	r3, r7
 800200c:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8002010:	2b07      	cmp	r3, #7
 8002012:	dd11      	ble.n	8002038 <ExtractOffsetParameters+0x194>
        {
            occRow[i] = occRow[i] - 16;
 8002014:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800201e:	443b      	add	r3, r7
 8002020:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8002024:	f1a3 0210 	sub.w	r2, r3, #16
 8002028:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002032:	443b      	add	r3, r7
 8002034:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 24; i++)
 8002038:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800203c:	3301      	adds	r3, #1
 800203e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002042:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002046:	2b17      	cmp	r3, #23
 8002048:	ddda      	ble.n	8002000 <ExtractOffsetParameters+0x15c>
        }
    }
    
    for(int i = 0; i < 8; i++)
 800204a:	2300      	movs	r3, #0
 800204c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002050:	e062      	b.n	8002118 <ExtractOffsetParameters+0x274>
    {
        p = i * 4;
 8002052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        occColumn[p + 0] = (eeData[24 + i] & 0x000F);
 800205c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002060:	3318      	adds	r3, #24
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002068:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	4413      	add	r3, r2
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	f003 010f 	and.w	r1, r3, #15
 8002076:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800207a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800207e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 1] = (eeData[24 + i] & 0x00F0) >> 4;
 8002086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800208a:	3318      	adds	r3, #24
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002092:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	4413      	add	r3, r2
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	111b      	asrs	r3, r3, #4
 800209e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80020a2:	3201      	adds	r2, #1
 80020a4:	f003 010f 	and.w	r1, r3, #15
 80020a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80020ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 2] = (eeData[24 + i] & 0x0F00) >> 8;
 80020b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80020b8:	3318      	adds	r3, #24
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80020c0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	4413      	add	r3, r2
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	121b      	asrs	r3, r3, #8
 80020cc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80020d0:	3202      	adds	r2, #2
 80020d2:	f003 010f 	and.w	r1, r3, #15
 80020d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80020da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 3] = (eeData[24 + i] & 0xF000) >> 12;
 80020e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80020e6:	3318      	adds	r3, #24
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80020ee:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	4413      	add	r3, r2
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	0b1b      	lsrs	r3, r3, #12
 80020fa:	b299      	uxth	r1, r3
 80020fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002100:	1cda      	adds	r2, r3, #3
 8002102:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002106:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800210a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 800210e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002112:	3301      	adds	r3, #1
 8002114:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800211c:	2b07      	cmp	r3, #7
 800211e:	dd98      	ble.n	8002052 <ExtractOffsetParameters+0x1ae>
    }
    
    for(int i = 0; i < 32; i ++)
 8002120:	2300      	movs	r3, #0
 8002122:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002126:	e020      	b.n	800216a <ExtractOffsetParameters+0x2c6>
    {
        if (occColumn[i] > 7)
 8002128:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800212c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002130:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8002134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002138:	2b07      	cmp	r3, #7
 800213a:	dd11      	ble.n	8002160 <ExtractOffsetParameters+0x2bc>
        {
            occColumn[i] = occColumn[i] - 16;
 800213c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002140:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002144:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8002148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800214c:	f1a3 0110 	sub.w	r1, r3, #16
 8002150:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002154:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002158:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800215c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 32; i ++)
 8002160:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002164:	3301      	adds	r3, #1
 8002166:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800216a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800216e:	2b1f      	cmp	r3, #31
 8002170:	ddda      	ble.n	8002128 <ExtractOffsetParameters+0x284>
        }
    }

    for(int i = 0; i < 24; i++)
 8002172:	2300      	movs	r3, #0
 8002174:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002178:	e0c0      	b.n	80022fc <ExtractOffsetParameters+0x458>
    {
        for(int j = 0; j < 32; j ++)
 800217a:	2300      	movs	r3, #0
 800217c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002180:	e0b2      	b.n	80022e8 <ExtractOffsetParameters+0x444>
        {
            p = 32 * i +j;
 8002182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002186:	015b      	lsls	r3, r3, #5
 8002188:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800218c:	4413      	add	r3, r2
 800218e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
            mlx90640->offset[p] = (eeData[64 + p] & 0xFC00) >> 10;
 8002192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002196:	3340      	adds	r3, #64	; 0x40
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800219e:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	4413      	add	r3, r2
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	0a9b      	lsrs	r3, r3, #10
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	b219      	sxth	r1, r3
 80021ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80021b2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021bc:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4413      	add	r3, r2
 80021c4:	460a      	mov	r2, r1
 80021c6:	809a      	strh	r2, [r3, #4]
            if (mlx90640->offset[p] > 31)
 80021c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80021cc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021d6:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	4413      	add	r3, r2
 80021de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021e2:	2b1f      	cmp	r3, #31
 80021e4:	dd1d      	ble.n	8002222 <ExtractOffsetParameters+0x37e>
            {
                mlx90640->offset[p] = mlx90640->offset[p] - 64;
 80021e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80021ea:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021f4:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	4413      	add	r3, r2
 80021fc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002200:	b29b      	uxth	r3, r3
 8002202:	3b40      	subs	r3, #64	; 0x40
 8002204:	b29b      	uxth	r3, r3
 8002206:	b219      	sxth	r1, r3
 8002208:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800220c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002216:	f503 7349 	add.w	r3, r3, #804	; 0x324
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	4413      	add	r3, r2
 800221e:	460a      	mov	r2, r1
 8002220:	809a      	strh	r2, [r3, #4]
            }
            mlx90640->offset[p] = mlx90640->offset[p]*(1 << occRemScale);
 8002222:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002226:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002230:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4413      	add	r3, r2
 8002238:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800223c:	461a      	mov	r2, r3
 800223e:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	b219      	sxth	r1, r3
 8002248:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800224c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002256:	f503 7349 	add.w	r3, r3, #804	; 0x324
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4413      	add	r3, r2
 800225e:	460a      	mov	r2, r1
 8002260:	809a      	strh	r2, [r3, #4]
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
 8002262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800226c:	443b      	add	r3, r7
 800226e:	f853 2c84 	ldr.w	r2, [r3, #-132]
 8002272:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	b29a      	uxth	r2, r3
 800227c:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002280:	4413      	add	r3, r2
 8002282:	b29a      	uxth	r2, r3
 8002284:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002288:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800228c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8002290:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002294:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8002298:	fa01 f303 	lsl.w	r3, r1, r3
 800229c:	b29b      	uxth	r3, r3
 800229e:	4413      	add	r3, r2
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022a6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022aa:	6819      	ldr	r1, [r3, #0]
 80022ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b0:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	440b      	add	r3, r1
 80022b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	4413      	add	r3, r2
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	b219      	sxth	r1, r3
 80022c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d2:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4413      	add	r3, r2
 80022da:	460a      	mov	r2, r1
 80022dc:	809a      	strh	r2, [r3, #4]
        for(int j = 0; j < 32; j ++)
 80022de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80022e2:	3301      	adds	r3, #1
 80022e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80022e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80022ec:	2b1f      	cmp	r3, #31
 80022ee:	f77f af48 	ble.w	8002182 <ExtractOffsetParameters+0x2de>
    for(int i = 0; i < 24; i++)
 80022f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022f6:	3301      	adds	r3, #1
 80022f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80022fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002300:	2b17      	cmp	r3, #23
 8002302:	f77f af3a 	ble.w	800217a <ExtractOffsetParameters+0x2d6>
        }
    }
}
 8002306:	bf00      	nop
 8002308:	bf00      	nop
 800230a:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <ExtractKtaPixelParameters>:

//------------------------------------------------------------------------------

void ExtractKtaPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	ed2d 8b02 	vpush	{d8}
 800231e:	f6ad 4d38 	subw	sp, sp, #3128	; 0xc38
 8002322:	af00      	add	r7, sp, #0
 8002324:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002328:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 800232c:	6018      	str	r0, [r3, #0]
 800232e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002332:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002336:	6019      	str	r1, [r3, #0]
    int p = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
    uint8_t ktaScale2;
    uint8_t split;
    float ktaTemp[768];
    float temp;
    
    KtaRoCo = (eeData[54] & 0xFF00) >> 8;
 800233e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002342:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	336c      	adds	r3, #108	; 0x6c
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	b29b      	uxth	r3, r3
 8002350:	f887 3c1b 	strb.w	r3, [r7, #3099]	; 0xc1b
    if (KtaRoCo > 127)
    {
        KtaRoCo = KtaRoCo - 256;
    }
    KtaRC[0] = KtaRoCo;
 8002354:	f897 3c1b 	ldrb.w	r3, [r7, #3099]	; 0xc1b
 8002358:	f887 3c10 	strb.w	r3, [r7, #3088]	; 0xc10
    
    KtaReCo = (eeData[54] & 0x00FF);
 800235c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002360:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	336c      	adds	r3, #108	; 0x6c
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	f887 3c1a 	strb.w	r3, [r7, #3098]	; 0xc1a
    if (KtaReCo > 127)
    {
        KtaReCo = KtaReCo - 256;
    }
    KtaRC[2] = KtaReCo;
 800236e:	f897 3c1a 	ldrb.w	r3, [r7, #3098]	; 0xc1a
 8002372:	f887 3c12 	strb.w	r3, [r7, #3090]	; 0xc12
      
    KtaRoCe = (eeData[55] & 0xFF00) >> 8;
 8002376:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800237a:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	336e      	adds	r3, #110	; 0x6e
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	0a1b      	lsrs	r3, r3, #8
 8002386:	b29b      	uxth	r3, r3
 8002388:	f887 3c19 	strb.w	r3, [r7, #3097]	; 0xc19
    if (KtaRoCe > 127)
    {
        KtaRoCe = KtaRoCe - 256;
    }
    KtaRC[1] = KtaRoCe;
 800238c:	f897 3c19 	ldrb.w	r3, [r7, #3097]	; 0xc19
 8002390:	f887 3c11 	strb.w	r3, [r7, #3089]	; 0xc11
      
    KtaReCe = (eeData[55] & 0x00FF);
 8002394:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002398:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	336e      	adds	r3, #110	; 0x6e
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	f887 3c18 	strb.w	r3, [r7, #3096]	; 0xc18
    if (KtaReCe > 127)
    {
        KtaReCe = KtaReCe - 256;
    }
    KtaRC[3] = KtaReCe;
 80023a6:	f897 3c18 	ldrb.w	r3, [r7, #3096]	; 0xc18
 80023aa:	f887 3c13 	strb.w	r3, [r7, #3091]	; 0xc13
  
    ktaScale1 = ((eeData[56] & 0x00F0) >> 4) + 8;
 80023ae:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80023b2:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	3370      	adds	r3, #112	; 0x70
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	111b      	asrs	r3, r3, #4
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f003 030f 	and.w	r3, r3, #15
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	3308      	adds	r3, #8
 80023c8:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    ktaScale2 = (eeData[56] & 0x000F);
 80023cc:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80023d0:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	3370      	adds	r3, #112	; 0x70
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	f003 030f 	and.w	r3, r3, #15
 80023e0:	f887 3c17 	strb.w	r3, [r7, #3095]	; 0xc17

    for(int i = 0; i < 24; i++)
 80023e4:	2300      	movs	r3, #0
 80023e6:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 80023ea:	e0e6      	b.n	80025ba <ExtractKtaPixelParameters+0x2a2>
    {
        for(int j = 0; j < 32; j ++)
 80023ec:	2300      	movs	r3, #0
 80023ee:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 80023f2:	e0d8      	b.n	80025a6 <ExtractKtaPixelParameters+0x28e>
        {
            p = 32 * i +j;
 80023f4:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 80023f8:	015b      	lsls	r3, r3, #5
 80023fa:	f8d7 2c28 	ldr.w	r2, [r7, #3112]	; 0xc28
 80023fe:	4413      	add	r3, r2
 8002400:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
            split = 2*(p/32 - (p/64)*2) + p%2;
 8002404:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002408:	2b00      	cmp	r3, #0
 800240a:	da00      	bge.n	800240e <ExtractKtaPixelParameters+0xf6>
 800240c:	331f      	adds	r3, #31
 800240e:	115b      	asrs	r3, r3, #5
 8002410:	461a      	mov	r2, r3
 8002412:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002416:	2b00      	cmp	r3, #0
 8002418:	da00      	bge.n	800241c <ExtractKtaPixelParameters+0x104>
 800241a:	333f      	adds	r3, #63	; 0x3f
 800241c:	119b      	asrs	r3, r3, #6
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	b2db      	uxtb	r3, r3
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	b2da      	uxtb	r2, r3
 8002428:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800242c:	2b00      	cmp	r3, #0
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	bfb8      	it	lt
 8002434:	425b      	neglt	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	4413      	add	r3, r2
 800243a:	f887 3c16 	strb.w	r3, [r7, #3094]	; 0xc16
            ktaTemp[p] = (eeData[64 + p] & 0x000E) >> 1;
 800243e:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002442:	3340      	adds	r3, #64	; 0x40
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	f607 4238 	addw	r2, r7, #3128	; 0xc38
 800244a:	f6a2 422c 	subw	r2, r2, #3116	; 0xc2c
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	4413      	add	r3, r2
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	105b      	asrs	r3, r3, #1
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002462:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002466:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800246a:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	edc3 7a00 	vstr	s15, [r3]
            if (ktaTemp[p] > 3)
 8002476:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800247a:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800247e:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	edd3 7a00 	vldr	s15, [r3]
 800248a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800248e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002496:	dd17      	ble.n	80024c8 <ExtractKtaPixelParameters+0x1b0>
            {
                ktaTemp[p] = ktaTemp[p] - 8;
 8002498:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800249c:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80024a0:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	edd3 7a00 	vldr	s15, [r3]
 80024ac:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80024b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024b4:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80024b8:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80024bc:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	edc3 7a00 	vstr	s15, [r3]
            }
            ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
 80024c8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80024cc:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80024d0:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	ed93 7a00 	vldr	s14, [r3]
 80024dc:	f897 3c17 	ldrb.w	r3, [r7, #3095]	; 0xc17
 80024e0:	2201      	movs	r2, #1
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	ee07 3a90 	vmov	s15, r3
 80024ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f2:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80024f6:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80024fa:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = KtaRC[split] + ktaTemp[p];
 8002506:	f897 3c16 	ldrb.w	r3, [r7, #3094]	; 0xc16
 800250a:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 800250e:	f107 0208 	add.w	r2, r7, #8
 8002512:	4413      	add	r3, r2
 8002514:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 8002518:	ee07 3a90 	vmov	s15, r3
 800251c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002520:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002524:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002528:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	edd3 7a00 	vldr	s15, [r3]
 8002534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002538:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800253c:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002540:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = ktaTemp[p] / pow(2,(double)ktaScale1);
 800254c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002550:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002554:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	edd3 7a00 	vldr	s15, [r3]
 8002560:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002564:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8002568:	ee07 3a90 	vmov	s15, r3
 800256c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002570:	eeb0 1b47 	vmov.f64	d1, d7
 8002574:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002578:	f016 f9e2 	bl	8018940 <pow>
 800257c:	eeb0 6b40 	vmov.f64	d6, d0
 8002580:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002584:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002588:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800258c:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002590:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < 32; j ++)
 800259c:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 80025a0:	3301      	adds	r3, #1
 80025a2:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 80025a6:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 80025aa:	2b1f      	cmp	r3, #31
 80025ac:	f77f af22 	ble.w	80023f4 <ExtractKtaPixelParameters+0xdc>
    for(int i = 0; i < 24; i++)
 80025b0:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 80025b4:	3301      	adds	r3, #1
 80025b6:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 80025ba:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 80025be:	2b17      	cmp	r3, #23
 80025c0:	f77f af14 	ble.w	80023ec <ExtractKtaPixelParameters+0xd4>
            //ktaTemp[p] = ktaTemp[p] * mlx90640->offset[p];
        }
    }
    
    temp = fabs(ktaTemp[0]);
 80025c4:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80025c8:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 80025cc:	edd3 7a00 	vldr	s15, [r3]
 80025d0:	eef0 7ae7 	vabs.f32	s15, s15
 80025d4:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80025d8:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 80025dc:	2301      	movs	r3, #1
 80025de:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 80025e2:	e029      	b.n	8002638 <ExtractKtaPixelParameters+0x320>
    {
        if (fabs(ktaTemp[i]) > temp)
 80025e4:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80025e8:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80025ec:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	edd3 7a00 	vldr	s15, [r3]
 80025f8:	eef0 7ae7 	vabs.f32	s15, s15
 80025fc:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8002600:	ed93 7a00 	vldr	s14, [r3]
 8002604:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260c:	d50f      	bpl.n	800262e <ExtractKtaPixelParameters+0x316>
        {
            temp = fabs(ktaTemp[i]);
 800260e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002612:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002616:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	edd3 7a00 	vldr	s15, [r3]
 8002622:	eef0 7ae7 	vabs.f32	s15, s15
 8002626:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800262a:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 800262e:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8002632:	3301      	adds	r3, #1
 8002634:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8002638:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 800263c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002640:	dbd0      	blt.n	80025e4 <ExtractKtaPixelParameters+0x2cc>
        }
    }
    
    ktaScale1 = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    while(temp < 64)
 8002648:	e00e      	b.n	8002668 <ExtractKtaPixelParameters+0x350>
    {
        temp = temp*2;
 800264a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800264e:	edd3 7a00 	vldr	s15, [r3]
 8002652:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002656:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800265a:	edc3 7a00 	vstr	s15, [r3]
        ktaScale1 = ktaScale1 + 1;
 800265e:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8002662:	3301      	adds	r3, #1
 8002664:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    while(temp < 64)
 8002668:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800266c:	edd3 7a00 	vldr	s15, [r3]
 8002670:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800277c <ExtractKtaPixelParameters+0x464>
 8002674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267c:	d4e5      	bmi.n	800264a <ExtractKtaPixelParameters+0x332>
    }    
     
    for(int i = 0; i < 768; i++)
 800267e:	2300      	movs	r3, #0
 8002680:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8002684:	e064      	b.n	8002750 <ExtractKtaPixelParameters+0x438>
    {
        temp = ktaTemp[i] * pow(2,(double)ktaScale1);
 8002686:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800268a:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800268e:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	edd3 7a00 	vldr	s15, [r3]
 800269a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800269e:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 80026a2:	ee07 3a90 	vmov	s15, r3
 80026a6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80026aa:	eeb0 1b47 	vmov.f64	d1, d7
 80026ae:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80026b2:	f016 f945 	bl	8018940 <pow>
 80026b6:	eeb0 7b40 	vmov.f64	d7, d0
 80026ba:	ee28 7b07 	vmul.f64	d7, d8, d7
 80026be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80026c2:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80026c6:	edc3 7a00 	vstr	s15, [r3]
        if (temp < 0)
 80026ca:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80026ce:	edd3 7a00 	vldr	s15, [r3]
 80026d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026da:	d51a      	bpl.n	8002712 <ExtractKtaPixelParameters+0x3fa>
        {
            mlx90640->kta[i] = (temp - 0.5f);
 80026dc:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80026e0:	edd3 7a00 	vldr	s15, [r3]
 80026e4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80026e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80026ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026f0:	edc7 7a01 	vstr	s15, [r7, #4]
 80026f4:	793b      	ldrb	r3, [r7, #4]
 80026f6:	b259      	sxtb	r1, r3
 80026f8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80026fc:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8002706:	4413      	add	r3, r2
 8002708:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 800270c:	460a      	mov	r2, r1
 800270e:	701a      	strb	r2, [r3, #0]
 8002710:	e019      	b.n	8002746 <ExtractKtaPixelParameters+0x42e>
        }
        else
        {
            mlx90640->kta[i] = (temp + 0.5f);
 8002712:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8002716:	edd3 7a00 	vldr	s15, [r3]
 800271a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800271e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002722:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002726:	edc7 7a01 	vstr	s15, [r7, #4]
 800272a:	793b      	ldrb	r3, [r7, #4]
 800272c:	b259      	sxtb	r1, r3
 800272e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002732:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 800273c:	4413      	add	r3, r2
 800273e:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8002742:	460a      	mov	r2, r1
 8002744:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 768; i++)
 8002746:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 800274a:	3301      	adds	r3, #1
 800274c:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8002750:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8002754:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002758:	db95      	blt.n	8002686 <ExtractKtaPixelParameters+0x36e>
        }        
        
    } 
    
    mlx90640->ktaScale = ktaScale1;           
 800275a:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800275e:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f897 2c37 	ldrb.w	r2, [r7, #3127]	; 0xc37
 8002768:	f883 2f4c 	strb.w	r2, [r3, #3916]	; 0xf4c
}
 800276c:	bf00      	nop
 800276e:	f607 4738 	addw	r7, r7, #3128	; 0xc38
 8002772:	46bd      	mov	sp, r7
 8002774:	ecbd 8b02 	vpop	{d8}
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	42800000 	.word	0x42800000

08002780 <ExtractKvPixelParameters>:


//------------------------------------------------------------------------------

void ExtractKvPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	ed2d 8b02 	vpush	{d8}
 8002786:	f6ad 4d38 	subw	sp, sp, #3128	; 0xc38
 800278a:	af00      	add	r7, sp, #0
 800278c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002790:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002794:	6018      	str	r0, [r3, #0]
 8002796:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800279a:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 800279e:	6019      	str	r1, [r3, #0]
    int p = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
    uint8_t kvScale;
    uint8_t split;
    float kvTemp[768];
    float temp;

    KvRoCo = (eeData[52] & 0xF000) >> 12;
 80027a6:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80027aa:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	3368      	adds	r3, #104	; 0x68
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	0b1b      	lsrs	r3, r3, #12
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    if (KvRoCo > 7)
 80027bc:	f997 3c37 	ldrsb.w	r3, [r7, #3127]	; 0xc37
 80027c0:	2b07      	cmp	r3, #7
 80027c2:	dd05      	ble.n	80027d0 <ExtractKvPixelParameters+0x50>
    {
        KvRoCo = KvRoCo - 16;
 80027c4:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 80027c8:	3b10      	subs	r3, #16
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    }
    KvT[0] = KvRoCo;
 80027d0:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 80027d4:	f887 3c10 	strb.w	r3, [r7, #3088]	; 0xc10
    
    KvReCo = (eeData[52] & 0x0F00) >> 8;
 80027d8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80027dc:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	3368      	adds	r3, #104	; 0x68
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	121b      	asrs	r3, r3, #8
 80027e8:	b25b      	sxtb	r3, r3
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	f887 3c35 	strb.w	r3, [r7, #3125]	; 0xc35
    if (KvReCo > 7)
 80027f2:	f997 3c35 	ldrsb.w	r3, [r7, #3125]	; 0xc35
 80027f6:	2b07      	cmp	r3, #7
 80027f8:	dd05      	ble.n	8002806 <ExtractKvPixelParameters+0x86>
    {
        KvReCo = KvReCo - 16;
 80027fa:	f897 3c35 	ldrb.w	r3, [r7, #3125]	; 0xc35
 80027fe:	3b10      	subs	r3, #16
 8002800:	b2db      	uxtb	r3, r3
 8002802:	f887 3c35 	strb.w	r3, [r7, #3125]	; 0xc35
    }
    KvT[2] = KvReCo;
 8002806:	f897 3c35 	ldrb.w	r3, [r7, #3125]	; 0xc35
 800280a:	f887 3c12 	strb.w	r3, [r7, #3090]	; 0xc12
      
    KvRoCe = (eeData[52] & 0x00F0) >> 4;
 800280e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002812:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	3368      	adds	r3, #104	; 0x68
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	111b      	asrs	r3, r3, #4
 800281e:	b25b      	sxtb	r3, r3
 8002820:	f003 030f 	and.w	r3, r3, #15
 8002824:	f887 3c36 	strb.w	r3, [r7, #3126]	; 0xc36
    if (KvRoCe > 7)
 8002828:	f997 3c36 	ldrsb.w	r3, [r7, #3126]	; 0xc36
 800282c:	2b07      	cmp	r3, #7
 800282e:	dd05      	ble.n	800283c <ExtractKvPixelParameters+0xbc>
    {
        KvRoCe = KvRoCe - 16;
 8002830:	f897 3c36 	ldrb.w	r3, [r7, #3126]	; 0xc36
 8002834:	3b10      	subs	r3, #16
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f887 3c36 	strb.w	r3, [r7, #3126]	; 0xc36
    }
    KvT[1] = KvRoCe;
 800283c:	f897 3c36 	ldrb.w	r3, [r7, #3126]	; 0xc36
 8002840:	f887 3c11 	strb.w	r3, [r7, #3089]	; 0xc11
      
    KvReCe = (eeData[52] & 0x000F);
 8002844:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002848:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	3368      	adds	r3, #104	; 0x68
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	b25b      	sxtb	r3, r3
 8002854:	f003 030f 	and.w	r3, r3, #15
 8002858:	f887 3c34 	strb.w	r3, [r7, #3124]	; 0xc34
    if (KvReCe > 7)
 800285c:	f997 3c34 	ldrsb.w	r3, [r7, #3124]	; 0xc34
 8002860:	2b07      	cmp	r3, #7
 8002862:	dd05      	ble.n	8002870 <ExtractKvPixelParameters+0xf0>
    {
        KvReCe = KvReCe - 16;
 8002864:	f897 3c34 	ldrb.w	r3, [r7, #3124]	; 0xc34
 8002868:	3b10      	subs	r3, #16
 800286a:	b2db      	uxtb	r3, r3
 800286c:	f887 3c34 	strb.w	r3, [r7, #3124]	; 0xc34
    }
    KvT[3] = KvReCe;
 8002870:	f897 3c34 	ldrb.w	r3, [r7, #3124]	; 0xc34
 8002874:	f887 3c13 	strb.w	r3, [r7, #3091]	; 0xc13
  
    kvScale = (eeData[56] & 0x0F00) >> 8;
 8002878:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800287c:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	3370      	adds	r3, #112	; 0x70
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	121b      	asrs	r3, r3, #8
 8002888:	b2db      	uxtb	r3, r3
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33


    for(int i = 0; i < 24; i++)
 8002892:	2300      	movs	r3, #0
 8002894:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8002898:	e075      	b.n	8002986 <ExtractKvPixelParameters+0x206>
    {
        for(int j = 0; j < 32; j ++)
 800289a:	2300      	movs	r3, #0
 800289c:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 80028a0:	e068      	b.n	8002974 <ExtractKvPixelParameters+0x1f4>
        {
            p = 32 * i +j;
 80028a2:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 80028a6:	015b      	lsls	r3, r3, #5
 80028a8:	f8d7 2c24 	ldr.w	r2, [r7, #3108]	; 0xc24
 80028ac:	4413      	add	r3, r2
 80028ae:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
            split = 2*(p/32 - (p/64)*2) + p%2;
 80028b2:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	da00      	bge.n	80028bc <ExtractKvPixelParameters+0x13c>
 80028ba:	331f      	adds	r3, #31
 80028bc:	115b      	asrs	r3, r3, #5
 80028be:	461a      	mov	r2, r3
 80028c0:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	da00      	bge.n	80028ca <ExtractKvPixelParameters+0x14a>
 80028c8:	333f      	adds	r3, #63	; 0x3f
 80028ca:	119b      	asrs	r3, r3, #6
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	bfb8      	it	lt
 80028e2:	425b      	neglt	r3, r3
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	4413      	add	r3, r2
 80028e8:	f887 3c17 	strb.w	r3, [r7, #3095]	; 0xc17
            kvTemp[p] = KvT[split];
 80028ec:	f897 3c17 	ldrb.w	r3, [r7, #3095]	; 0xc17
 80028f0:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 80028f4:	f107 0208 	add.w	r2, r7, #8
 80028f8:	4413      	add	r3, r2
 80028fa:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 80028fe:	ee07 3a90 	vmov	s15, r3
 8002902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002906:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800290a:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800290e:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	edc3 7a00 	vstr	s15, [r3]
            kvTemp[p] = kvTemp[p] / pow(2,(double)kvScale);
 800291a:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800291e:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002922:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	edd3 7a00 	vldr	s15, [r3]
 800292e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002932:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 8002936:	ee07 3a90 	vmov	s15, r3
 800293a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800293e:	eeb0 1b47 	vmov.f64	d1, d7
 8002942:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002946:	f015 fffb 	bl	8018940 <pow>
 800294a:	eeb0 6b40 	vmov.f64	d6, d0
 800294e:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002952:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002956:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800295a:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800295e:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < 32; j ++)
 800296a:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 800296e:	3301      	adds	r3, #1
 8002970:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8002974:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8002978:	2b1f      	cmp	r3, #31
 800297a:	dd92      	ble.n	80028a2 <ExtractKvPixelParameters+0x122>
    for(int i = 0; i < 24; i++)
 800297c:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8002980:	3301      	adds	r3, #1
 8002982:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8002986:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 800298a:	2b17      	cmp	r3, #23
 800298c:	dd85      	ble.n	800289a <ExtractKvPixelParameters+0x11a>
            //kvTemp[p] = kvTemp[p] * mlx90640->offset[p];
        }
    }
    
    temp = fabs(kvTemp[0]);
 800298e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002992:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8002996:	edd3 7a00 	vldr	s15, [r3]
 800299a:	eef0 7ae7 	vabs.f32	s15, s15
 800299e:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 80029a2:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 80029a6:	2301      	movs	r3, #1
 80029a8:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 80029ac:	e029      	b.n	8002a02 <ExtractKvPixelParameters+0x282>
    {
        if (fabs(kvTemp[i]) > temp)
 80029ae:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80029b2:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80029b6:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	edd3 7a00 	vldr	s15, [r3]
 80029c2:	eef0 7ae7 	vabs.f32	s15, s15
 80029c6:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 80029ca:	ed93 7a00 	vldr	s14, [r3]
 80029ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d6:	d50f      	bpl.n	80029f8 <ExtractKvPixelParameters+0x278>
        {
            temp = fabs(kvTemp[i]);
 80029d8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80029dc:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80029e0:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	edd3 7a00 	vldr	s15, [r3]
 80029ec:	eef0 7ae7 	vabs.f32	s15, s15
 80029f0:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 80029f4:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 80029f8:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80029fc:	3301      	adds	r3, #1
 80029fe:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8002a02:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8002a06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a0a:	dbd0      	blt.n	80029ae <ExtractKvPixelParameters+0x22e>
        }
    }
    
    kvScale = 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33
    while(temp < 64)
 8002a12:	e00e      	b.n	8002a32 <ExtractKvPixelParameters+0x2b2>
    {
        temp = temp*2;
 8002a14:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002a18:	edd3 7a00 	vldr	s15, [r3]
 8002a1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a20:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002a24:	edc3 7a00 	vstr	s15, [r3]
        kvScale = kvScale + 1;
 8002a28:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33
    while(temp < 64)
 8002a32:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002a36:	edd3 7a00 	vldr	s15, [r3]
 8002a3a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002b4c <ExtractKvPixelParameters+0x3cc>
 8002a3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a46:	d4e5      	bmi.n	8002a14 <ExtractKvPixelParameters+0x294>
    }    
     
    for(int i = 0; i < 768; i++)
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8002a4e:	e064      	b.n	8002b1a <ExtractKvPixelParameters+0x39a>
    {
        temp = kvTemp[i] * pow(2,(double)kvScale);
 8002a50:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002a54:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002a58:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	edd3 7a00 	vldr	s15, [r3]
 8002a64:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002a68:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 8002a6c:	ee07 3a90 	vmov	s15, r3
 8002a70:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002a74:	eeb0 1b47 	vmov.f64	d1, d7
 8002a78:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002a7c:	f015 ff60 	bl	8018940 <pow>
 8002a80:	eeb0 7b40 	vmov.f64	d7, d0
 8002a84:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002a88:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a8c:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002a90:	edc3 7a00 	vstr	s15, [r3]
        if (temp < 0)
 8002a94:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002a98:	edd3 7a00 	vldr	s15, [r3]
 8002a9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa4:	d51a      	bpl.n	8002adc <ExtractKvPixelParameters+0x35c>
        {
            mlx90640->kv[i] = (temp - 0.5f);
 8002aa6:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002aaa:	edd3 7a00 	vldr	s15, [r3]
 8002aae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ab2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ab6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002aba:	edc7 7a01 	vstr	s15, [r7, #4]
 8002abe:	793b      	ldrb	r3, [r7, #4]
 8002ac0:	b259      	sxtb	r1, r3
 8002ac2:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002ac6:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 8002ad6:	460a      	mov	r2, r1
 8002ad8:	701a      	strb	r2, [r3, #0]
 8002ada:	e019      	b.n	8002b10 <ExtractKvPixelParameters+0x390>
        }
        else
        {
            mlx90640->kv[i] = (temp + 0.5f);
 8002adc:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002ae0:	edd3 7a00 	vldr	s15, [r3]
 8002ae4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ae8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002aec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002af0:	edc7 7a01 	vstr	s15, [r7, #4]
 8002af4:	793b      	ldrb	r3, [r7, #4]
 8002af6:	b259      	sxtb	r1, r3
 8002af8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002afc:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002b06:	4413      	add	r3, r2
 8002b08:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 8002b0c:	460a      	mov	r2, r1
 8002b0e:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 768; i++)
 8002b10:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002b14:	3301      	adds	r3, #1
 8002b16:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8002b1a:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002b1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b22:	db95      	blt.n	8002a50 <ExtractKvPixelParameters+0x2d0>
        }        
        
    } 
    
    mlx90640->kvScale = kvScale;        
 8002b24:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002b28:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b32:	461a      	mov	r2, r3
 8002b34:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 8002b38:	f882 324d 	strb.w	r3, [r2, #589]	; 0x24d
}
 8002b3c:	bf00      	nop
 8002b3e:	f607 4738 	addw	r7, r7, #3128	; 0xc38
 8002b42:	46bd      	mov	sp, r7
 8002b44:	ecbd 8b02 	vpop	{d8}
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	42800000 	.word	0x42800000

08002b50 <ExtractCPParameters>:

//------------------------------------------------------------------------------

void ExtractCPParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	ed2d 8b02 	vpush	{d8}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
    float cpKta;
    uint8_t alphaScale;
    uint8_t ktaScale1;
    uint8_t kvScale;

    alphaScale = ((eeData[32] & 0xF000) >> 12) + 27;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3340      	adds	r3, #64	; 0x40
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	0b1b      	lsrs	r3, r3, #12
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	331b      	adds	r3, #27
 8002b6c:	75fb      	strb	r3, [r7, #23]
    
    offsetSP[0] = (eeData[58] & 0x03FF);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3374      	adds	r3, #116	; 0x74
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	b21b      	sxth	r3, r3
 8002b76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b7a:	b21b      	sxth	r3, r3
 8002b7c:	813b      	strh	r3, [r7, #8]
    if (offsetSP[0] > 511)
 8002b7e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b86:	db07      	blt.n	8002b98 <ExtractCPParameters+0x48>
    {
        offsetSP[0] = offsetSP[0] - 1024;
 8002b88:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	b21b      	sxth	r3, r3
 8002b96:	813b      	strh	r3, [r7, #8]
    }
    
    offsetSP[1] = (eeData[58] & 0xFC00) >> 10;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3374      	adds	r3, #116	; 0x74
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	0a9b      	lsrs	r3, r3, #10
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	b21b      	sxth	r3, r3
 8002ba4:	817b      	strh	r3, [r7, #10]
    if (offsetSP[1] > 31)
 8002ba6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002baa:	2b1f      	cmp	r3, #31
 8002bac:	dd06      	ble.n	8002bbc <ExtractCPParameters+0x6c>
    {
        offsetSP[1] = offsetSP[1] - 64;
 8002bae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b40      	subs	r3, #64	; 0x40
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	b21b      	sxth	r3, r3
 8002bba:	817b      	strh	r3, [r7, #10]
    }
    offsetSP[1] = offsetSP[1] + offsetSP[0]; 
 8002bbc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	b21b      	sxth	r3, r3
 8002bce:	817b      	strh	r3, [r7, #10]
    
    alphaSP[0] = (eeData[57] & 0x03FF);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3372      	adds	r3, #114	; 0x72
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bda:	ee07 3a90 	vmov	s15, r3
 8002bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be2:	edc7 7a03 	vstr	s15, [r7, #12]
    if (alphaSP[0] > 511)
 8002be6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bea:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8002dc0 <ExtractCPParameters+0x270>
 8002bee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf6:	dd07      	ble.n	8002c08 <ExtractCPParameters+0xb8>
    {
        alphaSP[0] = alphaSP[0] - 1024;
 8002bf8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bfc:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8002dc4 <ExtractCPParameters+0x274>
 8002c00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c04:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    alphaSP[0] = alphaSP[0] /  pow(2,(double)alphaScale);
 8002c08:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c0c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002c10:	7dfb      	ldrb	r3, [r7, #23]
 8002c12:	ee07 3a90 	vmov	s15, r3
 8002c16:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002c1a:	eeb0 1b47 	vmov.f64	d1, d7
 8002c1e:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002c22:	f015 fe8d 	bl	8018940 <pow>
 8002c26:	eeb0 6b40 	vmov.f64	d6, d0
 8002c2a:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002c2e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c32:	edc7 7a03 	vstr	s15, [r7, #12]
    
    alphaSP[1] = (eeData[57] & 0xFC00) >> 10;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3372      	adds	r3, #114	; 0x72
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	0a9b      	lsrs	r3, r3, #10
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	ee07 3a90 	vmov	s15, r3
 8002c44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c48:	edc7 7a04 	vstr	s15, [r7, #16]
    if (alphaSP[1] > 31)
 8002c4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c50:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8002c54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5c:	dd07      	ble.n	8002c6e <ExtractCPParameters+0x11e>
    {
        alphaSP[1] = alphaSP[1] - 64;
 8002c5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c62:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8002dc8 <ExtractCPParameters+0x278>
 8002c66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c6a:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    alphaSP[1] = (1 + alphaSP[1]/128) * alphaSP[0];
 8002c6e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c72:	eddf 6a56 	vldr	s13, [pc, #344]	; 8002dcc <ExtractCPParameters+0x27c>
 8002c76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002c82:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c8a:	edc7 7a04 	vstr	s15, [r7, #16]
    
    cpKta = (eeData[59] & 0x00FF);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3376      	adds	r3, #118	; 0x76
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	ee07 3a90 	vmov	s15, r3
 8002c9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c9e:	edc7 7a06 	vstr	s15, [r7, #24]
    if (cpKta > 127)
 8002ca2:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ca6:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002dd0 <ExtractCPParameters+0x280>
 8002caa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb2:	dd07      	ble.n	8002cc4 <ExtractCPParameters+0x174>
    {
        cpKta = cpKta - 256;
 8002cb4:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cb8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002dd4 <ExtractCPParameters+0x284>
 8002cbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002cc0:	edc7 7a06 	vstr	s15, [r7, #24]
    }
    ktaScale1 = ((eeData[56] & 0x00F0) >> 4) + 8;    
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3370      	adds	r3, #112	; 0x70
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	111b      	asrs	r3, r3, #4
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	3308      	adds	r3, #8
 8002cd6:	75bb      	strb	r3, [r7, #22]
    mlx90640->cpKta = cpKta / pow(2,(double)ktaScale1);
 8002cd8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cdc:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002ce0:	7dbb      	ldrb	r3, [r7, #22]
 8002ce2:	ee07 3a90 	vmov	s15, r3
 8002ce6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002cea:	eeb0 1b47 	vmov.f64	d1, d7
 8002cee:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002cf2:	f015 fe25 	bl	8018940 <pow>
 8002cf6:	eeb0 6b40 	vmov.f64	d6, d0
 8002cfa:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002cfe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	edc3 7a08 	vstr	s15, [r3, #32]
    
    cpKv = (eeData[59] & 0xFF00) >> 8;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3376      	adds	r3, #118	; 0x76
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	0a1b      	lsrs	r3, r3, #8
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	ee07 3a90 	vmov	s15, r3
 8002d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d1a:	edc7 7a07 	vstr	s15, [r7, #28]
    if (cpKv > 127)
 8002d1e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d22:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002dd0 <ExtractCPParameters+0x280>
 8002d26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2e:	dd07      	ble.n	8002d40 <ExtractCPParameters+0x1f0>
    {
        cpKv = cpKv - 256;
 8002d30:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d34:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002dd4 <ExtractCPParameters+0x284>
 8002d38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d3c:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    kvScale = (eeData[56] & 0x0F00) >> 8;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3370      	adds	r3, #112	; 0x70
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	121b      	asrs	r3, r3, #8
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	757b      	strb	r3, [r7, #21]
    mlx90640->cpKv = cpKv / pow(2,(double)kvScale);
 8002d50:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d54:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002d58:	7d7b      	ldrb	r3, [r7, #21]
 8002d5a:	ee07 3a90 	vmov	s15, r3
 8002d5e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002d62:	eeb0 1b47 	vmov.f64	d1, d7
 8002d66:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002d6a:	f015 fde9 	bl	8018940 <pow>
 8002d6e:	eeb0 6b40 	vmov.f64	d6, d0
 8002d72:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002d76:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	edc3 7a07 	vstr	s15, [r3, #28]
       
    mlx90640->cpAlpha[0] = alphaSP[0];
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d88:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    mlx90640->cpAlpha[1] = alphaSP[1];
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d94:	f8c2 3254 	str.w	r3, [r2, #596]	; 0x254
    mlx90640->cpOffset[0] = offsetSP[0];
 8002d98:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002da2:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
    mlx90640->cpOffset[1] = offsetSP[1];  
 8002da6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002db0:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
}
 8002db4:	bf00      	nop
 8002db6:	3720      	adds	r7, #32
 8002db8:	46bd      	mov	sp, r7
 8002dba:	ecbd 8b02 	vpop	{d8}
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	43ff8000 	.word	0x43ff8000
 8002dc4:	44800000 	.word	0x44800000
 8002dc8:	42800000 	.word	0x42800000
 8002dcc:	43000000 	.word	0x43000000
 8002dd0:	42fe0000 	.word	0x42fe0000
 8002dd4:	43800000 	.word	0x43800000

08002dd8 <ExtractCILCParameters>:

//------------------------------------------------------------------------------

void ExtractCILCParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
    float ilChessC[3];
    uint8_t calibrationModeEE;
    
    calibrationModeEE = (eeData[10] & 0x0800) >> 4;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3314      	adds	r3, #20
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	111b      	asrs	r3, r3, #4
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002df0:	75fb      	strb	r3, [r7, #23]
    calibrationModeEE = calibrationModeEE ^ 0x80;
 8002df2:	7dfb      	ldrb	r3, [r7, #23]
 8002df4:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	75fb      	strb	r3, [r7, #23]

    ilChessC[0] = (eeData[53] & 0x003F);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	336a      	adds	r3, #106	; 0x6a
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e06:	ee07 3a90 	vmov	s15, r3
 8002e0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e0e:	edc7 7a02 	vstr	s15, [r7, #8]
    if (ilChessC[0] > 31)
 8002e12:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e16:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8002e1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e22:	dd07      	ble.n	8002e34 <ExtractCILCParameters+0x5c>
    {
        ilChessC[0] = ilChessC[0] - 64;
 8002e24:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e28:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002f10 <ExtractCILCParameters+0x138>
 8002e2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e30:	edc7 7a02 	vstr	s15, [r7, #8]
    }
    ilChessC[0] = ilChessC[0] / 16.0f;
 8002e34:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e38:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002e3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e40:	edc7 7a02 	vstr	s15, [r7, #8]
    
    ilChessC[1] = (eeData[53] & 0x07C0) >> 6;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	336a      	adds	r3, #106	; 0x6a
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	119b      	asrs	r3, r3, #6
 8002e4c:	f003 031f 	and.w	r3, r3, #31
 8002e50:	ee07 3a90 	vmov	s15, r3
 8002e54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e58:	edc7 7a03 	vstr	s15, [r7, #12]
    if (ilChessC[1] > 15)
 8002e5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e60:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8002e64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e6c:	dd07      	ble.n	8002e7e <ExtractCILCParameters+0xa6>
    {
        ilChessC[1] = ilChessC[1] - 32;
 8002e6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e72:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002f14 <ExtractCILCParameters+0x13c>
 8002e76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e7a:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    ilChessC[1] = ilChessC[1] / 2.0f;
 8002e7e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e82:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002e86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e8a:	edc7 7a03 	vstr	s15, [r7, #12]
    
    ilChessC[2] = (eeData[53] & 0xF800) >> 11;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	336a      	adds	r3, #106	; 0x6a
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	0adb      	lsrs	r3, r3, #11
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	ee07 3a90 	vmov	s15, r3
 8002e9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ea0:	edc7 7a04 	vstr	s15, [r7, #16]
    if (ilChessC[2] > 15)
 8002ea4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ea8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8002eac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb4:	dd07      	ble.n	8002ec6 <ExtractCILCParameters+0xee>
    {
        ilChessC[2] = ilChessC[2] - 32;
 8002eb6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002eba:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002f14 <ExtractCILCParameters+0x13c>
 8002ebe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ec2:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    ilChessC[2] = ilChessC[2] / 8.0f;
 8002ec6:	ed97 7a04 	vldr	s14, [r7, #16]
 8002eca:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002ece:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ed2:	edc7 7a04 	vstr	s15, [r7, #16]
    
    mlx90640->calibrationModeEE = calibrationModeEE;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	7dfa      	ldrb	r2, [r7, #23]
 8002eda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    mlx90640->ilChessC[0] = ilChessC[0];
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ee6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
    mlx90640->ilChessC[1] = ilChessC[1];
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ef2:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
    mlx90640->ilChessC[2] = ilChessC[2];
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002efe:	f8c2 3264 	str.w	r3, [r2, #612]	; 0x264
}
 8002f02:	bf00      	nop
 8002f04:	371c      	adds	r7, #28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	42800000 	.word	0x42800000
 8002f14:	42000000 	.word	0x42000000

08002f18 <ExtractDeviatingPixels>:

//------------------------------------------------------------------------------

int ExtractDeviatingPixels(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
    uint16_t pixCnt = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	82fb      	strh	r3, [r7, #22]
    uint16_t brokenPixCnt = 0;
 8002f26:	2300      	movs	r3, #0
 8002f28:	82bb      	strh	r3, [r7, #20]
    uint16_t outlierPixCnt = 0;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	827b      	strh	r3, [r7, #18]
    int warn = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
    int i;
    
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 8002f32:	2300      	movs	r3, #0
 8002f34:	82fb      	strh	r3, [r7, #22]
 8002f36:	e013      	b.n	8002f60 <ExtractDeviatingPixels+0x48>
    {
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
 8002f38:	8afa      	ldrh	r2, [r7, #22]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8002f40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002f44:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        mlx90640->outlierPixels[pixCnt] = 0xFFFF;
 8002f48:	8afb      	ldrh	r3, [r7, #22]
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	4413      	add	r3, r2
 8002f54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f58:	805a      	strh	r2, [r3, #2]
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 8002f5a:	8afb      	ldrh	r3, [r7, #22]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	82fb      	strh	r3, [r7, #22]
 8002f60:	8afb      	ldrh	r3, [r7, #22]
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d9e8      	bls.n	8002f38 <ExtractDeviatingPixels+0x20>
    }
        
    pixCnt = 0;    
 8002f66:	2300      	movs	r3, #0
 8002f68:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < 768 && brokenPixCnt < 5 && outlierPixCnt < 5)
 8002f6a:	e02a      	b.n	8002fc2 <ExtractDeviatingPixels+0xaa>
    {
        if(eeData[pixCnt+64] == 0)
 8002f6c:	8afb      	ldrh	r3, [r7, #22]
 8002f6e:	3340      	adds	r3, #64	; 0x40
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	881b      	ldrh	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10a      	bne.n	8002f92 <ExtractDeviatingPixels+0x7a>
        {
            mlx90640->brokenPixels[brokenPixCnt] = pixCnt;
 8002f7c:	8aba      	ldrh	r2, [r7, #20]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8002f84:	8af9      	ldrh	r1, [r7, #22]
 8002f86:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            brokenPixCnt = brokenPixCnt + 1;
 8002f8a:	8abb      	ldrh	r3, [r7, #20]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	82bb      	strh	r3, [r7, #20]
 8002f90:	e014      	b.n	8002fbc <ExtractDeviatingPixels+0xa4>
        }    
        else if((eeData[pixCnt+64] & 0x0001) != 0)
 8002f92:	8afb      	ldrh	r3, [r7, #22]
 8002f94:	3340      	adds	r3, #64	; 0x40
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <ExtractDeviatingPixels+0xa4>
        {
            mlx90640->outlierPixels[outlierPixCnt] = pixCnt;
 8002fa6:	8a7b      	ldrh	r3, [r7, #18]
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	4413      	add	r3, r2
 8002fb2:	8afa      	ldrh	r2, [r7, #22]
 8002fb4:	805a      	strh	r2, [r3, #2]
            outlierPixCnt = outlierPixCnt + 1;
 8002fb6:	8a7b      	ldrh	r3, [r7, #18]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	827b      	strh	r3, [r7, #18]
        }    
        
        pixCnt = pixCnt + 1;
 8002fbc:	8afb      	ldrh	r3, [r7, #22]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < 768 && brokenPixCnt < 5 && outlierPixCnt < 5)
 8002fc2:	8afb      	ldrh	r3, [r7, #22]
 8002fc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fc8:	d205      	bcs.n	8002fd6 <ExtractDeviatingPixels+0xbe>
 8002fca:	8abb      	ldrh	r3, [r7, #20]
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d802      	bhi.n	8002fd6 <ExtractDeviatingPixels+0xbe>
 8002fd0:	8a7b      	ldrh	r3, [r7, #18]
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d9ca      	bls.n	8002f6c <ExtractDeviatingPixels+0x54>
        
    } 
    
    if(brokenPixCnt > 4)  
 8002fd6:	8abb      	ldrh	r3, [r7, #20]
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d903      	bls.n	8002fe4 <ExtractDeviatingPixels+0xcc>
    {
        warn = -3;
 8002fdc:	f06f 0302 	mvn.w	r3, #2
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	e08f      	b.n	8003104 <ExtractDeviatingPixels+0x1ec>
    }         
    else if(outlierPixCnt > 4)  
 8002fe4:	8a7b      	ldrh	r3, [r7, #18]
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d903      	bls.n	8002ff2 <ExtractDeviatingPixels+0xda>
    {
        warn = -4;
 8002fea:	f06f 0303 	mvn.w	r3, #3
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	e088      	b.n	8003104 <ExtractDeviatingPixels+0x1ec>
    }
    else if((brokenPixCnt + outlierPixCnt) > 4)  
 8002ff2:	8aba      	ldrh	r2, [r7, #20]
 8002ff4:	8a7b      	ldrh	r3, [r7, #18]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	dd03      	ble.n	8003004 <ExtractDeviatingPixels+0xec>
    {
        warn = -5;
 8002ffc:	f06f 0304 	mvn.w	r3, #4
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	e07f      	b.n	8003104 <ExtractDeviatingPixels+0x1ec>
    } 
    else
    {
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8003004:	2300      	movs	r3, #0
 8003006:	82fb      	strh	r3, [r7, #22]
 8003008:	e022      	b.n	8003050 <ExtractDeviatingPixels+0x138>
        {
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 800300a:	8afb      	ldrh	r3, [r7, #22]
 800300c:	3301      	adds	r3, #1
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	e017      	b.n	8003042 <ExtractDeviatingPixels+0x12a>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->brokenPixels[i]);
 8003012:	8afa      	ldrh	r2, [r7, #22]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	f602 1234 	addw	r2, r2, #2356	; 0x934
 800301a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8003026:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800302a:	4619      	mov	r1, r3
 800302c:	f000 f86f 	bl	800310e <CheckAdjacentPixels>
 8003030:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <ExtractDeviatingPixels+0x124>
                {
                    return warn;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	e064      	b.n	8003106 <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	3301      	adds	r3, #1
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	8abb      	ldrh	r3, [r7, #20]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	429a      	cmp	r2, r3
 8003048:	dbe3      	blt.n	8003012 <ExtractDeviatingPixels+0xfa>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 800304a:	8afb      	ldrh	r3, [r7, #22]
 800304c:	3301      	adds	r3, #1
 800304e:	82fb      	strh	r3, [r7, #22]
 8003050:	8afa      	ldrh	r2, [r7, #22]
 8003052:	8abb      	ldrh	r3, [r7, #20]
 8003054:	429a      	cmp	r2, r3
 8003056:	d3d8      	bcc.n	800300a <ExtractDeviatingPixels+0xf2>
                }    
            }    
        }
        
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 8003058:	2300      	movs	r3, #0
 800305a:	82fb      	strh	r3, [r7, #22]
 800305c:	e024      	b.n	80030a8 <ExtractDeviatingPixels+0x190>
        {
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 800305e:	8afb      	ldrh	r3, [r7, #22]
 8003060:	3301      	adds	r3, #1
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	e019      	b.n	800309a <ExtractDeviatingPixels+0x182>
            {
                warn = CheckAdjacentPixels(mlx90640->outlierPixels[pixCnt],mlx90640->outlierPixels[i]);
 8003066:	8afb      	ldrh	r3, [r7, #22]
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	f603 1338 	addw	r3, r3, #2360	; 0x938
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	4413      	add	r3, r2
 8003072:	8858      	ldrh	r0, [r3, #2]
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f603 1338 	addw	r3, r3, #2360	; 0x938
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	4413      	add	r3, r2
 8003080:	885b      	ldrh	r3, [r3, #2]
 8003082:	4619      	mov	r1, r3
 8003084:	f000 f843 	bl	800310e <CheckAdjacentPixels>
 8003088:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <ExtractDeviatingPixels+0x17c>
                {
                    return warn;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	e038      	b.n	8003106 <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	3301      	adds	r3, #1
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	8a7b      	ldrh	r3, [r7, #18]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	429a      	cmp	r2, r3
 80030a0:	dbe1      	blt.n	8003066 <ExtractDeviatingPixels+0x14e>
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 80030a2:	8afb      	ldrh	r3, [r7, #22]
 80030a4:	3301      	adds	r3, #1
 80030a6:	82fb      	strh	r3, [r7, #22]
 80030a8:	8afa      	ldrh	r2, [r7, #22]
 80030aa:	8a7b      	ldrh	r3, [r7, #18]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d3d6      	bcc.n	800305e <ExtractDeviatingPixels+0x146>
                }    
            }    
        } 
        
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 80030b0:	2300      	movs	r3, #0
 80030b2:	82fb      	strh	r3, [r7, #22]
 80030b4:	e022      	b.n	80030fc <ExtractDeviatingPixels+0x1e4>
        {
            for(i=0; i<outlierPixCnt; i++)
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	e018      	b.n	80030ee <ExtractDeviatingPixels+0x1d6>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->outlierPixels[i]);
 80030bc:	8afa      	ldrh	r2, [r7, #22]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	f602 1234 	addw	r2, r2, #2356	; 0x934
 80030c4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f603 1338 	addw	r3, r3, #2360	; 0x938
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	4413      	add	r3, r2
 80030d4:	885b      	ldrh	r3, [r3, #2]
 80030d6:	4619      	mov	r1, r3
 80030d8:	f000 f819 	bl	800310e <CheckAdjacentPixels>
 80030dc:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <ExtractDeviatingPixels+0x1d0>
                {
                    return warn;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	e00e      	b.n	8003106 <ExtractDeviatingPixels+0x1ee>
            for(i=0; i<outlierPixCnt; i++)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	3301      	adds	r3, #1
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	8a7b      	ldrh	r3, [r7, #18]
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	dbe2      	blt.n	80030bc <ExtractDeviatingPixels+0x1a4>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 80030f6:	8afb      	ldrh	r3, [r7, #22]
 80030f8:	3301      	adds	r3, #1
 80030fa:	82fb      	strh	r3, [r7, #22]
 80030fc:	8afa      	ldrh	r2, [r7, #22]
 80030fe:	8abb      	ldrh	r3, [r7, #20]
 8003100:	429a      	cmp	r2, r3
 8003102:	d3d8      	bcc.n	80030b6 <ExtractDeviatingPixels+0x19e>
        }    
        
    }    
    
    
    return warn;
 8003104:	68fb      	ldr	r3, [r7, #12]
       
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <CheckAdjacentPixels>:

//------------------------------------------------------------------------------

 int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2)
 {
 800310e:	b480      	push	{r7}
 8003110:	b085      	sub	sp, #20
 8003112:	af00      	add	r7, sp, #0
 8003114:	4603      	mov	r3, r0
 8003116:	460a      	mov	r2, r1
 8003118:	80fb      	strh	r3, [r7, #6]
 800311a:	4613      	mov	r3, r2
 800311c:	80bb      	strh	r3, [r7, #4]
     int pixPosDif;
     
     pixPosDif = pix1 - pix2;
 800311e:	88fa      	ldrh	r2, [r7, #6]
 8003120:	88bb      	ldrh	r3, [r7, #4]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	60fb      	str	r3, [r7, #12]
     if(pixPosDif > -34 && pixPosDif < -30)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f113 0f21 	cmn.w	r3, #33	; 0x21
 800312c:	db06      	blt.n	800313c <CheckAdjacentPixels+0x2e>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f113 0f1e 	cmn.w	r3, #30
 8003134:	da02      	bge.n	800313c <CheckAdjacentPixels+0x2e>
     {
         return -6;
 8003136:	f06f 0305 	mvn.w	r3, #5
 800313a:	e013      	b.n	8003164 <CheckAdjacentPixels+0x56>
     } 
     if(pixPosDif > -2 && pixPosDif < 2)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003142:	db05      	blt.n	8003150 <CheckAdjacentPixels+0x42>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b01      	cmp	r3, #1
 8003148:	dc02      	bgt.n	8003150 <CheckAdjacentPixels+0x42>
     {
         return -6;
 800314a:	f06f 0305 	mvn.w	r3, #5
 800314e:	e009      	b.n	8003164 <CheckAdjacentPixels+0x56>
     } 
     if(pixPosDif > 30 && pixPosDif < 34)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b1e      	cmp	r3, #30
 8003154:	dd05      	ble.n	8003162 <CheckAdjacentPixels+0x54>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2b21      	cmp	r3, #33	; 0x21
 800315a:	dc02      	bgt.n	8003162 <CheckAdjacentPixels+0x54>
     {
         return -6;
 800315c:	f06f 0305 	mvn.w	r3, #5
 8003160:	e000      	b.n	8003164 <CheckAdjacentPixels+0x56>
     }
     
     return 0;    
 8003162:	2300      	movs	r3, #0
 }
 8003164:	4618      	mov	r0, r3
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <MLX90640_I2CRead>:
	MX_I2C1_Init();
}


int MLX90640_I2CRead(uint8_t slaveAddr, uint16_t startAddress, uint16_t nMemAddressRead, uint16_t *data,I2C_HandleTypeDef * i2c)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08c      	sub	sp, #48	; 0x30
 8003174:	af04      	add	r7, sp, #16
 8003176:	607b      	str	r3, [r7, #4]
 8003178:	4603      	mov	r3, r0
 800317a:	73fb      	strb	r3, [r7, #15]
 800317c:	460b      	mov	r3, r1
 800317e:	81bb      	strh	r3, [r7, #12]
 8003180:	4613      	mov	r3, r2
 8003182:	817b      	strh	r3, [r7, #10]

	uint8_t* p = (uint8_t*) data;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	61bb      	str	r3, [r7, #24]

	int ack = 0;                               
 8003188:	2300      	movs	r3, #0
 800318a:	617b      	str	r3, [r7, #20]
	int cnt = 0;
 800318c:	2300      	movs	r3, #0
 800318e:	61fb      	str	r3, [r7, #28]
	
	ack = HAL_I2C_Mem_Read(&hi2c1, (slaveAddr<<1), startAddress, I2C_MEMADD_SIZE_16BIT, p, nMemAddressRead*2, 500);
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	b29b      	uxth	r3, r3
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	b299      	uxth	r1, r3
 8003198:	897b      	ldrh	r3, [r7, #10]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	b29b      	uxth	r3, r3
 800319e:	89ba      	ldrh	r2, [r7, #12]
 80031a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80031a4:	9002      	str	r0, [sp, #8]
 80031a6:	9301      	str	r3, [sp, #4]
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	2302      	movs	r3, #2
 80031ae:	4817      	ldr	r0, [pc, #92]	; (800320c <MLX90640_I2CRead+0x9c>)
 80031b0:	f005 fec6 	bl	8008f40 <HAL_I2C_Mem_Read>
 80031b4:	4603      	mov	r3, r0
 80031b6:	617b      	str	r3, [r7, #20]

	if (ack != HAL_OK)
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <MLX90640_I2CRead+0x54>
	{
			return -1;
 80031be:	f04f 33ff 	mov.w	r3, #4294967295
 80031c2:	e01f      	b.n	8003204 <MLX90640_I2CRead+0x94>
	}
	

	for(cnt=0; cnt < nMemAddressRead*2; cnt+=2) {
 80031c4:	2300      	movs	r3, #0
 80031c6:	61fb      	str	r3, [r7, #28]
 80031c8:	e016      	b.n	80031f8 <MLX90640_I2CRead+0x88>
		uint8_t tempBuffer = p[cnt+1];
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	3301      	adds	r3, #1
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4413      	add	r3, r2
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	74fb      	strb	r3, [r7, #19]
		p[cnt+1] = p[cnt];
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	441a      	add	r2, r3
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	3301      	adds	r3, #1
 80031e0:	69b9      	ldr	r1, [r7, #24]
 80031e2:	440b      	add	r3, r1
 80031e4:	7812      	ldrb	r2, [r2, #0]
 80031e6:	701a      	strb	r2, [r3, #0]
		p[cnt] = tempBuffer;
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4413      	add	r3, r2
 80031ee:	7cfa      	ldrb	r2, [r7, #19]
 80031f0:	701a      	strb	r2, [r3, #0]
	for(cnt=0; cnt < nMemAddressRead*2; cnt+=2) {
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	3302      	adds	r3, #2
 80031f6:	61fb      	str	r3, [r7, #28]
 80031f8:	897b      	ldrh	r3, [r7, #10]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	69fa      	ldr	r2, [r7, #28]
 80031fe:	429a      	cmp	r2, r3
 8003200:	dbe3      	blt.n	80031ca <MLX90640_I2CRead+0x5a>
	}

	return 0;   
 8003202:	2300      	movs	r3, #0
} 
 8003204:	4618      	mov	r0, r3
 8003206:	3720      	adds	r7, #32
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	20000ff8 	.word	0x20000ff8

08003210 <MLX90640_I2CWrite>:


int MLX90640_I2CWrite(uint8_t slaveAddr, uint16_t writeAddress, uint16_t data,I2C_HandleTypeDef * i2c)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	; 0x28
 8003214:	af04      	add	r7, sp, #16
 8003216:	607b      	str	r3, [r7, #4]
 8003218:	4603      	mov	r3, r0
 800321a:	73fb      	strb	r3, [r7, #15]
 800321c:	460b      	mov	r3, r1
 800321e:	81bb      	strh	r3, [r7, #12]
 8003220:	4613      	mov	r3, r2
 8003222:	817b      	strh	r3, [r7, #10]

	uint8_t sa;
	int ack = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
	uint8_t cmd[2];
	static uint16_t dataCheck;

	sa = (slaveAddr << 1);
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	74fb      	strb	r3, [r7, #19]

	cmd[0] = data >> 8;
 800322e:	897b      	ldrh	r3, [r7, #10]
 8003230:	0a1b      	lsrs	r3, r3, #8
 8003232:	b29b      	uxth	r3, r3
 8003234:	b2db      	uxtb	r3, r3
 8003236:	743b      	strb	r3, [r7, #16]
	cmd[1] = data & 0x00FF;
 8003238:	897b      	ldrh	r3, [r7, #10]
 800323a:	b2db      	uxtb	r3, r3
 800323c:	747b      	strb	r3, [r7, #17]


	ack = HAL_I2C_Mem_Write(&hi2c1, sa, writeAddress, I2C_MEMADD_SIZE_16BIT, cmd, sizeof(cmd), 500);
 800323e:	7cfb      	ldrb	r3, [r7, #19]
 8003240:	b299      	uxth	r1, r3
 8003242:	89ba      	ldrh	r2, [r7, #12]
 8003244:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003248:	9302      	str	r3, [sp, #8]
 800324a:	2302      	movs	r3, #2
 800324c:	9301      	str	r3, [sp, #4]
 800324e:	f107 0310 	add.w	r3, r7, #16
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	2302      	movs	r3, #2
 8003256:	4810      	ldr	r0, [pc, #64]	; (8003298 <MLX90640_I2CWrite+0x88>)
 8003258:	f005 fd5e 	bl	8008d18 <HAL_I2C_Mem_Write>
 800325c:	4603      	mov	r3, r0
 800325e:	617b      	str	r3, [r7, #20]

	if (ack != HAL_OK)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <MLX90640_I2CWrite+0x5c>
	{
			return -1;
 8003266:	f04f 33ff 	mov.w	r3, #4294967295
 800326a:	e010      	b.n	800328e <MLX90640_I2CWrite+0x7e>
	}         
	
	MLX90640_I2CRead(slaveAddr,writeAddress,1, &dataCheck,i2c);
 800326c:	89b9      	ldrh	r1, [r7, #12]
 800326e:	7bf8      	ldrb	r0, [r7, #15]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	4b09      	ldr	r3, [pc, #36]	; (800329c <MLX90640_I2CWrite+0x8c>)
 8003276:	2201      	movs	r2, #1
 8003278:	f7ff ff7a 	bl	8003170 <MLX90640_I2CRead>
	
	if ( dataCheck != data)
 800327c:	4b07      	ldr	r3, [pc, #28]	; (800329c <MLX90640_I2CWrite+0x8c>)
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	897a      	ldrh	r2, [r7, #10]
 8003282:	429a      	cmp	r2, r3
 8003284:	d002      	beq.n	800328c <MLX90640_I2CWrite+0x7c>
	{
			return -2;
 8003286:	f06f 0301 	mvn.w	r3, #1
 800328a:	e000      	b.n	800328e <MLX90640_I2CWrite+0x7e>
	}    
	
	return 0;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	20000ff8 	.word	0x20000ff8
 800329c:	20000e84 	.word	0x20000e84

080032a0 <MPU9250_IsConnected>:
__weak void MPU9250_OnActivate()
{
}
#ifndef USE_SPI
bool MPU9250_IsConnected()
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&_MPU9250_I2C,_dev_add,1,HAL_MAX_DELAY)==HAL_OK)
 80032a4:	21d0      	movs	r1, #208	; 0xd0
 80032a6:	f04f 33ff 	mov.w	r3, #4294967295
 80032aa:	2201      	movs	r2, #1
 80032ac:	4805      	ldr	r0, [pc, #20]	; (80032c4 <MPU9250_IsConnected+0x24>)
 80032ae:	f005 ff61 	bl	8009174 <HAL_I2C_IsDeviceReady>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <MPU9250_IsConnected+0x1c>
		return true;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e000      	b.n	80032be <MPU9250_IsConnected+0x1e>
	else
		return false;	
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	20001044 	.word	0x20001044

080032c8 <MPU_I2C_Write>:

void MPU_I2C_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af04      	add	r7, sp, #16
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	70fb      	strb	r3, [r7, #3]
 80032d4:	4613      	mov	r3, r2
 80032d6:	803b      	strh	r3, [r7, #0]
	HAL_I2C_Mem_Write(&_MPU9250_I2C,_dev_add,WriteAddr,I2C_MEMADD_SIZE_8BIT,pBuffer,NumByteToWrite,HAL_MAX_DELAY);
 80032d8:	21d0      	movs	r1, #208	; 0xd0
 80032da:	78fb      	ldrb	r3, [r7, #3]
 80032dc:	b29a      	uxth	r2, r3
 80032de:	f04f 33ff 	mov.w	r3, #4294967295
 80032e2:	9302      	str	r3, [sp, #8]
 80032e4:	883b      	ldrh	r3, [r7, #0]
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	2301      	movs	r3, #1
 80032ee:	4803      	ldr	r0, [pc, #12]	; (80032fc <MPU_I2C_Write+0x34>)
 80032f0:	f005 fd12 	bl	8008d18 <HAL_I2C_Mem_Write>
}
 80032f4:	bf00      	nop
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	20001044 	.word	0x20001044

08003300 <MPU_I2C_Read>:

void MPU_I2C_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af02      	add	r7, sp, #8
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	460b      	mov	r3, r1
 800330a:	70fb      	strb	r3, [r7, #3]
 800330c:	4613      	mov	r3, r2
 800330e:	803b      	strh	r3, [r7, #0]
	uint8_t data = ReadAddr | READWRITE_CMD;
 8003310:	2280      	movs	r2, #128	; 0x80
 8003312:	78fb      	ldrb	r3, [r7, #3]
 8003314:	4313      	orrs	r3, r2
 8003316:	b2db      	uxtb	r3, r3
 8003318:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&_MPU9250_I2C,_dev_add,&data,1,HAL_MAX_DELAY);
 800331a:	21d0      	movs	r1, #208	; 0xd0
 800331c:	f107 020f 	add.w	r2, r7, #15
 8003320:	f04f 33ff 	mov.w	r3, #4294967295
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	2301      	movs	r3, #1
 8003328:	4807      	ldr	r0, [pc, #28]	; (8003348 <MPU_I2C_Read+0x48>)
 800332a:	f005 fb0b 	bl	8008944 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&_MPU9250_I2C,_dev_add,pBuffer,NumByteToRead,HAL_MAX_DELAY);
 800332e:	21d0      	movs	r1, #208	; 0xd0
 8003330:	883b      	ldrh	r3, [r7, #0]
 8003332:	f04f 32ff 	mov.w	r2, #4294967295
 8003336:	9200      	str	r2, [sp, #0]
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	4803      	ldr	r0, [pc, #12]	; (8003348 <MPU_I2C_Read+0x48>)
 800333c:	f005 fbf6 	bl	8008b2c <HAL_I2C_Master_Receive>
}
 8003340:	bf00      	nop
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	20001044 	.word	0x20001044

0800334c <writeRegister>:
	MPU9250_Deactivate();
}
#endif
/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	460a      	mov	r2, r1
 8003356:	71fb      	strb	r3, [r7, #7]
 8003358:	4613      	mov	r3, r2
 800335a:	71bb      	strb	r3, [r7, #6]
	#ifdef USE_SPI
	MPU_SPI_Write(&data, subAddress, 1);
	#else
	MPU_I2C_Write(&data, subAddress, 1);
 800335c:	79f9      	ldrb	r1, [r7, #7]
 800335e:	1dbb      	adds	r3, r7, #6
 8003360:	2201      	movs	r2, #1
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff ffb0 	bl	80032c8 <MPU_I2C_Write>
	#endif
	HAL_Delay(10);
 8003368:	200a      	movs	r0, #10
 800336a:	f003 fa6d 	bl	8006848 <HAL_Delay>
}
 800336e:	bf00      	nop
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 8003376:	b580      	push	{r7, lr}
 8003378:	b082      	sub	sp, #8
 800337a:	af00      	add	r7, sp, #0
 800337c:	4603      	mov	r3, r0
 800337e:	603a      	str	r2, [r7, #0]
 8003380:	71fb      	strb	r3, [r7, #7]
 8003382:	460b      	mov	r3, r1
 8003384:	71bb      	strb	r3, [r7, #6]
	#ifdef USE_SPI
	MPU_SPI_Read(dest, subAddress, count);
	#else
	MPU_I2C_Read(dest, subAddress, count);
 8003386:	79bb      	ldrb	r3, [r7, #6]
 8003388:	b29a      	uxth	r2, r3
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	4619      	mov	r1, r3
 800338e:	6838      	ldr	r0, [r7, #0]
 8003390:	f7ff ffb6 	bl	8003300 <MPU_I2C_Read>
	#endif
}
 8003394:	bf00      	nop
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	460a      	mov	r2, r1
 80033a6:	71fb      	strb	r3, [r7, #7]
 80033a8:	4613      	mov	r3, r2
 80033aa:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for write
	writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 80033ac:	2325      	movs	r3, #37	; 0x25
 80033ae:	220c      	movs	r2, #12
 80033b0:	4611      	mov	r1, r2
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff ffca 	bl	800334c <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 80033b8:	2226      	movs	r2, #38	; 0x26
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	4619      	mov	r1, r3
 80033be:	4610      	mov	r0, r2
 80033c0:	f7ff ffc4 	bl	800334c <writeRegister>

	// store the data for write
	writeRegister(I2C_SLV0_DO,data);
 80033c4:	2263      	movs	r2, #99	; 0x63
 80033c6:	79bb      	ldrb	r3, [r7, #6]
 80033c8:	4619      	mov	r1, r3
 80033ca:	4610      	mov	r0, r2
 80033cc:	f7ff ffbe 	bl	800334c <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 80033d0:	2227      	movs	r2, #39	; 0x27
 80033d2:	2380      	movs	r3, #128	; 0x80
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	4619      	mov	r1, r3
 80033dc:	4610      	mov	r0, r2
 80033de:	f7ff ffb5 	bl	800334c <writeRegister>
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	4603      	mov	r3, r0
 80033f2:	603a      	str	r2, [r7, #0]
 80033f4:	71fb      	strb	r3, [r7, #7]
 80033f6:	460b      	mov	r3, r1
 80033f8:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 80033fa:	2025      	movs	r0, #37	; 0x25
 80033fc:	220c      	movs	r2, #12
 80033fe:	2380      	movs	r3, #128	; 0x80
 8003400:	4313      	orrs	r3, r2
 8003402:	b2db      	uxtb	r3, r3
 8003404:	4619      	mov	r1, r3
 8003406:	f7ff ffa1 	bl	800334c <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 800340a:	2226      	movs	r2, #38	; 0x26
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	4619      	mov	r1, r3
 8003410:	4610      	mov	r0, r2
 8003412:	f7ff ff9b 	bl	800334c <writeRegister>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 8003416:	2027      	movs	r0, #39	; 0x27
 8003418:	2280      	movs	r2, #128	; 0x80
 800341a:	79bb      	ldrb	r3, [r7, #6]
 800341c:	4313      	orrs	r3, r2
 800341e:	b2db      	uxtb	r3, r3
 8003420:	4619      	mov	r1, r3
 8003422:	f7ff ff93 	bl	800334c <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 8003426:	2001      	movs	r0, #1
 8003428:	f003 fa0e 	bl	8006848 <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
 800342c:	2049      	movs	r0, #73	; 0x49
 800342e:	79bb      	ldrb	r3, [r7, #6]
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	4619      	mov	r1, r3
 8003434:	f7ff ff9f 	bl	8003376 <readRegisters>
}
 8003438:	bf00      	nop
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(){
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I,1,_buffer);
 8003444:	2375      	movs	r3, #117	; 0x75
 8003446:	4a04      	ldr	r2, [pc, #16]	; (8003458 <whoAmI+0x18>)
 8003448:	2101      	movs	r1, #1
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff ff93 	bl	8003376 <readRegisters>

	// return the register value
	return _buffer[0];
 8003450:	4b01      	ldr	r3, [pc, #4]	; (8003458 <whoAmI+0x18>)
 8003452:	781b      	ldrb	r3, [r3, #0]
}
 8003454:	4618      	mov	r0, r3
 8003456:	bd80      	pop	{r7, pc}
 8003458:	20000e88 	.word	0x20000e88

0800345c <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(){
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readAK8963Registers(AK8963_WHO_AM_I,1,_buffer);
 8003460:	2300      	movs	r3, #0
 8003462:	4a04      	ldr	r2, [pc, #16]	; (8003474 <whoAmIAK8963+0x18>)
 8003464:	2101      	movs	r1, #1
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff ffbf 	bl	80033ea <readAK8963Registers>
	// return the register value
	return _buffer[0];
 800346c:	4b01      	ldr	r3, [pc, #4]	; (8003474 <whoAmIAK8963+0x18>)
 800346e:	781b      	ldrb	r3, [r3, #0]
}
 8003470:	4618      	mov	r0, r3
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20000e88 	.word	0x20000e88

08003478 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init()
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
	#ifndef USE_SPI
	int tries = 0;
 800347e:	2300      	movs	r3, #0
 8003480:	607b      	str	r3, [r7, #4]
	while(MPU9250_IsConnected() == false && tries < 5)
 8003482:	e005      	b.n	8003490 <MPU9250_Init+0x18>
	{
		tries++;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3301      	adds	r3, #1
 8003488:	607b      	str	r3, [r7, #4]
		HAL_Delay(100);
 800348a:	2064      	movs	r0, #100	; 0x64
 800348c:	f003 f9dc 	bl	8006848 <HAL_Delay>
	while(MPU9250_IsConnected() == false && tries < 5)
 8003490:	f7ff ff06 	bl	80032a0 <MPU9250_IsConnected>
 8003494:	4603      	mov	r3, r0
 8003496:	f083 0301 	eor.w	r3, r3, #1
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <MPU9250_Init+0x2e>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	ddee      	ble.n	8003484 <MPU9250_Init+0xc>
	}
	if(tries == 5)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b05      	cmp	r3, #5
 80034aa:	d101      	bne.n	80034b0 <MPU9250_Init+0x38>
	{
		return 1;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0a5      	b.n	80035fc <MPU9250_Init+0x184>
	}
	#endif
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 80034b0:	236b      	movs	r3, #107	; 0x6b
 80034b2:	2201      	movs	r2, #1
 80034b4:	4611      	mov	r1, r2
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff ff48 	bl	800334c <writeRegister>
	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 80034bc:	236a      	movs	r3, #106	; 0x6a
 80034be:	2220      	movs	r2, #32
 80034c0:	4611      	mov	r1, r2
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff ff42 	bl	800334c <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 80034c8:	2324      	movs	r3, #36	; 0x24
 80034ca:	220d      	movs	r2, #13
 80034cc:	4611      	mov	r1, r2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff ff3c 	bl	800334c <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80034d4:	230a      	movs	r3, #10
 80034d6:	2200      	movs	r2, #0
 80034d8:	4611      	mov	r1, r2
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff ff5e 	bl	800339c <writeAK8963Register>
	// reset the MPU9250
	writeRegister(PWR_MGMNT_1,PWR_RESET);
 80034e0:	236b      	movs	r3, #107	; 0x6b
 80034e2:	2280      	movs	r2, #128	; 0x80
 80034e4:	4611      	mov	r1, r2
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff ff30 	bl	800334c <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 80034ec:	200a      	movs	r0, #10
 80034ee:	f003 f9ab 	bl	8006848 <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
 80034f2:	230b      	movs	r3, #11
 80034f4:	2201      	movs	r2, #1
 80034f6:	4611      	mov	r1, r2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff ff4f 	bl	800339c <writeAK8963Register>
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 80034fe:	236b      	movs	r3, #107	; 0x6b
 8003500:	2201      	movs	r2, #1
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff ff21 	bl	800334c <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI();
 800350a:	f7ff ff99 	bl	8003440 <whoAmI>
 800350e:	4603      	mov	r3, r0
 8003510:	70fb      	strb	r3, [r7, #3]
	if((who != 0x71) && ( who != 0x73))
 8003512:	78fb      	ldrb	r3, [r7, #3]
 8003514:	2b71      	cmp	r3, #113	; 0x71
 8003516:	d004      	beq.n	8003522 <MPU9250_Init+0xaa>
 8003518:	78fb      	ldrb	r3, [r7, #3]
 800351a:	2b73      	cmp	r3, #115	; 0x73
 800351c:	d001      	beq.n	8003522 <MPU9250_Init+0xaa>
	{
		return 1;
 800351e:	2301      	movs	r3, #1
 8003520:	e06c      	b.n	80035fc <MPU9250_Init+0x184>
	}

	// enable accelerometer and gyro
	writeRegister(PWR_MGMNT_2,SEN_ENABLE);
 8003522:	236c      	movs	r3, #108	; 0x6c
 8003524:	2200      	movs	r2, #0
 8003526:	4611      	mov	r1, r2
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff ff0f 	bl	800334c <writeRegister>

	// setting accel range to 16G as default
	writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_2G);
 800352e:	231c      	movs	r3, #28
 8003530:	2200      	movs	r2, #0
 8003532:	4611      	mov	r1, r2
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff ff09 	bl	800334c <writeRegister>

	// setting the gyro range to 2000DPS as default
	writeRegister(GYRO_CONFIG,GYRO_FS_SEL_250DPS);
 800353a:	231b      	movs	r3, #27
 800353c:	2200      	movs	r2, #0
 800353e:	4611      	mov	r1, r2
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff ff03 	bl	800334c <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(ACCEL_CONFIG2,DLPF_184);
 8003546:	231d      	movs	r3, #29
 8003548:	2201      	movs	r2, #1
 800354a:	4611      	mov	r1, r2
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff fefd 	bl	800334c <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(CONFIG,DLPF_184);
 8003552:	231a      	movs	r3, #26
 8003554:	2201      	movs	r2, #1
 8003556:	4611      	mov	r1, r2
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff fef7 	bl	800334c <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(SMPDIV,0x00);
 800355e:	2319      	movs	r3, #25
 8003560:	2100      	movs	r1, #0
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff fef2 	bl	800334c <writeRegister>

	// enable I2C master mode
	writeRegister(USER_CTRL,I2C_MST_EN);
 8003568:	236a      	movs	r3, #106	; 0x6a
 800356a:	2220      	movs	r2, #32
 800356c:	4611      	mov	r1, r2
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff feec 	bl	800334c <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL,I2C_MST_CLK);
 8003574:	2324      	movs	r3, #36	; 0x24
 8003576:	220d      	movs	r2, #13
 8003578:	4611      	mov	r1, r2
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff fee6 	bl	800334c <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 0x48 )
 8003580:	f7ff ff6c 	bl	800345c <whoAmIAK8963>
 8003584:	4603      	mov	r3, r0
 8003586:	2b48      	cmp	r3, #72	; 0x48
 8003588:	d001      	beq.n	800358e <MPU9250_Init+0x116>
	{
		return 1;
 800358a:	2301      	movs	r3, #1
 800358c:	e036      	b.n	80035fc <MPU9250_Init+0x184>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 800358e:	230a      	movs	r3, #10
 8003590:	2200      	movs	r2, #0
 8003592:	4611      	mov	r1, r2
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff ff01 	bl	800339c <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 800359a:	2064      	movs	r0, #100	; 0x64
 800359c:	f003 f954 	bl	8006848 <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM);
 80035a0:	230a      	movs	r3, #10
 80035a2:	220f      	movs	r2, #15
 80035a4:	4611      	mov	r1, r2
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff fef8 	bl	800339c <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80035ac:	2064      	movs	r0, #100	; 0x64
 80035ae:	f003 f94b 	bl	8006848 <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 80035b2:	2310      	movs	r3, #16
 80035b4:	4a13      	ldr	r2, [pc, #76]	; (8003604 <MPU9250_Init+0x18c>)
 80035b6:	2103      	movs	r1, #3
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff ff16 	bl	80033ea <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80035be:	230a      	movs	r3, #10
 80035c0:	2200      	movs	r2, #0
 80035c2:	4611      	mov	r1, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff fee9 	bl	800339c <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80035ca:	2064      	movs	r0, #100	; 0x64
 80035cc:	f003 f93c 	bl	8006848 <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2);
 80035d0:	230a      	movs	r3, #10
 80035d2:	2216      	movs	r2, #22
 80035d4:	4611      	mov	r1, r2
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff fee0 	bl	800339c <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80035dc:	2064      	movs	r0, #100	; 0x64
 80035de:	f003 f933 	bl	8006848 <HAL_Delay>

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 80035e2:	236b      	movs	r3, #107	; 0x6b
 80035e4:	2201      	movs	r2, #1
 80035e6:	4611      	mov	r1, r2
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff feaf 	bl	800334c <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(AK8963_HXL,7,_buffer);
 80035ee:	2303      	movs	r3, #3
 80035f0:	4a05      	ldr	r2, [pc, #20]	; (8003608 <MPU9250_Init+0x190>)
 80035f2:	2107      	movs	r1, #7
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff fef8 	bl	80033ea <readAK8963Registers>

	// successful init, return 0
	return 0;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	20000ea0 	.word	0x20000ea0
 8003608:	20000e88 	.word	0x20000e88

0800360c <MPU9250_GetData>:
	writeRegister(SMPDIV, srd);
}

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
	// grab the data from the MPU9250
	readRegisters(ACCEL_OUT, 21, _buffer);
 8003618:	233b      	movs	r3, #59	; 0x3b
 800361a:	4a63      	ldr	r2, [pc, #396]	; (80037a8 <MPU9250_GetData+0x19c>)
 800361c:	2115      	movs	r1, #21
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff fea9 	bl	8003376 <readRegisters>

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8003624:	4b60      	ldr	r3, [pc, #384]	; (80037a8 <MPU9250_GetData+0x19c>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	021b      	lsls	r3, r3, #8
 800362a:	b21a      	sxth	r2, r3
 800362c:	4b5e      	ldr	r3, [pc, #376]	; (80037a8 <MPU9250_GetData+0x19c>)
 800362e:	785b      	ldrb	r3, [r3, #1]
 8003630:	b21b      	sxth	r3, r3
 8003632:	4313      	orrs	r3, r2
 8003634:	b21a      	sxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	801a      	strh	r2, [r3, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 800363a:	4b5b      	ldr	r3, [pc, #364]	; (80037a8 <MPU9250_GetData+0x19c>)
 800363c:	789b      	ldrb	r3, [r3, #2]
 800363e:	021b      	lsls	r3, r3, #8
 8003640:	b219      	sxth	r1, r3
 8003642:	4b59      	ldr	r3, [pc, #356]	; (80037a8 <MPU9250_GetData+0x19c>)
 8003644:	78db      	ldrb	r3, [r3, #3]
 8003646:	b21a      	sxth	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3302      	adds	r3, #2
 800364c:	430a      	orrs	r2, r1
 800364e:	b212      	sxth	r2, r2
 8003650:	801a      	strh	r2, [r3, #0]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8003652:	4b55      	ldr	r3, [pc, #340]	; (80037a8 <MPU9250_GetData+0x19c>)
 8003654:	791b      	ldrb	r3, [r3, #4]
 8003656:	021b      	lsls	r3, r3, #8
 8003658:	b219      	sxth	r1, r3
 800365a:	4b53      	ldr	r3, [pc, #332]	; (80037a8 <MPU9250_GetData+0x19c>)
 800365c:	795b      	ldrb	r3, [r3, #5]
 800365e:	b21a      	sxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	3304      	adds	r3, #4
 8003664:	430a      	orrs	r2, r1
 8003666:	b212      	sxth	r2, r2
 8003668:	801a      	strh	r2, [r3, #0]
	GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 800366a:	4b4f      	ldr	r3, [pc, #316]	; (80037a8 <MPU9250_GetData+0x19c>)
 800366c:	7a1b      	ldrb	r3, [r3, #8]
 800366e:	021b      	lsls	r3, r3, #8
 8003670:	b21a      	sxth	r2, r3
 8003672:	4b4d      	ldr	r3, [pc, #308]	; (80037a8 <MPU9250_GetData+0x19c>)
 8003674:	7a5b      	ldrb	r3, [r3, #9]
 8003676:	b21b      	sxth	r3, r3
 8003678:	4313      	orrs	r3, r2
 800367a:	b21a      	sxth	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8003680:	4b49      	ldr	r3, [pc, #292]	; (80037a8 <MPU9250_GetData+0x19c>)
 8003682:	7a9b      	ldrb	r3, [r3, #10]
 8003684:	021b      	lsls	r3, r3, #8
 8003686:	b219      	sxth	r1, r3
 8003688:	4b47      	ldr	r3, [pc, #284]	; (80037a8 <MPU9250_GetData+0x19c>)
 800368a:	7adb      	ldrb	r3, [r3, #11]
 800368c:	b21a      	sxth	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3302      	adds	r3, #2
 8003692:	430a      	orrs	r2, r1
 8003694:	b212      	sxth	r2, r2
 8003696:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 8003698:	4b43      	ldr	r3, [pc, #268]	; (80037a8 <MPU9250_GetData+0x19c>)
 800369a:	7b1b      	ldrb	r3, [r3, #12]
 800369c:	021b      	lsls	r3, r3, #8
 800369e:	b219      	sxth	r1, r3
 80036a0:	4b41      	ldr	r3, [pc, #260]	; (80037a8 <MPU9250_GetData+0x19c>)
 80036a2:	7b5b      	ldrb	r3, [r3, #13]
 80036a4:	b21a      	sxth	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3304      	adds	r3, #4
 80036aa:	430a      	orrs	r2, r1
 80036ac:	b212      	sxth	r2, r2
 80036ae:	801a      	strh	r2, [r3, #0]

	int16_t magx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 80036b0:	4b3d      	ldr	r3, [pc, #244]	; (80037a8 <MPU9250_GetData+0x19c>)
 80036b2:	7bdb      	ldrb	r3, [r3, #15]
 80036b4:	021b      	lsls	r3, r3, #8
 80036b6:	b21a      	sxth	r2, r3
 80036b8:	4b3b      	ldr	r3, [pc, #236]	; (80037a8 <MPU9250_GetData+0x19c>)
 80036ba:	7b9b      	ldrb	r3, [r3, #14]
 80036bc:	b21b      	sxth	r3, r3
 80036be:	4313      	orrs	r3, r2
 80036c0:	82fb      	strh	r3, [r7, #22]
	int16_t magy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 80036c2:	4b39      	ldr	r3, [pc, #228]	; (80037a8 <MPU9250_GetData+0x19c>)
 80036c4:	7c5b      	ldrb	r3, [r3, #17]
 80036c6:	021b      	lsls	r3, r3, #8
 80036c8:	b21a      	sxth	r2, r3
 80036ca:	4b37      	ldr	r3, [pc, #220]	; (80037a8 <MPU9250_GetData+0x19c>)
 80036cc:	7c1b      	ldrb	r3, [r3, #16]
 80036ce:	b21b      	sxth	r3, r3
 80036d0:	4313      	orrs	r3, r2
 80036d2:	82bb      	strh	r3, [r7, #20]
	int16_t magz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 80036d4:	4b34      	ldr	r3, [pc, #208]	; (80037a8 <MPU9250_GetData+0x19c>)
 80036d6:	7cdb      	ldrb	r3, [r3, #19]
 80036d8:	021b      	lsls	r3, r3, #8
 80036da:	b21a      	sxth	r2, r3
 80036dc:	4b32      	ldr	r3, [pc, #200]	; (80037a8 <MPU9250_GetData+0x19c>)
 80036de:	7c9b      	ldrb	r3, [r3, #18]
 80036e0:	b21b      	sxth	r3, r3
 80036e2:	4313      	orrs	r3, r2
 80036e4:	827b      	strh	r3, [r7, #18]

	MagData[0] = (int16_t)((float)magx * ((float)(_mag_adjust[0] - 128) / 256.0f + 1.0f));
 80036e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80036ea:	ee07 3a90 	vmov	s15, r3
 80036ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036f2:	4b2e      	ldr	r3, [pc, #184]	; (80037ac <MPU9250_GetData+0x1a0>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	3b80      	subs	r3, #128	; 0x80
 80036f8:	ee07 3a90 	vmov	s15, r3
 80036fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003700:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 80037b0 <MPU9250_GetData+0x1a4>
 8003704:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003708:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800370c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003714:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003718:	ee17 3a90 	vmov	r3, s15
 800371c:	b21a      	sxth	r2, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	801a      	strh	r2, [r3, #0]
	MagData[1] = (int16_t)((float)magy * ((float)(_mag_adjust[1] - 128) / 256.0f + 1.0f));
 8003722:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003726:	ee07 3a90 	vmov	s15, r3
 800372a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800372e:	4b1f      	ldr	r3, [pc, #124]	; (80037ac <MPU9250_GetData+0x1a0>)
 8003730:	785b      	ldrb	r3, [r3, #1]
 8003732:	3b80      	subs	r3, #128	; 0x80
 8003734:	ee07 3a90 	vmov	s15, r3
 8003738:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800373c:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 80037b0 <MPU9250_GetData+0x1a4>
 8003740:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003744:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003748:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800374c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	3302      	adds	r3, #2
 8003754:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003758:	ee17 2a90 	vmov	r2, s15
 800375c:	b212      	sxth	r2, r2
 800375e:	801a      	strh	r2, [r3, #0]
	MagData[2] = (int16_t)((float)magz * ((float)(_mag_adjust[2] - 128) / 256.0f + 1.0f));
 8003760:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003764:	ee07 3a90 	vmov	s15, r3
 8003768:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800376c:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <MPU9250_GetData+0x1a0>)
 800376e:	789b      	ldrb	r3, [r3, #2]
 8003770:	3b80      	subs	r3, #128	; 0x80
 8003772:	ee07 3a90 	vmov	s15, r3
 8003776:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800377a:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 80037b0 <MPU9250_GetData+0x1a4>
 800377e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800378a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	3304      	adds	r3, #4
 8003792:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003796:	ee17 2a90 	vmov	r2, s15
 800379a:	b212      	sxth	r2, r2
 800379c:	801a      	strh	r2, [r3, #0]
}
 800379e:	bf00      	nop
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000e88 	.word	0x20000e88
 80037ac:	20000ea0 	.word	0x20000ea0
 80037b0:	43800000 	.word	0x43800000

080037b4 <sdInit>:
		  statusRegister.SDCARD = SENSOR_OFF;
	  }
}

void sdInit(FATFS* fs)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
	  if (f_mount(fs, "", 0) == FR_OK)
 80037bc:	2200      	movs	r2, #0
 80037be:	490d      	ldr	r1, [pc, #52]	; (80037f4 <sdInit+0x40>)
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f00e fbf3 	bl	8011fac <f_mount>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d109      	bne.n	80037e0 <sdInit+0x2c>
	  {
		  statusRegister.SDCARD = SENSOR_OK;
 80037cc:	4a0a      	ldr	r2, [pc, #40]	; (80037f8 <sdInit+0x44>)
 80037ce:	7813      	ldrb	r3, [r2, #0]
 80037d0:	2101      	movs	r1, #1
 80037d2:	f361 0302 	bfi	r3, r1, #0, #3
 80037d6:	7013      	strb	r3, [r2, #0]
		  if (DEBUG)
			  printf("SDCard mounting success!\n");
 80037d8:	4808      	ldr	r0, [pc, #32]	; (80037fc <sdInit+0x48>)
 80037da:	f00f fb7d 	bl	8012ed8 <puts>
	  }else
	  {
		  statusRegister.SDCARD = SENSOR_INIT_FAIL;
		  //sdMountFailHandler();
	  }
}
 80037de:	e004      	b.n	80037ea <sdInit+0x36>
		  statusRegister.SDCARD = SENSOR_INIT_FAIL;
 80037e0:	4a05      	ldr	r2, [pc, #20]	; (80037f8 <sdInit+0x44>)
 80037e2:	7813      	ldrb	r3, [r2, #0]
 80037e4:	f043 0307 	orr.w	r3, r3, #7
 80037e8:	7013      	strb	r3, [r2, #0]
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	08018fc0 	.word	0x08018fc0
 80037f8:	2000215c 	.word	0x2000215c
 80037fc:	08018fc4 	.word	0x08018fc4

08003800 <openAllFiles>:
void openAllFiles()
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
	if(statusRegister.SDCARD == SENSOR_OK)
 8003804:	4b1c      	ldr	r3, [pc, #112]	; (8003878 <openAllFiles+0x78>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b01      	cmp	r3, #1
 8003810:	d130      	bne.n	8003874 <openAllFiles+0x74>
	{
		if(statusRegister.GYRO == SENSOR_OK){
 8003812:	4b19      	ldr	r3, [pc, #100]	; (8003878 <openAllFiles+0x78>)
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b40      	cmp	r3, #64	; 0x40
 800381e:	d106      	bne.n	800382e <openAllFiles+0x2e>
			openFile(gyro.File, gyro.path, FILE_DEFAULT_MODE);
 8003820:	4b16      	ldr	r3, [pc, #88]	; (800387c <openAllFiles+0x7c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2232      	movs	r2, #50	; 0x32
 8003826:	4916      	ldr	r1, [pc, #88]	; (8003880 <openAllFiles+0x80>)
 8003828:	4618      	mov	r0, r3
 800382a:	f000 f93f 	bl	8003aac <openFile>
		}
		if(statusRegister.MLXLF == SENSOR_OK){
 800382e:	4b12      	ldr	r3, [pc, #72]	; (8003878 <openAllFiles+0x78>)
 8003830:	785b      	ldrb	r3, [r3, #1]
 8003832:	f003 030e 	and.w	r3, r3, #14
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d106      	bne.n	800384a <openAllFiles+0x4a>
			openFile(mlxLFSensor.File, mlxLFSensor.path, FILE_DEFAULT_MODE);
 800383c:	4b11      	ldr	r3, [pc, #68]	; (8003884 <openAllFiles+0x84>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2232      	movs	r2, #50	; 0x32
 8003842:	4911      	ldr	r1, [pc, #68]	; (8003888 <openAllFiles+0x88>)
 8003844:	4618      	mov	r0, r3
 8003846:	f000 f931 	bl	8003aac <openFile>
		}
		if(statusRegister.VSSLF == SENSOR_OK){
 800384a:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <openAllFiles+0x78>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8003852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003856:	d106      	bne.n	8003866 <openAllFiles+0x66>
			openFile(absLFSensor.File, absLFSensor.path, FILE_DEFAULT_MODE);
 8003858:	4b0c      	ldr	r3, [pc, #48]	; (800388c <openAllFiles+0x8c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2232      	movs	r2, #50	; 0x32
 800385e:	490c      	ldr	r1, [pc, #48]	; (8003890 <openAllFiles+0x90>)
 8003860:	4618      	mov	r0, r3
 8003862:	f000 f923 	bl	8003aac <openFile>
		}
		if(statusRegister.DamperLF == SENSOR_OK){

		}
		openFile(gpsSensor.File,gpsSensor.path,FILE_DEFAULT_MODE);
 8003866:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <openAllFiles+0x94>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2232      	movs	r2, #50	; 0x32
 800386c:	490a      	ldr	r1, [pc, #40]	; (8003898 <openAllFiles+0x98>)
 800386e:	4618      	mov	r0, r3
 8003870:	f000 f91c 	bl	8003aac <openFile>
	}
}
 8003874:	bf00      	nop
 8003876:	bd80      	pop	{r7, pc}
 8003878:	2000215c 	.word	0x2000215c
 800387c:	20006068 	.word	0x20006068
 8003880:	2000606c 	.word	0x2000606c
 8003884:	20002300 	.word	0x20002300
 8003888:	20002304 	.word	0x20002304
 800388c:	20006110 	.word	0x20006110
 8003890:	20006114 	.word	0x20006114
 8003894:	20006178 	.word	0x20006178
 8003898:	2000617c 	.word	0x2000617c

0800389c <createHeaders>:
int createHeaders(FIL * file,char * path)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08c      	sub	sp, #48	; 0x30
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
	FRESULT fres;
	UINT bytesWritten = 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24

	fres = f_write(file,"timestamp,",strlen("timestamp,"),&bytesWritten);
 80038aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038ae:	220a      	movs	r2, #10
 80038b0:	496c      	ldr	r1, [pc, #432]	; (8003a64 <createHeaders+0x1c8>)
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f00e fd8c 	bl	80123d0 <f_write>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(fres != FR_OK){
 80038be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d006      	beq.n	80038d4 <createHeaders+0x38>
		printf("Error while creating %s header",path);
 80038c6:	6839      	ldr	r1, [r7, #0]
 80038c8:	4867      	ldr	r0, [pc, #412]	; (8003a68 <createHeaders+0x1cc>)
 80038ca:	f00f faa5 	bl	8012e18 <printf>
		return SD_WRITE_ERROR;
 80038ce:	f04f 33ff 	mov.w	r3, #4294967295
 80038d2:	e0c3      	b.n	8003a5c <createHeaders+0x1c0>
	}

	if(strstr(path,"GYRO") != NULL){
 80038d4:	4965      	ldr	r1, [pc, #404]	; (8003a6c <createHeaders+0x1d0>)
 80038d6:	6838      	ldr	r0, [r7, #0]
 80038d8:	f00f fb3e 	bl	8012f58 <strstr>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <createHeaders+0x5c>
		fres = f_write(file, "gyro_x,gyro_y,gyro_z,acc_x,acc_y,acc_z\r\n", strlen("gyro_x,gyro_y,gyro_z,acc_x,acc_y,acc_z\r\n"), &bytesWritten);
 80038e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038e6:	2228      	movs	r2, #40	; 0x28
 80038e8:	4961      	ldr	r1, [pc, #388]	; (8003a70 <createHeaders+0x1d4>)
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f00e fd70 	bl	80123d0 <f_write>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80038f6:	e09b      	b.n	8003a30 <createHeaders+0x194>

	}else if(strstr(path,"MLX")!= NULL){
 80038f8:	495e      	ldr	r1, [pc, #376]	; (8003a74 <createHeaders+0x1d8>)
 80038fa:	6838      	ldr	r0, [r7, #0]
 80038fc:	f00f fb2c 	bl	8012f58 <strstr>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d049      	beq.n	800399a <createHeaders+0xfe>
		char headerData[25];
		fres =  f_write(file, "ID,", strlen("ID,"), &bytesWritten);
 8003906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800390a:	2203      	movs	r2, #3
 800390c:	495a      	ldr	r1, [pc, #360]	; (8003a78 <createHeaders+0x1dc>)
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f00e fd5e 	bl	80123d0 <f_write>
 8003914:	4603      	mov	r3, r0
 8003916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for(int i=0;i<784;i++){
 800391a:	2300      	movs	r3, #0
 800391c:	62bb      	str	r3, [r7, #40]	; 0x28
 800391e:	e037      	b.n	8003990 <createHeaders+0xf4>
			sprintf(headerData,"float_%d,", i);
 8003920:	f107 0308 	add.w	r3, r7, #8
 8003924:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003926:	4955      	ldr	r1, [pc, #340]	; (8003a7c <createHeaders+0x1e0>)
 8003928:	4618      	mov	r0, r3
 800392a:	f00f faed 	bl	8012f08 <sprintf>
			fres = fres | f_write(file, headerData, strlen(headerData), &bytesWritten);
 800392e:	f107 0308 	add.w	r3, r7, #8
 8003932:	4618      	mov	r0, r3
 8003934:	f7fc fc84 	bl	8000240 <strlen>
 8003938:	4602      	mov	r2, r0
 800393a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800393e:	f107 0108 	add.w	r1, r7, #8
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f00e fd44 	bl	80123d0 <f_write>
 8003948:	4603      	mov	r3, r0
 800394a:	461a      	mov	r2, r3
 800394c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003950:	4313      	orrs	r3, r2
 8003952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			sprintf(headerData,"id,");
 8003956:	f107 0308 	add.w	r3, r7, #8
 800395a:	4949      	ldr	r1, [pc, #292]	; (8003a80 <createHeaders+0x1e4>)
 800395c:	4618      	mov	r0, r3
 800395e:	f00f fad3 	bl	8012f08 <sprintf>
			fres =  fres | f_write(file, headerData, strlen(headerData), &bytesWritten);
 8003962:	f107 0308 	add.w	r3, r7, #8
 8003966:	4618      	mov	r0, r3
 8003968:	f7fc fc6a 	bl	8000240 <strlen>
 800396c:	4602      	mov	r2, r0
 800396e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003972:	f107 0108 	add.w	r1, r7, #8
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f00e fd2a 	bl	80123d0 <f_write>
 800397c:	4603      	mov	r3, r0
 800397e:	461a      	mov	r2, r3
 8003980:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003984:	4313      	orrs	r3, r2
 8003986:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for(int i=0;i<784;i++){
 800398a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398c:	3301      	adds	r3, #1
 800398e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003992:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8003996:	dbc3      	blt.n	8003920 <createHeaders+0x84>
 8003998:	e04a      	b.n	8003a30 <createHeaders+0x194>
		}

	}else if(strstr(path,"ABS")!= NULL){
 800399a:	493a      	ldr	r1, [pc, #232]	; (8003a84 <createHeaders+0x1e8>)
 800399c:	6838      	ldr	r0, [r7, #0]
 800399e:	f00f fadb 	bl	8012f58 <strstr>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <createHeaders+0x122>
		fres = f_write(file, "ID,speed\r\n", strlen("ID,speed\r\n"), &bytesWritten);
 80039a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039ac:	220a      	movs	r2, #10
 80039ae:	4936      	ldr	r1, [pc, #216]	; (8003a88 <createHeaders+0x1ec>)
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f00e fd0d 	bl	80123d0 <f_write>
 80039b6:	4603      	mov	r3, r0
 80039b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80039bc:	e038      	b.n	8003a30 <createHeaders+0x194>
	}else if(strstr(path,"DAMP")!= NULL){
 80039be:	4933      	ldr	r1, [pc, #204]	; (8003a8c <createHeaders+0x1f0>)
 80039c0:	6838      	ldr	r0, [r7, #0]
 80039c2:	f00f fac9 	bl	8012f58 <strstr>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00a      	beq.n	80039e2 <createHeaders+0x146>
		fres = f_write(file, "ID,length\r\n", strlen("ID,length\r\n"), &bytesWritten);
 80039cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039d0:	220b      	movs	r2, #11
 80039d2:	492f      	ldr	r1, [pc, #188]	; (8003a90 <createHeaders+0x1f4>)
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f00e fcfb 	bl	80123d0 <f_write>
 80039da:	4603      	mov	r3, r0
 80039dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80039e0:	e026      	b.n	8003a30 <createHeaders+0x194>
	}else if(strstr(path,"WHEEL")!= NULL){
 80039e2:	492c      	ldr	r1, [pc, #176]	; (8003a94 <createHeaders+0x1f8>)
 80039e4:	6838      	ldr	r0, [r7, #0]
 80039e6:	f00f fab7 	bl	8012f58 <strstr>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <createHeaders+0x16a>
		fres = f_write(file, "ID,angle\r\n", strlen("ID,angle\r\n"), &bytesWritten);
 80039f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039f4:	220a      	movs	r2, #10
 80039f6:	4928      	ldr	r1, [pc, #160]	; (8003a98 <createHeaders+0x1fc>)
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f00e fce9 	bl	80123d0 <f_write>
 80039fe:	4603      	mov	r3, r0
 8003a00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003a04:	e014      	b.n	8003a30 <createHeaders+0x194>
	}else if(strstr(path,"GPS")!= NULL){
 8003a06:	4925      	ldr	r1, [pc, #148]	; (8003a9c <createHeaders+0x200>)
 8003a08:	6838      	ldr	r0, [r7, #0]
 8003a0a:	f00f faa5 	bl	8012f58 <strstr>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00a      	beq.n	8003a2a <createHeaders+0x18e>
		fres = f_write(file, "LOG,utc,pos status,lat,lat dir,lon,lon dir,speed,,track,date,,mag var,var dir,mode ind,chs,ter\r\n", strlen("LOG,utc,pos status,lat,lat dir,lon,lon dir,speed,,track,date,,mag var,var dir,mode ind,chs,ter\r\n"), &bytesWritten);
 8003a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a18:	2260      	movs	r2, #96	; 0x60
 8003a1a:	4921      	ldr	r1, [pc, #132]	; (8003aa0 <createHeaders+0x204>)
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f00e fcd7 	bl	80123d0 <f_write>
 8003a22:	4603      	mov	r3, r0
 8003a24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003a28:	e002      	b.n	8003a30 <createHeaders+0x194>
	}else
	{
		return WRONG_PARAMETER;
 8003a2a:	f06f 0302 	mvn.w	r3, #2
 8003a2e:	e015      	b.n	8003a5c <createHeaders+0x1c0>
	}

	if(fres != FR_OK){
 8003a30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d006      	beq.n	8003a46 <createHeaders+0x1aa>
		printf("Error while creating %s header\n",path);
 8003a38:	6839      	ldr	r1, [r7, #0]
 8003a3a:	481a      	ldr	r0, [pc, #104]	; (8003aa4 <createHeaders+0x208>)
 8003a3c:	f00f f9ec 	bl	8012e18 <printf>
		return SD_WRITE_ERROR;
 8003a40:	f04f 33ff 	mov.w	r3, #4294967295
 8003a44:	e00a      	b.n	8003a5c <createHeaders+0x1c0>
	}
	fres =  f_write(file, "\n", strlen("\n"), &bytesWritten);
 8003a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	4916      	ldr	r1, [pc, #88]	; (8003aa8 <createHeaders+0x20c>)
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f00e fcbe 	bl	80123d0 <f_write>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	return SD_OK;
 8003a5a:	2301      	movs	r3, #1

}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3730      	adds	r7, #48	; 0x30
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	08018fe0 	.word	0x08018fe0
 8003a68:	08018fec 	.word	0x08018fec
 8003a6c:	0801900c 	.word	0x0801900c
 8003a70:	08019014 	.word	0x08019014
 8003a74:	08019040 	.word	0x08019040
 8003a78:	08019044 	.word	0x08019044
 8003a7c:	08019048 	.word	0x08019048
 8003a80:	08019054 	.word	0x08019054
 8003a84:	08019058 	.word	0x08019058
 8003a88:	0801905c 	.word	0x0801905c
 8003a8c:	08019068 	.word	0x08019068
 8003a90:	08019070 	.word	0x08019070
 8003a94:	0801907c 	.word	0x0801907c
 8003a98:	08019084 	.word	0x08019084
 8003a9c:	08019090 	.word	0x08019090
 8003aa0:	08019094 	.word	0x08019094
 8003aa4:	080190f8 	.word	0x080190f8
 8003aa8:	08019118 	.word	0x08019118

08003aac <openFile>:


int openFile(FIL * file, char * path, BYTE mode)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08c      	sub	sp, #48	; 0x30
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	71fb      	strb	r3, [r7, #7]
	FILINFO fInfo;
	FRESULT fres = f_stat(path, &fInfo);
 8003aba:	f107 0310 	add.w	r3, r7, #16
 8003abe:	4619      	mov	r1, r3
 8003ac0:	68b8      	ldr	r0, [r7, #8]
 8003ac2:	f00e fe97 	bl	80127f4 <f_stat>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(fres == FR_OK)
 8003acc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d114      	bne.n	8003afe <openFile+0x52>
	{
		fres = f_open(file, _TEXT(path), mode);
 8003ad4:	79fb      	ldrb	r3, [r7, #7]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	68b9      	ldr	r1, [r7, #8]
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f00e faac 	bl	8012038 <f_open>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(fres == FR_OK)
 8003ae6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d104      	bne.n	8003af8 <openFile+0x4c>
		{
			printf("Opening file: %s succeeded\n", path);
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	4818      	ldr	r0, [pc, #96]	; (8003b54 <openFile+0xa8>)
 8003af2:	f00f f991 	bl	8012e18 <printf>
 8003af6:	e025      	b.n	8003b44 <openFile+0x98>
		}else
		{
			return SD_READ_ERROR;
 8003af8:	f06f 0301 	mvn.w	r3, #1
 8003afc:	e026      	b.n	8003b4c <openFile+0xa0>
		}
	}else if(fres == FR_NO_FILE)
 8003afe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d11e      	bne.n	8003b44 <openFile+0x98>
	{
		fres = f_open(file, _TEXT(path), mode);
 8003b06:	79fb      	ldrb	r3, [r7, #7]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	68b9      	ldr	r1, [r7, #8]
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f00e fa93 	bl	8012038 <f_open>
 8003b12:	4603      	mov	r3, r0
 8003b14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(fres == FR_OK)
 8003b18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10e      	bne.n	8003b3e <openFile+0x92>
		{
			int res = createHeaders(file,path);
 8003b20:	68b9      	ldr	r1, [r7, #8]
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f7ff feba 	bl	800389c <createHeaders>
 8003b28:	62b8      	str	r0, [r7, #40]	; 0x28
			if(res != SD_OK)
 8003b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d001      	beq.n	8003b34 <openFile+0x88>
			{
				return res;
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	e00b      	b.n	8003b4c <openFile+0xa0>
			}

			printf("No file: %s, created new\n", path);
 8003b34:	68b9      	ldr	r1, [r7, #8]
 8003b36:	4808      	ldr	r0, [pc, #32]	; (8003b58 <openFile+0xac>)
 8003b38:	f00f f96e 	bl	8012e18 <printf>
 8003b3c:	e002      	b.n	8003b44 <openFile+0x98>

		}else
		{
			return SD_READ_ERROR;
 8003b3e:	f06f 0301 	mvn.w	r3, #1
 8003b42:	e003      	b.n	8003b4c <openFile+0xa0>
		}
	}
	f_sync(file);
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f00e fdd7 	bl	80126f8 <f_sync>
	return SD_OK;
 8003b4a:	2301      	movs	r3, #1


}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3730      	adds	r7, #48	; 0x30
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	0801911c 	.word	0x0801911c
 8003b58:	08019138 	.word	0x08019138

08003b5c <gpsSaveData>:
void gpsSaveData(GPSSensor * sens)
{
 8003b5c:	b5b0      	push	{r4, r5, r7, lr}
 8003b5e:	b0c4      	sub	sp, #272	; 0x110
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b66:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003b6a:	6018      	str	r0, [r3, #0]
	char dataBuffer[255];
	int writedBytes;
	FRESULT status = 0;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	//Save time stamp
	sprintf(dataBuffer, "%d,", HAL_GetTick());
 8003b72:	f002 fe5d 	bl	8006830 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	f107 0310 	add.w	r3, r7, #16
 8003b7c:	492a      	ldr	r1, [pc, #168]	; (8003c28 <gpsSaveData+0xcc>)
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f00f f9c2 	bl	8012f08 <sprintf>
	status = f_write(sens->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 8003b84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681c      	ldr	r4, [r3, #0]
 8003b90:	f107 0310 	add.w	r3, r7, #16
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7fc fb53 	bl	8000240 <strlen>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	f107 030c 	add.w	r3, r7, #12
 8003ba0:	f107 0110 	add.w	r1, r7, #16
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	f00e fc13 	bl	80123d0 <f_write>
 8003baa:	4603      	mov	r3, r0
 8003bac:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	status = status | f_write(sens->File,sens->data,strlen(sens->data),&writedBytes);
 8003bb0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bb4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681c      	ldr	r4, [r3, #0]
 8003bbc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bc0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f203 1521 	addw	r5, r3, #289	; 0x121
 8003bca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f203 1321 	addw	r3, r3, #289	; 0x121
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fc fb31 	bl	8000240 <strlen>
 8003bde:	4602      	mov	r2, r0
 8003be0:	f107 030c 	add.w	r3, r7, #12
 8003be4:	4629      	mov	r1, r5
 8003be6:	4620      	mov	r0, r4
 8003be8:	f00e fbf2 	bl	80123d0 <f_write>
 8003bec:	4603      	mov	r3, r0
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	sens->dataReady = 0;
 8003bfa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bfe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	7e13      	ldrb	r3, [r2, #24]
 8003c06:	f36f 0300 	bfc	r3, #0, #1
 8003c0a:	7613      	strb	r3, [r2, #24]
	f_sync(sens->File);
 8003c0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c10:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f00e fd6d 	bl	80126f8 <f_sync>
}
 8003c1e:	bf00      	nop
 8003c20:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bdb0      	pop	{r4, r5, r7, pc}
 8003c28:	08019154 	.word	0x08019154

08003c2c <gyroSaveData>:
void gyroSaveData(GyroSensor* sens)
{
 8003c2c:	b590      	push	{r4, r7, lr}
 8003c2e:	b0c7      	sub	sp, #284	; 0x11c
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003c36:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003c3a:	6018      	str	r0, [r3, #0]
	char dataBuffer[255];
	int writedBytes;
	FRESULT status = 0;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	//Save time stamp
	sprintf(dataBuffer, "%d,", HAL_GetTick());
 8003c42:	f002 fdf5 	bl	8006830 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	f107 030c 	add.w	r3, r7, #12
 8003c4c:	496c      	ldr	r1, [pc, #432]	; (8003e00 <gyroSaveData+0x1d4>)
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f00f f95a 	bl	8012f08 <sprintf>
	status = f_write(sens->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 8003c54:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003c58:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681c      	ldr	r4, [r3, #0]
 8003c60:	f107 030c 	add.w	r3, r7, #12
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fc faeb 	bl	8000240 <strlen>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	f107 0308 	add.w	r3, r7, #8
 8003c70:	f107 010c 	add.w	r1, r7, #12
 8003c74:	4620      	mov	r0, r4
 8003c76:	f00e fbab 	bl	80123d0 <f_write>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	for (int i = 0; i < 3; i++)
 8003c80:	2300      	movs	r3, #0
 8003c82:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003c86:	e02f      	b.n	8003ce8 <gyroSaveData+0xbc>
	{
		sprintf(dataBuffer, "%f,", sens->data.gyro_data_calc[i]);
 8003c88:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003c8c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003c96:	3308      	adds	r3, #8
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca0:	f107 000c 	add.w	r0, r7, #12
 8003ca4:	4957      	ldr	r1, [pc, #348]	; (8003e04 <gyroSaveData+0x1d8>)
 8003ca6:	f00f f92f 	bl	8012f08 <sprintf>
		status = status | f_write(sens->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 8003caa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003cae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681c      	ldr	r4, [r3, #0]
 8003cb6:	f107 030c 	add.w	r3, r7, #12
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fc fac0 	bl	8000240 <strlen>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	f107 0308 	add.w	r3, r7, #8
 8003cc6:	f107 010c 	add.w	r1, r7, #12
 8003cca:	4620      	mov	r0, r4
 8003ccc:	f00e fb80 	bl	80123d0 <f_write>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	for (int i = 0; i < 3; i++)
 8003cde:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003ce8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	ddcb      	ble.n	8003c88 <gyroSaveData+0x5c>

	}
	for (int i = 0; i < 3; i++)
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003cf6:	e02f      	b.n	8003d58 <gyroSaveData+0x12c>
	{
		sprintf(dataBuffer, "%f,", sens->data.acc_data_calc[i]);
 8003cf8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003cfc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d06:	3305      	adds	r3, #5
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d10:	f107 000c 	add.w	r0, r7, #12
 8003d14:	493b      	ldr	r1, [pc, #236]	; (8003e04 <gyroSaveData+0x1d8>)
 8003d16:	f00f f8f7 	bl	8012f08 <sprintf>
		status = status | f_write(sens->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 8003d1a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003d1e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681c      	ldr	r4, [r3, #0]
 8003d26:	f107 030c 	add.w	r3, r7, #12
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fc fa88 	bl	8000240 <strlen>
 8003d30:	4602      	mov	r2, r0
 8003d32:	f107 0308 	add.w	r3, r7, #8
 8003d36:	f107 010c 	add.w	r1, r7, #12
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	f00e fb48 	bl	80123d0 <f_write>
 8003d40:	4603      	mov	r3, r0
 8003d42:	461a      	mov	r2, r3
 8003d44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	for (int i = 0; i < 3; i++)
 8003d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d52:	3301      	adds	r3, #1
 8003d54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	ddcb      	ble.n	8003cf8 <gyroSaveData+0xcc>
	}

	sprintf(dataBuffer, "\r\n ");
 8003d60:	f107 030c 	add.w	r3, r7, #12
 8003d64:	4928      	ldr	r1, [pc, #160]	; (8003e08 <gyroSaveData+0x1dc>)
 8003d66:	4618      	mov	r0, r3
 8003d68:	f00f f8ce 	bl	8012f08 <sprintf>

	status = status | f_write(sens->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 8003d6c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003d70:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681c      	ldr	r4, [r3, #0]
 8003d78:	f107 030c 	add.w	r3, r7, #12
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fc fa5f 	bl	8000240 <strlen>
 8003d82:	4602      	mov	r2, r0
 8003d84:	f107 0308 	add.w	r3, r7, #8
 8003d88:	f107 010c 	add.w	r1, r7, #12
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	f00e fb1f 	bl	80123d0 <f_write>
 8003d92:	4603      	mov	r3, r0
 8003d94:	461a      	mov	r2, r3
 8003d96:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	if(status != 0 && statusRegister.SDCARD < SENSOR_FAIL && statusRegister.SDCARD > SENSOR_OFF)
 8003da0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01c      	beq.n	8003de2 <gyroSaveData+0x1b6>
 8003da8:	4b18      	ldr	r3, [pc, #96]	; (8003e0c <gyroSaveData+0x1e0>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d815      	bhi.n	8003de2 <gyroSaveData+0x1b6>
 8003db6:	4b15      	ldr	r3, [pc, #84]	; (8003e0c <gyroSaveData+0x1e0>)
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00e      	beq.n	8003de2 <gyroSaveData+0x1b6>
	{
		statusRegister.SDCARD += 1;
 8003dc4:	4b11      	ldr	r3, [pc, #68]	; (8003e0c <gyroSaveData+0x1e0>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	3301      	adds	r3, #1
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	b2d9      	uxtb	r1, r3
 8003dd8:	4a0c      	ldr	r2, [pc, #48]	; (8003e0c <gyroSaveData+0x1e0>)
 8003dda:	7813      	ldrb	r3, [r2, #0]
 8003ddc:	f361 0302 	bfi	r3, r1, #0, #3
 8003de0:	7013      	strb	r3, [r2, #0]
	}
	f_sync(sens->File);
 8003de2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003de6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f00e fc82 	bl	80126f8 <f_sync>

}
 8003df4:	bf00      	nop
 8003df6:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd90      	pop	{r4, r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	08019154 	.word	0x08019154
 8003e04:	08019158 	.word	0x08019158
 8003e08:	0801915c 	.word	0x0801915c
 8003e0c:	2000215c 	.word	0x2000215c

08003e10 <mlxSaveData>:

void mlxSaveData(MLXSensor* mlx)
{
 8003e10:	b590      	push	{r4, r7, lr}
 8003e12:	b0c7      	sub	sp, #284	; 0x11c
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e1a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003e1e:	6018      	str	r0, [r3, #0]
	char dataBuffer[255];
	int writedBytes;
	//Save time stamp and mlx ID
	sprintf(dataBuffer, "%d,%d", HAL_GetTick(),mlx->ID);
 8003e20:	f002 fd06 	bl	8006830 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e2a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	f107 0010 	add.w	r0, r7, #16
 8003e36:	493f      	ldr	r1, [pc, #252]	; (8003f34 <mlxSaveData+0x124>)
 8003e38:	f00f f866 	bl	8012f08 <sprintf>
	int fres = f_write(mlx->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 8003e3c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e40:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681c      	ldr	r4, [r3, #0]
 8003e48:	f107 0310 	add.w	r3, r7, #16
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fc f9f7 	bl	8000240 <strlen>
 8003e52:	4602      	mov	r2, r0
 8003e54:	f107 030c 	add.w	r3, r7, #12
 8003e58:	f107 0110 	add.w	r1, r7, #16
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	f00e fab7 	bl	80123d0 <f_write>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	for(int i=0;i<784;i++)
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003e6e:	e034      	b.n	8003eda <mlxSaveData+0xca>
	{
		sprintf(dataBuffer,"%2.2f,", mlx->data[i]);
 8003e70:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e74:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003e7e:	f203 43aa 	addw	r3, r3, #1194	; 0x4aa
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	edd3 7a00 	vldr	s15, [r3]
 8003e8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e8e:	f107 0010 	add.w	r0, r7, #16
 8003e92:	ec53 2b17 	vmov	r2, r3, d7
 8003e96:	4928      	ldr	r1, [pc, #160]	; (8003f38 <mlxSaveData+0x128>)
 8003e98:	f00f f836 	bl	8012f08 <sprintf>
		fres = fres | f_write(mlx->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 8003e9c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003ea0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681c      	ldr	r4, [r3, #0]
 8003ea8:	f107 0310 	add.w	r3, r7, #16
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7fc f9c7 	bl	8000240 <strlen>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	f107 030c 	add.w	r3, r7, #12
 8003eb8:	f107 0110 	add.w	r1, r7, #16
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	f00e fa87 	bl	80123d0 <f_write>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	for(int i=0;i<784;i++)
 8003ed0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003eda:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003ede:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8003ee2:	dbc5      	blt.n	8003e70 <mlxSaveData+0x60>
	}

	sprintf(dataBuffer, "\r\n ");
 8003ee4:	f107 0310 	add.w	r3, r7, #16
 8003ee8:	4914      	ldr	r1, [pc, #80]	; (8003f3c <mlxSaveData+0x12c>)
 8003eea:	4618      	mov	r0, r3
 8003eec:	f00f f80c 	bl	8012f08 <sprintf>
	f_write(mlx->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 8003ef0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003ef4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681c      	ldr	r4, [r3, #0]
 8003efc:	f107 0310 	add.w	r3, r7, #16
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fc f99d 	bl	8000240 <strlen>
 8003f06:	4602      	mov	r2, r0
 8003f08:	f107 030c 	add.w	r3, r7, #12
 8003f0c:	f107 0110 	add.w	r1, r7, #16
 8003f10:	4620      	mov	r0, r4
 8003f12:	f00e fa5d 	bl	80123d0 <f_write>
	f_sync(mlx->File);
 8003f16:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003f1a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f00e fbe8 	bl	80126f8 <f_sync>
}
 8003f28:	bf00      	nop
 8003f2a:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd90      	pop	{r4, r7, pc}
 8003f32:	bf00      	nop
 8003f34:	08019160 	.word	0x08019160
 8003f38:	08019168 	.word	0x08019168
 8003f3c:	0801915c 	.word	0x0801915c

08003f40 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003f46:	463b      	mov	r3, r7
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	605a      	str	r2, [r3, #4]
 8003f4e:	609a      	str	r2, [r3, #8]
 8003f50:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003f52:	4b21      	ldr	r3, [pc, #132]	; (8003fd8 <MX_ADC1_Init+0x98>)
 8003f54:	4a21      	ldr	r2, [pc, #132]	; (8003fdc <MX_ADC1_Init+0x9c>)
 8003f56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003f58:	4b1f      	ldr	r3, [pc, #124]	; (8003fd8 <MX_ADC1_Init+0x98>)
 8003f5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f5e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003f60:	4b1d      	ldr	r3, [pc, #116]	; (8003fd8 <MX_ADC1_Init+0x98>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003f66:	4b1c      	ldr	r3, [pc, #112]	; (8003fd8 <MX_ADC1_Init+0x98>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003f6c:	4b1a      	ldr	r3, [pc, #104]	; (8003fd8 <MX_ADC1_Init+0x98>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003f72:	4b19      	ldr	r3, [pc, #100]	; (8003fd8 <MX_ADC1_Init+0x98>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003f7a:	4b17      	ldr	r3, [pc, #92]	; (8003fd8 <MX_ADC1_Init+0x98>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003f80:	4b15      	ldr	r3, [pc, #84]	; (8003fd8 <MX_ADC1_Init+0x98>)
 8003f82:	4a17      	ldr	r2, [pc, #92]	; (8003fe0 <MX_ADC1_Init+0xa0>)
 8003f84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003f86:	4b14      	ldr	r3, [pc, #80]	; (8003fd8 <MX_ADC1_Init+0x98>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003f8c:	4b12      	ldr	r3, [pc, #72]	; (8003fd8 <MX_ADC1_Init+0x98>)
 8003f8e:	2201      	movs	r2, #1
 8003f90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003f92:	4b11      	ldr	r3, [pc, #68]	; (8003fd8 <MX_ADC1_Init+0x98>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003f9a:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <MX_ADC1_Init+0x98>)
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003fa0:	480d      	ldr	r0, [pc, #52]	; (8003fd8 <MX_ADC1_Init+0x98>)
 8003fa2:	f002 fc75 	bl	8006890 <HAL_ADC_Init>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003fac:	f001 fa64 	bl	8005478 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003fbc:	463b      	mov	r3, r7
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	4805      	ldr	r0, [pc, #20]	; (8003fd8 <MX_ADC1_Init+0x98>)
 8003fc2:	f002 fdd7 	bl	8006b74 <HAL_ADC_ConfigChannel>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003fcc:	f001 fa54 	bl	8005478 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003fd0:	bf00      	nop
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	20000ea4 	.word	0x20000ea4
 8003fdc:	40012000 	.word	0x40012000
 8003fe0:	0f000001 	.word	0x0f000001

08003fe4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003fea:	463b      	mov	r3, r7
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	605a      	str	r2, [r3, #4]
 8003ff2:	609a      	str	r2, [r3, #8]
 8003ff4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003ff6:	4b21      	ldr	r3, [pc, #132]	; (800407c <MX_ADC2_Init+0x98>)
 8003ff8:	4a21      	ldr	r2, [pc, #132]	; (8004080 <MX_ADC2_Init+0x9c>)
 8003ffa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003ffc:	4b1f      	ldr	r3, [pc, #124]	; (800407c <MX_ADC2_Init+0x98>)
 8003ffe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004002:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004004:	4b1d      	ldr	r3, [pc, #116]	; (800407c <MX_ADC2_Init+0x98>)
 8004006:	2200      	movs	r2, #0
 8004008:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800400a:	4b1c      	ldr	r3, [pc, #112]	; (800407c <MX_ADC2_Init+0x98>)
 800400c:	2200      	movs	r2, #0
 800400e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8004010:	4b1a      	ldr	r3, [pc, #104]	; (800407c <MX_ADC2_Init+0x98>)
 8004012:	2200      	movs	r2, #0
 8004014:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004016:	4b19      	ldr	r3, [pc, #100]	; (800407c <MX_ADC2_Init+0x98>)
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800401e:	4b17      	ldr	r3, [pc, #92]	; (800407c <MX_ADC2_Init+0x98>)
 8004020:	2200      	movs	r2, #0
 8004022:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004024:	4b15      	ldr	r3, [pc, #84]	; (800407c <MX_ADC2_Init+0x98>)
 8004026:	4a17      	ldr	r2, [pc, #92]	; (8004084 <MX_ADC2_Init+0xa0>)
 8004028:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800402a:	4b14      	ldr	r3, [pc, #80]	; (800407c <MX_ADC2_Init+0x98>)
 800402c:	2200      	movs	r2, #0
 800402e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8004030:	4b12      	ldr	r3, [pc, #72]	; (800407c <MX_ADC2_Init+0x98>)
 8004032:	2201      	movs	r2, #1
 8004034:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8004036:	4b11      	ldr	r3, [pc, #68]	; (800407c <MX_ADC2_Init+0x98>)
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800403e:	4b0f      	ldr	r3, [pc, #60]	; (800407c <MX_ADC2_Init+0x98>)
 8004040:	2201      	movs	r2, #1
 8004042:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004044:	480d      	ldr	r0, [pc, #52]	; (800407c <MX_ADC2_Init+0x98>)
 8004046:	f002 fc23 	bl	8006890 <HAL_ADC_Init>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8004050:	f001 fa12 	bl	8005478 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004054:	2301      	movs	r3, #1
 8004056:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004058:	2301      	movs	r3, #1
 800405a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800405c:	2300      	movs	r3, #0
 800405e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004060:	463b      	mov	r3, r7
 8004062:	4619      	mov	r1, r3
 8004064:	4805      	ldr	r0, [pc, #20]	; (800407c <MX_ADC2_Init+0x98>)
 8004066:	f002 fd85 	bl	8006b74 <HAL_ADC_ConfigChannel>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8004070:	f001 fa02 	bl	8005478 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004074:	bf00      	nop
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	20000eec 	.word	0x20000eec
 8004080:	40012100 	.word	0x40012100
 8004084:	0f000001 	.word	0x0f000001

08004088 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800408e:	463b      	mov	r3, r7
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	605a      	str	r2, [r3, #4]
 8004096:	609a      	str	r2, [r3, #8]
 8004098:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800409a:	4b21      	ldr	r3, [pc, #132]	; (8004120 <MX_ADC3_Init+0x98>)
 800409c:	4a21      	ldr	r2, [pc, #132]	; (8004124 <MX_ADC3_Init+0x9c>)
 800409e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80040a0:	4b1f      	ldr	r3, [pc, #124]	; (8004120 <MX_ADC3_Init+0x98>)
 80040a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80040a6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80040a8:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <MX_ADC3_Init+0x98>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80040ae:	4b1c      	ldr	r3, [pc, #112]	; (8004120 <MX_ADC3_Init+0x98>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80040b4:	4b1a      	ldr	r3, [pc, #104]	; (8004120 <MX_ADC3_Init+0x98>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80040ba:	4b19      	ldr	r3, [pc, #100]	; (8004120 <MX_ADC3_Init+0x98>)
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80040c2:	4b17      	ldr	r3, [pc, #92]	; (8004120 <MX_ADC3_Init+0x98>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80040c8:	4b15      	ldr	r3, [pc, #84]	; (8004120 <MX_ADC3_Init+0x98>)
 80040ca:	4a17      	ldr	r2, [pc, #92]	; (8004128 <MX_ADC3_Init+0xa0>)
 80040cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80040ce:	4b14      	ldr	r3, [pc, #80]	; (8004120 <MX_ADC3_Init+0x98>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80040d4:	4b12      	ldr	r3, [pc, #72]	; (8004120 <MX_ADC3_Init+0x98>)
 80040d6:	2201      	movs	r2, #1
 80040d8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80040da:	4b11      	ldr	r3, [pc, #68]	; (8004120 <MX_ADC3_Init+0x98>)
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80040e2:	4b0f      	ldr	r3, [pc, #60]	; (8004120 <MX_ADC3_Init+0x98>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80040e8:	480d      	ldr	r0, [pc, #52]	; (8004120 <MX_ADC3_Init+0x98>)
 80040ea:	f002 fbd1 	bl	8006890 <HAL_ADC_Init>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80040f4:	f001 f9c0 	bl	8005478 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80040f8:	2309      	movs	r3, #9
 80040fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80040fc:	2301      	movs	r3, #1
 80040fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004100:	2307      	movs	r3, #7
 8004102:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004104:	463b      	mov	r3, r7
 8004106:	4619      	mov	r1, r3
 8004108:	4805      	ldr	r0, [pc, #20]	; (8004120 <MX_ADC3_Init+0x98>)
 800410a:	f002 fd33 	bl	8006b74 <HAL_ADC_ConfigChannel>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8004114:	f001 f9b0 	bl	8005478 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8004118:	bf00      	nop
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	20000f34 	.word	0x20000f34
 8004124:	40012200 	.word	0x40012200
 8004128:	0f000001 	.word	0x0f000001

0800412c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08e      	sub	sp, #56	; 0x38
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	605a      	str	r2, [r3, #4]
 800413e:	609a      	str	r2, [r3, #8]
 8004140:	60da      	str	r2, [r3, #12]
 8004142:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a57      	ldr	r2, [pc, #348]	; (80042a8 <HAL_ADC_MspInit+0x17c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d12c      	bne.n	80041a8 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800414e:	4b57      	ldr	r3, [pc, #348]	; (80042ac <HAL_ADC_MspInit+0x180>)
 8004150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004152:	4a56      	ldr	r2, [pc, #344]	; (80042ac <HAL_ADC_MspInit+0x180>)
 8004154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004158:	6453      	str	r3, [r2, #68]	; 0x44
 800415a:	4b54      	ldr	r3, [pc, #336]	; (80042ac <HAL_ADC_MspInit+0x180>)
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004162:	623b      	str	r3, [r7, #32]
 8004164:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004166:	4b51      	ldr	r3, [pc, #324]	; (80042ac <HAL_ADC_MspInit+0x180>)
 8004168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416a:	4a50      	ldr	r2, [pc, #320]	; (80042ac <HAL_ADC_MspInit+0x180>)
 800416c:	f043 0301 	orr.w	r3, r3, #1
 8004170:	6313      	str	r3, [r2, #48]	; 0x30
 8004172:	4b4e      	ldr	r3, [pc, #312]	; (80042ac <HAL_ADC_MspInit+0x180>)
 8004174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	61fb      	str	r3, [r7, #28]
 800417c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800417e:	2301      	movs	r3, #1
 8004180:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004182:	2303      	movs	r3, #3
 8004184:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004186:	2300      	movs	r3, #0
 8004188:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800418a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800418e:	4619      	mov	r1, r3
 8004190:	4847      	ldr	r0, [pc, #284]	; (80042b0 <HAL_ADC_MspInit+0x184>)
 8004192:	f004 f99b 	bl	80084cc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8004196:	2200      	movs	r2, #0
 8004198:	2100      	movs	r1, #0
 800419a:	2012      	movs	r0, #18
 800419c:	f003 fd49 	bl	8007c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80041a0:	2012      	movs	r0, #18
 80041a2:	f003 fd62 	bl	8007c6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80041a6:	e07a      	b.n	800429e <HAL_ADC_MspInit+0x172>
  else if(adcHandle->Instance==ADC2)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a41      	ldr	r2, [pc, #260]	; (80042b4 <HAL_ADC_MspInit+0x188>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d12c      	bne.n	800420c <HAL_ADC_MspInit+0xe0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80041b2:	4b3e      	ldr	r3, [pc, #248]	; (80042ac <HAL_ADC_MspInit+0x180>)
 80041b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b6:	4a3d      	ldr	r2, [pc, #244]	; (80042ac <HAL_ADC_MspInit+0x180>)
 80041b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041bc:	6453      	str	r3, [r2, #68]	; 0x44
 80041be:	4b3b      	ldr	r3, [pc, #236]	; (80042ac <HAL_ADC_MspInit+0x180>)
 80041c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c6:	61bb      	str	r3, [r7, #24]
 80041c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ca:	4b38      	ldr	r3, [pc, #224]	; (80042ac <HAL_ADC_MspInit+0x180>)
 80041cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ce:	4a37      	ldr	r2, [pc, #220]	; (80042ac <HAL_ADC_MspInit+0x180>)
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	6313      	str	r3, [r2, #48]	; 0x30
 80041d6:	4b35      	ldr	r3, [pc, #212]	; (80042ac <HAL_ADC_MspInit+0x180>)
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80041e2:	2302      	movs	r3, #2
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041e6:	2303      	movs	r3, #3
 80041e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ea:	2300      	movs	r3, #0
 80041ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041f2:	4619      	mov	r1, r3
 80041f4:	482e      	ldr	r0, [pc, #184]	; (80042b0 <HAL_ADC_MspInit+0x184>)
 80041f6:	f004 f969 	bl	80084cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80041fa:	2200      	movs	r2, #0
 80041fc:	2100      	movs	r1, #0
 80041fe:	2012      	movs	r0, #18
 8004200:	f003 fd17 	bl	8007c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004204:	2012      	movs	r0, #18
 8004206:	f003 fd30 	bl	8007c6a <HAL_NVIC_EnableIRQ>
}
 800420a:	e048      	b.n	800429e <HAL_ADC_MspInit+0x172>
  else if(adcHandle->Instance==ADC3)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a29      	ldr	r2, [pc, #164]	; (80042b8 <HAL_ADC_MspInit+0x18c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d143      	bne.n	800429e <HAL_ADC_MspInit+0x172>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004216:	4b25      	ldr	r3, [pc, #148]	; (80042ac <HAL_ADC_MspInit+0x180>)
 8004218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421a:	4a24      	ldr	r2, [pc, #144]	; (80042ac <HAL_ADC_MspInit+0x180>)
 800421c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004220:	6453      	str	r3, [r2, #68]	; 0x44
 8004222:	4b22      	ldr	r3, [pc, #136]	; (80042ac <HAL_ADC_MspInit+0x180>)
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800422e:	4b1f      	ldr	r3, [pc, #124]	; (80042ac <HAL_ADC_MspInit+0x180>)
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	4a1e      	ldr	r2, [pc, #120]	; (80042ac <HAL_ADC_MspInit+0x180>)
 8004234:	f043 0320 	orr.w	r3, r3, #32
 8004238:	6313      	str	r3, [r2, #48]	; 0x30
 800423a:	4b1c      	ldr	r3, [pc, #112]	; (80042ac <HAL_ADC_MspInit+0x180>)
 800423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423e:	f003 0320 	and.w	r3, r3, #32
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004246:	4b19      	ldr	r3, [pc, #100]	; (80042ac <HAL_ADC_MspInit+0x180>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	4a18      	ldr	r2, [pc, #96]	; (80042ac <HAL_ADC_MspInit+0x180>)
 800424c:	f043 0304 	orr.w	r3, r3, #4
 8004250:	6313      	str	r3, [r2, #48]	; 0x30
 8004252:	4b16      	ldr	r3, [pc, #88]	; (80042ac <HAL_ADC_MspInit+0x180>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	60bb      	str	r3, [r7, #8]
 800425c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800425e:	2328      	movs	r3, #40	; 0x28
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004262:	2303      	movs	r3, #3
 8004264:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004266:	2300      	movs	r3, #0
 8004268:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800426a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800426e:	4619      	mov	r1, r3
 8004270:	4812      	ldr	r0, [pc, #72]	; (80042bc <HAL_ADC_MspInit+0x190>)
 8004272:	f004 f92b 	bl	80084cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004276:	230c      	movs	r3, #12
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800427a:	2303      	movs	r3, #3
 800427c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427e:	2300      	movs	r3, #0
 8004280:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004286:	4619      	mov	r1, r3
 8004288:	480d      	ldr	r0, [pc, #52]	; (80042c0 <HAL_ADC_MspInit+0x194>)
 800428a:	f004 f91f 	bl	80084cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800428e:	2200      	movs	r2, #0
 8004290:	2100      	movs	r1, #0
 8004292:	2012      	movs	r0, #18
 8004294:	f003 fccd 	bl	8007c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004298:	2012      	movs	r0, #18
 800429a:	f003 fce6 	bl	8007c6a <HAL_NVIC_EnableIRQ>
}
 800429e:	bf00      	nop
 80042a0:	3738      	adds	r7, #56	; 0x38
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40012000 	.word	0x40012000
 80042ac:	40023800 	.word	0x40023800
 80042b0:	40020000 	.word	0x40020000
 80042b4:	40012100 	.word	0x40012100
 80042b8:	40012200 	.word	0x40012200
 80042bc:	40021400 	.word	0x40021400
 80042c0:	40020800 	.word	0x40020800

080042c4 <_write>:
			}
	}
		HAL_UART_Transmit(&uartDef, EndMSG, sizeof(EndMSG), 10000);
};
int _write(int file, char *ptr, int len)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042d0:	2300      	movs	r3, #0
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	e009      	b.n	80042ea <_write+0x26>
	{
		__io_putchar(*ptr++);
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	60ba      	str	r2, [r7, #8]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 f80c 	bl	80042fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	3301      	adds	r3, #1
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	dbf1      	blt.n	80042d6 <_write+0x12>
	}
	return len;
 80042f2:	687b      	ldr	r3, [r7, #4]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <__io_putchar>:
int __io_putchar(int ch){
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
	if(ch == '\n')
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b0a      	cmp	r3, #10
 8004308:	d106      	bne.n	8004318 <__io_putchar+0x1c>
	{
		HAL_UART_Transmit(&uartDef, (uint8_t*)"\r", 1, HAL_MAX_DELAY);
 800430a:	f04f 33ff 	mov.w	r3, #4294967295
 800430e:	2201      	movs	r2, #1
 8004310:	4907      	ldr	r1, [pc, #28]	; (8004330 <__io_putchar+0x34>)
 8004312:	4808      	ldr	r0, [pc, #32]	; (8004334 <__io_putchar+0x38>)
 8004314:	f009 fdaa 	bl	800de6c <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&uartDef, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8004318:	1d39      	adds	r1, r7, #4
 800431a:	f04f 33ff 	mov.w	r3, #4294967295
 800431e:	2201      	movs	r2, #1
 8004320:	4804      	ldr	r0, [pc, #16]	; (8004334 <__io_putchar+0x38>)
 8004322:	f009 fda3 	bl	800de6c <HAL_UART_Transmit>
	return 1;
 8004326:	2301      	movs	r3, #1
}
 8004328:	4618      	mov	r0, r3
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	080191c8 	.word	0x080191c8
 8004334:	20006504 	.word	0x20006504

08004338 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b08a      	sub	sp, #40	; 0x28
 800433c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800433e:	4b27      	ldr	r3, [pc, #156]	; (80043dc <MX_CAN1_Init+0xa4>)
 8004340:	4a27      	ldr	r2, [pc, #156]	; (80043e0 <MX_CAN1_Init+0xa8>)
 8004342:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8004344:	4b25      	ldr	r3, [pc, #148]	; (80043dc <MX_CAN1_Init+0xa4>)
 8004346:	2209      	movs	r2, #9
 8004348:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800434a:	4b24      	ldr	r3, [pc, #144]	; (80043dc <MX_CAN1_Init+0xa4>)
 800434c:	2200      	movs	r2, #0
 800434e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004350:	4b22      	ldr	r3, [pc, #136]	; (80043dc <MX_CAN1_Init+0xa4>)
 8004352:	2200      	movs	r2, #0
 8004354:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8004356:	4b21      	ldr	r3, [pc, #132]	; (80043dc <MX_CAN1_Init+0xa4>)
 8004358:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800435c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800435e:	4b1f      	ldr	r3, [pc, #124]	; (80043dc <MX_CAN1_Init+0xa4>)
 8004360:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004364:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8004366:	4b1d      	ldr	r3, [pc, #116]	; (80043dc <MX_CAN1_Init+0xa4>)
 8004368:	2200      	movs	r2, #0
 800436a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800436c:	4b1b      	ldr	r3, [pc, #108]	; (80043dc <MX_CAN1_Init+0xa4>)
 800436e:	2200      	movs	r2, #0
 8004370:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8004372:	4b1a      	ldr	r3, [pc, #104]	; (80043dc <MX_CAN1_Init+0xa4>)
 8004374:	2200      	movs	r2, #0
 8004376:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8004378:	4b18      	ldr	r3, [pc, #96]	; (80043dc <MX_CAN1_Init+0xa4>)
 800437a:	2201      	movs	r2, #1
 800437c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800437e:	4b17      	ldr	r3, [pc, #92]	; (80043dc <MX_CAN1_Init+0xa4>)
 8004380:	2200      	movs	r2, #0
 8004382:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8004384:	4b15      	ldr	r3, [pc, #84]	; (80043dc <MX_CAN1_Init+0xa4>)
 8004386:	2200      	movs	r2, #0
 8004388:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800438a:	4814      	ldr	r0, [pc, #80]	; (80043dc <MX_CAN1_Init+0xa4>)
 800438c:	f002 fe4c 	bl	8007028 <HAL_CAN_Init>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8004396:	f001 f86f 	bl	8005478 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800439a:	2301      	movs	r3, #1
 800439c:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 800439e:	2312      	movs	r3, #18
 80043a0:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80043a2:	2300      	movs	r3, #0
 80043a4:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0;
 80043a6:	2300      	movs	r3, #0
 80043a8:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 80043aa:	2300      	movs	r3, #0
 80043ac:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0;
 80043ae:	2300      	movs	r3, #0
 80043b0:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0;
 80043b2:	2300      	movs	r3, #0
 80043b4:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80043ba:	2301      	movs	r3, #1
 80043bc:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 10;
 80043be:	230a      	movs	r3, #10
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80043c2:	463b      	mov	r3, r7
 80043c4:	4619      	mov	r1, r3
 80043c6:	4805      	ldr	r0, [pc, #20]	; (80043dc <MX_CAN1_Init+0xa4>)
 80043c8:	f002 ff2a 	bl	8007220 <HAL_CAN_ConfigFilter>
  EcuInit(&EcuData);
 80043cc:	4805      	ldr	r0, [pc, #20]	; (80043e4 <MX_CAN1_Init+0xac>)
 80043ce:	f000 fa41 	bl	8004854 <EcuInit>
  /* USER CODE END CAN1_Init 2 */

}
 80043d2:	bf00      	nop
 80043d4:	3728      	adds	r7, #40	; 0x28
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20000fa4 	.word	0x20000fa4
 80043e0:	40006400 	.word	0x40006400
 80043e4:	20000f7c 	.word	0x20000f7c

080043e8 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80043ec:	4b17      	ldr	r3, [pc, #92]	; (800444c <MX_CAN2_Init+0x64>)
 80043ee:	4a18      	ldr	r2, [pc, #96]	; (8004450 <MX_CAN2_Init+0x68>)
 80043f0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 80043f2:	4b16      	ldr	r3, [pc, #88]	; (800444c <MX_CAN2_Init+0x64>)
 80043f4:	2209      	movs	r2, #9
 80043f6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80043f8:	4b14      	ldr	r3, [pc, #80]	; (800444c <MX_CAN2_Init+0x64>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80043fe:	4b13      	ldr	r3, [pc, #76]	; (800444c <MX_CAN2_Init+0x64>)
 8004400:	2200      	movs	r2, #0
 8004402:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8004404:	4b11      	ldr	r3, [pc, #68]	; (800444c <MX_CAN2_Init+0x64>)
 8004406:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800440a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 800440c:	4b0f      	ldr	r3, [pc, #60]	; (800444c <MX_CAN2_Init+0x64>)
 800440e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004412:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8004414:	4b0d      	ldr	r3, [pc, #52]	; (800444c <MX_CAN2_Init+0x64>)
 8004416:	2200      	movs	r2, #0
 8004418:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800441a:	4b0c      	ldr	r3, [pc, #48]	; (800444c <MX_CAN2_Init+0x64>)
 800441c:	2200      	movs	r2, #0
 800441e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8004420:	4b0a      	ldr	r3, [pc, #40]	; (800444c <MX_CAN2_Init+0x64>)
 8004422:	2200      	movs	r2, #0
 8004424:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <MX_CAN2_Init+0x64>)
 8004428:	2201      	movs	r2, #1
 800442a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800442c:	4b07      	ldr	r3, [pc, #28]	; (800444c <MX_CAN2_Init+0x64>)
 800442e:	2200      	movs	r2, #0
 8004430:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8004432:	4b06      	ldr	r3, [pc, #24]	; (800444c <MX_CAN2_Init+0x64>)
 8004434:	2200      	movs	r2, #0
 8004436:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8004438:	4804      	ldr	r0, [pc, #16]	; (800444c <MX_CAN2_Init+0x64>)
 800443a:	f002 fdf5 	bl	8007028 <HAL_CAN_Init>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8004444:	f001 f818 	bl	8005478 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8004448:	bf00      	nop
 800444a:	bd80      	pop	{r7, pc}
 800444c:	20000fcc 	.word	0x20000fcc
 8004450:	40006800 	.word	0x40006800

08004454 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08e      	sub	sp, #56	; 0x38
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800445c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	605a      	str	r2, [r3, #4]
 8004466:	609a      	str	r2, [r3, #8]
 8004468:	60da      	str	r2, [r3, #12]
 800446a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a4b      	ldr	r2, [pc, #300]	; (80045a0 <HAL_CAN_MspInit+0x14c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d139      	bne.n	80044ea <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004476:	4b4b      	ldr	r3, [pc, #300]	; (80045a4 <HAL_CAN_MspInit+0x150>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3301      	adds	r3, #1
 800447c:	4a49      	ldr	r2, [pc, #292]	; (80045a4 <HAL_CAN_MspInit+0x150>)
 800447e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004480:	4b48      	ldr	r3, [pc, #288]	; (80045a4 <HAL_CAN_MspInit+0x150>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d10b      	bne.n	80044a0 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004488:	4b47      	ldr	r3, [pc, #284]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 800448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448c:	4a46      	ldr	r2, [pc, #280]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 800448e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004492:	6413      	str	r3, [r2, #64]	; 0x40
 8004494:	4b44      	ldr	r3, [pc, #272]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449c:	623b      	str	r3, [r7, #32]
 800449e:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80044a0:	4b41      	ldr	r3, [pc, #260]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	4a40      	ldr	r2, [pc, #256]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 80044a6:	f043 0308 	orr.w	r3, r3, #8
 80044aa:	6313      	str	r3, [r2, #48]	; 0x30
 80044ac:	4b3e      	ldr	r3, [pc, #248]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 80044ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	61fb      	str	r3, [r7, #28]
 80044b6:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80044b8:	2303      	movs	r3, #3
 80044ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044bc:	2302      	movs	r3, #2
 80044be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c0:	2300      	movs	r3, #0
 80044c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044c4:	2303      	movs	r3, #3
 80044c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80044c8:	2309      	movs	r3, #9
 80044ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044d0:	4619      	mov	r1, r3
 80044d2:	4836      	ldr	r0, [pc, #216]	; (80045ac <HAL_CAN_MspInit+0x158>)
 80044d4:	f003 fffa 	bl	80084cc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80044d8:	2200      	movs	r2, #0
 80044da:	2100      	movs	r1, #0
 80044dc:	2014      	movs	r0, #20
 80044de:	f003 fba8 	bl	8007c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80044e2:	2014      	movs	r0, #20
 80044e4:	f003 fbc1 	bl	8007c6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80044e8:	e056      	b.n	8004598 <HAL_CAN_MspInit+0x144>
  else if(canHandle->Instance==CAN2)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a30      	ldr	r2, [pc, #192]	; (80045b0 <HAL_CAN_MspInit+0x15c>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d151      	bne.n	8004598 <HAL_CAN_MspInit+0x144>
    __HAL_RCC_CAN3_CLK_ENABLE();
 80044f4:	4b2c      	ldr	r3, [pc, #176]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 80044f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f8:	4a2b      	ldr	r2, [pc, #172]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 80044fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80044fe:	6413      	str	r3, [r2, #64]	; 0x40
 8004500:	4b29      	ldr	r3, [pc, #164]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004508:	61bb      	str	r3, [r7, #24]
 800450a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 800450c:	4b26      	ldr	r3, [pc, #152]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	4a25      	ldr	r2, [pc, #148]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 8004512:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004516:	6413      	str	r3, [r2, #64]	; 0x40
 8004518:	4b23      	ldr	r3, [pc, #140]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004520:	617b      	str	r3, [r7, #20]
 8004522:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004524:	4b1f      	ldr	r3, [pc, #124]	; (80045a4 <HAL_CAN_MspInit+0x150>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3301      	adds	r3, #1
 800452a:	4a1e      	ldr	r2, [pc, #120]	; (80045a4 <HAL_CAN_MspInit+0x150>)
 800452c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800452e:	4b1d      	ldr	r3, [pc, #116]	; (80045a4 <HAL_CAN_MspInit+0x150>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d10b      	bne.n	800454e <HAL_CAN_MspInit+0xfa>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004536:	4b1c      	ldr	r3, [pc, #112]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	4a1b      	ldr	r2, [pc, #108]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 800453c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004540:	6413      	str	r3, [r2, #64]	; 0x40
 8004542:	4b19      	ldr	r3, [pc, #100]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454a:	613b      	str	r3, [r7, #16]
 800454c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800454e:	4b16      	ldr	r3, [pc, #88]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 8004550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004552:	4a15      	ldr	r2, [pc, #84]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 8004554:	f043 0302 	orr.w	r3, r3, #2
 8004558:	6313      	str	r3, [r2, #48]	; 0x30
 800455a:	4b13      	ldr	r3, [pc, #76]	; (80045a8 <HAL_CAN_MspInit+0x154>)
 800455c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004566:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800456c:	2302      	movs	r3, #2
 800456e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004570:	2300      	movs	r3, #0
 8004572:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004574:	2303      	movs	r3, #3
 8004576:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8004578:	2309      	movs	r3, #9
 800457a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800457c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004580:	4619      	mov	r1, r3
 8004582:	480c      	ldr	r0, [pc, #48]	; (80045b4 <HAL_CAN_MspInit+0x160>)
 8004584:	f003 ffa2 	bl	80084cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8004588:	2200      	movs	r2, #0
 800458a:	2100      	movs	r1, #0
 800458c:	2040      	movs	r0, #64	; 0x40
 800458e:	f003 fb50 	bl	8007c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8004592:	2040      	movs	r0, #64	; 0x40
 8004594:	f003 fb69 	bl	8007c6a <HAL_NVIC_EnableIRQ>
}
 8004598:	bf00      	nop
 800459a:	3738      	adds	r7, #56	; 0x38
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40006400 	.word	0x40006400
 80045a4:	20000ff4 	.word	0x20000ff4
 80045a8:	40023800 	.word	0x40023800
 80045ac:	40020c00 	.word	0x40020c00
 80045b0:	40006800 	.word	0x40006800
 80045b4:	40020400 	.word	0x40020400

080045b8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  /* USER CODE END CAN2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80045b8:	b590      	push	{r4, r7, lr}
 80045ba:	b091      	sub	sp, #68	; 0x44
 80045bc:	af04      	add	r7, sp, #16
 80045be:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80045c0:	f107 030c 	add.w	r3, r7, #12
 80045c4:	f107 0214 	add.w	r2, r7, #20
 80045c8:	2100      	movs	r1, #0
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f002 ff14 	bl	80073f8 <HAL_CAN_GetRxMessage>
	if (hcan->Instance == CAN1) {
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a12      	ldr	r2, [pc, #72]	; (8004620 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d10f      	bne.n	80045fa <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
		//ComputeEcumasterFrame(RxHeader, RxData);
		ComputeInternalFrame(RxHeader, RxData);
 80045da:	f107 030c 	add.w	r3, r7, #12
 80045de:	9303      	str	r3, [sp, #12]
 80045e0:	466c      	mov	r4, sp
 80045e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80045ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80045ee:	f107 0314 	add.w	r3, r7, #20
 80045f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045f4:	f000 f8e4 	bl	80047c0 <ComputeInternalFrame>
	} else {
		//ComputeInternalFrame(RxHeader, RxData);
		ComputeEcumasterFrame(RxHeader, RxData);
	}
}
 80045f8:	e00e      	b.n	8004618 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
		ComputeEcumasterFrame(RxHeader, RxData);
 80045fa:	f107 030c 	add.w	r3, r7, #12
 80045fe:	9303      	str	r3, [sp, #12]
 8004600:	466c      	mov	r4, sp
 8004602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004606:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800460a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800460e:	f107 0314 	add.w	r3, r7, #20
 8004612:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004614:	f000 f806 	bl	8004624 <ComputeEcumasterFrame>
}
 8004618:	bf00      	nop
 800461a:	3734      	adds	r7, #52	; 0x34
 800461c:	46bd      	mov	sp, r7
 800461e:	bd90      	pop	{r4, r7, pc}
 8004620:	40006400 	.word	0x40006400

08004624 <ComputeEcumasterFrame>:

void ComputeEcumasterFrame(CAN_RxHeaderTypeDef RxHeader, uint8_t *RxData) {
 8004624:	b084      	sub	sp, #16
 8004626:	b580      	push	{r7, lr}
 8004628:	af00      	add	r7, sp, #0
 800462a:	f107 0c08 	add.w	ip, r7, #8
 800462e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (RxHeader.StdId == Frame1) {
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004638:	d121      	bne.n	800467e <ComputeEcumasterFrame+0x5a>
		EcuData.rpm = LittleToBigEndian(&RxData[0]);
 800463a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800463c:	f000 f8cc 	bl	80047d8 <LittleToBigEndian>
 8004640:	4603      	mov	r3, r0
 8004642:	461a      	mov	r2, r3
 8004644:	4b5d      	ldr	r3, [pc, #372]	; (80047bc <ComputeEcumasterFrame+0x198>)
 8004646:	801a      	strh	r2, [r3, #0]
		EcuData.tps = RxData[2];
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	789a      	ldrb	r2, [r3, #2]
 800464c:	4b5b      	ldr	r3, [pc, #364]	; (80047bc <ComputeEcumasterFrame+0x198>)
 800464e:	709a      	strb	r2, [r3, #2]
		EcuData.iat = RxData[3];
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	78da      	ldrb	r2, [r3, #3]
 8004654:	4b59      	ldr	r3, [pc, #356]	; (80047bc <ComputeEcumasterFrame+0x198>)
 8004656:	70da      	strb	r2, [r3, #3]
		EcuData.map = LittleToBigEndian(&RxData[4]);
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	3304      	adds	r3, #4
 800465c:	4618      	mov	r0, r3
 800465e:	f000 f8bb 	bl	80047d8 <LittleToBigEndian>
 8004662:	4603      	mov	r3, r0
 8004664:	461a      	mov	r2, r3
 8004666:	4b55      	ldr	r3, [pc, #340]	; (80047bc <ComputeEcumasterFrame+0x198>)
 8004668:	809a      	strh	r2, [r3, #4]
		EcuData.injPW = LittleToBigEndian(&RxData[6]);
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	3306      	adds	r3, #6
 800466e:	4618      	mov	r0, r3
 8004670:	f000 f8b2 	bl	80047d8 <LittleToBigEndian>
 8004674:	4603      	mov	r3, r0
 8004676:	461a      	mov	r2, r3
 8004678:	4b50      	ldr	r3, [pc, #320]	; (80047bc <ComputeEcumasterFrame+0x198>)
 800467a:	80da      	strh	r2, [r3, #6]
		EcuData.TCDRPMRaw = LittleToBigEndian(&RxData[2]);
		EcuData.TCDRPM = LittleToBigEndian(&RxData[4]);
		EcuData.TCTorqueReduction = RxData[6];
		EcuData.PitLimitTorqueReduction = RxData[7];
	}
}
 800467c:	e097      	b.n	80047ae <ComputeEcumasterFrame+0x18a>
	} else if (RxHeader.StdId == Frame3) {
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f240 6202 	movw	r2, #1538	; 0x602
 8004684:	4293      	cmp	r3, r2
 8004686:	d118      	bne.n	80046ba <ComputeEcumasterFrame+0x96>
		EcuData.speed = LittleToBigEndian(&RxData[0]);
 8004688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800468a:	f000 f8a5 	bl	80047d8 <LittleToBigEndian>
 800468e:	4603      	mov	r3, r0
 8004690:	461a      	mov	r2, r3
 8004692:	4b4a      	ldr	r3, [pc, #296]	; (80047bc <ComputeEcumasterFrame+0x198>)
 8004694:	811a      	strh	r2, [r3, #8]
		EcuData.oilTemp = RxData[3];
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	78da      	ldrb	r2, [r3, #3]
 800469a:	4b48      	ldr	r3, [pc, #288]	; (80047bc <ComputeEcumasterFrame+0x198>)
 800469c:	72da      	strb	r2, [r3, #11]
		EcuData.oilPress = RxData[4];
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	791a      	ldrb	r2, [r3, #4]
 80046a2:	4b46      	ldr	r3, [pc, #280]	; (80047bc <ComputeEcumasterFrame+0x198>)
 80046a4:	731a      	strb	r2, [r3, #12]
		EcuData.clt = LittleToBigEndian(&RxData[6]);
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	3306      	adds	r3, #6
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 f894 	bl	80047d8 <LittleToBigEndian>
 80046b0:	4603      	mov	r3, r0
 80046b2:	b21a      	sxth	r2, r3
 80046b4:	4b41      	ldr	r3, [pc, #260]	; (80047bc <ComputeEcumasterFrame+0x198>)
 80046b6:	81da      	strh	r2, [r3, #14]
}
 80046b8:	e079      	b.n	80047ae <ComputeEcumasterFrame+0x18a>
	} else if (RxHeader.StdId == Frame4) {
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	f240 6203 	movw	r2, #1539	; 0x603
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d123      	bne.n	800470c <ComputeEcumasterFrame+0xe8>
		EcuData.ignAngle = RxData[0];
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	b25a      	sxtb	r2, r3
 80046ca:	4b3c      	ldr	r3, [pc, #240]	; (80047bc <ComputeEcumasterFrame+0x198>)
 80046cc:	741a      	strb	r2, [r3, #16]
		EcuData.ignDwell = RxData[1];
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	785a      	ldrb	r2, [r3, #1]
 80046d2:	4b3a      	ldr	r3, [pc, #232]	; (80047bc <ComputeEcumasterFrame+0x198>)
 80046d4:	745a      	strb	r2, [r3, #17]
		EcuData.lambda = RxData[2];
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	789a      	ldrb	r2, [r3, #2]
 80046da:	4b38      	ldr	r3, [pc, #224]	; (80047bc <ComputeEcumasterFrame+0x198>)
 80046dc:	749a      	strb	r2, [r3, #18]
		EcuData.lambdaCorrection = RxData[3];
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	78da      	ldrb	r2, [r3, #3]
 80046e2:	4b36      	ldr	r3, [pc, #216]	; (80047bc <ComputeEcumasterFrame+0x198>)
 80046e4:	74da      	strb	r2, [r3, #19]
		EcuData.egt1 = LittleToBigEndian(&RxData[4]);
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	3304      	adds	r3, #4
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 f874 	bl	80047d8 <LittleToBigEndian>
 80046f0:	4603      	mov	r3, r0
 80046f2:	461a      	mov	r2, r3
 80046f4:	4b31      	ldr	r3, [pc, #196]	; (80047bc <ComputeEcumasterFrame+0x198>)
 80046f6:	829a      	strh	r2, [r3, #20]
		EcuData.egt2 = LittleToBigEndian(&RxData[6]);
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	3306      	adds	r3, #6
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 f86b 	bl	80047d8 <LittleToBigEndian>
 8004702:	4603      	mov	r3, r0
 8004704:	461a      	mov	r2, r3
 8004706:	4b2d      	ldr	r3, [pc, #180]	; (80047bc <ComputeEcumasterFrame+0x198>)
 8004708:	82da      	strh	r2, [r3, #22]
}
 800470a:	e050      	b.n	80047ae <ComputeEcumasterFrame+0x18a>
	} else if (RxHeader.StdId == Frame5) {
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f240 6204 	movw	r2, #1540	; 0x604
 8004712:	4293      	cmp	r3, r2
 8004714:	d120      	bne.n	8004758 <ComputeEcumasterFrame+0x134>
		EcuData.gear = RxData[0];
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	781a      	ldrb	r2, [r3, #0]
 800471a:	4b28      	ldr	r3, [pc, #160]	; (80047bc <ComputeEcumasterFrame+0x198>)
 800471c:	761a      	strb	r2, [r3, #24]
		EcuData.ecuTemp = RxData[1];
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	3301      	adds	r3, #1
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	b25a      	sxtb	r2, r3
 8004726:	4b25      	ldr	r3, [pc, #148]	; (80047bc <ComputeEcumasterFrame+0x198>)
 8004728:	765a      	strb	r2, [r3, #25]
		EcuData.batt = LittleToBigEndian(&RxData[2]);
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	3302      	adds	r3, #2
 800472e:	4618      	mov	r0, r3
 8004730:	f000 f852 	bl	80047d8 <LittleToBigEndian>
 8004734:	4603      	mov	r3, r0
 8004736:	461a      	mov	r2, r3
 8004738:	4b20      	ldr	r3, [pc, #128]	; (80047bc <ComputeEcumasterFrame+0x198>)
 800473a:	835a      	strh	r2, [r3, #26]
		EcuData.errflag = LittleToBigEndian(&RxData[5]);
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	3305      	adds	r3, #5
 8004740:	4618      	mov	r0, r3
 8004742:	f000 f849 	bl	80047d8 <LittleToBigEndian>
 8004746:	4603      	mov	r3, r0
 8004748:	461a      	mov	r2, r3
 800474a:	4b1c      	ldr	r3, [pc, #112]	; (80047bc <ComputeEcumasterFrame+0x198>)
 800474c:	839a      	strh	r2, [r3, #28]
		EcuData.flags1 = RxData[7];
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	79da      	ldrb	r2, [r3, #7]
 8004752:	4b1a      	ldr	r3, [pc, #104]	; (80047bc <ComputeEcumasterFrame+0x198>)
 8004754:	779a      	strb	r2, [r3, #30]
}
 8004756:	e02a      	b.n	80047ae <ComputeEcumasterFrame+0x18a>
	} else if (RxHeader.StdId == Frame6) {
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f240 6205 	movw	r2, #1541	; 0x605
 800475e:	4293      	cmp	r3, r2
 8004760:	d125      	bne.n	80047ae <ComputeEcumasterFrame+0x18a>
		EcuData.DBWPosition = RxData[0];
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	781a      	ldrb	r2, [r3, #0]
 8004766:	4b15      	ldr	r3, [pc, #84]	; (80047bc <ComputeEcumasterFrame+0x198>)
 8004768:	77da      	strb	r2, [r3, #31]
		EcuData.DBWTrigger = RxData[1];
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	785a      	ldrb	r2, [r3, #1]
 800476e:	4b13      	ldr	r3, [pc, #76]	; (80047bc <ComputeEcumasterFrame+0x198>)
 8004770:	f883 2020 	strb.w	r2, [r3, #32]
		EcuData.TCDRPMRaw = LittleToBigEndian(&RxData[2]);
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	3302      	adds	r3, #2
 8004778:	4618      	mov	r0, r3
 800477a:	f000 f82d 	bl	80047d8 <LittleToBigEndian>
 800477e:	4603      	mov	r3, r0
 8004780:	461a      	mov	r2, r3
 8004782:	4b0e      	ldr	r3, [pc, #56]	; (80047bc <ComputeEcumasterFrame+0x198>)
 8004784:	845a      	strh	r2, [r3, #34]	; 0x22
		EcuData.TCDRPM = LittleToBigEndian(&RxData[4]);
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	3304      	adds	r3, #4
 800478a:	4618      	mov	r0, r3
 800478c:	f000 f824 	bl	80047d8 <LittleToBigEndian>
 8004790:	4603      	mov	r3, r0
 8004792:	b2da      	uxtb	r2, r3
 8004794:	4b09      	ldr	r3, [pc, #36]	; (80047bc <ComputeEcumasterFrame+0x198>)
 8004796:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		EcuData.TCTorqueReduction = RxData[6];
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	799a      	ldrb	r2, [r3, #6]
 800479e:	4b07      	ldr	r3, [pc, #28]	; (80047bc <ComputeEcumasterFrame+0x198>)
 80047a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		EcuData.PitLimitTorqueReduction = RxData[7];
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	79da      	ldrb	r2, [r3, #7]
 80047a8:	4b04      	ldr	r3, [pc, #16]	; (80047bc <ComputeEcumasterFrame+0x198>)
 80047aa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80047ae:	bf00      	nop
 80047b0:	46bd      	mov	sp, r7
 80047b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047b6:	b004      	add	sp, #16
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	20000f7c 	.word	0x20000f7c

080047c0 <ComputeInternalFrame>:

void ComputeInternalFrame(CAN_RxHeaderTypeDef RxHeader, uint8_t *RxData) {
 80047c0:	b084      	sub	sp, #16
 80047c2:	b490      	push	{r4, r7}
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	f107 0408 	add.w	r4, r7, #8
 80047ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 80047ce:	bf00      	nop
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bc90      	pop	{r4, r7}
 80047d4:	b004      	add	sp, #16
 80047d6:	4770      	bx	lr

080047d8 <LittleToBigEndian>:

uint16_t LittleToBigEndian(uint8_t *data) {
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
	uint16_t returnData = data[0] + data[1] * 0xFF;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3301      	adds	r3, #1
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	4619      	mov	r1, r3
 80047f0:	0209      	lsls	r1, r1, #8
 80047f2:	1acb      	subs	r3, r1, r3
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	4413      	add	r3, r2
 80047f8:	81fb      	strh	r3, [r7, #14]
	return returnData;
 80047fa:	89fb      	ldrh	r3, [r7, #14]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800480e:	4b10      	ldr	r3, [pc, #64]	; (8004850 <MX_DMA_Init+0x48>)
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	4a0f      	ldr	r2, [pc, #60]	; (8004850 <MX_DMA_Init+0x48>)
 8004814:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004818:	6313      	str	r3, [r2, #48]	; 0x30
 800481a:	4b0d      	ldr	r3, [pc, #52]	; (8004850 <MX_DMA_Init+0x48>)
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004822:	607b      	str	r3, [r7, #4]
 8004824:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004826:	2200      	movs	r2, #0
 8004828:	2100      	movs	r1, #0
 800482a:	2038      	movs	r0, #56	; 0x38
 800482c:	f003 fa01 	bl	8007c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004830:	2038      	movs	r0, #56	; 0x38
 8004832:	f003 fa1a 	bl	8007c6a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8004836:	2200      	movs	r2, #0
 8004838:	2100      	movs	r1, #0
 800483a:	2044      	movs	r0, #68	; 0x44
 800483c:	f003 f9f9 	bl	8007c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8004840:	2044      	movs	r0, #68	; 0x44
 8004842:	f003 fa12 	bl	8007c6a <HAL_NVIC_EnableIRQ>

}
 8004846:	bf00      	nop
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40023800 	.word	0x40023800

08004854 <EcuInit>:
 */

#include "ecumaster.h"

void EcuInit(EcumasterData* ecu)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
	ecu->rpm = 0;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	801a      	strh	r2, [r3, #0]
	ecu->tps =0;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	709a      	strb	r2, [r3, #2]
	ecu->iat =0;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	70da      	strb	r2, [r3, #3]
	ecu->map =0;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	809a      	strh	r2, [r3, #4]
	ecu->injPW =0;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	80da      	strh	r2, [r3, #6]
	ecu->baro =0;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	729a      	strb	r2, [r3, #10]
	ecu->batt =0;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	835a      	strh	r2, [r3, #26]
	ecu->clt =0;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	81da      	strh	r2, [r3, #14]
	ecu->ecuTemp =0;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	765a      	strb	r2, [r3, #25]
	ecu->speed =0;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	811a      	strh	r2, [r3, #8]
	ecu->oilTemp =0;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	72da      	strb	r2, [r3, #11]
	ecu->oilPress =0;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	731a      	strb	r2, [r3, #12]
	ecu->ignAngle =0;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	741a      	strb	r2, [r3, #16]
	ecu->ignDwell =0;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	745a      	strb	r2, [r3, #17]
	ecu->lambda =0;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	749a      	strb	r2, [r3, #18]
	ecu->lambdaCorrection =0;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	74da      	strb	r2, [r3, #19]
	ecu->egt1=0;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	829a      	strh	r2, [r3, #20]
	ecu->egt2=0;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	82da      	strh	r2, [r3, #22]
	ecu->gear=0;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	761a      	strb	r2, [r3, #24]
	ecu->ecuTemp=0;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	765a      	strb	r2, [r3, #25]
	ecu->batt=0;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	835a      	strh	r2, [r3, #26]
	ecu->errflag=0;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	839a      	strh	r2, [r3, #28]
	ecu->flags1=0;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	779a      	strb	r2, [r3, #30]
	ecu->DBWPosition=0;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	77da      	strb	r2, [r3, #31]
	ecu->DBWTrigger=0;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2020 	strb.w	r2, [r3, #32]
	ecu->TCDRPMRaw =0;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	845a      	strh	r2, [r3, #34]	; 0x22
	ecu->TCDRPM =0;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	ecu->TCTorqueReduction=0;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	ecu->PitLimitTorqueReduction=0;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
	...

08004920 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004920:	b480      	push	{r7}
 8004922:	b089      	sub	sp, #36	; 0x24
 8004924:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004926:	4b2d      	ldr	r3, [pc, #180]	; (80049dc <MX_GPIO_Init+0xbc>)
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	4a2c      	ldr	r2, [pc, #176]	; (80049dc <MX_GPIO_Init+0xbc>)
 800492c:	f043 0304 	orr.w	r3, r3, #4
 8004930:	6313      	str	r3, [r2, #48]	; 0x30
 8004932:	4b2a      	ldr	r3, [pc, #168]	; (80049dc <MX_GPIO_Init+0xbc>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	f003 0304 	and.w	r3, r3, #4
 800493a:	61fb      	str	r3, [r7, #28]
 800493c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800493e:	4b27      	ldr	r3, [pc, #156]	; (80049dc <MX_GPIO_Init+0xbc>)
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	4a26      	ldr	r2, [pc, #152]	; (80049dc <MX_GPIO_Init+0xbc>)
 8004944:	f043 0320 	orr.w	r3, r3, #32
 8004948:	6313      	str	r3, [r2, #48]	; 0x30
 800494a:	4b24      	ldr	r3, [pc, #144]	; (80049dc <MX_GPIO_Init+0xbc>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	f003 0320 	and.w	r3, r3, #32
 8004952:	61bb      	str	r3, [r7, #24]
 8004954:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004956:	4b21      	ldr	r3, [pc, #132]	; (80049dc <MX_GPIO_Init+0xbc>)
 8004958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495a:	4a20      	ldr	r2, [pc, #128]	; (80049dc <MX_GPIO_Init+0xbc>)
 800495c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004960:	6313      	str	r3, [r2, #48]	; 0x30
 8004962:	4b1e      	ldr	r3, [pc, #120]	; (80049dc <MX_GPIO_Init+0xbc>)
 8004964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800496e:	4b1b      	ldr	r3, [pc, #108]	; (80049dc <MX_GPIO_Init+0xbc>)
 8004970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004972:	4a1a      	ldr	r2, [pc, #104]	; (80049dc <MX_GPIO_Init+0xbc>)
 8004974:	f043 0301 	orr.w	r3, r3, #1
 8004978:	6313      	str	r3, [r2, #48]	; 0x30
 800497a:	4b18      	ldr	r3, [pc, #96]	; (80049dc <MX_GPIO_Init+0xbc>)
 800497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	613b      	str	r3, [r7, #16]
 8004984:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004986:	4b15      	ldr	r3, [pc, #84]	; (80049dc <MX_GPIO_Init+0xbc>)
 8004988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498a:	4a14      	ldr	r2, [pc, #80]	; (80049dc <MX_GPIO_Init+0xbc>)
 800498c:	f043 0302 	orr.w	r3, r3, #2
 8004990:	6313      	str	r3, [r2, #48]	; 0x30
 8004992:	4b12      	ldr	r3, [pc, #72]	; (80049dc <MX_GPIO_Init+0xbc>)
 8004994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800499e:	4b0f      	ldr	r3, [pc, #60]	; (80049dc <MX_GPIO_Init+0xbc>)
 80049a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a2:	4a0e      	ldr	r2, [pc, #56]	; (80049dc <MX_GPIO_Init+0xbc>)
 80049a4:	f043 0308 	orr.w	r3, r3, #8
 80049a8:	6313      	str	r3, [r2, #48]	; 0x30
 80049aa:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <MX_GPIO_Init+0xbc>)
 80049ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	60bb      	str	r3, [r7, #8]
 80049b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80049b6:	4b09      	ldr	r3, [pc, #36]	; (80049dc <MX_GPIO_Init+0xbc>)
 80049b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ba:	4a08      	ldr	r2, [pc, #32]	; (80049dc <MX_GPIO_Init+0xbc>)
 80049bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049c0:	6313      	str	r3, [r2, #48]	; 0x30
 80049c2:	4b06      	ldr	r3, [pc, #24]	; (80049dc <MX_GPIO_Init+0xbc>)
 80049c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ca:	607b      	str	r3, [r7, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]

}
 80049ce:	bf00      	nop
 80049d0:	3724      	adds	r7, #36	; 0x24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40023800 	.word	0x40023800

080049e0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c3;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80049e4:	4b1b      	ldr	r3, [pc, #108]	; (8004a54 <MX_I2C1_Init+0x74>)
 80049e6:	4a1c      	ldr	r2, [pc, #112]	; (8004a58 <MX_I2C1_Init+0x78>)
 80049e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 80049ea:	4b1a      	ldr	r3, [pc, #104]	; (8004a54 <MX_I2C1_Init+0x74>)
 80049ec:	4a1b      	ldr	r2, [pc, #108]	; (8004a5c <MX_I2C1_Init+0x7c>)
 80049ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80049f0:	4b18      	ldr	r3, [pc, #96]	; (8004a54 <MX_I2C1_Init+0x74>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80049f6:	4b17      	ldr	r3, [pc, #92]	; (8004a54 <MX_I2C1_Init+0x74>)
 80049f8:	2201      	movs	r2, #1
 80049fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80049fc:	4b15      	ldr	r3, [pc, #84]	; (8004a54 <MX_I2C1_Init+0x74>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004a02:	4b14      	ldr	r3, [pc, #80]	; (8004a54 <MX_I2C1_Init+0x74>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004a08:	4b12      	ldr	r3, [pc, #72]	; (8004a54 <MX_I2C1_Init+0x74>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004a0e:	4b11      	ldr	r3, [pc, #68]	; (8004a54 <MX_I2C1_Init+0x74>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004a14:	4b0f      	ldr	r3, [pc, #60]	; (8004a54 <MX_I2C1_Init+0x74>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004a1a:	480e      	ldr	r0, [pc, #56]	; (8004a54 <MX_I2C1_Init+0x74>)
 8004a1c:	f003 ff02 	bl	8008824 <HAL_I2C_Init>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004a26:	f000 fd27 	bl	8005478 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	4809      	ldr	r0, [pc, #36]	; (8004a54 <MX_I2C1_Init+0x74>)
 8004a2e:	f004 ffc9 	bl	80099c4 <HAL_I2CEx_ConfigAnalogFilter>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004a38:	f000 fd1e 	bl	8005478 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	4805      	ldr	r0, [pc, #20]	; (8004a54 <MX_I2C1_Init+0x74>)
 8004a40:	f005 f80b 	bl	8009a5a <HAL_I2CEx_ConfigDigitalFilter>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004a4a:	f000 fd15 	bl	8005478 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004a4e:	bf00      	nop
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20000ff8 	.word	0x20000ff8
 8004a58:	40005400 	.word	0x40005400
 8004a5c:	6000030d 	.word	0x6000030d

08004a60 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004a64:	4b1b      	ldr	r3, [pc, #108]	; (8004ad4 <MX_I2C2_Init+0x74>)
 8004a66:	4a1c      	ldr	r2, [pc, #112]	; (8004ad8 <MX_I2C2_Init+0x78>)
 8004a68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x6000030D;
 8004a6a:	4b1a      	ldr	r3, [pc, #104]	; (8004ad4 <MX_I2C2_Init+0x74>)
 8004a6c:	4a1b      	ldr	r2, [pc, #108]	; (8004adc <MX_I2C2_Init+0x7c>)
 8004a6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004a70:	4b18      	ldr	r3, [pc, #96]	; (8004ad4 <MX_I2C2_Init+0x74>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004a76:	4b17      	ldr	r3, [pc, #92]	; (8004ad4 <MX_I2C2_Init+0x74>)
 8004a78:	2201      	movs	r2, #1
 8004a7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004a7c:	4b15      	ldr	r3, [pc, #84]	; (8004ad4 <MX_I2C2_Init+0x74>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004a82:	4b14      	ldr	r3, [pc, #80]	; (8004ad4 <MX_I2C2_Init+0x74>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004a88:	4b12      	ldr	r3, [pc, #72]	; (8004ad4 <MX_I2C2_Init+0x74>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004a8e:	4b11      	ldr	r3, [pc, #68]	; (8004ad4 <MX_I2C2_Init+0x74>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004a94:	4b0f      	ldr	r3, [pc, #60]	; (8004ad4 <MX_I2C2_Init+0x74>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004a9a:	480e      	ldr	r0, [pc, #56]	; (8004ad4 <MX_I2C2_Init+0x74>)
 8004a9c:	f003 fec2 	bl	8008824 <HAL_I2C_Init>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8004aa6:	f000 fce7 	bl	8005478 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004aaa:	2100      	movs	r1, #0
 8004aac:	4809      	ldr	r0, [pc, #36]	; (8004ad4 <MX_I2C2_Init+0x74>)
 8004aae:	f004 ff89 	bl	80099c4 <HAL_I2CEx_ConfigAnalogFilter>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8004ab8:	f000 fcde 	bl	8005478 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004abc:	2100      	movs	r1, #0
 8004abe:	4805      	ldr	r0, [pc, #20]	; (8004ad4 <MX_I2C2_Init+0x74>)
 8004ac0:	f004 ffcb 	bl	8009a5a <HAL_I2CEx_ConfigDigitalFilter>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8004aca:	f000 fcd5 	bl	8005478 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004ace:	bf00      	nop
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20001044 	.word	0x20001044
 8004ad8:	40005800 	.word	0x40005800
 8004adc:	6000030d 	.word	0x6000030d

08004ae0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004ae4:	4b1b      	ldr	r3, [pc, #108]	; (8004b54 <MX_I2C3_Init+0x74>)
 8004ae6:	4a1c      	ldr	r2, [pc, #112]	; (8004b58 <MX_I2C3_Init+0x78>)
 8004ae8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x6000030D;
 8004aea:	4b1a      	ldr	r3, [pc, #104]	; (8004b54 <MX_I2C3_Init+0x74>)
 8004aec:	4a1b      	ldr	r2, [pc, #108]	; (8004b5c <MX_I2C3_Init+0x7c>)
 8004aee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8004af0:	4b18      	ldr	r3, [pc, #96]	; (8004b54 <MX_I2C3_Init+0x74>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004af6:	4b17      	ldr	r3, [pc, #92]	; (8004b54 <MX_I2C3_Init+0x74>)
 8004af8:	2201      	movs	r2, #1
 8004afa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004afc:	4b15      	ldr	r3, [pc, #84]	; (8004b54 <MX_I2C3_Init+0x74>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8004b02:	4b14      	ldr	r3, [pc, #80]	; (8004b54 <MX_I2C3_Init+0x74>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004b08:	4b12      	ldr	r3, [pc, #72]	; (8004b54 <MX_I2C3_Init+0x74>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b0e:	4b11      	ldr	r3, [pc, #68]	; (8004b54 <MX_I2C3_Init+0x74>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b14:	4b0f      	ldr	r3, [pc, #60]	; (8004b54 <MX_I2C3_Init+0x74>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004b1a:	480e      	ldr	r0, [pc, #56]	; (8004b54 <MX_I2C3_Init+0x74>)
 8004b1c:	f003 fe82 	bl	8008824 <HAL_I2C_Init>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8004b26:	f000 fca7 	bl	8005478 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	4809      	ldr	r0, [pc, #36]	; (8004b54 <MX_I2C3_Init+0x74>)
 8004b2e:	f004 ff49 	bl	80099c4 <HAL_I2CEx_ConfigAnalogFilter>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8004b38:	f000 fc9e 	bl	8005478 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	4805      	ldr	r0, [pc, #20]	; (8004b54 <MX_I2C3_Init+0x74>)
 8004b40:	f004 ff8b 	bl	8009a5a <HAL_I2CEx_ConfigDigitalFilter>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8004b4a:	f000 fc95 	bl	8005478 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8004b4e:	bf00      	nop
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	20001090 	.word	0x20001090
 8004b58:	40005c00 	.word	0x40005c00
 8004b5c:	6000030d 	.word	0x6000030d

08004b60 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8004b64:	4b1b      	ldr	r3, [pc, #108]	; (8004bd4 <MX_I2C4_Init+0x74>)
 8004b66:	4a1c      	ldr	r2, [pc, #112]	; (8004bd8 <MX_I2C4_Init+0x78>)
 8004b68:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x6000030D;
 8004b6a:	4b1a      	ldr	r3, [pc, #104]	; (8004bd4 <MX_I2C4_Init+0x74>)
 8004b6c:	4a1b      	ldr	r2, [pc, #108]	; (8004bdc <MX_I2C4_Init+0x7c>)
 8004b6e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8004b70:	4b18      	ldr	r3, [pc, #96]	; (8004bd4 <MX_I2C4_Init+0x74>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b76:	4b17      	ldr	r3, [pc, #92]	; (8004bd4 <MX_I2C4_Init+0x74>)
 8004b78:	2201      	movs	r2, #1
 8004b7a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b7c:	4b15      	ldr	r3, [pc, #84]	; (8004bd4 <MX_I2C4_Init+0x74>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8004b82:	4b14      	ldr	r3, [pc, #80]	; (8004bd4 <MX_I2C4_Init+0x74>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004b88:	4b12      	ldr	r3, [pc, #72]	; (8004bd4 <MX_I2C4_Init+0x74>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b8e:	4b11      	ldr	r3, [pc, #68]	; (8004bd4 <MX_I2C4_Init+0x74>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b94:	4b0f      	ldr	r3, [pc, #60]	; (8004bd4 <MX_I2C4_Init+0x74>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8004b9a:	480e      	ldr	r0, [pc, #56]	; (8004bd4 <MX_I2C4_Init+0x74>)
 8004b9c:	f003 fe42 	bl	8008824 <HAL_I2C_Init>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8004ba6:	f000 fc67 	bl	8005478 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004baa:	2100      	movs	r1, #0
 8004bac:	4809      	ldr	r0, [pc, #36]	; (8004bd4 <MX_I2C4_Init+0x74>)
 8004bae:	f004 ff09 	bl	80099c4 <HAL_I2CEx_ConfigAnalogFilter>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8004bb8:	f000 fc5e 	bl	8005478 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	4805      	ldr	r0, [pc, #20]	; (8004bd4 <MX_I2C4_Init+0x74>)
 8004bc0:	f004 ff4b 	bl	8009a5a <HAL_I2CEx_ConfigDigitalFilter>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8004bca:	f000 fc55 	bl	8005478 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8004bce:	bf00      	nop
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	200010dc 	.word	0x200010dc
 8004bd8:	40006000 	.word	0x40006000
 8004bdc:	6000030d 	.word	0x6000030d

08004be0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b090      	sub	sp, #64	; 0x40
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004be8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	605a      	str	r2, [r3, #4]
 8004bf2:	609a      	str	r2, [r3, #8]
 8004bf4:	60da      	str	r2, [r3, #12]
 8004bf6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a6b      	ldr	r2, [pc, #428]	; (8004dac <HAL_I2C_MspInit+0x1cc>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d128      	bne.n	8004c54 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c02:	4b6b      	ldr	r3, [pc, #428]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c06:	4a6a      	ldr	r2, [pc, #424]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004c08:	f043 0302 	orr.w	r3, r3, #2
 8004c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c0e:	4b68      	ldr	r3, [pc, #416]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MLX2_SCL_Pin|MLX2_SDA_Pin;
 8004c1a:	23c0      	movs	r3, #192	; 0xc0
 8004c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c1e:	2312      	movs	r3, #18
 8004c20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c22:	2300      	movs	r3, #0
 8004c24:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c26:	2303      	movs	r3, #3
 8004c28:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c2a:	2304      	movs	r3, #4
 8004c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c32:	4619      	mov	r1, r3
 8004c34:	485f      	ldr	r0, [pc, #380]	; (8004db4 <HAL_I2C_MspInit+0x1d4>)
 8004c36:	f003 fc49 	bl	80084cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004c3a:	4b5d      	ldr	r3, [pc, #372]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	4a5c      	ldr	r2, [pc, #368]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004c40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c44:	6413      	str	r3, [r2, #64]	; 0x40
 8004c46:	4b5a      	ldr	r3, [pc, #360]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8004c52:	e0a7      	b.n	8004da4 <HAL_I2C_MspInit+0x1c4>
  else if(i2cHandle->Instance==I2C2)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a57      	ldr	r2, [pc, #348]	; (8004db8 <HAL_I2C_MspInit+0x1d8>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d128      	bne.n	8004cb0 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004c5e:	4b54      	ldr	r3, [pc, #336]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	4a53      	ldr	r2, [pc, #332]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004c64:	f043 0320 	orr.w	r3, r3, #32
 8004c68:	6313      	str	r3, [r2, #48]	; 0x30
 8004c6a:	4b51      	ldr	r3, [pc, #324]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	f003 0320 	and.w	r3, r3, #32
 8004c72:	623b      	str	r3, [r7, #32]
 8004c74:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GYRO_SDA_Pin|GYRO_SCL_Pin;
 8004c76:	2303      	movs	r3, #3
 8004c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c7a:	2312      	movs	r3, #18
 8004c7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c82:	2303      	movs	r3, #3
 8004c84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004c86:	2304      	movs	r3, #4
 8004c88:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004c8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c8e:	4619      	mov	r1, r3
 8004c90:	484a      	ldr	r0, [pc, #296]	; (8004dbc <HAL_I2C_MspInit+0x1dc>)
 8004c92:	f003 fc1b 	bl	80084cc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004c96:	4b46      	ldr	r3, [pc, #280]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	4a45      	ldr	r2, [pc, #276]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004c9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ca2:	4b43      	ldr	r3, [pc, #268]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004caa:	61fb      	str	r3, [r7, #28]
 8004cac:	69fb      	ldr	r3, [r7, #28]
}
 8004cae:	e079      	b.n	8004da4 <HAL_I2C_MspInit+0x1c4>
  else if(i2cHandle->Instance==I2C3)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a42      	ldr	r2, [pc, #264]	; (8004dc0 <HAL_I2C_MspInit+0x1e0>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d146      	bne.n	8004d48 <HAL_I2C_MspInit+0x168>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cba:	4b3d      	ldr	r3, [pc, #244]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbe:	4a3c      	ldr	r2, [pc, #240]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004cc0:	f043 0304 	orr.w	r3, r3, #4
 8004cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8004cc6:	4b3a      	ldr	r3, [pc, #232]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cca:	f003 0304 	and.w	r3, r3, #4
 8004cce:	61bb      	str	r3, [r7, #24]
 8004cd0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cd2:	4b37      	ldr	r3, [pc, #220]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd6:	4a36      	ldr	r2, [pc, #216]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004cd8:	f043 0301 	orr.w	r3, r3, #1
 8004cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8004cde:	4b34      	ldr	r3, [pc, #208]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	617b      	str	r3, [r7, #20]
 8004ce8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MLX1_SDA_Pin;
 8004cea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004cf0:	2312      	movs	r3, #18
 8004cf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004cfc:	2304      	movs	r3, #4
 8004cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(MLX1_SDA_GPIO_Port, &GPIO_InitStruct);
 8004d00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d04:	4619      	mov	r1, r3
 8004d06:	482f      	ldr	r0, [pc, #188]	; (8004dc4 <HAL_I2C_MspInit+0x1e4>)
 8004d08:	f003 fbe0 	bl	80084cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MLX1_SCL_Pin;
 8004d0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d12:	2312      	movs	r3, #18
 8004d14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d16:	2300      	movs	r3, #0
 8004d18:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004d1e:	2304      	movs	r3, #4
 8004d20:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(MLX1_SCL_GPIO_Port, &GPIO_InitStruct);
 8004d22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d26:	4619      	mov	r1, r3
 8004d28:	4827      	ldr	r0, [pc, #156]	; (8004dc8 <HAL_I2C_MspInit+0x1e8>)
 8004d2a:	f003 fbcf 	bl	80084cc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004d2e:	4b20      	ldr	r3, [pc, #128]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	4a1f      	ldr	r2, [pc, #124]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004d34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d38:	6413      	str	r3, [r2, #64]	; 0x40
 8004d3a:	4b1d      	ldr	r3, [pc, #116]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d42:	613b      	str	r3, [r7, #16]
 8004d44:	693b      	ldr	r3, [r7, #16]
}
 8004d46:	e02d      	b.n	8004da4 <HAL_I2C_MspInit+0x1c4>
  else if(i2cHandle->Instance==I2C4)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a1f      	ldr	r2, [pc, #124]	; (8004dcc <HAL_I2C_MspInit+0x1ec>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d128      	bne.n	8004da4 <HAL_I2C_MspInit+0x1c4>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004d52:	4b17      	ldr	r3, [pc, #92]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d56:	4a16      	ldr	r2, [pc, #88]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004d58:	f043 0320 	orr.w	r3, r3, #32
 8004d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d5e:	4b14      	ldr	r3, [pc, #80]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d62:	f003 0320 	and.w	r3, r3, #32
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004d6a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d70:	2312      	movs	r3, #18
 8004d72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d74:	2300      	movs	r3, #0
 8004d76:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8004d7c:	2304      	movs	r3, #4
 8004d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004d80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d84:	4619      	mov	r1, r3
 8004d86:	480d      	ldr	r0, [pc, #52]	; (8004dbc <HAL_I2C_MspInit+0x1dc>)
 8004d88:	f003 fba0 	bl	80084cc <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8004d8c:	4b08      	ldr	r3, [pc, #32]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	4a07      	ldr	r2, [pc, #28]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004d92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d96:	6413      	str	r3, [r2, #64]	; 0x40
 8004d98:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <HAL_I2C_MspInit+0x1d0>)
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004da0:	60bb      	str	r3, [r7, #8]
 8004da2:	68bb      	ldr	r3, [r7, #8]
}
 8004da4:	bf00      	nop
 8004da6:	3740      	adds	r7, #64	; 0x40
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40005400 	.word	0x40005400
 8004db0:	40023800 	.word	0x40023800
 8004db4:	40020400 	.word	0x40020400
 8004db8:	40005800 	.word	0x40005800
 8004dbc:	40021400 	.word	0x40021400
 8004dc0:	40005c00 	.word	0x40005c00
 8004dc4:	40020800 	.word	0x40020800
 8004dc8:	40020000 	.word	0x40020000
 8004dcc:	40006000 	.word	0x40006000

08004dd0 <statusToInt>:
};



int statusToInt()
{	int fullRegister = statusRegister.TeleBack;
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	4b39      	ldr	r3, [pc, #228]	; (8004ebc <statusToInt+0xec>)
 8004dd8:	78db      	ldrb	r3, [r3, #3]
 8004dda:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	607b      	str	r3, [r7, #4]
	fullRegister = fullRegister << 2;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.DamperRF) << 3;
 8004de8:	4b34      	ldr	r3, [pc, #208]	; (8004ebc <statusToInt+0xec>)
 8004dea:	78db      	ldrb	r3, [r3, #3]
 8004dec:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	461a      	mov	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	00db      	lsls	r3, r3, #3
 8004dfa:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.DamperLF) << 3;
 8004dfc:	4b2f      	ldr	r3, [pc, #188]	; (8004ebc <statusToInt+0xec>)
 8004dfe:	78db      	ldrb	r3, [r3, #3]
 8004e00:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	461a      	mov	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.Steering) << 3;
 8004e10:	4b2a      	ldr	r3, [pc, #168]	; (8004ebc <statusToInt+0xec>)
 8004e12:	789b      	ldrb	r3, [r3, #2]
 8004e14:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.VSSRF) << 3;
 8004e24:	4b25      	ldr	r3, [pc, #148]	; (8004ebc <statusToInt+0xec>)
 8004e26:	789b      	ldrb	r3, [r3, #2]
 8004e28:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	461a      	mov	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.VSSLF) << 3;
 8004e38:	4b20      	ldr	r3, [pc, #128]	; (8004ebc <statusToInt+0xec>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	461a      	mov	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.MLXRF) << 3;
 8004e4c:	4b1b      	ldr	r3, [pc, #108]	; (8004ebc <statusToInt+0xec>)
 8004e4e:	785b      	ldrb	r3, [r3, #1]
 8004e50:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	461a      	mov	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.MLXLF) << 3;
 8004e60:	4b16      	ldr	r3, [pc, #88]	; (8004ebc <statusToInt+0xec>)
 8004e62:	785b      	ldrb	r3, [r3, #1]
 8004e64:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	607b      	str	r3, [r7, #4]
	fullRegister = (fullRegister  | statusRegister.GYRO) << 3;
 8004e74:	4b11      	ldr	r3, [pc, #68]	; (8004ebc <statusToInt+0xec>)
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	461a      	mov	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	607b      	str	r3, [r7, #4]
	fullRegister = (fullRegister  | statusRegister.GPS) << 3;
 8004e88:	4b0c      	ldr	r3, [pc, #48]	; (8004ebc <statusToInt+0xec>)
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	461a      	mov	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	00db      	lsls	r3, r3, #3
 8004e9a:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.SDCARD);
 8004e9c:	4b07      	ldr	r3, [pc, #28]	; (8004ebc <statusToInt+0xec>)
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	607b      	str	r3, [r7, #4]
	return fullRegister;
 8004eae:	687b      	ldr	r3, [r7, #4]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	2000215c 	.word	0x2000215c

08004ec0 <printStatusRegister>:
void printStatusRegister()
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
	int fullRegister = statusToInt();
 8004ec6:	f7ff ff83 	bl	8004dd0 <statusToInt>
 8004eca:	60b8      	str	r0, [r7, #8]
	int b =0;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	607b      	str	r3, [r7, #4]
	for(int i=31;i>=0;i--)
 8004ed0:	231f      	movs	r3, #31
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	e022      	b.n	8004f1c <printStatusRegister+0x5c>
	{
		b = fullRegister >> i;
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	fa42 f303 	asr.w	r3, r2, r3
 8004ede:	607b      	str	r3, [r7, #4]
		if(b & 1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <printStatusRegister+0x32>
		{
			printf("1");
 8004eea:	2031      	movs	r0, #49	; 0x31
 8004eec:	f00d ffa6 	bl	8012e3c <putchar>
 8004ef0:	e002      	b.n	8004ef8 <printStatusRegister+0x38>
		}else
		{
			printf("0");
 8004ef2:	2030      	movs	r0, #48	; 0x30
 8004ef4:	f00d ffa2 	bl	8012e3c <putchar>
		}
		if(i%3 == 0)
 8004ef8:	68f9      	ldr	r1, [r7, #12]
 8004efa:	4b0d      	ldr	r3, [pc, #52]	; (8004f30 <printStatusRegister+0x70>)
 8004efc:	fb83 3201 	smull	r3, r2, r3, r1
 8004f00:	17cb      	asrs	r3, r1, #31
 8004f02:	1ad2      	subs	r2, r2, r3
 8004f04:	4613      	mov	r3, r2
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	4413      	add	r3, r2
 8004f0a:	1aca      	subs	r2, r1, r3
 8004f0c:	2a00      	cmp	r2, #0
 8004f0e:	d102      	bne.n	8004f16 <printStatusRegister+0x56>
		{
			printf(" ");
 8004f10:	2020      	movs	r0, #32
 8004f12:	f00d ff93 	bl	8012e3c <putchar>
	for(int i=31;i>=0;i--)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	dad9      	bge.n	8004ed6 <printStatusRegister+0x16>
		}

	}
	printf("\n");
 8004f22:	200a      	movs	r0, #10
 8004f24:	f00d ff8a 	bl	8012e3c <putchar>
};
 8004f28:	bf00      	nop
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	55555556 	.word	0x55555556

08004f34 <initSensors>:

}

ADCSensor sWheelSensor;
void initSensors()
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af02      	add	r7, sp, #8
	  mlxInit(&mlxLFSensor,MLXLF,&hi2c1,0);
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	4a10      	ldr	r2, [pc, #64]	; (8004f80 <initSensors+0x4c>)
 8004f3e:	2102      	movs	r1, #2
 8004f40:	4810      	ldr	r0, [pc, #64]	; (8004f84 <initSensors+0x50>)
 8004f42:	f000 fe61 	bl	8005c08 <mlxInit>
	  //mlxInit(&mlxRFSensor,MLXRF,&hi2c3,mlxRFSensor.File);
	  gyroInit(&gyro);
 8004f46:	4810      	ldr	r0, [pc, #64]	; (8004f88 <initSensors+0x54>)
 8004f48:	f000 fd82 	bl	8005a50 <gyroInit>
	  absInit(&absLFSensor, ABSLF, &htim3, TIM_CHANNEL_1, 0);
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	2300      	movs	r3, #0
 8004f52:	4a0e      	ldr	r2, [pc, #56]	; (8004f8c <initSensors+0x58>)
 8004f54:	2104      	movs	r1, #4
 8004f56:	480e      	ldr	r0, [pc, #56]	; (8004f90 <initSensors+0x5c>)
 8004f58:	f000 fd2e 	bl	80059b8 <absInit>
	  absInit(&absRFSensor, ABSLF, &htim4, TIM_CHANNEL_1, 0);
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	2300      	movs	r3, #0
 8004f62:	4a0c      	ldr	r2, [pc, #48]	; (8004f94 <initSensors+0x60>)
 8004f64:	2104      	movs	r1, #4
 8004f66:	480c      	ldr	r0, [pc, #48]	; (8004f98 <initSensors+0x64>)
 8004f68:	f000 fd26 	bl	80059b8 <absInit>
	  steeringInit(&sWheelSensor);
 8004f6c:	480b      	ldr	r0, [pc, #44]	; (8004f9c <initSensors+0x68>)
 8004f6e:	f000 fced 	bl	800594c <steeringInit>
	  GPSInit(&gpsSensor);
 8004f72:	480b      	ldr	r0, [pc, #44]	; (8004fa0 <initSensors+0x6c>)
 8004f74:	f000 fc16 	bl	80057a4 <GPSInit>
	  //res = res | mlxInit(&rightFWheelMLX);


}
 8004f78:	bf00      	nop
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	20000ff8 	.word	0x20000ff8
 8004f84:	20002300 	.word	0x20002300
 8004f88:	20006068 	.word	0x20006068
 8004f8c:	2000639c 	.word	0x2000639c
 8004f90:	20006110 	.word	0x20006110
 8004f94:	200063e8 	.word	0x200063e8
 8004f98:	20006144 	.word	0x20006144
 8004f9c:	20002164 	.word	0x20002164
 8004fa0:	20006178 	.word	0x20006178

08004fa4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]

  if (htim == &htim14 )
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a36      	ldr	r2, [pc, #216]	; (8005088 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d165      	bne.n	8005080 <HAL_TIM_PeriodElapsedCallback+0xdc>
		 sdDeInit();
		 sdInit(&fileSystem);
		 openAllFiles();
	 }
	   	 */
	 statusRegister.checkTime -= 25;
 8004fb4:	4b35      	ldr	r3, [pc, #212]	; (800508c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8004fb6:	889b      	ldrh	r3, [r3, #4]
 8004fb8:	3b19      	subs	r3, #25
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	4b33      	ldr	r3, [pc, #204]	; (800508c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8004fbe:	809a      	strh	r2, [r3, #4]
	 if( statusRegister.checkTime <= 0)
 8004fc0:	4b32      	ldr	r3, [pc, #200]	; (800508c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8004fc2:	889b      	ldrh	r3, [r3, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d105      	bne.n	8004fd4 <HAL_TIM_PeriodElapsedCallback+0x30>
	 {
		 //Check all sensors
		 statusRegister.checkTime = SENSOR_ALL_CHECK_TIME;
 8004fc8:	4b30      	ldr	r3, [pc, #192]	; (800508c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8004fca:	f242 7210 	movw	r2, #10000	; 0x2710
 8004fce:	809a      	strh	r2, [r3, #4]
		 printStatusRegister();
 8004fd0:	f7ff ff76 	bl	8004ec0 <printStatusRegister>

	 }
	 mlxLFSensor.timeToNextRead -= 25;
 8004fd4:	4b2e      	ldr	r3, [pc, #184]	; (8005090 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	3b19      	subs	r3, #25
 8004fda:	4a2d      	ldr	r2, [pc, #180]	; (8005090 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004fdc:	6213      	str	r3, [r2, #32]
	 if(mlxLFSensor.timeToNextRead <= 0)
 8004fde:	4b2c      	ldr	r3, [pc, #176]	; (8005090 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	dc1b      	bgt.n	800501e <HAL_TIM_PeriodElapsedCallback+0x7a>
	 {
		 mlxLFSensor.dataReady = 1;
 8004fe6:	4b2a      	ldr	r3, [pc, #168]	; (8005090 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004fe8:	2201      	movs	r2, #1
 8004fea:	619a      	str	r2, [r3, #24]
		 mlxLFSensor.timeToNextRead = MLX_DATA_RATE;
 8004fec:	4b28      	ldr	r3, [pc, #160]	; (8005090 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004fee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ff2:	621a      	str	r2, [r3, #32]
		 HAL_UART_Transmit(&huart3, "\nKEEP ALIVE SIGNAL\n", strlen("\nKEEP ALIVE SIGNAL\n"), HAL_MAX_DELAY);
 8004ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff8:	2213      	movs	r2, #19
 8004ffa:	4926      	ldr	r1, [pc, #152]	; (8005094 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8004ffc:	4826      	ldr	r0, [pc, #152]	; (8005098 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8004ffe:	f008 ff35 	bl	800de6c <HAL_UART_Transmit>
		 HAL_UART_Transmit(&huart3, "ECU DATA: ", strlen("ECU DATA: "), HAL_MAX_DELAY);
 8005002:	f04f 33ff 	mov.w	r3, #4294967295
 8005006:	220a      	movs	r2, #10
 8005008:	4924      	ldr	r1, [pc, #144]	; (800509c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800500a:	4823      	ldr	r0, [pc, #140]	; (8005098 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800500c:	f008 ff2e 	bl	800de6c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, &EcuData, sizeof(EcuData), HAL_MAX_DELAY);
 8005010:	f04f 33ff 	mov.w	r3, #4294967295
 8005014:	2228      	movs	r2, #40	; 0x28
 8005016:	4922      	ldr	r1, [pc, #136]	; (80050a0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8005018:	481f      	ldr	r0, [pc, #124]	; (8005098 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800501a:	f008 ff27 	bl	800de6c <HAL_UART_Transmit>
	 }
	 mlxRFSensor.timeToNextRead -= 25;
 800501e:	4b21      	ldr	r3, [pc, #132]	; (80050a4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	3b19      	subs	r3, #25
 8005024:	4a1f      	ldr	r2, [pc, #124]	; (80050a4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8005026:	6213      	str	r3, [r2, #32]
	 if(mlxRFSensor.timeToNextRead <= 0)
 8005028:	4b1e      	ldr	r3, [pc, #120]	; (80050a4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	2b00      	cmp	r3, #0
 800502e:	dc06      	bgt.n	800503e <HAL_TIM_PeriodElapsedCallback+0x9a>
	 {
	 	mlxRFSensor.dataReady = 1;
 8005030:	4b1c      	ldr	r3, [pc, #112]	; (80050a4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8005032:	2201      	movs	r2, #1
 8005034:	619a      	str	r2, [r3, #24]
	    mlxRFSensor.timeToNextRead = MLX_DATA_RATE;
 8005036:	4b1b      	ldr	r3, [pc, #108]	; (80050a4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8005038:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800503c:	621a      	str	r2, [r3, #32]
	 }
	 absLFSensor.timeToZeroSpeed -= 25;
 800503e:	4b1a      	ldr	r3, [pc, #104]	; (80050a8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8005040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005042:	3b19      	subs	r3, #25
 8005044:	4a18      	ldr	r2, [pc, #96]	; (80050a8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8005046:	6293      	str	r3, [r2, #40]	; 0x28
	 if(absLFSensor.timeToZeroSpeed <= 0)
 8005048:	4b17      	ldr	r3, [pc, #92]	; (80050a8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800504a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504c:	2b00      	cmp	r3, #0
 800504e:	dc08      	bgt.n	8005062 <HAL_TIM_PeriodElapsedCallback+0xbe>
	 {
		 absLFSensor.data = 0;
 8005050:	4b15      	ldr	r3, [pc, #84]	; (80050a8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8005052:	2200      	movs	r2, #0
 8005054:	621a      	str	r2, [r3, #32]
		 absLFSensor.dataReady = 1;
 8005056:	4b14      	ldr	r3, [pc, #80]	; (80050a8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8005058:	2201      	movs	r2, #1
 800505a:	619a      	str	r2, [r3, #24]
		 absLFSensor.timeToZeroSpeed = ABS_ZERO_SPEED_TIME;
 800505c:	4b12      	ldr	r3, [pc, #72]	; (80050a8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800505e:	2264      	movs	r2, #100	; 0x64
 8005060:	629a      	str	r2, [r3, #40]	; 0x28
	 }
	 gyro.timeToNextRead -= 25;
 8005062:	4b12      	ldr	r3, [pc, #72]	; (80050ac <HAL_TIM_PeriodElapsedCallback+0x108>)
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	3b19      	subs	r3, #25
 8005068:	4a10      	ldr	r2, [pc, #64]	; (80050ac <HAL_TIM_PeriodElapsedCallback+0x108>)
 800506a:	6213      	str	r3, [r2, #32]
	 if(gyro.timeToNextRead <= 0)
 800506c:	4b0f      	ldr	r3, [pc, #60]	; (80050ac <HAL_TIM_PeriodElapsedCallback+0x108>)
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	2b00      	cmp	r3, #0
 8005072:	dc05      	bgt.n	8005080 <HAL_TIM_PeriodElapsedCallback+0xdc>
	 {
		 gyro.dataReady = 1;
 8005074:	4b0d      	ldr	r3, [pc, #52]	; (80050ac <HAL_TIM_PeriodElapsedCallback+0x108>)
 8005076:	2201      	movs	r2, #1
 8005078:	619a      	str	r2, [r3, #24]
		 gyro.timeToNextRead = GYRO_DATA_RATE;
 800507a:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <HAL_TIM_PeriodElapsedCallback+0x108>)
 800507c:	22fa      	movs	r2, #250	; 0xfa
 800507e:	621a      	str	r2, [r3, #32]
	 }
  }
}
 8005080:	bf00      	nop
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	20006434 	.word	0x20006434
 800508c:	2000215c 	.word	0x2000215c
 8005090:	20002300 	.word	0x20002300
 8005094:	080191ec 	.word	0x080191ec
 8005098:	20006504 	.word	0x20006504
 800509c:	08019200 	.word	0x08019200
 80050a0:	20000f7c 	.word	0x20000f7c
 80050a4:	200041b4 	.word	0x200041b4
 80050a8:	20006110 	.word	0x20006110
 80050ac:	20006068 	.word	0x20006068

080050b0 <HAL_TIM_IC_CaptureCallback>:
}


//ABS
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  if (htim == absLFSensor.timer) {
 80050b8:	4b20      	ldr	r3, [pc, #128]	; (800513c <HAL_TIM_IC_CaptureCallback+0x8c>)
 80050ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d116      	bne.n	80050f0 <HAL_TIM_IC_CaptureCallback+0x40>
    switch (HAL_TIM_GetActiveChannel(absLFSensor.timer)) {
 80050c2:	4b1e      	ldr	r3, [pc, #120]	; (800513c <HAL_TIM_IC_CaptureCallback+0x8c>)
 80050c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c6:	4618      	mov	r0, r3
 80050c8:	f008 faac 	bl	800d624 <HAL_TIM_GetActiveChannel>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d12a      	bne.n	8005128 <HAL_TIM_IC_CaptureCallback+0x78>
      case HAL_TIM_ACTIVE_CHANNEL_1:
    	  absLFSensor.data = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80050d2:	2100      	movs	r1, #0
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f008 fa43 	bl	800d560 <HAL_TIM_ReadCapturedValue>
 80050da:	4603      	mov	r3, r0
 80050dc:	461a      	mov	r2, r3
 80050de:	4b17      	ldr	r3, [pc, #92]	; (800513c <HAL_TIM_IC_CaptureCallback+0x8c>)
 80050e0:	621a      	str	r2, [r3, #32]
    	  absLFSensor.timeToZeroSpeed = ABS_ZERO_SPEED_TIME;
 80050e2:	4b16      	ldr	r3, [pc, #88]	; (800513c <HAL_TIM_IC_CaptureCallback+0x8c>)
 80050e4:	2264      	movs	r2, #100	; 0x64
 80050e6:	629a      	str	r2, [r3, #40]	; 0x28
    	  absLFSensor.dataReady = 1;
 80050e8:	4b14      	ldr	r3, [pc, #80]	; (800513c <HAL_TIM_IC_CaptureCallback+0x8c>)
 80050ea:	2201      	movs	r2, #1
 80050ec:	619a      	str	r2, [r3, #24]
        break;
 80050ee:	e020      	b.n	8005132 <HAL_TIM_IC_CaptureCallback+0x82>
      default:
        break;
    }
  }else if(htim == absRFSensor.timer) {
 80050f0:	4b13      	ldr	r3, [pc, #76]	; (8005140 <HAL_TIM_IC_CaptureCallback+0x90>)
 80050f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d118      	bne.n	800512c <HAL_TIM_IC_CaptureCallback+0x7c>
      switch (HAL_TIM_GetActiveChannel(absRFSensor.timer)) {
 80050fa:	4b11      	ldr	r3, [pc, #68]	; (8005140 <HAL_TIM_IC_CaptureCallback+0x90>)
 80050fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fe:	4618      	mov	r0, r3
 8005100:	f008 fa90 	bl	800d624 <HAL_TIM_GetActiveChannel>
 8005104:	4603      	mov	r3, r0
 8005106:	2b01      	cmp	r3, #1
 8005108:	d112      	bne.n	8005130 <HAL_TIM_IC_CaptureCallback+0x80>
        case HAL_TIM_ACTIVE_CHANNEL_1:
        	absRFSensor.data = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800510a:	2100      	movs	r1, #0
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f008 fa27 	bl	800d560 <HAL_TIM_ReadCapturedValue>
 8005112:	4603      	mov	r3, r0
 8005114:	461a      	mov	r2, r3
 8005116:	4b0a      	ldr	r3, [pc, #40]	; (8005140 <HAL_TIM_IC_CaptureCallback+0x90>)
 8005118:	621a      	str	r2, [r3, #32]
        	absRFSensor.timeToZeroSpeed = ABS_ZERO_SPEED_TIME;
 800511a:	4b09      	ldr	r3, [pc, #36]	; (8005140 <HAL_TIM_IC_CaptureCallback+0x90>)
 800511c:	2264      	movs	r2, #100	; 0x64
 800511e:	629a      	str	r2, [r3, #40]	; 0x28
        	absRFSensor.dataReady = 1;
 8005120:	4b07      	ldr	r3, [pc, #28]	; (8005140 <HAL_TIM_IC_CaptureCallback+0x90>)
 8005122:	2201      	movs	r2, #1
 8005124:	619a      	str	r2, [r3, #24]
          break;
 8005126:	e004      	b.n	8005132 <HAL_TIM_IC_CaptureCallback+0x82>
        break;
 8005128:	bf00      	nop
 800512a:	e002      	b.n	8005132 <HAL_TIM_IC_CaptureCallback+0x82>
        default:
          break;
       }
  }
 800512c:	bf00      	nop
 800512e:	e000      	b.n	8005132 <HAL_TIM_IC_CaptureCallback+0x82>
          break;
 8005130:	bf00      	nop
}
 8005132:	bf00      	nop
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	20006110 	.word	0x20006110
 8005140:	20006144 	.word	0x20006144

08005144 <HAL_UART_RxCpltCallback>:
char received_command[255];
int command_lenght = 0;
uint8_t bufor;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]

	if(huart==&huart7)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a20      	ldr	r2, [pc, #128]	; (80051d0 <HAL_UART_RxCpltCallback+0x8c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d138      	bne.n	80051c6 <HAL_UART_RxCpltCallback+0x82>
				sendAllFilesToUart();
				openAllFiles();
			}
			received_command[0] = 0;
		}*/
		gpsSensor.bufor[gpsSensor.buforSize] = gpsSensor.Rx_data;
 8005154:	4b1f      	ldr	r3, [pc, #124]	; (80051d4 <HAL_UART_RxCpltCallback+0x90>)
 8005156:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 800515a:	4619      	mov	r1, r3
 800515c:	4b1d      	ldr	r3, [pc, #116]	; (80051d4 <HAL_UART_RxCpltCallback+0x90>)
 800515e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005162:	4b1c      	ldr	r3, [pc, #112]	; (80051d4 <HAL_UART_RxCpltCallback+0x90>)
 8005164:	440b      	add	r3, r1
 8005166:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		gpsSensor.buforSize++;
 800516a:	4b1a      	ldr	r3, [pc, #104]	; (80051d4 <HAL_UART_RxCpltCallback+0x90>)
 800516c:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8005170:	3301      	adds	r3, #1
 8005172:	b2da      	uxtb	r2, r3
 8005174:	4b17      	ldr	r3, [pc, #92]	; (80051d4 <HAL_UART_RxCpltCallback+0x90>)
 8005176:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
		  if(gpsSensor.Rx_data == '\n' && gpsSensor.saveLock == 0)
 800517a:	4b16      	ldr	r3, [pc, #88]	; (80051d4 <HAL_UART_RxCpltCallback+0x90>)
 800517c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005180:	2b0a      	cmp	r3, #10
 8005182:	d118      	bne.n	80051b6 <HAL_UART_RxCpltCallback+0x72>
 8005184:	4b13      	ldr	r3, [pc, #76]	; (80051d4 <HAL_UART_RxCpltCallback+0x90>)
 8005186:	7e1b      	ldrb	r3, [r3, #24]
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d111      	bne.n	80051b6 <HAL_UART_RxCpltCallback+0x72>
		  {
				gpsSensor.dataReady =0;
 8005192:	4a10      	ldr	r2, [pc, #64]	; (80051d4 <HAL_UART_RxCpltCallback+0x90>)
 8005194:	7e13      	ldrb	r3, [r2, #24]
 8005196:	f36f 0300 	bfc	r3, #0, #1
 800519a:	7613      	strb	r3, [r2, #24]
				strcpy(gpsSensor.data,gpsSensor.bufor);
 800519c:	490e      	ldr	r1, [pc, #56]	; (80051d8 <HAL_UART_RxCpltCallback+0x94>)
 800519e:	480f      	ldr	r0, [pc, #60]	; (80051dc <HAL_UART_RxCpltCallback+0x98>)
 80051a0:	f00d fed2 	bl	8012f48 <strcpy>
				gpsSensor.bufor[0]='\0';
 80051a4:	4b0b      	ldr	r3, [pc, #44]	; (80051d4 <HAL_UART_RxCpltCallback+0x90>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				gpsSensor.dataReady = 1;
 80051ac:	4a09      	ldr	r2, [pc, #36]	; (80051d4 <HAL_UART_RxCpltCallback+0x90>)
 80051ae:	7e13      	ldrb	r3, [r2, #24]
 80051b0:	f043 0301 	orr.w	r3, r3, #1
 80051b4:	7613      	strb	r3, [r2, #24]
		  }
		  HAL_UART_Receive_IT(gpsSensor.uart, &(gpsSensor.Rx_data), 1);
 80051b6:	4b07      	ldr	r3, [pc, #28]	; (80051d4 <HAL_UART_RxCpltCallback+0x90>)
 80051b8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80051bc:	2201      	movs	r2, #1
 80051be:	4908      	ldr	r1, [pc, #32]	; (80051e0 <HAL_UART_RxCpltCallback+0x9c>)
 80051c0:	4618      	mov	r0, r3
 80051c2:	f008 fee6 	bl	800df92 <HAL_UART_Receive_IT>
	}
	//HAL_UART_Receive_IT(&huart7, &bufor, 1);
}
 80051c6:	bf00      	nop
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	20006480 	.word	0x20006480
 80051d4:	20006178 	.word	0x20006178
 80051d8:	20006199 	.word	0x20006199
 80051dc:	20006299 	.word	0x20006299
 80051e0:	20006198 	.word	0x20006198

080051e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b088      	sub	sp, #32
 80051e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80051ea:	f001 fac7 	bl	800677c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80051ee:	f000 f891 	bl	8005314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80051f2:	f7ff fb95 	bl	8004920 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80051f6:	f001 f9dd 	bl	80065b4 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80051fa:	f00a fe77 	bl	800feec <MX_FATFS_Init>
  MX_DMA_Init();
 80051fe:	f7ff fb03 	bl	8004808 <MX_DMA_Init>
  MX_I2C1_Init();
 8005202:	f7ff fbed 	bl	80049e0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8005206:	f7ff fc2b 	bl	8004a60 <MX_I2C2_Init>
  MX_UART7_Init();
 800520a:	f001 f99f 	bl	800654c <MX_UART7_Init>
  MX_SDMMC2_SD_Init();
 800520e:	f000 f9af 	bl	8005570 <MX_SDMMC2_SD_Init>
  MX_RTC_Init();
 8005212:	f000 f937 	bl	8005484 <MX_RTC_Init>
  MX_ADC1_Init();
 8005216:	f7fe fe93 	bl	8003f40 <MX_ADC1_Init>
  MX_ADC2_Init();
 800521a:	f7fe fee3 	bl	8003fe4 <MX_ADC2_Init>
  MX_ADC3_Init();
 800521e:	f7fe ff33 	bl	8004088 <MX_ADC3_Init>
  MX_CAN1_Init();
 8005222:	f7ff f889 	bl	8004338 <MX_CAN1_Init>
  MX_CAN2_Init();
 8005226:	f7ff f8df 	bl	80043e8 <MX_CAN2_Init>
  MX_I2C3_Init();
 800522a:	f7ff fc59 	bl	8004ae0 <MX_I2C3_Init>
  MX_I2C4_Init();
 800522e:	f7ff fc97 	bl	8004b60 <MX_I2C4_Init>
  MX_TIM3_Init();
 8005232:	f000 ffa9 	bl	8006188 <MX_TIM3_Init>
  MX_TIM4_Init();
 8005236:	f001 f835 	bl	80062a4 <MX_TIM4_Init>
  MX_TIM14_Init();
 800523a:	f001 f8c1 	bl	80063c0 <MX_TIM14_Init>



  RTC_TimeTypeDef time;
  RTC_DateTypeDef date;
  statusRegister.checkTime = SENSOR_ALL_CHECK_TIME;
 800523e:	4b2c      	ldr	r3, [pc, #176]	; (80052f0 <main+0x10c>)
 8005240:	f242 7210 	movw	r2, #10000	; 0x2710
 8005244:	809a      	strh	r2, [r3, #4]
  HAL_TIM_Base_Start_IT(&htim14);
 8005246:	482b      	ldr	r0, [pc, #172]	; (80052f4 <main+0x110>)
 8005248:	f007 fc98 	bl	800cb7c <HAL_TIM_Base_Start_IT>



  HAL_Delay(200);
 800524c:	20c8      	movs	r0, #200	; 0xc8
 800524e:	f001 fafb 	bl	8006848 <HAL_Delay>


  HAL_Delay(1000);
 8005252:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005256:	f001 faf7 	bl	8006848 <HAL_Delay>
  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800525a:	463b      	mov	r3, r7
 800525c:	2200      	movs	r2, #0
 800525e:	4619      	mov	r1, r3
 8005260:	4825      	ldr	r0, [pc, #148]	; (80052f8 <main+0x114>)
 8005262:	f005 ffb9 	bl	800b1d8 <HAL_RTC_GetDate>
  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8005266:	1d3b      	adds	r3, r7, #4
 8005268:	2200      	movs	r2, #0
 800526a:	4619      	mov	r1, r3
 800526c:	4822      	ldr	r0, [pc, #136]	; (80052f8 <main+0x114>)
 800526e:	f005 fead 	bl	800afcc <HAL_RTC_GetTime>
  printf("Aktualny czas: %02d:%02d:%02d\n", time.Hours, time.Minutes, time.Seconds);
 8005272:	793b      	ldrb	r3, [r7, #4]
 8005274:	4619      	mov	r1, r3
 8005276:	797b      	ldrb	r3, [r7, #5]
 8005278:	461a      	mov	r2, r3
 800527a:	79bb      	ldrb	r3, [r7, #6]
 800527c:	481f      	ldr	r0, [pc, #124]	; (80052fc <main+0x118>)
 800527e:	f00d fdcb 	bl	8012e18 <printf>
  initSensors();
 8005282:	f7ff fe57 	bl	8004f34 <initSensors>
  sdInit(&fileSystem);
 8005286:	481e      	ldr	r0, [pc, #120]	; (8005300 <main+0x11c>)
 8005288:	f7fe fa94 	bl	80037b4 <sdInit>
  printStatusRegister();
 800528c:	f7ff fe18 	bl	8004ec0 <printStatusRegister>

  openAllFiles();
 8005290:	f7fe fab6 	bl	8003800 <openAllFiles>


  HAL_TIM_Base_Start(&htim3);
 8005294:	481b      	ldr	r0, [pc, #108]	; (8005304 <main+0x120>)
 8005296:	f007 fc01 	bl	800ca9c <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800529a:	2100      	movs	r1, #0
 800529c:	4819      	ldr	r0, [pc, #100]	; (8005304 <main+0x120>)
 800529e:	f007 fd47 	bl	800cd30 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim4);
 80052a2:	4819      	ldr	r0, [pc, #100]	; (8005308 <main+0x124>)
 80052a4:	f007 fbfa 	bl	800ca9c <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80052a8:	2100      	movs	r1, #0
 80052aa:	4817      	ldr	r0, [pc, #92]	; (8005308 <main+0x124>)
 80052ac:	f007 fd40 	bl	800cd30 <HAL_TIM_IC_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if((statusRegister.SDCARD & 0b100) < SENSOR_FAIL)
 80052b0:	4b0f      	ldr	r3, [pc, #60]	; (80052f0 <main+0x10c>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	f003 0304 	and.w	r3, r3, #4
 80052be:	2b03      	cmp	r3, #3
 80052c0:	dcf6      	bgt.n	80052b0 <main+0xcc>
	  {
		  for(int i=0;i<SENSORS_N;i++)
 80052c2:	2300      	movs	r3, #0
 80052c4:	61fb      	str	r3, [r7, #28]
 80052c6:	e00f      	b.n	80052e8 <main+0x104>
		  if( _dataHandler[GYRO].sensorStruct)
 80052c8:	4b10      	ldr	r3, [pc, #64]	; (800530c <main+0x128>)
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <main+0xfe>
		  {
			  _dataHandler[GYRO].getDataHandler(_dataHandler[GPS].sensorStruct);
 80052d0:	4b0e      	ldr	r3, [pc, #56]	; (800530c <main+0x128>)
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	4a0d      	ldr	r2, [pc, #52]	; (800530c <main+0x128>)
 80052d6:	6852      	ldr	r2, [r2, #4]
 80052d8:	4610      	mov	r0, r2
 80052da:	4798      	blx	r3
			  gyroSaveData(&gyro);
 80052dc:	480c      	ldr	r0, [pc, #48]	; (8005310 <main+0x12c>)
 80052de:	f7fe fca5 	bl	8003c2c <gyroSaveData>
		  for(int i=0;i<SENSORS_N;i++)
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	3301      	adds	r3, #1
 80052e6:	61fb      	str	r3, [r7, #28]
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	2b08      	cmp	r3, #8
 80052ec:	ddec      	ble.n	80052c8 <main+0xe4>
	  if((statusRegister.SDCARD & 0b100) < SENSOR_FAIL)
 80052ee:	e7df      	b.n	80052b0 <main+0xcc>
 80052f0:	2000215c 	.word	0x2000215c
 80052f4:	20006434 	.word	0x20006434
 80052f8:	2000219c 	.word	0x2000219c
 80052fc:	0801920c 	.word	0x0801920c
 8005300:	20001128 	.word	0x20001128
 8005304:	2000639c 	.word	0x2000639c
 8005308:	200063e8 	.word	0x200063e8
 800530c:	20000000 	.word	0x20000000
 8005310:	20006068 	.word	0x20006068

08005314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b0b8      	sub	sp, #224	; 0xe0
 8005318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800531a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800531e:	2234      	movs	r2, #52	; 0x34
 8005320:	2100      	movs	r1, #0
 8005322:	4618      	mov	r0, r3
 8005324:	f00d fd64 	bl	8012df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005328:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800532c:	2200      	movs	r2, #0
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	605a      	str	r2, [r3, #4]
 8005332:	609a      	str	r2, [r3, #8]
 8005334:	60da      	str	r2, [r3, #12]
 8005336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005338:	f107 0308 	add.w	r3, r7, #8
 800533c:	2290      	movs	r2, #144	; 0x90
 800533e:	2100      	movs	r1, #0
 8005340:	4618      	mov	r0, r3
 8005342:	f00d fd55 	bl	8012df0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005346:	f004 fbd5 	bl	8009af4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800534a:	4b48      	ldr	r3, [pc, #288]	; (800546c <SystemClock_Config+0x158>)
 800534c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534e:	4a47      	ldr	r2, [pc, #284]	; (800546c <SystemClock_Config+0x158>)
 8005350:	f023 0318 	bic.w	r3, r3, #24
 8005354:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005356:	4b45      	ldr	r3, [pc, #276]	; (800546c <SystemClock_Config+0x158>)
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	4a44      	ldr	r2, [pc, #272]	; (800546c <SystemClock_Config+0x158>)
 800535c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005360:	6413      	str	r3, [r2, #64]	; 0x40
 8005362:	4b42      	ldr	r3, [pc, #264]	; (800546c <SystemClock_Config+0x158>)
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800536a:	607b      	str	r3, [r7, #4]
 800536c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800536e:	4b40      	ldr	r3, [pc, #256]	; (8005470 <SystemClock_Config+0x15c>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005376:	4a3e      	ldr	r2, [pc, #248]	; (8005470 <SystemClock_Config+0x15c>)
 8005378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	4b3c      	ldr	r3, [pc, #240]	; (8005470 <SystemClock_Config+0x15c>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005386:	603b      	str	r3, [r7, #0]
 8005388:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800538a:	2305      	movs	r3, #5
 800538c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005398:	2301      	movs	r3, #1
 800539a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800539e:	2302      	movs	r3, #2
 80053a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80053a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80053a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 80053ac:	2319      	movs	r3, #25
 80053ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80053b2:	23d8      	movs	r3, #216	; 0xd8
 80053b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80053b8:	2302      	movs	r3, #2
 80053ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80053be:	2305      	movs	r3, #5
 80053c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80053c4:	2302      	movs	r3, #2
 80053c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80053ca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80053ce:	4618      	mov	r0, r3
 80053d0:	f004 fbf0 	bl	8009bb4 <HAL_RCC_OscConfig>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <SystemClock_Config+0xca>
  {
    Error_Handler();
 80053da:	f000 f84d 	bl	8005478 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80053de:	f004 fb99 	bl	8009b14 <HAL_PWREx_EnableOverDrive>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80053e8:	f000 f846 	bl	8005478 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80053ec:	230f      	movs	r3, #15
 80053ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80053f2:	2302      	movs	r3, #2
 80053f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80053f8:	2300      	movs	r3, #0
 80053fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80053fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005402:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005406:	2300      	movs	r3, #0
 8005408:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800540c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005410:	2103      	movs	r1, #3
 8005412:	4618      	mov	r0, r3
 8005414:	f004 fe7c 	bl	800a110 <HAL_RCC_ClockConfig>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 800541e:	f000 f82b 	bl	8005478 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8005422:	4b14      	ldr	r3, [pc, #80]	; (8005474 <SystemClock_Config+0x160>)
 8005424:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_I2C4|RCC_PERIPHCLK_SDMMC2
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005426:	f44f 7380 	mov.w	r3, #256	; 0x100
 800542a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800542c:	2300      	movs	r3, #0
 800542e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8005430:	2300      	movs	r3, #0
 8005432:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005434:	2300      	movs	r3, #0
 8005436:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8005438:	2300      	movs	r3, #0
 800543a:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800543c:	2300      	movs	r3, #0
 800543e:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8005440:	2300      	movs	r3, #0
 8005442:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8005444:	2300      	movs	r3, #0
 8005446:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 800544a:	2300      	movs	r3, #0
 800544c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005450:	f107 0308 	add.w	r3, r7, #8
 8005454:	4618      	mov	r0, r3
 8005456:	f005 f841 	bl	800a4dc <HAL_RCCEx_PeriphCLKConfig>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <SystemClock_Config+0x150>
  {
    Error_Handler();
 8005460:	f000 f80a 	bl	8005478 <Error_Handler>
  }
}
 8005464:	bf00      	nop
 8005466:	37e0      	adds	r7, #224	; 0xe0
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40023800 	.word	0x40023800
 8005470:	40007000 	.word	0x40007000
 8005474:	0423d120 	.word	0x0423d120

08005478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800547c:	b672      	cpsid	i
}
 800547e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005480:	e7fe      	b.n	8005480 <Error_Handler+0x8>
	...

08005484 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b088      	sub	sp, #32
 8005488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800548a:	f107 0308 	add.w	r3, r7, #8
 800548e:	2200      	movs	r2, #0
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	605a      	str	r2, [r3, #4]
 8005494:	609a      	str	r2, [r3, #8]
 8005496:	60da      	str	r2, [r3, #12]
 8005498:	611a      	str	r2, [r3, #16]
 800549a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 800549c:	2300      	movs	r3, #0
 800549e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80054a0:	4b24      	ldr	r3, [pc, #144]	; (8005534 <MX_RTC_Init+0xb0>)
 80054a2:	4a25      	ldr	r2, [pc, #148]	; (8005538 <MX_RTC_Init+0xb4>)
 80054a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80054a6:	4b23      	ldr	r3, [pc, #140]	; (8005534 <MX_RTC_Init+0xb0>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80054ac:	4b21      	ldr	r3, [pc, #132]	; (8005534 <MX_RTC_Init+0xb0>)
 80054ae:	227f      	movs	r2, #127	; 0x7f
 80054b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80054b2:	4b20      	ldr	r3, [pc, #128]	; (8005534 <MX_RTC_Init+0xb0>)
 80054b4:	22ff      	movs	r2, #255	; 0xff
 80054b6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80054b8:	4b1e      	ldr	r3, [pc, #120]	; (8005534 <MX_RTC_Init+0xb0>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80054be:	4b1d      	ldr	r3, [pc, #116]	; (8005534 <MX_RTC_Init+0xb0>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80054c4:	4b1b      	ldr	r3, [pc, #108]	; (8005534 <MX_RTC_Init+0xb0>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80054ca:	481a      	ldr	r0, [pc, #104]	; (8005534 <MX_RTC_Init+0xb0>)
 80054cc:	f005 fc2e 	bl	800ad2c <HAL_RTC_Init>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80054d6:	f7ff ffcf 	bl	8005478 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80054da:	2300      	movs	r3, #0
 80054dc:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 80054de:	2300      	movs	r3, #0
 80054e0:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 80054e2:	2300      	movs	r3, #0
 80054e4:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80054e6:	2300      	movs	r3, #0
 80054e8:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80054ea:	2300      	movs	r3, #0
 80054ec:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80054ee:	f107 0308 	add.w	r3, r7, #8
 80054f2:	2201      	movs	r2, #1
 80054f4:	4619      	mov	r1, r3
 80054f6:	480f      	ldr	r0, [pc, #60]	; (8005534 <MX_RTC_Init+0xb0>)
 80054f8:	f005 fcaa 	bl	800ae50 <HAL_RTC_SetTime>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8005502:	f7ff ffb9 	bl	8005478 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8005506:	2301      	movs	r3, #1
 8005508:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 800550a:	2301      	movs	r3, #1
 800550c:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 800550e:	2301      	movs	r3, #1
 8005510:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8005512:	2300      	movs	r3, #0
 8005514:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8005516:	1d3b      	adds	r3, r7, #4
 8005518:	2201      	movs	r2, #1
 800551a:	4619      	mov	r1, r3
 800551c:	4805      	ldr	r0, [pc, #20]	; (8005534 <MX_RTC_Init+0xb0>)
 800551e:	f005 fdb3 	bl	800b088 <HAL_RTC_SetDate>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8005528:	f7ff ffa6 	bl	8005478 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800552c:	bf00      	nop
 800552e:	3720      	adds	r7, #32
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	2000219c 	.word	0x2000219c
 8005538:	40002800 	.word	0x40002800

0800553c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a07      	ldr	r2, [pc, #28]	; (8005568 <HAL_RTC_MspInit+0x2c>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d105      	bne.n	800555a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800554e:	4b07      	ldr	r3, [pc, #28]	; (800556c <HAL_RTC_MspInit+0x30>)
 8005550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005552:	4a06      	ldr	r2, [pc, #24]	; (800556c <HAL_RTC_MspInit+0x30>)
 8005554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005558:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800555a:	bf00      	nop
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	40002800 	.word	0x40002800
 800556c:	40023800 	.word	0x40023800

08005570 <MX_SDMMC2_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc2_tx;

/* SDMMC2 init function */

void MX_SDMMC2_SD_Init(void)
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8005574:	4b0c      	ldr	r3, [pc, #48]	; (80055a8 <MX_SDMMC2_SD_Init+0x38>)
 8005576:	4a0d      	ldr	r2, [pc, #52]	; (80055ac <MX_SDMMC2_SD_Init+0x3c>)
 8005578:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800557a:	4b0b      	ldr	r3, [pc, #44]	; (80055a8 <MX_SDMMC2_SD_Init+0x38>)
 800557c:	2200      	movs	r2, #0
 800557e:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8005580:	4b09      	ldr	r3, [pc, #36]	; (80055a8 <MX_SDMMC2_SD_Init+0x38>)
 8005582:	2200      	movs	r2, #0
 8005584:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005586:	4b08      	ldr	r3, [pc, #32]	; (80055a8 <MX_SDMMC2_SD_Init+0x38>)
 8005588:	2200      	movs	r2, #0
 800558a:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800558c:	4b06      	ldr	r3, [pc, #24]	; (80055a8 <MX_SDMMC2_SD_Init+0x38>)
 800558e:	2200      	movs	r2, #0
 8005590:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005592:	4b05      	ldr	r3, [pc, #20]	; (80055a8 <MX_SDMMC2_SD_Init+0x38>)
 8005594:	2200      	movs	r2, #0
 8005596:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 0;
 8005598:	4b03      	ldr	r3, [pc, #12]	; (80055a8 <MX_SDMMC2_SD_Init+0x38>)
 800559a:	2200      	movs	r2, #0
 800559c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 800559e:	bf00      	nop
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	200021bc 	.word	0x200021bc
 80055ac:	40011c00 	.word	0x40011c00

080055b0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b08a      	sub	sp, #40	; 0x28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055b8:	f107 0314 	add.w	r3, r7, #20
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	605a      	str	r2, [r3, #4]
 80055c2:	609a      	str	r2, [r3, #8]
 80055c4:	60da      	str	r2, [r3, #12]
 80055c6:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC2)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a6d      	ldr	r2, [pc, #436]	; (8005784 <HAL_SD_MspInit+0x1d4>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	f040 80d4 	bne.w	800577c <HAL_SD_MspInit+0x1cc>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* SDMMC2 clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 80055d4:	4b6c      	ldr	r3, [pc, #432]	; (8005788 <HAL_SD_MspInit+0x1d8>)
 80055d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d8:	4a6b      	ldr	r2, [pc, #428]	; (8005788 <HAL_SD_MspInit+0x1d8>)
 80055da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055de:	6453      	str	r3, [r2, #68]	; 0x44
 80055e0:	4b69      	ldr	r3, [pc, #420]	; (8005788 <HAL_SD_MspInit+0x1d8>)
 80055e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e8:	613b      	str	r3, [r7, #16]
 80055ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80055ec:	4b66      	ldr	r3, [pc, #408]	; (8005788 <HAL_SD_MspInit+0x1d8>)
 80055ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f0:	4a65      	ldr	r2, [pc, #404]	; (8005788 <HAL_SD_MspInit+0x1d8>)
 80055f2:	f043 0308 	orr.w	r3, r3, #8
 80055f6:	6313      	str	r3, [r2, #48]	; 0x30
 80055f8:	4b63      	ldr	r3, [pc, #396]	; (8005788 <HAL_SD_MspInit+0x1d8>)
 80055fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fc:	f003 0308 	and.w	r3, r3, #8
 8005600:	60fb      	str	r3, [r7, #12]
 8005602:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005604:	4b60      	ldr	r3, [pc, #384]	; (8005788 <HAL_SD_MspInit+0x1d8>)
 8005606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005608:	4a5f      	ldr	r2, [pc, #380]	; (8005788 <HAL_SD_MspInit+0x1d8>)
 800560a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800560e:	6313      	str	r3, [r2, #48]	; 0x30
 8005610:	4b5d      	ldr	r3, [pc, #372]	; (8005788 <HAL_SD_MspInit+0x1d8>)
 8005612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005618:	60bb      	str	r3, [r7, #8]
 800561a:	68bb      	ldr	r3, [r7, #8]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800561c:	23c0      	movs	r3, #192	; 0xc0
 800561e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005620:	2302      	movs	r3, #2
 8005622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005624:	2300      	movs	r3, #0
 8005626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005628:	2303      	movs	r3, #3
 800562a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800562c:	230b      	movs	r3, #11
 800562e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005630:	f107 0314 	add.w	r3, r7, #20
 8005634:	4619      	mov	r1, r3
 8005636:	4855      	ldr	r0, [pc, #340]	; (800578c <HAL_SD_MspInit+0x1dc>)
 8005638:	f002 ff48 	bl	80084cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 800563c:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 8005640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005642:	2302      	movs	r3, #2
 8005644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005646:	2300      	movs	r3, #0
 8005648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800564a:	2303      	movs	r3, #3
 800564c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800564e:	230b      	movs	r3, #11
 8005650:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005652:	f107 0314 	add.w	r3, r7, #20
 8005656:	4619      	mov	r1, r3
 8005658:	484d      	ldr	r0, [pc, #308]	; (8005790 <HAL_SD_MspInit+0x1e0>)
 800565a:	f002 ff37 	bl	80084cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800565e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005664:	2302      	movs	r3, #2
 8005666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005668:	2300      	movs	r3, #0
 800566a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800566c:	2303      	movs	r3, #3
 800566e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8005670:	230a      	movs	r3, #10
 8005672:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005674:	f107 0314 	add.w	r3, r7, #20
 8005678:	4619      	mov	r1, r3
 800567a:	4845      	ldr	r0, [pc, #276]	; (8005790 <HAL_SD_MspInit+0x1e0>)
 800567c:	f002 ff26 	bl	80084cc <HAL_GPIO_Init>

    /* SDMMC2 DMA Init */
    /* SDMMC2_RX Init */
    hdma_sdmmc2_rx.Instance = DMA2_Stream0;
 8005680:	4b44      	ldr	r3, [pc, #272]	; (8005794 <HAL_SD_MspInit+0x1e4>)
 8005682:	4a45      	ldr	r2, [pc, #276]	; (8005798 <HAL_SD_MspInit+0x1e8>)
 8005684:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_rx.Init.Channel = DMA_CHANNEL_11;
 8005686:	4b43      	ldr	r3, [pc, #268]	; (8005794 <HAL_SD_MspInit+0x1e4>)
 8005688:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 800568c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800568e:	4b41      	ldr	r3, [pc, #260]	; (8005794 <HAL_SD_MspInit+0x1e4>)
 8005690:	2200      	movs	r2, #0
 8005692:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005694:	4b3f      	ldr	r3, [pc, #252]	; (8005794 <HAL_SD_MspInit+0x1e4>)
 8005696:	2200      	movs	r2, #0
 8005698:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800569a:	4b3e      	ldr	r3, [pc, #248]	; (8005794 <HAL_SD_MspInit+0x1e4>)
 800569c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056a0:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80056a2:	4b3c      	ldr	r3, [pc, #240]	; (8005794 <HAL_SD_MspInit+0x1e4>)
 80056a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80056a8:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80056aa:	4b3a      	ldr	r3, [pc, #232]	; (8005794 <HAL_SD_MspInit+0x1e4>)
 80056ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80056b0:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_rx.Init.Mode = DMA_PFCTRL;
 80056b2:	4b38      	ldr	r3, [pc, #224]	; (8005794 <HAL_SD_MspInit+0x1e4>)
 80056b4:	2220      	movs	r2, #32
 80056b6:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80056b8:	4b36      	ldr	r3, [pc, #216]	; (8005794 <HAL_SD_MspInit+0x1e4>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80056be:	4b35      	ldr	r3, [pc, #212]	; (8005794 <HAL_SD_MspInit+0x1e4>)
 80056c0:	2204      	movs	r2, #4
 80056c2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80056c4:	4b33      	ldr	r3, [pc, #204]	; (8005794 <HAL_SD_MspInit+0x1e4>)
 80056c6:	2203      	movs	r2, #3
 80056c8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc2_rx.Init.MemBurst = DMA_MBURST_INC4;
 80056ca:	4b32      	ldr	r3, [pc, #200]	; (8005794 <HAL_SD_MspInit+0x1e4>)
 80056cc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80056d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc2_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80056d2:	4b30      	ldr	r3, [pc, #192]	; (8005794 <HAL_SD_MspInit+0x1e4>)
 80056d4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80056d8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_rx) != HAL_OK)
 80056da:	482e      	ldr	r0, [pc, #184]	; (8005794 <HAL_SD_MspInit+0x1e4>)
 80056dc:	f002 fae0 	bl	8007ca0 <HAL_DMA_Init>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <HAL_SD_MspInit+0x13a>
    {
      Error_Handler();
 80056e6:	f7ff fec7 	bl	8005478 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc2_rx);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a29      	ldr	r2, [pc, #164]	; (8005794 <HAL_SD_MspInit+0x1e4>)
 80056ee:	641a      	str	r2, [r3, #64]	; 0x40
 80056f0:	4a28      	ldr	r2, [pc, #160]	; (8005794 <HAL_SD_MspInit+0x1e4>)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC2_TX Init */
    hdma_sdmmc2_tx.Instance = DMA2_Stream5;
 80056f6:	4b29      	ldr	r3, [pc, #164]	; (800579c <HAL_SD_MspInit+0x1ec>)
 80056f8:	4a29      	ldr	r2, [pc, #164]	; (80057a0 <HAL_SD_MspInit+0x1f0>)
 80056fa:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_tx.Init.Channel = DMA_CHANNEL_11;
 80056fc:	4b27      	ldr	r3, [pc, #156]	; (800579c <HAL_SD_MspInit+0x1ec>)
 80056fe:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 8005702:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005704:	4b25      	ldr	r3, [pc, #148]	; (800579c <HAL_SD_MspInit+0x1ec>)
 8005706:	2240      	movs	r2, #64	; 0x40
 8005708:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800570a:	4b24      	ldr	r3, [pc, #144]	; (800579c <HAL_SD_MspInit+0x1ec>)
 800570c:	2200      	movs	r2, #0
 800570e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005710:	4b22      	ldr	r3, [pc, #136]	; (800579c <HAL_SD_MspInit+0x1ec>)
 8005712:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005716:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005718:	4b20      	ldr	r3, [pc, #128]	; (800579c <HAL_SD_MspInit+0x1ec>)
 800571a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800571e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005720:	4b1e      	ldr	r3, [pc, #120]	; (800579c <HAL_SD_MspInit+0x1ec>)
 8005722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005726:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_tx.Init.Mode = DMA_PFCTRL;
 8005728:	4b1c      	ldr	r3, [pc, #112]	; (800579c <HAL_SD_MspInit+0x1ec>)
 800572a:	2220      	movs	r2, #32
 800572c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800572e:	4b1b      	ldr	r3, [pc, #108]	; (800579c <HAL_SD_MspInit+0x1ec>)
 8005730:	2200      	movs	r2, #0
 8005732:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005734:	4b19      	ldr	r3, [pc, #100]	; (800579c <HAL_SD_MspInit+0x1ec>)
 8005736:	2204      	movs	r2, #4
 8005738:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800573a:	4b18      	ldr	r3, [pc, #96]	; (800579c <HAL_SD_MspInit+0x1ec>)
 800573c:	2203      	movs	r2, #3
 800573e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc2_tx.Init.MemBurst = DMA_MBURST_INC4;
 8005740:	4b16      	ldr	r3, [pc, #88]	; (800579c <HAL_SD_MspInit+0x1ec>)
 8005742:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005746:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc2_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005748:	4b14      	ldr	r3, [pc, #80]	; (800579c <HAL_SD_MspInit+0x1ec>)
 800574a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800574e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_tx) != HAL_OK)
 8005750:	4812      	ldr	r0, [pc, #72]	; (800579c <HAL_SD_MspInit+0x1ec>)
 8005752:	f002 faa5 	bl	8007ca0 <HAL_DMA_Init>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <HAL_SD_MspInit+0x1b0>
    {
      Error_Handler();
 800575c:	f7ff fe8c 	bl	8005478 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc2_tx);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a0e      	ldr	r2, [pc, #56]	; (800579c <HAL_SD_MspInit+0x1ec>)
 8005764:	63da      	str	r2, [r3, #60]	; 0x3c
 8005766:	4a0d      	ldr	r2, [pc, #52]	; (800579c <HAL_SD_MspInit+0x1ec>)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 1, 0);
 800576c:	2200      	movs	r2, #0
 800576e:	2101      	movs	r1, #1
 8005770:	2067      	movs	r0, #103	; 0x67
 8005772:	f002 fa5e 	bl	8007c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8005776:	2067      	movs	r0, #103	; 0x67
 8005778:	f002 fa77 	bl	8007c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }
}
 800577c:	bf00      	nop
 800577e:	3728      	adds	r7, #40	; 0x28
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	40011c00 	.word	0x40011c00
 8005788:	40023800 	.word	0x40023800
 800578c:	40020c00 	.word	0x40020c00
 8005790:	40021800 	.word	0x40021800
 8005794:	20002240 	.word	0x20002240
 8005798:	40026410 	.word	0x40026410
 800579c:	200022a0 	.word	0x200022a0
 80057a0:	40026488 	.word	0x40026488

080057a4 <GPSInit>:
}


extern UART_HandleTypeDef huart3;
void GPSInit(GPSSensor * sens)
{
 80057a4:	b590      	push	{r4, r7, lr}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
	sens->File = (FIL*)malloc(sizeof(FIL));
 80057ac:	f241 0030 	movw	r0, #4144	; 0x1030
 80057b0:	f00d f8da 	bl	8012968 <malloc>
 80057b4:	4603      	mov	r3, r0
 80057b6:	461a      	mov	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	601a      	str	r2, [r3, #0]
	sens->saveRate = GPS_ERROR_TIME;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057c2:	61da      	str	r2, [r3, #28]
	sens->uart = &huart7;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a48      	ldr	r2, [pc, #288]	; (80058e8 <GPSInit+0x144>)
 80057c8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	sens->saveLock = 0;
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	7e13      	ldrb	r3, [r2, #24]
 80057d0:	f36f 0341 	bfc	r3, #1, #1
 80057d4:	7613      	strb	r3, [r2, #24]
	sens->buforSize = 0;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
	RTC_DateTypeDef date;
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80057de:	f107 030c 	add.w	r3, r7, #12
 80057e2:	2200      	movs	r2, #0
 80057e4:	4619      	mov	r1, r3
 80057e6:	4841      	ldr	r0, [pc, #260]	; (80058ec <GPSInit+0x148>)
 80057e8:	f005 fcf6 	bl	800b1d8 <HAL_RTC_GetDate>
	sprintf(sens->path,"GPS%02d%02d.csv",date.Date,date.Month);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	1d18      	adds	r0, r3, #4
 80057f0:	7bbb      	ldrb	r3, [r7, #14]
 80057f2:	461a      	mov	r2, r3
 80057f4:	7b7b      	ldrb	r3, [r7, #13]
 80057f6:	493e      	ldr	r1, [pc, #248]	; (80058f0 <GPSInit+0x14c>)
 80057f8:	f00d fb86 	bl	8012f08 <sprintf>
	//HAL_UART_Transmit(sens->uart, commands[1], strlen(commands[1]), HAL_MAX_DELAY); // zmiana baudrate GPSa
	//ReInit_UART1(); // zmiana BaudRate na stm
	HAL_UART_Receive_IT(sens->uart, &(sens->Rx_data), 1); // aktywacja przerwan
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	3320      	adds	r3, #32
 8005806:	2201      	movs	r2, #1
 8005808:	4619      	mov	r1, r3
 800580a:	f008 fbc2 	bl	800df92 <HAL_UART_Receive_IT>
	HAL_Delay(100);
 800580e:	2064      	movs	r0, #100	; 0x64
 8005810:	f001 f81a 	bl	8006848 <HAL_Delay>
	HAL_UART_Transmit(sens->uart, commands[0], strlen(commands[0]), HAL_MAX_DELAY);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 4220 	ldr.w	r4, [r3, #544]	; 0x220
 800581a:	4836      	ldr	r0, [pc, #216]	; (80058f4 <GPSInit+0x150>)
 800581c:	f7fa fd10 	bl	8000240 <strlen>
 8005820:	4603      	mov	r3, r0
 8005822:	b29a      	uxth	r2, r3
 8005824:	f04f 33ff 	mov.w	r3, #4294967295
 8005828:	4932      	ldr	r1, [pc, #200]	; (80058f4 <GPSInit+0x150>)
 800582a:	4620      	mov	r0, r4
 800582c:	f008 fb1e 	bl	800de6c <HAL_UART_Transmit>
	HAL_Delay(100);
 8005830:	2064      	movs	r0, #100	; 0x64
 8005832:	f001 f809 	bl	8006848 <HAL_Delay>
	HAL_UART_Transmit(&huart3, (sens->data), strlen(sens->data), HAL_MAX_DELAY);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f203 1421 	addw	r4, r3, #289	; 0x121
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f203 1321 	addw	r3, r3, #289	; 0x121
 8005842:	4618      	mov	r0, r3
 8005844:	f7fa fcfc 	bl	8000240 <strlen>
 8005848:	4603      	mov	r3, r0
 800584a:	b29a      	uxth	r2, r3
 800584c:	f04f 33ff 	mov.w	r3, #4294967295
 8005850:	4621      	mov	r1, r4
 8005852:	4829      	ldr	r0, [pc, #164]	; (80058f8 <GPSInit+0x154>)
 8005854:	f008 fb0a 	bl	800de6c <HAL_UART_Transmit>

	HAL_UART_Transmit(sens->uart, commands[2], strlen(commands[2]), HAL_MAX_DELAY);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 4220 	ldr.w	r4, [r3, #544]	; 0x220
 800585e:	4827      	ldr	r0, [pc, #156]	; (80058fc <GPSInit+0x158>)
 8005860:	f7fa fcee 	bl	8000240 <strlen>
 8005864:	4603      	mov	r3, r0
 8005866:	b29a      	uxth	r2, r3
 8005868:	f04f 33ff 	mov.w	r3, #4294967295
 800586c:	4923      	ldr	r1, [pc, #140]	; (80058fc <GPSInit+0x158>)
 800586e:	4620      	mov	r0, r4
 8005870:	f008 fafc 	bl	800de6c <HAL_UART_Transmit>
	HAL_Delay(100);
 8005874:	2064      	movs	r0, #100	; 0x64
 8005876:	f000 ffe7 	bl	8006848 <HAL_Delay>
	HAL_UART_Transmit(&huart3, (sens->data), strlen(sens->data), HAL_MAX_DELAY);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f203 1421 	addw	r4, r3, #289	; 0x121
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f203 1321 	addw	r3, r3, #289	; 0x121
 8005886:	4618      	mov	r0, r3
 8005888:	f7fa fcda 	bl	8000240 <strlen>
 800588c:	4603      	mov	r3, r0
 800588e:	b29a      	uxth	r2, r3
 8005890:	f04f 33ff 	mov.w	r3, #4294967295
 8005894:	4621      	mov	r1, r4
 8005896:	4818      	ldr	r0, [pc, #96]	; (80058f8 <GPSInit+0x154>)
 8005898:	f008 fae8 	bl	800de6c <HAL_UART_Transmit>

	HAL_UART_Transmit(sens->uart, commands[3], strlen(commands[3]), HAL_MAX_DELAY);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 4220 	ldr.w	r4, [r3, #544]	; 0x220
 80058a2:	4817      	ldr	r0, [pc, #92]	; (8005900 <GPSInit+0x15c>)
 80058a4:	f7fa fccc 	bl	8000240 <strlen>
 80058a8:	4603      	mov	r3, r0
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	f04f 33ff 	mov.w	r3, #4294967295
 80058b0:	4913      	ldr	r1, [pc, #76]	; (8005900 <GPSInit+0x15c>)
 80058b2:	4620      	mov	r0, r4
 80058b4:	f008 fada 	bl	800de6c <HAL_UART_Transmit>
	HAL_Delay(100);
 80058b8:	2064      	movs	r0, #100	; 0x64
 80058ba:	f000 ffc5 	bl	8006848 <HAL_Delay>
	HAL_UART_Transmit(&huart3, (sens->data), strlen(sens->data), HAL_MAX_DELAY);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f203 1421 	addw	r4, r3, #289	; 0x121
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f203 1321 	addw	r3, r3, #289	; 0x121
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fa fcb8 	bl	8000240 <strlen>
 80058d0:	4603      	mov	r3, r0
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	f04f 33ff 	mov.w	r3, #4294967295
 80058d8:	4621      	mov	r1, r4
 80058da:	4807      	ldr	r0, [pc, #28]	; (80058f8 <GPSInit+0x154>)
 80058dc:	f008 fac6 	bl	800de6c <HAL_UART_Transmit>
}
 80058e0:	bf00      	nop
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd90      	pop	{r4, r7, pc}
 80058e8:	20006480 	.word	0x20006480
 80058ec:	2000219c 	.word	0x2000219c
 80058f0:	08019238 	.word	0x08019238
 80058f4:	200000b4 	.word	0x200000b4
 80058f8:	20006504 	.word	0x20006504
 80058fc:	200002b2 	.word	0x200002b2
 8005900:	200003b1 	.word	0x200003b1

08005904 <adcInit>:
/* *******ADC SECTION  ********/
extern ADC_HandleTypeDef hadc1;
extern ADC_HandleTypeDef hadc2;
extern ADC_HandleTypeDef hadc3;
void adcInit(ADCSensor* sens,ADC_HandleTypeDef * adc,int channel,FIL* f)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
 8005910:	603b      	str	r3, [r7, #0]
	if(f == 0)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d108      	bne.n	800592a <adcInit+0x26>
	{
		sens->File = (FIL*)malloc(sizeof(FIL));
 8005918:	f241 0030 	movw	r0, #4144	; 0x1030
 800591c:	f00d f824 	bl	8012968 <malloc>
 8005920:	4603      	mov	r3, r0
 8005922:	461a      	mov	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	e002      	b.n	8005930 <adcInit+0x2c>
	}else
	{
		sens->File = f;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	683a      	ldr	r2, [r7, #0]
 800592e:	601a      	str	r2, [r3, #0]
	}
	sens->adcChannel = channel;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	635a      	str	r2, [r3, #52]	; 0x34
	sens->adc = adc;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	631a      	str	r2, [r3, #48]	; 0x30
	sens->timeFromLastSuccRead = 0;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	621a      	str	r2, [r3, #32]
}
 8005942:	bf00      	nop
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
	...

0800594c <steeringInit>:
	sens->ID = id;
	sens->adcType = damper;
	sens->timeToNextRead = DAMPER_DATA_RATE;

}
void steeringInit(ADCSensor* sens){
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]

	adcInit(sens,&hadc1,0,0);
 8005954:	2300      	movs	r3, #0
 8005956:	2200      	movs	r2, #0
 8005958:	4913      	ldr	r1, [pc, #76]	; (80059a8 <steeringInit+0x5c>)
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7ff ffd2 	bl	8005904 <adcInit>
	statusRegister.Steering = SENSOR_OK;
 8005960:	4a12      	ldr	r2, [pc, #72]	; (80059ac <steeringInit+0x60>)
 8005962:	7893      	ldrb	r3, [r2, #2]
 8005964:	2101      	movs	r1, #1
 8005966:	f361 1347 	bfi	r3, r1, #5, #3
 800596a:	7093      	strb	r3, [r2, #2]
	sens->ID = WHEEL;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2206      	movs	r2, #6
 8005970:	629a      	str	r2, [r3, #40]	; 0x28
	RTC_DateTypeDef date;
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8005972:	f107 030c 	add.w	r3, r7, #12
 8005976:	2200      	movs	r2, #0
 8005978:	4619      	mov	r1, r3
 800597a:	480d      	ldr	r0, [pc, #52]	; (80059b0 <steeringInit+0x64>)
 800597c:	f005 fc2c 	bl	800b1d8 <HAL_RTC_GetDate>
	sprintf(sens->path,"WHEEl%02d%02d.csv",date.Date,date.Month);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	1d18      	adds	r0, r3, #4
 8005984:	7bbb      	ldrb	r3, [r7, #14]
 8005986:	461a      	mov	r2, r3
 8005988:	7b7b      	ldrb	r3, [r7, #13]
 800598a:	490a      	ldr	r1, [pc, #40]	; (80059b4 <steeringInit+0x68>)
 800598c:	f00d fabc 	bl	8012f08 <sprintf>
	sens->adcType = steeringWheel;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	sens->timeToNextRead = STEERING_DATA_RATE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2232      	movs	r2, #50	; 0x32
 800599c:	61da      	str	r2, [r3, #28]
}
 800599e:	bf00      	nop
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	20000ea4 	.word	0x20000ea4
 80059ac:	2000215c 	.word	0x2000215c
 80059b0:	2000219c 	.word	0x2000219c
 80059b4:	0801925c 	.word	0x0801925c

080059b8 <absInit>:
	HAL_ADC_Start(sens->adc);
	HAL_ADC_PollForConversion(sens->adc, HAL_MAX_DELAY);
	sens->data = HAL_ADC_GetValue(sens->adc);
}
/******** ABS SECTION  ********/
void absInit(ABSSensor * sens,SENSORS id,TIM_HandleTypeDef* tim,int channel,FIL *f){
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	607a      	str	r2, [r7, #4]
 80059c2:	603b      	str	r3, [r7, #0]
 80059c4:	460b      	mov	r3, r1
 80059c6:	72fb      	strb	r3, [r7, #11]
	if(f == 0)
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d107      	bne.n	80059de <absInit+0x26>
	{
		sens->File = (FIL*)malloc(sizeof(FIL));
 80059ce:	f241 0030 	movw	r0, #4144	; 0x1030
 80059d2:	f00c ffc9 	bl	8012968 <malloc>
 80059d6:	4603      	mov	r3, r0
 80059d8:	461a      	mov	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	601a      	str	r2, [r3, #0]
	}
	switch(id){
 80059de:	7afb      	ldrb	r3, [r7, #11]
 80059e0:	2b04      	cmp	r3, #4
 80059e2:	d002      	beq.n	80059ea <absInit+0x32>
 80059e4:	2b05      	cmp	r3, #5
 80059e6:	d007      	beq.n	80059f8 <absInit+0x40>
 80059e8:	e00d      	b.n	8005a06 <absInit+0x4e>
	case ABSLF:
		statusRegister.VSSLF = SENSOR_OK;
 80059ea:	4a16      	ldr	r2, [pc, #88]	; (8005a44 <absInit+0x8c>)
 80059ec:	6813      	ldr	r3, [r2, #0]
 80059ee:	2101      	movs	r1, #1
 80059f0:	f361 33d1 	bfi	r3, r1, #15, #3
 80059f4:	6013      	str	r3, [r2, #0]
		break;
 80059f6:	e006      	b.n	8005a06 <absInit+0x4e>

	case ABSRF:
		statusRegister.VSSRF = SENSOR_OK;
 80059f8:	4a12      	ldr	r2, [pc, #72]	; (8005a44 <absInit+0x8c>)
 80059fa:	7893      	ldrb	r3, [r2, #2]
 80059fc:	2101      	movs	r1, #1
 80059fe:	f361 0384 	bfi	r3, r1, #2, #3
 8005a02:	7093      	strb	r3, [r2, #2]
		break;
 8005a04:	bf00      	nop
	}
	sens->dataReady = 0;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	619a      	str	r2, [r3, #24]
	sens->ID =id;
 8005a0c:	7afa      	ldrb	r2, [r7, #11]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	625a      	str	r2, [r3, #36]	; 0x24
	RTC_DateTypeDef date;
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8005a12:	f107 0314 	add.w	r3, r7, #20
 8005a16:	2200      	movs	r2, #0
 8005a18:	4619      	mov	r1, r3
 8005a1a:	480b      	ldr	r0, [pc, #44]	; (8005a48 <absInit+0x90>)
 8005a1c:	f005 fbdc 	bl	800b1d8 <HAL_RTC_GetDate>
	sprintf(sens->path,"ABS%02d%02d.csv",date.Date,date.Month);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	1d18      	adds	r0, r3, #4
 8005a24:	7dbb      	ldrb	r3, [r7, #22]
 8005a26:	461a      	mov	r2, r3
 8005a28:	7d7b      	ldrb	r3, [r7, #21]
 8005a2a:	4908      	ldr	r1, [pc, #32]	; (8005a4c <absInit+0x94>)
 8005a2c:	f00d fa6c 	bl	8012f08 <sprintf>
	sens->timer = tim;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	62da      	str	r2, [r3, #44]	; 0x2c
	sens->timerChannel = channel;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a3c:	bf00      	nop
 8005a3e:	3718      	adds	r7, #24
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	2000215c 	.word	0x2000215c
 8005a48:	2000219c 	.word	0x2000219c
 8005a4c:	08019270 	.word	0x08019270

08005a50 <gyroInit>:
}
/* *******GYRO SECTION  ********/

//GYRO FUNCS
void gyroInit(GyroSensor * sens)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
	int result = MPU9250_Init();
 8005a58:	f7fd fd0e 	bl	8003478 <MPU9250_Init>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	60fb      	str	r3, [r7, #12]
	if(result == 0)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d106      	bne.n	8005a74 <gyroInit+0x24>
	{
		statusRegister.GYRO = SENSOR_OK;
 8005a66:	4a18      	ldr	r2, [pc, #96]	; (8005ac8 <gyroInit+0x78>)
 8005a68:	8813      	ldrh	r3, [r2, #0]
 8005a6a:	2101      	movs	r1, #1
 8005a6c:	f361 1388 	bfi	r3, r1, #6, #3
 8005a70:	8013      	strh	r3, [r2, #0]
 8005a72:	e004      	b.n	8005a7e <gyroInit+0x2e>
	}else{
		statusRegister.GYRO = SENSOR_INIT_FAIL;
 8005a74:	4a14      	ldr	r2, [pc, #80]	; (8005ac8 <gyroInit+0x78>)
 8005a76:	8813      	ldrh	r3, [r2, #0]
 8005a78:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 8005a7c:	8013      	strh	r3, [r2, #0]
	}
	sens->File = (FIL*)malloc(sizeof(FIL));
 8005a7e:	f241 0030 	movw	r0, #4144	; 0x1030
 8005a82:	f00c ff71 	bl	8012968 <malloc>
 8005a86:	4603      	mov	r3, r0
 8005a88:	461a      	mov	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	601a      	str	r2, [r3, #0]

	RTC_DateTypeDef date;
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8005a8e:	f107 0308 	add.w	r3, r7, #8
 8005a92:	2200      	movs	r2, #0
 8005a94:	4619      	mov	r1, r3
 8005a96:	480d      	ldr	r0, [pc, #52]	; (8005acc <gyroInit+0x7c>)
 8005a98:	f005 fb9e 	bl	800b1d8 <HAL_RTC_GetDate>
	sprintf(sens->path,"GYRO%02d%02d.csv",date.Date,date.Month);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	1d18      	adds	r0, r3, #4
 8005aa0:	7abb      	ldrb	r3, [r7, #10]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	7a7b      	ldrb	r3, [r7, #9]
 8005aa6:	490a      	ldr	r1, [pc, #40]	; (8005ad0 <gyroInit+0x80>)
 8005aa8:	f00d fa2e 	bl	8012f08 <sprintf>
	sens->dataReady = 0;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	619a      	str	r2, [r3, #24]
	sens->saveRate = GYRO_DATA_RATE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	22fa      	movs	r2, #250	; 0xfa
 8005ab6:	61da      	str	r2, [r3, #28]
	sens->timeToNextRead = GYRO_DATA_RATE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	22fa      	movs	r2, #250	; 0xfa
 8005abc:	621a      	str	r2, [r3, #32]
}
 8005abe:	bf00      	nop
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	2000215c 	.word	0x2000215c
 8005acc:	2000219c 	.word	0x2000219c
 8005ad0:	08019280 	.word	0x08019280
 8005ad4:	00000000 	.word	0x00000000

08005ad8 <gyroConvertData>:
void gyroConvertData(struct gyroData * input, struct gyroDataCalc * output)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
	output->acc_data_calc[0] = (double) input->acc_data[0] / 16384;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ae8:	ee07 3a90 	vmov	s15, r3
 8005aec:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8005af0:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8005bb0 <gyroConvertData+0xd8>
 8005af4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	ed83 7b00 	vstr	d7, [r3]
	output->acc_data_calc[1] = (double) input->acc_data[1] / 16384;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005b04:	ee07 3a90 	vmov	s15, r3
 8005b08:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8005b0c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8005bb0 <gyroConvertData+0xd8>
 8005b10:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	ed83 7b02 	vstr	d7, [r3, #8]
	output->acc_data_calc[2] = (double) input->acc_data[2] / 16384;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005b20:	ee07 3a90 	vmov	s15, r3
 8005b24:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8005b28:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8005bb0 <gyroConvertData+0xd8>
 8005b2c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	ed83 7b04 	vstr	d7, [r3, #16]
	output->gyro_data_calc[0] = (double) input->gyro_data[0] * 250 / 32768;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8005b3c:	ee07 3a90 	vmov	s15, r3
 8005b40:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005b44:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8005bb8 <gyroConvertData+0xe0>
 8005b48:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005b4c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8005bc0 <gyroConvertData+0xe8>
 8005b50:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	ed83 7b06 	vstr	d7, [r3, #24]
	output->gyro_data_calc[1] = (double) input->gyro_data[1] * 250 / 32768;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005b60:	ee07 3a90 	vmov	s15, r3
 8005b64:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005b68:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8005bb8 <gyroConvertData+0xe0>
 8005b6c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005b70:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8005bc0 <gyroConvertData+0xe8>
 8005b74:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	ed83 7b08 	vstr	d7, [r3, #32]
	output->gyro_data_calc[2] = (double) input->gyro_data[2] * 250 / 32768;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005b84:	ee07 3a90 	vmov	s15, r3
 8005b88:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005b8c:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8005bb8 <gyroConvertData+0xe0>
 8005b90:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005b94:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8005bc0 <gyroConvertData+0xe8>
 8005b98:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28

}
 8005ba2:	bf00      	nop
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	00000000 	.word	0x00000000
 8005bb4:	40d00000 	.word	0x40d00000
 8005bb8:	00000000 	.word	0x00000000
 8005bbc:	406f4000 	.word	0x406f4000
 8005bc0:	00000000 	.word	0x00000000
 8005bc4:	40e00000 	.word	0x40e00000

08005bc8 <gyroGetData>:

void gyroGetData(GyroSensor * sens)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b088      	sub	sp, #32
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
	gyroData imu_9dof_data;
    MPU9250_GetData(imu_9dof_data.acc_data, imu_9dof_data.mag_data, imu_9dof_data.gyro_data);
 8005bd0:	f107 030c 	add.w	r3, r7, #12
 8005bd4:	f103 020c 	add.w	r2, r3, #12
 8005bd8:	f107 030c 	add.w	r3, r7, #12
 8005bdc:	1d99      	adds	r1, r3, #6
 8005bde:	f107 030c 	add.w	r3, r7, #12
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7fd fd12 	bl	800360c <MPU9250_GetData>
    gyroConvertData(&imu_9dof_data, &sens->data);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8005bee:	f107 030c 	add.w	r3, r7, #12
 8005bf2:	4611      	mov	r1, r2
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7ff ff6f 	bl	8005ad8 <gyroConvertData>
    sens->dataReady = 0;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	619a      	str	r2, [r3, #24]
}
 8005c00:	bf00      	nop
 8005c02:	3720      	adds	r7, #32
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <mlxInit>:



//MLX FUNCS
int mlxInit(MLXSensor *mlx,SENSORS id, I2C_HandleTypeDef * i2c,FIL * f)
{
 8005c08:	b590      	push	{r4, r7, lr}
 8005c0a:	f2ad 6d9c 	subw	sp, sp, #1692	; 0x69c
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	f507 64d3 	add.w	r4, r7, #1688	; 0x698
 8005c14:	f2a4 648c 	subw	r4, r4, #1676	; 0x68c
 8005c18:	6020      	str	r0, [r4, #0]
 8005c1a:	4608      	mov	r0, r1
 8005c1c:	f507 61d3 	add.w	r1, r7, #1688	; 0x698
 8005c20:	f2a1 6194 	subw	r1, r1, #1684	; 0x694
 8005c24:	600a      	str	r2, [r1, #0]
 8005c26:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8005c2a:	f5a2 62d3 	sub.w	r2, r2, #1688	; 0x698
 8005c2e:	6013      	str	r3, [r2, #0]
 8005c30:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005c34:	f2a3 638d 	subw	r3, r3, #1677	; 0x68d
 8005c38:	4602      	mov	r2, r0
 8005c3a:	701a      	strb	r2, [r3, #0]
		uint16_t eeMLX90640[832];
		if(f == 0)
 8005c3c:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005c40:	f5a3 63d3 	sub.w	r3, r3, #1688	; 0x698
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10c      	bne.n	8005c64 <mlxInit+0x5c>
		{
			mlx->File = (FIL*)malloc(sizeof(FIL));
 8005c4a:	f241 0030 	movw	r0, #4144	; 0x1030
 8005c4e:	f00c fe8b 	bl	8012968 <malloc>
 8005c52:	4603      	mov	r3, r0
 8005c54:	461a      	mov	r2, r3
 8005c56:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005c5a:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	601a      	str	r2, [r3, #0]
 8005c62:	e00a      	b.n	8005c7a <mlxInit+0x72>
		}else
		{
			mlx->File = f;
 8005c64:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005c68:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8005c72:	f5a2 62d3 	sub.w	r2, r2, #1688	; 0x698
 8005c76:	6812      	ldr	r2, [r2, #0]
 8005c78:	601a      	str	r2, [r3, #0]
		}
		RTC_DateTypeDef date;
		HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8005c7a:	f107 0310 	add.w	r3, r7, #16
 8005c7e:	2200      	movs	r2, #0
 8005c80:	4619      	mov	r1, r3
 8005c82:	4861      	ldr	r0, [pc, #388]	; (8005e08 <mlxInit+0x200>)
 8005c84:	f005 faa8 	bl	800b1d8 <HAL_RTC_GetDate>
		sprintf(mlx->path,"MLX%02d%02d.csv",date.Date,date.Month);
 8005c88:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005c8c:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	1d18      	adds	r0, r3, #4
 8005c94:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005c98:	f5a3 63d1 	sub.w	r3, r3, #1672	; 0x688
 8005c9c:	789b      	ldrb	r3, [r3, #2]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005ca4:	f5a3 63d1 	sub.w	r3, r3, #1672	; 0x688
 8005ca8:	785b      	ldrb	r3, [r3, #1]
 8005caa:	4958      	ldr	r1, [pc, #352]	; (8005e0c <mlxInit+0x204>)
 8005cac:	f00d f92c 	bl	8012f08 <sprintf>
		mlx->timeToNextRead = MLX_DATA_RATE;
 8005cb0:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005cb4:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005cbe:	621a      	str	r2, [r3, #32]
		mlx->dataReady = 0;
 8005cc0:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005cc4:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	619a      	str	r2, [r3, #24]
	  	mlx->emissivity = 0.95;
 8005cce:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005cd2:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cdc:	f503 636b 	add.w	r3, r3, #3760	; 0xeb0
 8005ce0:	4a4b      	ldr	r2, [pc, #300]	; (8005e10 <mlxInit+0x208>)
 8005ce2:	601a      	str	r2, [r3, #0]
	  	mlx->ID = id;
 8005ce4:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005ce8:	f2a3 638d 	subw	r3, r3, #1677	; 0x68d
 8005cec:	781a      	ldrb	r2, [r3, #0]
 8005cee:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005cf2:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	625a      	str	r2, [r3, #36]	; 0x24
		MLX90640_SetRefreshRate(MLX90640_ADDR, RefreshRate,mlx->i2c);
 8005cfa:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005cfe:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d06:	461a      	mov	r2, r3
 8005d08:	2104      	movs	r1, #4
 8005d0a:	2033      	movs	r0, #51	; 0x33
 8005d0c:	f7fa fd89 	bl	8000822 <MLX90640_SetRefreshRate>
	  	MLX90640_SetChessMode(MLX90640_ADDR,mlx->i2c);
 8005d10:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005d14:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	2033      	movs	r0, #51	; 0x33
 8005d20:	f7fa fdb1 	bl	8000886 <MLX90640_SetChessMode>
	    int status = MLX90640_DumpEE(MLX90640_ADDR, eeMLX90640,mlx->i2c);
 8005d24:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005d28:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d30:	f107 0314 	add.w	r3, r7, #20
 8005d34:	4619      	mov	r1, r3
 8005d36:	2033      	movs	r0, #51	; 0x33
 8005d38:	f7fa fc5c 	bl	80005f4 <MLX90640_DumpEE>
 8005d3c:	f8c7 0694 	str.w	r0, [r7, #1684]	; 0x694
	    status = status | MLX90640_ExtractParameters(eeMLX90640, &mlx->mlx90640);
 8005d40:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005d44:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8005d4e:	f107 0314 	add.w	r3, r7, #20
 8005d52:	4611      	mov	r1, r2
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7fa fd1f 	bl	8000798 <MLX90640_ExtractParameters>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	f8d7 3694 	ldr.w	r3, [r7, #1684]	; 0x694
 8005d60:	4313      	orrs	r3, r2
 8005d62:	f8c7 3694 	str.w	r3, [r7, #1684]	; 0x694
	    if (status != 0){
 8005d66:	f8d7 3694 	ldr.w	r3, [r7, #1684]	; 0x694
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d01d      	beq.n	8005daa <mlxInit+0x1a2>
	    	 if(mlx->ID == MLXLF)
 8005d6e:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005d72:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d105      	bne.n	8005d8a <mlxInit+0x182>
	    	 {
	    	    statusRegister.MLXLF = SENSOR_INIT_FAIL;
 8005d7e:	4a25      	ldr	r2, [pc, #148]	; (8005e14 <mlxInit+0x20c>)
 8005d80:	7853      	ldrb	r3, [r2, #1]
 8005d82:	f043 030e 	orr.w	r3, r3, #14
 8005d86:	7053      	strb	r3, [r2, #1]
 8005d88:	e00c      	b.n	8005da4 <mlxInit+0x19c>
	    	 }else if(mlx->ID == MLXRF)
 8005d8a:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005d8e:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d104      	bne.n	8005da4 <mlxInit+0x19c>
	    	 {
	    	    statusRegister.MLXRF = SENSOR_INIT_FAIL;
 8005d9a:	4a1e      	ldr	r2, [pc, #120]	; (8005e14 <mlxInit+0x20c>)
 8005d9c:	7853      	ldrb	r3, [r2, #1]
 8005d9e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8005da2:	7053      	strb	r3, [r2, #1]
	    	 }
	    	 return status;
 8005da4:	f8d7 3694 	ldr.w	r3, [r7, #1684]	; 0x694
 8005da8:	e028      	b.n	8005dfc <mlxInit+0x1f4>
	   }
	    mlx->i2c = i2c;
 8005daa:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005dae:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8005db8:	f2a2 6294 	subw	r2, r2, #1684	; 0x694
 8005dbc:	6812      	ldr	r2, [r2, #0]
 8005dbe:	629a      	str	r2, [r3, #40]	; 0x28

	    if(mlx->ID == MLXLF)
 8005dc0:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005dc4:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d106      	bne.n	8005dde <mlxInit+0x1d6>
	    {
	    	statusRegister.MLXLF = SENSOR_OK;
 8005dd0:	4a10      	ldr	r2, [pc, #64]	; (8005e14 <mlxInit+0x20c>)
 8005dd2:	7853      	ldrb	r3, [r2, #1]
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	f361 0343 	bfi	r3, r1, #1, #3
 8005dda:	7053      	strb	r3, [r2, #1]
 8005ddc:	e00d      	b.n	8005dfa <mlxInit+0x1f2>
	    }else if(mlx->ID == MLXRF)
 8005dde:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8005de2:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	2b03      	cmp	r3, #3
 8005dec:	d105      	bne.n	8005dfa <mlxInit+0x1f2>
	    {
	    	statusRegister.MLXRF = SENSOR_OK;
 8005dee:	4a09      	ldr	r2, [pc, #36]	; (8005e14 <mlxInit+0x20c>)
 8005df0:	7853      	ldrb	r3, [r2, #1]
 8005df2:	2101      	movs	r1, #1
 8005df4:	f361 1306 	bfi	r3, r1, #4, #3
 8005df8:	7053      	strb	r3, [r2, #1]
	    }


	    return 0;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f207 679c 	addw	r7, r7, #1692	; 0x69c
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd90      	pop	{r4, r7, pc}
 8005e06:	bf00      	nop
 8005e08:	2000219c 	.word	0x2000219c
 8005e0c:	08019294 	.word	0x08019294
 8005e10:	3f733333 	.word	0x3f733333
 8005e14:	2000215c 	.word	0x2000215c

08005e18 <mlxGetData>:

//Copy and calcualte data from sensor memory to stm
int mlxGetData(MLXSensor* mlx){
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	f5ad 6dd2 	sub.w	sp, sp, #1680	; 0x690
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005e24:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005e28:	6018      	str	r0, [r3, #0]
	uint16_t frame[832];
	int status = MLX90640_GetFrameData(MLX90640_ADDR, frame,mlx->i2c);
 8005e2a:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005e2e:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e36:	f107 030c 	add.w	r3, r7, #12
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	2033      	movs	r0, #51	; 0x33
 8005e3e:	f7fa fbef 	bl	8000620 <MLX90640_GetFrameData>
 8005e42:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
	if (status < 0)
 8005e46:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	da07      	bge.n	8005e5e <mlxGetData+0x46>
	{
		if(DEBUG)
			printf("Error while getting frame 1: %d\n",status);
 8005e4e:	f8d7 168c 	ldr.w	r1, [r7, #1676]	; 0x68c
 8005e52:	485d      	ldr	r0, [pc, #372]	; (8005fc8 <mlxGetData+0x1b0>)
 8005e54:	f00c ffe0 	bl	8012e18 <printf>
		return status;
 8005e58:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8005e5c:	e0ae      	b.n	8005fbc <mlxGetData+0x1a4>
	}

	mlx->vdd = MLX90640_GetVdd(frame, &mlx->mlx90640);
 8005e5e:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005e62:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8005e6c:	f107 030c 	add.w	r3, r7, #12
 8005e70:	4611      	mov	r1, r2
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fb f970 	bl	8001158 <MLX90640_GetVdd>
 8005e78:	eef0 7a40 	vmov.f32	s15, s0
 8005e7c:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005e80:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e8a:	f603 63ac 	addw	r3, r3, #3756	; 0xeac
 8005e8e:	edc3 7a00 	vstr	s15, [r3]
	mlx->ambientTemp = MLX90640_GetTa(frame, &mlx->mlx90640) - TA_SHIFT;
 8005e92:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005e96:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8005ea0:	f107 030c 	add.w	r3, r7, #12
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fb f9d0 	bl	800124c <MLX90640_GetTa>
 8005eac:	eef0 7a40 	vmov.f32	s15, s0
 8005eb0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8005eb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005eb8:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005ebc:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ec6:	f603 63a8 	addw	r3, r3, #3752	; 0xea8
 8005eca:	edc3 7a00 	vstr	s15, [r3]

	MLX90640_CalculateTo(frame, &mlx->mlx90640, mlx->emissivity , mlx->ambientTemp, mlx->data);
 8005ece:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005ed2:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8005edc:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005ee0:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eea:	f503 636b 	add.w	r3, r3, #3760	; 0xeb0
 8005eee:	edd3 7a00 	vldr	s15, [r3]
 8005ef2:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005ef6:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f00:	f603 63a8 	addw	r3, r3, #3752	; 0xea8
 8005f04:	ed93 7a00 	vldr	s14, [r3]
 8005f08:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005f0c:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8005f16:	4413      	add	r3, r2
 8005f18:	f107 000c 	add.w	r0, r7, #12
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	eef0 0a47 	vmov.f32	s1, s14
 8005f22:	eeb0 0a67 	vmov.f32	s0, s15
 8005f26:	f7fa fcd7 	bl	80008d8 <MLX90640_CalculateTo>
	status = MLX90640_GetFrameData(MLX90640_ADDR, frame,mlx->i2c);
 8005f2a:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005f2e:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f36:	f107 030c 	add.w	r3, r7, #12
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	2033      	movs	r0, #51	; 0x33
 8005f3e:	f7fa fb6f 	bl	8000620 <MLX90640_GetFrameData>
 8005f42:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
	if(status < 0)
 8005f46:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	da07      	bge.n	8005f5e <mlxGetData+0x146>
	{
		if(DEBUG)
			printf("Error while getting frame 2: %d\n",status);
 8005f4e:	f8d7 168c 	ldr.w	r1, [r7, #1676]	; 0x68c
 8005f52:	481e      	ldr	r0, [pc, #120]	; (8005fcc <mlxGetData+0x1b4>)
 8005f54:	f00c ff60 	bl	8012e18 <printf>
		return status;
 8005f58:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8005f5c:	e02e      	b.n	8005fbc <mlxGetData+0x1a4>
	}
	//mlx->dataReady = 1;
	MLX90640_CalculateTo(frame, &mlx->mlx90640, mlx->emissivity , mlx->ambientTemp, mlx->data);
 8005f5e:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005f62:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8005f6c:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005f70:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f7a:	f503 636b 	add.w	r3, r3, #3760	; 0xeb0
 8005f7e:	edd3 7a00 	vldr	s15, [r3]
 8005f82:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005f86:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f90:	f603 63a8 	addw	r3, r3, #3752	; 0xea8
 8005f94:	ed93 7a00 	vldr	s14, [r3]
 8005f98:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005f9c:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f107 000c 	add.w	r0, r7, #12
 8005fac:	461a      	mov	r2, r3
 8005fae:	eef0 0a47 	vmov.f32	s1, s14
 8005fb2:	eeb0 0a67 	vmov.f32	s0, s15
 8005fb6:	f7fa fc8f 	bl	80008d8 <MLX90640_CalculateTo>
	return 0;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f507 67d2 	add.w	r7, r7, #1680	; 0x690
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	080192a4 	.word	0x080192a4
 8005fcc:	080192c8 	.word	0x080192c8

08005fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005fd6:	4b0f      	ldr	r3, [pc, #60]	; (8006014 <HAL_MspInit+0x44>)
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fda:	4a0e      	ldr	r2, [pc, #56]	; (8006014 <HAL_MspInit+0x44>)
 8005fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8005fe2:	4b0c      	ldr	r3, [pc, #48]	; (8006014 <HAL_MspInit+0x44>)
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fea:	607b      	str	r3, [r7, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fee:	4b09      	ldr	r3, [pc, #36]	; (8006014 <HAL_MspInit+0x44>)
 8005ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff2:	4a08      	ldr	r2, [pc, #32]	; (8006014 <HAL_MspInit+0x44>)
 8005ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8005ffa:	4b06      	ldr	r3, [pc, #24]	; (8006014 <HAL_MspInit+0x44>)
 8005ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006002:	603b      	str	r3, [r7, #0]
 8006004:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	40023800 	.word	0x40023800

08006018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006018:	b480      	push	{r7}
 800601a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800601c:	e7fe      	b.n	800601c <NMI_Handler+0x4>

0800601e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800601e:	b480      	push	{r7}
 8006020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006022:	e7fe      	b.n	8006022 <HardFault_Handler+0x4>

08006024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006024:	b480      	push	{r7}
 8006026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006028:	e7fe      	b.n	8006028 <MemManage_Handler+0x4>

0800602a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800602a:	b480      	push	{r7}
 800602c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800602e:	e7fe      	b.n	800602e <BusFault_Handler+0x4>

08006030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006030:	b480      	push	{r7}
 8006032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006034:	e7fe      	b.n	8006034 <UsageFault_Handler+0x4>

08006036 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006036:	b480      	push	{r7}
 8006038:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800603a:	bf00      	nop
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006044:	b480      	push	{r7}
 8006046:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006048:	bf00      	nop
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006052:	b480      	push	{r7}
 8006054:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006056:	bf00      	nop
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006064:	f000 fbd0 	bl	8006808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006068:	bf00      	nop
 800606a:	bd80      	pop	{r7, pc}

0800606c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006070:	4805      	ldr	r0, [pc, #20]	; (8006088 <ADC_IRQHandler+0x1c>)
 8006072:	f000 fc51 	bl	8006918 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8006076:	4805      	ldr	r0, [pc, #20]	; (800608c <ADC_IRQHandler+0x20>)
 8006078:	f000 fc4e 	bl	8006918 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800607c:	4804      	ldr	r0, [pc, #16]	; (8006090 <ADC_IRQHandler+0x24>)
 800607e:	f000 fc4b 	bl	8006918 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8006082:	bf00      	nop
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	20000ea4 	.word	0x20000ea4
 800608c:	20000eec 	.word	0x20000eec
 8006090:	20000f34 	.word	0x20000f34

08006094 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006098:	4802      	ldr	r0, [pc, #8]	; (80060a4 <CAN1_RX0_IRQHandler+0x10>)
 800609a:	f001 fabf 	bl	800761c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800609e:	bf00      	nop
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	20000fa4 	.word	0x20000fa4

080060a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80060ac:	4802      	ldr	r0, [pc, #8]	; (80060b8 <TIM3_IRQHandler+0x10>)
 80060ae:	f006 ff8f 	bl	800cfd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80060b2:	bf00      	nop
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	2000639c 	.word	0x2000639c

080060bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80060c0:	4802      	ldr	r0, [pc, #8]	; (80060cc <TIM4_IRQHandler+0x10>)
 80060c2:	f006 ff85 	bl	800cfd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80060c6:	bf00      	nop
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	200063e8 	.word	0x200063e8

080060d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80060d4:	4802      	ldr	r0, [pc, #8]	; (80060e0 <USART3_IRQHandler+0x10>)
 80060d6:	f007 ffab 	bl	800e030 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80060da:	bf00      	nop
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20006504 	.word	0x20006504

080060e4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80060e8:	4802      	ldr	r0, [pc, #8]	; (80060f4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80060ea:	f006 ff71 	bl	800cfd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80060ee:	bf00      	nop
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	20006434 	.word	0x20006434

080060f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_rx);
 80060fc:	4802      	ldr	r0, [pc, #8]	; (8006108 <DMA2_Stream0_IRQHandler+0x10>)
 80060fe:	f001 ff6f 	bl	8007fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006102:	bf00      	nop
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	20002240 	.word	0x20002240

0800610c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8006110:	4802      	ldr	r0, [pc, #8]	; (800611c <CAN2_RX0_IRQHandler+0x10>)
 8006112:	f001 fa83 	bl	800761c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8006116:	bf00      	nop
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	20000fcc 	.word	0x20000fcc

08006120 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_tx);
 8006124:	4802      	ldr	r0, [pc, #8]	; (8006130 <DMA2_Stream5_IRQHandler+0x10>)
 8006126:	f001 ff5b 	bl	8007fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800612a:	bf00      	nop
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	200022a0 	.word	0x200022a0

08006134 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8006138:	4802      	ldr	r0, [pc, #8]	; (8006144 <UART7_IRQHandler+0x10>)
 800613a:	f007 ff79 	bl	800e030 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800613e:	bf00      	nop
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	20006480 	.word	0x20006480

08006148 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 800614c:	4802      	ldr	r0, [pc, #8]	; (8006158 <SDMMC2_IRQHandler+0x10>)
 800614e:	f005 fba3 	bl	800b898 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8006152:	bf00      	nop
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	200021bc 	.word	0x200021bc

0800615c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800615c:	b480      	push	{r7}
 800615e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006160:	4b08      	ldr	r3, [pc, #32]	; (8006184 <SystemInit+0x28>)
 8006162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006166:	4a07      	ldr	r2, [pc, #28]	; (8006184 <SystemInit+0x28>)
 8006168:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800616c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8006170:	4b04      	ldr	r3, [pc, #16]	; (8006184 <SystemInit+0x28>)
 8006172:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006176:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006178:	bf00      	nop
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	e000ed00 	.word	0xe000ed00

08006188 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim14;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b090      	sub	sp, #64	; 0x40
 800618c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800618e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006192:	2200      	movs	r2, #0
 8006194:	601a      	str	r2, [r3, #0]
 8006196:	605a      	str	r2, [r3, #4]
 8006198:	609a      	str	r2, [r3, #8]
 800619a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800619c:	f107 031c 	add.w	r3, r7, #28
 80061a0:	2200      	movs	r2, #0
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	605a      	str	r2, [r3, #4]
 80061a6:	609a      	str	r2, [r3, #8]
 80061a8:	60da      	str	r2, [r3, #12]
 80061aa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80061ac:	f107 0310 	add.w	r3, r7, #16
 80061b0:	2200      	movs	r2, #0
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	605a      	str	r2, [r3, #4]
 80061b6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80061b8:	463b      	mov	r3, r7
 80061ba:	2200      	movs	r2, #0
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	605a      	str	r2, [r3, #4]
 80061c0:	609a      	str	r2, [r3, #8]
 80061c2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80061c4:	4b35      	ldr	r3, [pc, #212]	; (800629c <MX_TIM3_Init+0x114>)
 80061c6:	4a36      	ldr	r2, [pc, #216]	; (80062a0 <MX_TIM3_Init+0x118>)
 80061c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31999;
 80061ca:	4b34      	ldr	r3, [pc, #208]	; (800629c <MX_TIM3_Init+0x114>)
 80061cc:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80061d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80061d2:	4b32      	ldr	r3, [pc, #200]	; (800629c <MX_TIM3_Init+0x114>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80061d8:	4b30      	ldr	r3, [pc, #192]	; (800629c <MX_TIM3_Init+0x114>)
 80061da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80061e0:	4b2e      	ldr	r3, [pc, #184]	; (800629c <MX_TIM3_Init+0x114>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80061e6:	4b2d      	ldr	r3, [pc, #180]	; (800629c <MX_TIM3_Init+0x114>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80061ec:	482b      	ldr	r0, [pc, #172]	; (800629c <MX_TIM3_Init+0x114>)
 80061ee:	f006 fbfe 	bl	800c9ee <HAL_TIM_Base_Init>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80061f8:	f7ff f93e 	bl	8005478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80061fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006200:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006202:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006206:	4619      	mov	r1, r3
 8006208:	4824      	ldr	r0, [pc, #144]	; (800629c <MX_TIM3_Init+0x114>)
 800620a:	f007 f89d 	bl	800d348 <HAL_TIM_ConfigClockSource>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8006214:	f7ff f930 	bl	8005478 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8006218:	4820      	ldr	r0, [pc, #128]	; (800629c <MX_TIM3_Init+0x114>)
 800621a:	f006 fd27 	bl	800cc6c <HAL_TIM_IC_Init>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8006224:	f7ff f928 	bl	8005478 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8006228:	2304      	movs	r3, #4
 800622a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 800622c:	2340      	movs	r3, #64	; 0x40
 800622e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8006230:	2300      	movs	r3, #0
 8006232:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8006234:	2300      	movs	r3, #0
 8006236:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8006238:	f107 031c 	add.w	r3, r7, #28
 800623c:	4619      	mov	r1, r3
 800623e:	4817      	ldr	r0, [pc, #92]	; (800629c <MX_TIM3_Init+0x114>)
 8006240:	f007 f94c 	bl	800d4dc <HAL_TIM_SlaveConfigSynchro>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 800624a:	f7ff f915 	bl	8005478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800624e:	2300      	movs	r3, #0
 8006250:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006252:	2300      	movs	r3, #0
 8006254:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006256:	f107 0310 	add.w	r3, r7, #16
 800625a:	4619      	mov	r1, r3
 800625c:	480f      	ldr	r0, [pc, #60]	; (800629c <MX_TIM3_Init+0x114>)
 800625e:	f007 fd0b 	bl	800dc78 <HAL_TIMEx_MasterConfigSynchronization>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8006268:	f7ff f906 	bl	8005478 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800626c:	2302      	movs	r3, #2
 800626e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8006270:	2301      	movs	r3, #1
 8006272:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8006274:	2300      	movs	r3, #0
 8006276:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8006278:	230f      	movs	r3, #15
 800627a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800627c:	463b      	mov	r3, r7
 800627e:	2200      	movs	r2, #0
 8006280:	4619      	mov	r1, r3
 8006282:	4806      	ldr	r0, [pc, #24]	; (800629c <MX_TIM3_Init+0x114>)
 8006284:	f006 ffc3 	bl	800d20e <HAL_TIM_IC_ConfigChannel>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <MX_TIM3_Init+0x10a>
  {
    Error_Handler();
 800628e:	f7ff f8f3 	bl	8005478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006292:	bf00      	nop
 8006294:	3740      	adds	r7, #64	; 0x40
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	2000639c 	.word	0x2000639c
 80062a0:	40000400 	.word	0x40000400

080062a4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b090      	sub	sp, #64	; 0x40
 80062a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80062aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062ae:	2200      	movs	r2, #0
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	605a      	str	r2, [r3, #4]
 80062b4:	609a      	str	r2, [r3, #8]
 80062b6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80062b8:	f107 031c 	add.w	r3, r7, #28
 80062bc:	2200      	movs	r2, #0
 80062be:	601a      	str	r2, [r3, #0]
 80062c0:	605a      	str	r2, [r3, #4]
 80062c2:	609a      	str	r2, [r3, #8]
 80062c4:	60da      	str	r2, [r3, #12]
 80062c6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062c8:	f107 0310 	add.w	r3, r7, #16
 80062cc:	2200      	movs	r2, #0
 80062ce:	601a      	str	r2, [r3, #0]
 80062d0:	605a      	str	r2, [r3, #4]
 80062d2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80062d4:	463b      	mov	r3, r7
 80062d6:	2200      	movs	r2, #0
 80062d8:	601a      	str	r2, [r3, #0]
 80062da:	605a      	str	r2, [r3, #4]
 80062dc:	609a      	str	r2, [r3, #8]
 80062de:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80062e0:	4b35      	ldr	r3, [pc, #212]	; (80063b8 <MX_TIM4_Init+0x114>)
 80062e2:	4a36      	ldr	r2, [pc, #216]	; (80063bc <MX_TIM4_Init+0x118>)
 80062e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 31999;
 80062e6:	4b34      	ldr	r3, [pc, #208]	; (80063b8 <MX_TIM4_Init+0x114>)
 80062e8:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80062ec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062ee:	4b32      	ldr	r3, [pc, #200]	; (80063b8 <MX_TIM4_Init+0x114>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80062f4:	4b30      	ldr	r3, [pc, #192]	; (80063b8 <MX_TIM4_Init+0x114>)
 80062f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062fa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062fc:	4b2e      	ldr	r3, [pc, #184]	; (80063b8 <MX_TIM4_Init+0x114>)
 80062fe:	2200      	movs	r2, #0
 8006300:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006302:	4b2d      	ldr	r3, [pc, #180]	; (80063b8 <MX_TIM4_Init+0x114>)
 8006304:	2200      	movs	r2, #0
 8006306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8006308:	482b      	ldr	r0, [pc, #172]	; (80063b8 <MX_TIM4_Init+0x114>)
 800630a:	f006 fb70 	bl	800c9ee <HAL_TIM_Base_Init>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d001      	beq.n	8006318 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8006314:	f7ff f8b0 	bl	8005478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800631c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800631e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006322:	4619      	mov	r1, r3
 8006324:	4824      	ldr	r0, [pc, #144]	; (80063b8 <MX_TIM4_Init+0x114>)
 8006326:	f007 f80f 	bl	800d348 <HAL_TIM_ConfigClockSource>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d001      	beq.n	8006334 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8006330:	f7ff f8a2 	bl	8005478 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8006334:	4820      	ldr	r0, [pc, #128]	; (80063b8 <MX_TIM4_Init+0x114>)
 8006336:	f006 fc99 	bl	800cc6c <HAL_TIM_IC_Init>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8006340:	f7ff f89a 	bl	8005478 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8006344:	2304      	movs	r3, #4
 8006346:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8006348:	2340      	movs	r3, #64	; 0x40
 800634a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800634c:	2300      	movs	r3, #0
 800634e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8006350:	2300      	movs	r3, #0
 8006352:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8006354:	f107 031c 	add.w	r3, r7, #28
 8006358:	4619      	mov	r1, r3
 800635a:	4817      	ldr	r0, [pc, #92]	; (80063b8 <MX_TIM4_Init+0x114>)
 800635c:	f007 f8be 	bl	800d4dc <HAL_TIM_SlaveConfigSynchro>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 8006366:	f7ff f887 	bl	8005478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800636a:	2300      	movs	r3, #0
 800636c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800636e:	2300      	movs	r3, #0
 8006370:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006372:	f107 0310 	add.w	r3, r7, #16
 8006376:	4619      	mov	r1, r3
 8006378:	480f      	ldr	r0, [pc, #60]	; (80063b8 <MX_TIM4_Init+0x114>)
 800637a:	f007 fc7d 	bl	800dc78 <HAL_TIMEx_MasterConfigSynchronization>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d001      	beq.n	8006388 <MX_TIM4_Init+0xe4>
  {
    Error_Handler();
 8006384:	f7ff f878 	bl	8005478 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8006388:	2302      	movs	r3, #2
 800638a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800638c:	2301      	movs	r3, #1
 800638e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8006390:	2300      	movs	r3, #0
 8006392:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8006394:	230f      	movs	r3, #15
 8006396:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8006398:	463b      	mov	r3, r7
 800639a:	2200      	movs	r2, #0
 800639c:	4619      	mov	r1, r3
 800639e:	4806      	ldr	r0, [pc, #24]	; (80063b8 <MX_TIM4_Init+0x114>)
 80063a0:	f006 ff35 	bl	800d20e <HAL_TIM_IC_ConfigChannel>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d001      	beq.n	80063ae <MX_TIM4_Init+0x10a>
  {
    Error_Handler();
 80063aa:	f7ff f865 	bl	8005478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80063ae:	bf00      	nop
 80063b0:	3740      	adds	r7, #64	; 0x40
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	200063e8 	.word	0x200063e8
 80063bc:	40000800 	.word	0x40000800

080063c0 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80063c4:	4b0e      	ldr	r3, [pc, #56]	; (8006400 <MX_TIM14_Init+0x40>)
 80063c6:	4a0f      	ldr	r2, [pc, #60]	; (8006404 <MX_TIM14_Init+0x44>)
 80063c8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 10799;
 80063ca:	4b0d      	ldr	r3, [pc, #52]	; (8006400 <MX_TIM14_Init+0x40>)
 80063cc:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80063d0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063d2:	4b0b      	ldr	r3, [pc, #44]	; (8006400 <MX_TIM14_Init+0x40>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 249;
 80063d8:	4b09      	ldr	r3, [pc, #36]	; (8006400 <MX_TIM14_Init+0x40>)
 80063da:	22f9      	movs	r2, #249	; 0xf9
 80063dc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80063de:	4b08      	ldr	r3, [pc, #32]	; (8006400 <MX_TIM14_Init+0x40>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80063e4:	4b06      	ldr	r3, [pc, #24]	; (8006400 <MX_TIM14_Init+0x40>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80063ea:	4805      	ldr	r0, [pc, #20]	; (8006400 <MX_TIM14_Init+0x40>)
 80063ec:	f006 faff 	bl	800c9ee <HAL_TIM_Base_Init>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80063f6:	f7ff f83f 	bl	8005478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80063fa:	bf00      	nop
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	20006434 	.word	0x20006434
 8006404:	40002000 	.word	0x40002000

08006408 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b08c      	sub	sp, #48	; 0x30
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006410:	f107 031c 	add.w	r3, r7, #28
 8006414:	2200      	movs	r2, #0
 8006416:	601a      	str	r2, [r3, #0]
 8006418:	605a      	str	r2, [r3, #4]
 800641a:	609a      	str	r2, [r3, #8]
 800641c:	60da      	str	r2, [r3, #12]
 800641e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a43      	ldr	r2, [pc, #268]	; (8006534 <HAL_TIM_Base_MspInit+0x12c>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d130      	bne.n	800648c <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800642a:	4b43      	ldr	r3, [pc, #268]	; (8006538 <HAL_TIM_Base_MspInit+0x130>)
 800642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642e:	4a42      	ldr	r2, [pc, #264]	; (8006538 <HAL_TIM_Base_MspInit+0x130>)
 8006430:	f043 0302 	orr.w	r3, r3, #2
 8006434:	6413      	str	r3, [r2, #64]	; 0x40
 8006436:	4b40      	ldr	r3, [pc, #256]	; (8006538 <HAL_TIM_Base_MspInit+0x130>)
 8006438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643a:	f003 0302 	and.w	r3, r3, #2
 800643e:	61bb      	str	r3, [r7, #24]
 8006440:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006442:	4b3d      	ldr	r3, [pc, #244]	; (8006538 <HAL_TIM_Base_MspInit+0x130>)
 8006444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006446:	4a3c      	ldr	r2, [pc, #240]	; (8006538 <HAL_TIM_Base_MspInit+0x130>)
 8006448:	f043 0301 	orr.w	r3, r3, #1
 800644c:	6313      	str	r3, [r2, #48]	; 0x30
 800644e:	4b3a      	ldr	r3, [pc, #232]	; (8006538 <HAL_TIM_Base_MspInit+0x130>)
 8006450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	617b      	str	r3, [r7, #20]
 8006458:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = VSS2_Pin;
 800645a:	2340      	movs	r3, #64	; 0x40
 800645c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800645e:	2302      	movs	r3, #2
 8006460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006462:	2300      	movs	r3, #0
 8006464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006466:	2300      	movs	r3, #0
 8006468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800646a:	2302      	movs	r3, #2
 800646c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VSS2_GPIO_Port, &GPIO_InitStruct);
 800646e:	f107 031c 	add.w	r3, r7, #28
 8006472:	4619      	mov	r1, r3
 8006474:	4831      	ldr	r0, [pc, #196]	; (800653c <HAL_TIM_Base_MspInit+0x134>)
 8006476:	f002 f829 	bl	80084cc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800647a:	2200      	movs	r2, #0
 800647c:	2101      	movs	r1, #1
 800647e:	201d      	movs	r0, #29
 8006480:	f001 fbd7 	bl	8007c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006484:	201d      	movs	r0, #29
 8006486:	f001 fbf0 	bl	8007c6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800648a:	e04f      	b.n	800652c <HAL_TIM_Base_MspInit+0x124>
  else if(tim_baseHandle->Instance==TIM4)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a2b      	ldr	r2, [pc, #172]	; (8006540 <HAL_TIM_Base_MspInit+0x138>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d131      	bne.n	80064fa <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006496:	4b28      	ldr	r3, [pc, #160]	; (8006538 <HAL_TIM_Base_MspInit+0x130>)
 8006498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649a:	4a27      	ldr	r2, [pc, #156]	; (8006538 <HAL_TIM_Base_MspInit+0x130>)
 800649c:	f043 0304 	orr.w	r3, r3, #4
 80064a0:	6413      	str	r3, [r2, #64]	; 0x40
 80064a2:	4b25      	ldr	r3, [pc, #148]	; (8006538 <HAL_TIM_Base_MspInit+0x130>)
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	f003 0304 	and.w	r3, r3, #4
 80064aa:	613b      	str	r3, [r7, #16]
 80064ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80064ae:	4b22      	ldr	r3, [pc, #136]	; (8006538 <HAL_TIM_Base_MspInit+0x130>)
 80064b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b2:	4a21      	ldr	r2, [pc, #132]	; (8006538 <HAL_TIM_Base_MspInit+0x130>)
 80064b4:	f043 0308 	orr.w	r3, r3, #8
 80064b8:	6313      	str	r3, [r2, #48]	; 0x30
 80064ba:	4b1f      	ldr	r3, [pc, #124]	; (8006538 <HAL_TIM_Base_MspInit+0x130>)
 80064bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064be:	f003 0308 	and.w	r3, r3, #8
 80064c2:	60fb      	str	r3, [r7, #12]
 80064c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VSS1_Pin;
 80064c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064cc:	2302      	movs	r3, #2
 80064ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064d0:	2300      	movs	r3, #0
 80064d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064d4:	2300      	movs	r3, #0
 80064d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80064d8:	2302      	movs	r3, #2
 80064da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VSS1_GPIO_Port, &GPIO_InitStruct);
 80064dc:	f107 031c 	add.w	r3, r7, #28
 80064e0:	4619      	mov	r1, r3
 80064e2:	4818      	ldr	r0, [pc, #96]	; (8006544 <HAL_TIM_Base_MspInit+0x13c>)
 80064e4:	f001 fff2 	bl	80084cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80064e8:	2200      	movs	r2, #0
 80064ea:	2101      	movs	r1, #1
 80064ec:	201e      	movs	r0, #30
 80064ee:	f001 fba0 	bl	8007c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80064f2:	201e      	movs	r0, #30
 80064f4:	f001 fbb9 	bl	8007c6a <HAL_NVIC_EnableIRQ>
}
 80064f8:	e018      	b.n	800652c <HAL_TIM_Base_MspInit+0x124>
  else if(tim_baseHandle->Instance==TIM14)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a12      	ldr	r2, [pc, #72]	; (8006548 <HAL_TIM_Base_MspInit+0x140>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d113      	bne.n	800652c <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8006504:	4b0c      	ldr	r3, [pc, #48]	; (8006538 <HAL_TIM_Base_MspInit+0x130>)
 8006506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006508:	4a0b      	ldr	r2, [pc, #44]	; (8006538 <HAL_TIM_Base_MspInit+0x130>)
 800650a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800650e:	6413      	str	r3, [r2, #64]	; 0x40
 8006510:	4b09      	ldr	r3, [pc, #36]	; (8006538 <HAL_TIM_Base_MspInit+0x130>)
 8006512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006518:	60bb      	str	r3, [r7, #8]
 800651a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 800651c:	2200      	movs	r2, #0
 800651e:	2101      	movs	r1, #1
 8006520:	202d      	movs	r0, #45	; 0x2d
 8006522:	f001 fb86 	bl	8007c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8006526:	202d      	movs	r0, #45	; 0x2d
 8006528:	f001 fb9f 	bl	8007c6a <HAL_NVIC_EnableIRQ>
}
 800652c:	bf00      	nop
 800652e:	3730      	adds	r7, #48	; 0x30
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	40000400 	.word	0x40000400
 8006538:	40023800 	.word	0x40023800
 800653c:	40020000 	.word	0x40020000
 8006540:	40000800 	.word	0x40000800
 8006544:	40020c00 	.word	0x40020c00
 8006548:	40002000 	.word	0x40002000

0800654c <MX_UART7_Init>:
UART_HandleTypeDef huart7;
UART_HandleTypeDef huart3;

/* UART7 init function */
void MX_UART7_Init(void)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8006550:	4b16      	ldr	r3, [pc, #88]	; (80065ac <MX_UART7_Init+0x60>)
 8006552:	4a17      	ldr	r2, [pc, #92]	; (80065b0 <MX_UART7_Init+0x64>)
 8006554:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8006556:	4b15      	ldr	r3, [pc, #84]	; (80065ac <MX_UART7_Init+0x60>)
 8006558:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800655c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800655e:	4b13      	ldr	r3, [pc, #76]	; (80065ac <MX_UART7_Init+0x60>)
 8006560:	2200      	movs	r2, #0
 8006562:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8006564:	4b11      	ldr	r3, [pc, #68]	; (80065ac <MX_UART7_Init+0x60>)
 8006566:	2200      	movs	r2, #0
 8006568:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800656a:	4b10      	ldr	r3, [pc, #64]	; (80065ac <MX_UART7_Init+0x60>)
 800656c:	2200      	movs	r2, #0
 800656e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8006570:	4b0e      	ldr	r3, [pc, #56]	; (80065ac <MX_UART7_Init+0x60>)
 8006572:	220c      	movs	r2, #12
 8006574:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006576:	4b0d      	ldr	r3, [pc, #52]	; (80065ac <MX_UART7_Init+0x60>)
 8006578:	2200      	movs	r2, #0
 800657a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800657c:	4b0b      	ldr	r3, [pc, #44]	; (80065ac <MX_UART7_Init+0x60>)
 800657e:	2200      	movs	r2, #0
 8006580:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006582:	4b0a      	ldr	r3, [pc, #40]	; (80065ac <MX_UART7_Init+0x60>)
 8006584:	2200      	movs	r2, #0
 8006586:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8006588:	4b08      	ldr	r3, [pc, #32]	; (80065ac <MX_UART7_Init+0x60>)
 800658a:	2210      	movs	r2, #16
 800658c:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800658e:	4b07      	ldr	r3, [pc, #28]	; (80065ac <MX_UART7_Init+0x60>)
 8006590:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006594:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8006596:	4805      	ldr	r0, [pc, #20]	; (80065ac <MX_UART7_Init+0x60>)
 8006598:	f007 fc1a 	bl	800ddd0 <HAL_UART_Init>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <MX_UART7_Init+0x5a>
  {
    Error_Handler();
 80065a2:	f7fe ff69 	bl	8005478 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80065a6:	bf00      	nop
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	20006480 	.word	0x20006480
 80065b0:	40007800 	.word	0x40007800

080065b4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80065b8:	4b16      	ldr	r3, [pc, #88]	; (8006614 <MX_USART3_UART_Init+0x60>)
 80065ba:	4a17      	ldr	r2, [pc, #92]	; (8006618 <MX_USART3_UART_Init+0x64>)
 80065bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57000;
 80065be:	4b15      	ldr	r3, [pc, #84]	; (8006614 <MX_USART3_UART_Init+0x60>)
 80065c0:	f64d 62a8 	movw	r2, #57000	; 0xdea8
 80065c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80065c6:	4b13      	ldr	r3, [pc, #76]	; (8006614 <MX_USART3_UART_Init+0x60>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80065cc:	4b11      	ldr	r3, [pc, #68]	; (8006614 <MX_USART3_UART_Init+0x60>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80065d2:	4b10      	ldr	r3, [pc, #64]	; (8006614 <MX_USART3_UART_Init+0x60>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80065d8:	4b0e      	ldr	r3, [pc, #56]	; (8006614 <MX_USART3_UART_Init+0x60>)
 80065da:	220c      	movs	r2, #12
 80065dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80065de:	4b0d      	ldr	r3, [pc, #52]	; (8006614 <MX_USART3_UART_Init+0x60>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80065e4:	4b0b      	ldr	r3, [pc, #44]	; (8006614 <MX_USART3_UART_Init+0x60>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80065ea:	4b0a      	ldr	r3, [pc, #40]	; (8006614 <MX_USART3_UART_Init+0x60>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80065f0:	4b08      	ldr	r3, [pc, #32]	; (8006614 <MX_USART3_UART_Init+0x60>)
 80065f2:	2210      	movs	r2, #16
 80065f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80065f6:	4b07      	ldr	r3, [pc, #28]	; (8006614 <MX_USART3_UART_Init+0x60>)
 80065f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80065fc:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80065fe:	4805      	ldr	r0, [pc, #20]	; (8006614 <MX_USART3_UART_Init+0x60>)
 8006600:	f007 fbe6 	bl	800ddd0 <HAL_UART_Init>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 800660a:	f7fe ff35 	bl	8005478 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800660e:	bf00      	nop
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	20006504 	.word	0x20006504
 8006618:	40004800 	.word	0x40004800

0800661c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b08c      	sub	sp, #48	; 0x30
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006624:	f107 031c 	add.w	r3, r7, #28
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	605a      	str	r2, [r3, #4]
 800662e:	609a      	str	r2, [r3, #8]
 8006630:	60da      	str	r2, [r3, #12]
 8006632:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a36      	ldr	r2, [pc, #216]	; (8006714 <HAL_UART_MspInit+0xf8>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d130      	bne.n	80066a0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800663e:	4b36      	ldr	r3, [pc, #216]	; (8006718 <HAL_UART_MspInit+0xfc>)
 8006640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006642:	4a35      	ldr	r2, [pc, #212]	; (8006718 <HAL_UART_MspInit+0xfc>)
 8006644:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006648:	6413      	str	r3, [r2, #64]	; 0x40
 800664a:	4b33      	ldr	r3, [pc, #204]	; (8006718 <HAL_UART_MspInit+0xfc>)
 800664c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006652:	61bb      	str	r3, [r7, #24]
 8006654:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006656:	4b30      	ldr	r3, [pc, #192]	; (8006718 <HAL_UART_MspInit+0xfc>)
 8006658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665a:	4a2f      	ldr	r2, [pc, #188]	; (8006718 <HAL_UART_MspInit+0xfc>)
 800665c:	f043 0320 	orr.w	r3, r3, #32
 8006660:	6313      	str	r3, [r2, #48]	; 0x30
 8006662:	4b2d      	ldr	r3, [pc, #180]	; (8006718 <HAL_UART_MspInit+0xfc>)
 8006664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006666:	f003 0320 	and.w	r3, r3, #32
 800666a:	617b      	str	r3, [r7, #20]
 800666c:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 800666e:	23c0      	movs	r3, #192	; 0xc0
 8006670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006672:	2302      	movs	r3, #2
 8006674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006676:	2300      	movs	r3, #0
 8006678:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800667a:	2303      	movs	r3, #3
 800667c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800667e:	2308      	movs	r3, #8
 8006680:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006682:	f107 031c 	add.w	r3, r7, #28
 8006686:	4619      	mov	r1, r3
 8006688:	4824      	ldr	r0, [pc, #144]	; (800671c <HAL_UART_MspInit+0x100>)
 800668a:	f001 ff1f 	bl	80084cc <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 1, 0);
 800668e:	2200      	movs	r2, #0
 8006690:	2101      	movs	r1, #1
 8006692:	2052      	movs	r0, #82	; 0x52
 8006694:	f001 facd 	bl	8007c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8006698:	2052      	movs	r0, #82	; 0x52
 800669a:	f001 fae6 	bl	8007c6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800669e:	e035      	b.n	800670c <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a1e      	ldr	r2, [pc, #120]	; (8006720 <HAL_UART_MspInit+0x104>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d130      	bne.n	800670c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80066aa:	4b1b      	ldr	r3, [pc, #108]	; (8006718 <HAL_UART_MspInit+0xfc>)
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	4a1a      	ldr	r2, [pc, #104]	; (8006718 <HAL_UART_MspInit+0xfc>)
 80066b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066b4:	6413      	str	r3, [r2, #64]	; 0x40
 80066b6:	4b18      	ldr	r3, [pc, #96]	; (8006718 <HAL_UART_MspInit+0xfc>)
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066be:	613b      	str	r3, [r7, #16]
 80066c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066c2:	4b15      	ldr	r3, [pc, #84]	; (8006718 <HAL_UART_MspInit+0xfc>)
 80066c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c6:	4a14      	ldr	r2, [pc, #80]	; (8006718 <HAL_UART_MspInit+0xfc>)
 80066c8:	f043 0302 	orr.w	r3, r3, #2
 80066cc:	6313      	str	r3, [r2, #48]	; 0x30
 80066ce:	4b12      	ldr	r3, [pc, #72]	; (8006718 <HAL_UART_MspInit+0xfc>)
 80066d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	60fb      	str	r3, [r7, #12]
 80066d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART_DEBUG_TX_Pin|UART_DEBUG_RX_Pin;
 80066da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80066de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066e0:	2302      	movs	r3, #2
 80066e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066e4:	2300      	movs	r3, #0
 80066e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066e8:	2303      	movs	r3, #3
 80066ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80066ec:	2307      	movs	r3, #7
 80066ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066f0:	f107 031c 	add.w	r3, r7, #28
 80066f4:	4619      	mov	r1, r3
 80066f6:	480b      	ldr	r0, [pc, #44]	; (8006724 <HAL_UART_MspInit+0x108>)
 80066f8:	f001 fee8 	bl	80084cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 80066fc:	2200      	movs	r2, #0
 80066fe:	2101      	movs	r1, #1
 8006700:	2027      	movs	r0, #39	; 0x27
 8006702:	f001 fa96 	bl	8007c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006706:	2027      	movs	r0, #39	; 0x27
 8006708:	f001 faaf 	bl	8007c6a <HAL_NVIC_EnableIRQ>
}
 800670c:	bf00      	nop
 800670e:	3730      	adds	r7, #48	; 0x30
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	40007800 	.word	0x40007800
 8006718:	40023800 	.word	0x40023800
 800671c:	40021400 	.word	0x40021400
 8006720:	40004800 	.word	0x40004800
 8006724:	40020400 	.word	0x40020400

08006728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006760 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800672c:	480d      	ldr	r0, [pc, #52]	; (8006764 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800672e:	490e      	ldr	r1, [pc, #56]	; (8006768 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006730:	4a0e      	ldr	r2, [pc, #56]	; (800676c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006734:	e002      	b.n	800673c <LoopCopyDataInit>

08006736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800673a:	3304      	adds	r3, #4

0800673c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800673c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800673e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006740:	d3f9      	bcc.n	8006736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006742:	4a0b      	ldr	r2, [pc, #44]	; (8006770 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006744:	4c0b      	ldr	r4, [pc, #44]	; (8006774 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006748:	e001      	b.n	800674e <LoopFillZerobss>

0800674a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800674a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800674c:	3204      	adds	r2, #4

0800674e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800674e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006750:	d3fb      	bcc.n	800674a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006752:	f7ff fd03 	bl	800615c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006756:	f00c f8e3 	bl	8012920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800675a:	f7fe fd43 	bl	80051e4 <main>
  bx  lr    
 800675e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006760:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8006764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006768:	20000e68 	.word	0x20000e68
  ldr r2, =_sidata
 800676c:	0801b074 	.word	0x0801b074
  ldr r2, =_sbss
 8006770:	20000e68 	.word	0x20000e68
  ldr r4, =_ebss
 8006774:	20006640 	.word	0x20006640

08006778 <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006778:	e7fe      	b.n	8006778 <CAN1_RX1_IRQHandler>
	...

0800677c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8006780:	4b08      	ldr	r3, [pc, #32]	; (80067a4 <HAL_Init+0x28>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a07      	ldr	r2, [pc, #28]	; (80067a4 <HAL_Init+0x28>)
 8006786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800678a:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800678c:	2003      	movs	r0, #3
 800678e:	f001 fa45 	bl	8007c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006792:	2000      	movs	r0, #0
 8006794:	f000 f808 	bl	80067a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006798:	f7ff fc1a 	bl	8005fd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	40023c00 	.word	0x40023c00

080067a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80067b0:	4b12      	ldr	r3, [pc, #72]	; (80067fc <HAL_InitTick+0x54>)
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	4b12      	ldr	r3, [pc, #72]	; (8006800 <HAL_InitTick+0x58>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	4619      	mov	r1, r3
 80067ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067be:	fbb3 f3f1 	udiv	r3, r3, r1
 80067c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c6:	4618      	mov	r0, r3
 80067c8:	f001 fa5d 	bl	8007c86 <HAL_SYSTICK_Config>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e00e      	b.n	80067f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2b0f      	cmp	r3, #15
 80067da:	d80a      	bhi.n	80067f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80067dc:	2200      	movs	r2, #0
 80067de:	6879      	ldr	r1, [r7, #4]
 80067e0:	f04f 30ff 	mov.w	r0, #4294967295
 80067e4:	f001 fa25 	bl	8007c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80067e8:	4a06      	ldr	r2, [pc, #24]	; (8006804 <HAL_InitTick+0x5c>)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	e000      	b.n	80067f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	200004b0 	.word	0x200004b0
 8006800:	200004b8 	.word	0x200004b8
 8006804:	200004b4 	.word	0x200004b4

08006808 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006808:	b480      	push	{r7}
 800680a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800680c:	4b06      	ldr	r3, [pc, #24]	; (8006828 <HAL_IncTick+0x20>)
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	461a      	mov	r2, r3
 8006812:	4b06      	ldr	r3, [pc, #24]	; (800682c <HAL_IncTick+0x24>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4413      	add	r3, r2
 8006818:	4a04      	ldr	r2, [pc, #16]	; (800682c <HAL_IncTick+0x24>)
 800681a:	6013      	str	r3, [r2, #0]
}
 800681c:	bf00      	nop
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	200004b8 	.word	0x200004b8
 800682c:	20006588 	.word	0x20006588

08006830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006830:	b480      	push	{r7}
 8006832:	af00      	add	r7, sp, #0
  return uwTick;
 8006834:	4b03      	ldr	r3, [pc, #12]	; (8006844 <HAL_GetTick+0x14>)
 8006836:	681b      	ldr	r3, [r3, #0]
}
 8006838:	4618      	mov	r0, r3
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	20006588 	.word	0x20006588

08006848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006850:	f7ff ffee 	bl	8006830 <HAL_GetTick>
 8006854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006860:	d005      	beq.n	800686e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006862:	4b0a      	ldr	r3, [pc, #40]	; (800688c <HAL_Delay+0x44>)
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4413      	add	r3, r2
 800686c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800686e:	bf00      	nop
 8006870:	f7ff ffde 	bl	8006830 <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	429a      	cmp	r2, r3
 800687e:	d8f7      	bhi.n	8006870 <HAL_Delay+0x28>
  {
  }
}
 8006880:	bf00      	nop
 8006882:	bf00      	nop
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	200004b8 	.word	0x200004b8

08006890 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006898:	2300      	movs	r3, #0
 800689a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e031      	b.n	800690a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d109      	bne.n	80068c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7fd fc3c 	bl	800412c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	f003 0310 	and.w	r3, r3, #16
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d116      	bne.n	80068fc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068d2:	4b10      	ldr	r3, [pc, #64]	; (8006914 <HAL_ADC_Init+0x84>)
 80068d4:	4013      	ands	r3, r2
 80068d6:	f043 0202 	orr.w	r2, r3, #2
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fa9e 	bl	8006e20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	f023 0303 	bic.w	r3, r3, #3
 80068f2:	f043 0201 	orr.w	r2, r3, #1
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	641a      	str	r2, [r3, #64]	; 0x40
 80068fa:	e001      	b.n	8006900 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006908:	7bfb      	ldrb	r3, [r7, #15]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	ffffeefd 	.word	0xffffeefd

08006918 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b086      	sub	sp, #24
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8006920:	2300      	movs	r3, #0
 8006922:	617b      	str	r3, [r7, #20]
 8006924:	2300      	movs	r3, #0
 8006926:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f003 0302 	and.w	r3, r3, #2
 800693e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	f003 0320 	and.w	r3, r3, #32
 8006946:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d049      	beq.n	80069e2 <HAL_ADC_IRQHandler+0xca>
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d046      	beq.n	80069e2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006958:	f003 0310 	and.w	r3, r3, #16
 800695c:	2b00      	cmp	r3, #0
 800695e:	d105      	bne.n	800696c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006964:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d12b      	bne.n	80069d2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800697e:	2b00      	cmp	r3, #0
 8006980:	d127      	bne.n	80069d2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006988:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800698c:	2b00      	cmp	r3, #0
 800698e:	d006      	beq.n	800699e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800699a:	2b00      	cmp	r3, #0
 800699c:	d119      	bne.n	80069d2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f022 0220 	bic.w	r2, r2, #32
 80069ac:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d105      	bne.n	80069d2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	f043 0201 	orr.w	r2, r3, #1
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f8b0 	bl	8006b38 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f06f 0212 	mvn.w	r2, #18
 80069e0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f003 0304 	and.w	r3, r3, #4
 80069e8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d057      	beq.n	8006aa8 <HAL_ADC_IRQHandler+0x190>
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d054      	beq.n	8006aa8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a02:	f003 0310 	and.w	r3, r3, #16
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d105      	bne.n	8006a16 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d139      	bne.n	8006a98 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d006      	beq.n	8006a40 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d12b      	bne.n	8006a98 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d124      	bne.n	8006a98 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d11d      	bne.n	8006a98 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d119      	bne.n	8006a98 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a72:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a78:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d105      	bne.n	8006a98 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a90:	f043 0201 	orr.w	r2, r3, #1
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fabb 	bl	8007014 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f06f 020c 	mvn.w	r2, #12
 8006aa6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d017      	beq.n	8006aee <HAL_ADC_IRQHandler+0x1d6>
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d014      	beq.n	8006aee <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d10d      	bne.n	8006aee <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f834 	bl	8006b4c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f06f 0201 	mvn.w	r2, #1
 8006aec:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f003 0320 	and.w	r3, r3, #32
 8006af4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006afc:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d015      	beq.n	8006b30 <HAL_ADC_IRQHandler+0x218>
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d012      	beq.n	8006b30 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b0e:	f043 0202 	orr.w	r2, r3, #2
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f06f 0220 	mvn.w	r2, #32
 8006b1e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f81d 	bl	8006b60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f06f 0220 	mvn.w	r2, #32
 8006b2e:	601a      	str	r2, [r3, #0]
  }
}
 8006b30:	bf00      	nop
 8006b32:	3718      	adds	r7, #24
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d101      	bne.n	8006b90 <HAL_ADC_ConfigChannel+0x1c>
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	e136      	b.n	8006dfe <HAL_ADC_ConfigChannel+0x28a>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2b09      	cmp	r3, #9
 8006b9e:	d93a      	bls.n	8006c16 <HAL_ADC_ConfigChannel+0xa2>
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ba8:	d035      	beq.n	8006c16 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68d9      	ldr	r1, [r3, #12]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	4613      	mov	r3, r2
 8006bba:	005b      	lsls	r3, r3, #1
 8006bbc:	4413      	add	r3, r2
 8006bbe:	3b1e      	subs	r3, #30
 8006bc0:	2207      	movs	r2, #7
 8006bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc6:	43da      	mvns	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	400a      	ands	r2, r1
 8006bce:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a8d      	ldr	r2, [pc, #564]	; (8006e0c <HAL_ADC_ConfigChannel+0x298>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d10a      	bne.n	8006bf0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68d9      	ldr	r1, [r3, #12]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	061a      	lsls	r2, r3, #24
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006bee:	e035      	b.n	8006c5c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68d9      	ldr	r1, [r3, #12]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	689a      	ldr	r2, [r3, #8]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	4618      	mov	r0, r3
 8006c02:	4603      	mov	r3, r0
 8006c04:	005b      	lsls	r3, r3, #1
 8006c06:	4403      	add	r3, r0
 8006c08:	3b1e      	subs	r3, #30
 8006c0a:	409a      	lsls	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	430a      	orrs	r2, r1
 8006c12:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006c14:	e022      	b.n	8006c5c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	6919      	ldr	r1, [r3, #16]
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	461a      	mov	r2, r3
 8006c24:	4613      	mov	r3, r2
 8006c26:	005b      	lsls	r3, r3, #1
 8006c28:	4413      	add	r3, r2
 8006c2a:	2207      	movs	r2, #7
 8006c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c30:	43da      	mvns	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	400a      	ands	r2, r1
 8006c38:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	6919      	ldr	r1, [r3, #16]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	689a      	ldr	r2, [r3, #8]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	005b      	lsls	r3, r3, #1
 8006c50:	4403      	add	r3, r0
 8006c52:	409a      	lsls	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	2b06      	cmp	r3, #6
 8006c62:	d824      	bhi.n	8006cae <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	685a      	ldr	r2, [r3, #4]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	3b05      	subs	r3, #5
 8006c76:	221f      	movs	r2, #31
 8006c78:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7c:	43da      	mvns	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	400a      	ands	r2, r1
 8006c84:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	4618      	mov	r0, r3
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	685a      	ldr	r2, [r3, #4]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	3b05      	subs	r3, #5
 8006ca0:	fa00 f203 	lsl.w	r2, r0, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	635a      	str	r2, [r3, #52]	; 0x34
 8006cac:	e04c      	b.n	8006d48 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	2b0c      	cmp	r3, #12
 8006cb4:	d824      	bhi.n	8006d00 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	3b23      	subs	r3, #35	; 0x23
 8006cc8:	221f      	movs	r2, #31
 8006cca:	fa02 f303 	lsl.w	r3, r2, r3
 8006cce:	43da      	mvns	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	400a      	ands	r2, r1
 8006cd6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	4613      	mov	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	3b23      	subs	r3, #35	; 0x23
 8006cf2:	fa00 f203 	lsl.w	r2, r0, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	631a      	str	r2, [r3, #48]	; 0x30
 8006cfe:	e023      	b.n	8006d48 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685a      	ldr	r2, [r3, #4]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	3b41      	subs	r3, #65	; 0x41
 8006d12:	221f      	movs	r2, #31
 8006d14:	fa02 f303 	lsl.w	r3, r2, r3
 8006d18:	43da      	mvns	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	400a      	ands	r2, r1
 8006d20:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	4618      	mov	r0, r3
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	4613      	mov	r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	4413      	add	r3, r2
 8006d3a:	3b41      	subs	r3, #65	; 0x41
 8006d3c:	fa00 f203 	lsl.w	r2, r0, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	430a      	orrs	r2, r1
 8006d46:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a30      	ldr	r2, [pc, #192]	; (8006e10 <HAL_ADC_ConfigChannel+0x29c>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d10a      	bne.n	8006d68 <HAL_ADC_ConfigChannel+0x1f4>
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d5a:	d105      	bne.n	8006d68 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006d5c:	4b2d      	ldr	r3, [pc, #180]	; (8006e14 <HAL_ADC_ConfigChannel+0x2a0>)
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	4a2c      	ldr	r2, [pc, #176]	; (8006e14 <HAL_ADC_ConfigChannel+0x2a0>)
 8006d62:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006d66:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a28      	ldr	r2, [pc, #160]	; (8006e10 <HAL_ADC_ConfigChannel+0x29c>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d10f      	bne.n	8006d92 <HAL_ADC_ConfigChannel+0x21e>
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b12      	cmp	r3, #18
 8006d78:	d10b      	bne.n	8006d92 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8006d7a:	4b26      	ldr	r3, [pc, #152]	; (8006e14 <HAL_ADC_ConfigChannel+0x2a0>)
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	4a25      	ldr	r2, [pc, #148]	; (8006e14 <HAL_ADC_ConfigChannel+0x2a0>)
 8006d80:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006d84:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8006d86:	4b23      	ldr	r3, [pc, #140]	; (8006e14 <HAL_ADC_ConfigChannel+0x2a0>)
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	4a22      	ldr	r2, [pc, #136]	; (8006e14 <HAL_ADC_ConfigChannel+0x2a0>)
 8006d8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006d90:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a1e      	ldr	r2, [pc, #120]	; (8006e10 <HAL_ADC_ConfigChannel+0x29c>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d12b      	bne.n	8006df4 <HAL_ADC_ConfigChannel+0x280>
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a1a      	ldr	r2, [pc, #104]	; (8006e0c <HAL_ADC_ConfigChannel+0x298>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d003      	beq.n	8006dae <HAL_ADC_ConfigChannel+0x23a>
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b11      	cmp	r3, #17
 8006dac:	d122      	bne.n	8006df4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8006dae:	4b19      	ldr	r3, [pc, #100]	; (8006e14 <HAL_ADC_ConfigChannel+0x2a0>)
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	4a18      	ldr	r2, [pc, #96]	; (8006e14 <HAL_ADC_ConfigChannel+0x2a0>)
 8006db4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006db8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006dba:	4b16      	ldr	r3, [pc, #88]	; (8006e14 <HAL_ADC_ConfigChannel+0x2a0>)
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	4a15      	ldr	r2, [pc, #84]	; (8006e14 <HAL_ADC_ConfigChannel+0x2a0>)
 8006dc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006dc4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a10      	ldr	r2, [pc, #64]	; (8006e0c <HAL_ADC_ConfigChannel+0x298>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d111      	bne.n	8006df4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006dd0:	4b11      	ldr	r3, [pc, #68]	; (8006e18 <HAL_ADC_ConfigChannel+0x2a4>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a11      	ldr	r2, [pc, #68]	; (8006e1c <HAL_ADC_ConfigChannel+0x2a8>)
 8006dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dda:	0c9a      	lsrs	r2, r3, #18
 8006ddc:	4613      	mov	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006de6:	e002      	b.n	8006dee <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	3b01      	subs	r3, #1
 8006dec:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1f9      	bne.n	8006de8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	10000012 	.word	0x10000012
 8006e10:	40012000 	.word	0x40012000
 8006e14:	40012300 	.word	0x40012300
 8006e18:	200004b0 	.word	0x200004b0
 8006e1c:	431bde83 	.word	0x431bde83

08006e20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006e28:	4b78      	ldr	r3, [pc, #480]	; (800700c <ADC_Init+0x1ec>)
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	4a77      	ldr	r2, [pc, #476]	; (800700c <ADC_Init+0x1ec>)
 8006e2e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006e32:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006e34:	4b75      	ldr	r3, [pc, #468]	; (800700c <ADC_Init+0x1ec>)
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	4973      	ldr	r1, [pc, #460]	; (800700c <ADC_Init+0x1ec>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6859      	ldr	r1, [r3, #4]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	021a      	lsls	r2, r3, #8
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006e74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6859      	ldr	r1, [r3, #4]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	430a      	orrs	r2, r1
 8006e86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	689a      	ldr	r2, [r3, #8]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6899      	ldr	r1, [r3, #8]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	68da      	ldr	r2, [r3, #12]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eae:	4a58      	ldr	r2, [pc, #352]	; (8007010 <ADC_Init+0x1f0>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d022      	beq.n	8006efa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	689a      	ldr	r2, [r3, #8]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006ec2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6899      	ldr	r1, [r3, #8]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	689a      	ldr	r2, [r3, #8]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006ee4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6899      	ldr	r1, [r3, #8]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	609a      	str	r2, [r3, #8]
 8006ef8:	e00f      	b.n	8006f1a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	689a      	ldr	r2, [r3, #8]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006f08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	689a      	ldr	r2, [r3, #8]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006f18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	689a      	ldr	r2, [r3, #8]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f022 0202 	bic.w	r2, r2, #2
 8006f28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	6899      	ldr	r1, [r3, #8]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	699b      	ldr	r3, [r3, #24]
 8006f34:	005a      	lsls	r2, r3, #1
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d01b      	beq.n	8006f80 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006f66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6859      	ldr	r1, [r3, #4]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	3b01      	subs	r3, #1
 8006f74:	035a      	lsls	r2, r3, #13
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	605a      	str	r2, [r3, #4]
 8006f7e:	e007      	b.n	8006f90 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	685a      	ldr	r2, [r3, #4]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	69db      	ldr	r3, [r3, #28]
 8006faa:	3b01      	subs	r3, #1
 8006fac:	051a      	lsls	r2, r3, #20
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689a      	ldr	r2, [r3, #8]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006fc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6899      	ldr	r1, [r3, #8]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006fd2:	025a      	lsls	r2, r3, #9
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689a      	ldr	r2, [r3, #8]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6899      	ldr	r1, [r3, #8]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	029a      	lsls	r2, r3, #10
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	609a      	str	r2, [r3, #8]
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	40012300 	.word	0x40012300
 8007010:	0f000001 	.word	0x0f000001

08007014 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e0ed      	b.n	8007216 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d102      	bne.n	800704c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7fd fa04 	bl	8004454 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f042 0201 	orr.w	r2, r2, #1
 800705a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800705c:	f7ff fbe8 	bl	8006830 <HAL_GetTick>
 8007060:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007062:	e012      	b.n	800708a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007064:	f7ff fbe4 	bl	8006830 <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	2b0a      	cmp	r3, #10
 8007070:	d90b      	bls.n	800708a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007076:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2205      	movs	r2, #5
 8007082:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e0c5      	b.n	8007216 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	2b00      	cmp	r3, #0
 8007096:	d0e5      	beq.n	8007064 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f022 0202 	bic.w	r2, r2, #2
 80070a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80070a8:	f7ff fbc2 	bl	8006830 <HAL_GetTick>
 80070ac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80070ae:	e012      	b.n	80070d6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80070b0:	f7ff fbbe 	bl	8006830 <HAL_GetTick>
 80070b4:	4602      	mov	r2, r0
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	2b0a      	cmp	r3, #10
 80070bc:	d90b      	bls.n	80070d6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2205      	movs	r2, #5
 80070ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e09f      	b.n	8007216 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f003 0302 	and.w	r3, r3, #2
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1e5      	bne.n	80070b0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	7e1b      	ldrb	r3, [r3, #24]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d108      	bne.n	80070fe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80070fa:	601a      	str	r2, [r3, #0]
 80070fc:	e007      	b.n	800710e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800710c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	7e5b      	ldrb	r3, [r3, #25]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d108      	bne.n	8007128 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	e007      	b.n	8007138 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007136:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	7e9b      	ldrb	r3, [r3, #26]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d108      	bne.n	8007152 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f042 0220 	orr.w	r2, r2, #32
 800714e:	601a      	str	r2, [r3, #0]
 8007150:	e007      	b.n	8007162 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 0220 	bic.w	r2, r2, #32
 8007160:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	7edb      	ldrb	r3, [r3, #27]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d108      	bne.n	800717c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f022 0210 	bic.w	r2, r2, #16
 8007178:	601a      	str	r2, [r3, #0]
 800717a:	e007      	b.n	800718c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f042 0210 	orr.w	r2, r2, #16
 800718a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	7f1b      	ldrb	r3, [r3, #28]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d108      	bne.n	80071a6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f042 0208 	orr.w	r2, r2, #8
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	e007      	b.n	80071b6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f022 0208 	bic.w	r2, r2, #8
 80071b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	7f5b      	ldrb	r3, [r3, #29]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d108      	bne.n	80071d0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f042 0204 	orr.w	r2, r2, #4
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	e007      	b.n	80071e0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f022 0204 	bic.w	r2, r2, #4
 80071de:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	431a      	orrs	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	431a      	orrs	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	ea42 0103 	orr.w	r1, r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	1e5a      	subs	r2, r3, #1
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
	...

08007220 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007236:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007238:	7cfb      	ldrb	r3, [r7, #19]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d003      	beq.n	8007246 <HAL_CAN_ConfigFilter+0x26>
 800723e:	7cfb      	ldrb	r3, [r7, #19]
 8007240:	2b02      	cmp	r3, #2
 8007242:	f040 80c7 	bne.w	80073d4 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a69      	ldr	r2, [pc, #420]	; (80073f0 <HAL_CAN_ConfigFilter+0x1d0>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d001      	beq.n	8007254 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8007250:	4b68      	ldr	r3, [pc, #416]	; (80073f4 <HAL_CAN_ConfigFilter+0x1d4>)
 8007252:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800725a:	f043 0201 	orr.w	r2, r3, #1
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	4a63      	ldr	r2, [pc, #396]	; (80073f4 <HAL_CAN_ConfigFilter+0x1d4>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d111      	bne.n	8007290 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007272:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	021b      	lsls	r3, r3, #8
 8007288:	431a      	orrs	r2, r3
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	695b      	ldr	r3, [r3, #20]
 8007294:	f003 031f 	and.w	r3, r3, #31
 8007298:	2201      	movs	r2, #1
 800729a:	fa02 f303 	lsl.w	r3, r2, r3
 800729e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	43db      	mvns	r3, r3
 80072aa:	401a      	ands	r2, r3
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d123      	bne.n	8007302 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	43db      	mvns	r3, r3
 80072c4:	401a      	ands	r2, r3
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80072d8:	683a      	ldr	r2, [r7, #0]
 80072da:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80072dc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	3248      	adds	r2, #72	; 0x48
 80072e2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80072f6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80072f8:	6979      	ldr	r1, [r7, #20]
 80072fa:	3348      	adds	r3, #72	; 0x48
 80072fc:	00db      	lsls	r3, r3, #3
 80072fe:	440b      	add	r3, r1
 8007300:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d122      	bne.n	8007350 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	431a      	orrs	r2, r3
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800732a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	3248      	adds	r2, #72	; 0x48
 8007330:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007344:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007346:	6979      	ldr	r1, [r7, #20]
 8007348:	3348      	adds	r3, #72	; 0x48
 800734a:	00db      	lsls	r3, r3, #3
 800734c:	440b      	add	r3, r1
 800734e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d109      	bne.n	800736c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	43db      	mvns	r3, r3
 8007362:	401a      	ands	r2, r3
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800736a:	e007      	b.n	800737c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	431a      	orrs	r2, r3
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d109      	bne.n	8007398 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	43db      	mvns	r3, r3
 800738e:	401a      	ands	r2, r3
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007396:	e007      	b.n	80073a8 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	431a      	orrs	r2, r3
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d107      	bne.n	80073c0 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	431a      	orrs	r2, r3
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80073c6:	f023 0201 	bic.w	r2, r3, #1
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80073d0:	2300      	movs	r3, #0
 80073d2:	e006      	b.n	80073e2 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
  }
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	371c      	adds	r7, #28
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	40003400 	.word	0x40003400
 80073f4:	40006400 	.word	0x40006400

080073f8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80073f8:	b480      	push	{r7}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
 8007404:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f893 3020 	ldrb.w	r3, [r3, #32]
 800740c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800740e:	7dfb      	ldrb	r3, [r7, #23]
 8007410:	2b01      	cmp	r3, #1
 8007412:	d003      	beq.n	800741c <HAL_CAN_GetRxMessage+0x24>
 8007414:	7dfb      	ldrb	r3, [r7, #23]
 8007416:	2b02      	cmp	r3, #2
 8007418:	f040 80f3 	bne.w	8007602 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10e      	bne.n	8007440 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	f003 0303 	and.w	r3, r3, #3
 800742c:	2b00      	cmp	r3, #0
 800742e:	d116      	bne.n	800745e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007434:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e0e7      	b.n	8007610 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	f003 0303 	and.w	r3, r3, #3
 800744a:	2b00      	cmp	r3, #0
 800744c:	d107      	bne.n	800745e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007452:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e0d8      	b.n	8007610 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	331b      	adds	r3, #27
 8007466:	011b      	lsls	r3, r3, #4
 8007468:	4413      	add	r3, r2
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0204 	and.w	r2, r3, #4
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10c      	bne.n	8007496 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	331b      	adds	r3, #27
 8007484:	011b      	lsls	r3, r3, #4
 8007486:	4413      	add	r3, r2
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	0d5b      	lsrs	r3, r3, #21
 800748c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	e00b      	b.n	80074ae <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	331b      	adds	r3, #27
 800749e:	011b      	lsls	r3, r3, #4
 80074a0:	4413      	add	r3, r2
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	08db      	lsrs	r3, r3, #3
 80074a6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	331b      	adds	r3, #27
 80074b6:	011b      	lsls	r3, r3, #4
 80074b8:	4413      	add	r3, r2
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0202 	and.w	r2, r3, #2
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	331b      	adds	r3, #27
 80074cc:	011b      	lsls	r3, r3, #4
 80074ce:	4413      	add	r3, r2
 80074d0:	3304      	adds	r3, #4
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 020f 	and.w	r2, r3, #15
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	331b      	adds	r3, #27
 80074e4:	011b      	lsls	r3, r3, #4
 80074e6:	4413      	add	r3, r2
 80074e8:	3304      	adds	r3, #4
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	0a1b      	lsrs	r3, r3, #8
 80074ee:	b2da      	uxtb	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	331b      	adds	r3, #27
 80074fc:	011b      	lsls	r3, r3, #4
 80074fe:	4413      	add	r3, r2
 8007500:	3304      	adds	r3, #4
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	0c1b      	lsrs	r3, r3, #16
 8007506:	b29a      	uxth	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	011b      	lsls	r3, r3, #4
 8007514:	4413      	add	r3, r2
 8007516:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	b2da      	uxtb	r2, r3
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	011b      	lsls	r3, r3, #4
 800752a:	4413      	add	r3, r2
 800752c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	0a1a      	lsrs	r2, r3, #8
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	3301      	adds	r3, #1
 8007538:	b2d2      	uxtb	r2, r2
 800753a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	011b      	lsls	r3, r3, #4
 8007544:	4413      	add	r3, r2
 8007546:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	0c1a      	lsrs	r2, r3, #16
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	3302      	adds	r3, #2
 8007552:	b2d2      	uxtb	r2, r2
 8007554:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	011b      	lsls	r3, r3, #4
 800755e:	4413      	add	r3, r2
 8007560:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	0e1a      	lsrs	r2, r3, #24
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	3303      	adds	r3, #3
 800756c:	b2d2      	uxtb	r2, r2
 800756e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	011b      	lsls	r3, r3, #4
 8007578:	4413      	add	r3, r2
 800757a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	3304      	adds	r3, #4
 8007584:	b2d2      	uxtb	r2, r2
 8007586:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	011b      	lsls	r3, r3, #4
 8007590:	4413      	add	r3, r2
 8007592:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	0a1a      	lsrs	r2, r3, #8
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	3305      	adds	r3, #5
 800759e:	b2d2      	uxtb	r2, r2
 80075a0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	011b      	lsls	r3, r3, #4
 80075aa:	4413      	add	r3, r2
 80075ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	0c1a      	lsrs	r2, r3, #16
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	3306      	adds	r3, #6
 80075b8:	b2d2      	uxtb	r2, r2
 80075ba:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	011b      	lsls	r3, r3, #4
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	0e1a      	lsrs	r2, r3, #24
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	3307      	adds	r3, #7
 80075d2:	b2d2      	uxtb	r2, r2
 80075d4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d108      	bne.n	80075ee <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68da      	ldr	r2, [r3, #12]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f042 0220 	orr.w	r2, r2, #32
 80075ea:	60da      	str	r2, [r3, #12]
 80075ec:	e007      	b.n	80075fe <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	691a      	ldr	r2, [r3, #16]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f042 0220 	orr.w	r2, r2, #32
 80075fc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80075fe:	2300      	movs	r3, #0
 8007600:	e006      	b.n	8007610 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007606:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
  }
}
 8007610:	4618      	mov	r0, r3
 8007612:	371c      	adds	r7, #28
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b08a      	sub	sp, #40	; 0x28
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007624:	2300      	movs	r3, #0
 8007626:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007658:	6a3b      	ldr	r3, [r7, #32]
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	d07c      	beq.n	800775c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	f003 0301 	and.w	r3, r3, #1
 8007668:	2b00      	cmp	r3, #0
 800766a:	d023      	beq.n	80076b4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2201      	movs	r2, #1
 8007672:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	f003 0302 	and.w	r3, r3, #2
 800767a:	2b00      	cmp	r3, #0
 800767c:	d003      	beq.n	8007686 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f983 	bl	800798a <HAL_CAN_TxMailbox0CompleteCallback>
 8007684:	e016      	b.n	80076b4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	f003 0304 	and.w	r3, r3, #4
 800768c:	2b00      	cmp	r3, #0
 800768e:	d004      	beq.n	800769a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007692:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007696:	627b      	str	r3, [r7, #36]	; 0x24
 8007698:	e00c      	b.n	80076b4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	f003 0308 	and.w	r3, r3, #8
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d004      	beq.n	80076ae <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80076a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80076aa:	627b      	str	r3, [r7, #36]	; 0x24
 80076ac:	e002      	b.n	80076b4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f989 	bl	80079c6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d024      	beq.n	8007708 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076c6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f963 	bl	800799e <HAL_CAN_TxMailbox1CompleteCallback>
 80076d8:	e016      	b.n	8007708 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d004      	beq.n	80076ee <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80076e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80076ea:	627b      	str	r3, [r7, #36]	; 0x24
 80076ec:	e00c      	b.n	8007708 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d004      	beq.n	8007702 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80076f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007700:	e002      	b.n	8007708 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f969 	bl	80079da <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d024      	beq.n	800775c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800771a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d003      	beq.n	800772e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 f943 	bl	80079b2 <HAL_CAN_TxMailbox2CompleteCallback>
 800772c:	e016      	b.n	800775c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d004      	beq.n	8007742 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800773e:	627b      	str	r3, [r7, #36]	; 0x24
 8007740:	e00c      	b.n	800775c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d004      	beq.n	8007756 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800774c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007752:	627b      	str	r3, [r7, #36]	; 0x24
 8007754:	e002      	b.n	800775c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f949 	bl	80079ee <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	f003 0308 	and.w	r3, r3, #8
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00c      	beq.n	8007780 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	f003 0310 	and.w	r3, r3, #16
 800776c:	2b00      	cmp	r3, #0
 800776e:	d007      	beq.n	8007780 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007776:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2210      	movs	r2, #16
 800777e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	f003 0304 	and.w	r3, r3, #4
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00b      	beq.n	80077a2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	f003 0308 	and.w	r3, r3, #8
 8007790:	2b00      	cmp	r3, #0
 8007792:	d006      	beq.n	80077a2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2208      	movs	r2, #8
 800779a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f930 	bl	8007a02 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80077a2:	6a3b      	ldr	r3, [r7, #32]
 80077a4:	f003 0302 	and.w	r3, r3, #2
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d009      	beq.n	80077c0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	f003 0303 	and.w	r3, r3, #3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d002      	beq.n	80077c0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7fc fefc 	bl	80045b8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80077c0:	6a3b      	ldr	r3, [r7, #32]
 80077c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00c      	beq.n	80077e4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	f003 0310 	and.w	r3, r3, #16
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d007      	beq.n	80077e4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80077d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80077da:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2210      	movs	r2, #16
 80077e2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	f003 0320 	and.w	r3, r3, #32
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00b      	beq.n	8007806 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	f003 0308 	and.w	r3, r3, #8
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d006      	beq.n	8007806 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2208      	movs	r2, #8
 80077fe:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f912 	bl	8007a2a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007806:	6a3b      	ldr	r3, [r7, #32]
 8007808:	f003 0310 	and.w	r3, r3, #16
 800780c:	2b00      	cmp	r3, #0
 800780e:	d009      	beq.n	8007824 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	f003 0303 	and.w	r3, r3, #3
 800781a:	2b00      	cmp	r3, #0
 800781c:	d002      	beq.n	8007824 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f8f9 	bl	8007a16 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007824:	6a3b      	ldr	r3, [r7, #32]
 8007826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00b      	beq.n	8007846 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	f003 0310 	and.w	r3, r3, #16
 8007834:	2b00      	cmp	r3, #0
 8007836:	d006      	beq.n	8007846 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2210      	movs	r2, #16
 800783e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f8fc 	bl	8007a3e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007846:	6a3b      	ldr	r3, [r7, #32]
 8007848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00b      	beq.n	8007868 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	f003 0308 	and.w	r3, r3, #8
 8007856:	2b00      	cmp	r3, #0
 8007858:	d006      	beq.n	8007868 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2208      	movs	r2, #8
 8007860:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f8f5 	bl	8007a52 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007868:	6a3b      	ldr	r3, [r7, #32]
 800786a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800786e:	2b00      	cmp	r3, #0
 8007870:	d07b      	beq.n	800796a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	f003 0304 	and.w	r3, r3, #4
 8007878:	2b00      	cmp	r3, #0
 800787a:	d072      	beq.n	8007962 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007882:	2b00      	cmp	r3, #0
 8007884:	d008      	beq.n	8007898 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800788c:	2b00      	cmp	r3, #0
 800788e:	d003      	beq.n	8007898 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	f043 0301 	orr.w	r3, r3, #1
 8007896:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007898:	6a3b      	ldr	r3, [r7, #32]
 800789a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d008      	beq.n	80078b4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d003      	beq.n	80078b4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80078ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ae:	f043 0302 	orr.w	r3, r3, #2
 80078b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80078b4:	6a3b      	ldr	r3, [r7, #32]
 80078b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d008      	beq.n	80078d0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d003      	beq.n	80078d0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80078c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ca:	f043 0304 	orr.w	r3, r3, #4
 80078ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80078d0:	6a3b      	ldr	r3, [r7, #32]
 80078d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d043      	beq.n	8007962 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d03e      	beq.n	8007962 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078ea:	2b60      	cmp	r3, #96	; 0x60
 80078ec:	d02b      	beq.n	8007946 <HAL_CAN_IRQHandler+0x32a>
 80078ee:	2b60      	cmp	r3, #96	; 0x60
 80078f0:	d82e      	bhi.n	8007950 <HAL_CAN_IRQHandler+0x334>
 80078f2:	2b50      	cmp	r3, #80	; 0x50
 80078f4:	d022      	beq.n	800793c <HAL_CAN_IRQHandler+0x320>
 80078f6:	2b50      	cmp	r3, #80	; 0x50
 80078f8:	d82a      	bhi.n	8007950 <HAL_CAN_IRQHandler+0x334>
 80078fa:	2b40      	cmp	r3, #64	; 0x40
 80078fc:	d019      	beq.n	8007932 <HAL_CAN_IRQHandler+0x316>
 80078fe:	2b40      	cmp	r3, #64	; 0x40
 8007900:	d826      	bhi.n	8007950 <HAL_CAN_IRQHandler+0x334>
 8007902:	2b30      	cmp	r3, #48	; 0x30
 8007904:	d010      	beq.n	8007928 <HAL_CAN_IRQHandler+0x30c>
 8007906:	2b30      	cmp	r3, #48	; 0x30
 8007908:	d822      	bhi.n	8007950 <HAL_CAN_IRQHandler+0x334>
 800790a:	2b10      	cmp	r3, #16
 800790c:	d002      	beq.n	8007914 <HAL_CAN_IRQHandler+0x2f8>
 800790e:	2b20      	cmp	r3, #32
 8007910:	d005      	beq.n	800791e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007912:	e01d      	b.n	8007950 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	f043 0308 	orr.w	r3, r3, #8
 800791a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800791c:	e019      	b.n	8007952 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800791e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007920:	f043 0310 	orr.w	r3, r3, #16
 8007924:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007926:	e014      	b.n	8007952 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792a:	f043 0320 	orr.w	r3, r3, #32
 800792e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007930:	e00f      	b.n	8007952 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007938:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800793a:	e00a      	b.n	8007952 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800793c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007942:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007944:	e005      	b.n	8007952 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800794c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800794e:	e000      	b.n	8007952 <HAL_CAN_IRQHandler+0x336>
            break;
 8007950:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	699a      	ldr	r2, [r3, #24]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007960:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2204      	movs	r2, #4
 8007968:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796c:	2b00      	cmp	r3, #0
 800796e:	d008      	beq.n	8007982 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007976:	431a      	orrs	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f872 	bl	8007a66 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007982:	bf00      	nop
 8007984:	3728      	adds	r7, #40	; 0x28
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800798a:	b480      	push	{r7}
 800798c:	b083      	sub	sp, #12
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007992:	bf00      	nop
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800799e:	b480      	push	{r7}
 80079a0:	b083      	sub	sp, #12
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80079a6:	bf00      	nop
 80079a8:	370c      	adds	r7, #12
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr

080079b2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80079b2:	b480      	push	{r7}
 80079b4:	b083      	sub	sp, #12
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80079ba:	bf00      	nop
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b083      	sub	sp, #12
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80079ce:	bf00      	nop
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80079da:	b480      	push	{r7}
 80079dc:	b083      	sub	sp, #12
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80079e2:	bf00      	nop
 80079e4:	370c      	adds	r7, #12
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b083      	sub	sp, #12
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80079f6:	bf00      	nop
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b083      	sub	sp, #12
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007a0a:	bf00      	nop
 8007a0c:	370c      	adds	r7, #12
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b083      	sub	sp, #12
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007a1e:	bf00      	nop
 8007a20:	370c      	adds	r7, #12
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b083      	sub	sp, #12
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007a32:	bf00      	nop
 8007a34:	370c      	adds	r7, #12
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr

08007a3e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007a3e:	b480      	push	{r7}
 8007a40:	b083      	sub	sp, #12
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007a46:	bf00      	nop
 8007a48:	370c      	adds	r7, #12
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007a52:	b480      	push	{r7}
 8007a54:	b083      	sub	sp, #12
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007a5a:	bf00      	nop
 8007a5c:	370c      	adds	r7, #12
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007a66:	b480      	push	{r7}
 8007a68:	b083      	sub	sp, #12
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007a6e:	bf00      	nop
 8007a70:	370c      	adds	r7, #12
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
	...

08007a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f003 0307 	and.w	r3, r3, #7
 8007a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007a8c:	4b0b      	ldr	r3, [pc, #44]	; (8007abc <__NVIC_SetPriorityGrouping+0x40>)
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007a98:	4013      	ands	r3, r2
 8007a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007aa4:	4b06      	ldr	r3, [pc, #24]	; (8007ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007aaa:	4a04      	ldr	r2, [pc, #16]	; (8007abc <__NVIC_SetPriorityGrouping+0x40>)
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	60d3      	str	r3, [r2, #12]
}
 8007ab0:	bf00      	nop
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	e000ed00 	.word	0xe000ed00
 8007ac0:	05fa0000 	.word	0x05fa0000

08007ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ac8:	4b04      	ldr	r3, [pc, #16]	; (8007adc <__NVIC_GetPriorityGrouping+0x18>)
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	0a1b      	lsrs	r3, r3, #8
 8007ace:	f003 0307 	and.w	r3, r3, #7
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr
 8007adc:	e000ed00 	.word	0xe000ed00

08007ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	db0b      	blt.n	8007b0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007af2:	79fb      	ldrb	r3, [r7, #7]
 8007af4:	f003 021f 	and.w	r2, r3, #31
 8007af8:	4907      	ldr	r1, [pc, #28]	; (8007b18 <__NVIC_EnableIRQ+0x38>)
 8007afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007afe:	095b      	lsrs	r3, r3, #5
 8007b00:	2001      	movs	r0, #1
 8007b02:	fa00 f202 	lsl.w	r2, r0, r2
 8007b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007b0a:	bf00      	nop
 8007b0c:	370c      	adds	r7, #12
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	e000e100 	.word	0xe000e100

08007b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	4603      	mov	r3, r0
 8007b24:	6039      	str	r1, [r7, #0]
 8007b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	db0a      	blt.n	8007b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	b2da      	uxtb	r2, r3
 8007b34:	490c      	ldr	r1, [pc, #48]	; (8007b68 <__NVIC_SetPriority+0x4c>)
 8007b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b3a:	0112      	lsls	r2, r2, #4
 8007b3c:	b2d2      	uxtb	r2, r2
 8007b3e:	440b      	add	r3, r1
 8007b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007b44:	e00a      	b.n	8007b5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	b2da      	uxtb	r2, r3
 8007b4a:	4908      	ldr	r1, [pc, #32]	; (8007b6c <__NVIC_SetPriority+0x50>)
 8007b4c:	79fb      	ldrb	r3, [r7, #7]
 8007b4e:	f003 030f 	and.w	r3, r3, #15
 8007b52:	3b04      	subs	r3, #4
 8007b54:	0112      	lsls	r2, r2, #4
 8007b56:	b2d2      	uxtb	r2, r2
 8007b58:	440b      	add	r3, r1
 8007b5a:	761a      	strb	r2, [r3, #24]
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr
 8007b68:	e000e100 	.word	0xe000e100
 8007b6c:	e000ed00 	.word	0xe000ed00

08007b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b089      	sub	sp, #36	; 0x24
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f003 0307 	and.w	r3, r3, #7
 8007b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	f1c3 0307 	rsb	r3, r3, #7
 8007b8a:	2b04      	cmp	r3, #4
 8007b8c:	bf28      	it	cs
 8007b8e:	2304      	movcs	r3, #4
 8007b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	3304      	adds	r3, #4
 8007b96:	2b06      	cmp	r3, #6
 8007b98:	d902      	bls.n	8007ba0 <NVIC_EncodePriority+0x30>
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	3b03      	subs	r3, #3
 8007b9e:	e000      	b.n	8007ba2 <NVIC_EncodePriority+0x32>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	fa02 f303 	lsl.w	r3, r2, r3
 8007bae:	43da      	mvns	r2, r3
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	401a      	ands	r2, r3
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8007bc2:	43d9      	mvns	r1, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bc8:	4313      	orrs	r3, r2
         );
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3724      	adds	r7, #36	; 0x24
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
	...

08007bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	3b01      	subs	r3, #1
 8007be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007be8:	d301      	bcc.n	8007bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007bea:	2301      	movs	r3, #1
 8007bec:	e00f      	b.n	8007c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007bee:	4a0a      	ldr	r2, [pc, #40]	; (8007c18 <SysTick_Config+0x40>)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007bf6:	210f      	movs	r1, #15
 8007bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bfc:	f7ff ff8e 	bl	8007b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007c00:	4b05      	ldr	r3, [pc, #20]	; (8007c18 <SysTick_Config+0x40>)
 8007c02:	2200      	movs	r2, #0
 8007c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007c06:	4b04      	ldr	r3, [pc, #16]	; (8007c18 <SysTick_Config+0x40>)
 8007c08:	2207      	movs	r2, #7
 8007c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3708      	adds	r7, #8
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	e000e010 	.word	0xe000e010

08007c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f7ff ff29 	bl	8007a7c <__NVIC_SetPriorityGrouping>
}
 8007c2a:	bf00      	nop
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b086      	sub	sp, #24
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	4603      	mov	r3, r0
 8007c3a:	60b9      	str	r1, [r7, #8]
 8007c3c:	607a      	str	r2, [r7, #4]
 8007c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007c40:	2300      	movs	r3, #0
 8007c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007c44:	f7ff ff3e 	bl	8007ac4 <__NVIC_GetPriorityGrouping>
 8007c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	68b9      	ldr	r1, [r7, #8]
 8007c4e:	6978      	ldr	r0, [r7, #20]
 8007c50:	f7ff ff8e 	bl	8007b70 <NVIC_EncodePriority>
 8007c54:	4602      	mov	r2, r0
 8007c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7ff ff5d 	bl	8007b1c <__NVIC_SetPriority>
}
 8007c62:	bf00      	nop
 8007c64:	3718      	adds	r7, #24
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b082      	sub	sp, #8
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	4603      	mov	r3, r0
 8007c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7ff ff31 	bl	8007ae0 <__NVIC_EnableIRQ>
}
 8007c7e:	bf00      	nop
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b082      	sub	sp, #8
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7ff ffa2 	bl	8007bd8 <SysTick_Config>
 8007c94:	4603      	mov	r3, r0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
	...

08007ca0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007cac:	f7fe fdc0 	bl	8006830 <HAL_GetTick>
 8007cb0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d101      	bne.n	8007cbc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e099      	b.n	8007df0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f022 0201 	bic.w	r2, r2, #1
 8007cda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007cdc:	e00f      	b.n	8007cfe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007cde:	f7fe fda7 	bl	8006830 <HAL_GetTick>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	2b05      	cmp	r3, #5
 8007cea:	d908      	bls.n	8007cfe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2220      	movs	r2, #32
 8007cf0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2203      	movs	r2, #3
 8007cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e078      	b.n	8007df0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0301 	and.w	r3, r3, #1
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1e8      	bne.n	8007cde <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	4b38      	ldr	r3, [pc, #224]	; (8007df8 <HAL_DMA_Init+0x158>)
 8007d18:	4013      	ands	r3, r2
 8007d1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	685a      	ldr	r2, [r3, #4]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	699b      	ldr	r3, [r3, #24]
 8007d3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6a1b      	ldr	r3, [r3, #32]
 8007d48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d54:	2b04      	cmp	r3, #4
 8007d56:	d107      	bne.n	8007d68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d60:	4313      	orrs	r3, r2
 8007d62:	697a      	ldr	r2, [r7, #20]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	697a      	ldr	r2, [r7, #20]
 8007d6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	f023 0307 	bic.w	r3, r3, #7
 8007d7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d84:	697a      	ldr	r2, [r7, #20]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8e:	2b04      	cmp	r3, #4
 8007d90:	d117      	bne.n	8007dc2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d96:	697a      	ldr	r2, [r7, #20]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00e      	beq.n	8007dc2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fb15 	bl	80083d4 <DMA_CheckFifoParam>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d008      	beq.n	8007dc2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2240      	movs	r2, #64	; 0x40
 8007db4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e016      	b.n	8007df0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	697a      	ldr	r2, [r7, #20]
 8007dc8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 facc 	bl	8008368 <DMA_CalcBaseAndBitshift>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dd8:	223f      	movs	r2, #63	; 0x3f
 8007dda:	409a      	lsls	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3718      	adds	r7, #24
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	e010803f 	.word	0xe010803f

08007dfc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
 8007e08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d101      	bne.n	8007e22 <HAL_DMA_Start_IT+0x26>
 8007e1e:	2302      	movs	r3, #2
 8007e20:	e048      	b.n	8007eb4 <HAL_DMA_Start_IT+0xb8>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d137      	bne.n	8007ea6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2202      	movs	r2, #2
 8007e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	68b9      	ldr	r1, [r7, #8]
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f000 fa5e 	bl	800830c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e54:	223f      	movs	r2, #63	; 0x3f
 8007e56:	409a      	lsls	r2, r3
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f042 0216 	orr.w	r2, r2, #22
 8007e6a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	695a      	ldr	r2, [r3, #20]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007e7a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d007      	beq.n	8007e94 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f042 0208 	orr.w	r2, r2, #8
 8007e92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f042 0201 	orr.w	r2, r2, #1
 8007ea2:	601a      	str	r2, [r3, #0]
 8007ea4:	e005      	b.n	8007eb2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007eae:	2302      	movs	r3, #2
 8007eb0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3718      	adds	r7, #24
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ec8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007eca:	f7fe fcb1 	bl	8006830 <HAL_GetTick>
 8007ece:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	d008      	beq.n	8007eee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2280      	movs	r2, #128	; 0x80
 8007ee0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e052      	b.n	8007f94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f022 0216 	bic.w	r2, r2, #22
 8007efc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	695a      	ldr	r2, [r3, #20]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d103      	bne.n	8007f1e <HAL_DMA_Abort+0x62>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d007      	beq.n	8007f2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f022 0208 	bic.w	r2, r2, #8
 8007f2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f022 0201 	bic.w	r2, r2, #1
 8007f3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f3e:	e013      	b.n	8007f68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007f40:	f7fe fc76 	bl	8006830 <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	2b05      	cmp	r3, #5
 8007f4c:	d90c      	bls.n	8007f68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2220      	movs	r2, #32
 8007f52:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2203      	movs	r2, #3
 8007f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e015      	b.n	8007f94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 0301 	and.w	r3, r3, #1
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1e4      	bne.n	8007f40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f7a:	223f      	movs	r2, #63	; 0x3f
 8007f7c:	409a      	lsls	r2, r3
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2201      	movs	r2, #1
 8007f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d004      	beq.n	8007fba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2280      	movs	r2, #128	; 0x80
 8007fb4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e00c      	b.n	8007fd4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2205      	movs	r2, #5
 8007fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f022 0201 	bic.w	r2, r2, #1
 8007fd0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8007fec:	4b8e      	ldr	r3, [pc, #568]	; (8008228 <HAL_DMA_IRQHandler+0x248>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a8e      	ldr	r2, [pc, #568]	; (800822c <HAL_DMA_IRQHandler+0x24c>)
 8007ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ff6:	0a9b      	lsrs	r3, r3, #10
 8007ff8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ffe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800800a:	2208      	movs	r2, #8
 800800c:	409a      	lsls	r2, r3
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	4013      	ands	r3, r2
 8008012:	2b00      	cmp	r3, #0
 8008014:	d01a      	beq.n	800804c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 0304 	and.w	r3, r3, #4
 8008020:	2b00      	cmp	r3, #0
 8008022:	d013      	beq.n	800804c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f022 0204 	bic.w	r2, r2, #4
 8008032:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008038:	2208      	movs	r2, #8
 800803a:	409a      	lsls	r2, r3
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008044:	f043 0201 	orr.w	r2, r3, #1
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008050:	2201      	movs	r2, #1
 8008052:	409a      	lsls	r2, r3
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	4013      	ands	r3, r2
 8008058:	2b00      	cmp	r3, #0
 800805a:	d012      	beq.n	8008082 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	695b      	ldr	r3, [r3, #20]
 8008062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00b      	beq.n	8008082 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800806e:	2201      	movs	r2, #1
 8008070:	409a      	lsls	r2, r3
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800807a:	f043 0202 	orr.w	r2, r3, #2
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008086:	2204      	movs	r2, #4
 8008088:	409a      	lsls	r2, r3
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	4013      	ands	r3, r2
 800808e:	2b00      	cmp	r3, #0
 8008090:	d012      	beq.n	80080b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 0302 	and.w	r3, r3, #2
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00b      	beq.n	80080b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080a4:	2204      	movs	r2, #4
 80080a6:	409a      	lsls	r2, r3
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b0:	f043 0204 	orr.w	r2, r3, #4
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080bc:	2210      	movs	r2, #16
 80080be:	409a      	lsls	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	4013      	ands	r3, r2
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d043      	beq.n	8008150 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 0308 	and.w	r3, r3, #8
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d03c      	beq.n	8008150 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080da:	2210      	movs	r2, #16
 80080dc:	409a      	lsls	r2, r3
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d018      	beq.n	8008122 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d108      	bne.n	8008110 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008102:	2b00      	cmp	r3, #0
 8008104:	d024      	beq.n	8008150 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	4798      	blx	r3
 800810e:	e01f      	b.n	8008150 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008114:	2b00      	cmp	r3, #0
 8008116:	d01b      	beq.n	8008150 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	4798      	blx	r3
 8008120:	e016      	b.n	8008150 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800812c:	2b00      	cmp	r3, #0
 800812e:	d107      	bne.n	8008140 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f022 0208 	bic.w	r2, r2, #8
 800813e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008144:	2b00      	cmp	r3, #0
 8008146:	d003      	beq.n	8008150 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008154:	2220      	movs	r2, #32
 8008156:	409a      	lsls	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	4013      	ands	r3, r2
 800815c:	2b00      	cmp	r3, #0
 800815e:	f000 808f 	beq.w	8008280 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 0310 	and.w	r3, r3, #16
 800816c:	2b00      	cmp	r3, #0
 800816e:	f000 8087 	beq.w	8008280 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008176:	2220      	movs	r2, #32
 8008178:	409a      	lsls	r2, r3
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b05      	cmp	r3, #5
 8008188:	d136      	bne.n	80081f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f022 0216 	bic.w	r2, r2, #22
 8008198:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	695a      	ldr	r2, [r3, #20]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d103      	bne.n	80081ba <HAL_DMA_IRQHandler+0x1da>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d007      	beq.n	80081ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f022 0208 	bic.w	r2, r2, #8
 80081c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081ce:	223f      	movs	r2, #63	; 0x3f
 80081d0:	409a      	lsls	r2, r3
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2201      	movs	r2, #1
 80081da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d07e      	beq.n	80082ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	4798      	blx	r3
        }
        return;
 80081f6:	e079      	b.n	80082ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d01d      	beq.n	8008242 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008210:	2b00      	cmp	r3, #0
 8008212:	d10d      	bne.n	8008230 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008218:	2b00      	cmp	r3, #0
 800821a:	d031      	beq.n	8008280 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	4798      	blx	r3
 8008224:	e02c      	b.n	8008280 <HAL_DMA_IRQHandler+0x2a0>
 8008226:	bf00      	nop
 8008228:	200004b0 	.word	0x200004b0
 800822c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008234:	2b00      	cmp	r3, #0
 8008236:	d023      	beq.n	8008280 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	4798      	blx	r3
 8008240:	e01e      	b.n	8008280 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10f      	bne.n	8008270 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f022 0210 	bic.w	r2, r2, #16
 800825e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008274:	2b00      	cmp	r3, #0
 8008276:	d003      	beq.n	8008280 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008284:	2b00      	cmp	r3, #0
 8008286:	d032      	beq.n	80082ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	2b00      	cmp	r3, #0
 8008292:	d022      	beq.n	80082da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2205      	movs	r2, #5
 8008298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f022 0201 	bic.w	r2, r2, #1
 80082aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	3301      	adds	r3, #1
 80082b0:	60bb      	str	r3, [r7, #8]
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d307      	bcc.n	80082c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f003 0301 	and.w	r3, r3, #1
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1f2      	bne.n	80082ac <HAL_DMA_IRQHandler+0x2cc>
 80082c6:	e000      	b.n	80082ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80082c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d005      	beq.n	80082ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	4798      	blx	r3
 80082ea:	e000      	b.n	80082ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80082ec:	bf00      	nop
    }
  }
}
 80082ee:	3718      	adds	r7, #24
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008300:	4618      	mov	r0, r3
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
 8008318:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008328:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	683a      	ldr	r2, [r7, #0]
 8008330:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	2b40      	cmp	r3, #64	; 0x40
 8008338:	d108      	bne.n	800834c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800834a:	e007      	b.n	800835c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68ba      	ldr	r2, [r7, #8]
 8008352:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	60da      	str	r2, [r3, #12]
}
 800835c:	bf00      	nop
 800835e:	3714      	adds	r7, #20
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	b2db      	uxtb	r3, r3
 8008376:	3b10      	subs	r3, #16
 8008378:	4a13      	ldr	r2, [pc, #76]	; (80083c8 <DMA_CalcBaseAndBitshift+0x60>)
 800837a:	fba2 2303 	umull	r2, r3, r2, r3
 800837e:	091b      	lsrs	r3, r3, #4
 8008380:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008382:	4a12      	ldr	r2, [pc, #72]	; (80083cc <DMA_CalcBaseAndBitshift+0x64>)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	4413      	add	r3, r2
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	461a      	mov	r2, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2b03      	cmp	r3, #3
 8008394:	d908      	bls.n	80083a8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	461a      	mov	r2, r3
 800839c:	4b0c      	ldr	r3, [pc, #48]	; (80083d0 <DMA_CalcBaseAndBitshift+0x68>)
 800839e:	4013      	ands	r3, r2
 80083a0:	1d1a      	adds	r2, r3, #4
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	659a      	str	r2, [r3, #88]	; 0x58
 80083a6:	e006      	b.n	80083b6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	461a      	mov	r2, r3
 80083ae:	4b08      	ldr	r3, [pc, #32]	; (80083d0 <DMA_CalcBaseAndBitshift+0x68>)
 80083b0:	4013      	ands	r3, r2
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	aaaaaaab 	.word	0xaaaaaaab
 80083cc:	08019354 	.word	0x08019354
 80083d0:	fffffc00 	.word	0xfffffc00

080083d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083dc:	2300      	movs	r3, #0
 80083de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	699b      	ldr	r3, [r3, #24]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d11f      	bne.n	800842e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	2b03      	cmp	r3, #3
 80083f2:	d856      	bhi.n	80084a2 <DMA_CheckFifoParam+0xce>
 80083f4:	a201      	add	r2, pc, #4	; (adr r2, 80083fc <DMA_CheckFifoParam+0x28>)
 80083f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083fa:	bf00      	nop
 80083fc:	0800840d 	.word	0x0800840d
 8008400:	0800841f 	.word	0x0800841f
 8008404:	0800840d 	.word	0x0800840d
 8008408:	080084a3 	.word	0x080084a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008410:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008414:	2b00      	cmp	r3, #0
 8008416:	d046      	beq.n	80084a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800841c:	e043      	b.n	80084a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008422:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008426:	d140      	bne.n	80084aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800842c:	e03d      	b.n	80084aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	699b      	ldr	r3, [r3, #24]
 8008432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008436:	d121      	bne.n	800847c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	2b03      	cmp	r3, #3
 800843c:	d837      	bhi.n	80084ae <DMA_CheckFifoParam+0xda>
 800843e:	a201      	add	r2, pc, #4	; (adr r2, 8008444 <DMA_CheckFifoParam+0x70>)
 8008440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008444:	08008455 	.word	0x08008455
 8008448:	0800845b 	.word	0x0800845b
 800844c:	08008455 	.word	0x08008455
 8008450:	0800846d 	.word	0x0800846d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	73fb      	strb	r3, [r7, #15]
      break;
 8008458:	e030      	b.n	80084bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008462:	2b00      	cmp	r3, #0
 8008464:	d025      	beq.n	80084b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800846a:	e022      	b.n	80084b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008470:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008474:	d11f      	bne.n	80084b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800847a:	e01c      	b.n	80084b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	2b02      	cmp	r3, #2
 8008480:	d903      	bls.n	800848a <DMA_CheckFifoParam+0xb6>
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	2b03      	cmp	r3, #3
 8008486:	d003      	beq.n	8008490 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008488:	e018      	b.n	80084bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	73fb      	strb	r3, [r7, #15]
      break;
 800848e:	e015      	b.n	80084bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008494:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00e      	beq.n	80084ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	73fb      	strb	r3, [r7, #15]
      break;
 80084a0:	e00b      	b.n	80084ba <DMA_CheckFifoParam+0xe6>
      break;
 80084a2:	bf00      	nop
 80084a4:	e00a      	b.n	80084bc <DMA_CheckFifoParam+0xe8>
      break;
 80084a6:	bf00      	nop
 80084a8:	e008      	b.n	80084bc <DMA_CheckFifoParam+0xe8>
      break;
 80084aa:	bf00      	nop
 80084ac:	e006      	b.n	80084bc <DMA_CheckFifoParam+0xe8>
      break;
 80084ae:	bf00      	nop
 80084b0:	e004      	b.n	80084bc <DMA_CheckFifoParam+0xe8>
      break;
 80084b2:	bf00      	nop
 80084b4:	e002      	b.n	80084bc <DMA_CheckFifoParam+0xe8>
      break;   
 80084b6:	bf00      	nop
 80084b8:	e000      	b.n	80084bc <DMA_CheckFifoParam+0xe8>
      break;
 80084ba:	bf00      	nop
    }
  } 
  
  return status; 
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop

080084cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b089      	sub	sp, #36	; 0x24
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80084d6:	2300      	movs	r3, #0
 80084d8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80084da:	2300      	movs	r3, #0
 80084dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80084de:	2300      	movs	r3, #0
 80084e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80084e2:	2300      	movs	r3, #0
 80084e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80084e6:	2300      	movs	r3, #0
 80084e8:	61fb      	str	r3, [r7, #28]
 80084ea:	e175      	b.n	80087d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80084ec:	2201      	movs	r2, #1
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	fa02 f303 	lsl.w	r3, r2, r3
 80084f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	697a      	ldr	r2, [r7, #20]
 80084fc:	4013      	ands	r3, r2
 80084fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	429a      	cmp	r2, r3
 8008506:	f040 8164 	bne.w	80087d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	f003 0303 	and.w	r3, r3, #3
 8008512:	2b01      	cmp	r3, #1
 8008514:	d005      	beq.n	8008522 <HAL_GPIO_Init+0x56>
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	f003 0303 	and.w	r3, r3, #3
 800851e:	2b02      	cmp	r3, #2
 8008520:	d130      	bne.n	8008584 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	005b      	lsls	r3, r3, #1
 800852c:	2203      	movs	r2, #3
 800852e:	fa02 f303 	lsl.w	r3, r2, r3
 8008532:	43db      	mvns	r3, r3
 8008534:	69ba      	ldr	r2, [r7, #24]
 8008536:	4013      	ands	r3, r2
 8008538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	68da      	ldr	r2, [r3, #12]
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	005b      	lsls	r3, r3, #1
 8008542:	fa02 f303 	lsl.w	r3, r2, r3
 8008546:	69ba      	ldr	r2, [r7, #24]
 8008548:	4313      	orrs	r3, r2
 800854a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	69ba      	ldr	r2, [r7, #24]
 8008550:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008558:	2201      	movs	r2, #1
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	fa02 f303 	lsl.w	r3, r2, r3
 8008560:	43db      	mvns	r3, r3
 8008562:	69ba      	ldr	r2, [r7, #24]
 8008564:	4013      	ands	r3, r2
 8008566:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	091b      	lsrs	r3, r3, #4
 800856e:	f003 0201 	and.w	r2, r3, #1
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	fa02 f303 	lsl.w	r3, r2, r3
 8008578:	69ba      	ldr	r2, [r7, #24]
 800857a:	4313      	orrs	r3, r2
 800857c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	69ba      	ldr	r2, [r7, #24]
 8008582:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	f003 0303 	and.w	r3, r3, #3
 800858c:	2b03      	cmp	r3, #3
 800858e:	d017      	beq.n	80085c0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	005b      	lsls	r3, r3, #1
 800859a:	2203      	movs	r2, #3
 800859c:	fa02 f303 	lsl.w	r3, r2, r3
 80085a0:	43db      	mvns	r3, r3
 80085a2:	69ba      	ldr	r2, [r7, #24]
 80085a4:	4013      	ands	r3, r2
 80085a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	689a      	ldr	r2, [r3, #8]
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	005b      	lsls	r3, r3, #1
 80085b0:	fa02 f303 	lsl.w	r3, r2, r3
 80085b4:	69ba      	ldr	r2, [r7, #24]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	69ba      	ldr	r2, [r7, #24]
 80085be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	f003 0303 	and.w	r3, r3, #3
 80085c8:	2b02      	cmp	r3, #2
 80085ca:	d123      	bne.n	8008614 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	08da      	lsrs	r2, r3, #3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	3208      	adds	r2, #8
 80085d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	f003 0307 	and.w	r3, r3, #7
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	220f      	movs	r2, #15
 80085e4:	fa02 f303 	lsl.w	r3, r2, r3
 80085e8:	43db      	mvns	r3, r3
 80085ea:	69ba      	ldr	r2, [r7, #24]
 80085ec:	4013      	ands	r3, r2
 80085ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	691a      	ldr	r2, [r3, #16]
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	f003 0307 	and.w	r3, r3, #7
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008600:	69ba      	ldr	r2, [r7, #24]
 8008602:	4313      	orrs	r3, r2
 8008604:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	08da      	lsrs	r2, r3, #3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	3208      	adds	r2, #8
 800860e:	69b9      	ldr	r1, [r7, #24]
 8008610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	005b      	lsls	r3, r3, #1
 800861e:	2203      	movs	r2, #3
 8008620:	fa02 f303 	lsl.w	r3, r2, r3
 8008624:	43db      	mvns	r3, r3
 8008626:	69ba      	ldr	r2, [r7, #24]
 8008628:	4013      	ands	r3, r2
 800862a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	f003 0203 	and.w	r2, r3, #3
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	005b      	lsls	r3, r3, #1
 8008638:	fa02 f303 	lsl.w	r3, r2, r3
 800863c:	69ba      	ldr	r2, [r7, #24]
 800863e:	4313      	orrs	r3, r2
 8008640:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	69ba      	ldr	r2, [r7, #24]
 8008646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 80be 	beq.w	80087d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008656:	4b66      	ldr	r3, [pc, #408]	; (80087f0 <HAL_GPIO_Init+0x324>)
 8008658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800865a:	4a65      	ldr	r2, [pc, #404]	; (80087f0 <HAL_GPIO_Init+0x324>)
 800865c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008660:	6453      	str	r3, [r2, #68]	; 0x44
 8008662:	4b63      	ldr	r3, [pc, #396]	; (80087f0 <HAL_GPIO_Init+0x324>)
 8008664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800866a:	60fb      	str	r3, [r7, #12]
 800866c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800866e:	4a61      	ldr	r2, [pc, #388]	; (80087f4 <HAL_GPIO_Init+0x328>)
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	089b      	lsrs	r3, r3, #2
 8008674:	3302      	adds	r3, #2
 8008676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800867a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	f003 0303 	and.w	r3, r3, #3
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	220f      	movs	r2, #15
 8008686:	fa02 f303 	lsl.w	r3, r2, r3
 800868a:	43db      	mvns	r3, r3
 800868c:	69ba      	ldr	r2, [r7, #24]
 800868e:	4013      	ands	r3, r2
 8008690:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a58      	ldr	r2, [pc, #352]	; (80087f8 <HAL_GPIO_Init+0x32c>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d037      	beq.n	800870a <HAL_GPIO_Init+0x23e>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a57      	ldr	r2, [pc, #348]	; (80087fc <HAL_GPIO_Init+0x330>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d031      	beq.n	8008706 <HAL_GPIO_Init+0x23a>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a56      	ldr	r2, [pc, #344]	; (8008800 <HAL_GPIO_Init+0x334>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d02b      	beq.n	8008702 <HAL_GPIO_Init+0x236>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a55      	ldr	r2, [pc, #340]	; (8008804 <HAL_GPIO_Init+0x338>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d025      	beq.n	80086fe <HAL_GPIO_Init+0x232>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a54      	ldr	r2, [pc, #336]	; (8008808 <HAL_GPIO_Init+0x33c>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d01f      	beq.n	80086fa <HAL_GPIO_Init+0x22e>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4a53      	ldr	r2, [pc, #332]	; (800880c <HAL_GPIO_Init+0x340>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d019      	beq.n	80086f6 <HAL_GPIO_Init+0x22a>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a52      	ldr	r2, [pc, #328]	; (8008810 <HAL_GPIO_Init+0x344>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d013      	beq.n	80086f2 <HAL_GPIO_Init+0x226>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a51      	ldr	r2, [pc, #324]	; (8008814 <HAL_GPIO_Init+0x348>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d00d      	beq.n	80086ee <HAL_GPIO_Init+0x222>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a50      	ldr	r2, [pc, #320]	; (8008818 <HAL_GPIO_Init+0x34c>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d007      	beq.n	80086ea <HAL_GPIO_Init+0x21e>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a4f      	ldr	r2, [pc, #316]	; (800881c <HAL_GPIO_Init+0x350>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d101      	bne.n	80086e6 <HAL_GPIO_Init+0x21a>
 80086e2:	2309      	movs	r3, #9
 80086e4:	e012      	b.n	800870c <HAL_GPIO_Init+0x240>
 80086e6:	230a      	movs	r3, #10
 80086e8:	e010      	b.n	800870c <HAL_GPIO_Init+0x240>
 80086ea:	2308      	movs	r3, #8
 80086ec:	e00e      	b.n	800870c <HAL_GPIO_Init+0x240>
 80086ee:	2307      	movs	r3, #7
 80086f0:	e00c      	b.n	800870c <HAL_GPIO_Init+0x240>
 80086f2:	2306      	movs	r3, #6
 80086f4:	e00a      	b.n	800870c <HAL_GPIO_Init+0x240>
 80086f6:	2305      	movs	r3, #5
 80086f8:	e008      	b.n	800870c <HAL_GPIO_Init+0x240>
 80086fa:	2304      	movs	r3, #4
 80086fc:	e006      	b.n	800870c <HAL_GPIO_Init+0x240>
 80086fe:	2303      	movs	r3, #3
 8008700:	e004      	b.n	800870c <HAL_GPIO_Init+0x240>
 8008702:	2302      	movs	r3, #2
 8008704:	e002      	b.n	800870c <HAL_GPIO_Init+0x240>
 8008706:	2301      	movs	r3, #1
 8008708:	e000      	b.n	800870c <HAL_GPIO_Init+0x240>
 800870a:	2300      	movs	r3, #0
 800870c:	69fa      	ldr	r2, [r7, #28]
 800870e:	f002 0203 	and.w	r2, r2, #3
 8008712:	0092      	lsls	r2, r2, #2
 8008714:	4093      	lsls	r3, r2
 8008716:	69ba      	ldr	r2, [r7, #24]
 8008718:	4313      	orrs	r3, r2
 800871a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800871c:	4935      	ldr	r1, [pc, #212]	; (80087f4 <HAL_GPIO_Init+0x328>)
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	089b      	lsrs	r3, r3, #2
 8008722:	3302      	adds	r3, #2
 8008724:	69ba      	ldr	r2, [r7, #24]
 8008726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800872a:	4b3d      	ldr	r3, [pc, #244]	; (8008820 <HAL_GPIO_Init+0x354>)
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	43db      	mvns	r3, r3
 8008734:	69ba      	ldr	r2, [r7, #24]
 8008736:	4013      	ands	r3, r2
 8008738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008742:	2b00      	cmp	r3, #0
 8008744:	d003      	beq.n	800874e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008746:	69ba      	ldr	r2, [r7, #24]
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	4313      	orrs	r3, r2
 800874c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800874e:	4a34      	ldr	r2, [pc, #208]	; (8008820 <HAL_GPIO_Init+0x354>)
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008754:	4b32      	ldr	r3, [pc, #200]	; (8008820 <HAL_GPIO_Init+0x354>)
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	43db      	mvns	r3, r3
 800875e:	69ba      	ldr	r2, [r7, #24]
 8008760:	4013      	ands	r3, r2
 8008762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d003      	beq.n	8008778 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008770:	69ba      	ldr	r2, [r7, #24]
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	4313      	orrs	r3, r2
 8008776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008778:	4a29      	ldr	r2, [pc, #164]	; (8008820 <HAL_GPIO_Init+0x354>)
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800877e:	4b28      	ldr	r3, [pc, #160]	; (8008820 <HAL_GPIO_Init+0x354>)
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	43db      	mvns	r3, r3
 8008788:	69ba      	ldr	r2, [r7, #24]
 800878a:	4013      	ands	r3, r2
 800878c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008796:	2b00      	cmp	r3, #0
 8008798:	d003      	beq.n	80087a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800879a:	69ba      	ldr	r2, [r7, #24]
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	4313      	orrs	r3, r2
 80087a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80087a2:	4a1f      	ldr	r2, [pc, #124]	; (8008820 <HAL_GPIO_Init+0x354>)
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80087a8:	4b1d      	ldr	r3, [pc, #116]	; (8008820 <HAL_GPIO_Init+0x354>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	43db      	mvns	r3, r3
 80087b2:	69ba      	ldr	r2, [r7, #24]
 80087b4:	4013      	ands	r3, r2
 80087b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d003      	beq.n	80087cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80087c4:	69ba      	ldr	r2, [r7, #24]
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	4313      	orrs	r3, r2
 80087ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80087cc:	4a14      	ldr	r2, [pc, #80]	; (8008820 <HAL_GPIO_Init+0x354>)
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	3301      	adds	r3, #1
 80087d6:	61fb      	str	r3, [r7, #28]
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	2b0f      	cmp	r3, #15
 80087dc:	f67f ae86 	bls.w	80084ec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80087e0:	bf00      	nop
 80087e2:	bf00      	nop
 80087e4:	3724      	adds	r7, #36	; 0x24
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	40023800 	.word	0x40023800
 80087f4:	40013800 	.word	0x40013800
 80087f8:	40020000 	.word	0x40020000
 80087fc:	40020400 	.word	0x40020400
 8008800:	40020800 	.word	0x40020800
 8008804:	40020c00 	.word	0x40020c00
 8008808:	40021000 	.word	0x40021000
 800880c:	40021400 	.word	0x40021400
 8008810:	40021800 	.word	0x40021800
 8008814:	40021c00 	.word	0x40021c00
 8008818:	40022000 	.word	0x40022000
 800881c:	40022400 	.word	0x40022400
 8008820:	40013c00 	.word	0x40013c00

08008824 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d101      	bne.n	8008836 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e07f      	b.n	8008936 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800883c:	b2db      	uxtb	r3, r3
 800883e:	2b00      	cmp	r3, #0
 8008840:	d106      	bne.n	8008850 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7fc f9c8 	bl	8004be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2224      	movs	r2, #36	; 0x24
 8008854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f022 0201 	bic.w	r2, r2, #1
 8008866:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685a      	ldr	r2, [r3, #4]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008874:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	689a      	ldr	r2, [r3, #8]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008884:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	2b01      	cmp	r3, #1
 800888c:	d107      	bne.n	800889e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	689a      	ldr	r2, [r3, #8]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800889a:	609a      	str	r2, [r3, #8]
 800889c:	e006      	b.n	80088ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	689a      	ldr	r2, [r3, #8]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80088aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d104      	bne.n	80088be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	6859      	ldr	r1, [r3, #4]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	4b1d      	ldr	r3, [pc, #116]	; (8008940 <HAL_I2C_Init+0x11c>)
 80088ca:	430b      	orrs	r3, r1
 80088cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68da      	ldr	r2, [r3, #12]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80088dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	691a      	ldr	r2, [r3, #16]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	430a      	orrs	r2, r1
 80088f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	69d9      	ldr	r1, [r3, #28]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6a1a      	ldr	r2, [r3, #32]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	430a      	orrs	r2, r1
 8008906:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f042 0201 	orr.w	r2, r2, #1
 8008916:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2220      	movs	r2, #32
 8008922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3708      	adds	r7, #8
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	02008000 	.word	0x02008000

08008944 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b088      	sub	sp, #32
 8008948:	af02      	add	r7, sp, #8
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	607a      	str	r2, [r7, #4]
 800894e:	461a      	mov	r2, r3
 8008950:	460b      	mov	r3, r1
 8008952:	817b      	strh	r3, [r7, #10]
 8008954:	4613      	mov	r3, r2
 8008956:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b20      	cmp	r3, #32
 8008962:	f040 80da 	bne.w	8008b1a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800896c:	2b01      	cmp	r3, #1
 800896e:	d101      	bne.n	8008974 <HAL_I2C_Master_Transmit+0x30>
 8008970:	2302      	movs	r3, #2
 8008972:	e0d3      	b.n	8008b1c <HAL_I2C_Master_Transmit+0x1d8>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800897c:	f7fd ff58 	bl	8006830 <HAL_GetTick>
 8008980:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	9300      	str	r3, [sp, #0]
 8008986:	2319      	movs	r3, #25
 8008988:	2201      	movs	r2, #1
 800898a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800898e:	68f8      	ldr	r0, [r7, #12]
 8008990:	f000 fdc4 	bl	800951c <I2C_WaitOnFlagUntilTimeout>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d001      	beq.n	800899e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	e0be      	b.n	8008b1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2221      	movs	r2, #33	; 0x21
 80089a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2210      	movs	r2, #16
 80089aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	893a      	ldrh	r2, [r7, #8]
 80089be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2200      	movs	r2, #0
 80089c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	2bff      	cmp	r3, #255	; 0xff
 80089ce:	d90e      	bls.n	80089ee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	22ff      	movs	r2, #255	; 0xff
 80089d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089da:	b2da      	uxtb	r2, r3
 80089dc:	8979      	ldrh	r1, [r7, #10]
 80089de:	4b51      	ldr	r3, [pc, #324]	; (8008b24 <HAL_I2C_Master_Transmit+0x1e0>)
 80089e0:	9300      	str	r3, [sp, #0]
 80089e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80089e6:	68f8      	ldr	r0, [r7, #12]
 80089e8:	f000 ffba 	bl	8009960 <I2C_TransferConfig>
 80089ec:	e06c      	b.n	8008ac8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089fc:	b2da      	uxtb	r2, r3
 80089fe:	8979      	ldrh	r1, [r7, #10]
 8008a00:	4b48      	ldr	r3, [pc, #288]	; (8008b24 <HAL_I2C_Master_Transmit+0x1e0>)
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f000 ffa9 	bl	8009960 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008a0e:	e05b      	b.n	8008ac8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a10:	697a      	ldr	r2, [r7, #20]
 8008a12:	6a39      	ldr	r1, [r7, #32]
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f000 fdc1 	bl	800959c <I2C_WaitOnTXISFlagUntilTimeout>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d001      	beq.n	8008a24 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e07b      	b.n	8008b1c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a28:	781a      	ldrb	r2, [r3, #0]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a34:	1c5a      	adds	r2, r3, #1
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	3b01      	subs	r3, #1
 8008a42:	b29a      	uxth	r2, r3
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d034      	beq.n	8008ac8 <HAL_I2C_Master_Transmit+0x184>
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d130      	bne.n	8008ac8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	9300      	str	r3, [sp, #0]
 8008a6a:	6a3b      	ldr	r3, [r7, #32]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	2180      	movs	r1, #128	; 0x80
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f000 fd53 	bl	800951c <I2C_WaitOnFlagUntilTimeout>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d001      	beq.n	8008a80 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e04d      	b.n	8008b1c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	2bff      	cmp	r3, #255	; 0xff
 8008a88:	d90e      	bls.n	8008aa8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	22ff      	movs	r2, #255	; 0xff
 8008a8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a94:	b2da      	uxtb	r2, r3
 8008a96:	8979      	ldrh	r1, [r7, #10]
 8008a98:	2300      	movs	r3, #0
 8008a9a:	9300      	str	r3, [sp, #0]
 8008a9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f000 ff5d 	bl	8009960 <I2C_TransferConfig>
 8008aa6:	e00f      	b.n	8008ac8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ab6:	b2da      	uxtb	r2, r3
 8008ab8:	8979      	ldrh	r1, [r7, #10]
 8008aba:	2300      	movs	r3, #0
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f000 ff4c 	bl	8009960 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d19e      	bne.n	8008a10 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ad2:	697a      	ldr	r2, [r7, #20]
 8008ad4:	6a39      	ldr	r1, [r7, #32]
 8008ad6:	68f8      	ldr	r0, [r7, #12]
 8008ad8:	f000 fda0 	bl	800961c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d001      	beq.n	8008ae6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e01a      	b.n	8008b1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2220      	movs	r2, #32
 8008aec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	6859      	ldr	r1, [r3, #4]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	4b0b      	ldr	r3, [pc, #44]	; (8008b28 <HAL_I2C_Master_Transmit+0x1e4>)
 8008afa:	400b      	ands	r3, r1
 8008afc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2220      	movs	r2, #32
 8008b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008b16:	2300      	movs	r3, #0
 8008b18:	e000      	b.n	8008b1c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8008b1a:	2302      	movs	r3, #2
  }
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3718      	adds	r7, #24
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	80002000 	.word	0x80002000
 8008b28:	fe00e800 	.word	0xfe00e800

08008b2c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b088      	sub	sp, #32
 8008b30:	af02      	add	r7, sp, #8
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	607a      	str	r2, [r7, #4]
 8008b36:	461a      	mov	r2, r3
 8008b38:	460b      	mov	r3, r1
 8008b3a:	817b      	strh	r3, [r7, #10]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	2b20      	cmp	r3, #32
 8008b4a:	f040 80db 	bne.w	8008d04 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d101      	bne.n	8008b5c <HAL_I2C_Master_Receive+0x30>
 8008b58:	2302      	movs	r3, #2
 8008b5a:	e0d4      	b.n	8008d06 <HAL_I2C_Master_Receive+0x1da>
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008b64:	f7fd fe64 	bl	8006830 <HAL_GetTick>
 8008b68:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	9300      	str	r3, [sp, #0]
 8008b6e:	2319      	movs	r3, #25
 8008b70:	2201      	movs	r2, #1
 8008b72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f000 fcd0 	bl	800951c <I2C_WaitOnFlagUntilTimeout>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d001      	beq.n	8008b86 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	e0bf      	b.n	8008d06 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2222      	movs	r2, #34	; 0x22
 8008b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2210      	movs	r2, #16
 8008b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	893a      	ldrh	r2, [r7, #8]
 8008ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2200      	movs	r2, #0
 8008bac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	2bff      	cmp	r3, #255	; 0xff
 8008bb6:	d90e      	bls.n	8008bd6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	22ff      	movs	r2, #255	; 0xff
 8008bbc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	8979      	ldrh	r1, [r7, #10]
 8008bc6:	4b52      	ldr	r3, [pc, #328]	; (8008d10 <HAL_I2C_Master_Receive+0x1e4>)
 8008bc8:	9300      	str	r3, [sp, #0]
 8008bca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f000 fec6 	bl	8009960 <I2C_TransferConfig>
 8008bd4:	e06d      	b.n	8008cb2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008be4:	b2da      	uxtb	r2, r3
 8008be6:	8979      	ldrh	r1, [r7, #10]
 8008be8:	4b49      	ldr	r3, [pc, #292]	; (8008d10 <HAL_I2C_Master_Receive+0x1e4>)
 8008bea:	9300      	str	r3, [sp, #0]
 8008bec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f000 feb5 	bl	8009960 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8008bf6:	e05c      	b.n	8008cb2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bf8:	697a      	ldr	r2, [r7, #20]
 8008bfa:	6a39      	ldr	r1, [r7, #32]
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f000 fd49 	bl	8009694 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d001      	beq.n	8008c0c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e07c      	b.n	8008d06 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c16:	b2d2      	uxtb	r2, r2
 8008c18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1e:	1c5a      	adds	r2, r3, #1
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	3b01      	subs	r3, #1
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d034      	beq.n	8008cb2 <HAL_I2C_Master_Receive+0x186>
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d130      	bne.n	8008cb2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	9300      	str	r3, [sp, #0]
 8008c54:	6a3b      	ldr	r3, [r7, #32]
 8008c56:	2200      	movs	r2, #0
 8008c58:	2180      	movs	r1, #128	; 0x80
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f000 fc5e 	bl	800951c <I2C_WaitOnFlagUntilTimeout>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d001      	beq.n	8008c6a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	e04d      	b.n	8008d06 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	2bff      	cmp	r3, #255	; 0xff
 8008c72:	d90e      	bls.n	8008c92 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	22ff      	movs	r2, #255	; 0xff
 8008c78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c7e:	b2da      	uxtb	r2, r3
 8008c80:	8979      	ldrh	r1, [r7, #10]
 8008c82:	2300      	movs	r3, #0
 8008c84:	9300      	str	r3, [sp, #0]
 8008c86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f000 fe68 	bl	8009960 <I2C_TransferConfig>
 8008c90:	e00f      	b.n	8008cb2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ca0:	b2da      	uxtb	r2, r3
 8008ca2:	8979      	ldrh	r1, [r7, #10]
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	9300      	str	r3, [sp, #0]
 8008ca8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f000 fe57 	bl	8009960 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d19d      	bne.n	8008bf8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008cbc:	697a      	ldr	r2, [r7, #20]
 8008cbe:	6a39      	ldr	r1, [r7, #32]
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f000 fcab 	bl	800961c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d001      	beq.n	8008cd0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e01a      	b.n	8008d06 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2220      	movs	r2, #32
 8008cd6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	6859      	ldr	r1, [r3, #4]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	4b0c      	ldr	r3, [pc, #48]	; (8008d14 <HAL_I2C_Master_Receive+0x1e8>)
 8008ce4:	400b      	ands	r3, r1
 8008ce6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2220      	movs	r2, #32
 8008cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d00:	2300      	movs	r3, #0
 8008d02:	e000      	b.n	8008d06 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008d04:	2302      	movs	r3, #2
  }
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3718      	adds	r7, #24
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	80002400 	.word	0x80002400
 8008d14:	fe00e800 	.word	0xfe00e800

08008d18 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b088      	sub	sp, #32
 8008d1c:	af02      	add	r7, sp, #8
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	4608      	mov	r0, r1
 8008d22:	4611      	mov	r1, r2
 8008d24:	461a      	mov	r2, r3
 8008d26:	4603      	mov	r3, r0
 8008d28:	817b      	strh	r3, [r7, #10]
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	813b      	strh	r3, [r7, #8]
 8008d2e:	4613      	mov	r3, r2
 8008d30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	2b20      	cmp	r3, #32
 8008d3c:	f040 80f9 	bne.w	8008f32 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d40:	6a3b      	ldr	r3, [r7, #32]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d002      	beq.n	8008d4c <HAL_I2C_Mem_Write+0x34>
 8008d46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d105      	bne.n	8008d58 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d52:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008d54:	2301      	movs	r3, #1
 8008d56:	e0ed      	b.n	8008f34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d101      	bne.n	8008d66 <HAL_I2C_Mem_Write+0x4e>
 8008d62:	2302      	movs	r3, #2
 8008d64:	e0e6      	b.n	8008f34 <HAL_I2C_Mem_Write+0x21c>
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008d6e:	f7fd fd5f 	bl	8006830 <HAL_GetTick>
 8008d72:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	9300      	str	r3, [sp, #0]
 8008d78:	2319      	movs	r3, #25
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008d80:	68f8      	ldr	r0, [r7, #12]
 8008d82:	f000 fbcb 	bl	800951c <I2C_WaitOnFlagUntilTimeout>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d001      	beq.n	8008d90 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e0d1      	b.n	8008f34 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2221      	movs	r2, #33	; 0x21
 8008d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2240      	movs	r2, #64	; 0x40
 8008d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2200      	movs	r2, #0
 8008da4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6a3a      	ldr	r2, [r7, #32]
 8008daa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008db0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2200      	movs	r2, #0
 8008db6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008db8:	88f8      	ldrh	r0, [r7, #6]
 8008dba:	893a      	ldrh	r2, [r7, #8]
 8008dbc:	8979      	ldrh	r1, [r7, #10]
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	9301      	str	r3, [sp, #4]
 8008dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc4:	9300      	str	r3, [sp, #0]
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f000 fadb 	bl	8009384 <I2C_RequestMemoryWrite>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d005      	beq.n	8008de0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e0a9      	b.n	8008f34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	2bff      	cmp	r3, #255	; 0xff
 8008de8:	d90e      	bls.n	8008e08 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	22ff      	movs	r2, #255	; 0xff
 8008dee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008df4:	b2da      	uxtb	r2, r3
 8008df6:	8979      	ldrh	r1, [r7, #10]
 8008df8:	2300      	movs	r3, #0
 8008dfa:	9300      	str	r3, [sp, #0]
 8008dfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f000 fdad 	bl	8009960 <I2C_TransferConfig>
 8008e06:	e00f      	b.n	8008e28 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e0c:	b29a      	uxth	r2, r3
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e16:	b2da      	uxtb	r2, r3
 8008e18:	8979      	ldrh	r1, [r7, #10]
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	9300      	str	r3, [sp, #0]
 8008e1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f000 fd9c 	bl	8009960 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e28:	697a      	ldr	r2, [r7, #20]
 8008e2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f000 fbb5 	bl	800959c <I2C_WaitOnTXISFlagUntilTimeout>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d001      	beq.n	8008e3c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e07b      	b.n	8008f34 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e40:	781a      	ldrb	r2, [r3, #0]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4c:	1c5a      	adds	r2, r3, #1
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e64:	3b01      	subs	r3, #1
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d034      	beq.n	8008ee0 <HAL_I2C_Mem_Write+0x1c8>
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d130      	bne.n	8008ee0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	9300      	str	r3, [sp, #0]
 8008e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e84:	2200      	movs	r2, #0
 8008e86:	2180      	movs	r1, #128	; 0x80
 8008e88:	68f8      	ldr	r0, [r7, #12]
 8008e8a:	f000 fb47 	bl	800951c <I2C_WaitOnFlagUntilTimeout>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d001      	beq.n	8008e98 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	e04d      	b.n	8008f34 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	2bff      	cmp	r3, #255	; 0xff
 8008ea0:	d90e      	bls.n	8008ec0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	22ff      	movs	r2, #255	; 0xff
 8008ea6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eac:	b2da      	uxtb	r2, r3
 8008eae:	8979      	ldrh	r1, [r7, #10]
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	9300      	str	r3, [sp, #0]
 8008eb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f000 fd51 	bl	8009960 <I2C_TransferConfig>
 8008ebe:	e00f      	b.n	8008ee0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ece:	b2da      	uxtb	r2, r3
 8008ed0:	8979      	ldrh	r1, [r7, #10]
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	9300      	str	r3, [sp, #0]
 8008ed6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008eda:	68f8      	ldr	r0, [r7, #12]
 8008edc:	f000 fd40 	bl	8009960 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d19e      	bne.n	8008e28 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008eea:	697a      	ldr	r2, [r7, #20]
 8008eec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	f000 fb94 	bl	800961c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d001      	beq.n	8008efe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	e01a      	b.n	8008f34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2220      	movs	r2, #32
 8008f04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	6859      	ldr	r1, [r3, #4]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	4b0a      	ldr	r3, [pc, #40]	; (8008f3c <HAL_I2C_Mem_Write+0x224>)
 8008f12:	400b      	ands	r3, r1
 8008f14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2220      	movs	r2, #32
 8008f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	e000      	b.n	8008f34 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008f32:	2302      	movs	r3, #2
  }
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3718      	adds	r7, #24
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	fe00e800 	.word	0xfe00e800

08008f40 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b088      	sub	sp, #32
 8008f44:	af02      	add	r7, sp, #8
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	4608      	mov	r0, r1
 8008f4a:	4611      	mov	r1, r2
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	4603      	mov	r3, r0
 8008f50:	817b      	strh	r3, [r7, #10]
 8008f52:	460b      	mov	r3, r1
 8008f54:	813b      	strh	r3, [r7, #8]
 8008f56:	4613      	mov	r3, r2
 8008f58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b20      	cmp	r3, #32
 8008f64:	f040 80fd 	bne.w	8009162 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f68:	6a3b      	ldr	r3, [r7, #32]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d002      	beq.n	8008f74 <HAL_I2C_Mem_Read+0x34>
 8008f6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d105      	bne.n	8008f80 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f7a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e0f1      	b.n	8009164 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d101      	bne.n	8008f8e <HAL_I2C_Mem_Read+0x4e>
 8008f8a:	2302      	movs	r3, #2
 8008f8c:	e0ea      	b.n	8009164 <HAL_I2C_Mem_Read+0x224>
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2201      	movs	r2, #1
 8008f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008f96:	f7fd fc4b 	bl	8006830 <HAL_GetTick>
 8008f9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	2319      	movs	r3, #25
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008fa8:	68f8      	ldr	r0, [r7, #12]
 8008faa:	f000 fab7 	bl	800951c <I2C_WaitOnFlagUntilTimeout>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d001      	beq.n	8008fb8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e0d5      	b.n	8009164 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2222      	movs	r2, #34	; 0x22
 8008fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2240      	movs	r2, #64	; 0x40
 8008fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	6a3a      	ldr	r2, [r7, #32]
 8008fd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008fe0:	88f8      	ldrh	r0, [r7, #6]
 8008fe2:	893a      	ldrh	r2, [r7, #8]
 8008fe4:	8979      	ldrh	r1, [r7, #10]
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	9301      	str	r3, [sp, #4]
 8008fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fec:	9300      	str	r3, [sp, #0]
 8008fee:	4603      	mov	r3, r0
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f000 fa1b 	bl	800942c <I2C_RequestMemoryRead>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d005      	beq.n	8009008 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e0ad      	b.n	8009164 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800900c:	b29b      	uxth	r3, r3
 800900e:	2bff      	cmp	r3, #255	; 0xff
 8009010:	d90e      	bls.n	8009030 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	22ff      	movs	r2, #255	; 0xff
 8009016:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800901c:	b2da      	uxtb	r2, r3
 800901e:	8979      	ldrh	r1, [r7, #10]
 8009020:	4b52      	ldr	r3, [pc, #328]	; (800916c <HAL_I2C_Mem_Read+0x22c>)
 8009022:	9300      	str	r3, [sp, #0]
 8009024:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f000 fc99 	bl	8009960 <I2C_TransferConfig>
 800902e:	e00f      	b.n	8009050 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009034:	b29a      	uxth	r2, r3
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800903e:	b2da      	uxtb	r2, r3
 8009040:	8979      	ldrh	r1, [r7, #10]
 8009042:	4b4a      	ldr	r3, [pc, #296]	; (800916c <HAL_I2C_Mem_Read+0x22c>)
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800904a:	68f8      	ldr	r0, [r7, #12]
 800904c:	f000 fc88 	bl	8009960 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009056:	2200      	movs	r2, #0
 8009058:	2104      	movs	r1, #4
 800905a:	68f8      	ldr	r0, [r7, #12]
 800905c:	f000 fa5e 	bl	800951c <I2C_WaitOnFlagUntilTimeout>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d001      	beq.n	800906a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	e07c      	b.n	8009164 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009074:	b2d2      	uxtb	r2, r2
 8009076:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907c:	1c5a      	adds	r2, r3, #1
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009086:	3b01      	subs	r3, #1
 8009088:	b29a      	uxth	r2, r3
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009092:	b29b      	uxth	r3, r3
 8009094:	3b01      	subs	r3, #1
 8009096:	b29a      	uxth	r2, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d034      	beq.n	8009110 <HAL_I2C_Mem_Read+0x1d0>
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d130      	bne.n	8009110 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b4:	2200      	movs	r2, #0
 80090b6:	2180      	movs	r1, #128	; 0x80
 80090b8:	68f8      	ldr	r0, [r7, #12]
 80090ba:	f000 fa2f 	bl	800951c <I2C_WaitOnFlagUntilTimeout>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d001      	beq.n	80090c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	e04d      	b.n	8009164 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	2bff      	cmp	r3, #255	; 0xff
 80090d0:	d90e      	bls.n	80090f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	22ff      	movs	r2, #255	; 0xff
 80090d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090dc:	b2da      	uxtb	r2, r3
 80090de:	8979      	ldrh	r1, [r7, #10]
 80090e0:	2300      	movs	r3, #0
 80090e2:	9300      	str	r3, [sp, #0]
 80090e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090e8:	68f8      	ldr	r0, [r7, #12]
 80090ea:	f000 fc39 	bl	8009960 <I2C_TransferConfig>
 80090ee:	e00f      	b.n	8009110 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090fe:	b2da      	uxtb	r2, r3
 8009100:	8979      	ldrh	r1, [r7, #10]
 8009102:	2300      	movs	r3, #0
 8009104:	9300      	str	r3, [sp, #0]
 8009106:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f000 fc28 	bl	8009960 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009114:	b29b      	uxth	r3, r3
 8009116:	2b00      	cmp	r3, #0
 8009118:	d19a      	bne.n	8009050 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800911a:	697a      	ldr	r2, [r7, #20]
 800911c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	f000 fa7c 	bl	800961c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d001      	beq.n	800912e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e01a      	b.n	8009164 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2220      	movs	r2, #32
 8009134:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	6859      	ldr	r1, [r3, #4]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	4b0b      	ldr	r3, [pc, #44]	; (8009170 <HAL_I2C_Mem_Read+0x230>)
 8009142:	400b      	ands	r3, r1
 8009144:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2220      	movs	r2, #32
 800914a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800915e:	2300      	movs	r3, #0
 8009160:	e000      	b.n	8009164 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009162:	2302      	movs	r3, #2
  }
}
 8009164:	4618      	mov	r0, r3
 8009166:	3718      	adds	r7, #24
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	80002400 	.word	0x80002400
 8009170:	fe00e800 	.word	0xfe00e800

08009174 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b08a      	sub	sp, #40	; 0x28
 8009178:	af02      	add	r7, sp, #8
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	607a      	str	r2, [r7, #4]
 800917e:	603b      	str	r3, [r7, #0]
 8009180:	460b      	mov	r3, r1
 8009182:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8009184:	2300      	movs	r3, #0
 8009186:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800918e:	b2db      	uxtb	r3, r3
 8009190:	2b20      	cmp	r3, #32
 8009192:	f040 80ef 	bne.w	8009374 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	699b      	ldr	r3, [r3, #24]
 800919c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091a4:	d101      	bne.n	80091aa <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80091a6:	2302      	movs	r3, #2
 80091a8:	e0e5      	b.n	8009376 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d101      	bne.n	80091b8 <HAL_I2C_IsDeviceReady+0x44>
 80091b4:	2302      	movs	r3, #2
 80091b6:	e0de      	b.n	8009376 <HAL_I2C_IsDeviceReady+0x202>
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2224      	movs	r2, #36	; 0x24
 80091c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d105      	bne.n	80091e2 <HAL_I2C_IsDeviceReady+0x6e>
 80091d6:	897b      	ldrh	r3, [r7, #10]
 80091d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80091dc:	4b68      	ldr	r3, [pc, #416]	; (8009380 <HAL_I2C_IsDeviceReady+0x20c>)
 80091de:	4313      	orrs	r3, r2
 80091e0:	e004      	b.n	80091ec <HAL_I2C_IsDeviceReady+0x78>
 80091e2:	897b      	ldrh	r3, [r7, #10]
 80091e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091e8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	6812      	ldr	r2, [r2, #0]
 80091f0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80091f2:	f7fd fb1d 	bl	8006830 <HAL_GetTick>
 80091f6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	699b      	ldr	r3, [r3, #24]
 80091fe:	f003 0320 	and.w	r3, r3, #32
 8009202:	2b20      	cmp	r3, #32
 8009204:	bf0c      	ite	eq
 8009206:	2301      	moveq	r3, #1
 8009208:	2300      	movne	r3, #0
 800920a:	b2db      	uxtb	r3, r3
 800920c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	699b      	ldr	r3, [r3, #24]
 8009214:	f003 0310 	and.w	r3, r3, #16
 8009218:	2b10      	cmp	r3, #16
 800921a:	bf0c      	ite	eq
 800921c:	2301      	moveq	r3, #1
 800921e:	2300      	movne	r3, #0
 8009220:	b2db      	uxtb	r3, r3
 8009222:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8009224:	e034      	b.n	8009290 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800922c:	d01a      	beq.n	8009264 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800922e:	f7fd faff 	bl	8006830 <HAL_GetTick>
 8009232:	4602      	mov	r2, r0
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	1ad3      	subs	r3, r2, r3
 8009238:	683a      	ldr	r2, [r7, #0]
 800923a:	429a      	cmp	r2, r3
 800923c:	d302      	bcc.n	8009244 <HAL_I2C_IsDeviceReady+0xd0>
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d10f      	bne.n	8009264 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2220      	movs	r2, #32
 8009248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009250:	f043 0220 	orr.w	r2, r3, #32
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2200      	movs	r2, #0
 800925c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	e088      	b.n	8009376 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	699b      	ldr	r3, [r3, #24]
 800926a:	f003 0320 	and.w	r3, r3, #32
 800926e:	2b20      	cmp	r3, #32
 8009270:	bf0c      	ite	eq
 8009272:	2301      	moveq	r3, #1
 8009274:	2300      	movne	r3, #0
 8009276:	b2db      	uxtb	r3, r3
 8009278:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	699b      	ldr	r3, [r3, #24]
 8009280:	f003 0310 	and.w	r3, r3, #16
 8009284:	2b10      	cmp	r3, #16
 8009286:	bf0c      	ite	eq
 8009288:	2301      	moveq	r3, #1
 800928a:	2300      	movne	r3, #0
 800928c:	b2db      	uxtb	r3, r3
 800928e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8009290:	7ffb      	ldrb	r3, [r7, #31]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d102      	bne.n	800929c <HAL_I2C_IsDeviceReady+0x128>
 8009296:	7fbb      	ldrb	r3, [r7, #30]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d0c4      	beq.n	8009226 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	699b      	ldr	r3, [r3, #24]
 80092a2:	f003 0310 	and.w	r3, r3, #16
 80092a6:	2b10      	cmp	r3, #16
 80092a8:	d01a      	beq.n	80092e0 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	9300      	str	r3, [sp, #0]
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	2200      	movs	r2, #0
 80092b2:	2120      	movs	r1, #32
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f000 f931 	bl	800951c <I2C_WaitOnFlagUntilTimeout>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d001      	beq.n	80092c4 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	e058      	b.n	8009376 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2220      	movs	r2, #32
 80092ca:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2220      	movs	r2, #32
 80092d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80092dc:	2300      	movs	r3, #0
 80092de:	e04a      	b.n	8009376 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	9300      	str	r3, [sp, #0]
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	2200      	movs	r2, #0
 80092e8:	2120      	movs	r1, #32
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f000 f916 	bl	800951c <I2C_WaitOnFlagUntilTimeout>
 80092f0:	4603      	mov	r3, r0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d001      	beq.n	80092fa <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80092f6:	2301      	movs	r3, #1
 80092f8:	e03d      	b.n	8009376 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2210      	movs	r2, #16
 8009300:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2220      	movs	r2, #32
 8009308:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	429a      	cmp	r2, r3
 8009310:	d118      	bne.n	8009344 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	685a      	ldr	r2, [r3, #4]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009320:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	9300      	str	r3, [sp, #0]
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	2200      	movs	r2, #0
 800932a:	2120      	movs	r1, #32
 800932c:	68f8      	ldr	r0, [r7, #12]
 800932e:	f000 f8f5 	bl	800951c <I2C_WaitOnFlagUntilTimeout>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d001      	beq.n	800933c <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	e01c      	b.n	8009376 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2220      	movs	r2, #32
 8009342:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	3301      	adds	r3, #1
 8009348:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	429a      	cmp	r2, r3
 8009350:	f63f af3d 	bhi.w	80091ce <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2220      	movs	r2, #32
 8009358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009360:	f043 0220 	orr.w	r2, r3, #32
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2200      	movs	r2, #0
 800936c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009370:	2301      	movs	r3, #1
 8009372:	e000      	b.n	8009376 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8009374:	2302      	movs	r3, #2
  }
}
 8009376:	4618      	mov	r0, r3
 8009378:	3720      	adds	r7, #32
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	02002000 	.word	0x02002000

08009384 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af02      	add	r7, sp, #8
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	4608      	mov	r0, r1
 800938e:	4611      	mov	r1, r2
 8009390:	461a      	mov	r2, r3
 8009392:	4603      	mov	r3, r0
 8009394:	817b      	strh	r3, [r7, #10]
 8009396:	460b      	mov	r3, r1
 8009398:	813b      	strh	r3, [r7, #8]
 800939a:	4613      	mov	r3, r2
 800939c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800939e:	88fb      	ldrh	r3, [r7, #6]
 80093a0:	b2da      	uxtb	r2, r3
 80093a2:	8979      	ldrh	r1, [r7, #10]
 80093a4:	4b20      	ldr	r3, [pc, #128]	; (8009428 <I2C_RequestMemoryWrite+0xa4>)
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	f000 fad7 	bl	8009960 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80093b2:	69fa      	ldr	r2, [r7, #28]
 80093b4:	69b9      	ldr	r1, [r7, #24]
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f000 f8f0 	bl	800959c <I2C_WaitOnTXISFlagUntilTimeout>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d001      	beq.n	80093c6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e02c      	b.n	8009420 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80093c6:	88fb      	ldrh	r3, [r7, #6]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d105      	bne.n	80093d8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80093cc:	893b      	ldrh	r3, [r7, #8]
 80093ce:	b2da      	uxtb	r2, r3
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	629a      	str	r2, [r3, #40]	; 0x28
 80093d6:	e015      	b.n	8009404 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80093d8:	893b      	ldrh	r3, [r7, #8]
 80093da:	0a1b      	lsrs	r3, r3, #8
 80093dc:	b29b      	uxth	r3, r3
 80093de:	b2da      	uxtb	r2, r3
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80093e6:	69fa      	ldr	r2, [r7, #28]
 80093e8:	69b9      	ldr	r1, [r7, #24]
 80093ea:	68f8      	ldr	r0, [r7, #12]
 80093ec:	f000 f8d6 	bl	800959c <I2C_WaitOnTXISFlagUntilTimeout>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d001      	beq.n	80093fa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	e012      	b.n	8009420 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80093fa:	893b      	ldrh	r3, [r7, #8]
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	2200      	movs	r2, #0
 800940c:	2180      	movs	r1, #128	; 0x80
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f000 f884 	bl	800951c <I2C_WaitOnFlagUntilTimeout>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d001      	beq.n	800941e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	e000      	b.n	8009420 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800941e:	2300      	movs	r3, #0
}
 8009420:	4618      	mov	r0, r3
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	80002000 	.word	0x80002000

0800942c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b086      	sub	sp, #24
 8009430:	af02      	add	r7, sp, #8
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	4608      	mov	r0, r1
 8009436:	4611      	mov	r1, r2
 8009438:	461a      	mov	r2, r3
 800943a:	4603      	mov	r3, r0
 800943c:	817b      	strh	r3, [r7, #10]
 800943e:	460b      	mov	r3, r1
 8009440:	813b      	strh	r3, [r7, #8]
 8009442:	4613      	mov	r3, r2
 8009444:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009446:	88fb      	ldrh	r3, [r7, #6]
 8009448:	b2da      	uxtb	r2, r3
 800944a:	8979      	ldrh	r1, [r7, #10]
 800944c:	4b20      	ldr	r3, [pc, #128]	; (80094d0 <I2C_RequestMemoryRead+0xa4>)
 800944e:	9300      	str	r3, [sp, #0]
 8009450:	2300      	movs	r3, #0
 8009452:	68f8      	ldr	r0, [r7, #12]
 8009454:	f000 fa84 	bl	8009960 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009458:	69fa      	ldr	r2, [r7, #28]
 800945a:	69b9      	ldr	r1, [r7, #24]
 800945c:	68f8      	ldr	r0, [r7, #12]
 800945e:	f000 f89d 	bl	800959c <I2C_WaitOnTXISFlagUntilTimeout>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d001      	beq.n	800946c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	e02c      	b.n	80094c6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800946c:	88fb      	ldrh	r3, [r7, #6]
 800946e:	2b01      	cmp	r3, #1
 8009470:	d105      	bne.n	800947e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009472:	893b      	ldrh	r3, [r7, #8]
 8009474:	b2da      	uxtb	r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	629a      	str	r2, [r3, #40]	; 0x28
 800947c:	e015      	b.n	80094aa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800947e:	893b      	ldrh	r3, [r7, #8]
 8009480:	0a1b      	lsrs	r3, r3, #8
 8009482:	b29b      	uxth	r3, r3
 8009484:	b2da      	uxtb	r2, r3
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800948c:	69fa      	ldr	r2, [r7, #28]
 800948e:	69b9      	ldr	r1, [r7, #24]
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f000 f883 	bl	800959c <I2C_WaitOnTXISFlagUntilTimeout>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d001      	beq.n	80094a0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	e012      	b.n	80094c6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80094a0:	893b      	ldrh	r3, [r7, #8]
 80094a2:	b2da      	uxtb	r2, r3
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	9300      	str	r3, [sp, #0]
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	2200      	movs	r2, #0
 80094b2:	2140      	movs	r1, #64	; 0x40
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f000 f831 	bl	800951c <I2C_WaitOnFlagUntilTimeout>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d001      	beq.n	80094c4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80094c0:	2301      	movs	r3, #1
 80094c2:	e000      	b.n	80094c6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3710      	adds	r7, #16
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	80002000 	.word	0x80002000

080094d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	f003 0302 	and.w	r3, r3, #2
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d103      	bne.n	80094f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2200      	movs	r2, #0
 80094f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	699b      	ldr	r3, [r3, #24]
 80094f8:	f003 0301 	and.w	r3, r3, #1
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d007      	beq.n	8009510 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	699a      	ldr	r2, [r3, #24]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f042 0201 	orr.w	r2, r2, #1
 800950e:	619a      	str	r2, [r3, #24]
  }
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	603b      	str	r3, [r7, #0]
 8009528:	4613      	mov	r3, r2
 800952a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800952c:	e022      	b.n	8009574 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009534:	d01e      	beq.n	8009574 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009536:	f7fd f97b 	bl	8006830 <HAL_GetTick>
 800953a:	4602      	mov	r2, r0
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	1ad3      	subs	r3, r2, r3
 8009540:	683a      	ldr	r2, [r7, #0]
 8009542:	429a      	cmp	r2, r3
 8009544:	d302      	bcc.n	800954c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d113      	bne.n	8009574 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009550:	f043 0220 	orr.w	r2, r3, #32
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2220      	movs	r2, #32
 800955c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2200      	movs	r2, #0
 800956c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009570:	2301      	movs	r3, #1
 8009572:	e00f      	b.n	8009594 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	699a      	ldr	r2, [r3, #24]
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	4013      	ands	r3, r2
 800957e:	68ba      	ldr	r2, [r7, #8]
 8009580:	429a      	cmp	r2, r3
 8009582:	bf0c      	ite	eq
 8009584:	2301      	moveq	r3, #1
 8009586:	2300      	movne	r3, #0
 8009588:	b2db      	uxtb	r3, r3
 800958a:	461a      	mov	r2, r3
 800958c:	79fb      	ldrb	r3, [r7, #7]
 800958e:	429a      	cmp	r2, r3
 8009590:	d0cd      	beq.n	800952e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009592:	2300      	movs	r3, #0
}
 8009594:	4618      	mov	r0, r3
 8009596:	3710      	adds	r7, #16
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80095a8:	e02c      	b.n	8009604 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	68b9      	ldr	r1, [r7, #8]
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	f000 f8ea 	bl	8009788 <I2C_IsErrorOccurred>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d001      	beq.n	80095be <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e02a      	b.n	8009614 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c4:	d01e      	beq.n	8009604 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095c6:	f7fd f933 	bl	8006830 <HAL_GetTick>
 80095ca:	4602      	mov	r2, r0
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	1ad3      	subs	r3, r2, r3
 80095d0:	68ba      	ldr	r2, [r7, #8]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d302      	bcc.n	80095dc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d113      	bne.n	8009604 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095e0:	f043 0220 	orr.w	r2, r3, #32
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2220      	movs	r2, #32
 80095ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	e007      	b.n	8009614 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	699b      	ldr	r3, [r3, #24]
 800960a:	f003 0302 	and.w	r3, r3, #2
 800960e:	2b02      	cmp	r3, #2
 8009610:	d1cb      	bne.n	80095aa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009628:	e028      	b.n	800967c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	68b9      	ldr	r1, [r7, #8]
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f000 f8aa 	bl	8009788 <I2C_IsErrorOccurred>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d001      	beq.n	800963e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	e026      	b.n	800968c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800963e:	f7fd f8f7 	bl	8006830 <HAL_GetTick>
 8009642:	4602      	mov	r2, r0
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	1ad3      	subs	r3, r2, r3
 8009648:	68ba      	ldr	r2, [r7, #8]
 800964a:	429a      	cmp	r2, r3
 800964c:	d302      	bcc.n	8009654 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d113      	bne.n	800967c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009658:	f043 0220 	orr.w	r2, r3, #32
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2220      	movs	r2, #32
 8009664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2200      	movs	r2, #0
 800966c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	e007      	b.n	800968c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	699b      	ldr	r3, [r3, #24]
 8009682:	f003 0320 	and.w	r3, r3, #32
 8009686:	2b20      	cmp	r3, #32
 8009688:	d1cf      	bne.n	800962a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800968a:	2300      	movs	r3, #0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80096a0:	e064      	b.n	800976c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	68b9      	ldr	r1, [r7, #8]
 80096a6:	68f8      	ldr	r0, [r7, #12]
 80096a8:	f000 f86e 	bl	8009788 <I2C_IsErrorOccurred>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d001      	beq.n	80096b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80096b2:	2301      	movs	r3, #1
 80096b4:	e062      	b.n	800977c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	699b      	ldr	r3, [r3, #24]
 80096bc:	f003 0320 	and.w	r3, r3, #32
 80096c0:	2b20      	cmp	r3, #32
 80096c2:	d138      	bne.n	8009736 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	699b      	ldr	r3, [r3, #24]
 80096ca:	f003 0304 	and.w	r3, r3, #4
 80096ce:	2b04      	cmp	r3, #4
 80096d0:	d105      	bne.n	80096de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d001      	beq.n	80096de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80096da:	2300      	movs	r3, #0
 80096dc:	e04e      	b.n	800977c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	699b      	ldr	r3, [r3, #24]
 80096e4:	f003 0310 	and.w	r3, r3, #16
 80096e8:	2b10      	cmp	r3, #16
 80096ea:	d107      	bne.n	80096fc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2210      	movs	r2, #16
 80096f2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2204      	movs	r2, #4
 80096f8:	645a      	str	r2, [r3, #68]	; 0x44
 80096fa:	e002      	b.n	8009702 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2200      	movs	r2, #0
 8009700:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2220      	movs	r2, #32
 8009708:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	6859      	ldr	r1, [r3, #4]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	4b1b      	ldr	r3, [pc, #108]	; (8009784 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8009716:	400b      	ands	r3, r1
 8009718:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2220      	movs	r2, #32
 800971e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2200      	movs	r2, #0
 8009726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	e022      	b.n	800977c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009736:	f7fd f87b 	bl	8006830 <HAL_GetTick>
 800973a:	4602      	mov	r2, r0
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	1ad3      	subs	r3, r2, r3
 8009740:	68ba      	ldr	r2, [r7, #8]
 8009742:	429a      	cmp	r2, r3
 8009744:	d302      	bcc.n	800974c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d10f      	bne.n	800976c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009750:	f043 0220 	orr.w	r2, r3, #32
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2220      	movs	r2, #32
 800975c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2200      	movs	r2, #0
 8009764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	e007      	b.n	800977c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	699b      	ldr	r3, [r3, #24]
 8009772:	f003 0304 	and.w	r3, r3, #4
 8009776:	2b04      	cmp	r3, #4
 8009778:	d193      	bne.n	80096a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	fe00e800 	.word	0xfe00e800

08009788 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b08a      	sub	sp, #40	; 0x28
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009794:	2300      	movs	r3, #0
 8009796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	699b      	ldr	r3, [r3, #24]
 80097a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80097a2:	2300      	movs	r3, #0
 80097a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	f003 0310 	and.w	r3, r3, #16
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d075      	beq.n	80098a0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2210      	movs	r2, #16
 80097ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80097bc:	e056      	b.n	800986c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c4:	d052      	beq.n	800986c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80097c6:	f7fd f833 	bl	8006830 <HAL_GetTick>
 80097ca:	4602      	mov	r2, r0
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	1ad3      	subs	r3, r2, r3
 80097d0:	68ba      	ldr	r2, [r7, #8]
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d302      	bcc.n	80097dc <I2C_IsErrorOccurred+0x54>
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d147      	bne.n	800986c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80097ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	699b      	ldr	r3, [r3, #24]
 80097f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097fe:	d12e      	bne.n	800985e <I2C_IsErrorOccurred+0xd6>
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009806:	d02a      	beq.n	800985e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8009808:	7cfb      	ldrb	r3, [r7, #19]
 800980a:	2b20      	cmp	r3, #32
 800980c:	d027      	beq.n	800985e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	685a      	ldr	r2, [r3, #4]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800981c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800981e:	f7fd f807 	bl	8006830 <HAL_GetTick>
 8009822:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009824:	e01b      	b.n	800985e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009826:	f7fd f803 	bl	8006830 <HAL_GetTick>
 800982a:	4602      	mov	r2, r0
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	1ad3      	subs	r3, r2, r3
 8009830:	2b19      	cmp	r3, #25
 8009832:	d914      	bls.n	800985e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009838:	f043 0220 	orr.w	r2, r3, #32
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2220      	movs	r2, #32
 8009844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2200      	movs	r2, #0
 800984c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2200      	movs	r2, #0
 8009854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	699b      	ldr	r3, [r3, #24]
 8009864:	f003 0320 	and.w	r3, r3, #32
 8009868:	2b20      	cmp	r3, #32
 800986a:	d1dc      	bne.n	8009826 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	699b      	ldr	r3, [r3, #24]
 8009872:	f003 0320 	and.w	r3, r3, #32
 8009876:	2b20      	cmp	r3, #32
 8009878:	d003      	beq.n	8009882 <I2C_IsErrorOccurred+0xfa>
 800987a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800987e:	2b00      	cmp	r3, #0
 8009880:	d09d      	beq.n	80097be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009882:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009886:	2b00      	cmp	r3, #0
 8009888:	d103      	bne.n	8009892 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2220      	movs	r2, #32
 8009890:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009892:	6a3b      	ldr	r3, [r7, #32]
 8009894:	f043 0304 	orr.w	r3, r3, #4
 8009898:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	699b      	ldr	r3, [r3, #24]
 80098a6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00b      	beq.n	80098ca <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80098b2:	6a3b      	ldr	r3, [r7, #32]
 80098b4:	f043 0301 	orr.w	r3, r3, #1
 80098b8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80098c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00b      	beq.n	80098ec <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80098d4:	6a3b      	ldr	r3, [r7, #32]
 80098d6:	f043 0308 	orr.w	r3, r3, #8
 80098da:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80098e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80098e6:	2301      	movs	r3, #1
 80098e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00b      	beq.n	800990e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80098f6:	6a3b      	ldr	r3, [r7, #32]
 80098f8:	f043 0302 	orr.w	r3, r3, #2
 80098fc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009906:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800990e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009912:	2b00      	cmp	r3, #0
 8009914:	d01c      	beq.n	8009950 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009916:	68f8      	ldr	r0, [r7, #12]
 8009918:	f7ff fddc 	bl	80094d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	6859      	ldr	r1, [r3, #4]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	4b0d      	ldr	r3, [pc, #52]	; (800995c <I2C_IsErrorOccurred+0x1d4>)
 8009928:	400b      	ands	r3, r1
 800992a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009930:	6a3b      	ldr	r3, [r7, #32]
 8009932:	431a      	orrs	r2, r3
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2220      	movs	r2, #32
 800993c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2200      	movs	r2, #0
 8009944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2200      	movs	r2, #0
 800994c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009954:	4618      	mov	r0, r3
 8009956:	3728      	adds	r7, #40	; 0x28
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	fe00e800 	.word	0xfe00e800

08009960 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009960:	b480      	push	{r7}
 8009962:	b087      	sub	sp, #28
 8009964:	af00      	add	r7, sp, #0
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	607b      	str	r3, [r7, #4]
 800996a:	460b      	mov	r3, r1
 800996c:	817b      	strh	r3, [r7, #10]
 800996e:	4613      	mov	r3, r2
 8009970:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009972:	897b      	ldrh	r3, [r7, #10]
 8009974:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009978:	7a7b      	ldrb	r3, [r7, #9]
 800997a:	041b      	lsls	r3, r3, #16
 800997c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009980:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009986:	6a3b      	ldr	r3, [r7, #32]
 8009988:	4313      	orrs	r3, r2
 800998a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800998e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	685a      	ldr	r2, [r3, #4]
 8009996:	6a3b      	ldr	r3, [r7, #32]
 8009998:	0d5b      	lsrs	r3, r3, #21
 800999a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800999e:	4b08      	ldr	r3, [pc, #32]	; (80099c0 <I2C_TransferConfig+0x60>)
 80099a0:	430b      	orrs	r3, r1
 80099a2:	43db      	mvns	r3, r3
 80099a4:	ea02 0103 	and.w	r1, r2, r3
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	697a      	ldr	r2, [r7, #20]
 80099ae:	430a      	orrs	r2, r1
 80099b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80099b2:	bf00      	nop
 80099b4:	371c      	adds	r7, #28
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop
 80099c0:	03ff63ff 	.word	0x03ff63ff

080099c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	2b20      	cmp	r3, #32
 80099d8:	d138      	bne.n	8009a4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d101      	bne.n	80099e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80099e4:	2302      	movs	r3, #2
 80099e6:	e032      	b.n	8009a4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2224      	movs	r2, #36	; 0x24
 80099f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f022 0201 	bic.w	r2, r2, #1
 8009a06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009a16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	6819      	ldr	r1, [r3, #0]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	683a      	ldr	r2, [r7, #0]
 8009a24:	430a      	orrs	r2, r1
 8009a26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f042 0201 	orr.w	r2, r2, #1
 8009a36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2220      	movs	r2, #32
 8009a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	e000      	b.n	8009a4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009a4c:	2302      	movs	r3, #2
  }
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	370c      	adds	r7, #12
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr

08009a5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009a5a:	b480      	push	{r7}
 8009a5c:	b085      	sub	sp, #20
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
 8009a62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	2b20      	cmp	r3, #32
 8009a6e:	d139      	bne.n	8009ae4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d101      	bne.n	8009a7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009a7a:	2302      	movs	r3, #2
 8009a7c:	e033      	b.n	8009ae6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2201      	movs	r2, #1
 8009a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2224      	movs	r2, #36	; 0x24
 8009a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	681a      	ldr	r2, [r3, #0]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f022 0201 	bic.w	r2, r2, #1
 8009a9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009aac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	021b      	lsls	r3, r3, #8
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f042 0201 	orr.w	r2, r2, #1
 8009ace:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2220      	movs	r2, #32
 8009ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	e000      	b.n	8009ae6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009ae4:	2302      	movs	r3, #2
  }
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3714      	adds	r7, #20
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
	...

08009af4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009af4:	b480      	push	{r7}
 8009af6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009af8:	4b05      	ldr	r3, [pc, #20]	; (8009b10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a04      	ldr	r2, [pc, #16]	; (8009b10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b02:	6013      	str	r3, [r2, #0]
}
 8009b04:	bf00      	nop
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop
 8009b10:	40007000 	.word	0x40007000

08009b14 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009b1e:	4b23      	ldr	r3, [pc, #140]	; (8009bac <HAL_PWREx_EnableOverDrive+0x98>)
 8009b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b22:	4a22      	ldr	r2, [pc, #136]	; (8009bac <HAL_PWREx_EnableOverDrive+0x98>)
 8009b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b28:	6413      	str	r3, [r2, #64]	; 0x40
 8009b2a:	4b20      	ldr	r3, [pc, #128]	; (8009bac <HAL_PWREx_EnableOverDrive+0x98>)
 8009b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b32:	603b      	str	r3, [r7, #0]
 8009b34:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009b36:	4b1e      	ldr	r3, [pc, #120]	; (8009bb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a1d      	ldr	r2, [pc, #116]	; (8009bb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b40:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009b42:	f7fc fe75 	bl	8006830 <HAL_GetTick>
 8009b46:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009b48:	e009      	b.n	8009b5e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009b4a:	f7fc fe71 	bl	8006830 <HAL_GetTick>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	1ad3      	subs	r3, r2, r3
 8009b54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b58:	d901      	bls.n	8009b5e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8009b5a:	2303      	movs	r3, #3
 8009b5c:	e022      	b.n	8009ba4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009b5e:	4b14      	ldr	r3, [pc, #80]	; (8009bb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b6a:	d1ee      	bne.n	8009b4a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009b6c:	4b10      	ldr	r3, [pc, #64]	; (8009bb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a0f      	ldr	r2, [pc, #60]	; (8009bb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b76:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009b78:	f7fc fe5a 	bl	8006830 <HAL_GetTick>
 8009b7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009b7e:	e009      	b.n	8009b94 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009b80:	f7fc fe56 	bl	8006830 <HAL_GetTick>
 8009b84:	4602      	mov	r2, r0
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b8e:	d901      	bls.n	8009b94 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8009b90:	2303      	movs	r3, #3
 8009b92:	e007      	b.n	8009ba4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009b94:	4b06      	ldr	r3, [pc, #24]	; (8009bb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ba0:	d1ee      	bne.n	8009b80 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	40023800 	.word	0x40023800
 8009bb0:	40007000 	.word	0x40007000

08009bb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b086      	sub	sp, #24
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d101      	bne.n	8009bca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e29b      	b.n	800a102 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f003 0301 	and.w	r3, r3, #1
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	f000 8087 	beq.w	8009ce6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009bd8:	4b96      	ldr	r3, [pc, #600]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	f003 030c 	and.w	r3, r3, #12
 8009be0:	2b04      	cmp	r3, #4
 8009be2:	d00c      	beq.n	8009bfe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009be4:	4b93      	ldr	r3, [pc, #588]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	f003 030c 	and.w	r3, r3, #12
 8009bec:	2b08      	cmp	r3, #8
 8009bee:	d112      	bne.n	8009c16 <HAL_RCC_OscConfig+0x62>
 8009bf0:	4b90      	ldr	r3, [pc, #576]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009bfc:	d10b      	bne.n	8009c16 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009bfe:	4b8d      	ldr	r3, [pc, #564]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d06c      	beq.n	8009ce4 <HAL_RCC_OscConfig+0x130>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d168      	bne.n	8009ce4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	e275      	b.n	800a102 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c1e:	d106      	bne.n	8009c2e <HAL_RCC_OscConfig+0x7a>
 8009c20:	4b84      	ldr	r3, [pc, #528]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a83      	ldr	r2, [pc, #524]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c2a:	6013      	str	r3, [r2, #0]
 8009c2c:	e02e      	b.n	8009c8c <HAL_RCC_OscConfig+0xd8>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d10c      	bne.n	8009c50 <HAL_RCC_OscConfig+0x9c>
 8009c36:	4b7f      	ldr	r3, [pc, #508]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a7e      	ldr	r2, [pc, #504]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009c3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c40:	6013      	str	r3, [r2, #0]
 8009c42:	4b7c      	ldr	r3, [pc, #496]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a7b      	ldr	r2, [pc, #492]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009c48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c4c:	6013      	str	r3, [r2, #0]
 8009c4e:	e01d      	b.n	8009c8c <HAL_RCC_OscConfig+0xd8>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c58:	d10c      	bne.n	8009c74 <HAL_RCC_OscConfig+0xc0>
 8009c5a:	4b76      	ldr	r3, [pc, #472]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a75      	ldr	r2, [pc, #468]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c64:	6013      	str	r3, [r2, #0]
 8009c66:	4b73      	ldr	r3, [pc, #460]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a72      	ldr	r2, [pc, #456]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c70:	6013      	str	r3, [r2, #0]
 8009c72:	e00b      	b.n	8009c8c <HAL_RCC_OscConfig+0xd8>
 8009c74:	4b6f      	ldr	r3, [pc, #444]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a6e      	ldr	r2, [pc, #440]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c7e:	6013      	str	r3, [r2, #0]
 8009c80:	4b6c      	ldr	r3, [pc, #432]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a6b      	ldr	r2, [pc, #428]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d013      	beq.n	8009cbc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c94:	f7fc fdcc 	bl	8006830 <HAL_GetTick>
 8009c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c9a:	e008      	b.n	8009cae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c9c:	f7fc fdc8 	bl	8006830 <HAL_GetTick>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	1ad3      	subs	r3, r2, r3
 8009ca6:	2b64      	cmp	r3, #100	; 0x64
 8009ca8:	d901      	bls.n	8009cae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009caa:	2303      	movs	r3, #3
 8009cac:	e229      	b.n	800a102 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009cae:	4b61      	ldr	r3, [pc, #388]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d0f0      	beq.n	8009c9c <HAL_RCC_OscConfig+0xe8>
 8009cba:	e014      	b.n	8009ce6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cbc:	f7fc fdb8 	bl	8006830 <HAL_GetTick>
 8009cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009cc2:	e008      	b.n	8009cd6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009cc4:	f7fc fdb4 	bl	8006830 <HAL_GetTick>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	1ad3      	subs	r3, r2, r3
 8009cce:	2b64      	cmp	r3, #100	; 0x64
 8009cd0:	d901      	bls.n	8009cd6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009cd2:	2303      	movs	r3, #3
 8009cd4:	e215      	b.n	800a102 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009cd6:	4b57      	ldr	r3, [pc, #348]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d1f0      	bne.n	8009cc4 <HAL_RCC_OscConfig+0x110>
 8009ce2:	e000      	b.n	8009ce6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f003 0302 	and.w	r3, r3, #2
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d069      	beq.n	8009dc6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009cf2:	4b50      	ldr	r3, [pc, #320]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	f003 030c 	and.w	r3, r3, #12
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d00b      	beq.n	8009d16 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009cfe:	4b4d      	ldr	r3, [pc, #308]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	f003 030c 	and.w	r3, r3, #12
 8009d06:	2b08      	cmp	r3, #8
 8009d08:	d11c      	bne.n	8009d44 <HAL_RCC_OscConfig+0x190>
 8009d0a:	4b4a      	ldr	r3, [pc, #296]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d116      	bne.n	8009d44 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009d16:	4b47      	ldr	r3, [pc, #284]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f003 0302 	and.w	r3, r3, #2
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d005      	beq.n	8009d2e <HAL_RCC_OscConfig+0x17a>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d001      	beq.n	8009d2e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e1e9      	b.n	800a102 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d2e:	4b41      	ldr	r3, [pc, #260]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	00db      	lsls	r3, r3, #3
 8009d3c:	493d      	ldr	r1, [pc, #244]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009d42:	e040      	b.n	8009dc6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d023      	beq.n	8009d94 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009d4c:	4b39      	ldr	r3, [pc, #228]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a38      	ldr	r2, [pc, #224]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009d52:	f043 0301 	orr.w	r3, r3, #1
 8009d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d58:	f7fc fd6a 	bl	8006830 <HAL_GetTick>
 8009d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d5e:	e008      	b.n	8009d72 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d60:	f7fc fd66 	bl	8006830 <HAL_GetTick>
 8009d64:	4602      	mov	r2, r0
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	1ad3      	subs	r3, r2, r3
 8009d6a:	2b02      	cmp	r3, #2
 8009d6c:	d901      	bls.n	8009d72 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8009d6e:	2303      	movs	r3, #3
 8009d70:	e1c7      	b.n	800a102 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d72:	4b30      	ldr	r3, [pc, #192]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f003 0302 	and.w	r3, r3, #2
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d0f0      	beq.n	8009d60 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d7e:	4b2d      	ldr	r3, [pc, #180]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	691b      	ldr	r3, [r3, #16]
 8009d8a:	00db      	lsls	r3, r3, #3
 8009d8c:	4929      	ldr	r1, [pc, #164]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	600b      	str	r3, [r1, #0]
 8009d92:	e018      	b.n	8009dc6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009d94:	4b27      	ldr	r3, [pc, #156]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a26      	ldr	r2, [pc, #152]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009d9a:	f023 0301 	bic.w	r3, r3, #1
 8009d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009da0:	f7fc fd46 	bl	8006830 <HAL_GetTick>
 8009da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009da6:	e008      	b.n	8009dba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009da8:	f7fc fd42 	bl	8006830 <HAL_GetTick>
 8009dac:	4602      	mov	r2, r0
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	1ad3      	subs	r3, r2, r3
 8009db2:	2b02      	cmp	r3, #2
 8009db4:	d901      	bls.n	8009dba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009db6:	2303      	movs	r3, #3
 8009db8:	e1a3      	b.n	800a102 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009dba:	4b1e      	ldr	r3, [pc, #120]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f003 0302 	and.w	r3, r3, #2
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d1f0      	bne.n	8009da8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f003 0308 	and.w	r3, r3, #8
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d038      	beq.n	8009e44 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	695b      	ldr	r3, [r3, #20]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d019      	beq.n	8009e0e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009dda:	4b16      	ldr	r3, [pc, #88]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dde:	4a15      	ldr	r2, [pc, #84]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009de0:	f043 0301 	orr.w	r3, r3, #1
 8009de4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009de6:	f7fc fd23 	bl	8006830 <HAL_GetTick>
 8009dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009dec:	e008      	b.n	8009e00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009dee:	f7fc fd1f 	bl	8006830 <HAL_GetTick>
 8009df2:	4602      	mov	r2, r0
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	1ad3      	subs	r3, r2, r3
 8009df8:	2b02      	cmp	r3, #2
 8009dfa:	d901      	bls.n	8009e00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009dfc:	2303      	movs	r3, #3
 8009dfe:	e180      	b.n	800a102 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009e00:	4b0c      	ldr	r3, [pc, #48]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e04:	f003 0302 	and.w	r3, r3, #2
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d0f0      	beq.n	8009dee <HAL_RCC_OscConfig+0x23a>
 8009e0c:	e01a      	b.n	8009e44 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009e0e:	4b09      	ldr	r3, [pc, #36]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e12:	4a08      	ldr	r2, [pc, #32]	; (8009e34 <HAL_RCC_OscConfig+0x280>)
 8009e14:	f023 0301 	bic.w	r3, r3, #1
 8009e18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e1a:	f7fc fd09 	bl	8006830 <HAL_GetTick>
 8009e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009e20:	e00a      	b.n	8009e38 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009e22:	f7fc fd05 	bl	8006830 <HAL_GetTick>
 8009e26:	4602      	mov	r2, r0
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	1ad3      	subs	r3, r2, r3
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	d903      	bls.n	8009e38 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009e30:	2303      	movs	r3, #3
 8009e32:	e166      	b.n	800a102 <HAL_RCC_OscConfig+0x54e>
 8009e34:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009e38:	4b92      	ldr	r3, [pc, #584]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 8009e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e3c:	f003 0302 	and.w	r3, r3, #2
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d1ee      	bne.n	8009e22 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f003 0304 	and.w	r3, r3, #4
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f000 80a4 	beq.w	8009f9a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009e52:	4b8c      	ldr	r3, [pc, #560]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 8009e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d10d      	bne.n	8009e7a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e5e:	4b89      	ldr	r3, [pc, #548]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 8009e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e62:	4a88      	ldr	r2, [pc, #544]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 8009e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e68:	6413      	str	r3, [r2, #64]	; 0x40
 8009e6a:	4b86      	ldr	r3, [pc, #536]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 8009e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e72:	60bb      	str	r3, [r7, #8]
 8009e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009e76:	2301      	movs	r3, #1
 8009e78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e7a:	4b83      	ldr	r3, [pc, #524]	; (800a088 <HAL_RCC_OscConfig+0x4d4>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d118      	bne.n	8009eb8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8009e86:	4b80      	ldr	r3, [pc, #512]	; (800a088 <HAL_RCC_OscConfig+0x4d4>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a7f      	ldr	r2, [pc, #508]	; (800a088 <HAL_RCC_OscConfig+0x4d4>)
 8009e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009e92:	f7fc fccd 	bl	8006830 <HAL_GetTick>
 8009e96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e98:	e008      	b.n	8009eac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e9a:	f7fc fcc9 	bl	8006830 <HAL_GetTick>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	1ad3      	subs	r3, r2, r3
 8009ea4:	2b64      	cmp	r3, #100	; 0x64
 8009ea6:	d901      	bls.n	8009eac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009ea8:	2303      	movs	r3, #3
 8009eaa:	e12a      	b.n	800a102 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009eac:	4b76      	ldr	r3, [pc, #472]	; (800a088 <HAL_RCC_OscConfig+0x4d4>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d0f0      	beq.n	8009e9a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d106      	bne.n	8009ece <HAL_RCC_OscConfig+0x31a>
 8009ec0:	4b70      	ldr	r3, [pc, #448]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 8009ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ec4:	4a6f      	ldr	r2, [pc, #444]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 8009ec6:	f043 0301 	orr.w	r3, r3, #1
 8009eca:	6713      	str	r3, [r2, #112]	; 0x70
 8009ecc:	e02d      	b.n	8009f2a <HAL_RCC_OscConfig+0x376>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d10c      	bne.n	8009ef0 <HAL_RCC_OscConfig+0x33c>
 8009ed6:	4b6b      	ldr	r3, [pc, #428]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 8009ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eda:	4a6a      	ldr	r2, [pc, #424]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 8009edc:	f023 0301 	bic.w	r3, r3, #1
 8009ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8009ee2:	4b68      	ldr	r3, [pc, #416]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 8009ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ee6:	4a67      	ldr	r2, [pc, #412]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 8009ee8:	f023 0304 	bic.w	r3, r3, #4
 8009eec:	6713      	str	r3, [r2, #112]	; 0x70
 8009eee:	e01c      	b.n	8009f2a <HAL_RCC_OscConfig+0x376>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	2b05      	cmp	r3, #5
 8009ef6:	d10c      	bne.n	8009f12 <HAL_RCC_OscConfig+0x35e>
 8009ef8:	4b62      	ldr	r3, [pc, #392]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 8009efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009efc:	4a61      	ldr	r2, [pc, #388]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 8009efe:	f043 0304 	orr.w	r3, r3, #4
 8009f02:	6713      	str	r3, [r2, #112]	; 0x70
 8009f04:	4b5f      	ldr	r3, [pc, #380]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 8009f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f08:	4a5e      	ldr	r2, [pc, #376]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 8009f0a:	f043 0301 	orr.w	r3, r3, #1
 8009f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8009f10:	e00b      	b.n	8009f2a <HAL_RCC_OscConfig+0x376>
 8009f12:	4b5c      	ldr	r3, [pc, #368]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 8009f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f16:	4a5b      	ldr	r2, [pc, #364]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 8009f18:	f023 0301 	bic.w	r3, r3, #1
 8009f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8009f1e:	4b59      	ldr	r3, [pc, #356]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 8009f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f22:	4a58      	ldr	r2, [pc, #352]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 8009f24:	f023 0304 	bic.w	r3, r3, #4
 8009f28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d015      	beq.n	8009f5e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f32:	f7fc fc7d 	bl	8006830 <HAL_GetTick>
 8009f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f38:	e00a      	b.n	8009f50 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f3a:	f7fc fc79 	bl	8006830 <HAL_GetTick>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	1ad3      	subs	r3, r2, r3
 8009f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d901      	bls.n	8009f50 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	e0d8      	b.n	800a102 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f50:	4b4c      	ldr	r3, [pc, #304]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 8009f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f54:	f003 0302 	and.w	r3, r3, #2
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d0ee      	beq.n	8009f3a <HAL_RCC_OscConfig+0x386>
 8009f5c:	e014      	b.n	8009f88 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f5e:	f7fc fc67 	bl	8006830 <HAL_GetTick>
 8009f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009f64:	e00a      	b.n	8009f7c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f66:	f7fc fc63 	bl	8006830 <HAL_GetTick>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	1ad3      	subs	r3, r2, r3
 8009f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d901      	bls.n	8009f7c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8009f78:	2303      	movs	r3, #3
 8009f7a:	e0c2      	b.n	800a102 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009f7c:	4b41      	ldr	r3, [pc, #260]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 8009f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f80:	f003 0302 	and.w	r3, r3, #2
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d1ee      	bne.n	8009f66 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009f88:	7dfb      	ldrb	r3, [r7, #23]
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d105      	bne.n	8009f9a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009f8e:	4b3d      	ldr	r3, [pc, #244]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 8009f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f92:	4a3c      	ldr	r2, [pc, #240]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 8009f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	699b      	ldr	r3, [r3, #24]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	f000 80ae 	beq.w	800a100 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009fa4:	4b37      	ldr	r3, [pc, #220]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	f003 030c 	and.w	r3, r3, #12
 8009fac:	2b08      	cmp	r3, #8
 8009fae:	d06d      	beq.n	800a08c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	699b      	ldr	r3, [r3, #24]
 8009fb4:	2b02      	cmp	r3, #2
 8009fb6:	d14b      	bne.n	800a050 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009fb8:	4b32      	ldr	r3, [pc, #200]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a31      	ldr	r2, [pc, #196]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 8009fbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fc4:	f7fc fc34 	bl	8006830 <HAL_GetTick>
 8009fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009fca:	e008      	b.n	8009fde <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fcc:	f7fc fc30 	bl	8006830 <HAL_GetTick>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	1ad3      	subs	r3, r2, r3
 8009fd6:	2b02      	cmp	r3, #2
 8009fd8:	d901      	bls.n	8009fde <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8009fda:	2303      	movs	r3, #3
 8009fdc:	e091      	b.n	800a102 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009fde:	4b29      	ldr	r3, [pc, #164]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d1f0      	bne.n	8009fcc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	69da      	ldr	r2, [r3, #28]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a1b      	ldr	r3, [r3, #32]
 8009ff2:	431a      	orrs	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff8:	019b      	lsls	r3, r3, #6
 8009ffa:	431a      	orrs	r2, r3
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a000:	085b      	lsrs	r3, r3, #1
 800a002:	3b01      	subs	r3, #1
 800a004:	041b      	lsls	r3, r3, #16
 800a006:	431a      	orrs	r2, r3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a00c:	061b      	lsls	r3, r3, #24
 800a00e:	431a      	orrs	r2, r3
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a014:	071b      	lsls	r3, r3, #28
 800a016:	491b      	ldr	r1, [pc, #108]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 800a018:	4313      	orrs	r3, r2
 800a01a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a01c:	4b19      	ldr	r3, [pc, #100]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a18      	ldr	r2, [pc, #96]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 800a022:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a028:	f7fc fc02 	bl	8006830 <HAL_GetTick>
 800a02c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a02e:	e008      	b.n	800a042 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a030:	f7fc fbfe 	bl	8006830 <HAL_GetTick>
 800a034:	4602      	mov	r2, r0
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	1ad3      	subs	r3, r2, r3
 800a03a:	2b02      	cmp	r3, #2
 800a03c:	d901      	bls.n	800a042 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800a03e:	2303      	movs	r3, #3
 800a040:	e05f      	b.n	800a102 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a042:	4b10      	ldr	r3, [pc, #64]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d0f0      	beq.n	800a030 <HAL_RCC_OscConfig+0x47c>
 800a04e:	e057      	b.n	800a100 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a050:	4b0c      	ldr	r3, [pc, #48]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4a0b      	ldr	r2, [pc, #44]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 800a056:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a05a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a05c:	f7fc fbe8 	bl	8006830 <HAL_GetTick>
 800a060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a062:	e008      	b.n	800a076 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a064:	f7fc fbe4 	bl	8006830 <HAL_GetTick>
 800a068:	4602      	mov	r2, r0
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	1ad3      	subs	r3, r2, r3
 800a06e:	2b02      	cmp	r3, #2
 800a070:	d901      	bls.n	800a076 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800a072:	2303      	movs	r3, #3
 800a074:	e045      	b.n	800a102 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a076:	4b03      	ldr	r3, [pc, #12]	; (800a084 <HAL_RCC_OscConfig+0x4d0>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d1f0      	bne.n	800a064 <HAL_RCC_OscConfig+0x4b0>
 800a082:	e03d      	b.n	800a100 <HAL_RCC_OscConfig+0x54c>
 800a084:	40023800 	.word	0x40023800
 800a088:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a08c:	4b1f      	ldr	r3, [pc, #124]	; (800a10c <HAL_RCC_OscConfig+0x558>)
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	699b      	ldr	r3, [r3, #24]
 800a096:	2b01      	cmp	r3, #1
 800a098:	d030      	beq.n	800a0fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d129      	bne.n	800a0fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d122      	bne.n	800a0fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a0b6:	68fa      	ldr	r2, [r7, #12]
 800a0b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a0bc:	4013      	ands	r3, r2
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a0c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d119      	bne.n	800a0fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d2:	085b      	lsrs	r3, r3, #1
 800a0d4:	3b01      	subs	r3, #1
 800a0d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d10f      	bne.n	800a0fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d107      	bne.n	800a0fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0f6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d001      	beq.n	800a100 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	e000      	b.n	800a102 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3718      	adds	r7, #24
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	40023800 	.word	0x40023800

0800a110 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a11a:	2300      	movs	r3, #0
 800a11c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d101      	bne.n	800a128 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a124:	2301      	movs	r3, #1
 800a126:	e0d0      	b.n	800a2ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a128:	4b6a      	ldr	r3, [pc, #424]	; (800a2d4 <HAL_RCC_ClockConfig+0x1c4>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f003 030f 	and.w	r3, r3, #15
 800a130:	683a      	ldr	r2, [r7, #0]
 800a132:	429a      	cmp	r2, r3
 800a134:	d910      	bls.n	800a158 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a136:	4b67      	ldr	r3, [pc, #412]	; (800a2d4 <HAL_RCC_ClockConfig+0x1c4>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f023 020f 	bic.w	r2, r3, #15
 800a13e:	4965      	ldr	r1, [pc, #404]	; (800a2d4 <HAL_RCC_ClockConfig+0x1c4>)
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	4313      	orrs	r3, r2
 800a144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a146:	4b63      	ldr	r3, [pc, #396]	; (800a2d4 <HAL_RCC_ClockConfig+0x1c4>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f003 030f 	and.w	r3, r3, #15
 800a14e:	683a      	ldr	r2, [r7, #0]
 800a150:	429a      	cmp	r2, r3
 800a152:	d001      	beq.n	800a158 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a154:	2301      	movs	r3, #1
 800a156:	e0b8      	b.n	800a2ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f003 0302 	and.w	r3, r3, #2
 800a160:	2b00      	cmp	r3, #0
 800a162:	d020      	beq.n	800a1a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f003 0304 	and.w	r3, r3, #4
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d005      	beq.n	800a17c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a170:	4b59      	ldr	r3, [pc, #356]	; (800a2d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	4a58      	ldr	r2, [pc, #352]	; (800a2d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a176:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a17a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f003 0308 	and.w	r3, r3, #8
 800a184:	2b00      	cmp	r3, #0
 800a186:	d005      	beq.n	800a194 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a188:	4b53      	ldr	r3, [pc, #332]	; (800a2d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	4a52      	ldr	r2, [pc, #328]	; (800a2d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a18e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a192:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a194:	4b50      	ldr	r3, [pc, #320]	; (800a2d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a196:	689b      	ldr	r3, [r3, #8]
 800a198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	689b      	ldr	r3, [r3, #8]
 800a1a0:	494d      	ldr	r1, [pc, #308]	; (800a2d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f003 0301 	and.w	r3, r3, #1
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d040      	beq.n	800a234 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d107      	bne.n	800a1ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a1ba:	4b47      	ldr	r3, [pc, #284]	; (800a2d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d115      	bne.n	800a1f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e07f      	b.n	800a2ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	d107      	bne.n	800a1e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a1d2:	4b41      	ldr	r3, [pc, #260]	; (800a2d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d109      	bne.n	800a1f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e073      	b.n	800a2ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a1e2:	4b3d      	ldr	r3, [pc, #244]	; (800a2d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f003 0302 	and.w	r3, r3, #2
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d101      	bne.n	800a1f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e06b      	b.n	800a2ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a1f2:	4b39      	ldr	r3, [pc, #228]	; (800a2d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	f023 0203 	bic.w	r2, r3, #3
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	4936      	ldr	r1, [pc, #216]	; (800a2d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a200:	4313      	orrs	r3, r2
 800a202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a204:	f7fc fb14 	bl	8006830 <HAL_GetTick>
 800a208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a20a:	e00a      	b.n	800a222 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a20c:	f7fc fb10 	bl	8006830 <HAL_GetTick>
 800a210:	4602      	mov	r2, r0
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	1ad3      	subs	r3, r2, r3
 800a216:	f241 3288 	movw	r2, #5000	; 0x1388
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d901      	bls.n	800a222 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a21e:	2303      	movs	r3, #3
 800a220:	e053      	b.n	800a2ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a222:	4b2d      	ldr	r3, [pc, #180]	; (800a2d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a224:	689b      	ldr	r3, [r3, #8]
 800a226:	f003 020c 	and.w	r2, r3, #12
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	429a      	cmp	r2, r3
 800a232:	d1eb      	bne.n	800a20c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a234:	4b27      	ldr	r3, [pc, #156]	; (800a2d4 <HAL_RCC_ClockConfig+0x1c4>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 030f 	and.w	r3, r3, #15
 800a23c:	683a      	ldr	r2, [r7, #0]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d210      	bcs.n	800a264 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a242:	4b24      	ldr	r3, [pc, #144]	; (800a2d4 <HAL_RCC_ClockConfig+0x1c4>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f023 020f 	bic.w	r2, r3, #15
 800a24a:	4922      	ldr	r1, [pc, #136]	; (800a2d4 <HAL_RCC_ClockConfig+0x1c4>)
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	4313      	orrs	r3, r2
 800a250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a252:	4b20      	ldr	r3, [pc, #128]	; (800a2d4 <HAL_RCC_ClockConfig+0x1c4>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f003 030f 	and.w	r3, r3, #15
 800a25a:	683a      	ldr	r2, [r7, #0]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d001      	beq.n	800a264 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a260:	2301      	movs	r3, #1
 800a262:	e032      	b.n	800a2ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f003 0304 	and.w	r3, r3, #4
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d008      	beq.n	800a282 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a270:	4b19      	ldr	r3, [pc, #100]	; (800a2d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	4916      	ldr	r1, [pc, #88]	; (800a2d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a27e:	4313      	orrs	r3, r2
 800a280:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f003 0308 	and.w	r3, r3, #8
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d009      	beq.n	800a2a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a28e:	4b12      	ldr	r3, [pc, #72]	; (800a2d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	00db      	lsls	r3, r3, #3
 800a29c:	490e      	ldr	r1, [pc, #56]	; (800a2d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a2a2:	f000 f821 	bl	800a2e8 <HAL_RCC_GetSysClockFreq>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	4b0b      	ldr	r3, [pc, #44]	; (800a2d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	091b      	lsrs	r3, r3, #4
 800a2ae:	f003 030f 	and.w	r3, r3, #15
 800a2b2:	490a      	ldr	r1, [pc, #40]	; (800a2dc <HAL_RCC_ClockConfig+0x1cc>)
 800a2b4:	5ccb      	ldrb	r3, [r1, r3]
 800a2b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a2ba:	4a09      	ldr	r2, [pc, #36]	; (800a2e0 <HAL_RCC_ClockConfig+0x1d0>)
 800a2bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a2be:	4b09      	ldr	r3, [pc, #36]	; (800a2e4 <HAL_RCC_ClockConfig+0x1d4>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7fc fa70 	bl	80067a8 <HAL_InitTick>

  return HAL_OK;
 800a2c8:	2300      	movs	r3, #0
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3710      	adds	r7, #16
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	40023c00 	.word	0x40023c00
 800a2d8:	40023800 	.word	0x40023800
 800a2dc:	0801933c 	.word	0x0801933c
 800a2e0:	200004b0 	.word	0x200004b0
 800a2e4:	200004b4 	.word	0x200004b4

0800a2e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a2e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a2ec:	b090      	sub	sp, #64	; 0x40
 800a2ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	637b      	str	r3, [r7, #52]	; 0x34
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a300:	4b59      	ldr	r3, [pc, #356]	; (800a468 <HAL_RCC_GetSysClockFreq+0x180>)
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	f003 030c 	and.w	r3, r3, #12
 800a308:	2b08      	cmp	r3, #8
 800a30a:	d00d      	beq.n	800a328 <HAL_RCC_GetSysClockFreq+0x40>
 800a30c:	2b08      	cmp	r3, #8
 800a30e:	f200 80a1 	bhi.w	800a454 <HAL_RCC_GetSysClockFreq+0x16c>
 800a312:	2b00      	cmp	r3, #0
 800a314:	d002      	beq.n	800a31c <HAL_RCC_GetSysClockFreq+0x34>
 800a316:	2b04      	cmp	r3, #4
 800a318:	d003      	beq.n	800a322 <HAL_RCC_GetSysClockFreq+0x3a>
 800a31a:	e09b      	b.n	800a454 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a31c:	4b53      	ldr	r3, [pc, #332]	; (800a46c <HAL_RCC_GetSysClockFreq+0x184>)
 800a31e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a320:	e09b      	b.n	800a45a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a322:	4b53      	ldr	r3, [pc, #332]	; (800a470 <HAL_RCC_GetSysClockFreq+0x188>)
 800a324:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a326:	e098      	b.n	800a45a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a328:	4b4f      	ldr	r3, [pc, #316]	; (800a468 <HAL_RCC_GetSysClockFreq+0x180>)
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a330:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a332:	4b4d      	ldr	r3, [pc, #308]	; (800a468 <HAL_RCC_GetSysClockFreq+0x180>)
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d028      	beq.n	800a390 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a33e:	4b4a      	ldr	r3, [pc, #296]	; (800a468 <HAL_RCC_GetSysClockFreq+0x180>)
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	099b      	lsrs	r3, r3, #6
 800a344:	2200      	movs	r2, #0
 800a346:	623b      	str	r3, [r7, #32]
 800a348:	627a      	str	r2, [r7, #36]	; 0x24
 800a34a:	6a3b      	ldr	r3, [r7, #32]
 800a34c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a350:	2100      	movs	r1, #0
 800a352:	4b47      	ldr	r3, [pc, #284]	; (800a470 <HAL_RCC_GetSysClockFreq+0x188>)
 800a354:	fb03 f201 	mul.w	r2, r3, r1
 800a358:	2300      	movs	r3, #0
 800a35a:	fb00 f303 	mul.w	r3, r0, r3
 800a35e:	4413      	add	r3, r2
 800a360:	4a43      	ldr	r2, [pc, #268]	; (800a470 <HAL_RCC_GetSysClockFreq+0x188>)
 800a362:	fba0 1202 	umull	r1, r2, r0, r2
 800a366:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a368:	460a      	mov	r2, r1
 800a36a:	62ba      	str	r2, [r7, #40]	; 0x28
 800a36c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a36e:	4413      	add	r3, r2
 800a370:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a374:	2200      	movs	r2, #0
 800a376:	61bb      	str	r3, [r7, #24]
 800a378:	61fa      	str	r2, [r7, #28]
 800a37a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a37e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a382:	f7f5 ffb5 	bl	80002f0 <__aeabi_uldivmod>
 800a386:	4602      	mov	r2, r0
 800a388:	460b      	mov	r3, r1
 800a38a:	4613      	mov	r3, r2
 800a38c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a38e:	e053      	b.n	800a438 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a390:	4b35      	ldr	r3, [pc, #212]	; (800a468 <HAL_RCC_GetSysClockFreq+0x180>)
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	099b      	lsrs	r3, r3, #6
 800a396:	2200      	movs	r2, #0
 800a398:	613b      	str	r3, [r7, #16]
 800a39a:	617a      	str	r2, [r7, #20]
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a3a2:	f04f 0b00 	mov.w	fp, #0
 800a3a6:	4652      	mov	r2, sl
 800a3a8:	465b      	mov	r3, fp
 800a3aa:	f04f 0000 	mov.w	r0, #0
 800a3ae:	f04f 0100 	mov.w	r1, #0
 800a3b2:	0159      	lsls	r1, r3, #5
 800a3b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a3b8:	0150      	lsls	r0, r2, #5
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	460b      	mov	r3, r1
 800a3be:	ebb2 080a 	subs.w	r8, r2, sl
 800a3c2:	eb63 090b 	sbc.w	r9, r3, fp
 800a3c6:	f04f 0200 	mov.w	r2, #0
 800a3ca:	f04f 0300 	mov.w	r3, #0
 800a3ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a3d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a3d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a3da:	ebb2 0408 	subs.w	r4, r2, r8
 800a3de:	eb63 0509 	sbc.w	r5, r3, r9
 800a3e2:	f04f 0200 	mov.w	r2, #0
 800a3e6:	f04f 0300 	mov.w	r3, #0
 800a3ea:	00eb      	lsls	r3, r5, #3
 800a3ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a3f0:	00e2      	lsls	r2, r4, #3
 800a3f2:	4614      	mov	r4, r2
 800a3f4:	461d      	mov	r5, r3
 800a3f6:	eb14 030a 	adds.w	r3, r4, sl
 800a3fa:	603b      	str	r3, [r7, #0]
 800a3fc:	eb45 030b 	adc.w	r3, r5, fp
 800a400:	607b      	str	r3, [r7, #4]
 800a402:	f04f 0200 	mov.w	r2, #0
 800a406:	f04f 0300 	mov.w	r3, #0
 800a40a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a40e:	4629      	mov	r1, r5
 800a410:	028b      	lsls	r3, r1, #10
 800a412:	4621      	mov	r1, r4
 800a414:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a418:	4621      	mov	r1, r4
 800a41a:	028a      	lsls	r2, r1, #10
 800a41c:	4610      	mov	r0, r2
 800a41e:	4619      	mov	r1, r3
 800a420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a422:	2200      	movs	r2, #0
 800a424:	60bb      	str	r3, [r7, #8]
 800a426:	60fa      	str	r2, [r7, #12]
 800a428:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a42c:	f7f5 ff60 	bl	80002f0 <__aeabi_uldivmod>
 800a430:	4602      	mov	r2, r0
 800a432:	460b      	mov	r3, r1
 800a434:	4613      	mov	r3, r2
 800a436:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a438:	4b0b      	ldr	r3, [pc, #44]	; (800a468 <HAL_RCC_GetSysClockFreq+0x180>)
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	0c1b      	lsrs	r3, r3, #16
 800a43e:	f003 0303 	and.w	r3, r3, #3
 800a442:	3301      	adds	r3, #1
 800a444:	005b      	lsls	r3, r3, #1
 800a446:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800a448:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a450:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a452:	e002      	b.n	800a45a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a454:	4b05      	ldr	r3, [pc, #20]	; (800a46c <HAL_RCC_GetSysClockFreq+0x184>)
 800a456:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a458:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3740      	adds	r7, #64	; 0x40
 800a460:	46bd      	mov	sp, r7
 800a462:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a466:	bf00      	nop
 800a468:	40023800 	.word	0x40023800
 800a46c:	00f42400 	.word	0x00f42400
 800a470:	017d7840 	.word	0x017d7840

0800a474 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a474:	b480      	push	{r7}
 800a476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a478:	4b03      	ldr	r3, [pc, #12]	; (800a488 <HAL_RCC_GetHCLKFreq+0x14>)
 800a47a:	681b      	ldr	r3, [r3, #0]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	200004b0 	.word	0x200004b0

0800a48c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a490:	f7ff fff0 	bl	800a474 <HAL_RCC_GetHCLKFreq>
 800a494:	4602      	mov	r2, r0
 800a496:	4b05      	ldr	r3, [pc, #20]	; (800a4ac <HAL_RCC_GetPCLK1Freq+0x20>)
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	0a9b      	lsrs	r3, r3, #10
 800a49c:	f003 0307 	and.w	r3, r3, #7
 800a4a0:	4903      	ldr	r1, [pc, #12]	; (800a4b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a4a2:	5ccb      	ldrb	r3, [r1, r3]
 800a4a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	40023800 	.word	0x40023800
 800a4b0:	0801934c 	.word	0x0801934c

0800a4b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a4b8:	f7ff ffdc 	bl	800a474 <HAL_RCC_GetHCLKFreq>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	4b05      	ldr	r3, [pc, #20]	; (800a4d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a4c0:	689b      	ldr	r3, [r3, #8]
 800a4c2:	0b5b      	lsrs	r3, r3, #13
 800a4c4:	f003 0307 	and.w	r3, r3, #7
 800a4c8:	4903      	ldr	r1, [pc, #12]	; (800a4d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a4ca:	5ccb      	ldrb	r3, [r1, r3]
 800a4cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	40023800 	.word	0x40023800
 800a4d8:	0801934c 	.word	0x0801934c

0800a4dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b088      	sub	sp, #32
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 0301 	and.w	r3, r3, #1
 800a500:	2b00      	cmp	r3, #0
 800a502:	d012      	beq.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a504:	4b69      	ldr	r3, [pc, #420]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	4a68      	ldr	r2, [pc, #416]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a50a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a50e:	6093      	str	r3, [r2, #8]
 800a510:	4b66      	ldr	r3, [pc, #408]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a512:	689a      	ldr	r2, [r3, #8]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a518:	4964      	ldr	r1, [pc, #400]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a51a:	4313      	orrs	r3, r2
 800a51c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a522:	2b00      	cmp	r3, #0
 800a524:	d101      	bne.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800a526:	2301      	movs	r3, #1
 800a528:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a532:	2b00      	cmp	r3, #0
 800a534:	d017      	beq.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a536:	4b5d      	ldr	r3, [pc, #372]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a53c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a544:	4959      	ldr	r1, [pc, #356]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a546:	4313      	orrs	r3, r2
 800a548:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a550:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a554:	d101      	bne.n	800a55a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800a556:	2301      	movs	r3, #1
 800a558:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d101      	bne.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800a562:	2301      	movs	r3, #1
 800a564:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d017      	beq.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a572:	4b4e      	ldr	r3, [pc, #312]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a578:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a580:	494a      	ldr	r1, [pc, #296]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a582:	4313      	orrs	r3, r2
 800a584:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a58c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a590:	d101      	bne.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800a592:	2301      	movs	r3, #1
 800a594:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d101      	bne.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d001      	beq.n	800a5b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f003 0320 	and.w	r3, r3, #32
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	f000 808b 	beq.w	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a5c0:	4b3a      	ldr	r3, [pc, #232]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a5c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c4:	4a39      	ldr	r2, [pc, #228]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a5c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5ca:	6413      	str	r3, [r2, #64]	; 0x40
 800a5cc:	4b37      	ldr	r3, [pc, #220]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a5ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5d4:	60bb      	str	r3, [r7, #8]
 800a5d6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a5d8:	4b35      	ldr	r3, [pc, #212]	; (800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a34      	ldr	r2, [pc, #208]	; (800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a5de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5e4:	f7fc f924 	bl	8006830 <HAL_GetTick>
 800a5e8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a5ea:	e008      	b.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5ec:	f7fc f920 	bl	8006830 <HAL_GetTick>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	1ad3      	subs	r3, r2, r3
 800a5f6:	2b64      	cmp	r3, #100	; 0x64
 800a5f8:	d901      	bls.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800a5fa:	2303      	movs	r3, #3
 800a5fc:	e38f      	b.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a5fe:	4b2c      	ldr	r3, [pc, #176]	; (800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a606:	2b00      	cmp	r3, #0
 800a608:	d0f0      	beq.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a60a:	4b28      	ldr	r3, [pc, #160]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a60c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a60e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a612:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d035      	beq.n	800a686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a61e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a622:	693a      	ldr	r2, [r7, #16]
 800a624:	429a      	cmp	r2, r3
 800a626:	d02e      	beq.n	800a686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a628:	4b20      	ldr	r3, [pc, #128]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a62a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a62c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a630:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a632:	4b1e      	ldr	r3, [pc, #120]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a636:	4a1d      	ldr	r2, [pc, #116]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a63c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a63e:	4b1b      	ldr	r3, [pc, #108]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a642:	4a1a      	ldr	r2, [pc, #104]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a648:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800a64a:	4a18      	ldr	r2, [pc, #96]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a650:	4b16      	ldr	r3, [pc, #88]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a654:	f003 0301 	and.w	r3, r3, #1
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d114      	bne.n	800a686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a65c:	f7fc f8e8 	bl	8006830 <HAL_GetTick>
 800a660:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a662:	e00a      	b.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a664:	f7fc f8e4 	bl	8006830 <HAL_GetTick>
 800a668:	4602      	mov	r2, r0
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	1ad3      	subs	r3, r2, r3
 800a66e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a672:	4293      	cmp	r3, r2
 800a674:	d901      	bls.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800a676:	2303      	movs	r3, #3
 800a678:	e351      	b.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a67a:	4b0c      	ldr	r3, [pc, #48]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a67c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a67e:	f003 0302 	and.w	r3, r3, #2
 800a682:	2b00      	cmp	r3, #0
 800a684:	d0ee      	beq.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a68a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a68e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a692:	d111      	bne.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800a694:	4b05      	ldr	r3, [pc, #20]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a6a0:	4b04      	ldr	r3, [pc, #16]	; (800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800a6a2:	400b      	ands	r3, r1
 800a6a4:	4901      	ldr	r1, [pc, #4]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	608b      	str	r3, [r1, #8]
 800a6aa:	e00b      	b.n	800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800a6ac:	40023800 	.word	0x40023800
 800a6b0:	40007000 	.word	0x40007000
 800a6b4:	0ffffcff 	.word	0x0ffffcff
 800a6b8:	4bac      	ldr	r3, [pc, #688]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	4aab      	ldr	r2, [pc, #684]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a6be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a6c2:	6093      	str	r3, [r2, #8]
 800a6c4:	4ba9      	ldr	r3, [pc, #676]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a6c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6d0:	49a6      	ldr	r1, [pc, #664]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f003 0310 	and.w	r3, r3, #16
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d010      	beq.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a6e2:	4ba2      	ldr	r3, [pc, #648]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a6e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6e8:	4aa0      	ldr	r2, [pc, #640]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a6ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a6ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800a6f2:	4b9e      	ldr	r3, [pc, #632]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a6f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6fc:	499b      	ldr	r1, [pc, #620]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a6fe:	4313      	orrs	r3, r2
 800a700:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d00a      	beq.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a710:	4b96      	ldr	r3, [pc, #600]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a716:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a71e:	4993      	ldr	r1, [pc, #588]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a720:	4313      	orrs	r3, r2
 800a722:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d00a      	beq.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a732:	4b8e      	ldr	r3, [pc, #568]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a738:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a740:	498a      	ldr	r1, [pc, #552]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a742:	4313      	orrs	r3, r2
 800a744:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a750:	2b00      	cmp	r3, #0
 800a752:	d00a      	beq.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a754:	4b85      	ldr	r3, [pc, #532]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a75a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a762:	4982      	ldr	r1, [pc, #520]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a764:	4313      	orrs	r3, r2
 800a766:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a772:	2b00      	cmp	r3, #0
 800a774:	d00a      	beq.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a776:	4b7d      	ldr	r3, [pc, #500]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a77c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a784:	4979      	ldr	r1, [pc, #484]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a786:	4313      	orrs	r3, r2
 800a788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a794:	2b00      	cmp	r3, #0
 800a796:	d00a      	beq.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a798:	4b74      	ldr	r3, [pc, #464]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a79a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a79e:	f023 0203 	bic.w	r2, r3, #3
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7a6:	4971      	ldr	r1, [pc, #452]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d00a      	beq.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a7ba:	4b6c      	ldr	r3, [pc, #432]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a7bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7c0:	f023 020c 	bic.w	r2, r3, #12
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7c8:	4968      	ldr	r1, [pc, #416]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d00a      	beq.n	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a7dc:	4b63      	ldr	r3, [pc, #396]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a7de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7ea:	4960      	ldr	r1, [pc, #384]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00a      	beq.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a7fe:	4b5b      	ldr	r3, [pc, #364]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a804:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a80c:	4957      	ldr	r1, [pc, #348]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a80e:	4313      	orrs	r3, r2
 800a810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00a      	beq.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a820:	4b52      	ldr	r3, [pc, #328]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a826:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a82e:	494f      	ldr	r1, [pc, #316]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a830:	4313      	orrs	r3, r2
 800a832:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d00a      	beq.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800a842:	4b4a      	ldr	r3, [pc, #296]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a848:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a850:	4946      	ldr	r1, [pc, #280]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a852:	4313      	orrs	r3, r2
 800a854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a860:	2b00      	cmp	r3, #0
 800a862:	d00a      	beq.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800a864:	4b41      	ldr	r3, [pc, #260]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a86a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a872:	493e      	ldr	r1, [pc, #248]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a874:	4313      	orrs	r3, r2
 800a876:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00a      	beq.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800a886:	4b39      	ldr	r3, [pc, #228]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a88c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a894:	4935      	ldr	r1, [pc, #212]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a896:	4313      	orrs	r3, r2
 800a898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d00a      	beq.n	800a8be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a8a8:	4b30      	ldr	r3, [pc, #192]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a8aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8b6:	492d      	ldr	r1, [pc, #180]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d011      	beq.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a8ca:	4b28      	ldr	r3, [pc, #160]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a8cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8d0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8d8:	4924      	ldr	r1, [pc, #144]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8e8:	d101      	bne.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f003 0308 	and.w	r3, r3, #8
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d001      	beq.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a906:	2b00      	cmp	r3, #0
 800a908:	d00a      	beq.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a90a:	4b18      	ldr	r3, [pc, #96]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a90c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a910:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a918:	4914      	ldr	r1, [pc, #80]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a91a:	4313      	orrs	r3, r2
 800a91c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d00b      	beq.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a92c:	4b0f      	ldr	r3, [pc, #60]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a92e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a932:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a93c:	490b      	ldr	r1, [pc, #44]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a93e:	4313      	orrs	r3, r2
 800a940:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d00f      	beq.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800a950:	4b06      	ldr	r3, [pc, #24]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a956:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a960:	4902      	ldr	r1, [pc, #8]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a962:	4313      	orrs	r3, r2
 800a964:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a968:	e002      	b.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800a96a:	bf00      	nop
 800a96c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d00b      	beq.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a97c:	4b8a      	ldr	r3, [pc, #552]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a97e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a982:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a98c:	4986      	ldr	r1, [pc, #536]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a98e:	4313      	orrs	r3, r2
 800a990:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d00b      	beq.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800a9a0:	4b81      	ldr	r3, [pc, #516]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a9a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9b0:	497d      	ldr	r1, [pc, #500]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a9b8:	69fb      	ldr	r3, [r7, #28]
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d006      	beq.n	800a9cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	f000 80d6 	beq.w	800ab78 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a9cc:	4b76      	ldr	r3, [pc, #472]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a75      	ldr	r2, [pc, #468]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a9d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a9d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9d8:	f7fb ff2a 	bl	8006830 <HAL_GetTick>
 800a9dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a9de:	e008      	b.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a9e0:	f7fb ff26 	bl	8006830 <HAL_GetTick>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	1ad3      	subs	r3, r2, r3
 800a9ea:	2b64      	cmp	r3, #100	; 0x64
 800a9ec:	d901      	bls.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a9ee:	2303      	movs	r3, #3
 800a9f0:	e195      	b.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a9f2:	4b6d      	ldr	r3, [pc, #436]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1f0      	bne.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f003 0301 	and.w	r3, r3, #1
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d021      	beq.n	800aa4e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d11d      	bne.n	800aa4e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800aa12:	4b65      	ldr	r3, [pc, #404]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800aa14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa18:	0c1b      	lsrs	r3, r3, #16
 800aa1a:	f003 0303 	and.w	r3, r3, #3
 800aa1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800aa20:	4b61      	ldr	r3, [pc, #388]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800aa22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa26:	0e1b      	lsrs	r3, r3, #24
 800aa28:	f003 030f 	and.w	r3, r3, #15
 800aa2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	019a      	lsls	r2, r3, #6
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	041b      	lsls	r3, r3, #16
 800aa38:	431a      	orrs	r2, r3
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	061b      	lsls	r3, r3, #24
 800aa3e:	431a      	orrs	r2, r3
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	071b      	lsls	r3, r3, #28
 800aa46:	4958      	ldr	r1, [pc, #352]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d004      	beq.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa62:	d00a      	beq.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d02e      	beq.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa78:	d129      	bne.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800aa7a:	4b4b      	ldr	r3, [pc, #300]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800aa7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa80:	0c1b      	lsrs	r3, r3, #16
 800aa82:	f003 0303 	and.w	r3, r3, #3
 800aa86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800aa88:	4b47      	ldr	r3, [pc, #284]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800aa8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa8e:	0f1b      	lsrs	r3, r3, #28
 800aa90:	f003 0307 	and.w	r3, r3, #7
 800aa94:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	019a      	lsls	r2, r3, #6
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	041b      	lsls	r3, r3, #16
 800aaa0:	431a      	orrs	r2, r3
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	68db      	ldr	r3, [r3, #12]
 800aaa6:	061b      	lsls	r3, r3, #24
 800aaa8:	431a      	orrs	r2, r3
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	071b      	lsls	r3, r3, #28
 800aaae:	493e      	ldr	r1, [pc, #248]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800aab0:	4313      	orrs	r3, r2
 800aab2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800aab6:	4b3c      	ldr	r3, [pc, #240]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800aab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aabc:	f023 021f 	bic.w	r2, r3, #31
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac4:	3b01      	subs	r3, #1
 800aac6:	4938      	ldr	r1, [pc, #224]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800aac8:	4313      	orrs	r3, r2
 800aaca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d01d      	beq.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800aada:	4b33      	ldr	r3, [pc, #204]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800aadc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aae0:	0e1b      	lsrs	r3, r3, #24
 800aae2:	f003 030f 	and.w	r3, r3, #15
 800aae6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800aae8:	4b2f      	ldr	r3, [pc, #188]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800aaea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aaee:	0f1b      	lsrs	r3, r3, #28
 800aaf0:	f003 0307 	and.w	r3, r3, #7
 800aaf4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	019a      	lsls	r2, r3, #6
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	691b      	ldr	r3, [r3, #16]
 800ab00:	041b      	lsls	r3, r3, #16
 800ab02:	431a      	orrs	r2, r3
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	061b      	lsls	r3, r3, #24
 800ab08:	431a      	orrs	r2, r3
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	071b      	lsls	r3, r3, #28
 800ab0e:	4926      	ldr	r1, [pc, #152]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ab10:	4313      	orrs	r3, r2
 800ab12:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d011      	beq.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	019a      	lsls	r2, r3, #6
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	691b      	ldr	r3, [r3, #16]
 800ab2c:	041b      	lsls	r3, r3, #16
 800ab2e:	431a      	orrs	r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	061b      	lsls	r3, r3, #24
 800ab36:	431a      	orrs	r2, r3
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	071b      	lsls	r3, r3, #28
 800ab3e:	491a      	ldr	r1, [pc, #104]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ab40:	4313      	orrs	r3, r2
 800ab42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ab46:	4b18      	ldr	r3, [pc, #96]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4a17      	ldr	r2, [pc, #92]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ab4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ab50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab52:	f7fb fe6d 	bl	8006830 <HAL_GetTick>
 800ab56:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ab58:	e008      	b.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ab5a:	f7fb fe69 	bl	8006830 <HAL_GetTick>
 800ab5e:	4602      	mov	r2, r0
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	1ad3      	subs	r3, r2, r3
 800ab64:	2b64      	cmp	r3, #100	; 0x64
 800ab66:	d901      	bls.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ab68:	2303      	movs	r3, #3
 800ab6a:	e0d8      	b.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ab6c:	4b0e      	ldr	r3, [pc, #56]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d0f0      	beq.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800ab78:	69bb      	ldr	r3, [r7, #24]
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	f040 80ce 	bne.w	800ad1c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ab80:	4b09      	ldr	r3, [pc, #36]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a08      	ldr	r2, [pc, #32]	; (800aba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ab86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab8c:	f7fb fe50 	bl	8006830 <HAL_GetTick>
 800ab90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ab92:	e00b      	b.n	800abac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ab94:	f7fb fe4c 	bl	8006830 <HAL_GetTick>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	1ad3      	subs	r3, r2, r3
 800ab9e:	2b64      	cmp	r3, #100	; 0x64
 800aba0:	d904      	bls.n	800abac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aba2:	2303      	movs	r3, #3
 800aba4:	e0bb      	b.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800aba6:	bf00      	nop
 800aba8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800abac:	4b5e      	ldr	r3, [pc, #376]	; (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800abb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abb8:	d0ec      	beq.n	800ab94 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d003      	beq.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d009      	beq.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d02e      	beq.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d12a      	bne.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800abe2:	4b51      	ldr	r3, [pc, #324]	; (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800abe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abe8:	0c1b      	lsrs	r3, r3, #16
 800abea:	f003 0303 	and.w	r3, r3, #3
 800abee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800abf0:	4b4d      	ldr	r3, [pc, #308]	; (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800abf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abf6:	0f1b      	lsrs	r3, r3, #28
 800abf8:	f003 0307 	and.w	r3, r3, #7
 800abfc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	695b      	ldr	r3, [r3, #20]
 800ac02:	019a      	lsls	r2, r3, #6
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	041b      	lsls	r3, r3, #16
 800ac08:	431a      	orrs	r2, r3
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	699b      	ldr	r3, [r3, #24]
 800ac0e:	061b      	lsls	r3, r3, #24
 800ac10:	431a      	orrs	r2, r3
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	071b      	lsls	r3, r3, #28
 800ac16:	4944      	ldr	r1, [pc, #272]	; (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ac1e:	4b42      	ldr	r3, [pc, #264]	; (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ac20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac24:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac2c:	3b01      	subs	r3, #1
 800ac2e:	021b      	lsls	r3, r3, #8
 800ac30:	493d      	ldr	r1, [pc, #244]	; (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ac32:	4313      	orrs	r3, r2
 800ac34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d022      	beq.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac4c:	d11d      	bne.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ac4e:	4b36      	ldr	r3, [pc, #216]	; (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ac50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac54:	0e1b      	lsrs	r3, r3, #24
 800ac56:	f003 030f 	and.w	r3, r3, #15
 800ac5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ac5c:	4b32      	ldr	r3, [pc, #200]	; (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ac5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac62:	0f1b      	lsrs	r3, r3, #28
 800ac64:	f003 0307 	and.w	r3, r3, #7
 800ac68:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	695b      	ldr	r3, [r3, #20]
 800ac6e:	019a      	lsls	r2, r3, #6
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6a1b      	ldr	r3, [r3, #32]
 800ac74:	041b      	lsls	r3, r3, #16
 800ac76:	431a      	orrs	r2, r3
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	061b      	lsls	r3, r3, #24
 800ac7c:	431a      	orrs	r2, r3
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	071b      	lsls	r3, r3, #28
 800ac82:	4929      	ldr	r1, [pc, #164]	; (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ac84:	4313      	orrs	r3, r2
 800ac86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f003 0308 	and.w	r3, r3, #8
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d028      	beq.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ac96:	4b24      	ldr	r3, [pc, #144]	; (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ac98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac9c:	0e1b      	lsrs	r3, r3, #24
 800ac9e:	f003 030f 	and.w	r3, r3, #15
 800aca2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800aca4:	4b20      	ldr	r3, [pc, #128]	; (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800aca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acaa:	0c1b      	lsrs	r3, r3, #16
 800acac:	f003 0303 	and.w	r3, r3, #3
 800acb0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	695b      	ldr	r3, [r3, #20]
 800acb6:	019a      	lsls	r2, r3, #6
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	041b      	lsls	r3, r3, #16
 800acbc:	431a      	orrs	r2, r3
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	061b      	lsls	r3, r3, #24
 800acc2:	431a      	orrs	r2, r3
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	69db      	ldr	r3, [r3, #28]
 800acc8:	071b      	lsls	r3, r3, #28
 800acca:	4917      	ldr	r1, [pc, #92]	; (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800accc:	4313      	orrs	r3, r2
 800acce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800acd2:	4b15      	ldr	r3, [pc, #84]	; (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800acd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800acd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace0:	4911      	ldr	r1, [pc, #68]	; (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ace2:	4313      	orrs	r3, r2
 800ace4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800ace8:	4b0f      	ldr	r3, [pc, #60]	; (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a0e      	ldr	r2, [pc, #56]	; (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800acee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800acf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800acf4:	f7fb fd9c 	bl	8006830 <HAL_GetTick>
 800acf8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800acfa:	e008      	b.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800acfc:	f7fb fd98 	bl	8006830 <HAL_GetTick>
 800ad00:	4602      	mov	r2, r0
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	1ad3      	subs	r3, r2, r3
 800ad06:	2b64      	cmp	r3, #100	; 0x64
 800ad08:	d901      	bls.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ad0a:	2303      	movs	r3, #3
 800ad0c:	e007      	b.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ad0e:	4b06      	ldr	r3, [pc, #24]	; (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad1a:	d1ef      	bne.n	800acfc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800ad1c:	2300      	movs	r3, #0
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3720      	adds	r7, #32
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	40023800 	.word	0x40023800

0800ad2c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d101      	bne.n	800ad3e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e081      	b.n	800ae42 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	7f5b      	ldrb	r3, [r3, #29]
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d105      	bne.n	800ad54 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f7fa fbf4 	bl	800553c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2202      	movs	r2, #2
 800ad58:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	22ca      	movs	r2, #202	; 0xca
 800ad60:	625a      	str	r2, [r3, #36]	; 0x24
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2253      	movs	r2, #83	; 0x53
 800ad68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 faac 	bl	800b2c8 <RTC_EnterInitMode>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d008      	beq.n	800ad88 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	22ff      	movs	r2, #255	; 0xff
 800ad7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2204      	movs	r2, #4
 800ad82:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800ad84:	2301      	movs	r3, #1
 800ad86:	e05c      	b.n	800ae42 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	6899      	ldr	r1, [r3, #8]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	4b2e      	ldr	r3, [pc, #184]	; (800ae4c <HAL_RTC_Init+0x120>)
 800ad94:	400b      	ands	r3, r1
 800ad96:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	6899      	ldr	r1, [r3, #8]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	685a      	ldr	r2, [r3, #4]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	691b      	ldr	r3, [r3, #16]
 800ada6:	431a      	orrs	r2, r3
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	695b      	ldr	r3, [r3, #20]
 800adac:	431a      	orrs	r2, r3
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	430a      	orrs	r2, r1
 800adb4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	68d2      	ldr	r2, [r2, #12]
 800adbe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	6919      	ldr	r1, [r3, #16]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	041a      	lsls	r2, r3, #16
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	430a      	orrs	r2, r1
 800add2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	68da      	ldr	r2, [r3, #12]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ade2:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	689b      	ldr	r3, [r3, #8]
 800adea:	f003 0320 	and.w	r3, r3, #32
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d10e      	bne.n	800ae10 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 fa40 	bl	800b278 <HAL_RTC_WaitForSynchro>
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d008      	beq.n	800ae10 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	22ff      	movs	r2, #255	; 0xff
 800ae04:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2204      	movs	r2, #4
 800ae0a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	e018      	b.n	800ae42 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f022 0208 	bic.w	r2, r2, #8
 800ae1e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	699a      	ldr	r2, [r3, #24]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	430a      	orrs	r2, r1
 800ae30:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	22ff      	movs	r2, #255	; 0xff
 800ae38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800ae40:	2300      	movs	r3, #0
  }
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3708      	adds	r7, #8
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	ff8fffbf 	.word	0xff8fffbf

0800ae50 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ae50:	b590      	push	{r4, r7, lr}
 800ae52:	b087      	sub	sp, #28
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	60b9      	str	r1, [r7, #8]
 800ae5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	7f1b      	ldrb	r3, [r3, #28]
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d101      	bne.n	800ae6c <HAL_RTC_SetTime+0x1c>
 800ae68:	2302      	movs	r3, #2
 800ae6a:	e0a8      	b.n	800afbe <HAL_RTC_SetTime+0x16e>
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2201      	movs	r2, #1
 800ae70:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2202      	movs	r2, #2
 800ae76:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d126      	bne.n	800aecc <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d102      	bne.n	800ae92 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	4618      	mov	r0, r3
 800ae98:	f000 fa42 	bl	800b320 <RTC_ByteToBcd2>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	785b      	ldrb	r3, [r3, #1]
 800aea4:	4618      	mov	r0, r3
 800aea6:	f000 fa3b 	bl	800b320 <RTC_ByteToBcd2>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800aeae:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	789b      	ldrb	r3, [r3, #2]
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f000 fa33 	bl	800b320 <RTC_ByteToBcd2>
 800aeba:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800aebc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	7b1b      	ldrb	r3, [r3, #12]
 800aec4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800aec6:	4313      	orrs	r3, r2
 800aec8:	617b      	str	r3, [r7, #20]
 800aeca:	e018      	b.n	800aefe <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	689b      	ldr	r3, [r3, #8]
 800aed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d102      	bne.n	800aee0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	2200      	movs	r2, #0
 800aede:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	785b      	ldrb	r3, [r3, #1]
 800aeea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800aeec:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800aeee:	68ba      	ldr	r2, [r7, #8]
 800aef0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800aef2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	7b1b      	ldrb	r3, [r3, #12]
 800aef8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800aefa:	4313      	orrs	r3, r2
 800aefc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	22ca      	movs	r2, #202	; 0xca
 800af04:	625a      	str	r2, [r3, #36]	; 0x24
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	2253      	movs	r2, #83	; 0x53
 800af0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800af0e:	68f8      	ldr	r0, [r7, #12]
 800af10:	f000 f9da 	bl	800b2c8 <RTC_EnterInitMode>
 800af14:	4603      	mov	r3, r0
 800af16:	2b00      	cmp	r3, #0
 800af18:	d00b      	beq.n	800af32 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	22ff      	movs	r2, #255	; 0xff
 800af20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2204      	movs	r2, #4
 800af26:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2200      	movs	r2, #0
 800af2c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800af2e:	2301      	movs	r3, #1
 800af30:	e045      	b.n	800afbe <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	6979      	ldr	r1, [r7, #20]
 800af38:	4b23      	ldr	r3, [pc, #140]	; (800afc8 <HAL_RTC_SetTime+0x178>)
 800af3a:	400b      	ands	r3, r1
 800af3c:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	689a      	ldr	r2, [r3, #8]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800af4c:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	6899      	ldr	r1, [r3, #8]
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	691a      	ldr	r2, [r3, #16]
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	695b      	ldr	r3, [r3, #20]
 800af5c:	431a      	orrs	r2, r3
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	430a      	orrs	r2, r1
 800af64:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	68da      	ldr	r2, [r3, #12]
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af74:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	f003 0320 	and.w	r3, r3, #32
 800af80:	2b00      	cmp	r3, #0
 800af82:	d111      	bne.n	800afa8 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	f000 f977 	bl	800b278 <HAL_RTC_WaitForSynchro>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d00b      	beq.n	800afa8 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	22ff      	movs	r2, #255	; 0xff
 800af96:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2204      	movs	r2, #4
 800af9c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2200      	movs	r2, #0
 800afa2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800afa4:	2301      	movs	r3, #1
 800afa6:	e00a      	b.n	800afbe <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	22ff      	movs	r2, #255	; 0xff
 800afae:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2201      	movs	r2, #1
 800afb4:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2200      	movs	r2, #0
 800afba:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800afbc:	2300      	movs	r3, #0
  }
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	371c      	adds	r7, #28
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd90      	pop	{r4, r7, pc}
 800afc6:	bf00      	nop
 800afc8:	007f7f7f 	.word	0x007f7f7f

0800afcc <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b086      	sub	sp, #24
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	60b9      	str	r1, [r7, #8]
 800afd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800afd8:	2300      	movs	r3, #0
 800afda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	691b      	ldr	r3, [r3, #16]
 800afec:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	4b22      	ldr	r3, [pc, #136]	; (800b084 <HAL_RTC_GetTime+0xb8>)
 800affc:	4013      	ands	r3, r2
 800affe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	0c1b      	lsrs	r3, r3, #16
 800b004:	b2db      	uxtb	r3, r3
 800b006:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b00a:	b2da      	uxtb	r2, r3
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	0a1b      	lsrs	r3, r3, #8
 800b014:	b2db      	uxtb	r3, r3
 800b016:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b01a:	b2da      	uxtb	r2, r3
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	b2db      	uxtb	r3, r3
 800b024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b028:	b2da      	uxtb	r2, r3
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	0c1b      	lsrs	r3, r3, #16
 800b032:	b2db      	uxtb	r3, r3
 800b034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b038:	b2da      	uxtb	r2, r3
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d11a      	bne.n	800b07a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	4618      	mov	r0, r3
 800b04a:	f000 f987 	bl	800b35c <RTC_Bcd2ToByte>
 800b04e:	4603      	mov	r3, r0
 800b050:	461a      	mov	r2, r3
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	785b      	ldrb	r3, [r3, #1]
 800b05a:	4618      	mov	r0, r3
 800b05c:	f000 f97e 	bl	800b35c <RTC_Bcd2ToByte>
 800b060:	4603      	mov	r3, r0
 800b062:	461a      	mov	r2, r3
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	789b      	ldrb	r3, [r3, #2]
 800b06c:	4618      	mov	r0, r3
 800b06e:	f000 f975 	bl	800b35c <RTC_Bcd2ToByte>
 800b072:	4603      	mov	r3, r0
 800b074:	461a      	mov	r2, r3
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b07a:	2300      	movs	r3, #0
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3718      	adds	r7, #24
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}
 800b084:	007f7f7f 	.word	0x007f7f7f

0800b088 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b088:	b590      	push	{r4, r7, lr}
 800b08a:	b087      	sub	sp, #28
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800b094:	2300      	movs	r3, #0
 800b096:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	7f1b      	ldrb	r3, [r3, #28]
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d101      	bne.n	800b0a4 <HAL_RTC_SetDate+0x1c>
 800b0a0:	2302      	movs	r3, #2
 800b0a2:	e092      	b.n	800b1ca <HAL_RTC_SetDate+0x142>
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2202      	movs	r2, #2
 800b0ae:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d10e      	bne.n	800b0d4 <HAL_RTC_SetDate+0x4c>
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	785b      	ldrb	r3, [r3, #1]
 800b0ba:	f003 0310 	and.w	r3, r3, #16
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d008      	beq.n	800b0d4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	785b      	ldrb	r3, [r3, #1]
 800b0c6:	f023 0310 	bic.w	r3, r3, #16
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	330a      	adds	r3, #10
 800b0ce:	b2da      	uxtb	r2, r3
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d11c      	bne.n	800b114 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	78db      	ldrb	r3, [r3, #3]
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f000 f91e 	bl	800b320 <RTC_ByteToBcd2>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	785b      	ldrb	r3, [r3, #1]
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f000 f917 	bl	800b320 <RTC_ByteToBcd2>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800b0f6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	789b      	ldrb	r3, [r3, #2]
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f000 f90f 	bl	800b320 <RTC_ByteToBcd2>
 800b102:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800b104:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800b10e:	4313      	orrs	r3, r2
 800b110:	617b      	str	r3, [r7, #20]
 800b112:	e00e      	b.n	800b132 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	78db      	ldrb	r3, [r3, #3]
 800b118:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	785b      	ldrb	r3, [r3, #1]
 800b11e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800b120:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800b122:	68ba      	ldr	r2, [r7, #8]
 800b124:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800b126:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800b12e:	4313      	orrs	r3, r2
 800b130:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	22ca      	movs	r2, #202	; 0xca
 800b138:	625a      	str	r2, [r3, #36]	; 0x24
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	2253      	movs	r2, #83	; 0x53
 800b140:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b142:	68f8      	ldr	r0, [r7, #12]
 800b144:	f000 f8c0 	bl	800b2c8 <RTC_EnterInitMode>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00b      	beq.n	800b166 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	22ff      	movs	r2, #255	; 0xff
 800b154:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2204      	movs	r2, #4
 800b15a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2200      	movs	r2, #0
 800b160:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800b162:	2301      	movs	r3, #1
 800b164:	e031      	b.n	800b1ca <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681a      	ldr	r2, [r3, #0]
 800b16a:	6979      	ldr	r1, [r7, #20]
 800b16c:	4b19      	ldr	r3, [pc, #100]	; (800b1d4 <HAL_RTC_SetDate+0x14c>)
 800b16e:	400b      	ands	r3, r1
 800b170:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	68da      	ldr	r2, [r3, #12]
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b180:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	689b      	ldr	r3, [r3, #8]
 800b188:	f003 0320 	and.w	r3, r3, #32
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d111      	bne.n	800b1b4 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b190:	68f8      	ldr	r0, [r7, #12]
 800b192:	f000 f871 	bl	800b278 <HAL_RTC_WaitForSynchro>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d00b      	beq.n	800b1b4 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	22ff      	movs	r2, #255	; 0xff
 800b1a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2204      	movs	r2, #4
 800b1a8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e00a      	b.n	800b1ca <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	22ff      	movs	r2, #255	; 0xff
 800b1ba:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800b1c8:	2300      	movs	r3, #0
  }
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	371c      	adds	r7, #28
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd90      	pop	{r4, r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	00ffff3f 	.word	0x00ffff3f

0800b1d8 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b086      	sub	sp, #24
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	685a      	ldr	r2, [r3, #4]
 800b1ee:	4b21      	ldr	r3, [pc, #132]	; (800b274 <HAL_RTC_GetDate+0x9c>)
 800b1f0:	4013      	ands	r3, r2
 800b1f2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	0c1b      	lsrs	r3, r3, #16
 800b1f8:	b2da      	uxtb	r2, r3
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	0a1b      	lsrs	r3, r3, #8
 800b202:	b2db      	uxtb	r3, r3
 800b204:	f003 031f 	and.w	r3, r3, #31
 800b208:	b2da      	uxtb	r2, r3
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	b2db      	uxtb	r3, r3
 800b212:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b216:	b2da      	uxtb	r2, r3
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	0b5b      	lsrs	r3, r3, #13
 800b220:	b2db      	uxtb	r3, r3
 800b222:	f003 0307 	and.w	r3, r3, #7
 800b226:	b2da      	uxtb	r2, r3
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d11a      	bne.n	800b268 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	78db      	ldrb	r3, [r3, #3]
 800b236:	4618      	mov	r0, r3
 800b238:	f000 f890 	bl	800b35c <RTC_Bcd2ToByte>
 800b23c:	4603      	mov	r3, r0
 800b23e:	461a      	mov	r2, r3
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	785b      	ldrb	r3, [r3, #1]
 800b248:	4618      	mov	r0, r3
 800b24a:	f000 f887 	bl	800b35c <RTC_Bcd2ToByte>
 800b24e:	4603      	mov	r3, r0
 800b250:	461a      	mov	r2, r3
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	789b      	ldrb	r3, [r3, #2]
 800b25a:	4618      	mov	r0, r3
 800b25c:	f000 f87e 	bl	800b35c <RTC_Bcd2ToByte>
 800b260:	4603      	mov	r3, r0
 800b262:	461a      	mov	r2, r3
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b268:	2300      	movs	r3, #0
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3718      	adds	r7, #24
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	00ffff3f 	.word	0x00ffff3f

0800b278 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b280:	2300      	movs	r3, #0
 800b282:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	68da      	ldr	r2, [r3, #12]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b292:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b294:	f7fb facc 	bl	8006830 <HAL_GetTick>
 800b298:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800b29a:	e009      	b.n	800b2b0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b29c:	f7fb fac8 	bl	8006830 <HAL_GetTick>
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	1ad3      	subs	r3, r2, r3
 800b2a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b2aa:	d901      	bls.n	800b2b0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800b2ac:	2303      	movs	r3, #3
 800b2ae:	e007      	b.n	800b2c0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	68db      	ldr	r3, [r3, #12]
 800b2b6:	f003 0320 	and.w	r3, r3, #32
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d0ee      	beq.n	800b29c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800b2be:	2300      	movs	r3, #0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3710      	adds	r7, #16
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	68db      	ldr	r3, [r3, #12]
 800b2da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d119      	bne.n	800b316 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ea:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b2ec:	f7fb faa0 	bl	8006830 <HAL_GetTick>
 800b2f0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b2f2:	e009      	b.n	800b308 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b2f4:	f7fb fa9c 	bl	8006830 <HAL_GetTick>
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	1ad3      	subs	r3, r2, r3
 800b2fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b302:	d901      	bls.n	800b308 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800b304:	2303      	movs	r3, #3
 800b306:	e007      	b.n	800b318 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	68db      	ldr	r3, [r3, #12]
 800b30e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b312:	2b00      	cmp	r3, #0
 800b314:	d0ee      	beq.n	800b2f4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800b316:	2300      	movs	r3, #0
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3710      	adds	r7, #16
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b320:	b480      	push	{r7}
 800b322:	b085      	sub	sp, #20
 800b324:	af00      	add	r7, sp, #0
 800b326:	4603      	mov	r3, r0
 800b328:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800b32a:	2300      	movs	r3, #0
 800b32c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800b32e:	e005      	b.n	800b33c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	3301      	adds	r3, #1
 800b334:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800b336:	79fb      	ldrb	r3, [r7, #7]
 800b338:	3b0a      	subs	r3, #10
 800b33a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800b33c:	79fb      	ldrb	r3, [r7, #7]
 800b33e:	2b09      	cmp	r3, #9
 800b340:	d8f6      	bhi.n	800b330 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	b2db      	uxtb	r3, r3
 800b346:	011b      	lsls	r3, r3, #4
 800b348:	b2da      	uxtb	r2, r3
 800b34a:	79fb      	ldrb	r3, [r7, #7]
 800b34c:	4313      	orrs	r3, r2
 800b34e:	b2db      	uxtb	r3, r3
}
 800b350:	4618      	mov	r0, r3
 800b352:	3714      	adds	r7, #20
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b085      	sub	sp, #20
 800b360:	af00      	add	r7, sp, #0
 800b362:	4603      	mov	r3, r0
 800b364:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800b366:	2300      	movs	r3, #0
 800b368:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800b36a:	79fb      	ldrb	r3, [r7, #7]
 800b36c:	091b      	lsrs	r3, r3, #4
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	461a      	mov	r2, r3
 800b372:	4613      	mov	r3, r2
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	4413      	add	r3, r2
 800b378:	005b      	lsls	r3, r3, #1
 800b37a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800b37c:	79fb      	ldrb	r3, [r7, #7]
 800b37e:	f003 030f 	and.w	r3, r3, #15
 800b382:	b2da      	uxtb	r2, r3
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	b2db      	uxtb	r3, r3
 800b388:	4413      	add	r3, r2
 800b38a:	b2db      	uxtb	r3, r3
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3714      	adds	r7, #20
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d101      	bne.n	800b3aa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	e022      	b.n	800b3f0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b3b0:	b2db      	uxtb	r3, r3
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d105      	bne.n	800b3c2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f7fa f8f7 	bl	80055b0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2203      	movs	r2, #3
 800b3c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 f814 	bl	800b3f8 <HAL_SD_InitCard>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d001      	beq.n	800b3da <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	e00a      	b.n	800b3f0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b3ee:	2300      	movs	r3, #0
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3708      	adds	r7, #8
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b3f8:	b5b0      	push	{r4, r5, r7, lr}
 800b3fa:	b08e      	sub	sp, #56	; 0x38
 800b3fc:	af04      	add	r7, sp, #16
 800b3fe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b400:	2300      	movs	r3, #0
 800b402:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800b404:	2300      	movs	r3, #0
 800b406:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b408:	2300      	movs	r3, #0
 800b40a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b40c:	2300      	movs	r3, #0
 800b40e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b410:	2300      	movs	r3, #0
 800b412:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800b414:	2376      	movs	r3, #118	; 0x76
 800b416:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681d      	ldr	r5, [r3, #0]
 800b41c:	466c      	mov	r4, sp
 800b41e:	f107 0314 	add.w	r3, r7, #20
 800b422:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b426:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b42a:	f107 0308 	add.w	r3, r7, #8
 800b42e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b430:	4628      	mov	r0, r5
 800b432:	f003 ffe5 	bl	800f400 <SDMMC_Init>
 800b436:	4603      	mov	r3, r0
 800b438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800b43c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b440:	2b00      	cmp	r3, #0
 800b442:	d001      	beq.n	800b448 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800b444:	2301      	movs	r3, #1
 800b446:	e059      	b.n	800b4fc <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	685a      	ldr	r2, [r3, #4]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b456:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4618      	mov	r0, r3
 800b45e:	f004 f819 	bl	800f494 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	685a      	ldr	r2, [r3, #4]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b470:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800b472:	2002      	movs	r0, #2
 800b474:	f7fb f9e8 	bl	8006848 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 fff3 	bl	800c464 <SD_PowerON>
 800b47e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b480:	6a3b      	ldr	r3, [r7, #32]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d00b      	beq.n	800b49e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2201      	movs	r2, #1
 800b48a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b492:	6a3b      	ldr	r3, [r7, #32]
 800b494:	431a      	orrs	r2, r3
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b49a:	2301      	movs	r3, #1
 800b49c:	e02e      	b.n	800b4fc <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f000 ff12 	bl	800c2c8 <SD_InitCard>
 800b4a4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b4a6:	6a3b      	ldr	r3, [r7, #32]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d00b      	beq.n	800b4c4 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4b8:	6a3b      	ldr	r3, [r7, #32]
 800b4ba:	431a      	orrs	r2, r3
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	e01b      	b.n	800b4fc <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f004 f873 	bl	800f5b8 <SDMMC_CmdBlockLength>
 800b4d2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b4d4:	6a3b      	ldr	r3, [r7, #32]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d00f      	beq.n	800b4fa <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a09      	ldr	r2, [pc, #36]	; (800b504 <HAL_SD_InitCard+0x10c>)
 800b4e0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4e6:	6a3b      	ldr	r3, [r7, #32]
 800b4e8:	431a      	orrs	r2, r3
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e000      	b.n	800b4fc <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800b4fa:	2300      	movs	r3, #0
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3728      	adds	r7, #40	; 0x28
 800b500:	46bd      	mov	sp, r7
 800b502:	bdb0      	pop	{r4, r5, r7, pc}
 800b504:	004005ff 	.word	0x004005ff

0800b508 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b08c      	sub	sp, #48	; 0x30
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	607a      	str	r2, [r7, #4]
 800b514:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d107      	bne.n	800b530 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b524:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b52c:	2301      	movs	r3, #1
 800b52e:	e0c3      	b.n	800b6b8 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b536:	b2db      	uxtb	r3, r3
 800b538:	2b01      	cmp	r3, #1
 800b53a:	f040 80bc 	bne.w	800b6b6 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2200      	movs	r2, #0
 800b542:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	441a      	add	r2, r3
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b54e:	429a      	cmp	r2, r3
 800b550:	d907      	bls.n	800b562 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b556:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b55e:	2301      	movs	r3, #1
 800b560:	e0aa      	b.n	800b6b8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2203      	movs	r2, #3
 800b566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	2200      	movs	r2, #0
 800b570:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800b580:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b586:	4a4e      	ldr	r2, [pc, #312]	; (800b6c0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800b588:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b58e:	4a4d      	ldr	r2, [pc, #308]	; (800b6c4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800b590:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b596:	2200      	movs	r2, #0
 800b598:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b59e:	2200      	movs	r2, #0
 800b5a0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5b2:	689a      	ldr	r2, [r3, #8]
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	430a      	orrs	r2, r1
 800b5bc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	3380      	adds	r3, #128	; 0x80
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	68ba      	ldr	r2, [r7, #8]
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	025b      	lsls	r3, r3, #9
 800b5d0:	089b      	lsrs	r3, r3, #2
 800b5d2:	f7fc fc13 	bl	8007dfc <HAL_DMA_Start_IT>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d017      	beq.n	800b60c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800b5ea:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a35      	ldr	r2, [pc, #212]	; (800b6c8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800b5f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2201      	movs	r2, #1
 800b604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b608:	2301      	movs	r3, #1
 800b60a:	e055      	b.n	800b6b8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f042 0208 	orr.w	r2, r2, #8
 800b61a:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b620:	2b01      	cmp	r3, #1
 800b622:	d002      	beq.n	800b62a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800b624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b626:	025b      	lsls	r3, r3, #9
 800b628:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b62a:	f04f 33ff 	mov.w	r3, #4294967295
 800b62e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	025b      	lsls	r3, r3, #9
 800b634:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b636:	2390      	movs	r3, #144	; 0x90
 800b638:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b63a:	2302      	movs	r3, #2
 800b63c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b63e:	2300      	movs	r3, #0
 800b640:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800b642:	2301      	movs	r3, #1
 800b644:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f107 0210 	add.w	r2, r7, #16
 800b64e:	4611      	mov	r1, r2
 800b650:	4618      	mov	r0, r3
 800b652:	f003 ff85 	bl	800f560 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d90a      	bls.n	800b672 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2282      	movs	r2, #130	; 0x82
 800b660:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b668:	4618      	mov	r0, r3
 800b66a:	f003 ffe9 	bl	800f640 <SDMMC_CmdReadMultiBlock>
 800b66e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b670:	e009      	b.n	800b686 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2281      	movs	r2, #129	; 0x81
 800b676:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b67e:	4618      	mov	r0, r3
 800b680:	f003 ffbc 	bl	800f5fc <SDMMC_CmdReadSingleBlock>
 800b684:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800b686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d012      	beq.n	800b6b2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a0d      	ldr	r2, [pc, #52]	; (800b6c8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800b692:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b69a:	431a      	orrs	r2, r3
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e002      	b.n	800b6b8 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	e000      	b.n	800b6b8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800b6b6:	2302      	movs	r3, #2
  }
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3730      	adds	r7, #48	; 0x30
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}
 800b6c0:	0800c0d7 	.word	0x0800c0d7
 800b6c4:	0800c149 	.word	0x0800c149
 800b6c8:	004005ff 	.word	0x004005ff

0800b6cc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b08c      	sub	sp, #48	; 0x30
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	60b9      	str	r1, [r7, #8]
 800b6d6:	607a      	str	r2, [r7, #4]
 800b6d8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d107      	bne.n	800b6f4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6e8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	e0c6      	b.n	800b882 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	f040 80bf 	bne.w	800b880 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2200      	movs	r2, #0
 800b706:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	441a      	add	r2, r3
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b712:	429a      	cmp	r2, r3
 800b714:	d907      	bls.n	800b726 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b71a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b722:	2301      	movs	r3, #1
 800b724:	e0ad      	b.n	800b882 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2203      	movs	r2, #3
 800b72a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	2200      	movs	r2, #0
 800b734:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f042 021a 	orr.w	r2, r2, #26
 800b744:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b74a:	4a50      	ldr	r2, [pc, #320]	; (800b88c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800b74c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b752:	4a4f      	ldr	r2, [pc, #316]	; (800b890 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800b754:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b75a:	2200      	movs	r2, #0
 800b75c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b762:	2b01      	cmp	r3, #1
 800b764:	d002      	beq.n	800b76c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800b766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b768:	025b      	lsls	r3, r3, #9
 800b76a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	2b01      	cmp	r3, #1
 800b770:	d90a      	bls.n	800b788 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	22a0      	movs	r2, #160	; 0xa0
 800b776:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b77e:	4618      	mov	r0, r3
 800b780:	f003 ffa2 	bl	800f6c8 <SDMMC_CmdWriteMultiBlock>
 800b784:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b786:	e009      	b.n	800b79c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2290      	movs	r2, #144	; 0x90
 800b78c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b794:	4618      	mov	r0, r3
 800b796:	f003 ff75 	bl	800f684 <SDMMC_CmdWriteSingleBlock>
 800b79a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d012      	beq.n	800b7c8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a3b      	ldr	r2, [pc, #236]	; (800b894 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800b7a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b0:	431a      	orrs	r2, r3
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	e05c      	b.n	800b882 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f042 0208 	orr.w	r2, r2, #8
 800b7d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7dc:	2240      	movs	r2, #64	; 0x40
 800b7de:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7f0:	689a      	ldr	r2, [r3, #8]
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	430a      	orrs	r2, r1
 800b7fa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b800:	68b9      	ldr	r1, [r7, #8]
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	3380      	adds	r3, #128	; 0x80
 800b808:	461a      	mov	r2, r3
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	025b      	lsls	r3, r3, #9
 800b80e:	089b      	lsrs	r3, r3, #2
 800b810:	f7fc faf4 	bl	8007dfc <HAL_DMA_Start_IT>
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	d01a      	beq.n	800b850 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f022 021a 	bic.w	r2, r2, #26
 800b828:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4a19      	ldr	r2, [pc, #100]	; (800b894 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800b830:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b836:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2201      	movs	r2, #1
 800b842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2200      	movs	r2, #0
 800b84a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b84c:	2301      	movs	r3, #1
 800b84e:	e018      	b.n	800b882 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b850:	f04f 33ff 	mov.w	r3, #4294967295
 800b854:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	025b      	lsls	r3, r3, #9
 800b85a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b85c:	2390      	movs	r3, #144	; 0x90
 800b85e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800b860:	2300      	movs	r3, #0
 800b862:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b864:	2300      	movs	r3, #0
 800b866:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800b868:	2301      	movs	r3, #1
 800b86a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f107 0210 	add.w	r2, r7, #16
 800b874:	4611      	mov	r1, r2
 800b876:	4618      	mov	r0, r3
 800b878:	f003 fe72 	bl	800f560 <SDMMC_ConfigData>

      return HAL_OK;
 800b87c:	2300      	movs	r3, #0
 800b87e:	e000      	b.n	800b882 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800b880:	2302      	movs	r3, #2
  }
}
 800b882:	4618      	mov	r0, r3
 800b884:	3730      	adds	r7, #48	; 0x30
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	0800c0ad 	.word	0x0800c0ad
 800b890:	0800c149 	.word	0x0800c149
 800b894:	004005ff 	.word	0x004005ff

0800b898 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b084      	sub	sp, #16
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8a4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d008      	beq.n	800b8c6 <HAL_SD_IRQHandler+0x2e>
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f003 0308 	and.w	r3, r3, #8
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d003      	beq.n	800b8c6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 ffef 	bl	800c8a2 <SD_Read_IT>
 800b8c4:	e15a      	b.n	800bb7c <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	f000 808d 	beq.w	800b9f0 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b8de:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681a      	ldr	r2, [r3, #0]
 800b8ea:	4b9a      	ldr	r3, [pc, #616]	; (800bb54 <HAL_SD_IRQHandler+0x2bc>)
 800b8ec:	400b      	ands	r3, r1
 800b8ee:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f022 0201 	bic.w	r2, r2, #1
 800b8fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f003 0308 	and.w	r3, r3, #8
 800b906:	2b00      	cmp	r3, #0
 800b908:	d039      	beq.n	800b97e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f003 0302 	and.w	r3, r3, #2
 800b910:	2b00      	cmp	r3, #0
 800b912:	d104      	bne.n	800b91e <HAL_SD_IRQHandler+0x86>
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	f003 0320 	and.w	r3, r3, #32
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d011      	beq.n	800b942 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4618      	mov	r0, r3
 800b924:	f003 fef2 	bl	800f70c <SDMMC_CmdStopTransfer>
 800b928:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d008      	beq.n	800b942 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	431a      	orrs	r2, r3
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 f921 	bl	800bb84 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f240 523a 	movw	r2, #1338	; 0x53a
 800b94a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2201      	movs	r2, #1
 800b950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2200      	movs	r2, #0
 800b958:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f003 0301 	and.w	r3, r3, #1
 800b960:	2b00      	cmp	r3, #0
 800b962:	d104      	bne.n	800b96e <HAL_SD_IRQHandler+0xd6>
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f003 0302 	and.w	r3, r3, #2
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d003      	beq.n	800b976 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f004 fb62 	bl	8010038 <HAL_SD_RxCpltCallback>
 800b974:	e102      	b.n	800bb7c <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f004 fb54 	bl	8010024 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b97c:	e0fe      	b.n	800bb7c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b984:	2b00      	cmp	r3, #0
 800b986:	f000 80f9 	beq.w	800bb7c <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f003 0320 	and.w	r3, r3, #32
 800b990:	2b00      	cmp	r3, #0
 800b992:	d011      	beq.n	800b9b8 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4618      	mov	r0, r3
 800b99a:	f003 feb7 	bl	800f70c <SDMMC_CmdStopTransfer>
 800b99e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d008      	beq.n	800b9b8 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	431a      	orrs	r2, r3
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 f8e6 	bl	800bb84 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f003 0301 	and.w	r3, r3, #1
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	f040 80dc 	bne.w	800bb7c <HAL_SD_IRQHandler+0x2e4>
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f003 0302 	and.w	r3, r3, #2
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	f040 80d6 	bne.w	800bb7c <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f022 0208 	bic.w	r2, r2, #8
 800b9de:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f004 fb1b 	bl	8010024 <HAL_SD_TxCpltCallback>
}
 800b9ee:	e0c5      	b.n	800bb7c <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d008      	beq.n	800ba10 <HAL_SD_IRQHandler+0x178>
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f003 0308 	and.w	r3, r3, #8
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d003      	beq.n	800ba10 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f000 ff9b 	bl	800c944 <SD_Write_IT>
 800ba0e:	e0b5      	b.n	800bb7c <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba16:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	f000 80ae 	beq.w	800bb7c <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba26:	f003 0302 	and.w	r3, r3, #2
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d005      	beq.n	800ba3a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba32:	f043 0202 	orr.w	r2, r3, #2
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba40:	f003 0308 	and.w	r3, r3, #8
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d005      	beq.n	800ba54 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba4c:	f043 0208 	orr.w	r2, r3, #8
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba5a:	f003 0320 	and.w	r3, r3, #32
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d005      	beq.n	800ba6e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba66:	f043 0220 	orr.w	r2, r3, #32
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba74:	f003 0310 	and.w	r3, r3, #16
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d005      	beq.n	800ba88 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba80:	f043 0210 	orr.w	r2, r3, #16
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f240 523a 	movw	r2, #1338	; 0x53a
 800ba90:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800baa0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	4618      	mov	r0, r3
 800baa8:	f003 fe30 	bl	800f70c <SDMMC_CmdStopTransfer>
 800baac:	4602      	mov	r2, r0
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab2:	431a      	orrs	r2, r3
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f003 0308 	and.w	r3, r3, #8
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d00a      	beq.n	800bad8 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2201      	movs	r2, #1
 800bac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2200      	movs	r2, #0
 800bace:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 f857 	bl	800bb84 <HAL_SD_ErrorCallback>
}
 800bad6:	e051      	b.n	800bb7c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d04c      	beq.n	800bb7c <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f003 0310 	and.w	r3, r3, #16
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d104      	bne.n	800baf6 <HAL_SD_IRQHandler+0x25e>
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f003 0320 	and.w	r3, r3, #32
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d011      	beq.n	800bb1a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bafa:	4a17      	ldr	r2, [pc, #92]	; (800bb58 <HAL_SD_IRQHandler+0x2c0>)
 800bafc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7fc fa4a 	bl	8007f9c <HAL_DMA_Abort_IT>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d036      	beq.n	800bb7c <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb12:	4618      	mov	r0, r3
 800bb14:	f000 fb6a 	bl	800c1ec <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800bb18:	e030      	b.n	800bb7c <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f003 0301 	and.w	r3, r3, #1
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d104      	bne.n	800bb2e <HAL_SD_IRQHandler+0x296>
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f003 0302 	and.w	r3, r3, #2
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d018      	beq.n	800bb60 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb32:	4a0a      	ldr	r2, [pc, #40]	; (800bb5c <HAL_SD_IRQHandler+0x2c4>)
 800bb34:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7fc fa2e 	bl	8007f9c <HAL_DMA_Abort_IT>
 800bb40:	4603      	mov	r3, r0
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d01a      	beq.n	800bb7c <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f000 fb85 	bl	800c25a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800bb50:	e014      	b.n	800bb7c <HAL_SD_IRQHandler+0x2e4>
 800bb52:	bf00      	nop
 800bb54:	ffff3ec5 	.word	0xffff3ec5
 800bb58:	0800c1ed 	.word	0x0800c1ed
 800bb5c:	0800c25b 	.word	0x0800c25b
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2200      	movs	r2, #0
 800bb64:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2201      	movs	r2, #1
 800bb6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2200      	movs	r2, #0
 800bb72:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f004 fa4b 	bl	8010010 <HAL_SD_AbortCallback>
}
 800bb7a:	e7ff      	b.n	800bb7c <HAL_SD_IRQHandler+0x2e4>
 800bb7c:	bf00      	nop
 800bb7e:	3710      	adds	r7, #16
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b083      	sub	sp, #12
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800bb8c:	bf00      	nop
 800bb8e:	370c      	adds	r7, #12
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bba6:	0f9b      	lsrs	r3, r3, #30
 800bba8:	b2da      	uxtb	r2, r3
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbb2:	0e9b      	lsrs	r3, r3, #26
 800bbb4:	b2db      	uxtb	r3, r3
 800bbb6:	f003 030f 	and.w	r3, r3, #15
 800bbba:	b2da      	uxtb	r2, r3
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbc4:	0e1b      	lsrs	r3, r3, #24
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	f003 0303 	and.w	r3, r3, #3
 800bbcc:	b2da      	uxtb	r2, r3
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbd6:	0c1b      	lsrs	r3, r3, #16
 800bbd8:	b2da      	uxtb	r2, r3
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbe2:	0a1b      	lsrs	r3, r3, #8
 800bbe4:	b2da      	uxtb	r2, r3
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbee:	b2da      	uxtb	r2, r3
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bbf8:	0d1b      	lsrs	r3, r3, #20
 800bbfa:	b29a      	uxth	r2, r3
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc04:	0c1b      	lsrs	r3, r3, #16
 800bc06:	b2db      	uxtb	r3, r3
 800bc08:	f003 030f 	and.w	r3, r3, #15
 800bc0c:	b2da      	uxtb	r2, r3
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc16:	0bdb      	lsrs	r3, r3, #15
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	f003 0301 	and.w	r3, r3, #1
 800bc1e:	b2da      	uxtb	r2, r3
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc28:	0b9b      	lsrs	r3, r3, #14
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	f003 0301 	and.w	r3, r3, #1
 800bc30:	b2da      	uxtb	r2, r3
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc3a:	0b5b      	lsrs	r3, r3, #13
 800bc3c:	b2db      	uxtb	r3, r3
 800bc3e:	f003 0301 	and.w	r3, r3, #1
 800bc42:	b2da      	uxtb	r2, r3
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc4c:	0b1b      	lsrs	r3, r3, #12
 800bc4e:	b2db      	uxtb	r3, r3
 800bc50:	f003 0301 	and.w	r3, r3, #1
 800bc54:	b2da      	uxtb	r2, r3
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d163      	bne.n	800bd30 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc6c:	009a      	lsls	r2, r3, #2
 800bc6e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800bc72:	4013      	ands	r3, r2
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800bc78:	0f92      	lsrs	r2, r2, #30
 800bc7a:	431a      	orrs	r2, r3
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc84:	0edb      	lsrs	r3, r3, #27
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	f003 0307 	and.w	r3, r3, #7
 800bc8c:	b2da      	uxtb	r2, r3
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc96:	0e1b      	lsrs	r3, r3, #24
 800bc98:	b2db      	uxtb	r3, r3
 800bc9a:	f003 0307 	and.w	r3, r3, #7
 800bc9e:	b2da      	uxtb	r2, r3
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bca8:	0d5b      	lsrs	r3, r3, #21
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	f003 0307 	and.w	r3, r3, #7
 800bcb0:	b2da      	uxtb	r2, r3
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcba:	0c9b      	lsrs	r3, r3, #18
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	f003 0307 	and.w	r3, r3, #7
 800bcc2:	b2da      	uxtb	r2, r3
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bccc:	0bdb      	lsrs	r3, r3, #15
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	f003 0307 	and.w	r3, r3, #7
 800bcd4:	b2da      	uxtb	r2, r3
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	691b      	ldr	r3, [r3, #16]
 800bcde:	1c5a      	adds	r2, r3, #1
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	7e1b      	ldrb	r3, [r3, #24]
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	f003 0307 	and.w	r3, r3, #7
 800bcee:	3302      	adds	r3, #2
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	fa02 f303 	lsl.w	r3, r2, r3
 800bcf6:	687a      	ldr	r2, [r7, #4]
 800bcf8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800bcfa:	fb03 f202 	mul.w	r2, r3, r2
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	7a1b      	ldrb	r3, [r3, #8]
 800bd06:	b2db      	uxtb	r3, r3
 800bd08:	f003 030f 	and.w	r3, r3, #15
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	409a      	lsls	r2, r3
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd18:	687a      	ldr	r2, [r7, #4]
 800bd1a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800bd1c:	0a52      	lsrs	r2, r2, #9
 800bd1e:	fb03 f202 	mul.w	r2, r3, r2
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd2c:	661a      	str	r2, [r3, #96]	; 0x60
 800bd2e:	e031      	b.n	800bd94 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd34:	2b01      	cmp	r3, #1
 800bd36:	d11d      	bne.n	800bd74 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd3c:	041b      	lsls	r3, r3, #16
 800bd3e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd46:	0c1b      	lsrs	r3, r3, #16
 800bd48:	431a      	orrs	r2, r3
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	691b      	ldr	r3, [r3, #16]
 800bd52:	3301      	adds	r3, #1
 800bd54:	029a      	lsls	r2, r3, #10
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd68:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	661a      	str	r2, [r3, #96]	; 0x60
 800bd72:	e00f      	b.n	800bd94 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4a58      	ldr	r2, [pc, #352]	; (800bedc <HAL_SD_GetCardCSD+0x344>)
 800bd7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd80:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bd90:	2301      	movs	r3, #1
 800bd92:	e09d      	b.n	800bed0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd98:	0b9b      	lsrs	r3, r3, #14
 800bd9a:	b2db      	uxtb	r3, r3
 800bd9c:	f003 0301 	and.w	r3, r3, #1
 800bda0:	b2da      	uxtb	r2, r3
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdaa:	09db      	lsrs	r3, r3, #7
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdb2:	b2da      	uxtb	r2, r3
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdbc:	b2db      	uxtb	r3, r3
 800bdbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdc2:	b2da      	uxtb	r2, r3
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdcc:	0fdb      	lsrs	r3, r3, #31
 800bdce:	b2da      	uxtb	r2, r3
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdd8:	0f5b      	lsrs	r3, r3, #29
 800bdda:	b2db      	uxtb	r3, r3
 800bddc:	f003 0303 	and.w	r3, r3, #3
 800bde0:	b2da      	uxtb	r2, r3
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdea:	0e9b      	lsrs	r3, r3, #26
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	f003 0307 	and.w	r3, r3, #7
 800bdf2:	b2da      	uxtb	r2, r3
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdfc:	0d9b      	lsrs	r3, r3, #22
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	f003 030f 	and.w	r3, r3, #15
 800be04:	b2da      	uxtb	r2, r3
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be0e:	0d5b      	lsrs	r3, r3, #21
 800be10:	b2db      	uxtb	r3, r3
 800be12:	f003 0301 	and.w	r3, r3, #1
 800be16:	b2da      	uxtb	r2, r3
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	2200      	movs	r2, #0
 800be22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be2a:	0c1b      	lsrs	r3, r3, #16
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	f003 0301 	and.w	r3, r3, #1
 800be32:	b2da      	uxtb	r2, r3
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be3e:	0bdb      	lsrs	r3, r3, #15
 800be40:	b2db      	uxtb	r3, r3
 800be42:	f003 0301 	and.w	r3, r3, #1
 800be46:	b2da      	uxtb	r2, r3
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be52:	0b9b      	lsrs	r3, r3, #14
 800be54:	b2db      	uxtb	r3, r3
 800be56:	f003 0301 	and.w	r3, r3, #1
 800be5a:	b2da      	uxtb	r2, r3
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be66:	0b5b      	lsrs	r3, r3, #13
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	f003 0301 	and.w	r3, r3, #1
 800be6e:	b2da      	uxtb	r2, r3
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be7a:	0b1b      	lsrs	r3, r3, #12
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	f003 0301 	and.w	r3, r3, #1
 800be82:	b2da      	uxtb	r2, r3
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be8e:	0a9b      	lsrs	r3, r3, #10
 800be90:	b2db      	uxtb	r3, r3
 800be92:	f003 0303 	and.w	r3, r3, #3
 800be96:	b2da      	uxtb	r2, r3
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bea2:	0a1b      	lsrs	r3, r3, #8
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	f003 0303 	and.w	r3, r3, #3
 800beaa:	b2da      	uxtb	r2, r3
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beb6:	085b      	lsrs	r3, r3, #1
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bebe:	b2da      	uxtb	r2, r3
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	2201      	movs	r2, #1
 800beca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800bece:	2300      	movs	r3, #0
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	370c      	adds	r7, #12
 800bed4:	46bd      	mov	sp, r7
 800bed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beda:	4770      	bx	lr
 800bedc:	004005ff 	.word	0x004005ff

0800bee0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b083      	sub	sp, #12
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800bf2a:	2300      	movs	r3, #0
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	370c      	adds	r7, #12
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr

0800bf38 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800bf38:	b5b0      	push	{r4, r5, r7, lr}
 800bf3a:	b08e      	sub	sp, #56	; 0x38
 800bf3c:	af04      	add	r7, sp, #16
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800bf42:	2300      	movs	r3, #0
 800bf44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2203      	movs	r2, #3
 800bf4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf54:	2b03      	cmp	r3, #3
 800bf56:	d02e      	beq.n	800bfb6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf5e:	d106      	bne.n	800bf6e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	639a      	str	r2, [r3, #56]	; 0x38
 800bf6c:	e029      	b.n	800bfc2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf74:	d10a      	bne.n	800bf8c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 fb2a 	bl	800c5d0 <SD_WideBus_Enable>
 800bf7c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf82:	6a3b      	ldr	r3, [r7, #32]
 800bf84:	431a      	orrs	r2, r3
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	639a      	str	r2, [r3, #56]	; 0x38
 800bf8a:	e01a      	b.n	800bfc2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d10a      	bne.n	800bfa8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f000 fb67 	bl	800c666 <SD_WideBus_Disable>
 800bf98:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf9e:	6a3b      	ldr	r3, [r7, #32]
 800bfa0:	431a      	orrs	r2, r3
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	639a      	str	r2, [r3, #56]	; 0x38
 800bfa6:	e00c      	b.n	800bfc2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	639a      	str	r2, [r3, #56]	; 0x38
 800bfb4:	e005      	b.n	800bfc2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfba:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d00b      	beq.n	800bfe2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	4a26      	ldr	r2, [pc, #152]	; (800c068 <HAL_SD_ConfigWideBusOperation+0x130>)
 800bfd0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800bfda:	2301      	movs	r3, #1
 800bfdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bfe0:	e01f      	b.n	800c022 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	689b      	ldr	r3, [r3, #8]
 800bfec:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	68db      	ldr	r3, [r3, #12]
 800bff2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	695b      	ldr	r3, [r3, #20]
 800bffc:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	699b      	ldr	r3, [r3, #24]
 800c002:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681d      	ldr	r5, [r3, #0]
 800c008:	466c      	mov	r4, sp
 800c00a:	f107 0314 	add.w	r3, r7, #20
 800c00e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c012:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c016:	f107 0308 	add.w	r3, r7, #8
 800c01a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c01c:	4628      	mov	r0, r5
 800c01e:	f003 f9ef 	bl	800f400 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c02a:	4618      	mov	r0, r3
 800c02c:	f003 fac4 	bl	800f5b8 <SDMMC_CmdBlockLength>
 800c030:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c032:	6a3b      	ldr	r3, [r7, #32]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d00c      	beq.n	800c052 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	4a0a      	ldr	r2, [pc, #40]	; (800c068 <HAL_SD_ConfigWideBusOperation+0x130>)
 800c03e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c044:	6a3b      	ldr	r3, [r7, #32]
 800c046:	431a      	orrs	r2, r3
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800c04c:	2301      	movs	r3, #1
 800c04e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2201      	movs	r2, #1
 800c056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800c05a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3728      	adds	r7, #40	; 0x28
 800c062:	46bd      	mov	sp, r7
 800c064:	bdb0      	pop	{r4, r5, r7, pc}
 800c066:	bf00      	nop
 800c068:	004005ff 	.word	0x004005ff

0800c06c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b086      	sub	sp, #24
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c074:	2300      	movs	r3, #0
 800c076:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c078:	f107 030c 	add.w	r3, r7, #12
 800c07c:	4619      	mov	r1, r3
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 fa7e 	bl	800c580 <SD_SendStatus>
 800c084:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d005      	beq.n	800c098 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	431a      	orrs	r2, r3
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	0a5b      	lsrs	r3, r3, #9
 800c09c:	f003 030f 	and.w	r3, r3, #15
 800c0a0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c0a2:	693b      	ldr	r3, [r7, #16]
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3718      	adds	r7, #24
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b085      	sub	sp, #20
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0b8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c0c8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800c0ca:	bf00      	nop
 800c0cc:	3714      	adds	r7, #20
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr

0800c0d6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b084      	sub	sp, #16
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0e2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0e8:	2b82      	cmp	r3, #130	; 0x82
 800c0ea:	d111      	bne.n	800c110 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f003 fb0b 	bl	800f70c <SDMMC_CmdStopTransfer>
 800c0f6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d008      	beq.n	800c110 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	431a      	orrs	r2, r3
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800c10a:	68f8      	ldr	r0, [r7, #12]
 800c10c:	f7ff fd3a 	bl	800bb84 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f022 0208 	bic.w	r2, r2, #8
 800c11e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f240 523a 	movw	r2, #1338	; 0x53a
 800c128:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2201      	movs	r2, #1
 800c12e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2200      	movs	r2, #0
 800c136:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800c138:	68f8      	ldr	r0, [r7, #12]
 800c13a:	f003 ff7d 	bl	8010038 <HAL_SD_RxCpltCallback>
#endif
}
 800c13e:	bf00      	nop
 800c140:	3710      	adds	r7, #16
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
	...

0800c148 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b086      	sub	sp, #24
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c154:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f7fc f8cc 	bl	80082f4 <HAL_DMA_GetError>
 800c15c:	4603      	mov	r3, r0
 800c15e:	2b02      	cmp	r3, #2
 800c160:	d03e      	beq.n	800c1e0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c168:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c16e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c170:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	2b01      	cmp	r3, #1
 800c176:	d002      	beq.n	800c17e <SD_DMAError+0x36>
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	d12d      	bne.n	800c1da <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4a19      	ldr	r2, [pc, #100]	; (800c1e8 <SD_DMAError+0xa0>)
 800c184:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c194:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c19a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800c1a2:	6978      	ldr	r0, [r7, #20]
 800c1a4:	f7ff ff62 	bl	800c06c <HAL_SD_GetCardState>
 800c1a8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	2b06      	cmp	r3, #6
 800c1ae:	d002      	beq.n	800c1b6 <SD_DMAError+0x6e>
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	2b05      	cmp	r3, #5
 800c1b4:	d10a      	bne.n	800c1cc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f003 faa6 	bl	800f70c <SDMMC_CmdStopTransfer>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1c6:	431a      	orrs	r2, r3
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800c1da:	6978      	ldr	r0, [r7, #20]
 800c1dc:	f7ff fcd2 	bl	800bb84 <HAL_SD_ErrorCallback>
#endif
  }
}
 800c1e0:	bf00      	nop
 800c1e2:	3718      	adds	r7, #24
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}
 800c1e8:	004005ff 	.word	0x004005ff

0800c1ec <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b084      	sub	sp, #16
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1f8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f240 523a 	movw	r2, #1338	; 0x53a
 800c202:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800c204:	68f8      	ldr	r0, [r7, #12]
 800c206:	f7ff ff31 	bl	800c06c <HAL_SD_GetCardState>
 800c20a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2201      	movs	r2, #1
 800c210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2200      	movs	r2, #0
 800c218:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	2b06      	cmp	r3, #6
 800c21e:	d002      	beq.n	800c226 <SD_DMATxAbort+0x3a>
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	2b05      	cmp	r3, #5
 800c224:	d10a      	bne.n	800c23c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	4618      	mov	r0, r3
 800c22c:	f003 fa6e 	bl	800f70c <SDMMC_CmdStopTransfer>
 800c230:	4602      	mov	r2, r0
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c236:	431a      	orrs	r2, r3
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c240:	2b00      	cmp	r3, #0
 800c242:	d103      	bne.n	800c24c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800c244:	68f8      	ldr	r0, [r7, #12]
 800c246:	f003 fee3 	bl	8010010 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800c24a:	e002      	b.n	800c252 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800c24c:	68f8      	ldr	r0, [r7, #12]
 800c24e:	f7ff fc99 	bl	800bb84 <HAL_SD_ErrorCallback>
}
 800c252:	bf00      	nop
 800c254:	3710      	adds	r7, #16
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}

0800c25a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800c25a:	b580      	push	{r7, lr}
 800c25c:	b084      	sub	sp, #16
 800c25e:	af00      	add	r7, sp, #0
 800c260:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c266:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f240 523a 	movw	r2, #1338	; 0x53a
 800c270:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800c272:	68f8      	ldr	r0, [r7, #12]
 800c274:	f7ff fefa 	bl	800c06c <HAL_SD_GetCardState>
 800c278:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2201      	movs	r2, #1
 800c27e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	2200      	movs	r2, #0
 800c286:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	2b06      	cmp	r3, #6
 800c28c:	d002      	beq.n	800c294 <SD_DMARxAbort+0x3a>
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	2b05      	cmp	r3, #5
 800c292:	d10a      	bne.n	800c2aa <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	4618      	mov	r0, r3
 800c29a:	f003 fa37 	bl	800f70c <SDMMC_CmdStopTransfer>
 800c29e:	4602      	mov	r2, r0
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2a4:	431a      	orrs	r2, r3
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d103      	bne.n	800c2ba <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800c2b2:	68f8      	ldr	r0, [r7, #12]
 800c2b4:	f003 feac 	bl	8010010 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800c2b8:	e002      	b.n	800c2c0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800c2ba:	68f8      	ldr	r0, [r7, #12]
 800c2bc:	f7ff fc62 	bl	800bb84 <HAL_SD_ErrorCallback>
}
 800c2c0:	bf00      	nop
 800c2c2:	3710      	adds	r7, #16
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c2c8:	b5b0      	push	{r4, r5, r7, lr}
 800c2ca:	b094      	sub	sp, #80	; 0x50
 800c2cc:	af04      	add	r7, sp, #16
 800c2ce:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f003 f8e9 	bl	800f4b0 <SDMMC_GetPowerState>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d102      	bne.n	800c2ea <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c2e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c2e8:	e0b8      	b.n	800c45c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2ee:	2b03      	cmp	r3, #3
 800c2f0:	d02f      	beq.n	800c352 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f003 fb13 	bl	800f922 <SDMMC_CmdSendCID>
 800c2fc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c2fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c300:	2b00      	cmp	r3, #0
 800c302:	d001      	beq.n	800c308 <SD_InitCard+0x40>
    {
      return errorstate;
 800c304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c306:	e0a9      	b.n	800c45c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2100      	movs	r1, #0
 800c30e:	4618      	mov	r0, r3
 800c310:	f003 f913 	bl	800f53a <SDMMC_GetResponse>
 800c314:	4602      	mov	r2, r0
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	2104      	movs	r1, #4
 800c320:	4618      	mov	r0, r3
 800c322:	f003 f90a 	bl	800f53a <SDMMC_GetResponse>
 800c326:	4602      	mov	r2, r0
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	2108      	movs	r1, #8
 800c332:	4618      	mov	r0, r3
 800c334:	f003 f901 	bl	800f53a <SDMMC_GetResponse>
 800c338:	4602      	mov	r2, r0
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	210c      	movs	r1, #12
 800c344:	4618      	mov	r0, r3
 800c346:	f003 f8f8 	bl	800f53a <SDMMC_GetResponse>
 800c34a:	4602      	mov	r2, r0
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c356:	2b03      	cmp	r3, #3
 800c358:	d00d      	beq.n	800c376 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f107 020e 	add.w	r2, r7, #14
 800c362:	4611      	mov	r1, r2
 800c364:	4618      	mov	r0, r3
 800c366:	f003 fb19 	bl	800f99c <SDMMC_CmdSetRelAdd>
 800c36a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c36c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d001      	beq.n	800c376 <SD_InitCard+0xae>
    {
      return errorstate;
 800c372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c374:	e072      	b.n	800c45c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c37a:	2b03      	cmp	r3, #3
 800c37c:	d036      	beq.n	800c3ec <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c37e:	89fb      	ldrh	r3, [r7, #14]
 800c380:	461a      	mov	r2, r3
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681a      	ldr	r2, [r3, #0]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c38e:	041b      	lsls	r3, r3, #16
 800c390:	4619      	mov	r1, r3
 800c392:	4610      	mov	r0, r2
 800c394:	f003 fae3 	bl	800f95e <SDMMC_CmdSendCSD>
 800c398:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c39a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d001      	beq.n	800c3a4 <SD_InitCard+0xdc>
    {
      return errorstate;
 800c3a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3a2:	e05b      	b.n	800c45c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	2100      	movs	r1, #0
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f003 f8c5 	bl	800f53a <SDMMC_GetResponse>
 800c3b0:	4602      	mov	r2, r0
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	2104      	movs	r1, #4
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f003 f8bc 	bl	800f53a <SDMMC_GetResponse>
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	2108      	movs	r1, #8
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f003 f8b3 	bl	800f53a <SDMMC_GetResponse>
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	210c      	movs	r1, #12
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f003 f8aa 	bl	800f53a <SDMMC_GetResponse>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	2104      	movs	r1, #4
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f003 f8a1 	bl	800f53a <SDMMC_GetResponse>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	0d1a      	lsrs	r2, r3, #20
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c400:	f107 0310 	add.w	r3, r7, #16
 800c404:	4619      	mov	r1, r3
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f7ff fbc6 	bl	800bb98 <HAL_SD_GetCardCSD>
 800c40c:	4603      	mov	r3, r0
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d002      	beq.n	800c418 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c412:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c416:	e021      	b.n	800c45c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6819      	ldr	r1, [r3, #0]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c420:	041b      	lsls	r3, r3, #16
 800c422:	2200      	movs	r2, #0
 800c424:	461c      	mov	r4, r3
 800c426:	4615      	mov	r5, r2
 800c428:	4622      	mov	r2, r4
 800c42a:	462b      	mov	r3, r5
 800c42c:	4608      	mov	r0, r1
 800c42e:	f003 f98f 	bl	800f750 <SDMMC_CmdSelDesel>
 800c432:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c436:	2b00      	cmp	r3, #0
 800c438:	d001      	beq.n	800c43e <SD_InitCard+0x176>
  {
    return errorstate;
 800c43a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c43c:	e00e      	b.n	800c45c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681d      	ldr	r5, [r3, #0]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	466c      	mov	r4, sp
 800c446:	f103 0210 	add.w	r2, r3, #16
 800c44a:	ca07      	ldmia	r2, {r0, r1, r2}
 800c44c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c450:	3304      	adds	r3, #4
 800c452:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c454:	4628      	mov	r0, r5
 800c456:	f002 ffd3 	bl	800f400 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c45a:	2300      	movs	r3, #0
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3740      	adds	r7, #64	; 0x40
 800c460:	46bd      	mov	sp, r7
 800c462:	bdb0      	pop	{r4, r5, r7, pc}

0800c464 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b086      	sub	sp, #24
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c46c:	2300      	movs	r3, #0
 800c46e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800c470:	2300      	movs	r3, #0
 800c472:	617b      	str	r3, [r7, #20]
 800c474:	2300      	movs	r3, #0
 800c476:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	4618      	mov	r0, r3
 800c47e:	f003 f98a 	bl	800f796 <SDMMC_CmdGoIdleState>
 800c482:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d001      	beq.n	800c48e <SD_PowerON+0x2a>
  {
    return errorstate;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	e072      	b.n	800c574 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	4618      	mov	r0, r3
 800c494:	f003 f99d 	bl	800f7d2 <SDMMC_CmdOperCond>
 800c498:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d00d      	beq.n	800c4bc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f003 f973 	bl	800f796 <SDMMC_CmdGoIdleState>
 800c4b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d004      	beq.n	800c4c2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	e05b      	b.n	800c574 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2201      	movs	r2, #1
 800c4c0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4c6:	2b01      	cmp	r3, #1
 800c4c8:	d137      	bne.n	800c53a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	2100      	movs	r1, #0
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f003 f99d 	bl	800f810 <SDMMC_CmdAppCommand>
 800c4d6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d02d      	beq.n	800c53a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c4de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c4e2:	e047      	b.n	800c574 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f003 f990 	bl	800f810 <SDMMC_CmdAppCommand>
 800c4f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d001      	beq.n	800c4fc <SD_PowerON+0x98>
    {
      return errorstate;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	e03b      	b.n	800c574 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	491e      	ldr	r1, [pc, #120]	; (800c57c <SD_PowerON+0x118>)
 800c502:	4618      	mov	r0, r3
 800c504:	f003 f9a6 	bl	800f854 <SDMMC_CmdAppOperCommand>
 800c508:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d002      	beq.n	800c516 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c510:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c514:	e02e      	b.n	800c574 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	2100      	movs	r1, #0
 800c51c:	4618      	mov	r0, r3
 800c51e:	f003 f80c 	bl	800f53a <SDMMC_GetResponse>
 800c522:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	0fdb      	lsrs	r3, r3, #31
 800c528:	2b01      	cmp	r3, #1
 800c52a:	d101      	bne.n	800c530 <SD_PowerON+0xcc>
 800c52c:	2301      	movs	r3, #1
 800c52e:	e000      	b.n	800c532 <SD_PowerON+0xce>
 800c530:	2300      	movs	r3, #0
 800c532:	613b      	str	r3, [r7, #16]

    count++;
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	3301      	adds	r3, #1
 800c538:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c540:	4293      	cmp	r3, r2
 800c542:	d802      	bhi.n	800c54a <SD_PowerON+0xe6>
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d0cc      	beq.n	800c4e4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c550:	4293      	cmp	r3, r2
 800c552:	d902      	bls.n	800c55a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c554:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c558:	e00c      	b.n	800c574 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c560:	2b00      	cmp	r3, #0
 800c562:	d003      	beq.n	800c56c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2201      	movs	r2, #1
 800c568:	645a      	str	r2, [r3, #68]	; 0x44
 800c56a:	e002      	b.n	800c572 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2200      	movs	r2, #0
 800c570:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800c572:	2300      	movs	r3, #0
}
 800c574:	4618      	mov	r0, r3
 800c576:	3718      	adds	r7, #24
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}
 800c57c:	c1100000 	.word	0xc1100000

0800c580 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b084      	sub	sp, #16
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d102      	bne.n	800c596 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c590:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c594:	e018      	b.n	800c5c8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681a      	ldr	r2, [r3, #0]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c59e:	041b      	lsls	r3, r3, #16
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	4610      	mov	r0, r2
 800c5a4:	f003 fa1b 	bl	800f9de <SDMMC_CmdSendStatus>
 800c5a8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d001      	beq.n	800c5b4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	e009      	b.n	800c5c8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	2100      	movs	r1, #0
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f002 ffbd 	bl	800f53a <SDMMC_GetResponse>
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c5c6:	2300      	movs	r3, #0
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3710      	adds	r7, #16
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}

0800c5d0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b086      	sub	sp, #24
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c5d8:	2300      	movs	r3, #0
 800c5da:	60fb      	str	r3, [r7, #12]
 800c5dc:	2300      	movs	r3, #0
 800c5de:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	2100      	movs	r1, #0
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f002 ffa7 	bl	800f53a <SDMMC_GetResponse>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5f6:	d102      	bne.n	800c5fe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c5f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c5fc:	e02f      	b.n	800c65e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c5fe:	f107 030c 	add.w	r3, r7, #12
 800c602:	4619      	mov	r1, r3
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f000 f879 	bl	800c6fc <SD_FindSCR>
 800c60a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d001      	beq.n	800c616 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	e023      	b.n	800c65e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d01c      	beq.n	800c65a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c628:	041b      	lsls	r3, r3, #16
 800c62a:	4619      	mov	r1, r3
 800c62c:	4610      	mov	r0, r2
 800c62e:	f003 f8ef 	bl	800f810 <SDMMC_CmdAppCommand>
 800c632:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d001      	beq.n	800c63e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	e00f      	b.n	800c65e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	2102      	movs	r1, #2
 800c644:	4618      	mov	r0, r3
 800c646:	f003 f929 	bl	800f89c <SDMMC_CmdBusWidth>
 800c64a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d001      	beq.n	800c656 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	e003      	b.n	800c65e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c656:	2300      	movs	r3, #0
 800c658:	e001      	b.n	800c65e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c65a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3718      	adds	r7, #24
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800c666:	b580      	push	{r7, lr}
 800c668:	b086      	sub	sp, #24
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c66e:	2300      	movs	r3, #0
 800c670:	60fb      	str	r3, [r7, #12]
 800c672:	2300      	movs	r3, #0
 800c674:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	2100      	movs	r1, #0
 800c67c:	4618      	mov	r0, r3
 800c67e:	f002 ff5c 	bl	800f53a <SDMMC_GetResponse>
 800c682:	4603      	mov	r3, r0
 800c684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c688:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c68c:	d102      	bne.n	800c694 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c68e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c692:	e02f      	b.n	800c6f4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c694:	f107 030c 	add.w	r3, r7, #12
 800c698:	4619      	mov	r1, r3
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f000 f82e 	bl	800c6fc <SD_FindSCR>
 800c6a0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d001      	beq.n	800c6ac <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	e023      	b.n	800c6f4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d01c      	beq.n	800c6f0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681a      	ldr	r2, [r3, #0]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6be:	041b      	lsls	r3, r3, #16
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	4610      	mov	r0, r2
 800c6c4:	f003 f8a4 	bl	800f810 <SDMMC_CmdAppCommand>
 800c6c8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d001      	beq.n	800c6d4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	e00f      	b.n	800c6f4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	2100      	movs	r1, #0
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f003 f8de 	bl	800f89c <SDMMC_CmdBusWidth>
 800c6e0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d001      	beq.n	800c6ec <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	e003      	b.n	800c6f4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	e001      	b.n	800c6f4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c6f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3718      	adds	r7, #24
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800c6fc:	b590      	push	{r4, r7, lr}
 800c6fe:	b08f      	sub	sp, #60	; 0x3c
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c706:	f7fa f893 	bl	8006830 <HAL_GetTick>
 800c70a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800c70c:	2300      	movs	r3, #0
 800c70e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800c710:	2300      	movs	r3, #0
 800c712:	60bb      	str	r3, [r7, #8]
 800c714:	2300      	movs	r3, #0
 800c716:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	2108      	movs	r1, #8
 800c722:	4618      	mov	r0, r3
 800c724:	f002 ff48 	bl	800f5b8 <SDMMC_CmdBlockLength>
 800c728:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d001      	beq.n	800c734 <SD_FindSCR+0x38>
  {
    return errorstate;
 800c730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c732:	e0b2      	b.n	800c89a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681a      	ldr	r2, [r3, #0]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c73c:	041b      	lsls	r3, r3, #16
 800c73e:	4619      	mov	r1, r3
 800c740:	4610      	mov	r0, r2
 800c742:	f003 f865 	bl	800f810 <SDMMC_CmdAppCommand>
 800c746:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d001      	beq.n	800c752 <SD_FindSCR+0x56>
  {
    return errorstate;
 800c74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c750:	e0a3      	b.n	800c89a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c752:	f04f 33ff 	mov.w	r3, #4294967295
 800c756:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800c758:	2308      	movs	r3, #8
 800c75a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800c75c:	2330      	movs	r3, #48	; 0x30
 800c75e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c760:	2302      	movs	r3, #2
 800c762:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c764:	2300      	movs	r3, #0
 800c766:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c768:	2301      	movs	r3, #1
 800c76a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f107 0210 	add.w	r2, r7, #16
 800c774:	4611      	mov	r1, r2
 800c776:	4618      	mov	r0, r3
 800c778:	f002 fef2 	bl	800f560 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4618      	mov	r0, r3
 800c782:	f003 f8ad 	bl	800f8e0 <SDMMC_CmdSendSCR>
 800c786:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d02a      	beq.n	800c7e4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800c78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c790:	e083      	b.n	800c89a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d00f      	beq.n	800c7c0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6819      	ldr	r1, [r3, #0]
 800c7a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7a6:	009b      	lsls	r3, r3, #2
 800c7a8:	f107 0208 	add.w	r2, r7, #8
 800c7ac:	18d4      	adds	r4, r2, r3
 800c7ae:	4608      	mov	r0, r1
 800c7b0:	f002 fe52 	bl	800f458 <SDMMC_ReadFIFO>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	6023      	str	r3, [r4, #0]
      index++;
 800c7b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ba:	3301      	adds	r3, #1
 800c7bc:	637b      	str	r3, [r7, #52]	; 0x34
 800c7be:	e006      	b.n	800c7ce <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d012      	beq.n	800c7f4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c7ce:	f7fa f82f 	bl	8006830 <HAL_GetTick>
 800c7d2:	4602      	mov	r2, r0
 800c7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d6:	1ad3      	subs	r3, r2, r3
 800c7d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7dc:	d102      	bne.n	800c7e4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c7de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c7e2:	e05a      	b.n	800c89a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7ea:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d0cf      	beq.n	800c792 <SD_FindSCR+0x96>
 800c7f2:	e000      	b.n	800c7f6 <SD_FindSCR+0xfa>
      break;
 800c7f4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7fc:	f003 0308 	and.w	r3, r3, #8
 800c800:	2b00      	cmp	r3, #0
 800c802:	d005      	beq.n	800c810 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	2208      	movs	r2, #8
 800c80a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c80c:	2308      	movs	r3, #8
 800c80e:	e044      	b.n	800c89a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c816:	f003 0302 	and.w	r3, r3, #2
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d005      	beq.n	800c82a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	2202      	movs	r2, #2
 800c824:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c826:	2302      	movs	r3, #2
 800c828:	e037      	b.n	800c89a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c830:	f003 0320 	and.w	r3, r3, #32
 800c834:	2b00      	cmp	r3, #0
 800c836:	d005      	beq.n	800c844 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	2220      	movs	r2, #32
 800c83e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800c840:	2320      	movs	r3, #32
 800c842:	e02a      	b.n	800c89a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f240 523a 	movw	r2, #1338	; 0x53a
 800c84c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	061a      	lsls	r2, r3, #24
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	021b      	lsls	r3, r3, #8
 800c856:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c85a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	0a1b      	lsrs	r3, r3, #8
 800c860:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c864:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	0e1b      	lsrs	r3, r3, #24
 800c86a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86e:	601a      	str	r2, [r3, #0]
    scr++;
 800c870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c872:	3304      	adds	r3, #4
 800c874:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	061a      	lsls	r2, r3, #24
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	021b      	lsls	r3, r3, #8
 800c87e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c882:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	0a1b      	lsrs	r3, r3, #8
 800c888:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c88c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	0e1b      	lsrs	r3, r3, #24
 800c892:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c896:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	373c      	adds	r7, #60	; 0x3c
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd90      	pop	{r4, r7, pc}

0800c8a2 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b086      	sub	sp, #24
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ae:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d03f      	beq.n	800c93c <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800c8bc:	2300      	movs	r3, #0
 800c8be:	617b      	str	r3, [r7, #20]
 800c8c0:	e033      	b.n	800c92a <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f002 fdc6 	bl	800f458 <SDMMC_ReadFIFO>
 800c8cc:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	b2da      	uxtb	r2, r3
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	3301      	adds	r3, #1
 800c8da:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	3b01      	subs	r3, #1
 800c8e0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	0a1b      	lsrs	r3, r3, #8
 800c8e6:	b2da      	uxtb	r2, r3
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c8f2:	693b      	ldr	r3, [r7, #16]
 800c8f4:	3b01      	subs	r3, #1
 800c8f6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	0c1b      	lsrs	r3, r3, #16
 800c8fc:	b2da      	uxtb	r2, r3
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	3301      	adds	r3, #1
 800c906:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	3b01      	subs	r3, #1
 800c90c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	0e1b      	lsrs	r3, r3, #24
 800c912:	b2da      	uxtb	r2, r3
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	3301      	adds	r3, #1
 800c91c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	3b01      	subs	r3, #1
 800c922:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	3301      	adds	r3, #1
 800c928:	617b      	str	r3, [r7, #20]
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	2b07      	cmp	r3, #7
 800c92e:	d9c8      	bls.n	800c8c2 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	68fa      	ldr	r2, [r7, #12]
 800c934:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	693a      	ldr	r2, [r7, #16]
 800c93a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800c93c:	bf00      	nop
 800c93e:	3718      	adds	r7, #24
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b086      	sub	sp, #24
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6a1b      	ldr	r3, [r3, #32]
 800c950:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c956:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d043      	beq.n	800c9e6 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800c95e:	2300      	movs	r3, #0
 800c960:	617b      	str	r3, [r7, #20]
 800c962:	e037      	b.n	800c9d4 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	3301      	adds	r3, #1
 800c96e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	3b01      	subs	r3, #1
 800c974:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	781b      	ldrb	r3, [r3, #0]
 800c97a:	021a      	lsls	r2, r3, #8
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	4313      	orrs	r3, r2
 800c980:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	3301      	adds	r3, #1
 800c986:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	3b01      	subs	r3, #1
 800c98c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	041a      	lsls	r2, r3, #16
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	4313      	orrs	r3, r2
 800c998:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	3301      	adds	r3, #1
 800c99e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	3b01      	subs	r3, #1
 800c9a4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	061a      	lsls	r2, r3, #24
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	3b01      	subs	r3, #1
 800c9bc:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f107 0208 	add.w	r2, r7, #8
 800c9c6:	4611      	mov	r1, r2
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f002 fd52 	bl	800f472 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	617b      	str	r3, [r7, #20]
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	2b07      	cmp	r3, #7
 800c9d8:	d9c4      	bls.n	800c964 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	68fa      	ldr	r2, [r7, #12]
 800c9de:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	693a      	ldr	r2, [r7, #16]
 800c9e4:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800c9e6:	bf00      	nop
 800c9e8:	3718      	adds	r7, #24
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}

0800c9ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c9ee:	b580      	push	{r7, lr}
 800c9f0:	b082      	sub	sp, #8
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d101      	bne.n	800ca00 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	e049      	b.n	800ca94 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d106      	bne.n	800ca1a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f7f9 fcf7 	bl	8006408 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2202      	movs	r2, #2
 800ca1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681a      	ldr	r2, [r3, #0]
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	3304      	adds	r3, #4
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	4610      	mov	r0, r2
 800ca2e:	f000 fe05 	bl	800d63c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2201      	movs	r2, #1
 800ca36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2201      	movs	r2, #1
 800ca3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2201      	movs	r2, #1
 800ca46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2201      	movs	r2, #1
 800ca4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2201      	movs	r2, #1
 800ca56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2201      	movs	r2, #1
 800ca66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2201      	movs	r2, #1
 800ca76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2201      	movs	r2, #1
 800ca86:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ca92:	2300      	movs	r3, #0
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3708      	adds	r7, #8
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b085      	sub	sp, #20
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800caaa:	b2db      	uxtb	r3, r3
 800caac:	2b01      	cmp	r3, #1
 800caae:	d001      	beq.n	800cab4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800cab0:	2301      	movs	r3, #1
 800cab2:	e04c      	b.n	800cb4e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2202      	movs	r2, #2
 800cab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a26      	ldr	r2, [pc, #152]	; (800cb5c <HAL_TIM_Base_Start+0xc0>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d022      	beq.n	800cb0c <HAL_TIM_Base_Start+0x70>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cace:	d01d      	beq.n	800cb0c <HAL_TIM_Base_Start+0x70>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4a22      	ldr	r2, [pc, #136]	; (800cb60 <HAL_TIM_Base_Start+0xc4>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d018      	beq.n	800cb0c <HAL_TIM_Base_Start+0x70>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4a21      	ldr	r2, [pc, #132]	; (800cb64 <HAL_TIM_Base_Start+0xc8>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d013      	beq.n	800cb0c <HAL_TIM_Base_Start+0x70>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a1f      	ldr	r2, [pc, #124]	; (800cb68 <HAL_TIM_Base_Start+0xcc>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d00e      	beq.n	800cb0c <HAL_TIM_Base_Start+0x70>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4a1e      	ldr	r2, [pc, #120]	; (800cb6c <HAL_TIM_Base_Start+0xd0>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d009      	beq.n	800cb0c <HAL_TIM_Base_Start+0x70>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4a1c      	ldr	r2, [pc, #112]	; (800cb70 <HAL_TIM_Base_Start+0xd4>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d004      	beq.n	800cb0c <HAL_TIM_Base_Start+0x70>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	4a1b      	ldr	r2, [pc, #108]	; (800cb74 <HAL_TIM_Base_Start+0xd8>)
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d115      	bne.n	800cb38 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	689a      	ldr	r2, [r3, #8]
 800cb12:	4b19      	ldr	r3, [pc, #100]	; (800cb78 <HAL_TIM_Base_Start+0xdc>)
 800cb14:	4013      	ands	r3, r2
 800cb16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2b06      	cmp	r3, #6
 800cb1c:	d015      	beq.n	800cb4a <HAL_TIM_Base_Start+0xae>
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb24:	d011      	beq.n	800cb4a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	681a      	ldr	r2, [r3, #0]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f042 0201 	orr.w	r2, r2, #1
 800cb34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb36:	e008      	b.n	800cb4a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	681a      	ldr	r2, [r3, #0]
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f042 0201 	orr.w	r2, r2, #1
 800cb46:	601a      	str	r2, [r3, #0]
 800cb48:	e000      	b.n	800cb4c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cb4c:	2300      	movs	r3, #0
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3714      	adds	r7, #20
 800cb52:	46bd      	mov	sp, r7
 800cb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb58:	4770      	bx	lr
 800cb5a:	bf00      	nop
 800cb5c:	40010000 	.word	0x40010000
 800cb60:	40000400 	.word	0x40000400
 800cb64:	40000800 	.word	0x40000800
 800cb68:	40000c00 	.word	0x40000c00
 800cb6c:	40010400 	.word	0x40010400
 800cb70:	40014000 	.word	0x40014000
 800cb74:	40001800 	.word	0x40001800
 800cb78:	00010007 	.word	0x00010007

0800cb7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b085      	sub	sp, #20
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	2b01      	cmp	r3, #1
 800cb8e:	d001      	beq.n	800cb94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cb90:	2301      	movs	r3, #1
 800cb92:	e054      	b.n	800cc3e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2202      	movs	r2, #2
 800cb98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	68da      	ldr	r2, [r3, #12]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f042 0201 	orr.w	r2, r2, #1
 800cbaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a26      	ldr	r2, [pc, #152]	; (800cc4c <HAL_TIM_Base_Start_IT+0xd0>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d022      	beq.n	800cbfc <HAL_TIM_Base_Start_IT+0x80>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbbe:	d01d      	beq.n	800cbfc <HAL_TIM_Base_Start_IT+0x80>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	4a22      	ldr	r2, [pc, #136]	; (800cc50 <HAL_TIM_Base_Start_IT+0xd4>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d018      	beq.n	800cbfc <HAL_TIM_Base_Start_IT+0x80>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4a21      	ldr	r2, [pc, #132]	; (800cc54 <HAL_TIM_Base_Start_IT+0xd8>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d013      	beq.n	800cbfc <HAL_TIM_Base_Start_IT+0x80>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4a1f      	ldr	r2, [pc, #124]	; (800cc58 <HAL_TIM_Base_Start_IT+0xdc>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d00e      	beq.n	800cbfc <HAL_TIM_Base_Start_IT+0x80>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	4a1e      	ldr	r2, [pc, #120]	; (800cc5c <HAL_TIM_Base_Start_IT+0xe0>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d009      	beq.n	800cbfc <HAL_TIM_Base_Start_IT+0x80>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4a1c      	ldr	r2, [pc, #112]	; (800cc60 <HAL_TIM_Base_Start_IT+0xe4>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d004      	beq.n	800cbfc <HAL_TIM_Base_Start_IT+0x80>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4a1b      	ldr	r2, [pc, #108]	; (800cc64 <HAL_TIM_Base_Start_IT+0xe8>)
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	d115      	bne.n	800cc28 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	689a      	ldr	r2, [r3, #8]
 800cc02:	4b19      	ldr	r3, [pc, #100]	; (800cc68 <HAL_TIM_Base_Start_IT+0xec>)
 800cc04:	4013      	ands	r3, r2
 800cc06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2b06      	cmp	r3, #6
 800cc0c:	d015      	beq.n	800cc3a <HAL_TIM_Base_Start_IT+0xbe>
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc14:	d011      	beq.n	800cc3a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	681a      	ldr	r2, [r3, #0]
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f042 0201 	orr.w	r2, r2, #1
 800cc24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc26:	e008      	b.n	800cc3a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	681a      	ldr	r2, [r3, #0]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f042 0201 	orr.w	r2, r2, #1
 800cc36:	601a      	str	r2, [r3, #0]
 800cc38:	e000      	b.n	800cc3c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cc3c:	2300      	movs	r3, #0
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3714      	adds	r7, #20
 800cc42:	46bd      	mov	sp, r7
 800cc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc48:	4770      	bx	lr
 800cc4a:	bf00      	nop
 800cc4c:	40010000 	.word	0x40010000
 800cc50:	40000400 	.word	0x40000400
 800cc54:	40000800 	.word	0x40000800
 800cc58:	40000c00 	.word	0x40000c00
 800cc5c:	40010400 	.word	0x40010400
 800cc60:	40014000 	.word	0x40014000
 800cc64:	40001800 	.word	0x40001800
 800cc68:	00010007 	.word	0x00010007

0800cc6c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d101      	bne.n	800cc7e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	e049      	b.n	800cd12 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d106      	bne.n	800cc98 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f000 f841 	bl	800cd1a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2202      	movs	r2, #2
 800cc9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681a      	ldr	r2, [r3, #0]
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	3304      	adds	r3, #4
 800cca8:	4619      	mov	r1, r3
 800ccaa:	4610      	mov	r0, r2
 800ccac:	f000 fcc6 	bl	800d63c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2201      	movs	r2, #1
 800ccb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2201      	movs	r2, #1
 800ccbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2201      	movs	r2, #1
 800ccc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2201      	movs	r2, #1
 800cccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2201      	movs	r2, #1
 800ccdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2201      	movs	r2, #1
 800cce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2201      	movs	r2, #1
 800ccec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2201      	movs	r2, #1
 800cd04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cd10:	2300      	movs	r3, #0
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3708      	adds	r7, #8
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}

0800cd1a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800cd1a:	b480      	push	{r7}
 800cd1c:	b083      	sub	sp, #12
 800cd1e:	af00      	add	r7, sp, #0
 800cd20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800cd22:	bf00      	nop
 800cd24:	370c      	adds	r7, #12
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr
	...

0800cd30 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d104      	bne.n	800cd4e <HAL_TIM_IC_Start_IT+0x1e>
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cd4a:	b2db      	uxtb	r3, r3
 800cd4c:	e023      	b.n	800cd96 <HAL_TIM_IC_Start_IT+0x66>
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	2b04      	cmp	r3, #4
 800cd52:	d104      	bne.n	800cd5e <HAL_TIM_IC_Start_IT+0x2e>
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cd5a:	b2db      	uxtb	r3, r3
 800cd5c:	e01b      	b.n	800cd96 <HAL_TIM_IC_Start_IT+0x66>
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	2b08      	cmp	r3, #8
 800cd62:	d104      	bne.n	800cd6e <HAL_TIM_IC_Start_IT+0x3e>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cd6a:	b2db      	uxtb	r3, r3
 800cd6c:	e013      	b.n	800cd96 <HAL_TIM_IC_Start_IT+0x66>
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	2b0c      	cmp	r3, #12
 800cd72:	d104      	bne.n	800cd7e <HAL_TIM_IC_Start_IT+0x4e>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd7a:	b2db      	uxtb	r3, r3
 800cd7c:	e00b      	b.n	800cd96 <HAL_TIM_IC_Start_IT+0x66>
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	2b10      	cmp	r3, #16
 800cd82:	d104      	bne.n	800cd8e <HAL_TIM_IC_Start_IT+0x5e>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cd8a:	b2db      	uxtb	r3, r3
 800cd8c:	e003      	b.n	800cd96 <HAL_TIM_IC_Start_IT+0x66>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cd94:	b2db      	uxtb	r3, r3
 800cd96:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d104      	bne.n	800cda8 <HAL_TIM_IC_Start_IT+0x78>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cda4:	b2db      	uxtb	r3, r3
 800cda6:	e013      	b.n	800cdd0 <HAL_TIM_IC_Start_IT+0xa0>
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	2b04      	cmp	r3, #4
 800cdac:	d104      	bne.n	800cdb8 <HAL_TIM_IC_Start_IT+0x88>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cdb4:	b2db      	uxtb	r3, r3
 800cdb6:	e00b      	b.n	800cdd0 <HAL_TIM_IC_Start_IT+0xa0>
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	2b08      	cmp	r3, #8
 800cdbc:	d104      	bne.n	800cdc8 <HAL_TIM_IC_Start_IT+0x98>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800cdc4:	b2db      	uxtb	r3, r3
 800cdc6:	e003      	b.n	800cdd0 <HAL_TIM_IC_Start_IT+0xa0>
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800cdce:	b2db      	uxtb	r3, r3
 800cdd0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800cdd2:	7bbb      	ldrb	r3, [r7, #14]
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d102      	bne.n	800cdde <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800cdd8:	7b7b      	ldrb	r3, [r7, #13]
 800cdda:	2b01      	cmp	r3, #1
 800cddc:	d001      	beq.n	800cde2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800cdde:	2301      	movs	r3, #1
 800cde0:	e0e2      	b.n	800cfa8 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d104      	bne.n	800cdf2 <HAL_TIM_IC_Start_IT+0xc2>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2202      	movs	r2, #2
 800cdec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cdf0:	e023      	b.n	800ce3a <HAL_TIM_IC_Start_IT+0x10a>
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	2b04      	cmp	r3, #4
 800cdf6:	d104      	bne.n	800ce02 <HAL_TIM_IC_Start_IT+0xd2>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2202      	movs	r2, #2
 800cdfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ce00:	e01b      	b.n	800ce3a <HAL_TIM_IC_Start_IT+0x10a>
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	2b08      	cmp	r3, #8
 800ce06:	d104      	bne.n	800ce12 <HAL_TIM_IC_Start_IT+0xe2>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2202      	movs	r2, #2
 800ce0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ce10:	e013      	b.n	800ce3a <HAL_TIM_IC_Start_IT+0x10a>
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	2b0c      	cmp	r3, #12
 800ce16:	d104      	bne.n	800ce22 <HAL_TIM_IC_Start_IT+0xf2>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2202      	movs	r2, #2
 800ce1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ce20:	e00b      	b.n	800ce3a <HAL_TIM_IC_Start_IT+0x10a>
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	2b10      	cmp	r3, #16
 800ce26:	d104      	bne.n	800ce32 <HAL_TIM_IC_Start_IT+0x102>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2202      	movs	r2, #2
 800ce2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ce30:	e003      	b.n	800ce3a <HAL_TIM_IC_Start_IT+0x10a>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2202      	movs	r2, #2
 800ce36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d104      	bne.n	800ce4a <HAL_TIM_IC_Start_IT+0x11a>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2202      	movs	r2, #2
 800ce44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce48:	e013      	b.n	800ce72 <HAL_TIM_IC_Start_IT+0x142>
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	2b04      	cmp	r3, #4
 800ce4e:	d104      	bne.n	800ce5a <HAL_TIM_IC_Start_IT+0x12a>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2202      	movs	r2, #2
 800ce54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce58:	e00b      	b.n	800ce72 <HAL_TIM_IC_Start_IT+0x142>
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	2b08      	cmp	r3, #8
 800ce5e:	d104      	bne.n	800ce6a <HAL_TIM_IC_Start_IT+0x13a>
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2202      	movs	r2, #2
 800ce64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ce68:	e003      	b.n	800ce72 <HAL_TIM_IC_Start_IT+0x142>
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2202      	movs	r2, #2
 800ce6e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	2b0c      	cmp	r3, #12
 800ce76:	d841      	bhi.n	800cefc <HAL_TIM_IC_Start_IT+0x1cc>
 800ce78:	a201      	add	r2, pc, #4	; (adr r2, 800ce80 <HAL_TIM_IC_Start_IT+0x150>)
 800ce7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce7e:	bf00      	nop
 800ce80:	0800ceb5 	.word	0x0800ceb5
 800ce84:	0800cefd 	.word	0x0800cefd
 800ce88:	0800cefd 	.word	0x0800cefd
 800ce8c:	0800cefd 	.word	0x0800cefd
 800ce90:	0800cec7 	.word	0x0800cec7
 800ce94:	0800cefd 	.word	0x0800cefd
 800ce98:	0800cefd 	.word	0x0800cefd
 800ce9c:	0800cefd 	.word	0x0800cefd
 800cea0:	0800ced9 	.word	0x0800ced9
 800cea4:	0800cefd 	.word	0x0800cefd
 800cea8:	0800cefd 	.word	0x0800cefd
 800ceac:	0800cefd 	.word	0x0800cefd
 800ceb0:	0800ceeb 	.word	0x0800ceeb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	68da      	ldr	r2, [r3, #12]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f042 0202 	orr.w	r2, r2, #2
 800cec2:	60da      	str	r2, [r3, #12]
      break;
 800cec4:	e01d      	b.n	800cf02 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	68da      	ldr	r2, [r3, #12]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f042 0204 	orr.w	r2, r2, #4
 800ced4:	60da      	str	r2, [r3, #12]
      break;
 800ced6:	e014      	b.n	800cf02 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	68da      	ldr	r2, [r3, #12]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f042 0208 	orr.w	r2, r2, #8
 800cee6:	60da      	str	r2, [r3, #12]
      break;
 800cee8:	e00b      	b.n	800cf02 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	68da      	ldr	r2, [r3, #12]
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f042 0210 	orr.w	r2, r2, #16
 800cef8:	60da      	str	r2, [r3, #12]
      break;
 800cefa:	e002      	b.n	800cf02 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800cefc:	2301      	movs	r3, #1
 800cefe:	73fb      	strb	r3, [r7, #15]
      break;
 800cf00:	bf00      	nop
  }

  if (status == HAL_OK)
 800cf02:	7bfb      	ldrb	r3, [r7, #15]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d14e      	bne.n	800cfa6 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	6839      	ldr	r1, [r7, #0]
 800cf10:	4618      	mov	r0, r3
 800cf12:	f000 fe8b 	bl	800dc2c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	4a25      	ldr	r2, [pc, #148]	; (800cfb0 <HAL_TIM_IC_Start_IT+0x280>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d022      	beq.n	800cf66 <HAL_TIM_IC_Start_IT+0x236>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf28:	d01d      	beq.n	800cf66 <HAL_TIM_IC_Start_IT+0x236>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	4a21      	ldr	r2, [pc, #132]	; (800cfb4 <HAL_TIM_IC_Start_IT+0x284>)
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d018      	beq.n	800cf66 <HAL_TIM_IC_Start_IT+0x236>
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	4a1f      	ldr	r2, [pc, #124]	; (800cfb8 <HAL_TIM_IC_Start_IT+0x288>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d013      	beq.n	800cf66 <HAL_TIM_IC_Start_IT+0x236>
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	4a1e      	ldr	r2, [pc, #120]	; (800cfbc <HAL_TIM_IC_Start_IT+0x28c>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d00e      	beq.n	800cf66 <HAL_TIM_IC_Start_IT+0x236>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	4a1c      	ldr	r2, [pc, #112]	; (800cfc0 <HAL_TIM_IC_Start_IT+0x290>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d009      	beq.n	800cf66 <HAL_TIM_IC_Start_IT+0x236>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	4a1b      	ldr	r2, [pc, #108]	; (800cfc4 <HAL_TIM_IC_Start_IT+0x294>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d004      	beq.n	800cf66 <HAL_TIM_IC_Start_IT+0x236>
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	4a19      	ldr	r2, [pc, #100]	; (800cfc8 <HAL_TIM_IC_Start_IT+0x298>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d115      	bne.n	800cf92 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	689a      	ldr	r2, [r3, #8]
 800cf6c:	4b17      	ldr	r3, [pc, #92]	; (800cfcc <HAL_TIM_IC_Start_IT+0x29c>)
 800cf6e:	4013      	ands	r3, r2
 800cf70:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	2b06      	cmp	r3, #6
 800cf76:	d015      	beq.n	800cfa4 <HAL_TIM_IC_Start_IT+0x274>
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf7e:	d011      	beq.n	800cfa4 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	681a      	ldr	r2, [r3, #0]
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f042 0201 	orr.w	r2, r2, #1
 800cf8e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf90:	e008      	b.n	800cfa4 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	681a      	ldr	r2, [r3, #0]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f042 0201 	orr.w	r2, r2, #1
 800cfa0:	601a      	str	r2, [r3, #0]
 800cfa2:	e000      	b.n	800cfa6 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cfa4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800cfa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3710      	adds	r7, #16
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}
 800cfb0:	40010000 	.word	0x40010000
 800cfb4:	40000400 	.word	0x40000400
 800cfb8:	40000800 	.word	0x40000800
 800cfbc:	40000c00 	.word	0x40000c00
 800cfc0:	40010400 	.word	0x40010400
 800cfc4:	40014000 	.word	0x40014000
 800cfc8:	40001800 	.word	0x40001800
 800cfcc:	00010007 	.word	0x00010007

0800cfd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b082      	sub	sp, #8
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	691b      	ldr	r3, [r3, #16]
 800cfde:	f003 0302 	and.w	r3, r3, #2
 800cfe2:	2b02      	cmp	r3, #2
 800cfe4:	d122      	bne.n	800d02c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	68db      	ldr	r3, [r3, #12]
 800cfec:	f003 0302 	and.w	r3, r3, #2
 800cff0:	2b02      	cmp	r3, #2
 800cff2:	d11b      	bne.n	800d02c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f06f 0202 	mvn.w	r2, #2
 800cffc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2201      	movs	r2, #1
 800d002:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	699b      	ldr	r3, [r3, #24]
 800d00a:	f003 0303 	and.w	r3, r3, #3
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d003      	beq.n	800d01a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f7f8 f84c 	bl	80050b0 <HAL_TIM_IC_CaptureCallback>
 800d018:	e005      	b.n	800d026 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 fae4 	bl	800d5e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f000 faeb 	bl	800d5fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2200      	movs	r2, #0
 800d02a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	691b      	ldr	r3, [r3, #16]
 800d032:	f003 0304 	and.w	r3, r3, #4
 800d036:	2b04      	cmp	r3, #4
 800d038:	d122      	bne.n	800d080 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	68db      	ldr	r3, [r3, #12]
 800d040:	f003 0304 	and.w	r3, r3, #4
 800d044:	2b04      	cmp	r3, #4
 800d046:	d11b      	bne.n	800d080 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	f06f 0204 	mvn.w	r2, #4
 800d050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2202      	movs	r2, #2
 800d056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	699b      	ldr	r3, [r3, #24]
 800d05e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d062:	2b00      	cmp	r3, #0
 800d064:	d003      	beq.n	800d06e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f7f8 f822 	bl	80050b0 <HAL_TIM_IC_CaptureCallback>
 800d06c:	e005      	b.n	800d07a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f000 faba 	bl	800d5e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f000 fac1 	bl	800d5fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2200      	movs	r2, #0
 800d07e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	691b      	ldr	r3, [r3, #16]
 800d086:	f003 0308 	and.w	r3, r3, #8
 800d08a:	2b08      	cmp	r3, #8
 800d08c:	d122      	bne.n	800d0d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	68db      	ldr	r3, [r3, #12]
 800d094:	f003 0308 	and.w	r3, r3, #8
 800d098:	2b08      	cmp	r3, #8
 800d09a:	d11b      	bne.n	800d0d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	f06f 0208 	mvn.w	r2, #8
 800d0a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2204      	movs	r2, #4
 800d0aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	69db      	ldr	r3, [r3, #28]
 800d0b2:	f003 0303 	and.w	r3, r3, #3
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d003      	beq.n	800d0c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f7f7 fff8 	bl	80050b0 <HAL_TIM_IC_CaptureCallback>
 800d0c0:	e005      	b.n	800d0ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f000 fa90 	bl	800d5e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 fa97 	bl	800d5fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	691b      	ldr	r3, [r3, #16]
 800d0da:	f003 0310 	and.w	r3, r3, #16
 800d0de:	2b10      	cmp	r3, #16
 800d0e0:	d122      	bne.n	800d128 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	68db      	ldr	r3, [r3, #12]
 800d0e8:	f003 0310 	and.w	r3, r3, #16
 800d0ec:	2b10      	cmp	r3, #16
 800d0ee:	d11b      	bne.n	800d128 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f06f 0210 	mvn.w	r2, #16
 800d0f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2208      	movs	r2, #8
 800d0fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	69db      	ldr	r3, [r3, #28]
 800d106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d003      	beq.n	800d116 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f7f7 ffce 	bl	80050b0 <HAL_TIM_IC_CaptureCallback>
 800d114:	e005      	b.n	800d122 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f000 fa66 	bl	800d5e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f000 fa6d 	bl	800d5fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2200      	movs	r2, #0
 800d126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	691b      	ldr	r3, [r3, #16]
 800d12e:	f003 0301 	and.w	r3, r3, #1
 800d132:	2b01      	cmp	r3, #1
 800d134:	d10e      	bne.n	800d154 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	68db      	ldr	r3, [r3, #12]
 800d13c:	f003 0301 	and.w	r3, r3, #1
 800d140:	2b01      	cmp	r3, #1
 800d142:	d107      	bne.n	800d154 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f06f 0201 	mvn.w	r2, #1
 800d14c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f7f7 ff28 	bl	8004fa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	691b      	ldr	r3, [r3, #16]
 800d15a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d15e:	2b80      	cmp	r3, #128	; 0x80
 800d160:	d10e      	bne.n	800d180 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	68db      	ldr	r3, [r3, #12]
 800d168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d16c:	2b80      	cmp	r3, #128	; 0x80
 800d16e:	d107      	bne.n	800d180 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f000 fe14 	bl	800dda8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	691b      	ldr	r3, [r3, #16]
 800d186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d18a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d18e:	d10e      	bne.n	800d1ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	68db      	ldr	r3, [r3, #12]
 800d196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d19a:	2b80      	cmp	r3, #128	; 0x80
 800d19c:	d107      	bne.n	800d1ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d1a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f000 fe07 	bl	800ddbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	691b      	ldr	r3, [r3, #16]
 800d1b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1b8:	2b40      	cmp	r3, #64	; 0x40
 800d1ba:	d10e      	bne.n	800d1da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	68db      	ldr	r3, [r3, #12]
 800d1c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1c6:	2b40      	cmp	r3, #64	; 0x40
 800d1c8:	d107      	bne.n	800d1da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d1d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f000 fa1b 	bl	800d610 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	691b      	ldr	r3, [r3, #16]
 800d1e0:	f003 0320 	and.w	r3, r3, #32
 800d1e4:	2b20      	cmp	r3, #32
 800d1e6:	d10e      	bne.n	800d206 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	68db      	ldr	r3, [r3, #12]
 800d1ee:	f003 0320 	and.w	r3, r3, #32
 800d1f2:	2b20      	cmp	r3, #32
 800d1f4:	d107      	bne.n	800d206 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f06f 0220 	mvn.w	r2, #32
 800d1fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f000 fdc7 	bl	800dd94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d206:	bf00      	nop
 800d208:	3708      	adds	r7, #8
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}

0800d20e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800d20e:	b580      	push	{r7, lr}
 800d210:	b086      	sub	sp, #24
 800d212:	af00      	add	r7, sp, #0
 800d214:	60f8      	str	r0, [r7, #12]
 800d216:	60b9      	str	r1, [r7, #8]
 800d218:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d21a:	2300      	movs	r3, #0
 800d21c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d224:	2b01      	cmp	r3, #1
 800d226:	d101      	bne.n	800d22c <HAL_TIM_IC_ConfigChannel+0x1e>
 800d228:	2302      	movs	r3, #2
 800d22a:	e088      	b.n	800d33e <HAL_TIM_IC_ConfigChannel+0x130>
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	2201      	movs	r2, #1
 800d230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d11b      	bne.n	800d272 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	6818      	ldr	r0, [r3, #0]
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	6819      	ldr	r1, [r3, #0]
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	685a      	ldr	r2, [r3, #4]
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	68db      	ldr	r3, [r3, #12]
 800d24a:	f000 fb2b 	bl	800d8a4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	699a      	ldr	r2, [r3, #24]
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f022 020c 	bic.w	r2, r2, #12
 800d25c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	6999      	ldr	r1, [r3, #24]
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	689a      	ldr	r2, [r3, #8]
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	430a      	orrs	r2, r1
 800d26e:	619a      	str	r2, [r3, #24]
 800d270:	e060      	b.n	800d334 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2b04      	cmp	r3, #4
 800d276:	d11c      	bne.n	800d2b2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	6818      	ldr	r0, [r3, #0]
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	6819      	ldr	r1, [r3, #0]
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	685a      	ldr	r2, [r3, #4]
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	68db      	ldr	r3, [r3, #12]
 800d288:	f000 fbaf 	bl	800d9ea <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	699a      	ldr	r2, [r3, #24]
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d29a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	6999      	ldr	r1, [r3, #24]
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	689b      	ldr	r3, [r3, #8]
 800d2a6:	021a      	lsls	r2, r3, #8
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	430a      	orrs	r2, r1
 800d2ae:	619a      	str	r2, [r3, #24]
 800d2b0:	e040      	b.n	800d334 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2b08      	cmp	r3, #8
 800d2b6:	d11b      	bne.n	800d2f0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	6818      	ldr	r0, [r3, #0]
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	6819      	ldr	r1, [r3, #0]
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	685a      	ldr	r2, [r3, #4]
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	68db      	ldr	r3, [r3, #12]
 800d2c8:	f000 fbfc 	bl	800dac4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	69da      	ldr	r2, [r3, #28]
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f022 020c 	bic.w	r2, r2, #12
 800d2da:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	69d9      	ldr	r1, [r3, #28]
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	689a      	ldr	r2, [r3, #8]
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	430a      	orrs	r2, r1
 800d2ec:	61da      	str	r2, [r3, #28]
 800d2ee:	e021      	b.n	800d334 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2b0c      	cmp	r3, #12
 800d2f4:	d11c      	bne.n	800d330 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	6818      	ldr	r0, [r3, #0]
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	6819      	ldr	r1, [r3, #0]
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	685a      	ldr	r2, [r3, #4]
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	68db      	ldr	r3, [r3, #12]
 800d306:	f000 fc19 	bl	800db3c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	69da      	ldr	r2, [r3, #28]
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d318:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	69d9      	ldr	r1, [r3, #28]
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	689b      	ldr	r3, [r3, #8]
 800d324:	021a      	lsls	r2, r3, #8
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	430a      	orrs	r2, r1
 800d32c:	61da      	str	r2, [r3, #28]
 800d32e:	e001      	b.n	800d334 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800d330:	2301      	movs	r3, #1
 800d332:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2200      	movs	r2, #0
 800d338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d33c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3718      	adds	r7, #24
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}
	...

0800d348 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b084      	sub	sp, #16
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d352:	2300      	movs	r3, #0
 800d354:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d35c:	2b01      	cmp	r3, #1
 800d35e:	d101      	bne.n	800d364 <HAL_TIM_ConfigClockSource+0x1c>
 800d360:	2302      	movs	r3, #2
 800d362:	e0b4      	b.n	800d4ce <HAL_TIM_ConfigClockSource+0x186>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2201      	movs	r2, #1
 800d368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2202      	movs	r2, #2
 800d370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	689b      	ldr	r3, [r3, #8]
 800d37a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d37c:	68ba      	ldr	r2, [r7, #8]
 800d37e:	4b56      	ldr	r3, [pc, #344]	; (800d4d8 <HAL_TIM_ConfigClockSource+0x190>)
 800d380:	4013      	ands	r3, r2
 800d382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d38a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	68ba      	ldr	r2, [r7, #8]
 800d392:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d39c:	d03e      	beq.n	800d41c <HAL_TIM_ConfigClockSource+0xd4>
 800d39e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d3a2:	f200 8087 	bhi.w	800d4b4 <HAL_TIM_ConfigClockSource+0x16c>
 800d3a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3aa:	f000 8086 	beq.w	800d4ba <HAL_TIM_ConfigClockSource+0x172>
 800d3ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3b2:	d87f      	bhi.n	800d4b4 <HAL_TIM_ConfigClockSource+0x16c>
 800d3b4:	2b70      	cmp	r3, #112	; 0x70
 800d3b6:	d01a      	beq.n	800d3ee <HAL_TIM_ConfigClockSource+0xa6>
 800d3b8:	2b70      	cmp	r3, #112	; 0x70
 800d3ba:	d87b      	bhi.n	800d4b4 <HAL_TIM_ConfigClockSource+0x16c>
 800d3bc:	2b60      	cmp	r3, #96	; 0x60
 800d3be:	d050      	beq.n	800d462 <HAL_TIM_ConfigClockSource+0x11a>
 800d3c0:	2b60      	cmp	r3, #96	; 0x60
 800d3c2:	d877      	bhi.n	800d4b4 <HAL_TIM_ConfigClockSource+0x16c>
 800d3c4:	2b50      	cmp	r3, #80	; 0x50
 800d3c6:	d03c      	beq.n	800d442 <HAL_TIM_ConfigClockSource+0xfa>
 800d3c8:	2b50      	cmp	r3, #80	; 0x50
 800d3ca:	d873      	bhi.n	800d4b4 <HAL_TIM_ConfigClockSource+0x16c>
 800d3cc:	2b40      	cmp	r3, #64	; 0x40
 800d3ce:	d058      	beq.n	800d482 <HAL_TIM_ConfigClockSource+0x13a>
 800d3d0:	2b40      	cmp	r3, #64	; 0x40
 800d3d2:	d86f      	bhi.n	800d4b4 <HAL_TIM_ConfigClockSource+0x16c>
 800d3d4:	2b30      	cmp	r3, #48	; 0x30
 800d3d6:	d064      	beq.n	800d4a2 <HAL_TIM_ConfigClockSource+0x15a>
 800d3d8:	2b30      	cmp	r3, #48	; 0x30
 800d3da:	d86b      	bhi.n	800d4b4 <HAL_TIM_ConfigClockSource+0x16c>
 800d3dc:	2b20      	cmp	r3, #32
 800d3de:	d060      	beq.n	800d4a2 <HAL_TIM_ConfigClockSource+0x15a>
 800d3e0:	2b20      	cmp	r3, #32
 800d3e2:	d867      	bhi.n	800d4b4 <HAL_TIM_ConfigClockSource+0x16c>
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d05c      	beq.n	800d4a2 <HAL_TIM_ConfigClockSource+0x15a>
 800d3e8:	2b10      	cmp	r3, #16
 800d3ea:	d05a      	beq.n	800d4a2 <HAL_TIM_ConfigClockSource+0x15a>
 800d3ec:	e062      	b.n	800d4b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6818      	ldr	r0, [r3, #0]
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	6899      	ldr	r1, [r3, #8]
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	685a      	ldr	r2, [r3, #4]
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	68db      	ldr	r3, [r3, #12]
 800d3fe:	f000 fbf5 	bl	800dbec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	689b      	ldr	r3, [r3, #8]
 800d408:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d410:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	68ba      	ldr	r2, [r7, #8]
 800d418:	609a      	str	r2, [r3, #8]
      break;
 800d41a:	e04f      	b.n	800d4bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6818      	ldr	r0, [r3, #0]
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	6899      	ldr	r1, [r3, #8]
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	685a      	ldr	r2, [r3, #4]
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	68db      	ldr	r3, [r3, #12]
 800d42c:	f000 fbde 	bl	800dbec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	689a      	ldr	r2, [r3, #8]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d43e:	609a      	str	r2, [r3, #8]
      break;
 800d440:	e03c      	b.n	800d4bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6818      	ldr	r0, [r3, #0]
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	6859      	ldr	r1, [r3, #4]
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	68db      	ldr	r3, [r3, #12]
 800d44e:	461a      	mov	r2, r3
 800d450:	f000 fa9c 	bl	800d98c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	2150      	movs	r1, #80	; 0x50
 800d45a:	4618      	mov	r0, r3
 800d45c:	f000 fbab 	bl	800dbb6 <TIM_ITRx_SetConfig>
      break;
 800d460:	e02c      	b.n	800d4bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6818      	ldr	r0, [r3, #0]
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	6859      	ldr	r1, [r3, #4]
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	68db      	ldr	r3, [r3, #12]
 800d46e:	461a      	mov	r2, r3
 800d470:	f000 faf8 	bl	800da64 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	2160      	movs	r1, #96	; 0x60
 800d47a:	4618      	mov	r0, r3
 800d47c:	f000 fb9b 	bl	800dbb6 <TIM_ITRx_SetConfig>
      break;
 800d480:	e01c      	b.n	800d4bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6818      	ldr	r0, [r3, #0]
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	6859      	ldr	r1, [r3, #4]
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	68db      	ldr	r3, [r3, #12]
 800d48e:	461a      	mov	r2, r3
 800d490:	f000 fa7c 	bl	800d98c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	2140      	movs	r1, #64	; 0x40
 800d49a:	4618      	mov	r0, r3
 800d49c:	f000 fb8b 	bl	800dbb6 <TIM_ITRx_SetConfig>
      break;
 800d4a0:	e00c      	b.n	800d4bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681a      	ldr	r2, [r3, #0]
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	4610      	mov	r0, r2
 800d4ae:	f000 fb82 	bl	800dbb6 <TIM_ITRx_SetConfig>
      break;
 800d4b2:	e003      	b.n	800d4bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	73fb      	strb	r3, [r7, #15]
      break;
 800d4b8:	e000      	b.n	800d4bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d4ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2201      	movs	r2, #1
 800d4c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d4cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3710      	adds	r7, #16
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}
 800d4d6:	bf00      	nop
 800d4d8:	fffeff88 	.word	0xfffeff88

0800d4dc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b082      	sub	sp, #8
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4ec:	2b01      	cmp	r3, #1
 800d4ee:	d101      	bne.n	800d4f4 <HAL_TIM_SlaveConfigSynchro+0x18>
 800d4f0:	2302      	movs	r3, #2
 800d4f2:	e031      	b.n	800d558 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2202      	movs	r2, #2
 800d500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800d504:	6839      	ldr	r1, [r7, #0]
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f000 f938 	bl	800d77c <TIM_SlaveTimer_SetConfig>
 800d50c:	4603      	mov	r3, r0
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d009      	beq.n	800d526 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2201      	movs	r2, #1
 800d516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2200      	movs	r2, #0
 800d51e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800d522:	2301      	movs	r3, #1
 800d524:	e018      	b.n	800d558 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	68da      	ldr	r2, [r3, #12]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d534:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	68da      	ldr	r2, [r3, #12]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d544:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2201      	movs	r2, #1
 800d54a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2200      	movs	r2, #0
 800d552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d556:	2300      	movs	r3, #0
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3708      	adds	r7, #8
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d560:	b480      	push	{r7}
 800d562:	b085      	sub	sp, #20
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
 800d568:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800d56a:	2300      	movs	r3, #0
 800d56c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	2b0c      	cmp	r3, #12
 800d572:	d831      	bhi.n	800d5d8 <HAL_TIM_ReadCapturedValue+0x78>
 800d574:	a201      	add	r2, pc, #4	; (adr r2, 800d57c <HAL_TIM_ReadCapturedValue+0x1c>)
 800d576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d57a:	bf00      	nop
 800d57c:	0800d5b1 	.word	0x0800d5b1
 800d580:	0800d5d9 	.word	0x0800d5d9
 800d584:	0800d5d9 	.word	0x0800d5d9
 800d588:	0800d5d9 	.word	0x0800d5d9
 800d58c:	0800d5bb 	.word	0x0800d5bb
 800d590:	0800d5d9 	.word	0x0800d5d9
 800d594:	0800d5d9 	.word	0x0800d5d9
 800d598:	0800d5d9 	.word	0x0800d5d9
 800d59c:	0800d5c5 	.word	0x0800d5c5
 800d5a0:	0800d5d9 	.word	0x0800d5d9
 800d5a4:	0800d5d9 	.word	0x0800d5d9
 800d5a8:	0800d5d9 	.word	0x0800d5d9
 800d5ac:	0800d5cf 	.word	0x0800d5cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5b6:	60fb      	str	r3, [r7, #12]

      break;
 800d5b8:	e00f      	b.n	800d5da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5c0:	60fb      	str	r3, [r7, #12]

      break;
 800d5c2:	e00a      	b.n	800d5da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5ca:	60fb      	str	r3, [r7, #12]

      break;
 800d5cc:	e005      	b.n	800d5da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5d4:	60fb      	str	r3, [r7, #12]

      break;
 800d5d6:	e000      	b.n	800d5da <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800d5d8:	bf00      	nop
  }

  return tmpreg;
 800d5da:	68fb      	ldr	r3, [r7, #12]
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3714      	adds	r7, #20
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr

0800d5e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b083      	sub	sp, #12
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d5f0:	bf00      	nop
 800d5f2:	370c      	adds	r7, #12
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fa:	4770      	bx	lr

0800d5fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b083      	sub	sp, #12
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d604:	bf00      	nop
 800d606:	370c      	adds	r7, #12
 800d608:	46bd      	mov	sp, r7
 800d60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60e:	4770      	bx	lr

0800d610 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d610:	b480      	push	{r7}
 800d612:	b083      	sub	sp, #12
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d618:	bf00      	nop
 800d61a:	370c      	adds	r7, #12
 800d61c:	46bd      	mov	sp, r7
 800d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d622:	4770      	bx	lr

0800d624 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(TIM_HandleTypeDef *htim)
{
 800d624:	b480      	push	{r7}
 800d626:	b083      	sub	sp, #12
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	7f1b      	ldrb	r3, [r3, #28]
}
 800d630:	4618      	mov	r0, r3
 800d632:	370c      	adds	r7, #12
 800d634:	46bd      	mov	sp, r7
 800d636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63a:	4770      	bx	lr

0800d63c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d63c:	b480      	push	{r7}
 800d63e:	b085      	sub	sp, #20
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
 800d644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	4a40      	ldr	r2, [pc, #256]	; (800d750 <TIM_Base_SetConfig+0x114>)
 800d650:	4293      	cmp	r3, r2
 800d652:	d013      	beq.n	800d67c <TIM_Base_SetConfig+0x40>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d65a:	d00f      	beq.n	800d67c <TIM_Base_SetConfig+0x40>
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	4a3d      	ldr	r2, [pc, #244]	; (800d754 <TIM_Base_SetConfig+0x118>)
 800d660:	4293      	cmp	r3, r2
 800d662:	d00b      	beq.n	800d67c <TIM_Base_SetConfig+0x40>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	4a3c      	ldr	r2, [pc, #240]	; (800d758 <TIM_Base_SetConfig+0x11c>)
 800d668:	4293      	cmp	r3, r2
 800d66a:	d007      	beq.n	800d67c <TIM_Base_SetConfig+0x40>
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	4a3b      	ldr	r2, [pc, #236]	; (800d75c <TIM_Base_SetConfig+0x120>)
 800d670:	4293      	cmp	r3, r2
 800d672:	d003      	beq.n	800d67c <TIM_Base_SetConfig+0x40>
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	4a3a      	ldr	r2, [pc, #232]	; (800d760 <TIM_Base_SetConfig+0x124>)
 800d678:	4293      	cmp	r3, r2
 800d67a:	d108      	bne.n	800d68e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	685b      	ldr	r3, [r3, #4]
 800d688:	68fa      	ldr	r2, [r7, #12]
 800d68a:	4313      	orrs	r3, r2
 800d68c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	4a2f      	ldr	r2, [pc, #188]	; (800d750 <TIM_Base_SetConfig+0x114>)
 800d692:	4293      	cmp	r3, r2
 800d694:	d02b      	beq.n	800d6ee <TIM_Base_SetConfig+0xb2>
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d69c:	d027      	beq.n	800d6ee <TIM_Base_SetConfig+0xb2>
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	4a2c      	ldr	r2, [pc, #176]	; (800d754 <TIM_Base_SetConfig+0x118>)
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d023      	beq.n	800d6ee <TIM_Base_SetConfig+0xb2>
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	4a2b      	ldr	r2, [pc, #172]	; (800d758 <TIM_Base_SetConfig+0x11c>)
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	d01f      	beq.n	800d6ee <TIM_Base_SetConfig+0xb2>
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	4a2a      	ldr	r2, [pc, #168]	; (800d75c <TIM_Base_SetConfig+0x120>)
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	d01b      	beq.n	800d6ee <TIM_Base_SetConfig+0xb2>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	4a29      	ldr	r2, [pc, #164]	; (800d760 <TIM_Base_SetConfig+0x124>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d017      	beq.n	800d6ee <TIM_Base_SetConfig+0xb2>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	4a28      	ldr	r2, [pc, #160]	; (800d764 <TIM_Base_SetConfig+0x128>)
 800d6c2:	4293      	cmp	r3, r2
 800d6c4:	d013      	beq.n	800d6ee <TIM_Base_SetConfig+0xb2>
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	4a27      	ldr	r2, [pc, #156]	; (800d768 <TIM_Base_SetConfig+0x12c>)
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	d00f      	beq.n	800d6ee <TIM_Base_SetConfig+0xb2>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	4a26      	ldr	r2, [pc, #152]	; (800d76c <TIM_Base_SetConfig+0x130>)
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d00b      	beq.n	800d6ee <TIM_Base_SetConfig+0xb2>
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	4a25      	ldr	r2, [pc, #148]	; (800d770 <TIM_Base_SetConfig+0x134>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d007      	beq.n	800d6ee <TIM_Base_SetConfig+0xb2>
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	4a24      	ldr	r2, [pc, #144]	; (800d774 <TIM_Base_SetConfig+0x138>)
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d003      	beq.n	800d6ee <TIM_Base_SetConfig+0xb2>
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	4a23      	ldr	r2, [pc, #140]	; (800d778 <TIM_Base_SetConfig+0x13c>)
 800d6ea:	4293      	cmp	r3, r2
 800d6ec:	d108      	bne.n	800d700 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d6f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	68db      	ldr	r3, [r3, #12]
 800d6fa:	68fa      	ldr	r2, [r7, #12]
 800d6fc:	4313      	orrs	r3, r2
 800d6fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	695b      	ldr	r3, [r3, #20]
 800d70a:	4313      	orrs	r3, r2
 800d70c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	68fa      	ldr	r2, [r7, #12]
 800d712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	689a      	ldr	r2, [r3, #8]
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	681a      	ldr	r2, [r3, #0]
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	4a0a      	ldr	r2, [pc, #40]	; (800d750 <TIM_Base_SetConfig+0x114>)
 800d728:	4293      	cmp	r3, r2
 800d72a:	d003      	beq.n	800d734 <TIM_Base_SetConfig+0xf8>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	4a0c      	ldr	r2, [pc, #48]	; (800d760 <TIM_Base_SetConfig+0x124>)
 800d730:	4293      	cmp	r3, r2
 800d732:	d103      	bne.n	800d73c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	691a      	ldr	r2, [r3, #16]
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2201      	movs	r2, #1
 800d740:	615a      	str	r2, [r3, #20]
}
 800d742:	bf00      	nop
 800d744:	3714      	adds	r7, #20
 800d746:	46bd      	mov	sp, r7
 800d748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74c:	4770      	bx	lr
 800d74e:	bf00      	nop
 800d750:	40010000 	.word	0x40010000
 800d754:	40000400 	.word	0x40000400
 800d758:	40000800 	.word	0x40000800
 800d75c:	40000c00 	.word	0x40000c00
 800d760:	40010400 	.word	0x40010400
 800d764:	40014000 	.word	0x40014000
 800d768:	40014400 	.word	0x40014400
 800d76c:	40014800 	.word	0x40014800
 800d770:	40001800 	.word	0x40001800
 800d774:	40001c00 	.word	0x40001c00
 800d778:	40002000 	.word	0x40002000

0800d77c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b086      	sub	sp, #24
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d786:	2300      	movs	r3, #0
 800d788:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	689b      	ldr	r3, [r3, #8]
 800d790:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d798:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	685b      	ldr	r3, [r3, #4]
 800d79e:	693a      	ldr	r2, [r7, #16]
 800d7a0:	4313      	orrs	r3, r2
 800d7a2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800d7a4:	693a      	ldr	r2, [r7, #16]
 800d7a6:	4b3e      	ldr	r3, [pc, #248]	; (800d8a0 <TIM_SlaveTimer_SetConfig+0x124>)
 800d7a8:	4013      	ands	r3, r2
 800d7aa:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	693a      	ldr	r2, [r7, #16]
 800d7b2:	4313      	orrs	r3, r2
 800d7b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	693a      	ldr	r2, [r7, #16]
 800d7bc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	685b      	ldr	r3, [r3, #4]
 800d7c2:	2b70      	cmp	r3, #112	; 0x70
 800d7c4:	d01a      	beq.n	800d7fc <TIM_SlaveTimer_SetConfig+0x80>
 800d7c6:	2b70      	cmp	r3, #112	; 0x70
 800d7c8:	d860      	bhi.n	800d88c <TIM_SlaveTimer_SetConfig+0x110>
 800d7ca:	2b60      	cmp	r3, #96	; 0x60
 800d7cc:	d054      	beq.n	800d878 <TIM_SlaveTimer_SetConfig+0xfc>
 800d7ce:	2b60      	cmp	r3, #96	; 0x60
 800d7d0:	d85c      	bhi.n	800d88c <TIM_SlaveTimer_SetConfig+0x110>
 800d7d2:	2b50      	cmp	r3, #80	; 0x50
 800d7d4:	d046      	beq.n	800d864 <TIM_SlaveTimer_SetConfig+0xe8>
 800d7d6:	2b50      	cmp	r3, #80	; 0x50
 800d7d8:	d858      	bhi.n	800d88c <TIM_SlaveTimer_SetConfig+0x110>
 800d7da:	2b40      	cmp	r3, #64	; 0x40
 800d7dc:	d019      	beq.n	800d812 <TIM_SlaveTimer_SetConfig+0x96>
 800d7de:	2b40      	cmp	r3, #64	; 0x40
 800d7e0:	d854      	bhi.n	800d88c <TIM_SlaveTimer_SetConfig+0x110>
 800d7e2:	2b30      	cmp	r3, #48	; 0x30
 800d7e4:	d055      	beq.n	800d892 <TIM_SlaveTimer_SetConfig+0x116>
 800d7e6:	2b30      	cmp	r3, #48	; 0x30
 800d7e8:	d850      	bhi.n	800d88c <TIM_SlaveTimer_SetConfig+0x110>
 800d7ea:	2b20      	cmp	r3, #32
 800d7ec:	d051      	beq.n	800d892 <TIM_SlaveTimer_SetConfig+0x116>
 800d7ee:	2b20      	cmp	r3, #32
 800d7f0:	d84c      	bhi.n	800d88c <TIM_SlaveTimer_SetConfig+0x110>
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d04d      	beq.n	800d892 <TIM_SlaveTimer_SetConfig+0x116>
 800d7f6:	2b10      	cmp	r3, #16
 800d7f8:	d04b      	beq.n	800d892 <TIM_SlaveTimer_SetConfig+0x116>
 800d7fa:	e047      	b.n	800d88c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6818      	ldr	r0, [r3, #0]
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	68d9      	ldr	r1, [r3, #12]
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	689a      	ldr	r2, [r3, #8]
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	691b      	ldr	r3, [r3, #16]
 800d80c:	f000 f9ee 	bl	800dbec <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800d810:	e040      	b.n	800d894 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	2b05      	cmp	r3, #5
 800d818:	d101      	bne.n	800d81e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800d81a:	2301      	movs	r3, #1
 800d81c:	e03b      	b.n	800d896 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	6a1b      	ldr	r3, [r3, #32]
 800d824:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	6a1a      	ldr	r2, [r3, #32]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f022 0201 	bic.w	r2, r2, #1
 800d834:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	699b      	ldr	r3, [r3, #24]
 800d83c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d844:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	691b      	ldr	r3, [r3, #16]
 800d84a:	011b      	lsls	r3, r3, #4
 800d84c:	68ba      	ldr	r2, [r7, #8]
 800d84e:	4313      	orrs	r3, r2
 800d850:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	68ba      	ldr	r2, [r7, #8]
 800d858:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	68fa      	ldr	r2, [r7, #12]
 800d860:	621a      	str	r2, [r3, #32]
      break;
 800d862:	e017      	b.n	800d894 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	6818      	ldr	r0, [r3, #0]
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	6899      	ldr	r1, [r3, #8]
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	691b      	ldr	r3, [r3, #16]
 800d870:	461a      	mov	r2, r3
 800d872:	f000 f88b 	bl	800d98c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800d876:	e00d      	b.n	800d894 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6818      	ldr	r0, [r3, #0]
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	6899      	ldr	r1, [r3, #8]
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	691b      	ldr	r3, [r3, #16]
 800d884:	461a      	mov	r2, r3
 800d886:	f000 f8ed 	bl	800da64 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800d88a:	e003      	b.n	800d894 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800d88c:	2301      	movs	r3, #1
 800d88e:	75fb      	strb	r3, [r7, #23]
      break;
 800d890:	e000      	b.n	800d894 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800d892:	bf00      	nop
  }

  return status;
 800d894:	7dfb      	ldrb	r3, [r7, #23]
}
 800d896:	4618      	mov	r0, r3
 800d898:	3718      	adds	r7, #24
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	bf00      	nop
 800d8a0:	fffefff8 	.word	0xfffefff8

0800d8a4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800d8a4:	b480      	push	{r7}
 800d8a6:	b087      	sub	sp, #28
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	60f8      	str	r0, [r7, #12]
 800d8ac:	60b9      	str	r1, [r7, #8]
 800d8ae:	607a      	str	r2, [r7, #4]
 800d8b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	6a1b      	ldr	r3, [r3, #32]
 800d8b6:	f023 0201 	bic.w	r2, r3, #1
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	699b      	ldr	r3, [r3, #24]
 800d8c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	6a1b      	ldr	r3, [r3, #32]
 800d8c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	4a28      	ldr	r2, [pc, #160]	; (800d970 <TIM_TI1_SetConfig+0xcc>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d01b      	beq.n	800d90a <TIM_TI1_SetConfig+0x66>
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d8d8:	d017      	beq.n	800d90a <TIM_TI1_SetConfig+0x66>
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	4a25      	ldr	r2, [pc, #148]	; (800d974 <TIM_TI1_SetConfig+0xd0>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d013      	beq.n	800d90a <TIM_TI1_SetConfig+0x66>
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	4a24      	ldr	r2, [pc, #144]	; (800d978 <TIM_TI1_SetConfig+0xd4>)
 800d8e6:	4293      	cmp	r3, r2
 800d8e8:	d00f      	beq.n	800d90a <TIM_TI1_SetConfig+0x66>
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	4a23      	ldr	r2, [pc, #140]	; (800d97c <TIM_TI1_SetConfig+0xd8>)
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d00b      	beq.n	800d90a <TIM_TI1_SetConfig+0x66>
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	4a22      	ldr	r2, [pc, #136]	; (800d980 <TIM_TI1_SetConfig+0xdc>)
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d007      	beq.n	800d90a <TIM_TI1_SetConfig+0x66>
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	4a21      	ldr	r2, [pc, #132]	; (800d984 <TIM_TI1_SetConfig+0xe0>)
 800d8fe:	4293      	cmp	r3, r2
 800d900:	d003      	beq.n	800d90a <TIM_TI1_SetConfig+0x66>
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	4a20      	ldr	r2, [pc, #128]	; (800d988 <TIM_TI1_SetConfig+0xe4>)
 800d906:	4293      	cmp	r3, r2
 800d908:	d101      	bne.n	800d90e <TIM_TI1_SetConfig+0x6a>
 800d90a:	2301      	movs	r3, #1
 800d90c:	e000      	b.n	800d910 <TIM_TI1_SetConfig+0x6c>
 800d90e:	2300      	movs	r3, #0
 800d910:	2b00      	cmp	r3, #0
 800d912:	d008      	beq.n	800d926 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	f023 0303 	bic.w	r3, r3, #3
 800d91a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800d91c:	697a      	ldr	r2, [r7, #20]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	4313      	orrs	r3, r2
 800d922:	617b      	str	r3, [r7, #20]
 800d924:	e003      	b.n	800d92e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	f043 0301 	orr.w	r3, r3, #1
 800d92c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d934:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	011b      	lsls	r3, r3, #4
 800d93a:	b2db      	uxtb	r3, r3
 800d93c:	697a      	ldr	r2, [r7, #20]
 800d93e:	4313      	orrs	r3, r2
 800d940:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	f023 030a 	bic.w	r3, r3, #10
 800d948:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	f003 030a 	and.w	r3, r3, #10
 800d950:	693a      	ldr	r2, [r7, #16]
 800d952:	4313      	orrs	r3, r2
 800d954:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	697a      	ldr	r2, [r7, #20]
 800d95a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	693a      	ldr	r2, [r7, #16]
 800d960:	621a      	str	r2, [r3, #32]
}
 800d962:	bf00      	nop
 800d964:	371c      	adds	r7, #28
 800d966:	46bd      	mov	sp, r7
 800d968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96c:	4770      	bx	lr
 800d96e:	bf00      	nop
 800d970:	40010000 	.word	0x40010000
 800d974:	40000400 	.word	0x40000400
 800d978:	40000800 	.word	0x40000800
 800d97c:	40000c00 	.word	0x40000c00
 800d980:	40010400 	.word	0x40010400
 800d984:	40014000 	.word	0x40014000
 800d988:	40001800 	.word	0x40001800

0800d98c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d98c:	b480      	push	{r7}
 800d98e:	b087      	sub	sp, #28
 800d990:	af00      	add	r7, sp, #0
 800d992:	60f8      	str	r0, [r7, #12]
 800d994:	60b9      	str	r1, [r7, #8]
 800d996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	6a1b      	ldr	r3, [r3, #32]
 800d99c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	6a1b      	ldr	r3, [r3, #32]
 800d9a2:	f023 0201 	bic.w	r2, r3, #1
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	699b      	ldr	r3, [r3, #24]
 800d9ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d9b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	011b      	lsls	r3, r3, #4
 800d9bc:	693a      	ldr	r2, [r7, #16]
 800d9be:	4313      	orrs	r3, r2
 800d9c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	f023 030a 	bic.w	r3, r3, #10
 800d9c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d9ca:	697a      	ldr	r2, [r7, #20]
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	4313      	orrs	r3, r2
 800d9d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	693a      	ldr	r2, [r7, #16]
 800d9d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	697a      	ldr	r2, [r7, #20]
 800d9dc:	621a      	str	r2, [r3, #32]
}
 800d9de:	bf00      	nop
 800d9e0:	371c      	adds	r7, #28
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e8:	4770      	bx	lr

0800d9ea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d9ea:	b480      	push	{r7}
 800d9ec:	b087      	sub	sp, #28
 800d9ee:	af00      	add	r7, sp, #0
 800d9f0:	60f8      	str	r0, [r7, #12]
 800d9f2:	60b9      	str	r1, [r7, #8]
 800d9f4:	607a      	str	r2, [r7, #4]
 800d9f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	6a1b      	ldr	r3, [r3, #32]
 800d9fc:	f023 0210 	bic.w	r2, r3, #16
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	699b      	ldr	r3, [r3, #24]
 800da08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	6a1b      	ldr	r3, [r3, #32]
 800da0e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	021b      	lsls	r3, r3, #8
 800da1c:	697a      	ldr	r2, [r7, #20]
 800da1e:	4313      	orrs	r3, r2
 800da20:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800da28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	031b      	lsls	r3, r3, #12
 800da2e:	b29b      	uxth	r3, r3
 800da30:	697a      	ldr	r2, [r7, #20]
 800da32:	4313      	orrs	r3, r2
 800da34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800da3c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800da3e:	68bb      	ldr	r3, [r7, #8]
 800da40:	011b      	lsls	r3, r3, #4
 800da42:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800da46:	693a      	ldr	r2, [r7, #16]
 800da48:	4313      	orrs	r3, r2
 800da4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	697a      	ldr	r2, [r7, #20]
 800da50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	693a      	ldr	r2, [r7, #16]
 800da56:	621a      	str	r2, [r3, #32]
}
 800da58:	bf00      	nop
 800da5a:	371c      	adds	r7, #28
 800da5c:	46bd      	mov	sp, r7
 800da5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da62:	4770      	bx	lr

0800da64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800da64:	b480      	push	{r7}
 800da66:	b087      	sub	sp, #28
 800da68:	af00      	add	r7, sp, #0
 800da6a:	60f8      	str	r0, [r7, #12]
 800da6c:	60b9      	str	r1, [r7, #8]
 800da6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	6a1b      	ldr	r3, [r3, #32]
 800da74:	f023 0210 	bic.w	r2, r3, #16
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	699b      	ldr	r3, [r3, #24]
 800da80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	6a1b      	ldr	r3, [r3, #32]
 800da86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800da8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	031b      	lsls	r3, r3, #12
 800da94:	697a      	ldr	r2, [r7, #20]
 800da96:	4313      	orrs	r3, r2
 800da98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800da9a:	693b      	ldr	r3, [r7, #16]
 800da9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800daa0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	011b      	lsls	r3, r3, #4
 800daa6:	693a      	ldr	r2, [r7, #16]
 800daa8:	4313      	orrs	r3, r2
 800daaa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	697a      	ldr	r2, [r7, #20]
 800dab0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	693a      	ldr	r2, [r7, #16]
 800dab6:	621a      	str	r2, [r3, #32]
}
 800dab8:	bf00      	nop
 800daba:	371c      	adds	r7, #28
 800dabc:	46bd      	mov	sp, r7
 800dabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac2:	4770      	bx	lr

0800dac4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800dac4:	b480      	push	{r7}
 800dac6:	b087      	sub	sp, #28
 800dac8:	af00      	add	r7, sp, #0
 800daca:	60f8      	str	r0, [r7, #12]
 800dacc:	60b9      	str	r1, [r7, #8]
 800dace:	607a      	str	r2, [r7, #4]
 800dad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	6a1b      	ldr	r3, [r3, #32]
 800dad6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	69db      	ldr	r3, [r3, #28]
 800dae2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	6a1b      	ldr	r3, [r3, #32]
 800dae8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	f023 0303 	bic.w	r3, r3, #3
 800daf0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800daf2:	697a      	ldr	r2, [r7, #20]
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	4313      	orrs	r3, r2
 800daf8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800db00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	011b      	lsls	r3, r3, #4
 800db06:	b2db      	uxtb	r3, r3
 800db08:	697a      	ldr	r2, [r7, #20]
 800db0a:	4313      	orrs	r3, r2
 800db0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800db0e:	693b      	ldr	r3, [r7, #16]
 800db10:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800db14:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	021b      	lsls	r3, r3, #8
 800db1a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800db1e:	693a      	ldr	r2, [r7, #16]
 800db20:	4313      	orrs	r3, r2
 800db22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	697a      	ldr	r2, [r7, #20]
 800db28:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	693a      	ldr	r2, [r7, #16]
 800db2e:	621a      	str	r2, [r3, #32]
}
 800db30:	bf00      	nop
 800db32:	371c      	adds	r7, #28
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr

0800db3c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800db3c:	b480      	push	{r7}
 800db3e:	b087      	sub	sp, #28
 800db40:	af00      	add	r7, sp, #0
 800db42:	60f8      	str	r0, [r7, #12]
 800db44:	60b9      	str	r1, [r7, #8]
 800db46:	607a      	str	r2, [r7, #4]
 800db48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	6a1b      	ldr	r3, [r3, #32]
 800db4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	69db      	ldr	r3, [r3, #28]
 800db5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	6a1b      	ldr	r3, [r3, #32]
 800db60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	021b      	lsls	r3, r3, #8
 800db6e:	697a      	ldr	r2, [r7, #20]
 800db70:	4313      	orrs	r3, r2
 800db72:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800db7a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	031b      	lsls	r3, r3, #12
 800db80:	b29b      	uxth	r3, r3
 800db82:	697a      	ldr	r2, [r7, #20]
 800db84:	4313      	orrs	r3, r2
 800db86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800db8e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	031b      	lsls	r3, r3, #12
 800db94:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800db98:	693a      	ldr	r2, [r7, #16]
 800db9a:	4313      	orrs	r3, r2
 800db9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	697a      	ldr	r2, [r7, #20]
 800dba2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	693a      	ldr	r2, [r7, #16]
 800dba8:	621a      	str	r2, [r3, #32]
}
 800dbaa:	bf00      	nop
 800dbac:	371c      	adds	r7, #28
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb4:	4770      	bx	lr

0800dbb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dbb6:	b480      	push	{r7}
 800dbb8:	b085      	sub	sp, #20
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	6078      	str	r0, [r7, #4]
 800dbbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	689b      	ldr	r3, [r3, #8]
 800dbc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dbce:	683a      	ldr	r2, [r7, #0]
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	4313      	orrs	r3, r2
 800dbd4:	f043 0307 	orr.w	r3, r3, #7
 800dbd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	68fa      	ldr	r2, [r7, #12]
 800dbde:	609a      	str	r2, [r3, #8]
}
 800dbe0:	bf00      	nop
 800dbe2:	3714      	adds	r7, #20
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbea:	4770      	bx	lr

0800dbec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dbec:	b480      	push	{r7}
 800dbee:	b087      	sub	sp, #28
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	60f8      	str	r0, [r7, #12]
 800dbf4:	60b9      	str	r1, [r7, #8]
 800dbf6:	607a      	str	r2, [r7, #4]
 800dbf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	689b      	ldr	r3, [r3, #8]
 800dbfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dc06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	021a      	lsls	r2, r3, #8
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	431a      	orrs	r2, r3
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	4313      	orrs	r3, r2
 800dc14:	697a      	ldr	r2, [r7, #20]
 800dc16:	4313      	orrs	r3, r2
 800dc18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	697a      	ldr	r2, [r7, #20]
 800dc1e:	609a      	str	r2, [r3, #8]
}
 800dc20:	bf00      	nop
 800dc22:	371c      	adds	r7, #28
 800dc24:	46bd      	mov	sp, r7
 800dc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2a:	4770      	bx	lr

0800dc2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b087      	sub	sp, #28
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	60f8      	str	r0, [r7, #12]
 800dc34:	60b9      	str	r1, [r7, #8]
 800dc36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	f003 031f 	and.w	r3, r3, #31
 800dc3e:	2201      	movs	r2, #1
 800dc40:	fa02 f303 	lsl.w	r3, r2, r3
 800dc44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	6a1a      	ldr	r2, [r3, #32]
 800dc4a:	697b      	ldr	r3, [r7, #20]
 800dc4c:	43db      	mvns	r3, r3
 800dc4e:	401a      	ands	r2, r3
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	6a1a      	ldr	r2, [r3, #32]
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	f003 031f 	and.w	r3, r3, #31
 800dc5e:	6879      	ldr	r1, [r7, #4]
 800dc60:	fa01 f303 	lsl.w	r3, r1, r3
 800dc64:	431a      	orrs	r2, r3
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	621a      	str	r2, [r3, #32]
}
 800dc6a:	bf00      	nop
 800dc6c:	371c      	adds	r7, #28
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc74:	4770      	bx	lr
	...

0800dc78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b085      	sub	sp, #20
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
 800dc80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc88:	2b01      	cmp	r3, #1
 800dc8a:	d101      	bne.n	800dc90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dc8c:	2302      	movs	r3, #2
 800dc8e:	e06d      	b.n	800dd6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2201      	movs	r2, #1
 800dc94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2202      	movs	r2, #2
 800dc9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	689b      	ldr	r3, [r3, #8]
 800dcae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	4a30      	ldr	r2, [pc, #192]	; (800dd78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d004      	beq.n	800dcc4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	4a2f      	ldr	r2, [pc, #188]	; (800dd7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dcc0:	4293      	cmp	r3, r2
 800dcc2:	d108      	bne.n	800dcd6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dcca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	685b      	ldr	r3, [r3, #4]
 800dcd0:	68fa      	ldr	r2, [r7, #12]
 800dcd2:	4313      	orrs	r3, r2
 800dcd4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcdc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	68fa      	ldr	r2, [r7, #12]
 800dce4:	4313      	orrs	r3, r2
 800dce6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	68fa      	ldr	r2, [r7, #12]
 800dcee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4a20      	ldr	r2, [pc, #128]	; (800dd78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d022      	beq.n	800dd40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd02:	d01d      	beq.n	800dd40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4a1d      	ldr	r2, [pc, #116]	; (800dd80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	d018      	beq.n	800dd40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	4a1c      	ldr	r2, [pc, #112]	; (800dd84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dd14:	4293      	cmp	r3, r2
 800dd16:	d013      	beq.n	800dd40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	4a1a      	ldr	r2, [pc, #104]	; (800dd88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d00e      	beq.n	800dd40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	4a15      	ldr	r2, [pc, #84]	; (800dd7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	d009      	beq.n	800dd40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	4a16      	ldr	r2, [pc, #88]	; (800dd8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dd32:	4293      	cmp	r3, r2
 800dd34:	d004      	beq.n	800dd40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	4a15      	ldr	r2, [pc, #84]	; (800dd90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d10c      	bne.n	800dd5a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	689b      	ldr	r3, [r3, #8]
 800dd4c:	68ba      	ldr	r2, [r7, #8]
 800dd4e:	4313      	orrs	r3, r2
 800dd50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	68ba      	ldr	r2, [r7, #8]
 800dd58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2201      	movs	r2, #1
 800dd5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2200      	movs	r2, #0
 800dd66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dd6a:	2300      	movs	r3, #0
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3714      	adds	r7, #20
 800dd70:	46bd      	mov	sp, r7
 800dd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd76:	4770      	bx	lr
 800dd78:	40010000 	.word	0x40010000
 800dd7c:	40010400 	.word	0x40010400
 800dd80:	40000400 	.word	0x40000400
 800dd84:	40000800 	.word	0x40000800
 800dd88:	40000c00 	.word	0x40000c00
 800dd8c:	40014000 	.word	0x40014000
 800dd90:	40001800 	.word	0x40001800

0800dd94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dd94:	b480      	push	{r7}
 800dd96:	b083      	sub	sp, #12
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dd9c:	bf00      	nop
 800dd9e:	370c      	adds	r7, #12
 800dda0:	46bd      	mov	sp, r7
 800dda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda6:	4770      	bx	lr

0800dda8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b083      	sub	sp, #12
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ddb0:	bf00      	nop
 800ddb2:	370c      	adds	r7, #12
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr

0800ddbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b083      	sub	sp, #12
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ddc4:	bf00      	nop
 800ddc6:	370c      	adds	r7, #12
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddce:	4770      	bx	lr

0800ddd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b082      	sub	sp, #8
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d101      	bne.n	800dde2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ddde:	2301      	movs	r3, #1
 800dde0:	e040      	b.n	800de64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d106      	bne.n	800ddf8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2200      	movs	r2, #0
 800ddee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f7f8 fc12 	bl	800661c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2224      	movs	r2, #36	; 0x24
 800ddfc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	681a      	ldr	r2, [r3, #0]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	f022 0201 	bic.w	r2, r2, #1
 800de0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f000 fc18 	bl	800e644 <UART_SetConfig>
 800de14:	4603      	mov	r3, r0
 800de16:	2b01      	cmp	r3, #1
 800de18:	d101      	bne.n	800de1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800de1a:	2301      	movs	r3, #1
 800de1c:	e022      	b.n	800de64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de22:	2b00      	cmp	r3, #0
 800de24:	d002      	beq.n	800de2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f000 fe70 	bl	800eb0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	685a      	ldr	r2, [r3, #4]
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800de3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	689a      	ldr	r2, [r3, #8]
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800de4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	681a      	ldr	r2, [r3, #0]
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f042 0201 	orr.w	r2, r2, #1
 800de5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f000 fef7 	bl	800ec50 <UART_CheckIdleState>
 800de62:	4603      	mov	r3, r0
}
 800de64:	4618      	mov	r0, r3
 800de66:	3708      	adds	r7, #8
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}

0800de6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b08a      	sub	sp, #40	; 0x28
 800de70:	af02      	add	r7, sp, #8
 800de72:	60f8      	str	r0, [r7, #12]
 800de74:	60b9      	str	r1, [r7, #8]
 800de76:	603b      	str	r3, [r7, #0]
 800de78:	4613      	mov	r3, r2
 800de7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de80:	2b20      	cmp	r3, #32
 800de82:	f040 8081 	bne.w	800df88 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d002      	beq.n	800de92 <HAL_UART_Transmit+0x26>
 800de8c:	88fb      	ldrh	r3, [r7, #6]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d101      	bne.n	800de96 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800de92:	2301      	movs	r3, #1
 800de94:	e079      	b.n	800df8a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800de9c:	2b01      	cmp	r3, #1
 800de9e:	d101      	bne.n	800dea4 <HAL_UART_Transmit+0x38>
 800dea0:	2302      	movs	r3, #2
 800dea2:	e072      	b.n	800df8a <HAL_UART_Transmit+0x11e>
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	2201      	movs	r2, #1
 800dea8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	2200      	movs	r2, #0
 800deb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	2221      	movs	r2, #33	; 0x21
 800deb8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800deba:	f7f8 fcb9 	bl	8006830 <HAL_GetTick>
 800debe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	88fa      	ldrh	r2, [r7, #6]
 800dec4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	88fa      	ldrh	r2, [r7, #6]
 800decc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	689b      	ldr	r3, [r3, #8]
 800ded4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ded8:	d108      	bne.n	800deec <HAL_UART_Transmit+0x80>
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	691b      	ldr	r3, [r3, #16]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d104      	bne.n	800deec <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800dee2:	2300      	movs	r3, #0
 800dee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	61bb      	str	r3, [r7, #24]
 800deea:	e003      	b.n	800def4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800def0:	2300      	movs	r3, #0
 800def2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	2200      	movs	r2, #0
 800def8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800defc:	e02c      	b.n	800df58 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	9300      	str	r3, [sp, #0]
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	2200      	movs	r2, #0
 800df06:	2180      	movs	r1, #128	; 0x80
 800df08:	68f8      	ldr	r0, [r7, #12]
 800df0a:	f000 feea 	bl	800ece2 <UART_WaitOnFlagUntilTimeout>
 800df0e:	4603      	mov	r3, r0
 800df10:	2b00      	cmp	r3, #0
 800df12:	d001      	beq.n	800df18 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800df14:	2303      	movs	r3, #3
 800df16:	e038      	b.n	800df8a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800df18:	69fb      	ldr	r3, [r7, #28]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d10b      	bne.n	800df36 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800df1e:	69bb      	ldr	r3, [r7, #24]
 800df20:	881b      	ldrh	r3, [r3, #0]
 800df22:	461a      	mov	r2, r3
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800df2c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800df2e:	69bb      	ldr	r3, [r7, #24]
 800df30:	3302      	adds	r3, #2
 800df32:	61bb      	str	r3, [r7, #24]
 800df34:	e007      	b.n	800df46 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800df36:	69fb      	ldr	r3, [r7, #28]
 800df38:	781a      	ldrb	r2, [r3, #0]
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800df40:	69fb      	ldr	r3, [r7, #28]
 800df42:	3301      	adds	r3, #1
 800df44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800df4c:	b29b      	uxth	r3, r3
 800df4e:	3b01      	subs	r3, #1
 800df50:	b29a      	uxth	r2, r3
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800df5e:	b29b      	uxth	r3, r3
 800df60:	2b00      	cmp	r3, #0
 800df62:	d1cc      	bne.n	800defe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	9300      	str	r3, [sp, #0]
 800df68:	697b      	ldr	r3, [r7, #20]
 800df6a:	2200      	movs	r2, #0
 800df6c:	2140      	movs	r1, #64	; 0x40
 800df6e:	68f8      	ldr	r0, [r7, #12]
 800df70:	f000 feb7 	bl	800ece2 <UART_WaitOnFlagUntilTimeout>
 800df74:	4603      	mov	r3, r0
 800df76:	2b00      	cmp	r3, #0
 800df78:	d001      	beq.n	800df7e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800df7a:	2303      	movs	r3, #3
 800df7c:	e005      	b.n	800df8a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	2220      	movs	r2, #32
 800df82:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800df84:	2300      	movs	r3, #0
 800df86:	e000      	b.n	800df8a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800df88:	2302      	movs	r3, #2
  }
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3720      	adds	r7, #32
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}

0800df92 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800df92:	b580      	push	{r7, lr}
 800df94:	b08a      	sub	sp, #40	; 0x28
 800df96:	af00      	add	r7, sp, #0
 800df98:	60f8      	str	r0, [r7, #12]
 800df9a:	60b9      	str	r1, [r7, #8]
 800df9c:	4613      	mov	r3, r2
 800df9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfa4:	2b20      	cmp	r3, #32
 800dfa6:	d13d      	bne.n	800e024 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d002      	beq.n	800dfb4 <HAL_UART_Receive_IT+0x22>
 800dfae:	88fb      	ldrh	r3, [r7, #6]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d101      	bne.n	800dfb8 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	e036      	b.n	800e026 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800dfbe:	2b01      	cmp	r3, #1
 800dfc0:	d101      	bne.n	800dfc6 <HAL_UART_Receive_IT+0x34>
 800dfc2:	2302      	movs	r3, #2
 800dfc4:	e02f      	b.n	800e026 <HAL_UART_Receive_IT+0x94>
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	2201      	movs	r2, #1
 800dfca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	685b      	ldr	r3, [r3, #4]
 800dfda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d018      	beq.n	800e014 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfe8:	697b      	ldr	r3, [r7, #20]
 800dfea:	e853 3f00 	ldrex	r3, [r3]
 800dfee:	613b      	str	r3, [r7, #16]
   return(result);
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dff6:	627b      	str	r3, [r7, #36]	; 0x24
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	461a      	mov	r2, r3
 800dffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e000:	623b      	str	r3, [r7, #32]
 800e002:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e004:	69f9      	ldr	r1, [r7, #28]
 800e006:	6a3a      	ldr	r2, [r7, #32]
 800e008:	e841 2300 	strex	r3, r2, [r1]
 800e00c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e00e:	69bb      	ldr	r3, [r7, #24]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d1e6      	bne.n	800dfe2 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e014:	88fb      	ldrh	r3, [r7, #6]
 800e016:	461a      	mov	r2, r3
 800e018:	68b9      	ldr	r1, [r7, #8]
 800e01a:	68f8      	ldr	r0, [r7, #12]
 800e01c:	f000 ff26 	bl	800ee6c <UART_Start_Receive_IT>
 800e020:	4603      	mov	r3, r0
 800e022:	e000      	b.n	800e026 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800e024:	2302      	movs	r3, #2
  }
}
 800e026:	4618      	mov	r0, r3
 800e028:	3728      	adds	r7, #40	; 0x28
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}
	...

0800e030 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b0ba      	sub	sp, #232	; 0xe8
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	69db      	ldr	r3, [r3, #28]
 800e03e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	689b      	ldr	r3, [r3, #8]
 800e052:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e056:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e05a:	f640 030f 	movw	r3, #2063	; 0x80f
 800e05e:	4013      	ands	r3, r2
 800e060:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e064:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d115      	bne.n	800e098 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e06c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e070:	f003 0320 	and.w	r3, r3, #32
 800e074:	2b00      	cmp	r3, #0
 800e076:	d00f      	beq.n	800e098 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e07c:	f003 0320 	and.w	r3, r3, #32
 800e080:	2b00      	cmp	r3, #0
 800e082:	d009      	beq.n	800e098 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e088:	2b00      	cmp	r3, #0
 800e08a:	f000 82a4 	beq.w	800e5d6 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	4798      	blx	r3
      }
      return;
 800e096:	e29e      	b.n	800e5d6 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e098:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	f000 8117 	beq.w	800e2d0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e0a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e0a6:	f003 0301 	and.w	r3, r3, #1
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d106      	bne.n	800e0bc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800e0ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e0b2:	4b85      	ldr	r3, [pc, #532]	; (800e2c8 <HAL_UART_IRQHandler+0x298>)
 800e0b4:	4013      	ands	r3, r2
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	f000 810a 	beq.w	800e2d0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e0bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0c0:	f003 0301 	and.w	r3, r3, #1
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d011      	beq.n	800e0ec <HAL_UART_IRQHandler+0xbc>
 800e0c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e0cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d00b      	beq.n	800e0ec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	2201      	movs	r2, #1
 800e0da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0e2:	f043 0201 	orr.w	r2, r3, #1
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e0ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0f0:	f003 0302 	and.w	r3, r3, #2
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d011      	beq.n	800e11c <HAL_UART_IRQHandler+0xec>
 800e0f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e0fc:	f003 0301 	and.w	r3, r3, #1
 800e100:	2b00      	cmp	r3, #0
 800e102:	d00b      	beq.n	800e11c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	2202      	movs	r2, #2
 800e10a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e112:	f043 0204 	orr.w	r2, r3, #4
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e11c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e120:	f003 0304 	and.w	r3, r3, #4
 800e124:	2b00      	cmp	r3, #0
 800e126:	d011      	beq.n	800e14c <HAL_UART_IRQHandler+0x11c>
 800e128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e12c:	f003 0301 	and.w	r3, r3, #1
 800e130:	2b00      	cmp	r3, #0
 800e132:	d00b      	beq.n	800e14c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	2204      	movs	r2, #4
 800e13a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e142:	f043 0202 	orr.w	r2, r3, #2
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e14c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e150:	f003 0308 	and.w	r3, r3, #8
 800e154:	2b00      	cmp	r3, #0
 800e156:	d017      	beq.n	800e188 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e15c:	f003 0320 	and.w	r3, r3, #32
 800e160:	2b00      	cmp	r3, #0
 800e162:	d105      	bne.n	800e170 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e168:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d00b      	beq.n	800e188 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	2208      	movs	r2, #8
 800e176:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e17e:	f043 0208 	orr.w	r2, r3, #8
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e18c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e190:	2b00      	cmp	r3, #0
 800e192:	d012      	beq.n	800e1ba <HAL_UART_IRQHandler+0x18a>
 800e194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e198:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d00c      	beq.n	800e1ba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e1a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1b0:	f043 0220 	orr.w	r2, r3, #32
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	f000 820a 	beq.w	800e5da <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e1c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1ca:	f003 0320 	and.w	r3, r3, #32
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d00d      	beq.n	800e1ee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e1d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e1d6:	f003 0320 	and.w	r3, r3, #32
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d007      	beq.n	800e1ee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d003      	beq.n	800e1ee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1ea:	6878      	ldr	r0, [r7, #4]
 800e1ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	689b      	ldr	r3, [r3, #8]
 800e1fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e202:	2b40      	cmp	r3, #64	; 0x40
 800e204:	d005      	beq.n	800e212 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e206:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e20a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d04f      	beq.n	800e2b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f000 fef4 	bl	800f000 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	689b      	ldr	r3, [r3, #8]
 800e21e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e222:	2b40      	cmp	r3, #64	; 0x40
 800e224:	d141      	bne.n	800e2aa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	3308      	adds	r3, #8
 800e22c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e230:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e234:	e853 3f00 	ldrex	r3, [r3]
 800e238:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e23c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e244:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	3308      	adds	r3, #8
 800e24e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e252:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e256:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e25a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e25e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e262:	e841 2300 	strex	r3, r2, [r1]
 800e266:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e26a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d1d9      	bne.n	800e226 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e276:	2b00      	cmp	r3, #0
 800e278:	d013      	beq.n	800e2a2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e27e:	4a13      	ldr	r2, [pc, #76]	; (800e2cc <HAL_UART_IRQHandler+0x29c>)
 800e280:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e286:	4618      	mov	r0, r3
 800e288:	f7f9 fe88 	bl	8007f9c <HAL_DMA_Abort_IT>
 800e28c:	4603      	mov	r3, r0
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d017      	beq.n	800e2c2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e298:	687a      	ldr	r2, [r7, #4]
 800e29a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800e29c:	4610      	mov	r0, r2
 800e29e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2a0:	e00f      	b.n	800e2c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f000 f9ae 	bl	800e604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2a8:	e00b      	b.n	800e2c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f000 f9aa 	bl	800e604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2b0:	e007      	b.n	800e2c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f000 f9a6 	bl	800e604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800e2c0:	e18b      	b.n	800e5da <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2c2:	bf00      	nop
    return;
 800e2c4:	e189      	b.n	800e5da <HAL_UART_IRQHandler+0x5aa>
 800e2c6:	bf00      	nop
 800e2c8:	04000120 	.word	0x04000120
 800e2cc:	0800f0c7 	.word	0x0800f0c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e2d4:	2b01      	cmp	r3, #1
 800e2d6:	f040 8144 	bne.w	800e562 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e2da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2de:	f003 0310 	and.w	r3, r3, #16
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	f000 813d 	beq.w	800e562 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e2e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2ec:	f003 0310 	and.w	r3, r3, #16
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	f000 8136 	beq.w	800e562 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	2210      	movs	r2, #16
 800e2fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	689b      	ldr	r3, [r3, #8]
 800e304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e308:	2b40      	cmp	r3, #64	; 0x40
 800e30a:	f040 80b2 	bne.w	800e472 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e31a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e31e:	2b00      	cmp	r3, #0
 800e320:	f000 815d 	beq.w	800e5de <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e32a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e32e:	429a      	cmp	r2, r3
 800e330:	f080 8155 	bcs.w	800e5de <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e33a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e342:	69db      	ldr	r3, [r3, #28]
 800e344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e348:	f000 8085 	beq.w	800e456 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e354:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e358:	e853 3f00 	ldrex	r3, [r3]
 800e35c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e360:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e368:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	461a      	mov	r2, r3
 800e372:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e376:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e37a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e37e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e382:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e386:	e841 2300 	strex	r3, r2, [r1]
 800e38a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e38e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e392:	2b00      	cmp	r3, #0
 800e394:	d1da      	bne.n	800e34c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	3308      	adds	r3, #8
 800e39c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e39e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e3a0:	e853 3f00 	ldrex	r3, [r3]
 800e3a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e3a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e3a8:	f023 0301 	bic.w	r3, r3, #1
 800e3ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	3308      	adds	r3, #8
 800e3b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e3ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e3be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e3c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e3c6:	e841 2300 	strex	r3, r2, [r1]
 800e3ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e3cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d1e1      	bne.n	800e396 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	3308      	adds	r3, #8
 800e3d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e3dc:	e853 3f00 	ldrex	r3, [r3]
 800e3e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e3e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e3e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e3e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	3308      	adds	r3, #8
 800e3f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e3f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e3f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e3fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e3fe:	e841 2300 	strex	r3, r2, [r1]
 800e402:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e406:	2b00      	cmp	r3, #0
 800e408:	d1e3      	bne.n	800e3d2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2220      	movs	r2, #32
 800e40e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2200      	movs	r2, #0
 800e414:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e41c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e41e:	e853 3f00 	ldrex	r3, [r3]
 800e422:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e426:	f023 0310 	bic.w	r3, r3, #16
 800e42a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	461a      	mov	r2, r3
 800e434:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e438:	65bb      	str	r3, [r7, #88]	; 0x58
 800e43a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e43c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e43e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e440:	e841 2300 	strex	r3, r2, [r1]
 800e444:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d1e4      	bne.n	800e416 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e450:	4618      	mov	r0, r3
 800e452:	f7f9 fd33 	bl	8007ebc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e462:	b29b      	uxth	r3, r3
 800e464:	1ad3      	subs	r3, r2, r3
 800e466:	b29b      	uxth	r3, r3
 800e468:	4619      	mov	r1, r3
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f000 f8d4 	bl	800e618 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e470:	e0b5      	b.n	800e5de <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e47e:	b29b      	uxth	r3, r3
 800e480:	1ad3      	subs	r3, r2, r3
 800e482:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e48c:	b29b      	uxth	r3, r3
 800e48e:	2b00      	cmp	r3, #0
 800e490:	f000 80a7 	beq.w	800e5e2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 800e494:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e498:	2b00      	cmp	r3, #0
 800e49a:	f000 80a2 	beq.w	800e5e2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a6:	e853 3f00 	ldrex	r3, [r3]
 800e4aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e4b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	461a      	mov	r2, r3
 800e4bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e4c0:	647b      	str	r3, [r7, #68]	; 0x44
 800e4c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e4c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e4c8:	e841 2300 	strex	r3, r2, [r1]
 800e4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e4ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d1e4      	bne.n	800e49e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	3308      	adds	r3, #8
 800e4da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4de:	e853 3f00 	ldrex	r3, [r3]
 800e4e2:	623b      	str	r3, [r7, #32]
   return(result);
 800e4e4:	6a3b      	ldr	r3, [r7, #32]
 800e4e6:	f023 0301 	bic.w	r3, r3, #1
 800e4ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	3308      	adds	r3, #8
 800e4f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e4f8:	633a      	str	r2, [r7, #48]	; 0x30
 800e4fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e4fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e500:	e841 2300 	strex	r3, r2, [r1]
 800e504:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d1e3      	bne.n	800e4d4 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2220      	movs	r2, #32
 800e510:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2200      	movs	r2, #0
 800e516:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2200      	movs	r2, #0
 800e51c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	e853 3f00 	ldrex	r3, [r3]
 800e52a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f023 0310 	bic.w	r3, r3, #16
 800e532:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	461a      	mov	r2, r3
 800e53c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e540:	61fb      	str	r3, [r7, #28]
 800e542:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e544:	69b9      	ldr	r1, [r7, #24]
 800e546:	69fa      	ldr	r2, [r7, #28]
 800e548:	e841 2300 	strex	r3, r2, [r1]
 800e54c:	617b      	str	r3, [r7, #20]
   return(result);
 800e54e:	697b      	ldr	r3, [r7, #20]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d1e4      	bne.n	800e51e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e554:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e558:	4619      	mov	r1, r3
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f000 f85c 	bl	800e618 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e560:	e03f      	b.n	800e5e2 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d00e      	beq.n	800e58c <HAL_UART_IRQHandler+0x55c>
 800e56e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e576:	2b00      	cmp	r3, #0
 800e578:	d008      	beq.n	800e58c <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e582:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f000 f853 	bl	800e630 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e58a:	e02d      	b.n	800e5e8 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e58c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e594:	2b00      	cmp	r3, #0
 800e596:	d00e      	beq.n	800e5b6 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e59c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d008      	beq.n	800e5b6 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d01c      	beq.n	800e5e6 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	4798      	blx	r3
    }
    return;
 800e5b4:	e017      	b.n	800e5e6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e5b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d012      	beq.n	800e5e8 <HAL_UART_IRQHandler+0x5b8>
 800e5c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d00c      	beq.n	800e5e8 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f000 fd8f 	bl	800f0f2 <UART_EndTransmit_IT>
    return;
 800e5d4:	e008      	b.n	800e5e8 <HAL_UART_IRQHandler+0x5b8>
      return;
 800e5d6:	bf00      	nop
 800e5d8:	e006      	b.n	800e5e8 <HAL_UART_IRQHandler+0x5b8>
    return;
 800e5da:	bf00      	nop
 800e5dc:	e004      	b.n	800e5e8 <HAL_UART_IRQHandler+0x5b8>
      return;
 800e5de:	bf00      	nop
 800e5e0:	e002      	b.n	800e5e8 <HAL_UART_IRQHandler+0x5b8>
      return;
 800e5e2:	bf00      	nop
 800e5e4:	e000      	b.n	800e5e8 <HAL_UART_IRQHandler+0x5b8>
    return;
 800e5e6:	bf00      	nop
  }

}
 800e5e8:	37e8      	adds	r7, #232	; 0xe8
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}
 800e5ee:	bf00      	nop

0800e5f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e5f0:	b480      	push	{r7}
 800e5f2:	b083      	sub	sp, #12
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e5f8:	bf00      	nop
 800e5fa:	370c      	adds	r7, #12
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e602:	4770      	bx	lr

0800e604 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e604:	b480      	push	{r7}
 800e606:	b083      	sub	sp, #12
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e60c:	bf00      	nop
 800e60e:	370c      	adds	r7, #12
 800e610:	46bd      	mov	sp, r7
 800e612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e616:	4770      	bx	lr

0800e618 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e618:	b480      	push	{r7}
 800e61a:	b083      	sub	sp, #12
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
 800e620:	460b      	mov	r3, r1
 800e622:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e624:	bf00      	nop
 800e626:	370c      	adds	r7, #12
 800e628:	46bd      	mov	sp, r7
 800e62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62e:	4770      	bx	lr

0800e630 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e630:	b480      	push	{r7}
 800e632:	b083      	sub	sp, #12
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e638:	bf00      	nop
 800e63a:	370c      	adds	r7, #12
 800e63c:	46bd      	mov	sp, r7
 800e63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e642:	4770      	bx	lr

0800e644 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b088      	sub	sp, #32
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e64c:	2300      	movs	r3, #0
 800e64e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	689a      	ldr	r2, [r3, #8]
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	691b      	ldr	r3, [r3, #16]
 800e658:	431a      	orrs	r2, r3
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	695b      	ldr	r3, [r3, #20]
 800e65e:	431a      	orrs	r2, r3
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	69db      	ldr	r3, [r3, #28]
 800e664:	4313      	orrs	r3, r2
 800e666:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	681a      	ldr	r2, [r3, #0]
 800e66e:	4ba6      	ldr	r3, [pc, #664]	; (800e908 <UART_SetConfig+0x2c4>)
 800e670:	4013      	ands	r3, r2
 800e672:	687a      	ldr	r2, [r7, #4]
 800e674:	6812      	ldr	r2, [r2, #0]
 800e676:	6979      	ldr	r1, [r7, #20]
 800e678:	430b      	orrs	r3, r1
 800e67a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	685b      	ldr	r3, [r3, #4]
 800e682:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	68da      	ldr	r2, [r3, #12]
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	430a      	orrs	r2, r1
 800e690:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	699b      	ldr	r3, [r3, #24]
 800e696:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	6a1b      	ldr	r3, [r3, #32]
 800e69c:	697a      	ldr	r2, [r7, #20]
 800e69e:	4313      	orrs	r3, r2
 800e6a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	689b      	ldr	r3, [r3, #8]
 800e6a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	697a      	ldr	r2, [r7, #20]
 800e6b2:	430a      	orrs	r2, r1
 800e6b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	4a94      	ldr	r2, [pc, #592]	; (800e90c <UART_SetConfig+0x2c8>)
 800e6bc:	4293      	cmp	r3, r2
 800e6be:	d120      	bne.n	800e702 <UART_SetConfig+0xbe>
 800e6c0:	4b93      	ldr	r3, [pc, #588]	; (800e910 <UART_SetConfig+0x2cc>)
 800e6c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6c6:	f003 0303 	and.w	r3, r3, #3
 800e6ca:	2b03      	cmp	r3, #3
 800e6cc:	d816      	bhi.n	800e6fc <UART_SetConfig+0xb8>
 800e6ce:	a201      	add	r2, pc, #4	; (adr r2, 800e6d4 <UART_SetConfig+0x90>)
 800e6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6d4:	0800e6e5 	.word	0x0800e6e5
 800e6d8:	0800e6f1 	.word	0x0800e6f1
 800e6dc:	0800e6eb 	.word	0x0800e6eb
 800e6e0:	0800e6f7 	.word	0x0800e6f7
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	77fb      	strb	r3, [r7, #31]
 800e6e8:	e150      	b.n	800e98c <UART_SetConfig+0x348>
 800e6ea:	2302      	movs	r3, #2
 800e6ec:	77fb      	strb	r3, [r7, #31]
 800e6ee:	e14d      	b.n	800e98c <UART_SetConfig+0x348>
 800e6f0:	2304      	movs	r3, #4
 800e6f2:	77fb      	strb	r3, [r7, #31]
 800e6f4:	e14a      	b.n	800e98c <UART_SetConfig+0x348>
 800e6f6:	2308      	movs	r3, #8
 800e6f8:	77fb      	strb	r3, [r7, #31]
 800e6fa:	e147      	b.n	800e98c <UART_SetConfig+0x348>
 800e6fc:	2310      	movs	r3, #16
 800e6fe:	77fb      	strb	r3, [r7, #31]
 800e700:	e144      	b.n	800e98c <UART_SetConfig+0x348>
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	4a83      	ldr	r2, [pc, #524]	; (800e914 <UART_SetConfig+0x2d0>)
 800e708:	4293      	cmp	r3, r2
 800e70a:	d132      	bne.n	800e772 <UART_SetConfig+0x12e>
 800e70c:	4b80      	ldr	r3, [pc, #512]	; (800e910 <UART_SetConfig+0x2cc>)
 800e70e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e712:	f003 030c 	and.w	r3, r3, #12
 800e716:	2b0c      	cmp	r3, #12
 800e718:	d828      	bhi.n	800e76c <UART_SetConfig+0x128>
 800e71a:	a201      	add	r2, pc, #4	; (adr r2, 800e720 <UART_SetConfig+0xdc>)
 800e71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e720:	0800e755 	.word	0x0800e755
 800e724:	0800e76d 	.word	0x0800e76d
 800e728:	0800e76d 	.word	0x0800e76d
 800e72c:	0800e76d 	.word	0x0800e76d
 800e730:	0800e761 	.word	0x0800e761
 800e734:	0800e76d 	.word	0x0800e76d
 800e738:	0800e76d 	.word	0x0800e76d
 800e73c:	0800e76d 	.word	0x0800e76d
 800e740:	0800e75b 	.word	0x0800e75b
 800e744:	0800e76d 	.word	0x0800e76d
 800e748:	0800e76d 	.word	0x0800e76d
 800e74c:	0800e76d 	.word	0x0800e76d
 800e750:	0800e767 	.word	0x0800e767
 800e754:	2300      	movs	r3, #0
 800e756:	77fb      	strb	r3, [r7, #31]
 800e758:	e118      	b.n	800e98c <UART_SetConfig+0x348>
 800e75a:	2302      	movs	r3, #2
 800e75c:	77fb      	strb	r3, [r7, #31]
 800e75e:	e115      	b.n	800e98c <UART_SetConfig+0x348>
 800e760:	2304      	movs	r3, #4
 800e762:	77fb      	strb	r3, [r7, #31]
 800e764:	e112      	b.n	800e98c <UART_SetConfig+0x348>
 800e766:	2308      	movs	r3, #8
 800e768:	77fb      	strb	r3, [r7, #31]
 800e76a:	e10f      	b.n	800e98c <UART_SetConfig+0x348>
 800e76c:	2310      	movs	r3, #16
 800e76e:	77fb      	strb	r3, [r7, #31]
 800e770:	e10c      	b.n	800e98c <UART_SetConfig+0x348>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	4a68      	ldr	r2, [pc, #416]	; (800e918 <UART_SetConfig+0x2d4>)
 800e778:	4293      	cmp	r3, r2
 800e77a:	d120      	bne.n	800e7be <UART_SetConfig+0x17a>
 800e77c:	4b64      	ldr	r3, [pc, #400]	; (800e910 <UART_SetConfig+0x2cc>)
 800e77e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e782:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e786:	2b30      	cmp	r3, #48	; 0x30
 800e788:	d013      	beq.n	800e7b2 <UART_SetConfig+0x16e>
 800e78a:	2b30      	cmp	r3, #48	; 0x30
 800e78c:	d814      	bhi.n	800e7b8 <UART_SetConfig+0x174>
 800e78e:	2b20      	cmp	r3, #32
 800e790:	d009      	beq.n	800e7a6 <UART_SetConfig+0x162>
 800e792:	2b20      	cmp	r3, #32
 800e794:	d810      	bhi.n	800e7b8 <UART_SetConfig+0x174>
 800e796:	2b00      	cmp	r3, #0
 800e798:	d002      	beq.n	800e7a0 <UART_SetConfig+0x15c>
 800e79a:	2b10      	cmp	r3, #16
 800e79c:	d006      	beq.n	800e7ac <UART_SetConfig+0x168>
 800e79e:	e00b      	b.n	800e7b8 <UART_SetConfig+0x174>
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	77fb      	strb	r3, [r7, #31]
 800e7a4:	e0f2      	b.n	800e98c <UART_SetConfig+0x348>
 800e7a6:	2302      	movs	r3, #2
 800e7a8:	77fb      	strb	r3, [r7, #31]
 800e7aa:	e0ef      	b.n	800e98c <UART_SetConfig+0x348>
 800e7ac:	2304      	movs	r3, #4
 800e7ae:	77fb      	strb	r3, [r7, #31]
 800e7b0:	e0ec      	b.n	800e98c <UART_SetConfig+0x348>
 800e7b2:	2308      	movs	r3, #8
 800e7b4:	77fb      	strb	r3, [r7, #31]
 800e7b6:	e0e9      	b.n	800e98c <UART_SetConfig+0x348>
 800e7b8:	2310      	movs	r3, #16
 800e7ba:	77fb      	strb	r3, [r7, #31]
 800e7bc:	e0e6      	b.n	800e98c <UART_SetConfig+0x348>
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	4a56      	ldr	r2, [pc, #344]	; (800e91c <UART_SetConfig+0x2d8>)
 800e7c4:	4293      	cmp	r3, r2
 800e7c6:	d120      	bne.n	800e80a <UART_SetConfig+0x1c6>
 800e7c8:	4b51      	ldr	r3, [pc, #324]	; (800e910 <UART_SetConfig+0x2cc>)
 800e7ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e7d2:	2bc0      	cmp	r3, #192	; 0xc0
 800e7d4:	d013      	beq.n	800e7fe <UART_SetConfig+0x1ba>
 800e7d6:	2bc0      	cmp	r3, #192	; 0xc0
 800e7d8:	d814      	bhi.n	800e804 <UART_SetConfig+0x1c0>
 800e7da:	2b80      	cmp	r3, #128	; 0x80
 800e7dc:	d009      	beq.n	800e7f2 <UART_SetConfig+0x1ae>
 800e7de:	2b80      	cmp	r3, #128	; 0x80
 800e7e0:	d810      	bhi.n	800e804 <UART_SetConfig+0x1c0>
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d002      	beq.n	800e7ec <UART_SetConfig+0x1a8>
 800e7e6:	2b40      	cmp	r3, #64	; 0x40
 800e7e8:	d006      	beq.n	800e7f8 <UART_SetConfig+0x1b4>
 800e7ea:	e00b      	b.n	800e804 <UART_SetConfig+0x1c0>
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	77fb      	strb	r3, [r7, #31]
 800e7f0:	e0cc      	b.n	800e98c <UART_SetConfig+0x348>
 800e7f2:	2302      	movs	r3, #2
 800e7f4:	77fb      	strb	r3, [r7, #31]
 800e7f6:	e0c9      	b.n	800e98c <UART_SetConfig+0x348>
 800e7f8:	2304      	movs	r3, #4
 800e7fa:	77fb      	strb	r3, [r7, #31]
 800e7fc:	e0c6      	b.n	800e98c <UART_SetConfig+0x348>
 800e7fe:	2308      	movs	r3, #8
 800e800:	77fb      	strb	r3, [r7, #31]
 800e802:	e0c3      	b.n	800e98c <UART_SetConfig+0x348>
 800e804:	2310      	movs	r3, #16
 800e806:	77fb      	strb	r3, [r7, #31]
 800e808:	e0c0      	b.n	800e98c <UART_SetConfig+0x348>
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	4a44      	ldr	r2, [pc, #272]	; (800e920 <UART_SetConfig+0x2dc>)
 800e810:	4293      	cmp	r3, r2
 800e812:	d125      	bne.n	800e860 <UART_SetConfig+0x21c>
 800e814:	4b3e      	ldr	r3, [pc, #248]	; (800e910 <UART_SetConfig+0x2cc>)
 800e816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e81a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e81e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e822:	d017      	beq.n	800e854 <UART_SetConfig+0x210>
 800e824:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e828:	d817      	bhi.n	800e85a <UART_SetConfig+0x216>
 800e82a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e82e:	d00b      	beq.n	800e848 <UART_SetConfig+0x204>
 800e830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e834:	d811      	bhi.n	800e85a <UART_SetConfig+0x216>
 800e836:	2b00      	cmp	r3, #0
 800e838:	d003      	beq.n	800e842 <UART_SetConfig+0x1fe>
 800e83a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e83e:	d006      	beq.n	800e84e <UART_SetConfig+0x20a>
 800e840:	e00b      	b.n	800e85a <UART_SetConfig+0x216>
 800e842:	2300      	movs	r3, #0
 800e844:	77fb      	strb	r3, [r7, #31]
 800e846:	e0a1      	b.n	800e98c <UART_SetConfig+0x348>
 800e848:	2302      	movs	r3, #2
 800e84a:	77fb      	strb	r3, [r7, #31]
 800e84c:	e09e      	b.n	800e98c <UART_SetConfig+0x348>
 800e84e:	2304      	movs	r3, #4
 800e850:	77fb      	strb	r3, [r7, #31]
 800e852:	e09b      	b.n	800e98c <UART_SetConfig+0x348>
 800e854:	2308      	movs	r3, #8
 800e856:	77fb      	strb	r3, [r7, #31]
 800e858:	e098      	b.n	800e98c <UART_SetConfig+0x348>
 800e85a:	2310      	movs	r3, #16
 800e85c:	77fb      	strb	r3, [r7, #31]
 800e85e:	e095      	b.n	800e98c <UART_SetConfig+0x348>
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	4a2f      	ldr	r2, [pc, #188]	; (800e924 <UART_SetConfig+0x2e0>)
 800e866:	4293      	cmp	r3, r2
 800e868:	d125      	bne.n	800e8b6 <UART_SetConfig+0x272>
 800e86a:	4b29      	ldr	r3, [pc, #164]	; (800e910 <UART_SetConfig+0x2cc>)
 800e86c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e870:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e874:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e878:	d017      	beq.n	800e8aa <UART_SetConfig+0x266>
 800e87a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e87e:	d817      	bhi.n	800e8b0 <UART_SetConfig+0x26c>
 800e880:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e884:	d00b      	beq.n	800e89e <UART_SetConfig+0x25a>
 800e886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e88a:	d811      	bhi.n	800e8b0 <UART_SetConfig+0x26c>
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d003      	beq.n	800e898 <UART_SetConfig+0x254>
 800e890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e894:	d006      	beq.n	800e8a4 <UART_SetConfig+0x260>
 800e896:	e00b      	b.n	800e8b0 <UART_SetConfig+0x26c>
 800e898:	2301      	movs	r3, #1
 800e89a:	77fb      	strb	r3, [r7, #31]
 800e89c:	e076      	b.n	800e98c <UART_SetConfig+0x348>
 800e89e:	2302      	movs	r3, #2
 800e8a0:	77fb      	strb	r3, [r7, #31]
 800e8a2:	e073      	b.n	800e98c <UART_SetConfig+0x348>
 800e8a4:	2304      	movs	r3, #4
 800e8a6:	77fb      	strb	r3, [r7, #31]
 800e8a8:	e070      	b.n	800e98c <UART_SetConfig+0x348>
 800e8aa:	2308      	movs	r3, #8
 800e8ac:	77fb      	strb	r3, [r7, #31]
 800e8ae:	e06d      	b.n	800e98c <UART_SetConfig+0x348>
 800e8b0:	2310      	movs	r3, #16
 800e8b2:	77fb      	strb	r3, [r7, #31]
 800e8b4:	e06a      	b.n	800e98c <UART_SetConfig+0x348>
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	4a1b      	ldr	r2, [pc, #108]	; (800e928 <UART_SetConfig+0x2e4>)
 800e8bc:	4293      	cmp	r3, r2
 800e8be:	d138      	bne.n	800e932 <UART_SetConfig+0x2ee>
 800e8c0:	4b13      	ldr	r3, [pc, #76]	; (800e910 <UART_SetConfig+0x2cc>)
 800e8c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8c6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e8ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e8ce:	d017      	beq.n	800e900 <UART_SetConfig+0x2bc>
 800e8d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e8d4:	d82a      	bhi.n	800e92c <UART_SetConfig+0x2e8>
 800e8d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e8da:	d00b      	beq.n	800e8f4 <UART_SetConfig+0x2b0>
 800e8dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e8e0:	d824      	bhi.n	800e92c <UART_SetConfig+0x2e8>
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d003      	beq.n	800e8ee <UART_SetConfig+0x2aa>
 800e8e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8ea:	d006      	beq.n	800e8fa <UART_SetConfig+0x2b6>
 800e8ec:	e01e      	b.n	800e92c <UART_SetConfig+0x2e8>
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	77fb      	strb	r3, [r7, #31]
 800e8f2:	e04b      	b.n	800e98c <UART_SetConfig+0x348>
 800e8f4:	2302      	movs	r3, #2
 800e8f6:	77fb      	strb	r3, [r7, #31]
 800e8f8:	e048      	b.n	800e98c <UART_SetConfig+0x348>
 800e8fa:	2304      	movs	r3, #4
 800e8fc:	77fb      	strb	r3, [r7, #31]
 800e8fe:	e045      	b.n	800e98c <UART_SetConfig+0x348>
 800e900:	2308      	movs	r3, #8
 800e902:	77fb      	strb	r3, [r7, #31]
 800e904:	e042      	b.n	800e98c <UART_SetConfig+0x348>
 800e906:	bf00      	nop
 800e908:	efff69f3 	.word	0xefff69f3
 800e90c:	40011000 	.word	0x40011000
 800e910:	40023800 	.word	0x40023800
 800e914:	40004400 	.word	0x40004400
 800e918:	40004800 	.word	0x40004800
 800e91c:	40004c00 	.word	0x40004c00
 800e920:	40005000 	.word	0x40005000
 800e924:	40011400 	.word	0x40011400
 800e928:	40007800 	.word	0x40007800
 800e92c:	2310      	movs	r3, #16
 800e92e:	77fb      	strb	r3, [r7, #31]
 800e930:	e02c      	b.n	800e98c <UART_SetConfig+0x348>
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	4a72      	ldr	r2, [pc, #456]	; (800eb00 <UART_SetConfig+0x4bc>)
 800e938:	4293      	cmp	r3, r2
 800e93a:	d125      	bne.n	800e988 <UART_SetConfig+0x344>
 800e93c:	4b71      	ldr	r3, [pc, #452]	; (800eb04 <UART_SetConfig+0x4c0>)
 800e93e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e942:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e946:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e94a:	d017      	beq.n	800e97c <UART_SetConfig+0x338>
 800e94c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e950:	d817      	bhi.n	800e982 <UART_SetConfig+0x33e>
 800e952:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e956:	d00b      	beq.n	800e970 <UART_SetConfig+0x32c>
 800e958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e95c:	d811      	bhi.n	800e982 <UART_SetConfig+0x33e>
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d003      	beq.n	800e96a <UART_SetConfig+0x326>
 800e962:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e966:	d006      	beq.n	800e976 <UART_SetConfig+0x332>
 800e968:	e00b      	b.n	800e982 <UART_SetConfig+0x33e>
 800e96a:	2300      	movs	r3, #0
 800e96c:	77fb      	strb	r3, [r7, #31]
 800e96e:	e00d      	b.n	800e98c <UART_SetConfig+0x348>
 800e970:	2302      	movs	r3, #2
 800e972:	77fb      	strb	r3, [r7, #31]
 800e974:	e00a      	b.n	800e98c <UART_SetConfig+0x348>
 800e976:	2304      	movs	r3, #4
 800e978:	77fb      	strb	r3, [r7, #31]
 800e97a:	e007      	b.n	800e98c <UART_SetConfig+0x348>
 800e97c:	2308      	movs	r3, #8
 800e97e:	77fb      	strb	r3, [r7, #31]
 800e980:	e004      	b.n	800e98c <UART_SetConfig+0x348>
 800e982:	2310      	movs	r3, #16
 800e984:	77fb      	strb	r3, [r7, #31]
 800e986:	e001      	b.n	800e98c <UART_SetConfig+0x348>
 800e988:	2310      	movs	r3, #16
 800e98a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	69db      	ldr	r3, [r3, #28]
 800e990:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e994:	d15b      	bne.n	800ea4e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800e996:	7ffb      	ldrb	r3, [r7, #31]
 800e998:	2b08      	cmp	r3, #8
 800e99a:	d828      	bhi.n	800e9ee <UART_SetConfig+0x3aa>
 800e99c:	a201      	add	r2, pc, #4	; (adr r2, 800e9a4 <UART_SetConfig+0x360>)
 800e99e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9a2:	bf00      	nop
 800e9a4:	0800e9c9 	.word	0x0800e9c9
 800e9a8:	0800e9d1 	.word	0x0800e9d1
 800e9ac:	0800e9d9 	.word	0x0800e9d9
 800e9b0:	0800e9ef 	.word	0x0800e9ef
 800e9b4:	0800e9df 	.word	0x0800e9df
 800e9b8:	0800e9ef 	.word	0x0800e9ef
 800e9bc:	0800e9ef 	.word	0x0800e9ef
 800e9c0:	0800e9ef 	.word	0x0800e9ef
 800e9c4:	0800e9e7 	.word	0x0800e9e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e9c8:	f7fb fd60 	bl	800a48c <HAL_RCC_GetPCLK1Freq>
 800e9cc:	61b8      	str	r0, [r7, #24]
        break;
 800e9ce:	e013      	b.n	800e9f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e9d0:	f7fb fd70 	bl	800a4b4 <HAL_RCC_GetPCLK2Freq>
 800e9d4:	61b8      	str	r0, [r7, #24]
        break;
 800e9d6:	e00f      	b.n	800e9f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e9d8:	4b4b      	ldr	r3, [pc, #300]	; (800eb08 <UART_SetConfig+0x4c4>)
 800e9da:	61bb      	str	r3, [r7, #24]
        break;
 800e9dc:	e00c      	b.n	800e9f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e9de:	f7fb fc83 	bl	800a2e8 <HAL_RCC_GetSysClockFreq>
 800e9e2:	61b8      	str	r0, [r7, #24]
        break;
 800e9e4:	e008      	b.n	800e9f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e9e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e9ea:	61bb      	str	r3, [r7, #24]
        break;
 800e9ec:	e004      	b.n	800e9f8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	77bb      	strb	r3, [r7, #30]
        break;
 800e9f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e9f8:	69bb      	ldr	r3, [r7, #24]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d074      	beq.n	800eae8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e9fe:	69bb      	ldr	r3, [r7, #24]
 800ea00:	005a      	lsls	r2, r3, #1
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	685b      	ldr	r3, [r3, #4]
 800ea06:	085b      	lsrs	r3, r3, #1
 800ea08:	441a      	add	r2, r3
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	685b      	ldr	r3, [r3, #4]
 800ea0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	2b0f      	cmp	r3, #15
 800ea18:	d916      	bls.n	800ea48 <UART_SetConfig+0x404>
 800ea1a:	693b      	ldr	r3, [r7, #16]
 800ea1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea20:	d212      	bcs.n	800ea48 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	b29b      	uxth	r3, r3
 800ea26:	f023 030f 	bic.w	r3, r3, #15
 800ea2a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ea2c:	693b      	ldr	r3, [r7, #16]
 800ea2e:	085b      	lsrs	r3, r3, #1
 800ea30:	b29b      	uxth	r3, r3
 800ea32:	f003 0307 	and.w	r3, r3, #7
 800ea36:	b29a      	uxth	r2, r3
 800ea38:	89fb      	ldrh	r3, [r7, #14]
 800ea3a:	4313      	orrs	r3, r2
 800ea3c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	89fa      	ldrh	r2, [r7, #14]
 800ea44:	60da      	str	r2, [r3, #12]
 800ea46:	e04f      	b.n	800eae8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ea48:	2301      	movs	r3, #1
 800ea4a:	77bb      	strb	r3, [r7, #30]
 800ea4c:	e04c      	b.n	800eae8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ea4e:	7ffb      	ldrb	r3, [r7, #31]
 800ea50:	2b08      	cmp	r3, #8
 800ea52:	d828      	bhi.n	800eaa6 <UART_SetConfig+0x462>
 800ea54:	a201      	add	r2, pc, #4	; (adr r2, 800ea5c <UART_SetConfig+0x418>)
 800ea56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea5a:	bf00      	nop
 800ea5c:	0800ea81 	.word	0x0800ea81
 800ea60:	0800ea89 	.word	0x0800ea89
 800ea64:	0800ea91 	.word	0x0800ea91
 800ea68:	0800eaa7 	.word	0x0800eaa7
 800ea6c:	0800ea97 	.word	0x0800ea97
 800ea70:	0800eaa7 	.word	0x0800eaa7
 800ea74:	0800eaa7 	.word	0x0800eaa7
 800ea78:	0800eaa7 	.word	0x0800eaa7
 800ea7c:	0800ea9f 	.word	0x0800ea9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea80:	f7fb fd04 	bl	800a48c <HAL_RCC_GetPCLK1Freq>
 800ea84:	61b8      	str	r0, [r7, #24]
        break;
 800ea86:	e013      	b.n	800eab0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ea88:	f7fb fd14 	bl	800a4b4 <HAL_RCC_GetPCLK2Freq>
 800ea8c:	61b8      	str	r0, [r7, #24]
        break;
 800ea8e:	e00f      	b.n	800eab0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ea90:	4b1d      	ldr	r3, [pc, #116]	; (800eb08 <UART_SetConfig+0x4c4>)
 800ea92:	61bb      	str	r3, [r7, #24]
        break;
 800ea94:	e00c      	b.n	800eab0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ea96:	f7fb fc27 	bl	800a2e8 <HAL_RCC_GetSysClockFreq>
 800ea9a:	61b8      	str	r0, [r7, #24]
        break;
 800ea9c:	e008      	b.n	800eab0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ea9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eaa2:	61bb      	str	r3, [r7, #24]
        break;
 800eaa4:	e004      	b.n	800eab0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800eaaa:	2301      	movs	r3, #1
 800eaac:	77bb      	strb	r3, [r7, #30]
        break;
 800eaae:	bf00      	nop
    }

    if (pclk != 0U)
 800eab0:	69bb      	ldr	r3, [r7, #24]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d018      	beq.n	800eae8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	685b      	ldr	r3, [r3, #4]
 800eaba:	085a      	lsrs	r2, r3, #1
 800eabc:	69bb      	ldr	r3, [r7, #24]
 800eabe:	441a      	add	r2, r3
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	685b      	ldr	r3, [r3, #4]
 800eac4:	fbb2 f3f3 	udiv	r3, r2, r3
 800eac8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eaca:	693b      	ldr	r3, [r7, #16]
 800eacc:	2b0f      	cmp	r3, #15
 800eace:	d909      	bls.n	800eae4 <UART_SetConfig+0x4a0>
 800ead0:	693b      	ldr	r3, [r7, #16]
 800ead2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ead6:	d205      	bcs.n	800eae4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ead8:	693b      	ldr	r3, [r7, #16]
 800eada:	b29a      	uxth	r2, r3
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	60da      	str	r2, [r3, #12]
 800eae2:	e001      	b.n	800eae8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800eae4:	2301      	movs	r3, #1
 800eae6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2200      	movs	r2, #0
 800eaec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800eaf4:	7fbb      	ldrb	r3, [r7, #30]
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3720      	adds	r7, #32
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}
 800eafe:	bf00      	nop
 800eb00:	40007c00 	.word	0x40007c00
 800eb04:	40023800 	.word	0x40023800
 800eb08:	00f42400 	.word	0x00f42400

0800eb0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b083      	sub	sp, #12
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb18:	f003 0301 	and.w	r3, r3, #1
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d00a      	beq.n	800eb36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	685b      	ldr	r3, [r3, #4]
 800eb26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	430a      	orrs	r2, r1
 800eb34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb3a:	f003 0302 	and.w	r3, r3, #2
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d00a      	beq.n	800eb58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	685b      	ldr	r3, [r3, #4]
 800eb48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	430a      	orrs	r2, r1
 800eb56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb5c:	f003 0304 	and.w	r3, r3, #4
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d00a      	beq.n	800eb7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	685b      	ldr	r3, [r3, #4]
 800eb6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	430a      	orrs	r2, r1
 800eb78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb7e:	f003 0308 	and.w	r3, r3, #8
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d00a      	beq.n	800eb9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	685b      	ldr	r3, [r3, #4]
 800eb8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	430a      	orrs	r2, r1
 800eb9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eba0:	f003 0310 	and.w	r3, r3, #16
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d00a      	beq.n	800ebbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	689b      	ldr	r3, [r3, #8]
 800ebae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	430a      	orrs	r2, r1
 800ebbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebc2:	f003 0320 	and.w	r3, r3, #32
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d00a      	beq.n	800ebe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	689b      	ldr	r3, [r3, #8]
 800ebd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	430a      	orrs	r2, r1
 800ebde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d01a      	beq.n	800ec22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	685b      	ldr	r3, [r3, #4]
 800ebf2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	430a      	orrs	r2, r1
 800ec00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ec0a:	d10a      	bne.n	800ec22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	430a      	orrs	r2, r1
 800ec20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d00a      	beq.n	800ec44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	685b      	ldr	r3, [r3, #4]
 800ec34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	430a      	orrs	r2, r1
 800ec42:	605a      	str	r2, [r3, #4]
  }
}
 800ec44:	bf00      	nop
 800ec46:	370c      	adds	r7, #12
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4e:	4770      	bx	lr

0800ec50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b086      	sub	sp, #24
 800ec54:	af02      	add	r7, sp, #8
 800ec56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ec60:	f7f7 fde6 	bl	8006830 <HAL_GetTick>
 800ec64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	f003 0308 	and.w	r3, r3, #8
 800ec70:	2b08      	cmp	r3, #8
 800ec72:	d10e      	bne.n	800ec92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ec74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ec78:	9300      	str	r3, [sp, #0]
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	f000 f82d 	bl	800ece2 <UART_WaitOnFlagUntilTimeout>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d001      	beq.n	800ec92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ec8e:	2303      	movs	r3, #3
 800ec90:	e023      	b.n	800ecda <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	f003 0304 	and.w	r3, r3, #4
 800ec9c:	2b04      	cmp	r3, #4
 800ec9e:	d10e      	bne.n	800ecbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eca0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eca4:	9300      	str	r3, [sp, #0]
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	2200      	movs	r2, #0
 800ecaa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	f000 f817 	bl	800ece2 <UART_WaitOnFlagUntilTimeout>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d001      	beq.n	800ecbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ecba:	2303      	movs	r3, #3
 800ecbc:	e00d      	b.n	800ecda <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2220      	movs	r2, #32
 800ecc2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2220      	movs	r2, #32
 800ecc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2200      	movs	r2, #0
 800ecce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800ecd8:	2300      	movs	r3, #0
}
 800ecda:	4618      	mov	r0, r3
 800ecdc:	3710      	adds	r7, #16
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}

0800ece2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ece2:	b580      	push	{r7, lr}
 800ece4:	b09c      	sub	sp, #112	; 0x70
 800ece6:	af00      	add	r7, sp, #0
 800ece8:	60f8      	str	r0, [r7, #12]
 800ecea:	60b9      	str	r1, [r7, #8]
 800ecec:	603b      	str	r3, [r7, #0]
 800ecee:	4613      	mov	r3, r2
 800ecf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ecf2:	e0a5      	b.n	800ee40 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ecf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ecf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecfa:	f000 80a1 	beq.w	800ee40 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ecfe:	f7f7 fd97 	bl	8006830 <HAL_GetTick>
 800ed02:	4602      	mov	r2, r0
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	1ad3      	subs	r3, r2, r3
 800ed08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	d302      	bcc.n	800ed14 <UART_WaitOnFlagUntilTimeout+0x32>
 800ed0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d13e      	bne.n	800ed92 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed1c:	e853 3f00 	ldrex	r3, [r3]
 800ed20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ed22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ed28:	667b      	str	r3, [r7, #100]	; 0x64
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	461a      	mov	r2, r3
 800ed30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed32:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ed34:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ed38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ed3a:	e841 2300 	strex	r3, r2, [r1]
 800ed3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ed40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d1e6      	bne.n	800ed14 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	3308      	adds	r3, #8
 800ed4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed50:	e853 3f00 	ldrex	r3, [r3]
 800ed54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ed56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed58:	f023 0301 	bic.w	r3, r3, #1
 800ed5c:	663b      	str	r3, [r7, #96]	; 0x60
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	3308      	adds	r3, #8
 800ed64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ed66:	64ba      	str	r2, [r7, #72]	; 0x48
 800ed68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed6e:	e841 2300 	strex	r3, r2, [r1]
 800ed72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ed74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d1e5      	bne.n	800ed46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	2220      	movs	r2, #32
 800ed7e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	2220      	movs	r2, #32
 800ed84:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800ed8e:	2303      	movs	r3, #3
 800ed90:	e067      	b.n	800ee62 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	f003 0304 	and.w	r3, r3, #4
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d04f      	beq.n	800ee40 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	69db      	ldr	r3, [r3, #28]
 800eda6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800edaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800edae:	d147      	bne.n	800ee40 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800edb8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc2:	e853 3f00 	ldrex	r3, [r3]
 800edc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800edc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800edce:	66fb      	str	r3, [r7, #108]	; 0x6c
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	461a      	mov	r2, r3
 800edd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edd8:	637b      	str	r3, [r7, #52]	; 0x34
 800edda:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eddc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800edde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ede0:	e841 2300 	strex	r3, r2, [r1]
 800ede4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ede6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d1e6      	bne.n	800edba <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	3308      	adds	r3, #8
 800edf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edf4:	697b      	ldr	r3, [r7, #20]
 800edf6:	e853 3f00 	ldrex	r3, [r3]
 800edfa:	613b      	str	r3, [r7, #16]
   return(result);
 800edfc:	693b      	ldr	r3, [r7, #16]
 800edfe:	f023 0301 	bic.w	r3, r3, #1
 800ee02:	66bb      	str	r3, [r7, #104]	; 0x68
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	3308      	adds	r3, #8
 800ee0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ee0c:	623a      	str	r2, [r7, #32]
 800ee0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee10:	69f9      	ldr	r1, [r7, #28]
 800ee12:	6a3a      	ldr	r2, [r7, #32]
 800ee14:	e841 2300 	strex	r3, r2, [r1]
 800ee18:	61bb      	str	r3, [r7, #24]
   return(result);
 800ee1a:	69bb      	ldr	r3, [r7, #24]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d1e5      	bne.n	800edec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	2220      	movs	r2, #32
 800ee24:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	2220      	movs	r2, #32
 800ee2a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	2220      	movs	r2, #32
 800ee30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	2200      	movs	r2, #0
 800ee38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800ee3c:	2303      	movs	r3, #3
 800ee3e:	e010      	b.n	800ee62 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	69da      	ldr	r2, [r3, #28]
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	4013      	ands	r3, r2
 800ee4a:	68ba      	ldr	r2, [r7, #8]
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	bf0c      	ite	eq
 800ee50:	2301      	moveq	r3, #1
 800ee52:	2300      	movne	r3, #0
 800ee54:	b2db      	uxtb	r3, r3
 800ee56:	461a      	mov	r2, r3
 800ee58:	79fb      	ldrb	r3, [r7, #7]
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	f43f af4a 	beq.w	800ecf4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ee60:	2300      	movs	r3, #0
}
 800ee62:	4618      	mov	r0, r3
 800ee64:	3770      	adds	r7, #112	; 0x70
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}
	...

0800ee6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ee6c:	b480      	push	{r7}
 800ee6e:	b097      	sub	sp, #92	; 0x5c
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	60f8      	str	r0, [r7, #12]
 800ee74:	60b9      	str	r1, [r7, #8]
 800ee76:	4613      	mov	r3, r2
 800ee78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	68ba      	ldr	r2, [r7, #8]
 800ee7e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	88fa      	ldrh	r2, [r7, #6]
 800ee84:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	88fa      	ldrh	r2, [r7, #6]
 800ee8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	2200      	movs	r2, #0
 800ee94:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	689b      	ldr	r3, [r3, #8]
 800ee9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee9e:	d10e      	bne.n	800eebe <UART_Start_Receive_IT+0x52>
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	691b      	ldr	r3, [r3, #16]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d105      	bne.n	800eeb4 <UART_Start_Receive_IT+0x48>
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	f240 12ff 	movw	r2, #511	; 0x1ff
 800eeae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800eeb2:	e02d      	b.n	800ef10 <UART_Start_Receive_IT+0xa4>
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	22ff      	movs	r2, #255	; 0xff
 800eeb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800eebc:	e028      	b.n	800ef10 <UART_Start_Receive_IT+0xa4>
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	689b      	ldr	r3, [r3, #8]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d10d      	bne.n	800eee2 <UART_Start_Receive_IT+0x76>
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	691b      	ldr	r3, [r3, #16]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d104      	bne.n	800eed8 <UART_Start_Receive_IT+0x6c>
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	22ff      	movs	r2, #255	; 0xff
 800eed2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800eed6:	e01b      	b.n	800ef10 <UART_Start_Receive_IT+0xa4>
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	227f      	movs	r2, #127	; 0x7f
 800eedc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800eee0:	e016      	b.n	800ef10 <UART_Start_Receive_IT+0xa4>
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	689b      	ldr	r3, [r3, #8]
 800eee6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eeea:	d10d      	bne.n	800ef08 <UART_Start_Receive_IT+0x9c>
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	691b      	ldr	r3, [r3, #16]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d104      	bne.n	800eefe <UART_Start_Receive_IT+0x92>
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	227f      	movs	r2, #127	; 0x7f
 800eef8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800eefc:	e008      	b.n	800ef10 <UART_Start_Receive_IT+0xa4>
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	223f      	movs	r2, #63	; 0x3f
 800ef02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ef06:	e003      	b.n	800ef10 <UART_Start_Receive_IT+0xa4>
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	2200      	movs	r2, #0
 800ef14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	2222      	movs	r2, #34	; 0x22
 800ef1c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	3308      	adds	r3, #8
 800ef24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef28:	e853 3f00 	ldrex	r3, [r3]
 800ef2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ef2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef30:	f043 0301 	orr.w	r3, r3, #1
 800ef34:	657b      	str	r3, [r7, #84]	; 0x54
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	3308      	adds	r3, #8
 800ef3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ef3e:	64ba      	str	r2, [r7, #72]	; 0x48
 800ef40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef46:	e841 2300 	strex	r3, r2, [r1]
 800ef4a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ef4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d1e5      	bne.n	800ef1e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	689b      	ldr	r3, [r3, #8]
 800ef56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef5a:	d107      	bne.n	800ef6c <UART_Start_Receive_IT+0x100>
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	691b      	ldr	r3, [r3, #16]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d103      	bne.n	800ef6c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	4a24      	ldr	r2, [pc, #144]	; (800eff8 <UART_Start_Receive_IT+0x18c>)
 800ef68:	665a      	str	r2, [r3, #100]	; 0x64
 800ef6a:	e002      	b.n	800ef72 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	4a23      	ldr	r2, [pc, #140]	; (800effc <UART_Start_Receive_IT+0x190>)
 800ef70:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	2200      	movs	r2, #0
 800ef76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	691b      	ldr	r3, [r3, #16]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d019      	beq.n	800efb6 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef8a:	e853 3f00 	ldrex	r3, [r3]
 800ef8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ef90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef92:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ef96:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	461a      	mov	r2, r3
 800ef9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efa0:	637b      	str	r3, [r7, #52]	; 0x34
 800efa2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efa4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800efa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800efa8:	e841 2300 	strex	r3, r2, [r1]
 800efac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800efae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d1e6      	bne.n	800ef82 <UART_Start_Receive_IT+0x116>
 800efb4:	e018      	b.n	800efe8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	e853 3f00 	ldrex	r3, [r3]
 800efc2:	613b      	str	r3, [r7, #16]
   return(result);
 800efc4:	693b      	ldr	r3, [r7, #16]
 800efc6:	f043 0320 	orr.w	r3, r3, #32
 800efca:	653b      	str	r3, [r7, #80]	; 0x50
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	461a      	mov	r2, r3
 800efd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efd4:	623b      	str	r3, [r7, #32]
 800efd6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efd8:	69f9      	ldr	r1, [r7, #28]
 800efda:	6a3a      	ldr	r2, [r7, #32]
 800efdc:	e841 2300 	strex	r3, r2, [r1]
 800efe0:	61bb      	str	r3, [r7, #24]
   return(result);
 800efe2:	69bb      	ldr	r3, [r7, #24]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d1e6      	bne.n	800efb6 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 800efe8:	2300      	movs	r3, #0
}
 800efea:	4618      	mov	r0, r3
 800efec:	375c      	adds	r7, #92	; 0x5c
 800efee:	46bd      	mov	sp, r7
 800eff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff4:	4770      	bx	lr
 800eff6:	bf00      	nop
 800eff8:	0800f2a3 	.word	0x0800f2a3
 800effc:	0800f147 	.word	0x0800f147

0800f000 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f000:	b480      	push	{r7}
 800f002:	b095      	sub	sp, #84	; 0x54
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f00e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f010:	e853 3f00 	ldrex	r3, [r3]
 800f014:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f018:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f01c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	461a      	mov	r2, r3
 800f024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f026:	643b      	str	r3, [r7, #64]	; 0x40
 800f028:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f02a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f02c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f02e:	e841 2300 	strex	r3, r2, [r1]
 800f032:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f036:	2b00      	cmp	r3, #0
 800f038:	d1e6      	bne.n	800f008 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	3308      	adds	r3, #8
 800f040:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f042:	6a3b      	ldr	r3, [r7, #32]
 800f044:	e853 3f00 	ldrex	r3, [r3]
 800f048:	61fb      	str	r3, [r7, #28]
   return(result);
 800f04a:	69fb      	ldr	r3, [r7, #28]
 800f04c:	f023 0301 	bic.w	r3, r3, #1
 800f050:	64bb      	str	r3, [r7, #72]	; 0x48
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	3308      	adds	r3, #8
 800f058:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f05a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f05c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f05e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f062:	e841 2300 	strex	r3, r2, [r1]
 800f066:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d1e5      	bne.n	800f03a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f072:	2b01      	cmp	r3, #1
 800f074:	d118      	bne.n	800f0a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	e853 3f00 	ldrex	r3, [r3]
 800f082:	60bb      	str	r3, [r7, #8]
   return(result);
 800f084:	68bb      	ldr	r3, [r7, #8]
 800f086:	f023 0310 	bic.w	r3, r3, #16
 800f08a:	647b      	str	r3, [r7, #68]	; 0x44
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	461a      	mov	r2, r3
 800f092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f094:	61bb      	str	r3, [r7, #24]
 800f096:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f098:	6979      	ldr	r1, [r7, #20]
 800f09a:	69ba      	ldr	r2, [r7, #24]
 800f09c:	e841 2300 	strex	r3, r2, [r1]
 800f0a0:	613b      	str	r3, [r7, #16]
   return(result);
 800f0a2:	693b      	ldr	r3, [r7, #16]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d1e6      	bne.n	800f076 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2220      	movs	r2, #32
 800f0ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	665a      	str	r2, [r3, #100]	; 0x64
}
 800f0ba:	bf00      	nop
 800f0bc:	3754      	adds	r7, #84	; 0x54
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c4:	4770      	bx	lr

0800f0c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f0c6:	b580      	push	{r7, lr}
 800f0c8:	b084      	sub	sp, #16
 800f0ca:	af00      	add	r7, sp, #0
 800f0cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f0e4:	68f8      	ldr	r0, [r7, #12]
 800f0e6:	f7ff fa8d 	bl	800e604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f0ea:	bf00      	nop
 800f0ec:	3710      	adds	r7, #16
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}

0800f0f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f0f2:	b580      	push	{r7, lr}
 800f0f4:	b088      	sub	sp, #32
 800f0f6:	af00      	add	r7, sp, #0
 800f0f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	e853 3f00 	ldrex	r3, [r3]
 800f106:	60bb      	str	r3, [r7, #8]
   return(result);
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f10e:	61fb      	str	r3, [r7, #28]
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	461a      	mov	r2, r3
 800f116:	69fb      	ldr	r3, [r7, #28]
 800f118:	61bb      	str	r3, [r7, #24]
 800f11a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f11c:	6979      	ldr	r1, [r7, #20]
 800f11e:	69ba      	ldr	r2, [r7, #24]
 800f120:	e841 2300 	strex	r3, r2, [r1]
 800f124:	613b      	str	r3, [r7, #16]
   return(result);
 800f126:	693b      	ldr	r3, [r7, #16]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d1e6      	bne.n	800f0fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2220      	movs	r2, #32
 800f130:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2200      	movs	r2, #0
 800f136:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f7ff fa59 	bl	800e5f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f13e:	bf00      	nop
 800f140:	3720      	adds	r7, #32
 800f142:	46bd      	mov	sp, r7
 800f144:	bd80      	pop	{r7, pc}

0800f146 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f146:	b580      	push	{r7, lr}
 800f148:	b096      	sub	sp, #88	; 0x58
 800f14a:	af00      	add	r7, sp, #0
 800f14c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f154:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f15c:	2b22      	cmp	r3, #34	; 0x22
 800f15e:	f040 8094 	bne.w	800f28a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f168:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f16c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f170:	b2d9      	uxtb	r1, r3
 800f172:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f176:	b2da      	uxtb	r2, r3
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f17c:	400a      	ands	r2, r1
 800f17e:	b2d2      	uxtb	r2, r2
 800f180:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f186:	1c5a      	adds	r2, r3, #1
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f192:	b29b      	uxth	r3, r3
 800f194:	3b01      	subs	r3, #1
 800f196:	b29a      	uxth	r2, r3
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f1a4:	b29b      	uxth	r3, r3
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d177      	bne.n	800f29a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1b2:	e853 3f00 	ldrex	r3, [r3]
 800f1b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f1b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f1be:	653b      	str	r3, [r7, #80]	; 0x50
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	461a      	mov	r2, r3
 800f1c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1c8:	647b      	str	r3, [r7, #68]	; 0x44
 800f1ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f1ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f1d0:	e841 2300 	strex	r3, r2, [r1]
 800f1d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f1d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d1e6      	bne.n	800f1aa <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	3308      	adds	r3, #8
 800f1e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e6:	e853 3f00 	ldrex	r3, [r3]
 800f1ea:	623b      	str	r3, [r7, #32]
   return(result);
 800f1ec:	6a3b      	ldr	r3, [r7, #32]
 800f1ee:	f023 0301 	bic.w	r3, r3, #1
 800f1f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	3308      	adds	r3, #8
 800f1fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f1fc:	633a      	str	r2, [r7, #48]	; 0x30
 800f1fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f200:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f204:	e841 2300 	strex	r3, r2, [r1]
 800f208:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d1e5      	bne.n	800f1dc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2220      	movs	r2, #32
 800f214:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2200      	movs	r2, #0
 800f21a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f220:	2b01      	cmp	r3, #1
 800f222:	d12e      	bne.n	800f282 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2200      	movs	r2, #0
 800f228:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f230:	693b      	ldr	r3, [r7, #16]
 800f232:	e853 3f00 	ldrex	r3, [r3]
 800f236:	60fb      	str	r3, [r7, #12]
   return(result);
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	f023 0310 	bic.w	r3, r3, #16
 800f23e:	64bb      	str	r3, [r7, #72]	; 0x48
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	461a      	mov	r2, r3
 800f246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f248:	61fb      	str	r3, [r7, #28]
 800f24a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f24c:	69b9      	ldr	r1, [r7, #24]
 800f24e:	69fa      	ldr	r2, [r7, #28]
 800f250:	e841 2300 	strex	r3, r2, [r1]
 800f254:	617b      	str	r3, [r7, #20]
   return(result);
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d1e6      	bne.n	800f22a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	69db      	ldr	r3, [r3, #28]
 800f262:	f003 0310 	and.w	r3, r3, #16
 800f266:	2b10      	cmp	r3, #16
 800f268:	d103      	bne.n	800f272 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	2210      	movs	r2, #16
 800f270:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f278:	4619      	mov	r1, r3
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f7ff f9cc 	bl	800e618 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f280:	e00b      	b.n	800f29a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	f7f5 ff5e 	bl	8005144 <HAL_UART_RxCpltCallback>
}
 800f288:	e007      	b.n	800f29a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	699a      	ldr	r2, [r3, #24]
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	f042 0208 	orr.w	r2, r2, #8
 800f298:	619a      	str	r2, [r3, #24]
}
 800f29a:	bf00      	nop
 800f29c:	3758      	adds	r7, #88	; 0x58
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}

0800f2a2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f2a2:	b580      	push	{r7, lr}
 800f2a4:	b096      	sub	sp, #88	; 0x58
 800f2a6:	af00      	add	r7, sp, #0
 800f2a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f2b0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2b8:	2b22      	cmp	r3, #34	; 0x22
 800f2ba:	f040 8094 	bne.w	800f3e6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2c4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2cc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800f2ce:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800f2d2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f2d6:	4013      	ands	r3, r2
 800f2d8:	b29a      	uxth	r2, r3
 800f2da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2dc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2e2:	1c9a      	adds	r2, r3, #2
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f2ee:	b29b      	uxth	r3, r3
 800f2f0:	3b01      	subs	r3, #1
 800f2f2:	b29a      	uxth	r2, r3
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f300:	b29b      	uxth	r3, r3
 800f302:	2b00      	cmp	r3, #0
 800f304:	d177      	bne.n	800f3f6 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f30c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f30e:	e853 3f00 	ldrex	r3, [r3]
 800f312:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f316:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f31a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	461a      	mov	r2, r3
 800f322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f324:	643b      	str	r3, [r7, #64]	; 0x40
 800f326:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f328:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f32a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f32c:	e841 2300 	strex	r3, r2, [r1]
 800f330:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f334:	2b00      	cmp	r3, #0
 800f336:	d1e6      	bne.n	800f306 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	3308      	adds	r3, #8
 800f33e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f340:	6a3b      	ldr	r3, [r7, #32]
 800f342:	e853 3f00 	ldrex	r3, [r3]
 800f346:	61fb      	str	r3, [r7, #28]
   return(result);
 800f348:	69fb      	ldr	r3, [r7, #28]
 800f34a:	f023 0301 	bic.w	r3, r3, #1
 800f34e:	64bb      	str	r3, [r7, #72]	; 0x48
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	3308      	adds	r3, #8
 800f356:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f358:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f35a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f35c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f35e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f360:	e841 2300 	strex	r3, r2, [r1]
 800f364:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d1e5      	bne.n	800f338 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2220      	movs	r2, #32
 800f370:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2200      	movs	r2, #0
 800f376:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f37c:	2b01      	cmp	r3, #1
 800f37e:	d12e      	bne.n	800f3de <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2200      	movs	r2, #0
 800f384:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	e853 3f00 	ldrex	r3, [r3]
 800f392:	60bb      	str	r3, [r7, #8]
   return(result);
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	f023 0310 	bic.w	r3, r3, #16
 800f39a:	647b      	str	r3, [r7, #68]	; 0x44
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	461a      	mov	r2, r3
 800f3a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3a4:	61bb      	str	r3, [r7, #24]
 800f3a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3a8:	6979      	ldr	r1, [r7, #20]
 800f3aa:	69ba      	ldr	r2, [r7, #24]
 800f3ac:	e841 2300 	strex	r3, r2, [r1]
 800f3b0:	613b      	str	r3, [r7, #16]
   return(result);
 800f3b2:	693b      	ldr	r3, [r7, #16]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d1e6      	bne.n	800f386 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	69db      	ldr	r3, [r3, #28]
 800f3be:	f003 0310 	and.w	r3, r3, #16
 800f3c2:	2b10      	cmp	r3, #16
 800f3c4:	d103      	bne.n	800f3ce <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	2210      	movs	r2, #16
 800f3cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f7ff f91e 	bl	800e618 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f3dc:	e00b      	b.n	800f3f6 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f7f5 feb0 	bl	8005144 <HAL_UART_RxCpltCallback>
}
 800f3e4:	e007      	b.n	800f3f6 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	699a      	ldr	r2, [r3, #24]
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	f042 0208 	orr.w	r2, r2, #8
 800f3f4:	619a      	str	r2, [r3, #24]
}
 800f3f6:	bf00      	nop
 800f3f8:	3758      	adds	r7, #88	; 0x58
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}
	...

0800f400 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800f400:	b084      	sub	sp, #16
 800f402:	b480      	push	{r7}
 800f404:	b085      	sub	sp, #20
 800f406:	af00      	add	r7, sp, #0
 800f408:	6078      	str	r0, [r7, #4]
 800f40a:	f107 001c 	add.w	r0, r7, #28
 800f40e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f412:	2300      	movs	r3, #0
 800f414:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800f416:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800f418:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800f41a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800f41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800f41e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800f420:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800f422:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800f424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800f426:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800f42a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800f42c:	68fa      	ldr	r2, [r7, #12]
 800f42e:	4313      	orrs	r3, r2
 800f430:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	685a      	ldr	r2, [r3, #4]
 800f436:	4b07      	ldr	r3, [pc, #28]	; (800f454 <SDMMC_Init+0x54>)
 800f438:	4013      	ands	r3, r2
 800f43a:	68fa      	ldr	r2, [r7, #12]
 800f43c:	431a      	orrs	r2, r3
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f442:	2300      	movs	r3, #0
}
 800f444:	4618      	mov	r0, r3
 800f446:	3714      	adds	r7, #20
 800f448:	46bd      	mov	sp, r7
 800f44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44e:	b004      	add	sp, #16
 800f450:	4770      	bx	lr
 800f452:	bf00      	nop
 800f454:	ffff8100 	.word	0xffff8100

0800f458 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800f458:	b480      	push	{r7}
 800f45a:	b083      	sub	sp, #12
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800f466:	4618      	mov	r0, r3
 800f468:	370c      	adds	r7, #12
 800f46a:	46bd      	mov	sp, r7
 800f46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f470:	4770      	bx	lr

0800f472 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800f472:	b480      	push	{r7}
 800f474:	b083      	sub	sp, #12
 800f476:	af00      	add	r7, sp, #0
 800f478:	6078      	str	r0, [r7, #4]
 800f47a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	681a      	ldr	r2, [r3, #0]
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f486:	2300      	movs	r3, #0
}
 800f488:	4618      	mov	r0, r3
 800f48a:	370c      	adds	r7, #12
 800f48c:	46bd      	mov	sp, r7
 800f48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f492:	4770      	bx	lr

0800f494 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800f494:	b480      	push	{r7}
 800f496:	b083      	sub	sp, #12
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2203      	movs	r2, #3
 800f4a0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800f4a2:	2300      	movs	r3, #0
}
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	370c      	adds	r7, #12
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ae:	4770      	bx	lr

0800f4b0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	b083      	sub	sp, #12
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	f003 0303 	and.w	r3, r3, #3
}
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	370c      	adds	r7, #12
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ca:	4770      	bx	lr

0800f4cc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b085      	sub	sp, #20
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
 800f4d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	681a      	ldr	r2, [r3, #0]
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f4e6:	683b      	ldr	r3, [r7, #0]
 800f4e8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f4ea:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f4f0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f4f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f4f8:	68fa      	ldr	r2, [r7, #12]
 800f4fa:	4313      	orrs	r3, r2
 800f4fc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	68da      	ldr	r2, [r3, #12]
 800f502:	4b06      	ldr	r3, [pc, #24]	; (800f51c <SDMMC_SendCommand+0x50>)
 800f504:	4013      	ands	r3, r2
 800f506:	68fa      	ldr	r2, [r7, #12]
 800f508:	431a      	orrs	r2, r3
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800f50e:	2300      	movs	r3, #0
}
 800f510:	4618      	mov	r0, r3
 800f512:	3714      	adds	r7, #20
 800f514:	46bd      	mov	sp, r7
 800f516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51a:	4770      	bx	lr
 800f51c:	fffff000 	.word	0xfffff000

0800f520 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800f520:	b480      	push	{r7}
 800f522:	b083      	sub	sp, #12
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	691b      	ldr	r3, [r3, #16]
 800f52c:	b2db      	uxtb	r3, r3
}
 800f52e:	4618      	mov	r0, r3
 800f530:	370c      	adds	r7, #12
 800f532:	46bd      	mov	sp, r7
 800f534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f538:	4770      	bx	lr

0800f53a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800f53a:	b480      	push	{r7}
 800f53c:	b085      	sub	sp, #20
 800f53e:	af00      	add	r7, sp, #0
 800f540:	6078      	str	r0, [r7, #4]
 800f542:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	3314      	adds	r3, #20
 800f548:	461a      	mov	r2, r3
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	4413      	add	r3, r2
 800f54e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	681b      	ldr	r3, [r3, #0]
}  
 800f554:	4618      	mov	r0, r3
 800f556:	3714      	adds	r7, #20
 800f558:	46bd      	mov	sp, r7
 800f55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55e:	4770      	bx	lr

0800f560 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800f560:	b480      	push	{r7}
 800f562:	b085      	sub	sp, #20
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
 800f568:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f56a:	2300      	movs	r3, #0
 800f56c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	681a      	ldr	r2, [r3, #0]
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	685a      	ldr	r2, [r3, #4]
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f586:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f58c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f592:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f594:	68fa      	ldr	r2, [r7, #12]
 800f596:	4313      	orrs	r3, r2
 800f598:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f59e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	431a      	orrs	r2, r3
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800f5aa:	2300      	movs	r3, #0

}
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	3714      	adds	r7, #20
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b6:	4770      	bx	lr

0800f5b8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b088      	sub	sp, #32
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
 800f5c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f5c6:	2310      	movs	r3, #16
 800f5c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f5ca:	2340      	movs	r3, #64	; 0x40
 800f5cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f5d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f5d8:	f107 0308 	add.w	r3, r7, #8
 800f5dc:	4619      	mov	r1, r3
 800f5de:	6878      	ldr	r0, [r7, #4]
 800f5e0:	f7ff ff74 	bl	800f4cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800f5e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f5e8:	2110      	movs	r1, #16
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f000 fa1a 	bl	800fa24 <SDMMC_GetCmdResp1>
 800f5f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f5f2:	69fb      	ldr	r3, [r7, #28]
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	3720      	adds	r7, #32
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}

0800f5fc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b088      	sub	sp, #32
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
 800f604:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f60a:	2311      	movs	r3, #17
 800f60c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f60e:	2340      	movs	r3, #64	; 0x40
 800f610:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f612:	2300      	movs	r3, #0
 800f614:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f61a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f61c:	f107 0308 	add.w	r3, r7, #8
 800f620:	4619      	mov	r1, r3
 800f622:	6878      	ldr	r0, [r7, #4]
 800f624:	f7ff ff52 	bl	800f4cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f628:	f241 3288 	movw	r2, #5000	; 0x1388
 800f62c:	2111      	movs	r1, #17
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f000 f9f8 	bl	800fa24 <SDMMC_GetCmdResp1>
 800f634:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f636:	69fb      	ldr	r3, [r7, #28]
}
 800f638:	4618      	mov	r0, r3
 800f63a:	3720      	adds	r7, #32
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}

0800f640 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b088      	sub	sp, #32
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f64e:	2312      	movs	r3, #18
 800f650:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f652:	2340      	movs	r3, #64	; 0x40
 800f654:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f656:	2300      	movs	r3, #0
 800f658:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f65a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f65e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f660:	f107 0308 	add.w	r3, r7, #8
 800f664:	4619      	mov	r1, r3
 800f666:	6878      	ldr	r0, [r7, #4]
 800f668:	f7ff ff30 	bl	800f4cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f66c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f670:	2112      	movs	r1, #18
 800f672:	6878      	ldr	r0, [r7, #4]
 800f674:	f000 f9d6 	bl	800fa24 <SDMMC_GetCmdResp1>
 800f678:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f67a:	69fb      	ldr	r3, [r7, #28]
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	3720      	adds	r7, #32
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}

0800f684 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b088      	sub	sp, #32
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
 800f68c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f692:	2318      	movs	r3, #24
 800f694:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f696:	2340      	movs	r3, #64	; 0x40
 800f698:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f69a:	2300      	movs	r3, #0
 800f69c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f69e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f6a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f6a4:	f107 0308 	add.w	r3, r7, #8
 800f6a8:	4619      	mov	r1, r3
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f7ff ff0e 	bl	800f4cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f6b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f6b4:	2118      	movs	r1, #24
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f000 f9b4 	bl	800fa24 <SDMMC_GetCmdResp1>
 800f6bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f6be:	69fb      	ldr	r3, [r7, #28]
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	3720      	adds	r7, #32
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}

0800f6c8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b088      	sub	sp, #32
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
 800f6d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f6d6:	2319      	movs	r3, #25
 800f6d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f6da:	2340      	movs	r3, #64	; 0x40
 800f6dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f6e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f6e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f6e8:	f107 0308 	add.w	r3, r7, #8
 800f6ec:	4619      	mov	r1, r3
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f7ff feec 	bl	800f4cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f6f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f6f8:	2119      	movs	r1, #25
 800f6fa:	6878      	ldr	r0, [r7, #4]
 800f6fc:	f000 f992 	bl	800fa24 <SDMMC_GetCmdResp1>
 800f700:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f702:	69fb      	ldr	r3, [r7, #28]
}
 800f704:	4618      	mov	r0, r3
 800f706:	3720      	adds	r7, #32
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}

0800f70c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b088      	sub	sp, #32
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f714:	2300      	movs	r3, #0
 800f716:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f718:	230c      	movs	r3, #12
 800f71a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f71c:	2340      	movs	r3, #64	; 0x40
 800f71e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f720:	2300      	movs	r3, #0
 800f722:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f728:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f72a:	f107 0308 	add.w	r3, r7, #8
 800f72e:	4619      	mov	r1, r3
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f7ff fecb 	bl	800f4cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800f736:	4a05      	ldr	r2, [pc, #20]	; (800f74c <SDMMC_CmdStopTransfer+0x40>)
 800f738:	210c      	movs	r1, #12
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f000 f972 	bl	800fa24 <SDMMC_GetCmdResp1>
 800f740:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f742:	69fb      	ldr	r3, [r7, #28]
}
 800f744:	4618      	mov	r0, r3
 800f746:	3720      	adds	r7, #32
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd80      	pop	{r7, pc}
 800f74c:	05f5e100 	.word	0x05f5e100

0800f750 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b08a      	sub	sp, #40	; 0x28
 800f754:	af00      	add	r7, sp, #0
 800f756:	60f8      	str	r0, [r7, #12]
 800f758:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f760:	2307      	movs	r3, #7
 800f762:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f764:	2340      	movs	r3, #64	; 0x40
 800f766:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f768:	2300      	movs	r3, #0
 800f76a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f76c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f770:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f772:	f107 0310 	add.w	r3, r7, #16
 800f776:	4619      	mov	r1, r3
 800f778:	68f8      	ldr	r0, [r7, #12]
 800f77a:	f7ff fea7 	bl	800f4cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800f77e:	f241 3288 	movw	r2, #5000	; 0x1388
 800f782:	2107      	movs	r1, #7
 800f784:	68f8      	ldr	r0, [r7, #12]
 800f786:	f000 f94d 	bl	800fa24 <SDMMC_GetCmdResp1>
 800f78a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800f78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f78e:	4618      	mov	r0, r3
 800f790:	3728      	adds	r7, #40	; 0x28
 800f792:	46bd      	mov	sp, r7
 800f794:	bd80      	pop	{r7, pc}

0800f796 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800f796:	b580      	push	{r7, lr}
 800f798:	b088      	sub	sp, #32
 800f79a:	af00      	add	r7, sp, #0
 800f79c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800f79e:	2300      	movs	r3, #0
 800f7a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f7ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f7b4:	f107 0308 	add.w	r3, r7, #8
 800f7b8:	4619      	mov	r1, r3
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f7ff fe86 	bl	800f4cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f000 fb67 	bl	800fe94 <SDMMC_GetCmdError>
 800f7c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f7c8:	69fb      	ldr	r3, [r7, #28]
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3720      	adds	r7, #32
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}

0800f7d2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800f7d2:	b580      	push	{r7, lr}
 800f7d4:	b088      	sub	sp, #32
 800f7d6:	af00      	add	r7, sp, #0
 800f7d8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f7da:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800f7de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f7e0:	2308      	movs	r3, #8
 800f7e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f7e4:	2340      	movs	r3, #64	; 0x40
 800f7e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f7ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f7f2:	f107 0308 	add.w	r3, r7, #8
 800f7f6:	4619      	mov	r1, r3
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f7ff fe67 	bl	800f4cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800f7fe:	6878      	ldr	r0, [r7, #4]
 800f800:	f000 fafa 	bl	800fdf8 <SDMMC_GetCmdResp7>
 800f804:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f806:	69fb      	ldr	r3, [r7, #28]
}
 800f808:	4618      	mov	r0, r3
 800f80a:	3720      	adds	r7, #32
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}

0800f810 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b088      	sub	sp, #32
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
 800f818:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f81e:	2337      	movs	r3, #55	; 0x37
 800f820:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f822:	2340      	movs	r3, #64	; 0x40
 800f824:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f826:	2300      	movs	r3, #0
 800f828:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f82a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f82e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f830:	f107 0308 	add.w	r3, r7, #8
 800f834:	4619      	mov	r1, r3
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f7ff fe48 	bl	800f4cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800f83c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f840:	2137      	movs	r1, #55	; 0x37
 800f842:	6878      	ldr	r0, [r7, #4]
 800f844:	f000 f8ee 	bl	800fa24 <SDMMC_GetCmdResp1>
 800f848:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f84a:	69fb      	ldr	r3, [r7, #28]
}
 800f84c:	4618      	mov	r0, r3
 800f84e:	3720      	adds	r7, #32
 800f850:	46bd      	mov	sp, r7
 800f852:	bd80      	pop	{r7, pc}

0800f854 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b088      	sub	sp, #32
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
 800f85c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800f85e:	683a      	ldr	r2, [r7, #0]
 800f860:	4b0d      	ldr	r3, [pc, #52]	; (800f898 <SDMMC_CmdAppOperCommand+0x44>)
 800f862:	4313      	orrs	r3, r2
 800f864:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f866:	2329      	movs	r3, #41	; 0x29
 800f868:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f86a:	2340      	movs	r3, #64	; 0x40
 800f86c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f86e:	2300      	movs	r3, #0
 800f870:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f876:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f878:	f107 0308 	add.w	r3, r7, #8
 800f87c:	4619      	mov	r1, r3
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f7ff fe24 	bl	800f4cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f000 fa03 	bl	800fc90 <SDMMC_GetCmdResp3>
 800f88a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f88c:	69fb      	ldr	r3, [r7, #28]
}
 800f88e:	4618      	mov	r0, r3
 800f890:	3720      	adds	r7, #32
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}
 800f896:	bf00      	nop
 800f898:	80100000 	.word	0x80100000

0800f89c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b088      	sub	sp, #32
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
 800f8a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800f8aa:	2306      	movs	r3, #6
 800f8ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f8ae:	2340      	movs	r3, #64	; 0x40
 800f8b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f8b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f8bc:	f107 0308 	add.w	r3, r7, #8
 800f8c0:	4619      	mov	r1, r3
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	f7ff fe02 	bl	800f4cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800f8c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f8cc:	2106      	movs	r1, #6
 800f8ce:	6878      	ldr	r0, [r7, #4]
 800f8d0:	f000 f8a8 	bl	800fa24 <SDMMC_GetCmdResp1>
 800f8d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f8d6:	69fb      	ldr	r3, [r7, #28]
}
 800f8d8:	4618      	mov	r0, r3
 800f8da:	3720      	adds	r7, #32
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}

0800f8e0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b088      	sub	sp, #32
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800f8ec:	2333      	movs	r3, #51	; 0x33
 800f8ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f8f0:	2340      	movs	r3, #64	; 0x40
 800f8f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f8f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f8fe:	f107 0308 	add.w	r3, r7, #8
 800f902:	4619      	mov	r1, r3
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	f7ff fde1 	bl	800f4cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800f90a:	f241 3288 	movw	r2, #5000	; 0x1388
 800f90e:	2133      	movs	r1, #51	; 0x33
 800f910:	6878      	ldr	r0, [r7, #4]
 800f912:	f000 f887 	bl	800fa24 <SDMMC_GetCmdResp1>
 800f916:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f918:	69fb      	ldr	r3, [r7, #28]
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3720      	adds	r7, #32
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}

0800f922 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800f922:	b580      	push	{r7, lr}
 800f924:	b088      	sub	sp, #32
 800f926:	af00      	add	r7, sp, #0
 800f928:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f92a:	2300      	movs	r3, #0
 800f92c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f92e:	2302      	movs	r3, #2
 800f930:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f932:	23c0      	movs	r3, #192	; 0xc0
 800f934:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f936:	2300      	movs	r3, #0
 800f938:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f93a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f93e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f940:	f107 0308 	add.w	r3, r7, #8
 800f944:	4619      	mov	r1, r3
 800f946:	6878      	ldr	r0, [r7, #4]
 800f948:	f7ff fdc0 	bl	800f4cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f000 f957 	bl	800fc00 <SDMMC_GetCmdResp2>
 800f952:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f954:	69fb      	ldr	r3, [r7, #28]
}
 800f956:	4618      	mov	r0, r3
 800f958:	3720      	adds	r7, #32
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}

0800f95e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f95e:	b580      	push	{r7, lr}
 800f960:	b088      	sub	sp, #32
 800f962:	af00      	add	r7, sp, #0
 800f964:	6078      	str	r0, [r7, #4]
 800f966:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f96c:	2309      	movs	r3, #9
 800f96e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f970:	23c0      	movs	r3, #192	; 0xc0
 800f972:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f974:	2300      	movs	r3, #0
 800f976:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f97c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f97e:	f107 0308 	add.w	r3, r7, #8
 800f982:	4619      	mov	r1, r3
 800f984:	6878      	ldr	r0, [r7, #4]
 800f986:	f7ff fda1 	bl	800f4cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f000 f938 	bl	800fc00 <SDMMC_GetCmdResp2>
 800f990:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f992:	69fb      	ldr	r3, [r7, #28]
}
 800f994:	4618      	mov	r0, r3
 800f996:	3720      	adds	r7, #32
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}

0800f99c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b088      	sub	sp, #32
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
 800f9a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f9aa:	2303      	movs	r3, #3
 800f9ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f9ae:	2340      	movs	r3, #64	; 0x40
 800f9b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f9b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f9bc:	f107 0308 	add.w	r3, r7, #8
 800f9c0:	4619      	mov	r1, r3
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f7ff fd82 	bl	800f4cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f9c8:	683a      	ldr	r2, [r7, #0]
 800f9ca:	2103      	movs	r1, #3
 800f9cc:	6878      	ldr	r0, [r7, #4]
 800f9ce:	f000 f99d 	bl	800fd0c <SDMMC_GetCmdResp6>
 800f9d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f9d4:	69fb      	ldr	r3, [r7, #28]
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	3720      	adds	r7, #32
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}

0800f9de <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f9de:	b580      	push	{r7, lr}
 800f9e0:	b088      	sub	sp, #32
 800f9e2:	af00      	add	r7, sp, #0
 800f9e4:	6078      	str	r0, [r7, #4]
 800f9e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f9ec:	230d      	movs	r3, #13
 800f9ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f9f0:	2340      	movs	r3, #64	; 0x40
 800f9f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f9f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f9fe:	f107 0308 	add.w	r3, r7, #8
 800fa02:	4619      	mov	r1, r3
 800fa04:	6878      	ldr	r0, [r7, #4]
 800fa06:	f7ff fd61 	bl	800f4cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800fa0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa0e:	210d      	movs	r1, #13
 800fa10:	6878      	ldr	r0, [r7, #4]
 800fa12:	f000 f807 	bl	800fa24 <SDMMC_GetCmdResp1>
 800fa16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa18:	69fb      	ldr	r3, [r7, #28]
}
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	3720      	adds	r7, #32
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}
	...

0800fa24 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b088      	sub	sp, #32
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	60f8      	str	r0, [r7, #12]
 800fa2c:	460b      	mov	r3, r1
 800fa2e:	607a      	str	r2, [r7, #4]
 800fa30:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800fa32:	4b70      	ldr	r3, [pc, #448]	; (800fbf4 <SDMMC_GetCmdResp1+0x1d0>)
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	4a70      	ldr	r2, [pc, #448]	; (800fbf8 <SDMMC_GetCmdResp1+0x1d4>)
 800fa38:	fba2 2303 	umull	r2, r3, r2, r3
 800fa3c:	0a5a      	lsrs	r2, r3, #9
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	fb02 f303 	mul.w	r3, r2, r3
 800fa44:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800fa46:	69fb      	ldr	r3, [r7, #28]
 800fa48:	1e5a      	subs	r2, r3, #1
 800fa4a:	61fa      	str	r2, [r7, #28]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d102      	bne.n	800fa56 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fa50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fa54:	e0c9      	b.n	800fbea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa5a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fa5c:	69bb      	ldr	r3, [r7, #24]
 800fa5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d0ef      	beq.n	800fa46 <SDMMC_GetCmdResp1+0x22>
 800fa66:	69bb      	ldr	r3, [r7, #24]
 800fa68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d1ea      	bne.n	800fa46 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa74:	f003 0304 	and.w	r3, r3, #4
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d004      	beq.n	800fa86 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	2204      	movs	r2, #4
 800fa80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fa82:	2304      	movs	r3, #4
 800fa84:	e0b1      	b.n	800fbea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa8a:	f003 0301 	and.w	r3, r3, #1
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d004      	beq.n	800fa9c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	2201      	movs	r2, #1
 800fa96:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fa98:	2301      	movs	r3, #1
 800fa9a:	e0a6      	b.n	800fbea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	22c5      	movs	r2, #197	; 0xc5
 800faa0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800faa2:	68f8      	ldr	r0, [r7, #12]
 800faa4:	f7ff fd3c 	bl	800f520 <SDMMC_GetCommandResponse>
 800faa8:	4603      	mov	r3, r0
 800faaa:	461a      	mov	r2, r3
 800faac:	7afb      	ldrb	r3, [r7, #11]
 800faae:	4293      	cmp	r3, r2
 800fab0:	d001      	beq.n	800fab6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fab2:	2301      	movs	r3, #1
 800fab4:	e099      	b.n	800fbea <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800fab6:	2100      	movs	r1, #0
 800fab8:	68f8      	ldr	r0, [r7, #12]
 800faba:	f7ff fd3e 	bl	800f53a <SDMMC_GetResponse>
 800fabe:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800fac0:	697a      	ldr	r2, [r7, #20]
 800fac2:	4b4e      	ldr	r3, [pc, #312]	; (800fbfc <SDMMC_GetCmdResp1+0x1d8>)
 800fac4:	4013      	ands	r3, r2
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d101      	bne.n	800face <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800faca:	2300      	movs	r3, #0
 800facc:	e08d      	b.n	800fbea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	da02      	bge.n	800fada <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800fad4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fad8:	e087      	b.n	800fbea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800fada:	697b      	ldr	r3, [r7, #20]
 800fadc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d001      	beq.n	800fae8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800fae4:	2340      	movs	r3, #64	; 0x40
 800fae6:	e080      	b.n	800fbea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d001      	beq.n	800faf6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800faf2:	2380      	movs	r3, #128	; 0x80
 800faf4:	e079      	b.n	800fbea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d002      	beq.n	800fb06 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800fb00:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fb04:	e071      	b.n	800fbea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800fb06:	697b      	ldr	r3, [r7, #20]
 800fb08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d002      	beq.n	800fb16 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800fb10:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fb14:	e069      	b.n	800fbea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800fb16:	697b      	ldr	r3, [r7, #20]
 800fb18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d002      	beq.n	800fb26 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800fb20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb24:	e061      	b.n	800fbea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800fb26:	697b      	ldr	r3, [r7, #20]
 800fb28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d002      	beq.n	800fb36 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800fb30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fb34:	e059      	b.n	800fbea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800fb36:	697b      	ldr	r3, [r7, #20]
 800fb38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d002      	beq.n	800fb46 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fb40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fb44:	e051      	b.n	800fbea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800fb46:	697b      	ldr	r3, [r7, #20]
 800fb48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d002      	beq.n	800fb56 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fb50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fb54:	e049      	b.n	800fbea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800fb56:	697b      	ldr	r3, [r7, #20]
 800fb58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d002      	beq.n	800fb66 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800fb60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fb64:	e041      	b.n	800fbea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d002      	beq.n	800fb76 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800fb70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fb74:	e039      	b.n	800fbea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d002      	beq.n	800fb86 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800fb80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800fb84:	e031      	b.n	800fbea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800fb86:	697b      	ldr	r3, [r7, #20]
 800fb88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d002      	beq.n	800fb96 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800fb90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fb94:	e029      	b.n	800fbea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800fb96:	697b      	ldr	r3, [r7, #20]
 800fb98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d002      	beq.n	800fba6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800fba0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fba4:	e021      	b.n	800fbea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d002      	beq.n	800fbb6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800fbb0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800fbb4:	e019      	b.n	800fbea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d002      	beq.n	800fbc6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800fbc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800fbc4:	e011      	b.n	800fbea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800fbc6:	697b      	ldr	r3, [r7, #20]
 800fbc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d002      	beq.n	800fbd6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800fbd0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800fbd4:	e009      	b.n	800fbea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	f003 0308 	and.w	r3, r3, #8
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d002      	beq.n	800fbe6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800fbe0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fbe4:	e001      	b.n	800fbea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fbe6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	3720      	adds	r7, #32
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd80      	pop	{r7, pc}
 800fbf2:	bf00      	nop
 800fbf4:	200004b0 	.word	0x200004b0
 800fbf8:	10624dd3 	.word	0x10624dd3
 800fbfc:	fdffe008 	.word	0xfdffe008

0800fc00 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800fc00:	b480      	push	{r7}
 800fc02:	b085      	sub	sp, #20
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fc08:	4b1f      	ldr	r3, [pc, #124]	; (800fc88 <SDMMC_GetCmdResp2+0x88>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	4a1f      	ldr	r2, [pc, #124]	; (800fc8c <SDMMC_GetCmdResp2+0x8c>)
 800fc0e:	fba2 2303 	umull	r2, r3, r2, r3
 800fc12:	0a5b      	lsrs	r3, r3, #9
 800fc14:	f241 3288 	movw	r2, #5000	; 0x1388
 800fc18:	fb02 f303 	mul.w	r3, r2, r3
 800fc1c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	1e5a      	subs	r2, r3, #1
 800fc22:	60fa      	str	r2, [r7, #12]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d102      	bne.n	800fc2e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fc28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fc2c:	e026      	b.n	800fc7c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc32:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d0ef      	beq.n	800fc1e <SDMMC_GetCmdResp2+0x1e>
 800fc3e:	68bb      	ldr	r3, [r7, #8]
 800fc40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d1ea      	bne.n	800fc1e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc4c:	f003 0304 	and.w	r3, r3, #4
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d004      	beq.n	800fc5e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	2204      	movs	r2, #4
 800fc58:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fc5a:	2304      	movs	r3, #4
 800fc5c:	e00e      	b.n	800fc7c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc62:	f003 0301 	and.w	r3, r3, #1
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d004      	beq.n	800fc74 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2201      	movs	r2, #1
 800fc6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fc70:	2301      	movs	r3, #1
 800fc72:	e003      	b.n	800fc7c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	22c5      	movs	r2, #197	; 0xc5
 800fc78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800fc7a:	2300      	movs	r3, #0
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3714      	adds	r7, #20
 800fc80:	46bd      	mov	sp, r7
 800fc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc86:	4770      	bx	lr
 800fc88:	200004b0 	.word	0x200004b0
 800fc8c:	10624dd3 	.word	0x10624dd3

0800fc90 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800fc90:	b480      	push	{r7}
 800fc92:	b085      	sub	sp, #20
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fc98:	4b1a      	ldr	r3, [pc, #104]	; (800fd04 <SDMMC_GetCmdResp3+0x74>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	4a1a      	ldr	r2, [pc, #104]	; (800fd08 <SDMMC_GetCmdResp3+0x78>)
 800fc9e:	fba2 2303 	umull	r2, r3, r2, r3
 800fca2:	0a5b      	lsrs	r3, r3, #9
 800fca4:	f241 3288 	movw	r2, #5000	; 0x1388
 800fca8:	fb02 f303 	mul.w	r3, r2, r3
 800fcac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	1e5a      	subs	r2, r3, #1
 800fcb2:	60fa      	str	r2, [r7, #12]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d102      	bne.n	800fcbe <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fcb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fcbc:	e01b      	b.n	800fcf6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcc2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d0ef      	beq.n	800fcae <SDMMC_GetCmdResp3+0x1e>
 800fcce:	68bb      	ldr	r3, [r7, #8]
 800fcd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d1ea      	bne.n	800fcae <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcdc:	f003 0304 	and.w	r3, r3, #4
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d004      	beq.n	800fcee <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2204      	movs	r2, #4
 800fce8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fcea:	2304      	movs	r3, #4
 800fcec:	e003      	b.n	800fcf6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	22c5      	movs	r2, #197	; 0xc5
 800fcf2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800fcf4:	2300      	movs	r3, #0
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	3714      	adds	r7, #20
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd00:	4770      	bx	lr
 800fd02:	bf00      	nop
 800fd04:	200004b0 	.word	0x200004b0
 800fd08:	10624dd3 	.word	0x10624dd3

0800fd0c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b088      	sub	sp, #32
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	60f8      	str	r0, [r7, #12]
 800fd14:	460b      	mov	r3, r1
 800fd16:	607a      	str	r2, [r7, #4]
 800fd18:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fd1a:	4b35      	ldr	r3, [pc, #212]	; (800fdf0 <SDMMC_GetCmdResp6+0xe4>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	4a35      	ldr	r2, [pc, #212]	; (800fdf4 <SDMMC_GetCmdResp6+0xe8>)
 800fd20:	fba2 2303 	umull	r2, r3, r2, r3
 800fd24:	0a5b      	lsrs	r3, r3, #9
 800fd26:	f241 3288 	movw	r2, #5000	; 0x1388
 800fd2a:	fb02 f303 	mul.w	r3, r2, r3
 800fd2e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800fd30:	69fb      	ldr	r3, [r7, #28]
 800fd32:	1e5a      	subs	r2, r3, #1
 800fd34:	61fa      	str	r2, [r7, #28]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d102      	bne.n	800fd40 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fd3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fd3e:	e052      	b.n	800fde6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd44:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fd46:	69bb      	ldr	r3, [r7, #24]
 800fd48:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d0ef      	beq.n	800fd30 <SDMMC_GetCmdResp6+0x24>
 800fd50:	69bb      	ldr	r3, [r7, #24]
 800fd52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d1ea      	bne.n	800fd30 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd5e:	f003 0304 	and.w	r3, r3, #4
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d004      	beq.n	800fd70 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	2204      	movs	r2, #4
 800fd6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fd6c:	2304      	movs	r3, #4
 800fd6e:	e03a      	b.n	800fde6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd74:	f003 0301 	and.w	r3, r3, #1
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d004      	beq.n	800fd86 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	2201      	movs	r2, #1
 800fd80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fd82:	2301      	movs	r3, #1
 800fd84:	e02f      	b.n	800fde6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800fd86:	68f8      	ldr	r0, [r7, #12]
 800fd88:	f7ff fbca 	bl	800f520 <SDMMC_GetCommandResponse>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	461a      	mov	r2, r3
 800fd90:	7afb      	ldrb	r3, [r7, #11]
 800fd92:	4293      	cmp	r3, r2
 800fd94:	d001      	beq.n	800fd9a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fd96:	2301      	movs	r3, #1
 800fd98:	e025      	b.n	800fde6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	22c5      	movs	r2, #197	; 0xc5
 800fd9e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800fda0:	2100      	movs	r1, #0
 800fda2:	68f8      	ldr	r0, [r7, #12]
 800fda4:	f7ff fbc9 	bl	800f53a <SDMMC_GetResponse>
 800fda8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800fdaa:	697b      	ldr	r3, [r7, #20]
 800fdac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d106      	bne.n	800fdc2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800fdb4:	697b      	ldr	r3, [r7, #20]
 800fdb6:	0c1b      	lsrs	r3, r3, #16
 800fdb8:	b29a      	uxth	r2, r3
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	e011      	b.n	800fde6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d002      	beq.n	800fdd2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fdcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fdd0:	e009      	b.n	800fde6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800fdd2:	697b      	ldr	r3, [r7, #20]
 800fdd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d002      	beq.n	800fde2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fde0:	e001      	b.n	800fde6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fde2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800fde6:	4618      	mov	r0, r3
 800fde8:	3720      	adds	r7, #32
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}
 800fdee:	bf00      	nop
 800fdf0:	200004b0 	.word	0x200004b0
 800fdf4:	10624dd3 	.word	0x10624dd3

0800fdf8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800fdf8:	b480      	push	{r7}
 800fdfa:	b085      	sub	sp, #20
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fe00:	4b22      	ldr	r3, [pc, #136]	; (800fe8c <SDMMC_GetCmdResp7+0x94>)
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	4a22      	ldr	r2, [pc, #136]	; (800fe90 <SDMMC_GetCmdResp7+0x98>)
 800fe06:	fba2 2303 	umull	r2, r3, r2, r3
 800fe0a:	0a5b      	lsrs	r3, r3, #9
 800fe0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800fe10:	fb02 f303 	mul.w	r3, r2, r3
 800fe14:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	1e5a      	subs	r2, r3, #1
 800fe1a:	60fa      	str	r2, [r7, #12]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d102      	bne.n	800fe26 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fe20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fe24:	e02c      	b.n	800fe80 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe2a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d0ef      	beq.n	800fe16 <SDMMC_GetCmdResp7+0x1e>
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d1ea      	bne.n	800fe16 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe44:	f003 0304 	and.w	r3, r3, #4
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d004      	beq.n	800fe56 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2204      	movs	r2, #4
 800fe50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fe52:	2304      	movs	r3, #4
 800fe54:	e014      	b.n	800fe80 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe5a:	f003 0301 	and.w	r3, r3, #1
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d004      	beq.n	800fe6c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	2201      	movs	r2, #1
 800fe66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fe68:	2301      	movs	r3, #1
 800fe6a:	e009      	b.n	800fe80 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d002      	beq.n	800fe7e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2240      	movs	r2, #64	; 0x40
 800fe7c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800fe7e:	2300      	movs	r3, #0
  
}
 800fe80:	4618      	mov	r0, r3
 800fe82:	3714      	adds	r7, #20
 800fe84:	46bd      	mov	sp, r7
 800fe86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8a:	4770      	bx	lr
 800fe8c:	200004b0 	.word	0x200004b0
 800fe90:	10624dd3 	.word	0x10624dd3

0800fe94 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800fe94:	b480      	push	{r7}
 800fe96:	b085      	sub	sp, #20
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fe9c:	4b11      	ldr	r3, [pc, #68]	; (800fee4 <SDMMC_GetCmdError+0x50>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	4a11      	ldr	r2, [pc, #68]	; (800fee8 <SDMMC_GetCmdError+0x54>)
 800fea2:	fba2 2303 	umull	r2, r3, r2, r3
 800fea6:	0a5b      	lsrs	r3, r3, #9
 800fea8:	f241 3288 	movw	r2, #5000	; 0x1388
 800feac:	fb02 f303 	mul.w	r3, r2, r3
 800feb0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	1e5a      	subs	r2, r3, #1
 800feb6:	60fa      	str	r2, [r7, #12]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d102      	bne.n	800fec2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800febc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fec0:	e009      	b.n	800fed6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d0f1      	beq.n	800feb2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	22c5      	movs	r2, #197	; 0xc5
 800fed2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800fed4:	2300      	movs	r3, #0
}
 800fed6:	4618      	mov	r0, r3
 800fed8:	3714      	adds	r7, #20
 800feda:	46bd      	mov	sp, r7
 800fedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee0:	4770      	bx	lr
 800fee2:	bf00      	nop
 800fee4:	200004b0 	.word	0x200004b0
 800fee8:	10624dd3 	.word	0x10624dd3

0800feec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800feec:	b580      	push	{r7, lr}
 800feee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800fef0:	4904      	ldr	r1, [pc, #16]	; (800ff04 <MX_FATFS_Init+0x18>)
 800fef2:	4805      	ldr	r0, [pc, #20]	; (800ff08 <MX_FATFS_Init+0x1c>)
 800fef4:	f002 fd04 	bl	8012900 <FATFS_LinkDriver>
 800fef8:	4603      	mov	r3, r0
 800fefa:	461a      	mov	r2, r3
 800fefc:	4b03      	ldr	r3, [pc, #12]	; (800ff0c <MX_FATFS_Init+0x20>)
 800fefe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ff00:	bf00      	nop
 800ff02:	bd80      	pop	{r7, pc}
 800ff04:	20006590 	.word	0x20006590
 800ff08:	0801935c 	.word	0x0801935c
 800ff0c:	2000658c 	.word	0x2000658c

0800ff10 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ff10:	b480      	push	{r7}
 800ff12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ff14:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ff16:	4618      	mov	r0, r3
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1e:	4770      	bx	lr

0800ff20 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b082      	sub	sp, #8
 800ff24:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ff26:	2300      	movs	r3, #0
 800ff28:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ff2a:	f000 f896 	bl	801005a <BSP_SD_IsDetected>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	2b01      	cmp	r3, #1
 800ff32:	d001      	beq.n	800ff38 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ff34:	2302      	movs	r3, #2
 800ff36:	e012      	b.n	800ff5e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 800ff38:	480b      	ldr	r0, [pc, #44]	; (800ff68 <BSP_SD_Init+0x48>)
 800ff3a:	f7fb fa2d 	bl	800b398 <HAL_SD_Init>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ff42:	79fb      	ldrb	r3, [r7, #7]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d109      	bne.n	800ff5c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ff48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ff4c:	4806      	ldr	r0, [pc, #24]	; (800ff68 <BSP_SD_Init+0x48>)
 800ff4e:	f7fb fff3 	bl	800bf38 <HAL_SD_ConfigWideBusOperation>
 800ff52:	4603      	mov	r3, r0
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d001      	beq.n	800ff5c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ff58:	2301      	movs	r3, #1
 800ff5a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ff5c:	79fb      	ldrb	r3, [r7, #7]
}
 800ff5e:	4618      	mov	r0, r3
 800ff60:	3708      	adds	r7, #8
 800ff62:	46bd      	mov	sp, r7
 800ff64:	bd80      	pop	{r7, pc}
 800ff66:	bf00      	nop
 800ff68:	200021bc 	.word	0x200021bc

0800ff6c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b086      	sub	sp, #24
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	60f8      	str	r0, [r7, #12]
 800ff74:	60b9      	str	r1, [r7, #8]
 800ff76:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ff78:	2300      	movs	r3, #0
 800ff7a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	68ba      	ldr	r2, [r7, #8]
 800ff80:	68f9      	ldr	r1, [r7, #12]
 800ff82:	4806      	ldr	r0, [pc, #24]	; (800ff9c <BSP_SD_ReadBlocks_DMA+0x30>)
 800ff84:	f7fb fac0 	bl	800b508 <HAL_SD_ReadBlocks_DMA>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d001      	beq.n	800ff92 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ff8e:	2301      	movs	r3, #1
 800ff90:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ff92:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff94:	4618      	mov	r0, r3
 800ff96:	3718      	adds	r7, #24
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	bd80      	pop	{r7, pc}
 800ff9c:	200021bc 	.word	0x200021bc

0800ffa0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b086      	sub	sp, #24
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	60f8      	str	r0, [r7, #12]
 800ffa8:	60b9      	str	r1, [r7, #8]
 800ffaa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ffac:	2300      	movs	r3, #0
 800ffae:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	68ba      	ldr	r2, [r7, #8]
 800ffb4:	68f9      	ldr	r1, [r7, #12]
 800ffb6:	4806      	ldr	r0, [pc, #24]	; (800ffd0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ffb8:	f7fb fb88 	bl	800b6cc <HAL_SD_WriteBlocks_DMA>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d001      	beq.n	800ffc6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ffc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffc8:	4618      	mov	r0, r3
 800ffca:	3718      	adds	r7, #24
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}
 800ffd0:	200021bc 	.word	0x200021bc

0800ffd4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ffd8:	4805      	ldr	r0, [pc, #20]	; (800fff0 <BSP_SD_GetCardState+0x1c>)
 800ffda:	f7fc f847 	bl	800c06c <HAL_SD_GetCardState>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	2b04      	cmp	r3, #4
 800ffe2:	bf14      	ite	ne
 800ffe4:	2301      	movne	r3, #1
 800ffe6:	2300      	moveq	r3, #0
 800ffe8:	b2db      	uxtb	r3, r3
}
 800ffea:	4618      	mov	r0, r3
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	200021bc 	.word	0x200021bc

0800fff4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b082      	sub	sp, #8
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 800fffc:	6879      	ldr	r1, [r7, #4]
 800fffe:	4803      	ldr	r0, [pc, #12]	; (801000c <BSP_SD_GetCardInfo+0x18>)
 8010000:	f7fb ff6e 	bl	800bee0 <HAL_SD_GetCardInfo>
}
 8010004:	bf00      	nop
 8010006:	3708      	adds	r7, #8
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}
 801000c:	200021bc 	.word	0x200021bc

08010010 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b082      	sub	sp, #8
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8010018:	f000 f818 	bl	801004c <BSP_SD_AbortCallback>
}
 801001c:	bf00      	nop
 801001e:	3708      	adds	r7, #8
 8010020:	46bd      	mov	sp, r7
 8010022:	bd80      	pop	{r7, pc}

08010024 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b082      	sub	sp, #8
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 801002c:	f000 f98c 	bl	8010348 <BSP_SD_WriteCpltCallback>
}
 8010030:	bf00      	nop
 8010032:	3708      	adds	r7, #8
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}

08010038 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b082      	sub	sp, #8
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010040:	f000 f98e 	bl	8010360 <BSP_SD_ReadCpltCallback>
}
 8010044:	bf00      	nop
 8010046:	3708      	adds	r7, #8
 8010048:	46bd      	mov	sp, r7
 801004a:	bd80      	pop	{r7, pc}

0801004c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 801004c:	b480      	push	{r7}
 801004e:	af00      	add	r7, sp, #0

}
 8010050:	bf00      	nop
 8010052:	46bd      	mov	sp, r7
 8010054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010058:	4770      	bx	lr

0801005a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801005a:	b480      	push	{r7}
 801005c:	b083      	sub	sp, #12
 801005e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010060:	2301      	movs	r3, #1
 8010062:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8010064:	79fb      	ldrb	r3, [r7, #7]
 8010066:	b2db      	uxtb	r3, r3
}
 8010068:	4618      	mov	r0, r3
 801006a:	370c      	adds	r7, #12
 801006c:	46bd      	mov	sp, r7
 801006e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010072:	4770      	bx	lr

08010074 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b084      	sub	sp, #16
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801007c:	f7f6 fbd8 	bl	8006830 <HAL_GetTick>
 8010080:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010082:	e006      	b.n	8010092 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010084:	f7ff ffa6 	bl	800ffd4 <BSP_SD_GetCardState>
 8010088:	4603      	mov	r3, r0
 801008a:	2b00      	cmp	r3, #0
 801008c:	d101      	bne.n	8010092 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801008e:	2300      	movs	r3, #0
 8010090:	e009      	b.n	80100a6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010092:	f7f6 fbcd 	bl	8006830 <HAL_GetTick>
 8010096:	4602      	mov	r2, r0
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	1ad3      	subs	r3, r2, r3
 801009c:	687a      	ldr	r2, [r7, #4]
 801009e:	429a      	cmp	r2, r3
 80100a0:	d8f0      	bhi.n	8010084 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80100a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80100a6:	4618      	mov	r0, r3
 80100a8:	3710      	adds	r7, #16
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}
	...

080100b0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b082      	sub	sp, #8
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	4603      	mov	r3, r0
 80100b8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80100ba:	4b0b      	ldr	r3, [pc, #44]	; (80100e8 <SD_CheckStatus+0x38>)
 80100bc:	2201      	movs	r2, #1
 80100be:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80100c0:	f7ff ff88 	bl	800ffd4 <BSP_SD_GetCardState>
 80100c4:	4603      	mov	r3, r0
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d107      	bne.n	80100da <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80100ca:	4b07      	ldr	r3, [pc, #28]	; (80100e8 <SD_CheckStatus+0x38>)
 80100cc:	781b      	ldrb	r3, [r3, #0]
 80100ce:	b2db      	uxtb	r3, r3
 80100d0:	f023 0301 	bic.w	r3, r3, #1
 80100d4:	b2da      	uxtb	r2, r3
 80100d6:	4b04      	ldr	r3, [pc, #16]	; (80100e8 <SD_CheckStatus+0x38>)
 80100d8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80100da:	4b03      	ldr	r3, [pc, #12]	; (80100e8 <SD_CheckStatus+0x38>)
 80100dc:	781b      	ldrb	r3, [r3, #0]
 80100de:	b2db      	uxtb	r3, r3
}
 80100e0:	4618      	mov	r0, r3
 80100e2:	3708      	adds	r7, #8
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd80      	pop	{r7, pc}
 80100e8:	200004b9 	.word	0x200004b9

080100ec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b082      	sub	sp, #8
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	4603      	mov	r3, r0
 80100f4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80100f6:	f7ff ff13 	bl	800ff20 <BSP_SD_Init>
 80100fa:	4603      	mov	r3, r0
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d107      	bne.n	8010110 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010100:	79fb      	ldrb	r3, [r7, #7]
 8010102:	4618      	mov	r0, r3
 8010104:	f7ff ffd4 	bl	80100b0 <SD_CheckStatus>
 8010108:	4603      	mov	r3, r0
 801010a:	461a      	mov	r2, r3
 801010c:	4b04      	ldr	r3, [pc, #16]	; (8010120 <SD_initialize+0x34>)
 801010e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010110:	4b03      	ldr	r3, [pc, #12]	; (8010120 <SD_initialize+0x34>)
 8010112:	781b      	ldrb	r3, [r3, #0]
 8010114:	b2db      	uxtb	r3, r3
}
 8010116:	4618      	mov	r0, r3
 8010118:	3708      	adds	r7, #8
 801011a:	46bd      	mov	sp, r7
 801011c:	bd80      	pop	{r7, pc}
 801011e:	bf00      	nop
 8010120:	200004b9 	.word	0x200004b9

08010124 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b082      	sub	sp, #8
 8010128:	af00      	add	r7, sp, #0
 801012a:	4603      	mov	r3, r0
 801012c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801012e:	79fb      	ldrb	r3, [r7, #7]
 8010130:	4618      	mov	r0, r3
 8010132:	f7ff ffbd 	bl	80100b0 <SD_CheckStatus>
 8010136:	4603      	mov	r3, r0
}
 8010138:	4618      	mov	r0, r3
 801013a:	3708      	adds	r7, #8
 801013c:	46bd      	mov	sp, r7
 801013e:	bd80      	pop	{r7, pc}

08010140 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b086      	sub	sp, #24
 8010144:	af00      	add	r7, sp, #0
 8010146:	60b9      	str	r1, [r7, #8]
 8010148:	607a      	str	r2, [r7, #4]
 801014a:	603b      	str	r3, [r7, #0]
 801014c:	4603      	mov	r3, r0
 801014e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010150:	2301      	movs	r3, #1
 8010152:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010154:	f247 5030 	movw	r0, #30000	; 0x7530
 8010158:	f7ff ff8c 	bl	8010074 <SD_CheckStatusWithTimeout>
 801015c:	4603      	mov	r3, r0
 801015e:	2b00      	cmp	r3, #0
 8010160:	da01      	bge.n	8010166 <SD_read+0x26>
  {
    return res;
 8010162:	7dfb      	ldrb	r3, [r7, #23]
 8010164:	e03b      	b.n	80101de <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010166:	683a      	ldr	r2, [r7, #0]
 8010168:	6879      	ldr	r1, [r7, #4]
 801016a:	68b8      	ldr	r0, [r7, #8]
 801016c:	f7ff fefe 	bl	800ff6c <BSP_SD_ReadBlocks_DMA>
 8010170:	4603      	mov	r3, r0
 8010172:	2b00      	cmp	r3, #0
 8010174:	d132      	bne.n	80101dc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010176:	4b1c      	ldr	r3, [pc, #112]	; (80101e8 <SD_read+0xa8>)
 8010178:	2200      	movs	r2, #0
 801017a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 801017c:	f7f6 fb58 	bl	8006830 <HAL_GetTick>
 8010180:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010182:	bf00      	nop
 8010184:	4b18      	ldr	r3, [pc, #96]	; (80101e8 <SD_read+0xa8>)
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d108      	bne.n	801019e <SD_read+0x5e>
 801018c:	f7f6 fb50 	bl	8006830 <HAL_GetTick>
 8010190:	4602      	mov	r2, r0
 8010192:	693b      	ldr	r3, [r7, #16]
 8010194:	1ad3      	subs	r3, r2, r3
 8010196:	f247 522f 	movw	r2, #29999	; 0x752f
 801019a:	4293      	cmp	r3, r2
 801019c:	d9f2      	bls.n	8010184 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801019e:	4b12      	ldr	r3, [pc, #72]	; (80101e8 <SD_read+0xa8>)
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d102      	bne.n	80101ac <SD_read+0x6c>
      {
        res = RES_ERROR;
 80101a6:	2301      	movs	r3, #1
 80101a8:	75fb      	strb	r3, [r7, #23]
 80101aa:	e017      	b.n	80101dc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80101ac:	4b0e      	ldr	r3, [pc, #56]	; (80101e8 <SD_read+0xa8>)
 80101ae:	2200      	movs	r2, #0
 80101b0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80101b2:	f7f6 fb3d 	bl	8006830 <HAL_GetTick>
 80101b6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80101b8:	e007      	b.n	80101ca <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80101ba:	f7ff ff0b 	bl	800ffd4 <BSP_SD_GetCardState>
 80101be:	4603      	mov	r3, r0
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d102      	bne.n	80101ca <SD_read+0x8a>
          {
            res = RES_OK;
 80101c4:	2300      	movs	r3, #0
 80101c6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80101c8:	e008      	b.n	80101dc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80101ca:	f7f6 fb31 	bl	8006830 <HAL_GetTick>
 80101ce:	4602      	mov	r2, r0
 80101d0:	693b      	ldr	r3, [r7, #16]
 80101d2:	1ad3      	subs	r3, r2, r3
 80101d4:	f247 522f 	movw	r2, #29999	; 0x752f
 80101d8:	4293      	cmp	r3, r2
 80101da:	d9ee      	bls.n	80101ba <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80101dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80101de:	4618      	mov	r0, r3
 80101e0:	3718      	adds	r7, #24
 80101e2:	46bd      	mov	sp, r7
 80101e4:	bd80      	pop	{r7, pc}
 80101e6:	bf00      	nop
 80101e8:	20006598 	.word	0x20006598

080101ec <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b086      	sub	sp, #24
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	60b9      	str	r1, [r7, #8]
 80101f4:	607a      	str	r2, [r7, #4]
 80101f6:	603b      	str	r3, [r7, #0]
 80101f8:	4603      	mov	r3, r0
 80101fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80101fc:	2301      	movs	r3, #1
 80101fe:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010200:	4b24      	ldr	r3, [pc, #144]	; (8010294 <SD_write+0xa8>)
 8010202:	2200      	movs	r2, #0
 8010204:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010206:	f247 5030 	movw	r0, #30000	; 0x7530
 801020a:	f7ff ff33 	bl	8010074 <SD_CheckStatusWithTimeout>
 801020e:	4603      	mov	r3, r0
 8010210:	2b00      	cmp	r3, #0
 8010212:	da01      	bge.n	8010218 <SD_write+0x2c>
  {
    return res;
 8010214:	7dfb      	ldrb	r3, [r7, #23]
 8010216:	e038      	b.n	801028a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010218:	683a      	ldr	r2, [r7, #0]
 801021a:	6879      	ldr	r1, [r7, #4]
 801021c:	68b8      	ldr	r0, [r7, #8]
 801021e:	f7ff febf 	bl	800ffa0 <BSP_SD_WriteBlocks_DMA>
 8010222:	4603      	mov	r3, r0
 8010224:	2b00      	cmp	r3, #0
 8010226:	d12f      	bne.n	8010288 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010228:	f7f6 fb02 	bl	8006830 <HAL_GetTick>
 801022c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801022e:	bf00      	nop
 8010230:	4b18      	ldr	r3, [pc, #96]	; (8010294 <SD_write+0xa8>)
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d108      	bne.n	801024a <SD_write+0x5e>
 8010238:	f7f6 fafa 	bl	8006830 <HAL_GetTick>
 801023c:	4602      	mov	r2, r0
 801023e:	693b      	ldr	r3, [r7, #16]
 8010240:	1ad3      	subs	r3, r2, r3
 8010242:	f247 522f 	movw	r2, #29999	; 0x752f
 8010246:	4293      	cmp	r3, r2
 8010248:	d9f2      	bls.n	8010230 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801024a:	4b12      	ldr	r3, [pc, #72]	; (8010294 <SD_write+0xa8>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d102      	bne.n	8010258 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010252:	2301      	movs	r3, #1
 8010254:	75fb      	strb	r3, [r7, #23]
 8010256:	e017      	b.n	8010288 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010258:	4b0e      	ldr	r3, [pc, #56]	; (8010294 <SD_write+0xa8>)
 801025a:	2200      	movs	r2, #0
 801025c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801025e:	f7f6 fae7 	bl	8006830 <HAL_GetTick>
 8010262:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010264:	e007      	b.n	8010276 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010266:	f7ff feb5 	bl	800ffd4 <BSP_SD_GetCardState>
 801026a:	4603      	mov	r3, r0
 801026c:	2b00      	cmp	r3, #0
 801026e:	d102      	bne.n	8010276 <SD_write+0x8a>
          {
            res = RES_OK;
 8010270:	2300      	movs	r3, #0
 8010272:	75fb      	strb	r3, [r7, #23]
            break;
 8010274:	e008      	b.n	8010288 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010276:	f7f6 fadb 	bl	8006830 <HAL_GetTick>
 801027a:	4602      	mov	r2, r0
 801027c:	693b      	ldr	r3, [r7, #16]
 801027e:	1ad3      	subs	r3, r2, r3
 8010280:	f247 522f 	movw	r2, #29999	; 0x752f
 8010284:	4293      	cmp	r3, r2
 8010286:	d9ee      	bls.n	8010266 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010288:	7dfb      	ldrb	r3, [r7, #23]
}
 801028a:	4618      	mov	r0, r3
 801028c:	3718      	adds	r7, #24
 801028e:	46bd      	mov	sp, r7
 8010290:	bd80      	pop	{r7, pc}
 8010292:	bf00      	nop
 8010294:	20006594 	.word	0x20006594

08010298 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010298:	b580      	push	{r7, lr}
 801029a:	b08c      	sub	sp, #48	; 0x30
 801029c:	af00      	add	r7, sp, #0
 801029e:	4603      	mov	r3, r0
 80102a0:	603a      	str	r2, [r7, #0]
 80102a2:	71fb      	strb	r3, [r7, #7]
 80102a4:	460b      	mov	r3, r1
 80102a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80102a8:	2301      	movs	r3, #1
 80102aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80102ae:	4b25      	ldr	r3, [pc, #148]	; (8010344 <SD_ioctl+0xac>)
 80102b0:	781b      	ldrb	r3, [r3, #0]
 80102b2:	b2db      	uxtb	r3, r3
 80102b4:	f003 0301 	and.w	r3, r3, #1
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d001      	beq.n	80102c0 <SD_ioctl+0x28>
 80102bc:	2303      	movs	r3, #3
 80102be:	e03c      	b.n	801033a <SD_ioctl+0xa2>

  switch (cmd)
 80102c0:	79bb      	ldrb	r3, [r7, #6]
 80102c2:	2b03      	cmp	r3, #3
 80102c4:	d834      	bhi.n	8010330 <SD_ioctl+0x98>
 80102c6:	a201      	add	r2, pc, #4	; (adr r2, 80102cc <SD_ioctl+0x34>)
 80102c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102cc:	080102dd 	.word	0x080102dd
 80102d0:	080102e5 	.word	0x080102e5
 80102d4:	080102fd 	.word	0x080102fd
 80102d8:	08010317 	.word	0x08010317
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80102dc:	2300      	movs	r3, #0
 80102de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80102e2:	e028      	b.n	8010336 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80102e4:	f107 030c 	add.w	r3, r7, #12
 80102e8:	4618      	mov	r0, r3
 80102ea:	f7ff fe83 	bl	800fff4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80102ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80102f4:	2300      	movs	r3, #0
 80102f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80102fa:	e01c      	b.n	8010336 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80102fc:	f107 030c 	add.w	r3, r7, #12
 8010300:	4618      	mov	r0, r3
 8010302:	f7ff fe77 	bl	800fff4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010308:	b29a      	uxth	r2, r3
 801030a:	683b      	ldr	r3, [r7, #0]
 801030c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801030e:	2300      	movs	r3, #0
 8010310:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010314:	e00f      	b.n	8010336 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010316:	f107 030c 	add.w	r3, r7, #12
 801031a:	4618      	mov	r0, r3
 801031c:	f7ff fe6a 	bl	800fff4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010322:	0a5a      	lsrs	r2, r3, #9
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010328:	2300      	movs	r3, #0
 801032a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801032e:	e002      	b.n	8010336 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010330:	2304      	movs	r3, #4
 8010332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8010336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801033a:	4618      	mov	r0, r3
 801033c:	3730      	adds	r7, #48	; 0x30
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}
 8010342:	bf00      	nop
 8010344:	200004b9 	.word	0x200004b9

08010348 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010348:	b480      	push	{r7}
 801034a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 801034c:	4b03      	ldr	r3, [pc, #12]	; (801035c <BSP_SD_WriteCpltCallback+0x14>)
 801034e:	2201      	movs	r2, #1
 8010350:	601a      	str	r2, [r3, #0]
}
 8010352:	bf00      	nop
 8010354:	46bd      	mov	sp, r7
 8010356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035a:	4770      	bx	lr
 801035c:	20006594 	.word	0x20006594

08010360 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010360:	b480      	push	{r7}
 8010362:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010364:	4b03      	ldr	r3, [pc, #12]	; (8010374 <BSP_SD_ReadCpltCallback+0x14>)
 8010366:	2201      	movs	r2, #1
 8010368:	601a      	str	r2, [r3, #0]
}
 801036a:	bf00      	nop
 801036c:	46bd      	mov	sp, r7
 801036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010372:	4770      	bx	lr
 8010374:	20006598 	.word	0x20006598

08010378 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b084      	sub	sp, #16
 801037c:	af00      	add	r7, sp, #0
 801037e:	4603      	mov	r3, r0
 8010380:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010382:	79fb      	ldrb	r3, [r7, #7]
 8010384:	4a08      	ldr	r2, [pc, #32]	; (80103a8 <disk_status+0x30>)
 8010386:	009b      	lsls	r3, r3, #2
 8010388:	4413      	add	r3, r2
 801038a:	685b      	ldr	r3, [r3, #4]
 801038c:	685b      	ldr	r3, [r3, #4]
 801038e:	79fa      	ldrb	r2, [r7, #7]
 8010390:	4905      	ldr	r1, [pc, #20]	; (80103a8 <disk_status+0x30>)
 8010392:	440a      	add	r2, r1
 8010394:	7a12      	ldrb	r2, [r2, #8]
 8010396:	4610      	mov	r0, r2
 8010398:	4798      	blx	r3
 801039a:	4603      	mov	r3, r0
 801039c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801039e:	7bfb      	ldrb	r3, [r7, #15]
}
 80103a0:	4618      	mov	r0, r3
 80103a2:	3710      	adds	r7, #16
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bd80      	pop	{r7, pc}
 80103a8:	200065f4 	.word	0x200065f4

080103ac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b084      	sub	sp, #16
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	4603      	mov	r3, r0
 80103b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80103b6:	2300      	movs	r3, #0
 80103b8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80103ba:	79fb      	ldrb	r3, [r7, #7]
 80103bc:	4a0d      	ldr	r2, [pc, #52]	; (80103f4 <disk_initialize+0x48>)
 80103be:	5cd3      	ldrb	r3, [r2, r3]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d111      	bne.n	80103e8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80103c4:	79fb      	ldrb	r3, [r7, #7]
 80103c6:	4a0b      	ldr	r2, [pc, #44]	; (80103f4 <disk_initialize+0x48>)
 80103c8:	2101      	movs	r1, #1
 80103ca:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80103cc:	79fb      	ldrb	r3, [r7, #7]
 80103ce:	4a09      	ldr	r2, [pc, #36]	; (80103f4 <disk_initialize+0x48>)
 80103d0:	009b      	lsls	r3, r3, #2
 80103d2:	4413      	add	r3, r2
 80103d4:	685b      	ldr	r3, [r3, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	79fa      	ldrb	r2, [r7, #7]
 80103da:	4906      	ldr	r1, [pc, #24]	; (80103f4 <disk_initialize+0x48>)
 80103dc:	440a      	add	r2, r1
 80103de:	7a12      	ldrb	r2, [r2, #8]
 80103e0:	4610      	mov	r0, r2
 80103e2:	4798      	blx	r3
 80103e4:	4603      	mov	r3, r0
 80103e6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80103e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	3710      	adds	r7, #16
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}
 80103f2:	bf00      	nop
 80103f4:	200065f4 	.word	0x200065f4

080103f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80103f8:	b590      	push	{r4, r7, lr}
 80103fa:	b087      	sub	sp, #28
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	60b9      	str	r1, [r7, #8]
 8010400:	607a      	str	r2, [r7, #4]
 8010402:	603b      	str	r3, [r7, #0]
 8010404:	4603      	mov	r3, r0
 8010406:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010408:	7bfb      	ldrb	r3, [r7, #15]
 801040a:	4a0a      	ldr	r2, [pc, #40]	; (8010434 <disk_read+0x3c>)
 801040c:	009b      	lsls	r3, r3, #2
 801040e:	4413      	add	r3, r2
 8010410:	685b      	ldr	r3, [r3, #4]
 8010412:	689c      	ldr	r4, [r3, #8]
 8010414:	7bfb      	ldrb	r3, [r7, #15]
 8010416:	4a07      	ldr	r2, [pc, #28]	; (8010434 <disk_read+0x3c>)
 8010418:	4413      	add	r3, r2
 801041a:	7a18      	ldrb	r0, [r3, #8]
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	687a      	ldr	r2, [r7, #4]
 8010420:	68b9      	ldr	r1, [r7, #8]
 8010422:	47a0      	blx	r4
 8010424:	4603      	mov	r3, r0
 8010426:	75fb      	strb	r3, [r7, #23]
  return res;
 8010428:	7dfb      	ldrb	r3, [r7, #23]
}
 801042a:	4618      	mov	r0, r3
 801042c:	371c      	adds	r7, #28
 801042e:	46bd      	mov	sp, r7
 8010430:	bd90      	pop	{r4, r7, pc}
 8010432:	bf00      	nop
 8010434:	200065f4 	.word	0x200065f4

08010438 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010438:	b590      	push	{r4, r7, lr}
 801043a:	b087      	sub	sp, #28
 801043c:	af00      	add	r7, sp, #0
 801043e:	60b9      	str	r1, [r7, #8]
 8010440:	607a      	str	r2, [r7, #4]
 8010442:	603b      	str	r3, [r7, #0]
 8010444:	4603      	mov	r3, r0
 8010446:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010448:	7bfb      	ldrb	r3, [r7, #15]
 801044a:	4a0a      	ldr	r2, [pc, #40]	; (8010474 <disk_write+0x3c>)
 801044c:	009b      	lsls	r3, r3, #2
 801044e:	4413      	add	r3, r2
 8010450:	685b      	ldr	r3, [r3, #4]
 8010452:	68dc      	ldr	r4, [r3, #12]
 8010454:	7bfb      	ldrb	r3, [r7, #15]
 8010456:	4a07      	ldr	r2, [pc, #28]	; (8010474 <disk_write+0x3c>)
 8010458:	4413      	add	r3, r2
 801045a:	7a18      	ldrb	r0, [r3, #8]
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	687a      	ldr	r2, [r7, #4]
 8010460:	68b9      	ldr	r1, [r7, #8]
 8010462:	47a0      	blx	r4
 8010464:	4603      	mov	r3, r0
 8010466:	75fb      	strb	r3, [r7, #23]
  return res;
 8010468:	7dfb      	ldrb	r3, [r7, #23]
}
 801046a:	4618      	mov	r0, r3
 801046c:	371c      	adds	r7, #28
 801046e:	46bd      	mov	sp, r7
 8010470:	bd90      	pop	{r4, r7, pc}
 8010472:	bf00      	nop
 8010474:	200065f4 	.word	0x200065f4

08010478 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b084      	sub	sp, #16
 801047c:	af00      	add	r7, sp, #0
 801047e:	4603      	mov	r3, r0
 8010480:	603a      	str	r2, [r7, #0]
 8010482:	71fb      	strb	r3, [r7, #7]
 8010484:	460b      	mov	r3, r1
 8010486:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010488:	79fb      	ldrb	r3, [r7, #7]
 801048a:	4a09      	ldr	r2, [pc, #36]	; (80104b0 <disk_ioctl+0x38>)
 801048c:	009b      	lsls	r3, r3, #2
 801048e:	4413      	add	r3, r2
 8010490:	685b      	ldr	r3, [r3, #4]
 8010492:	691b      	ldr	r3, [r3, #16]
 8010494:	79fa      	ldrb	r2, [r7, #7]
 8010496:	4906      	ldr	r1, [pc, #24]	; (80104b0 <disk_ioctl+0x38>)
 8010498:	440a      	add	r2, r1
 801049a:	7a10      	ldrb	r0, [r2, #8]
 801049c:	79b9      	ldrb	r1, [r7, #6]
 801049e:	683a      	ldr	r2, [r7, #0]
 80104a0:	4798      	blx	r3
 80104a2:	4603      	mov	r3, r0
 80104a4:	73fb      	strb	r3, [r7, #15]
  return res;
 80104a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80104a8:	4618      	mov	r0, r3
 80104aa:	3710      	adds	r7, #16
 80104ac:	46bd      	mov	sp, r7
 80104ae:	bd80      	pop	{r7, pc}
 80104b0:	200065f4 	.word	0x200065f4

080104b4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80104b4:	b480      	push	{r7}
 80104b6:	b085      	sub	sp, #20
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	3301      	adds	r3, #1
 80104c0:	781b      	ldrb	r3, [r3, #0]
 80104c2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80104c4:	89fb      	ldrh	r3, [r7, #14]
 80104c6:	021b      	lsls	r3, r3, #8
 80104c8:	b21a      	sxth	r2, r3
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	781b      	ldrb	r3, [r3, #0]
 80104ce:	b21b      	sxth	r3, r3
 80104d0:	4313      	orrs	r3, r2
 80104d2:	b21b      	sxth	r3, r3
 80104d4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80104d6:	89fb      	ldrh	r3, [r7, #14]
}
 80104d8:	4618      	mov	r0, r3
 80104da:	3714      	adds	r7, #20
 80104dc:	46bd      	mov	sp, r7
 80104de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e2:	4770      	bx	lr

080104e4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80104e4:	b480      	push	{r7}
 80104e6:	b085      	sub	sp, #20
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	3303      	adds	r3, #3
 80104f0:	781b      	ldrb	r3, [r3, #0]
 80104f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	021b      	lsls	r3, r3, #8
 80104f8:	687a      	ldr	r2, [r7, #4]
 80104fa:	3202      	adds	r2, #2
 80104fc:	7812      	ldrb	r2, [r2, #0]
 80104fe:	4313      	orrs	r3, r2
 8010500:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	021b      	lsls	r3, r3, #8
 8010506:	687a      	ldr	r2, [r7, #4]
 8010508:	3201      	adds	r2, #1
 801050a:	7812      	ldrb	r2, [r2, #0]
 801050c:	4313      	orrs	r3, r2
 801050e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	021b      	lsls	r3, r3, #8
 8010514:	687a      	ldr	r2, [r7, #4]
 8010516:	7812      	ldrb	r2, [r2, #0]
 8010518:	4313      	orrs	r3, r2
 801051a:	60fb      	str	r3, [r7, #12]
	return rv;
 801051c:	68fb      	ldr	r3, [r7, #12]
}
 801051e:	4618      	mov	r0, r3
 8010520:	3714      	adds	r7, #20
 8010522:	46bd      	mov	sp, r7
 8010524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010528:	4770      	bx	lr

0801052a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801052a:	b480      	push	{r7}
 801052c:	b083      	sub	sp, #12
 801052e:	af00      	add	r7, sp, #0
 8010530:	6078      	str	r0, [r7, #4]
 8010532:	460b      	mov	r3, r1
 8010534:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	1c5a      	adds	r2, r3, #1
 801053a:	607a      	str	r2, [r7, #4]
 801053c:	887a      	ldrh	r2, [r7, #2]
 801053e:	b2d2      	uxtb	r2, r2
 8010540:	701a      	strb	r2, [r3, #0]
 8010542:	887b      	ldrh	r3, [r7, #2]
 8010544:	0a1b      	lsrs	r3, r3, #8
 8010546:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	1c5a      	adds	r2, r3, #1
 801054c:	607a      	str	r2, [r7, #4]
 801054e:	887a      	ldrh	r2, [r7, #2]
 8010550:	b2d2      	uxtb	r2, r2
 8010552:	701a      	strb	r2, [r3, #0]
}
 8010554:	bf00      	nop
 8010556:	370c      	adds	r7, #12
 8010558:	46bd      	mov	sp, r7
 801055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055e:	4770      	bx	lr

08010560 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010560:	b480      	push	{r7}
 8010562:	b083      	sub	sp, #12
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
 8010568:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	1c5a      	adds	r2, r3, #1
 801056e:	607a      	str	r2, [r7, #4]
 8010570:	683a      	ldr	r2, [r7, #0]
 8010572:	b2d2      	uxtb	r2, r2
 8010574:	701a      	strb	r2, [r3, #0]
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	0a1b      	lsrs	r3, r3, #8
 801057a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	1c5a      	adds	r2, r3, #1
 8010580:	607a      	str	r2, [r7, #4]
 8010582:	683a      	ldr	r2, [r7, #0]
 8010584:	b2d2      	uxtb	r2, r2
 8010586:	701a      	strb	r2, [r3, #0]
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	0a1b      	lsrs	r3, r3, #8
 801058c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	1c5a      	adds	r2, r3, #1
 8010592:	607a      	str	r2, [r7, #4]
 8010594:	683a      	ldr	r2, [r7, #0]
 8010596:	b2d2      	uxtb	r2, r2
 8010598:	701a      	strb	r2, [r3, #0]
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	0a1b      	lsrs	r3, r3, #8
 801059e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	1c5a      	adds	r2, r3, #1
 80105a4:	607a      	str	r2, [r7, #4]
 80105a6:	683a      	ldr	r2, [r7, #0]
 80105a8:	b2d2      	uxtb	r2, r2
 80105aa:	701a      	strb	r2, [r3, #0]
}
 80105ac:	bf00      	nop
 80105ae:	370c      	adds	r7, #12
 80105b0:	46bd      	mov	sp, r7
 80105b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b6:	4770      	bx	lr

080105b8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80105b8:	b480      	push	{r7}
 80105ba:	b087      	sub	sp, #28
 80105bc:	af00      	add	r7, sp, #0
 80105be:	60f8      	str	r0, [r7, #12]
 80105c0:	60b9      	str	r1, [r7, #8]
 80105c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80105c8:	68bb      	ldr	r3, [r7, #8]
 80105ca:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d00d      	beq.n	80105ee <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80105d2:	693a      	ldr	r2, [r7, #16]
 80105d4:	1c53      	adds	r3, r2, #1
 80105d6:	613b      	str	r3, [r7, #16]
 80105d8:	697b      	ldr	r3, [r7, #20]
 80105da:	1c59      	adds	r1, r3, #1
 80105dc:	6179      	str	r1, [r7, #20]
 80105de:	7812      	ldrb	r2, [r2, #0]
 80105e0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	3b01      	subs	r3, #1
 80105e6:	607b      	str	r3, [r7, #4]
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d1f1      	bne.n	80105d2 <mem_cpy+0x1a>
	}
}
 80105ee:	bf00      	nop
 80105f0:	371c      	adds	r7, #28
 80105f2:	46bd      	mov	sp, r7
 80105f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f8:	4770      	bx	lr

080105fa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80105fa:	b480      	push	{r7}
 80105fc:	b087      	sub	sp, #28
 80105fe:	af00      	add	r7, sp, #0
 8010600:	60f8      	str	r0, [r7, #12]
 8010602:	60b9      	str	r1, [r7, #8]
 8010604:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801060a:	697b      	ldr	r3, [r7, #20]
 801060c:	1c5a      	adds	r2, r3, #1
 801060e:	617a      	str	r2, [r7, #20]
 8010610:	68ba      	ldr	r2, [r7, #8]
 8010612:	b2d2      	uxtb	r2, r2
 8010614:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	3b01      	subs	r3, #1
 801061a:	607b      	str	r3, [r7, #4]
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d1f3      	bne.n	801060a <mem_set+0x10>
}
 8010622:	bf00      	nop
 8010624:	bf00      	nop
 8010626:	371c      	adds	r7, #28
 8010628:	46bd      	mov	sp, r7
 801062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062e:	4770      	bx	lr

08010630 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010630:	b480      	push	{r7}
 8010632:	b089      	sub	sp, #36	; 0x24
 8010634:	af00      	add	r7, sp, #0
 8010636:	60f8      	str	r0, [r7, #12]
 8010638:	60b9      	str	r1, [r7, #8]
 801063a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	61fb      	str	r3, [r7, #28]
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010644:	2300      	movs	r3, #0
 8010646:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010648:	69fb      	ldr	r3, [r7, #28]
 801064a:	1c5a      	adds	r2, r3, #1
 801064c:	61fa      	str	r2, [r7, #28]
 801064e:	781b      	ldrb	r3, [r3, #0]
 8010650:	4619      	mov	r1, r3
 8010652:	69bb      	ldr	r3, [r7, #24]
 8010654:	1c5a      	adds	r2, r3, #1
 8010656:	61ba      	str	r2, [r7, #24]
 8010658:	781b      	ldrb	r3, [r3, #0]
 801065a:	1acb      	subs	r3, r1, r3
 801065c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	3b01      	subs	r3, #1
 8010662:	607b      	str	r3, [r7, #4]
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d002      	beq.n	8010670 <mem_cmp+0x40>
 801066a:	697b      	ldr	r3, [r7, #20]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d0eb      	beq.n	8010648 <mem_cmp+0x18>

	return r;
 8010670:	697b      	ldr	r3, [r7, #20]
}
 8010672:	4618      	mov	r0, r3
 8010674:	3724      	adds	r7, #36	; 0x24
 8010676:	46bd      	mov	sp, r7
 8010678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067c:	4770      	bx	lr

0801067e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801067e:	b480      	push	{r7}
 8010680:	b083      	sub	sp, #12
 8010682:	af00      	add	r7, sp, #0
 8010684:	6078      	str	r0, [r7, #4]
 8010686:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010688:	e002      	b.n	8010690 <chk_chr+0x12>
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	3301      	adds	r3, #1
 801068e:	607b      	str	r3, [r7, #4]
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	781b      	ldrb	r3, [r3, #0]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d005      	beq.n	80106a4 <chk_chr+0x26>
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	781b      	ldrb	r3, [r3, #0]
 801069c:	461a      	mov	r2, r3
 801069e:	683b      	ldr	r3, [r7, #0]
 80106a0:	4293      	cmp	r3, r2
 80106a2:	d1f2      	bne.n	801068a <chk_chr+0xc>
	return *str;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	781b      	ldrb	r3, [r3, #0]
}
 80106a8:	4618      	mov	r0, r3
 80106aa:	370c      	adds	r7, #12
 80106ac:	46bd      	mov	sp, r7
 80106ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b2:	4770      	bx	lr

080106b4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80106b4:	b480      	push	{r7}
 80106b6:	b085      	sub	sp, #20
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
 80106bc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80106be:	2300      	movs	r3, #0
 80106c0:	60bb      	str	r3, [r7, #8]
 80106c2:	68bb      	ldr	r3, [r7, #8]
 80106c4:	60fb      	str	r3, [r7, #12]
 80106c6:	e029      	b.n	801071c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80106c8:	4a27      	ldr	r2, [pc, #156]	; (8010768 <chk_lock+0xb4>)
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	011b      	lsls	r3, r3, #4
 80106ce:	4413      	add	r3, r2
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d01d      	beq.n	8010712 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80106d6:	4a24      	ldr	r2, [pc, #144]	; (8010768 <chk_lock+0xb4>)
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	011b      	lsls	r3, r3, #4
 80106dc:	4413      	add	r3, r2
 80106de:	681a      	ldr	r2, [r3, #0]
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	429a      	cmp	r2, r3
 80106e6:	d116      	bne.n	8010716 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80106e8:	4a1f      	ldr	r2, [pc, #124]	; (8010768 <chk_lock+0xb4>)
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	011b      	lsls	r3, r3, #4
 80106ee:	4413      	add	r3, r2
 80106f0:	3304      	adds	r3, #4
 80106f2:	681a      	ldr	r2, [r3, #0]
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80106f8:	429a      	cmp	r2, r3
 80106fa:	d10c      	bne.n	8010716 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80106fc:	4a1a      	ldr	r2, [pc, #104]	; (8010768 <chk_lock+0xb4>)
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	011b      	lsls	r3, r3, #4
 8010702:	4413      	add	r3, r2
 8010704:	3308      	adds	r3, #8
 8010706:	681a      	ldr	r2, [r3, #0]
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801070c:	429a      	cmp	r2, r3
 801070e:	d102      	bne.n	8010716 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010710:	e007      	b.n	8010722 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010712:	2301      	movs	r3, #1
 8010714:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	3301      	adds	r3, #1
 801071a:	60fb      	str	r3, [r7, #12]
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	2b04      	cmp	r3, #4
 8010720:	d9d2      	bls.n	80106c8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	2b05      	cmp	r3, #5
 8010726:	d109      	bne.n	801073c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010728:	68bb      	ldr	r3, [r7, #8]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d102      	bne.n	8010734 <chk_lock+0x80>
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	2b02      	cmp	r3, #2
 8010732:	d101      	bne.n	8010738 <chk_lock+0x84>
 8010734:	2300      	movs	r3, #0
 8010736:	e010      	b.n	801075a <chk_lock+0xa6>
 8010738:	2312      	movs	r3, #18
 801073a:	e00e      	b.n	801075a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d108      	bne.n	8010754 <chk_lock+0xa0>
 8010742:	4a09      	ldr	r2, [pc, #36]	; (8010768 <chk_lock+0xb4>)
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	011b      	lsls	r3, r3, #4
 8010748:	4413      	add	r3, r2
 801074a:	330c      	adds	r3, #12
 801074c:	881b      	ldrh	r3, [r3, #0]
 801074e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010752:	d101      	bne.n	8010758 <chk_lock+0xa4>
 8010754:	2310      	movs	r3, #16
 8010756:	e000      	b.n	801075a <chk_lock+0xa6>
 8010758:	2300      	movs	r3, #0
}
 801075a:	4618      	mov	r0, r3
 801075c:	3714      	adds	r7, #20
 801075e:	46bd      	mov	sp, r7
 8010760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010764:	4770      	bx	lr
 8010766:	bf00      	nop
 8010768:	200065a4 	.word	0x200065a4

0801076c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801076c:	b480      	push	{r7}
 801076e:	b083      	sub	sp, #12
 8010770:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010772:	2300      	movs	r3, #0
 8010774:	607b      	str	r3, [r7, #4]
 8010776:	e002      	b.n	801077e <enq_lock+0x12>
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	3301      	adds	r3, #1
 801077c:	607b      	str	r3, [r7, #4]
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	2b04      	cmp	r3, #4
 8010782:	d806      	bhi.n	8010792 <enq_lock+0x26>
 8010784:	4a09      	ldr	r2, [pc, #36]	; (80107ac <enq_lock+0x40>)
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	011b      	lsls	r3, r3, #4
 801078a:	4413      	add	r3, r2
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d1f2      	bne.n	8010778 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	2b05      	cmp	r3, #5
 8010796:	bf14      	ite	ne
 8010798:	2301      	movne	r3, #1
 801079a:	2300      	moveq	r3, #0
 801079c:	b2db      	uxtb	r3, r3
}
 801079e:	4618      	mov	r0, r3
 80107a0:	370c      	adds	r7, #12
 80107a2:	46bd      	mov	sp, r7
 80107a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a8:	4770      	bx	lr
 80107aa:	bf00      	nop
 80107ac:	200065a4 	.word	0x200065a4

080107b0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80107b0:	b480      	push	{r7}
 80107b2:	b085      	sub	sp, #20
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
 80107b8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80107ba:	2300      	movs	r3, #0
 80107bc:	60fb      	str	r3, [r7, #12]
 80107be:	e01f      	b.n	8010800 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80107c0:	4a41      	ldr	r2, [pc, #260]	; (80108c8 <inc_lock+0x118>)
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	011b      	lsls	r3, r3, #4
 80107c6:	4413      	add	r3, r2
 80107c8:	681a      	ldr	r2, [r3, #0]
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	429a      	cmp	r2, r3
 80107d0:	d113      	bne.n	80107fa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80107d2:	4a3d      	ldr	r2, [pc, #244]	; (80108c8 <inc_lock+0x118>)
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	011b      	lsls	r3, r3, #4
 80107d8:	4413      	add	r3, r2
 80107da:	3304      	adds	r3, #4
 80107dc:	681a      	ldr	r2, [r3, #0]
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80107e2:	429a      	cmp	r2, r3
 80107e4:	d109      	bne.n	80107fa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80107e6:	4a38      	ldr	r2, [pc, #224]	; (80108c8 <inc_lock+0x118>)
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	011b      	lsls	r3, r3, #4
 80107ec:	4413      	add	r3, r2
 80107ee:	3308      	adds	r3, #8
 80107f0:	681a      	ldr	r2, [r3, #0]
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80107f6:	429a      	cmp	r2, r3
 80107f8:	d006      	beq.n	8010808 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	3301      	adds	r3, #1
 80107fe:	60fb      	str	r3, [r7, #12]
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	2b04      	cmp	r3, #4
 8010804:	d9dc      	bls.n	80107c0 <inc_lock+0x10>
 8010806:	e000      	b.n	801080a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010808:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	2b05      	cmp	r3, #5
 801080e:	d132      	bne.n	8010876 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010810:	2300      	movs	r3, #0
 8010812:	60fb      	str	r3, [r7, #12]
 8010814:	e002      	b.n	801081c <inc_lock+0x6c>
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	3301      	adds	r3, #1
 801081a:	60fb      	str	r3, [r7, #12]
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	2b04      	cmp	r3, #4
 8010820:	d806      	bhi.n	8010830 <inc_lock+0x80>
 8010822:	4a29      	ldr	r2, [pc, #164]	; (80108c8 <inc_lock+0x118>)
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	011b      	lsls	r3, r3, #4
 8010828:	4413      	add	r3, r2
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d1f2      	bne.n	8010816 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	2b05      	cmp	r3, #5
 8010834:	d101      	bne.n	801083a <inc_lock+0x8a>
 8010836:	2300      	movs	r3, #0
 8010838:	e040      	b.n	80108bc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	681a      	ldr	r2, [r3, #0]
 801083e:	4922      	ldr	r1, [pc, #136]	; (80108c8 <inc_lock+0x118>)
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	011b      	lsls	r3, r3, #4
 8010844:	440b      	add	r3, r1
 8010846:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	689a      	ldr	r2, [r3, #8]
 801084c:	491e      	ldr	r1, [pc, #120]	; (80108c8 <inc_lock+0x118>)
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	011b      	lsls	r3, r3, #4
 8010852:	440b      	add	r3, r1
 8010854:	3304      	adds	r3, #4
 8010856:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	695a      	ldr	r2, [r3, #20]
 801085c:	491a      	ldr	r1, [pc, #104]	; (80108c8 <inc_lock+0x118>)
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	011b      	lsls	r3, r3, #4
 8010862:	440b      	add	r3, r1
 8010864:	3308      	adds	r3, #8
 8010866:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010868:	4a17      	ldr	r2, [pc, #92]	; (80108c8 <inc_lock+0x118>)
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	011b      	lsls	r3, r3, #4
 801086e:	4413      	add	r3, r2
 8010870:	330c      	adds	r3, #12
 8010872:	2200      	movs	r2, #0
 8010874:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010876:	683b      	ldr	r3, [r7, #0]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d009      	beq.n	8010890 <inc_lock+0xe0>
 801087c:	4a12      	ldr	r2, [pc, #72]	; (80108c8 <inc_lock+0x118>)
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	011b      	lsls	r3, r3, #4
 8010882:	4413      	add	r3, r2
 8010884:	330c      	adds	r3, #12
 8010886:	881b      	ldrh	r3, [r3, #0]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d001      	beq.n	8010890 <inc_lock+0xe0>
 801088c:	2300      	movs	r3, #0
 801088e:	e015      	b.n	80108bc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d108      	bne.n	80108a8 <inc_lock+0xf8>
 8010896:	4a0c      	ldr	r2, [pc, #48]	; (80108c8 <inc_lock+0x118>)
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	011b      	lsls	r3, r3, #4
 801089c:	4413      	add	r3, r2
 801089e:	330c      	adds	r3, #12
 80108a0:	881b      	ldrh	r3, [r3, #0]
 80108a2:	3301      	adds	r3, #1
 80108a4:	b29a      	uxth	r2, r3
 80108a6:	e001      	b.n	80108ac <inc_lock+0xfc>
 80108a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80108ac:	4906      	ldr	r1, [pc, #24]	; (80108c8 <inc_lock+0x118>)
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	011b      	lsls	r3, r3, #4
 80108b2:	440b      	add	r3, r1
 80108b4:	330c      	adds	r3, #12
 80108b6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	3301      	adds	r3, #1
}
 80108bc:	4618      	mov	r0, r3
 80108be:	3714      	adds	r7, #20
 80108c0:	46bd      	mov	sp, r7
 80108c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c6:	4770      	bx	lr
 80108c8:	200065a4 	.word	0x200065a4

080108cc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80108cc:	b480      	push	{r7}
 80108ce:	b085      	sub	sp, #20
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80108d4:	2300      	movs	r3, #0
 80108d6:	60fb      	str	r3, [r7, #12]
 80108d8:	e010      	b.n	80108fc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80108da:	4a0d      	ldr	r2, [pc, #52]	; (8010910 <clear_lock+0x44>)
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	011b      	lsls	r3, r3, #4
 80108e0:	4413      	add	r3, r2
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	687a      	ldr	r2, [r7, #4]
 80108e6:	429a      	cmp	r2, r3
 80108e8:	d105      	bne.n	80108f6 <clear_lock+0x2a>
 80108ea:	4a09      	ldr	r2, [pc, #36]	; (8010910 <clear_lock+0x44>)
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	011b      	lsls	r3, r3, #4
 80108f0:	4413      	add	r3, r2
 80108f2:	2200      	movs	r2, #0
 80108f4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	3301      	adds	r3, #1
 80108fa:	60fb      	str	r3, [r7, #12]
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	2b04      	cmp	r3, #4
 8010900:	d9eb      	bls.n	80108da <clear_lock+0xe>
	}
}
 8010902:	bf00      	nop
 8010904:	bf00      	nop
 8010906:	3714      	adds	r7, #20
 8010908:	46bd      	mov	sp, r7
 801090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090e:	4770      	bx	lr
 8010910:	200065a4 	.word	0x200065a4

08010914 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b086      	sub	sp, #24
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801091c:	2300      	movs	r3, #0
 801091e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	78db      	ldrb	r3, [r3, #3]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d034      	beq.n	8010992 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801092c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	7858      	ldrb	r0, [r3, #1]
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010938:	2301      	movs	r3, #1
 801093a:	697a      	ldr	r2, [r7, #20]
 801093c:	f7ff fd7c 	bl	8010438 <disk_write>
 8010940:	4603      	mov	r3, r0
 8010942:	2b00      	cmp	r3, #0
 8010944:	d002      	beq.n	801094c <sync_window+0x38>
			res = FR_DISK_ERR;
 8010946:	2301      	movs	r3, #1
 8010948:	73fb      	strb	r3, [r7, #15]
 801094a:	e022      	b.n	8010992 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	2200      	movs	r2, #0
 8010950:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010956:	697a      	ldr	r2, [r7, #20]
 8010958:	1ad2      	subs	r2, r2, r3
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	69db      	ldr	r3, [r3, #28]
 801095e:	429a      	cmp	r2, r3
 8010960:	d217      	bcs.n	8010992 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	789b      	ldrb	r3, [r3, #2]
 8010966:	613b      	str	r3, [r7, #16]
 8010968:	e010      	b.n	801098c <sync_window+0x78>
					wsect += fs->fsize;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	69db      	ldr	r3, [r3, #28]
 801096e:	697a      	ldr	r2, [r7, #20]
 8010970:	4413      	add	r3, r2
 8010972:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	7858      	ldrb	r0, [r3, #1]
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801097e:	2301      	movs	r3, #1
 8010980:	697a      	ldr	r2, [r7, #20]
 8010982:	f7ff fd59 	bl	8010438 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010986:	693b      	ldr	r3, [r7, #16]
 8010988:	3b01      	subs	r3, #1
 801098a:	613b      	str	r3, [r7, #16]
 801098c:	693b      	ldr	r3, [r7, #16]
 801098e:	2b01      	cmp	r3, #1
 8010990:	d8eb      	bhi.n	801096a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010992:	7bfb      	ldrb	r3, [r7, #15]
}
 8010994:	4618      	mov	r0, r3
 8010996:	3718      	adds	r7, #24
 8010998:	46bd      	mov	sp, r7
 801099a:	bd80      	pop	{r7, pc}

0801099c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b084      	sub	sp, #16
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
 80109a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80109a6:	2300      	movs	r3, #0
 80109a8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109ae:	683a      	ldr	r2, [r7, #0]
 80109b0:	429a      	cmp	r2, r3
 80109b2:	d01b      	beq.n	80109ec <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80109b4:	6878      	ldr	r0, [r7, #4]
 80109b6:	f7ff ffad 	bl	8010914 <sync_window>
 80109ba:	4603      	mov	r3, r0
 80109bc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80109be:	7bfb      	ldrb	r3, [r7, #15]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d113      	bne.n	80109ec <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	7858      	ldrb	r0, [r3, #1]
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80109ce:	2301      	movs	r3, #1
 80109d0:	683a      	ldr	r2, [r7, #0]
 80109d2:	f7ff fd11 	bl	80103f8 <disk_read>
 80109d6:	4603      	mov	r3, r0
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d004      	beq.n	80109e6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80109dc:	f04f 33ff 	mov.w	r3, #4294967295
 80109e0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80109e2:	2301      	movs	r3, #1
 80109e4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	683a      	ldr	r2, [r7, #0]
 80109ea:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80109ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80109ee:	4618      	mov	r0, r3
 80109f0:	3710      	adds	r7, #16
 80109f2:	46bd      	mov	sp, r7
 80109f4:	bd80      	pop	{r7, pc}
	...

080109f8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b084      	sub	sp, #16
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010a00:	6878      	ldr	r0, [r7, #4]
 8010a02:	f7ff ff87 	bl	8010914 <sync_window>
 8010a06:	4603      	mov	r3, r0
 8010a08:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010a0a:	7bfb      	ldrb	r3, [r7, #15]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d159      	bne.n	8010ac4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	781b      	ldrb	r3, [r3, #0]
 8010a14:	2b03      	cmp	r3, #3
 8010a16:	d149      	bne.n	8010aac <sync_fs+0xb4>
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	791b      	ldrb	r3, [r3, #4]
 8010a1c:	2b01      	cmp	r3, #1
 8010a1e:	d145      	bne.n	8010aac <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	899b      	ldrh	r3, [r3, #12]
 8010a2a:	461a      	mov	r2, r3
 8010a2c:	2100      	movs	r1, #0
 8010a2e:	f7ff fde4 	bl	80105fa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	3334      	adds	r3, #52	; 0x34
 8010a36:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010a3a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f7ff fd73 	bl	801052a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	3334      	adds	r3, #52	; 0x34
 8010a48:	4921      	ldr	r1, [pc, #132]	; (8010ad0 <sync_fs+0xd8>)
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f7ff fd88 	bl	8010560 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	3334      	adds	r3, #52	; 0x34
 8010a54:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010a58:	491e      	ldr	r1, [pc, #120]	; (8010ad4 <sync_fs+0xdc>)
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f7ff fd80 	bl	8010560 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	3334      	adds	r3, #52	; 0x34
 8010a64:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	695b      	ldr	r3, [r3, #20]
 8010a6c:	4619      	mov	r1, r3
 8010a6e:	4610      	mov	r0, r2
 8010a70:	f7ff fd76 	bl	8010560 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	3334      	adds	r3, #52	; 0x34
 8010a78:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	691b      	ldr	r3, [r3, #16]
 8010a80:	4619      	mov	r1, r3
 8010a82:	4610      	mov	r0, r2
 8010a84:	f7ff fd6c 	bl	8010560 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	6a1b      	ldr	r3, [r3, #32]
 8010a8c:	1c5a      	adds	r2, r3, #1
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	7858      	ldrb	r0, [r3, #1]
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010aa0:	2301      	movs	r3, #1
 8010aa2:	f7ff fcc9 	bl	8010438 <disk_write>
			fs->fsi_flag = 0;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	785b      	ldrb	r3, [r3, #1]
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	2100      	movs	r1, #0
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f7ff fcdf 	bl	8010478 <disk_ioctl>
 8010aba:	4603      	mov	r3, r0
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d001      	beq.n	8010ac4 <sync_fs+0xcc>
 8010ac0:	2301      	movs	r3, #1
 8010ac2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	3710      	adds	r7, #16
 8010aca:	46bd      	mov	sp, r7
 8010acc:	bd80      	pop	{r7, pc}
 8010ace:	bf00      	nop
 8010ad0:	41615252 	.word	0x41615252
 8010ad4:	61417272 	.word	0x61417272

08010ad8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010ad8:	b480      	push	{r7}
 8010ada:	b083      	sub	sp, #12
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
 8010ae0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	3b02      	subs	r3, #2
 8010ae6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	699b      	ldr	r3, [r3, #24]
 8010aec:	3b02      	subs	r3, #2
 8010aee:	683a      	ldr	r2, [r7, #0]
 8010af0:	429a      	cmp	r2, r3
 8010af2:	d301      	bcc.n	8010af8 <clust2sect+0x20>
 8010af4:	2300      	movs	r3, #0
 8010af6:	e008      	b.n	8010b0a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	895b      	ldrh	r3, [r3, #10]
 8010afc:	461a      	mov	r2, r3
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	fb03 f202 	mul.w	r2, r3, r2
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b08:	4413      	add	r3, r2
}
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	370c      	adds	r7, #12
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b14:	4770      	bx	lr

08010b16 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010b16:	b580      	push	{r7, lr}
 8010b18:	b086      	sub	sp, #24
 8010b1a:	af00      	add	r7, sp, #0
 8010b1c:	6078      	str	r0, [r7, #4]
 8010b1e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010b26:	683b      	ldr	r3, [r7, #0]
 8010b28:	2b01      	cmp	r3, #1
 8010b2a:	d904      	bls.n	8010b36 <get_fat+0x20>
 8010b2c:	693b      	ldr	r3, [r7, #16]
 8010b2e:	699b      	ldr	r3, [r3, #24]
 8010b30:	683a      	ldr	r2, [r7, #0]
 8010b32:	429a      	cmp	r2, r3
 8010b34:	d302      	bcc.n	8010b3c <get_fat+0x26>
		val = 1;	/* Internal error */
 8010b36:	2301      	movs	r3, #1
 8010b38:	617b      	str	r3, [r7, #20]
 8010b3a:	e0bb      	b.n	8010cb4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8010b40:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010b42:	693b      	ldr	r3, [r7, #16]
 8010b44:	781b      	ldrb	r3, [r3, #0]
 8010b46:	2b03      	cmp	r3, #3
 8010b48:	f000 8083 	beq.w	8010c52 <get_fat+0x13c>
 8010b4c:	2b03      	cmp	r3, #3
 8010b4e:	f300 80a7 	bgt.w	8010ca0 <get_fat+0x18a>
 8010b52:	2b01      	cmp	r3, #1
 8010b54:	d002      	beq.n	8010b5c <get_fat+0x46>
 8010b56:	2b02      	cmp	r3, #2
 8010b58:	d056      	beq.n	8010c08 <get_fat+0xf2>
 8010b5a:	e0a1      	b.n	8010ca0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010b5c:	683b      	ldr	r3, [r7, #0]
 8010b5e:	60fb      	str	r3, [r7, #12]
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	085b      	lsrs	r3, r3, #1
 8010b64:	68fa      	ldr	r2, [r7, #12]
 8010b66:	4413      	add	r3, r2
 8010b68:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010b6a:	693b      	ldr	r3, [r7, #16]
 8010b6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b6e:	693b      	ldr	r3, [r7, #16]
 8010b70:	899b      	ldrh	r3, [r3, #12]
 8010b72:	4619      	mov	r1, r3
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8010b7a:	4413      	add	r3, r2
 8010b7c:	4619      	mov	r1, r3
 8010b7e:	6938      	ldr	r0, [r7, #16]
 8010b80:	f7ff ff0c 	bl	801099c <move_window>
 8010b84:	4603      	mov	r3, r0
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	f040 808d 	bne.w	8010ca6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	1c5a      	adds	r2, r3, #1
 8010b90:	60fa      	str	r2, [r7, #12]
 8010b92:	693a      	ldr	r2, [r7, #16]
 8010b94:	8992      	ldrh	r2, [r2, #12]
 8010b96:	fbb3 f1f2 	udiv	r1, r3, r2
 8010b9a:	fb01 f202 	mul.w	r2, r1, r2
 8010b9e:	1a9b      	subs	r3, r3, r2
 8010ba0:	693a      	ldr	r2, [r7, #16]
 8010ba2:	4413      	add	r3, r2
 8010ba4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010ba8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010baa:	693b      	ldr	r3, [r7, #16]
 8010bac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010bae:	693b      	ldr	r3, [r7, #16]
 8010bb0:	899b      	ldrh	r3, [r3, #12]
 8010bb2:	4619      	mov	r1, r3
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8010bba:	4413      	add	r3, r2
 8010bbc:	4619      	mov	r1, r3
 8010bbe:	6938      	ldr	r0, [r7, #16]
 8010bc0:	f7ff feec 	bl	801099c <move_window>
 8010bc4:	4603      	mov	r3, r0
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d16f      	bne.n	8010caa <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010bca:	693b      	ldr	r3, [r7, #16]
 8010bcc:	899b      	ldrh	r3, [r3, #12]
 8010bce:	461a      	mov	r2, r3
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	fbb3 f1f2 	udiv	r1, r3, r2
 8010bd6:	fb01 f202 	mul.w	r2, r1, r2
 8010bda:	1a9b      	subs	r3, r3, r2
 8010bdc:	693a      	ldr	r2, [r7, #16]
 8010bde:	4413      	add	r3, r2
 8010be0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010be4:	021b      	lsls	r3, r3, #8
 8010be6:	461a      	mov	r2, r3
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	4313      	orrs	r3, r2
 8010bec:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	f003 0301 	and.w	r3, r3, #1
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d002      	beq.n	8010bfe <get_fat+0xe8>
 8010bf8:	68bb      	ldr	r3, [r7, #8]
 8010bfa:	091b      	lsrs	r3, r3, #4
 8010bfc:	e002      	b.n	8010c04 <get_fat+0xee>
 8010bfe:	68bb      	ldr	r3, [r7, #8]
 8010c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010c04:	617b      	str	r3, [r7, #20]
			break;
 8010c06:	e055      	b.n	8010cb4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010c08:	693b      	ldr	r3, [r7, #16]
 8010c0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c0c:	693b      	ldr	r3, [r7, #16]
 8010c0e:	899b      	ldrh	r3, [r3, #12]
 8010c10:	085b      	lsrs	r3, r3, #1
 8010c12:	b29b      	uxth	r3, r3
 8010c14:	4619      	mov	r1, r3
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	fbb3 f3f1 	udiv	r3, r3, r1
 8010c1c:	4413      	add	r3, r2
 8010c1e:	4619      	mov	r1, r3
 8010c20:	6938      	ldr	r0, [r7, #16]
 8010c22:	f7ff febb 	bl	801099c <move_window>
 8010c26:	4603      	mov	r3, r0
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d140      	bne.n	8010cae <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010c2c:	693b      	ldr	r3, [r7, #16]
 8010c2e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	005b      	lsls	r3, r3, #1
 8010c36:	693a      	ldr	r2, [r7, #16]
 8010c38:	8992      	ldrh	r2, [r2, #12]
 8010c3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8010c3e:	fb00 f202 	mul.w	r2, r0, r2
 8010c42:	1a9b      	subs	r3, r3, r2
 8010c44:	440b      	add	r3, r1
 8010c46:	4618      	mov	r0, r3
 8010c48:	f7ff fc34 	bl	80104b4 <ld_word>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	617b      	str	r3, [r7, #20]
			break;
 8010c50:	e030      	b.n	8010cb4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010c52:	693b      	ldr	r3, [r7, #16]
 8010c54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c56:	693b      	ldr	r3, [r7, #16]
 8010c58:	899b      	ldrh	r3, [r3, #12]
 8010c5a:	089b      	lsrs	r3, r3, #2
 8010c5c:	b29b      	uxth	r3, r3
 8010c5e:	4619      	mov	r1, r3
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8010c66:	4413      	add	r3, r2
 8010c68:	4619      	mov	r1, r3
 8010c6a:	6938      	ldr	r0, [r7, #16]
 8010c6c:	f7ff fe96 	bl	801099c <move_window>
 8010c70:	4603      	mov	r3, r0
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d11d      	bne.n	8010cb2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010c76:	693b      	ldr	r3, [r7, #16]
 8010c78:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010c7c:	683b      	ldr	r3, [r7, #0]
 8010c7e:	009b      	lsls	r3, r3, #2
 8010c80:	693a      	ldr	r2, [r7, #16]
 8010c82:	8992      	ldrh	r2, [r2, #12]
 8010c84:	fbb3 f0f2 	udiv	r0, r3, r2
 8010c88:	fb00 f202 	mul.w	r2, r0, r2
 8010c8c:	1a9b      	subs	r3, r3, r2
 8010c8e:	440b      	add	r3, r1
 8010c90:	4618      	mov	r0, r3
 8010c92:	f7ff fc27 	bl	80104e4 <ld_dword>
 8010c96:	4603      	mov	r3, r0
 8010c98:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010c9c:	617b      	str	r3, [r7, #20]
			break;
 8010c9e:	e009      	b.n	8010cb4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	617b      	str	r3, [r7, #20]
 8010ca4:	e006      	b.n	8010cb4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010ca6:	bf00      	nop
 8010ca8:	e004      	b.n	8010cb4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010caa:	bf00      	nop
 8010cac:	e002      	b.n	8010cb4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010cae:	bf00      	nop
 8010cb0:	e000      	b.n	8010cb4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010cb2:	bf00      	nop
		}
	}

	return val;
 8010cb4:	697b      	ldr	r3, [r7, #20]
}
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	3718      	adds	r7, #24
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	bd80      	pop	{r7, pc}

08010cbe <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010cbe:	b590      	push	{r4, r7, lr}
 8010cc0:	b089      	sub	sp, #36	; 0x24
 8010cc2:	af00      	add	r7, sp, #0
 8010cc4:	60f8      	str	r0, [r7, #12]
 8010cc6:	60b9      	str	r1, [r7, #8]
 8010cc8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010cca:	2302      	movs	r3, #2
 8010ccc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010cce:	68bb      	ldr	r3, [r7, #8]
 8010cd0:	2b01      	cmp	r3, #1
 8010cd2:	f240 8102 	bls.w	8010eda <put_fat+0x21c>
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	699b      	ldr	r3, [r3, #24]
 8010cda:	68ba      	ldr	r2, [r7, #8]
 8010cdc:	429a      	cmp	r2, r3
 8010cde:	f080 80fc 	bcs.w	8010eda <put_fat+0x21c>
		switch (fs->fs_type) {
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	781b      	ldrb	r3, [r3, #0]
 8010ce6:	2b03      	cmp	r3, #3
 8010ce8:	f000 80b6 	beq.w	8010e58 <put_fat+0x19a>
 8010cec:	2b03      	cmp	r3, #3
 8010cee:	f300 80fd 	bgt.w	8010eec <put_fat+0x22e>
 8010cf2:	2b01      	cmp	r3, #1
 8010cf4:	d003      	beq.n	8010cfe <put_fat+0x40>
 8010cf6:	2b02      	cmp	r3, #2
 8010cf8:	f000 8083 	beq.w	8010e02 <put_fat+0x144>
 8010cfc:	e0f6      	b.n	8010eec <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010cfe:	68bb      	ldr	r3, [r7, #8]
 8010d00:	61bb      	str	r3, [r7, #24]
 8010d02:	69bb      	ldr	r3, [r7, #24]
 8010d04:	085b      	lsrs	r3, r3, #1
 8010d06:	69ba      	ldr	r2, [r7, #24]
 8010d08:	4413      	add	r3, r2
 8010d0a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	899b      	ldrh	r3, [r3, #12]
 8010d14:	4619      	mov	r1, r3
 8010d16:	69bb      	ldr	r3, [r7, #24]
 8010d18:	fbb3 f3f1 	udiv	r3, r3, r1
 8010d1c:	4413      	add	r3, r2
 8010d1e:	4619      	mov	r1, r3
 8010d20:	68f8      	ldr	r0, [r7, #12]
 8010d22:	f7ff fe3b 	bl	801099c <move_window>
 8010d26:	4603      	mov	r3, r0
 8010d28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010d2a:	7ffb      	ldrb	r3, [r7, #31]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	f040 80d6 	bne.w	8010ede <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010d38:	69bb      	ldr	r3, [r7, #24]
 8010d3a:	1c5a      	adds	r2, r3, #1
 8010d3c:	61ba      	str	r2, [r7, #24]
 8010d3e:	68fa      	ldr	r2, [r7, #12]
 8010d40:	8992      	ldrh	r2, [r2, #12]
 8010d42:	fbb3 f0f2 	udiv	r0, r3, r2
 8010d46:	fb00 f202 	mul.w	r2, r0, r2
 8010d4a:	1a9b      	subs	r3, r3, r2
 8010d4c:	440b      	add	r3, r1
 8010d4e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010d50:	68bb      	ldr	r3, [r7, #8]
 8010d52:	f003 0301 	and.w	r3, r3, #1
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d00d      	beq.n	8010d76 <put_fat+0xb8>
 8010d5a:	697b      	ldr	r3, [r7, #20]
 8010d5c:	781b      	ldrb	r3, [r3, #0]
 8010d5e:	b25b      	sxtb	r3, r3
 8010d60:	f003 030f 	and.w	r3, r3, #15
 8010d64:	b25a      	sxtb	r2, r3
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	b2db      	uxtb	r3, r3
 8010d6a:	011b      	lsls	r3, r3, #4
 8010d6c:	b25b      	sxtb	r3, r3
 8010d6e:	4313      	orrs	r3, r2
 8010d70:	b25b      	sxtb	r3, r3
 8010d72:	b2db      	uxtb	r3, r3
 8010d74:	e001      	b.n	8010d7a <put_fat+0xbc>
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	b2db      	uxtb	r3, r3
 8010d7a:	697a      	ldr	r2, [r7, #20]
 8010d7c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	2201      	movs	r2, #1
 8010d82:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	899b      	ldrh	r3, [r3, #12]
 8010d8c:	4619      	mov	r1, r3
 8010d8e:	69bb      	ldr	r3, [r7, #24]
 8010d90:	fbb3 f3f1 	udiv	r3, r3, r1
 8010d94:	4413      	add	r3, r2
 8010d96:	4619      	mov	r1, r3
 8010d98:	68f8      	ldr	r0, [r7, #12]
 8010d9a:	f7ff fdff 	bl	801099c <move_window>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010da2:	7ffb      	ldrb	r3, [r7, #31]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	f040 809c 	bne.w	8010ee2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	899b      	ldrh	r3, [r3, #12]
 8010db4:	461a      	mov	r2, r3
 8010db6:	69bb      	ldr	r3, [r7, #24]
 8010db8:	fbb3 f0f2 	udiv	r0, r3, r2
 8010dbc:	fb00 f202 	mul.w	r2, r0, r2
 8010dc0:	1a9b      	subs	r3, r3, r2
 8010dc2:	440b      	add	r3, r1
 8010dc4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010dc6:	68bb      	ldr	r3, [r7, #8]
 8010dc8:	f003 0301 	and.w	r3, r3, #1
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d003      	beq.n	8010dd8 <put_fat+0x11a>
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	091b      	lsrs	r3, r3, #4
 8010dd4:	b2db      	uxtb	r3, r3
 8010dd6:	e00e      	b.n	8010df6 <put_fat+0x138>
 8010dd8:	697b      	ldr	r3, [r7, #20]
 8010dda:	781b      	ldrb	r3, [r3, #0]
 8010ddc:	b25b      	sxtb	r3, r3
 8010dde:	f023 030f 	bic.w	r3, r3, #15
 8010de2:	b25a      	sxtb	r2, r3
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	0a1b      	lsrs	r3, r3, #8
 8010de8:	b25b      	sxtb	r3, r3
 8010dea:	f003 030f 	and.w	r3, r3, #15
 8010dee:	b25b      	sxtb	r3, r3
 8010df0:	4313      	orrs	r3, r2
 8010df2:	b25b      	sxtb	r3, r3
 8010df4:	b2db      	uxtb	r3, r3
 8010df6:	697a      	ldr	r2, [r7, #20]
 8010df8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	2201      	movs	r2, #1
 8010dfe:	70da      	strb	r2, [r3, #3]
			break;
 8010e00:	e074      	b.n	8010eec <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	899b      	ldrh	r3, [r3, #12]
 8010e0a:	085b      	lsrs	r3, r3, #1
 8010e0c:	b29b      	uxth	r3, r3
 8010e0e:	4619      	mov	r1, r3
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e16:	4413      	add	r3, r2
 8010e18:	4619      	mov	r1, r3
 8010e1a:	68f8      	ldr	r0, [r7, #12]
 8010e1c:	f7ff fdbe 	bl	801099c <move_window>
 8010e20:	4603      	mov	r3, r0
 8010e22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010e24:	7ffb      	ldrb	r3, [r7, #31]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d15d      	bne.n	8010ee6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010e30:	68bb      	ldr	r3, [r7, #8]
 8010e32:	005b      	lsls	r3, r3, #1
 8010e34:	68fa      	ldr	r2, [r7, #12]
 8010e36:	8992      	ldrh	r2, [r2, #12]
 8010e38:	fbb3 f0f2 	udiv	r0, r3, r2
 8010e3c:	fb00 f202 	mul.w	r2, r0, r2
 8010e40:	1a9b      	subs	r3, r3, r2
 8010e42:	440b      	add	r3, r1
 8010e44:	687a      	ldr	r2, [r7, #4]
 8010e46:	b292      	uxth	r2, r2
 8010e48:	4611      	mov	r1, r2
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	f7ff fb6d 	bl	801052a <st_word>
			fs->wflag = 1;
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	2201      	movs	r2, #1
 8010e54:	70da      	strb	r2, [r3, #3]
			break;
 8010e56:	e049      	b.n	8010eec <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	899b      	ldrh	r3, [r3, #12]
 8010e60:	089b      	lsrs	r3, r3, #2
 8010e62:	b29b      	uxth	r3, r3
 8010e64:	4619      	mov	r1, r3
 8010e66:	68bb      	ldr	r3, [r7, #8]
 8010e68:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e6c:	4413      	add	r3, r2
 8010e6e:	4619      	mov	r1, r3
 8010e70:	68f8      	ldr	r0, [r7, #12]
 8010e72:	f7ff fd93 	bl	801099c <move_window>
 8010e76:	4603      	mov	r3, r0
 8010e78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010e7a:	7ffb      	ldrb	r3, [r7, #31]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d134      	bne.n	8010eea <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010e8c:	68bb      	ldr	r3, [r7, #8]
 8010e8e:	009b      	lsls	r3, r3, #2
 8010e90:	68fa      	ldr	r2, [r7, #12]
 8010e92:	8992      	ldrh	r2, [r2, #12]
 8010e94:	fbb3 f0f2 	udiv	r0, r3, r2
 8010e98:	fb00 f202 	mul.w	r2, r0, r2
 8010e9c:	1a9b      	subs	r3, r3, r2
 8010e9e:	440b      	add	r3, r1
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7ff fb1f 	bl	80104e4 <ld_dword>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010eac:	4323      	orrs	r3, r4
 8010eae:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010eb6:	68bb      	ldr	r3, [r7, #8]
 8010eb8:	009b      	lsls	r3, r3, #2
 8010eba:	68fa      	ldr	r2, [r7, #12]
 8010ebc:	8992      	ldrh	r2, [r2, #12]
 8010ebe:	fbb3 f0f2 	udiv	r0, r3, r2
 8010ec2:	fb00 f202 	mul.w	r2, r0, r2
 8010ec6:	1a9b      	subs	r3, r3, r2
 8010ec8:	440b      	add	r3, r1
 8010eca:	6879      	ldr	r1, [r7, #4]
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f7ff fb47 	bl	8010560 <st_dword>
			fs->wflag = 1;
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	2201      	movs	r2, #1
 8010ed6:	70da      	strb	r2, [r3, #3]
			break;
 8010ed8:	e008      	b.n	8010eec <put_fat+0x22e>
		}
	}
 8010eda:	bf00      	nop
 8010edc:	e006      	b.n	8010eec <put_fat+0x22e>
			if (res != FR_OK) break;
 8010ede:	bf00      	nop
 8010ee0:	e004      	b.n	8010eec <put_fat+0x22e>
			if (res != FR_OK) break;
 8010ee2:	bf00      	nop
 8010ee4:	e002      	b.n	8010eec <put_fat+0x22e>
			if (res != FR_OK) break;
 8010ee6:	bf00      	nop
 8010ee8:	e000      	b.n	8010eec <put_fat+0x22e>
			if (res != FR_OK) break;
 8010eea:	bf00      	nop
	return res;
 8010eec:	7ffb      	ldrb	r3, [r7, #31]
}
 8010eee:	4618      	mov	r0, r3
 8010ef0:	3724      	adds	r7, #36	; 0x24
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	bd90      	pop	{r4, r7, pc}

08010ef6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010ef6:	b580      	push	{r7, lr}
 8010ef8:	b088      	sub	sp, #32
 8010efa:	af00      	add	r7, sp, #0
 8010efc:	60f8      	str	r0, [r7, #12]
 8010efe:	60b9      	str	r1, [r7, #8]
 8010f00:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010f02:	2300      	movs	r3, #0
 8010f04:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	2b01      	cmp	r3, #1
 8010f10:	d904      	bls.n	8010f1c <remove_chain+0x26>
 8010f12:	69bb      	ldr	r3, [r7, #24]
 8010f14:	699b      	ldr	r3, [r3, #24]
 8010f16:	68ba      	ldr	r2, [r7, #8]
 8010f18:	429a      	cmp	r2, r3
 8010f1a:	d301      	bcc.n	8010f20 <remove_chain+0x2a>
 8010f1c:	2302      	movs	r3, #2
 8010f1e:	e04b      	b.n	8010fb8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d00c      	beq.n	8010f40 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010f26:	f04f 32ff 	mov.w	r2, #4294967295
 8010f2a:	6879      	ldr	r1, [r7, #4]
 8010f2c:	69b8      	ldr	r0, [r7, #24]
 8010f2e:	f7ff fec6 	bl	8010cbe <put_fat>
 8010f32:	4603      	mov	r3, r0
 8010f34:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010f36:	7ffb      	ldrb	r3, [r7, #31]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d001      	beq.n	8010f40 <remove_chain+0x4a>
 8010f3c:	7ffb      	ldrb	r3, [r7, #31]
 8010f3e:	e03b      	b.n	8010fb8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010f40:	68b9      	ldr	r1, [r7, #8]
 8010f42:	68f8      	ldr	r0, [r7, #12]
 8010f44:	f7ff fde7 	bl	8010b16 <get_fat>
 8010f48:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010f4a:	697b      	ldr	r3, [r7, #20]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d031      	beq.n	8010fb4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010f50:	697b      	ldr	r3, [r7, #20]
 8010f52:	2b01      	cmp	r3, #1
 8010f54:	d101      	bne.n	8010f5a <remove_chain+0x64>
 8010f56:	2302      	movs	r3, #2
 8010f58:	e02e      	b.n	8010fb8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010f5a:	697b      	ldr	r3, [r7, #20]
 8010f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f60:	d101      	bne.n	8010f66 <remove_chain+0x70>
 8010f62:	2301      	movs	r3, #1
 8010f64:	e028      	b.n	8010fb8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010f66:	2200      	movs	r2, #0
 8010f68:	68b9      	ldr	r1, [r7, #8]
 8010f6a:	69b8      	ldr	r0, [r7, #24]
 8010f6c:	f7ff fea7 	bl	8010cbe <put_fat>
 8010f70:	4603      	mov	r3, r0
 8010f72:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010f74:	7ffb      	ldrb	r3, [r7, #31]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d001      	beq.n	8010f7e <remove_chain+0x88>
 8010f7a:	7ffb      	ldrb	r3, [r7, #31]
 8010f7c:	e01c      	b.n	8010fb8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010f7e:	69bb      	ldr	r3, [r7, #24]
 8010f80:	695a      	ldr	r2, [r3, #20]
 8010f82:	69bb      	ldr	r3, [r7, #24]
 8010f84:	699b      	ldr	r3, [r3, #24]
 8010f86:	3b02      	subs	r3, #2
 8010f88:	429a      	cmp	r2, r3
 8010f8a:	d20b      	bcs.n	8010fa4 <remove_chain+0xae>
			fs->free_clst++;
 8010f8c:	69bb      	ldr	r3, [r7, #24]
 8010f8e:	695b      	ldr	r3, [r3, #20]
 8010f90:	1c5a      	adds	r2, r3, #1
 8010f92:	69bb      	ldr	r3, [r7, #24]
 8010f94:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8010f96:	69bb      	ldr	r3, [r7, #24]
 8010f98:	791b      	ldrb	r3, [r3, #4]
 8010f9a:	f043 0301 	orr.w	r3, r3, #1
 8010f9e:	b2da      	uxtb	r2, r3
 8010fa0:	69bb      	ldr	r3, [r7, #24]
 8010fa2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010fa8:	69bb      	ldr	r3, [r7, #24]
 8010faa:	699b      	ldr	r3, [r3, #24]
 8010fac:	68ba      	ldr	r2, [r7, #8]
 8010fae:	429a      	cmp	r2, r3
 8010fb0:	d3c6      	bcc.n	8010f40 <remove_chain+0x4a>
 8010fb2:	e000      	b.n	8010fb6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010fb4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010fb6:	2300      	movs	r3, #0
}
 8010fb8:	4618      	mov	r0, r3
 8010fba:	3720      	adds	r7, #32
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bd80      	pop	{r7, pc}

08010fc0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b088      	sub	sp, #32
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
 8010fc8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d10d      	bne.n	8010ff2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010fd6:	693b      	ldr	r3, [r7, #16]
 8010fd8:	691b      	ldr	r3, [r3, #16]
 8010fda:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010fdc:	69bb      	ldr	r3, [r7, #24]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d004      	beq.n	8010fec <create_chain+0x2c>
 8010fe2:	693b      	ldr	r3, [r7, #16]
 8010fe4:	699b      	ldr	r3, [r3, #24]
 8010fe6:	69ba      	ldr	r2, [r7, #24]
 8010fe8:	429a      	cmp	r2, r3
 8010fea:	d31b      	bcc.n	8011024 <create_chain+0x64>
 8010fec:	2301      	movs	r3, #1
 8010fee:	61bb      	str	r3, [r7, #24]
 8010ff0:	e018      	b.n	8011024 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010ff2:	6839      	ldr	r1, [r7, #0]
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f7ff fd8e 	bl	8010b16 <get_fat>
 8010ffa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	2b01      	cmp	r3, #1
 8011000:	d801      	bhi.n	8011006 <create_chain+0x46>
 8011002:	2301      	movs	r3, #1
 8011004:	e070      	b.n	80110e8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	f1b3 3fff 	cmp.w	r3, #4294967295
 801100c:	d101      	bne.n	8011012 <create_chain+0x52>
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	e06a      	b.n	80110e8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011012:	693b      	ldr	r3, [r7, #16]
 8011014:	699b      	ldr	r3, [r3, #24]
 8011016:	68fa      	ldr	r2, [r7, #12]
 8011018:	429a      	cmp	r2, r3
 801101a:	d201      	bcs.n	8011020 <create_chain+0x60>
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	e063      	b.n	80110e8 <create_chain+0x128>
		scl = clst;
 8011020:	683b      	ldr	r3, [r7, #0]
 8011022:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011024:	69bb      	ldr	r3, [r7, #24]
 8011026:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011028:	69fb      	ldr	r3, [r7, #28]
 801102a:	3301      	adds	r3, #1
 801102c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801102e:	693b      	ldr	r3, [r7, #16]
 8011030:	699b      	ldr	r3, [r3, #24]
 8011032:	69fa      	ldr	r2, [r7, #28]
 8011034:	429a      	cmp	r2, r3
 8011036:	d307      	bcc.n	8011048 <create_chain+0x88>
				ncl = 2;
 8011038:	2302      	movs	r3, #2
 801103a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801103c:	69fa      	ldr	r2, [r7, #28]
 801103e:	69bb      	ldr	r3, [r7, #24]
 8011040:	429a      	cmp	r2, r3
 8011042:	d901      	bls.n	8011048 <create_chain+0x88>
 8011044:	2300      	movs	r3, #0
 8011046:	e04f      	b.n	80110e8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011048:	69f9      	ldr	r1, [r7, #28]
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f7ff fd63 	bl	8010b16 <get_fat>
 8011050:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d00e      	beq.n	8011076 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	2b01      	cmp	r3, #1
 801105c:	d003      	beq.n	8011066 <create_chain+0xa6>
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011064:	d101      	bne.n	801106a <create_chain+0xaa>
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	e03e      	b.n	80110e8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801106a:	69fa      	ldr	r2, [r7, #28]
 801106c:	69bb      	ldr	r3, [r7, #24]
 801106e:	429a      	cmp	r2, r3
 8011070:	d1da      	bne.n	8011028 <create_chain+0x68>
 8011072:	2300      	movs	r3, #0
 8011074:	e038      	b.n	80110e8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011076:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011078:	f04f 32ff 	mov.w	r2, #4294967295
 801107c:	69f9      	ldr	r1, [r7, #28]
 801107e:	6938      	ldr	r0, [r7, #16]
 8011080:	f7ff fe1d 	bl	8010cbe <put_fat>
 8011084:	4603      	mov	r3, r0
 8011086:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011088:	7dfb      	ldrb	r3, [r7, #23]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d109      	bne.n	80110a2 <create_chain+0xe2>
 801108e:	683b      	ldr	r3, [r7, #0]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d006      	beq.n	80110a2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011094:	69fa      	ldr	r2, [r7, #28]
 8011096:	6839      	ldr	r1, [r7, #0]
 8011098:	6938      	ldr	r0, [r7, #16]
 801109a:	f7ff fe10 	bl	8010cbe <put_fat>
 801109e:	4603      	mov	r3, r0
 80110a0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80110a2:	7dfb      	ldrb	r3, [r7, #23]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d116      	bne.n	80110d6 <create_chain+0x116>
		fs->last_clst = ncl;
 80110a8:	693b      	ldr	r3, [r7, #16]
 80110aa:	69fa      	ldr	r2, [r7, #28]
 80110ac:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80110ae:	693b      	ldr	r3, [r7, #16]
 80110b0:	695a      	ldr	r2, [r3, #20]
 80110b2:	693b      	ldr	r3, [r7, #16]
 80110b4:	699b      	ldr	r3, [r3, #24]
 80110b6:	3b02      	subs	r3, #2
 80110b8:	429a      	cmp	r2, r3
 80110ba:	d804      	bhi.n	80110c6 <create_chain+0x106>
 80110bc:	693b      	ldr	r3, [r7, #16]
 80110be:	695b      	ldr	r3, [r3, #20]
 80110c0:	1e5a      	subs	r2, r3, #1
 80110c2:	693b      	ldr	r3, [r7, #16]
 80110c4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80110c6:	693b      	ldr	r3, [r7, #16]
 80110c8:	791b      	ldrb	r3, [r3, #4]
 80110ca:	f043 0301 	orr.w	r3, r3, #1
 80110ce:	b2da      	uxtb	r2, r3
 80110d0:	693b      	ldr	r3, [r7, #16]
 80110d2:	711a      	strb	r2, [r3, #4]
 80110d4:	e007      	b.n	80110e6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80110d6:	7dfb      	ldrb	r3, [r7, #23]
 80110d8:	2b01      	cmp	r3, #1
 80110da:	d102      	bne.n	80110e2 <create_chain+0x122>
 80110dc:	f04f 33ff 	mov.w	r3, #4294967295
 80110e0:	e000      	b.n	80110e4 <create_chain+0x124>
 80110e2:	2301      	movs	r3, #1
 80110e4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80110e6:	69fb      	ldr	r3, [r7, #28]
}
 80110e8:	4618      	mov	r0, r3
 80110ea:	3720      	adds	r7, #32
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bd80      	pop	{r7, pc}

080110f0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80110f0:	b480      	push	{r7}
 80110f2:	b087      	sub	sp, #28
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
 80110f8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011104:	3304      	adds	r3, #4
 8011106:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	899b      	ldrh	r3, [r3, #12]
 801110c:	461a      	mov	r2, r3
 801110e:	683b      	ldr	r3, [r7, #0]
 8011110:	fbb3 f3f2 	udiv	r3, r3, r2
 8011114:	68fa      	ldr	r2, [r7, #12]
 8011116:	8952      	ldrh	r2, [r2, #10]
 8011118:	fbb3 f3f2 	udiv	r3, r3, r2
 801111c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801111e:	693b      	ldr	r3, [r7, #16]
 8011120:	1d1a      	adds	r2, r3, #4
 8011122:	613a      	str	r2, [r7, #16]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011128:	68bb      	ldr	r3, [r7, #8]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d101      	bne.n	8011132 <clmt_clust+0x42>
 801112e:	2300      	movs	r3, #0
 8011130:	e010      	b.n	8011154 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011132:	697a      	ldr	r2, [r7, #20]
 8011134:	68bb      	ldr	r3, [r7, #8]
 8011136:	429a      	cmp	r2, r3
 8011138:	d307      	bcc.n	801114a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801113a:	697a      	ldr	r2, [r7, #20]
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	1ad3      	subs	r3, r2, r3
 8011140:	617b      	str	r3, [r7, #20]
 8011142:	693b      	ldr	r3, [r7, #16]
 8011144:	3304      	adds	r3, #4
 8011146:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011148:	e7e9      	b.n	801111e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801114a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801114c:	693b      	ldr	r3, [r7, #16]
 801114e:	681a      	ldr	r2, [r3, #0]
 8011150:	697b      	ldr	r3, [r7, #20]
 8011152:	4413      	add	r3, r2
}
 8011154:	4618      	mov	r0, r3
 8011156:	371c      	adds	r7, #28
 8011158:	46bd      	mov	sp, r7
 801115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115e:	4770      	bx	lr

08011160 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b086      	sub	sp, #24
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
 8011168:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011170:	683b      	ldr	r3, [r7, #0]
 8011172:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011176:	d204      	bcs.n	8011182 <dir_sdi+0x22>
 8011178:	683b      	ldr	r3, [r7, #0]
 801117a:	f003 031f 	and.w	r3, r3, #31
 801117e:	2b00      	cmp	r3, #0
 8011180:	d001      	beq.n	8011186 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011182:	2302      	movs	r3, #2
 8011184:	e071      	b.n	801126a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	683a      	ldr	r2, [r7, #0]
 801118a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	689b      	ldr	r3, [r3, #8]
 8011190:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011192:	697b      	ldr	r3, [r7, #20]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d106      	bne.n	80111a6 <dir_sdi+0x46>
 8011198:	693b      	ldr	r3, [r7, #16]
 801119a:	781b      	ldrb	r3, [r3, #0]
 801119c:	2b02      	cmp	r3, #2
 801119e:	d902      	bls.n	80111a6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80111a0:	693b      	ldr	r3, [r7, #16]
 80111a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111a4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d10c      	bne.n	80111c6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	095b      	lsrs	r3, r3, #5
 80111b0:	693a      	ldr	r2, [r7, #16]
 80111b2:	8912      	ldrh	r2, [r2, #8]
 80111b4:	4293      	cmp	r3, r2
 80111b6:	d301      	bcc.n	80111bc <dir_sdi+0x5c>
 80111b8:	2302      	movs	r3, #2
 80111ba:	e056      	b.n	801126a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80111bc:	693b      	ldr	r3, [r7, #16]
 80111be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	61da      	str	r2, [r3, #28]
 80111c4:	e02d      	b.n	8011222 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80111c6:	693b      	ldr	r3, [r7, #16]
 80111c8:	895b      	ldrh	r3, [r3, #10]
 80111ca:	461a      	mov	r2, r3
 80111cc:	693b      	ldr	r3, [r7, #16]
 80111ce:	899b      	ldrh	r3, [r3, #12]
 80111d0:	fb02 f303 	mul.w	r3, r2, r3
 80111d4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80111d6:	e019      	b.n	801120c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	6979      	ldr	r1, [r7, #20]
 80111dc:	4618      	mov	r0, r3
 80111de:	f7ff fc9a 	bl	8010b16 <get_fat>
 80111e2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80111e4:	697b      	ldr	r3, [r7, #20]
 80111e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111ea:	d101      	bne.n	80111f0 <dir_sdi+0x90>
 80111ec:	2301      	movs	r3, #1
 80111ee:	e03c      	b.n	801126a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80111f0:	697b      	ldr	r3, [r7, #20]
 80111f2:	2b01      	cmp	r3, #1
 80111f4:	d904      	bls.n	8011200 <dir_sdi+0xa0>
 80111f6:	693b      	ldr	r3, [r7, #16]
 80111f8:	699b      	ldr	r3, [r3, #24]
 80111fa:	697a      	ldr	r2, [r7, #20]
 80111fc:	429a      	cmp	r2, r3
 80111fe:	d301      	bcc.n	8011204 <dir_sdi+0xa4>
 8011200:	2302      	movs	r3, #2
 8011202:	e032      	b.n	801126a <dir_sdi+0x10a>
			ofs -= csz;
 8011204:	683a      	ldr	r2, [r7, #0]
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	1ad3      	subs	r3, r2, r3
 801120a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801120c:	683a      	ldr	r2, [r7, #0]
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	429a      	cmp	r2, r3
 8011212:	d2e1      	bcs.n	80111d8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8011214:	6979      	ldr	r1, [r7, #20]
 8011216:	6938      	ldr	r0, [r7, #16]
 8011218:	f7ff fc5e 	bl	8010ad8 <clust2sect>
 801121c:	4602      	mov	r2, r0
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	697a      	ldr	r2, [r7, #20]
 8011226:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	69db      	ldr	r3, [r3, #28]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d101      	bne.n	8011234 <dir_sdi+0xd4>
 8011230:	2302      	movs	r3, #2
 8011232:	e01a      	b.n	801126a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	69da      	ldr	r2, [r3, #28]
 8011238:	693b      	ldr	r3, [r7, #16]
 801123a:	899b      	ldrh	r3, [r3, #12]
 801123c:	4619      	mov	r1, r3
 801123e:	683b      	ldr	r3, [r7, #0]
 8011240:	fbb3 f3f1 	udiv	r3, r3, r1
 8011244:	441a      	add	r2, r3
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801124a:	693b      	ldr	r3, [r7, #16]
 801124c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011250:	693b      	ldr	r3, [r7, #16]
 8011252:	899b      	ldrh	r3, [r3, #12]
 8011254:	461a      	mov	r2, r3
 8011256:	683b      	ldr	r3, [r7, #0]
 8011258:	fbb3 f0f2 	udiv	r0, r3, r2
 801125c:	fb00 f202 	mul.w	r2, r0, r2
 8011260:	1a9b      	subs	r3, r3, r2
 8011262:	18ca      	adds	r2, r1, r3
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011268:	2300      	movs	r3, #0
}
 801126a:	4618      	mov	r0, r3
 801126c:	3718      	adds	r7, #24
 801126e:	46bd      	mov	sp, r7
 8011270:	bd80      	pop	{r7, pc}

08011272 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011272:	b580      	push	{r7, lr}
 8011274:	b086      	sub	sp, #24
 8011276:	af00      	add	r7, sp, #0
 8011278:	6078      	str	r0, [r7, #4]
 801127a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	695b      	ldr	r3, [r3, #20]
 8011286:	3320      	adds	r3, #32
 8011288:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	69db      	ldr	r3, [r3, #28]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d003      	beq.n	801129a <dir_next+0x28>
 8011292:	68bb      	ldr	r3, [r7, #8]
 8011294:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011298:	d301      	bcc.n	801129e <dir_next+0x2c>
 801129a:	2304      	movs	r3, #4
 801129c:	e0bb      	b.n	8011416 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	899b      	ldrh	r3, [r3, #12]
 80112a2:	461a      	mov	r2, r3
 80112a4:	68bb      	ldr	r3, [r7, #8]
 80112a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80112aa:	fb01 f202 	mul.w	r2, r1, r2
 80112ae:	1a9b      	subs	r3, r3, r2
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	f040 809d 	bne.w	80113f0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	69db      	ldr	r3, [r3, #28]
 80112ba:	1c5a      	adds	r2, r3, #1
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	699b      	ldr	r3, [r3, #24]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d10b      	bne.n	80112e0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80112c8:	68bb      	ldr	r3, [r7, #8]
 80112ca:	095b      	lsrs	r3, r3, #5
 80112cc:	68fa      	ldr	r2, [r7, #12]
 80112ce:	8912      	ldrh	r2, [r2, #8]
 80112d0:	4293      	cmp	r3, r2
 80112d2:	f0c0 808d 	bcc.w	80113f0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	2200      	movs	r2, #0
 80112da:	61da      	str	r2, [r3, #28]
 80112dc:	2304      	movs	r3, #4
 80112de:	e09a      	b.n	8011416 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	899b      	ldrh	r3, [r3, #12]
 80112e4:	461a      	mov	r2, r3
 80112e6:	68bb      	ldr	r3, [r7, #8]
 80112e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80112ec:	68fa      	ldr	r2, [r7, #12]
 80112ee:	8952      	ldrh	r2, [r2, #10]
 80112f0:	3a01      	subs	r2, #1
 80112f2:	4013      	ands	r3, r2
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d17b      	bne.n	80113f0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80112f8:	687a      	ldr	r2, [r7, #4]
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	699b      	ldr	r3, [r3, #24]
 80112fe:	4619      	mov	r1, r3
 8011300:	4610      	mov	r0, r2
 8011302:	f7ff fc08 	bl	8010b16 <get_fat>
 8011306:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011308:	697b      	ldr	r3, [r7, #20]
 801130a:	2b01      	cmp	r3, #1
 801130c:	d801      	bhi.n	8011312 <dir_next+0xa0>
 801130e:	2302      	movs	r3, #2
 8011310:	e081      	b.n	8011416 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011312:	697b      	ldr	r3, [r7, #20]
 8011314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011318:	d101      	bne.n	801131e <dir_next+0xac>
 801131a:	2301      	movs	r3, #1
 801131c:	e07b      	b.n	8011416 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	699b      	ldr	r3, [r3, #24]
 8011322:	697a      	ldr	r2, [r7, #20]
 8011324:	429a      	cmp	r2, r3
 8011326:	d359      	bcc.n	80113dc <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011328:	683b      	ldr	r3, [r7, #0]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d104      	bne.n	8011338 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	2200      	movs	r2, #0
 8011332:	61da      	str	r2, [r3, #28]
 8011334:	2304      	movs	r3, #4
 8011336:	e06e      	b.n	8011416 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011338:	687a      	ldr	r2, [r7, #4]
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	699b      	ldr	r3, [r3, #24]
 801133e:	4619      	mov	r1, r3
 8011340:	4610      	mov	r0, r2
 8011342:	f7ff fe3d 	bl	8010fc0 <create_chain>
 8011346:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011348:	697b      	ldr	r3, [r7, #20]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d101      	bne.n	8011352 <dir_next+0xe0>
 801134e:	2307      	movs	r3, #7
 8011350:	e061      	b.n	8011416 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011352:	697b      	ldr	r3, [r7, #20]
 8011354:	2b01      	cmp	r3, #1
 8011356:	d101      	bne.n	801135c <dir_next+0xea>
 8011358:	2302      	movs	r3, #2
 801135a:	e05c      	b.n	8011416 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801135c:	697b      	ldr	r3, [r7, #20]
 801135e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011362:	d101      	bne.n	8011368 <dir_next+0xf6>
 8011364:	2301      	movs	r3, #1
 8011366:	e056      	b.n	8011416 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011368:	68f8      	ldr	r0, [r7, #12]
 801136a:	f7ff fad3 	bl	8010914 <sync_window>
 801136e:	4603      	mov	r3, r0
 8011370:	2b00      	cmp	r3, #0
 8011372:	d001      	beq.n	8011378 <dir_next+0x106>
 8011374:	2301      	movs	r3, #1
 8011376:	e04e      	b.n	8011416 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	899b      	ldrh	r3, [r3, #12]
 8011382:	461a      	mov	r2, r3
 8011384:	2100      	movs	r1, #0
 8011386:	f7ff f938 	bl	80105fa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801138a:	2300      	movs	r3, #0
 801138c:	613b      	str	r3, [r7, #16]
 801138e:	6979      	ldr	r1, [r7, #20]
 8011390:	68f8      	ldr	r0, [r7, #12]
 8011392:	f7ff fba1 	bl	8010ad8 <clust2sect>
 8011396:	4602      	mov	r2, r0
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	631a      	str	r2, [r3, #48]	; 0x30
 801139c:	e012      	b.n	80113c4 <dir_next+0x152>
						fs->wflag = 1;
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	2201      	movs	r2, #1
 80113a2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80113a4:	68f8      	ldr	r0, [r7, #12]
 80113a6:	f7ff fab5 	bl	8010914 <sync_window>
 80113aa:	4603      	mov	r3, r0
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d001      	beq.n	80113b4 <dir_next+0x142>
 80113b0:	2301      	movs	r3, #1
 80113b2:	e030      	b.n	8011416 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80113b4:	693b      	ldr	r3, [r7, #16]
 80113b6:	3301      	adds	r3, #1
 80113b8:	613b      	str	r3, [r7, #16]
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113be:	1c5a      	adds	r2, r3, #1
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	631a      	str	r2, [r3, #48]	; 0x30
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	895b      	ldrh	r3, [r3, #10]
 80113c8:	461a      	mov	r2, r3
 80113ca:	693b      	ldr	r3, [r7, #16]
 80113cc:	4293      	cmp	r3, r2
 80113ce:	d3e6      	bcc.n	801139e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80113d4:	693b      	ldr	r3, [r7, #16]
 80113d6:	1ad2      	subs	r2, r2, r3
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	697a      	ldr	r2, [r7, #20]
 80113e0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80113e2:	6979      	ldr	r1, [r7, #20]
 80113e4:	68f8      	ldr	r0, [r7, #12]
 80113e6:	f7ff fb77 	bl	8010ad8 <clust2sect>
 80113ea:	4602      	mov	r2, r0
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	68ba      	ldr	r2, [r7, #8]
 80113f4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	899b      	ldrh	r3, [r3, #12]
 8011400:	461a      	mov	r2, r3
 8011402:	68bb      	ldr	r3, [r7, #8]
 8011404:	fbb3 f0f2 	udiv	r0, r3, r2
 8011408:	fb00 f202 	mul.w	r2, r0, r2
 801140c:	1a9b      	subs	r3, r3, r2
 801140e:	18ca      	adds	r2, r1, r3
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011414:	2300      	movs	r3, #0
}
 8011416:	4618      	mov	r0, r3
 8011418:	3718      	adds	r7, #24
 801141a:	46bd      	mov	sp, r7
 801141c:	bd80      	pop	{r7, pc}

0801141e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801141e:	b580      	push	{r7, lr}
 8011420:	b086      	sub	sp, #24
 8011422:	af00      	add	r7, sp, #0
 8011424:	6078      	str	r0, [r7, #4]
 8011426:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801142e:	2100      	movs	r1, #0
 8011430:	6878      	ldr	r0, [r7, #4]
 8011432:	f7ff fe95 	bl	8011160 <dir_sdi>
 8011436:	4603      	mov	r3, r0
 8011438:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801143a:	7dfb      	ldrb	r3, [r7, #23]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d12b      	bne.n	8011498 <dir_alloc+0x7a>
		n = 0;
 8011440:	2300      	movs	r3, #0
 8011442:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	69db      	ldr	r3, [r3, #28]
 8011448:	4619      	mov	r1, r3
 801144a:	68f8      	ldr	r0, [r7, #12]
 801144c:	f7ff faa6 	bl	801099c <move_window>
 8011450:	4603      	mov	r3, r0
 8011452:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011454:	7dfb      	ldrb	r3, [r7, #23]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d11d      	bne.n	8011496 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	6a1b      	ldr	r3, [r3, #32]
 801145e:	781b      	ldrb	r3, [r3, #0]
 8011460:	2be5      	cmp	r3, #229	; 0xe5
 8011462:	d004      	beq.n	801146e <dir_alloc+0x50>
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	6a1b      	ldr	r3, [r3, #32]
 8011468:	781b      	ldrb	r3, [r3, #0]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d107      	bne.n	801147e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801146e:	693b      	ldr	r3, [r7, #16]
 8011470:	3301      	adds	r3, #1
 8011472:	613b      	str	r3, [r7, #16]
 8011474:	693a      	ldr	r2, [r7, #16]
 8011476:	683b      	ldr	r3, [r7, #0]
 8011478:	429a      	cmp	r2, r3
 801147a:	d102      	bne.n	8011482 <dir_alloc+0x64>
 801147c:	e00c      	b.n	8011498 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801147e:	2300      	movs	r3, #0
 8011480:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011482:	2101      	movs	r1, #1
 8011484:	6878      	ldr	r0, [r7, #4]
 8011486:	f7ff fef4 	bl	8011272 <dir_next>
 801148a:	4603      	mov	r3, r0
 801148c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801148e:	7dfb      	ldrb	r3, [r7, #23]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d0d7      	beq.n	8011444 <dir_alloc+0x26>
 8011494:	e000      	b.n	8011498 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011496:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011498:	7dfb      	ldrb	r3, [r7, #23]
 801149a:	2b04      	cmp	r3, #4
 801149c:	d101      	bne.n	80114a2 <dir_alloc+0x84>
 801149e:	2307      	movs	r3, #7
 80114a0:	75fb      	strb	r3, [r7, #23]
	return res;
 80114a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80114a4:	4618      	mov	r0, r3
 80114a6:	3718      	adds	r7, #24
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd80      	pop	{r7, pc}

080114ac <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b084      	sub	sp, #16
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
 80114b4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80114b6:	683b      	ldr	r3, [r7, #0]
 80114b8:	331a      	adds	r3, #26
 80114ba:	4618      	mov	r0, r3
 80114bc:	f7fe fffa 	bl	80104b4 <ld_word>
 80114c0:	4603      	mov	r3, r0
 80114c2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	781b      	ldrb	r3, [r3, #0]
 80114c8:	2b03      	cmp	r3, #3
 80114ca:	d109      	bne.n	80114e0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80114cc:	683b      	ldr	r3, [r7, #0]
 80114ce:	3314      	adds	r3, #20
 80114d0:	4618      	mov	r0, r3
 80114d2:	f7fe ffef 	bl	80104b4 <ld_word>
 80114d6:	4603      	mov	r3, r0
 80114d8:	041b      	lsls	r3, r3, #16
 80114da:	68fa      	ldr	r2, [r7, #12]
 80114dc:	4313      	orrs	r3, r2
 80114de:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80114e0:	68fb      	ldr	r3, [r7, #12]
}
 80114e2:	4618      	mov	r0, r3
 80114e4:	3710      	adds	r7, #16
 80114e6:	46bd      	mov	sp, r7
 80114e8:	bd80      	pop	{r7, pc}

080114ea <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80114ea:	b580      	push	{r7, lr}
 80114ec:	b084      	sub	sp, #16
 80114ee:	af00      	add	r7, sp, #0
 80114f0:	60f8      	str	r0, [r7, #12]
 80114f2:	60b9      	str	r1, [r7, #8]
 80114f4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	331a      	adds	r3, #26
 80114fa:	687a      	ldr	r2, [r7, #4]
 80114fc:	b292      	uxth	r2, r2
 80114fe:	4611      	mov	r1, r2
 8011500:	4618      	mov	r0, r3
 8011502:	f7ff f812 	bl	801052a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	781b      	ldrb	r3, [r3, #0]
 801150a:	2b03      	cmp	r3, #3
 801150c:	d109      	bne.n	8011522 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	f103 0214 	add.w	r2, r3, #20
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	0c1b      	lsrs	r3, r3, #16
 8011518:	b29b      	uxth	r3, r3
 801151a:	4619      	mov	r1, r3
 801151c:	4610      	mov	r0, r2
 801151e:	f7ff f804 	bl	801052a <st_word>
	}
}
 8011522:	bf00      	nop
 8011524:	3710      	adds	r7, #16
 8011526:	46bd      	mov	sp, r7
 8011528:	bd80      	pop	{r7, pc}

0801152a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801152a:	b580      	push	{r7, lr}
 801152c:	b086      	sub	sp, #24
 801152e:	af00      	add	r7, sp, #0
 8011530:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011538:	2100      	movs	r1, #0
 801153a:	6878      	ldr	r0, [r7, #4]
 801153c:	f7ff fe10 	bl	8011160 <dir_sdi>
 8011540:	4603      	mov	r3, r0
 8011542:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011544:	7dfb      	ldrb	r3, [r7, #23]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d001      	beq.n	801154e <dir_find+0x24>
 801154a:	7dfb      	ldrb	r3, [r7, #23]
 801154c:	e03e      	b.n	80115cc <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	69db      	ldr	r3, [r3, #28]
 8011552:	4619      	mov	r1, r3
 8011554:	6938      	ldr	r0, [r7, #16]
 8011556:	f7ff fa21 	bl	801099c <move_window>
 801155a:	4603      	mov	r3, r0
 801155c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801155e:	7dfb      	ldrb	r3, [r7, #23]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d12f      	bne.n	80115c4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	6a1b      	ldr	r3, [r3, #32]
 8011568:	781b      	ldrb	r3, [r3, #0]
 801156a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801156c:	7bfb      	ldrb	r3, [r7, #15]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d102      	bne.n	8011578 <dir_find+0x4e>
 8011572:	2304      	movs	r3, #4
 8011574:	75fb      	strb	r3, [r7, #23]
 8011576:	e028      	b.n	80115ca <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	6a1b      	ldr	r3, [r3, #32]
 801157c:	330b      	adds	r3, #11
 801157e:	781b      	ldrb	r3, [r3, #0]
 8011580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011584:	b2da      	uxtb	r2, r3
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	6a1b      	ldr	r3, [r3, #32]
 801158e:	330b      	adds	r3, #11
 8011590:	781b      	ldrb	r3, [r3, #0]
 8011592:	f003 0308 	and.w	r3, r3, #8
 8011596:	2b00      	cmp	r3, #0
 8011598:	d10a      	bne.n	80115b0 <dir_find+0x86>
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	6a18      	ldr	r0, [r3, #32]
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	3324      	adds	r3, #36	; 0x24
 80115a2:	220b      	movs	r2, #11
 80115a4:	4619      	mov	r1, r3
 80115a6:	f7ff f843 	bl	8010630 <mem_cmp>
 80115aa:	4603      	mov	r3, r0
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d00b      	beq.n	80115c8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80115b0:	2100      	movs	r1, #0
 80115b2:	6878      	ldr	r0, [r7, #4]
 80115b4:	f7ff fe5d 	bl	8011272 <dir_next>
 80115b8:	4603      	mov	r3, r0
 80115ba:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80115bc:	7dfb      	ldrb	r3, [r7, #23]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d0c5      	beq.n	801154e <dir_find+0x24>
 80115c2:	e002      	b.n	80115ca <dir_find+0xa0>
		if (res != FR_OK) break;
 80115c4:	bf00      	nop
 80115c6:	e000      	b.n	80115ca <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80115c8:	bf00      	nop

	return res;
 80115ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80115cc:	4618      	mov	r0, r3
 80115ce:	3718      	adds	r7, #24
 80115d0:	46bd      	mov	sp, r7
 80115d2:	bd80      	pop	{r7, pc}

080115d4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b084      	sub	sp, #16
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80115e2:	2101      	movs	r1, #1
 80115e4:	6878      	ldr	r0, [r7, #4]
 80115e6:	f7ff ff1a 	bl	801141e <dir_alloc>
 80115ea:	4603      	mov	r3, r0
 80115ec:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80115ee:	7bfb      	ldrb	r3, [r7, #15]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d11c      	bne.n	801162e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	69db      	ldr	r3, [r3, #28]
 80115f8:	4619      	mov	r1, r3
 80115fa:	68b8      	ldr	r0, [r7, #8]
 80115fc:	f7ff f9ce 	bl	801099c <move_window>
 8011600:	4603      	mov	r3, r0
 8011602:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011604:	7bfb      	ldrb	r3, [r7, #15]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d111      	bne.n	801162e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	6a1b      	ldr	r3, [r3, #32]
 801160e:	2220      	movs	r2, #32
 8011610:	2100      	movs	r1, #0
 8011612:	4618      	mov	r0, r3
 8011614:	f7fe fff1 	bl	80105fa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	6a18      	ldr	r0, [r3, #32]
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	3324      	adds	r3, #36	; 0x24
 8011620:	220b      	movs	r2, #11
 8011622:	4619      	mov	r1, r3
 8011624:	f7fe ffc8 	bl	80105b8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8011628:	68bb      	ldr	r3, [r7, #8]
 801162a:	2201      	movs	r2, #1
 801162c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801162e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011630:	4618      	mov	r0, r3
 8011632:	3710      	adds	r7, #16
 8011634:	46bd      	mov	sp, r7
 8011636:	bd80      	pop	{r7, pc}

08011638 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b086      	sub	sp, #24
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
 8011640:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8011642:	683b      	ldr	r3, [r7, #0]
 8011644:	2200      	movs	r2, #0
 8011646:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	69db      	ldr	r3, [r3, #28]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d04e      	beq.n	80116ee <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8011650:	2300      	movs	r3, #0
 8011652:	613b      	str	r3, [r7, #16]
 8011654:	693b      	ldr	r3, [r7, #16]
 8011656:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8011658:	e021      	b.n	801169e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	6a1a      	ldr	r2, [r3, #32]
 801165e:	697b      	ldr	r3, [r7, #20]
 8011660:	1c59      	adds	r1, r3, #1
 8011662:	6179      	str	r1, [r7, #20]
 8011664:	4413      	add	r3, r2
 8011666:	781b      	ldrb	r3, [r3, #0]
 8011668:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 801166a:	7bfb      	ldrb	r3, [r7, #15]
 801166c:	2b20      	cmp	r3, #32
 801166e:	d100      	bne.n	8011672 <get_fileinfo+0x3a>
 8011670:	e015      	b.n	801169e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8011672:	7bfb      	ldrb	r3, [r7, #15]
 8011674:	2b05      	cmp	r3, #5
 8011676:	d101      	bne.n	801167c <get_fileinfo+0x44>
 8011678:	23e5      	movs	r3, #229	; 0xe5
 801167a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 801167c:	697b      	ldr	r3, [r7, #20]
 801167e:	2b09      	cmp	r3, #9
 8011680:	d106      	bne.n	8011690 <get_fileinfo+0x58>
 8011682:	693b      	ldr	r3, [r7, #16]
 8011684:	1c5a      	adds	r2, r3, #1
 8011686:	613a      	str	r2, [r7, #16]
 8011688:	683a      	ldr	r2, [r7, #0]
 801168a:	4413      	add	r3, r2
 801168c:	222e      	movs	r2, #46	; 0x2e
 801168e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8011690:	693b      	ldr	r3, [r7, #16]
 8011692:	1c5a      	adds	r2, r3, #1
 8011694:	613a      	str	r2, [r7, #16]
 8011696:	683a      	ldr	r2, [r7, #0]
 8011698:	4413      	add	r3, r2
 801169a:	7bfa      	ldrb	r2, [r7, #15]
 801169c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 801169e:	697b      	ldr	r3, [r7, #20]
 80116a0:	2b0a      	cmp	r3, #10
 80116a2:	d9da      	bls.n	801165a <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80116a4:	683a      	ldr	r2, [r7, #0]
 80116a6:	693b      	ldr	r3, [r7, #16]
 80116a8:	4413      	add	r3, r2
 80116aa:	3309      	adds	r3, #9
 80116ac:	2200      	movs	r2, #0
 80116ae:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	6a1b      	ldr	r3, [r3, #32]
 80116b4:	7ada      	ldrb	r2, [r3, #11]
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	6a1b      	ldr	r3, [r3, #32]
 80116be:	331c      	adds	r3, #28
 80116c0:	4618      	mov	r0, r3
 80116c2:	f7fe ff0f 	bl	80104e4 <ld_dword>
 80116c6:	4602      	mov	r2, r0
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	6a1b      	ldr	r3, [r3, #32]
 80116d0:	3316      	adds	r3, #22
 80116d2:	4618      	mov	r0, r3
 80116d4:	f7fe ff06 	bl	80104e4 <ld_dword>
 80116d8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80116da:	68bb      	ldr	r3, [r7, #8]
 80116dc:	b29a      	uxth	r2, r3
 80116de:	683b      	ldr	r3, [r7, #0]
 80116e0:	80da      	strh	r2, [r3, #6]
 80116e2:	68bb      	ldr	r3, [r7, #8]
 80116e4:	0c1b      	lsrs	r3, r3, #16
 80116e6:	b29a      	uxth	r2, r3
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	809a      	strh	r2, [r3, #4]
 80116ec:	e000      	b.n	80116f0 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80116ee:	bf00      	nop
}
 80116f0:	3718      	adds	r7, #24
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bd80      	pop	{r7, pc}
	...

080116f8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b088      	sub	sp, #32
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
 8011700:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8011702:	683b      	ldr	r3, [r7, #0]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	60fb      	str	r3, [r7, #12]
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	3324      	adds	r3, #36	; 0x24
 801170c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801170e:	220b      	movs	r2, #11
 8011710:	2120      	movs	r1, #32
 8011712:	68b8      	ldr	r0, [r7, #8]
 8011714:	f7fe ff71 	bl	80105fa <mem_set>
	si = i = 0; ni = 8;
 8011718:	2300      	movs	r3, #0
 801171a:	613b      	str	r3, [r7, #16]
 801171c:	693b      	ldr	r3, [r7, #16]
 801171e:	61fb      	str	r3, [r7, #28]
 8011720:	2308      	movs	r3, #8
 8011722:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011724:	69fb      	ldr	r3, [r7, #28]
 8011726:	1c5a      	adds	r2, r3, #1
 8011728:	61fa      	str	r2, [r7, #28]
 801172a:	68fa      	ldr	r2, [r7, #12]
 801172c:	4413      	add	r3, r2
 801172e:	781b      	ldrb	r3, [r3, #0]
 8011730:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011732:	7efb      	ldrb	r3, [r7, #27]
 8011734:	2b20      	cmp	r3, #32
 8011736:	d94e      	bls.n	80117d6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8011738:	7efb      	ldrb	r3, [r7, #27]
 801173a:	2b2f      	cmp	r3, #47	; 0x2f
 801173c:	d006      	beq.n	801174c <create_name+0x54>
 801173e:	7efb      	ldrb	r3, [r7, #27]
 8011740:	2b5c      	cmp	r3, #92	; 0x5c
 8011742:	d110      	bne.n	8011766 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011744:	e002      	b.n	801174c <create_name+0x54>
 8011746:	69fb      	ldr	r3, [r7, #28]
 8011748:	3301      	adds	r3, #1
 801174a:	61fb      	str	r3, [r7, #28]
 801174c:	68fa      	ldr	r2, [r7, #12]
 801174e:	69fb      	ldr	r3, [r7, #28]
 8011750:	4413      	add	r3, r2
 8011752:	781b      	ldrb	r3, [r3, #0]
 8011754:	2b2f      	cmp	r3, #47	; 0x2f
 8011756:	d0f6      	beq.n	8011746 <create_name+0x4e>
 8011758:	68fa      	ldr	r2, [r7, #12]
 801175a:	69fb      	ldr	r3, [r7, #28]
 801175c:	4413      	add	r3, r2
 801175e:	781b      	ldrb	r3, [r3, #0]
 8011760:	2b5c      	cmp	r3, #92	; 0x5c
 8011762:	d0f0      	beq.n	8011746 <create_name+0x4e>
			break;
 8011764:	e038      	b.n	80117d8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8011766:	7efb      	ldrb	r3, [r7, #27]
 8011768:	2b2e      	cmp	r3, #46	; 0x2e
 801176a:	d003      	beq.n	8011774 <create_name+0x7c>
 801176c:	693a      	ldr	r2, [r7, #16]
 801176e:	697b      	ldr	r3, [r7, #20]
 8011770:	429a      	cmp	r2, r3
 8011772:	d30c      	bcc.n	801178e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8011774:	697b      	ldr	r3, [r7, #20]
 8011776:	2b0b      	cmp	r3, #11
 8011778:	d002      	beq.n	8011780 <create_name+0x88>
 801177a:	7efb      	ldrb	r3, [r7, #27]
 801177c:	2b2e      	cmp	r3, #46	; 0x2e
 801177e:	d001      	beq.n	8011784 <create_name+0x8c>
 8011780:	2306      	movs	r3, #6
 8011782:	e044      	b.n	801180e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8011784:	2308      	movs	r3, #8
 8011786:	613b      	str	r3, [r7, #16]
 8011788:	230b      	movs	r3, #11
 801178a:	617b      	str	r3, [r7, #20]
			continue;
 801178c:	e022      	b.n	80117d4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801178e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011792:	2b00      	cmp	r3, #0
 8011794:	da04      	bge.n	80117a0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8011796:	7efb      	ldrb	r3, [r7, #27]
 8011798:	3b80      	subs	r3, #128	; 0x80
 801179a:	4a1f      	ldr	r2, [pc, #124]	; (8011818 <create_name+0x120>)
 801179c:	5cd3      	ldrb	r3, [r2, r3]
 801179e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80117a0:	7efb      	ldrb	r3, [r7, #27]
 80117a2:	4619      	mov	r1, r3
 80117a4:	481d      	ldr	r0, [pc, #116]	; (801181c <create_name+0x124>)
 80117a6:	f7fe ff6a 	bl	801067e <chk_chr>
 80117aa:	4603      	mov	r3, r0
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d001      	beq.n	80117b4 <create_name+0xbc>
 80117b0:	2306      	movs	r3, #6
 80117b2:	e02c      	b.n	801180e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80117b4:	7efb      	ldrb	r3, [r7, #27]
 80117b6:	2b60      	cmp	r3, #96	; 0x60
 80117b8:	d905      	bls.n	80117c6 <create_name+0xce>
 80117ba:	7efb      	ldrb	r3, [r7, #27]
 80117bc:	2b7a      	cmp	r3, #122	; 0x7a
 80117be:	d802      	bhi.n	80117c6 <create_name+0xce>
 80117c0:	7efb      	ldrb	r3, [r7, #27]
 80117c2:	3b20      	subs	r3, #32
 80117c4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80117c6:	693b      	ldr	r3, [r7, #16]
 80117c8:	1c5a      	adds	r2, r3, #1
 80117ca:	613a      	str	r2, [r7, #16]
 80117cc:	68ba      	ldr	r2, [r7, #8]
 80117ce:	4413      	add	r3, r2
 80117d0:	7efa      	ldrb	r2, [r7, #27]
 80117d2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80117d4:	e7a6      	b.n	8011724 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80117d6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80117d8:	68fa      	ldr	r2, [r7, #12]
 80117da:	69fb      	ldr	r3, [r7, #28]
 80117dc:	441a      	add	r2, r3
 80117de:	683b      	ldr	r3, [r7, #0]
 80117e0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80117e2:	693b      	ldr	r3, [r7, #16]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d101      	bne.n	80117ec <create_name+0xf4>
 80117e8:	2306      	movs	r3, #6
 80117ea:	e010      	b.n	801180e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80117ec:	68bb      	ldr	r3, [r7, #8]
 80117ee:	781b      	ldrb	r3, [r3, #0]
 80117f0:	2be5      	cmp	r3, #229	; 0xe5
 80117f2:	d102      	bne.n	80117fa <create_name+0x102>
 80117f4:	68bb      	ldr	r3, [r7, #8]
 80117f6:	2205      	movs	r2, #5
 80117f8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80117fa:	7efb      	ldrb	r3, [r7, #27]
 80117fc:	2b20      	cmp	r3, #32
 80117fe:	d801      	bhi.n	8011804 <create_name+0x10c>
 8011800:	2204      	movs	r2, #4
 8011802:	e000      	b.n	8011806 <create_name+0x10e>
 8011804:	2200      	movs	r2, #0
 8011806:	68bb      	ldr	r3, [r7, #8]
 8011808:	330b      	adds	r3, #11
 801180a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801180c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801180e:	4618      	mov	r0, r3
 8011810:	3720      	adds	r7, #32
 8011812:	46bd      	mov	sp, r7
 8011814:	bd80      	pop	{r7, pc}
 8011816:	bf00      	nop
 8011818:	08019370 	.word	0x08019370
 801181c:	080192f8 	.word	0x080192f8

08011820 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b086      	sub	sp, #24
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
 8011828:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801182e:	693b      	ldr	r3, [r7, #16]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011834:	e002      	b.n	801183c <follow_path+0x1c>
 8011836:	683b      	ldr	r3, [r7, #0]
 8011838:	3301      	adds	r3, #1
 801183a:	603b      	str	r3, [r7, #0]
 801183c:	683b      	ldr	r3, [r7, #0]
 801183e:	781b      	ldrb	r3, [r3, #0]
 8011840:	2b2f      	cmp	r3, #47	; 0x2f
 8011842:	d0f8      	beq.n	8011836 <follow_path+0x16>
 8011844:	683b      	ldr	r3, [r7, #0]
 8011846:	781b      	ldrb	r3, [r3, #0]
 8011848:	2b5c      	cmp	r3, #92	; 0x5c
 801184a:	d0f4      	beq.n	8011836 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801184c:	693b      	ldr	r3, [r7, #16]
 801184e:	2200      	movs	r2, #0
 8011850:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011852:	683b      	ldr	r3, [r7, #0]
 8011854:	781b      	ldrb	r3, [r3, #0]
 8011856:	2b1f      	cmp	r3, #31
 8011858:	d80a      	bhi.n	8011870 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2280      	movs	r2, #128	; 0x80
 801185e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8011862:	2100      	movs	r1, #0
 8011864:	6878      	ldr	r0, [r7, #4]
 8011866:	f7ff fc7b 	bl	8011160 <dir_sdi>
 801186a:	4603      	mov	r3, r0
 801186c:	75fb      	strb	r3, [r7, #23]
 801186e:	e048      	b.n	8011902 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011870:	463b      	mov	r3, r7
 8011872:	4619      	mov	r1, r3
 8011874:	6878      	ldr	r0, [r7, #4]
 8011876:	f7ff ff3f 	bl	80116f8 <create_name>
 801187a:	4603      	mov	r3, r0
 801187c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801187e:	7dfb      	ldrb	r3, [r7, #23]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d139      	bne.n	80118f8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011884:	6878      	ldr	r0, [r7, #4]
 8011886:	f7ff fe50 	bl	801152a <dir_find>
 801188a:	4603      	mov	r3, r0
 801188c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011894:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011896:	7dfb      	ldrb	r3, [r7, #23]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d00a      	beq.n	80118b2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801189c:	7dfb      	ldrb	r3, [r7, #23]
 801189e:	2b04      	cmp	r3, #4
 80118a0:	d12c      	bne.n	80118fc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80118a2:	7afb      	ldrb	r3, [r7, #11]
 80118a4:	f003 0304 	and.w	r3, r3, #4
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d127      	bne.n	80118fc <follow_path+0xdc>
 80118ac:	2305      	movs	r3, #5
 80118ae:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80118b0:	e024      	b.n	80118fc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80118b2:	7afb      	ldrb	r3, [r7, #11]
 80118b4:	f003 0304 	and.w	r3, r3, #4
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d121      	bne.n	8011900 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80118bc:	693b      	ldr	r3, [r7, #16]
 80118be:	799b      	ldrb	r3, [r3, #6]
 80118c0:	f003 0310 	and.w	r3, r3, #16
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d102      	bne.n	80118ce <follow_path+0xae>
				res = FR_NO_PATH; break;
 80118c8:	2305      	movs	r3, #5
 80118ca:	75fb      	strb	r3, [r7, #23]
 80118cc:	e019      	b.n	8011902 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	695b      	ldr	r3, [r3, #20]
 80118d8:	68fa      	ldr	r2, [r7, #12]
 80118da:	8992      	ldrh	r2, [r2, #12]
 80118dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80118e0:	fb00 f202 	mul.w	r2, r0, r2
 80118e4:	1a9b      	subs	r3, r3, r2
 80118e6:	440b      	add	r3, r1
 80118e8:	4619      	mov	r1, r3
 80118ea:	68f8      	ldr	r0, [r7, #12]
 80118ec:	f7ff fdde 	bl	80114ac <ld_clust>
 80118f0:	4602      	mov	r2, r0
 80118f2:	693b      	ldr	r3, [r7, #16]
 80118f4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80118f6:	e7bb      	b.n	8011870 <follow_path+0x50>
			if (res != FR_OK) break;
 80118f8:	bf00      	nop
 80118fa:	e002      	b.n	8011902 <follow_path+0xe2>
				break;
 80118fc:	bf00      	nop
 80118fe:	e000      	b.n	8011902 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011900:	bf00      	nop
			}
		}
	}

	return res;
 8011902:	7dfb      	ldrb	r3, [r7, #23]
}
 8011904:	4618      	mov	r0, r3
 8011906:	3718      	adds	r7, #24
 8011908:	46bd      	mov	sp, r7
 801190a:	bd80      	pop	{r7, pc}

0801190c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801190c:	b480      	push	{r7}
 801190e:	b087      	sub	sp, #28
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011914:	f04f 33ff 	mov.w	r3, #4294967295
 8011918:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d031      	beq.n	8011986 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	617b      	str	r3, [r7, #20]
 8011928:	e002      	b.n	8011930 <get_ldnumber+0x24>
 801192a:	697b      	ldr	r3, [r7, #20]
 801192c:	3301      	adds	r3, #1
 801192e:	617b      	str	r3, [r7, #20]
 8011930:	697b      	ldr	r3, [r7, #20]
 8011932:	781b      	ldrb	r3, [r3, #0]
 8011934:	2b20      	cmp	r3, #32
 8011936:	d903      	bls.n	8011940 <get_ldnumber+0x34>
 8011938:	697b      	ldr	r3, [r7, #20]
 801193a:	781b      	ldrb	r3, [r3, #0]
 801193c:	2b3a      	cmp	r3, #58	; 0x3a
 801193e:	d1f4      	bne.n	801192a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011940:	697b      	ldr	r3, [r7, #20]
 8011942:	781b      	ldrb	r3, [r3, #0]
 8011944:	2b3a      	cmp	r3, #58	; 0x3a
 8011946:	d11c      	bne.n	8011982 <get_ldnumber+0x76>
			tp = *path;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	1c5a      	adds	r2, r3, #1
 8011952:	60fa      	str	r2, [r7, #12]
 8011954:	781b      	ldrb	r3, [r3, #0]
 8011956:	3b30      	subs	r3, #48	; 0x30
 8011958:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801195a:	68bb      	ldr	r3, [r7, #8]
 801195c:	2b09      	cmp	r3, #9
 801195e:	d80e      	bhi.n	801197e <get_ldnumber+0x72>
 8011960:	68fa      	ldr	r2, [r7, #12]
 8011962:	697b      	ldr	r3, [r7, #20]
 8011964:	429a      	cmp	r2, r3
 8011966:	d10a      	bne.n	801197e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011968:	68bb      	ldr	r3, [r7, #8]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d107      	bne.n	801197e <get_ldnumber+0x72>
					vol = (int)i;
 801196e:	68bb      	ldr	r3, [r7, #8]
 8011970:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011972:	697b      	ldr	r3, [r7, #20]
 8011974:	3301      	adds	r3, #1
 8011976:	617b      	str	r3, [r7, #20]
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	697a      	ldr	r2, [r7, #20]
 801197c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801197e:	693b      	ldr	r3, [r7, #16]
 8011980:	e002      	b.n	8011988 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011982:	2300      	movs	r3, #0
 8011984:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011986:	693b      	ldr	r3, [r7, #16]
}
 8011988:	4618      	mov	r0, r3
 801198a:	371c      	adds	r7, #28
 801198c:	46bd      	mov	sp, r7
 801198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011992:	4770      	bx	lr

08011994 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b082      	sub	sp, #8
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
 801199c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	2200      	movs	r2, #0
 80119a2:	70da      	strb	r2, [r3, #3]
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	f04f 32ff 	mov.w	r2, #4294967295
 80119aa:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80119ac:	6839      	ldr	r1, [r7, #0]
 80119ae:	6878      	ldr	r0, [r7, #4]
 80119b0:	f7fe fff4 	bl	801099c <move_window>
 80119b4:	4603      	mov	r3, r0
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d001      	beq.n	80119be <check_fs+0x2a>
 80119ba:	2304      	movs	r3, #4
 80119bc:	e038      	b.n	8011a30 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	3334      	adds	r3, #52	; 0x34
 80119c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80119c6:	4618      	mov	r0, r3
 80119c8:	f7fe fd74 	bl	80104b4 <ld_word>
 80119cc:	4603      	mov	r3, r0
 80119ce:	461a      	mov	r2, r3
 80119d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80119d4:	429a      	cmp	r2, r3
 80119d6:	d001      	beq.n	80119dc <check_fs+0x48>
 80119d8:	2303      	movs	r3, #3
 80119da:	e029      	b.n	8011a30 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80119e2:	2be9      	cmp	r3, #233	; 0xe9
 80119e4:	d009      	beq.n	80119fa <check_fs+0x66>
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80119ec:	2beb      	cmp	r3, #235	; 0xeb
 80119ee:	d11e      	bne.n	8011a2e <check_fs+0x9a>
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80119f6:	2b90      	cmp	r3, #144	; 0x90
 80119f8:	d119      	bne.n	8011a2e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	3334      	adds	r3, #52	; 0x34
 80119fe:	3336      	adds	r3, #54	; 0x36
 8011a00:	4618      	mov	r0, r3
 8011a02:	f7fe fd6f 	bl	80104e4 <ld_dword>
 8011a06:	4603      	mov	r3, r0
 8011a08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011a0c:	4a0a      	ldr	r2, [pc, #40]	; (8011a38 <check_fs+0xa4>)
 8011a0e:	4293      	cmp	r3, r2
 8011a10:	d101      	bne.n	8011a16 <check_fs+0x82>
 8011a12:	2300      	movs	r3, #0
 8011a14:	e00c      	b.n	8011a30 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	3334      	adds	r3, #52	; 0x34
 8011a1a:	3352      	adds	r3, #82	; 0x52
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f7fe fd61 	bl	80104e4 <ld_dword>
 8011a22:	4603      	mov	r3, r0
 8011a24:	4a05      	ldr	r2, [pc, #20]	; (8011a3c <check_fs+0xa8>)
 8011a26:	4293      	cmp	r3, r2
 8011a28:	d101      	bne.n	8011a2e <check_fs+0x9a>
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	e000      	b.n	8011a30 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011a2e:	2302      	movs	r3, #2
}
 8011a30:	4618      	mov	r0, r3
 8011a32:	3708      	adds	r7, #8
 8011a34:	46bd      	mov	sp, r7
 8011a36:	bd80      	pop	{r7, pc}
 8011a38:	00544146 	.word	0x00544146
 8011a3c:	33544146 	.word	0x33544146

08011a40 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b096      	sub	sp, #88	; 0x58
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	60f8      	str	r0, [r7, #12]
 8011a48:	60b9      	str	r1, [r7, #8]
 8011a4a:	4613      	mov	r3, r2
 8011a4c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011a4e:	68bb      	ldr	r3, [r7, #8]
 8011a50:	2200      	movs	r2, #0
 8011a52:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011a54:	68f8      	ldr	r0, [r7, #12]
 8011a56:	f7ff ff59 	bl	801190c <get_ldnumber>
 8011a5a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	da01      	bge.n	8011a66 <find_volume+0x26>
 8011a62:	230b      	movs	r3, #11
 8011a64:	e262      	b.n	8011f2c <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011a66:	4a9f      	ldr	r2, [pc, #636]	; (8011ce4 <find_volume+0x2a4>)
 8011a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a6e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d101      	bne.n	8011a7a <find_volume+0x3a>
 8011a76:	230c      	movs	r3, #12
 8011a78:	e258      	b.n	8011f2c <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8011a7a:	68bb      	ldr	r3, [r7, #8]
 8011a7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a7e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011a80:	79fb      	ldrb	r3, [r7, #7]
 8011a82:	f023 0301 	bic.w	r3, r3, #1
 8011a86:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a8a:	781b      	ldrb	r3, [r3, #0]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d01a      	beq.n	8011ac6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a92:	785b      	ldrb	r3, [r3, #1]
 8011a94:	4618      	mov	r0, r3
 8011a96:	f7fe fc6f 	bl	8010378 <disk_status>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011aa0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011aa4:	f003 0301 	and.w	r3, r3, #1
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d10c      	bne.n	8011ac6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011aac:	79fb      	ldrb	r3, [r7, #7]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d007      	beq.n	8011ac2 <find_volume+0x82>
 8011ab2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ab6:	f003 0304 	and.w	r3, r3, #4
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d001      	beq.n	8011ac2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011abe:	230a      	movs	r3, #10
 8011ac0:	e234      	b.n	8011f2c <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	e232      	b.n	8011f2c <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ac8:	2200      	movs	r2, #0
 8011aca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ace:	b2da      	uxtb	r2, r3
 8011ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ad2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ad6:	785b      	ldrb	r3, [r3, #1]
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f7fe fc67 	bl	80103ac <disk_initialize>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011ae4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ae8:	f003 0301 	and.w	r3, r3, #1
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d001      	beq.n	8011af4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011af0:	2303      	movs	r3, #3
 8011af2:	e21b      	b.n	8011f2c <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011af4:	79fb      	ldrb	r3, [r7, #7]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d007      	beq.n	8011b0a <find_volume+0xca>
 8011afa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011afe:	f003 0304 	and.w	r3, r3, #4
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d001      	beq.n	8011b0a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8011b06:	230a      	movs	r3, #10
 8011b08:	e210      	b.n	8011f2c <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8011b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b0c:	7858      	ldrb	r0, [r3, #1]
 8011b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b10:	330c      	adds	r3, #12
 8011b12:	461a      	mov	r2, r3
 8011b14:	2102      	movs	r1, #2
 8011b16:	f7fe fcaf 	bl	8010478 <disk_ioctl>
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d001      	beq.n	8011b24 <find_volume+0xe4>
 8011b20:	2301      	movs	r3, #1
 8011b22:	e203      	b.n	8011f2c <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8011b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b26:	899b      	ldrh	r3, [r3, #12]
 8011b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011b2c:	d80d      	bhi.n	8011b4a <find_volume+0x10a>
 8011b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b30:	899b      	ldrh	r3, [r3, #12]
 8011b32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b36:	d308      	bcc.n	8011b4a <find_volume+0x10a>
 8011b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b3a:	899b      	ldrh	r3, [r3, #12]
 8011b3c:	461a      	mov	r2, r3
 8011b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b40:	899b      	ldrh	r3, [r3, #12]
 8011b42:	3b01      	subs	r3, #1
 8011b44:	4013      	ands	r3, r2
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d001      	beq.n	8011b4e <find_volume+0x10e>
 8011b4a:	2301      	movs	r3, #1
 8011b4c:	e1ee      	b.n	8011f2c <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011b4e:	2300      	movs	r3, #0
 8011b50:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011b52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011b54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011b56:	f7ff ff1d 	bl	8011994 <check_fs>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011b60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011b64:	2b02      	cmp	r3, #2
 8011b66:	d149      	bne.n	8011bfc <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011b68:	2300      	movs	r3, #0
 8011b6a:	643b      	str	r3, [r7, #64]	; 0x40
 8011b6c:	e01e      	b.n	8011bac <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b70:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b76:	011b      	lsls	r3, r3, #4
 8011b78:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011b7c:	4413      	add	r3, r2
 8011b7e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b82:	3304      	adds	r3, #4
 8011b84:	781b      	ldrb	r3, [r3, #0]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d006      	beq.n	8011b98 <find_volume+0x158>
 8011b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b8c:	3308      	adds	r3, #8
 8011b8e:	4618      	mov	r0, r3
 8011b90:	f7fe fca8 	bl	80104e4 <ld_dword>
 8011b94:	4602      	mov	r2, r0
 8011b96:	e000      	b.n	8011b9a <find_volume+0x15a>
 8011b98:	2200      	movs	r2, #0
 8011b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b9c:	009b      	lsls	r3, r3, #2
 8011b9e:	3358      	adds	r3, #88	; 0x58
 8011ba0:	443b      	add	r3, r7
 8011ba2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ba8:	3301      	adds	r3, #1
 8011baa:	643b      	str	r3, [r7, #64]	; 0x40
 8011bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011bae:	2b03      	cmp	r3, #3
 8011bb0:	d9dd      	bls.n	8011b6e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d002      	beq.n	8011bc2 <find_volume+0x182>
 8011bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011bbe:	3b01      	subs	r3, #1
 8011bc0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011bc4:	009b      	lsls	r3, r3, #2
 8011bc6:	3358      	adds	r3, #88	; 0x58
 8011bc8:	443b      	add	r3, r7
 8011bca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011bce:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d005      	beq.n	8011be2 <find_volume+0x1a2>
 8011bd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011bd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011bda:	f7ff fedb 	bl	8011994 <check_fs>
 8011bde:	4603      	mov	r3, r0
 8011be0:	e000      	b.n	8011be4 <find_volume+0x1a4>
 8011be2:	2303      	movs	r3, #3
 8011be4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011be8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011bec:	2b01      	cmp	r3, #1
 8011bee:	d905      	bls.n	8011bfc <find_volume+0x1bc>
 8011bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011bf2:	3301      	adds	r3, #1
 8011bf4:	643b      	str	r3, [r7, #64]	; 0x40
 8011bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011bf8:	2b03      	cmp	r3, #3
 8011bfa:	d9e2      	bls.n	8011bc2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011bfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011c00:	2b04      	cmp	r3, #4
 8011c02:	d101      	bne.n	8011c08 <find_volume+0x1c8>
 8011c04:	2301      	movs	r3, #1
 8011c06:	e191      	b.n	8011f2c <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011c08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011c0c:	2b01      	cmp	r3, #1
 8011c0e:	d901      	bls.n	8011c14 <find_volume+0x1d4>
 8011c10:	230d      	movs	r3, #13
 8011c12:	e18b      	b.n	8011f2c <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c16:	3334      	adds	r3, #52	; 0x34
 8011c18:	330b      	adds	r3, #11
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	f7fe fc4a 	bl	80104b4 <ld_word>
 8011c20:	4603      	mov	r3, r0
 8011c22:	461a      	mov	r2, r3
 8011c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c26:	899b      	ldrh	r3, [r3, #12]
 8011c28:	429a      	cmp	r2, r3
 8011c2a:	d001      	beq.n	8011c30 <find_volume+0x1f0>
 8011c2c:	230d      	movs	r3, #13
 8011c2e:	e17d      	b.n	8011f2c <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c32:	3334      	adds	r3, #52	; 0x34
 8011c34:	3316      	adds	r3, #22
 8011c36:	4618      	mov	r0, r3
 8011c38:	f7fe fc3c 	bl	80104b4 <ld_word>
 8011c3c:	4603      	mov	r3, r0
 8011c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d106      	bne.n	8011c54 <find_volume+0x214>
 8011c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c48:	3334      	adds	r3, #52	; 0x34
 8011c4a:	3324      	adds	r3, #36	; 0x24
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f7fe fc49 	bl	80104e4 <ld_dword>
 8011c52:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011c58:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c5c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8011c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c62:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c66:	789b      	ldrb	r3, [r3, #2]
 8011c68:	2b01      	cmp	r3, #1
 8011c6a:	d005      	beq.n	8011c78 <find_volume+0x238>
 8011c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c6e:	789b      	ldrb	r3, [r3, #2]
 8011c70:	2b02      	cmp	r3, #2
 8011c72:	d001      	beq.n	8011c78 <find_volume+0x238>
 8011c74:	230d      	movs	r3, #13
 8011c76:	e159      	b.n	8011f2c <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c7a:	789b      	ldrb	r3, [r3, #2]
 8011c7c:	461a      	mov	r2, r3
 8011c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c80:	fb02 f303 	mul.w	r3, r2, r3
 8011c84:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011c8c:	b29a      	uxth	r2, r3
 8011c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c90:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c94:	895b      	ldrh	r3, [r3, #10]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d008      	beq.n	8011cac <find_volume+0x26c>
 8011c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c9c:	895b      	ldrh	r3, [r3, #10]
 8011c9e:	461a      	mov	r2, r3
 8011ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ca2:	895b      	ldrh	r3, [r3, #10]
 8011ca4:	3b01      	subs	r3, #1
 8011ca6:	4013      	ands	r3, r2
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d001      	beq.n	8011cb0 <find_volume+0x270>
 8011cac:	230d      	movs	r3, #13
 8011cae:	e13d      	b.n	8011f2c <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cb2:	3334      	adds	r3, #52	; 0x34
 8011cb4:	3311      	adds	r3, #17
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	f7fe fbfc 	bl	80104b4 <ld_word>
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	461a      	mov	r2, r3
 8011cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cc2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cc6:	891b      	ldrh	r3, [r3, #8]
 8011cc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011cca:	8992      	ldrh	r2, [r2, #12]
 8011ccc:	0952      	lsrs	r2, r2, #5
 8011cce:	b292      	uxth	r2, r2
 8011cd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8011cd4:	fb01 f202 	mul.w	r2, r1, r2
 8011cd8:	1a9b      	subs	r3, r3, r2
 8011cda:	b29b      	uxth	r3, r3
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d003      	beq.n	8011ce8 <find_volume+0x2a8>
 8011ce0:	230d      	movs	r3, #13
 8011ce2:	e123      	b.n	8011f2c <find_volume+0x4ec>
 8011ce4:	2000659c 	.word	0x2000659c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cea:	3334      	adds	r3, #52	; 0x34
 8011cec:	3313      	adds	r3, #19
 8011cee:	4618      	mov	r0, r3
 8011cf0:	f7fe fbe0 	bl	80104b4 <ld_word>
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011cf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d106      	bne.n	8011d0c <find_volume+0x2cc>
 8011cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d00:	3334      	adds	r3, #52	; 0x34
 8011d02:	3320      	adds	r3, #32
 8011d04:	4618      	mov	r0, r3
 8011d06:	f7fe fbed 	bl	80104e4 <ld_dword>
 8011d0a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d0e:	3334      	adds	r3, #52	; 0x34
 8011d10:	330e      	adds	r3, #14
 8011d12:	4618      	mov	r0, r3
 8011d14:	f7fe fbce 	bl	80104b4 <ld_word>
 8011d18:	4603      	mov	r3, r0
 8011d1a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011d1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d101      	bne.n	8011d26 <find_volume+0x2e6>
 8011d22:	230d      	movs	r3, #13
 8011d24:	e102      	b.n	8011f2c <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011d26:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d2a:	4413      	add	r3, r2
 8011d2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d2e:	8911      	ldrh	r1, [r2, #8]
 8011d30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d32:	8992      	ldrh	r2, [r2, #12]
 8011d34:	0952      	lsrs	r2, r2, #5
 8011d36:	b292      	uxth	r2, r2
 8011d38:	fbb1 f2f2 	udiv	r2, r1, r2
 8011d3c:	b292      	uxth	r2, r2
 8011d3e:	4413      	add	r3, r2
 8011d40:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011d42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d46:	429a      	cmp	r2, r3
 8011d48:	d201      	bcs.n	8011d4e <find_volume+0x30e>
 8011d4a:	230d      	movs	r3, #13
 8011d4c:	e0ee      	b.n	8011f2c <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011d4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d52:	1ad3      	subs	r3, r2, r3
 8011d54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d56:	8952      	ldrh	r2, [r2, #10]
 8011d58:	fbb3 f3f2 	udiv	r3, r3, r2
 8011d5c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d101      	bne.n	8011d68 <find_volume+0x328>
 8011d64:	230d      	movs	r3, #13
 8011d66:	e0e1      	b.n	8011f2c <find_volume+0x4ec>
		fmt = FS_FAT32;
 8011d68:	2303      	movs	r3, #3
 8011d6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d70:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011d74:	4293      	cmp	r3, r2
 8011d76:	d802      	bhi.n	8011d7e <find_volume+0x33e>
 8011d78:	2302      	movs	r3, #2
 8011d7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d80:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011d84:	4293      	cmp	r3, r2
 8011d86:	d802      	bhi.n	8011d8e <find_volume+0x34e>
 8011d88:	2301      	movs	r3, #1
 8011d8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d90:	1c9a      	adds	r2, r3, #2
 8011d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d94:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8011d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011d9a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011d9c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011da0:	441a      	add	r2, r3
 8011da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011da4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8011da6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011daa:	441a      	add	r2, r3
 8011dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dae:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8011db0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011db4:	2b03      	cmp	r3, #3
 8011db6:	d11e      	bne.n	8011df6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dba:	3334      	adds	r3, #52	; 0x34
 8011dbc:	332a      	adds	r3, #42	; 0x2a
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	f7fe fb78 	bl	80104b4 <ld_word>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d001      	beq.n	8011dce <find_volume+0x38e>
 8011dca:	230d      	movs	r3, #13
 8011dcc:	e0ae      	b.n	8011f2c <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dd0:	891b      	ldrh	r3, [r3, #8]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d001      	beq.n	8011dda <find_volume+0x39a>
 8011dd6:	230d      	movs	r3, #13
 8011dd8:	e0a8      	b.n	8011f2c <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ddc:	3334      	adds	r3, #52	; 0x34
 8011dde:	332c      	adds	r3, #44	; 0x2c
 8011de0:	4618      	mov	r0, r3
 8011de2:	f7fe fb7f 	bl	80104e4 <ld_dword>
 8011de6:	4602      	mov	r2, r0
 8011de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dea:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dee:	699b      	ldr	r3, [r3, #24]
 8011df0:	009b      	lsls	r3, r3, #2
 8011df2:	647b      	str	r3, [r7, #68]	; 0x44
 8011df4:	e01f      	b.n	8011e36 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011df8:	891b      	ldrh	r3, [r3, #8]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d101      	bne.n	8011e02 <find_volume+0x3c2>
 8011dfe:	230d      	movs	r3, #13
 8011e00:	e094      	b.n	8011f2c <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e08:	441a      	add	r2, r3
 8011e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e0c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011e0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e12:	2b02      	cmp	r3, #2
 8011e14:	d103      	bne.n	8011e1e <find_volume+0x3de>
 8011e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e18:	699b      	ldr	r3, [r3, #24]
 8011e1a:	005b      	lsls	r3, r3, #1
 8011e1c:	e00a      	b.n	8011e34 <find_volume+0x3f4>
 8011e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e20:	699a      	ldr	r2, [r3, #24]
 8011e22:	4613      	mov	r3, r2
 8011e24:	005b      	lsls	r3, r3, #1
 8011e26:	4413      	add	r3, r2
 8011e28:	085a      	lsrs	r2, r3, #1
 8011e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e2c:	699b      	ldr	r3, [r3, #24]
 8011e2e:	f003 0301 	and.w	r3, r3, #1
 8011e32:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011e34:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e38:	69da      	ldr	r2, [r3, #28]
 8011e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e3c:	899b      	ldrh	r3, [r3, #12]
 8011e3e:	4619      	mov	r1, r3
 8011e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e42:	440b      	add	r3, r1
 8011e44:	3b01      	subs	r3, #1
 8011e46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011e48:	8989      	ldrh	r1, [r1, #12]
 8011e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e4e:	429a      	cmp	r2, r3
 8011e50:	d201      	bcs.n	8011e56 <find_volume+0x416>
 8011e52:	230d      	movs	r3, #13
 8011e54:	e06a      	b.n	8011f2c <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e58:	f04f 32ff 	mov.w	r2, #4294967295
 8011e5c:	615a      	str	r2, [r3, #20]
 8011e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e60:	695a      	ldr	r2, [r3, #20]
 8011e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e64:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8011e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e68:	2280      	movs	r2, #128	; 0x80
 8011e6a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011e6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e70:	2b03      	cmp	r3, #3
 8011e72:	d149      	bne.n	8011f08 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e76:	3334      	adds	r3, #52	; 0x34
 8011e78:	3330      	adds	r3, #48	; 0x30
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f7fe fb1a 	bl	80104b4 <ld_word>
 8011e80:	4603      	mov	r3, r0
 8011e82:	2b01      	cmp	r3, #1
 8011e84:	d140      	bne.n	8011f08 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011e86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e88:	3301      	adds	r3, #1
 8011e8a:	4619      	mov	r1, r3
 8011e8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011e8e:	f7fe fd85 	bl	801099c <move_window>
 8011e92:	4603      	mov	r3, r0
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d137      	bne.n	8011f08 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8011e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e9a:	2200      	movs	r2, #0
 8011e9c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ea0:	3334      	adds	r3, #52	; 0x34
 8011ea2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	f7fe fb04 	bl	80104b4 <ld_word>
 8011eac:	4603      	mov	r3, r0
 8011eae:	461a      	mov	r2, r3
 8011eb0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011eb4:	429a      	cmp	r2, r3
 8011eb6:	d127      	bne.n	8011f08 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eba:	3334      	adds	r3, #52	; 0x34
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	f7fe fb11 	bl	80104e4 <ld_dword>
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	4a1b      	ldr	r2, [pc, #108]	; (8011f34 <find_volume+0x4f4>)
 8011ec6:	4293      	cmp	r3, r2
 8011ec8:	d11e      	bne.n	8011f08 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ecc:	3334      	adds	r3, #52	; 0x34
 8011ece:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f7fe fb06 	bl	80104e4 <ld_dword>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	4a17      	ldr	r2, [pc, #92]	; (8011f38 <find_volume+0x4f8>)
 8011edc:	4293      	cmp	r3, r2
 8011ede:	d113      	bne.n	8011f08 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ee2:	3334      	adds	r3, #52	; 0x34
 8011ee4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011ee8:	4618      	mov	r0, r3
 8011eea:	f7fe fafb 	bl	80104e4 <ld_dword>
 8011eee:	4602      	mov	r2, r0
 8011ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ef2:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ef6:	3334      	adds	r3, #52	; 0x34
 8011ef8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011efc:	4618      	mov	r0, r3
 8011efe:	f7fe faf1 	bl	80104e4 <ld_dword>
 8011f02:	4602      	mov	r2, r0
 8011f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f06:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f0a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011f0e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011f10:	4b0a      	ldr	r3, [pc, #40]	; (8011f3c <find_volume+0x4fc>)
 8011f12:	881b      	ldrh	r3, [r3, #0]
 8011f14:	3301      	adds	r3, #1
 8011f16:	b29a      	uxth	r2, r3
 8011f18:	4b08      	ldr	r3, [pc, #32]	; (8011f3c <find_volume+0x4fc>)
 8011f1a:	801a      	strh	r2, [r3, #0]
 8011f1c:	4b07      	ldr	r3, [pc, #28]	; (8011f3c <find_volume+0x4fc>)
 8011f1e:	881a      	ldrh	r2, [r3, #0]
 8011f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f22:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011f24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011f26:	f7fe fcd1 	bl	80108cc <clear_lock>
#endif
	return FR_OK;
 8011f2a:	2300      	movs	r3, #0
}
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	3758      	adds	r7, #88	; 0x58
 8011f30:	46bd      	mov	sp, r7
 8011f32:	bd80      	pop	{r7, pc}
 8011f34:	41615252 	.word	0x41615252
 8011f38:	61417272 	.word	0x61417272
 8011f3c:	200065a0 	.word	0x200065a0

08011f40 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b084      	sub	sp, #16
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
 8011f48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011f4a:	2309      	movs	r3, #9
 8011f4c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d01c      	beq.n	8011f8e <validate+0x4e>
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d018      	beq.n	8011f8e <validate+0x4e>
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	781b      	ldrb	r3, [r3, #0]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d013      	beq.n	8011f8e <validate+0x4e>
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	889a      	ldrh	r2, [r3, #4]
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	88db      	ldrh	r3, [r3, #6]
 8011f70:	429a      	cmp	r2, r3
 8011f72:	d10c      	bne.n	8011f8e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	785b      	ldrb	r3, [r3, #1]
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	f7fe f9fc 	bl	8010378 <disk_status>
 8011f80:	4603      	mov	r3, r0
 8011f82:	f003 0301 	and.w	r3, r3, #1
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d101      	bne.n	8011f8e <validate+0x4e>
			res = FR_OK;
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011f8e:	7bfb      	ldrb	r3, [r7, #15]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d102      	bne.n	8011f9a <validate+0x5a>
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	e000      	b.n	8011f9c <validate+0x5c>
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	683a      	ldr	r2, [r7, #0]
 8011f9e:	6013      	str	r3, [r2, #0]
	return res;
 8011fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	3710      	adds	r7, #16
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bd80      	pop	{r7, pc}
	...

08011fac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b088      	sub	sp, #32
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	60f8      	str	r0, [r7, #12]
 8011fb4:	60b9      	str	r1, [r7, #8]
 8011fb6:	4613      	mov	r3, r2
 8011fb8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011fba:	68bb      	ldr	r3, [r7, #8]
 8011fbc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011fbe:	f107 0310 	add.w	r3, r7, #16
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	f7ff fca2 	bl	801190c <get_ldnumber>
 8011fc8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011fca:	69fb      	ldr	r3, [r7, #28]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	da01      	bge.n	8011fd4 <f_mount+0x28>
 8011fd0:	230b      	movs	r3, #11
 8011fd2:	e02b      	b.n	801202c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011fd4:	4a17      	ldr	r2, [pc, #92]	; (8012034 <f_mount+0x88>)
 8011fd6:	69fb      	ldr	r3, [r7, #28]
 8011fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011fdc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011fde:	69bb      	ldr	r3, [r7, #24]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d005      	beq.n	8011ff0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011fe4:	69b8      	ldr	r0, [r7, #24]
 8011fe6:	f7fe fc71 	bl	80108cc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011fea:	69bb      	ldr	r3, [r7, #24]
 8011fec:	2200      	movs	r2, #0
 8011fee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d002      	beq.n	8011ffc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011ffc:	68fa      	ldr	r2, [r7, #12]
 8011ffe:	490d      	ldr	r1, [pc, #52]	; (8012034 <f_mount+0x88>)
 8012000:	69fb      	ldr	r3, [r7, #28]
 8012002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d002      	beq.n	8012012 <f_mount+0x66>
 801200c:	79fb      	ldrb	r3, [r7, #7]
 801200e:	2b01      	cmp	r3, #1
 8012010:	d001      	beq.n	8012016 <f_mount+0x6a>
 8012012:	2300      	movs	r3, #0
 8012014:	e00a      	b.n	801202c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012016:	f107 010c 	add.w	r1, r7, #12
 801201a:	f107 0308 	add.w	r3, r7, #8
 801201e:	2200      	movs	r2, #0
 8012020:	4618      	mov	r0, r3
 8012022:	f7ff fd0d 	bl	8011a40 <find_volume>
 8012026:	4603      	mov	r3, r0
 8012028:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801202a:	7dfb      	ldrb	r3, [r7, #23]
}
 801202c:	4618      	mov	r0, r3
 801202e:	3720      	adds	r7, #32
 8012030:	46bd      	mov	sp, r7
 8012032:	bd80      	pop	{r7, pc}
 8012034:	2000659c 	.word	0x2000659c

08012038 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012038:	b580      	push	{r7, lr}
 801203a:	b098      	sub	sp, #96	; 0x60
 801203c:	af00      	add	r7, sp, #0
 801203e:	60f8      	str	r0, [r7, #12]
 8012040:	60b9      	str	r1, [r7, #8]
 8012042:	4613      	mov	r3, r2
 8012044:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d101      	bne.n	8012050 <f_open+0x18>
 801204c:	2309      	movs	r3, #9
 801204e:	e1bb      	b.n	80123c8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012050:	79fb      	ldrb	r3, [r7, #7]
 8012052:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012056:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012058:	79fa      	ldrb	r2, [r7, #7]
 801205a:	f107 0110 	add.w	r1, r7, #16
 801205e:	f107 0308 	add.w	r3, r7, #8
 8012062:	4618      	mov	r0, r3
 8012064:	f7ff fcec 	bl	8011a40 <find_volume>
 8012068:	4603      	mov	r3, r0
 801206a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801206e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012072:	2b00      	cmp	r3, #0
 8012074:	f040 819f 	bne.w	80123b6 <f_open+0x37e>
		dj.obj.fs = fs;
 8012078:	693b      	ldr	r3, [r7, #16]
 801207a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801207c:	68ba      	ldr	r2, [r7, #8]
 801207e:	f107 0314 	add.w	r3, r7, #20
 8012082:	4611      	mov	r1, r2
 8012084:	4618      	mov	r0, r3
 8012086:	f7ff fbcb 	bl	8011820 <follow_path>
 801208a:	4603      	mov	r3, r0
 801208c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012090:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012094:	2b00      	cmp	r3, #0
 8012096:	d11a      	bne.n	80120ce <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012098:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801209c:	b25b      	sxtb	r3, r3
 801209e:	2b00      	cmp	r3, #0
 80120a0:	da03      	bge.n	80120aa <f_open+0x72>
				res = FR_INVALID_NAME;
 80120a2:	2306      	movs	r3, #6
 80120a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80120a8:	e011      	b.n	80120ce <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80120aa:	79fb      	ldrb	r3, [r7, #7]
 80120ac:	f023 0301 	bic.w	r3, r3, #1
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	bf14      	ite	ne
 80120b4:	2301      	movne	r3, #1
 80120b6:	2300      	moveq	r3, #0
 80120b8:	b2db      	uxtb	r3, r3
 80120ba:	461a      	mov	r2, r3
 80120bc:	f107 0314 	add.w	r3, r7, #20
 80120c0:	4611      	mov	r1, r2
 80120c2:	4618      	mov	r0, r3
 80120c4:	f7fe faf6 	bl	80106b4 <chk_lock>
 80120c8:	4603      	mov	r3, r0
 80120ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80120ce:	79fb      	ldrb	r3, [r7, #7]
 80120d0:	f003 031c 	and.w	r3, r3, #28
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d07f      	beq.n	80121d8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80120d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d017      	beq.n	8012110 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80120e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80120e4:	2b04      	cmp	r3, #4
 80120e6:	d10e      	bne.n	8012106 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80120e8:	f7fe fb40 	bl	801076c <enq_lock>
 80120ec:	4603      	mov	r3, r0
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d006      	beq.n	8012100 <f_open+0xc8>
 80120f2:	f107 0314 	add.w	r3, r7, #20
 80120f6:	4618      	mov	r0, r3
 80120f8:	f7ff fa6c 	bl	80115d4 <dir_register>
 80120fc:	4603      	mov	r3, r0
 80120fe:	e000      	b.n	8012102 <f_open+0xca>
 8012100:	2312      	movs	r3, #18
 8012102:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012106:	79fb      	ldrb	r3, [r7, #7]
 8012108:	f043 0308 	orr.w	r3, r3, #8
 801210c:	71fb      	strb	r3, [r7, #7]
 801210e:	e010      	b.n	8012132 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012110:	7ebb      	ldrb	r3, [r7, #26]
 8012112:	f003 0311 	and.w	r3, r3, #17
 8012116:	2b00      	cmp	r3, #0
 8012118:	d003      	beq.n	8012122 <f_open+0xea>
					res = FR_DENIED;
 801211a:	2307      	movs	r3, #7
 801211c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012120:	e007      	b.n	8012132 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012122:	79fb      	ldrb	r3, [r7, #7]
 8012124:	f003 0304 	and.w	r3, r3, #4
 8012128:	2b00      	cmp	r3, #0
 801212a:	d002      	beq.n	8012132 <f_open+0xfa>
 801212c:	2308      	movs	r3, #8
 801212e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012132:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012136:	2b00      	cmp	r3, #0
 8012138:	d168      	bne.n	801220c <f_open+0x1d4>
 801213a:	79fb      	ldrb	r3, [r7, #7]
 801213c:	f003 0308 	and.w	r3, r3, #8
 8012140:	2b00      	cmp	r3, #0
 8012142:	d063      	beq.n	801220c <f_open+0x1d4>
				dw = GET_FATTIME();
 8012144:	f7fd fee4 	bl	800ff10 <get_fattime>
 8012148:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801214a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801214c:	330e      	adds	r3, #14
 801214e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012150:	4618      	mov	r0, r3
 8012152:	f7fe fa05 	bl	8010560 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012158:	3316      	adds	r3, #22
 801215a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801215c:	4618      	mov	r0, r3
 801215e:	f7fe f9ff 	bl	8010560 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012164:	330b      	adds	r3, #11
 8012166:	2220      	movs	r2, #32
 8012168:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801216a:	693b      	ldr	r3, [r7, #16]
 801216c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801216e:	4611      	mov	r1, r2
 8012170:	4618      	mov	r0, r3
 8012172:	f7ff f99b 	bl	80114ac <ld_clust>
 8012176:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012178:	693b      	ldr	r3, [r7, #16]
 801217a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801217c:	2200      	movs	r2, #0
 801217e:	4618      	mov	r0, r3
 8012180:	f7ff f9b3 	bl	80114ea <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012186:	331c      	adds	r3, #28
 8012188:	2100      	movs	r1, #0
 801218a:	4618      	mov	r0, r3
 801218c:	f7fe f9e8 	bl	8010560 <st_dword>
					fs->wflag = 1;
 8012190:	693b      	ldr	r3, [r7, #16]
 8012192:	2201      	movs	r2, #1
 8012194:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012198:	2b00      	cmp	r3, #0
 801219a:	d037      	beq.n	801220c <f_open+0x1d4>
						dw = fs->winsect;
 801219c:	693b      	ldr	r3, [r7, #16]
 801219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121a0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80121a2:	f107 0314 	add.w	r3, r7, #20
 80121a6:	2200      	movs	r2, #0
 80121a8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80121aa:	4618      	mov	r0, r3
 80121ac:	f7fe fea3 	bl	8010ef6 <remove_chain>
 80121b0:	4603      	mov	r3, r0
 80121b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80121b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d126      	bne.n	801220c <f_open+0x1d4>
							res = move_window(fs, dw);
 80121be:	693b      	ldr	r3, [r7, #16]
 80121c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80121c2:	4618      	mov	r0, r3
 80121c4:	f7fe fbea 	bl	801099c <move_window>
 80121c8:	4603      	mov	r3, r0
 80121ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80121ce:	693b      	ldr	r3, [r7, #16]
 80121d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80121d2:	3a01      	subs	r2, #1
 80121d4:	611a      	str	r2, [r3, #16]
 80121d6:	e019      	b.n	801220c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80121d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d115      	bne.n	801220c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80121e0:	7ebb      	ldrb	r3, [r7, #26]
 80121e2:	f003 0310 	and.w	r3, r3, #16
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d003      	beq.n	80121f2 <f_open+0x1ba>
					res = FR_NO_FILE;
 80121ea:	2304      	movs	r3, #4
 80121ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80121f0:	e00c      	b.n	801220c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80121f2:	79fb      	ldrb	r3, [r7, #7]
 80121f4:	f003 0302 	and.w	r3, r3, #2
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d007      	beq.n	801220c <f_open+0x1d4>
 80121fc:	7ebb      	ldrb	r3, [r7, #26]
 80121fe:	f003 0301 	and.w	r3, r3, #1
 8012202:	2b00      	cmp	r3, #0
 8012204:	d002      	beq.n	801220c <f_open+0x1d4>
						res = FR_DENIED;
 8012206:	2307      	movs	r3, #7
 8012208:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801220c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012210:	2b00      	cmp	r3, #0
 8012212:	d128      	bne.n	8012266 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012214:	79fb      	ldrb	r3, [r7, #7]
 8012216:	f003 0308 	and.w	r3, r3, #8
 801221a:	2b00      	cmp	r3, #0
 801221c:	d003      	beq.n	8012226 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801221e:	79fb      	ldrb	r3, [r7, #7]
 8012220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012224:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012226:	693b      	ldr	r3, [r7, #16]
 8012228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801222e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012234:	79fb      	ldrb	r3, [r7, #7]
 8012236:	f023 0301 	bic.w	r3, r3, #1
 801223a:	2b00      	cmp	r3, #0
 801223c:	bf14      	ite	ne
 801223e:	2301      	movne	r3, #1
 8012240:	2300      	moveq	r3, #0
 8012242:	b2db      	uxtb	r3, r3
 8012244:	461a      	mov	r2, r3
 8012246:	f107 0314 	add.w	r3, r7, #20
 801224a:	4611      	mov	r1, r2
 801224c:	4618      	mov	r0, r3
 801224e:	f7fe faaf 	bl	80107b0 <inc_lock>
 8012252:	4602      	mov	r2, r0
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	691b      	ldr	r3, [r3, #16]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d102      	bne.n	8012266 <f_open+0x22e>
 8012260:	2302      	movs	r3, #2
 8012262:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012266:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801226a:	2b00      	cmp	r3, #0
 801226c:	f040 80a3 	bne.w	80123b6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012270:	693b      	ldr	r3, [r7, #16]
 8012272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012274:	4611      	mov	r1, r2
 8012276:	4618      	mov	r0, r3
 8012278:	f7ff f918 	bl	80114ac <ld_clust>
 801227c:	4602      	mov	r2, r0
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012284:	331c      	adds	r3, #28
 8012286:	4618      	mov	r0, r3
 8012288:	f7fe f92c 	bl	80104e4 <ld_dword>
 801228c:	4602      	mov	r2, r0
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	2200      	movs	r2, #0
 8012296:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012298:	693a      	ldr	r2, [r7, #16]
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801229e:	693b      	ldr	r3, [r7, #16]
 80122a0:	88da      	ldrh	r2, [r3, #6]
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	79fa      	ldrb	r2, [r7, #7]
 80122aa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	2200      	movs	r2, #0
 80122b0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	2200      	movs	r2, #0
 80122b6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	2200      	movs	r2, #0
 80122bc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	3330      	adds	r3, #48	; 0x30
 80122c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80122c6:	2100      	movs	r1, #0
 80122c8:	4618      	mov	r0, r3
 80122ca:	f7fe f996 	bl	80105fa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80122ce:	79fb      	ldrb	r3, [r7, #7]
 80122d0:	f003 0320 	and.w	r3, r3, #32
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d06e      	beq.n	80123b6 <f_open+0x37e>
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	68db      	ldr	r3, [r3, #12]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d06a      	beq.n	80123b6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	68da      	ldr	r2, [r3, #12]
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80122e8:	693b      	ldr	r3, [r7, #16]
 80122ea:	895b      	ldrh	r3, [r3, #10]
 80122ec:	461a      	mov	r2, r3
 80122ee:	693b      	ldr	r3, [r7, #16]
 80122f0:	899b      	ldrh	r3, [r3, #12]
 80122f2:	fb02 f303 	mul.w	r3, r2, r3
 80122f6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	689b      	ldr	r3, [r3, #8]
 80122fc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	68db      	ldr	r3, [r3, #12]
 8012302:	657b      	str	r3, [r7, #84]	; 0x54
 8012304:	e016      	b.n	8012334 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801230a:	4618      	mov	r0, r3
 801230c:	f7fe fc03 	bl	8010b16 <get_fat>
 8012310:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012312:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012314:	2b01      	cmp	r3, #1
 8012316:	d802      	bhi.n	801231e <f_open+0x2e6>
 8012318:	2302      	movs	r3, #2
 801231a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801231e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012324:	d102      	bne.n	801232c <f_open+0x2f4>
 8012326:	2301      	movs	r3, #1
 8012328:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801232c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801232e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012330:	1ad3      	subs	r3, r2, r3
 8012332:	657b      	str	r3, [r7, #84]	; 0x54
 8012334:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012338:	2b00      	cmp	r3, #0
 801233a:	d103      	bne.n	8012344 <f_open+0x30c>
 801233c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801233e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012340:	429a      	cmp	r2, r3
 8012342:	d8e0      	bhi.n	8012306 <f_open+0x2ce>
				}
				fp->clust = clst;
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012348:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801234a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801234e:	2b00      	cmp	r3, #0
 8012350:	d131      	bne.n	80123b6 <f_open+0x37e>
 8012352:	693b      	ldr	r3, [r7, #16]
 8012354:	899b      	ldrh	r3, [r3, #12]
 8012356:	461a      	mov	r2, r3
 8012358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801235a:	fbb3 f1f2 	udiv	r1, r3, r2
 801235e:	fb01 f202 	mul.w	r2, r1, r2
 8012362:	1a9b      	subs	r3, r3, r2
 8012364:	2b00      	cmp	r3, #0
 8012366:	d026      	beq.n	80123b6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012368:	693b      	ldr	r3, [r7, #16]
 801236a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801236c:	4618      	mov	r0, r3
 801236e:	f7fe fbb3 	bl	8010ad8 <clust2sect>
 8012372:	6478      	str	r0, [r7, #68]	; 0x44
 8012374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012376:	2b00      	cmp	r3, #0
 8012378:	d103      	bne.n	8012382 <f_open+0x34a>
						res = FR_INT_ERR;
 801237a:	2302      	movs	r3, #2
 801237c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012380:	e019      	b.n	80123b6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012382:	693b      	ldr	r3, [r7, #16]
 8012384:	899b      	ldrh	r3, [r3, #12]
 8012386:	461a      	mov	r2, r3
 8012388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801238a:	fbb3 f2f2 	udiv	r2, r3, r2
 801238e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012390:	441a      	add	r2, r3
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012396:	693b      	ldr	r3, [r7, #16]
 8012398:	7858      	ldrb	r0, [r3, #1]
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	6a1a      	ldr	r2, [r3, #32]
 80123a4:	2301      	movs	r3, #1
 80123a6:	f7fe f827 	bl	80103f8 <disk_read>
 80123aa:	4603      	mov	r3, r0
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d002      	beq.n	80123b6 <f_open+0x37e>
 80123b0:	2301      	movs	r3, #1
 80123b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80123b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d002      	beq.n	80123c4 <f_open+0x38c>
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	2200      	movs	r2, #0
 80123c2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80123c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80123c8:	4618      	mov	r0, r3
 80123ca:	3760      	adds	r7, #96	; 0x60
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd80      	pop	{r7, pc}

080123d0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b08c      	sub	sp, #48	; 0x30
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	60f8      	str	r0, [r7, #12]
 80123d8:	60b9      	str	r1, [r7, #8]
 80123da:	607a      	str	r2, [r7, #4]
 80123dc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80123de:	68bb      	ldr	r3, [r7, #8]
 80123e0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80123e2:	683b      	ldr	r3, [r7, #0]
 80123e4:	2200      	movs	r2, #0
 80123e6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	f107 0210 	add.w	r2, r7, #16
 80123ee:	4611      	mov	r1, r2
 80123f0:	4618      	mov	r0, r3
 80123f2:	f7ff fda5 	bl	8011f40 <validate>
 80123f6:	4603      	mov	r3, r0
 80123f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80123fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012400:	2b00      	cmp	r3, #0
 8012402:	d107      	bne.n	8012414 <f_write+0x44>
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	7d5b      	ldrb	r3, [r3, #21]
 8012408:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801240c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012410:	2b00      	cmp	r3, #0
 8012412:	d002      	beq.n	801241a <f_write+0x4a>
 8012414:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012418:	e16a      	b.n	80126f0 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	7d1b      	ldrb	r3, [r3, #20]
 801241e:	f003 0302 	and.w	r3, r3, #2
 8012422:	2b00      	cmp	r3, #0
 8012424:	d101      	bne.n	801242a <f_write+0x5a>
 8012426:	2307      	movs	r3, #7
 8012428:	e162      	b.n	80126f0 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	699a      	ldr	r2, [r3, #24]
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	441a      	add	r2, r3
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	699b      	ldr	r3, [r3, #24]
 8012436:	429a      	cmp	r2, r3
 8012438:	f080 814c 	bcs.w	80126d4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	699b      	ldr	r3, [r3, #24]
 8012440:	43db      	mvns	r3, r3
 8012442:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8012444:	e146      	b.n	80126d4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	699b      	ldr	r3, [r3, #24]
 801244a:	693a      	ldr	r2, [r7, #16]
 801244c:	8992      	ldrh	r2, [r2, #12]
 801244e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012452:	fb01 f202 	mul.w	r2, r1, r2
 8012456:	1a9b      	subs	r3, r3, r2
 8012458:	2b00      	cmp	r3, #0
 801245a:	f040 80f1 	bne.w	8012640 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	699b      	ldr	r3, [r3, #24]
 8012462:	693a      	ldr	r2, [r7, #16]
 8012464:	8992      	ldrh	r2, [r2, #12]
 8012466:	fbb3 f3f2 	udiv	r3, r3, r2
 801246a:	693a      	ldr	r2, [r7, #16]
 801246c:	8952      	ldrh	r2, [r2, #10]
 801246e:	3a01      	subs	r2, #1
 8012470:	4013      	ands	r3, r2
 8012472:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8012474:	69bb      	ldr	r3, [r7, #24]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d143      	bne.n	8012502 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	699b      	ldr	r3, [r3, #24]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d10c      	bne.n	801249c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	689b      	ldr	r3, [r3, #8]
 8012486:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8012488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801248a:	2b00      	cmp	r3, #0
 801248c:	d11a      	bne.n	80124c4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	2100      	movs	r1, #0
 8012492:	4618      	mov	r0, r3
 8012494:	f7fe fd94 	bl	8010fc0 <create_chain>
 8012498:	62b8      	str	r0, [r7, #40]	; 0x28
 801249a:	e013      	b.n	80124c4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d007      	beq.n	80124b4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	699b      	ldr	r3, [r3, #24]
 80124a8:	4619      	mov	r1, r3
 80124aa:	68f8      	ldr	r0, [r7, #12]
 80124ac:	f7fe fe20 	bl	80110f0 <clmt_clust>
 80124b0:	62b8      	str	r0, [r7, #40]	; 0x28
 80124b2:	e007      	b.n	80124c4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80124b4:	68fa      	ldr	r2, [r7, #12]
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	69db      	ldr	r3, [r3, #28]
 80124ba:	4619      	mov	r1, r3
 80124bc:	4610      	mov	r0, r2
 80124be:	f7fe fd7f 	bl	8010fc0 <create_chain>
 80124c2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80124c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	f000 8109 	beq.w	80126de <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80124cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ce:	2b01      	cmp	r3, #1
 80124d0:	d104      	bne.n	80124dc <f_write+0x10c>
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	2202      	movs	r2, #2
 80124d6:	755a      	strb	r2, [r3, #21]
 80124d8:	2302      	movs	r3, #2
 80124da:	e109      	b.n	80126f0 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80124dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124e2:	d104      	bne.n	80124ee <f_write+0x11e>
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	2201      	movs	r2, #1
 80124e8:	755a      	strb	r2, [r3, #21]
 80124ea:	2301      	movs	r3, #1
 80124ec:	e100      	b.n	80126f0 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80124f2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	689b      	ldr	r3, [r3, #8]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d102      	bne.n	8012502 <f_write+0x132>
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012500:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	7d1b      	ldrb	r3, [r3, #20]
 8012506:	b25b      	sxtb	r3, r3
 8012508:	2b00      	cmp	r3, #0
 801250a:	da18      	bge.n	801253e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801250c:	693b      	ldr	r3, [r7, #16]
 801250e:	7858      	ldrb	r0, [r3, #1]
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	6a1a      	ldr	r2, [r3, #32]
 801251a:	2301      	movs	r3, #1
 801251c:	f7fd ff8c 	bl	8010438 <disk_write>
 8012520:	4603      	mov	r3, r0
 8012522:	2b00      	cmp	r3, #0
 8012524:	d004      	beq.n	8012530 <f_write+0x160>
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	2201      	movs	r2, #1
 801252a:	755a      	strb	r2, [r3, #21]
 801252c:	2301      	movs	r3, #1
 801252e:	e0df      	b.n	80126f0 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	7d1b      	ldrb	r3, [r3, #20]
 8012534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012538:	b2da      	uxtb	r2, r3
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801253e:	693a      	ldr	r2, [r7, #16]
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	69db      	ldr	r3, [r3, #28]
 8012544:	4619      	mov	r1, r3
 8012546:	4610      	mov	r0, r2
 8012548:	f7fe fac6 	bl	8010ad8 <clust2sect>
 801254c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801254e:	697b      	ldr	r3, [r7, #20]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d104      	bne.n	801255e <f_write+0x18e>
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	2202      	movs	r2, #2
 8012558:	755a      	strb	r2, [r3, #21]
 801255a:	2302      	movs	r3, #2
 801255c:	e0c8      	b.n	80126f0 <f_write+0x320>
			sect += csect;
 801255e:	697a      	ldr	r2, [r7, #20]
 8012560:	69bb      	ldr	r3, [r7, #24]
 8012562:	4413      	add	r3, r2
 8012564:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8012566:	693b      	ldr	r3, [r7, #16]
 8012568:	899b      	ldrh	r3, [r3, #12]
 801256a:	461a      	mov	r2, r3
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012572:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012574:	6a3b      	ldr	r3, [r7, #32]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d043      	beq.n	8012602 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801257a:	69ba      	ldr	r2, [r7, #24]
 801257c:	6a3b      	ldr	r3, [r7, #32]
 801257e:	4413      	add	r3, r2
 8012580:	693a      	ldr	r2, [r7, #16]
 8012582:	8952      	ldrh	r2, [r2, #10]
 8012584:	4293      	cmp	r3, r2
 8012586:	d905      	bls.n	8012594 <f_write+0x1c4>
					cc = fs->csize - csect;
 8012588:	693b      	ldr	r3, [r7, #16]
 801258a:	895b      	ldrh	r3, [r3, #10]
 801258c:	461a      	mov	r2, r3
 801258e:	69bb      	ldr	r3, [r7, #24]
 8012590:	1ad3      	subs	r3, r2, r3
 8012592:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012594:	693b      	ldr	r3, [r7, #16]
 8012596:	7858      	ldrb	r0, [r3, #1]
 8012598:	6a3b      	ldr	r3, [r7, #32]
 801259a:	697a      	ldr	r2, [r7, #20]
 801259c:	69f9      	ldr	r1, [r7, #28]
 801259e:	f7fd ff4b 	bl	8010438 <disk_write>
 80125a2:	4603      	mov	r3, r0
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d004      	beq.n	80125b2 <f_write+0x1e2>
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	2201      	movs	r2, #1
 80125ac:	755a      	strb	r2, [r3, #21]
 80125ae:	2301      	movs	r3, #1
 80125b0:	e09e      	b.n	80126f0 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	6a1a      	ldr	r2, [r3, #32]
 80125b6:	697b      	ldr	r3, [r7, #20]
 80125b8:	1ad3      	subs	r3, r2, r3
 80125ba:	6a3a      	ldr	r2, [r7, #32]
 80125bc:	429a      	cmp	r2, r3
 80125be:	d918      	bls.n	80125f2 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	6a1a      	ldr	r2, [r3, #32]
 80125ca:	697b      	ldr	r3, [r7, #20]
 80125cc:	1ad3      	subs	r3, r2, r3
 80125ce:	693a      	ldr	r2, [r7, #16]
 80125d0:	8992      	ldrh	r2, [r2, #12]
 80125d2:	fb02 f303 	mul.w	r3, r2, r3
 80125d6:	69fa      	ldr	r2, [r7, #28]
 80125d8:	18d1      	adds	r1, r2, r3
 80125da:	693b      	ldr	r3, [r7, #16]
 80125dc:	899b      	ldrh	r3, [r3, #12]
 80125de:	461a      	mov	r2, r3
 80125e0:	f7fd ffea 	bl	80105b8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	7d1b      	ldrb	r3, [r3, #20]
 80125e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80125ec:	b2da      	uxtb	r2, r3
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80125f2:	693b      	ldr	r3, [r7, #16]
 80125f4:	899b      	ldrh	r3, [r3, #12]
 80125f6:	461a      	mov	r2, r3
 80125f8:	6a3b      	ldr	r3, [r7, #32]
 80125fa:	fb02 f303 	mul.w	r3, r2, r3
 80125fe:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8012600:	e04b      	b.n	801269a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	6a1b      	ldr	r3, [r3, #32]
 8012606:	697a      	ldr	r2, [r7, #20]
 8012608:	429a      	cmp	r2, r3
 801260a:	d016      	beq.n	801263a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	699a      	ldr	r2, [r3, #24]
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012614:	429a      	cmp	r2, r3
 8012616:	d210      	bcs.n	801263a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8012618:	693b      	ldr	r3, [r7, #16]
 801261a:	7858      	ldrb	r0, [r3, #1]
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012622:	2301      	movs	r3, #1
 8012624:	697a      	ldr	r2, [r7, #20]
 8012626:	f7fd fee7 	bl	80103f8 <disk_read>
 801262a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801262c:	2b00      	cmp	r3, #0
 801262e:	d004      	beq.n	801263a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	2201      	movs	r2, #1
 8012634:	755a      	strb	r2, [r3, #21]
 8012636:	2301      	movs	r3, #1
 8012638:	e05a      	b.n	80126f0 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	697a      	ldr	r2, [r7, #20]
 801263e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012640:	693b      	ldr	r3, [r7, #16]
 8012642:	899b      	ldrh	r3, [r3, #12]
 8012644:	4618      	mov	r0, r3
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	699b      	ldr	r3, [r3, #24]
 801264a:	693a      	ldr	r2, [r7, #16]
 801264c:	8992      	ldrh	r2, [r2, #12]
 801264e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012652:	fb01 f202 	mul.w	r2, r1, r2
 8012656:	1a9b      	subs	r3, r3, r2
 8012658:	1ac3      	subs	r3, r0, r3
 801265a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801265c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	429a      	cmp	r2, r3
 8012662:	d901      	bls.n	8012668 <f_write+0x298>
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	699b      	ldr	r3, [r3, #24]
 8012672:	693a      	ldr	r2, [r7, #16]
 8012674:	8992      	ldrh	r2, [r2, #12]
 8012676:	fbb3 f0f2 	udiv	r0, r3, r2
 801267a:	fb00 f202 	mul.w	r2, r0, r2
 801267e:	1a9b      	subs	r3, r3, r2
 8012680:	440b      	add	r3, r1
 8012682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012684:	69f9      	ldr	r1, [r7, #28]
 8012686:	4618      	mov	r0, r3
 8012688:	f7fd ff96 	bl	80105b8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	7d1b      	ldrb	r3, [r3, #20]
 8012690:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012694:	b2da      	uxtb	r2, r3
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801269a:	69fa      	ldr	r2, [r7, #28]
 801269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801269e:	4413      	add	r3, r2
 80126a0:	61fb      	str	r3, [r7, #28]
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	699a      	ldr	r2, [r3, #24]
 80126a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126a8:	441a      	add	r2, r3
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	619a      	str	r2, [r3, #24]
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	68da      	ldr	r2, [r3, #12]
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	699b      	ldr	r3, [r3, #24]
 80126b6:	429a      	cmp	r2, r3
 80126b8:	bf38      	it	cc
 80126ba:	461a      	movcc	r2, r3
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	60da      	str	r2, [r3, #12]
 80126c0:	683b      	ldr	r3, [r7, #0]
 80126c2:	681a      	ldr	r2, [r3, #0]
 80126c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126c6:	441a      	add	r2, r3
 80126c8:	683b      	ldr	r3, [r7, #0]
 80126ca:	601a      	str	r2, [r3, #0]
 80126cc:	687a      	ldr	r2, [r7, #4]
 80126ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d0:	1ad3      	subs	r3, r2, r3
 80126d2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	f47f aeb5 	bne.w	8012446 <f_write+0x76>
 80126dc:	e000      	b.n	80126e0 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80126de:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	7d1b      	ldrb	r3, [r3, #20]
 80126e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80126e8:	b2da      	uxtb	r2, r3
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80126ee:	2300      	movs	r3, #0
}
 80126f0:	4618      	mov	r0, r3
 80126f2:	3730      	adds	r7, #48	; 0x30
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd80      	pop	{r7, pc}

080126f8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b086      	sub	sp, #24
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	f107 0208 	add.w	r2, r7, #8
 8012706:	4611      	mov	r1, r2
 8012708:	4618      	mov	r0, r3
 801270a:	f7ff fc19 	bl	8011f40 <validate>
 801270e:	4603      	mov	r3, r0
 8012710:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012712:	7dfb      	ldrb	r3, [r7, #23]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d168      	bne.n	80127ea <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	7d1b      	ldrb	r3, [r3, #20]
 801271c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012720:	2b00      	cmp	r3, #0
 8012722:	d062      	beq.n	80127ea <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	7d1b      	ldrb	r3, [r3, #20]
 8012728:	b25b      	sxtb	r3, r3
 801272a:	2b00      	cmp	r3, #0
 801272c:	da15      	bge.n	801275a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801272e:	68bb      	ldr	r3, [r7, #8]
 8012730:	7858      	ldrb	r0, [r3, #1]
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	6a1a      	ldr	r2, [r3, #32]
 801273c:	2301      	movs	r3, #1
 801273e:	f7fd fe7b 	bl	8010438 <disk_write>
 8012742:	4603      	mov	r3, r0
 8012744:	2b00      	cmp	r3, #0
 8012746:	d001      	beq.n	801274c <f_sync+0x54>
 8012748:	2301      	movs	r3, #1
 801274a:	e04f      	b.n	80127ec <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	7d1b      	ldrb	r3, [r3, #20]
 8012750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012754:	b2da      	uxtb	r2, r3
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801275a:	f7fd fbd9 	bl	800ff10 <get_fattime>
 801275e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012760:	68ba      	ldr	r2, [r7, #8]
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012766:	4619      	mov	r1, r3
 8012768:	4610      	mov	r0, r2
 801276a:	f7fe f917 	bl	801099c <move_window>
 801276e:	4603      	mov	r3, r0
 8012770:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012772:	7dfb      	ldrb	r3, [r7, #23]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d138      	bne.n	80127ea <f_sync+0xf2>
					dir = fp->dir_ptr;
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801277c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	330b      	adds	r3, #11
 8012782:	781a      	ldrb	r2, [r3, #0]
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	330b      	adds	r3, #11
 8012788:	f042 0220 	orr.w	r2, r2, #32
 801278c:	b2d2      	uxtb	r2, r2
 801278e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	6818      	ldr	r0, [r3, #0]
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	689b      	ldr	r3, [r3, #8]
 8012798:	461a      	mov	r2, r3
 801279a:	68f9      	ldr	r1, [r7, #12]
 801279c:	f7fe fea5 	bl	80114ea <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	f103 021c 	add.w	r2, r3, #28
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	68db      	ldr	r3, [r3, #12]
 80127aa:	4619      	mov	r1, r3
 80127ac:	4610      	mov	r0, r2
 80127ae:	f7fd fed7 	bl	8010560 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	3316      	adds	r3, #22
 80127b6:	6939      	ldr	r1, [r7, #16]
 80127b8:	4618      	mov	r0, r3
 80127ba:	f7fd fed1 	bl	8010560 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	3312      	adds	r3, #18
 80127c2:	2100      	movs	r1, #0
 80127c4:	4618      	mov	r0, r3
 80127c6:	f7fd feb0 	bl	801052a <st_word>
					fs->wflag = 1;
 80127ca:	68bb      	ldr	r3, [r7, #8]
 80127cc:	2201      	movs	r2, #1
 80127ce:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80127d0:	68bb      	ldr	r3, [r7, #8]
 80127d2:	4618      	mov	r0, r3
 80127d4:	f7fe f910 	bl	80109f8 <sync_fs>
 80127d8:	4603      	mov	r3, r0
 80127da:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	7d1b      	ldrb	r3, [r3, #20]
 80127e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80127e4:	b2da      	uxtb	r2, r3
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80127ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80127ec:	4618      	mov	r0, r3
 80127ee:	3718      	adds	r7, #24
 80127f0:	46bd      	mov	sp, r7
 80127f2:	bd80      	pop	{r7, pc}

080127f4 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b090      	sub	sp, #64	; 0x40
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
 80127fc:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80127fe:	f107 010c 	add.w	r1, r7, #12
 8012802:	1d3b      	adds	r3, r7, #4
 8012804:	2200      	movs	r2, #0
 8012806:	4618      	mov	r0, r3
 8012808:	f7ff f91a 	bl	8011a40 <find_volume>
 801280c:	4603      	mov	r3, r0
 801280e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8012812:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012816:	2b00      	cmp	r3, #0
 8012818:	d11f      	bne.n	801285a <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801281a:	687a      	ldr	r2, [r7, #4]
 801281c:	f107 030c 	add.w	r3, r7, #12
 8012820:	4611      	mov	r1, r2
 8012822:	4618      	mov	r0, r3
 8012824:	f7fe fffc 	bl	8011820 <follow_path>
 8012828:	4603      	mov	r3, r0
 801282a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 801282e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012832:	2b00      	cmp	r3, #0
 8012834:	d111      	bne.n	801285a <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8012836:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801283a:	b25b      	sxtb	r3, r3
 801283c:	2b00      	cmp	r3, #0
 801283e:	da03      	bge.n	8012848 <f_stat+0x54>
				res = FR_INVALID_NAME;
 8012840:	2306      	movs	r3, #6
 8012842:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012846:	e008      	b.n	801285a <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8012848:	683b      	ldr	r3, [r7, #0]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d005      	beq.n	801285a <f_stat+0x66>
 801284e:	f107 030c 	add.w	r3, r7, #12
 8012852:	6839      	ldr	r1, [r7, #0]
 8012854:	4618      	mov	r0, r3
 8012856:	f7fe feef 	bl	8011638 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 801285a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801285e:	4618      	mov	r0, r3
 8012860:	3740      	adds	r7, #64	; 0x40
 8012862:	46bd      	mov	sp, r7
 8012864:	bd80      	pop	{r7, pc}
	...

08012868 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012868:	b480      	push	{r7}
 801286a:	b087      	sub	sp, #28
 801286c:	af00      	add	r7, sp, #0
 801286e:	60f8      	str	r0, [r7, #12]
 8012870:	60b9      	str	r1, [r7, #8]
 8012872:	4613      	mov	r3, r2
 8012874:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012876:	2301      	movs	r3, #1
 8012878:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801287a:	2300      	movs	r3, #0
 801287c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801287e:	4b1f      	ldr	r3, [pc, #124]	; (80128fc <FATFS_LinkDriverEx+0x94>)
 8012880:	7a5b      	ldrb	r3, [r3, #9]
 8012882:	b2db      	uxtb	r3, r3
 8012884:	2b00      	cmp	r3, #0
 8012886:	d131      	bne.n	80128ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012888:	4b1c      	ldr	r3, [pc, #112]	; (80128fc <FATFS_LinkDriverEx+0x94>)
 801288a:	7a5b      	ldrb	r3, [r3, #9]
 801288c:	b2db      	uxtb	r3, r3
 801288e:	461a      	mov	r2, r3
 8012890:	4b1a      	ldr	r3, [pc, #104]	; (80128fc <FATFS_LinkDriverEx+0x94>)
 8012892:	2100      	movs	r1, #0
 8012894:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012896:	4b19      	ldr	r3, [pc, #100]	; (80128fc <FATFS_LinkDriverEx+0x94>)
 8012898:	7a5b      	ldrb	r3, [r3, #9]
 801289a:	b2db      	uxtb	r3, r3
 801289c:	4a17      	ldr	r2, [pc, #92]	; (80128fc <FATFS_LinkDriverEx+0x94>)
 801289e:	009b      	lsls	r3, r3, #2
 80128a0:	4413      	add	r3, r2
 80128a2:	68fa      	ldr	r2, [r7, #12]
 80128a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80128a6:	4b15      	ldr	r3, [pc, #84]	; (80128fc <FATFS_LinkDriverEx+0x94>)
 80128a8:	7a5b      	ldrb	r3, [r3, #9]
 80128aa:	b2db      	uxtb	r3, r3
 80128ac:	461a      	mov	r2, r3
 80128ae:	4b13      	ldr	r3, [pc, #76]	; (80128fc <FATFS_LinkDriverEx+0x94>)
 80128b0:	4413      	add	r3, r2
 80128b2:	79fa      	ldrb	r2, [r7, #7]
 80128b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80128b6:	4b11      	ldr	r3, [pc, #68]	; (80128fc <FATFS_LinkDriverEx+0x94>)
 80128b8:	7a5b      	ldrb	r3, [r3, #9]
 80128ba:	b2db      	uxtb	r3, r3
 80128bc:	1c5a      	adds	r2, r3, #1
 80128be:	b2d1      	uxtb	r1, r2
 80128c0:	4a0e      	ldr	r2, [pc, #56]	; (80128fc <FATFS_LinkDriverEx+0x94>)
 80128c2:	7251      	strb	r1, [r2, #9]
 80128c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80128c6:	7dbb      	ldrb	r3, [r7, #22]
 80128c8:	3330      	adds	r3, #48	; 0x30
 80128ca:	b2da      	uxtb	r2, r3
 80128cc:	68bb      	ldr	r3, [r7, #8]
 80128ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80128d0:	68bb      	ldr	r3, [r7, #8]
 80128d2:	3301      	adds	r3, #1
 80128d4:	223a      	movs	r2, #58	; 0x3a
 80128d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	3302      	adds	r3, #2
 80128dc:	222f      	movs	r2, #47	; 0x2f
 80128de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80128e0:	68bb      	ldr	r3, [r7, #8]
 80128e2:	3303      	adds	r3, #3
 80128e4:	2200      	movs	r2, #0
 80128e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80128e8:	2300      	movs	r3, #0
 80128ea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80128ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80128ee:	4618      	mov	r0, r3
 80128f0:	371c      	adds	r7, #28
 80128f2:	46bd      	mov	sp, r7
 80128f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f8:	4770      	bx	lr
 80128fa:	bf00      	nop
 80128fc:	200065f4 	.word	0x200065f4

08012900 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012900:	b580      	push	{r7, lr}
 8012902:	b082      	sub	sp, #8
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
 8012908:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801290a:	2200      	movs	r2, #0
 801290c:	6839      	ldr	r1, [r7, #0]
 801290e:	6878      	ldr	r0, [r7, #4]
 8012910:	f7ff ffaa 	bl	8012868 <FATFS_LinkDriverEx>
 8012914:	4603      	mov	r3, r0
}
 8012916:	4618      	mov	r0, r3
 8012918:	3708      	adds	r7, #8
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}
	...

08012920 <__libc_init_array>:
 8012920:	b570      	push	{r4, r5, r6, lr}
 8012922:	4d0d      	ldr	r5, [pc, #52]	; (8012958 <__libc_init_array+0x38>)
 8012924:	4c0d      	ldr	r4, [pc, #52]	; (801295c <__libc_init_array+0x3c>)
 8012926:	1b64      	subs	r4, r4, r5
 8012928:	10a4      	asrs	r4, r4, #2
 801292a:	2600      	movs	r6, #0
 801292c:	42a6      	cmp	r6, r4
 801292e:	d109      	bne.n	8012944 <__libc_init_array+0x24>
 8012930:	4d0b      	ldr	r5, [pc, #44]	; (8012960 <__libc_init_array+0x40>)
 8012932:	4c0c      	ldr	r4, [pc, #48]	; (8012964 <__libc_init_array+0x44>)
 8012934:	f006 fb34 	bl	8018fa0 <_init>
 8012938:	1b64      	subs	r4, r4, r5
 801293a:	10a4      	asrs	r4, r4, #2
 801293c:	2600      	movs	r6, #0
 801293e:	42a6      	cmp	r6, r4
 8012940:	d105      	bne.n	801294e <__libc_init_array+0x2e>
 8012942:	bd70      	pop	{r4, r5, r6, pc}
 8012944:	f855 3b04 	ldr.w	r3, [r5], #4
 8012948:	4798      	blx	r3
 801294a:	3601      	adds	r6, #1
 801294c:	e7ee      	b.n	801292c <__libc_init_array+0xc>
 801294e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012952:	4798      	blx	r3
 8012954:	3601      	adds	r6, #1
 8012956:	e7f2      	b.n	801293e <__libc_init_array+0x1e>
 8012958:	0801b068 	.word	0x0801b068
 801295c:	0801b068 	.word	0x0801b068
 8012960:	0801b068 	.word	0x0801b068
 8012964:	0801b070 	.word	0x0801b070

08012968 <malloc>:
 8012968:	4b02      	ldr	r3, [pc, #8]	; (8012974 <malloc+0xc>)
 801296a:	4601      	mov	r1, r0
 801296c:	6818      	ldr	r0, [r3, #0]
 801296e:	f000 b803 	b.w	8012978 <_malloc_r>
 8012972:	bf00      	nop
 8012974:	200004bc 	.word	0x200004bc

08012978 <_malloc_r>:
 8012978:	f101 030b 	add.w	r3, r1, #11
 801297c:	2b16      	cmp	r3, #22
 801297e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012982:	4605      	mov	r5, r0
 8012984:	d906      	bls.n	8012994 <_malloc_r+0x1c>
 8012986:	f033 0707 	bics.w	r7, r3, #7
 801298a:	d504      	bpl.n	8012996 <_malloc_r+0x1e>
 801298c:	230c      	movs	r3, #12
 801298e:	602b      	str	r3, [r5, #0]
 8012990:	2400      	movs	r4, #0
 8012992:	e1a5      	b.n	8012ce0 <_malloc_r+0x368>
 8012994:	2710      	movs	r7, #16
 8012996:	42b9      	cmp	r1, r7
 8012998:	d8f8      	bhi.n	801298c <_malloc_r+0x14>
 801299a:	4628      	mov	r0, r5
 801299c:	f000 fa30 	bl	8012e00 <__malloc_lock>
 80129a0:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 80129a4:	4eb0      	ldr	r6, [pc, #704]	; (8012c68 <_malloc_r+0x2f0>)
 80129a6:	d237      	bcs.n	8012a18 <_malloc_r+0xa0>
 80129a8:	f107 0208 	add.w	r2, r7, #8
 80129ac:	4432      	add	r2, r6
 80129ae:	f1a2 0108 	sub.w	r1, r2, #8
 80129b2:	6854      	ldr	r4, [r2, #4]
 80129b4:	428c      	cmp	r4, r1
 80129b6:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 80129ba:	d102      	bne.n	80129c2 <_malloc_r+0x4a>
 80129bc:	68d4      	ldr	r4, [r2, #12]
 80129be:	42a2      	cmp	r2, r4
 80129c0:	d010      	beq.n	80129e4 <_malloc_r+0x6c>
 80129c2:	6863      	ldr	r3, [r4, #4]
 80129c4:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80129c8:	f023 0303 	bic.w	r3, r3, #3
 80129cc:	60ca      	str	r2, [r1, #12]
 80129ce:	4423      	add	r3, r4
 80129d0:	6091      	str	r1, [r2, #8]
 80129d2:	685a      	ldr	r2, [r3, #4]
 80129d4:	f042 0201 	orr.w	r2, r2, #1
 80129d8:	605a      	str	r2, [r3, #4]
 80129da:	4628      	mov	r0, r5
 80129dc:	f000 fa16 	bl	8012e0c <__malloc_unlock>
 80129e0:	3408      	adds	r4, #8
 80129e2:	e17d      	b.n	8012ce0 <_malloc_r+0x368>
 80129e4:	3302      	adds	r3, #2
 80129e6:	6934      	ldr	r4, [r6, #16]
 80129e8:	49a0      	ldr	r1, [pc, #640]	; (8012c6c <_malloc_r+0x2f4>)
 80129ea:	428c      	cmp	r4, r1
 80129ec:	d077      	beq.n	8012ade <_malloc_r+0x166>
 80129ee:	6862      	ldr	r2, [r4, #4]
 80129f0:	f022 0c03 	bic.w	ip, r2, #3
 80129f4:	ebac 0007 	sub.w	r0, ip, r7
 80129f8:	280f      	cmp	r0, #15
 80129fa:	dd48      	ble.n	8012a8e <_malloc_r+0x116>
 80129fc:	19e2      	adds	r2, r4, r7
 80129fe:	f040 0301 	orr.w	r3, r0, #1
 8012a02:	f047 0701 	orr.w	r7, r7, #1
 8012a06:	6067      	str	r7, [r4, #4]
 8012a08:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8012a0c:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8012a10:	6053      	str	r3, [r2, #4]
 8012a12:	f844 000c 	str.w	r0, [r4, ip]
 8012a16:	e7e0      	b.n	80129da <_malloc_r+0x62>
 8012a18:	0a7b      	lsrs	r3, r7, #9
 8012a1a:	d02a      	beq.n	8012a72 <_malloc_r+0xfa>
 8012a1c:	2b04      	cmp	r3, #4
 8012a1e:	d812      	bhi.n	8012a46 <_malloc_r+0xce>
 8012a20:	09bb      	lsrs	r3, r7, #6
 8012a22:	3338      	adds	r3, #56	; 0x38
 8012a24:	1c5a      	adds	r2, r3, #1
 8012a26:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8012a2a:	f1a2 0c08 	sub.w	ip, r2, #8
 8012a2e:	6854      	ldr	r4, [r2, #4]
 8012a30:	4564      	cmp	r4, ip
 8012a32:	d006      	beq.n	8012a42 <_malloc_r+0xca>
 8012a34:	6862      	ldr	r2, [r4, #4]
 8012a36:	f022 0203 	bic.w	r2, r2, #3
 8012a3a:	1bd0      	subs	r0, r2, r7
 8012a3c:	280f      	cmp	r0, #15
 8012a3e:	dd1c      	ble.n	8012a7a <_malloc_r+0x102>
 8012a40:	3b01      	subs	r3, #1
 8012a42:	3301      	adds	r3, #1
 8012a44:	e7cf      	b.n	80129e6 <_malloc_r+0x6e>
 8012a46:	2b14      	cmp	r3, #20
 8012a48:	d801      	bhi.n	8012a4e <_malloc_r+0xd6>
 8012a4a:	335b      	adds	r3, #91	; 0x5b
 8012a4c:	e7ea      	b.n	8012a24 <_malloc_r+0xac>
 8012a4e:	2b54      	cmp	r3, #84	; 0x54
 8012a50:	d802      	bhi.n	8012a58 <_malloc_r+0xe0>
 8012a52:	0b3b      	lsrs	r3, r7, #12
 8012a54:	336e      	adds	r3, #110	; 0x6e
 8012a56:	e7e5      	b.n	8012a24 <_malloc_r+0xac>
 8012a58:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8012a5c:	d802      	bhi.n	8012a64 <_malloc_r+0xec>
 8012a5e:	0bfb      	lsrs	r3, r7, #15
 8012a60:	3377      	adds	r3, #119	; 0x77
 8012a62:	e7df      	b.n	8012a24 <_malloc_r+0xac>
 8012a64:	f240 5254 	movw	r2, #1364	; 0x554
 8012a68:	4293      	cmp	r3, r2
 8012a6a:	d804      	bhi.n	8012a76 <_malloc_r+0xfe>
 8012a6c:	0cbb      	lsrs	r3, r7, #18
 8012a6e:	337c      	adds	r3, #124	; 0x7c
 8012a70:	e7d8      	b.n	8012a24 <_malloc_r+0xac>
 8012a72:	233f      	movs	r3, #63	; 0x3f
 8012a74:	e7d6      	b.n	8012a24 <_malloc_r+0xac>
 8012a76:	237e      	movs	r3, #126	; 0x7e
 8012a78:	e7d4      	b.n	8012a24 <_malloc_r+0xac>
 8012a7a:	2800      	cmp	r0, #0
 8012a7c:	68e1      	ldr	r1, [r4, #12]
 8012a7e:	db04      	blt.n	8012a8a <_malloc_r+0x112>
 8012a80:	68a3      	ldr	r3, [r4, #8]
 8012a82:	60d9      	str	r1, [r3, #12]
 8012a84:	608b      	str	r3, [r1, #8]
 8012a86:	18a3      	adds	r3, r4, r2
 8012a88:	e7a3      	b.n	80129d2 <_malloc_r+0x5a>
 8012a8a:	460c      	mov	r4, r1
 8012a8c:	e7d0      	b.n	8012a30 <_malloc_r+0xb8>
 8012a8e:	2800      	cmp	r0, #0
 8012a90:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8012a94:	db07      	blt.n	8012aa6 <_malloc_r+0x12e>
 8012a96:	44a4      	add	ip, r4
 8012a98:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8012a9c:	f043 0301 	orr.w	r3, r3, #1
 8012aa0:	f8cc 3004 	str.w	r3, [ip, #4]
 8012aa4:	e799      	b.n	80129da <_malloc_r+0x62>
 8012aa6:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8012aaa:	6870      	ldr	r0, [r6, #4]
 8012aac:	f080 8096 	bcs.w	8012bdc <_malloc_r+0x264>
 8012ab0:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8012ab4:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8012ab8:	f04f 0c01 	mov.w	ip, #1
 8012abc:	3201      	adds	r2, #1
 8012abe:	fa0c fc0e 	lsl.w	ip, ip, lr
 8012ac2:	ea4c 0000 	orr.w	r0, ip, r0
 8012ac6:	6070      	str	r0, [r6, #4]
 8012ac8:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8012acc:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8012ad0:	3808      	subs	r0, #8
 8012ad2:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8012ad6:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8012ada:	f8cc 400c 	str.w	r4, [ip, #12]
 8012ade:	2001      	movs	r0, #1
 8012ae0:	109a      	asrs	r2, r3, #2
 8012ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8012ae6:	6870      	ldr	r0, [r6, #4]
 8012ae8:	4290      	cmp	r0, r2
 8012aea:	d326      	bcc.n	8012b3a <_malloc_r+0x1c2>
 8012aec:	4210      	tst	r0, r2
 8012aee:	d106      	bne.n	8012afe <_malloc_r+0x186>
 8012af0:	f023 0303 	bic.w	r3, r3, #3
 8012af4:	0052      	lsls	r2, r2, #1
 8012af6:	4210      	tst	r0, r2
 8012af8:	f103 0304 	add.w	r3, r3, #4
 8012afc:	d0fa      	beq.n	8012af4 <_malloc_r+0x17c>
 8012afe:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8012b02:	46c1      	mov	r9, r8
 8012b04:	469e      	mov	lr, r3
 8012b06:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8012b0a:	454c      	cmp	r4, r9
 8012b0c:	f040 80ba 	bne.w	8012c84 <_malloc_r+0x30c>
 8012b10:	f10e 0e01 	add.w	lr, lr, #1
 8012b14:	f01e 0f03 	tst.w	lr, #3
 8012b18:	f109 0908 	add.w	r9, r9, #8
 8012b1c:	d1f3      	bne.n	8012b06 <_malloc_r+0x18e>
 8012b1e:	0798      	lsls	r0, r3, #30
 8012b20:	f040 80e4 	bne.w	8012cec <_malloc_r+0x374>
 8012b24:	6873      	ldr	r3, [r6, #4]
 8012b26:	ea23 0302 	bic.w	r3, r3, r2
 8012b2a:	6073      	str	r3, [r6, #4]
 8012b2c:	6870      	ldr	r0, [r6, #4]
 8012b2e:	0052      	lsls	r2, r2, #1
 8012b30:	4290      	cmp	r0, r2
 8012b32:	d302      	bcc.n	8012b3a <_malloc_r+0x1c2>
 8012b34:	2a00      	cmp	r2, #0
 8012b36:	f040 80e6 	bne.w	8012d06 <_malloc_r+0x38e>
 8012b3a:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8012b3e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8012b42:	f023 0903 	bic.w	r9, r3, #3
 8012b46:	45b9      	cmp	r9, r7
 8012b48:	d304      	bcc.n	8012b54 <_malloc_r+0x1dc>
 8012b4a:	eba9 0207 	sub.w	r2, r9, r7
 8012b4e:	2a0f      	cmp	r2, #15
 8012b50:	f300 8142 	bgt.w	8012dd8 <_malloc_r+0x460>
 8012b54:	4b46      	ldr	r3, [pc, #280]	; (8012c70 <_malloc_r+0x2f8>)
 8012b56:	6819      	ldr	r1, [r3, #0]
 8012b58:	3110      	adds	r1, #16
 8012b5a:	4439      	add	r1, r7
 8012b5c:	2008      	movs	r0, #8
 8012b5e:	9101      	str	r1, [sp, #4]
 8012b60:	f001 fbe0 	bl	8014324 <sysconf>
 8012b64:	4a43      	ldr	r2, [pc, #268]	; (8012c74 <_malloc_r+0x2fc>)
 8012b66:	9901      	ldr	r1, [sp, #4]
 8012b68:	6813      	ldr	r3, [r2, #0]
 8012b6a:	3301      	adds	r3, #1
 8012b6c:	bf1f      	itttt	ne
 8012b6e:	f101 31ff 	addne.w	r1, r1, #4294967295
 8012b72:	1809      	addne	r1, r1, r0
 8012b74:	4243      	negne	r3, r0
 8012b76:	4019      	andne	r1, r3
 8012b78:	4680      	mov	r8, r0
 8012b7a:	4628      	mov	r0, r5
 8012b7c:	9101      	str	r1, [sp, #4]
 8012b7e:	f000 f9b3 	bl	8012ee8 <_sbrk_r>
 8012b82:	1c42      	adds	r2, r0, #1
 8012b84:	eb0a 0b09 	add.w	fp, sl, r9
 8012b88:	4604      	mov	r4, r0
 8012b8a:	f000 80f8 	beq.w	8012d7e <_malloc_r+0x406>
 8012b8e:	4583      	cmp	fp, r0
 8012b90:	9901      	ldr	r1, [sp, #4]
 8012b92:	4a38      	ldr	r2, [pc, #224]	; (8012c74 <_malloc_r+0x2fc>)
 8012b94:	d902      	bls.n	8012b9c <_malloc_r+0x224>
 8012b96:	45b2      	cmp	sl, r6
 8012b98:	f040 80f1 	bne.w	8012d7e <_malloc_r+0x406>
 8012b9c:	4b36      	ldr	r3, [pc, #216]	; (8012c78 <_malloc_r+0x300>)
 8012b9e:	6818      	ldr	r0, [r3, #0]
 8012ba0:	45a3      	cmp	fp, r4
 8012ba2:	eb00 0e01 	add.w	lr, r0, r1
 8012ba6:	f8c3 e000 	str.w	lr, [r3]
 8012baa:	f108 3cff 	add.w	ip, r8, #4294967295
 8012bae:	f040 80ac 	bne.w	8012d0a <_malloc_r+0x392>
 8012bb2:	ea1b 0f0c 	tst.w	fp, ip
 8012bb6:	f040 80a8 	bne.w	8012d0a <_malloc_r+0x392>
 8012bba:	68b2      	ldr	r2, [r6, #8]
 8012bbc:	4449      	add	r1, r9
 8012bbe:	f041 0101 	orr.w	r1, r1, #1
 8012bc2:	6051      	str	r1, [r2, #4]
 8012bc4:	4a2d      	ldr	r2, [pc, #180]	; (8012c7c <_malloc_r+0x304>)
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	6811      	ldr	r1, [r2, #0]
 8012bca:	428b      	cmp	r3, r1
 8012bcc:	bf88      	it	hi
 8012bce:	6013      	strhi	r3, [r2, #0]
 8012bd0:	4a2b      	ldr	r2, [pc, #172]	; (8012c80 <_malloc_r+0x308>)
 8012bd2:	6811      	ldr	r1, [r2, #0]
 8012bd4:	428b      	cmp	r3, r1
 8012bd6:	bf88      	it	hi
 8012bd8:	6013      	strhi	r3, [r2, #0]
 8012bda:	e0d0      	b.n	8012d7e <_malloc_r+0x406>
 8012bdc:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8012be0:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8012be4:	d218      	bcs.n	8012c18 <_malloc_r+0x2a0>
 8012be6:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8012bea:	3238      	adds	r2, #56	; 0x38
 8012bec:	f102 0e01 	add.w	lr, r2, #1
 8012bf0:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8012bf4:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8012bf8:	45f0      	cmp	r8, lr
 8012bfa:	d12b      	bne.n	8012c54 <_malloc_r+0x2dc>
 8012bfc:	1092      	asrs	r2, r2, #2
 8012bfe:	f04f 0c01 	mov.w	ip, #1
 8012c02:	fa0c f202 	lsl.w	r2, ip, r2
 8012c06:	4310      	orrs	r0, r2
 8012c08:	6070      	str	r0, [r6, #4]
 8012c0a:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8012c0e:	f8c8 4008 	str.w	r4, [r8, #8]
 8012c12:	f8ce 400c 	str.w	r4, [lr, #12]
 8012c16:	e762      	b.n	8012ade <_malloc_r+0x166>
 8012c18:	2a14      	cmp	r2, #20
 8012c1a:	d801      	bhi.n	8012c20 <_malloc_r+0x2a8>
 8012c1c:	325b      	adds	r2, #91	; 0x5b
 8012c1e:	e7e5      	b.n	8012bec <_malloc_r+0x274>
 8012c20:	2a54      	cmp	r2, #84	; 0x54
 8012c22:	d803      	bhi.n	8012c2c <_malloc_r+0x2b4>
 8012c24:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8012c28:	326e      	adds	r2, #110	; 0x6e
 8012c2a:	e7df      	b.n	8012bec <_malloc_r+0x274>
 8012c2c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8012c30:	d803      	bhi.n	8012c3a <_malloc_r+0x2c2>
 8012c32:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8012c36:	3277      	adds	r2, #119	; 0x77
 8012c38:	e7d8      	b.n	8012bec <_malloc_r+0x274>
 8012c3a:	f240 5e54 	movw	lr, #1364	; 0x554
 8012c3e:	4572      	cmp	r2, lr
 8012c40:	bf9a      	itte	ls
 8012c42:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8012c46:	327c      	addls	r2, #124	; 0x7c
 8012c48:	227e      	movhi	r2, #126	; 0x7e
 8012c4a:	e7cf      	b.n	8012bec <_malloc_r+0x274>
 8012c4c:	f8de e008 	ldr.w	lr, [lr, #8]
 8012c50:	45f0      	cmp	r8, lr
 8012c52:	d005      	beq.n	8012c60 <_malloc_r+0x2e8>
 8012c54:	f8de 2004 	ldr.w	r2, [lr, #4]
 8012c58:	f022 0203 	bic.w	r2, r2, #3
 8012c5c:	4562      	cmp	r2, ip
 8012c5e:	d8f5      	bhi.n	8012c4c <_malloc_r+0x2d4>
 8012c60:	f8de 800c 	ldr.w	r8, [lr, #12]
 8012c64:	e7d1      	b.n	8012c0a <_malloc_r+0x292>
 8012c66:	bf00      	nop
 8012c68:	200008e8 	.word	0x200008e8
 8012c6c:	200008f0 	.word	0x200008f0
 8012c70:	20006630 	.word	0x20006630
 8012c74:	20000cf0 	.word	0x20000cf0
 8012c78:	20006600 	.word	0x20006600
 8012c7c:	20006628 	.word	0x20006628
 8012c80:	2000662c 	.word	0x2000662c
 8012c84:	6860      	ldr	r0, [r4, #4]
 8012c86:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8012c8a:	f020 0003 	bic.w	r0, r0, #3
 8012c8e:	eba0 0a07 	sub.w	sl, r0, r7
 8012c92:	f1ba 0f0f 	cmp.w	sl, #15
 8012c96:	dd12      	ble.n	8012cbe <_malloc_r+0x346>
 8012c98:	68a3      	ldr	r3, [r4, #8]
 8012c9a:	19e2      	adds	r2, r4, r7
 8012c9c:	f047 0701 	orr.w	r7, r7, #1
 8012ca0:	6067      	str	r7, [r4, #4]
 8012ca2:	f8c3 c00c 	str.w	ip, [r3, #12]
 8012ca6:	f8cc 3008 	str.w	r3, [ip, #8]
 8012caa:	f04a 0301 	orr.w	r3, sl, #1
 8012cae:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8012cb2:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8012cb6:	6053      	str	r3, [r2, #4]
 8012cb8:	f844 a000 	str.w	sl, [r4, r0]
 8012cbc:	e68d      	b.n	80129da <_malloc_r+0x62>
 8012cbe:	f1ba 0f00 	cmp.w	sl, #0
 8012cc2:	db11      	blt.n	8012ce8 <_malloc_r+0x370>
 8012cc4:	4420      	add	r0, r4
 8012cc6:	6843      	ldr	r3, [r0, #4]
 8012cc8:	f043 0301 	orr.w	r3, r3, #1
 8012ccc:	6043      	str	r3, [r0, #4]
 8012cce:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8012cd2:	4628      	mov	r0, r5
 8012cd4:	f8c3 c00c 	str.w	ip, [r3, #12]
 8012cd8:	f8cc 3008 	str.w	r3, [ip, #8]
 8012cdc:	f000 f896 	bl	8012e0c <__malloc_unlock>
 8012ce0:	4620      	mov	r0, r4
 8012ce2:	b003      	add	sp, #12
 8012ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ce8:	4664      	mov	r4, ip
 8012cea:	e70e      	b.n	8012b0a <_malloc_r+0x192>
 8012cec:	f858 0908 	ldr.w	r0, [r8], #-8
 8012cf0:	4540      	cmp	r0, r8
 8012cf2:	f103 33ff 	add.w	r3, r3, #4294967295
 8012cf6:	f43f af12 	beq.w	8012b1e <_malloc_r+0x1a6>
 8012cfa:	e717      	b.n	8012b2c <_malloc_r+0x1b4>
 8012cfc:	3304      	adds	r3, #4
 8012cfe:	0052      	lsls	r2, r2, #1
 8012d00:	4210      	tst	r0, r2
 8012d02:	d0fb      	beq.n	8012cfc <_malloc_r+0x384>
 8012d04:	e6fb      	b.n	8012afe <_malloc_r+0x186>
 8012d06:	4673      	mov	r3, lr
 8012d08:	e7fa      	b.n	8012d00 <_malloc_r+0x388>
 8012d0a:	6810      	ldr	r0, [r2, #0]
 8012d0c:	3001      	adds	r0, #1
 8012d0e:	bf1b      	ittet	ne
 8012d10:	eba4 0b0b 	subne.w	fp, r4, fp
 8012d14:	eb0b 020e 	addne.w	r2, fp, lr
 8012d18:	6014      	streq	r4, [r2, #0]
 8012d1a:	601a      	strne	r2, [r3, #0]
 8012d1c:	f014 0b07 	ands.w	fp, r4, #7
 8012d20:	bf1a      	itte	ne
 8012d22:	f1cb 0008 	rsbne	r0, fp, #8
 8012d26:	1824      	addne	r4, r4, r0
 8012d28:	4658      	moveq	r0, fp
 8012d2a:	1862      	adds	r2, r4, r1
 8012d2c:	ea02 010c 	and.w	r1, r2, ip
 8012d30:	4480      	add	r8, r0
 8012d32:	eba8 0801 	sub.w	r8, r8, r1
 8012d36:	ea08 080c 	and.w	r8, r8, ip
 8012d3a:	4641      	mov	r1, r8
 8012d3c:	4628      	mov	r0, r5
 8012d3e:	9201      	str	r2, [sp, #4]
 8012d40:	f000 f8d2 	bl	8012ee8 <_sbrk_r>
 8012d44:	1c43      	adds	r3, r0, #1
 8012d46:	9a01      	ldr	r2, [sp, #4]
 8012d48:	4b28      	ldr	r3, [pc, #160]	; (8012dec <_malloc_r+0x474>)
 8012d4a:	d107      	bne.n	8012d5c <_malloc_r+0x3e4>
 8012d4c:	f1bb 0f00 	cmp.w	fp, #0
 8012d50:	d023      	beq.n	8012d9a <_malloc_r+0x422>
 8012d52:	f1ab 0008 	sub.w	r0, fp, #8
 8012d56:	4410      	add	r0, r2
 8012d58:	f04f 0800 	mov.w	r8, #0
 8012d5c:	681a      	ldr	r2, [r3, #0]
 8012d5e:	60b4      	str	r4, [r6, #8]
 8012d60:	1b00      	subs	r0, r0, r4
 8012d62:	4440      	add	r0, r8
 8012d64:	4442      	add	r2, r8
 8012d66:	f040 0001 	orr.w	r0, r0, #1
 8012d6a:	45b2      	cmp	sl, r6
 8012d6c:	601a      	str	r2, [r3, #0]
 8012d6e:	6060      	str	r0, [r4, #4]
 8012d70:	f43f af28 	beq.w	8012bc4 <_malloc_r+0x24c>
 8012d74:	f1b9 0f0f 	cmp.w	r9, #15
 8012d78:	d812      	bhi.n	8012da0 <_malloc_r+0x428>
 8012d7a:	2301      	movs	r3, #1
 8012d7c:	6063      	str	r3, [r4, #4]
 8012d7e:	68b3      	ldr	r3, [r6, #8]
 8012d80:	685b      	ldr	r3, [r3, #4]
 8012d82:	f023 0303 	bic.w	r3, r3, #3
 8012d86:	42bb      	cmp	r3, r7
 8012d88:	eba3 0207 	sub.w	r2, r3, r7
 8012d8c:	d301      	bcc.n	8012d92 <_malloc_r+0x41a>
 8012d8e:	2a0f      	cmp	r2, #15
 8012d90:	dc22      	bgt.n	8012dd8 <_malloc_r+0x460>
 8012d92:	4628      	mov	r0, r5
 8012d94:	f000 f83a 	bl	8012e0c <__malloc_unlock>
 8012d98:	e5fa      	b.n	8012990 <_malloc_r+0x18>
 8012d9a:	4610      	mov	r0, r2
 8012d9c:	46d8      	mov	r8, fp
 8012d9e:	e7dd      	b.n	8012d5c <_malloc_r+0x3e4>
 8012da0:	f8da 2004 	ldr.w	r2, [sl, #4]
 8012da4:	f1a9 090c 	sub.w	r9, r9, #12
 8012da8:	f029 0907 	bic.w	r9, r9, #7
 8012dac:	f002 0201 	and.w	r2, r2, #1
 8012db0:	ea42 0209 	orr.w	r2, r2, r9
 8012db4:	f8ca 2004 	str.w	r2, [sl, #4]
 8012db8:	2105      	movs	r1, #5
 8012dba:	eb0a 0209 	add.w	r2, sl, r9
 8012dbe:	f1b9 0f0f 	cmp.w	r9, #15
 8012dc2:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8012dc6:	f67f aefd 	bls.w	8012bc4 <_malloc_r+0x24c>
 8012dca:	f10a 0108 	add.w	r1, sl, #8
 8012dce:	4628      	mov	r0, r5
 8012dd0:	f003 fcf4 	bl	80167bc <_free_r>
 8012dd4:	4b05      	ldr	r3, [pc, #20]	; (8012dec <_malloc_r+0x474>)
 8012dd6:	e6f5      	b.n	8012bc4 <_malloc_r+0x24c>
 8012dd8:	68b4      	ldr	r4, [r6, #8]
 8012dda:	f047 0301 	orr.w	r3, r7, #1
 8012dde:	4427      	add	r7, r4
 8012de0:	f042 0201 	orr.w	r2, r2, #1
 8012de4:	6063      	str	r3, [r4, #4]
 8012de6:	60b7      	str	r7, [r6, #8]
 8012de8:	607a      	str	r2, [r7, #4]
 8012dea:	e5f6      	b.n	80129da <_malloc_r+0x62>
 8012dec:	20006600 	.word	0x20006600

08012df0 <memset>:
 8012df0:	4402      	add	r2, r0
 8012df2:	4603      	mov	r3, r0
 8012df4:	4293      	cmp	r3, r2
 8012df6:	d100      	bne.n	8012dfa <memset+0xa>
 8012df8:	4770      	bx	lr
 8012dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8012dfe:	e7f9      	b.n	8012df4 <memset+0x4>

08012e00 <__malloc_lock>:
 8012e00:	4801      	ldr	r0, [pc, #4]	; (8012e08 <__malloc_lock+0x8>)
 8012e02:	f003 bf0b 	b.w	8016c1c <__retarget_lock_acquire_recursive>
 8012e06:	bf00      	nop
 8012e08:	20006635 	.word	0x20006635

08012e0c <__malloc_unlock>:
 8012e0c:	4801      	ldr	r0, [pc, #4]	; (8012e14 <__malloc_unlock+0x8>)
 8012e0e:	f003 bf06 	b.w	8016c1e <__retarget_lock_release_recursive>
 8012e12:	bf00      	nop
 8012e14:	20006635 	.word	0x20006635

08012e18 <printf>:
 8012e18:	b40f      	push	{r0, r1, r2, r3}
 8012e1a:	b507      	push	{r0, r1, r2, lr}
 8012e1c:	4906      	ldr	r1, [pc, #24]	; (8012e38 <printf+0x20>)
 8012e1e:	ab04      	add	r3, sp, #16
 8012e20:	6808      	ldr	r0, [r1, #0]
 8012e22:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e26:	6881      	ldr	r1, [r0, #8]
 8012e28:	9301      	str	r3, [sp, #4]
 8012e2a:	f001 fa89 	bl	8014340 <_vfprintf_r>
 8012e2e:	b003      	add	sp, #12
 8012e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8012e34:	b004      	add	sp, #16
 8012e36:	4770      	bx	lr
 8012e38:	200004bc 	.word	0x200004bc

08012e3c <putchar>:
 8012e3c:	4b02      	ldr	r3, [pc, #8]	; (8012e48 <putchar+0xc>)
 8012e3e:	4601      	mov	r1, r0
 8012e40:	6818      	ldr	r0, [r3, #0]
 8012e42:	6882      	ldr	r2, [r0, #8]
 8012e44:	f004 bab6 	b.w	80173b4 <_putc_r>
 8012e48:	200004bc 	.word	0x200004bc

08012e4c <_puts_r>:
 8012e4c:	b530      	push	{r4, r5, lr}
 8012e4e:	4605      	mov	r5, r0
 8012e50:	b089      	sub	sp, #36	; 0x24
 8012e52:	4608      	mov	r0, r1
 8012e54:	460c      	mov	r4, r1
 8012e56:	f7ed f9f3 	bl	8000240 <strlen>
 8012e5a:	4b1e      	ldr	r3, [pc, #120]	; (8012ed4 <_puts_r+0x88>)
 8012e5c:	9306      	str	r3, [sp, #24]
 8012e5e:	2301      	movs	r3, #1
 8012e60:	e9cd 4004 	strd	r4, r0, [sp, #16]
 8012e64:	9307      	str	r3, [sp, #28]
 8012e66:	4418      	add	r0, r3
 8012e68:	ab04      	add	r3, sp, #16
 8012e6a:	9301      	str	r3, [sp, #4]
 8012e6c:	2302      	movs	r3, #2
 8012e6e:	9302      	str	r3, [sp, #8]
 8012e70:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8012e72:	68ac      	ldr	r4, [r5, #8]
 8012e74:	9003      	str	r0, [sp, #12]
 8012e76:	b913      	cbnz	r3, 8012e7e <_puts_r+0x32>
 8012e78:	4628      	mov	r0, r5
 8012e7a:	f003 fc0f 	bl	801669c <__sinit>
 8012e7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012e80:	07db      	lsls	r3, r3, #31
 8012e82:	d405      	bmi.n	8012e90 <_puts_r+0x44>
 8012e84:	89a3      	ldrh	r3, [r4, #12]
 8012e86:	0598      	lsls	r0, r3, #22
 8012e88:	d402      	bmi.n	8012e90 <_puts_r+0x44>
 8012e8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012e8c:	f003 fec6 	bl	8016c1c <__retarget_lock_acquire_recursive>
 8012e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e94:	0499      	lsls	r1, r3, #18
 8012e96:	d406      	bmi.n	8012ea6 <_puts_r+0x5a>
 8012e98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012e9c:	81a3      	strh	r3, [r4, #12]
 8012e9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012ea0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012ea4:	6663      	str	r3, [r4, #100]	; 0x64
 8012ea6:	4628      	mov	r0, r5
 8012ea8:	aa01      	add	r2, sp, #4
 8012eaa:	4621      	mov	r1, r4
 8012eac:	f003 fd46 	bl	801693c <__sfvwrite_r>
 8012eb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012eb2:	2800      	cmp	r0, #0
 8012eb4:	bf14      	ite	ne
 8012eb6:	f04f 35ff 	movne.w	r5, #4294967295
 8012eba:	250a      	moveq	r5, #10
 8012ebc:	07da      	lsls	r2, r3, #31
 8012ebe:	d405      	bmi.n	8012ecc <_puts_r+0x80>
 8012ec0:	89a3      	ldrh	r3, [r4, #12]
 8012ec2:	059b      	lsls	r3, r3, #22
 8012ec4:	d402      	bmi.n	8012ecc <_puts_r+0x80>
 8012ec6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012ec8:	f003 fea9 	bl	8016c1e <__retarget_lock_release_recursive>
 8012ecc:	4628      	mov	r0, r5
 8012ece:	b009      	add	sp, #36	; 0x24
 8012ed0:	bd30      	pop	{r4, r5, pc}
 8012ed2:	bf00      	nop
 8012ed4:	08019696 	.word	0x08019696

08012ed8 <puts>:
 8012ed8:	4b02      	ldr	r3, [pc, #8]	; (8012ee4 <puts+0xc>)
 8012eda:	4601      	mov	r1, r0
 8012edc:	6818      	ldr	r0, [r3, #0]
 8012ede:	f7ff bfb5 	b.w	8012e4c <_puts_r>
 8012ee2:	bf00      	nop
 8012ee4:	200004bc 	.word	0x200004bc

08012ee8 <_sbrk_r>:
 8012ee8:	b538      	push	{r3, r4, r5, lr}
 8012eea:	4d06      	ldr	r5, [pc, #24]	; (8012f04 <_sbrk_r+0x1c>)
 8012eec:	2300      	movs	r3, #0
 8012eee:	4604      	mov	r4, r0
 8012ef0:	4608      	mov	r0, r1
 8012ef2:	602b      	str	r3, [r5, #0]
 8012ef4:	f006 f844 	bl	8018f80 <_sbrk>
 8012ef8:	1c43      	adds	r3, r0, #1
 8012efa:	d102      	bne.n	8012f02 <_sbrk_r+0x1a>
 8012efc:	682b      	ldr	r3, [r5, #0]
 8012efe:	b103      	cbz	r3, 8012f02 <_sbrk_r+0x1a>
 8012f00:	6023      	str	r3, [r4, #0]
 8012f02:	bd38      	pop	{r3, r4, r5, pc}
 8012f04:	20006638 	.word	0x20006638

08012f08 <sprintf>:
 8012f08:	b40e      	push	{r1, r2, r3}
 8012f0a:	b500      	push	{lr}
 8012f0c:	b09c      	sub	sp, #112	; 0x70
 8012f0e:	ab1d      	add	r3, sp, #116	; 0x74
 8012f10:	9002      	str	r0, [sp, #8]
 8012f12:	9006      	str	r0, [sp, #24]
 8012f14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012f18:	4809      	ldr	r0, [pc, #36]	; (8012f40 <sprintf+0x38>)
 8012f1a:	9107      	str	r1, [sp, #28]
 8012f1c:	9104      	str	r1, [sp, #16]
 8012f1e:	4909      	ldr	r1, [pc, #36]	; (8012f44 <sprintf+0x3c>)
 8012f20:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f24:	9105      	str	r1, [sp, #20]
 8012f26:	6800      	ldr	r0, [r0, #0]
 8012f28:	9301      	str	r3, [sp, #4]
 8012f2a:	a902      	add	r1, sp, #8
 8012f2c:	f000 f82c 	bl	8012f88 <_svfprintf_r>
 8012f30:	9b02      	ldr	r3, [sp, #8]
 8012f32:	2200      	movs	r2, #0
 8012f34:	701a      	strb	r2, [r3, #0]
 8012f36:	b01c      	add	sp, #112	; 0x70
 8012f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f3c:	b003      	add	sp, #12
 8012f3e:	4770      	bx	lr
 8012f40:	200004bc 	.word	0x200004bc
 8012f44:	ffff0208 	.word	0xffff0208

08012f48 <strcpy>:
 8012f48:	4603      	mov	r3, r0
 8012f4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012f4e:	f803 2b01 	strb.w	r2, [r3], #1
 8012f52:	2a00      	cmp	r2, #0
 8012f54:	d1f9      	bne.n	8012f4a <strcpy+0x2>
 8012f56:	4770      	bx	lr

08012f58 <strstr>:
 8012f58:	780a      	ldrb	r2, [r1, #0]
 8012f5a:	b570      	push	{r4, r5, r6, lr}
 8012f5c:	b96a      	cbnz	r2, 8012f7a <strstr+0x22>
 8012f5e:	bd70      	pop	{r4, r5, r6, pc}
 8012f60:	429a      	cmp	r2, r3
 8012f62:	d109      	bne.n	8012f78 <strstr+0x20>
 8012f64:	460c      	mov	r4, r1
 8012f66:	4605      	mov	r5, r0
 8012f68:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d0f6      	beq.n	8012f5e <strstr+0x6>
 8012f70:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8012f74:	429e      	cmp	r6, r3
 8012f76:	d0f7      	beq.n	8012f68 <strstr+0x10>
 8012f78:	3001      	adds	r0, #1
 8012f7a:	7803      	ldrb	r3, [r0, #0]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d1ef      	bne.n	8012f60 <strstr+0x8>
 8012f80:	4618      	mov	r0, r3
 8012f82:	e7ec      	b.n	8012f5e <strstr+0x6>
 8012f84:	0000      	movs	r0, r0
	...

08012f88 <_svfprintf_r>:
 8012f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f8c:	ed2d 8b04 	vpush	{d8-d9}
 8012f90:	b0cb      	sub	sp, #300	; 0x12c
 8012f92:	468b      	mov	fp, r1
 8012f94:	4692      	mov	sl, r2
 8012f96:	4698      	mov	r8, r3
 8012f98:	4607      	mov	r7, r0
 8012f9a:	f003 fe39 	bl	8016c10 <_localeconv_r>
 8012f9e:	6803      	ldr	r3, [r0, #0]
 8012fa0:	930f      	str	r3, [sp, #60]	; 0x3c
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	f7ed f94c 	bl	8000240 <strlen>
 8012fa8:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8012fac:	900b      	str	r0, [sp, #44]	; 0x2c
 8012fae:	061a      	lsls	r2, r3, #24
 8012fb0:	d519      	bpl.n	8012fe6 <_svfprintf_r+0x5e>
 8012fb2:	f8db 3010 	ldr.w	r3, [fp, #16]
 8012fb6:	b9b3      	cbnz	r3, 8012fe6 <_svfprintf_r+0x5e>
 8012fb8:	2140      	movs	r1, #64	; 0x40
 8012fba:	4638      	mov	r0, r7
 8012fbc:	f7ff fcdc 	bl	8012978 <_malloc_r>
 8012fc0:	f8cb 0000 	str.w	r0, [fp]
 8012fc4:	f8cb 0010 	str.w	r0, [fp, #16]
 8012fc8:	b950      	cbnz	r0, 8012fe0 <_svfprintf_r+0x58>
 8012fca:	230c      	movs	r3, #12
 8012fcc:	603b      	str	r3, [r7, #0]
 8012fce:	f04f 33ff 	mov.w	r3, #4294967295
 8012fd2:	930a      	str	r3, [sp, #40]	; 0x28
 8012fd4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012fd6:	b04b      	add	sp, #300	; 0x12c
 8012fd8:	ecbd 8b04 	vpop	{d8-d9}
 8012fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fe0:	2340      	movs	r3, #64	; 0x40
 8012fe2:	f8cb 3014 	str.w	r3, [fp, #20]
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
 8012fec:	ed9f 8b96 	vldr	d8, [pc, #600]	; 8013248 <_svfprintf_r+0x2c0>
 8012ff0:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8012ff4:	ac21      	add	r4, sp, #132	; 0x84
 8012ff6:	941e      	str	r4, [sp, #120]	; 0x78
 8012ff8:	9303      	str	r3, [sp, #12]
 8012ffa:	9308      	str	r3, [sp, #32]
 8012ffc:	930e      	str	r3, [sp, #56]	; 0x38
 8012ffe:	9310      	str	r3, [sp, #64]	; 0x40
 8013000:	930a      	str	r3, [sp, #40]	; 0x28
 8013002:	4653      	mov	r3, sl
 8013004:	461d      	mov	r5, r3
 8013006:	f813 2b01 	ldrb.w	r2, [r3], #1
 801300a:	b10a      	cbz	r2, 8013010 <_svfprintf_r+0x88>
 801300c:	2a25      	cmp	r2, #37	; 0x25
 801300e:	d1f9      	bne.n	8013004 <_svfprintf_r+0x7c>
 8013010:	ebb5 060a 	subs.w	r6, r5, sl
 8013014:	d00d      	beq.n	8013032 <_svfprintf_r+0xaa>
 8013016:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013018:	4433      	add	r3, r6
 801301a:	9320      	str	r3, [sp, #128]	; 0x80
 801301c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801301e:	3301      	adds	r3, #1
 8013020:	2b07      	cmp	r3, #7
 8013022:	e9c4 a600 	strd	sl, r6, [r4]
 8013026:	931f      	str	r3, [sp, #124]	; 0x7c
 8013028:	dc77      	bgt.n	801311a <_svfprintf_r+0x192>
 801302a:	3408      	adds	r4, #8
 801302c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801302e:	4433      	add	r3, r6
 8013030:	930a      	str	r3, [sp, #40]	; 0x28
 8013032:	782b      	ldrb	r3, [r5, #0]
 8013034:	2b00      	cmp	r3, #0
 8013036:	f001 8135 	beq.w	80142a4 <_svfprintf_r+0x131c>
 801303a:	2200      	movs	r2, #0
 801303c:	1c6b      	adds	r3, r5, #1
 801303e:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 8013042:	f04f 36ff 	mov.w	r6, #4294967295
 8013046:	920c      	str	r2, [sp, #48]	; 0x30
 8013048:	4615      	mov	r5, r2
 801304a:	f04f 092b 	mov.w	r9, #43	; 0x2b
 801304e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013052:	9204      	str	r2, [sp, #16]
 8013054:	9309      	str	r3, [sp, #36]	; 0x24
 8013056:	9b04      	ldr	r3, [sp, #16]
 8013058:	3b20      	subs	r3, #32
 801305a:	2b5a      	cmp	r3, #90	; 0x5a
 801305c:	f200 8590 	bhi.w	8013b80 <_svfprintf_r+0xbf8>
 8013060:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013064:	058e007d 	.word	0x058e007d
 8013068:	0085058e 	.word	0x0085058e
 801306c:	058e058e 	.word	0x058e058e
 8013070:	0065058e 	.word	0x0065058e
 8013074:	058e058e 	.word	0x058e058e
 8013078:	00920088 	.word	0x00920088
 801307c:	008f058e 	.word	0x008f058e
 8013080:	058e0095 	.word	0x058e0095
 8013084:	00b200af 	.word	0x00b200af
 8013088:	00b200b2 	.word	0x00b200b2
 801308c:	00b200b2 	.word	0x00b200b2
 8013090:	00b200b2 	.word	0x00b200b2
 8013094:	00b200b2 	.word	0x00b200b2
 8013098:	058e058e 	.word	0x058e058e
 801309c:	058e058e 	.word	0x058e058e
 80130a0:	058e058e 	.word	0x058e058e
 80130a4:	012d058e 	.word	0x012d058e
 80130a8:	00e0058e 	.word	0x00e0058e
 80130ac:	012d00fa 	.word	0x012d00fa
 80130b0:	012d012d 	.word	0x012d012d
 80130b4:	058e058e 	.word	0x058e058e
 80130b8:	058e058e 	.word	0x058e058e
 80130bc:	058e00c3 	.word	0x058e00c3
 80130c0:	0455058e 	.word	0x0455058e
 80130c4:	058e058e 	.word	0x058e058e
 80130c8:	04a3058e 	.word	0x04a3058e
 80130cc:	04c7058e 	.word	0x04c7058e
 80130d0:	058e058e 	.word	0x058e058e
 80130d4:	058e04ed 	.word	0x058e04ed
 80130d8:	058e058e 	.word	0x058e058e
 80130dc:	058e058e 	.word	0x058e058e
 80130e0:	058e058e 	.word	0x058e058e
 80130e4:	012d058e 	.word	0x012d058e
 80130e8:	00e0058e 	.word	0x00e0058e
 80130ec:	012d00fc 	.word	0x012d00fc
 80130f0:	012d012d 	.word	0x012d012d
 80130f4:	00fc00c6 	.word	0x00fc00c6
 80130f8:	058e00da 	.word	0x058e00da
 80130fc:	058e00d3 	.word	0x058e00d3
 8013100:	0457042e 	.word	0x0457042e
 8013104:	00da0490 	.word	0x00da0490
 8013108:	04a3058e 	.word	0x04a3058e
 801310c:	04c9007b 	.word	0x04c9007b
 8013110:	058e058e 	.word	0x058e058e
 8013114:	058e050d 	.word	0x058e050d
 8013118:	007b      	.short	0x007b
 801311a:	aa1e      	add	r2, sp, #120	; 0x78
 801311c:	4659      	mov	r1, fp
 801311e:	4638      	mov	r0, r7
 8013120:	f004 fbb0 	bl	8017884 <__ssprint_r>
 8013124:	2800      	cmp	r0, #0
 8013126:	f040 8126 	bne.w	8013376 <_svfprintf_r+0x3ee>
 801312a:	ac21      	add	r4, sp, #132	; 0x84
 801312c:	e77e      	b.n	801302c <_svfprintf_r+0xa4>
 801312e:	4638      	mov	r0, r7
 8013130:	f003 fd6e 	bl	8016c10 <_localeconv_r>
 8013134:	6843      	ldr	r3, [r0, #4]
 8013136:	9310      	str	r3, [sp, #64]	; 0x40
 8013138:	4618      	mov	r0, r3
 801313a:	f7ed f881 	bl	8000240 <strlen>
 801313e:	900e      	str	r0, [sp, #56]	; 0x38
 8013140:	4638      	mov	r0, r7
 8013142:	f003 fd65 	bl	8016c10 <_localeconv_r>
 8013146:	6883      	ldr	r3, [r0, #8]
 8013148:	9308      	str	r3, [sp, #32]
 801314a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801314c:	b12b      	cbz	r3, 801315a <_svfprintf_r+0x1d2>
 801314e:	9b08      	ldr	r3, [sp, #32]
 8013150:	b11b      	cbz	r3, 801315a <_svfprintf_r+0x1d2>
 8013152:	781b      	ldrb	r3, [r3, #0]
 8013154:	b10b      	cbz	r3, 801315a <_svfprintf_r+0x1d2>
 8013156:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 801315a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801315c:	e777      	b.n	801304e <_svfprintf_r+0xc6>
 801315e:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8013162:	2b00      	cmp	r3, #0
 8013164:	d1f9      	bne.n	801315a <_svfprintf_r+0x1d2>
 8013166:	2320      	movs	r3, #32
 8013168:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 801316c:	e7f5      	b.n	801315a <_svfprintf_r+0x1d2>
 801316e:	f045 0501 	orr.w	r5, r5, #1
 8013172:	e7f2      	b.n	801315a <_svfprintf_r+0x1d2>
 8013174:	f858 3b04 	ldr.w	r3, [r8], #4
 8013178:	930c      	str	r3, [sp, #48]	; 0x30
 801317a:	2b00      	cmp	r3, #0
 801317c:	daed      	bge.n	801315a <_svfprintf_r+0x1d2>
 801317e:	425b      	negs	r3, r3
 8013180:	930c      	str	r3, [sp, #48]	; 0x30
 8013182:	f045 0504 	orr.w	r5, r5, #4
 8013186:	e7e8      	b.n	801315a <_svfprintf_r+0x1d2>
 8013188:	f88d 905b 	strb.w	r9, [sp, #91]	; 0x5b
 801318c:	e7e5      	b.n	801315a <_svfprintf_r+0x1d2>
 801318e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013190:	f812 3b01 	ldrb.w	r3, [r2], #1
 8013194:	9304      	str	r3, [sp, #16]
 8013196:	2b2a      	cmp	r3, #42	; 0x2a
 8013198:	d111      	bne.n	80131be <_svfprintf_r+0x236>
 801319a:	f858 6b04 	ldr.w	r6, [r8], #4
 801319e:	9209      	str	r2, [sp, #36]	; 0x24
 80131a0:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 80131a4:	e7d9      	b.n	801315a <_svfprintf_r+0x1d2>
 80131a6:	210a      	movs	r1, #10
 80131a8:	fb01 3606 	mla	r6, r1, r6, r3
 80131ac:	f812 3b01 	ldrb.w	r3, [r2], #1
 80131b0:	9304      	str	r3, [sp, #16]
 80131b2:	9b04      	ldr	r3, [sp, #16]
 80131b4:	3b30      	subs	r3, #48	; 0x30
 80131b6:	2b09      	cmp	r3, #9
 80131b8:	d9f5      	bls.n	80131a6 <_svfprintf_r+0x21e>
 80131ba:	9209      	str	r2, [sp, #36]	; 0x24
 80131bc:	e74b      	b.n	8013056 <_svfprintf_r+0xce>
 80131be:	2600      	movs	r6, #0
 80131c0:	e7f7      	b.n	80131b2 <_svfprintf_r+0x22a>
 80131c2:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80131c6:	e7c8      	b.n	801315a <_svfprintf_r+0x1d2>
 80131c8:	2300      	movs	r3, #0
 80131ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80131cc:	930c      	str	r3, [sp, #48]	; 0x30
 80131ce:	9b04      	ldr	r3, [sp, #16]
 80131d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80131d2:	3b30      	subs	r3, #48	; 0x30
 80131d4:	200a      	movs	r0, #10
 80131d6:	fb00 3301 	mla	r3, r0, r1, r3
 80131da:	930c      	str	r3, [sp, #48]	; 0x30
 80131dc:	f812 3b01 	ldrb.w	r3, [r2], #1
 80131e0:	9304      	str	r3, [sp, #16]
 80131e2:	3b30      	subs	r3, #48	; 0x30
 80131e4:	2b09      	cmp	r3, #9
 80131e6:	d9f2      	bls.n	80131ce <_svfprintf_r+0x246>
 80131e8:	e7e7      	b.n	80131ba <_svfprintf_r+0x232>
 80131ea:	f045 0508 	orr.w	r5, r5, #8
 80131ee:	e7b4      	b.n	801315a <_svfprintf_r+0x1d2>
 80131f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131f2:	781b      	ldrb	r3, [r3, #0]
 80131f4:	2b68      	cmp	r3, #104	; 0x68
 80131f6:	bf01      	itttt	eq
 80131f8:	9b09      	ldreq	r3, [sp, #36]	; 0x24
 80131fa:	3301      	addeq	r3, #1
 80131fc:	9309      	streq	r3, [sp, #36]	; 0x24
 80131fe:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
 8013202:	bf18      	it	ne
 8013204:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
 8013208:	e7a7      	b.n	801315a <_svfprintf_r+0x1d2>
 801320a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801320c:	781b      	ldrb	r3, [r3, #0]
 801320e:	2b6c      	cmp	r3, #108	; 0x6c
 8013210:	d105      	bne.n	801321e <_svfprintf_r+0x296>
 8013212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013214:	3301      	adds	r3, #1
 8013216:	9309      	str	r3, [sp, #36]	; 0x24
 8013218:	f045 0520 	orr.w	r5, r5, #32
 801321c:	e79d      	b.n	801315a <_svfprintf_r+0x1d2>
 801321e:	f045 0510 	orr.w	r5, r5, #16
 8013222:	e79a      	b.n	801315a <_svfprintf_r+0x1d2>
 8013224:	4642      	mov	r2, r8
 8013226:	2000      	movs	r0, #0
 8013228:	f852 3b04 	ldr.w	r3, [r2], #4
 801322c:	9205      	str	r2, [sp, #20]
 801322e:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 8013232:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
 8013236:	e9cd 0006 	strd	r0, r0, [sp, #24]
 801323a:	9002      	str	r0, [sp, #8]
 801323c:	2601      	movs	r6, #1
 801323e:	4681      	mov	r9, r0
 8013240:	4680      	mov	r8, r0
 8013242:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 8013246:	e18e      	b.n	8013566 <_svfprintf_r+0x5de>
	...
 8013250:	ffffffff 	.word	0xffffffff
 8013254:	7fefffff 	.word	0x7fefffff
 8013258:	f045 0510 	orr.w	r5, r5, #16
 801325c:	06ab      	lsls	r3, r5, #26
 801325e:	d516      	bpl.n	801328e <_svfprintf_r+0x306>
 8013260:	f108 0307 	add.w	r3, r8, #7
 8013264:	f023 0307 	bic.w	r3, r3, #7
 8013268:	461a      	mov	r2, r3
 801326a:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801326e:	f852 8b08 	ldr.w	r8, [r2], #8
 8013272:	9205      	str	r2, [sp, #20]
 8013274:	f1b9 0f00 	cmp.w	r9, #0
 8013278:	da07      	bge.n	801328a <_svfprintf_r+0x302>
 801327a:	f1d8 0800 	rsbs	r8, r8, #0
 801327e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8013282:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
 8013286:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 801328a:	2301      	movs	r3, #1
 801328c:	e354      	b.n	8013938 <_svfprintf_r+0x9b0>
 801328e:	4642      	mov	r2, r8
 8013290:	06e8      	lsls	r0, r5, #27
 8013292:	f852 3b04 	ldr.w	r3, [r2], #4
 8013296:	9205      	str	r2, [sp, #20]
 8013298:	d503      	bpl.n	80132a2 <_svfprintf_r+0x31a>
 801329a:	4698      	mov	r8, r3
 801329c:	ea4f 79e3 	mov.w	r9, r3, asr #31
 80132a0:	e7e8      	b.n	8013274 <_svfprintf_r+0x2ec>
 80132a2:	0669      	lsls	r1, r5, #25
 80132a4:	d504      	bpl.n	80132b0 <_svfprintf_r+0x328>
 80132a6:	fa0f f883 	sxth.w	r8, r3
 80132aa:	f343 39c0 	sbfx	r9, r3, #15, #1
 80132ae:	e7e1      	b.n	8013274 <_svfprintf_r+0x2ec>
 80132b0:	05aa      	lsls	r2, r5, #22
 80132b2:	d5f2      	bpl.n	801329a <_svfprintf_r+0x312>
 80132b4:	fa4f f883 	sxtb.w	r8, r3
 80132b8:	f343 19c0 	sbfx	r9, r3, #7, #1
 80132bc:	e7da      	b.n	8013274 <_svfprintf_r+0x2ec>
 80132be:	f108 0807 	add.w	r8, r8, #7
 80132c2:	f028 0307 	bic.w	r3, r8, #7
 80132c6:	ecb3 8b02 	vldmia	r3!, {d8}
 80132ca:	ed1f 7b1f 	vldr	d7, [pc, #-124]	; 8013250 <_svfprintf_r+0x2c8>
 80132ce:	eeb0 6bc8 	vabs.f64	d6, d8
 80132d2:	eeb4 6b47 	vcmp.f64	d6, d7
 80132d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132da:	9305      	str	r3, [sp, #20]
 80132dc:	dd18      	ble.n	8013310 <_svfprintf_r+0x388>
 80132de:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 80132e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132e6:	d502      	bpl.n	80132ee <_svfprintf_r+0x366>
 80132e8:	232d      	movs	r3, #45	; 0x2d
 80132ea:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 80132ee:	4a26      	ldr	r2, [pc, #152]	; (8013388 <_svfprintf_r+0x400>)
 80132f0:	4826      	ldr	r0, [pc, #152]	; (801338c <_svfprintf_r+0x404>)
 80132f2:	9b04      	ldr	r3, [sp, #16]
 80132f4:	2b47      	cmp	r3, #71	; 0x47
 80132f6:	bfd4      	ite	le
 80132f8:	4692      	movle	sl, r2
 80132fa:	4682      	movgt	sl, r0
 80132fc:	2300      	movs	r3, #0
 80132fe:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8013302:	9302      	str	r3, [sp, #8]
 8013304:	2603      	movs	r6, #3
 8013306:	4699      	mov	r9, r3
 8013308:	e9cd 3306 	strd	r3, r3, [sp, #24]
 801330c:	4698      	mov	r8, r3
 801330e:	e12a      	b.n	8013566 <_svfprintf_r+0x5de>
 8013310:	eeb4 8b48 	vcmp.f64	d8, d8
 8013314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013318:	d70a      	bvc.n	8013330 <_svfprintf_r+0x3a8>
 801331a:	ee18 3a90 	vmov	r3, s17
 801331e:	2b00      	cmp	r3, #0
 8013320:	bfb8      	it	lt
 8013322:	232d      	movlt	r3, #45	; 0x2d
 8013324:	4a1a      	ldr	r2, [pc, #104]	; (8013390 <_svfprintf_r+0x408>)
 8013326:	481b      	ldr	r0, [pc, #108]	; (8013394 <_svfprintf_r+0x40c>)
 8013328:	bfb8      	it	lt
 801332a:	f88d 305b 	strblt.w	r3, [sp, #91]	; 0x5b
 801332e:	e7e0      	b.n	80132f2 <_svfprintf_r+0x36a>
 8013330:	9b04      	ldr	r3, [sp, #16]
 8013332:	f023 0920 	bic.w	r9, r3, #32
 8013336:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 801333a:	d12d      	bne.n	8013398 <_svfprintf_r+0x410>
 801333c:	2330      	movs	r3, #48	; 0x30
 801333e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8013342:	9b04      	ldr	r3, [sp, #16]
 8013344:	2b61      	cmp	r3, #97	; 0x61
 8013346:	bf0c      	ite	eq
 8013348:	2378      	moveq	r3, #120	; 0x78
 801334a:	2358      	movne	r3, #88	; 0x58
 801334c:	2e63      	cmp	r6, #99	; 0x63
 801334e:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 8013352:	f045 0502 	orr.w	r5, r5, #2
 8013356:	f340 81db 	ble.w	8013710 <_svfprintf_r+0x788>
 801335a:	1c71      	adds	r1, r6, #1
 801335c:	4638      	mov	r0, r7
 801335e:	f7ff fb0b 	bl	8012978 <_malloc_r>
 8013362:	4682      	mov	sl, r0
 8013364:	2800      	cmp	r0, #0
 8013366:	f040 81d8 	bne.w	801371a <_svfprintf_r+0x792>
 801336a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801336e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013372:	f8ab 300c 	strh.w	r3, [fp, #12]
 8013376:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801337a:	f013 0f40 	tst.w	r3, #64	; 0x40
 801337e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013380:	bf18      	it	ne
 8013382:	f04f 33ff 	movne.w	r3, #4294967295
 8013386:	e624      	b.n	8012fd2 <_svfprintf_r+0x4a>
 8013388:	080193f4 	.word	0x080193f4
 801338c:	080193f8 	.word	0x080193f8
 8013390:	080193fc 	.word	0x080193fc
 8013394:	08019400 	.word	0x08019400
 8013398:	1c73      	adds	r3, r6, #1
 801339a:	f000 81c0 	beq.w	801371e <_svfprintf_r+0x796>
 801339e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80133a2:	f040 81c0 	bne.w	8013726 <_svfprintf_r+0x79e>
 80133a6:	2e00      	cmp	r6, #0
 80133a8:	f040 81bd 	bne.w	8013726 <_svfprintf_r+0x79e>
 80133ac:	9602      	str	r6, [sp, #8]
 80133ae:	2601      	movs	r6, #1
 80133b0:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 80133b4:	930d      	str	r3, [sp, #52]	; 0x34
 80133b6:	ee18 3a90 	vmov	r3, s17
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	f280 81b6 	bge.w	801372c <_svfprintf_r+0x7a4>
 80133c0:	eeb1 9b48 	vneg.f64	d9, d8
 80133c4:	232d      	movs	r3, #45	; 0x2d
 80133c6:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 80133ca:	9313      	str	r3, [sp, #76]	; 0x4c
 80133cc:	f040 81c7 	bne.w	801375e <_svfprintf_r+0x7d6>
 80133d0:	eeb0 0b49 	vmov.f64	d0, d9
 80133d4:	a818      	add	r0, sp, #96	; 0x60
 80133d6:	f004 f9c7 	bl	8017768 <frexp>
 80133da:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
 80133de:	ee20 0b07 	vmul.f64	d0, d0, d7
 80133e2:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80133e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133ea:	bf08      	it	eq
 80133ec:	2301      	moveq	r3, #1
 80133ee:	9a04      	ldr	r2, [sp, #16]
 80133f0:	bf08      	it	eq
 80133f2:	9318      	streq	r3, [sp, #96]	; 0x60
 80133f4:	49b5      	ldr	r1, [pc, #724]	; (80136cc <_svfprintf_r+0x744>)
 80133f6:	4bb6      	ldr	r3, [pc, #728]	; (80136d0 <_svfprintf_r+0x748>)
 80133f8:	eeb3 7b00 	vmov.f64	d7, #48	; 0x41800000  16.0
 80133fc:	2a61      	cmp	r2, #97	; 0x61
 80133fe:	bf18      	it	ne
 8013400:	4619      	movne	r1, r3
 8013402:	1e72      	subs	r2, r6, #1
 8013404:	4653      	mov	r3, sl
 8013406:	ee20 0b07 	vmul.f64	d0, d0, d7
 801340a:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 801340e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013412:	ee16 ca90 	vmov	ip, s13
 8013416:	f811 000c 	ldrb.w	r0, [r1, ip]
 801341a:	f803 0b01 	strb.w	r0, [r3], #1
 801341e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013422:	4610      	mov	r0, r2
 8013424:	ee30 0b46 	vsub.f64	d0, d0, d6
 8013428:	d006      	beq.n	8013438 <_svfprintf_r+0x4b0>
 801342a:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801342e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013432:	f102 32ff 	add.w	r2, r2, #4294967295
 8013436:	d1e6      	bne.n	8013406 <_svfprintf_r+0x47e>
 8013438:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801343c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013444:	dc09      	bgt.n	801345a <_svfprintf_r+0x4d2>
 8013446:	eeb4 0b47 	vcmp.f64	d0, d7
 801344a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801344e:	f040 8180 	bne.w	8013752 <_svfprintf_r+0x7ca>
 8013452:	f01c 0f01 	tst.w	ip, #1
 8013456:	f000 817c 	beq.w	8013752 <_svfprintf_r+0x7ca>
 801345a:	f891 c00f 	ldrb.w	ip, [r1, #15]
 801345e:	931c      	str	r3, [sp, #112]	; 0x70
 8013460:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8013464:	981c      	ldr	r0, [sp, #112]	; 0x70
 8013466:	1e42      	subs	r2, r0, #1
 8013468:	921c      	str	r2, [sp, #112]	; 0x70
 801346a:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 801346e:	4562      	cmp	r2, ip
 8013470:	f000 8160 	beq.w	8013734 <_svfprintf_r+0x7ac>
 8013474:	2a39      	cmp	r2, #57	; 0x39
 8013476:	bf16      	itet	ne
 8013478:	3201      	addne	r2, #1
 801347a:	7a8a      	ldrbeq	r2, [r1, #10]
 801347c:	b2d2      	uxtbne	r2, r2
 801347e:	f800 2c01 	strb.w	r2, [r0, #-1]
 8013482:	eba3 030a 	sub.w	r3, r3, sl
 8013486:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801348a:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801348e:	9303      	str	r3, [sp, #12]
 8013490:	f040 81a7 	bne.w	80137e2 <_svfprintf_r+0x85a>
 8013494:	f118 0f03 	cmn.w	r8, #3
 8013498:	db02      	blt.n	80134a0 <_svfprintf_r+0x518>
 801349a:	4546      	cmp	r6, r8
 801349c:	f280 81c9 	bge.w	8013832 <_svfprintf_r+0x8aa>
 80134a0:	9b04      	ldr	r3, [sp, #16]
 80134a2:	3b02      	subs	r3, #2
 80134a4:	9304      	str	r3, [sp, #16]
 80134a6:	9904      	ldr	r1, [sp, #16]
 80134a8:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80134ac:	f021 0120 	bic.w	r1, r1, #32
 80134b0:	2941      	cmp	r1, #65	; 0x41
 80134b2:	bf08      	it	eq
 80134b4:	320f      	addeq	r2, #15
 80134b6:	f108 33ff 	add.w	r3, r8, #4294967295
 80134ba:	bf06      	itte	eq
 80134bc:	b2d2      	uxtbeq	r2, r2
 80134be:	2101      	moveq	r1, #1
 80134c0:	2100      	movne	r1, #0
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	9318      	str	r3, [sp, #96]	; 0x60
 80134c6:	bfb8      	it	lt
 80134c8:	f1c8 0301 	rsblt	r3, r8, #1
 80134cc:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
 80134d0:	bfb4      	ite	lt
 80134d2:	222d      	movlt	r2, #45	; 0x2d
 80134d4:	222b      	movge	r2, #43	; 0x2b
 80134d6:	2b09      	cmp	r3, #9
 80134d8:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 80134dc:	f340 8198 	ble.w	8013810 <_svfprintf_r+0x888>
 80134e0:	f10d 0277 	add.w	r2, sp, #119	; 0x77
 80134e4:	200a      	movs	r0, #10
 80134e6:	4611      	mov	r1, r2
 80134e8:	fb93 f6f0 	sdiv	r6, r3, r0
 80134ec:	fb00 3016 	mls	r0, r0, r6, r3
 80134f0:	3030      	adds	r0, #48	; 0x30
 80134f2:	f801 0c01 	strb.w	r0, [r1, #-1]
 80134f6:	4618      	mov	r0, r3
 80134f8:	2863      	cmp	r0, #99	; 0x63
 80134fa:	f102 32ff 	add.w	r2, r2, #4294967295
 80134fe:	4633      	mov	r3, r6
 8013500:	dcf0      	bgt.n	80134e4 <_svfprintf_r+0x55c>
 8013502:	3330      	adds	r3, #48	; 0x30
 8013504:	1e88      	subs	r0, r1, #2
 8013506:	f802 3c01 	strb.w	r3, [r2, #-1]
 801350a:	f10d 0677 	add.w	r6, sp, #119	; 0x77
 801350e:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 8013512:	4603      	mov	r3, r0
 8013514:	42b3      	cmp	r3, r6
 8013516:	f0c0 8176 	bcc.w	8013806 <_svfprintf_r+0x87e>
 801351a:	f10d 0279 	add.w	r2, sp, #121	; 0x79
 801351e:	1a52      	subs	r2, r2, r1
 8013520:	42b0      	cmp	r0, r6
 8013522:	bf88      	it	hi
 8013524:	2200      	movhi	r2, #0
 8013526:	f10d 036a 	add.w	r3, sp, #106	; 0x6a
 801352a:	441a      	add	r2, r3
 801352c:	ab1a      	add	r3, sp, #104	; 0x68
 801352e:	1ad3      	subs	r3, r2, r3
 8013530:	9a03      	ldr	r2, [sp, #12]
 8013532:	9311      	str	r3, [sp, #68]	; 0x44
 8013534:	2a01      	cmp	r2, #1
 8013536:	eb03 0602 	add.w	r6, r3, r2
 801353a:	dc01      	bgt.n	8013540 <_svfprintf_r+0x5b8>
 801353c:	07e8      	lsls	r0, r5, #31
 801353e:	d501      	bpl.n	8013544 <_svfprintf_r+0x5bc>
 8013540:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013542:	441e      	add	r6, r3
 8013544:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8013548:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 801354c:	930d      	str	r3, [sp, #52]	; 0x34
 801354e:	2300      	movs	r3, #0
 8013550:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8013554:	4698      	mov	r8, r3
 8013556:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013558:	b113      	cbz	r3, 8013560 <_svfprintf_r+0x5d8>
 801355a:	232d      	movs	r3, #45	; 0x2d
 801355c:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8013560:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8013562:	f04f 0900 	mov.w	r9, #0
 8013566:	45b1      	cmp	r9, r6
 8013568:	464b      	mov	r3, r9
 801356a:	bfb8      	it	lt
 801356c:	4633      	movlt	r3, r6
 801356e:	930d      	str	r3, [sp, #52]	; 0x34
 8013570:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8013574:	b113      	cbz	r3, 801357c <_svfprintf_r+0x5f4>
 8013576:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013578:	3301      	adds	r3, #1
 801357a:	930d      	str	r3, [sp, #52]	; 0x34
 801357c:	f015 0302 	ands.w	r3, r5, #2
 8013580:	9313      	str	r3, [sp, #76]	; 0x4c
 8013582:	bf1e      	ittt	ne
 8013584:	9b0d      	ldrne	r3, [sp, #52]	; 0x34
 8013586:	3302      	addne	r3, #2
 8013588:	930d      	strne	r3, [sp, #52]	; 0x34
 801358a:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 801358e:	9314      	str	r3, [sp, #80]	; 0x50
 8013590:	d120      	bne.n	80135d4 <_svfprintf_r+0x64c>
 8013592:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8013596:	1a9b      	subs	r3, r3, r2
 8013598:	2b00      	cmp	r3, #0
 801359a:	dd1b      	ble.n	80135d4 <_svfprintf_r+0x64c>
 801359c:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 80135a0:	494c      	ldr	r1, [pc, #304]	; (80136d4 <_svfprintf_r+0x74c>)
 80135a2:	6021      	str	r1, [r4, #0]
 80135a4:	2b10      	cmp	r3, #16
 80135a6:	f102 0201 	add.w	r2, r2, #1
 80135aa:	f104 0008 	add.w	r0, r4, #8
 80135ae:	f300 82f7 	bgt.w	8013ba0 <_svfprintf_r+0xc18>
 80135b2:	eb0c 0103 	add.w	r1, ip, r3
 80135b6:	2a07      	cmp	r2, #7
 80135b8:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 80135bc:	6063      	str	r3, [r4, #4]
 80135be:	f340 8304 	ble.w	8013bca <_svfprintf_r+0xc42>
 80135c2:	aa1e      	add	r2, sp, #120	; 0x78
 80135c4:	4659      	mov	r1, fp
 80135c6:	4638      	mov	r0, r7
 80135c8:	f004 f95c 	bl	8017884 <__ssprint_r>
 80135cc:	2800      	cmp	r0, #0
 80135ce:	f040 8646 	bne.w	801425e <_svfprintf_r+0x12d6>
 80135d2:	ac21      	add	r4, sp, #132	; 0x84
 80135d4:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 80135d8:	b173      	cbz	r3, 80135f8 <_svfprintf_r+0x670>
 80135da:	f10d 035b 	add.w	r3, sp, #91	; 0x5b
 80135de:	6023      	str	r3, [r4, #0]
 80135e0:	2301      	movs	r3, #1
 80135e2:	6063      	str	r3, [r4, #4]
 80135e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80135e6:	3301      	adds	r3, #1
 80135e8:	9320      	str	r3, [sp, #128]	; 0x80
 80135ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80135ec:	3301      	adds	r3, #1
 80135ee:	2b07      	cmp	r3, #7
 80135f0:	931f      	str	r3, [sp, #124]	; 0x7c
 80135f2:	f300 82ec 	bgt.w	8013bce <_svfprintf_r+0xc46>
 80135f6:	3408      	adds	r4, #8
 80135f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80135fa:	b16b      	cbz	r3, 8013618 <_svfprintf_r+0x690>
 80135fc:	ab17      	add	r3, sp, #92	; 0x5c
 80135fe:	6023      	str	r3, [r4, #0]
 8013600:	2302      	movs	r3, #2
 8013602:	6063      	str	r3, [r4, #4]
 8013604:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013606:	3302      	adds	r3, #2
 8013608:	9320      	str	r3, [sp, #128]	; 0x80
 801360a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801360c:	3301      	adds	r3, #1
 801360e:	2b07      	cmp	r3, #7
 8013610:	931f      	str	r3, [sp, #124]	; 0x7c
 8013612:	f300 82e6 	bgt.w	8013be2 <_svfprintf_r+0xc5a>
 8013616:	3408      	adds	r4, #8
 8013618:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801361a:	2b80      	cmp	r3, #128	; 0x80
 801361c:	d120      	bne.n	8013660 <_svfprintf_r+0x6d8>
 801361e:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8013622:	1a9b      	subs	r3, r3, r2
 8013624:	2b00      	cmp	r3, #0
 8013626:	dd1b      	ble.n	8013660 <_svfprintf_r+0x6d8>
 8013628:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 801362c:	492a      	ldr	r1, [pc, #168]	; (80136d8 <_svfprintf_r+0x750>)
 801362e:	6021      	str	r1, [r4, #0]
 8013630:	2b10      	cmp	r3, #16
 8013632:	f102 0201 	add.w	r2, r2, #1
 8013636:	f104 0008 	add.w	r0, r4, #8
 801363a:	f300 82dc 	bgt.w	8013bf6 <_svfprintf_r+0xc6e>
 801363e:	eb0c 0103 	add.w	r1, ip, r3
 8013642:	2a07      	cmp	r2, #7
 8013644:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8013648:	6063      	str	r3, [r4, #4]
 801364a:	f340 82e9 	ble.w	8013c20 <_svfprintf_r+0xc98>
 801364e:	aa1e      	add	r2, sp, #120	; 0x78
 8013650:	4659      	mov	r1, fp
 8013652:	4638      	mov	r0, r7
 8013654:	f004 f916 	bl	8017884 <__ssprint_r>
 8013658:	2800      	cmp	r0, #0
 801365a:	f040 8600 	bne.w	801425e <_svfprintf_r+0x12d6>
 801365e:	ac21      	add	r4, sp, #132	; 0x84
 8013660:	eba9 0906 	sub.w	r9, r9, r6
 8013664:	f1b9 0f00 	cmp.w	r9, #0
 8013668:	dd1c      	ble.n	80136a4 <_svfprintf_r+0x71c>
 801366a:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	; 0x7c
 801366e:	481a      	ldr	r0, [pc, #104]	; (80136d8 <_svfprintf_r+0x750>)
 8013670:	6020      	str	r0, [r4, #0]
 8013672:	f1b9 0f10 	cmp.w	r9, #16
 8013676:	f102 0201 	add.w	r2, r2, #1
 801367a:	f104 0108 	add.w	r1, r4, #8
 801367e:	f300 82d1 	bgt.w	8013c24 <_svfprintf_r+0xc9c>
 8013682:	444b      	add	r3, r9
 8013684:	2a07      	cmp	r2, #7
 8013686:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 801368a:	f8c4 9004 	str.w	r9, [r4, #4]
 801368e:	f340 82dd 	ble.w	8013c4c <_svfprintf_r+0xcc4>
 8013692:	aa1e      	add	r2, sp, #120	; 0x78
 8013694:	4659      	mov	r1, fp
 8013696:	4638      	mov	r0, r7
 8013698:	f004 f8f4 	bl	8017884 <__ssprint_r>
 801369c:	2800      	cmp	r0, #0
 801369e:	f040 85de 	bne.w	801425e <_svfprintf_r+0x12d6>
 80136a2:	ac21      	add	r4, sp, #132	; 0x84
 80136a4:	05e9      	lsls	r1, r5, #23
 80136a6:	9820      	ldr	r0, [sp, #128]	; 0x80
 80136a8:	f100 82d6 	bmi.w	8013c58 <_svfprintf_r+0xcd0>
 80136ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80136ae:	3301      	adds	r3, #1
 80136b0:	4430      	add	r0, r6
 80136b2:	2b07      	cmp	r3, #7
 80136b4:	e9c4 a600 	strd	sl, r6, [r4]
 80136b8:	9020      	str	r0, [sp, #128]	; 0x80
 80136ba:	931f      	str	r3, [sp, #124]	; 0x7c
 80136bc:	f300 8310 	bgt.w	8013ce0 <_svfprintf_r+0xd58>
 80136c0:	3408      	adds	r4, #8
 80136c2:	076b      	lsls	r3, r5, #29
 80136c4:	f100 85ac 	bmi.w	8014220 <_svfprintf_r+0x1298>
 80136c8:	e008      	b.n	80136dc <_svfprintf_r+0x754>
 80136ca:	bf00      	nop
 80136cc:	08019404 	.word	0x08019404
 80136d0:	08019415 	.word	0x08019415
 80136d4:	08019428 	.word	0x08019428
 80136d8:	08019438 	.word	0x08019438
 80136dc:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
 80136e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136e2:	428a      	cmp	r2, r1
 80136e4:	bfac      	ite	ge
 80136e6:	189b      	addge	r3, r3, r2
 80136e8:	185b      	addlt	r3, r3, r1
 80136ea:	930a      	str	r3, [sp, #40]	; 0x28
 80136ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80136ee:	b13b      	cbz	r3, 8013700 <_svfprintf_r+0x778>
 80136f0:	aa1e      	add	r2, sp, #120	; 0x78
 80136f2:	4659      	mov	r1, fp
 80136f4:	4638      	mov	r0, r7
 80136f6:	f004 f8c5 	bl	8017884 <__ssprint_r>
 80136fa:	2800      	cmp	r0, #0
 80136fc:	f040 85af 	bne.w	801425e <_svfprintf_r+0x12d6>
 8013700:	2300      	movs	r3, #0
 8013702:	931f      	str	r3, [sp, #124]	; 0x7c
 8013704:	9b02      	ldr	r3, [sp, #8]
 8013706:	2b00      	cmp	r3, #0
 8013708:	f040 85c6 	bne.w	8014298 <_svfprintf_r+0x1310>
 801370c:	ac21      	add	r4, sp, #132	; 0x84
 801370e:	e0e3      	b.n	80138d8 <_svfprintf_r+0x950>
 8013710:	2300      	movs	r3, #0
 8013712:	9302      	str	r3, [sp, #8]
 8013714:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 8013718:	e64a      	b.n	80133b0 <_svfprintf_r+0x428>
 801371a:	9002      	str	r0, [sp, #8]
 801371c:	e648      	b.n	80133b0 <_svfprintf_r+0x428>
 801371e:	2300      	movs	r3, #0
 8013720:	9302      	str	r3, [sp, #8]
 8013722:	2606      	movs	r6, #6
 8013724:	e644      	b.n	80133b0 <_svfprintf_r+0x428>
 8013726:	2300      	movs	r3, #0
 8013728:	9302      	str	r3, [sp, #8]
 801372a:	e641      	b.n	80133b0 <_svfprintf_r+0x428>
 801372c:	2300      	movs	r3, #0
 801372e:	eeb0 9b48 	vmov.f64	d9, d8
 8013732:	e648      	b.n	80133c6 <_svfprintf_r+0x43e>
 8013734:	f800 ec01 	strb.w	lr, [r0, #-1]
 8013738:	e694      	b.n	8013464 <_svfprintf_r+0x4dc>
 801373a:	f802 eb01 	strb.w	lr, [r2], #1
 801373e:	ebac 0102 	sub.w	r1, ip, r2
 8013742:	2900      	cmp	r1, #0
 8013744:	daf9      	bge.n	801373a <_svfprintf_r+0x7b2>
 8013746:	1c42      	adds	r2, r0, #1
 8013748:	3001      	adds	r0, #1
 801374a:	bfb8      	it	lt
 801374c:	2200      	movlt	r2, #0
 801374e:	4413      	add	r3, r2
 8013750:	e697      	b.n	8013482 <_svfprintf_r+0x4fa>
 8013752:	461a      	mov	r2, r3
 8013754:	eb03 0c00 	add.w	ip, r3, r0
 8013758:	f04f 0e30 	mov.w	lr, #48	; 0x30
 801375c:	e7ef      	b.n	801373e <_svfprintf_r+0x7b6>
 801375e:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 8013762:	d006      	beq.n	8013772 <_svfprintf_r+0x7ea>
 8013764:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
 8013768:	d118      	bne.n	801379c <_svfprintf_r+0x814>
 801376a:	f106 0801 	add.w	r8, r6, #1
 801376e:	2102      	movs	r1, #2
 8013770:	e001      	b.n	8013776 <_svfprintf_r+0x7ee>
 8013772:	46b0      	mov	r8, r6
 8013774:	2103      	movs	r1, #3
 8013776:	ab1c      	add	r3, sp, #112	; 0x70
 8013778:	9301      	str	r3, [sp, #4]
 801377a:	ab19      	add	r3, sp, #100	; 0x64
 801377c:	9300      	str	r3, [sp, #0]
 801377e:	4642      	mov	r2, r8
 8013780:	ab18      	add	r3, sp, #96	; 0x60
 8013782:	4638      	mov	r0, r7
 8013784:	eeb0 0b49 	vmov.f64	d0, d9
 8013788:	f002 f932 	bl	80159f0 <_dtoa_r>
 801378c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8013790:	4682      	mov	sl, r0
 8013792:	d105      	bne.n	80137a0 <_svfprintf_r+0x818>
 8013794:	07eb      	lsls	r3, r5, #31
 8013796:	d403      	bmi.n	80137a0 <_svfprintf_r+0x818>
 8013798:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801379a:	e672      	b.n	8013482 <_svfprintf_r+0x4fa>
 801379c:	46b0      	mov	r8, r6
 801379e:	e7e6      	b.n	801376e <_svfprintf_r+0x7e6>
 80137a0:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 80137a4:	eb0a 0308 	add.w	r3, sl, r8
 80137a8:	d10d      	bne.n	80137c6 <_svfprintf_r+0x83e>
 80137aa:	f89a 2000 	ldrb.w	r2, [sl]
 80137ae:	2a30      	cmp	r2, #48	; 0x30
 80137b0:	d107      	bne.n	80137c2 <_svfprintf_r+0x83a>
 80137b2:	eeb5 9b40 	vcmp.f64	d9, #0.0
 80137b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137ba:	bf1c      	itt	ne
 80137bc:	f1c8 0201 	rsbne	r2, r8, #1
 80137c0:	9218      	strne	r2, [sp, #96]	; 0x60
 80137c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80137c4:	4413      	add	r3, r2
 80137c6:	eeb5 9b40 	vcmp.f64	d9, #0.0
 80137ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137ce:	bf08      	it	eq
 80137d0:	931c      	streq	r3, [sp, #112]	; 0x70
 80137d2:	2130      	movs	r1, #48	; 0x30
 80137d4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80137d6:	4293      	cmp	r3, r2
 80137d8:	d9de      	bls.n	8013798 <_svfprintf_r+0x810>
 80137da:	1c50      	adds	r0, r2, #1
 80137dc:	901c      	str	r0, [sp, #112]	; 0x70
 80137de:	7011      	strb	r1, [r2, #0]
 80137e0:	e7f8      	b.n	80137d4 <_svfprintf_r+0x84c>
 80137e2:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 80137e6:	f47f ae5e 	bne.w	80134a6 <_svfprintf_r+0x51e>
 80137ea:	f005 0301 	and.w	r3, r5, #1
 80137ee:	f1b8 0f00 	cmp.w	r8, #0
 80137f2:	ea43 0306 	orr.w	r3, r3, r6
 80137f6:	dd18      	ble.n	801382a <_svfprintf_r+0x8a2>
 80137f8:	b383      	cbz	r3, 801385c <_svfprintf_r+0x8d4>
 80137fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80137fc:	4443      	add	r3, r8
 80137fe:	441e      	add	r6, r3
 8013800:	2366      	movs	r3, #102	; 0x66
 8013802:	9304      	str	r3, [sp, #16]
 8013804:	e02f      	b.n	8013866 <_svfprintf_r+0x8de>
 8013806:	f813 cb01 	ldrb.w	ip, [r3], #1
 801380a:	f802 cb01 	strb.w	ip, [r2], #1
 801380e:	e681      	b.n	8013514 <_svfprintf_r+0x58c>
 8013810:	b941      	cbnz	r1, 8013824 <_svfprintf_r+0x89c>
 8013812:	2230      	movs	r2, #48	; 0x30
 8013814:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
 8013818:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 801381c:	3330      	adds	r3, #48	; 0x30
 801381e:	f802 3b01 	strb.w	r3, [r2], #1
 8013822:	e683      	b.n	801352c <_svfprintf_r+0x5a4>
 8013824:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 8013828:	e7f8      	b.n	801381c <_svfprintf_r+0x894>
 801382a:	b1cb      	cbz	r3, 8013860 <_svfprintf_r+0x8d8>
 801382c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801382e:	3301      	adds	r3, #1
 8013830:	e7e5      	b.n	80137fe <_svfprintf_r+0x876>
 8013832:	9b03      	ldr	r3, [sp, #12]
 8013834:	4598      	cmp	r8, r3
 8013836:	db06      	blt.n	8013846 <_svfprintf_r+0x8be>
 8013838:	07e9      	lsls	r1, r5, #31
 801383a:	d52a      	bpl.n	8013892 <_svfprintf_r+0x90a>
 801383c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801383e:	eb08 0603 	add.w	r6, r8, r3
 8013842:	2367      	movs	r3, #103	; 0x67
 8013844:	e7dd      	b.n	8013802 <_svfprintf_r+0x87a>
 8013846:	9b03      	ldr	r3, [sp, #12]
 8013848:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801384a:	f1b8 0f00 	cmp.w	r8, #0
 801384e:	eb03 0602 	add.w	r6, r3, r2
 8013852:	dcf6      	bgt.n	8013842 <_svfprintf_r+0x8ba>
 8013854:	f1c8 0301 	rsb	r3, r8, #1
 8013858:	441e      	add	r6, r3
 801385a:	e7f2      	b.n	8013842 <_svfprintf_r+0x8ba>
 801385c:	4646      	mov	r6, r8
 801385e:	e7cf      	b.n	8013800 <_svfprintf_r+0x878>
 8013860:	2366      	movs	r3, #102	; 0x66
 8013862:	9304      	str	r3, [sp, #16]
 8013864:	2601      	movs	r6, #1
 8013866:	f415 6380 	ands.w	r3, r5, #1024	; 0x400
 801386a:	9307      	str	r3, [sp, #28]
 801386c:	d025      	beq.n	80138ba <_svfprintf_r+0x932>
 801386e:	2300      	movs	r3, #0
 8013870:	f1b8 0f00 	cmp.w	r8, #0
 8013874:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8013878:	f77f ae6d 	ble.w	8013556 <_svfprintf_r+0x5ce>
 801387c:	9b08      	ldr	r3, [sp, #32]
 801387e:	781b      	ldrb	r3, [r3, #0]
 8013880:	2bff      	cmp	r3, #255	; 0xff
 8013882:	d108      	bne.n	8013896 <_svfprintf_r+0x90e>
 8013884:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013888:	4413      	add	r3, r2
 801388a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801388c:	fb02 6603 	mla	r6, r2, r3, r6
 8013890:	e661      	b.n	8013556 <_svfprintf_r+0x5ce>
 8013892:	4646      	mov	r6, r8
 8013894:	e7d5      	b.n	8013842 <_svfprintf_r+0x8ba>
 8013896:	4543      	cmp	r3, r8
 8013898:	daf4      	bge.n	8013884 <_svfprintf_r+0x8fc>
 801389a:	eba8 0803 	sub.w	r8, r8, r3
 801389e:	9b08      	ldr	r3, [sp, #32]
 80138a0:	785b      	ldrb	r3, [r3, #1]
 80138a2:	b133      	cbz	r3, 80138b2 <_svfprintf_r+0x92a>
 80138a4:	9b07      	ldr	r3, [sp, #28]
 80138a6:	3301      	adds	r3, #1
 80138a8:	9307      	str	r3, [sp, #28]
 80138aa:	9b08      	ldr	r3, [sp, #32]
 80138ac:	3301      	adds	r3, #1
 80138ae:	9308      	str	r3, [sp, #32]
 80138b0:	e7e4      	b.n	801387c <_svfprintf_r+0x8f4>
 80138b2:	9b06      	ldr	r3, [sp, #24]
 80138b4:	3301      	adds	r3, #1
 80138b6:	9306      	str	r3, [sp, #24]
 80138b8:	e7e0      	b.n	801387c <_svfprintf_r+0x8f4>
 80138ba:	9b07      	ldr	r3, [sp, #28]
 80138bc:	9306      	str	r3, [sp, #24]
 80138be:	e64a      	b.n	8013556 <_svfprintf_r+0x5ce>
 80138c0:	f108 0304 	add.w	r3, r8, #4
 80138c4:	06aa      	lsls	r2, r5, #26
 80138c6:	9305      	str	r3, [sp, #20]
 80138c8:	d50c      	bpl.n	80138e4 <_svfprintf_r+0x95c>
 80138ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80138cc:	f8d8 3000 	ldr.w	r3, [r8]
 80138d0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80138d2:	17d2      	asrs	r2, r2, #31
 80138d4:	e9c3 1200 	strd	r1, r2, [r3]
 80138d8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80138dc:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80138e0:	f7ff bb8f 	b.w	8013002 <_svfprintf_r+0x7a>
 80138e4:	06eb      	lsls	r3, r5, #27
 80138e6:	d504      	bpl.n	80138f2 <_svfprintf_r+0x96a>
 80138e8:	f8d8 3000 	ldr.w	r3, [r8]
 80138ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80138ee:	601a      	str	r2, [r3, #0]
 80138f0:	e7f2      	b.n	80138d8 <_svfprintf_r+0x950>
 80138f2:	066e      	lsls	r6, r5, #25
 80138f4:	d504      	bpl.n	8013900 <_svfprintf_r+0x978>
 80138f6:	f8d8 3000 	ldr.w	r3, [r8]
 80138fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80138fc:	801a      	strh	r2, [r3, #0]
 80138fe:	e7eb      	b.n	80138d8 <_svfprintf_r+0x950>
 8013900:	05ad      	lsls	r5, r5, #22
 8013902:	d5f1      	bpl.n	80138e8 <_svfprintf_r+0x960>
 8013904:	f8d8 3000 	ldr.w	r3, [r8]
 8013908:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801390a:	701a      	strb	r2, [r3, #0]
 801390c:	e7e4      	b.n	80138d8 <_svfprintf_r+0x950>
 801390e:	f045 0510 	orr.w	r5, r5, #16
 8013912:	f015 0320 	ands.w	r3, r5, #32
 8013916:	d020      	beq.n	801395a <_svfprintf_r+0x9d2>
 8013918:	f108 0307 	add.w	r3, r8, #7
 801391c:	f023 0307 	bic.w	r3, r3, #7
 8013920:	461a      	mov	r2, r3
 8013922:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8013926:	f852 8b08 	ldr.w	r8, [r2], #8
 801392a:	9205      	str	r2, [sp, #20]
 801392c:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8013930:	2300      	movs	r3, #0
 8013932:	2200      	movs	r2, #0
 8013934:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 8013938:	1c72      	adds	r2, r6, #1
 801393a:	f000 84c3 	beq.w	80142c4 <_svfprintf_r+0x133c>
 801393e:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8013942:	9202      	str	r2, [sp, #8]
 8013944:	ea58 0209 	orrs.w	r2, r8, r9
 8013948:	f040 84c1 	bne.w	80142ce <_svfprintf_r+0x1346>
 801394c:	2e00      	cmp	r6, #0
 801394e:	f000 810d 	beq.w	8013b6c <_svfprintf_r+0xbe4>
 8013952:	2b01      	cmp	r3, #1
 8013954:	f040 84be 	bne.w	80142d4 <_svfprintf_r+0x134c>
 8013958:	e0ad      	b.n	8013ab6 <_svfprintf_r+0xb2e>
 801395a:	4642      	mov	r2, r8
 801395c:	f015 0910 	ands.w	r9, r5, #16
 8013960:	f852 8b04 	ldr.w	r8, [r2], #4
 8013964:	9205      	str	r2, [sp, #20]
 8013966:	d001      	beq.n	801396c <_svfprintf_r+0x9e4>
 8013968:	4699      	mov	r9, r3
 801396a:	e7df      	b.n	801392c <_svfprintf_r+0x9a4>
 801396c:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8013970:	d002      	beq.n	8013978 <_svfprintf_r+0x9f0>
 8013972:	fa1f f888 	uxth.w	r8, r8
 8013976:	e7d9      	b.n	801392c <_svfprintf_r+0x9a4>
 8013978:	f415 7900 	ands.w	r9, r5, #512	; 0x200
 801397c:	d0d6      	beq.n	801392c <_svfprintf_r+0x9a4>
 801397e:	fa5f f888 	uxtb.w	r8, r8
 8013982:	e7f1      	b.n	8013968 <_svfprintf_r+0x9e0>
 8013984:	4643      	mov	r3, r8
 8013986:	2278      	movs	r2, #120	; 0x78
 8013988:	f853 8b04 	ldr.w	r8, [r3], #4
 801398c:	9305      	str	r3, [sp, #20]
 801398e:	2330      	movs	r3, #48	; 0x30
 8013990:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8013994:	4bae      	ldr	r3, [pc, #696]	; (8013c50 <_svfprintf_r+0xcc8>)
 8013996:	9312      	str	r3, [sp, #72]	; 0x48
 8013998:	f04f 0900 	mov.w	r9, #0
 801399c:	f045 0502 	orr.w	r5, r5, #2
 80139a0:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
 80139a4:	2302      	movs	r3, #2
 80139a6:	9204      	str	r2, [sp, #16]
 80139a8:	e7c3      	b.n	8013932 <_svfprintf_r+0x9aa>
 80139aa:	4643      	mov	r3, r8
 80139ac:	1c70      	adds	r0, r6, #1
 80139ae:	f853 ab04 	ldr.w	sl, [r3], #4
 80139b2:	9305      	str	r3, [sp, #20]
 80139b4:	f04f 0800 	mov.w	r8, #0
 80139b8:	f88d 805b 	strb.w	r8, [sp, #91]	; 0x5b
 80139bc:	d010      	beq.n	80139e0 <_svfprintf_r+0xa58>
 80139be:	4632      	mov	r2, r6
 80139c0:	4641      	mov	r1, r8
 80139c2:	4650      	mov	r0, sl
 80139c4:	f7ec fc44 	bl	8000250 <memchr>
 80139c8:	9002      	str	r0, [sp, #8]
 80139ca:	2800      	cmp	r0, #0
 80139cc:	f000 80e5 	beq.w	8013b9a <_svfprintf_r+0xc12>
 80139d0:	e9cd 8806 	strd	r8, r8, [sp, #24]
 80139d4:	eba0 060a 	sub.w	r6, r0, sl
 80139d8:	f8cd 8008 	str.w	r8, [sp, #8]
 80139dc:	46c1      	mov	r9, r8
 80139de:	e5c2      	b.n	8013566 <_svfprintf_r+0x5de>
 80139e0:	4650      	mov	r0, sl
 80139e2:	f7ec fc2d 	bl	8000240 <strlen>
 80139e6:	46c1      	mov	r9, r8
 80139e8:	4606      	mov	r6, r0
 80139ea:	f8cd 8008 	str.w	r8, [sp, #8]
 80139ee:	464b      	mov	r3, r9
 80139f0:	e48a      	b.n	8013308 <_svfprintf_r+0x380>
 80139f2:	f045 0510 	orr.w	r5, r5, #16
 80139f6:	f015 0320 	ands.w	r3, r5, #32
 80139fa:	d00b      	beq.n	8013a14 <_svfprintf_r+0xa8c>
 80139fc:	f108 0307 	add.w	r3, r8, #7
 8013a00:	f023 0307 	bic.w	r3, r3, #7
 8013a04:	461a      	mov	r2, r3
 8013a06:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8013a0a:	f852 8b08 	ldr.w	r8, [r2], #8
 8013a0e:	9205      	str	r2, [sp, #20]
 8013a10:	2301      	movs	r3, #1
 8013a12:	e78e      	b.n	8013932 <_svfprintf_r+0x9aa>
 8013a14:	4642      	mov	r2, r8
 8013a16:	f015 0910 	ands.w	r9, r5, #16
 8013a1a:	f852 8b04 	ldr.w	r8, [r2], #4
 8013a1e:	9205      	str	r2, [sp, #20]
 8013a20:	d001      	beq.n	8013a26 <_svfprintf_r+0xa9e>
 8013a22:	4699      	mov	r9, r3
 8013a24:	e7f4      	b.n	8013a10 <_svfprintf_r+0xa88>
 8013a26:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8013a2a:	d002      	beq.n	8013a32 <_svfprintf_r+0xaaa>
 8013a2c:	fa1f f888 	uxth.w	r8, r8
 8013a30:	e7ee      	b.n	8013a10 <_svfprintf_r+0xa88>
 8013a32:	f415 7900 	ands.w	r9, r5, #512	; 0x200
 8013a36:	d0eb      	beq.n	8013a10 <_svfprintf_r+0xa88>
 8013a38:	fa5f f888 	uxtb.w	r8, r8
 8013a3c:	e7f1      	b.n	8013a22 <_svfprintf_r+0xa9a>
 8013a3e:	4b85      	ldr	r3, [pc, #532]	; (8013c54 <_svfprintf_r+0xccc>)
 8013a40:	9312      	str	r3, [sp, #72]	; 0x48
 8013a42:	f015 0320 	ands.w	r3, r5, #32
 8013a46:	d01c      	beq.n	8013a82 <_svfprintf_r+0xafa>
 8013a48:	f108 0307 	add.w	r3, r8, #7
 8013a4c:	f023 0307 	bic.w	r3, r3, #7
 8013a50:	461a      	mov	r2, r3
 8013a52:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8013a56:	f852 8b08 	ldr.w	r8, [r2], #8
 8013a5a:	9205      	str	r2, [sp, #20]
 8013a5c:	07e9      	lsls	r1, r5, #31
 8013a5e:	d50a      	bpl.n	8013a76 <_svfprintf_r+0xaee>
 8013a60:	ea58 0309 	orrs.w	r3, r8, r9
 8013a64:	d007      	beq.n	8013a76 <_svfprintf_r+0xaee>
 8013a66:	2330      	movs	r3, #48	; 0x30
 8013a68:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8013a6c:	9b04      	ldr	r3, [sp, #16]
 8013a6e:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 8013a72:	f045 0502 	orr.w	r5, r5, #2
 8013a76:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8013a7a:	2302      	movs	r3, #2
 8013a7c:	e759      	b.n	8013932 <_svfprintf_r+0x9aa>
 8013a7e:	4b74      	ldr	r3, [pc, #464]	; (8013c50 <_svfprintf_r+0xcc8>)
 8013a80:	e7de      	b.n	8013a40 <_svfprintf_r+0xab8>
 8013a82:	4642      	mov	r2, r8
 8013a84:	f015 0910 	ands.w	r9, r5, #16
 8013a88:	f852 8b04 	ldr.w	r8, [r2], #4
 8013a8c:	9205      	str	r2, [sp, #20]
 8013a8e:	d001      	beq.n	8013a94 <_svfprintf_r+0xb0c>
 8013a90:	4699      	mov	r9, r3
 8013a92:	e7e3      	b.n	8013a5c <_svfprintf_r+0xad4>
 8013a94:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8013a98:	d002      	beq.n	8013aa0 <_svfprintf_r+0xb18>
 8013a9a:	fa1f f888 	uxth.w	r8, r8
 8013a9e:	e7dd      	b.n	8013a5c <_svfprintf_r+0xad4>
 8013aa0:	f415 7900 	ands.w	r9, r5, #512	; 0x200
 8013aa4:	d0da      	beq.n	8013a5c <_svfprintf_r+0xad4>
 8013aa6:	fa5f f888 	uxtb.w	r8, r8
 8013aaa:	e7f1      	b.n	8013a90 <_svfprintf_r+0xb08>
 8013aac:	f1b8 0f0a 	cmp.w	r8, #10
 8013ab0:	f179 0300 	sbcs.w	r3, r9, #0
 8013ab4:	d207      	bcs.n	8013ac6 <_svfprintf_r+0xb3e>
 8013ab6:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8013aba:	f88d 8127 	strb.w	r8, [sp, #295]	; 0x127
 8013abe:	f20d 1a27 	addw	sl, sp, #295	; 0x127
 8013ac2:	f000 bc25 	b.w	8014310 <_svfprintf_r+0x1388>
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	9303      	str	r3, [sp, #12]
 8013aca:	9b02      	ldr	r3, [sp, #8]
 8013acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013ad0:	ad4a      	add	r5, sp, #296	; 0x128
 8013ad2:	9306      	str	r3, [sp, #24]
 8013ad4:	220a      	movs	r2, #10
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	4640      	mov	r0, r8
 8013ada:	4649      	mov	r1, r9
 8013adc:	f7ec fc08 	bl	80002f0 <__aeabi_uldivmod>
 8013ae0:	9b03      	ldr	r3, [sp, #12]
 8013ae2:	3301      	adds	r3, #1
 8013ae4:	9303      	str	r3, [sp, #12]
 8013ae6:	9b06      	ldr	r3, [sp, #24]
 8013ae8:	3230      	adds	r2, #48	; 0x30
 8013aea:	f105 3aff 	add.w	sl, r5, #4294967295
 8013aee:	f805 2c01 	strb.w	r2, [r5, #-1]
 8013af2:	b1db      	cbz	r3, 8013b2c <_svfprintf_r+0xba4>
 8013af4:	9b08      	ldr	r3, [sp, #32]
 8013af6:	9a03      	ldr	r2, [sp, #12]
 8013af8:	781b      	ldrb	r3, [r3, #0]
 8013afa:	429a      	cmp	r2, r3
 8013afc:	d116      	bne.n	8013b2c <_svfprintf_r+0xba4>
 8013afe:	2aff      	cmp	r2, #255	; 0xff
 8013b00:	d014      	beq.n	8013b2c <_svfprintf_r+0xba4>
 8013b02:	f1b8 0f0a 	cmp.w	r8, #10
 8013b06:	f179 0300 	sbcs.w	r3, r9, #0
 8013b0a:	d30f      	bcc.n	8013b2c <_svfprintf_r+0xba4>
 8013b0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013b0e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8013b10:	ebaa 0a03 	sub.w	sl, sl, r3
 8013b14:	461a      	mov	r2, r3
 8013b16:	4650      	mov	r0, sl
 8013b18:	f003 fea1 	bl	801785e <strncpy>
 8013b1c:	9b08      	ldr	r3, [sp, #32]
 8013b1e:	785b      	ldrb	r3, [r3, #1]
 8013b20:	b11b      	cbz	r3, 8013b2a <_svfprintf_r+0xba2>
 8013b22:	9b08      	ldr	r3, [sp, #32]
 8013b24:	3301      	adds	r3, #1
 8013b26:	9308      	str	r3, [sp, #32]
 8013b28:	2300      	movs	r3, #0
 8013b2a:	9303      	str	r3, [sp, #12]
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	220a      	movs	r2, #10
 8013b30:	4640      	mov	r0, r8
 8013b32:	4649      	mov	r1, r9
 8013b34:	f7ec fbdc 	bl	80002f0 <__aeabi_uldivmod>
 8013b38:	f1b8 0f0a 	cmp.w	r8, #10
 8013b3c:	f179 0300 	sbcs.w	r3, r9, #0
 8013b40:	f0c0 83e6 	bcc.w	8014310 <_svfprintf_r+0x1388>
 8013b44:	4680      	mov	r8, r0
 8013b46:	4689      	mov	r9, r1
 8013b48:	4655      	mov	r5, sl
 8013b4a:	e7c3      	b.n	8013ad4 <_svfprintf_r+0xb4c>
 8013b4c:	f008 030f 	and.w	r3, r8, #15
 8013b50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013b52:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8013b56:	5cd3      	ldrb	r3, [r2, r3]
 8013b58:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 8013b5c:	ea48 7809 	orr.w	r8, r8, r9, lsl #28
 8013b60:	ea4f 1919 	mov.w	r9, r9, lsr #4
 8013b64:	ea58 0309 	orrs.w	r3, r8, r9
 8013b68:	d1f0      	bne.n	8013b4c <_svfprintf_r+0xbc4>
 8013b6a:	e3d1      	b.n	8014310 <_svfprintf_r+0x1388>
 8013b6c:	b92b      	cbnz	r3, 8013b7a <_svfprintf_r+0xbf2>
 8013b6e:	07e8      	lsls	r0, r5, #31
 8013b70:	d503      	bpl.n	8013b7a <_svfprintf_r+0xbf2>
 8013b72:	2330      	movs	r3, #48	; 0x30
 8013b74:	f88d 3127 	strb.w	r3, [sp, #295]	; 0x127
 8013b78:	e7a1      	b.n	8013abe <_svfprintf_r+0xb36>
 8013b7a:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 8013b7e:	e3c7      	b.n	8014310 <_svfprintf_r+0x1388>
 8013b80:	9b04      	ldr	r3, [sp, #16]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	f000 838e 	beq.w	80142a4 <_svfprintf_r+0x131c>
 8013b88:	2000      	movs	r0, #0
 8013b8a:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 8013b8e:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
 8013b92:	f8cd 8014 	str.w	r8, [sp, #20]
 8013b96:	f7ff bb4e 	b.w	8013236 <_svfprintf_r+0x2ae>
 8013b9a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8013b9e:	e726      	b.n	80139ee <_svfprintf_r+0xa66>
 8013ba0:	2110      	movs	r1, #16
 8013ba2:	6061      	str	r1, [r4, #4]
 8013ba4:	2a07      	cmp	r2, #7
 8013ba6:	4461      	add	r1, ip
 8013ba8:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8013bac:	dd0a      	ble.n	8013bc4 <_svfprintf_r+0xc3c>
 8013bae:	aa1e      	add	r2, sp, #120	; 0x78
 8013bb0:	4659      	mov	r1, fp
 8013bb2:	4638      	mov	r0, r7
 8013bb4:	9315      	str	r3, [sp, #84]	; 0x54
 8013bb6:	f003 fe65 	bl	8017884 <__ssprint_r>
 8013bba:	2800      	cmp	r0, #0
 8013bbc:	f040 834f 	bne.w	801425e <_svfprintf_r+0x12d6>
 8013bc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013bc2:	a821      	add	r0, sp, #132	; 0x84
 8013bc4:	3b10      	subs	r3, #16
 8013bc6:	4604      	mov	r4, r0
 8013bc8:	e4e8      	b.n	801359c <_svfprintf_r+0x614>
 8013bca:	4604      	mov	r4, r0
 8013bcc:	e502      	b.n	80135d4 <_svfprintf_r+0x64c>
 8013bce:	aa1e      	add	r2, sp, #120	; 0x78
 8013bd0:	4659      	mov	r1, fp
 8013bd2:	4638      	mov	r0, r7
 8013bd4:	f003 fe56 	bl	8017884 <__ssprint_r>
 8013bd8:	2800      	cmp	r0, #0
 8013bda:	f040 8340 	bne.w	801425e <_svfprintf_r+0x12d6>
 8013bde:	ac21      	add	r4, sp, #132	; 0x84
 8013be0:	e50a      	b.n	80135f8 <_svfprintf_r+0x670>
 8013be2:	aa1e      	add	r2, sp, #120	; 0x78
 8013be4:	4659      	mov	r1, fp
 8013be6:	4638      	mov	r0, r7
 8013be8:	f003 fe4c 	bl	8017884 <__ssprint_r>
 8013bec:	2800      	cmp	r0, #0
 8013bee:	f040 8336 	bne.w	801425e <_svfprintf_r+0x12d6>
 8013bf2:	ac21      	add	r4, sp, #132	; 0x84
 8013bf4:	e510      	b.n	8013618 <_svfprintf_r+0x690>
 8013bf6:	2110      	movs	r1, #16
 8013bf8:	6061      	str	r1, [r4, #4]
 8013bfa:	2a07      	cmp	r2, #7
 8013bfc:	4461      	add	r1, ip
 8013bfe:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8013c02:	dd0a      	ble.n	8013c1a <_svfprintf_r+0xc92>
 8013c04:	aa1e      	add	r2, sp, #120	; 0x78
 8013c06:	4659      	mov	r1, fp
 8013c08:	4638      	mov	r0, r7
 8013c0a:	9313      	str	r3, [sp, #76]	; 0x4c
 8013c0c:	f003 fe3a 	bl	8017884 <__ssprint_r>
 8013c10:	2800      	cmp	r0, #0
 8013c12:	f040 8324 	bne.w	801425e <_svfprintf_r+0x12d6>
 8013c16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013c18:	a821      	add	r0, sp, #132	; 0x84
 8013c1a:	3b10      	subs	r3, #16
 8013c1c:	4604      	mov	r4, r0
 8013c1e:	e503      	b.n	8013628 <_svfprintf_r+0x6a0>
 8013c20:	4604      	mov	r4, r0
 8013c22:	e51d      	b.n	8013660 <_svfprintf_r+0x6d8>
 8013c24:	2010      	movs	r0, #16
 8013c26:	4403      	add	r3, r0
 8013c28:	2a07      	cmp	r2, #7
 8013c2a:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 8013c2e:	6060      	str	r0, [r4, #4]
 8013c30:	dd08      	ble.n	8013c44 <_svfprintf_r+0xcbc>
 8013c32:	aa1e      	add	r2, sp, #120	; 0x78
 8013c34:	4659      	mov	r1, fp
 8013c36:	4638      	mov	r0, r7
 8013c38:	f003 fe24 	bl	8017884 <__ssprint_r>
 8013c3c:	2800      	cmp	r0, #0
 8013c3e:	f040 830e 	bne.w	801425e <_svfprintf_r+0x12d6>
 8013c42:	a921      	add	r1, sp, #132	; 0x84
 8013c44:	f1a9 0910 	sub.w	r9, r9, #16
 8013c48:	460c      	mov	r4, r1
 8013c4a:	e50e      	b.n	801366a <_svfprintf_r+0x6e2>
 8013c4c:	460c      	mov	r4, r1
 8013c4e:	e529      	b.n	80136a4 <_svfprintf_r+0x71c>
 8013c50:	08019404 	.word	0x08019404
 8013c54:	08019415 	.word	0x08019415
 8013c58:	9b04      	ldr	r3, [sp, #16]
 8013c5a:	2b65      	cmp	r3, #101	; 0x65
 8013c5c:	f340 8252 	ble.w	8014104 <_svfprintf_r+0x117c>
 8013c60:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c68:	d16b      	bne.n	8013d42 <_svfprintf_r+0xdba>
 8013c6a:	4b74      	ldr	r3, [pc, #464]	; (8013e3c <_svfprintf_r+0xeb4>)
 8013c6c:	6023      	str	r3, [r4, #0]
 8013c6e:	2301      	movs	r3, #1
 8013c70:	4418      	add	r0, r3
 8013c72:	6063      	str	r3, [r4, #4]
 8013c74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013c76:	9020      	str	r0, [sp, #128]	; 0x80
 8013c78:	3301      	adds	r3, #1
 8013c7a:	2b07      	cmp	r3, #7
 8013c7c:	931f      	str	r3, [sp, #124]	; 0x7c
 8013c7e:	dc39      	bgt.n	8013cf4 <_svfprintf_r+0xd6c>
 8013c80:	3408      	adds	r4, #8
 8013c82:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013c84:	9a03      	ldr	r2, [sp, #12]
 8013c86:	4293      	cmp	r3, r2
 8013c88:	db02      	blt.n	8013c90 <_svfprintf_r+0xd08>
 8013c8a:	07ea      	lsls	r2, r5, #31
 8013c8c:	f57f ad19 	bpl.w	80136c2 <_svfprintf_r+0x73a>
 8013c90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013c92:	6023      	str	r3, [r4, #0]
 8013c94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013c98:	6063      	str	r3, [r4, #4]
 8013c9a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013c9c:	4413      	add	r3, r2
 8013c9e:	9320      	str	r3, [sp, #128]	; 0x80
 8013ca0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013ca2:	3301      	adds	r3, #1
 8013ca4:	2b07      	cmp	r3, #7
 8013ca6:	931f      	str	r3, [sp, #124]	; 0x7c
 8013ca8:	dc2e      	bgt.n	8013d08 <_svfprintf_r+0xd80>
 8013caa:	3408      	adds	r4, #8
 8013cac:	9b03      	ldr	r3, [sp, #12]
 8013cae:	1e5e      	subs	r6, r3, #1
 8013cb0:	2e00      	cmp	r6, #0
 8013cb2:	f77f ad06 	ble.w	80136c2 <_svfprintf_r+0x73a>
 8013cb6:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8013e40 <_svfprintf_r+0xeb8>
 8013cba:	f04f 0910 	mov.w	r9, #16
 8013cbe:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8013cc2:	2e10      	cmp	r6, #16
 8013cc4:	f103 0301 	add.w	r3, r3, #1
 8013cc8:	f104 0108 	add.w	r1, r4, #8
 8013ccc:	f8c4 8000 	str.w	r8, [r4]
 8013cd0:	dc24      	bgt.n	8013d1c <_svfprintf_r+0xd94>
 8013cd2:	6066      	str	r6, [r4, #4]
 8013cd4:	2b07      	cmp	r3, #7
 8013cd6:	4416      	add	r6, r2
 8013cd8:	e9cd 361f 	strd	r3, r6, [sp, #124]	; 0x7c
 8013cdc:	f340 829d 	ble.w	801421a <_svfprintf_r+0x1292>
 8013ce0:	aa1e      	add	r2, sp, #120	; 0x78
 8013ce2:	4659      	mov	r1, fp
 8013ce4:	4638      	mov	r0, r7
 8013ce6:	f003 fdcd 	bl	8017884 <__ssprint_r>
 8013cea:	2800      	cmp	r0, #0
 8013cec:	f040 82b7 	bne.w	801425e <_svfprintf_r+0x12d6>
 8013cf0:	ac21      	add	r4, sp, #132	; 0x84
 8013cf2:	e4e6      	b.n	80136c2 <_svfprintf_r+0x73a>
 8013cf4:	aa1e      	add	r2, sp, #120	; 0x78
 8013cf6:	4659      	mov	r1, fp
 8013cf8:	4638      	mov	r0, r7
 8013cfa:	f003 fdc3 	bl	8017884 <__ssprint_r>
 8013cfe:	2800      	cmp	r0, #0
 8013d00:	f040 82ad 	bne.w	801425e <_svfprintf_r+0x12d6>
 8013d04:	ac21      	add	r4, sp, #132	; 0x84
 8013d06:	e7bc      	b.n	8013c82 <_svfprintf_r+0xcfa>
 8013d08:	aa1e      	add	r2, sp, #120	; 0x78
 8013d0a:	4659      	mov	r1, fp
 8013d0c:	4638      	mov	r0, r7
 8013d0e:	f003 fdb9 	bl	8017884 <__ssprint_r>
 8013d12:	2800      	cmp	r0, #0
 8013d14:	f040 82a3 	bne.w	801425e <_svfprintf_r+0x12d6>
 8013d18:	ac21      	add	r4, sp, #132	; 0x84
 8013d1a:	e7c7      	b.n	8013cac <_svfprintf_r+0xd24>
 8013d1c:	3210      	adds	r2, #16
 8013d1e:	2b07      	cmp	r3, #7
 8013d20:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 8013d24:	f8c4 9004 	str.w	r9, [r4, #4]
 8013d28:	dd08      	ble.n	8013d3c <_svfprintf_r+0xdb4>
 8013d2a:	aa1e      	add	r2, sp, #120	; 0x78
 8013d2c:	4659      	mov	r1, fp
 8013d2e:	4638      	mov	r0, r7
 8013d30:	f003 fda8 	bl	8017884 <__ssprint_r>
 8013d34:	2800      	cmp	r0, #0
 8013d36:	f040 8292 	bne.w	801425e <_svfprintf_r+0x12d6>
 8013d3a:	a921      	add	r1, sp, #132	; 0x84
 8013d3c:	3e10      	subs	r6, #16
 8013d3e:	460c      	mov	r4, r1
 8013d40:	e7bd      	b.n	8013cbe <_svfprintf_r+0xd36>
 8013d42:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	dc7d      	bgt.n	8013e44 <_svfprintf_r+0xebc>
 8013d48:	4b3c      	ldr	r3, [pc, #240]	; (8013e3c <_svfprintf_r+0xeb4>)
 8013d4a:	6023      	str	r3, [r4, #0]
 8013d4c:	2301      	movs	r3, #1
 8013d4e:	4418      	add	r0, r3
 8013d50:	6063      	str	r3, [r4, #4]
 8013d52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013d54:	9020      	str	r0, [sp, #128]	; 0x80
 8013d56:	3301      	adds	r3, #1
 8013d58:	2b07      	cmp	r3, #7
 8013d5a:	931f      	str	r3, [sp, #124]	; 0x7c
 8013d5c:	dc47      	bgt.n	8013dee <_svfprintf_r+0xe66>
 8013d5e:	3408      	adds	r4, #8
 8013d60:	9903      	ldr	r1, [sp, #12]
 8013d62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013d64:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013d66:	430a      	orrs	r2, r1
 8013d68:	f005 0101 	and.w	r1, r5, #1
 8013d6c:	430a      	orrs	r2, r1
 8013d6e:	f43f aca8 	beq.w	80136c2 <_svfprintf_r+0x73a>
 8013d72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013d74:	6022      	str	r2, [r4, #0]
 8013d76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013d78:	6062      	str	r2, [r4, #4]
 8013d7a:	4413      	add	r3, r2
 8013d7c:	9320      	str	r3, [sp, #128]	; 0x80
 8013d7e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013d80:	3301      	adds	r3, #1
 8013d82:	2b07      	cmp	r3, #7
 8013d84:	931f      	str	r3, [sp, #124]	; 0x7c
 8013d86:	dc3c      	bgt.n	8013e02 <_svfprintf_r+0xe7a>
 8013d88:	f104 0308 	add.w	r3, r4, #8
 8013d8c:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8013d8e:	2e00      	cmp	r6, #0
 8013d90:	da1c      	bge.n	8013dcc <_svfprintf_r+0xe44>
 8013d92:	4c2b      	ldr	r4, [pc, #172]	; (8013e40 <_svfprintf_r+0xeb8>)
 8013d94:	4276      	negs	r6, r6
 8013d96:	461a      	mov	r2, r3
 8013d98:	f04f 0810 	mov.w	r8, #16
 8013d9c:	e9dd 101f 	ldrd	r1, r0, [sp, #124]	; 0x7c
 8013da0:	2e10      	cmp	r6, #16
 8013da2:	f101 0101 	add.w	r1, r1, #1
 8013da6:	f103 0308 	add.w	r3, r3, #8
 8013daa:	6014      	str	r4, [r2, #0]
 8013dac:	dc33      	bgt.n	8013e16 <_svfprintf_r+0xe8e>
 8013dae:	6056      	str	r6, [r2, #4]
 8013db0:	2907      	cmp	r1, #7
 8013db2:	4406      	add	r6, r0
 8013db4:	e9cd 161f 	strd	r1, r6, [sp, #124]	; 0x7c
 8013db8:	dd08      	ble.n	8013dcc <_svfprintf_r+0xe44>
 8013dba:	aa1e      	add	r2, sp, #120	; 0x78
 8013dbc:	4659      	mov	r1, fp
 8013dbe:	4638      	mov	r0, r7
 8013dc0:	f003 fd60 	bl	8017884 <__ssprint_r>
 8013dc4:	2800      	cmp	r0, #0
 8013dc6:	f040 824a 	bne.w	801425e <_svfprintf_r+0x12d6>
 8013dca:	ab21      	add	r3, sp, #132	; 0x84
 8013dcc:	9a03      	ldr	r2, [sp, #12]
 8013dce:	605a      	str	r2, [r3, #4]
 8013dd0:	9903      	ldr	r1, [sp, #12]
 8013dd2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013dd4:	f8c3 a000 	str.w	sl, [r3]
 8013dd8:	440a      	add	r2, r1
 8013dda:	9220      	str	r2, [sp, #128]	; 0x80
 8013ddc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013dde:	3201      	adds	r2, #1
 8013de0:	2a07      	cmp	r2, #7
 8013de2:	921f      	str	r2, [sp, #124]	; 0x7c
 8013de4:	f73f af7c 	bgt.w	8013ce0 <_svfprintf_r+0xd58>
 8013de8:	f103 0408 	add.w	r4, r3, #8
 8013dec:	e469      	b.n	80136c2 <_svfprintf_r+0x73a>
 8013dee:	aa1e      	add	r2, sp, #120	; 0x78
 8013df0:	4659      	mov	r1, fp
 8013df2:	4638      	mov	r0, r7
 8013df4:	f003 fd46 	bl	8017884 <__ssprint_r>
 8013df8:	2800      	cmp	r0, #0
 8013dfa:	f040 8230 	bne.w	801425e <_svfprintf_r+0x12d6>
 8013dfe:	ac21      	add	r4, sp, #132	; 0x84
 8013e00:	e7ae      	b.n	8013d60 <_svfprintf_r+0xdd8>
 8013e02:	aa1e      	add	r2, sp, #120	; 0x78
 8013e04:	4659      	mov	r1, fp
 8013e06:	4638      	mov	r0, r7
 8013e08:	f003 fd3c 	bl	8017884 <__ssprint_r>
 8013e0c:	2800      	cmp	r0, #0
 8013e0e:	f040 8226 	bne.w	801425e <_svfprintf_r+0x12d6>
 8013e12:	ab21      	add	r3, sp, #132	; 0x84
 8013e14:	e7ba      	b.n	8013d8c <_svfprintf_r+0xe04>
 8013e16:	3010      	adds	r0, #16
 8013e18:	2907      	cmp	r1, #7
 8013e1a:	e9cd 101f 	strd	r1, r0, [sp, #124]	; 0x7c
 8013e1e:	f8c2 8004 	str.w	r8, [r2, #4]
 8013e22:	dd08      	ble.n	8013e36 <_svfprintf_r+0xeae>
 8013e24:	aa1e      	add	r2, sp, #120	; 0x78
 8013e26:	4659      	mov	r1, fp
 8013e28:	4638      	mov	r0, r7
 8013e2a:	f003 fd2b 	bl	8017884 <__ssprint_r>
 8013e2e:	2800      	cmp	r0, #0
 8013e30:	f040 8215 	bne.w	801425e <_svfprintf_r+0x12d6>
 8013e34:	ab21      	add	r3, sp, #132	; 0x84
 8013e36:	3e10      	subs	r6, #16
 8013e38:	461a      	mov	r2, r3
 8013e3a:	e7af      	b.n	8013d9c <_svfprintf_r+0xe14>
 8013e3c:	08019426 	.word	0x08019426
 8013e40:	08019438 	.word	0x08019438
 8013e44:	9b03      	ldr	r3, [sp, #12]
 8013e46:	4543      	cmp	r3, r8
 8013e48:	bfa8      	it	ge
 8013e4a:	4643      	movge	r3, r8
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	4699      	mov	r9, r3
 8013e50:	dd0a      	ble.n	8013e68 <_svfprintf_r+0xee0>
 8013e52:	4418      	add	r0, r3
 8013e54:	e9c4 a300 	strd	sl, r3, [r4]
 8013e58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013e5a:	9020      	str	r0, [sp, #128]	; 0x80
 8013e5c:	3301      	adds	r3, #1
 8013e5e:	2b07      	cmp	r3, #7
 8013e60:	931f      	str	r3, [sp, #124]	; 0x7c
 8013e62:	f300 8094 	bgt.w	8013f8e <_svfprintf_r+0x1006>
 8013e66:	3408      	adds	r4, #8
 8013e68:	f1b9 0f00 	cmp.w	r9, #0
 8013e6c:	bfac      	ite	ge
 8013e6e:	eba8 0609 	subge.w	r6, r8, r9
 8013e72:	4646      	movlt	r6, r8
 8013e74:	2e00      	cmp	r6, #0
 8013e76:	dd1c      	ble.n	8013eb2 <_svfprintf_r+0xf2a>
 8013e78:	f8df 9440 	ldr.w	r9, [pc, #1088]	; 80142bc <_svfprintf_r+0x1334>
 8013e7c:	f8c4 9000 	str.w	r9, [r4]
 8013e80:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8013e84:	2e10      	cmp	r6, #16
 8013e86:	f103 0301 	add.w	r3, r3, #1
 8013e8a:	f104 0108 	add.w	r1, r4, #8
 8013e8e:	f300 8088 	bgt.w	8013fa2 <_svfprintf_r+0x101a>
 8013e92:	6066      	str	r6, [r4, #4]
 8013e94:	2b07      	cmp	r3, #7
 8013e96:	4416      	add	r6, r2
 8013e98:	e9cd 361f 	strd	r3, r6, [sp, #124]	; 0x7c
 8013e9c:	f340 8094 	ble.w	8013fc8 <_svfprintf_r+0x1040>
 8013ea0:	aa1e      	add	r2, sp, #120	; 0x78
 8013ea2:	4659      	mov	r1, fp
 8013ea4:	4638      	mov	r0, r7
 8013ea6:	f003 fced 	bl	8017884 <__ssprint_r>
 8013eaa:	2800      	cmp	r0, #0
 8013eac:	f040 81d7 	bne.w	801425e <_svfprintf_r+0x12d6>
 8013eb0:	ac21      	add	r4, sp, #132	; 0x84
 8013eb2:	056b      	lsls	r3, r5, #21
 8013eb4:	eb0a 0608 	add.w	r6, sl, r8
 8013eb8:	d50c      	bpl.n	8013ed4 <_svfprintf_r+0xf4c>
 8013eba:	9b07      	ldr	r3, [sp, #28]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	f040 8085 	bne.w	8013fcc <_svfprintf_r+0x1044>
 8013ec2:	9b06      	ldr	r3, [sp, #24]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	f040 8084 	bne.w	8013fd2 <_svfprintf_r+0x104a>
 8013eca:	9b03      	ldr	r3, [sp, #12]
 8013ecc:	4453      	add	r3, sl
 8013ece:	429e      	cmp	r6, r3
 8013ed0:	bf28      	it	cs
 8013ed2:	461e      	movcs	r6, r3
 8013ed4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013ed6:	9a03      	ldr	r2, [sp, #12]
 8013ed8:	4293      	cmp	r3, r2
 8013eda:	db01      	blt.n	8013ee0 <_svfprintf_r+0xf58>
 8013edc:	07e8      	lsls	r0, r5, #31
 8013ede:	d50e      	bpl.n	8013efe <_svfprintf_r+0xf76>
 8013ee0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ee2:	6023      	str	r3, [r4, #0]
 8013ee4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013ee6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013ee8:	6063      	str	r3, [r4, #4]
 8013eea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013eec:	4413      	add	r3, r2
 8013eee:	9320      	str	r3, [sp, #128]	; 0x80
 8013ef0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013ef2:	3301      	adds	r3, #1
 8013ef4:	2b07      	cmp	r3, #7
 8013ef6:	931f      	str	r3, [sp, #124]	; 0x7c
 8013ef8:	f300 80f0 	bgt.w	80140dc <_svfprintf_r+0x1154>
 8013efc:	3408      	adds	r4, #8
 8013efe:	9b03      	ldr	r3, [sp, #12]
 8013f00:	9903      	ldr	r1, [sp, #12]
 8013f02:	eb0a 0203 	add.w	r2, sl, r3
 8013f06:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013f08:	1b92      	subs	r2, r2, r6
 8013f0a:	eba1 0803 	sub.w	r8, r1, r3
 8013f0e:	4590      	cmp	r8, r2
 8013f10:	bfa8      	it	ge
 8013f12:	4690      	movge	r8, r2
 8013f14:	f1b8 0f00 	cmp.w	r8, #0
 8013f18:	dd0b      	ble.n	8013f32 <_svfprintf_r+0xfaa>
 8013f1a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013f1c:	4443      	add	r3, r8
 8013f1e:	9320      	str	r3, [sp, #128]	; 0x80
 8013f20:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013f22:	3301      	adds	r3, #1
 8013f24:	2b07      	cmp	r3, #7
 8013f26:	e9c4 6800 	strd	r6, r8, [r4]
 8013f2a:	931f      	str	r3, [sp, #124]	; 0x7c
 8013f2c:	f300 80e0 	bgt.w	80140f0 <_svfprintf_r+0x1168>
 8013f30:	3408      	adds	r4, #8
 8013f32:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8013f34:	9b03      	ldr	r3, [sp, #12]
 8013f36:	f1b8 0f00 	cmp.w	r8, #0
 8013f3a:	eba3 0606 	sub.w	r6, r3, r6
 8013f3e:	bfa8      	it	ge
 8013f40:	eba6 0608 	subge.w	r6, r6, r8
 8013f44:	2e00      	cmp	r6, #0
 8013f46:	f77f abbc 	ble.w	80136c2 <_svfprintf_r+0x73a>
 8013f4a:	f8df 8370 	ldr.w	r8, [pc, #880]	; 80142bc <_svfprintf_r+0x1334>
 8013f4e:	f04f 0910 	mov.w	r9, #16
 8013f52:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8013f56:	2e10      	cmp	r6, #16
 8013f58:	f103 0301 	add.w	r3, r3, #1
 8013f5c:	f104 0108 	add.w	r1, r4, #8
 8013f60:	f8c4 8000 	str.w	r8, [r4]
 8013f64:	f77f aeb5 	ble.w	8013cd2 <_svfprintf_r+0xd4a>
 8013f68:	3210      	adds	r2, #16
 8013f6a:	2b07      	cmp	r3, #7
 8013f6c:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 8013f70:	f8c4 9004 	str.w	r9, [r4, #4]
 8013f74:	dd08      	ble.n	8013f88 <_svfprintf_r+0x1000>
 8013f76:	aa1e      	add	r2, sp, #120	; 0x78
 8013f78:	4659      	mov	r1, fp
 8013f7a:	4638      	mov	r0, r7
 8013f7c:	f003 fc82 	bl	8017884 <__ssprint_r>
 8013f80:	2800      	cmp	r0, #0
 8013f82:	f040 816c 	bne.w	801425e <_svfprintf_r+0x12d6>
 8013f86:	a921      	add	r1, sp, #132	; 0x84
 8013f88:	3e10      	subs	r6, #16
 8013f8a:	460c      	mov	r4, r1
 8013f8c:	e7e1      	b.n	8013f52 <_svfprintf_r+0xfca>
 8013f8e:	aa1e      	add	r2, sp, #120	; 0x78
 8013f90:	4659      	mov	r1, fp
 8013f92:	4638      	mov	r0, r7
 8013f94:	f003 fc76 	bl	8017884 <__ssprint_r>
 8013f98:	2800      	cmp	r0, #0
 8013f9a:	f040 8160 	bne.w	801425e <_svfprintf_r+0x12d6>
 8013f9e:	ac21      	add	r4, sp, #132	; 0x84
 8013fa0:	e762      	b.n	8013e68 <_svfprintf_r+0xee0>
 8013fa2:	2010      	movs	r0, #16
 8013fa4:	4402      	add	r2, r0
 8013fa6:	2b07      	cmp	r3, #7
 8013fa8:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 8013fac:	6060      	str	r0, [r4, #4]
 8013fae:	dd08      	ble.n	8013fc2 <_svfprintf_r+0x103a>
 8013fb0:	aa1e      	add	r2, sp, #120	; 0x78
 8013fb2:	4659      	mov	r1, fp
 8013fb4:	4638      	mov	r0, r7
 8013fb6:	f003 fc65 	bl	8017884 <__ssprint_r>
 8013fba:	2800      	cmp	r0, #0
 8013fbc:	f040 814f 	bne.w	801425e <_svfprintf_r+0x12d6>
 8013fc0:	a921      	add	r1, sp, #132	; 0x84
 8013fc2:	3e10      	subs	r6, #16
 8013fc4:	460c      	mov	r4, r1
 8013fc6:	e759      	b.n	8013e7c <_svfprintf_r+0xef4>
 8013fc8:	460c      	mov	r4, r1
 8013fca:	e772      	b.n	8013eb2 <_svfprintf_r+0xf2a>
 8013fcc:	9b06      	ldr	r3, [sp, #24]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d053      	beq.n	801407a <_svfprintf_r+0x10f2>
 8013fd2:	9b06      	ldr	r3, [sp, #24]
 8013fd4:	3b01      	subs	r3, #1
 8013fd6:	9306      	str	r3, [sp, #24]
 8013fd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013fda:	6023      	str	r3, [r4, #0]
 8013fdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013fde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013fe0:	6063      	str	r3, [r4, #4]
 8013fe2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013fe4:	4413      	add	r3, r2
 8013fe6:	9320      	str	r3, [sp, #128]	; 0x80
 8013fe8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013fea:	3301      	adds	r3, #1
 8013fec:	2b07      	cmp	r3, #7
 8013fee:	931f      	str	r3, [sp, #124]	; 0x7c
 8013ff0:	dc4a      	bgt.n	8014088 <_svfprintf_r+0x1100>
 8013ff2:	3408      	adds	r4, #8
 8013ff4:	9b03      	ldr	r3, [sp, #12]
 8013ff6:	9a08      	ldr	r2, [sp, #32]
 8013ff8:	eb0a 0903 	add.w	r9, sl, r3
 8013ffc:	eba9 0306 	sub.w	r3, r9, r6
 8014000:	f892 9000 	ldrb.w	r9, [r2]
 8014004:	4599      	cmp	r9, r3
 8014006:	bfa8      	it	ge
 8014008:	4699      	movge	r9, r3
 801400a:	f1b9 0f00 	cmp.w	r9, #0
 801400e:	dd0a      	ble.n	8014026 <_svfprintf_r+0x109e>
 8014010:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014012:	444b      	add	r3, r9
 8014014:	9320      	str	r3, [sp, #128]	; 0x80
 8014016:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014018:	3301      	adds	r3, #1
 801401a:	2b07      	cmp	r3, #7
 801401c:	e9c4 6900 	strd	r6, r9, [r4]
 8014020:	931f      	str	r3, [sp, #124]	; 0x7c
 8014022:	dc3b      	bgt.n	801409c <_svfprintf_r+0x1114>
 8014024:	3408      	adds	r4, #8
 8014026:	9b08      	ldr	r3, [sp, #32]
 8014028:	f893 8000 	ldrb.w	r8, [r3]
 801402c:	f1b9 0f00 	cmp.w	r9, #0
 8014030:	bfa8      	it	ge
 8014032:	eba8 0809 	subge.w	r8, r8, r9
 8014036:	f1b8 0f00 	cmp.w	r8, #0
 801403a:	dd1a      	ble.n	8014072 <_svfprintf_r+0x10ea>
 801403c:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8014040:	489e      	ldr	r0, [pc, #632]	; (80142bc <_svfprintf_r+0x1334>)
 8014042:	6020      	str	r0, [r4, #0]
 8014044:	f1b8 0f10 	cmp.w	r8, #16
 8014048:	f103 0301 	add.w	r3, r3, #1
 801404c:	f104 0108 	add.w	r1, r4, #8
 8014050:	dc2e      	bgt.n	80140b0 <_svfprintf_r+0x1128>
 8014052:	4442      	add	r2, r8
 8014054:	2b07      	cmp	r3, #7
 8014056:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 801405a:	f8c4 8004 	str.w	r8, [r4, #4]
 801405e:	dd3b      	ble.n	80140d8 <_svfprintf_r+0x1150>
 8014060:	aa1e      	add	r2, sp, #120	; 0x78
 8014062:	4659      	mov	r1, fp
 8014064:	4638      	mov	r0, r7
 8014066:	f003 fc0d 	bl	8017884 <__ssprint_r>
 801406a:	2800      	cmp	r0, #0
 801406c:	f040 80f7 	bne.w	801425e <_svfprintf_r+0x12d6>
 8014070:	ac21      	add	r4, sp, #132	; 0x84
 8014072:	9b08      	ldr	r3, [sp, #32]
 8014074:	781b      	ldrb	r3, [r3, #0]
 8014076:	441e      	add	r6, r3
 8014078:	e71f      	b.n	8013eba <_svfprintf_r+0xf32>
 801407a:	9b08      	ldr	r3, [sp, #32]
 801407c:	3b01      	subs	r3, #1
 801407e:	9308      	str	r3, [sp, #32]
 8014080:	9b07      	ldr	r3, [sp, #28]
 8014082:	3b01      	subs	r3, #1
 8014084:	9307      	str	r3, [sp, #28]
 8014086:	e7a7      	b.n	8013fd8 <_svfprintf_r+0x1050>
 8014088:	aa1e      	add	r2, sp, #120	; 0x78
 801408a:	4659      	mov	r1, fp
 801408c:	4638      	mov	r0, r7
 801408e:	f003 fbf9 	bl	8017884 <__ssprint_r>
 8014092:	2800      	cmp	r0, #0
 8014094:	f040 80e3 	bne.w	801425e <_svfprintf_r+0x12d6>
 8014098:	ac21      	add	r4, sp, #132	; 0x84
 801409a:	e7ab      	b.n	8013ff4 <_svfprintf_r+0x106c>
 801409c:	aa1e      	add	r2, sp, #120	; 0x78
 801409e:	4659      	mov	r1, fp
 80140a0:	4638      	mov	r0, r7
 80140a2:	f003 fbef 	bl	8017884 <__ssprint_r>
 80140a6:	2800      	cmp	r0, #0
 80140a8:	f040 80d9 	bne.w	801425e <_svfprintf_r+0x12d6>
 80140ac:	ac21      	add	r4, sp, #132	; 0x84
 80140ae:	e7ba      	b.n	8014026 <_svfprintf_r+0x109e>
 80140b0:	2010      	movs	r0, #16
 80140b2:	4402      	add	r2, r0
 80140b4:	2b07      	cmp	r3, #7
 80140b6:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 80140ba:	6060      	str	r0, [r4, #4]
 80140bc:	dd08      	ble.n	80140d0 <_svfprintf_r+0x1148>
 80140be:	aa1e      	add	r2, sp, #120	; 0x78
 80140c0:	4659      	mov	r1, fp
 80140c2:	4638      	mov	r0, r7
 80140c4:	f003 fbde 	bl	8017884 <__ssprint_r>
 80140c8:	2800      	cmp	r0, #0
 80140ca:	f040 80c8 	bne.w	801425e <_svfprintf_r+0x12d6>
 80140ce:	a921      	add	r1, sp, #132	; 0x84
 80140d0:	f1a8 0810 	sub.w	r8, r8, #16
 80140d4:	460c      	mov	r4, r1
 80140d6:	e7b1      	b.n	801403c <_svfprintf_r+0x10b4>
 80140d8:	460c      	mov	r4, r1
 80140da:	e7ca      	b.n	8014072 <_svfprintf_r+0x10ea>
 80140dc:	aa1e      	add	r2, sp, #120	; 0x78
 80140de:	4659      	mov	r1, fp
 80140e0:	4638      	mov	r0, r7
 80140e2:	f003 fbcf 	bl	8017884 <__ssprint_r>
 80140e6:	2800      	cmp	r0, #0
 80140e8:	f040 80b9 	bne.w	801425e <_svfprintf_r+0x12d6>
 80140ec:	ac21      	add	r4, sp, #132	; 0x84
 80140ee:	e706      	b.n	8013efe <_svfprintf_r+0xf76>
 80140f0:	aa1e      	add	r2, sp, #120	; 0x78
 80140f2:	4659      	mov	r1, fp
 80140f4:	4638      	mov	r0, r7
 80140f6:	f003 fbc5 	bl	8017884 <__ssprint_r>
 80140fa:	2800      	cmp	r0, #0
 80140fc:	f040 80af 	bne.w	801425e <_svfprintf_r+0x12d6>
 8014100:	ac21      	add	r4, sp, #132	; 0x84
 8014102:	e716      	b.n	8013f32 <_svfprintf_r+0xfaa>
 8014104:	9903      	ldr	r1, [sp, #12]
 8014106:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8014108:	2901      	cmp	r1, #1
 801410a:	f100 0001 	add.w	r0, r0, #1
 801410e:	f102 0201 	add.w	r2, r2, #1
 8014112:	f104 0308 	add.w	r3, r4, #8
 8014116:	dc01      	bgt.n	801411c <_svfprintf_r+0x1194>
 8014118:	07e9      	lsls	r1, r5, #31
 801411a:	d573      	bpl.n	8014204 <_svfprintf_r+0x127c>
 801411c:	2101      	movs	r1, #1
 801411e:	2a07      	cmp	r2, #7
 8014120:	e9cd 201f 	strd	r2, r0, [sp, #124]	; 0x7c
 8014124:	f8c4 a000 	str.w	sl, [r4]
 8014128:	6061      	str	r1, [r4, #4]
 801412a:	dd08      	ble.n	801413e <_svfprintf_r+0x11b6>
 801412c:	aa1e      	add	r2, sp, #120	; 0x78
 801412e:	4659      	mov	r1, fp
 8014130:	4638      	mov	r0, r7
 8014132:	f003 fba7 	bl	8017884 <__ssprint_r>
 8014136:	2800      	cmp	r0, #0
 8014138:	f040 8091 	bne.w	801425e <_svfprintf_r+0x12d6>
 801413c:	ab21      	add	r3, sp, #132	; 0x84
 801413e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014140:	601a      	str	r2, [r3, #0]
 8014142:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014144:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014146:	605a      	str	r2, [r3, #4]
 8014148:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801414a:	440a      	add	r2, r1
 801414c:	9220      	str	r2, [sp, #128]	; 0x80
 801414e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8014150:	3201      	adds	r2, #1
 8014152:	2a07      	cmp	r2, #7
 8014154:	921f      	str	r2, [sp, #124]	; 0x7c
 8014156:	dc25      	bgt.n	80141a4 <_svfprintf_r+0x121c>
 8014158:	3308      	adds	r3, #8
 801415a:	9a03      	ldr	r2, [sp, #12]
 801415c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014164:	f102 34ff 	add.w	r4, r2, #4294967295
 8014168:	d025      	beq.n	80141b6 <_svfprintf_r+0x122e>
 801416a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801416c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801416e:	f10a 0001 	add.w	r0, sl, #1
 8014172:	e9c3 0400 	strd	r0, r4, [r3]
 8014176:	9803      	ldr	r0, [sp, #12]
 8014178:	3101      	adds	r1, #1
 801417a:	3a01      	subs	r2, #1
 801417c:	4402      	add	r2, r0
 801417e:	2907      	cmp	r1, #7
 8014180:	e9cd 121f 	strd	r1, r2, [sp, #124]	; 0x7c
 8014184:	dd47      	ble.n	8014216 <_svfprintf_r+0x128e>
 8014186:	aa1e      	add	r2, sp, #120	; 0x78
 8014188:	4659      	mov	r1, fp
 801418a:	4638      	mov	r0, r7
 801418c:	f003 fb7a 	bl	8017884 <__ssprint_r>
 8014190:	2800      	cmp	r0, #0
 8014192:	d164      	bne.n	801425e <_svfprintf_r+0x12d6>
 8014194:	ab21      	add	r3, sp, #132	; 0x84
 8014196:	aa1a      	add	r2, sp, #104	; 0x68
 8014198:	601a      	str	r2, [r3, #0]
 801419a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801419c:	605a      	str	r2, [r3, #4]
 801419e:	9911      	ldr	r1, [sp, #68]	; 0x44
 80141a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80141a2:	e619      	b.n	8013dd8 <_svfprintf_r+0xe50>
 80141a4:	aa1e      	add	r2, sp, #120	; 0x78
 80141a6:	4659      	mov	r1, fp
 80141a8:	4638      	mov	r0, r7
 80141aa:	f003 fb6b 	bl	8017884 <__ssprint_r>
 80141ae:	2800      	cmp	r0, #0
 80141b0:	d155      	bne.n	801425e <_svfprintf_r+0x12d6>
 80141b2:	ab21      	add	r3, sp, #132	; 0x84
 80141b4:	e7d1      	b.n	801415a <_svfprintf_r+0x11d2>
 80141b6:	2c00      	cmp	r4, #0
 80141b8:	dded      	ble.n	8014196 <_svfprintf_r+0x120e>
 80141ba:	4e40      	ldr	r6, [pc, #256]	; (80142bc <_svfprintf_r+0x1334>)
 80141bc:	f04f 0810 	mov.w	r8, #16
 80141c0:	e9dd 211f 	ldrd	r2, r1, [sp, #124]	; 0x7c
 80141c4:	2c10      	cmp	r4, #16
 80141c6:	f102 0201 	add.w	r2, r2, #1
 80141ca:	f103 0008 	add.w	r0, r3, #8
 80141ce:	601e      	str	r6, [r3, #0]
 80141d0:	dc07      	bgt.n	80141e2 <_svfprintf_r+0x125a>
 80141d2:	605c      	str	r4, [r3, #4]
 80141d4:	2a07      	cmp	r2, #7
 80141d6:	440c      	add	r4, r1
 80141d8:	e9cd 241f 	strd	r2, r4, [sp, #124]	; 0x7c
 80141dc:	dcd3      	bgt.n	8014186 <_svfprintf_r+0x11fe>
 80141de:	4603      	mov	r3, r0
 80141e0:	e7d9      	b.n	8014196 <_svfprintf_r+0x120e>
 80141e2:	3110      	adds	r1, #16
 80141e4:	2a07      	cmp	r2, #7
 80141e6:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 80141ea:	f8c3 8004 	str.w	r8, [r3, #4]
 80141ee:	dd06      	ble.n	80141fe <_svfprintf_r+0x1276>
 80141f0:	aa1e      	add	r2, sp, #120	; 0x78
 80141f2:	4659      	mov	r1, fp
 80141f4:	4638      	mov	r0, r7
 80141f6:	f003 fb45 	bl	8017884 <__ssprint_r>
 80141fa:	bb80      	cbnz	r0, 801425e <_svfprintf_r+0x12d6>
 80141fc:	a821      	add	r0, sp, #132	; 0x84
 80141fe:	3c10      	subs	r4, #16
 8014200:	4603      	mov	r3, r0
 8014202:	e7dd      	b.n	80141c0 <_svfprintf_r+0x1238>
 8014204:	2101      	movs	r1, #1
 8014206:	2a07      	cmp	r2, #7
 8014208:	e9cd 201f 	strd	r2, r0, [sp, #124]	; 0x7c
 801420c:	f8c4 a000 	str.w	sl, [r4]
 8014210:	6061      	str	r1, [r4, #4]
 8014212:	ddc0      	ble.n	8014196 <_svfprintf_r+0x120e>
 8014214:	e7b7      	b.n	8014186 <_svfprintf_r+0x11fe>
 8014216:	3308      	adds	r3, #8
 8014218:	e7bd      	b.n	8014196 <_svfprintf_r+0x120e>
 801421a:	460c      	mov	r4, r1
 801421c:	f7ff ba51 	b.w	80136c2 <_svfprintf_r+0x73a>
 8014220:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8014224:	1a9d      	subs	r5, r3, r2
 8014226:	2d00      	cmp	r5, #0
 8014228:	f77f aa58 	ble.w	80136dc <_svfprintf_r+0x754>
 801422c:	4e24      	ldr	r6, [pc, #144]	; (80142c0 <_svfprintf_r+0x1338>)
 801422e:	f04f 0810 	mov.w	r8, #16
 8014232:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8014236:	2d10      	cmp	r5, #16
 8014238:	f103 0301 	add.w	r3, r3, #1
 801423c:	6026      	str	r6, [r4, #0]
 801423e:	dc18      	bgt.n	8014272 <_svfprintf_r+0x12ea>
 8014240:	6065      	str	r5, [r4, #4]
 8014242:	2b07      	cmp	r3, #7
 8014244:	4415      	add	r5, r2
 8014246:	e9cd 351f 	strd	r3, r5, [sp, #124]	; 0x7c
 801424a:	f77f aa47 	ble.w	80136dc <_svfprintf_r+0x754>
 801424e:	aa1e      	add	r2, sp, #120	; 0x78
 8014250:	4659      	mov	r1, fp
 8014252:	4638      	mov	r0, r7
 8014254:	f003 fb16 	bl	8017884 <__ssprint_r>
 8014258:	2800      	cmp	r0, #0
 801425a:	f43f aa3f 	beq.w	80136dc <_svfprintf_r+0x754>
 801425e:	9b02      	ldr	r3, [sp, #8]
 8014260:	2b00      	cmp	r3, #0
 8014262:	f43f a888 	beq.w	8013376 <_svfprintf_r+0x3ee>
 8014266:	4619      	mov	r1, r3
 8014268:	4638      	mov	r0, r7
 801426a:	f002 faa7 	bl	80167bc <_free_r>
 801426e:	f7ff b882 	b.w	8013376 <_svfprintf_r+0x3ee>
 8014272:	3210      	adds	r2, #16
 8014274:	2b07      	cmp	r3, #7
 8014276:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 801427a:	f8c4 8004 	str.w	r8, [r4, #4]
 801427e:	dc02      	bgt.n	8014286 <_svfprintf_r+0x12fe>
 8014280:	3408      	adds	r4, #8
 8014282:	3d10      	subs	r5, #16
 8014284:	e7d5      	b.n	8014232 <_svfprintf_r+0x12aa>
 8014286:	aa1e      	add	r2, sp, #120	; 0x78
 8014288:	4659      	mov	r1, fp
 801428a:	4638      	mov	r0, r7
 801428c:	f003 fafa 	bl	8017884 <__ssprint_r>
 8014290:	2800      	cmp	r0, #0
 8014292:	d1e4      	bne.n	801425e <_svfprintf_r+0x12d6>
 8014294:	ac21      	add	r4, sp, #132	; 0x84
 8014296:	e7f4      	b.n	8014282 <_svfprintf_r+0x12fa>
 8014298:	9902      	ldr	r1, [sp, #8]
 801429a:	4638      	mov	r0, r7
 801429c:	f002 fa8e 	bl	80167bc <_free_r>
 80142a0:	f7ff ba34 	b.w	801370c <_svfprintf_r+0x784>
 80142a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	f43f a865 	beq.w	8013376 <_svfprintf_r+0x3ee>
 80142ac:	aa1e      	add	r2, sp, #120	; 0x78
 80142ae:	4659      	mov	r1, fp
 80142b0:	4638      	mov	r0, r7
 80142b2:	f003 fae7 	bl	8017884 <__ssprint_r>
 80142b6:	f7ff b85e 	b.w	8013376 <_svfprintf_r+0x3ee>
 80142ba:	bf00      	nop
 80142bc:	08019438 	.word	0x08019438
 80142c0:	08019428 	.word	0x08019428
 80142c4:	ea58 0209 	orrs.w	r2, r8, r9
 80142c8:	9502      	str	r5, [sp, #8]
 80142ca:	f43f ab42 	beq.w	8013952 <_svfprintf_r+0x9ca>
 80142ce:	2b01      	cmp	r3, #1
 80142d0:	f43f abec 	beq.w	8013aac <_svfprintf_r+0xb24>
 80142d4:	2b02      	cmp	r3, #2
 80142d6:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 80142da:	f43f ac37 	beq.w	8013b4c <_svfprintf_r+0xbc4>
 80142de:	f008 0307 	and.w	r3, r8, #7
 80142e2:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 80142e6:	ea48 7849 	orr.w	r8, r8, r9, lsl #29
 80142ea:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 80142ee:	3330      	adds	r3, #48	; 0x30
 80142f0:	ea58 0109 	orrs.w	r1, r8, r9
 80142f4:	4652      	mov	r2, sl
 80142f6:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 80142fa:	d1f0      	bne.n	80142de <_svfprintf_r+0x1356>
 80142fc:	9902      	ldr	r1, [sp, #8]
 80142fe:	07cd      	lsls	r5, r1, #31
 8014300:	d506      	bpl.n	8014310 <_svfprintf_r+0x1388>
 8014302:	2b30      	cmp	r3, #48	; 0x30
 8014304:	d004      	beq.n	8014310 <_svfprintf_r+0x1388>
 8014306:	2330      	movs	r3, #48	; 0x30
 8014308:	f80a 3c01 	strb.w	r3, [sl, #-1]
 801430c:	f1a2 0a02 	sub.w	sl, r2, #2
 8014310:	ab4a      	add	r3, sp, #296	; 0x128
 8014312:	46b1      	mov	r9, r6
 8014314:	eba3 060a 	sub.w	r6, r3, sl
 8014318:	2300      	movs	r3, #0
 801431a:	9d02      	ldr	r5, [sp, #8]
 801431c:	9302      	str	r3, [sp, #8]
 801431e:	f7fe bff3 	b.w	8013308 <_svfprintf_r+0x380>
 8014322:	bf00      	nop

08014324 <sysconf>:
 8014324:	2808      	cmp	r0, #8
 8014326:	b508      	push	{r3, lr}
 8014328:	d006      	beq.n	8014338 <sysconf+0x14>
 801432a:	f002 f8b7 	bl	801649c <__errno>
 801432e:	2316      	movs	r3, #22
 8014330:	6003      	str	r3, [r0, #0]
 8014332:	f04f 30ff 	mov.w	r0, #4294967295
 8014336:	bd08      	pop	{r3, pc}
 8014338:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801433c:	e7fb      	b.n	8014336 <sysconf+0x12>
	...

08014340 <_vfprintf_r>:
 8014340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014344:	ed2d 8b04 	vpush	{d8-d9}
 8014348:	b0cb      	sub	sp, #300	; 0x12c
 801434a:	460d      	mov	r5, r1
 801434c:	4692      	mov	sl, r2
 801434e:	461c      	mov	r4, r3
 8014350:	4698      	mov	r8, r3
 8014352:	4606      	mov	r6, r0
 8014354:	f002 fc5c 	bl	8016c10 <_localeconv_r>
 8014358:	6803      	ldr	r3, [r0, #0]
 801435a:	930f      	str	r3, [sp, #60]	; 0x3c
 801435c:	4618      	mov	r0, r3
 801435e:	f7eb ff6f 	bl	8000240 <strlen>
 8014362:	900a      	str	r0, [sp, #40]	; 0x28
 8014364:	b126      	cbz	r6, 8014370 <_vfprintf_r+0x30>
 8014366:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8014368:	b913      	cbnz	r3, 8014370 <_vfprintf_r+0x30>
 801436a:	4630      	mov	r0, r6
 801436c:	f002 f996 	bl	801669c <__sinit>
 8014370:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014372:	07d8      	lsls	r0, r3, #31
 8014374:	d405      	bmi.n	8014382 <_vfprintf_r+0x42>
 8014376:	89ab      	ldrh	r3, [r5, #12]
 8014378:	0599      	lsls	r1, r3, #22
 801437a:	d402      	bmi.n	8014382 <_vfprintf_r+0x42>
 801437c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801437e:	f002 fc4d 	bl	8016c1c <__retarget_lock_acquire_recursive>
 8014382:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8014386:	049a      	lsls	r2, r3, #18
 8014388:	d406      	bmi.n	8014398 <_vfprintf_r+0x58>
 801438a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801438e:	81ab      	strh	r3, [r5, #12]
 8014390:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014392:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014396:	666b      	str	r3, [r5, #100]	; 0x64
 8014398:	89ab      	ldrh	r3, [r5, #12]
 801439a:	071f      	lsls	r7, r3, #28
 801439c:	d501      	bpl.n	80143a2 <_vfprintf_r+0x62>
 801439e:	692b      	ldr	r3, [r5, #16]
 80143a0:	b9bb      	cbnz	r3, 80143d2 <_vfprintf_r+0x92>
 80143a2:	4629      	mov	r1, r5
 80143a4:	4630      	mov	r0, r6
 80143a6:	f001 fa2f 	bl	8015808 <__swsetup_r>
 80143aa:	b190      	cbz	r0, 80143d2 <_vfprintf_r+0x92>
 80143ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80143ae:	07dc      	lsls	r4, r3, #31
 80143b0:	d508      	bpl.n	80143c4 <_vfprintf_r+0x84>
 80143b2:	f04f 33ff 	mov.w	r3, #4294967295
 80143b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80143b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80143ba:	b04b      	add	sp, #300	; 0x12c
 80143bc:	ecbd 8b04 	vpop	{d8-d9}
 80143c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143c4:	89ab      	ldrh	r3, [r5, #12]
 80143c6:	0598      	lsls	r0, r3, #22
 80143c8:	d4f3      	bmi.n	80143b2 <_vfprintf_r+0x72>
 80143ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80143cc:	f002 fc27 	bl	8016c1e <__retarget_lock_release_recursive>
 80143d0:	e7ef      	b.n	80143b2 <_vfprintf_r+0x72>
 80143d2:	89ab      	ldrh	r3, [r5, #12]
 80143d4:	f003 021a 	and.w	r2, r3, #26
 80143d8:	2a0a      	cmp	r2, #10
 80143da:	d116      	bne.n	801440a <_vfprintf_r+0xca>
 80143dc:	f9b5 200e 	ldrsh.w	r2, [r5, #14]
 80143e0:	2a00      	cmp	r2, #0
 80143e2:	db12      	blt.n	801440a <_vfprintf_r+0xca>
 80143e4:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80143e6:	07d1      	lsls	r1, r2, #31
 80143e8:	d404      	bmi.n	80143f4 <_vfprintf_r+0xb4>
 80143ea:	059a      	lsls	r2, r3, #22
 80143ec:	d402      	bmi.n	80143f4 <_vfprintf_r+0xb4>
 80143ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80143f0:	f002 fc15 	bl	8016c1e <__retarget_lock_release_recursive>
 80143f4:	4623      	mov	r3, r4
 80143f6:	4652      	mov	r2, sl
 80143f8:	4629      	mov	r1, r5
 80143fa:	4630      	mov	r0, r6
 80143fc:	b04b      	add	sp, #300	; 0x12c
 80143fe:	ecbd 8b04 	vpop	{d8-d9}
 8014402:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014406:	f001 b9bf 	b.w	8015788 <__sbprintf>
 801440a:	2300      	movs	r3, #0
 801440c:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
 8014410:	ed9f 8b97 	vldr	d8, [pc, #604]	; 8014670 <_vfprintf_r+0x330>
 8014414:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8014418:	ac21      	add	r4, sp, #132	; 0x84
 801441a:	941e      	str	r4, [sp, #120]	; 0x78
 801441c:	9303      	str	r3, [sp, #12]
 801441e:	9308      	str	r3, [sp, #32]
 8014420:	930e      	str	r3, [sp, #56]	; 0x38
 8014422:	9310      	str	r3, [sp, #64]	; 0x40
 8014424:	930b      	str	r3, [sp, #44]	; 0x2c
 8014426:	4653      	mov	r3, sl
 8014428:	461f      	mov	r7, r3
 801442a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801442e:	b10a      	cbz	r2, 8014434 <_vfprintf_r+0xf4>
 8014430:	2a25      	cmp	r2, #37	; 0x25
 8014432:	d1f9      	bne.n	8014428 <_vfprintf_r+0xe8>
 8014434:	ebb7 090a 	subs.w	r9, r7, sl
 8014438:	d00d      	beq.n	8014456 <_vfprintf_r+0x116>
 801443a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801443c:	444b      	add	r3, r9
 801443e:	9320      	str	r3, [sp, #128]	; 0x80
 8014440:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014442:	3301      	adds	r3, #1
 8014444:	2b07      	cmp	r3, #7
 8014446:	e9c4 a900 	strd	sl, r9, [r4]
 801444a:	931f      	str	r3, [sp, #124]	; 0x7c
 801444c:	dc77      	bgt.n	801453e <_vfprintf_r+0x1fe>
 801444e:	3408      	adds	r4, #8
 8014450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014452:	444b      	add	r3, r9
 8014454:	930b      	str	r3, [sp, #44]	; 0x2c
 8014456:	783b      	ldrb	r3, [r7, #0]
 8014458:	2b00      	cmp	r3, #0
 801445a:	f001 8150 	beq.w	80156fe <_vfprintf_r+0x13be>
 801445e:	2200      	movs	r2, #0
 8014460:	1c7b      	adds	r3, r7, #1
 8014462:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 8014466:	f04f 37ff 	mov.w	r7, #4294967295
 801446a:	920c      	str	r2, [sp, #48]	; 0x30
 801446c:	4693      	mov	fp, r2
 801446e:	f04f 092b 	mov.w	r9, #43	; 0x2b
 8014472:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014476:	9204      	str	r2, [sp, #16]
 8014478:	9309      	str	r3, [sp, #36]	; 0x24
 801447a:	9b04      	ldr	r3, [sp, #16]
 801447c:	3b20      	subs	r3, #32
 801447e:	2b5a      	cmp	r3, #90	; 0x5a
 8014480:	f200 85a7 	bhi.w	8014fd2 <_vfprintf_r+0xc92>
 8014484:	e8df f013 	tbh	[pc, r3, lsl #1]
 8014488:	05a5007d 	.word	0x05a5007d
 801448c:	008505a5 	.word	0x008505a5
 8014490:	05a505a5 	.word	0x05a505a5
 8014494:	006505a5 	.word	0x006505a5
 8014498:	05a505a5 	.word	0x05a505a5
 801449c:	00920088 	.word	0x00920088
 80144a0:	008f05a5 	.word	0x008f05a5
 80144a4:	05a50095 	.word	0x05a50095
 80144a8:	00b100ae 	.word	0x00b100ae
 80144ac:	00b100b1 	.word	0x00b100b1
 80144b0:	00b100b1 	.word	0x00b100b1
 80144b4:	00b100b1 	.word	0x00b100b1
 80144b8:	00b100b1 	.word	0x00b100b1
 80144bc:	05a505a5 	.word	0x05a505a5
 80144c0:	05a505a5 	.word	0x05a505a5
 80144c4:	05a505a5 	.word	0x05a505a5
 80144c8:	013305a5 	.word	0x013305a5
 80144cc:	00df05a5 	.word	0x00df05a5
 80144d0:	013300fc 	.word	0x013300fc
 80144d4:	01330133 	.word	0x01330133
 80144d8:	05a505a5 	.word	0x05a505a5
 80144dc:	05a505a5 	.word	0x05a505a5
 80144e0:	05a500c2 	.word	0x05a500c2
 80144e4:	046905a5 	.word	0x046905a5
 80144e8:	05a505a5 	.word	0x05a505a5
 80144ec:	04b705a5 	.word	0x04b705a5
 80144f0:	04db05a5 	.word	0x04db05a5
 80144f4:	05a505a5 	.word	0x05a505a5
 80144f8:	05a50501 	.word	0x05a50501
 80144fc:	05a505a5 	.word	0x05a505a5
 8014500:	05a505a5 	.word	0x05a505a5
 8014504:	05a505a5 	.word	0x05a505a5
 8014508:	013305a5 	.word	0x013305a5
 801450c:	00df05a5 	.word	0x00df05a5
 8014510:	013300fe 	.word	0x013300fe
 8014514:	01330133 	.word	0x01330133
 8014518:	00fe00c5 	.word	0x00fe00c5
 801451c:	05a500d9 	.word	0x05a500d9
 8014520:	05a500d2 	.word	0x05a500d2
 8014524:	046b043e 	.word	0x046b043e
 8014528:	00d904a4 	.word	0x00d904a4
 801452c:	04b705a5 	.word	0x04b705a5
 8014530:	04dd007b 	.word	0x04dd007b
 8014534:	05a505a5 	.word	0x05a505a5
 8014538:	05a50522 	.word	0x05a50522
 801453c:	007b      	.short	0x007b
 801453e:	aa1e      	add	r2, sp, #120	; 0x78
 8014540:	4629      	mov	r1, r5
 8014542:	4630      	mov	r0, r6
 8014544:	f003 fa19 	bl	801797a <__sprint_r>
 8014548:	2800      	cmp	r0, #0
 801454a:	f040 812a 	bne.w	80147a2 <_vfprintf_r+0x462>
 801454e:	ac21      	add	r4, sp, #132	; 0x84
 8014550:	e77e      	b.n	8014450 <_vfprintf_r+0x110>
 8014552:	4630      	mov	r0, r6
 8014554:	f002 fb5c 	bl	8016c10 <_localeconv_r>
 8014558:	6843      	ldr	r3, [r0, #4]
 801455a:	9310      	str	r3, [sp, #64]	; 0x40
 801455c:	4618      	mov	r0, r3
 801455e:	f7eb fe6f 	bl	8000240 <strlen>
 8014562:	900e      	str	r0, [sp, #56]	; 0x38
 8014564:	4630      	mov	r0, r6
 8014566:	f002 fb53 	bl	8016c10 <_localeconv_r>
 801456a:	6883      	ldr	r3, [r0, #8]
 801456c:	9308      	str	r3, [sp, #32]
 801456e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014570:	b12b      	cbz	r3, 801457e <_vfprintf_r+0x23e>
 8014572:	9b08      	ldr	r3, [sp, #32]
 8014574:	b11b      	cbz	r3, 801457e <_vfprintf_r+0x23e>
 8014576:	781b      	ldrb	r3, [r3, #0]
 8014578:	b10b      	cbz	r3, 801457e <_vfprintf_r+0x23e>
 801457a:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 801457e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014580:	e777      	b.n	8014472 <_vfprintf_r+0x132>
 8014582:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8014586:	2b00      	cmp	r3, #0
 8014588:	d1f9      	bne.n	801457e <_vfprintf_r+0x23e>
 801458a:	2320      	movs	r3, #32
 801458c:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8014590:	e7f5      	b.n	801457e <_vfprintf_r+0x23e>
 8014592:	f04b 0b01 	orr.w	fp, fp, #1
 8014596:	e7f2      	b.n	801457e <_vfprintf_r+0x23e>
 8014598:	f858 3b04 	ldr.w	r3, [r8], #4
 801459c:	930c      	str	r3, [sp, #48]	; 0x30
 801459e:	2b00      	cmp	r3, #0
 80145a0:	daed      	bge.n	801457e <_vfprintf_r+0x23e>
 80145a2:	425b      	negs	r3, r3
 80145a4:	930c      	str	r3, [sp, #48]	; 0x30
 80145a6:	f04b 0b04 	orr.w	fp, fp, #4
 80145aa:	e7e8      	b.n	801457e <_vfprintf_r+0x23e>
 80145ac:	f88d 905b 	strb.w	r9, [sp, #91]	; 0x5b
 80145b0:	e7e5      	b.n	801457e <_vfprintf_r+0x23e>
 80145b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80145b8:	9204      	str	r2, [sp, #16]
 80145ba:	2a2a      	cmp	r2, #42	; 0x2a
 80145bc:	d110      	bne.n	80145e0 <_vfprintf_r+0x2a0>
 80145be:	f858 7b04 	ldr.w	r7, [r8], #4
 80145c2:	9309      	str	r3, [sp, #36]	; 0x24
 80145c4:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
 80145c8:	e7d9      	b.n	801457e <_vfprintf_r+0x23e>
 80145ca:	210a      	movs	r1, #10
 80145cc:	fb01 2707 	mla	r7, r1, r7, r2
 80145d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80145d4:	9204      	str	r2, [sp, #16]
 80145d6:	9a04      	ldr	r2, [sp, #16]
 80145d8:	3a30      	subs	r2, #48	; 0x30
 80145da:	2a09      	cmp	r2, #9
 80145dc:	d9f5      	bls.n	80145ca <_vfprintf_r+0x28a>
 80145de:	e74b      	b.n	8014478 <_vfprintf_r+0x138>
 80145e0:	2700      	movs	r7, #0
 80145e2:	e7f8      	b.n	80145d6 <_vfprintf_r+0x296>
 80145e4:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 80145e8:	e7c9      	b.n	801457e <_vfprintf_r+0x23e>
 80145ea:	2200      	movs	r2, #0
 80145ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145ee:	920c      	str	r2, [sp, #48]	; 0x30
 80145f0:	9a04      	ldr	r2, [sp, #16]
 80145f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80145f4:	3a30      	subs	r2, #48	; 0x30
 80145f6:	200a      	movs	r0, #10
 80145f8:	fb00 2201 	mla	r2, r0, r1, r2
 80145fc:	920c      	str	r2, [sp, #48]	; 0x30
 80145fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014602:	9204      	str	r2, [sp, #16]
 8014604:	3a30      	subs	r2, #48	; 0x30
 8014606:	2a09      	cmp	r2, #9
 8014608:	d9f2      	bls.n	80145f0 <_vfprintf_r+0x2b0>
 801460a:	e735      	b.n	8014478 <_vfprintf_r+0x138>
 801460c:	f04b 0b08 	orr.w	fp, fp, #8
 8014610:	e7b5      	b.n	801457e <_vfprintf_r+0x23e>
 8014612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014614:	781b      	ldrb	r3, [r3, #0]
 8014616:	2b68      	cmp	r3, #104	; 0x68
 8014618:	bf01      	itttt	eq
 801461a:	9b09      	ldreq	r3, [sp, #36]	; 0x24
 801461c:	3301      	addeq	r3, #1
 801461e:	9309      	streq	r3, [sp, #36]	; 0x24
 8014620:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8014624:	bf18      	it	ne
 8014626:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 801462a:	e7a8      	b.n	801457e <_vfprintf_r+0x23e>
 801462c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801462e:	781b      	ldrb	r3, [r3, #0]
 8014630:	2b6c      	cmp	r3, #108	; 0x6c
 8014632:	d105      	bne.n	8014640 <_vfprintf_r+0x300>
 8014634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014636:	3301      	adds	r3, #1
 8014638:	9309      	str	r3, [sp, #36]	; 0x24
 801463a:	f04b 0b20 	orr.w	fp, fp, #32
 801463e:	e79e      	b.n	801457e <_vfprintf_r+0x23e>
 8014640:	f04b 0b10 	orr.w	fp, fp, #16
 8014644:	e79b      	b.n	801457e <_vfprintf_r+0x23e>
 8014646:	4642      	mov	r2, r8
 8014648:	2000      	movs	r0, #0
 801464a:	f852 3b04 	ldr.w	r3, [r2], #4
 801464e:	9205      	str	r2, [sp, #20]
 8014650:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 8014654:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
 8014658:	e9cd 0006 	strd	r0, r0, [sp, #24]
 801465c:	9002      	str	r0, [sp, #8]
 801465e:	2701      	movs	r7, #1
 8014660:	4681      	mov	r9, r0
 8014662:	4680      	mov	r8, r0
 8014664:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 8014668:	e19b      	b.n	80149a2 <_vfprintf_r+0x662>
 801466a:	bf00      	nop
 801466c:	f3af 8000 	nop.w
	...
 8014678:	ffffffff 	.word	0xffffffff
 801467c:	7fefffff 	.word	0x7fefffff
 8014680:	f04b 0b10 	orr.w	fp, fp, #16
 8014684:	f01b 0f20 	tst.w	fp, #32
 8014688:	d016      	beq.n	80146b8 <_vfprintf_r+0x378>
 801468a:	f108 0807 	add.w	r8, r8, #7
 801468e:	f028 0307 	bic.w	r3, r8, #7
 8014692:	461a      	mov	r2, r3
 8014694:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8014698:	f852 8b08 	ldr.w	r8, [r2], #8
 801469c:	9205      	str	r2, [sp, #20]
 801469e:	f1b9 0f00 	cmp.w	r9, #0
 80146a2:	da07      	bge.n	80146b4 <_vfprintf_r+0x374>
 80146a4:	f1d8 0800 	rsbs	r8, r8, #0
 80146a8:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80146ac:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
 80146b0:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 80146b4:	2301      	movs	r3, #1
 80146b6:	e365      	b.n	8014d84 <_vfprintf_r+0xa44>
 80146b8:	4642      	mov	r2, r8
 80146ba:	f01b 0f10 	tst.w	fp, #16
 80146be:	f852 3b04 	ldr.w	r3, [r2], #4
 80146c2:	9205      	str	r2, [sp, #20]
 80146c4:	d003      	beq.n	80146ce <_vfprintf_r+0x38e>
 80146c6:	4698      	mov	r8, r3
 80146c8:	ea4f 79e3 	mov.w	r9, r3, asr #31
 80146cc:	e7e7      	b.n	801469e <_vfprintf_r+0x35e>
 80146ce:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80146d2:	d004      	beq.n	80146de <_vfprintf_r+0x39e>
 80146d4:	fa0f f883 	sxth.w	r8, r3
 80146d8:	f343 39c0 	sbfx	r9, r3, #15, #1
 80146dc:	e7df      	b.n	801469e <_vfprintf_r+0x35e>
 80146de:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80146e2:	d0f0      	beq.n	80146c6 <_vfprintf_r+0x386>
 80146e4:	fa4f f883 	sxtb.w	r8, r3
 80146e8:	f343 19c0 	sbfx	r9, r3, #7, #1
 80146ec:	e7d7      	b.n	801469e <_vfprintf_r+0x35e>
 80146ee:	f108 0807 	add.w	r8, r8, #7
 80146f2:	f028 0307 	bic.w	r3, r8, #7
 80146f6:	ecb3 8b02 	vldmia	r3!, {d8}
 80146fa:	ed1f 7b21 	vldr	d7, [pc, #-132]	; 8014678 <_vfprintf_r+0x338>
 80146fe:	eeb0 6bc8 	vabs.f64	d6, d8
 8014702:	eeb4 6b47 	vcmp.f64	d6, d7
 8014706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801470a:	9305      	str	r3, [sp, #20]
 801470c:	dd18      	ble.n	8014740 <_vfprintf_r+0x400>
 801470e:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8014712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014716:	d502      	bpl.n	801471e <_vfprintf_r+0x3de>
 8014718:	232d      	movs	r3, #45	; 0x2d
 801471a:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 801471e:	4a28      	ldr	r2, [pc, #160]	; (80147c0 <_vfprintf_r+0x480>)
 8014720:	4828      	ldr	r0, [pc, #160]	; (80147c4 <_vfprintf_r+0x484>)
 8014722:	9b04      	ldr	r3, [sp, #16]
 8014724:	2b47      	cmp	r3, #71	; 0x47
 8014726:	bfd4      	ite	le
 8014728:	4692      	movle	sl, r2
 801472a:	4682      	movgt	sl, r0
 801472c:	2300      	movs	r3, #0
 801472e:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 8014732:	9302      	str	r3, [sp, #8]
 8014734:	2703      	movs	r7, #3
 8014736:	4699      	mov	r9, r3
 8014738:	e9cd 3306 	strd	r3, r3, [sp, #24]
 801473c:	4698      	mov	r8, r3
 801473e:	e130      	b.n	80149a2 <_vfprintf_r+0x662>
 8014740:	eeb4 8b48 	vcmp.f64	d8, d8
 8014744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014748:	d70a      	bvc.n	8014760 <_vfprintf_r+0x420>
 801474a:	ee18 3a90 	vmov	r3, s17
 801474e:	2b00      	cmp	r3, #0
 8014750:	bfb8      	it	lt
 8014752:	232d      	movlt	r3, #45	; 0x2d
 8014754:	4a1c      	ldr	r2, [pc, #112]	; (80147c8 <_vfprintf_r+0x488>)
 8014756:	481d      	ldr	r0, [pc, #116]	; (80147cc <_vfprintf_r+0x48c>)
 8014758:	bfb8      	it	lt
 801475a:	f88d 305b 	strblt.w	r3, [sp, #91]	; 0x5b
 801475e:	e7e0      	b.n	8014722 <_vfprintf_r+0x3e2>
 8014760:	9b04      	ldr	r3, [sp, #16]
 8014762:	f023 0920 	bic.w	r9, r3, #32
 8014766:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 801476a:	d131      	bne.n	80147d0 <_vfprintf_r+0x490>
 801476c:	2330      	movs	r3, #48	; 0x30
 801476e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8014772:	9b04      	ldr	r3, [sp, #16]
 8014774:	2b61      	cmp	r3, #97	; 0x61
 8014776:	bf0c      	ite	eq
 8014778:	2378      	moveq	r3, #120	; 0x78
 801477a:	2358      	movne	r3, #88	; 0x58
 801477c:	2f63      	cmp	r7, #99	; 0x63
 801477e:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 8014782:	f04b 0b02 	orr.w	fp, fp, #2
 8014786:	f340 81e3 	ble.w	8014b50 <_vfprintf_r+0x810>
 801478a:	1c79      	adds	r1, r7, #1
 801478c:	4630      	mov	r0, r6
 801478e:	f7fe f8f3 	bl	8012978 <_malloc_r>
 8014792:	4682      	mov	sl, r0
 8014794:	2800      	cmp	r0, #0
 8014796:	f040 81e0 	bne.w	8014b5a <_vfprintf_r+0x81a>
 801479a:	89ab      	ldrh	r3, [r5, #12]
 801479c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80147a0:	81ab      	strh	r3, [r5, #12]
 80147a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80147a4:	07d9      	lsls	r1, r3, #31
 80147a6:	d405      	bmi.n	80147b4 <_vfprintf_r+0x474>
 80147a8:	89ab      	ldrh	r3, [r5, #12]
 80147aa:	059a      	lsls	r2, r3, #22
 80147ac:	d402      	bmi.n	80147b4 <_vfprintf_r+0x474>
 80147ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80147b0:	f002 fa35 	bl	8016c1e <__retarget_lock_release_recursive>
 80147b4:	89ab      	ldrh	r3, [r5, #12]
 80147b6:	065b      	lsls	r3, r3, #25
 80147b8:	f57f adfe 	bpl.w	80143b8 <_vfprintf_r+0x78>
 80147bc:	e5f9      	b.n	80143b2 <_vfprintf_r+0x72>
 80147be:	bf00      	nop
 80147c0:	080193f4 	.word	0x080193f4
 80147c4:	080193f8 	.word	0x080193f8
 80147c8:	080193fc 	.word	0x080193fc
 80147cc:	08019400 	.word	0x08019400
 80147d0:	1c7b      	adds	r3, r7, #1
 80147d2:	f000 81c4 	beq.w	8014b5e <_vfprintf_r+0x81e>
 80147d6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80147da:	f040 81c4 	bne.w	8014b66 <_vfprintf_r+0x826>
 80147de:	2f00      	cmp	r7, #0
 80147e0:	f040 81c1 	bne.w	8014b66 <_vfprintf_r+0x826>
 80147e4:	9702      	str	r7, [sp, #8]
 80147e6:	2701      	movs	r7, #1
 80147e8:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 80147ec:	930d      	str	r3, [sp, #52]	; 0x34
 80147ee:	ee18 3a90 	vmov	r3, s17
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	f280 81ba 	bge.w	8014b6c <_vfprintf_r+0x82c>
 80147f8:	eeb1 9b48 	vneg.f64	d9, d8
 80147fc:	232d      	movs	r3, #45	; 0x2d
 80147fe:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 8014802:	9313      	str	r3, [sp, #76]	; 0x4c
 8014804:	f040 81cb 	bne.w	8014b9e <_vfprintf_r+0x85e>
 8014808:	eeb0 0b49 	vmov.f64	d0, d9
 801480c:	a818      	add	r0, sp, #96	; 0x60
 801480e:	f002 ffab 	bl	8017768 <frexp>
 8014812:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
 8014816:	ee20 0b07 	vmul.f64	d0, d0, d7
 801481a:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801481e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014822:	bf08      	it	eq
 8014824:	2301      	moveq	r3, #1
 8014826:	9a04      	ldr	r2, [sp, #16]
 8014828:	bf08      	it	eq
 801482a:	9318      	streq	r3, [sp, #96]	; 0x60
 801482c:	49b7      	ldr	r1, [pc, #732]	; (8014b0c <_vfprintf_r+0x7cc>)
 801482e:	4bb8      	ldr	r3, [pc, #736]	; (8014b10 <_vfprintf_r+0x7d0>)
 8014830:	eeb3 7b00 	vmov.f64	d7, #48	; 0x41800000  16.0
 8014834:	2a61      	cmp	r2, #97	; 0x61
 8014836:	bf18      	it	ne
 8014838:	4619      	movne	r1, r3
 801483a:	1e7a      	subs	r2, r7, #1
 801483c:	4653      	mov	r3, sl
 801483e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014842:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8014846:	f1b2 3fff 	cmp.w	r2, #4294967295
 801484a:	ee16 ca90 	vmov	ip, s13
 801484e:	f811 000c 	ldrb.w	r0, [r1, ip]
 8014852:	f803 0b01 	strb.w	r0, [r3], #1
 8014856:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801485a:	4610      	mov	r0, r2
 801485c:	ee30 0b46 	vsub.f64	d0, d0, d6
 8014860:	d006      	beq.n	8014870 <_vfprintf_r+0x530>
 8014862:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8014866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801486a:	f102 32ff 	add.w	r2, r2, #4294967295
 801486e:	d1e6      	bne.n	801483e <_vfprintf_r+0x4fe>
 8014870:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8014874:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8014878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801487c:	dc09      	bgt.n	8014892 <_vfprintf_r+0x552>
 801487e:	eeb4 0b47 	vcmp.f64	d0, d7
 8014882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014886:	f040 8184 	bne.w	8014b92 <_vfprintf_r+0x852>
 801488a:	f01c 0f01 	tst.w	ip, #1
 801488e:	f000 8180 	beq.w	8014b92 <_vfprintf_r+0x852>
 8014892:	f891 c00f 	ldrb.w	ip, [r1, #15]
 8014896:	931c      	str	r3, [sp, #112]	; 0x70
 8014898:	f04f 0e30 	mov.w	lr, #48	; 0x30
 801489c:	981c      	ldr	r0, [sp, #112]	; 0x70
 801489e:	1e42      	subs	r2, r0, #1
 80148a0:	921c      	str	r2, [sp, #112]	; 0x70
 80148a2:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 80148a6:	4562      	cmp	r2, ip
 80148a8:	f000 8164 	beq.w	8014b74 <_vfprintf_r+0x834>
 80148ac:	2a39      	cmp	r2, #57	; 0x39
 80148ae:	bf16      	itet	ne
 80148b0:	3201      	addne	r2, #1
 80148b2:	7a8a      	ldrbeq	r2, [r1, #10]
 80148b4:	b2d2      	uxtbne	r2, r2
 80148b6:	f800 2c01 	strb.w	r2, [r0, #-1]
 80148ba:	eba3 030a 	sub.w	r3, r3, sl
 80148be:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80148c2:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80148c6:	9303      	str	r3, [sp, #12]
 80148c8:	f040 81ac 	bne.w	8014c24 <_vfprintf_r+0x8e4>
 80148cc:	f118 0f03 	cmn.w	r8, #3
 80148d0:	db02      	blt.n	80148d8 <_vfprintf_r+0x598>
 80148d2:	4547      	cmp	r7, r8
 80148d4:	f280 81ce 	bge.w	8014c74 <_vfprintf_r+0x934>
 80148d8:	9b04      	ldr	r3, [sp, #16]
 80148da:	3b02      	subs	r3, #2
 80148dc:	9304      	str	r3, [sp, #16]
 80148de:	9904      	ldr	r1, [sp, #16]
 80148e0:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80148e4:	f021 0120 	bic.w	r1, r1, #32
 80148e8:	2941      	cmp	r1, #65	; 0x41
 80148ea:	bf08      	it	eq
 80148ec:	320f      	addeq	r2, #15
 80148ee:	f108 33ff 	add.w	r3, r8, #4294967295
 80148f2:	bf06      	itte	eq
 80148f4:	b2d2      	uxtbeq	r2, r2
 80148f6:	2101      	moveq	r1, #1
 80148f8:	2100      	movne	r1, #0
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	9318      	str	r3, [sp, #96]	; 0x60
 80148fe:	bfb8      	it	lt
 8014900:	f1c8 0301 	rsblt	r3, r8, #1
 8014904:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
 8014908:	bfb4      	ite	lt
 801490a:	222d      	movlt	r2, #45	; 0x2d
 801490c:	222b      	movge	r2, #43	; 0x2b
 801490e:	2b09      	cmp	r3, #9
 8014910:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 8014914:	f340 819d 	ble.w	8014c52 <_vfprintf_r+0x912>
 8014918:	f10d 0277 	add.w	r2, sp, #119	; 0x77
 801491c:	200a      	movs	r0, #10
 801491e:	4611      	mov	r1, r2
 8014920:	fb93 f7f0 	sdiv	r7, r3, r0
 8014924:	fb00 3017 	mls	r0, r0, r7, r3
 8014928:	3030      	adds	r0, #48	; 0x30
 801492a:	f801 0c01 	strb.w	r0, [r1, #-1]
 801492e:	4618      	mov	r0, r3
 8014930:	2863      	cmp	r0, #99	; 0x63
 8014932:	f102 32ff 	add.w	r2, r2, #4294967295
 8014936:	463b      	mov	r3, r7
 8014938:	dcf0      	bgt.n	801491c <_vfprintf_r+0x5dc>
 801493a:	3330      	adds	r3, #48	; 0x30
 801493c:	1e88      	subs	r0, r1, #2
 801493e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014942:	f10d 0777 	add.w	r7, sp, #119	; 0x77
 8014946:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 801494a:	4603      	mov	r3, r0
 801494c:	42bb      	cmp	r3, r7
 801494e:	f0c0 817b 	bcc.w	8014c48 <_vfprintf_r+0x908>
 8014952:	f10d 0279 	add.w	r2, sp, #121	; 0x79
 8014956:	1a52      	subs	r2, r2, r1
 8014958:	42b8      	cmp	r0, r7
 801495a:	bf88      	it	hi
 801495c:	2200      	movhi	r2, #0
 801495e:	f10d 036a 	add.w	r3, sp, #106	; 0x6a
 8014962:	441a      	add	r2, r3
 8014964:	ab1a      	add	r3, sp, #104	; 0x68
 8014966:	1ad3      	subs	r3, r2, r3
 8014968:	9a03      	ldr	r2, [sp, #12]
 801496a:	9311      	str	r3, [sp, #68]	; 0x44
 801496c:	2a01      	cmp	r2, #1
 801496e:	eb03 0702 	add.w	r7, r3, r2
 8014972:	dc02      	bgt.n	801497a <_vfprintf_r+0x63a>
 8014974:	f01b 0f01 	tst.w	fp, #1
 8014978:	d001      	beq.n	801497e <_vfprintf_r+0x63e>
 801497a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801497c:	441f      	add	r7, r3
 801497e:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 8014982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014986:	930d      	str	r3, [sp, #52]	; 0x34
 8014988:	2300      	movs	r3, #0
 801498a:	e9cd 3306 	strd	r3, r3, [sp, #24]
 801498e:	4698      	mov	r8, r3
 8014990:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014992:	b113      	cbz	r3, 801499a <_vfprintf_r+0x65a>
 8014994:	232d      	movs	r3, #45	; 0x2d
 8014996:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 801499a:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 801499e:	f04f 0900 	mov.w	r9, #0
 80149a2:	45b9      	cmp	r9, r7
 80149a4:	464b      	mov	r3, r9
 80149a6:	bfb8      	it	lt
 80149a8:	463b      	movlt	r3, r7
 80149aa:	930d      	str	r3, [sp, #52]	; 0x34
 80149ac:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 80149b0:	b113      	cbz	r3, 80149b8 <_vfprintf_r+0x678>
 80149b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80149b4:	3301      	adds	r3, #1
 80149b6:	930d      	str	r3, [sp, #52]	; 0x34
 80149b8:	f01b 0302 	ands.w	r3, fp, #2
 80149bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80149be:	bf1e      	ittt	ne
 80149c0:	9b0d      	ldrne	r3, [sp, #52]	; 0x34
 80149c2:	3302      	addne	r3, #2
 80149c4:	930d      	strne	r3, [sp, #52]	; 0x34
 80149c6:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 80149ca:	9314      	str	r3, [sp, #80]	; 0x50
 80149cc:	d120      	bne.n	8014a10 <_vfprintf_r+0x6d0>
 80149ce:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 80149d2:	1a9b      	subs	r3, r3, r2
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	dd1b      	ble.n	8014a10 <_vfprintf_r+0x6d0>
 80149d8:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 80149dc:	494d      	ldr	r1, [pc, #308]	; (8014b14 <_vfprintf_r+0x7d4>)
 80149de:	6021      	str	r1, [r4, #0]
 80149e0:	2b10      	cmp	r3, #16
 80149e2:	f102 0201 	add.w	r2, r2, #1
 80149e6:	f104 0008 	add.w	r0, r4, #8
 80149ea:	f300 8302 	bgt.w	8014ff2 <_vfprintf_r+0xcb2>
 80149ee:	eb0c 0103 	add.w	r1, ip, r3
 80149f2:	2a07      	cmp	r2, #7
 80149f4:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 80149f8:	6063      	str	r3, [r4, #4]
 80149fa:	f340 830f 	ble.w	801501c <_vfprintf_r+0xcdc>
 80149fe:	aa1e      	add	r2, sp, #120	; 0x78
 8014a00:	4629      	mov	r1, r5
 8014a02:	4630      	mov	r0, r6
 8014a04:	f002 ffb9 	bl	801797a <__sprint_r>
 8014a08:	2800      	cmp	r0, #0
 8014a0a:	f040 8655 	bne.w	80156b8 <_vfprintf_r+0x1378>
 8014a0e:	ac21      	add	r4, sp, #132	; 0x84
 8014a10:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8014a14:	b173      	cbz	r3, 8014a34 <_vfprintf_r+0x6f4>
 8014a16:	f10d 035b 	add.w	r3, sp, #91	; 0x5b
 8014a1a:	6023      	str	r3, [r4, #0]
 8014a1c:	2301      	movs	r3, #1
 8014a1e:	6063      	str	r3, [r4, #4]
 8014a20:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014a22:	3301      	adds	r3, #1
 8014a24:	9320      	str	r3, [sp, #128]	; 0x80
 8014a26:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014a28:	3301      	adds	r3, #1
 8014a2a:	2b07      	cmp	r3, #7
 8014a2c:	931f      	str	r3, [sp, #124]	; 0x7c
 8014a2e:	f300 82f7 	bgt.w	8015020 <_vfprintf_r+0xce0>
 8014a32:	3408      	adds	r4, #8
 8014a34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014a36:	b16b      	cbz	r3, 8014a54 <_vfprintf_r+0x714>
 8014a38:	ab17      	add	r3, sp, #92	; 0x5c
 8014a3a:	6023      	str	r3, [r4, #0]
 8014a3c:	2302      	movs	r3, #2
 8014a3e:	6063      	str	r3, [r4, #4]
 8014a40:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014a42:	3302      	adds	r3, #2
 8014a44:	9320      	str	r3, [sp, #128]	; 0x80
 8014a46:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014a48:	3301      	adds	r3, #1
 8014a4a:	2b07      	cmp	r3, #7
 8014a4c:	931f      	str	r3, [sp, #124]	; 0x7c
 8014a4e:	f300 82f1 	bgt.w	8015034 <_vfprintf_r+0xcf4>
 8014a52:	3408      	adds	r4, #8
 8014a54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014a56:	2b80      	cmp	r3, #128	; 0x80
 8014a58:	d120      	bne.n	8014a9c <_vfprintf_r+0x75c>
 8014a5a:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8014a5e:	1a9b      	subs	r3, r3, r2
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	dd1b      	ble.n	8014a9c <_vfprintf_r+0x75c>
 8014a64:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 8014a68:	492b      	ldr	r1, [pc, #172]	; (8014b18 <_vfprintf_r+0x7d8>)
 8014a6a:	6021      	str	r1, [r4, #0]
 8014a6c:	2b10      	cmp	r3, #16
 8014a6e:	f102 0201 	add.w	r2, r2, #1
 8014a72:	f104 0008 	add.w	r0, r4, #8
 8014a76:	f300 82e7 	bgt.w	8015048 <_vfprintf_r+0xd08>
 8014a7a:	eb0c 0103 	add.w	r1, ip, r3
 8014a7e:	2a07      	cmp	r2, #7
 8014a80:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8014a84:	6063      	str	r3, [r4, #4]
 8014a86:	f340 82f4 	ble.w	8015072 <_vfprintf_r+0xd32>
 8014a8a:	aa1e      	add	r2, sp, #120	; 0x78
 8014a8c:	4629      	mov	r1, r5
 8014a8e:	4630      	mov	r0, r6
 8014a90:	f002 ff73 	bl	801797a <__sprint_r>
 8014a94:	2800      	cmp	r0, #0
 8014a96:	f040 860f 	bne.w	80156b8 <_vfprintf_r+0x1378>
 8014a9a:	ac21      	add	r4, sp, #132	; 0x84
 8014a9c:	eba9 0907 	sub.w	r9, r9, r7
 8014aa0:	f1b9 0f00 	cmp.w	r9, #0
 8014aa4:	dd1c      	ble.n	8014ae0 <_vfprintf_r+0x7a0>
 8014aa6:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	; 0x7c
 8014aaa:	481b      	ldr	r0, [pc, #108]	; (8014b18 <_vfprintf_r+0x7d8>)
 8014aac:	6020      	str	r0, [r4, #0]
 8014aae:	f1b9 0f10 	cmp.w	r9, #16
 8014ab2:	f102 0201 	add.w	r2, r2, #1
 8014ab6:	f104 0108 	add.w	r1, r4, #8
 8014aba:	f300 82dc 	bgt.w	8015076 <_vfprintf_r+0xd36>
 8014abe:	444b      	add	r3, r9
 8014ac0:	2a07      	cmp	r2, #7
 8014ac2:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 8014ac6:	f8c4 9004 	str.w	r9, [r4, #4]
 8014aca:	f340 82e8 	ble.w	801509e <_vfprintf_r+0xd5e>
 8014ace:	aa1e      	add	r2, sp, #120	; 0x78
 8014ad0:	4629      	mov	r1, r5
 8014ad2:	4630      	mov	r0, r6
 8014ad4:	f002 ff51 	bl	801797a <__sprint_r>
 8014ad8:	2800      	cmp	r0, #0
 8014ada:	f040 85ed 	bne.w	80156b8 <_vfprintf_r+0x1378>
 8014ade:	ac21      	add	r4, sp, #132	; 0x84
 8014ae0:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8014ae4:	9820      	ldr	r0, [sp, #128]	; 0x80
 8014ae6:	f040 82e1 	bne.w	80150ac <_vfprintf_r+0xd6c>
 8014aea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014aec:	3301      	adds	r3, #1
 8014aee:	4438      	add	r0, r7
 8014af0:	2b07      	cmp	r3, #7
 8014af2:	e9c4 a700 	strd	sl, r7, [r4]
 8014af6:	9020      	str	r0, [sp, #128]	; 0x80
 8014af8:	931f      	str	r3, [sp, #124]	; 0x7c
 8014afa:	f300 831c 	bgt.w	8015136 <_vfprintf_r+0xdf6>
 8014afe:	3408      	adds	r4, #8
 8014b00:	f01b 0f04 	tst.w	fp, #4
 8014b04:	f040 85b7 	bne.w	8015676 <_vfprintf_r+0x1336>
 8014b08:	e008      	b.n	8014b1c <_vfprintf_r+0x7dc>
 8014b0a:	bf00      	nop
 8014b0c:	08019404 	.word	0x08019404
 8014b10:	08019415 	.word	0x08019415
 8014b14:	08019448 	.word	0x08019448
 8014b18:	08019458 	.word	0x08019458
 8014b1c:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
 8014b20:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014b22:	428a      	cmp	r2, r1
 8014b24:	bfac      	ite	ge
 8014b26:	189b      	addge	r3, r3, r2
 8014b28:	185b      	addlt	r3, r3, r1
 8014b2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8014b2c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014b2e:	b13b      	cbz	r3, 8014b40 <_vfprintf_r+0x800>
 8014b30:	aa1e      	add	r2, sp, #120	; 0x78
 8014b32:	4629      	mov	r1, r5
 8014b34:	4630      	mov	r0, r6
 8014b36:	f002 ff20 	bl	801797a <__sprint_r>
 8014b3a:	2800      	cmp	r0, #0
 8014b3c:	f040 85bc 	bne.w	80156b8 <_vfprintf_r+0x1378>
 8014b40:	2300      	movs	r3, #0
 8014b42:	931f      	str	r3, [sp, #124]	; 0x7c
 8014b44:	9b02      	ldr	r3, [sp, #8]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	f040 85d3 	bne.w	80156f2 <_vfprintf_r+0x13b2>
 8014b4c:	ac21      	add	r4, sp, #132	; 0x84
 8014b4e:	e0e6      	b.n	8014d1e <_vfprintf_r+0x9de>
 8014b50:	2300      	movs	r3, #0
 8014b52:	9302      	str	r3, [sp, #8]
 8014b54:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 8014b58:	e646      	b.n	80147e8 <_vfprintf_r+0x4a8>
 8014b5a:	9002      	str	r0, [sp, #8]
 8014b5c:	e644      	b.n	80147e8 <_vfprintf_r+0x4a8>
 8014b5e:	2300      	movs	r3, #0
 8014b60:	9302      	str	r3, [sp, #8]
 8014b62:	2706      	movs	r7, #6
 8014b64:	e640      	b.n	80147e8 <_vfprintf_r+0x4a8>
 8014b66:	2300      	movs	r3, #0
 8014b68:	9302      	str	r3, [sp, #8]
 8014b6a:	e63d      	b.n	80147e8 <_vfprintf_r+0x4a8>
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	eeb0 9b48 	vmov.f64	d9, d8
 8014b72:	e644      	b.n	80147fe <_vfprintf_r+0x4be>
 8014b74:	f800 ec01 	strb.w	lr, [r0, #-1]
 8014b78:	e690      	b.n	801489c <_vfprintf_r+0x55c>
 8014b7a:	f802 eb01 	strb.w	lr, [r2], #1
 8014b7e:	ebac 0102 	sub.w	r1, ip, r2
 8014b82:	2900      	cmp	r1, #0
 8014b84:	daf9      	bge.n	8014b7a <_vfprintf_r+0x83a>
 8014b86:	1c42      	adds	r2, r0, #1
 8014b88:	3001      	adds	r0, #1
 8014b8a:	bfb8      	it	lt
 8014b8c:	2200      	movlt	r2, #0
 8014b8e:	4413      	add	r3, r2
 8014b90:	e693      	b.n	80148ba <_vfprintf_r+0x57a>
 8014b92:	461a      	mov	r2, r3
 8014b94:	eb03 0c00 	add.w	ip, r3, r0
 8014b98:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8014b9c:	e7ef      	b.n	8014b7e <_vfprintf_r+0x83e>
 8014b9e:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 8014ba2:	d006      	beq.n	8014bb2 <_vfprintf_r+0x872>
 8014ba4:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
 8014ba8:	d119      	bne.n	8014bde <_vfprintf_r+0x89e>
 8014baa:	f107 0801 	add.w	r8, r7, #1
 8014bae:	2102      	movs	r1, #2
 8014bb0:	e001      	b.n	8014bb6 <_vfprintf_r+0x876>
 8014bb2:	46b8      	mov	r8, r7
 8014bb4:	2103      	movs	r1, #3
 8014bb6:	ab1c      	add	r3, sp, #112	; 0x70
 8014bb8:	9301      	str	r3, [sp, #4]
 8014bba:	ab19      	add	r3, sp, #100	; 0x64
 8014bbc:	9300      	str	r3, [sp, #0]
 8014bbe:	4642      	mov	r2, r8
 8014bc0:	ab18      	add	r3, sp, #96	; 0x60
 8014bc2:	4630      	mov	r0, r6
 8014bc4:	eeb0 0b49 	vmov.f64	d0, d9
 8014bc8:	f000 ff12 	bl	80159f0 <_dtoa_r>
 8014bcc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8014bd0:	4682      	mov	sl, r0
 8014bd2:	d106      	bne.n	8014be2 <_vfprintf_r+0x8a2>
 8014bd4:	f01b 0f01 	tst.w	fp, #1
 8014bd8:	d103      	bne.n	8014be2 <_vfprintf_r+0x8a2>
 8014bda:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014bdc:	e66d      	b.n	80148ba <_vfprintf_r+0x57a>
 8014bde:	46b8      	mov	r8, r7
 8014be0:	e7e5      	b.n	8014bae <_vfprintf_r+0x86e>
 8014be2:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 8014be6:	eb0a 0308 	add.w	r3, sl, r8
 8014bea:	d10d      	bne.n	8014c08 <_vfprintf_r+0x8c8>
 8014bec:	f89a 2000 	ldrb.w	r2, [sl]
 8014bf0:	2a30      	cmp	r2, #48	; 0x30
 8014bf2:	d107      	bne.n	8014c04 <_vfprintf_r+0x8c4>
 8014bf4:	eeb5 9b40 	vcmp.f64	d9, #0.0
 8014bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bfc:	bf1c      	itt	ne
 8014bfe:	f1c8 0201 	rsbne	r2, r8, #1
 8014c02:	9218      	strne	r2, [sp, #96]	; 0x60
 8014c04:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014c06:	4413      	add	r3, r2
 8014c08:	eeb5 9b40 	vcmp.f64	d9, #0.0
 8014c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c10:	bf08      	it	eq
 8014c12:	931c      	streq	r3, [sp, #112]	; 0x70
 8014c14:	2130      	movs	r1, #48	; 0x30
 8014c16:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014c18:	4293      	cmp	r3, r2
 8014c1a:	d9de      	bls.n	8014bda <_vfprintf_r+0x89a>
 8014c1c:	1c50      	adds	r0, r2, #1
 8014c1e:	901c      	str	r0, [sp, #112]	; 0x70
 8014c20:	7011      	strb	r1, [r2, #0]
 8014c22:	e7f8      	b.n	8014c16 <_vfprintf_r+0x8d6>
 8014c24:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 8014c28:	f47f ae59 	bne.w	80148de <_vfprintf_r+0x59e>
 8014c2c:	f00b 0301 	and.w	r3, fp, #1
 8014c30:	f1b8 0f00 	cmp.w	r8, #0
 8014c34:	ea43 0307 	orr.w	r3, r3, r7
 8014c38:	dd18      	ble.n	8014c6c <_vfprintf_r+0x92c>
 8014c3a:	b38b      	cbz	r3, 8014ca0 <_vfprintf_r+0x960>
 8014c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c3e:	4443      	add	r3, r8
 8014c40:	441f      	add	r7, r3
 8014c42:	2366      	movs	r3, #102	; 0x66
 8014c44:	9304      	str	r3, [sp, #16]
 8014c46:	e030      	b.n	8014caa <_vfprintf_r+0x96a>
 8014c48:	f813 cb01 	ldrb.w	ip, [r3], #1
 8014c4c:	f802 cb01 	strb.w	ip, [r2], #1
 8014c50:	e67c      	b.n	801494c <_vfprintf_r+0x60c>
 8014c52:	b941      	cbnz	r1, 8014c66 <_vfprintf_r+0x926>
 8014c54:	2230      	movs	r2, #48	; 0x30
 8014c56:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
 8014c5a:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 8014c5e:	3330      	adds	r3, #48	; 0x30
 8014c60:	f802 3b01 	strb.w	r3, [r2], #1
 8014c64:	e67e      	b.n	8014964 <_vfprintf_r+0x624>
 8014c66:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 8014c6a:	e7f8      	b.n	8014c5e <_vfprintf_r+0x91e>
 8014c6c:	b1d3      	cbz	r3, 8014ca4 <_vfprintf_r+0x964>
 8014c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c70:	3301      	adds	r3, #1
 8014c72:	e7e5      	b.n	8014c40 <_vfprintf_r+0x900>
 8014c74:	9b03      	ldr	r3, [sp, #12]
 8014c76:	4543      	cmp	r3, r8
 8014c78:	dc07      	bgt.n	8014c8a <_vfprintf_r+0x94a>
 8014c7a:	f01b 0f01 	tst.w	fp, #1
 8014c7e:	d02a      	beq.n	8014cd6 <_vfprintf_r+0x996>
 8014c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c82:	eb08 0703 	add.w	r7, r8, r3
 8014c86:	2367      	movs	r3, #103	; 0x67
 8014c88:	e7dc      	b.n	8014c44 <_vfprintf_r+0x904>
 8014c8a:	9b03      	ldr	r3, [sp, #12]
 8014c8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014c8e:	f1b8 0f00 	cmp.w	r8, #0
 8014c92:	eb03 0702 	add.w	r7, r3, r2
 8014c96:	dcf6      	bgt.n	8014c86 <_vfprintf_r+0x946>
 8014c98:	f1c8 0301 	rsb	r3, r8, #1
 8014c9c:	441f      	add	r7, r3
 8014c9e:	e7f2      	b.n	8014c86 <_vfprintf_r+0x946>
 8014ca0:	4647      	mov	r7, r8
 8014ca2:	e7ce      	b.n	8014c42 <_vfprintf_r+0x902>
 8014ca4:	2366      	movs	r3, #102	; 0x66
 8014ca6:	9304      	str	r3, [sp, #16]
 8014ca8:	2701      	movs	r7, #1
 8014caa:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 8014cae:	9307      	str	r3, [sp, #28]
 8014cb0:	d025      	beq.n	8014cfe <_vfprintf_r+0x9be>
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	f1b8 0f00 	cmp.w	r8, #0
 8014cb8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8014cbc:	f77f ae68 	ble.w	8014990 <_vfprintf_r+0x650>
 8014cc0:	9b08      	ldr	r3, [sp, #32]
 8014cc2:	781b      	ldrb	r3, [r3, #0]
 8014cc4:	2bff      	cmp	r3, #255	; 0xff
 8014cc6:	d108      	bne.n	8014cda <_vfprintf_r+0x99a>
 8014cc8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014ccc:	4413      	add	r3, r2
 8014cce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014cd0:	fb02 7703 	mla	r7, r2, r3, r7
 8014cd4:	e65c      	b.n	8014990 <_vfprintf_r+0x650>
 8014cd6:	4647      	mov	r7, r8
 8014cd8:	e7d5      	b.n	8014c86 <_vfprintf_r+0x946>
 8014cda:	4543      	cmp	r3, r8
 8014cdc:	daf4      	bge.n	8014cc8 <_vfprintf_r+0x988>
 8014cde:	eba8 0803 	sub.w	r8, r8, r3
 8014ce2:	9b08      	ldr	r3, [sp, #32]
 8014ce4:	785b      	ldrb	r3, [r3, #1]
 8014ce6:	b133      	cbz	r3, 8014cf6 <_vfprintf_r+0x9b6>
 8014ce8:	9b07      	ldr	r3, [sp, #28]
 8014cea:	3301      	adds	r3, #1
 8014cec:	9307      	str	r3, [sp, #28]
 8014cee:	9b08      	ldr	r3, [sp, #32]
 8014cf0:	3301      	adds	r3, #1
 8014cf2:	9308      	str	r3, [sp, #32]
 8014cf4:	e7e4      	b.n	8014cc0 <_vfprintf_r+0x980>
 8014cf6:	9b06      	ldr	r3, [sp, #24]
 8014cf8:	3301      	adds	r3, #1
 8014cfa:	9306      	str	r3, [sp, #24]
 8014cfc:	e7e0      	b.n	8014cc0 <_vfprintf_r+0x980>
 8014cfe:	9b07      	ldr	r3, [sp, #28]
 8014d00:	9306      	str	r3, [sp, #24]
 8014d02:	e645      	b.n	8014990 <_vfprintf_r+0x650>
 8014d04:	f108 0304 	add.w	r3, r8, #4
 8014d08:	f01b 0f20 	tst.w	fp, #32
 8014d0c:	9305      	str	r3, [sp, #20]
 8014d0e:	d00c      	beq.n	8014d2a <_vfprintf_r+0x9ea>
 8014d10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014d12:	f8d8 3000 	ldr.w	r3, [r8]
 8014d16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014d18:	17d2      	asrs	r2, r2, #31
 8014d1a:	e9c3 1200 	strd	r1, r2, [r3]
 8014d1e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8014d22:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8014d26:	f7ff bb7e 	b.w	8014426 <_vfprintf_r+0xe6>
 8014d2a:	f01b 0f10 	tst.w	fp, #16
 8014d2e:	d004      	beq.n	8014d3a <_vfprintf_r+0x9fa>
 8014d30:	f8d8 3000 	ldr.w	r3, [r8]
 8014d34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014d36:	601a      	str	r2, [r3, #0]
 8014d38:	e7f1      	b.n	8014d1e <_vfprintf_r+0x9de>
 8014d3a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8014d3e:	d004      	beq.n	8014d4a <_vfprintf_r+0xa0a>
 8014d40:	f8d8 3000 	ldr.w	r3, [r8]
 8014d44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014d46:	801a      	strh	r2, [r3, #0]
 8014d48:	e7e9      	b.n	8014d1e <_vfprintf_r+0x9de>
 8014d4a:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8014d4e:	d0ef      	beq.n	8014d30 <_vfprintf_r+0x9f0>
 8014d50:	f8d8 3000 	ldr.w	r3, [r8]
 8014d54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014d56:	701a      	strb	r2, [r3, #0]
 8014d58:	e7e1      	b.n	8014d1e <_vfprintf_r+0x9de>
 8014d5a:	f04b 0b10 	orr.w	fp, fp, #16
 8014d5e:	f01b 0320 	ands.w	r3, fp, #32
 8014d62:	d020      	beq.n	8014da6 <_vfprintf_r+0xa66>
 8014d64:	f108 0807 	add.w	r8, r8, #7
 8014d68:	f028 0307 	bic.w	r3, r8, #7
 8014d6c:	461a      	mov	r2, r3
 8014d6e:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8014d72:	f852 8b08 	ldr.w	r8, [r2], #8
 8014d76:	9205      	str	r2, [sp, #20]
 8014d78:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	2200      	movs	r2, #0
 8014d80:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 8014d84:	1c7a      	adds	r2, r7, #1
 8014d86:	f000 84cd 	beq.w	8015724 <_vfprintf_r+0x13e4>
 8014d8a:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 8014d8e:	9202      	str	r2, [sp, #8]
 8014d90:	ea58 0209 	orrs.w	r2, r8, r9
 8014d94:	f040 84cc 	bne.w	8015730 <_vfprintf_r+0x13f0>
 8014d98:	2f00      	cmp	r7, #0
 8014d9a:	f000 810f 	beq.w	8014fbc <_vfprintf_r+0xc7c>
 8014d9e:	2b01      	cmp	r3, #1
 8014da0:	f040 84c9 	bne.w	8015736 <_vfprintf_r+0x13f6>
 8014da4:	e0ae      	b.n	8014f04 <_vfprintf_r+0xbc4>
 8014da6:	4642      	mov	r2, r8
 8014da8:	f01b 0910 	ands.w	r9, fp, #16
 8014dac:	f852 8b04 	ldr.w	r8, [r2], #4
 8014db0:	9205      	str	r2, [sp, #20]
 8014db2:	d001      	beq.n	8014db8 <_vfprintf_r+0xa78>
 8014db4:	4699      	mov	r9, r3
 8014db6:	e7df      	b.n	8014d78 <_vfprintf_r+0xa38>
 8014db8:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8014dbc:	d002      	beq.n	8014dc4 <_vfprintf_r+0xa84>
 8014dbe:	fa1f f888 	uxth.w	r8, r8
 8014dc2:	e7d9      	b.n	8014d78 <_vfprintf_r+0xa38>
 8014dc4:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
 8014dc8:	d0d6      	beq.n	8014d78 <_vfprintf_r+0xa38>
 8014dca:	fa5f f888 	uxtb.w	r8, r8
 8014dce:	e7f1      	b.n	8014db4 <_vfprintf_r+0xa74>
 8014dd0:	4643      	mov	r3, r8
 8014dd2:	2278      	movs	r2, #120	; 0x78
 8014dd4:	f853 8b04 	ldr.w	r8, [r3], #4
 8014dd8:	9305      	str	r3, [sp, #20]
 8014dda:	2330      	movs	r3, #48	; 0x30
 8014ddc:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8014de0:	4bb0      	ldr	r3, [pc, #704]	; (80150a4 <_vfprintf_r+0xd64>)
 8014de2:	9312      	str	r3, [sp, #72]	; 0x48
 8014de4:	f04f 0900 	mov.w	r9, #0
 8014de8:	f04b 0b02 	orr.w	fp, fp, #2
 8014dec:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
 8014df0:	2302      	movs	r3, #2
 8014df2:	9204      	str	r2, [sp, #16]
 8014df4:	e7c3      	b.n	8014d7e <_vfprintf_r+0xa3e>
 8014df6:	4643      	mov	r3, r8
 8014df8:	1c79      	adds	r1, r7, #1
 8014dfa:	f853 ab04 	ldr.w	sl, [r3], #4
 8014dfe:	9305      	str	r3, [sp, #20]
 8014e00:	f04f 0800 	mov.w	r8, #0
 8014e04:	f88d 805b 	strb.w	r8, [sp, #91]	; 0x5b
 8014e08:	d010      	beq.n	8014e2c <_vfprintf_r+0xaec>
 8014e0a:	463a      	mov	r2, r7
 8014e0c:	4641      	mov	r1, r8
 8014e0e:	4650      	mov	r0, sl
 8014e10:	f7eb fa1e 	bl	8000250 <memchr>
 8014e14:	9002      	str	r0, [sp, #8]
 8014e16:	2800      	cmp	r0, #0
 8014e18:	f000 80e8 	beq.w	8014fec <_vfprintf_r+0xcac>
 8014e1c:	e9cd 8806 	strd	r8, r8, [sp, #24]
 8014e20:	eba0 070a 	sub.w	r7, r0, sl
 8014e24:	f8cd 8008 	str.w	r8, [sp, #8]
 8014e28:	46c1      	mov	r9, r8
 8014e2a:	e5ba      	b.n	80149a2 <_vfprintf_r+0x662>
 8014e2c:	4650      	mov	r0, sl
 8014e2e:	f7eb fa07 	bl	8000240 <strlen>
 8014e32:	46c1      	mov	r9, r8
 8014e34:	4607      	mov	r7, r0
 8014e36:	f8cd 8008 	str.w	r8, [sp, #8]
 8014e3a:	464b      	mov	r3, r9
 8014e3c:	e47c      	b.n	8014738 <_vfprintf_r+0x3f8>
 8014e3e:	f04b 0b10 	orr.w	fp, fp, #16
 8014e42:	f01b 0320 	ands.w	r3, fp, #32
 8014e46:	d00b      	beq.n	8014e60 <_vfprintf_r+0xb20>
 8014e48:	f108 0807 	add.w	r8, r8, #7
 8014e4c:	f028 0307 	bic.w	r3, r8, #7
 8014e50:	461a      	mov	r2, r3
 8014e52:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8014e56:	f852 8b08 	ldr.w	r8, [r2], #8
 8014e5a:	9205      	str	r2, [sp, #20]
 8014e5c:	2301      	movs	r3, #1
 8014e5e:	e78e      	b.n	8014d7e <_vfprintf_r+0xa3e>
 8014e60:	4642      	mov	r2, r8
 8014e62:	f01b 0910 	ands.w	r9, fp, #16
 8014e66:	f852 8b04 	ldr.w	r8, [r2], #4
 8014e6a:	9205      	str	r2, [sp, #20]
 8014e6c:	d001      	beq.n	8014e72 <_vfprintf_r+0xb32>
 8014e6e:	4699      	mov	r9, r3
 8014e70:	e7f4      	b.n	8014e5c <_vfprintf_r+0xb1c>
 8014e72:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8014e76:	d002      	beq.n	8014e7e <_vfprintf_r+0xb3e>
 8014e78:	fa1f f888 	uxth.w	r8, r8
 8014e7c:	e7ee      	b.n	8014e5c <_vfprintf_r+0xb1c>
 8014e7e:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
 8014e82:	d0eb      	beq.n	8014e5c <_vfprintf_r+0xb1c>
 8014e84:	fa5f f888 	uxtb.w	r8, r8
 8014e88:	e7f1      	b.n	8014e6e <_vfprintf_r+0xb2e>
 8014e8a:	4b87      	ldr	r3, [pc, #540]	; (80150a8 <_vfprintf_r+0xd68>)
 8014e8c:	9312      	str	r3, [sp, #72]	; 0x48
 8014e8e:	f01b 0320 	ands.w	r3, fp, #32
 8014e92:	d01d      	beq.n	8014ed0 <_vfprintf_r+0xb90>
 8014e94:	f108 0807 	add.w	r8, r8, #7
 8014e98:	f028 0307 	bic.w	r3, r8, #7
 8014e9c:	461a      	mov	r2, r3
 8014e9e:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8014ea2:	f852 8b08 	ldr.w	r8, [r2], #8
 8014ea6:	9205      	str	r2, [sp, #20]
 8014ea8:	f01b 0f01 	tst.w	fp, #1
 8014eac:	d00a      	beq.n	8014ec4 <_vfprintf_r+0xb84>
 8014eae:	ea58 0309 	orrs.w	r3, r8, r9
 8014eb2:	d007      	beq.n	8014ec4 <_vfprintf_r+0xb84>
 8014eb4:	2330      	movs	r3, #48	; 0x30
 8014eb6:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8014eba:	9b04      	ldr	r3, [sp, #16]
 8014ebc:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 8014ec0:	f04b 0b02 	orr.w	fp, fp, #2
 8014ec4:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8014ec8:	2302      	movs	r3, #2
 8014eca:	e758      	b.n	8014d7e <_vfprintf_r+0xa3e>
 8014ecc:	4b75      	ldr	r3, [pc, #468]	; (80150a4 <_vfprintf_r+0xd64>)
 8014ece:	e7dd      	b.n	8014e8c <_vfprintf_r+0xb4c>
 8014ed0:	4642      	mov	r2, r8
 8014ed2:	f01b 0910 	ands.w	r9, fp, #16
 8014ed6:	f852 8b04 	ldr.w	r8, [r2], #4
 8014eda:	9205      	str	r2, [sp, #20]
 8014edc:	d001      	beq.n	8014ee2 <_vfprintf_r+0xba2>
 8014ede:	4699      	mov	r9, r3
 8014ee0:	e7e2      	b.n	8014ea8 <_vfprintf_r+0xb68>
 8014ee2:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8014ee6:	d002      	beq.n	8014eee <_vfprintf_r+0xbae>
 8014ee8:	fa1f f888 	uxth.w	r8, r8
 8014eec:	e7dc      	b.n	8014ea8 <_vfprintf_r+0xb68>
 8014eee:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
 8014ef2:	d0d9      	beq.n	8014ea8 <_vfprintf_r+0xb68>
 8014ef4:	fa5f f888 	uxtb.w	r8, r8
 8014ef8:	e7f1      	b.n	8014ede <_vfprintf_r+0xb9e>
 8014efa:	f1b8 0f0a 	cmp.w	r8, #10
 8014efe:	f179 0300 	sbcs.w	r3, r9, #0
 8014f02:	d207      	bcs.n	8014f14 <_vfprintf_r+0xbd4>
 8014f04:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8014f08:	f88d 8127 	strb.w	r8, [sp, #295]	; 0x127
 8014f0c:	f20d 1a27 	addw	sl, sp, #295	; 0x127
 8014f10:	f000 bc2f 	b.w	8015772 <_vfprintf_r+0x1432>
 8014f14:	2300      	movs	r3, #0
 8014f16:	9303      	str	r3, [sp, #12]
 8014f18:	9b02      	ldr	r3, [sp, #8]
 8014f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014f1e:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 8014f22:	9306      	str	r3, [sp, #24]
 8014f24:	220a      	movs	r2, #10
 8014f26:	2300      	movs	r3, #0
 8014f28:	4640      	mov	r0, r8
 8014f2a:	4649      	mov	r1, r9
 8014f2c:	f7eb f9e0 	bl	80002f0 <__aeabi_uldivmod>
 8014f30:	9b03      	ldr	r3, [sp, #12]
 8014f32:	3301      	adds	r3, #1
 8014f34:	9303      	str	r3, [sp, #12]
 8014f36:	9b06      	ldr	r3, [sp, #24]
 8014f38:	3230      	adds	r2, #48	; 0x30
 8014f3a:	f10b 3aff 	add.w	sl, fp, #4294967295
 8014f3e:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8014f42:	b1db      	cbz	r3, 8014f7c <_vfprintf_r+0xc3c>
 8014f44:	9b08      	ldr	r3, [sp, #32]
 8014f46:	9a03      	ldr	r2, [sp, #12]
 8014f48:	781b      	ldrb	r3, [r3, #0]
 8014f4a:	429a      	cmp	r2, r3
 8014f4c:	d116      	bne.n	8014f7c <_vfprintf_r+0xc3c>
 8014f4e:	2aff      	cmp	r2, #255	; 0xff
 8014f50:	d014      	beq.n	8014f7c <_vfprintf_r+0xc3c>
 8014f52:	f1b8 0f0a 	cmp.w	r8, #10
 8014f56:	f179 0300 	sbcs.w	r3, r9, #0
 8014f5a:	d30f      	bcc.n	8014f7c <_vfprintf_r+0xc3c>
 8014f5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f5e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8014f60:	ebaa 0a03 	sub.w	sl, sl, r3
 8014f64:	461a      	mov	r2, r3
 8014f66:	4650      	mov	r0, sl
 8014f68:	f002 fc79 	bl	801785e <strncpy>
 8014f6c:	9b08      	ldr	r3, [sp, #32]
 8014f6e:	785b      	ldrb	r3, [r3, #1]
 8014f70:	b11b      	cbz	r3, 8014f7a <_vfprintf_r+0xc3a>
 8014f72:	9b08      	ldr	r3, [sp, #32]
 8014f74:	3301      	adds	r3, #1
 8014f76:	9308      	str	r3, [sp, #32]
 8014f78:	2300      	movs	r3, #0
 8014f7a:	9303      	str	r3, [sp, #12]
 8014f7c:	2300      	movs	r3, #0
 8014f7e:	220a      	movs	r2, #10
 8014f80:	4640      	mov	r0, r8
 8014f82:	4649      	mov	r1, r9
 8014f84:	f7eb f9b4 	bl	80002f0 <__aeabi_uldivmod>
 8014f88:	f1b8 0f0a 	cmp.w	r8, #10
 8014f8c:	f179 0300 	sbcs.w	r3, r9, #0
 8014f90:	f0c0 83ef 	bcc.w	8015772 <_vfprintf_r+0x1432>
 8014f94:	4680      	mov	r8, r0
 8014f96:	4689      	mov	r9, r1
 8014f98:	46d3      	mov	fp, sl
 8014f9a:	e7c3      	b.n	8014f24 <_vfprintf_r+0xbe4>
 8014f9c:	f008 030f 	and.w	r3, r8, #15
 8014fa0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014fa2:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8014fa6:	5cd3      	ldrb	r3, [r2, r3]
 8014fa8:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 8014fac:	ea48 7809 	orr.w	r8, r8, r9, lsl #28
 8014fb0:	ea4f 1919 	mov.w	r9, r9, lsr #4
 8014fb4:	ea58 0309 	orrs.w	r3, r8, r9
 8014fb8:	d1f0      	bne.n	8014f9c <_vfprintf_r+0xc5c>
 8014fba:	e3da      	b.n	8015772 <_vfprintf_r+0x1432>
 8014fbc:	b933      	cbnz	r3, 8014fcc <_vfprintf_r+0xc8c>
 8014fbe:	f01b 0f01 	tst.w	fp, #1
 8014fc2:	d003      	beq.n	8014fcc <_vfprintf_r+0xc8c>
 8014fc4:	2330      	movs	r3, #48	; 0x30
 8014fc6:	f88d 3127 	strb.w	r3, [sp, #295]	; 0x127
 8014fca:	e79f      	b.n	8014f0c <_vfprintf_r+0xbcc>
 8014fcc:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 8014fd0:	e3cf      	b.n	8015772 <_vfprintf_r+0x1432>
 8014fd2:	9b04      	ldr	r3, [sp, #16]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	f000 8392 	beq.w	80156fe <_vfprintf_r+0x13be>
 8014fda:	2000      	movs	r0, #0
 8014fdc:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 8014fe0:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
 8014fe4:	f8cd 8014 	str.w	r8, [sp, #20]
 8014fe8:	f7ff bb36 	b.w	8014658 <_vfprintf_r+0x318>
 8014fec:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8014ff0:	e723      	b.n	8014e3a <_vfprintf_r+0xafa>
 8014ff2:	2110      	movs	r1, #16
 8014ff4:	6061      	str	r1, [r4, #4]
 8014ff6:	2a07      	cmp	r2, #7
 8014ff8:	4461      	add	r1, ip
 8014ffa:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8014ffe:	dd0a      	ble.n	8015016 <_vfprintf_r+0xcd6>
 8015000:	aa1e      	add	r2, sp, #120	; 0x78
 8015002:	4629      	mov	r1, r5
 8015004:	4630      	mov	r0, r6
 8015006:	9315      	str	r3, [sp, #84]	; 0x54
 8015008:	f002 fcb7 	bl	801797a <__sprint_r>
 801500c:	2800      	cmp	r0, #0
 801500e:	f040 8353 	bne.w	80156b8 <_vfprintf_r+0x1378>
 8015012:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015014:	a821      	add	r0, sp, #132	; 0x84
 8015016:	3b10      	subs	r3, #16
 8015018:	4604      	mov	r4, r0
 801501a:	e4dd      	b.n	80149d8 <_vfprintf_r+0x698>
 801501c:	4604      	mov	r4, r0
 801501e:	e4f7      	b.n	8014a10 <_vfprintf_r+0x6d0>
 8015020:	aa1e      	add	r2, sp, #120	; 0x78
 8015022:	4629      	mov	r1, r5
 8015024:	4630      	mov	r0, r6
 8015026:	f002 fca8 	bl	801797a <__sprint_r>
 801502a:	2800      	cmp	r0, #0
 801502c:	f040 8344 	bne.w	80156b8 <_vfprintf_r+0x1378>
 8015030:	ac21      	add	r4, sp, #132	; 0x84
 8015032:	e4ff      	b.n	8014a34 <_vfprintf_r+0x6f4>
 8015034:	aa1e      	add	r2, sp, #120	; 0x78
 8015036:	4629      	mov	r1, r5
 8015038:	4630      	mov	r0, r6
 801503a:	f002 fc9e 	bl	801797a <__sprint_r>
 801503e:	2800      	cmp	r0, #0
 8015040:	f040 833a 	bne.w	80156b8 <_vfprintf_r+0x1378>
 8015044:	ac21      	add	r4, sp, #132	; 0x84
 8015046:	e505      	b.n	8014a54 <_vfprintf_r+0x714>
 8015048:	2110      	movs	r1, #16
 801504a:	6061      	str	r1, [r4, #4]
 801504c:	2a07      	cmp	r2, #7
 801504e:	4461      	add	r1, ip
 8015050:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8015054:	dd0a      	ble.n	801506c <_vfprintf_r+0xd2c>
 8015056:	aa1e      	add	r2, sp, #120	; 0x78
 8015058:	4629      	mov	r1, r5
 801505a:	4630      	mov	r0, r6
 801505c:	9313      	str	r3, [sp, #76]	; 0x4c
 801505e:	f002 fc8c 	bl	801797a <__sprint_r>
 8015062:	2800      	cmp	r0, #0
 8015064:	f040 8328 	bne.w	80156b8 <_vfprintf_r+0x1378>
 8015068:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801506a:	a821      	add	r0, sp, #132	; 0x84
 801506c:	3b10      	subs	r3, #16
 801506e:	4604      	mov	r4, r0
 8015070:	e4f8      	b.n	8014a64 <_vfprintf_r+0x724>
 8015072:	4604      	mov	r4, r0
 8015074:	e512      	b.n	8014a9c <_vfprintf_r+0x75c>
 8015076:	2010      	movs	r0, #16
 8015078:	4403      	add	r3, r0
 801507a:	2a07      	cmp	r2, #7
 801507c:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 8015080:	6060      	str	r0, [r4, #4]
 8015082:	dd08      	ble.n	8015096 <_vfprintf_r+0xd56>
 8015084:	aa1e      	add	r2, sp, #120	; 0x78
 8015086:	4629      	mov	r1, r5
 8015088:	4630      	mov	r0, r6
 801508a:	f002 fc76 	bl	801797a <__sprint_r>
 801508e:	2800      	cmp	r0, #0
 8015090:	f040 8312 	bne.w	80156b8 <_vfprintf_r+0x1378>
 8015094:	a921      	add	r1, sp, #132	; 0x84
 8015096:	f1a9 0910 	sub.w	r9, r9, #16
 801509a:	460c      	mov	r4, r1
 801509c:	e503      	b.n	8014aa6 <_vfprintf_r+0x766>
 801509e:	460c      	mov	r4, r1
 80150a0:	e51e      	b.n	8014ae0 <_vfprintf_r+0x7a0>
 80150a2:	bf00      	nop
 80150a4:	08019404 	.word	0x08019404
 80150a8:	08019415 	.word	0x08019415
 80150ac:	9b04      	ldr	r3, [sp, #16]
 80150ae:	2b65      	cmp	r3, #101	; 0x65
 80150b0:	f340 8252 	ble.w	8015558 <_vfprintf_r+0x1218>
 80150b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80150b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150bc:	d16c      	bne.n	8015198 <_vfprintf_r+0xe58>
 80150be:	4b75      	ldr	r3, [pc, #468]	; (8015294 <_vfprintf_r+0xf54>)
 80150c0:	6023      	str	r3, [r4, #0]
 80150c2:	2301      	movs	r3, #1
 80150c4:	4418      	add	r0, r3
 80150c6:	6063      	str	r3, [r4, #4]
 80150c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80150ca:	9020      	str	r0, [sp, #128]	; 0x80
 80150cc:	3301      	adds	r3, #1
 80150ce:	2b07      	cmp	r3, #7
 80150d0:	931f      	str	r3, [sp, #124]	; 0x7c
 80150d2:	dc3a      	bgt.n	801514a <_vfprintf_r+0xe0a>
 80150d4:	3408      	adds	r4, #8
 80150d6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80150d8:	9a03      	ldr	r2, [sp, #12]
 80150da:	4293      	cmp	r3, r2
 80150dc:	db03      	blt.n	80150e6 <_vfprintf_r+0xda6>
 80150de:	f01b 0f01 	tst.w	fp, #1
 80150e2:	f43f ad0d 	beq.w	8014b00 <_vfprintf_r+0x7c0>
 80150e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80150e8:	6023      	str	r3, [r4, #0]
 80150ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80150ee:	6063      	str	r3, [r4, #4]
 80150f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80150f2:	4413      	add	r3, r2
 80150f4:	9320      	str	r3, [sp, #128]	; 0x80
 80150f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80150f8:	3301      	adds	r3, #1
 80150fa:	2b07      	cmp	r3, #7
 80150fc:	931f      	str	r3, [sp, #124]	; 0x7c
 80150fe:	dc2e      	bgt.n	801515e <_vfprintf_r+0xe1e>
 8015100:	3408      	adds	r4, #8
 8015102:	9b03      	ldr	r3, [sp, #12]
 8015104:	1e5f      	subs	r7, r3, #1
 8015106:	2f00      	cmp	r7, #0
 8015108:	f77f acfa 	ble.w	8014b00 <_vfprintf_r+0x7c0>
 801510c:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8015298 <_vfprintf_r+0xf58>
 8015110:	f04f 0910 	mov.w	r9, #16
 8015114:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8015118:	2f10      	cmp	r7, #16
 801511a:	f103 0301 	add.w	r3, r3, #1
 801511e:	f104 0108 	add.w	r1, r4, #8
 8015122:	f8c4 8000 	str.w	r8, [r4]
 8015126:	dc24      	bgt.n	8015172 <_vfprintf_r+0xe32>
 8015128:	443a      	add	r2, r7
 801512a:	6067      	str	r7, [r4, #4]
 801512c:	9220      	str	r2, [sp, #128]	; 0x80
 801512e:	2b07      	cmp	r3, #7
 8015130:	931f      	str	r3, [sp, #124]	; 0x7c
 8015132:	f340 829d 	ble.w	8015670 <_vfprintf_r+0x1330>
 8015136:	aa1e      	add	r2, sp, #120	; 0x78
 8015138:	4629      	mov	r1, r5
 801513a:	4630      	mov	r0, r6
 801513c:	f002 fc1d 	bl	801797a <__sprint_r>
 8015140:	2800      	cmp	r0, #0
 8015142:	f040 82b9 	bne.w	80156b8 <_vfprintf_r+0x1378>
 8015146:	ac21      	add	r4, sp, #132	; 0x84
 8015148:	e4da      	b.n	8014b00 <_vfprintf_r+0x7c0>
 801514a:	aa1e      	add	r2, sp, #120	; 0x78
 801514c:	4629      	mov	r1, r5
 801514e:	4630      	mov	r0, r6
 8015150:	f002 fc13 	bl	801797a <__sprint_r>
 8015154:	2800      	cmp	r0, #0
 8015156:	f040 82af 	bne.w	80156b8 <_vfprintf_r+0x1378>
 801515a:	ac21      	add	r4, sp, #132	; 0x84
 801515c:	e7bb      	b.n	80150d6 <_vfprintf_r+0xd96>
 801515e:	aa1e      	add	r2, sp, #120	; 0x78
 8015160:	4629      	mov	r1, r5
 8015162:	4630      	mov	r0, r6
 8015164:	f002 fc09 	bl	801797a <__sprint_r>
 8015168:	2800      	cmp	r0, #0
 801516a:	f040 82a5 	bne.w	80156b8 <_vfprintf_r+0x1378>
 801516e:	ac21      	add	r4, sp, #132	; 0x84
 8015170:	e7c7      	b.n	8015102 <_vfprintf_r+0xdc2>
 8015172:	3210      	adds	r2, #16
 8015174:	2b07      	cmp	r3, #7
 8015176:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 801517a:	f8c4 9004 	str.w	r9, [r4, #4]
 801517e:	dd08      	ble.n	8015192 <_vfprintf_r+0xe52>
 8015180:	aa1e      	add	r2, sp, #120	; 0x78
 8015182:	4629      	mov	r1, r5
 8015184:	4630      	mov	r0, r6
 8015186:	f002 fbf8 	bl	801797a <__sprint_r>
 801518a:	2800      	cmp	r0, #0
 801518c:	f040 8294 	bne.w	80156b8 <_vfprintf_r+0x1378>
 8015190:	a921      	add	r1, sp, #132	; 0x84
 8015192:	3f10      	subs	r7, #16
 8015194:	460c      	mov	r4, r1
 8015196:	e7bd      	b.n	8015114 <_vfprintf_r+0xdd4>
 8015198:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801519a:	2b00      	cmp	r3, #0
 801519c:	dc7e      	bgt.n	801529c <_vfprintf_r+0xf5c>
 801519e:	4b3d      	ldr	r3, [pc, #244]	; (8015294 <_vfprintf_r+0xf54>)
 80151a0:	6023      	str	r3, [r4, #0]
 80151a2:	2301      	movs	r3, #1
 80151a4:	4418      	add	r0, r3
 80151a6:	6063      	str	r3, [r4, #4]
 80151a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80151aa:	9020      	str	r0, [sp, #128]	; 0x80
 80151ac:	3301      	adds	r3, #1
 80151ae:	2b07      	cmp	r3, #7
 80151b0:	931f      	str	r3, [sp, #124]	; 0x7c
 80151b2:	dc47      	bgt.n	8015244 <_vfprintf_r+0xf04>
 80151b4:	3408      	adds	r4, #8
 80151b6:	9903      	ldr	r1, [sp, #12]
 80151b8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80151ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80151bc:	430a      	orrs	r2, r1
 80151be:	f00b 0101 	and.w	r1, fp, #1
 80151c2:	430a      	orrs	r2, r1
 80151c4:	f43f ac9c 	beq.w	8014b00 <_vfprintf_r+0x7c0>
 80151c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80151ca:	6022      	str	r2, [r4, #0]
 80151cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80151ce:	6062      	str	r2, [r4, #4]
 80151d0:	4413      	add	r3, r2
 80151d2:	9320      	str	r3, [sp, #128]	; 0x80
 80151d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80151d6:	3301      	adds	r3, #1
 80151d8:	2b07      	cmp	r3, #7
 80151da:	931f      	str	r3, [sp, #124]	; 0x7c
 80151dc:	dc3c      	bgt.n	8015258 <_vfprintf_r+0xf18>
 80151de:	f104 0308 	add.w	r3, r4, #8
 80151e2:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80151e4:	2f00      	cmp	r7, #0
 80151e6:	da1c      	bge.n	8015222 <_vfprintf_r+0xee2>
 80151e8:	4c2b      	ldr	r4, [pc, #172]	; (8015298 <_vfprintf_r+0xf58>)
 80151ea:	427f      	negs	r7, r7
 80151ec:	461a      	mov	r2, r3
 80151ee:	f04f 0810 	mov.w	r8, #16
 80151f2:	e9dd 101f 	ldrd	r1, r0, [sp, #124]	; 0x7c
 80151f6:	2f10      	cmp	r7, #16
 80151f8:	f101 0101 	add.w	r1, r1, #1
 80151fc:	f103 0308 	add.w	r3, r3, #8
 8015200:	6014      	str	r4, [r2, #0]
 8015202:	dc33      	bgt.n	801526c <_vfprintf_r+0xf2c>
 8015204:	6057      	str	r7, [r2, #4]
 8015206:	2907      	cmp	r1, #7
 8015208:	4407      	add	r7, r0
 801520a:	e9cd 171f 	strd	r1, r7, [sp, #124]	; 0x7c
 801520e:	dd08      	ble.n	8015222 <_vfprintf_r+0xee2>
 8015210:	aa1e      	add	r2, sp, #120	; 0x78
 8015212:	4629      	mov	r1, r5
 8015214:	4630      	mov	r0, r6
 8015216:	f002 fbb0 	bl	801797a <__sprint_r>
 801521a:	2800      	cmp	r0, #0
 801521c:	f040 824c 	bne.w	80156b8 <_vfprintf_r+0x1378>
 8015220:	ab21      	add	r3, sp, #132	; 0x84
 8015222:	9a03      	ldr	r2, [sp, #12]
 8015224:	605a      	str	r2, [r3, #4]
 8015226:	9903      	ldr	r1, [sp, #12]
 8015228:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801522a:	f8c3 a000 	str.w	sl, [r3]
 801522e:	440a      	add	r2, r1
 8015230:	9220      	str	r2, [sp, #128]	; 0x80
 8015232:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8015234:	3201      	adds	r2, #1
 8015236:	2a07      	cmp	r2, #7
 8015238:	921f      	str	r2, [sp, #124]	; 0x7c
 801523a:	f73f af7c 	bgt.w	8015136 <_vfprintf_r+0xdf6>
 801523e:	f103 0408 	add.w	r4, r3, #8
 8015242:	e45d      	b.n	8014b00 <_vfprintf_r+0x7c0>
 8015244:	aa1e      	add	r2, sp, #120	; 0x78
 8015246:	4629      	mov	r1, r5
 8015248:	4630      	mov	r0, r6
 801524a:	f002 fb96 	bl	801797a <__sprint_r>
 801524e:	2800      	cmp	r0, #0
 8015250:	f040 8232 	bne.w	80156b8 <_vfprintf_r+0x1378>
 8015254:	ac21      	add	r4, sp, #132	; 0x84
 8015256:	e7ae      	b.n	80151b6 <_vfprintf_r+0xe76>
 8015258:	aa1e      	add	r2, sp, #120	; 0x78
 801525a:	4629      	mov	r1, r5
 801525c:	4630      	mov	r0, r6
 801525e:	f002 fb8c 	bl	801797a <__sprint_r>
 8015262:	2800      	cmp	r0, #0
 8015264:	f040 8228 	bne.w	80156b8 <_vfprintf_r+0x1378>
 8015268:	ab21      	add	r3, sp, #132	; 0x84
 801526a:	e7ba      	b.n	80151e2 <_vfprintf_r+0xea2>
 801526c:	3010      	adds	r0, #16
 801526e:	2907      	cmp	r1, #7
 8015270:	e9cd 101f 	strd	r1, r0, [sp, #124]	; 0x7c
 8015274:	f8c2 8004 	str.w	r8, [r2, #4]
 8015278:	dd08      	ble.n	801528c <_vfprintf_r+0xf4c>
 801527a:	aa1e      	add	r2, sp, #120	; 0x78
 801527c:	4629      	mov	r1, r5
 801527e:	4630      	mov	r0, r6
 8015280:	f002 fb7b 	bl	801797a <__sprint_r>
 8015284:	2800      	cmp	r0, #0
 8015286:	f040 8217 	bne.w	80156b8 <_vfprintf_r+0x1378>
 801528a:	ab21      	add	r3, sp, #132	; 0x84
 801528c:	3f10      	subs	r7, #16
 801528e:	461a      	mov	r2, r3
 8015290:	e7af      	b.n	80151f2 <_vfprintf_r+0xeb2>
 8015292:	bf00      	nop
 8015294:	08019426 	.word	0x08019426
 8015298:	08019458 	.word	0x08019458
 801529c:	9b03      	ldr	r3, [sp, #12]
 801529e:	4543      	cmp	r3, r8
 80152a0:	bfa8      	it	ge
 80152a2:	4643      	movge	r3, r8
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	4699      	mov	r9, r3
 80152a8:	dd0a      	ble.n	80152c0 <_vfprintf_r+0xf80>
 80152aa:	4418      	add	r0, r3
 80152ac:	e9c4 a300 	strd	sl, r3, [r4]
 80152b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80152b2:	9020      	str	r0, [sp, #128]	; 0x80
 80152b4:	3301      	adds	r3, #1
 80152b6:	2b07      	cmp	r3, #7
 80152b8:	931f      	str	r3, [sp, #124]	; 0x7c
 80152ba:	f300 8084 	bgt.w	80153c6 <_vfprintf_r+0x1086>
 80152be:	3408      	adds	r4, #8
 80152c0:	f1b9 0f00 	cmp.w	r9, #0
 80152c4:	bfac      	ite	ge
 80152c6:	eba8 0709 	subge.w	r7, r8, r9
 80152ca:	4647      	movlt	r7, r8
 80152cc:	2f00      	cmp	r7, #0
 80152ce:	dd1b      	ble.n	8015308 <_vfprintf_r+0xfc8>
 80152d0:	f8df 9448 	ldr.w	r9, [pc, #1096]	; 801571c <_vfprintf_r+0x13dc>
 80152d4:	f8c4 9000 	str.w	r9, [r4]
 80152d8:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 80152dc:	2f10      	cmp	r7, #16
 80152de:	f103 0301 	add.w	r3, r3, #1
 80152e2:	f104 0108 	add.w	r1, r4, #8
 80152e6:	dc78      	bgt.n	80153da <_vfprintf_r+0x109a>
 80152e8:	6067      	str	r7, [r4, #4]
 80152ea:	2b07      	cmp	r3, #7
 80152ec:	4417      	add	r7, r2
 80152ee:	e9cd 371f 	strd	r3, r7, [sp, #124]	; 0x7c
 80152f2:	f340 8085 	ble.w	8015400 <_vfprintf_r+0x10c0>
 80152f6:	aa1e      	add	r2, sp, #120	; 0x78
 80152f8:	4629      	mov	r1, r5
 80152fa:	4630      	mov	r0, r6
 80152fc:	f002 fb3d 	bl	801797a <__sprint_r>
 8015300:	2800      	cmp	r0, #0
 8015302:	f040 81d9 	bne.w	80156b8 <_vfprintf_r+0x1378>
 8015306:	ac21      	add	r4, sp, #132	; 0x84
 8015308:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 801530c:	44d0      	add	r8, sl
 801530e:	d00a      	beq.n	8015326 <_vfprintf_r+0xfe6>
 8015310:	9b07      	ldr	r3, [sp, #28]
 8015312:	2b00      	cmp	r3, #0
 8015314:	d176      	bne.n	8015404 <_vfprintf_r+0x10c4>
 8015316:	9b06      	ldr	r3, [sp, #24]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d176      	bne.n	801540a <_vfprintf_r+0x10ca>
 801531c:	9b03      	ldr	r3, [sp, #12]
 801531e:	4453      	add	r3, sl
 8015320:	4598      	cmp	r8, r3
 8015322:	bf28      	it	cs
 8015324:	4698      	movcs	r8, r3
 8015326:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015328:	9a03      	ldr	r2, [sp, #12]
 801532a:	4293      	cmp	r3, r2
 801532c:	db02      	blt.n	8015334 <_vfprintf_r+0xff4>
 801532e:	f01b 0f01 	tst.w	fp, #1
 8015332:	d00e      	beq.n	8015352 <_vfprintf_r+0x1012>
 8015334:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015336:	6023      	str	r3, [r4, #0]
 8015338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801533a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801533c:	6063      	str	r3, [r4, #4]
 801533e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015340:	4413      	add	r3, r2
 8015342:	9320      	str	r3, [sp, #128]	; 0x80
 8015344:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015346:	3301      	adds	r3, #1
 8015348:	2b07      	cmp	r3, #7
 801534a:	931f      	str	r3, [sp, #124]	; 0x7c
 801534c:	f300 80dd 	bgt.w	801550a <_vfprintf_r+0x11ca>
 8015350:	3408      	adds	r4, #8
 8015352:	9b03      	ldr	r3, [sp, #12]
 8015354:	9903      	ldr	r1, [sp, #12]
 8015356:	eb0a 0203 	add.w	r2, sl, r3
 801535a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801535c:	eba2 0208 	sub.w	r2, r2, r8
 8015360:	eba1 0903 	sub.w	r9, r1, r3
 8015364:	4591      	cmp	r9, r2
 8015366:	bfa8      	it	ge
 8015368:	4691      	movge	r9, r2
 801536a:	f1b9 0f00 	cmp.w	r9, #0
 801536e:	dd0b      	ble.n	8015388 <_vfprintf_r+0x1048>
 8015370:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015372:	444b      	add	r3, r9
 8015374:	9320      	str	r3, [sp, #128]	; 0x80
 8015376:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015378:	3301      	adds	r3, #1
 801537a:	2b07      	cmp	r3, #7
 801537c:	e9c4 8900 	strd	r8, r9, [r4]
 8015380:	931f      	str	r3, [sp, #124]	; 0x7c
 8015382:	f300 80cc 	bgt.w	801551e <_vfprintf_r+0x11de>
 8015386:	3408      	adds	r4, #8
 8015388:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801538a:	9b03      	ldr	r3, [sp, #12]
 801538c:	f1b9 0f00 	cmp.w	r9, #0
 8015390:	eba3 0707 	sub.w	r7, r3, r7
 8015394:	bfa8      	it	ge
 8015396:	eba7 0709 	subge.w	r7, r7, r9
 801539a:	2f00      	cmp	r7, #0
 801539c:	f77f abb0 	ble.w	8014b00 <_vfprintf_r+0x7c0>
 80153a0:	f8df 8378 	ldr.w	r8, [pc, #888]	; 801571c <_vfprintf_r+0x13dc>
 80153a4:	f04f 0910 	mov.w	r9, #16
 80153a8:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 80153ac:	2f10      	cmp	r7, #16
 80153ae:	f103 0301 	add.w	r3, r3, #1
 80153b2:	f104 0108 	add.w	r1, r4, #8
 80153b6:	f8c4 8000 	str.w	r8, [r4]
 80153ba:	f300 80ba 	bgt.w	8015532 <_vfprintf_r+0x11f2>
 80153be:	6067      	str	r7, [r4, #4]
 80153c0:	4417      	add	r7, r2
 80153c2:	9720      	str	r7, [sp, #128]	; 0x80
 80153c4:	e6b3      	b.n	801512e <_vfprintf_r+0xdee>
 80153c6:	aa1e      	add	r2, sp, #120	; 0x78
 80153c8:	4629      	mov	r1, r5
 80153ca:	4630      	mov	r0, r6
 80153cc:	f002 fad5 	bl	801797a <__sprint_r>
 80153d0:	2800      	cmp	r0, #0
 80153d2:	f040 8171 	bne.w	80156b8 <_vfprintf_r+0x1378>
 80153d6:	ac21      	add	r4, sp, #132	; 0x84
 80153d8:	e772      	b.n	80152c0 <_vfprintf_r+0xf80>
 80153da:	2010      	movs	r0, #16
 80153dc:	4402      	add	r2, r0
 80153de:	2b07      	cmp	r3, #7
 80153e0:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 80153e4:	6060      	str	r0, [r4, #4]
 80153e6:	dd08      	ble.n	80153fa <_vfprintf_r+0x10ba>
 80153e8:	aa1e      	add	r2, sp, #120	; 0x78
 80153ea:	4629      	mov	r1, r5
 80153ec:	4630      	mov	r0, r6
 80153ee:	f002 fac4 	bl	801797a <__sprint_r>
 80153f2:	2800      	cmp	r0, #0
 80153f4:	f040 8160 	bne.w	80156b8 <_vfprintf_r+0x1378>
 80153f8:	a921      	add	r1, sp, #132	; 0x84
 80153fa:	3f10      	subs	r7, #16
 80153fc:	460c      	mov	r4, r1
 80153fe:	e769      	b.n	80152d4 <_vfprintf_r+0xf94>
 8015400:	460c      	mov	r4, r1
 8015402:	e781      	b.n	8015308 <_vfprintf_r+0xfc8>
 8015404:	9b06      	ldr	r3, [sp, #24]
 8015406:	2b00      	cmp	r3, #0
 8015408:	d04f      	beq.n	80154aa <_vfprintf_r+0x116a>
 801540a:	9b06      	ldr	r3, [sp, #24]
 801540c:	3b01      	subs	r3, #1
 801540e:	9306      	str	r3, [sp, #24]
 8015410:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015412:	6023      	str	r3, [r4, #0]
 8015414:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015416:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015418:	6063      	str	r3, [r4, #4]
 801541a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801541c:	4413      	add	r3, r2
 801541e:	9320      	str	r3, [sp, #128]	; 0x80
 8015420:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015422:	3301      	adds	r3, #1
 8015424:	2b07      	cmp	r3, #7
 8015426:	931f      	str	r3, [sp, #124]	; 0x7c
 8015428:	dc46      	bgt.n	80154b8 <_vfprintf_r+0x1178>
 801542a:	3408      	adds	r4, #8
 801542c:	9b03      	ldr	r3, [sp, #12]
 801542e:	9a08      	ldr	r2, [sp, #32]
 8015430:	eb0a 0903 	add.w	r9, sl, r3
 8015434:	eba9 0308 	sub.w	r3, r9, r8
 8015438:	f892 9000 	ldrb.w	r9, [r2]
 801543c:	4599      	cmp	r9, r3
 801543e:	bfa8      	it	ge
 8015440:	4699      	movge	r9, r3
 8015442:	f1b9 0f00 	cmp.w	r9, #0
 8015446:	dd0a      	ble.n	801545e <_vfprintf_r+0x111e>
 8015448:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801544a:	444b      	add	r3, r9
 801544c:	9320      	str	r3, [sp, #128]	; 0x80
 801544e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015450:	3301      	adds	r3, #1
 8015452:	2b07      	cmp	r3, #7
 8015454:	e9c4 8900 	strd	r8, r9, [r4]
 8015458:	931f      	str	r3, [sp, #124]	; 0x7c
 801545a:	dc37      	bgt.n	80154cc <_vfprintf_r+0x118c>
 801545c:	3408      	adds	r4, #8
 801545e:	9b08      	ldr	r3, [sp, #32]
 8015460:	781f      	ldrb	r7, [r3, #0]
 8015462:	f1b9 0f00 	cmp.w	r9, #0
 8015466:	bfa8      	it	ge
 8015468:	eba7 0709 	subge.w	r7, r7, r9
 801546c:	2f00      	cmp	r7, #0
 801546e:	dd18      	ble.n	80154a2 <_vfprintf_r+0x1162>
 8015470:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8015474:	48a9      	ldr	r0, [pc, #676]	; (801571c <_vfprintf_r+0x13dc>)
 8015476:	6020      	str	r0, [r4, #0]
 8015478:	2f10      	cmp	r7, #16
 801547a:	f103 0301 	add.w	r3, r3, #1
 801547e:	f104 0108 	add.w	r1, r4, #8
 8015482:	dc2d      	bgt.n	80154e0 <_vfprintf_r+0x11a0>
 8015484:	6067      	str	r7, [r4, #4]
 8015486:	2b07      	cmp	r3, #7
 8015488:	4417      	add	r7, r2
 801548a:	e9cd 371f 	strd	r3, r7, [sp, #124]	; 0x7c
 801548e:	dd3a      	ble.n	8015506 <_vfprintf_r+0x11c6>
 8015490:	aa1e      	add	r2, sp, #120	; 0x78
 8015492:	4629      	mov	r1, r5
 8015494:	4630      	mov	r0, r6
 8015496:	f002 fa70 	bl	801797a <__sprint_r>
 801549a:	2800      	cmp	r0, #0
 801549c:	f040 810c 	bne.w	80156b8 <_vfprintf_r+0x1378>
 80154a0:	ac21      	add	r4, sp, #132	; 0x84
 80154a2:	9b08      	ldr	r3, [sp, #32]
 80154a4:	781b      	ldrb	r3, [r3, #0]
 80154a6:	4498      	add	r8, r3
 80154a8:	e732      	b.n	8015310 <_vfprintf_r+0xfd0>
 80154aa:	9b08      	ldr	r3, [sp, #32]
 80154ac:	3b01      	subs	r3, #1
 80154ae:	9308      	str	r3, [sp, #32]
 80154b0:	9b07      	ldr	r3, [sp, #28]
 80154b2:	3b01      	subs	r3, #1
 80154b4:	9307      	str	r3, [sp, #28]
 80154b6:	e7ab      	b.n	8015410 <_vfprintf_r+0x10d0>
 80154b8:	aa1e      	add	r2, sp, #120	; 0x78
 80154ba:	4629      	mov	r1, r5
 80154bc:	4630      	mov	r0, r6
 80154be:	f002 fa5c 	bl	801797a <__sprint_r>
 80154c2:	2800      	cmp	r0, #0
 80154c4:	f040 80f8 	bne.w	80156b8 <_vfprintf_r+0x1378>
 80154c8:	ac21      	add	r4, sp, #132	; 0x84
 80154ca:	e7af      	b.n	801542c <_vfprintf_r+0x10ec>
 80154cc:	aa1e      	add	r2, sp, #120	; 0x78
 80154ce:	4629      	mov	r1, r5
 80154d0:	4630      	mov	r0, r6
 80154d2:	f002 fa52 	bl	801797a <__sprint_r>
 80154d6:	2800      	cmp	r0, #0
 80154d8:	f040 80ee 	bne.w	80156b8 <_vfprintf_r+0x1378>
 80154dc:	ac21      	add	r4, sp, #132	; 0x84
 80154de:	e7be      	b.n	801545e <_vfprintf_r+0x111e>
 80154e0:	2010      	movs	r0, #16
 80154e2:	4402      	add	r2, r0
 80154e4:	2b07      	cmp	r3, #7
 80154e6:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 80154ea:	6060      	str	r0, [r4, #4]
 80154ec:	dd08      	ble.n	8015500 <_vfprintf_r+0x11c0>
 80154ee:	aa1e      	add	r2, sp, #120	; 0x78
 80154f0:	4629      	mov	r1, r5
 80154f2:	4630      	mov	r0, r6
 80154f4:	f002 fa41 	bl	801797a <__sprint_r>
 80154f8:	2800      	cmp	r0, #0
 80154fa:	f040 80dd 	bne.w	80156b8 <_vfprintf_r+0x1378>
 80154fe:	a921      	add	r1, sp, #132	; 0x84
 8015500:	3f10      	subs	r7, #16
 8015502:	460c      	mov	r4, r1
 8015504:	e7b4      	b.n	8015470 <_vfprintf_r+0x1130>
 8015506:	460c      	mov	r4, r1
 8015508:	e7cb      	b.n	80154a2 <_vfprintf_r+0x1162>
 801550a:	aa1e      	add	r2, sp, #120	; 0x78
 801550c:	4629      	mov	r1, r5
 801550e:	4630      	mov	r0, r6
 8015510:	f002 fa33 	bl	801797a <__sprint_r>
 8015514:	2800      	cmp	r0, #0
 8015516:	f040 80cf 	bne.w	80156b8 <_vfprintf_r+0x1378>
 801551a:	ac21      	add	r4, sp, #132	; 0x84
 801551c:	e719      	b.n	8015352 <_vfprintf_r+0x1012>
 801551e:	aa1e      	add	r2, sp, #120	; 0x78
 8015520:	4629      	mov	r1, r5
 8015522:	4630      	mov	r0, r6
 8015524:	f002 fa29 	bl	801797a <__sprint_r>
 8015528:	2800      	cmp	r0, #0
 801552a:	f040 80c5 	bne.w	80156b8 <_vfprintf_r+0x1378>
 801552e:	ac21      	add	r4, sp, #132	; 0x84
 8015530:	e72a      	b.n	8015388 <_vfprintf_r+0x1048>
 8015532:	3210      	adds	r2, #16
 8015534:	2b07      	cmp	r3, #7
 8015536:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 801553a:	f8c4 9004 	str.w	r9, [r4, #4]
 801553e:	dd08      	ble.n	8015552 <_vfprintf_r+0x1212>
 8015540:	aa1e      	add	r2, sp, #120	; 0x78
 8015542:	4629      	mov	r1, r5
 8015544:	4630      	mov	r0, r6
 8015546:	f002 fa18 	bl	801797a <__sprint_r>
 801554a:	2800      	cmp	r0, #0
 801554c:	f040 80b4 	bne.w	80156b8 <_vfprintf_r+0x1378>
 8015550:	a921      	add	r1, sp, #132	; 0x84
 8015552:	3f10      	subs	r7, #16
 8015554:	460c      	mov	r4, r1
 8015556:	e727      	b.n	80153a8 <_vfprintf_r+0x1068>
 8015558:	9903      	ldr	r1, [sp, #12]
 801555a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801555c:	2901      	cmp	r1, #1
 801555e:	f100 0001 	add.w	r0, r0, #1
 8015562:	f102 0201 	add.w	r2, r2, #1
 8015566:	f104 0308 	add.w	r3, r4, #8
 801556a:	dc02      	bgt.n	8015572 <_vfprintf_r+0x1232>
 801556c:	f01b 0f01 	tst.w	fp, #1
 8015570:	d073      	beq.n	801565a <_vfprintf_r+0x131a>
 8015572:	2101      	movs	r1, #1
 8015574:	2a07      	cmp	r2, #7
 8015576:	e9cd 201f 	strd	r2, r0, [sp, #124]	; 0x7c
 801557a:	f8c4 a000 	str.w	sl, [r4]
 801557e:	6061      	str	r1, [r4, #4]
 8015580:	dd08      	ble.n	8015594 <_vfprintf_r+0x1254>
 8015582:	aa1e      	add	r2, sp, #120	; 0x78
 8015584:	4629      	mov	r1, r5
 8015586:	4630      	mov	r0, r6
 8015588:	f002 f9f7 	bl	801797a <__sprint_r>
 801558c:	2800      	cmp	r0, #0
 801558e:	f040 8093 	bne.w	80156b8 <_vfprintf_r+0x1378>
 8015592:	ab21      	add	r3, sp, #132	; 0x84
 8015594:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015596:	601a      	str	r2, [r3, #0]
 8015598:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801559a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801559c:	605a      	str	r2, [r3, #4]
 801559e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80155a0:	440a      	add	r2, r1
 80155a2:	9220      	str	r2, [sp, #128]	; 0x80
 80155a4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80155a6:	3201      	adds	r2, #1
 80155a8:	2a07      	cmp	r2, #7
 80155aa:	921f      	str	r2, [sp, #124]	; 0x7c
 80155ac:	dc25      	bgt.n	80155fa <_vfprintf_r+0x12ba>
 80155ae:	3308      	adds	r3, #8
 80155b0:	9a03      	ldr	r2, [sp, #12]
 80155b2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80155b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155ba:	f102 34ff 	add.w	r4, r2, #4294967295
 80155be:	d025      	beq.n	801560c <_vfprintf_r+0x12cc>
 80155c0:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80155c2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80155c4:	f10a 0001 	add.w	r0, sl, #1
 80155c8:	e9c3 0400 	strd	r0, r4, [r3]
 80155cc:	9803      	ldr	r0, [sp, #12]
 80155ce:	3101      	adds	r1, #1
 80155d0:	3a01      	subs	r2, #1
 80155d2:	4402      	add	r2, r0
 80155d4:	2907      	cmp	r1, #7
 80155d6:	e9cd 121f 	strd	r1, r2, [sp, #124]	; 0x7c
 80155da:	dd47      	ble.n	801566c <_vfprintf_r+0x132c>
 80155dc:	aa1e      	add	r2, sp, #120	; 0x78
 80155de:	4629      	mov	r1, r5
 80155e0:	4630      	mov	r0, r6
 80155e2:	f002 f9ca 	bl	801797a <__sprint_r>
 80155e6:	2800      	cmp	r0, #0
 80155e8:	d166      	bne.n	80156b8 <_vfprintf_r+0x1378>
 80155ea:	ab21      	add	r3, sp, #132	; 0x84
 80155ec:	aa1a      	add	r2, sp, #104	; 0x68
 80155ee:	601a      	str	r2, [r3, #0]
 80155f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80155f2:	605a      	str	r2, [r3, #4]
 80155f4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80155f6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80155f8:	e619      	b.n	801522e <_vfprintf_r+0xeee>
 80155fa:	aa1e      	add	r2, sp, #120	; 0x78
 80155fc:	4629      	mov	r1, r5
 80155fe:	4630      	mov	r0, r6
 8015600:	f002 f9bb 	bl	801797a <__sprint_r>
 8015604:	2800      	cmp	r0, #0
 8015606:	d157      	bne.n	80156b8 <_vfprintf_r+0x1378>
 8015608:	ab21      	add	r3, sp, #132	; 0x84
 801560a:	e7d1      	b.n	80155b0 <_vfprintf_r+0x1270>
 801560c:	2c00      	cmp	r4, #0
 801560e:	dded      	ble.n	80155ec <_vfprintf_r+0x12ac>
 8015610:	4f42      	ldr	r7, [pc, #264]	; (801571c <_vfprintf_r+0x13dc>)
 8015612:	f04f 0810 	mov.w	r8, #16
 8015616:	e9dd 211f 	ldrd	r2, r1, [sp, #124]	; 0x7c
 801561a:	2c10      	cmp	r4, #16
 801561c:	f102 0201 	add.w	r2, r2, #1
 8015620:	f103 0008 	add.w	r0, r3, #8
 8015624:	601f      	str	r7, [r3, #0]
 8015626:	dc07      	bgt.n	8015638 <_vfprintf_r+0x12f8>
 8015628:	605c      	str	r4, [r3, #4]
 801562a:	2a07      	cmp	r2, #7
 801562c:	440c      	add	r4, r1
 801562e:	e9cd 241f 	strd	r2, r4, [sp, #124]	; 0x7c
 8015632:	dcd3      	bgt.n	80155dc <_vfprintf_r+0x129c>
 8015634:	4603      	mov	r3, r0
 8015636:	e7d9      	b.n	80155ec <_vfprintf_r+0x12ac>
 8015638:	3110      	adds	r1, #16
 801563a:	2a07      	cmp	r2, #7
 801563c:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8015640:	f8c3 8004 	str.w	r8, [r3, #4]
 8015644:	dd06      	ble.n	8015654 <_vfprintf_r+0x1314>
 8015646:	aa1e      	add	r2, sp, #120	; 0x78
 8015648:	4629      	mov	r1, r5
 801564a:	4630      	mov	r0, r6
 801564c:	f002 f995 	bl	801797a <__sprint_r>
 8015650:	bb90      	cbnz	r0, 80156b8 <_vfprintf_r+0x1378>
 8015652:	a821      	add	r0, sp, #132	; 0x84
 8015654:	3c10      	subs	r4, #16
 8015656:	4603      	mov	r3, r0
 8015658:	e7dd      	b.n	8015616 <_vfprintf_r+0x12d6>
 801565a:	2101      	movs	r1, #1
 801565c:	2a07      	cmp	r2, #7
 801565e:	e9cd 201f 	strd	r2, r0, [sp, #124]	; 0x7c
 8015662:	f8c4 a000 	str.w	sl, [r4]
 8015666:	6061      	str	r1, [r4, #4]
 8015668:	ddc0      	ble.n	80155ec <_vfprintf_r+0x12ac>
 801566a:	e7b7      	b.n	80155dc <_vfprintf_r+0x129c>
 801566c:	3308      	adds	r3, #8
 801566e:	e7bd      	b.n	80155ec <_vfprintf_r+0x12ac>
 8015670:	460c      	mov	r4, r1
 8015672:	f7ff ba45 	b.w	8014b00 <_vfprintf_r+0x7c0>
 8015676:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 801567a:	1a9f      	subs	r7, r3, r2
 801567c:	2f00      	cmp	r7, #0
 801567e:	f77f aa4d 	ble.w	8014b1c <_vfprintf_r+0x7dc>
 8015682:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8015720 <_vfprintf_r+0x13e0>
 8015686:	f04f 0910 	mov.w	r9, #16
 801568a:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 801568e:	2f10      	cmp	r7, #16
 8015690:	f103 0301 	add.w	r3, r3, #1
 8015694:	f8c4 8000 	str.w	r8, [r4]
 8015698:	dc18      	bgt.n	80156cc <_vfprintf_r+0x138c>
 801569a:	6067      	str	r7, [r4, #4]
 801569c:	2b07      	cmp	r3, #7
 801569e:	4417      	add	r7, r2
 80156a0:	e9cd 371f 	strd	r3, r7, [sp, #124]	; 0x7c
 80156a4:	f77f aa3a 	ble.w	8014b1c <_vfprintf_r+0x7dc>
 80156a8:	aa1e      	add	r2, sp, #120	; 0x78
 80156aa:	4629      	mov	r1, r5
 80156ac:	4630      	mov	r0, r6
 80156ae:	f002 f964 	bl	801797a <__sprint_r>
 80156b2:	2800      	cmp	r0, #0
 80156b4:	f43f aa32 	beq.w	8014b1c <_vfprintf_r+0x7dc>
 80156b8:	9b02      	ldr	r3, [sp, #8]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	f43f a871 	beq.w	80147a2 <_vfprintf_r+0x462>
 80156c0:	4619      	mov	r1, r3
 80156c2:	4630      	mov	r0, r6
 80156c4:	f001 f87a 	bl	80167bc <_free_r>
 80156c8:	f7ff b86b 	b.w	80147a2 <_vfprintf_r+0x462>
 80156cc:	3210      	adds	r2, #16
 80156ce:	2b07      	cmp	r3, #7
 80156d0:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 80156d4:	f8c4 9004 	str.w	r9, [r4, #4]
 80156d8:	dc02      	bgt.n	80156e0 <_vfprintf_r+0x13a0>
 80156da:	3408      	adds	r4, #8
 80156dc:	3f10      	subs	r7, #16
 80156de:	e7d4      	b.n	801568a <_vfprintf_r+0x134a>
 80156e0:	aa1e      	add	r2, sp, #120	; 0x78
 80156e2:	4629      	mov	r1, r5
 80156e4:	4630      	mov	r0, r6
 80156e6:	f002 f948 	bl	801797a <__sprint_r>
 80156ea:	2800      	cmp	r0, #0
 80156ec:	d1e4      	bne.n	80156b8 <_vfprintf_r+0x1378>
 80156ee:	ac21      	add	r4, sp, #132	; 0x84
 80156f0:	e7f4      	b.n	80156dc <_vfprintf_r+0x139c>
 80156f2:	9902      	ldr	r1, [sp, #8]
 80156f4:	4630      	mov	r0, r6
 80156f6:	f001 f861 	bl	80167bc <_free_r>
 80156fa:	f7ff ba27 	b.w	8014b4c <_vfprintf_r+0x80c>
 80156fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015700:	b91b      	cbnz	r3, 801570a <_vfprintf_r+0x13ca>
 8015702:	2300      	movs	r3, #0
 8015704:	931f      	str	r3, [sp, #124]	; 0x7c
 8015706:	f7ff b84c 	b.w	80147a2 <_vfprintf_r+0x462>
 801570a:	aa1e      	add	r2, sp, #120	; 0x78
 801570c:	4629      	mov	r1, r5
 801570e:	4630      	mov	r0, r6
 8015710:	f002 f933 	bl	801797a <__sprint_r>
 8015714:	2800      	cmp	r0, #0
 8015716:	d0f4      	beq.n	8015702 <_vfprintf_r+0x13c2>
 8015718:	f7ff b843 	b.w	80147a2 <_vfprintf_r+0x462>
 801571c:	08019458 	.word	0x08019458
 8015720:	08019448 	.word	0x08019448
 8015724:	ea58 0209 	orrs.w	r2, r8, r9
 8015728:	f8cd b008 	str.w	fp, [sp, #8]
 801572c:	f43f ab37 	beq.w	8014d9e <_vfprintf_r+0xa5e>
 8015730:	2b01      	cmp	r3, #1
 8015732:	f43f abe2 	beq.w	8014efa <_vfprintf_r+0xbba>
 8015736:	2b02      	cmp	r3, #2
 8015738:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 801573c:	f43f ac2e 	beq.w	8014f9c <_vfprintf_r+0xc5c>
 8015740:	f008 0307 	and.w	r3, r8, #7
 8015744:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 8015748:	ea48 7849 	orr.w	r8, r8, r9, lsl #29
 801574c:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 8015750:	3330      	adds	r3, #48	; 0x30
 8015752:	ea58 0109 	orrs.w	r1, r8, r9
 8015756:	4652      	mov	r2, sl
 8015758:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 801575c:	d1f0      	bne.n	8015740 <_vfprintf_r+0x1400>
 801575e:	9902      	ldr	r1, [sp, #8]
 8015760:	07c8      	lsls	r0, r1, #31
 8015762:	d506      	bpl.n	8015772 <_vfprintf_r+0x1432>
 8015764:	2b30      	cmp	r3, #48	; 0x30
 8015766:	d004      	beq.n	8015772 <_vfprintf_r+0x1432>
 8015768:	2330      	movs	r3, #48	; 0x30
 801576a:	f80a 3c01 	strb.w	r3, [sl, #-1]
 801576e:	f1a2 0a02 	sub.w	sl, r2, #2
 8015772:	ab4a      	add	r3, sp, #296	; 0x128
 8015774:	46b9      	mov	r9, r7
 8015776:	eba3 070a 	sub.w	r7, r3, sl
 801577a:	2300      	movs	r3, #0
 801577c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8015780:	9302      	str	r3, [sp, #8]
 8015782:	f7fe bfd9 	b.w	8014738 <_vfprintf_r+0x3f8>
 8015786:	bf00      	nop

08015788 <__sbprintf>:
 8015788:	b570      	push	{r4, r5, r6, lr}
 801578a:	460c      	mov	r4, r1
 801578c:	8989      	ldrh	r1, [r1, #12]
 801578e:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8015792:	f021 0102 	bic.w	r1, r1, #2
 8015796:	f8ad 1014 	strh.w	r1, [sp, #20]
 801579a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 801579c:	911b      	str	r1, [sp, #108]	; 0x6c
 801579e:	89e1      	ldrh	r1, [r4, #14]
 80157a0:	f8ad 1016 	strh.w	r1, [sp, #22]
 80157a4:	69e1      	ldr	r1, [r4, #28]
 80157a6:	9109      	str	r1, [sp, #36]	; 0x24
 80157a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80157aa:	910b      	str	r1, [sp, #44]	; 0x2c
 80157ac:	a91c      	add	r1, sp, #112	; 0x70
 80157ae:	9102      	str	r1, [sp, #8]
 80157b0:	9106      	str	r1, [sp, #24]
 80157b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80157b6:	4606      	mov	r6, r0
 80157b8:	9104      	str	r1, [sp, #16]
 80157ba:	9107      	str	r1, [sp, #28]
 80157bc:	a818      	add	r0, sp, #96	; 0x60
 80157be:	2100      	movs	r1, #0
 80157c0:	e9cd 3200 	strd	r3, r2, [sp]
 80157c4:	9108      	str	r1, [sp, #32]
 80157c6:	f001 fa27 	bl	8016c18 <__retarget_lock_init_recursive>
 80157ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 80157ce:	a902      	add	r1, sp, #8
 80157d0:	4630      	mov	r0, r6
 80157d2:	f7fe fdb5 	bl	8014340 <_vfprintf_r>
 80157d6:	1e05      	subs	r5, r0, #0
 80157d8:	db07      	blt.n	80157ea <__sbprintf+0x62>
 80157da:	a902      	add	r1, sp, #8
 80157dc:	4630      	mov	r0, r6
 80157de:	f000 fef1 	bl	80165c4 <_fflush_r>
 80157e2:	2800      	cmp	r0, #0
 80157e4:	bf18      	it	ne
 80157e6:	f04f 35ff 	movne.w	r5, #4294967295
 80157ea:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80157ee:	9818      	ldr	r0, [sp, #96]	; 0x60
 80157f0:	065b      	lsls	r3, r3, #25
 80157f2:	bf42      	ittt	mi
 80157f4:	89a3      	ldrhmi	r3, [r4, #12]
 80157f6:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80157fa:	81a3      	strhmi	r3, [r4, #12]
 80157fc:	f001 fa0d 	bl	8016c1a <__retarget_lock_close_recursive>
 8015800:	4628      	mov	r0, r5
 8015802:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8015806:	bd70      	pop	{r4, r5, r6, pc}

08015808 <__swsetup_r>:
 8015808:	b538      	push	{r3, r4, r5, lr}
 801580a:	4b2a      	ldr	r3, [pc, #168]	; (80158b4 <__swsetup_r+0xac>)
 801580c:	4605      	mov	r5, r0
 801580e:	6818      	ldr	r0, [r3, #0]
 8015810:	460c      	mov	r4, r1
 8015812:	b118      	cbz	r0, 801581c <__swsetup_r+0x14>
 8015814:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8015816:	b90b      	cbnz	r3, 801581c <__swsetup_r+0x14>
 8015818:	f000 ff40 	bl	801669c <__sinit>
 801581c:	89a3      	ldrh	r3, [r4, #12]
 801581e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015822:	0718      	lsls	r0, r3, #28
 8015824:	d422      	bmi.n	801586c <__swsetup_r+0x64>
 8015826:	06d9      	lsls	r1, r3, #27
 8015828:	d407      	bmi.n	801583a <__swsetup_r+0x32>
 801582a:	2309      	movs	r3, #9
 801582c:	602b      	str	r3, [r5, #0]
 801582e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015832:	81a3      	strh	r3, [r4, #12]
 8015834:	f04f 30ff 	mov.w	r0, #4294967295
 8015838:	e034      	b.n	80158a4 <__swsetup_r+0x9c>
 801583a:	0758      	lsls	r0, r3, #29
 801583c:	d512      	bpl.n	8015864 <__swsetup_r+0x5c>
 801583e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8015840:	b141      	cbz	r1, 8015854 <__swsetup_r+0x4c>
 8015842:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8015846:	4299      	cmp	r1, r3
 8015848:	d002      	beq.n	8015850 <__swsetup_r+0x48>
 801584a:	4628      	mov	r0, r5
 801584c:	f000 ffb6 	bl	80167bc <_free_r>
 8015850:	2300      	movs	r3, #0
 8015852:	6323      	str	r3, [r4, #48]	; 0x30
 8015854:	89a3      	ldrh	r3, [r4, #12]
 8015856:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801585a:	81a3      	strh	r3, [r4, #12]
 801585c:	2300      	movs	r3, #0
 801585e:	6063      	str	r3, [r4, #4]
 8015860:	6923      	ldr	r3, [r4, #16]
 8015862:	6023      	str	r3, [r4, #0]
 8015864:	89a3      	ldrh	r3, [r4, #12]
 8015866:	f043 0308 	orr.w	r3, r3, #8
 801586a:	81a3      	strh	r3, [r4, #12]
 801586c:	6923      	ldr	r3, [r4, #16]
 801586e:	b94b      	cbnz	r3, 8015884 <__swsetup_r+0x7c>
 8015870:	89a3      	ldrh	r3, [r4, #12]
 8015872:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015876:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801587a:	d003      	beq.n	8015884 <__swsetup_r+0x7c>
 801587c:	4621      	mov	r1, r4
 801587e:	4628      	mov	r0, r5
 8015880:	f001 f9fa 	bl	8016c78 <__smakebuf_r>
 8015884:	89a0      	ldrh	r0, [r4, #12]
 8015886:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801588a:	f010 0301 	ands.w	r3, r0, #1
 801588e:	d00a      	beq.n	80158a6 <__swsetup_r+0x9e>
 8015890:	2300      	movs	r3, #0
 8015892:	60a3      	str	r3, [r4, #8]
 8015894:	6963      	ldr	r3, [r4, #20]
 8015896:	425b      	negs	r3, r3
 8015898:	61a3      	str	r3, [r4, #24]
 801589a:	6923      	ldr	r3, [r4, #16]
 801589c:	b943      	cbnz	r3, 80158b0 <__swsetup_r+0xa8>
 801589e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80158a2:	d1c4      	bne.n	801582e <__swsetup_r+0x26>
 80158a4:	bd38      	pop	{r3, r4, r5, pc}
 80158a6:	0781      	lsls	r1, r0, #30
 80158a8:	bf58      	it	pl
 80158aa:	6963      	ldrpl	r3, [r4, #20]
 80158ac:	60a3      	str	r3, [r4, #8]
 80158ae:	e7f4      	b.n	801589a <__swsetup_r+0x92>
 80158b0:	2000      	movs	r0, #0
 80158b2:	e7f7      	b.n	80158a4 <__swsetup_r+0x9c>
 80158b4:	200004bc 	.word	0x200004bc

080158b8 <register_fini>:
 80158b8:	4b02      	ldr	r3, [pc, #8]	; (80158c4 <register_fini+0xc>)
 80158ba:	b113      	cbz	r3, 80158c2 <register_fini+0xa>
 80158bc:	4802      	ldr	r0, [pc, #8]	; (80158c8 <register_fini+0x10>)
 80158be:	f000 b805 	b.w	80158cc <atexit>
 80158c2:	4770      	bx	lr
 80158c4:	00000000 	.word	0x00000000
 80158c8:	080166ed 	.word	0x080166ed

080158cc <atexit>:
 80158cc:	2300      	movs	r3, #0
 80158ce:	4601      	mov	r1, r0
 80158d0:	461a      	mov	r2, r3
 80158d2:	4618      	mov	r0, r3
 80158d4:	f002 bdb6 	b.w	8018444 <__register_exitproc>

080158d8 <quorem>:
 80158d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158dc:	6903      	ldr	r3, [r0, #16]
 80158de:	690c      	ldr	r4, [r1, #16]
 80158e0:	42a3      	cmp	r3, r4
 80158e2:	4607      	mov	r7, r0
 80158e4:	f2c0 8081 	blt.w	80159ea <quorem+0x112>
 80158e8:	3c01      	subs	r4, #1
 80158ea:	f101 0814 	add.w	r8, r1, #20
 80158ee:	f100 0514 	add.w	r5, r0, #20
 80158f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80158f6:	9301      	str	r3, [sp, #4]
 80158f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80158fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015900:	3301      	adds	r3, #1
 8015902:	429a      	cmp	r2, r3
 8015904:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015908:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801590c:	fbb2 f6f3 	udiv	r6, r2, r3
 8015910:	d331      	bcc.n	8015976 <quorem+0x9e>
 8015912:	f04f 0e00 	mov.w	lr, #0
 8015916:	4640      	mov	r0, r8
 8015918:	46ac      	mov	ip, r5
 801591a:	46f2      	mov	sl, lr
 801591c:	f850 2b04 	ldr.w	r2, [r0], #4
 8015920:	b293      	uxth	r3, r2
 8015922:	fb06 e303 	mla	r3, r6, r3, lr
 8015926:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801592a:	b29b      	uxth	r3, r3
 801592c:	ebaa 0303 	sub.w	r3, sl, r3
 8015930:	f8dc a000 	ldr.w	sl, [ip]
 8015934:	0c12      	lsrs	r2, r2, #16
 8015936:	fa13 f38a 	uxtah	r3, r3, sl
 801593a:	fb06 e202 	mla	r2, r6, r2, lr
 801593e:	9300      	str	r3, [sp, #0]
 8015940:	9b00      	ldr	r3, [sp, #0]
 8015942:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015946:	b292      	uxth	r2, r2
 8015948:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801594c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015950:	f8bd 3000 	ldrh.w	r3, [sp]
 8015954:	4581      	cmp	r9, r0
 8015956:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801595a:	f84c 3b04 	str.w	r3, [ip], #4
 801595e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015962:	d2db      	bcs.n	801591c <quorem+0x44>
 8015964:	f855 300b 	ldr.w	r3, [r5, fp]
 8015968:	b92b      	cbnz	r3, 8015976 <quorem+0x9e>
 801596a:	9b01      	ldr	r3, [sp, #4]
 801596c:	3b04      	subs	r3, #4
 801596e:	429d      	cmp	r5, r3
 8015970:	461a      	mov	r2, r3
 8015972:	d32e      	bcc.n	80159d2 <quorem+0xfa>
 8015974:	613c      	str	r4, [r7, #16]
 8015976:	4638      	mov	r0, r7
 8015978:	f001 fc1a 	bl	80171b0 <__mcmp>
 801597c:	2800      	cmp	r0, #0
 801597e:	db24      	blt.n	80159ca <quorem+0xf2>
 8015980:	3601      	adds	r6, #1
 8015982:	4628      	mov	r0, r5
 8015984:	f04f 0c00 	mov.w	ip, #0
 8015988:	f858 2b04 	ldr.w	r2, [r8], #4
 801598c:	f8d0 e000 	ldr.w	lr, [r0]
 8015990:	b293      	uxth	r3, r2
 8015992:	ebac 0303 	sub.w	r3, ip, r3
 8015996:	0c12      	lsrs	r2, r2, #16
 8015998:	fa13 f38e 	uxtah	r3, r3, lr
 801599c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80159a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80159a4:	b29b      	uxth	r3, r3
 80159a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80159aa:	45c1      	cmp	r9, r8
 80159ac:	f840 3b04 	str.w	r3, [r0], #4
 80159b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80159b4:	d2e8      	bcs.n	8015988 <quorem+0xb0>
 80159b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80159ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80159be:	b922      	cbnz	r2, 80159ca <quorem+0xf2>
 80159c0:	3b04      	subs	r3, #4
 80159c2:	429d      	cmp	r5, r3
 80159c4:	461a      	mov	r2, r3
 80159c6:	d30a      	bcc.n	80159de <quorem+0x106>
 80159c8:	613c      	str	r4, [r7, #16]
 80159ca:	4630      	mov	r0, r6
 80159cc:	b003      	add	sp, #12
 80159ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159d2:	6812      	ldr	r2, [r2, #0]
 80159d4:	3b04      	subs	r3, #4
 80159d6:	2a00      	cmp	r2, #0
 80159d8:	d1cc      	bne.n	8015974 <quorem+0x9c>
 80159da:	3c01      	subs	r4, #1
 80159dc:	e7c7      	b.n	801596e <quorem+0x96>
 80159de:	6812      	ldr	r2, [r2, #0]
 80159e0:	3b04      	subs	r3, #4
 80159e2:	2a00      	cmp	r2, #0
 80159e4:	d1f0      	bne.n	80159c8 <quorem+0xf0>
 80159e6:	3c01      	subs	r4, #1
 80159e8:	e7eb      	b.n	80159c2 <quorem+0xea>
 80159ea:	2000      	movs	r0, #0
 80159ec:	e7ee      	b.n	80159cc <quorem+0xf4>
	...

080159f0 <_dtoa_r>:
 80159f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159f4:	ed2d 8b02 	vpush	{d8}
 80159f8:	b091      	sub	sp, #68	; 0x44
 80159fa:	ed8d 0b02 	vstr	d0, [sp, #8]
 80159fe:	9106      	str	r1, [sp, #24]
 8015a00:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8015a02:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8015a04:	9208      	str	r2, [sp, #32]
 8015a06:	ec59 8b10 	vmov	r8, r9, d0
 8015a0a:	4606      	mov	r6, r0
 8015a0c:	930c      	str	r3, [sp, #48]	; 0x30
 8015a0e:	b141      	cbz	r1, 8015a22 <_dtoa_r+0x32>
 8015a10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015a12:	604a      	str	r2, [r1, #4]
 8015a14:	2301      	movs	r3, #1
 8015a16:	4093      	lsls	r3, r2
 8015a18:	608b      	str	r3, [r1, #8]
 8015a1a:	f001 f9ba 	bl	8016d92 <_Bfree>
 8015a1e:	2300      	movs	r3, #0
 8015a20:	6433      	str	r3, [r6, #64]	; 0x40
 8015a22:	f1b9 0300 	subs.w	r3, r9, #0
 8015a26:	bfbb      	ittet	lt
 8015a28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8015a2c:	9303      	strlt	r3, [sp, #12]
 8015a2e:	2300      	movge	r3, #0
 8015a30:	2201      	movlt	r2, #1
 8015a32:	bfac      	ite	ge
 8015a34:	6023      	strge	r3, [r4, #0]
 8015a36:	6022      	strlt	r2, [r4, #0]
 8015a38:	4b99      	ldr	r3, [pc, #612]	; (8015ca0 <_dtoa_r+0x2b0>)
 8015a3a:	9c03      	ldr	r4, [sp, #12]
 8015a3c:	43a3      	bics	r3, r4
 8015a3e:	d11c      	bne.n	8015a7a <_dtoa_r+0x8a>
 8015a40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015a42:	f242 730f 	movw	r3, #9999	; 0x270f
 8015a46:	6013      	str	r3, [r2, #0]
 8015a48:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8015a4c:	ea53 0308 	orrs.w	r3, r3, r8
 8015a50:	f000 84f8 	beq.w	8016444 <_dtoa_r+0xa54>
 8015a54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015a56:	b90b      	cbnz	r3, 8015a5c <_dtoa_r+0x6c>
 8015a58:	4b92      	ldr	r3, [pc, #584]	; (8015ca4 <_dtoa_r+0x2b4>)
 8015a5a:	e01f      	b.n	8015a9c <_dtoa_r+0xac>
 8015a5c:	4b91      	ldr	r3, [pc, #580]	; (8015ca4 <_dtoa_r+0x2b4>)
 8015a5e:	9301      	str	r3, [sp, #4]
 8015a60:	3303      	adds	r3, #3
 8015a62:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015a64:	6013      	str	r3, [r2, #0]
 8015a66:	9801      	ldr	r0, [sp, #4]
 8015a68:	b011      	add	sp, #68	; 0x44
 8015a6a:	ecbd 8b02 	vpop	{d8}
 8015a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a72:	4b8d      	ldr	r3, [pc, #564]	; (8015ca8 <_dtoa_r+0x2b8>)
 8015a74:	9301      	str	r3, [sp, #4]
 8015a76:	3308      	adds	r3, #8
 8015a78:	e7f3      	b.n	8015a62 <_dtoa_r+0x72>
 8015a7a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8015a7e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a86:	d10b      	bne.n	8015aa0 <_dtoa_r+0xb0>
 8015a88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015a8a:	2301      	movs	r3, #1
 8015a8c:	6013      	str	r3, [r2, #0]
 8015a8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	f000 84d4 	beq.w	801643e <_dtoa_r+0xa4e>
 8015a96:	4885      	ldr	r0, [pc, #532]	; (8015cac <_dtoa_r+0x2bc>)
 8015a98:	6018      	str	r0, [r3, #0]
 8015a9a:	1e43      	subs	r3, r0, #1
 8015a9c:	9301      	str	r3, [sp, #4]
 8015a9e:	e7e2      	b.n	8015a66 <_dtoa_r+0x76>
 8015aa0:	a90f      	add	r1, sp, #60	; 0x3c
 8015aa2:	aa0e      	add	r2, sp, #56	; 0x38
 8015aa4:	4630      	mov	r0, r6
 8015aa6:	eeb0 0b48 	vmov.f64	d0, d8
 8015aaa:	f001 fc27 	bl	80172fc <__d2b>
 8015aae:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8015ab2:	4605      	mov	r5, r0
 8015ab4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015ab6:	2900      	cmp	r1, #0
 8015ab8:	d046      	beq.n	8015b48 <_dtoa_r+0x158>
 8015aba:	ee18 4a90 	vmov	r4, s17
 8015abe:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8015ac2:	ec53 2b18 	vmov	r2, r3, d8
 8015ac6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8015aca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015ace:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8015ad2:	2400      	movs	r4, #0
 8015ad4:	ec43 2b16 	vmov	d6, r2, r3
 8015ad8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8015adc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8015c88 <_dtoa_r+0x298>
 8015ae0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8015ae4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8015c90 <_dtoa_r+0x2a0>
 8015ae8:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015aec:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8015c98 <_dtoa_r+0x2a8>
 8015af0:	ee07 1a90 	vmov	s15, r1
 8015af4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8015af8:	eeb0 7b46 	vmov.f64	d7, d6
 8015afc:	eea4 7b05 	vfma.f64	d7, d4, d5
 8015b00:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8015b04:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8015b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b0c:	ee16 ba90 	vmov	fp, s13
 8015b10:	940a      	str	r4, [sp, #40]	; 0x28
 8015b12:	d508      	bpl.n	8015b26 <_dtoa_r+0x136>
 8015b14:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8015b18:	eeb4 6b47 	vcmp.f64	d6, d7
 8015b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b20:	bf18      	it	ne
 8015b22:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8015b26:	f1bb 0f16 	cmp.w	fp, #22
 8015b2a:	d82f      	bhi.n	8015b8c <_dtoa_r+0x19c>
 8015b2c:	4b60      	ldr	r3, [pc, #384]	; (8015cb0 <_dtoa_r+0x2c0>)
 8015b2e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015b32:	ed93 7b00 	vldr	d7, [r3]
 8015b36:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b3e:	d501      	bpl.n	8015b44 <_dtoa_r+0x154>
 8015b40:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015b44:	2300      	movs	r3, #0
 8015b46:	e022      	b.n	8015b8e <_dtoa_r+0x19e>
 8015b48:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015b4a:	4401      	add	r1, r0
 8015b4c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8015b50:	2b20      	cmp	r3, #32
 8015b52:	bfc1      	itttt	gt
 8015b54:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015b58:	fa04 f303 	lslgt.w	r3, r4, r3
 8015b5c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8015b60:	fa28 f804 	lsrgt.w	r8, r8, r4
 8015b64:	bfd6      	itet	le
 8015b66:	f1c3 0320 	rsble	r3, r3, #32
 8015b6a:	ea43 0808 	orrgt.w	r8, r3, r8
 8015b6e:	fa08 f803 	lslle.w	r8, r8, r3
 8015b72:	ee07 8a90 	vmov	s15, r8
 8015b76:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015b7a:	3901      	subs	r1, #1
 8015b7c:	ee17 4a90 	vmov	r4, s15
 8015b80:	ec53 2b17 	vmov	r2, r3, d7
 8015b84:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8015b88:	2401      	movs	r4, #1
 8015b8a:	e7a3      	b.n	8015ad4 <_dtoa_r+0xe4>
 8015b8c:	2301      	movs	r3, #1
 8015b8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015b90:	1a43      	subs	r3, r0, r1
 8015b92:	1e5a      	subs	r2, r3, #1
 8015b94:	bf45      	ittet	mi
 8015b96:	f1c3 0301 	rsbmi	r3, r3, #1
 8015b9a:	9304      	strmi	r3, [sp, #16]
 8015b9c:	2300      	movpl	r3, #0
 8015b9e:	2300      	movmi	r3, #0
 8015ba0:	9205      	str	r2, [sp, #20]
 8015ba2:	bf54      	ite	pl
 8015ba4:	9304      	strpl	r3, [sp, #16]
 8015ba6:	9305      	strmi	r3, [sp, #20]
 8015ba8:	f1bb 0f00 	cmp.w	fp, #0
 8015bac:	db18      	blt.n	8015be0 <_dtoa_r+0x1f0>
 8015bae:	9b05      	ldr	r3, [sp, #20]
 8015bb0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8015bb4:	445b      	add	r3, fp
 8015bb6:	9305      	str	r3, [sp, #20]
 8015bb8:	2300      	movs	r3, #0
 8015bba:	9a06      	ldr	r2, [sp, #24]
 8015bbc:	2a09      	cmp	r2, #9
 8015bbe:	d84a      	bhi.n	8015c56 <_dtoa_r+0x266>
 8015bc0:	2a05      	cmp	r2, #5
 8015bc2:	bfc4      	itt	gt
 8015bc4:	3a04      	subgt	r2, #4
 8015bc6:	9206      	strgt	r2, [sp, #24]
 8015bc8:	9a06      	ldr	r2, [sp, #24]
 8015bca:	f1a2 0202 	sub.w	r2, r2, #2
 8015bce:	bfcc      	ite	gt
 8015bd0:	2400      	movgt	r4, #0
 8015bd2:	2401      	movle	r4, #1
 8015bd4:	2a03      	cmp	r2, #3
 8015bd6:	d849      	bhi.n	8015c6c <_dtoa_r+0x27c>
 8015bd8:	e8df f002 	tbb	[pc, r2]
 8015bdc:	3b2d2f0b 	.word	0x3b2d2f0b
 8015be0:	9b04      	ldr	r3, [sp, #16]
 8015be2:	2200      	movs	r2, #0
 8015be4:	eba3 030b 	sub.w	r3, r3, fp
 8015be8:	9304      	str	r3, [sp, #16]
 8015bea:	9209      	str	r2, [sp, #36]	; 0x24
 8015bec:	f1cb 0300 	rsb	r3, fp, #0
 8015bf0:	e7e3      	b.n	8015bba <_dtoa_r+0x1ca>
 8015bf2:	2200      	movs	r2, #0
 8015bf4:	9207      	str	r2, [sp, #28]
 8015bf6:	9a08      	ldr	r2, [sp, #32]
 8015bf8:	2a00      	cmp	r2, #0
 8015bfa:	dc3a      	bgt.n	8015c72 <_dtoa_r+0x282>
 8015bfc:	f04f 0a01 	mov.w	sl, #1
 8015c00:	46d1      	mov	r9, sl
 8015c02:	4652      	mov	r2, sl
 8015c04:	f8cd a020 	str.w	sl, [sp, #32]
 8015c08:	2100      	movs	r1, #0
 8015c0a:	6471      	str	r1, [r6, #68]	; 0x44
 8015c0c:	2004      	movs	r0, #4
 8015c0e:	f100 0714 	add.w	r7, r0, #20
 8015c12:	4297      	cmp	r7, r2
 8015c14:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8015c16:	d931      	bls.n	8015c7c <_dtoa_r+0x28c>
 8015c18:	4630      	mov	r0, r6
 8015c1a:	930d      	str	r3, [sp, #52]	; 0x34
 8015c1c:	f001 f894 	bl	8016d48 <_Balloc>
 8015c20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015c22:	9001      	str	r0, [sp, #4]
 8015c24:	4602      	mov	r2, r0
 8015c26:	2800      	cmp	r0, #0
 8015c28:	d148      	bne.n	8015cbc <_dtoa_r+0x2cc>
 8015c2a:	4b22      	ldr	r3, [pc, #136]	; (8015cb4 <_dtoa_r+0x2c4>)
 8015c2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015c30:	4821      	ldr	r0, [pc, #132]	; (8015cb8 <_dtoa_r+0x2c8>)
 8015c32:	f002 fc49 	bl	80184c8 <__assert_func>
 8015c36:	2201      	movs	r2, #1
 8015c38:	e7dc      	b.n	8015bf4 <_dtoa_r+0x204>
 8015c3a:	2200      	movs	r2, #0
 8015c3c:	9207      	str	r2, [sp, #28]
 8015c3e:	9a08      	ldr	r2, [sp, #32]
 8015c40:	eb0b 0a02 	add.w	sl, fp, r2
 8015c44:	f10a 0901 	add.w	r9, sl, #1
 8015c48:	464a      	mov	r2, r9
 8015c4a:	2a01      	cmp	r2, #1
 8015c4c:	bfb8      	it	lt
 8015c4e:	2201      	movlt	r2, #1
 8015c50:	e7da      	b.n	8015c08 <_dtoa_r+0x218>
 8015c52:	2201      	movs	r2, #1
 8015c54:	e7f2      	b.n	8015c3c <_dtoa_r+0x24c>
 8015c56:	2401      	movs	r4, #1
 8015c58:	2200      	movs	r2, #0
 8015c5a:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8015c5e:	f04f 3aff 	mov.w	sl, #4294967295
 8015c62:	2100      	movs	r1, #0
 8015c64:	46d1      	mov	r9, sl
 8015c66:	2212      	movs	r2, #18
 8015c68:	9108      	str	r1, [sp, #32]
 8015c6a:	e7cd      	b.n	8015c08 <_dtoa_r+0x218>
 8015c6c:	2201      	movs	r2, #1
 8015c6e:	9207      	str	r2, [sp, #28]
 8015c70:	e7f5      	b.n	8015c5e <_dtoa_r+0x26e>
 8015c72:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015c76:	46d1      	mov	r9, sl
 8015c78:	4652      	mov	r2, sl
 8015c7a:	e7c5      	b.n	8015c08 <_dtoa_r+0x218>
 8015c7c:	3101      	adds	r1, #1
 8015c7e:	6471      	str	r1, [r6, #68]	; 0x44
 8015c80:	0040      	lsls	r0, r0, #1
 8015c82:	e7c4      	b.n	8015c0e <_dtoa_r+0x21e>
 8015c84:	f3af 8000 	nop.w
 8015c88:	636f4361 	.word	0x636f4361
 8015c8c:	3fd287a7 	.word	0x3fd287a7
 8015c90:	8b60c8b3 	.word	0x8b60c8b3
 8015c94:	3fc68a28 	.word	0x3fc68a28
 8015c98:	509f79fb 	.word	0x509f79fb
 8015c9c:	3fd34413 	.word	0x3fd34413
 8015ca0:	7ff00000 	.word	0x7ff00000
 8015ca4:	08019468 	.word	0x08019468
 8015ca8:	0801946c 	.word	0x0801946c
 8015cac:	08019427 	.word	0x08019427
 8015cb0:	08019568 	.word	0x08019568
 8015cb4:	08019475 	.word	0x08019475
 8015cb8:	08019486 	.word	0x08019486
 8015cbc:	9a01      	ldr	r2, [sp, #4]
 8015cbe:	6432      	str	r2, [r6, #64]	; 0x40
 8015cc0:	f1b9 0f0e 	cmp.w	r9, #14
 8015cc4:	d86c      	bhi.n	8015da0 <_dtoa_r+0x3b0>
 8015cc6:	2c00      	cmp	r4, #0
 8015cc8:	d06a      	beq.n	8015da0 <_dtoa_r+0x3b0>
 8015cca:	f1bb 0f00 	cmp.w	fp, #0
 8015cce:	f340 80a0 	ble.w	8015e12 <_dtoa_r+0x422>
 8015cd2:	49c1      	ldr	r1, [pc, #772]	; (8015fd8 <_dtoa_r+0x5e8>)
 8015cd4:	f00b 020f 	and.w	r2, fp, #15
 8015cd8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8015cdc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8015ce0:	ed92 7b00 	vldr	d7, [r2]
 8015ce4:	ea4f 112b 	mov.w	r1, fp, asr #4
 8015ce8:	f000 8087 	beq.w	8015dfa <_dtoa_r+0x40a>
 8015cec:	4abb      	ldr	r2, [pc, #748]	; (8015fdc <_dtoa_r+0x5ec>)
 8015cee:	ed92 6b08 	vldr	d6, [r2, #32]
 8015cf2:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8015cf6:	ed8d 6b02 	vstr	d6, [sp, #8]
 8015cfa:	f001 010f 	and.w	r1, r1, #15
 8015cfe:	2203      	movs	r2, #3
 8015d00:	48b6      	ldr	r0, [pc, #728]	; (8015fdc <_dtoa_r+0x5ec>)
 8015d02:	2900      	cmp	r1, #0
 8015d04:	d17b      	bne.n	8015dfe <_dtoa_r+0x40e>
 8015d06:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015d0a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015d0e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015d12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015d14:	2900      	cmp	r1, #0
 8015d16:	f000 80a2 	beq.w	8015e5e <_dtoa_r+0x46e>
 8015d1a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8015d1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015d22:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d2a:	f140 8098 	bpl.w	8015e5e <_dtoa_r+0x46e>
 8015d2e:	f1b9 0f00 	cmp.w	r9, #0
 8015d32:	f000 8094 	beq.w	8015e5e <_dtoa_r+0x46e>
 8015d36:	f1ba 0f00 	cmp.w	sl, #0
 8015d3a:	dd2f      	ble.n	8015d9c <_dtoa_r+0x3ac>
 8015d3c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8015d40:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015d44:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015d48:	f10b 37ff 	add.w	r7, fp, #4294967295
 8015d4c:	3201      	adds	r2, #1
 8015d4e:	4650      	mov	r0, sl
 8015d50:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015d54:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8015d58:	ee07 2a90 	vmov	s15, r2
 8015d5c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015d60:	eea7 5b06 	vfma.f64	d5, d7, d6
 8015d64:	ee15 4a90 	vmov	r4, s11
 8015d68:	ec52 1b15 	vmov	r1, r2, d5
 8015d6c:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8015d70:	2800      	cmp	r0, #0
 8015d72:	d177      	bne.n	8015e64 <_dtoa_r+0x474>
 8015d74:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015d78:	ee36 6b47 	vsub.f64	d6, d6, d7
 8015d7c:	ec42 1b17 	vmov	d7, r1, r2
 8015d80:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d88:	f300 8262 	bgt.w	8016250 <_dtoa_r+0x860>
 8015d8c:	eeb1 7b47 	vneg.f64	d7, d7
 8015d90:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d98:	f100 8257 	bmi.w	801624a <_dtoa_r+0x85a>
 8015d9c:	ed8d 8b02 	vstr	d8, [sp, #8]
 8015da0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015da2:	2a00      	cmp	r2, #0
 8015da4:	f2c0 811c 	blt.w	8015fe0 <_dtoa_r+0x5f0>
 8015da8:	f1bb 0f0e 	cmp.w	fp, #14
 8015dac:	f300 8118 	bgt.w	8015fe0 <_dtoa_r+0x5f0>
 8015db0:	4b89      	ldr	r3, [pc, #548]	; (8015fd8 <_dtoa_r+0x5e8>)
 8015db2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015db6:	ed93 6b00 	vldr	d6, [r3]
 8015dba:	9b08      	ldr	r3, [sp, #32]
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	f280 80b7 	bge.w	8015f30 <_dtoa_r+0x540>
 8015dc2:	f1b9 0f00 	cmp.w	r9, #0
 8015dc6:	f300 80b3 	bgt.w	8015f30 <_dtoa_r+0x540>
 8015dca:	f040 823e 	bne.w	801624a <_dtoa_r+0x85a>
 8015dce:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015dd2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8015dd6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015dda:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015de2:	464c      	mov	r4, r9
 8015de4:	464f      	mov	r7, r9
 8015de6:	f280 8214 	bge.w	8016212 <_dtoa_r+0x822>
 8015dea:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015dee:	2331      	movs	r3, #49	; 0x31
 8015df0:	f808 3b01 	strb.w	r3, [r8], #1
 8015df4:	f10b 0b01 	add.w	fp, fp, #1
 8015df8:	e210      	b.n	801621c <_dtoa_r+0x82c>
 8015dfa:	2202      	movs	r2, #2
 8015dfc:	e780      	b.n	8015d00 <_dtoa_r+0x310>
 8015dfe:	07cc      	lsls	r4, r1, #31
 8015e00:	d504      	bpl.n	8015e0c <_dtoa_r+0x41c>
 8015e02:	ed90 6b00 	vldr	d6, [r0]
 8015e06:	3201      	adds	r2, #1
 8015e08:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015e0c:	1049      	asrs	r1, r1, #1
 8015e0e:	3008      	adds	r0, #8
 8015e10:	e777      	b.n	8015d02 <_dtoa_r+0x312>
 8015e12:	d022      	beq.n	8015e5a <_dtoa_r+0x46a>
 8015e14:	f1cb 0100 	rsb	r1, fp, #0
 8015e18:	4a6f      	ldr	r2, [pc, #444]	; (8015fd8 <_dtoa_r+0x5e8>)
 8015e1a:	f001 000f 	and.w	r0, r1, #15
 8015e1e:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8015e22:	ed92 7b00 	vldr	d7, [r2]
 8015e26:	ee28 7b07 	vmul.f64	d7, d8, d7
 8015e2a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015e2e:	486b      	ldr	r0, [pc, #428]	; (8015fdc <_dtoa_r+0x5ec>)
 8015e30:	1109      	asrs	r1, r1, #4
 8015e32:	2400      	movs	r4, #0
 8015e34:	2202      	movs	r2, #2
 8015e36:	b929      	cbnz	r1, 8015e44 <_dtoa_r+0x454>
 8015e38:	2c00      	cmp	r4, #0
 8015e3a:	f43f af6a 	beq.w	8015d12 <_dtoa_r+0x322>
 8015e3e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015e42:	e766      	b.n	8015d12 <_dtoa_r+0x322>
 8015e44:	07cf      	lsls	r7, r1, #31
 8015e46:	d505      	bpl.n	8015e54 <_dtoa_r+0x464>
 8015e48:	ed90 6b00 	vldr	d6, [r0]
 8015e4c:	3201      	adds	r2, #1
 8015e4e:	2401      	movs	r4, #1
 8015e50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015e54:	1049      	asrs	r1, r1, #1
 8015e56:	3008      	adds	r0, #8
 8015e58:	e7ed      	b.n	8015e36 <_dtoa_r+0x446>
 8015e5a:	2202      	movs	r2, #2
 8015e5c:	e759      	b.n	8015d12 <_dtoa_r+0x322>
 8015e5e:	465f      	mov	r7, fp
 8015e60:	4648      	mov	r0, r9
 8015e62:	e775      	b.n	8015d50 <_dtoa_r+0x360>
 8015e64:	ec42 1b17 	vmov	d7, r1, r2
 8015e68:	4a5b      	ldr	r2, [pc, #364]	; (8015fd8 <_dtoa_r+0x5e8>)
 8015e6a:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8015e6e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8015e72:	9a01      	ldr	r2, [sp, #4]
 8015e74:	1814      	adds	r4, r2, r0
 8015e76:	9a07      	ldr	r2, [sp, #28]
 8015e78:	b352      	cbz	r2, 8015ed0 <_dtoa_r+0x4e0>
 8015e7a:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8015e7e:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8015e82:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015e86:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8015e8a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8015e8e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015e92:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015e96:	ee14 2a90 	vmov	r2, s9
 8015e9a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015e9e:	3230      	adds	r2, #48	; 0x30
 8015ea0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015ea4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eac:	f808 2b01 	strb.w	r2, [r8], #1
 8015eb0:	d439      	bmi.n	8015f26 <_dtoa_r+0x536>
 8015eb2:	ee32 5b46 	vsub.f64	d5, d2, d6
 8015eb6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8015eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ebe:	d472      	bmi.n	8015fa6 <_dtoa_r+0x5b6>
 8015ec0:	45a0      	cmp	r8, r4
 8015ec2:	f43f af6b 	beq.w	8015d9c <_dtoa_r+0x3ac>
 8015ec6:	ee27 7b03 	vmul.f64	d7, d7, d3
 8015eca:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015ece:	e7e0      	b.n	8015e92 <_dtoa_r+0x4a2>
 8015ed0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015ed4:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015ed8:	4621      	mov	r1, r4
 8015eda:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8015ede:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015ee2:	ee14 2a90 	vmov	r2, s9
 8015ee6:	3230      	adds	r2, #48	; 0x30
 8015ee8:	f808 2b01 	strb.w	r2, [r8], #1
 8015eec:	45a0      	cmp	r8, r4
 8015eee:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015ef2:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015ef6:	d118      	bne.n	8015f2a <_dtoa_r+0x53a>
 8015ef8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8015efc:	ee37 4b05 	vadd.f64	d4, d7, d5
 8015f00:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8015f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f08:	dc4d      	bgt.n	8015fa6 <_dtoa_r+0x5b6>
 8015f0a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015f0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f16:	f57f af41 	bpl.w	8015d9c <_dtoa_r+0x3ac>
 8015f1a:	4688      	mov	r8, r1
 8015f1c:	3901      	subs	r1, #1
 8015f1e:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8015f22:	2b30      	cmp	r3, #48	; 0x30
 8015f24:	d0f9      	beq.n	8015f1a <_dtoa_r+0x52a>
 8015f26:	46bb      	mov	fp, r7
 8015f28:	e02a      	b.n	8015f80 <_dtoa_r+0x590>
 8015f2a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015f2e:	e7d6      	b.n	8015ede <_dtoa_r+0x4ee>
 8015f30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015f34:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8015f38:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015f3c:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8015f40:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8015f44:	ee15 3a10 	vmov	r3, s10
 8015f48:	3330      	adds	r3, #48	; 0x30
 8015f4a:	f808 3b01 	strb.w	r3, [r8], #1
 8015f4e:	9b01      	ldr	r3, [sp, #4]
 8015f50:	eba8 0303 	sub.w	r3, r8, r3
 8015f54:	4599      	cmp	r9, r3
 8015f56:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8015f5a:	eea3 7b46 	vfms.f64	d7, d3, d6
 8015f5e:	d133      	bne.n	8015fc8 <_dtoa_r+0x5d8>
 8015f60:	ee37 7b07 	vadd.f64	d7, d7, d7
 8015f64:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f6c:	dc1a      	bgt.n	8015fa4 <_dtoa_r+0x5b4>
 8015f6e:	eeb4 7b46 	vcmp.f64	d7, d6
 8015f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f76:	d103      	bne.n	8015f80 <_dtoa_r+0x590>
 8015f78:	ee15 3a10 	vmov	r3, s10
 8015f7c:	07d9      	lsls	r1, r3, #31
 8015f7e:	d411      	bmi.n	8015fa4 <_dtoa_r+0x5b4>
 8015f80:	4629      	mov	r1, r5
 8015f82:	4630      	mov	r0, r6
 8015f84:	f000 ff05 	bl	8016d92 <_Bfree>
 8015f88:	2300      	movs	r3, #0
 8015f8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015f8c:	f888 3000 	strb.w	r3, [r8]
 8015f90:	f10b 0301 	add.w	r3, fp, #1
 8015f94:	6013      	str	r3, [r2, #0]
 8015f96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	f43f ad64 	beq.w	8015a66 <_dtoa_r+0x76>
 8015f9e:	f8c3 8000 	str.w	r8, [r3]
 8015fa2:	e560      	b.n	8015a66 <_dtoa_r+0x76>
 8015fa4:	465f      	mov	r7, fp
 8015fa6:	4643      	mov	r3, r8
 8015fa8:	4698      	mov	r8, r3
 8015faa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015fae:	2a39      	cmp	r2, #57	; 0x39
 8015fb0:	d106      	bne.n	8015fc0 <_dtoa_r+0x5d0>
 8015fb2:	9a01      	ldr	r2, [sp, #4]
 8015fb4:	429a      	cmp	r2, r3
 8015fb6:	d1f7      	bne.n	8015fa8 <_dtoa_r+0x5b8>
 8015fb8:	9901      	ldr	r1, [sp, #4]
 8015fba:	2230      	movs	r2, #48	; 0x30
 8015fbc:	3701      	adds	r7, #1
 8015fbe:	700a      	strb	r2, [r1, #0]
 8015fc0:	781a      	ldrb	r2, [r3, #0]
 8015fc2:	3201      	adds	r2, #1
 8015fc4:	701a      	strb	r2, [r3, #0]
 8015fc6:	e7ae      	b.n	8015f26 <_dtoa_r+0x536>
 8015fc8:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015fcc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fd4:	d1b2      	bne.n	8015f3c <_dtoa_r+0x54c>
 8015fd6:	e7d3      	b.n	8015f80 <_dtoa_r+0x590>
 8015fd8:	08019568 	.word	0x08019568
 8015fdc:	08019540 	.word	0x08019540
 8015fe0:	9907      	ldr	r1, [sp, #28]
 8015fe2:	2900      	cmp	r1, #0
 8015fe4:	f000 80d0 	beq.w	8016188 <_dtoa_r+0x798>
 8015fe8:	9906      	ldr	r1, [sp, #24]
 8015fea:	2901      	cmp	r1, #1
 8015fec:	f300 80b4 	bgt.w	8016158 <_dtoa_r+0x768>
 8015ff0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015ff2:	2900      	cmp	r1, #0
 8015ff4:	f000 80ac 	beq.w	8016150 <_dtoa_r+0x760>
 8015ff8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015ffc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8016000:	461c      	mov	r4, r3
 8016002:	930a      	str	r3, [sp, #40]	; 0x28
 8016004:	9b04      	ldr	r3, [sp, #16]
 8016006:	4413      	add	r3, r2
 8016008:	9304      	str	r3, [sp, #16]
 801600a:	9b05      	ldr	r3, [sp, #20]
 801600c:	2101      	movs	r1, #1
 801600e:	4413      	add	r3, r2
 8016010:	4630      	mov	r0, r6
 8016012:	9305      	str	r3, [sp, #20]
 8016014:	f000 ff5c 	bl	8016ed0 <__i2b>
 8016018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801601a:	4607      	mov	r7, r0
 801601c:	f1b8 0f00 	cmp.w	r8, #0
 8016020:	dd0d      	ble.n	801603e <_dtoa_r+0x64e>
 8016022:	9a05      	ldr	r2, [sp, #20]
 8016024:	2a00      	cmp	r2, #0
 8016026:	dd0a      	ble.n	801603e <_dtoa_r+0x64e>
 8016028:	4542      	cmp	r2, r8
 801602a:	9904      	ldr	r1, [sp, #16]
 801602c:	bfa8      	it	ge
 801602e:	4642      	movge	r2, r8
 8016030:	1a89      	subs	r1, r1, r2
 8016032:	9104      	str	r1, [sp, #16]
 8016034:	9905      	ldr	r1, [sp, #20]
 8016036:	eba8 0802 	sub.w	r8, r8, r2
 801603a:	1a8a      	subs	r2, r1, r2
 801603c:	9205      	str	r2, [sp, #20]
 801603e:	b303      	cbz	r3, 8016082 <_dtoa_r+0x692>
 8016040:	9a07      	ldr	r2, [sp, #28]
 8016042:	2a00      	cmp	r2, #0
 8016044:	f000 80a5 	beq.w	8016192 <_dtoa_r+0x7a2>
 8016048:	2c00      	cmp	r4, #0
 801604a:	dd13      	ble.n	8016074 <_dtoa_r+0x684>
 801604c:	4639      	mov	r1, r7
 801604e:	4622      	mov	r2, r4
 8016050:	4630      	mov	r0, r6
 8016052:	930d      	str	r3, [sp, #52]	; 0x34
 8016054:	f000 fffc 	bl	8017050 <__pow5mult>
 8016058:	462a      	mov	r2, r5
 801605a:	4601      	mov	r1, r0
 801605c:	4607      	mov	r7, r0
 801605e:	4630      	mov	r0, r6
 8016060:	f000 ff4c 	bl	8016efc <__multiply>
 8016064:	4629      	mov	r1, r5
 8016066:	900a      	str	r0, [sp, #40]	; 0x28
 8016068:	4630      	mov	r0, r6
 801606a:	f000 fe92 	bl	8016d92 <_Bfree>
 801606e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016070:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016072:	4615      	mov	r5, r2
 8016074:	1b1a      	subs	r2, r3, r4
 8016076:	d004      	beq.n	8016082 <_dtoa_r+0x692>
 8016078:	4629      	mov	r1, r5
 801607a:	4630      	mov	r0, r6
 801607c:	f000 ffe8 	bl	8017050 <__pow5mult>
 8016080:	4605      	mov	r5, r0
 8016082:	2101      	movs	r1, #1
 8016084:	4630      	mov	r0, r6
 8016086:	f000 ff23 	bl	8016ed0 <__i2b>
 801608a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801608c:	2b00      	cmp	r3, #0
 801608e:	4604      	mov	r4, r0
 8016090:	f340 8081 	ble.w	8016196 <_dtoa_r+0x7a6>
 8016094:	461a      	mov	r2, r3
 8016096:	4601      	mov	r1, r0
 8016098:	4630      	mov	r0, r6
 801609a:	f000 ffd9 	bl	8017050 <__pow5mult>
 801609e:	9b06      	ldr	r3, [sp, #24]
 80160a0:	2b01      	cmp	r3, #1
 80160a2:	4604      	mov	r4, r0
 80160a4:	dd7a      	ble.n	801619c <_dtoa_r+0x7ac>
 80160a6:	2300      	movs	r3, #0
 80160a8:	930a      	str	r3, [sp, #40]	; 0x28
 80160aa:	6922      	ldr	r2, [r4, #16]
 80160ac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80160b0:	6910      	ldr	r0, [r2, #16]
 80160b2:	f000 febd 	bl	8016e30 <__hi0bits>
 80160b6:	f1c0 0020 	rsb	r0, r0, #32
 80160ba:	9b05      	ldr	r3, [sp, #20]
 80160bc:	4418      	add	r0, r3
 80160be:	f010 001f 	ands.w	r0, r0, #31
 80160c2:	f000 808c 	beq.w	80161de <_dtoa_r+0x7ee>
 80160c6:	f1c0 0220 	rsb	r2, r0, #32
 80160ca:	2a04      	cmp	r2, #4
 80160cc:	f340 8085 	ble.w	80161da <_dtoa_r+0x7ea>
 80160d0:	f1c0 001c 	rsb	r0, r0, #28
 80160d4:	9b04      	ldr	r3, [sp, #16]
 80160d6:	4403      	add	r3, r0
 80160d8:	9304      	str	r3, [sp, #16]
 80160da:	9b05      	ldr	r3, [sp, #20]
 80160dc:	4403      	add	r3, r0
 80160de:	4480      	add	r8, r0
 80160e0:	9305      	str	r3, [sp, #20]
 80160e2:	9b04      	ldr	r3, [sp, #16]
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	dd05      	ble.n	80160f4 <_dtoa_r+0x704>
 80160e8:	4629      	mov	r1, r5
 80160ea:	461a      	mov	r2, r3
 80160ec:	4630      	mov	r0, r6
 80160ee:	f000 ffef 	bl	80170d0 <__lshift>
 80160f2:	4605      	mov	r5, r0
 80160f4:	9b05      	ldr	r3, [sp, #20]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	dd05      	ble.n	8016106 <_dtoa_r+0x716>
 80160fa:	4621      	mov	r1, r4
 80160fc:	461a      	mov	r2, r3
 80160fe:	4630      	mov	r0, r6
 8016100:	f000 ffe6 	bl	80170d0 <__lshift>
 8016104:	4604      	mov	r4, r0
 8016106:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016108:	2b00      	cmp	r3, #0
 801610a:	d06a      	beq.n	80161e2 <_dtoa_r+0x7f2>
 801610c:	4621      	mov	r1, r4
 801610e:	4628      	mov	r0, r5
 8016110:	f001 f84e 	bl	80171b0 <__mcmp>
 8016114:	2800      	cmp	r0, #0
 8016116:	da64      	bge.n	80161e2 <_dtoa_r+0x7f2>
 8016118:	2300      	movs	r3, #0
 801611a:	4629      	mov	r1, r5
 801611c:	220a      	movs	r2, #10
 801611e:	4630      	mov	r0, r6
 8016120:	f000 fe40 	bl	8016da4 <__multadd>
 8016124:	9b07      	ldr	r3, [sp, #28]
 8016126:	f10b 3bff 	add.w	fp, fp, #4294967295
 801612a:	4605      	mov	r5, r0
 801612c:	2b00      	cmp	r3, #0
 801612e:	f000 8190 	beq.w	8016452 <_dtoa_r+0xa62>
 8016132:	4639      	mov	r1, r7
 8016134:	2300      	movs	r3, #0
 8016136:	220a      	movs	r2, #10
 8016138:	4630      	mov	r0, r6
 801613a:	f000 fe33 	bl	8016da4 <__multadd>
 801613e:	f1ba 0f00 	cmp.w	sl, #0
 8016142:	4607      	mov	r7, r0
 8016144:	f300 808d 	bgt.w	8016262 <_dtoa_r+0x872>
 8016148:	9b06      	ldr	r3, [sp, #24]
 801614a:	2b02      	cmp	r3, #2
 801614c:	dc50      	bgt.n	80161f0 <_dtoa_r+0x800>
 801614e:	e088      	b.n	8016262 <_dtoa_r+0x872>
 8016150:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016152:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016156:	e751      	b.n	8015ffc <_dtoa_r+0x60c>
 8016158:	f109 34ff 	add.w	r4, r9, #4294967295
 801615c:	42a3      	cmp	r3, r4
 801615e:	bfbf      	itttt	lt
 8016160:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8016162:	1ae3      	sublt	r3, r4, r3
 8016164:	18d2      	addlt	r2, r2, r3
 8016166:	9209      	strlt	r2, [sp, #36]	; 0x24
 8016168:	bfb6      	itet	lt
 801616a:	4623      	movlt	r3, r4
 801616c:	1b1c      	subge	r4, r3, r4
 801616e:	2400      	movlt	r4, #0
 8016170:	f1b9 0f00 	cmp.w	r9, #0
 8016174:	bfb5      	itete	lt
 8016176:	9a04      	ldrlt	r2, [sp, #16]
 8016178:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801617c:	eba2 0809 	sublt.w	r8, r2, r9
 8016180:	464a      	movge	r2, r9
 8016182:	bfb8      	it	lt
 8016184:	2200      	movlt	r2, #0
 8016186:	e73c      	b.n	8016002 <_dtoa_r+0x612>
 8016188:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801618c:	9f07      	ldr	r7, [sp, #28]
 801618e:	461c      	mov	r4, r3
 8016190:	e744      	b.n	801601c <_dtoa_r+0x62c>
 8016192:	461a      	mov	r2, r3
 8016194:	e770      	b.n	8016078 <_dtoa_r+0x688>
 8016196:	9b06      	ldr	r3, [sp, #24]
 8016198:	2b01      	cmp	r3, #1
 801619a:	dc18      	bgt.n	80161ce <_dtoa_r+0x7de>
 801619c:	9b02      	ldr	r3, [sp, #8]
 801619e:	b9b3      	cbnz	r3, 80161ce <_dtoa_r+0x7de>
 80161a0:	9b03      	ldr	r3, [sp, #12]
 80161a2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80161a6:	b9a2      	cbnz	r2, 80161d2 <_dtoa_r+0x7e2>
 80161a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80161ac:	0d12      	lsrs	r2, r2, #20
 80161ae:	0512      	lsls	r2, r2, #20
 80161b0:	b18a      	cbz	r2, 80161d6 <_dtoa_r+0x7e6>
 80161b2:	9b04      	ldr	r3, [sp, #16]
 80161b4:	3301      	adds	r3, #1
 80161b6:	9304      	str	r3, [sp, #16]
 80161b8:	9b05      	ldr	r3, [sp, #20]
 80161ba:	3301      	adds	r3, #1
 80161bc:	9305      	str	r3, [sp, #20]
 80161be:	2301      	movs	r3, #1
 80161c0:	930a      	str	r3, [sp, #40]	; 0x28
 80161c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	f47f af70 	bne.w	80160aa <_dtoa_r+0x6ba>
 80161ca:	2001      	movs	r0, #1
 80161cc:	e775      	b.n	80160ba <_dtoa_r+0x6ca>
 80161ce:	2300      	movs	r3, #0
 80161d0:	e7f6      	b.n	80161c0 <_dtoa_r+0x7d0>
 80161d2:	9b02      	ldr	r3, [sp, #8]
 80161d4:	e7f4      	b.n	80161c0 <_dtoa_r+0x7d0>
 80161d6:	920a      	str	r2, [sp, #40]	; 0x28
 80161d8:	e7f3      	b.n	80161c2 <_dtoa_r+0x7d2>
 80161da:	d082      	beq.n	80160e2 <_dtoa_r+0x6f2>
 80161dc:	4610      	mov	r0, r2
 80161de:	301c      	adds	r0, #28
 80161e0:	e778      	b.n	80160d4 <_dtoa_r+0x6e4>
 80161e2:	f1b9 0f00 	cmp.w	r9, #0
 80161e6:	dc37      	bgt.n	8016258 <_dtoa_r+0x868>
 80161e8:	9b06      	ldr	r3, [sp, #24]
 80161ea:	2b02      	cmp	r3, #2
 80161ec:	dd34      	ble.n	8016258 <_dtoa_r+0x868>
 80161ee:	46ca      	mov	sl, r9
 80161f0:	f1ba 0f00 	cmp.w	sl, #0
 80161f4:	d10d      	bne.n	8016212 <_dtoa_r+0x822>
 80161f6:	4621      	mov	r1, r4
 80161f8:	4653      	mov	r3, sl
 80161fa:	2205      	movs	r2, #5
 80161fc:	4630      	mov	r0, r6
 80161fe:	f000 fdd1 	bl	8016da4 <__multadd>
 8016202:	4601      	mov	r1, r0
 8016204:	4604      	mov	r4, r0
 8016206:	4628      	mov	r0, r5
 8016208:	f000 ffd2 	bl	80171b0 <__mcmp>
 801620c:	2800      	cmp	r0, #0
 801620e:	f73f adec 	bgt.w	8015dea <_dtoa_r+0x3fa>
 8016212:	9b08      	ldr	r3, [sp, #32]
 8016214:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016218:	ea6f 0b03 	mvn.w	fp, r3
 801621c:	f04f 0900 	mov.w	r9, #0
 8016220:	4621      	mov	r1, r4
 8016222:	4630      	mov	r0, r6
 8016224:	f000 fdb5 	bl	8016d92 <_Bfree>
 8016228:	2f00      	cmp	r7, #0
 801622a:	f43f aea9 	beq.w	8015f80 <_dtoa_r+0x590>
 801622e:	f1b9 0f00 	cmp.w	r9, #0
 8016232:	d005      	beq.n	8016240 <_dtoa_r+0x850>
 8016234:	45b9      	cmp	r9, r7
 8016236:	d003      	beq.n	8016240 <_dtoa_r+0x850>
 8016238:	4649      	mov	r1, r9
 801623a:	4630      	mov	r0, r6
 801623c:	f000 fda9 	bl	8016d92 <_Bfree>
 8016240:	4639      	mov	r1, r7
 8016242:	4630      	mov	r0, r6
 8016244:	f000 fda5 	bl	8016d92 <_Bfree>
 8016248:	e69a      	b.n	8015f80 <_dtoa_r+0x590>
 801624a:	2400      	movs	r4, #0
 801624c:	4627      	mov	r7, r4
 801624e:	e7e0      	b.n	8016212 <_dtoa_r+0x822>
 8016250:	46bb      	mov	fp, r7
 8016252:	4604      	mov	r4, r0
 8016254:	4607      	mov	r7, r0
 8016256:	e5c8      	b.n	8015dea <_dtoa_r+0x3fa>
 8016258:	9b07      	ldr	r3, [sp, #28]
 801625a:	46ca      	mov	sl, r9
 801625c:	2b00      	cmp	r3, #0
 801625e:	f000 80ff 	beq.w	8016460 <_dtoa_r+0xa70>
 8016262:	f1b8 0f00 	cmp.w	r8, #0
 8016266:	dd05      	ble.n	8016274 <_dtoa_r+0x884>
 8016268:	4639      	mov	r1, r7
 801626a:	4642      	mov	r2, r8
 801626c:	4630      	mov	r0, r6
 801626e:	f000 ff2f 	bl	80170d0 <__lshift>
 8016272:	4607      	mov	r7, r0
 8016274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016276:	2b00      	cmp	r3, #0
 8016278:	d05c      	beq.n	8016334 <_dtoa_r+0x944>
 801627a:	6879      	ldr	r1, [r7, #4]
 801627c:	4630      	mov	r0, r6
 801627e:	f000 fd63 	bl	8016d48 <_Balloc>
 8016282:	4680      	mov	r8, r0
 8016284:	b920      	cbnz	r0, 8016290 <_dtoa_r+0x8a0>
 8016286:	4b82      	ldr	r3, [pc, #520]	; (8016490 <_dtoa_r+0xaa0>)
 8016288:	4602      	mov	r2, r0
 801628a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801628e:	e4cf      	b.n	8015c30 <_dtoa_r+0x240>
 8016290:	693a      	ldr	r2, [r7, #16]
 8016292:	3202      	adds	r2, #2
 8016294:	0092      	lsls	r2, r2, #2
 8016296:	f107 010c 	add.w	r1, r7, #12
 801629a:	300c      	adds	r0, #12
 801629c:	f000 fd2c 	bl	8016cf8 <memcpy>
 80162a0:	2201      	movs	r2, #1
 80162a2:	4641      	mov	r1, r8
 80162a4:	4630      	mov	r0, r6
 80162a6:	f000 ff13 	bl	80170d0 <__lshift>
 80162aa:	9b01      	ldr	r3, [sp, #4]
 80162ac:	3301      	adds	r3, #1
 80162ae:	9304      	str	r3, [sp, #16]
 80162b0:	9b01      	ldr	r3, [sp, #4]
 80162b2:	4453      	add	r3, sl
 80162b4:	9308      	str	r3, [sp, #32]
 80162b6:	9b02      	ldr	r3, [sp, #8]
 80162b8:	f003 0301 	and.w	r3, r3, #1
 80162bc:	46b9      	mov	r9, r7
 80162be:	9307      	str	r3, [sp, #28]
 80162c0:	4607      	mov	r7, r0
 80162c2:	9b04      	ldr	r3, [sp, #16]
 80162c4:	4621      	mov	r1, r4
 80162c6:	3b01      	subs	r3, #1
 80162c8:	4628      	mov	r0, r5
 80162ca:	9302      	str	r3, [sp, #8]
 80162cc:	f7ff fb04 	bl	80158d8 <quorem>
 80162d0:	4603      	mov	r3, r0
 80162d2:	3330      	adds	r3, #48	; 0x30
 80162d4:	9005      	str	r0, [sp, #20]
 80162d6:	4649      	mov	r1, r9
 80162d8:	4628      	mov	r0, r5
 80162da:	9309      	str	r3, [sp, #36]	; 0x24
 80162dc:	f000 ff68 	bl	80171b0 <__mcmp>
 80162e0:	463a      	mov	r2, r7
 80162e2:	4682      	mov	sl, r0
 80162e4:	4621      	mov	r1, r4
 80162e6:	4630      	mov	r0, r6
 80162e8:	f000 ff7e 	bl	80171e8 <__mdiff>
 80162ec:	68c2      	ldr	r2, [r0, #12]
 80162ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162f0:	4680      	mov	r8, r0
 80162f2:	bb0a      	cbnz	r2, 8016338 <_dtoa_r+0x948>
 80162f4:	4601      	mov	r1, r0
 80162f6:	4628      	mov	r0, r5
 80162f8:	f000 ff5a 	bl	80171b0 <__mcmp>
 80162fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162fe:	4602      	mov	r2, r0
 8016300:	4641      	mov	r1, r8
 8016302:	4630      	mov	r0, r6
 8016304:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8016308:	f000 fd43 	bl	8016d92 <_Bfree>
 801630c:	9b06      	ldr	r3, [sp, #24]
 801630e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016310:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8016314:	ea43 0102 	orr.w	r1, r3, r2
 8016318:	9b07      	ldr	r3, [sp, #28]
 801631a:	430b      	orrs	r3, r1
 801631c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801631e:	d10d      	bne.n	801633c <_dtoa_r+0x94c>
 8016320:	2b39      	cmp	r3, #57	; 0x39
 8016322:	d029      	beq.n	8016378 <_dtoa_r+0x988>
 8016324:	f1ba 0f00 	cmp.w	sl, #0
 8016328:	dd01      	ble.n	801632e <_dtoa_r+0x93e>
 801632a:	9b05      	ldr	r3, [sp, #20]
 801632c:	3331      	adds	r3, #49	; 0x31
 801632e:	9a02      	ldr	r2, [sp, #8]
 8016330:	7013      	strb	r3, [r2, #0]
 8016332:	e775      	b.n	8016220 <_dtoa_r+0x830>
 8016334:	4638      	mov	r0, r7
 8016336:	e7b8      	b.n	80162aa <_dtoa_r+0x8ba>
 8016338:	2201      	movs	r2, #1
 801633a:	e7e1      	b.n	8016300 <_dtoa_r+0x910>
 801633c:	f1ba 0f00 	cmp.w	sl, #0
 8016340:	db06      	blt.n	8016350 <_dtoa_r+0x960>
 8016342:	9906      	ldr	r1, [sp, #24]
 8016344:	ea41 0a0a 	orr.w	sl, r1, sl
 8016348:	9907      	ldr	r1, [sp, #28]
 801634a:	ea5a 0101 	orrs.w	r1, sl, r1
 801634e:	d120      	bne.n	8016392 <_dtoa_r+0x9a2>
 8016350:	2a00      	cmp	r2, #0
 8016352:	ddec      	ble.n	801632e <_dtoa_r+0x93e>
 8016354:	4629      	mov	r1, r5
 8016356:	2201      	movs	r2, #1
 8016358:	4630      	mov	r0, r6
 801635a:	9304      	str	r3, [sp, #16]
 801635c:	f000 feb8 	bl	80170d0 <__lshift>
 8016360:	4621      	mov	r1, r4
 8016362:	4605      	mov	r5, r0
 8016364:	f000 ff24 	bl	80171b0 <__mcmp>
 8016368:	2800      	cmp	r0, #0
 801636a:	9b04      	ldr	r3, [sp, #16]
 801636c:	dc02      	bgt.n	8016374 <_dtoa_r+0x984>
 801636e:	d1de      	bne.n	801632e <_dtoa_r+0x93e>
 8016370:	07da      	lsls	r2, r3, #31
 8016372:	d5dc      	bpl.n	801632e <_dtoa_r+0x93e>
 8016374:	2b39      	cmp	r3, #57	; 0x39
 8016376:	d1d8      	bne.n	801632a <_dtoa_r+0x93a>
 8016378:	9a02      	ldr	r2, [sp, #8]
 801637a:	2339      	movs	r3, #57	; 0x39
 801637c:	7013      	strb	r3, [r2, #0]
 801637e:	4643      	mov	r3, r8
 8016380:	4698      	mov	r8, r3
 8016382:	3b01      	subs	r3, #1
 8016384:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8016388:	2a39      	cmp	r2, #57	; 0x39
 801638a:	d051      	beq.n	8016430 <_dtoa_r+0xa40>
 801638c:	3201      	adds	r2, #1
 801638e:	701a      	strb	r2, [r3, #0]
 8016390:	e746      	b.n	8016220 <_dtoa_r+0x830>
 8016392:	2a00      	cmp	r2, #0
 8016394:	dd03      	ble.n	801639e <_dtoa_r+0x9ae>
 8016396:	2b39      	cmp	r3, #57	; 0x39
 8016398:	d0ee      	beq.n	8016378 <_dtoa_r+0x988>
 801639a:	3301      	adds	r3, #1
 801639c:	e7c7      	b.n	801632e <_dtoa_r+0x93e>
 801639e:	9a04      	ldr	r2, [sp, #16]
 80163a0:	9908      	ldr	r1, [sp, #32]
 80163a2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80163a6:	428a      	cmp	r2, r1
 80163a8:	d02b      	beq.n	8016402 <_dtoa_r+0xa12>
 80163aa:	4629      	mov	r1, r5
 80163ac:	2300      	movs	r3, #0
 80163ae:	220a      	movs	r2, #10
 80163b0:	4630      	mov	r0, r6
 80163b2:	f000 fcf7 	bl	8016da4 <__multadd>
 80163b6:	45b9      	cmp	r9, r7
 80163b8:	4605      	mov	r5, r0
 80163ba:	f04f 0300 	mov.w	r3, #0
 80163be:	f04f 020a 	mov.w	r2, #10
 80163c2:	4649      	mov	r1, r9
 80163c4:	4630      	mov	r0, r6
 80163c6:	d107      	bne.n	80163d8 <_dtoa_r+0x9e8>
 80163c8:	f000 fcec 	bl	8016da4 <__multadd>
 80163cc:	4681      	mov	r9, r0
 80163ce:	4607      	mov	r7, r0
 80163d0:	9b04      	ldr	r3, [sp, #16]
 80163d2:	3301      	adds	r3, #1
 80163d4:	9304      	str	r3, [sp, #16]
 80163d6:	e774      	b.n	80162c2 <_dtoa_r+0x8d2>
 80163d8:	f000 fce4 	bl	8016da4 <__multadd>
 80163dc:	4639      	mov	r1, r7
 80163de:	4681      	mov	r9, r0
 80163e0:	2300      	movs	r3, #0
 80163e2:	220a      	movs	r2, #10
 80163e4:	4630      	mov	r0, r6
 80163e6:	f000 fcdd 	bl	8016da4 <__multadd>
 80163ea:	4607      	mov	r7, r0
 80163ec:	e7f0      	b.n	80163d0 <_dtoa_r+0x9e0>
 80163ee:	f1ba 0f00 	cmp.w	sl, #0
 80163f2:	9a01      	ldr	r2, [sp, #4]
 80163f4:	bfcc      	ite	gt
 80163f6:	46d0      	movgt	r8, sl
 80163f8:	f04f 0801 	movle.w	r8, #1
 80163fc:	4490      	add	r8, r2
 80163fe:	f04f 0900 	mov.w	r9, #0
 8016402:	4629      	mov	r1, r5
 8016404:	2201      	movs	r2, #1
 8016406:	4630      	mov	r0, r6
 8016408:	9302      	str	r3, [sp, #8]
 801640a:	f000 fe61 	bl	80170d0 <__lshift>
 801640e:	4621      	mov	r1, r4
 8016410:	4605      	mov	r5, r0
 8016412:	f000 fecd 	bl	80171b0 <__mcmp>
 8016416:	2800      	cmp	r0, #0
 8016418:	dcb1      	bgt.n	801637e <_dtoa_r+0x98e>
 801641a:	d102      	bne.n	8016422 <_dtoa_r+0xa32>
 801641c:	9b02      	ldr	r3, [sp, #8]
 801641e:	07db      	lsls	r3, r3, #31
 8016420:	d4ad      	bmi.n	801637e <_dtoa_r+0x98e>
 8016422:	4643      	mov	r3, r8
 8016424:	4698      	mov	r8, r3
 8016426:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801642a:	2a30      	cmp	r2, #48	; 0x30
 801642c:	d0fa      	beq.n	8016424 <_dtoa_r+0xa34>
 801642e:	e6f7      	b.n	8016220 <_dtoa_r+0x830>
 8016430:	9a01      	ldr	r2, [sp, #4]
 8016432:	429a      	cmp	r2, r3
 8016434:	d1a4      	bne.n	8016380 <_dtoa_r+0x990>
 8016436:	f10b 0b01 	add.w	fp, fp, #1
 801643a:	2331      	movs	r3, #49	; 0x31
 801643c:	e778      	b.n	8016330 <_dtoa_r+0x940>
 801643e:	4b15      	ldr	r3, [pc, #84]	; (8016494 <_dtoa_r+0xaa4>)
 8016440:	f7ff bb2c 	b.w	8015a9c <_dtoa_r+0xac>
 8016444:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016446:	2b00      	cmp	r3, #0
 8016448:	f47f ab13 	bne.w	8015a72 <_dtoa_r+0x82>
 801644c:	4b12      	ldr	r3, [pc, #72]	; (8016498 <_dtoa_r+0xaa8>)
 801644e:	f7ff bb25 	b.w	8015a9c <_dtoa_r+0xac>
 8016452:	f1ba 0f00 	cmp.w	sl, #0
 8016456:	dc03      	bgt.n	8016460 <_dtoa_r+0xa70>
 8016458:	9b06      	ldr	r3, [sp, #24]
 801645a:	2b02      	cmp	r3, #2
 801645c:	f73f aec8 	bgt.w	80161f0 <_dtoa_r+0x800>
 8016460:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016464:	4621      	mov	r1, r4
 8016466:	4628      	mov	r0, r5
 8016468:	f7ff fa36 	bl	80158d8 <quorem>
 801646c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8016470:	f808 3b01 	strb.w	r3, [r8], #1
 8016474:	9a01      	ldr	r2, [sp, #4]
 8016476:	eba8 0202 	sub.w	r2, r8, r2
 801647a:	4592      	cmp	sl, r2
 801647c:	ddb7      	ble.n	80163ee <_dtoa_r+0x9fe>
 801647e:	4629      	mov	r1, r5
 8016480:	2300      	movs	r3, #0
 8016482:	220a      	movs	r2, #10
 8016484:	4630      	mov	r0, r6
 8016486:	f000 fc8d 	bl	8016da4 <__multadd>
 801648a:	4605      	mov	r5, r0
 801648c:	e7ea      	b.n	8016464 <_dtoa_r+0xa74>
 801648e:	bf00      	nop
 8016490:	08019475 	.word	0x08019475
 8016494:	08019426 	.word	0x08019426
 8016498:	0801946c 	.word	0x0801946c

0801649c <__errno>:
 801649c:	4b01      	ldr	r3, [pc, #4]	; (80164a4 <__errno+0x8>)
 801649e:	6818      	ldr	r0, [r3, #0]
 80164a0:	4770      	bx	lr
 80164a2:	bf00      	nop
 80164a4:	200004bc 	.word	0x200004bc

080164a8 <__sflush_r>:
 80164a8:	898b      	ldrh	r3, [r1, #12]
 80164aa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80164ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164b2:	4605      	mov	r5, r0
 80164b4:	0718      	lsls	r0, r3, #28
 80164b6:	460c      	mov	r4, r1
 80164b8:	d45f      	bmi.n	801657a <__sflush_r+0xd2>
 80164ba:	684b      	ldr	r3, [r1, #4]
 80164bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	818a      	strh	r2, [r1, #12]
 80164c4:	dc05      	bgt.n	80164d2 <__sflush_r+0x2a>
 80164c6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	dc02      	bgt.n	80164d2 <__sflush_r+0x2a>
 80164cc:	2000      	movs	r0, #0
 80164ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80164d4:	2e00      	cmp	r6, #0
 80164d6:	d0f9      	beq.n	80164cc <__sflush_r+0x24>
 80164d8:	2300      	movs	r3, #0
 80164da:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80164de:	682f      	ldr	r7, [r5, #0]
 80164e0:	602b      	str	r3, [r5, #0]
 80164e2:	d036      	beq.n	8016552 <__sflush_r+0xaa>
 80164e4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80164e6:	89a3      	ldrh	r3, [r4, #12]
 80164e8:	075a      	lsls	r2, r3, #29
 80164ea:	d505      	bpl.n	80164f8 <__sflush_r+0x50>
 80164ec:	6863      	ldr	r3, [r4, #4]
 80164ee:	1ac0      	subs	r0, r0, r3
 80164f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80164f2:	b10b      	cbz	r3, 80164f8 <__sflush_r+0x50>
 80164f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80164f6:	1ac0      	subs	r0, r0, r3
 80164f8:	2300      	movs	r3, #0
 80164fa:	4602      	mov	r2, r0
 80164fc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80164fe:	69e1      	ldr	r1, [r4, #28]
 8016500:	4628      	mov	r0, r5
 8016502:	47b0      	blx	r6
 8016504:	1c43      	adds	r3, r0, #1
 8016506:	89a3      	ldrh	r3, [r4, #12]
 8016508:	d106      	bne.n	8016518 <__sflush_r+0x70>
 801650a:	6829      	ldr	r1, [r5, #0]
 801650c:	291d      	cmp	r1, #29
 801650e:	d830      	bhi.n	8016572 <__sflush_r+0xca>
 8016510:	4a2b      	ldr	r2, [pc, #172]	; (80165c0 <__sflush_r+0x118>)
 8016512:	40ca      	lsrs	r2, r1
 8016514:	07d6      	lsls	r6, r2, #31
 8016516:	d52c      	bpl.n	8016572 <__sflush_r+0xca>
 8016518:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801651c:	b21b      	sxth	r3, r3
 801651e:	2200      	movs	r2, #0
 8016520:	6062      	str	r2, [r4, #4]
 8016522:	04d9      	lsls	r1, r3, #19
 8016524:	6922      	ldr	r2, [r4, #16]
 8016526:	81a3      	strh	r3, [r4, #12]
 8016528:	6022      	str	r2, [r4, #0]
 801652a:	d504      	bpl.n	8016536 <__sflush_r+0x8e>
 801652c:	1c42      	adds	r2, r0, #1
 801652e:	d101      	bne.n	8016534 <__sflush_r+0x8c>
 8016530:	682b      	ldr	r3, [r5, #0]
 8016532:	b903      	cbnz	r3, 8016536 <__sflush_r+0x8e>
 8016534:	6520      	str	r0, [r4, #80]	; 0x50
 8016536:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016538:	602f      	str	r7, [r5, #0]
 801653a:	2900      	cmp	r1, #0
 801653c:	d0c6      	beq.n	80164cc <__sflush_r+0x24>
 801653e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8016542:	4299      	cmp	r1, r3
 8016544:	d002      	beq.n	801654c <__sflush_r+0xa4>
 8016546:	4628      	mov	r0, r5
 8016548:	f000 f938 	bl	80167bc <_free_r>
 801654c:	2000      	movs	r0, #0
 801654e:	6320      	str	r0, [r4, #48]	; 0x30
 8016550:	e7bd      	b.n	80164ce <__sflush_r+0x26>
 8016552:	69e1      	ldr	r1, [r4, #28]
 8016554:	2301      	movs	r3, #1
 8016556:	4628      	mov	r0, r5
 8016558:	47b0      	blx	r6
 801655a:	1c41      	adds	r1, r0, #1
 801655c:	d1c3      	bne.n	80164e6 <__sflush_r+0x3e>
 801655e:	682b      	ldr	r3, [r5, #0]
 8016560:	2b00      	cmp	r3, #0
 8016562:	d0c0      	beq.n	80164e6 <__sflush_r+0x3e>
 8016564:	2b1d      	cmp	r3, #29
 8016566:	d001      	beq.n	801656c <__sflush_r+0xc4>
 8016568:	2b16      	cmp	r3, #22
 801656a:	d101      	bne.n	8016570 <__sflush_r+0xc8>
 801656c:	602f      	str	r7, [r5, #0]
 801656e:	e7ad      	b.n	80164cc <__sflush_r+0x24>
 8016570:	89a3      	ldrh	r3, [r4, #12]
 8016572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016576:	81a3      	strh	r3, [r4, #12]
 8016578:	e7a9      	b.n	80164ce <__sflush_r+0x26>
 801657a:	690f      	ldr	r7, [r1, #16]
 801657c:	2f00      	cmp	r7, #0
 801657e:	d0a5      	beq.n	80164cc <__sflush_r+0x24>
 8016580:	079b      	lsls	r3, r3, #30
 8016582:	680e      	ldr	r6, [r1, #0]
 8016584:	bf08      	it	eq
 8016586:	694b      	ldreq	r3, [r1, #20]
 8016588:	600f      	str	r7, [r1, #0]
 801658a:	bf18      	it	ne
 801658c:	2300      	movne	r3, #0
 801658e:	eba6 0807 	sub.w	r8, r6, r7
 8016592:	608b      	str	r3, [r1, #8]
 8016594:	f1b8 0f00 	cmp.w	r8, #0
 8016598:	dd98      	ble.n	80164cc <__sflush_r+0x24>
 801659a:	69e1      	ldr	r1, [r4, #28]
 801659c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801659e:	4643      	mov	r3, r8
 80165a0:	463a      	mov	r2, r7
 80165a2:	4628      	mov	r0, r5
 80165a4:	47b0      	blx	r6
 80165a6:	2800      	cmp	r0, #0
 80165a8:	dc06      	bgt.n	80165b8 <__sflush_r+0x110>
 80165aa:	89a3      	ldrh	r3, [r4, #12]
 80165ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80165b0:	81a3      	strh	r3, [r4, #12]
 80165b2:	f04f 30ff 	mov.w	r0, #4294967295
 80165b6:	e78a      	b.n	80164ce <__sflush_r+0x26>
 80165b8:	4407      	add	r7, r0
 80165ba:	eba8 0800 	sub.w	r8, r8, r0
 80165be:	e7e9      	b.n	8016594 <__sflush_r+0xec>
 80165c0:	20400001 	.word	0x20400001

080165c4 <_fflush_r>:
 80165c4:	b538      	push	{r3, r4, r5, lr}
 80165c6:	460c      	mov	r4, r1
 80165c8:	4605      	mov	r5, r0
 80165ca:	b118      	cbz	r0, 80165d4 <_fflush_r+0x10>
 80165cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80165ce:	b90b      	cbnz	r3, 80165d4 <_fflush_r+0x10>
 80165d0:	f000 f864 	bl	801669c <__sinit>
 80165d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80165d8:	b1bb      	cbz	r3, 801660a <_fflush_r+0x46>
 80165da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80165dc:	07d0      	lsls	r0, r2, #31
 80165de:	d404      	bmi.n	80165ea <_fflush_r+0x26>
 80165e0:	0599      	lsls	r1, r3, #22
 80165e2:	d402      	bmi.n	80165ea <_fflush_r+0x26>
 80165e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80165e6:	f000 fb19 	bl	8016c1c <__retarget_lock_acquire_recursive>
 80165ea:	4628      	mov	r0, r5
 80165ec:	4621      	mov	r1, r4
 80165ee:	f7ff ff5b 	bl	80164a8 <__sflush_r>
 80165f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80165f4:	07da      	lsls	r2, r3, #31
 80165f6:	4605      	mov	r5, r0
 80165f8:	d405      	bmi.n	8016606 <_fflush_r+0x42>
 80165fa:	89a3      	ldrh	r3, [r4, #12]
 80165fc:	059b      	lsls	r3, r3, #22
 80165fe:	d402      	bmi.n	8016606 <_fflush_r+0x42>
 8016600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016602:	f000 fb0c 	bl	8016c1e <__retarget_lock_release_recursive>
 8016606:	4628      	mov	r0, r5
 8016608:	bd38      	pop	{r3, r4, r5, pc}
 801660a:	461d      	mov	r5, r3
 801660c:	e7fb      	b.n	8016606 <_fflush_r+0x42>
	...

08016610 <std>:
 8016610:	2300      	movs	r3, #0
 8016612:	b510      	push	{r4, lr}
 8016614:	4604      	mov	r4, r0
 8016616:	e9c0 3300 	strd	r3, r3, [r0]
 801661a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801661e:	6083      	str	r3, [r0, #8]
 8016620:	8181      	strh	r1, [r0, #12]
 8016622:	6643      	str	r3, [r0, #100]	; 0x64
 8016624:	81c2      	strh	r2, [r0, #14]
 8016626:	6183      	str	r3, [r0, #24]
 8016628:	4619      	mov	r1, r3
 801662a:	2208      	movs	r2, #8
 801662c:	305c      	adds	r0, #92	; 0x5c
 801662e:	f7fc fbdf 	bl	8012df0 <memset>
 8016632:	4b07      	ldr	r3, [pc, #28]	; (8016650 <std+0x40>)
 8016634:	6223      	str	r3, [r4, #32]
 8016636:	4b07      	ldr	r3, [pc, #28]	; (8016654 <std+0x44>)
 8016638:	6263      	str	r3, [r4, #36]	; 0x24
 801663a:	4b07      	ldr	r3, [pc, #28]	; (8016658 <std+0x48>)
 801663c:	62a3      	str	r3, [r4, #40]	; 0x28
 801663e:	4b07      	ldr	r3, [pc, #28]	; (801665c <std+0x4c>)
 8016640:	61e4      	str	r4, [r4, #28]
 8016642:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016644:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801664c:	f000 bae4 	b.w	8016c18 <__retarget_lock_init_recursive>
 8016650:	080177d9 	.word	0x080177d9
 8016654:	080177fb 	.word	0x080177fb
 8016658:	08017833 	.word	0x08017833
 801665c:	08017857 	.word	0x08017857

08016660 <_cleanup_r>:
 8016660:	4901      	ldr	r1, [pc, #4]	; (8016668 <_cleanup_r+0x8>)
 8016662:	f000 bab5 	b.w	8016bd0 <_fwalk_reent>
 8016666:	bf00      	nop
 8016668:	08018591 	.word	0x08018591

0801666c <__sfp_lock_acquire>:
 801666c:	4801      	ldr	r0, [pc, #4]	; (8016674 <__sfp_lock_acquire+0x8>)
 801666e:	f000 bad5 	b.w	8016c1c <__retarget_lock_acquire_recursive>
 8016672:	bf00      	nop
 8016674:	20006636 	.word	0x20006636

08016678 <__sfp_lock_release>:
 8016678:	4801      	ldr	r0, [pc, #4]	; (8016680 <__sfp_lock_release+0x8>)
 801667a:	f000 bad0 	b.w	8016c1e <__retarget_lock_release_recursive>
 801667e:	bf00      	nop
 8016680:	20006636 	.word	0x20006636

08016684 <__sinit_lock_acquire>:
 8016684:	4801      	ldr	r0, [pc, #4]	; (801668c <__sinit_lock_acquire+0x8>)
 8016686:	f000 bac9 	b.w	8016c1c <__retarget_lock_acquire_recursive>
 801668a:	bf00      	nop
 801668c:	20006637 	.word	0x20006637

08016690 <__sinit_lock_release>:
 8016690:	4801      	ldr	r0, [pc, #4]	; (8016698 <__sinit_lock_release+0x8>)
 8016692:	f000 bac4 	b.w	8016c1e <__retarget_lock_release_recursive>
 8016696:	bf00      	nop
 8016698:	20006637 	.word	0x20006637

0801669c <__sinit>:
 801669c:	b510      	push	{r4, lr}
 801669e:	4604      	mov	r4, r0
 80166a0:	f7ff fff0 	bl	8016684 <__sinit_lock_acquire>
 80166a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80166a6:	b11a      	cbz	r2, 80166b0 <__sinit+0x14>
 80166a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80166ac:	f7ff bff0 	b.w	8016690 <__sinit_lock_release>
 80166b0:	4b0d      	ldr	r3, [pc, #52]	; (80166e8 <__sinit+0x4c>)
 80166b2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80166b4:	2303      	movs	r3, #3
 80166b6:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 80166ba:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 80166be:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 80166c2:	6860      	ldr	r0, [r4, #4]
 80166c4:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 80166c8:	2104      	movs	r1, #4
 80166ca:	f7ff ffa1 	bl	8016610 <std>
 80166ce:	68a0      	ldr	r0, [r4, #8]
 80166d0:	2201      	movs	r2, #1
 80166d2:	2109      	movs	r1, #9
 80166d4:	f7ff ff9c 	bl	8016610 <std>
 80166d8:	68e0      	ldr	r0, [r4, #12]
 80166da:	2202      	movs	r2, #2
 80166dc:	2112      	movs	r1, #18
 80166de:	f7ff ff97 	bl	8016610 <std>
 80166e2:	2301      	movs	r3, #1
 80166e4:	63a3      	str	r3, [r4, #56]	; 0x38
 80166e6:	e7df      	b.n	80166a8 <__sinit+0xc>
 80166e8:	08016661 	.word	0x08016661

080166ec <__libc_fini_array>:
 80166ec:	b538      	push	{r3, r4, r5, lr}
 80166ee:	4d07      	ldr	r5, [pc, #28]	; (801670c <__libc_fini_array+0x20>)
 80166f0:	4c07      	ldr	r4, [pc, #28]	; (8016710 <__libc_fini_array+0x24>)
 80166f2:	1b64      	subs	r4, r4, r5
 80166f4:	10a4      	asrs	r4, r4, #2
 80166f6:	b91c      	cbnz	r4, 8016700 <__libc_fini_array+0x14>
 80166f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80166fc:	f002 bc56 	b.w	8018fac <_fini>
 8016700:	3c01      	subs	r4, #1
 8016702:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8016706:	4798      	blx	r3
 8016708:	e7f5      	b.n	80166f6 <__libc_fini_array+0xa>
 801670a:	bf00      	nop
 801670c:	0801b070 	.word	0x0801b070
 8016710:	0801b074 	.word	0x0801b074

08016714 <_malloc_trim_r>:
 8016714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016718:	4606      	mov	r6, r0
 801671a:	2008      	movs	r0, #8
 801671c:	460c      	mov	r4, r1
 801671e:	f7fd fe01 	bl	8014324 <sysconf>
 8016722:	4f23      	ldr	r7, [pc, #140]	; (80167b0 <_malloc_trim_r+0x9c>)
 8016724:	4680      	mov	r8, r0
 8016726:	4630      	mov	r0, r6
 8016728:	f7fc fb6a 	bl	8012e00 <__malloc_lock>
 801672c:	68bb      	ldr	r3, [r7, #8]
 801672e:	685d      	ldr	r5, [r3, #4]
 8016730:	f025 0503 	bic.w	r5, r5, #3
 8016734:	1b2c      	subs	r4, r5, r4
 8016736:	3c11      	subs	r4, #17
 8016738:	4444      	add	r4, r8
 801673a:	fbb4 f4f8 	udiv	r4, r4, r8
 801673e:	3c01      	subs	r4, #1
 8016740:	fb08 f404 	mul.w	r4, r8, r4
 8016744:	45a0      	cmp	r8, r4
 8016746:	dd05      	ble.n	8016754 <_malloc_trim_r+0x40>
 8016748:	4630      	mov	r0, r6
 801674a:	f7fc fb5f 	bl	8012e0c <__malloc_unlock>
 801674e:	2000      	movs	r0, #0
 8016750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016754:	2100      	movs	r1, #0
 8016756:	4630      	mov	r0, r6
 8016758:	f7fc fbc6 	bl	8012ee8 <_sbrk_r>
 801675c:	68bb      	ldr	r3, [r7, #8]
 801675e:	442b      	add	r3, r5
 8016760:	4298      	cmp	r0, r3
 8016762:	d1f1      	bne.n	8016748 <_malloc_trim_r+0x34>
 8016764:	4261      	negs	r1, r4
 8016766:	4630      	mov	r0, r6
 8016768:	f7fc fbbe 	bl	8012ee8 <_sbrk_r>
 801676c:	3001      	adds	r0, #1
 801676e:	d110      	bne.n	8016792 <_malloc_trim_r+0x7e>
 8016770:	2100      	movs	r1, #0
 8016772:	4630      	mov	r0, r6
 8016774:	f7fc fbb8 	bl	8012ee8 <_sbrk_r>
 8016778:	68ba      	ldr	r2, [r7, #8]
 801677a:	1a83      	subs	r3, r0, r2
 801677c:	2b0f      	cmp	r3, #15
 801677e:	dde3      	ble.n	8016748 <_malloc_trim_r+0x34>
 8016780:	490c      	ldr	r1, [pc, #48]	; (80167b4 <_malloc_trim_r+0xa0>)
 8016782:	6809      	ldr	r1, [r1, #0]
 8016784:	1a40      	subs	r0, r0, r1
 8016786:	490c      	ldr	r1, [pc, #48]	; (80167b8 <_malloc_trim_r+0xa4>)
 8016788:	f043 0301 	orr.w	r3, r3, #1
 801678c:	6008      	str	r0, [r1, #0]
 801678e:	6053      	str	r3, [r2, #4]
 8016790:	e7da      	b.n	8016748 <_malloc_trim_r+0x34>
 8016792:	68bb      	ldr	r3, [r7, #8]
 8016794:	4a08      	ldr	r2, [pc, #32]	; (80167b8 <_malloc_trim_r+0xa4>)
 8016796:	1b2d      	subs	r5, r5, r4
 8016798:	f045 0501 	orr.w	r5, r5, #1
 801679c:	605d      	str	r5, [r3, #4]
 801679e:	6813      	ldr	r3, [r2, #0]
 80167a0:	4630      	mov	r0, r6
 80167a2:	1b1b      	subs	r3, r3, r4
 80167a4:	6013      	str	r3, [r2, #0]
 80167a6:	f7fc fb31 	bl	8012e0c <__malloc_unlock>
 80167aa:	2001      	movs	r0, #1
 80167ac:	e7d0      	b.n	8016750 <_malloc_trim_r+0x3c>
 80167ae:	bf00      	nop
 80167b0:	200008e8 	.word	0x200008e8
 80167b4:	20000cf0 	.word	0x20000cf0
 80167b8:	20006600 	.word	0x20006600

080167bc <_free_r>:
 80167bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167be:	4605      	mov	r5, r0
 80167c0:	460f      	mov	r7, r1
 80167c2:	2900      	cmp	r1, #0
 80167c4:	f000 80b1 	beq.w	801692a <_free_r+0x16e>
 80167c8:	f7fc fb1a 	bl	8012e00 <__malloc_lock>
 80167cc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80167d0:	4856      	ldr	r0, [pc, #344]	; (801692c <_free_r+0x170>)
 80167d2:	f022 0401 	bic.w	r4, r2, #1
 80167d6:	f1a7 0308 	sub.w	r3, r7, #8
 80167da:	eb03 0c04 	add.w	ip, r3, r4
 80167de:	6881      	ldr	r1, [r0, #8]
 80167e0:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80167e4:	4561      	cmp	r1, ip
 80167e6:	f026 0603 	bic.w	r6, r6, #3
 80167ea:	f002 0201 	and.w	r2, r2, #1
 80167ee:	d11b      	bne.n	8016828 <_free_r+0x6c>
 80167f0:	4434      	add	r4, r6
 80167f2:	b93a      	cbnz	r2, 8016804 <_free_r+0x48>
 80167f4:	f857 2c08 	ldr.w	r2, [r7, #-8]
 80167f8:	1a9b      	subs	r3, r3, r2
 80167fa:	4414      	add	r4, r2
 80167fc:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8016800:	60ca      	str	r2, [r1, #12]
 8016802:	6091      	str	r1, [r2, #8]
 8016804:	f044 0201 	orr.w	r2, r4, #1
 8016808:	605a      	str	r2, [r3, #4]
 801680a:	6083      	str	r3, [r0, #8]
 801680c:	4b48      	ldr	r3, [pc, #288]	; (8016930 <_free_r+0x174>)
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	42a3      	cmp	r3, r4
 8016812:	d804      	bhi.n	801681e <_free_r+0x62>
 8016814:	4b47      	ldr	r3, [pc, #284]	; (8016934 <_free_r+0x178>)
 8016816:	4628      	mov	r0, r5
 8016818:	6819      	ldr	r1, [r3, #0]
 801681a:	f7ff ff7b 	bl	8016714 <_malloc_trim_r>
 801681e:	4628      	mov	r0, r5
 8016820:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016824:	f7fc baf2 	b.w	8012e0c <__malloc_unlock>
 8016828:	f8cc 6004 	str.w	r6, [ip, #4]
 801682c:	2a00      	cmp	r2, #0
 801682e:	d138      	bne.n	80168a2 <_free_r+0xe6>
 8016830:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8016834:	1a5b      	subs	r3, r3, r1
 8016836:	440c      	add	r4, r1
 8016838:	6899      	ldr	r1, [r3, #8]
 801683a:	f100 0708 	add.w	r7, r0, #8
 801683e:	42b9      	cmp	r1, r7
 8016840:	d031      	beq.n	80168a6 <_free_r+0xea>
 8016842:	68df      	ldr	r7, [r3, #12]
 8016844:	60cf      	str	r7, [r1, #12]
 8016846:	60b9      	str	r1, [r7, #8]
 8016848:	eb0c 0106 	add.w	r1, ip, r6
 801684c:	6849      	ldr	r1, [r1, #4]
 801684e:	07c9      	lsls	r1, r1, #31
 8016850:	d40b      	bmi.n	801686a <_free_r+0xae>
 8016852:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8016856:	4434      	add	r4, r6
 8016858:	bb3a      	cbnz	r2, 80168aa <_free_r+0xee>
 801685a:	4e37      	ldr	r6, [pc, #220]	; (8016938 <_free_r+0x17c>)
 801685c:	42b1      	cmp	r1, r6
 801685e:	d124      	bne.n	80168aa <_free_r+0xee>
 8016860:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016864:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8016868:	2201      	movs	r2, #1
 801686a:	f044 0101 	orr.w	r1, r4, #1
 801686e:	6059      	str	r1, [r3, #4]
 8016870:	511c      	str	r4, [r3, r4]
 8016872:	2a00      	cmp	r2, #0
 8016874:	d1d3      	bne.n	801681e <_free_r+0x62>
 8016876:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 801687a:	d21b      	bcs.n	80168b4 <_free_r+0xf8>
 801687c:	0961      	lsrs	r1, r4, #5
 801687e:	08e2      	lsrs	r2, r4, #3
 8016880:	2401      	movs	r4, #1
 8016882:	408c      	lsls	r4, r1
 8016884:	6841      	ldr	r1, [r0, #4]
 8016886:	3201      	adds	r2, #1
 8016888:	430c      	orrs	r4, r1
 801688a:	6044      	str	r4, [r0, #4]
 801688c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8016890:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8016894:	3908      	subs	r1, #8
 8016896:	e9c3 4102 	strd	r4, r1, [r3, #8]
 801689a:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 801689e:	60e3      	str	r3, [r4, #12]
 80168a0:	e7bd      	b.n	801681e <_free_r+0x62>
 80168a2:	2200      	movs	r2, #0
 80168a4:	e7d0      	b.n	8016848 <_free_r+0x8c>
 80168a6:	2201      	movs	r2, #1
 80168a8:	e7ce      	b.n	8016848 <_free_r+0x8c>
 80168aa:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80168ae:	60ce      	str	r6, [r1, #12]
 80168b0:	60b1      	str	r1, [r6, #8]
 80168b2:	e7da      	b.n	801686a <_free_r+0xae>
 80168b4:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 80168b8:	ea4f 2254 	mov.w	r2, r4, lsr #9
 80168bc:	d214      	bcs.n	80168e8 <_free_r+0x12c>
 80168be:	09a2      	lsrs	r2, r4, #6
 80168c0:	3238      	adds	r2, #56	; 0x38
 80168c2:	1c51      	adds	r1, r2, #1
 80168c4:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 80168c8:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 80168cc:	428e      	cmp	r6, r1
 80168ce:	d125      	bne.n	801691c <_free_r+0x160>
 80168d0:	2401      	movs	r4, #1
 80168d2:	1092      	asrs	r2, r2, #2
 80168d4:	fa04 f202 	lsl.w	r2, r4, r2
 80168d8:	6844      	ldr	r4, [r0, #4]
 80168da:	4322      	orrs	r2, r4
 80168dc:	6042      	str	r2, [r0, #4]
 80168de:	e9c3 1602 	strd	r1, r6, [r3, #8]
 80168e2:	60b3      	str	r3, [r6, #8]
 80168e4:	60cb      	str	r3, [r1, #12]
 80168e6:	e79a      	b.n	801681e <_free_r+0x62>
 80168e8:	2a14      	cmp	r2, #20
 80168ea:	d801      	bhi.n	80168f0 <_free_r+0x134>
 80168ec:	325b      	adds	r2, #91	; 0x5b
 80168ee:	e7e8      	b.n	80168c2 <_free_r+0x106>
 80168f0:	2a54      	cmp	r2, #84	; 0x54
 80168f2:	d802      	bhi.n	80168fa <_free_r+0x13e>
 80168f4:	0b22      	lsrs	r2, r4, #12
 80168f6:	326e      	adds	r2, #110	; 0x6e
 80168f8:	e7e3      	b.n	80168c2 <_free_r+0x106>
 80168fa:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80168fe:	d802      	bhi.n	8016906 <_free_r+0x14a>
 8016900:	0be2      	lsrs	r2, r4, #15
 8016902:	3277      	adds	r2, #119	; 0x77
 8016904:	e7dd      	b.n	80168c2 <_free_r+0x106>
 8016906:	f240 5154 	movw	r1, #1364	; 0x554
 801690a:	428a      	cmp	r2, r1
 801690c:	bf9a      	itte	ls
 801690e:	0ca2      	lsrls	r2, r4, #18
 8016910:	327c      	addls	r2, #124	; 0x7c
 8016912:	227e      	movhi	r2, #126	; 0x7e
 8016914:	e7d5      	b.n	80168c2 <_free_r+0x106>
 8016916:	6889      	ldr	r1, [r1, #8]
 8016918:	428e      	cmp	r6, r1
 801691a:	d004      	beq.n	8016926 <_free_r+0x16a>
 801691c:	684a      	ldr	r2, [r1, #4]
 801691e:	f022 0203 	bic.w	r2, r2, #3
 8016922:	42a2      	cmp	r2, r4
 8016924:	d8f7      	bhi.n	8016916 <_free_r+0x15a>
 8016926:	68ce      	ldr	r6, [r1, #12]
 8016928:	e7d9      	b.n	80168de <_free_r+0x122>
 801692a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801692c:	200008e8 	.word	0x200008e8
 8016930:	20000cf4 	.word	0x20000cf4
 8016934:	20006630 	.word	0x20006630
 8016938:	200008f0 	.word	0x200008f0

0801693c <__sfvwrite_r>:
 801693c:	6893      	ldr	r3, [r2, #8]
 801693e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016942:	4606      	mov	r6, r0
 8016944:	460c      	mov	r4, r1
 8016946:	4690      	mov	r8, r2
 8016948:	b91b      	cbnz	r3, 8016952 <__sfvwrite_r+0x16>
 801694a:	2000      	movs	r0, #0
 801694c:	b003      	add	sp, #12
 801694e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016952:	898b      	ldrh	r3, [r1, #12]
 8016954:	0718      	lsls	r0, r3, #28
 8016956:	d550      	bpl.n	80169fa <__sfvwrite_r+0xbe>
 8016958:	690b      	ldr	r3, [r1, #16]
 801695a:	2b00      	cmp	r3, #0
 801695c:	d04d      	beq.n	80169fa <__sfvwrite_r+0xbe>
 801695e:	89a3      	ldrh	r3, [r4, #12]
 8016960:	f8d8 7000 	ldr.w	r7, [r8]
 8016964:	f013 0902 	ands.w	r9, r3, #2
 8016968:	d16c      	bne.n	8016a44 <__sfvwrite_r+0x108>
 801696a:	f013 0301 	ands.w	r3, r3, #1
 801696e:	f000 809c 	beq.w	8016aaa <__sfvwrite_r+0x16e>
 8016972:	4648      	mov	r0, r9
 8016974:	46ca      	mov	sl, r9
 8016976:	46cb      	mov	fp, r9
 8016978:	f1bb 0f00 	cmp.w	fp, #0
 801697c:	f000 8103 	beq.w	8016b86 <__sfvwrite_r+0x24a>
 8016980:	b950      	cbnz	r0, 8016998 <__sfvwrite_r+0x5c>
 8016982:	465a      	mov	r2, fp
 8016984:	210a      	movs	r1, #10
 8016986:	4650      	mov	r0, sl
 8016988:	f7e9 fc62 	bl	8000250 <memchr>
 801698c:	2800      	cmp	r0, #0
 801698e:	f000 80ff 	beq.w	8016b90 <__sfvwrite_r+0x254>
 8016992:	3001      	adds	r0, #1
 8016994:	eba0 090a 	sub.w	r9, r0, sl
 8016998:	6820      	ldr	r0, [r4, #0]
 801699a:	6921      	ldr	r1, [r4, #16]
 801699c:	6963      	ldr	r3, [r4, #20]
 801699e:	45d9      	cmp	r9, fp
 80169a0:	464a      	mov	r2, r9
 80169a2:	bf28      	it	cs
 80169a4:	465a      	movcs	r2, fp
 80169a6:	4288      	cmp	r0, r1
 80169a8:	f240 80f5 	bls.w	8016b96 <__sfvwrite_r+0x25a>
 80169ac:	68a5      	ldr	r5, [r4, #8]
 80169ae:	441d      	add	r5, r3
 80169b0:	42aa      	cmp	r2, r5
 80169b2:	f340 80f0 	ble.w	8016b96 <__sfvwrite_r+0x25a>
 80169b6:	4651      	mov	r1, sl
 80169b8:	462a      	mov	r2, r5
 80169ba:	f000 f9ab 	bl	8016d14 <memmove>
 80169be:	6823      	ldr	r3, [r4, #0]
 80169c0:	442b      	add	r3, r5
 80169c2:	6023      	str	r3, [r4, #0]
 80169c4:	4621      	mov	r1, r4
 80169c6:	4630      	mov	r0, r6
 80169c8:	f7ff fdfc 	bl	80165c4 <_fflush_r>
 80169cc:	2800      	cmp	r0, #0
 80169ce:	d167      	bne.n	8016aa0 <__sfvwrite_r+0x164>
 80169d0:	ebb9 0905 	subs.w	r9, r9, r5
 80169d4:	f040 80f7 	bne.w	8016bc6 <__sfvwrite_r+0x28a>
 80169d8:	4621      	mov	r1, r4
 80169da:	4630      	mov	r0, r6
 80169dc:	f7ff fdf2 	bl	80165c4 <_fflush_r>
 80169e0:	2800      	cmp	r0, #0
 80169e2:	d15d      	bne.n	8016aa0 <__sfvwrite_r+0x164>
 80169e4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80169e8:	44aa      	add	sl, r5
 80169ea:	ebab 0b05 	sub.w	fp, fp, r5
 80169ee:	1b55      	subs	r5, r2, r5
 80169f0:	f8c8 5008 	str.w	r5, [r8, #8]
 80169f4:	2d00      	cmp	r5, #0
 80169f6:	d1bf      	bne.n	8016978 <__sfvwrite_r+0x3c>
 80169f8:	e7a7      	b.n	801694a <__sfvwrite_r+0xe>
 80169fa:	4621      	mov	r1, r4
 80169fc:	4630      	mov	r0, r6
 80169fe:	f7fe ff03 	bl	8015808 <__swsetup_r>
 8016a02:	2800      	cmp	r0, #0
 8016a04:	d0ab      	beq.n	801695e <__sfvwrite_r+0x22>
 8016a06:	f04f 30ff 	mov.w	r0, #4294967295
 8016a0a:	e79f      	b.n	801694c <__sfvwrite_r+0x10>
 8016a0c:	e9d7 b900 	ldrd	fp, r9, [r7]
 8016a10:	3708      	adds	r7, #8
 8016a12:	f1b9 0f00 	cmp.w	r9, #0
 8016a16:	d0f9      	beq.n	8016a0c <__sfvwrite_r+0xd0>
 8016a18:	45d1      	cmp	r9, sl
 8016a1a:	464b      	mov	r3, r9
 8016a1c:	69e1      	ldr	r1, [r4, #28]
 8016a1e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016a20:	bf28      	it	cs
 8016a22:	4653      	movcs	r3, sl
 8016a24:	465a      	mov	r2, fp
 8016a26:	4630      	mov	r0, r6
 8016a28:	47a8      	blx	r5
 8016a2a:	2800      	cmp	r0, #0
 8016a2c:	dd38      	ble.n	8016aa0 <__sfvwrite_r+0x164>
 8016a2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016a32:	4483      	add	fp, r0
 8016a34:	eba9 0900 	sub.w	r9, r9, r0
 8016a38:	1a18      	subs	r0, r3, r0
 8016a3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8016a3e:	2800      	cmp	r0, #0
 8016a40:	d1e7      	bne.n	8016a12 <__sfvwrite_r+0xd6>
 8016a42:	e782      	b.n	801694a <__sfvwrite_r+0xe>
 8016a44:	f04f 0b00 	mov.w	fp, #0
 8016a48:	f8df a180 	ldr.w	sl, [pc, #384]	; 8016bcc <__sfvwrite_r+0x290>
 8016a4c:	46d9      	mov	r9, fp
 8016a4e:	e7e0      	b.n	8016a12 <__sfvwrite_r+0xd6>
 8016a50:	e9d7 9a00 	ldrd	r9, sl, [r7]
 8016a54:	3708      	adds	r7, #8
 8016a56:	f1ba 0f00 	cmp.w	sl, #0
 8016a5a:	d0f9      	beq.n	8016a50 <__sfvwrite_r+0x114>
 8016a5c:	89a3      	ldrh	r3, [r4, #12]
 8016a5e:	6820      	ldr	r0, [r4, #0]
 8016a60:	68a2      	ldr	r2, [r4, #8]
 8016a62:	0599      	lsls	r1, r3, #22
 8016a64:	d563      	bpl.n	8016b2e <__sfvwrite_r+0x1f2>
 8016a66:	4552      	cmp	r2, sl
 8016a68:	d836      	bhi.n	8016ad8 <__sfvwrite_r+0x19c>
 8016a6a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8016a6e:	d033      	beq.n	8016ad8 <__sfvwrite_r+0x19c>
 8016a70:	6921      	ldr	r1, [r4, #16]
 8016a72:	6965      	ldr	r5, [r4, #20]
 8016a74:	eba0 0b01 	sub.w	fp, r0, r1
 8016a78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016a7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016a80:	f10b 0201 	add.w	r2, fp, #1
 8016a84:	106d      	asrs	r5, r5, #1
 8016a86:	4452      	add	r2, sl
 8016a88:	4295      	cmp	r5, r2
 8016a8a:	bf38      	it	cc
 8016a8c:	4615      	movcc	r5, r2
 8016a8e:	055b      	lsls	r3, r3, #21
 8016a90:	d53d      	bpl.n	8016b0e <__sfvwrite_r+0x1d2>
 8016a92:	4629      	mov	r1, r5
 8016a94:	4630      	mov	r0, r6
 8016a96:	f7fb ff6f 	bl	8012978 <_malloc_r>
 8016a9a:	b948      	cbnz	r0, 8016ab0 <__sfvwrite_r+0x174>
 8016a9c:	230c      	movs	r3, #12
 8016a9e:	6033      	str	r3, [r6, #0]
 8016aa0:	89a3      	ldrh	r3, [r4, #12]
 8016aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016aa6:	81a3      	strh	r3, [r4, #12]
 8016aa8:	e7ad      	b.n	8016a06 <__sfvwrite_r+0xca>
 8016aaa:	4699      	mov	r9, r3
 8016aac:	469a      	mov	sl, r3
 8016aae:	e7d2      	b.n	8016a56 <__sfvwrite_r+0x11a>
 8016ab0:	465a      	mov	r2, fp
 8016ab2:	6921      	ldr	r1, [r4, #16]
 8016ab4:	9001      	str	r0, [sp, #4]
 8016ab6:	f000 f91f 	bl	8016cf8 <memcpy>
 8016aba:	89a2      	ldrh	r2, [r4, #12]
 8016abc:	9b01      	ldr	r3, [sp, #4]
 8016abe:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8016ac2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8016ac6:	81a2      	strh	r2, [r4, #12]
 8016ac8:	6123      	str	r3, [r4, #16]
 8016aca:	6165      	str	r5, [r4, #20]
 8016acc:	445b      	add	r3, fp
 8016ace:	eba5 050b 	sub.w	r5, r5, fp
 8016ad2:	6023      	str	r3, [r4, #0]
 8016ad4:	4652      	mov	r2, sl
 8016ad6:	60a5      	str	r5, [r4, #8]
 8016ad8:	4552      	cmp	r2, sl
 8016ada:	bf28      	it	cs
 8016adc:	4652      	movcs	r2, sl
 8016ade:	6820      	ldr	r0, [r4, #0]
 8016ae0:	9201      	str	r2, [sp, #4]
 8016ae2:	4649      	mov	r1, r9
 8016ae4:	f000 f916 	bl	8016d14 <memmove>
 8016ae8:	68a3      	ldr	r3, [r4, #8]
 8016aea:	9a01      	ldr	r2, [sp, #4]
 8016aec:	1a9b      	subs	r3, r3, r2
 8016aee:	60a3      	str	r3, [r4, #8]
 8016af0:	6823      	ldr	r3, [r4, #0]
 8016af2:	441a      	add	r2, r3
 8016af4:	4655      	mov	r5, sl
 8016af6:	6022      	str	r2, [r4, #0]
 8016af8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8016afc:	44a9      	add	r9, r5
 8016afe:	ebaa 0a05 	sub.w	sl, sl, r5
 8016b02:	1b45      	subs	r5, r0, r5
 8016b04:	f8c8 5008 	str.w	r5, [r8, #8]
 8016b08:	2d00      	cmp	r5, #0
 8016b0a:	d1a4      	bne.n	8016a56 <__sfvwrite_r+0x11a>
 8016b0c:	e71d      	b.n	801694a <__sfvwrite_r+0xe>
 8016b0e:	462a      	mov	r2, r5
 8016b10:	4630      	mov	r0, r6
 8016b12:	f000 fc83 	bl	801741c <_realloc_r>
 8016b16:	4603      	mov	r3, r0
 8016b18:	2800      	cmp	r0, #0
 8016b1a:	d1d5      	bne.n	8016ac8 <__sfvwrite_r+0x18c>
 8016b1c:	6921      	ldr	r1, [r4, #16]
 8016b1e:	4630      	mov	r0, r6
 8016b20:	f7ff fe4c 	bl	80167bc <_free_r>
 8016b24:	89a3      	ldrh	r3, [r4, #12]
 8016b26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016b2a:	81a3      	strh	r3, [r4, #12]
 8016b2c:	e7b6      	b.n	8016a9c <__sfvwrite_r+0x160>
 8016b2e:	6923      	ldr	r3, [r4, #16]
 8016b30:	4283      	cmp	r3, r0
 8016b32:	d302      	bcc.n	8016b3a <__sfvwrite_r+0x1fe>
 8016b34:	6961      	ldr	r1, [r4, #20]
 8016b36:	4551      	cmp	r1, sl
 8016b38:	d915      	bls.n	8016b66 <__sfvwrite_r+0x22a>
 8016b3a:	4552      	cmp	r2, sl
 8016b3c:	bf28      	it	cs
 8016b3e:	4652      	movcs	r2, sl
 8016b40:	4649      	mov	r1, r9
 8016b42:	4615      	mov	r5, r2
 8016b44:	f000 f8e6 	bl	8016d14 <memmove>
 8016b48:	68a3      	ldr	r3, [r4, #8]
 8016b4a:	6822      	ldr	r2, [r4, #0]
 8016b4c:	1b5b      	subs	r3, r3, r5
 8016b4e:	442a      	add	r2, r5
 8016b50:	60a3      	str	r3, [r4, #8]
 8016b52:	6022      	str	r2, [r4, #0]
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d1cf      	bne.n	8016af8 <__sfvwrite_r+0x1bc>
 8016b58:	4621      	mov	r1, r4
 8016b5a:	4630      	mov	r0, r6
 8016b5c:	f7ff fd32 	bl	80165c4 <_fflush_r>
 8016b60:	2800      	cmp	r0, #0
 8016b62:	d0c9      	beq.n	8016af8 <__sfvwrite_r+0x1bc>
 8016b64:	e79c      	b.n	8016aa0 <__sfvwrite_r+0x164>
 8016b66:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016b6a:	459a      	cmp	sl, r3
 8016b6c:	bf38      	it	cc
 8016b6e:	4653      	movcc	r3, sl
 8016b70:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016b72:	fb93 f3f1 	sdiv	r3, r3, r1
 8016b76:	464a      	mov	r2, r9
 8016b78:	434b      	muls	r3, r1
 8016b7a:	4630      	mov	r0, r6
 8016b7c:	69e1      	ldr	r1, [r4, #28]
 8016b7e:	47a8      	blx	r5
 8016b80:	1e05      	subs	r5, r0, #0
 8016b82:	dcb9      	bgt.n	8016af8 <__sfvwrite_r+0x1bc>
 8016b84:	e78c      	b.n	8016aa0 <__sfvwrite_r+0x164>
 8016b86:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8016b8a:	2000      	movs	r0, #0
 8016b8c:	3708      	adds	r7, #8
 8016b8e:	e6f3      	b.n	8016978 <__sfvwrite_r+0x3c>
 8016b90:	f10b 0901 	add.w	r9, fp, #1
 8016b94:	e700      	b.n	8016998 <__sfvwrite_r+0x5c>
 8016b96:	4293      	cmp	r3, r2
 8016b98:	dc08      	bgt.n	8016bac <__sfvwrite_r+0x270>
 8016b9a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016b9c:	69e1      	ldr	r1, [r4, #28]
 8016b9e:	4652      	mov	r2, sl
 8016ba0:	4630      	mov	r0, r6
 8016ba2:	47a8      	blx	r5
 8016ba4:	1e05      	subs	r5, r0, #0
 8016ba6:	f73f af13 	bgt.w	80169d0 <__sfvwrite_r+0x94>
 8016baa:	e779      	b.n	8016aa0 <__sfvwrite_r+0x164>
 8016bac:	4651      	mov	r1, sl
 8016bae:	9201      	str	r2, [sp, #4]
 8016bb0:	f000 f8b0 	bl	8016d14 <memmove>
 8016bb4:	9a01      	ldr	r2, [sp, #4]
 8016bb6:	68a3      	ldr	r3, [r4, #8]
 8016bb8:	1a9b      	subs	r3, r3, r2
 8016bba:	60a3      	str	r3, [r4, #8]
 8016bbc:	6823      	ldr	r3, [r4, #0]
 8016bbe:	4413      	add	r3, r2
 8016bc0:	6023      	str	r3, [r4, #0]
 8016bc2:	4615      	mov	r5, r2
 8016bc4:	e704      	b.n	80169d0 <__sfvwrite_r+0x94>
 8016bc6:	2001      	movs	r0, #1
 8016bc8:	e70c      	b.n	80169e4 <__sfvwrite_r+0xa8>
 8016bca:	bf00      	nop
 8016bcc:	7ffffc00 	.word	0x7ffffc00

08016bd0 <_fwalk_reent>:
 8016bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016bd4:	4606      	mov	r6, r0
 8016bd6:	4688      	mov	r8, r1
 8016bd8:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 8016bdc:	2700      	movs	r7, #0
 8016bde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016be2:	f1b9 0901 	subs.w	r9, r9, #1
 8016be6:	d505      	bpl.n	8016bf4 <_fwalk_reent+0x24>
 8016be8:	6824      	ldr	r4, [r4, #0]
 8016bea:	2c00      	cmp	r4, #0
 8016bec:	d1f7      	bne.n	8016bde <_fwalk_reent+0xe>
 8016bee:	4638      	mov	r0, r7
 8016bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016bf4:	89ab      	ldrh	r3, [r5, #12]
 8016bf6:	2b01      	cmp	r3, #1
 8016bf8:	d907      	bls.n	8016c0a <_fwalk_reent+0x3a>
 8016bfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016bfe:	3301      	adds	r3, #1
 8016c00:	d003      	beq.n	8016c0a <_fwalk_reent+0x3a>
 8016c02:	4629      	mov	r1, r5
 8016c04:	4630      	mov	r0, r6
 8016c06:	47c0      	blx	r8
 8016c08:	4307      	orrs	r7, r0
 8016c0a:	3568      	adds	r5, #104	; 0x68
 8016c0c:	e7e9      	b.n	8016be2 <_fwalk_reent+0x12>
	...

08016c10 <_localeconv_r>:
 8016c10:	4800      	ldr	r0, [pc, #0]	; (8016c14 <_localeconv_r+0x4>)
 8016c12:	4770      	bx	lr
 8016c14:	20000dec 	.word	0x20000dec

08016c18 <__retarget_lock_init_recursive>:
 8016c18:	4770      	bx	lr

08016c1a <__retarget_lock_close_recursive>:
 8016c1a:	4770      	bx	lr

08016c1c <__retarget_lock_acquire_recursive>:
 8016c1c:	4770      	bx	lr

08016c1e <__retarget_lock_release_recursive>:
 8016c1e:	4770      	bx	lr

08016c20 <__swhatbuf_r>:
 8016c20:	b570      	push	{r4, r5, r6, lr}
 8016c22:	460e      	mov	r6, r1
 8016c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c28:	2900      	cmp	r1, #0
 8016c2a:	b096      	sub	sp, #88	; 0x58
 8016c2c:	4614      	mov	r4, r2
 8016c2e:	461d      	mov	r5, r3
 8016c30:	da0a      	bge.n	8016c48 <__swhatbuf_r+0x28>
 8016c32:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 8016c36:	2300      	movs	r3, #0
 8016c38:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 8016c3c:	602b      	str	r3, [r5, #0]
 8016c3e:	d116      	bne.n	8016c6e <__swhatbuf_r+0x4e>
 8016c40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016c44:	6023      	str	r3, [r4, #0]
 8016c46:	e015      	b.n	8016c74 <__swhatbuf_r+0x54>
 8016c48:	466a      	mov	r2, sp
 8016c4a:	f001 fd77 	bl	801873c <_fstat_r>
 8016c4e:	2800      	cmp	r0, #0
 8016c50:	dbef      	blt.n	8016c32 <__swhatbuf_r+0x12>
 8016c52:	9a01      	ldr	r2, [sp, #4]
 8016c54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016c58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016c5c:	425a      	negs	r2, r3
 8016c5e:	415a      	adcs	r2, r3
 8016c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016c64:	602a      	str	r2, [r5, #0]
 8016c66:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8016c6a:	6023      	str	r3, [r4, #0]
 8016c6c:	e002      	b.n	8016c74 <__swhatbuf_r+0x54>
 8016c6e:	2240      	movs	r2, #64	; 0x40
 8016c70:	6022      	str	r2, [r4, #0]
 8016c72:	4618      	mov	r0, r3
 8016c74:	b016      	add	sp, #88	; 0x58
 8016c76:	bd70      	pop	{r4, r5, r6, pc}

08016c78 <__smakebuf_r>:
 8016c78:	898b      	ldrh	r3, [r1, #12]
 8016c7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016c7c:	079d      	lsls	r5, r3, #30
 8016c7e:	4606      	mov	r6, r0
 8016c80:	460c      	mov	r4, r1
 8016c82:	d507      	bpl.n	8016c94 <__smakebuf_r+0x1c>
 8016c84:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8016c88:	6023      	str	r3, [r4, #0]
 8016c8a:	6123      	str	r3, [r4, #16]
 8016c8c:	2301      	movs	r3, #1
 8016c8e:	6163      	str	r3, [r4, #20]
 8016c90:	b002      	add	sp, #8
 8016c92:	bd70      	pop	{r4, r5, r6, pc}
 8016c94:	ab01      	add	r3, sp, #4
 8016c96:	466a      	mov	r2, sp
 8016c98:	f7ff ffc2 	bl	8016c20 <__swhatbuf_r>
 8016c9c:	9900      	ldr	r1, [sp, #0]
 8016c9e:	4605      	mov	r5, r0
 8016ca0:	4630      	mov	r0, r6
 8016ca2:	f7fb fe69 	bl	8012978 <_malloc_r>
 8016ca6:	b948      	cbnz	r0, 8016cbc <__smakebuf_r+0x44>
 8016ca8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016cac:	059a      	lsls	r2, r3, #22
 8016cae:	d4ef      	bmi.n	8016c90 <__smakebuf_r+0x18>
 8016cb0:	f023 0303 	bic.w	r3, r3, #3
 8016cb4:	f043 0302 	orr.w	r3, r3, #2
 8016cb8:	81a3      	strh	r3, [r4, #12]
 8016cba:	e7e3      	b.n	8016c84 <__smakebuf_r+0xc>
 8016cbc:	4b0d      	ldr	r3, [pc, #52]	; (8016cf4 <__smakebuf_r+0x7c>)
 8016cbe:	63f3      	str	r3, [r6, #60]	; 0x3c
 8016cc0:	89a3      	ldrh	r3, [r4, #12]
 8016cc2:	6020      	str	r0, [r4, #0]
 8016cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016cc8:	81a3      	strh	r3, [r4, #12]
 8016cca:	9b00      	ldr	r3, [sp, #0]
 8016ccc:	6163      	str	r3, [r4, #20]
 8016cce:	9b01      	ldr	r3, [sp, #4]
 8016cd0:	6120      	str	r0, [r4, #16]
 8016cd2:	b15b      	cbz	r3, 8016cec <__smakebuf_r+0x74>
 8016cd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016cd8:	4630      	mov	r0, r6
 8016cda:	f001 fd41 	bl	8018760 <_isatty_r>
 8016cde:	b128      	cbz	r0, 8016cec <__smakebuf_r+0x74>
 8016ce0:	89a3      	ldrh	r3, [r4, #12]
 8016ce2:	f023 0303 	bic.w	r3, r3, #3
 8016ce6:	f043 0301 	orr.w	r3, r3, #1
 8016cea:	81a3      	strh	r3, [r4, #12]
 8016cec:	89a0      	ldrh	r0, [r4, #12]
 8016cee:	4305      	orrs	r5, r0
 8016cf0:	81a5      	strh	r5, [r4, #12]
 8016cf2:	e7cd      	b.n	8016c90 <__smakebuf_r+0x18>
 8016cf4:	08016661 	.word	0x08016661

08016cf8 <memcpy>:
 8016cf8:	440a      	add	r2, r1
 8016cfa:	4291      	cmp	r1, r2
 8016cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8016d00:	d100      	bne.n	8016d04 <memcpy+0xc>
 8016d02:	4770      	bx	lr
 8016d04:	b510      	push	{r4, lr}
 8016d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016d0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016d0e:	4291      	cmp	r1, r2
 8016d10:	d1f9      	bne.n	8016d06 <memcpy+0xe>
 8016d12:	bd10      	pop	{r4, pc}

08016d14 <memmove>:
 8016d14:	4288      	cmp	r0, r1
 8016d16:	b510      	push	{r4, lr}
 8016d18:	eb01 0402 	add.w	r4, r1, r2
 8016d1c:	d902      	bls.n	8016d24 <memmove+0x10>
 8016d1e:	4284      	cmp	r4, r0
 8016d20:	4623      	mov	r3, r4
 8016d22:	d807      	bhi.n	8016d34 <memmove+0x20>
 8016d24:	1e43      	subs	r3, r0, #1
 8016d26:	42a1      	cmp	r1, r4
 8016d28:	d008      	beq.n	8016d3c <memmove+0x28>
 8016d2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016d2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016d32:	e7f8      	b.n	8016d26 <memmove+0x12>
 8016d34:	4402      	add	r2, r0
 8016d36:	4601      	mov	r1, r0
 8016d38:	428a      	cmp	r2, r1
 8016d3a:	d100      	bne.n	8016d3e <memmove+0x2a>
 8016d3c:	bd10      	pop	{r4, pc}
 8016d3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016d42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016d46:	e7f7      	b.n	8016d38 <memmove+0x24>

08016d48 <_Balloc>:
 8016d48:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016d4a:	b570      	push	{r4, r5, r6, lr}
 8016d4c:	4605      	mov	r5, r0
 8016d4e:	460c      	mov	r4, r1
 8016d50:	b17b      	cbz	r3, 8016d72 <_Balloc+0x2a>
 8016d52:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8016d54:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016d58:	b9a0      	cbnz	r0, 8016d84 <_Balloc+0x3c>
 8016d5a:	2101      	movs	r1, #1
 8016d5c:	fa01 f604 	lsl.w	r6, r1, r4
 8016d60:	1d72      	adds	r2, r6, #5
 8016d62:	0092      	lsls	r2, r2, #2
 8016d64:	4628      	mov	r0, r5
 8016d66:	f001 fbcd 	bl	8018504 <_calloc_r>
 8016d6a:	b148      	cbz	r0, 8016d80 <_Balloc+0x38>
 8016d6c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8016d70:	e00b      	b.n	8016d8a <_Balloc+0x42>
 8016d72:	2221      	movs	r2, #33	; 0x21
 8016d74:	2104      	movs	r1, #4
 8016d76:	f001 fbc5 	bl	8018504 <_calloc_r>
 8016d7a:	64e8      	str	r0, [r5, #76]	; 0x4c
 8016d7c:	2800      	cmp	r0, #0
 8016d7e:	d1e8      	bne.n	8016d52 <_Balloc+0xa>
 8016d80:	2000      	movs	r0, #0
 8016d82:	bd70      	pop	{r4, r5, r6, pc}
 8016d84:	6802      	ldr	r2, [r0, #0]
 8016d86:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8016d8a:	2300      	movs	r3, #0
 8016d8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016d90:	e7f7      	b.n	8016d82 <_Balloc+0x3a>

08016d92 <_Bfree>:
 8016d92:	b131      	cbz	r1, 8016da2 <_Bfree+0x10>
 8016d94:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016d96:	684a      	ldr	r2, [r1, #4]
 8016d98:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8016d9c:	6008      	str	r0, [r1, #0]
 8016d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8016da2:	4770      	bx	lr

08016da4 <__multadd>:
 8016da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016da8:	690d      	ldr	r5, [r1, #16]
 8016daa:	4607      	mov	r7, r0
 8016dac:	460c      	mov	r4, r1
 8016dae:	461e      	mov	r6, r3
 8016db0:	f101 0c14 	add.w	ip, r1, #20
 8016db4:	2000      	movs	r0, #0
 8016db6:	f8dc 3000 	ldr.w	r3, [ip]
 8016dba:	b299      	uxth	r1, r3
 8016dbc:	fb02 6101 	mla	r1, r2, r1, r6
 8016dc0:	0c1e      	lsrs	r6, r3, #16
 8016dc2:	0c0b      	lsrs	r3, r1, #16
 8016dc4:	fb02 3306 	mla	r3, r2, r6, r3
 8016dc8:	b289      	uxth	r1, r1
 8016dca:	3001      	adds	r0, #1
 8016dcc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016dd0:	4285      	cmp	r5, r0
 8016dd2:	f84c 1b04 	str.w	r1, [ip], #4
 8016dd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016dda:	dcec      	bgt.n	8016db6 <__multadd+0x12>
 8016ddc:	b30e      	cbz	r6, 8016e22 <__multadd+0x7e>
 8016dde:	68a3      	ldr	r3, [r4, #8]
 8016de0:	42ab      	cmp	r3, r5
 8016de2:	dc19      	bgt.n	8016e18 <__multadd+0x74>
 8016de4:	6861      	ldr	r1, [r4, #4]
 8016de6:	4638      	mov	r0, r7
 8016de8:	3101      	adds	r1, #1
 8016dea:	f7ff ffad 	bl	8016d48 <_Balloc>
 8016dee:	4680      	mov	r8, r0
 8016df0:	b928      	cbnz	r0, 8016dfe <__multadd+0x5a>
 8016df2:	4602      	mov	r2, r0
 8016df4:	4b0c      	ldr	r3, [pc, #48]	; (8016e28 <__multadd+0x84>)
 8016df6:	480d      	ldr	r0, [pc, #52]	; (8016e2c <__multadd+0x88>)
 8016df8:	21b5      	movs	r1, #181	; 0xb5
 8016dfa:	f001 fb65 	bl	80184c8 <__assert_func>
 8016dfe:	6922      	ldr	r2, [r4, #16]
 8016e00:	3202      	adds	r2, #2
 8016e02:	f104 010c 	add.w	r1, r4, #12
 8016e06:	0092      	lsls	r2, r2, #2
 8016e08:	300c      	adds	r0, #12
 8016e0a:	f7ff ff75 	bl	8016cf8 <memcpy>
 8016e0e:	4621      	mov	r1, r4
 8016e10:	4638      	mov	r0, r7
 8016e12:	f7ff ffbe 	bl	8016d92 <_Bfree>
 8016e16:	4644      	mov	r4, r8
 8016e18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016e1c:	3501      	adds	r5, #1
 8016e1e:	615e      	str	r6, [r3, #20]
 8016e20:	6125      	str	r5, [r4, #16]
 8016e22:	4620      	mov	r0, r4
 8016e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e28:	08019475 	.word	0x08019475
 8016e2c:	080194e1 	.word	0x080194e1

08016e30 <__hi0bits>:
 8016e30:	0c03      	lsrs	r3, r0, #16
 8016e32:	041b      	lsls	r3, r3, #16
 8016e34:	b9d3      	cbnz	r3, 8016e6c <__hi0bits+0x3c>
 8016e36:	0400      	lsls	r0, r0, #16
 8016e38:	2310      	movs	r3, #16
 8016e3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016e3e:	bf04      	itt	eq
 8016e40:	0200      	lsleq	r0, r0, #8
 8016e42:	3308      	addeq	r3, #8
 8016e44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016e48:	bf04      	itt	eq
 8016e4a:	0100      	lsleq	r0, r0, #4
 8016e4c:	3304      	addeq	r3, #4
 8016e4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016e52:	bf04      	itt	eq
 8016e54:	0080      	lsleq	r0, r0, #2
 8016e56:	3302      	addeq	r3, #2
 8016e58:	2800      	cmp	r0, #0
 8016e5a:	db05      	blt.n	8016e68 <__hi0bits+0x38>
 8016e5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016e60:	f103 0301 	add.w	r3, r3, #1
 8016e64:	bf08      	it	eq
 8016e66:	2320      	moveq	r3, #32
 8016e68:	4618      	mov	r0, r3
 8016e6a:	4770      	bx	lr
 8016e6c:	2300      	movs	r3, #0
 8016e6e:	e7e4      	b.n	8016e3a <__hi0bits+0xa>

08016e70 <__lo0bits>:
 8016e70:	6803      	ldr	r3, [r0, #0]
 8016e72:	f013 0207 	ands.w	r2, r3, #7
 8016e76:	4601      	mov	r1, r0
 8016e78:	d00b      	beq.n	8016e92 <__lo0bits+0x22>
 8016e7a:	07da      	lsls	r2, r3, #31
 8016e7c:	d423      	bmi.n	8016ec6 <__lo0bits+0x56>
 8016e7e:	0798      	lsls	r0, r3, #30
 8016e80:	bf49      	itett	mi
 8016e82:	085b      	lsrmi	r3, r3, #1
 8016e84:	089b      	lsrpl	r3, r3, #2
 8016e86:	2001      	movmi	r0, #1
 8016e88:	600b      	strmi	r3, [r1, #0]
 8016e8a:	bf5c      	itt	pl
 8016e8c:	600b      	strpl	r3, [r1, #0]
 8016e8e:	2002      	movpl	r0, #2
 8016e90:	4770      	bx	lr
 8016e92:	b298      	uxth	r0, r3
 8016e94:	b9a8      	cbnz	r0, 8016ec2 <__lo0bits+0x52>
 8016e96:	0c1b      	lsrs	r3, r3, #16
 8016e98:	2010      	movs	r0, #16
 8016e9a:	b2da      	uxtb	r2, r3
 8016e9c:	b90a      	cbnz	r2, 8016ea2 <__lo0bits+0x32>
 8016e9e:	3008      	adds	r0, #8
 8016ea0:	0a1b      	lsrs	r3, r3, #8
 8016ea2:	071a      	lsls	r2, r3, #28
 8016ea4:	bf04      	itt	eq
 8016ea6:	091b      	lsreq	r3, r3, #4
 8016ea8:	3004      	addeq	r0, #4
 8016eaa:	079a      	lsls	r2, r3, #30
 8016eac:	bf04      	itt	eq
 8016eae:	089b      	lsreq	r3, r3, #2
 8016eb0:	3002      	addeq	r0, #2
 8016eb2:	07da      	lsls	r2, r3, #31
 8016eb4:	d403      	bmi.n	8016ebe <__lo0bits+0x4e>
 8016eb6:	085b      	lsrs	r3, r3, #1
 8016eb8:	f100 0001 	add.w	r0, r0, #1
 8016ebc:	d005      	beq.n	8016eca <__lo0bits+0x5a>
 8016ebe:	600b      	str	r3, [r1, #0]
 8016ec0:	4770      	bx	lr
 8016ec2:	4610      	mov	r0, r2
 8016ec4:	e7e9      	b.n	8016e9a <__lo0bits+0x2a>
 8016ec6:	2000      	movs	r0, #0
 8016ec8:	4770      	bx	lr
 8016eca:	2020      	movs	r0, #32
 8016ecc:	4770      	bx	lr
	...

08016ed0 <__i2b>:
 8016ed0:	b510      	push	{r4, lr}
 8016ed2:	460c      	mov	r4, r1
 8016ed4:	2101      	movs	r1, #1
 8016ed6:	f7ff ff37 	bl	8016d48 <_Balloc>
 8016eda:	4602      	mov	r2, r0
 8016edc:	b928      	cbnz	r0, 8016eea <__i2b+0x1a>
 8016ede:	4b05      	ldr	r3, [pc, #20]	; (8016ef4 <__i2b+0x24>)
 8016ee0:	4805      	ldr	r0, [pc, #20]	; (8016ef8 <__i2b+0x28>)
 8016ee2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8016ee6:	f001 faef 	bl	80184c8 <__assert_func>
 8016eea:	2301      	movs	r3, #1
 8016eec:	6144      	str	r4, [r0, #20]
 8016eee:	6103      	str	r3, [r0, #16]
 8016ef0:	bd10      	pop	{r4, pc}
 8016ef2:	bf00      	nop
 8016ef4:	08019475 	.word	0x08019475
 8016ef8:	080194e1 	.word	0x080194e1

08016efc <__multiply>:
 8016efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f00:	4691      	mov	r9, r2
 8016f02:	690a      	ldr	r2, [r1, #16]
 8016f04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016f08:	429a      	cmp	r2, r3
 8016f0a:	bfb8      	it	lt
 8016f0c:	460b      	movlt	r3, r1
 8016f0e:	460c      	mov	r4, r1
 8016f10:	bfbc      	itt	lt
 8016f12:	464c      	movlt	r4, r9
 8016f14:	4699      	movlt	r9, r3
 8016f16:	6927      	ldr	r7, [r4, #16]
 8016f18:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016f1c:	68a3      	ldr	r3, [r4, #8]
 8016f1e:	6861      	ldr	r1, [r4, #4]
 8016f20:	eb07 060a 	add.w	r6, r7, sl
 8016f24:	42b3      	cmp	r3, r6
 8016f26:	b085      	sub	sp, #20
 8016f28:	bfb8      	it	lt
 8016f2a:	3101      	addlt	r1, #1
 8016f2c:	f7ff ff0c 	bl	8016d48 <_Balloc>
 8016f30:	b930      	cbnz	r0, 8016f40 <__multiply+0x44>
 8016f32:	4602      	mov	r2, r0
 8016f34:	4b44      	ldr	r3, [pc, #272]	; (8017048 <__multiply+0x14c>)
 8016f36:	4845      	ldr	r0, [pc, #276]	; (801704c <__multiply+0x150>)
 8016f38:	f240 115d 	movw	r1, #349	; 0x15d
 8016f3c:	f001 fac4 	bl	80184c8 <__assert_func>
 8016f40:	f100 0514 	add.w	r5, r0, #20
 8016f44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016f48:	462b      	mov	r3, r5
 8016f4a:	2200      	movs	r2, #0
 8016f4c:	4543      	cmp	r3, r8
 8016f4e:	d321      	bcc.n	8016f94 <__multiply+0x98>
 8016f50:	f104 0314 	add.w	r3, r4, #20
 8016f54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016f58:	f109 0314 	add.w	r3, r9, #20
 8016f5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8016f60:	9202      	str	r2, [sp, #8]
 8016f62:	1b3a      	subs	r2, r7, r4
 8016f64:	3a15      	subs	r2, #21
 8016f66:	f022 0203 	bic.w	r2, r2, #3
 8016f6a:	3204      	adds	r2, #4
 8016f6c:	f104 0115 	add.w	r1, r4, #21
 8016f70:	428f      	cmp	r7, r1
 8016f72:	bf38      	it	cc
 8016f74:	2204      	movcc	r2, #4
 8016f76:	9201      	str	r2, [sp, #4]
 8016f78:	9a02      	ldr	r2, [sp, #8]
 8016f7a:	9303      	str	r3, [sp, #12]
 8016f7c:	429a      	cmp	r2, r3
 8016f7e:	d80c      	bhi.n	8016f9a <__multiply+0x9e>
 8016f80:	2e00      	cmp	r6, #0
 8016f82:	dd03      	ble.n	8016f8c <__multiply+0x90>
 8016f84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d05a      	beq.n	8017042 <__multiply+0x146>
 8016f8c:	6106      	str	r6, [r0, #16]
 8016f8e:	b005      	add	sp, #20
 8016f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f94:	f843 2b04 	str.w	r2, [r3], #4
 8016f98:	e7d8      	b.n	8016f4c <__multiply+0x50>
 8016f9a:	f8b3 a000 	ldrh.w	sl, [r3]
 8016f9e:	f1ba 0f00 	cmp.w	sl, #0
 8016fa2:	d024      	beq.n	8016fee <__multiply+0xf2>
 8016fa4:	f104 0e14 	add.w	lr, r4, #20
 8016fa8:	46a9      	mov	r9, r5
 8016faa:	f04f 0c00 	mov.w	ip, #0
 8016fae:	f85e 2b04 	ldr.w	r2, [lr], #4
 8016fb2:	f8d9 1000 	ldr.w	r1, [r9]
 8016fb6:	fa1f fb82 	uxth.w	fp, r2
 8016fba:	b289      	uxth	r1, r1
 8016fbc:	fb0a 110b 	mla	r1, sl, fp, r1
 8016fc0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016fc4:	f8d9 2000 	ldr.w	r2, [r9]
 8016fc8:	4461      	add	r1, ip
 8016fca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016fce:	fb0a c20b 	mla	r2, sl, fp, ip
 8016fd2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016fd6:	b289      	uxth	r1, r1
 8016fd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016fdc:	4577      	cmp	r7, lr
 8016fde:	f849 1b04 	str.w	r1, [r9], #4
 8016fe2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016fe6:	d8e2      	bhi.n	8016fae <__multiply+0xb2>
 8016fe8:	9a01      	ldr	r2, [sp, #4]
 8016fea:	f845 c002 	str.w	ip, [r5, r2]
 8016fee:	9a03      	ldr	r2, [sp, #12]
 8016ff0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016ff4:	3304      	adds	r3, #4
 8016ff6:	f1b9 0f00 	cmp.w	r9, #0
 8016ffa:	d020      	beq.n	801703e <__multiply+0x142>
 8016ffc:	6829      	ldr	r1, [r5, #0]
 8016ffe:	f104 0c14 	add.w	ip, r4, #20
 8017002:	46ae      	mov	lr, r5
 8017004:	f04f 0a00 	mov.w	sl, #0
 8017008:	f8bc b000 	ldrh.w	fp, [ip]
 801700c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8017010:	fb09 220b 	mla	r2, r9, fp, r2
 8017014:	4492      	add	sl, r2
 8017016:	b289      	uxth	r1, r1
 8017018:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801701c:	f84e 1b04 	str.w	r1, [lr], #4
 8017020:	f85c 2b04 	ldr.w	r2, [ip], #4
 8017024:	f8be 1000 	ldrh.w	r1, [lr]
 8017028:	0c12      	lsrs	r2, r2, #16
 801702a:	fb09 1102 	mla	r1, r9, r2, r1
 801702e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8017032:	4567      	cmp	r7, ip
 8017034:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017038:	d8e6      	bhi.n	8017008 <__multiply+0x10c>
 801703a:	9a01      	ldr	r2, [sp, #4]
 801703c:	50a9      	str	r1, [r5, r2]
 801703e:	3504      	adds	r5, #4
 8017040:	e79a      	b.n	8016f78 <__multiply+0x7c>
 8017042:	3e01      	subs	r6, #1
 8017044:	e79c      	b.n	8016f80 <__multiply+0x84>
 8017046:	bf00      	nop
 8017048:	08019475 	.word	0x08019475
 801704c:	080194e1 	.word	0x080194e1

08017050 <__pow5mult>:
 8017050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017054:	4615      	mov	r5, r2
 8017056:	f012 0203 	ands.w	r2, r2, #3
 801705a:	4606      	mov	r6, r0
 801705c:	460f      	mov	r7, r1
 801705e:	d007      	beq.n	8017070 <__pow5mult+0x20>
 8017060:	4c1a      	ldr	r4, [pc, #104]	; (80170cc <__pow5mult+0x7c>)
 8017062:	3a01      	subs	r2, #1
 8017064:	2300      	movs	r3, #0
 8017066:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801706a:	f7ff fe9b 	bl	8016da4 <__multadd>
 801706e:	4607      	mov	r7, r0
 8017070:	10ad      	asrs	r5, r5, #2
 8017072:	d027      	beq.n	80170c4 <__pow5mult+0x74>
 8017074:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8017076:	b944      	cbnz	r4, 801708a <__pow5mult+0x3a>
 8017078:	f240 2171 	movw	r1, #625	; 0x271
 801707c:	4630      	mov	r0, r6
 801707e:	f7ff ff27 	bl	8016ed0 <__i2b>
 8017082:	2300      	movs	r3, #0
 8017084:	64b0      	str	r0, [r6, #72]	; 0x48
 8017086:	4604      	mov	r4, r0
 8017088:	6003      	str	r3, [r0, #0]
 801708a:	f04f 0900 	mov.w	r9, #0
 801708e:	07eb      	lsls	r3, r5, #31
 8017090:	d50a      	bpl.n	80170a8 <__pow5mult+0x58>
 8017092:	4639      	mov	r1, r7
 8017094:	4622      	mov	r2, r4
 8017096:	4630      	mov	r0, r6
 8017098:	f7ff ff30 	bl	8016efc <__multiply>
 801709c:	4639      	mov	r1, r7
 801709e:	4680      	mov	r8, r0
 80170a0:	4630      	mov	r0, r6
 80170a2:	f7ff fe76 	bl	8016d92 <_Bfree>
 80170a6:	4647      	mov	r7, r8
 80170a8:	106d      	asrs	r5, r5, #1
 80170aa:	d00b      	beq.n	80170c4 <__pow5mult+0x74>
 80170ac:	6820      	ldr	r0, [r4, #0]
 80170ae:	b938      	cbnz	r0, 80170c0 <__pow5mult+0x70>
 80170b0:	4622      	mov	r2, r4
 80170b2:	4621      	mov	r1, r4
 80170b4:	4630      	mov	r0, r6
 80170b6:	f7ff ff21 	bl	8016efc <__multiply>
 80170ba:	6020      	str	r0, [r4, #0]
 80170bc:	f8c0 9000 	str.w	r9, [r0]
 80170c0:	4604      	mov	r4, r0
 80170c2:	e7e4      	b.n	801708e <__pow5mult+0x3e>
 80170c4:	4638      	mov	r0, r7
 80170c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80170ca:	bf00      	nop
 80170cc:	08019630 	.word	0x08019630

080170d0 <__lshift>:
 80170d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80170d4:	460c      	mov	r4, r1
 80170d6:	6849      	ldr	r1, [r1, #4]
 80170d8:	6923      	ldr	r3, [r4, #16]
 80170da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80170de:	68a3      	ldr	r3, [r4, #8]
 80170e0:	4607      	mov	r7, r0
 80170e2:	4691      	mov	r9, r2
 80170e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80170e8:	f108 0601 	add.w	r6, r8, #1
 80170ec:	42b3      	cmp	r3, r6
 80170ee:	db0b      	blt.n	8017108 <__lshift+0x38>
 80170f0:	4638      	mov	r0, r7
 80170f2:	f7ff fe29 	bl	8016d48 <_Balloc>
 80170f6:	4605      	mov	r5, r0
 80170f8:	b948      	cbnz	r0, 801710e <__lshift+0x3e>
 80170fa:	4602      	mov	r2, r0
 80170fc:	4b2a      	ldr	r3, [pc, #168]	; (80171a8 <__lshift+0xd8>)
 80170fe:	482b      	ldr	r0, [pc, #172]	; (80171ac <__lshift+0xdc>)
 8017100:	f240 11d9 	movw	r1, #473	; 0x1d9
 8017104:	f001 f9e0 	bl	80184c8 <__assert_func>
 8017108:	3101      	adds	r1, #1
 801710a:	005b      	lsls	r3, r3, #1
 801710c:	e7ee      	b.n	80170ec <__lshift+0x1c>
 801710e:	2300      	movs	r3, #0
 8017110:	f100 0114 	add.w	r1, r0, #20
 8017114:	f100 0210 	add.w	r2, r0, #16
 8017118:	4618      	mov	r0, r3
 801711a:	4553      	cmp	r3, sl
 801711c:	db37      	blt.n	801718e <__lshift+0xbe>
 801711e:	6920      	ldr	r0, [r4, #16]
 8017120:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017124:	f104 0314 	add.w	r3, r4, #20
 8017128:	f019 091f 	ands.w	r9, r9, #31
 801712c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017130:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8017134:	d02f      	beq.n	8017196 <__lshift+0xc6>
 8017136:	f1c9 0e20 	rsb	lr, r9, #32
 801713a:	468a      	mov	sl, r1
 801713c:	f04f 0c00 	mov.w	ip, #0
 8017140:	681a      	ldr	r2, [r3, #0]
 8017142:	fa02 f209 	lsl.w	r2, r2, r9
 8017146:	ea42 020c 	orr.w	r2, r2, ip
 801714a:	f84a 2b04 	str.w	r2, [sl], #4
 801714e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017152:	4298      	cmp	r0, r3
 8017154:	fa22 fc0e 	lsr.w	ip, r2, lr
 8017158:	d8f2      	bhi.n	8017140 <__lshift+0x70>
 801715a:	1b03      	subs	r3, r0, r4
 801715c:	3b15      	subs	r3, #21
 801715e:	f023 0303 	bic.w	r3, r3, #3
 8017162:	3304      	adds	r3, #4
 8017164:	f104 0215 	add.w	r2, r4, #21
 8017168:	4290      	cmp	r0, r2
 801716a:	bf38      	it	cc
 801716c:	2304      	movcc	r3, #4
 801716e:	f841 c003 	str.w	ip, [r1, r3]
 8017172:	f1bc 0f00 	cmp.w	ip, #0
 8017176:	d001      	beq.n	801717c <__lshift+0xac>
 8017178:	f108 0602 	add.w	r6, r8, #2
 801717c:	3e01      	subs	r6, #1
 801717e:	4638      	mov	r0, r7
 8017180:	612e      	str	r6, [r5, #16]
 8017182:	4621      	mov	r1, r4
 8017184:	f7ff fe05 	bl	8016d92 <_Bfree>
 8017188:	4628      	mov	r0, r5
 801718a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801718e:	f842 0f04 	str.w	r0, [r2, #4]!
 8017192:	3301      	adds	r3, #1
 8017194:	e7c1      	b.n	801711a <__lshift+0x4a>
 8017196:	3904      	subs	r1, #4
 8017198:	f853 2b04 	ldr.w	r2, [r3], #4
 801719c:	f841 2f04 	str.w	r2, [r1, #4]!
 80171a0:	4298      	cmp	r0, r3
 80171a2:	d8f9      	bhi.n	8017198 <__lshift+0xc8>
 80171a4:	e7ea      	b.n	801717c <__lshift+0xac>
 80171a6:	bf00      	nop
 80171a8:	08019475 	.word	0x08019475
 80171ac:	080194e1 	.word	0x080194e1

080171b0 <__mcmp>:
 80171b0:	b530      	push	{r4, r5, lr}
 80171b2:	6902      	ldr	r2, [r0, #16]
 80171b4:	690c      	ldr	r4, [r1, #16]
 80171b6:	1b12      	subs	r2, r2, r4
 80171b8:	d10e      	bne.n	80171d8 <__mcmp+0x28>
 80171ba:	f100 0314 	add.w	r3, r0, #20
 80171be:	3114      	adds	r1, #20
 80171c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80171c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80171c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80171cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80171d0:	42a5      	cmp	r5, r4
 80171d2:	d003      	beq.n	80171dc <__mcmp+0x2c>
 80171d4:	d305      	bcc.n	80171e2 <__mcmp+0x32>
 80171d6:	2201      	movs	r2, #1
 80171d8:	4610      	mov	r0, r2
 80171da:	bd30      	pop	{r4, r5, pc}
 80171dc:	4283      	cmp	r3, r0
 80171de:	d3f3      	bcc.n	80171c8 <__mcmp+0x18>
 80171e0:	e7fa      	b.n	80171d8 <__mcmp+0x28>
 80171e2:	f04f 32ff 	mov.w	r2, #4294967295
 80171e6:	e7f7      	b.n	80171d8 <__mcmp+0x28>

080171e8 <__mdiff>:
 80171e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171ec:	460c      	mov	r4, r1
 80171ee:	4606      	mov	r6, r0
 80171f0:	4611      	mov	r1, r2
 80171f2:	4620      	mov	r0, r4
 80171f4:	4690      	mov	r8, r2
 80171f6:	f7ff ffdb 	bl	80171b0 <__mcmp>
 80171fa:	1e05      	subs	r5, r0, #0
 80171fc:	d110      	bne.n	8017220 <__mdiff+0x38>
 80171fe:	4629      	mov	r1, r5
 8017200:	4630      	mov	r0, r6
 8017202:	f7ff fda1 	bl	8016d48 <_Balloc>
 8017206:	b930      	cbnz	r0, 8017216 <__mdiff+0x2e>
 8017208:	4b3a      	ldr	r3, [pc, #232]	; (80172f4 <__mdiff+0x10c>)
 801720a:	4602      	mov	r2, r0
 801720c:	f240 2132 	movw	r1, #562	; 0x232
 8017210:	4839      	ldr	r0, [pc, #228]	; (80172f8 <__mdiff+0x110>)
 8017212:	f001 f959 	bl	80184c8 <__assert_func>
 8017216:	2301      	movs	r3, #1
 8017218:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801721c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017220:	bfa4      	itt	ge
 8017222:	4643      	movge	r3, r8
 8017224:	46a0      	movge	r8, r4
 8017226:	4630      	mov	r0, r6
 8017228:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801722c:	bfa6      	itte	ge
 801722e:	461c      	movge	r4, r3
 8017230:	2500      	movge	r5, #0
 8017232:	2501      	movlt	r5, #1
 8017234:	f7ff fd88 	bl	8016d48 <_Balloc>
 8017238:	b920      	cbnz	r0, 8017244 <__mdiff+0x5c>
 801723a:	4b2e      	ldr	r3, [pc, #184]	; (80172f4 <__mdiff+0x10c>)
 801723c:	4602      	mov	r2, r0
 801723e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8017242:	e7e5      	b.n	8017210 <__mdiff+0x28>
 8017244:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017248:	6926      	ldr	r6, [r4, #16]
 801724a:	60c5      	str	r5, [r0, #12]
 801724c:	f104 0914 	add.w	r9, r4, #20
 8017250:	f108 0514 	add.w	r5, r8, #20
 8017254:	f100 0e14 	add.w	lr, r0, #20
 8017258:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801725c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8017260:	f108 0210 	add.w	r2, r8, #16
 8017264:	46f2      	mov	sl, lr
 8017266:	2100      	movs	r1, #0
 8017268:	f859 3b04 	ldr.w	r3, [r9], #4
 801726c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8017270:	fa1f f883 	uxth.w	r8, r3
 8017274:	fa11 f18b 	uxtah	r1, r1, fp
 8017278:	0c1b      	lsrs	r3, r3, #16
 801727a:	eba1 0808 	sub.w	r8, r1, r8
 801727e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8017282:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8017286:	fa1f f888 	uxth.w	r8, r8
 801728a:	1419      	asrs	r1, r3, #16
 801728c:	454e      	cmp	r6, r9
 801728e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8017292:	f84a 3b04 	str.w	r3, [sl], #4
 8017296:	d8e7      	bhi.n	8017268 <__mdiff+0x80>
 8017298:	1b33      	subs	r3, r6, r4
 801729a:	3b15      	subs	r3, #21
 801729c:	f023 0303 	bic.w	r3, r3, #3
 80172a0:	3304      	adds	r3, #4
 80172a2:	3415      	adds	r4, #21
 80172a4:	42a6      	cmp	r6, r4
 80172a6:	bf38      	it	cc
 80172a8:	2304      	movcc	r3, #4
 80172aa:	441d      	add	r5, r3
 80172ac:	4473      	add	r3, lr
 80172ae:	469e      	mov	lr, r3
 80172b0:	462e      	mov	r6, r5
 80172b2:	4566      	cmp	r6, ip
 80172b4:	d30e      	bcc.n	80172d4 <__mdiff+0xec>
 80172b6:	f10c 0203 	add.w	r2, ip, #3
 80172ba:	1b52      	subs	r2, r2, r5
 80172bc:	f022 0203 	bic.w	r2, r2, #3
 80172c0:	3d03      	subs	r5, #3
 80172c2:	45ac      	cmp	ip, r5
 80172c4:	bf38      	it	cc
 80172c6:	2200      	movcc	r2, #0
 80172c8:	441a      	add	r2, r3
 80172ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80172ce:	b17b      	cbz	r3, 80172f0 <__mdiff+0x108>
 80172d0:	6107      	str	r7, [r0, #16]
 80172d2:	e7a3      	b.n	801721c <__mdiff+0x34>
 80172d4:	f856 8b04 	ldr.w	r8, [r6], #4
 80172d8:	fa11 f288 	uxtah	r2, r1, r8
 80172dc:	1414      	asrs	r4, r2, #16
 80172de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80172e2:	b292      	uxth	r2, r2
 80172e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80172e8:	f84e 2b04 	str.w	r2, [lr], #4
 80172ec:	1421      	asrs	r1, r4, #16
 80172ee:	e7e0      	b.n	80172b2 <__mdiff+0xca>
 80172f0:	3f01      	subs	r7, #1
 80172f2:	e7ea      	b.n	80172ca <__mdiff+0xe2>
 80172f4:	08019475 	.word	0x08019475
 80172f8:	080194e1 	.word	0x080194e1

080172fc <__d2b>:
 80172fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017300:	4689      	mov	r9, r1
 8017302:	2101      	movs	r1, #1
 8017304:	ec57 6b10 	vmov	r6, r7, d0
 8017308:	4690      	mov	r8, r2
 801730a:	f7ff fd1d 	bl	8016d48 <_Balloc>
 801730e:	4604      	mov	r4, r0
 8017310:	b930      	cbnz	r0, 8017320 <__d2b+0x24>
 8017312:	4602      	mov	r2, r0
 8017314:	4b25      	ldr	r3, [pc, #148]	; (80173ac <__d2b+0xb0>)
 8017316:	4826      	ldr	r0, [pc, #152]	; (80173b0 <__d2b+0xb4>)
 8017318:	f240 310a 	movw	r1, #778	; 0x30a
 801731c:	f001 f8d4 	bl	80184c8 <__assert_func>
 8017320:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8017324:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017328:	bb35      	cbnz	r5, 8017378 <__d2b+0x7c>
 801732a:	2e00      	cmp	r6, #0
 801732c:	9301      	str	r3, [sp, #4]
 801732e:	d028      	beq.n	8017382 <__d2b+0x86>
 8017330:	4668      	mov	r0, sp
 8017332:	9600      	str	r6, [sp, #0]
 8017334:	f7ff fd9c 	bl	8016e70 <__lo0bits>
 8017338:	9900      	ldr	r1, [sp, #0]
 801733a:	b300      	cbz	r0, 801737e <__d2b+0x82>
 801733c:	9a01      	ldr	r2, [sp, #4]
 801733e:	f1c0 0320 	rsb	r3, r0, #32
 8017342:	fa02 f303 	lsl.w	r3, r2, r3
 8017346:	430b      	orrs	r3, r1
 8017348:	40c2      	lsrs	r2, r0
 801734a:	6163      	str	r3, [r4, #20]
 801734c:	9201      	str	r2, [sp, #4]
 801734e:	9b01      	ldr	r3, [sp, #4]
 8017350:	61a3      	str	r3, [r4, #24]
 8017352:	2b00      	cmp	r3, #0
 8017354:	bf14      	ite	ne
 8017356:	2202      	movne	r2, #2
 8017358:	2201      	moveq	r2, #1
 801735a:	6122      	str	r2, [r4, #16]
 801735c:	b1d5      	cbz	r5, 8017394 <__d2b+0x98>
 801735e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8017362:	4405      	add	r5, r0
 8017364:	f8c9 5000 	str.w	r5, [r9]
 8017368:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801736c:	f8c8 0000 	str.w	r0, [r8]
 8017370:	4620      	mov	r0, r4
 8017372:	b003      	add	sp, #12
 8017374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017378:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801737c:	e7d5      	b.n	801732a <__d2b+0x2e>
 801737e:	6161      	str	r1, [r4, #20]
 8017380:	e7e5      	b.n	801734e <__d2b+0x52>
 8017382:	a801      	add	r0, sp, #4
 8017384:	f7ff fd74 	bl	8016e70 <__lo0bits>
 8017388:	9b01      	ldr	r3, [sp, #4]
 801738a:	6163      	str	r3, [r4, #20]
 801738c:	2201      	movs	r2, #1
 801738e:	6122      	str	r2, [r4, #16]
 8017390:	3020      	adds	r0, #32
 8017392:	e7e3      	b.n	801735c <__d2b+0x60>
 8017394:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017398:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801739c:	f8c9 0000 	str.w	r0, [r9]
 80173a0:	6918      	ldr	r0, [r3, #16]
 80173a2:	f7ff fd45 	bl	8016e30 <__hi0bits>
 80173a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80173aa:	e7df      	b.n	801736c <__d2b+0x70>
 80173ac:	08019475 	.word	0x08019475
 80173b0:	080194e1 	.word	0x080194e1

080173b4 <_putc_r>:
 80173b4:	b570      	push	{r4, r5, r6, lr}
 80173b6:	460d      	mov	r5, r1
 80173b8:	4614      	mov	r4, r2
 80173ba:	4606      	mov	r6, r0
 80173bc:	b118      	cbz	r0, 80173c6 <_putc_r+0x12>
 80173be:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80173c0:	b90b      	cbnz	r3, 80173c6 <_putc_r+0x12>
 80173c2:	f7ff f96b 	bl	801669c <__sinit>
 80173c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80173c8:	07d8      	lsls	r0, r3, #31
 80173ca:	d405      	bmi.n	80173d8 <_putc_r+0x24>
 80173cc:	89a3      	ldrh	r3, [r4, #12]
 80173ce:	0599      	lsls	r1, r3, #22
 80173d0:	d402      	bmi.n	80173d8 <_putc_r+0x24>
 80173d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80173d4:	f7ff fc22 	bl	8016c1c <__retarget_lock_acquire_recursive>
 80173d8:	68a3      	ldr	r3, [r4, #8]
 80173da:	3b01      	subs	r3, #1
 80173dc:	2b00      	cmp	r3, #0
 80173de:	60a3      	str	r3, [r4, #8]
 80173e0:	da05      	bge.n	80173ee <_putc_r+0x3a>
 80173e2:	69a2      	ldr	r2, [r4, #24]
 80173e4:	4293      	cmp	r3, r2
 80173e6:	db12      	blt.n	801740e <_putc_r+0x5a>
 80173e8:	b2eb      	uxtb	r3, r5
 80173ea:	2b0a      	cmp	r3, #10
 80173ec:	d00f      	beq.n	801740e <_putc_r+0x5a>
 80173ee:	6823      	ldr	r3, [r4, #0]
 80173f0:	1c5a      	adds	r2, r3, #1
 80173f2:	6022      	str	r2, [r4, #0]
 80173f4:	701d      	strb	r5, [r3, #0]
 80173f6:	b2ed      	uxtb	r5, r5
 80173f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80173fa:	07da      	lsls	r2, r3, #31
 80173fc:	d405      	bmi.n	801740a <_putc_r+0x56>
 80173fe:	89a3      	ldrh	r3, [r4, #12]
 8017400:	059b      	lsls	r3, r3, #22
 8017402:	d402      	bmi.n	801740a <_putc_r+0x56>
 8017404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017406:	f7ff fc0a 	bl	8016c1e <__retarget_lock_release_recursive>
 801740a:	4628      	mov	r0, r5
 801740c:	bd70      	pop	{r4, r5, r6, pc}
 801740e:	4629      	mov	r1, r5
 8017410:	4622      	mov	r2, r4
 8017412:	4630      	mov	r0, r6
 8017414:	f000 ffba 	bl	801838c <__swbuf_r>
 8017418:	4605      	mov	r5, r0
 801741a:	e7ed      	b.n	80173f8 <_putc_r+0x44>

0801741c <_realloc_r>:
 801741c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017420:	4681      	mov	r9, r0
 8017422:	460c      	mov	r4, r1
 8017424:	b929      	cbnz	r1, 8017432 <_realloc_r+0x16>
 8017426:	4611      	mov	r1, r2
 8017428:	b003      	add	sp, #12
 801742a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801742e:	f7fb baa3 	b.w	8012978 <_malloc_r>
 8017432:	9201      	str	r2, [sp, #4]
 8017434:	f7fb fce4 	bl	8012e00 <__malloc_lock>
 8017438:	9a01      	ldr	r2, [sp, #4]
 801743a:	f102 080b 	add.w	r8, r2, #11
 801743e:	f1b8 0f16 	cmp.w	r8, #22
 8017442:	d90b      	bls.n	801745c <_realloc_r+0x40>
 8017444:	f038 0807 	bics.w	r8, r8, #7
 8017448:	d50a      	bpl.n	8017460 <_realloc_r+0x44>
 801744a:	230c      	movs	r3, #12
 801744c:	f8c9 3000 	str.w	r3, [r9]
 8017450:	f04f 0b00 	mov.w	fp, #0
 8017454:	4658      	mov	r0, fp
 8017456:	b003      	add	sp, #12
 8017458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801745c:	f04f 0810 	mov.w	r8, #16
 8017460:	4590      	cmp	r8, r2
 8017462:	d3f2      	bcc.n	801744a <_realloc_r+0x2e>
 8017464:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8017468:	f025 0603 	bic.w	r6, r5, #3
 801746c:	45b0      	cmp	r8, r6
 801746e:	f1a4 0a08 	sub.w	sl, r4, #8
 8017472:	f340 816e 	ble.w	8017752 <_realloc_r+0x336>
 8017476:	499b      	ldr	r1, [pc, #620]	; (80176e4 <_realloc_r+0x2c8>)
 8017478:	f8d1 c008 	ldr.w	ip, [r1, #8]
 801747c:	eb0a 0306 	add.w	r3, sl, r6
 8017480:	459c      	cmp	ip, r3
 8017482:	6859      	ldr	r1, [r3, #4]
 8017484:	d005      	beq.n	8017492 <_realloc_r+0x76>
 8017486:	f021 0001 	bic.w	r0, r1, #1
 801748a:	4418      	add	r0, r3
 801748c:	6840      	ldr	r0, [r0, #4]
 801748e:	07c7      	lsls	r7, r0, #31
 8017490:	d427      	bmi.n	80174e2 <_realloc_r+0xc6>
 8017492:	f021 0103 	bic.w	r1, r1, #3
 8017496:	459c      	cmp	ip, r3
 8017498:	eb06 0701 	add.w	r7, r6, r1
 801749c:	d119      	bne.n	80174d2 <_realloc_r+0xb6>
 801749e:	f108 0010 	add.w	r0, r8, #16
 80174a2:	42b8      	cmp	r0, r7
 80174a4:	dc1f      	bgt.n	80174e6 <_realloc_r+0xca>
 80174a6:	eb0a 0308 	add.w	r3, sl, r8
 80174aa:	4a8e      	ldr	r2, [pc, #568]	; (80176e4 <_realloc_r+0x2c8>)
 80174ac:	eba7 0708 	sub.w	r7, r7, r8
 80174b0:	f047 0701 	orr.w	r7, r7, #1
 80174b4:	6093      	str	r3, [r2, #8]
 80174b6:	605f      	str	r7, [r3, #4]
 80174b8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80174bc:	f003 0301 	and.w	r3, r3, #1
 80174c0:	ea43 0308 	orr.w	r3, r3, r8
 80174c4:	f844 3c04 	str.w	r3, [r4, #-4]
 80174c8:	4648      	mov	r0, r9
 80174ca:	f7fb fc9f 	bl	8012e0c <__malloc_unlock>
 80174ce:	46a3      	mov	fp, r4
 80174d0:	e7c0      	b.n	8017454 <_realloc_r+0x38>
 80174d2:	45b8      	cmp	r8, r7
 80174d4:	dc07      	bgt.n	80174e6 <_realloc_r+0xca>
 80174d6:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 80174da:	60da      	str	r2, [r3, #12]
 80174dc:	6093      	str	r3, [r2, #8]
 80174de:	4655      	mov	r5, sl
 80174e0:	e07f      	b.n	80175e2 <_realloc_r+0x1c6>
 80174e2:	2100      	movs	r1, #0
 80174e4:	460b      	mov	r3, r1
 80174e6:	07e8      	lsls	r0, r5, #31
 80174e8:	f100 80e5 	bmi.w	80176b6 <_realloc_r+0x29a>
 80174ec:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80174f0:	ebaa 0505 	sub.w	r5, sl, r5
 80174f4:	6868      	ldr	r0, [r5, #4]
 80174f6:	f020 0003 	bic.w	r0, r0, #3
 80174fa:	eb00 0b06 	add.w	fp, r0, r6
 80174fe:	2b00      	cmp	r3, #0
 8017500:	f000 80a5 	beq.w	801764e <_realloc_r+0x232>
 8017504:	459c      	cmp	ip, r3
 8017506:	eb01 070b 	add.w	r7, r1, fp
 801750a:	d14a      	bne.n	80175a2 <_realloc_r+0x186>
 801750c:	f108 0310 	add.w	r3, r8, #16
 8017510:	42bb      	cmp	r3, r7
 8017512:	f300 809c 	bgt.w	801764e <_realloc_r+0x232>
 8017516:	46ab      	mov	fp, r5
 8017518:	68eb      	ldr	r3, [r5, #12]
 801751a:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 801751e:	60d3      	str	r3, [r2, #12]
 8017520:	609a      	str	r2, [r3, #8]
 8017522:	1f32      	subs	r2, r6, #4
 8017524:	2a24      	cmp	r2, #36	; 0x24
 8017526:	d837      	bhi.n	8017598 <_realloc_r+0x17c>
 8017528:	2a13      	cmp	r2, #19
 801752a:	d933      	bls.n	8017594 <_realloc_r+0x178>
 801752c:	6823      	ldr	r3, [r4, #0]
 801752e:	60ab      	str	r3, [r5, #8]
 8017530:	6863      	ldr	r3, [r4, #4]
 8017532:	60eb      	str	r3, [r5, #12]
 8017534:	2a1b      	cmp	r2, #27
 8017536:	d81b      	bhi.n	8017570 <_realloc_r+0x154>
 8017538:	3408      	adds	r4, #8
 801753a:	f105 0310 	add.w	r3, r5, #16
 801753e:	6822      	ldr	r2, [r4, #0]
 8017540:	601a      	str	r2, [r3, #0]
 8017542:	6862      	ldr	r2, [r4, #4]
 8017544:	605a      	str	r2, [r3, #4]
 8017546:	68a2      	ldr	r2, [r4, #8]
 8017548:	609a      	str	r2, [r3, #8]
 801754a:	eb05 0308 	add.w	r3, r5, r8
 801754e:	4a65      	ldr	r2, [pc, #404]	; (80176e4 <_realloc_r+0x2c8>)
 8017550:	eba7 0708 	sub.w	r7, r7, r8
 8017554:	f047 0701 	orr.w	r7, r7, #1
 8017558:	6093      	str	r3, [r2, #8]
 801755a:	605f      	str	r7, [r3, #4]
 801755c:	686b      	ldr	r3, [r5, #4]
 801755e:	f003 0301 	and.w	r3, r3, #1
 8017562:	ea43 0308 	orr.w	r3, r3, r8
 8017566:	606b      	str	r3, [r5, #4]
 8017568:	4648      	mov	r0, r9
 801756a:	f7fb fc4f 	bl	8012e0c <__malloc_unlock>
 801756e:	e771      	b.n	8017454 <_realloc_r+0x38>
 8017570:	68a3      	ldr	r3, [r4, #8]
 8017572:	612b      	str	r3, [r5, #16]
 8017574:	68e3      	ldr	r3, [r4, #12]
 8017576:	616b      	str	r3, [r5, #20]
 8017578:	2a24      	cmp	r2, #36	; 0x24
 801757a:	bf01      	itttt	eq
 801757c:	6923      	ldreq	r3, [r4, #16]
 801757e:	61ab      	streq	r3, [r5, #24]
 8017580:	6962      	ldreq	r2, [r4, #20]
 8017582:	61ea      	streq	r2, [r5, #28]
 8017584:	bf19      	ittee	ne
 8017586:	3410      	addne	r4, #16
 8017588:	f105 0318 	addne.w	r3, r5, #24
 801758c:	f105 0320 	addeq.w	r3, r5, #32
 8017590:	3418      	addeq	r4, #24
 8017592:	e7d4      	b.n	801753e <_realloc_r+0x122>
 8017594:	465b      	mov	r3, fp
 8017596:	e7d2      	b.n	801753e <_realloc_r+0x122>
 8017598:	4621      	mov	r1, r4
 801759a:	4658      	mov	r0, fp
 801759c:	f7ff fbba 	bl	8016d14 <memmove>
 80175a0:	e7d3      	b.n	801754a <_realloc_r+0x12e>
 80175a2:	45b8      	cmp	r8, r7
 80175a4:	dc53      	bgt.n	801764e <_realloc_r+0x232>
 80175a6:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 80175aa:	4628      	mov	r0, r5
 80175ac:	60da      	str	r2, [r3, #12]
 80175ae:	6093      	str	r3, [r2, #8]
 80175b0:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80175b4:	68eb      	ldr	r3, [r5, #12]
 80175b6:	60d3      	str	r3, [r2, #12]
 80175b8:	609a      	str	r2, [r3, #8]
 80175ba:	1f32      	subs	r2, r6, #4
 80175bc:	2a24      	cmp	r2, #36	; 0x24
 80175be:	d842      	bhi.n	8017646 <_realloc_r+0x22a>
 80175c0:	2a13      	cmp	r2, #19
 80175c2:	d908      	bls.n	80175d6 <_realloc_r+0x1ba>
 80175c4:	6823      	ldr	r3, [r4, #0]
 80175c6:	60ab      	str	r3, [r5, #8]
 80175c8:	6863      	ldr	r3, [r4, #4]
 80175ca:	60eb      	str	r3, [r5, #12]
 80175cc:	2a1b      	cmp	r2, #27
 80175ce:	d828      	bhi.n	8017622 <_realloc_r+0x206>
 80175d0:	3408      	adds	r4, #8
 80175d2:	f105 0010 	add.w	r0, r5, #16
 80175d6:	6823      	ldr	r3, [r4, #0]
 80175d8:	6003      	str	r3, [r0, #0]
 80175da:	6863      	ldr	r3, [r4, #4]
 80175dc:	6043      	str	r3, [r0, #4]
 80175de:	68a3      	ldr	r3, [r4, #8]
 80175e0:	6083      	str	r3, [r0, #8]
 80175e2:	686b      	ldr	r3, [r5, #4]
 80175e4:	eba7 0008 	sub.w	r0, r7, r8
 80175e8:	280f      	cmp	r0, #15
 80175ea:	f003 0301 	and.w	r3, r3, #1
 80175ee:	eb05 0207 	add.w	r2, r5, r7
 80175f2:	f240 80b0 	bls.w	8017756 <_realloc_r+0x33a>
 80175f6:	eb05 0108 	add.w	r1, r5, r8
 80175fa:	ea48 0303 	orr.w	r3, r8, r3
 80175fe:	f040 0001 	orr.w	r0, r0, #1
 8017602:	606b      	str	r3, [r5, #4]
 8017604:	6048      	str	r0, [r1, #4]
 8017606:	6853      	ldr	r3, [r2, #4]
 8017608:	f043 0301 	orr.w	r3, r3, #1
 801760c:	6053      	str	r3, [r2, #4]
 801760e:	3108      	adds	r1, #8
 8017610:	4648      	mov	r0, r9
 8017612:	f7ff f8d3 	bl	80167bc <_free_r>
 8017616:	4648      	mov	r0, r9
 8017618:	f7fb fbf8 	bl	8012e0c <__malloc_unlock>
 801761c:	f105 0b08 	add.w	fp, r5, #8
 8017620:	e718      	b.n	8017454 <_realloc_r+0x38>
 8017622:	68a3      	ldr	r3, [r4, #8]
 8017624:	612b      	str	r3, [r5, #16]
 8017626:	68e3      	ldr	r3, [r4, #12]
 8017628:	616b      	str	r3, [r5, #20]
 801762a:	2a24      	cmp	r2, #36	; 0x24
 801762c:	bf01      	itttt	eq
 801762e:	6923      	ldreq	r3, [r4, #16]
 8017630:	61ab      	streq	r3, [r5, #24]
 8017632:	6963      	ldreq	r3, [r4, #20]
 8017634:	61eb      	streq	r3, [r5, #28]
 8017636:	bf19      	ittee	ne
 8017638:	3410      	addne	r4, #16
 801763a:	f105 0018 	addne.w	r0, r5, #24
 801763e:	f105 0020 	addeq.w	r0, r5, #32
 8017642:	3418      	addeq	r4, #24
 8017644:	e7c7      	b.n	80175d6 <_realloc_r+0x1ba>
 8017646:	4621      	mov	r1, r4
 8017648:	f7ff fb64 	bl	8016d14 <memmove>
 801764c:	e7c9      	b.n	80175e2 <_realloc_r+0x1c6>
 801764e:	45d8      	cmp	r8, fp
 8017650:	dc31      	bgt.n	80176b6 <_realloc_r+0x29a>
 8017652:	4628      	mov	r0, r5
 8017654:	68eb      	ldr	r3, [r5, #12]
 8017656:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801765a:	60d3      	str	r3, [r2, #12]
 801765c:	609a      	str	r2, [r3, #8]
 801765e:	1f32      	subs	r2, r6, #4
 8017660:	2a24      	cmp	r2, #36	; 0x24
 8017662:	d824      	bhi.n	80176ae <_realloc_r+0x292>
 8017664:	2a13      	cmp	r2, #19
 8017666:	d908      	bls.n	801767a <_realloc_r+0x25e>
 8017668:	6823      	ldr	r3, [r4, #0]
 801766a:	60ab      	str	r3, [r5, #8]
 801766c:	6863      	ldr	r3, [r4, #4]
 801766e:	60eb      	str	r3, [r5, #12]
 8017670:	2a1b      	cmp	r2, #27
 8017672:	d80a      	bhi.n	801768a <_realloc_r+0x26e>
 8017674:	3408      	adds	r4, #8
 8017676:	f105 0010 	add.w	r0, r5, #16
 801767a:	6823      	ldr	r3, [r4, #0]
 801767c:	6003      	str	r3, [r0, #0]
 801767e:	6863      	ldr	r3, [r4, #4]
 8017680:	6043      	str	r3, [r0, #4]
 8017682:	68a3      	ldr	r3, [r4, #8]
 8017684:	6083      	str	r3, [r0, #8]
 8017686:	465f      	mov	r7, fp
 8017688:	e7ab      	b.n	80175e2 <_realloc_r+0x1c6>
 801768a:	68a3      	ldr	r3, [r4, #8]
 801768c:	612b      	str	r3, [r5, #16]
 801768e:	68e3      	ldr	r3, [r4, #12]
 8017690:	616b      	str	r3, [r5, #20]
 8017692:	2a24      	cmp	r2, #36	; 0x24
 8017694:	bf01      	itttt	eq
 8017696:	6923      	ldreq	r3, [r4, #16]
 8017698:	61ab      	streq	r3, [r5, #24]
 801769a:	6963      	ldreq	r3, [r4, #20]
 801769c:	61eb      	streq	r3, [r5, #28]
 801769e:	bf19      	ittee	ne
 80176a0:	3410      	addne	r4, #16
 80176a2:	f105 0018 	addne.w	r0, r5, #24
 80176a6:	f105 0020 	addeq.w	r0, r5, #32
 80176aa:	3418      	addeq	r4, #24
 80176ac:	e7e5      	b.n	801767a <_realloc_r+0x25e>
 80176ae:	4621      	mov	r1, r4
 80176b0:	f7ff fb30 	bl	8016d14 <memmove>
 80176b4:	e7e7      	b.n	8017686 <_realloc_r+0x26a>
 80176b6:	4611      	mov	r1, r2
 80176b8:	4648      	mov	r0, r9
 80176ba:	f7fb f95d 	bl	8012978 <_malloc_r>
 80176be:	4683      	mov	fp, r0
 80176c0:	2800      	cmp	r0, #0
 80176c2:	f43f af51 	beq.w	8017568 <_realloc_r+0x14c>
 80176c6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80176ca:	f023 0301 	bic.w	r3, r3, #1
 80176ce:	4453      	add	r3, sl
 80176d0:	f1a0 0208 	sub.w	r2, r0, #8
 80176d4:	4293      	cmp	r3, r2
 80176d6:	d107      	bne.n	80176e8 <_realloc_r+0x2cc>
 80176d8:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80176dc:	f027 0703 	bic.w	r7, r7, #3
 80176e0:	4437      	add	r7, r6
 80176e2:	e6fc      	b.n	80174de <_realloc_r+0xc2>
 80176e4:	200008e8 	.word	0x200008e8
 80176e8:	1f32      	subs	r2, r6, #4
 80176ea:	2a24      	cmp	r2, #36	; 0x24
 80176ec:	d82d      	bhi.n	801774a <_realloc_r+0x32e>
 80176ee:	2a13      	cmp	r2, #19
 80176f0:	d928      	bls.n	8017744 <_realloc_r+0x328>
 80176f2:	6823      	ldr	r3, [r4, #0]
 80176f4:	6003      	str	r3, [r0, #0]
 80176f6:	6863      	ldr	r3, [r4, #4]
 80176f8:	6043      	str	r3, [r0, #4]
 80176fa:	2a1b      	cmp	r2, #27
 80176fc:	d80e      	bhi.n	801771c <_realloc_r+0x300>
 80176fe:	f104 0208 	add.w	r2, r4, #8
 8017702:	f100 0308 	add.w	r3, r0, #8
 8017706:	6811      	ldr	r1, [r2, #0]
 8017708:	6019      	str	r1, [r3, #0]
 801770a:	6851      	ldr	r1, [r2, #4]
 801770c:	6059      	str	r1, [r3, #4]
 801770e:	6892      	ldr	r2, [r2, #8]
 8017710:	609a      	str	r2, [r3, #8]
 8017712:	4621      	mov	r1, r4
 8017714:	4648      	mov	r0, r9
 8017716:	f7ff f851 	bl	80167bc <_free_r>
 801771a:	e725      	b.n	8017568 <_realloc_r+0x14c>
 801771c:	68a3      	ldr	r3, [r4, #8]
 801771e:	6083      	str	r3, [r0, #8]
 8017720:	68e3      	ldr	r3, [r4, #12]
 8017722:	60c3      	str	r3, [r0, #12]
 8017724:	2a24      	cmp	r2, #36	; 0x24
 8017726:	bf01      	itttt	eq
 8017728:	6923      	ldreq	r3, [r4, #16]
 801772a:	6103      	streq	r3, [r0, #16]
 801772c:	6961      	ldreq	r1, [r4, #20]
 801772e:	6141      	streq	r1, [r0, #20]
 8017730:	bf19      	ittee	ne
 8017732:	f104 0210 	addne.w	r2, r4, #16
 8017736:	f100 0310 	addne.w	r3, r0, #16
 801773a:	f104 0218 	addeq.w	r2, r4, #24
 801773e:	f100 0318 	addeq.w	r3, r0, #24
 8017742:	e7e0      	b.n	8017706 <_realloc_r+0x2ea>
 8017744:	4603      	mov	r3, r0
 8017746:	4622      	mov	r2, r4
 8017748:	e7dd      	b.n	8017706 <_realloc_r+0x2ea>
 801774a:	4621      	mov	r1, r4
 801774c:	f7ff fae2 	bl	8016d14 <memmove>
 8017750:	e7df      	b.n	8017712 <_realloc_r+0x2f6>
 8017752:	4637      	mov	r7, r6
 8017754:	e6c3      	b.n	80174de <_realloc_r+0xc2>
 8017756:	431f      	orrs	r7, r3
 8017758:	606f      	str	r7, [r5, #4]
 801775a:	6853      	ldr	r3, [r2, #4]
 801775c:	f043 0301 	orr.w	r3, r3, #1
 8017760:	6053      	str	r3, [r2, #4]
 8017762:	e758      	b.n	8017616 <_realloc_r+0x1fa>
 8017764:	0000      	movs	r0, r0
	...

08017768 <frexp>:
 8017768:	2200      	movs	r2, #0
 801776a:	ee10 1a90 	vmov	r1, s1
 801776e:	6002      	str	r2, [r0, #0]
 8017770:	4a17      	ldr	r2, [pc, #92]	; (80177d0 <frexp+0x68>)
 8017772:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017776:	4293      	cmp	r3, r2
 8017778:	dc23      	bgt.n	80177c2 <frexp+0x5a>
 801777a:	ee10 2a10 	vmov	r2, s0
 801777e:	431a      	orrs	r2, r3
 8017780:	d01f      	beq.n	80177c2 <frexp+0x5a>
 8017782:	4a14      	ldr	r2, [pc, #80]	; (80177d4 <frexp+0x6c>)
 8017784:	400a      	ands	r2, r1
 8017786:	b952      	cbnz	r2, 801779e <frexp+0x36>
 8017788:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80177c8 <frexp+0x60>
 801778c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017790:	ee10 1a90 	vmov	r1, s1
 8017794:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8017798:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801779c:	6002      	str	r2, [r0, #0]
 801779e:	6802      	ldr	r2, [r0, #0]
 80177a0:	151b      	asrs	r3, r3, #20
 80177a2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80177a6:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80177aa:	4413      	add	r3, r2
 80177ac:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80177b0:	6003      	str	r3, [r0, #0]
 80177b2:	ec53 2b10 	vmov	r2, r3, d0
 80177b6:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 80177ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80177be:	ec43 2b10 	vmov	d0, r2, r3
 80177c2:	4770      	bx	lr
 80177c4:	f3af 8000 	nop.w
 80177c8:	00000000 	.word	0x00000000
 80177cc:	43500000 	.word	0x43500000
 80177d0:	7fefffff 	.word	0x7fefffff
 80177d4:	7ff00000 	.word	0x7ff00000

080177d8 <__sread>:
 80177d8:	b510      	push	{r4, lr}
 80177da:	460c      	mov	r4, r1
 80177dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80177e0:	f000 fff8 	bl	80187d4 <_read_r>
 80177e4:	2800      	cmp	r0, #0
 80177e6:	bfab      	itete	ge
 80177e8:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 80177ea:	89a3      	ldrhlt	r3, [r4, #12]
 80177ec:	181b      	addge	r3, r3, r0
 80177ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80177f2:	bfac      	ite	ge
 80177f4:	6523      	strge	r3, [r4, #80]	; 0x50
 80177f6:	81a3      	strhlt	r3, [r4, #12]
 80177f8:	bd10      	pop	{r4, pc}

080177fa <__swrite>:
 80177fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177fe:	461f      	mov	r7, r3
 8017800:	898b      	ldrh	r3, [r1, #12]
 8017802:	05db      	lsls	r3, r3, #23
 8017804:	4605      	mov	r5, r0
 8017806:	460c      	mov	r4, r1
 8017808:	4616      	mov	r6, r2
 801780a:	d505      	bpl.n	8017818 <__swrite+0x1e>
 801780c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017810:	2302      	movs	r3, #2
 8017812:	2200      	movs	r2, #0
 8017814:	f000 ffba 	bl	801878c <_lseek_r>
 8017818:	89a3      	ldrh	r3, [r4, #12]
 801781a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801781e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017822:	81a3      	strh	r3, [r4, #12]
 8017824:	4632      	mov	r2, r6
 8017826:	463b      	mov	r3, r7
 8017828:	4628      	mov	r0, r5
 801782a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801782e:	f000 bdf7 	b.w	8018420 <_write_r>

08017832 <__sseek>:
 8017832:	b510      	push	{r4, lr}
 8017834:	460c      	mov	r4, r1
 8017836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801783a:	f000 ffa7 	bl	801878c <_lseek_r>
 801783e:	1c43      	adds	r3, r0, #1
 8017840:	89a3      	ldrh	r3, [r4, #12]
 8017842:	bf15      	itete	ne
 8017844:	6520      	strne	r0, [r4, #80]	; 0x50
 8017846:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801784a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801784e:	81a3      	strheq	r3, [r4, #12]
 8017850:	bf18      	it	ne
 8017852:	81a3      	strhne	r3, [r4, #12]
 8017854:	bd10      	pop	{r4, pc}

08017856 <__sclose>:
 8017856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801785a:	f000 be89 	b.w	8018570 <_close_r>

0801785e <strncpy>:
 801785e:	b510      	push	{r4, lr}
 8017860:	3901      	subs	r1, #1
 8017862:	4603      	mov	r3, r0
 8017864:	b132      	cbz	r2, 8017874 <strncpy+0x16>
 8017866:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801786a:	f803 4b01 	strb.w	r4, [r3], #1
 801786e:	3a01      	subs	r2, #1
 8017870:	2c00      	cmp	r4, #0
 8017872:	d1f7      	bne.n	8017864 <strncpy+0x6>
 8017874:	441a      	add	r2, r3
 8017876:	2100      	movs	r1, #0
 8017878:	4293      	cmp	r3, r2
 801787a:	d100      	bne.n	801787e <strncpy+0x20>
 801787c:	bd10      	pop	{r4, pc}
 801787e:	f803 1b01 	strb.w	r1, [r3], #1
 8017882:	e7f9      	b.n	8017878 <strncpy+0x1a>

08017884 <__ssprint_r>:
 8017884:	6893      	ldr	r3, [r2, #8]
 8017886:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801788a:	4680      	mov	r8, r0
 801788c:	460c      	mov	r4, r1
 801788e:	4617      	mov	r7, r2
 8017890:	2b00      	cmp	r3, #0
 8017892:	d061      	beq.n	8017958 <__ssprint_r+0xd4>
 8017894:	2300      	movs	r3, #0
 8017896:	f8d2 a000 	ldr.w	sl, [r2]
 801789a:	9301      	str	r3, [sp, #4]
 801789c:	469b      	mov	fp, r3
 801789e:	f1bb 0f00 	cmp.w	fp, #0
 80178a2:	d02b      	beq.n	80178fc <__ssprint_r+0x78>
 80178a4:	68a6      	ldr	r6, [r4, #8]
 80178a6:	455e      	cmp	r6, fp
 80178a8:	d844      	bhi.n	8017934 <__ssprint_r+0xb0>
 80178aa:	89a2      	ldrh	r2, [r4, #12]
 80178ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80178b0:	d03e      	beq.n	8017930 <__ssprint_r+0xac>
 80178b2:	6820      	ldr	r0, [r4, #0]
 80178b4:	6921      	ldr	r1, [r4, #16]
 80178b6:	6965      	ldr	r5, [r4, #20]
 80178b8:	eba0 0901 	sub.w	r9, r0, r1
 80178bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80178c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80178c4:	f109 0001 	add.w	r0, r9, #1
 80178c8:	106d      	asrs	r5, r5, #1
 80178ca:	4458      	add	r0, fp
 80178cc:	4285      	cmp	r5, r0
 80178ce:	bf38      	it	cc
 80178d0:	4605      	movcc	r5, r0
 80178d2:	0553      	lsls	r3, r2, #21
 80178d4:	d545      	bpl.n	8017962 <__ssprint_r+0xde>
 80178d6:	4629      	mov	r1, r5
 80178d8:	4640      	mov	r0, r8
 80178da:	f7fb f84d 	bl	8012978 <_malloc_r>
 80178de:	4606      	mov	r6, r0
 80178e0:	b9a0      	cbnz	r0, 801790c <__ssprint_r+0x88>
 80178e2:	230c      	movs	r3, #12
 80178e4:	f8c8 3000 	str.w	r3, [r8]
 80178e8:	89a3      	ldrh	r3, [r4, #12]
 80178ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80178ee:	81a3      	strh	r3, [r4, #12]
 80178f0:	2300      	movs	r3, #0
 80178f2:	e9c7 3301 	strd	r3, r3, [r7, #4]
 80178f6:	f04f 30ff 	mov.w	r0, #4294967295
 80178fa:	e02f      	b.n	801795c <__ssprint_r+0xd8>
 80178fc:	f8da 3000 	ldr.w	r3, [sl]
 8017900:	f8da b004 	ldr.w	fp, [sl, #4]
 8017904:	9301      	str	r3, [sp, #4]
 8017906:	f10a 0a08 	add.w	sl, sl, #8
 801790a:	e7c8      	b.n	801789e <__ssprint_r+0x1a>
 801790c:	464a      	mov	r2, r9
 801790e:	6921      	ldr	r1, [r4, #16]
 8017910:	f7ff f9f2 	bl	8016cf8 <memcpy>
 8017914:	89a2      	ldrh	r2, [r4, #12]
 8017916:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801791a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801791e:	81a2      	strh	r2, [r4, #12]
 8017920:	6126      	str	r6, [r4, #16]
 8017922:	6165      	str	r5, [r4, #20]
 8017924:	444e      	add	r6, r9
 8017926:	eba5 0509 	sub.w	r5, r5, r9
 801792a:	6026      	str	r6, [r4, #0]
 801792c:	60a5      	str	r5, [r4, #8]
 801792e:	465e      	mov	r6, fp
 8017930:	455e      	cmp	r6, fp
 8017932:	d900      	bls.n	8017936 <__ssprint_r+0xb2>
 8017934:	465e      	mov	r6, fp
 8017936:	4632      	mov	r2, r6
 8017938:	9901      	ldr	r1, [sp, #4]
 801793a:	6820      	ldr	r0, [r4, #0]
 801793c:	f7ff f9ea 	bl	8016d14 <memmove>
 8017940:	68a2      	ldr	r2, [r4, #8]
 8017942:	1b92      	subs	r2, r2, r6
 8017944:	60a2      	str	r2, [r4, #8]
 8017946:	6822      	ldr	r2, [r4, #0]
 8017948:	4432      	add	r2, r6
 801794a:	6022      	str	r2, [r4, #0]
 801794c:	68ba      	ldr	r2, [r7, #8]
 801794e:	eba2 030b 	sub.w	r3, r2, fp
 8017952:	60bb      	str	r3, [r7, #8]
 8017954:	2b00      	cmp	r3, #0
 8017956:	d1d1      	bne.n	80178fc <__ssprint_r+0x78>
 8017958:	2000      	movs	r0, #0
 801795a:	6078      	str	r0, [r7, #4]
 801795c:	b003      	add	sp, #12
 801795e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017962:	462a      	mov	r2, r5
 8017964:	4640      	mov	r0, r8
 8017966:	f7ff fd59 	bl	801741c <_realloc_r>
 801796a:	4606      	mov	r6, r0
 801796c:	2800      	cmp	r0, #0
 801796e:	d1d7      	bne.n	8017920 <__ssprint_r+0x9c>
 8017970:	6921      	ldr	r1, [r4, #16]
 8017972:	4640      	mov	r0, r8
 8017974:	f7fe ff22 	bl	80167bc <_free_r>
 8017978:	e7b3      	b.n	80178e2 <__ssprint_r+0x5e>

0801797a <__sprint_r>:
 801797a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801797e:	6893      	ldr	r3, [r2, #8]
 8017980:	4680      	mov	r8, r0
 8017982:	460f      	mov	r7, r1
 8017984:	4614      	mov	r4, r2
 8017986:	b91b      	cbnz	r3, 8017990 <__sprint_r+0x16>
 8017988:	6053      	str	r3, [r2, #4]
 801798a:	4618      	mov	r0, r3
 801798c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017990:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8017992:	049d      	lsls	r5, r3, #18
 8017994:	d520      	bpl.n	80179d8 <__sprint_r+0x5e>
 8017996:	6815      	ldr	r5, [r2, #0]
 8017998:	3508      	adds	r5, #8
 801799a:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 801799e:	f04f 0900 	mov.w	r9, #0
 80179a2:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 80179a6:	45ca      	cmp	sl, r9
 80179a8:	dc0b      	bgt.n	80179c2 <__sprint_r+0x48>
 80179aa:	68a3      	ldr	r3, [r4, #8]
 80179ac:	f026 0003 	bic.w	r0, r6, #3
 80179b0:	1a18      	subs	r0, r3, r0
 80179b2:	60a0      	str	r0, [r4, #8]
 80179b4:	3508      	adds	r5, #8
 80179b6:	2800      	cmp	r0, #0
 80179b8:	d1ef      	bne.n	801799a <__sprint_r+0x20>
 80179ba:	2300      	movs	r3, #0
 80179bc:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80179c0:	e7e4      	b.n	801798c <__sprint_r+0x12>
 80179c2:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 80179c6:	463a      	mov	r2, r7
 80179c8:	4640      	mov	r0, r8
 80179ca:	f000 fe8c 	bl	80186e6 <_fputwc_r>
 80179ce:	1c43      	adds	r3, r0, #1
 80179d0:	d0f3      	beq.n	80179ba <__sprint_r+0x40>
 80179d2:	f109 0901 	add.w	r9, r9, #1
 80179d6:	e7e6      	b.n	80179a6 <__sprint_r+0x2c>
 80179d8:	f7fe ffb0 	bl	801693c <__sfvwrite_r>
 80179dc:	e7ed      	b.n	80179ba <__sprint_r+0x40>
	...

080179e0 <_vfiprintf_r>:
 80179e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179e4:	ed2d 8b02 	vpush	{d8}
 80179e8:	b0b9      	sub	sp, #228	; 0xe4
 80179ea:	460f      	mov	r7, r1
 80179ec:	9201      	str	r2, [sp, #4]
 80179ee:	461d      	mov	r5, r3
 80179f0:	461c      	mov	r4, r3
 80179f2:	4681      	mov	r9, r0
 80179f4:	b118      	cbz	r0, 80179fe <_vfiprintf_r+0x1e>
 80179f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80179f8:	b90b      	cbnz	r3, 80179fe <_vfiprintf_r+0x1e>
 80179fa:	f7fe fe4f 	bl	801669c <__sinit>
 80179fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017a00:	07d8      	lsls	r0, r3, #31
 8017a02:	d405      	bmi.n	8017a10 <_vfiprintf_r+0x30>
 8017a04:	89bb      	ldrh	r3, [r7, #12]
 8017a06:	0599      	lsls	r1, r3, #22
 8017a08:	d402      	bmi.n	8017a10 <_vfiprintf_r+0x30>
 8017a0a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8017a0c:	f7ff f906 	bl	8016c1c <__retarget_lock_acquire_recursive>
 8017a10:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8017a14:	049a      	lsls	r2, r3, #18
 8017a16:	d406      	bmi.n	8017a26 <_vfiprintf_r+0x46>
 8017a18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017a1c:	81bb      	strh	r3, [r7, #12]
 8017a1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017a20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8017a24:	667b      	str	r3, [r7, #100]	; 0x64
 8017a26:	89bb      	ldrh	r3, [r7, #12]
 8017a28:	071e      	lsls	r6, r3, #28
 8017a2a:	d501      	bpl.n	8017a30 <_vfiprintf_r+0x50>
 8017a2c:	693b      	ldr	r3, [r7, #16]
 8017a2e:	b9bb      	cbnz	r3, 8017a60 <_vfiprintf_r+0x80>
 8017a30:	4639      	mov	r1, r7
 8017a32:	4648      	mov	r0, r9
 8017a34:	f7fd fee8 	bl	8015808 <__swsetup_r>
 8017a38:	b190      	cbz	r0, 8017a60 <_vfiprintf_r+0x80>
 8017a3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017a3c:	07d8      	lsls	r0, r3, #31
 8017a3e:	d508      	bpl.n	8017a52 <_vfiprintf_r+0x72>
 8017a40:	f04f 33ff 	mov.w	r3, #4294967295
 8017a44:	9302      	str	r3, [sp, #8]
 8017a46:	9802      	ldr	r0, [sp, #8]
 8017a48:	b039      	add	sp, #228	; 0xe4
 8017a4a:	ecbd 8b02 	vpop	{d8}
 8017a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a52:	89bb      	ldrh	r3, [r7, #12]
 8017a54:	0599      	lsls	r1, r3, #22
 8017a56:	d4f3      	bmi.n	8017a40 <_vfiprintf_r+0x60>
 8017a58:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8017a5a:	f7ff f8e0 	bl	8016c1e <__retarget_lock_release_recursive>
 8017a5e:	e7ef      	b.n	8017a40 <_vfiprintf_r+0x60>
 8017a60:	89bb      	ldrh	r3, [r7, #12]
 8017a62:	f003 021a 	and.w	r2, r3, #26
 8017a66:	2a0a      	cmp	r2, #10
 8017a68:	d116      	bne.n	8017a98 <_vfiprintf_r+0xb8>
 8017a6a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8017a6e:	2a00      	cmp	r2, #0
 8017a70:	db12      	blt.n	8017a98 <_vfiprintf_r+0xb8>
 8017a72:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017a74:	07d2      	lsls	r2, r2, #31
 8017a76:	d404      	bmi.n	8017a82 <_vfiprintf_r+0xa2>
 8017a78:	059e      	lsls	r6, r3, #22
 8017a7a:	d402      	bmi.n	8017a82 <_vfiprintf_r+0xa2>
 8017a7c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8017a7e:	f7ff f8ce 	bl	8016c1e <__retarget_lock_release_recursive>
 8017a82:	9a01      	ldr	r2, [sp, #4]
 8017a84:	462b      	mov	r3, r5
 8017a86:	4639      	mov	r1, r7
 8017a88:	4648      	mov	r0, r9
 8017a8a:	b039      	add	sp, #228	; 0xe4
 8017a8c:	ecbd 8b02 	vpop	{d8}
 8017a90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a94:	f000 bc3a 	b.w	801830c <__sbprintf>
 8017a98:	2300      	movs	r3, #0
 8017a9a:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8017a9e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8017aa2:	ae0f      	add	r6, sp, #60	; 0x3c
 8017aa4:	ee08 3a10 	vmov	s16, r3
 8017aa8:	960c      	str	r6, [sp, #48]	; 0x30
 8017aaa:	9307      	str	r3, [sp, #28]
 8017aac:	9302      	str	r3, [sp, #8]
 8017aae:	9b01      	ldr	r3, [sp, #4]
 8017ab0:	461d      	mov	r5, r3
 8017ab2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017ab6:	b10a      	cbz	r2, 8017abc <_vfiprintf_r+0xdc>
 8017ab8:	2a25      	cmp	r2, #37	; 0x25
 8017aba:	d1f9      	bne.n	8017ab0 <_vfiprintf_r+0xd0>
 8017abc:	9b01      	ldr	r3, [sp, #4]
 8017abe:	ebb5 0803 	subs.w	r8, r5, r3
 8017ac2:	d00d      	beq.n	8017ae0 <_vfiprintf_r+0x100>
 8017ac4:	e9c6 3800 	strd	r3, r8, [r6]
 8017ac8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017aca:	4443      	add	r3, r8
 8017acc:	930e      	str	r3, [sp, #56]	; 0x38
 8017ace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017ad0:	3301      	adds	r3, #1
 8017ad2:	2b07      	cmp	r3, #7
 8017ad4:	930d      	str	r3, [sp, #52]	; 0x34
 8017ad6:	dc75      	bgt.n	8017bc4 <_vfiprintf_r+0x1e4>
 8017ad8:	3608      	adds	r6, #8
 8017ada:	9b02      	ldr	r3, [sp, #8]
 8017adc:	4443      	add	r3, r8
 8017ade:	9302      	str	r3, [sp, #8]
 8017ae0:	782b      	ldrb	r3, [r5, #0]
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	f000 83d6 	beq.w	8018294 <_vfiprintf_r+0x8b4>
 8017ae8:	2300      	movs	r3, #0
 8017aea:	f04f 31ff 	mov.w	r1, #4294967295
 8017aee:	1c6a      	adds	r2, r5, #1
 8017af0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8017af4:	9100      	str	r1, [sp, #0]
 8017af6:	9303      	str	r3, [sp, #12]
 8017af8:	469a      	mov	sl, r3
 8017afa:	f812 3b01 	ldrb.w	r3, [r2], #1
 8017afe:	9201      	str	r2, [sp, #4]
 8017b00:	f1a3 0220 	sub.w	r2, r3, #32
 8017b04:	2a5a      	cmp	r2, #90	; 0x5a
 8017b06:	f200 831f 	bhi.w	8018148 <_vfiprintf_r+0x768>
 8017b0a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8017b0e:	009b      	.short	0x009b
 8017b10:	031d031d 	.word	0x031d031d
 8017b14:	031d00a3 	.word	0x031d00a3
 8017b18:	031d031d 	.word	0x031d031d
 8017b1c:	031d0082 	.word	0x031d0082
 8017b20:	00a6031d 	.word	0x00a6031d
 8017b24:	031d00b0 	.word	0x031d00b0
 8017b28:	00b200ad 	.word	0x00b200ad
 8017b2c:	00cd031d 	.word	0x00cd031d
 8017b30:	00d000d0 	.word	0x00d000d0
 8017b34:	00d000d0 	.word	0x00d000d0
 8017b38:	00d000d0 	.word	0x00d000d0
 8017b3c:	00d000d0 	.word	0x00d000d0
 8017b40:	031d00d0 	.word	0x031d00d0
 8017b44:	031d031d 	.word	0x031d031d
 8017b48:	031d031d 	.word	0x031d031d
 8017b4c:	031d031d 	.word	0x031d031d
 8017b50:	031d031d 	.word	0x031d031d
 8017b54:	010800fa 	.word	0x010800fa
 8017b58:	031d031d 	.word	0x031d031d
 8017b5c:	031d031d 	.word	0x031d031d
 8017b60:	031d031d 	.word	0x031d031d
 8017b64:	031d031d 	.word	0x031d031d
 8017b68:	031d031d 	.word	0x031d031d
 8017b6c:	031d0158 	.word	0x031d0158
 8017b70:	031d031d 	.word	0x031d031d
 8017b74:	031d01a1 	.word	0x031d01a1
 8017b78:	031d027e 	.word	0x031d027e
 8017b7c:	029e031d 	.word	0x029e031d
 8017b80:	031d031d 	.word	0x031d031d
 8017b84:	031d031d 	.word	0x031d031d
 8017b88:	031d031d 	.word	0x031d031d
 8017b8c:	031d031d 	.word	0x031d031d
 8017b90:	031d031d 	.word	0x031d031d
 8017b94:	010a00fa 	.word	0x010a00fa
 8017b98:	031d031d 	.word	0x031d031d
 8017b9c:	00e0031d 	.word	0x00e0031d
 8017ba0:	00f4010a 	.word	0x00f4010a
 8017ba4:	00ed031d 	.word	0x00ed031d
 8017ba8:	0136031d 	.word	0x0136031d
 8017bac:	018f015a 	.word	0x018f015a
 8017bb0:	031d00f4 	.word	0x031d00f4
 8017bb4:	009901a1 	.word	0x009901a1
 8017bb8:	031d0280 	.word	0x031d0280
 8017bbc:	0065031d 	.word	0x0065031d
 8017bc0:	0099031d 	.word	0x0099031d
 8017bc4:	aa0c      	add	r2, sp, #48	; 0x30
 8017bc6:	4639      	mov	r1, r7
 8017bc8:	4648      	mov	r0, r9
 8017bca:	f7ff fed6 	bl	801797a <__sprint_r>
 8017bce:	2800      	cmp	r0, #0
 8017bd0:	f040 833f 	bne.w	8018252 <_vfiprintf_r+0x872>
 8017bd4:	ae0f      	add	r6, sp, #60	; 0x3c
 8017bd6:	e780      	b.n	8017ada <_vfiprintf_r+0xfa>
 8017bd8:	4a9c      	ldr	r2, [pc, #624]	; (8017e4c <_vfiprintf_r+0x46c>)
 8017bda:	9205      	str	r2, [sp, #20]
 8017bdc:	f01a 0220 	ands.w	r2, sl, #32
 8017be0:	f000 8235 	beq.w	801804e <_vfiprintf_r+0x66e>
 8017be4:	3407      	adds	r4, #7
 8017be6:	f024 0207 	bic.w	r2, r4, #7
 8017bea:	4693      	mov	fp, r2
 8017bec:	6855      	ldr	r5, [r2, #4]
 8017bee:	f85b 4b08 	ldr.w	r4, [fp], #8
 8017bf2:	f01a 0f01 	tst.w	sl, #1
 8017bf6:	d009      	beq.n	8017c0c <_vfiprintf_r+0x22c>
 8017bf8:	ea54 0205 	orrs.w	r2, r4, r5
 8017bfc:	bf1f      	itttt	ne
 8017bfe:	2230      	movne	r2, #48	; 0x30
 8017c00:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 8017c04:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 8017c08:	f04a 0a02 	orrne.w	sl, sl, #2
 8017c0c:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8017c10:	e11a      	b.n	8017e48 <_vfiprintf_r+0x468>
 8017c12:	4648      	mov	r0, r9
 8017c14:	f7fe fffc 	bl	8016c10 <_localeconv_r>
 8017c18:	6843      	ldr	r3, [r0, #4]
 8017c1a:	4618      	mov	r0, r3
 8017c1c:	ee08 3a10 	vmov	s16, r3
 8017c20:	f7e8 fb0e 	bl	8000240 <strlen>
 8017c24:	9007      	str	r0, [sp, #28]
 8017c26:	4648      	mov	r0, r9
 8017c28:	f7fe fff2 	bl	8016c10 <_localeconv_r>
 8017c2c:	6883      	ldr	r3, [r0, #8]
 8017c2e:	9306      	str	r3, [sp, #24]
 8017c30:	9b07      	ldr	r3, [sp, #28]
 8017c32:	b12b      	cbz	r3, 8017c40 <_vfiprintf_r+0x260>
 8017c34:	9b06      	ldr	r3, [sp, #24]
 8017c36:	b11b      	cbz	r3, 8017c40 <_vfiprintf_r+0x260>
 8017c38:	781b      	ldrb	r3, [r3, #0]
 8017c3a:	b10b      	cbz	r3, 8017c40 <_vfiprintf_r+0x260>
 8017c3c:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8017c40:	9a01      	ldr	r2, [sp, #4]
 8017c42:	e75a      	b.n	8017afa <_vfiprintf_r+0x11a>
 8017c44:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d1f9      	bne.n	8017c40 <_vfiprintf_r+0x260>
 8017c4c:	2320      	movs	r3, #32
 8017c4e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8017c52:	e7f5      	b.n	8017c40 <_vfiprintf_r+0x260>
 8017c54:	f04a 0a01 	orr.w	sl, sl, #1
 8017c58:	e7f2      	b.n	8017c40 <_vfiprintf_r+0x260>
 8017c5a:	f854 3b04 	ldr.w	r3, [r4], #4
 8017c5e:	9303      	str	r3, [sp, #12]
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	daed      	bge.n	8017c40 <_vfiprintf_r+0x260>
 8017c64:	425b      	negs	r3, r3
 8017c66:	9303      	str	r3, [sp, #12]
 8017c68:	f04a 0a04 	orr.w	sl, sl, #4
 8017c6c:	e7e8      	b.n	8017c40 <_vfiprintf_r+0x260>
 8017c6e:	232b      	movs	r3, #43	; 0x2b
 8017c70:	e7ed      	b.n	8017c4e <_vfiprintf_r+0x26e>
 8017c72:	9a01      	ldr	r2, [sp, #4]
 8017c74:	f812 3b01 	ldrb.w	r3, [r2], #1
 8017c78:	2b2a      	cmp	r3, #42	; 0x2a
 8017c7a:	d112      	bne.n	8017ca2 <_vfiprintf_r+0x2c2>
 8017c7c:	f854 0b04 	ldr.w	r0, [r4], #4
 8017c80:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8017c84:	e9cd 3200 	strd	r3, r2, [sp]
 8017c88:	e7da      	b.n	8017c40 <_vfiprintf_r+0x260>
 8017c8a:	9b00      	ldr	r3, [sp, #0]
 8017c8c:	200a      	movs	r0, #10
 8017c8e:	fb00 1303 	mla	r3, r0, r3, r1
 8017c92:	9300      	str	r3, [sp, #0]
 8017c94:	f812 3b01 	ldrb.w	r3, [r2], #1
 8017c98:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8017c9c:	2909      	cmp	r1, #9
 8017c9e:	d9f4      	bls.n	8017c8a <_vfiprintf_r+0x2aa>
 8017ca0:	e72d      	b.n	8017afe <_vfiprintf_r+0x11e>
 8017ca2:	2100      	movs	r1, #0
 8017ca4:	9100      	str	r1, [sp, #0]
 8017ca6:	e7f7      	b.n	8017c98 <_vfiprintf_r+0x2b8>
 8017ca8:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8017cac:	e7c8      	b.n	8017c40 <_vfiprintf_r+0x260>
 8017cae:	2100      	movs	r1, #0
 8017cb0:	9a01      	ldr	r2, [sp, #4]
 8017cb2:	9103      	str	r1, [sp, #12]
 8017cb4:	9903      	ldr	r1, [sp, #12]
 8017cb6:	3b30      	subs	r3, #48	; 0x30
 8017cb8:	200a      	movs	r0, #10
 8017cba:	fb00 3301 	mla	r3, r0, r1, r3
 8017cbe:	9303      	str	r3, [sp, #12]
 8017cc0:	f812 3b01 	ldrb.w	r3, [r2], #1
 8017cc4:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8017cc8:	2909      	cmp	r1, #9
 8017cca:	d9f3      	bls.n	8017cb4 <_vfiprintf_r+0x2d4>
 8017ccc:	e717      	b.n	8017afe <_vfiprintf_r+0x11e>
 8017cce:	9b01      	ldr	r3, [sp, #4]
 8017cd0:	781b      	ldrb	r3, [r3, #0]
 8017cd2:	2b68      	cmp	r3, #104	; 0x68
 8017cd4:	bf01      	itttt	eq
 8017cd6:	9b01      	ldreq	r3, [sp, #4]
 8017cd8:	3301      	addeq	r3, #1
 8017cda:	9301      	streq	r3, [sp, #4]
 8017cdc:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8017ce0:	bf18      	it	ne
 8017ce2:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8017ce6:	e7ab      	b.n	8017c40 <_vfiprintf_r+0x260>
 8017ce8:	9b01      	ldr	r3, [sp, #4]
 8017cea:	781b      	ldrb	r3, [r3, #0]
 8017cec:	2b6c      	cmp	r3, #108	; 0x6c
 8017cee:	d105      	bne.n	8017cfc <_vfiprintf_r+0x31c>
 8017cf0:	9b01      	ldr	r3, [sp, #4]
 8017cf2:	3301      	adds	r3, #1
 8017cf4:	9301      	str	r3, [sp, #4]
 8017cf6:	f04a 0a20 	orr.w	sl, sl, #32
 8017cfa:	e7a1      	b.n	8017c40 <_vfiprintf_r+0x260>
 8017cfc:	f04a 0a10 	orr.w	sl, sl, #16
 8017d00:	e79e      	b.n	8017c40 <_vfiprintf_r+0x260>
 8017d02:	46a3      	mov	fp, r4
 8017d04:	2100      	movs	r1, #0
 8017d06:	f85b 3b04 	ldr.w	r3, [fp], #4
 8017d0a:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8017d0e:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8017d12:	2301      	movs	r3, #1
 8017d14:	9300      	str	r3, [sp, #0]
 8017d16:	460d      	mov	r5, r1
 8017d18:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 8017d1c:	e0ad      	b.n	8017e7a <_vfiprintf_r+0x49a>
 8017d1e:	f04a 0a10 	orr.w	sl, sl, #16
 8017d22:	f01a 0f20 	tst.w	sl, #32
 8017d26:	d011      	beq.n	8017d4c <_vfiprintf_r+0x36c>
 8017d28:	3407      	adds	r4, #7
 8017d2a:	f024 0307 	bic.w	r3, r4, #7
 8017d2e:	469b      	mov	fp, r3
 8017d30:	685d      	ldr	r5, [r3, #4]
 8017d32:	f85b 4b08 	ldr.w	r4, [fp], #8
 8017d36:	2d00      	cmp	r5, #0
 8017d38:	da06      	bge.n	8017d48 <_vfiprintf_r+0x368>
 8017d3a:	4264      	negs	r4, r4
 8017d3c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8017d40:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8017d44:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8017d48:	2301      	movs	r3, #1
 8017d4a:	e04a      	b.n	8017de2 <_vfiprintf_r+0x402>
 8017d4c:	46a3      	mov	fp, r4
 8017d4e:	f01a 0f10 	tst.w	sl, #16
 8017d52:	f85b 5b04 	ldr.w	r5, [fp], #4
 8017d56:	d002      	beq.n	8017d5e <_vfiprintf_r+0x37e>
 8017d58:	462c      	mov	r4, r5
 8017d5a:	17ed      	asrs	r5, r5, #31
 8017d5c:	e7eb      	b.n	8017d36 <_vfiprintf_r+0x356>
 8017d5e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8017d62:	d003      	beq.n	8017d6c <_vfiprintf_r+0x38c>
 8017d64:	b22c      	sxth	r4, r5
 8017d66:	f345 35c0 	sbfx	r5, r5, #15, #1
 8017d6a:	e7e4      	b.n	8017d36 <_vfiprintf_r+0x356>
 8017d6c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8017d70:	d0f2      	beq.n	8017d58 <_vfiprintf_r+0x378>
 8017d72:	b26c      	sxtb	r4, r5
 8017d74:	f345 15c0 	sbfx	r5, r5, #7, #1
 8017d78:	e7dd      	b.n	8017d36 <_vfiprintf_r+0x356>
 8017d7a:	f01a 0f20 	tst.w	sl, #32
 8017d7e:	f104 0b04 	add.w	fp, r4, #4
 8017d82:	d007      	beq.n	8017d94 <_vfiprintf_r+0x3b4>
 8017d84:	9a02      	ldr	r2, [sp, #8]
 8017d86:	6823      	ldr	r3, [r4, #0]
 8017d88:	9902      	ldr	r1, [sp, #8]
 8017d8a:	17d2      	asrs	r2, r2, #31
 8017d8c:	e9c3 1200 	strd	r1, r2, [r3]
 8017d90:	465c      	mov	r4, fp
 8017d92:	e68c      	b.n	8017aae <_vfiprintf_r+0xce>
 8017d94:	f01a 0f10 	tst.w	sl, #16
 8017d98:	d003      	beq.n	8017da2 <_vfiprintf_r+0x3c2>
 8017d9a:	6823      	ldr	r3, [r4, #0]
 8017d9c:	9a02      	ldr	r2, [sp, #8]
 8017d9e:	601a      	str	r2, [r3, #0]
 8017da0:	e7f6      	b.n	8017d90 <_vfiprintf_r+0x3b0>
 8017da2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8017da6:	d003      	beq.n	8017db0 <_vfiprintf_r+0x3d0>
 8017da8:	6823      	ldr	r3, [r4, #0]
 8017daa:	9a02      	ldr	r2, [sp, #8]
 8017dac:	801a      	strh	r2, [r3, #0]
 8017dae:	e7ef      	b.n	8017d90 <_vfiprintf_r+0x3b0>
 8017db0:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8017db4:	d0f1      	beq.n	8017d9a <_vfiprintf_r+0x3ba>
 8017db6:	6823      	ldr	r3, [r4, #0]
 8017db8:	9a02      	ldr	r2, [sp, #8]
 8017dba:	701a      	strb	r2, [r3, #0]
 8017dbc:	e7e8      	b.n	8017d90 <_vfiprintf_r+0x3b0>
 8017dbe:	f04a 0a10 	orr.w	sl, sl, #16
 8017dc2:	f01a 0320 	ands.w	r3, sl, #32
 8017dc6:	d01f      	beq.n	8017e08 <_vfiprintf_r+0x428>
 8017dc8:	3407      	adds	r4, #7
 8017dca:	f024 0307 	bic.w	r3, r4, #7
 8017dce:	469b      	mov	fp, r3
 8017dd0:	685d      	ldr	r5, [r3, #4]
 8017dd2:	f85b 4b08 	ldr.w	r4, [fp], #8
 8017dd6:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8017dda:	2300      	movs	r3, #0
 8017ddc:	2200      	movs	r2, #0
 8017dde:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 8017de2:	9a00      	ldr	r2, [sp, #0]
 8017de4:	3201      	adds	r2, #1
 8017de6:	f000 8262 	beq.w	80182ae <_vfiprintf_r+0x8ce>
 8017dea:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8017dee:	9204      	str	r2, [sp, #16]
 8017df0:	ea54 0205 	orrs.w	r2, r4, r5
 8017df4:	f040 8261 	bne.w	80182ba <_vfiprintf_r+0x8da>
 8017df8:	9a00      	ldr	r2, [sp, #0]
 8017dfa:	2a00      	cmp	r2, #0
 8017dfc:	f000 8199 	beq.w	8018132 <_vfiprintf_r+0x752>
 8017e00:	2b01      	cmp	r3, #1
 8017e02:	f040 825d 	bne.w	80182c0 <_vfiprintf_r+0x8e0>
 8017e06:	e139      	b.n	801807c <_vfiprintf_r+0x69c>
 8017e08:	46a3      	mov	fp, r4
 8017e0a:	f01a 0510 	ands.w	r5, sl, #16
 8017e0e:	f85b 4b04 	ldr.w	r4, [fp], #4
 8017e12:	d001      	beq.n	8017e18 <_vfiprintf_r+0x438>
 8017e14:	461d      	mov	r5, r3
 8017e16:	e7de      	b.n	8017dd6 <_vfiprintf_r+0x3f6>
 8017e18:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8017e1c:	d001      	beq.n	8017e22 <_vfiprintf_r+0x442>
 8017e1e:	b2a4      	uxth	r4, r4
 8017e20:	e7d9      	b.n	8017dd6 <_vfiprintf_r+0x3f6>
 8017e22:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8017e26:	d0d6      	beq.n	8017dd6 <_vfiprintf_r+0x3f6>
 8017e28:	b2e4      	uxtb	r4, r4
 8017e2a:	e7f3      	b.n	8017e14 <_vfiprintf_r+0x434>
 8017e2c:	2330      	movs	r3, #48	; 0x30
 8017e2e:	46a3      	mov	fp, r4
 8017e30:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8017e34:	2378      	movs	r3, #120	; 0x78
 8017e36:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 8017e3a:	f85b 4b04 	ldr.w	r4, [fp], #4
 8017e3e:	4b03      	ldr	r3, [pc, #12]	; (8017e4c <_vfiprintf_r+0x46c>)
 8017e40:	9305      	str	r3, [sp, #20]
 8017e42:	2500      	movs	r5, #0
 8017e44:	f04a 0a02 	orr.w	sl, sl, #2
 8017e48:	2302      	movs	r3, #2
 8017e4a:	e7c7      	b.n	8017ddc <_vfiprintf_r+0x3fc>
 8017e4c:	08019404 	.word	0x08019404
 8017e50:	9b00      	ldr	r3, [sp, #0]
 8017e52:	46a3      	mov	fp, r4
 8017e54:	2500      	movs	r5, #0
 8017e56:	1c5c      	adds	r4, r3, #1
 8017e58:	f85b 8b04 	ldr.w	r8, [fp], #4
 8017e5c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8017e60:	f000 80ce 	beq.w	8018000 <_vfiprintf_r+0x620>
 8017e64:	461a      	mov	r2, r3
 8017e66:	4629      	mov	r1, r5
 8017e68:	4640      	mov	r0, r8
 8017e6a:	f7e8 f9f1 	bl	8000250 <memchr>
 8017e6e:	2800      	cmp	r0, #0
 8017e70:	f000 8174 	beq.w	801815c <_vfiprintf_r+0x77c>
 8017e74:	eba0 0308 	sub.w	r3, r0, r8
 8017e78:	9300      	str	r3, [sp, #0]
 8017e7a:	9b00      	ldr	r3, [sp, #0]
 8017e7c:	42ab      	cmp	r3, r5
 8017e7e:	bfb8      	it	lt
 8017e80:	462b      	movlt	r3, r5
 8017e82:	9304      	str	r3, [sp, #16]
 8017e84:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8017e88:	b113      	cbz	r3, 8017e90 <_vfiprintf_r+0x4b0>
 8017e8a:	9b04      	ldr	r3, [sp, #16]
 8017e8c:	3301      	adds	r3, #1
 8017e8e:	9304      	str	r3, [sp, #16]
 8017e90:	f01a 0302 	ands.w	r3, sl, #2
 8017e94:	9308      	str	r3, [sp, #32]
 8017e96:	bf1e      	ittt	ne
 8017e98:	9b04      	ldrne	r3, [sp, #16]
 8017e9a:	3302      	addne	r3, #2
 8017e9c:	9304      	strne	r3, [sp, #16]
 8017e9e:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8017ea2:	9309      	str	r3, [sp, #36]	; 0x24
 8017ea4:	d11f      	bne.n	8017ee6 <_vfiprintf_r+0x506>
 8017ea6:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8017eaa:	1a9c      	subs	r4, r3, r2
 8017eac:	2c00      	cmp	r4, #0
 8017eae:	dd1a      	ble.n	8017ee6 <_vfiprintf_r+0x506>
 8017eb0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8017eb4:	48aa      	ldr	r0, [pc, #680]	; (8018160 <_vfiprintf_r+0x780>)
 8017eb6:	6030      	str	r0, [r6, #0]
 8017eb8:	2c10      	cmp	r4, #16
 8017eba:	f103 0301 	add.w	r3, r3, #1
 8017ebe:	f106 0108 	add.w	r1, r6, #8
 8017ec2:	f300 8153 	bgt.w	801816c <_vfiprintf_r+0x78c>
 8017ec6:	6074      	str	r4, [r6, #4]
 8017ec8:	2b07      	cmp	r3, #7
 8017eca:	4414      	add	r4, r2
 8017ecc:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8017ed0:	f340 815e 	ble.w	8018190 <_vfiprintf_r+0x7b0>
 8017ed4:	aa0c      	add	r2, sp, #48	; 0x30
 8017ed6:	4639      	mov	r1, r7
 8017ed8:	4648      	mov	r0, r9
 8017eda:	f7ff fd4e 	bl	801797a <__sprint_r>
 8017ede:	2800      	cmp	r0, #0
 8017ee0:	f040 81b7 	bne.w	8018252 <_vfiprintf_r+0x872>
 8017ee4:	ae0f      	add	r6, sp, #60	; 0x3c
 8017ee6:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8017eea:	b173      	cbz	r3, 8017f0a <_vfiprintf_r+0x52a>
 8017eec:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 8017ef0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017ef2:	6032      	str	r2, [r6, #0]
 8017ef4:	2201      	movs	r2, #1
 8017ef6:	6072      	str	r2, [r6, #4]
 8017ef8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017efa:	3301      	adds	r3, #1
 8017efc:	3201      	adds	r2, #1
 8017efe:	2b07      	cmp	r3, #7
 8017f00:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8017f04:	f300 8146 	bgt.w	8018194 <_vfiprintf_r+0x7b4>
 8017f08:	3608      	adds	r6, #8
 8017f0a:	9b08      	ldr	r3, [sp, #32]
 8017f0c:	b16b      	cbz	r3, 8017f2a <_vfiprintf_r+0x54a>
 8017f0e:	aa0b      	add	r2, sp, #44	; 0x2c
 8017f10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017f12:	6032      	str	r2, [r6, #0]
 8017f14:	2202      	movs	r2, #2
 8017f16:	6072      	str	r2, [r6, #4]
 8017f18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017f1a:	3301      	adds	r3, #1
 8017f1c:	3202      	adds	r2, #2
 8017f1e:	2b07      	cmp	r3, #7
 8017f20:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8017f24:	f300 813f 	bgt.w	80181a6 <_vfiprintf_r+0x7c6>
 8017f28:	3608      	adds	r6, #8
 8017f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f2c:	2b80      	cmp	r3, #128	; 0x80
 8017f2e:	d11f      	bne.n	8017f70 <_vfiprintf_r+0x590>
 8017f30:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8017f34:	1a9c      	subs	r4, r3, r2
 8017f36:	2c00      	cmp	r4, #0
 8017f38:	dd1a      	ble.n	8017f70 <_vfiprintf_r+0x590>
 8017f3a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8017f3e:	4889      	ldr	r0, [pc, #548]	; (8018164 <_vfiprintf_r+0x784>)
 8017f40:	6030      	str	r0, [r6, #0]
 8017f42:	2c10      	cmp	r4, #16
 8017f44:	f103 0301 	add.w	r3, r3, #1
 8017f48:	f106 0108 	add.w	r1, r6, #8
 8017f4c:	f300 8134 	bgt.w	80181b8 <_vfiprintf_r+0x7d8>
 8017f50:	6074      	str	r4, [r6, #4]
 8017f52:	2b07      	cmp	r3, #7
 8017f54:	4414      	add	r4, r2
 8017f56:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8017f5a:	f340 813f 	ble.w	80181dc <_vfiprintf_r+0x7fc>
 8017f5e:	aa0c      	add	r2, sp, #48	; 0x30
 8017f60:	4639      	mov	r1, r7
 8017f62:	4648      	mov	r0, r9
 8017f64:	f7ff fd09 	bl	801797a <__sprint_r>
 8017f68:	2800      	cmp	r0, #0
 8017f6a:	f040 8172 	bne.w	8018252 <_vfiprintf_r+0x872>
 8017f6e:	ae0f      	add	r6, sp, #60	; 0x3c
 8017f70:	9b00      	ldr	r3, [sp, #0]
 8017f72:	1aec      	subs	r4, r5, r3
 8017f74:	2c00      	cmp	r4, #0
 8017f76:	dd1a      	ble.n	8017fae <_vfiprintf_r+0x5ce>
 8017f78:	4d7a      	ldr	r5, [pc, #488]	; (8018164 <_vfiprintf_r+0x784>)
 8017f7a:	6035      	str	r5, [r6, #0]
 8017f7c:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 8017f80:	2c10      	cmp	r4, #16
 8017f82:	f103 0301 	add.w	r3, r3, #1
 8017f86:	f106 0208 	add.w	r2, r6, #8
 8017f8a:	f300 8129 	bgt.w	80181e0 <_vfiprintf_r+0x800>
 8017f8e:	6074      	str	r4, [r6, #4]
 8017f90:	2b07      	cmp	r3, #7
 8017f92:	440c      	add	r4, r1
 8017f94:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8017f98:	f340 8133 	ble.w	8018202 <_vfiprintf_r+0x822>
 8017f9c:	aa0c      	add	r2, sp, #48	; 0x30
 8017f9e:	4639      	mov	r1, r7
 8017fa0:	4648      	mov	r0, r9
 8017fa2:	f7ff fcea 	bl	801797a <__sprint_r>
 8017fa6:	2800      	cmp	r0, #0
 8017fa8:	f040 8153 	bne.w	8018252 <_vfiprintf_r+0x872>
 8017fac:	ae0f      	add	r6, sp, #60	; 0x3c
 8017fae:	9b00      	ldr	r3, [sp, #0]
 8017fb0:	980e      	ldr	r0, [sp, #56]	; 0x38
 8017fb2:	6073      	str	r3, [r6, #4]
 8017fb4:	4418      	add	r0, r3
 8017fb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017fb8:	f8c6 8000 	str.w	r8, [r6]
 8017fbc:	3301      	adds	r3, #1
 8017fbe:	2b07      	cmp	r3, #7
 8017fc0:	900e      	str	r0, [sp, #56]	; 0x38
 8017fc2:	930d      	str	r3, [sp, #52]	; 0x34
 8017fc4:	f300 811f 	bgt.w	8018206 <_vfiprintf_r+0x826>
 8017fc8:	f106 0308 	add.w	r3, r6, #8
 8017fcc:	f01a 0f04 	tst.w	sl, #4
 8017fd0:	f040 8121 	bne.w	8018216 <_vfiprintf_r+0x836>
 8017fd4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8017fd8:	9904      	ldr	r1, [sp, #16]
 8017fda:	428a      	cmp	r2, r1
 8017fdc:	bfac      	ite	ge
 8017fde:	189b      	addge	r3, r3, r2
 8017fe0:	185b      	addlt	r3, r3, r1
 8017fe2:	9302      	str	r3, [sp, #8]
 8017fe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017fe6:	b13b      	cbz	r3, 8017ff8 <_vfiprintf_r+0x618>
 8017fe8:	aa0c      	add	r2, sp, #48	; 0x30
 8017fea:	4639      	mov	r1, r7
 8017fec:	4648      	mov	r0, r9
 8017fee:	f7ff fcc4 	bl	801797a <__sprint_r>
 8017ff2:	2800      	cmp	r0, #0
 8017ff4:	f040 812d 	bne.w	8018252 <_vfiprintf_r+0x872>
 8017ff8:	2300      	movs	r3, #0
 8017ffa:	930d      	str	r3, [sp, #52]	; 0x34
 8017ffc:	ae0f      	add	r6, sp, #60	; 0x3c
 8017ffe:	e6c7      	b.n	8017d90 <_vfiprintf_r+0x3b0>
 8018000:	4640      	mov	r0, r8
 8018002:	f7e8 f91d 	bl	8000240 <strlen>
 8018006:	9000      	str	r0, [sp, #0]
 8018008:	e737      	b.n	8017e7a <_vfiprintf_r+0x49a>
 801800a:	f04a 0a10 	orr.w	sl, sl, #16
 801800e:	f01a 0320 	ands.w	r3, sl, #32
 8018012:	d008      	beq.n	8018026 <_vfiprintf_r+0x646>
 8018014:	3407      	adds	r4, #7
 8018016:	f024 0307 	bic.w	r3, r4, #7
 801801a:	469b      	mov	fp, r3
 801801c:	685d      	ldr	r5, [r3, #4]
 801801e:	f85b 4b08 	ldr.w	r4, [fp], #8
 8018022:	2301      	movs	r3, #1
 8018024:	e6da      	b.n	8017ddc <_vfiprintf_r+0x3fc>
 8018026:	46a3      	mov	fp, r4
 8018028:	f01a 0510 	ands.w	r5, sl, #16
 801802c:	f85b 4b04 	ldr.w	r4, [fp], #4
 8018030:	d001      	beq.n	8018036 <_vfiprintf_r+0x656>
 8018032:	461d      	mov	r5, r3
 8018034:	e7f5      	b.n	8018022 <_vfiprintf_r+0x642>
 8018036:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 801803a:	d001      	beq.n	8018040 <_vfiprintf_r+0x660>
 801803c:	b2a4      	uxth	r4, r4
 801803e:	e7f0      	b.n	8018022 <_vfiprintf_r+0x642>
 8018040:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8018044:	d0ed      	beq.n	8018022 <_vfiprintf_r+0x642>
 8018046:	b2e4      	uxtb	r4, r4
 8018048:	e7f3      	b.n	8018032 <_vfiprintf_r+0x652>
 801804a:	4a47      	ldr	r2, [pc, #284]	; (8018168 <_vfiprintf_r+0x788>)
 801804c:	e5c5      	b.n	8017bda <_vfiprintf_r+0x1fa>
 801804e:	46a3      	mov	fp, r4
 8018050:	f01a 0510 	ands.w	r5, sl, #16
 8018054:	f85b 4b04 	ldr.w	r4, [fp], #4
 8018058:	d001      	beq.n	801805e <_vfiprintf_r+0x67e>
 801805a:	4615      	mov	r5, r2
 801805c:	e5c9      	b.n	8017bf2 <_vfiprintf_r+0x212>
 801805e:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 8018062:	d001      	beq.n	8018068 <_vfiprintf_r+0x688>
 8018064:	b2a4      	uxth	r4, r4
 8018066:	e5c4      	b.n	8017bf2 <_vfiprintf_r+0x212>
 8018068:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 801806c:	f43f adc1 	beq.w	8017bf2 <_vfiprintf_r+0x212>
 8018070:	b2e4      	uxtb	r4, r4
 8018072:	e7f2      	b.n	801805a <_vfiprintf_r+0x67a>
 8018074:	2c0a      	cmp	r4, #10
 8018076:	f175 0300 	sbcs.w	r3, r5, #0
 801807a:	d205      	bcs.n	8018088 <_vfiprintf_r+0x6a8>
 801807c:	3430      	adds	r4, #48	; 0x30
 801807e:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 8018082:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 8018086:	e137      	b.n	80182f8 <_vfiprintf_r+0x918>
 8018088:	ab38      	add	r3, sp, #224	; 0xe0
 801808a:	9308      	str	r3, [sp, #32]
 801808c:	9b04      	ldr	r3, [sp, #16]
 801808e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018092:	f04f 0a00 	mov.w	sl, #0
 8018096:	9309      	str	r3, [sp, #36]	; 0x24
 8018098:	9b08      	ldr	r3, [sp, #32]
 801809a:	220a      	movs	r2, #10
 801809c:	f103 38ff 	add.w	r8, r3, #4294967295
 80180a0:	4620      	mov	r0, r4
 80180a2:	2300      	movs	r3, #0
 80180a4:	4629      	mov	r1, r5
 80180a6:	f7e8 f923 	bl	80002f0 <__aeabi_uldivmod>
 80180aa:	9b08      	ldr	r3, [sp, #32]
 80180ac:	3230      	adds	r2, #48	; 0x30
 80180ae:	f803 2c01 	strb.w	r2, [r3, #-1]
 80180b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180b4:	f10a 0a01 	add.w	sl, sl, #1
 80180b8:	b1db      	cbz	r3, 80180f2 <_vfiprintf_r+0x712>
 80180ba:	9b06      	ldr	r3, [sp, #24]
 80180bc:	781b      	ldrb	r3, [r3, #0]
 80180be:	4553      	cmp	r3, sl
 80180c0:	d117      	bne.n	80180f2 <_vfiprintf_r+0x712>
 80180c2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80180c6:	d014      	beq.n	80180f2 <_vfiprintf_r+0x712>
 80180c8:	2c0a      	cmp	r4, #10
 80180ca:	f175 0300 	sbcs.w	r3, r5, #0
 80180ce:	d310      	bcc.n	80180f2 <_vfiprintf_r+0x712>
 80180d0:	9b07      	ldr	r3, [sp, #28]
 80180d2:	eba8 0803 	sub.w	r8, r8, r3
 80180d6:	461a      	mov	r2, r3
 80180d8:	ee18 1a10 	vmov	r1, s16
 80180dc:	4640      	mov	r0, r8
 80180de:	f7ff fbbe 	bl	801785e <strncpy>
 80180e2:	9b06      	ldr	r3, [sp, #24]
 80180e4:	785b      	ldrb	r3, [r3, #1]
 80180e6:	b1a3      	cbz	r3, 8018112 <_vfiprintf_r+0x732>
 80180e8:	9b06      	ldr	r3, [sp, #24]
 80180ea:	3301      	adds	r3, #1
 80180ec:	9306      	str	r3, [sp, #24]
 80180ee:	f04f 0a00 	mov.w	sl, #0
 80180f2:	2300      	movs	r3, #0
 80180f4:	220a      	movs	r2, #10
 80180f6:	4620      	mov	r0, r4
 80180f8:	4629      	mov	r1, r5
 80180fa:	f7e8 f8f9 	bl	80002f0 <__aeabi_uldivmod>
 80180fe:	2c0a      	cmp	r4, #10
 8018100:	f175 0300 	sbcs.w	r3, r5, #0
 8018104:	f0c0 80f8 	bcc.w	80182f8 <_vfiprintf_r+0x918>
 8018108:	4604      	mov	r4, r0
 801810a:	460d      	mov	r5, r1
 801810c:	f8cd 8020 	str.w	r8, [sp, #32]
 8018110:	e7c2      	b.n	8018098 <_vfiprintf_r+0x6b8>
 8018112:	469a      	mov	sl, r3
 8018114:	e7ed      	b.n	80180f2 <_vfiprintf_r+0x712>
 8018116:	f004 030f 	and.w	r3, r4, #15
 801811a:	9a05      	ldr	r2, [sp, #20]
 801811c:	0924      	lsrs	r4, r4, #4
 801811e:	5cd3      	ldrb	r3, [r2, r3]
 8018120:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8018124:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8018128:	092d      	lsrs	r5, r5, #4
 801812a:	ea54 0305 	orrs.w	r3, r4, r5
 801812e:	d1f2      	bne.n	8018116 <_vfiprintf_r+0x736>
 8018130:	e0e2      	b.n	80182f8 <_vfiprintf_r+0x918>
 8018132:	b933      	cbnz	r3, 8018142 <_vfiprintf_r+0x762>
 8018134:	f01a 0f01 	tst.w	sl, #1
 8018138:	d003      	beq.n	8018142 <_vfiprintf_r+0x762>
 801813a:	2330      	movs	r3, #48	; 0x30
 801813c:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 8018140:	e79f      	b.n	8018082 <_vfiprintf_r+0x6a2>
 8018142:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8018146:	e0d7      	b.n	80182f8 <_vfiprintf_r+0x918>
 8018148:	2b00      	cmp	r3, #0
 801814a:	f000 80a3 	beq.w	8018294 <_vfiprintf_r+0x8b4>
 801814e:	2100      	movs	r1, #0
 8018150:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8018154:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8018158:	46a3      	mov	fp, r4
 801815a:	e5da      	b.n	8017d12 <_vfiprintf_r+0x332>
 801815c:	4605      	mov	r5, r0
 801815e:	e68c      	b.n	8017e7a <_vfiprintf_r+0x49a>
 8018160:	0801963c 	.word	0x0801963c
 8018164:	0801964c 	.word	0x0801964c
 8018168:	08019415 	.word	0x08019415
 801816c:	2010      	movs	r0, #16
 801816e:	4402      	add	r2, r0
 8018170:	2b07      	cmp	r3, #7
 8018172:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8018176:	6070      	str	r0, [r6, #4]
 8018178:	dd07      	ble.n	801818a <_vfiprintf_r+0x7aa>
 801817a:	aa0c      	add	r2, sp, #48	; 0x30
 801817c:	4639      	mov	r1, r7
 801817e:	4648      	mov	r0, r9
 8018180:	f7ff fbfb 	bl	801797a <__sprint_r>
 8018184:	2800      	cmp	r0, #0
 8018186:	d164      	bne.n	8018252 <_vfiprintf_r+0x872>
 8018188:	a90f      	add	r1, sp, #60	; 0x3c
 801818a:	3c10      	subs	r4, #16
 801818c:	460e      	mov	r6, r1
 801818e:	e68f      	b.n	8017eb0 <_vfiprintf_r+0x4d0>
 8018190:	460e      	mov	r6, r1
 8018192:	e6a8      	b.n	8017ee6 <_vfiprintf_r+0x506>
 8018194:	aa0c      	add	r2, sp, #48	; 0x30
 8018196:	4639      	mov	r1, r7
 8018198:	4648      	mov	r0, r9
 801819a:	f7ff fbee 	bl	801797a <__sprint_r>
 801819e:	2800      	cmp	r0, #0
 80181a0:	d157      	bne.n	8018252 <_vfiprintf_r+0x872>
 80181a2:	ae0f      	add	r6, sp, #60	; 0x3c
 80181a4:	e6b1      	b.n	8017f0a <_vfiprintf_r+0x52a>
 80181a6:	aa0c      	add	r2, sp, #48	; 0x30
 80181a8:	4639      	mov	r1, r7
 80181aa:	4648      	mov	r0, r9
 80181ac:	f7ff fbe5 	bl	801797a <__sprint_r>
 80181b0:	2800      	cmp	r0, #0
 80181b2:	d14e      	bne.n	8018252 <_vfiprintf_r+0x872>
 80181b4:	ae0f      	add	r6, sp, #60	; 0x3c
 80181b6:	e6b8      	b.n	8017f2a <_vfiprintf_r+0x54a>
 80181b8:	2010      	movs	r0, #16
 80181ba:	4402      	add	r2, r0
 80181bc:	2b07      	cmp	r3, #7
 80181be:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 80181c2:	6070      	str	r0, [r6, #4]
 80181c4:	dd07      	ble.n	80181d6 <_vfiprintf_r+0x7f6>
 80181c6:	aa0c      	add	r2, sp, #48	; 0x30
 80181c8:	4639      	mov	r1, r7
 80181ca:	4648      	mov	r0, r9
 80181cc:	f7ff fbd5 	bl	801797a <__sprint_r>
 80181d0:	2800      	cmp	r0, #0
 80181d2:	d13e      	bne.n	8018252 <_vfiprintf_r+0x872>
 80181d4:	a90f      	add	r1, sp, #60	; 0x3c
 80181d6:	3c10      	subs	r4, #16
 80181d8:	460e      	mov	r6, r1
 80181da:	e6ae      	b.n	8017f3a <_vfiprintf_r+0x55a>
 80181dc:	460e      	mov	r6, r1
 80181de:	e6c7      	b.n	8017f70 <_vfiprintf_r+0x590>
 80181e0:	2010      	movs	r0, #16
 80181e2:	4401      	add	r1, r0
 80181e4:	2b07      	cmp	r3, #7
 80181e6:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80181ea:	6070      	str	r0, [r6, #4]
 80181ec:	dd06      	ble.n	80181fc <_vfiprintf_r+0x81c>
 80181ee:	aa0c      	add	r2, sp, #48	; 0x30
 80181f0:	4639      	mov	r1, r7
 80181f2:	4648      	mov	r0, r9
 80181f4:	f7ff fbc1 	bl	801797a <__sprint_r>
 80181f8:	bb58      	cbnz	r0, 8018252 <_vfiprintf_r+0x872>
 80181fa:	aa0f      	add	r2, sp, #60	; 0x3c
 80181fc:	3c10      	subs	r4, #16
 80181fe:	4616      	mov	r6, r2
 8018200:	e6bb      	b.n	8017f7a <_vfiprintf_r+0x59a>
 8018202:	4616      	mov	r6, r2
 8018204:	e6d3      	b.n	8017fae <_vfiprintf_r+0x5ce>
 8018206:	aa0c      	add	r2, sp, #48	; 0x30
 8018208:	4639      	mov	r1, r7
 801820a:	4648      	mov	r0, r9
 801820c:	f7ff fbb5 	bl	801797a <__sprint_r>
 8018210:	b9f8      	cbnz	r0, 8018252 <_vfiprintf_r+0x872>
 8018212:	ab0f      	add	r3, sp, #60	; 0x3c
 8018214:	e6da      	b.n	8017fcc <_vfiprintf_r+0x5ec>
 8018216:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 801821a:	1a54      	subs	r4, r2, r1
 801821c:	2c00      	cmp	r4, #0
 801821e:	f77f aed9 	ble.w	8017fd4 <_vfiprintf_r+0x5f4>
 8018222:	4d39      	ldr	r5, [pc, #228]	; (8018308 <_vfiprintf_r+0x928>)
 8018224:	2610      	movs	r6, #16
 8018226:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801822a:	2c10      	cmp	r4, #16
 801822c:	f102 0201 	add.w	r2, r2, #1
 8018230:	601d      	str	r5, [r3, #0]
 8018232:	dc1d      	bgt.n	8018270 <_vfiprintf_r+0x890>
 8018234:	605c      	str	r4, [r3, #4]
 8018236:	2a07      	cmp	r2, #7
 8018238:	440c      	add	r4, r1
 801823a:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 801823e:	f77f aec9 	ble.w	8017fd4 <_vfiprintf_r+0x5f4>
 8018242:	aa0c      	add	r2, sp, #48	; 0x30
 8018244:	4639      	mov	r1, r7
 8018246:	4648      	mov	r0, r9
 8018248:	f7ff fb97 	bl	801797a <__sprint_r>
 801824c:	2800      	cmp	r0, #0
 801824e:	f43f aec1 	beq.w	8017fd4 <_vfiprintf_r+0x5f4>
 8018252:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018254:	07d9      	lsls	r1, r3, #31
 8018256:	d405      	bmi.n	8018264 <_vfiprintf_r+0x884>
 8018258:	89bb      	ldrh	r3, [r7, #12]
 801825a:	059a      	lsls	r2, r3, #22
 801825c:	d402      	bmi.n	8018264 <_vfiprintf_r+0x884>
 801825e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8018260:	f7fe fcdd 	bl	8016c1e <__retarget_lock_release_recursive>
 8018264:	89bb      	ldrh	r3, [r7, #12]
 8018266:	065b      	lsls	r3, r3, #25
 8018268:	f57f abed 	bpl.w	8017a46 <_vfiprintf_r+0x66>
 801826c:	f7ff bbe8 	b.w	8017a40 <_vfiprintf_r+0x60>
 8018270:	3110      	adds	r1, #16
 8018272:	2a07      	cmp	r2, #7
 8018274:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 8018278:	605e      	str	r6, [r3, #4]
 801827a:	dc02      	bgt.n	8018282 <_vfiprintf_r+0x8a2>
 801827c:	3308      	adds	r3, #8
 801827e:	3c10      	subs	r4, #16
 8018280:	e7d1      	b.n	8018226 <_vfiprintf_r+0x846>
 8018282:	aa0c      	add	r2, sp, #48	; 0x30
 8018284:	4639      	mov	r1, r7
 8018286:	4648      	mov	r0, r9
 8018288:	f7ff fb77 	bl	801797a <__sprint_r>
 801828c:	2800      	cmp	r0, #0
 801828e:	d1e0      	bne.n	8018252 <_vfiprintf_r+0x872>
 8018290:	ab0f      	add	r3, sp, #60	; 0x3c
 8018292:	e7f4      	b.n	801827e <_vfiprintf_r+0x89e>
 8018294:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018296:	b913      	cbnz	r3, 801829e <_vfiprintf_r+0x8be>
 8018298:	2300      	movs	r3, #0
 801829a:	930d      	str	r3, [sp, #52]	; 0x34
 801829c:	e7d9      	b.n	8018252 <_vfiprintf_r+0x872>
 801829e:	aa0c      	add	r2, sp, #48	; 0x30
 80182a0:	4639      	mov	r1, r7
 80182a2:	4648      	mov	r0, r9
 80182a4:	f7ff fb69 	bl	801797a <__sprint_r>
 80182a8:	2800      	cmp	r0, #0
 80182aa:	d0f5      	beq.n	8018298 <_vfiprintf_r+0x8b8>
 80182ac:	e7d1      	b.n	8018252 <_vfiprintf_r+0x872>
 80182ae:	ea54 0205 	orrs.w	r2, r4, r5
 80182b2:	f8cd a010 	str.w	sl, [sp, #16]
 80182b6:	f43f ada3 	beq.w	8017e00 <_vfiprintf_r+0x420>
 80182ba:	2b01      	cmp	r3, #1
 80182bc:	f43f aeda 	beq.w	8018074 <_vfiprintf_r+0x694>
 80182c0:	2b02      	cmp	r3, #2
 80182c2:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 80182c6:	f43f af26 	beq.w	8018116 <_vfiprintf_r+0x736>
 80182ca:	f004 0307 	and.w	r3, r4, #7
 80182ce:	08e4      	lsrs	r4, r4, #3
 80182d0:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 80182d4:	08ed      	lsrs	r5, r5, #3
 80182d6:	3330      	adds	r3, #48	; 0x30
 80182d8:	ea54 0105 	orrs.w	r1, r4, r5
 80182dc:	4642      	mov	r2, r8
 80182de:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80182e2:	d1f2      	bne.n	80182ca <_vfiprintf_r+0x8ea>
 80182e4:	9904      	ldr	r1, [sp, #16]
 80182e6:	07c8      	lsls	r0, r1, #31
 80182e8:	d506      	bpl.n	80182f8 <_vfiprintf_r+0x918>
 80182ea:	2b30      	cmp	r3, #48	; 0x30
 80182ec:	d004      	beq.n	80182f8 <_vfiprintf_r+0x918>
 80182ee:	2330      	movs	r3, #48	; 0x30
 80182f0:	f808 3c01 	strb.w	r3, [r8, #-1]
 80182f4:	f1a2 0802 	sub.w	r8, r2, #2
 80182f8:	ab38      	add	r3, sp, #224	; 0xe0
 80182fa:	eba3 0308 	sub.w	r3, r3, r8
 80182fe:	9d00      	ldr	r5, [sp, #0]
 8018300:	f8dd a010 	ldr.w	sl, [sp, #16]
 8018304:	9300      	str	r3, [sp, #0]
 8018306:	e5b8      	b.n	8017e7a <_vfiprintf_r+0x49a>
 8018308:	0801963c 	.word	0x0801963c

0801830c <__sbprintf>:
 801830c:	b570      	push	{r4, r5, r6, lr}
 801830e:	460c      	mov	r4, r1
 8018310:	8989      	ldrh	r1, [r1, #12]
 8018312:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8018316:	f021 0102 	bic.w	r1, r1, #2
 801831a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801831e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8018320:	911b      	str	r1, [sp, #108]	; 0x6c
 8018322:	89e1      	ldrh	r1, [r4, #14]
 8018324:	f8ad 1016 	strh.w	r1, [sp, #22]
 8018328:	69e1      	ldr	r1, [r4, #28]
 801832a:	9109      	str	r1, [sp, #36]	; 0x24
 801832c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801832e:	910b      	str	r1, [sp, #44]	; 0x2c
 8018330:	a91c      	add	r1, sp, #112	; 0x70
 8018332:	9102      	str	r1, [sp, #8]
 8018334:	9106      	str	r1, [sp, #24]
 8018336:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801833a:	4606      	mov	r6, r0
 801833c:	9104      	str	r1, [sp, #16]
 801833e:	9107      	str	r1, [sp, #28]
 8018340:	a818      	add	r0, sp, #96	; 0x60
 8018342:	2100      	movs	r1, #0
 8018344:	e9cd 3200 	strd	r3, r2, [sp]
 8018348:	9108      	str	r1, [sp, #32]
 801834a:	f7fe fc65 	bl	8016c18 <__retarget_lock_init_recursive>
 801834e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018352:	a902      	add	r1, sp, #8
 8018354:	4630      	mov	r0, r6
 8018356:	f7ff fb43 	bl	80179e0 <_vfiprintf_r>
 801835a:	1e05      	subs	r5, r0, #0
 801835c:	db07      	blt.n	801836e <__sbprintf+0x62>
 801835e:	a902      	add	r1, sp, #8
 8018360:	4630      	mov	r0, r6
 8018362:	f7fe f92f 	bl	80165c4 <_fflush_r>
 8018366:	2800      	cmp	r0, #0
 8018368:	bf18      	it	ne
 801836a:	f04f 35ff 	movne.w	r5, #4294967295
 801836e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8018372:	9818      	ldr	r0, [sp, #96]	; 0x60
 8018374:	065b      	lsls	r3, r3, #25
 8018376:	bf42      	ittt	mi
 8018378:	89a3      	ldrhmi	r3, [r4, #12]
 801837a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801837e:	81a3      	strhmi	r3, [r4, #12]
 8018380:	f7fe fc4b 	bl	8016c1a <__retarget_lock_close_recursive>
 8018384:	4628      	mov	r0, r5
 8018386:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 801838a:	bd70      	pop	{r4, r5, r6, pc}

0801838c <__swbuf_r>:
 801838c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801838e:	460e      	mov	r6, r1
 8018390:	4614      	mov	r4, r2
 8018392:	4605      	mov	r5, r0
 8018394:	b118      	cbz	r0, 801839e <__swbuf_r+0x12>
 8018396:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8018398:	b90b      	cbnz	r3, 801839e <__swbuf_r+0x12>
 801839a:	f7fe f97f 	bl	801669c <__sinit>
 801839e:	69a3      	ldr	r3, [r4, #24]
 80183a0:	60a3      	str	r3, [r4, #8]
 80183a2:	89a3      	ldrh	r3, [r4, #12]
 80183a4:	0719      	lsls	r1, r3, #28
 80183a6:	d529      	bpl.n	80183fc <__swbuf_r+0x70>
 80183a8:	6923      	ldr	r3, [r4, #16]
 80183aa:	b33b      	cbz	r3, 80183fc <__swbuf_r+0x70>
 80183ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80183b0:	b2f6      	uxtb	r6, r6
 80183b2:	049a      	lsls	r2, r3, #18
 80183b4:	4637      	mov	r7, r6
 80183b6:	d52a      	bpl.n	801840e <__swbuf_r+0x82>
 80183b8:	6823      	ldr	r3, [r4, #0]
 80183ba:	6920      	ldr	r0, [r4, #16]
 80183bc:	1a18      	subs	r0, r3, r0
 80183be:	6963      	ldr	r3, [r4, #20]
 80183c0:	4283      	cmp	r3, r0
 80183c2:	dc04      	bgt.n	80183ce <__swbuf_r+0x42>
 80183c4:	4621      	mov	r1, r4
 80183c6:	4628      	mov	r0, r5
 80183c8:	f7fe f8fc 	bl	80165c4 <_fflush_r>
 80183cc:	b9e0      	cbnz	r0, 8018408 <__swbuf_r+0x7c>
 80183ce:	68a3      	ldr	r3, [r4, #8]
 80183d0:	3b01      	subs	r3, #1
 80183d2:	60a3      	str	r3, [r4, #8]
 80183d4:	6823      	ldr	r3, [r4, #0]
 80183d6:	1c5a      	adds	r2, r3, #1
 80183d8:	6022      	str	r2, [r4, #0]
 80183da:	701e      	strb	r6, [r3, #0]
 80183dc:	6962      	ldr	r2, [r4, #20]
 80183de:	1c43      	adds	r3, r0, #1
 80183e0:	429a      	cmp	r2, r3
 80183e2:	d004      	beq.n	80183ee <__swbuf_r+0x62>
 80183e4:	89a3      	ldrh	r3, [r4, #12]
 80183e6:	07db      	lsls	r3, r3, #31
 80183e8:	d506      	bpl.n	80183f8 <__swbuf_r+0x6c>
 80183ea:	2e0a      	cmp	r6, #10
 80183ec:	d104      	bne.n	80183f8 <__swbuf_r+0x6c>
 80183ee:	4621      	mov	r1, r4
 80183f0:	4628      	mov	r0, r5
 80183f2:	f7fe f8e7 	bl	80165c4 <_fflush_r>
 80183f6:	b938      	cbnz	r0, 8018408 <__swbuf_r+0x7c>
 80183f8:	4638      	mov	r0, r7
 80183fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183fc:	4621      	mov	r1, r4
 80183fe:	4628      	mov	r0, r5
 8018400:	f7fd fa02 	bl	8015808 <__swsetup_r>
 8018404:	2800      	cmp	r0, #0
 8018406:	d0d1      	beq.n	80183ac <__swbuf_r+0x20>
 8018408:	f04f 37ff 	mov.w	r7, #4294967295
 801840c:	e7f4      	b.n	80183f8 <__swbuf_r+0x6c>
 801840e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018412:	81a3      	strh	r3, [r4, #12]
 8018414:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018416:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801841a:	6663      	str	r3, [r4, #100]	; 0x64
 801841c:	e7cc      	b.n	80183b8 <__swbuf_r+0x2c>
	...

08018420 <_write_r>:
 8018420:	b538      	push	{r3, r4, r5, lr}
 8018422:	4d07      	ldr	r5, [pc, #28]	; (8018440 <_write_r+0x20>)
 8018424:	4604      	mov	r4, r0
 8018426:	4608      	mov	r0, r1
 8018428:	4611      	mov	r1, r2
 801842a:	2200      	movs	r2, #0
 801842c:	602a      	str	r2, [r5, #0]
 801842e:	461a      	mov	r2, r3
 8018430:	f7eb ff48 	bl	80042c4 <_write>
 8018434:	1c43      	adds	r3, r0, #1
 8018436:	d102      	bne.n	801843e <_write_r+0x1e>
 8018438:	682b      	ldr	r3, [r5, #0]
 801843a:	b103      	cbz	r3, 801843e <_write_r+0x1e>
 801843c:	6023      	str	r3, [r4, #0]
 801843e:	bd38      	pop	{r3, r4, r5, pc}
 8018440:	20006638 	.word	0x20006638

08018444 <__register_exitproc>:
 8018444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018448:	f8df a078 	ldr.w	sl, [pc, #120]	; 80184c4 <__register_exitproc+0x80>
 801844c:	4606      	mov	r6, r0
 801844e:	f8da 0000 	ldr.w	r0, [sl]
 8018452:	4698      	mov	r8, r3
 8018454:	460f      	mov	r7, r1
 8018456:	4691      	mov	r9, r2
 8018458:	f7fe fbe0 	bl	8016c1c <__retarget_lock_acquire_recursive>
 801845c:	4b18      	ldr	r3, [pc, #96]	; (80184c0 <__register_exitproc+0x7c>)
 801845e:	681b      	ldr	r3, [r3, #0]
 8018460:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8018464:	b91c      	cbnz	r4, 801846e <__register_exitproc+0x2a>
 8018466:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 801846a:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 801846e:	6865      	ldr	r5, [r4, #4]
 8018470:	f8da 0000 	ldr.w	r0, [sl]
 8018474:	2d1f      	cmp	r5, #31
 8018476:	dd05      	ble.n	8018484 <__register_exitproc+0x40>
 8018478:	f7fe fbd1 	bl	8016c1e <__retarget_lock_release_recursive>
 801847c:	f04f 30ff 	mov.w	r0, #4294967295
 8018480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018484:	b19e      	cbz	r6, 80184ae <__register_exitproc+0x6a>
 8018486:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801848a:	2201      	movs	r2, #1
 801848c:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8018490:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8018494:	40aa      	lsls	r2, r5
 8018496:	4313      	orrs	r3, r2
 8018498:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 801849c:	2e02      	cmp	r6, #2
 801849e:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 80184a2:	bf02      	ittt	eq
 80184a4:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 80184a8:	4313      	orreq	r3, r2
 80184aa:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 80184ae:	1c6b      	adds	r3, r5, #1
 80184b0:	3502      	adds	r5, #2
 80184b2:	6063      	str	r3, [r4, #4]
 80184b4:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 80184b8:	f7fe fbb1 	bl	8016c1e <__retarget_lock_release_recursive>
 80184bc:	2000      	movs	r0, #0
 80184be:	e7df      	b.n	8018480 <__register_exitproc+0x3c>
 80184c0:	080193f0 	.word	0x080193f0
 80184c4:	20000cf8 	.word	0x20000cf8

080184c8 <__assert_func>:
 80184c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80184ca:	4614      	mov	r4, r2
 80184cc:	461a      	mov	r2, r3
 80184ce:	4b09      	ldr	r3, [pc, #36]	; (80184f4 <__assert_func+0x2c>)
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	4605      	mov	r5, r0
 80184d4:	68d8      	ldr	r0, [r3, #12]
 80184d6:	b14c      	cbz	r4, 80184ec <__assert_func+0x24>
 80184d8:	4b07      	ldr	r3, [pc, #28]	; (80184f8 <__assert_func+0x30>)
 80184da:	9100      	str	r1, [sp, #0]
 80184dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80184e0:	4906      	ldr	r1, [pc, #24]	; (80184fc <__assert_func+0x34>)
 80184e2:	462b      	mov	r3, r5
 80184e4:	f000 f8ac 	bl	8018640 <fiprintf>
 80184e8:	f000 f9a9 	bl	801883e <abort>
 80184ec:	4b04      	ldr	r3, [pc, #16]	; (8018500 <__assert_func+0x38>)
 80184ee:	461c      	mov	r4, r3
 80184f0:	e7f3      	b.n	80184da <__assert_func+0x12>
 80184f2:	bf00      	nop
 80184f4:	200004bc 	.word	0x200004bc
 80184f8:	0801965c 	.word	0x0801965c
 80184fc:	08019669 	.word	0x08019669
 8018500:	08019697 	.word	0x08019697

08018504 <_calloc_r>:
 8018504:	b538      	push	{r3, r4, r5, lr}
 8018506:	fba1 1502 	umull	r1, r5, r1, r2
 801850a:	b92d      	cbnz	r5, 8018518 <_calloc_r+0x14>
 801850c:	f7fa fa34 	bl	8012978 <_malloc_r>
 8018510:	4604      	mov	r4, r0
 8018512:	b938      	cbnz	r0, 8018524 <_calloc_r+0x20>
 8018514:	4620      	mov	r0, r4
 8018516:	bd38      	pop	{r3, r4, r5, pc}
 8018518:	f7fd ffc0 	bl	801649c <__errno>
 801851c:	230c      	movs	r3, #12
 801851e:	6003      	str	r3, [r0, #0]
 8018520:	2400      	movs	r4, #0
 8018522:	e7f7      	b.n	8018514 <_calloc_r+0x10>
 8018524:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8018528:	f022 0203 	bic.w	r2, r2, #3
 801852c:	3a04      	subs	r2, #4
 801852e:	2a24      	cmp	r2, #36	; 0x24
 8018530:	d819      	bhi.n	8018566 <_calloc_r+0x62>
 8018532:	2a13      	cmp	r2, #19
 8018534:	d915      	bls.n	8018562 <_calloc_r+0x5e>
 8018536:	2a1b      	cmp	r2, #27
 8018538:	e9c0 5500 	strd	r5, r5, [r0]
 801853c:	d806      	bhi.n	801854c <_calloc_r+0x48>
 801853e:	f100 0308 	add.w	r3, r0, #8
 8018542:	2200      	movs	r2, #0
 8018544:	e9c3 2200 	strd	r2, r2, [r3]
 8018548:	609a      	str	r2, [r3, #8]
 801854a:	e7e3      	b.n	8018514 <_calloc_r+0x10>
 801854c:	2a24      	cmp	r2, #36	; 0x24
 801854e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8018552:	bf11      	iteee	ne
 8018554:	f100 0310 	addne.w	r3, r0, #16
 8018558:	6105      	streq	r5, [r0, #16]
 801855a:	f100 0318 	addeq.w	r3, r0, #24
 801855e:	6145      	streq	r5, [r0, #20]
 8018560:	e7ef      	b.n	8018542 <_calloc_r+0x3e>
 8018562:	4603      	mov	r3, r0
 8018564:	e7ed      	b.n	8018542 <_calloc_r+0x3e>
 8018566:	4629      	mov	r1, r5
 8018568:	f7fa fc42 	bl	8012df0 <memset>
 801856c:	e7d2      	b.n	8018514 <_calloc_r+0x10>
	...

08018570 <_close_r>:
 8018570:	b538      	push	{r3, r4, r5, lr}
 8018572:	4d06      	ldr	r5, [pc, #24]	; (801858c <_close_r+0x1c>)
 8018574:	2300      	movs	r3, #0
 8018576:	4604      	mov	r4, r0
 8018578:	4608      	mov	r0, r1
 801857a:	602b      	str	r3, [r5, #0]
 801857c:	f000 fcc8 	bl	8018f10 <_close>
 8018580:	1c43      	adds	r3, r0, #1
 8018582:	d102      	bne.n	801858a <_close_r+0x1a>
 8018584:	682b      	ldr	r3, [r5, #0]
 8018586:	b103      	cbz	r3, 801858a <_close_r+0x1a>
 8018588:	6023      	str	r3, [r4, #0]
 801858a:	bd38      	pop	{r3, r4, r5, pc}
 801858c:	20006638 	.word	0x20006638

08018590 <_fclose_r>:
 8018590:	b570      	push	{r4, r5, r6, lr}
 8018592:	4606      	mov	r6, r0
 8018594:	460c      	mov	r4, r1
 8018596:	b911      	cbnz	r1, 801859e <_fclose_r+0xe>
 8018598:	2500      	movs	r5, #0
 801859a:	4628      	mov	r0, r5
 801859c:	bd70      	pop	{r4, r5, r6, pc}
 801859e:	b118      	cbz	r0, 80185a8 <_fclose_r+0x18>
 80185a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80185a2:	b90b      	cbnz	r3, 80185a8 <_fclose_r+0x18>
 80185a4:	f7fe f87a 	bl	801669c <__sinit>
 80185a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80185aa:	07d8      	lsls	r0, r3, #31
 80185ac:	d405      	bmi.n	80185ba <_fclose_r+0x2a>
 80185ae:	89a3      	ldrh	r3, [r4, #12]
 80185b0:	0599      	lsls	r1, r3, #22
 80185b2:	d402      	bmi.n	80185ba <_fclose_r+0x2a>
 80185b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80185b6:	f7fe fb31 	bl	8016c1c <__retarget_lock_acquire_recursive>
 80185ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80185be:	b93b      	cbnz	r3, 80185d0 <_fclose_r+0x40>
 80185c0:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80185c2:	f015 0501 	ands.w	r5, r5, #1
 80185c6:	d1e7      	bne.n	8018598 <_fclose_r+0x8>
 80185c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80185ca:	f7fe fb28 	bl	8016c1e <__retarget_lock_release_recursive>
 80185ce:	e7e4      	b.n	801859a <_fclose_r+0xa>
 80185d0:	4621      	mov	r1, r4
 80185d2:	4630      	mov	r0, r6
 80185d4:	f7fd ff68 	bl	80164a8 <__sflush_r>
 80185d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80185da:	4605      	mov	r5, r0
 80185dc:	b133      	cbz	r3, 80185ec <_fclose_r+0x5c>
 80185de:	69e1      	ldr	r1, [r4, #28]
 80185e0:	4630      	mov	r0, r6
 80185e2:	4798      	blx	r3
 80185e4:	2800      	cmp	r0, #0
 80185e6:	bfb8      	it	lt
 80185e8:	f04f 35ff 	movlt.w	r5, #4294967295
 80185ec:	89a3      	ldrh	r3, [r4, #12]
 80185ee:	061a      	lsls	r2, r3, #24
 80185f0:	d503      	bpl.n	80185fa <_fclose_r+0x6a>
 80185f2:	6921      	ldr	r1, [r4, #16]
 80185f4:	4630      	mov	r0, r6
 80185f6:	f7fe f8e1 	bl	80167bc <_free_r>
 80185fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80185fc:	b141      	cbz	r1, 8018610 <_fclose_r+0x80>
 80185fe:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8018602:	4299      	cmp	r1, r3
 8018604:	d002      	beq.n	801860c <_fclose_r+0x7c>
 8018606:	4630      	mov	r0, r6
 8018608:	f7fe f8d8 	bl	80167bc <_free_r>
 801860c:	2300      	movs	r3, #0
 801860e:	6323      	str	r3, [r4, #48]	; 0x30
 8018610:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8018612:	b121      	cbz	r1, 801861e <_fclose_r+0x8e>
 8018614:	4630      	mov	r0, r6
 8018616:	f7fe f8d1 	bl	80167bc <_free_r>
 801861a:	2300      	movs	r3, #0
 801861c:	6463      	str	r3, [r4, #68]	; 0x44
 801861e:	f7fe f825 	bl	801666c <__sfp_lock_acquire>
 8018622:	2300      	movs	r3, #0
 8018624:	81a3      	strh	r3, [r4, #12]
 8018626:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018628:	07db      	lsls	r3, r3, #31
 801862a:	d402      	bmi.n	8018632 <_fclose_r+0xa2>
 801862c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801862e:	f7fe faf6 	bl	8016c1e <__retarget_lock_release_recursive>
 8018632:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018634:	f7fe faf1 	bl	8016c1a <__retarget_lock_close_recursive>
 8018638:	f7fe f81e 	bl	8016678 <__sfp_lock_release>
 801863c:	e7ad      	b.n	801859a <_fclose_r+0xa>
	...

08018640 <fiprintf>:
 8018640:	b40e      	push	{r1, r2, r3}
 8018642:	b503      	push	{r0, r1, lr}
 8018644:	4601      	mov	r1, r0
 8018646:	ab03      	add	r3, sp, #12
 8018648:	4805      	ldr	r0, [pc, #20]	; (8018660 <fiprintf+0x20>)
 801864a:	f853 2b04 	ldr.w	r2, [r3], #4
 801864e:	6800      	ldr	r0, [r0, #0]
 8018650:	9301      	str	r3, [sp, #4]
 8018652:	f7ff f9c5 	bl	80179e0 <_vfiprintf_r>
 8018656:	b002      	add	sp, #8
 8018658:	f85d eb04 	ldr.w	lr, [sp], #4
 801865c:	b003      	add	sp, #12
 801865e:	4770      	bx	lr
 8018660:	200004bc 	.word	0x200004bc

08018664 <__fputwc>:
 8018664:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018668:	4680      	mov	r8, r0
 801866a:	460e      	mov	r6, r1
 801866c:	4615      	mov	r5, r2
 801866e:	f000 f887 	bl	8018780 <__locale_mb_cur_max>
 8018672:	2801      	cmp	r0, #1
 8018674:	d11c      	bne.n	80186b0 <__fputwc+0x4c>
 8018676:	1e73      	subs	r3, r6, #1
 8018678:	2bfe      	cmp	r3, #254	; 0xfe
 801867a:	d819      	bhi.n	80186b0 <__fputwc+0x4c>
 801867c:	f88d 6004 	strb.w	r6, [sp, #4]
 8018680:	4604      	mov	r4, r0
 8018682:	2700      	movs	r7, #0
 8018684:	f10d 0904 	add.w	r9, sp, #4
 8018688:	42a7      	cmp	r7, r4
 801868a:	d020      	beq.n	80186ce <__fputwc+0x6a>
 801868c:	68ab      	ldr	r3, [r5, #8]
 801868e:	f817 1009 	ldrb.w	r1, [r7, r9]
 8018692:	3b01      	subs	r3, #1
 8018694:	2b00      	cmp	r3, #0
 8018696:	60ab      	str	r3, [r5, #8]
 8018698:	da04      	bge.n	80186a4 <__fputwc+0x40>
 801869a:	69aa      	ldr	r2, [r5, #24]
 801869c:	4293      	cmp	r3, r2
 801869e:	db1a      	blt.n	80186d6 <__fputwc+0x72>
 80186a0:	290a      	cmp	r1, #10
 80186a2:	d018      	beq.n	80186d6 <__fputwc+0x72>
 80186a4:	682b      	ldr	r3, [r5, #0]
 80186a6:	1c5a      	adds	r2, r3, #1
 80186a8:	602a      	str	r2, [r5, #0]
 80186aa:	7019      	strb	r1, [r3, #0]
 80186ac:	3701      	adds	r7, #1
 80186ae:	e7eb      	b.n	8018688 <__fputwc+0x24>
 80186b0:	a901      	add	r1, sp, #4
 80186b2:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 80186b6:	4632      	mov	r2, r6
 80186b8:	4640      	mov	r0, r8
 80186ba:	f000 f89d 	bl	80187f8 <_wcrtomb_r>
 80186be:	1c41      	adds	r1, r0, #1
 80186c0:	4604      	mov	r4, r0
 80186c2:	d1de      	bne.n	8018682 <__fputwc+0x1e>
 80186c4:	89ab      	ldrh	r3, [r5, #12]
 80186c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80186ca:	81ab      	strh	r3, [r5, #12]
 80186cc:	4606      	mov	r6, r0
 80186ce:	4630      	mov	r0, r6
 80186d0:	b003      	add	sp, #12
 80186d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80186d6:	462a      	mov	r2, r5
 80186d8:	4640      	mov	r0, r8
 80186da:	f7ff fe57 	bl	801838c <__swbuf_r>
 80186de:	1c42      	adds	r2, r0, #1
 80186e0:	d1e4      	bne.n	80186ac <__fputwc+0x48>
 80186e2:	4606      	mov	r6, r0
 80186e4:	e7f3      	b.n	80186ce <__fputwc+0x6a>

080186e6 <_fputwc_r>:
 80186e6:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80186e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80186ea:	4614      	mov	r4, r2
 80186ec:	07da      	lsls	r2, r3, #31
 80186ee:	4605      	mov	r5, r0
 80186f0:	d407      	bmi.n	8018702 <_fputwc_r+0x1c>
 80186f2:	89a3      	ldrh	r3, [r4, #12]
 80186f4:	059b      	lsls	r3, r3, #22
 80186f6:	d404      	bmi.n	8018702 <_fputwc_r+0x1c>
 80186f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80186fa:	9101      	str	r1, [sp, #4]
 80186fc:	f7fe fa8e 	bl	8016c1c <__retarget_lock_acquire_recursive>
 8018700:	9901      	ldr	r1, [sp, #4]
 8018702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018706:	0498      	lsls	r0, r3, #18
 8018708:	d406      	bmi.n	8018718 <_fputwc_r+0x32>
 801870a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801870e:	81a3      	strh	r3, [r4, #12]
 8018710:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018712:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018716:	6663      	str	r3, [r4, #100]	; 0x64
 8018718:	4622      	mov	r2, r4
 801871a:	4628      	mov	r0, r5
 801871c:	f7ff ffa2 	bl	8018664 <__fputwc>
 8018720:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018722:	07da      	lsls	r2, r3, #31
 8018724:	4605      	mov	r5, r0
 8018726:	d405      	bmi.n	8018734 <_fputwc_r+0x4e>
 8018728:	89a3      	ldrh	r3, [r4, #12]
 801872a:	059b      	lsls	r3, r3, #22
 801872c:	d402      	bmi.n	8018734 <_fputwc_r+0x4e>
 801872e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018730:	f7fe fa75 	bl	8016c1e <__retarget_lock_release_recursive>
 8018734:	4628      	mov	r0, r5
 8018736:	b003      	add	sp, #12
 8018738:	bd30      	pop	{r4, r5, pc}
	...

0801873c <_fstat_r>:
 801873c:	b538      	push	{r3, r4, r5, lr}
 801873e:	4d07      	ldr	r5, [pc, #28]	; (801875c <_fstat_r+0x20>)
 8018740:	2300      	movs	r3, #0
 8018742:	4604      	mov	r4, r0
 8018744:	4608      	mov	r0, r1
 8018746:	4611      	mov	r1, r2
 8018748:	602b      	str	r3, [r5, #0]
 801874a:	f000 fbe9 	bl	8018f20 <_fstat>
 801874e:	1c43      	adds	r3, r0, #1
 8018750:	d102      	bne.n	8018758 <_fstat_r+0x1c>
 8018752:	682b      	ldr	r3, [r5, #0]
 8018754:	b103      	cbz	r3, 8018758 <_fstat_r+0x1c>
 8018756:	6023      	str	r3, [r4, #0]
 8018758:	bd38      	pop	{r3, r4, r5, pc}
 801875a:	bf00      	nop
 801875c:	20006638 	.word	0x20006638

08018760 <_isatty_r>:
 8018760:	b538      	push	{r3, r4, r5, lr}
 8018762:	4d06      	ldr	r5, [pc, #24]	; (801877c <_isatty_r+0x1c>)
 8018764:	2300      	movs	r3, #0
 8018766:	4604      	mov	r4, r0
 8018768:	4608      	mov	r0, r1
 801876a:	602b      	str	r3, [r5, #0]
 801876c:	f000 fbe8 	bl	8018f40 <_isatty>
 8018770:	1c43      	adds	r3, r0, #1
 8018772:	d102      	bne.n	801877a <_isatty_r+0x1a>
 8018774:	682b      	ldr	r3, [r5, #0]
 8018776:	b103      	cbz	r3, 801877a <_isatty_r+0x1a>
 8018778:	6023      	str	r3, [r4, #0]
 801877a:	bd38      	pop	{r3, r4, r5, pc}
 801877c:	20006638 	.word	0x20006638

08018780 <__locale_mb_cur_max>:
 8018780:	4b01      	ldr	r3, [pc, #4]	; (8018788 <__locale_mb_cur_max+0x8>)
 8018782:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8018786:	4770      	bx	lr
 8018788:	20000cfc 	.word	0x20000cfc

0801878c <_lseek_r>:
 801878c:	b538      	push	{r3, r4, r5, lr}
 801878e:	4d07      	ldr	r5, [pc, #28]	; (80187ac <_lseek_r+0x20>)
 8018790:	4604      	mov	r4, r0
 8018792:	4608      	mov	r0, r1
 8018794:	4611      	mov	r1, r2
 8018796:	2200      	movs	r2, #0
 8018798:	602a      	str	r2, [r5, #0]
 801879a:	461a      	mov	r2, r3
 801879c:	f000 fbe0 	bl	8018f60 <_lseek>
 80187a0:	1c43      	adds	r3, r0, #1
 80187a2:	d102      	bne.n	80187aa <_lseek_r+0x1e>
 80187a4:	682b      	ldr	r3, [r5, #0]
 80187a6:	b103      	cbz	r3, 80187aa <_lseek_r+0x1e>
 80187a8:	6023      	str	r3, [r4, #0]
 80187aa:	bd38      	pop	{r3, r4, r5, pc}
 80187ac:	20006638 	.word	0x20006638

080187b0 <__ascii_mbtowc>:
 80187b0:	b082      	sub	sp, #8
 80187b2:	b901      	cbnz	r1, 80187b6 <__ascii_mbtowc+0x6>
 80187b4:	a901      	add	r1, sp, #4
 80187b6:	b142      	cbz	r2, 80187ca <__ascii_mbtowc+0x1a>
 80187b8:	b14b      	cbz	r3, 80187ce <__ascii_mbtowc+0x1e>
 80187ba:	7813      	ldrb	r3, [r2, #0]
 80187bc:	600b      	str	r3, [r1, #0]
 80187be:	7812      	ldrb	r2, [r2, #0]
 80187c0:	1e10      	subs	r0, r2, #0
 80187c2:	bf18      	it	ne
 80187c4:	2001      	movne	r0, #1
 80187c6:	b002      	add	sp, #8
 80187c8:	4770      	bx	lr
 80187ca:	4610      	mov	r0, r2
 80187cc:	e7fb      	b.n	80187c6 <__ascii_mbtowc+0x16>
 80187ce:	f06f 0001 	mvn.w	r0, #1
 80187d2:	e7f8      	b.n	80187c6 <__ascii_mbtowc+0x16>

080187d4 <_read_r>:
 80187d4:	b538      	push	{r3, r4, r5, lr}
 80187d6:	4d07      	ldr	r5, [pc, #28]	; (80187f4 <_read_r+0x20>)
 80187d8:	4604      	mov	r4, r0
 80187da:	4608      	mov	r0, r1
 80187dc:	4611      	mov	r1, r2
 80187de:	2200      	movs	r2, #0
 80187e0:	602a      	str	r2, [r5, #0]
 80187e2:	461a      	mov	r2, r3
 80187e4:	f000 fbc4 	bl	8018f70 <_read>
 80187e8:	1c43      	adds	r3, r0, #1
 80187ea:	d102      	bne.n	80187f2 <_read_r+0x1e>
 80187ec:	682b      	ldr	r3, [r5, #0]
 80187ee:	b103      	cbz	r3, 80187f2 <_read_r+0x1e>
 80187f0:	6023      	str	r3, [r4, #0]
 80187f2:	bd38      	pop	{r3, r4, r5, pc}
 80187f4:	20006638 	.word	0x20006638

080187f8 <_wcrtomb_r>:
 80187f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187fa:	4c09      	ldr	r4, [pc, #36]	; (8018820 <_wcrtomb_r+0x28>)
 80187fc:	b085      	sub	sp, #20
 80187fe:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8018802:	4605      	mov	r5, r0
 8018804:	461e      	mov	r6, r3
 8018806:	b909      	cbnz	r1, 801880c <_wcrtomb_r+0x14>
 8018808:	460a      	mov	r2, r1
 801880a:	a901      	add	r1, sp, #4
 801880c:	47b8      	blx	r7
 801880e:	1c43      	adds	r3, r0, #1
 8018810:	bf01      	itttt	eq
 8018812:	2300      	moveq	r3, #0
 8018814:	6033      	streq	r3, [r6, #0]
 8018816:	238a      	moveq	r3, #138	; 0x8a
 8018818:	602b      	streq	r3, [r5, #0]
 801881a:	b005      	add	sp, #20
 801881c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801881e:	bf00      	nop
 8018820:	20000cfc 	.word	0x20000cfc

08018824 <__ascii_wctomb>:
 8018824:	b149      	cbz	r1, 801883a <__ascii_wctomb+0x16>
 8018826:	2aff      	cmp	r2, #255	; 0xff
 8018828:	bf85      	ittet	hi
 801882a:	238a      	movhi	r3, #138	; 0x8a
 801882c:	6003      	strhi	r3, [r0, #0]
 801882e:	700a      	strbls	r2, [r1, #0]
 8018830:	f04f 30ff 	movhi.w	r0, #4294967295
 8018834:	bf98      	it	ls
 8018836:	2001      	movls	r0, #1
 8018838:	4770      	bx	lr
 801883a:	4608      	mov	r0, r1
 801883c:	4770      	bx	lr

0801883e <abort>:
 801883e:	b508      	push	{r3, lr}
 8018840:	2006      	movs	r0, #6
 8018842:	f000 f82d 	bl	80188a0 <raise>
 8018846:	2001      	movs	r0, #1
 8018848:	f000 fba8 	bl	8018f9c <_exit>

0801884c <_raise_r>:
 801884c:	291f      	cmp	r1, #31
 801884e:	b538      	push	{r3, r4, r5, lr}
 8018850:	4604      	mov	r4, r0
 8018852:	460d      	mov	r5, r1
 8018854:	d904      	bls.n	8018860 <_raise_r+0x14>
 8018856:	2316      	movs	r3, #22
 8018858:	6003      	str	r3, [r0, #0]
 801885a:	f04f 30ff 	mov.w	r0, #4294967295
 801885e:	bd38      	pop	{r3, r4, r5, pc}
 8018860:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8018864:	b112      	cbz	r2, 801886c <_raise_r+0x20>
 8018866:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801886a:	b94b      	cbnz	r3, 8018880 <_raise_r+0x34>
 801886c:	4620      	mov	r0, r4
 801886e:	f000 f831 	bl	80188d4 <_getpid_r>
 8018872:	462a      	mov	r2, r5
 8018874:	4601      	mov	r1, r0
 8018876:	4620      	mov	r0, r4
 8018878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801887c:	f000 b818 	b.w	80188b0 <_kill_r>
 8018880:	2b01      	cmp	r3, #1
 8018882:	d00a      	beq.n	801889a <_raise_r+0x4e>
 8018884:	1c59      	adds	r1, r3, #1
 8018886:	d103      	bne.n	8018890 <_raise_r+0x44>
 8018888:	2316      	movs	r3, #22
 801888a:	6003      	str	r3, [r0, #0]
 801888c:	2001      	movs	r0, #1
 801888e:	e7e6      	b.n	801885e <_raise_r+0x12>
 8018890:	2400      	movs	r4, #0
 8018892:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018896:	4628      	mov	r0, r5
 8018898:	4798      	blx	r3
 801889a:	2000      	movs	r0, #0
 801889c:	e7df      	b.n	801885e <_raise_r+0x12>
	...

080188a0 <raise>:
 80188a0:	4b02      	ldr	r3, [pc, #8]	; (80188ac <raise+0xc>)
 80188a2:	4601      	mov	r1, r0
 80188a4:	6818      	ldr	r0, [r3, #0]
 80188a6:	f7ff bfd1 	b.w	801884c <_raise_r>
 80188aa:	bf00      	nop
 80188ac:	200004bc 	.word	0x200004bc

080188b0 <_kill_r>:
 80188b0:	b538      	push	{r3, r4, r5, lr}
 80188b2:	4d07      	ldr	r5, [pc, #28]	; (80188d0 <_kill_r+0x20>)
 80188b4:	2300      	movs	r3, #0
 80188b6:	4604      	mov	r4, r0
 80188b8:	4608      	mov	r0, r1
 80188ba:	4611      	mov	r1, r2
 80188bc:	602b      	str	r3, [r5, #0]
 80188be:	f000 fb47 	bl	8018f50 <_kill>
 80188c2:	1c43      	adds	r3, r0, #1
 80188c4:	d102      	bne.n	80188cc <_kill_r+0x1c>
 80188c6:	682b      	ldr	r3, [r5, #0]
 80188c8:	b103      	cbz	r3, 80188cc <_kill_r+0x1c>
 80188ca:	6023      	str	r3, [r4, #0]
 80188cc:	bd38      	pop	{r3, r4, r5, pc}
 80188ce:	bf00      	nop
 80188d0:	20006638 	.word	0x20006638

080188d4 <_getpid_r>:
 80188d4:	f000 bb2c 	b.w	8018f30 <_getpid>

080188d8 <checkint>:
 80188d8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80188dc:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80188e0:	429a      	cmp	r2, r3
 80188e2:	b570      	push	{r4, r5, r6, lr}
 80188e4:	dd2a      	ble.n	801893c <checkint+0x64>
 80188e6:	f240 4333 	movw	r3, #1075	; 0x433
 80188ea:	429a      	cmp	r2, r3
 80188ec:	dc24      	bgt.n	8018938 <checkint+0x60>
 80188ee:	1a9b      	subs	r3, r3, r2
 80188f0:	f1a3 0620 	sub.w	r6, r3, #32
 80188f4:	f04f 32ff 	mov.w	r2, #4294967295
 80188f8:	fa02 f403 	lsl.w	r4, r2, r3
 80188fc:	fa02 f606 	lsl.w	r6, r2, r6
 8018900:	f1c3 0520 	rsb	r5, r3, #32
 8018904:	fa22 f505 	lsr.w	r5, r2, r5
 8018908:	4334      	orrs	r4, r6
 801890a:	432c      	orrs	r4, r5
 801890c:	409a      	lsls	r2, r3
 801890e:	ea20 0202 	bic.w	r2, r0, r2
 8018912:	ea21 0404 	bic.w	r4, r1, r4
 8018916:	4322      	orrs	r2, r4
 8018918:	f1a3 0420 	sub.w	r4, r3, #32
 801891c:	f1c3 0220 	rsb	r2, r3, #32
 8018920:	d10c      	bne.n	801893c <checkint+0x64>
 8018922:	40d8      	lsrs	r0, r3
 8018924:	fa01 f302 	lsl.w	r3, r1, r2
 8018928:	4318      	orrs	r0, r3
 801892a:	40e1      	lsrs	r1, r4
 801892c:	4308      	orrs	r0, r1
 801892e:	f000 0001 	and.w	r0, r0, #1
 8018932:	f1d0 0002 	rsbs	r0, r0, #2
 8018936:	bd70      	pop	{r4, r5, r6, pc}
 8018938:	2002      	movs	r0, #2
 801893a:	e7fc      	b.n	8018936 <checkint+0x5e>
 801893c:	2000      	movs	r0, #0
 801893e:	e7fa      	b.n	8018936 <checkint+0x5e>

08018940 <pow>:
 8018940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018944:	ee10 4a90 	vmov	r4, s1
 8018948:	ed2d 8b0a 	vpush	{d8-d12}
 801894c:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8018950:	ee11 7a90 	vmov	r7, s3
 8018954:	f10a 32ff 	add.w	r2, sl, #4294967295
 8018958:	f240 73fd 	movw	r3, #2045	; 0x7fd
 801895c:	429a      	cmp	r2, r3
 801895e:	ee10 6a10 	vmov	r6, s0
 8018962:	ee11 0a10 	vmov	r0, s2
 8018966:	b086      	sub	sp, #24
 8018968:	46d4      	mov	ip, sl
 801896a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 801896e:	d806      	bhi.n	801897e <pow+0x3e>
 8018970:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8018974:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8018978:	2b7f      	cmp	r3, #127	; 0x7f
 801897a:	f240 8156 	bls.w	8018c2a <pow+0x2ea>
 801897e:	1802      	adds	r2, r0, r0
 8018980:	eb47 0107 	adc.w	r1, r7, r7
 8018984:	f06f 0e01 	mvn.w	lr, #1
 8018988:	f112 39ff 	adds.w	r9, r2, #4294967295
 801898c:	f141 38ff 	adc.w	r8, r1, #4294967295
 8018990:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8018994:	45ce      	cmp	lr, r9
 8018996:	eb73 0808 	sbcs.w	r8, r3, r8
 801899a:	d23f      	bcs.n	8018a1c <pow+0xdc>
 801899c:	ea52 0301 	orrs.w	r3, r2, r1
 80189a0:	f04f 0300 	mov.w	r3, #0
 80189a4:	d10c      	bne.n	80189c0 <pow+0x80>
 80189a6:	19b6      	adds	r6, r6, r6
 80189a8:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 80189ac:	4164      	adcs	r4, r4
 80189ae:	42b3      	cmp	r3, r6
 80189b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80189b4:	41a3      	sbcs	r3, r4
 80189b6:	f0c0 808c 	bcc.w	8018ad2 <pow+0x192>
 80189ba:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80189be:	e028      	b.n	8018a12 <pow+0xd2>
 80189c0:	4da3      	ldr	r5, [pc, #652]	; (8018c50 <pow+0x310>)
 80189c2:	42ac      	cmp	r4, r5
 80189c4:	bf08      	it	eq
 80189c6:	429e      	cmpeq	r6, r3
 80189c8:	d107      	bne.n	80189da <pow+0x9a>
 80189ca:	1800      	adds	r0, r0, r0
 80189cc:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 80189d0:	417f      	adcs	r7, r7
 80189d2:	4283      	cmp	r3, r0
 80189d4:	4b9f      	ldr	r3, [pc, #636]	; (8018c54 <pow+0x314>)
 80189d6:	41bb      	sbcs	r3, r7
 80189d8:	e7ed      	b.n	80189b6 <pow+0x76>
 80189da:	19b6      	adds	r6, r6, r6
 80189dc:	489e      	ldr	r0, [pc, #632]	; (8018c58 <pow+0x318>)
 80189de:	4164      	adcs	r4, r4
 80189e0:	42b3      	cmp	r3, r6
 80189e2:	eb70 0504 	sbcs.w	r5, r0, r4
 80189e6:	d374      	bcc.n	8018ad2 <pow+0x192>
 80189e8:	4281      	cmp	r1, r0
 80189ea:	bf08      	it	eq
 80189ec:	429a      	cmpeq	r2, r3
 80189ee:	d170      	bne.n	8018ad2 <pow+0x192>
 80189f0:	4a9a      	ldr	r2, [pc, #616]	; (8018c5c <pow+0x31c>)
 80189f2:	4294      	cmp	r4, r2
 80189f4:	bf08      	it	eq
 80189f6:	429e      	cmpeq	r6, r3
 80189f8:	d0df      	beq.n	80189ba <pow+0x7a>
 80189fa:	4294      	cmp	r4, r2
 80189fc:	ea6f 0707 	mvn.w	r7, r7
 8018a00:	bf34      	ite	cc
 8018a02:	2400      	movcc	r4, #0
 8018a04:	2401      	movcs	r4, #1
 8018a06:	0fff      	lsrs	r7, r7, #31
 8018a08:	42bc      	cmp	r4, r7
 8018a0a:	f040 81d9 	bne.w	8018dc0 <pow+0x480>
 8018a0e:	ee21 0b01 	vmul.f64	d0, d1, d1
 8018a12:	b006      	add	sp, #24
 8018a14:	ecbd 8b0a 	vpop	{d8-d12}
 8018a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a1c:	eb16 0806 	adds.w	r8, r6, r6
 8018a20:	eb44 0904 	adc.w	r9, r4, r4
 8018a24:	f118 31ff 	adds.w	r1, r8, #4294967295
 8018a28:	f169 0200 	sbc.w	r2, r9, #0
 8018a2c:	458e      	cmp	lr, r1
 8018a2e:	4193      	sbcs	r3, r2
 8018a30:	d223      	bcs.n	8018a7a <pow+0x13a>
 8018a32:	ee20 0b00 	vmul.f64	d0, d0, d0
 8018a36:	2c00      	cmp	r4, #0
 8018a38:	da12      	bge.n	8018a60 <pow+0x120>
 8018a3a:	4639      	mov	r1, r7
 8018a3c:	f7ff ff4c 	bl	80188d8 <checkint>
 8018a40:	2801      	cmp	r0, #1
 8018a42:	d10d      	bne.n	8018a60 <pow+0x120>
 8018a44:	eeb1 0b40 	vneg.f64	d0, d0
 8018a48:	ea58 0309 	orrs.w	r3, r8, r9
 8018a4c:	d10a      	bne.n	8018a64 <pow+0x124>
 8018a4e:	2f00      	cmp	r7, #0
 8018a50:	dadf      	bge.n	8018a12 <pow+0xd2>
 8018a52:	b006      	add	sp, #24
 8018a54:	ecbd 8b0a 	vpop	{d8-d12}
 8018a58:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a5c:	f000 ba14 	b.w	8018e88 <__math_divzero>
 8018a60:	2000      	movs	r0, #0
 8018a62:	e7f1      	b.n	8018a48 <pow+0x108>
 8018a64:	2f00      	cmp	r7, #0
 8018a66:	dad4      	bge.n	8018a12 <pow+0xd2>
 8018a68:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8018a6c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8018a70:	ed8d 7b00 	vstr	d7, [sp]
 8018a74:	ed9d 0b00 	vldr	d0, [sp]
 8018a78:	e7cb      	b.n	8018a12 <pow+0xd2>
 8018a7a:	2c00      	cmp	r4, #0
 8018a7c:	da2c      	bge.n	8018ad8 <pow+0x198>
 8018a7e:	4639      	mov	r1, r7
 8018a80:	f7ff ff2a 	bl	80188d8 <checkint>
 8018a84:	b930      	cbnz	r0, 8018a94 <pow+0x154>
 8018a86:	b006      	add	sp, #24
 8018a88:	ecbd 8b0a 	vpop	{d8-d12}
 8018a8c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a90:	f000 ba12 	b.w	8018eb8 <__math_invalid>
 8018a94:	2801      	cmp	r0, #1
 8018a96:	bf14      	ite	ne
 8018a98:	2000      	movne	r0, #0
 8018a9a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8018a9e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8018aa2:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8018aa6:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8018aaa:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8018aae:	2b7f      	cmp	r3, #127	; 0x7f
 8018ab0:	d92d      	bls.n	8018b0e <pow+0x1ce>
 8018ab2:	4b67      	ldr	r3, [pc, #412]	; (8018c50 <pow+0x310>)
 8018ab4:	2000      	movs	r0, #0
 8018ab6:	429c      	cmp	r4, r3
 8018ab8:	bf08      	it	eq
 8018aba:	4286      	cmpeq	r6, r0
 8018abc:	f43f af7d 	beq.w	80189ba <pow+0x7a>
 8018ac0:	f240 31bd 	movw	r1, #957	; 0x3bd
 8018ac4:	428a      	cmp	r2, r1
 8018ac6:	d80c      	bhi.n	8018ae2 <pow+0x1a2>
 8018ac8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8018acc:	42b0      	cmp	r0, r6
 8018ace:	41a3      	sbcs	r3, r4
 8018ad0:	d204      	bcs.n	8018adc <pow+0x19c>
 8018ad2:	ee31 0b00 	vadd.f64	d0, d1, d0
 8018ad6:	e79c      	b.n	8018a12 <pow+0xd2>
 8018ad8:	2000      	movs	r0, #0
 8018ada:	e7e4      	b.n	8018aa6 <pow+0x166>
 8018adc:	ee30 0b41 	vsub.f64	d0, d0, d1
 8018ae0:	e797      	b.n	8018a12 <pow+0xd2>
 8018ae2:	2e01      	cmp	r6, #1
 8018ae4:	eb74 0303 	sbcs.w	r3, r4, r3
 8018ae8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8018aec:	bf34      	ite	cc
 8018aee:	2301      	movcc	r3, #1
 8018af0:	2300      	movcs	r3, #0
 8018af2:	4295      	cmp	r5, r2
 8018af4:	bf8c      	ite	hi
 8018af6:	2500      	movhi	r5, #0
 8018af8:	2501      	movls	r5, #1
 8018afa:	42ab      	cmp	r3, r5
 8018afc:	f000 809d 	beq.w	8018c3a <pow+0x2fa>
 8018b00:	b006      	add	sp, #24
 8018b02:	ecbd 8b0a 	vpop	{d8-d12}
 8018b06:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b0a:	f000 b9b5 	b.w	8018e78 <__math_oflow>
 8018b0e:	f1bc 0f00 	cmp.w	ip, #0
 8018b12:	d10b      	bne.n	8018b2c <pow+0x1ec>
 8018b14:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8018c48 <pow+0x308>
 8018b18:	ee20 7b07 	vmul.f64	d7, d0, d7
 8018b1c:	ec53 2b17 	vmov	r2, r3, d7
 8018b20:	ee17 6a10 	vmov	r6, s14
 8018b24:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8018b28:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8018b2c:	4b4c      	ldr	r3, [pc, #304]	; (8018c60 <pow+0x320>)
 8018b2e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8018b32:	4423      	add	r3, r4
 8018b34:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8018b38:	1519      	asrs	r1, r3, #20
 8018b3a:	0d1b      	lsrs	r3, r3, #20
 8018b3c:	051b      	lsls	r3, r3, #20
 8018b3e:	eba4 0903 	sub.w	r9, r4, r3
 8018b42:	4b48      	ldr	r3, [pc, #288]	; (8018c64 <pow+0x324>)
 8018b44:	ee04 1a10 	vmov	s8, r1
 8018b48:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8018b4c:	f1b6 0800 	subs.w	r8, r6, #0
 8018b50:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8018b54:	ec49 8b15 	vmov	d5, r8, r9
 8018b58:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8018b5c:	eea5 6b07 	vfma.f64	d6, d5, d7
 8018b60:	ed93 7b00 	vldr	d7, [r3]
 8018b64:	ed93 5b02 	vldr	d5, [r3, #8]
 8018b68:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8018b6c:	eea4 2b07 	vfma.f64	d2, d4, d7
 8018b70:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8018b74:	ee36 ab02 	vadd.f64	d10, d6, d2
 8018b78:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8018b7c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8018b80:	ed93 5b04 	vldr	d5, [r3, #16]
 8018b84:	ee32 2b06 	vadd.f64	d2, d2, d6
 8018b88:	ee37 7b02 	vadd.f64	d7, d7, d2
 8018b8c:	ee26 5b05 	vmul.f64	d5, d6, d5
 8018b90:	ed93 4b08 	vldr	d4, [r3, #32]
 8018b94:	ee26 0b05 	vmul.f64	d0, d6, d5
 8018b98:	eeb0 9b40 	vmov.f64	d9, d0
 8018b9c:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8018ba0:	ed93 5b06 	vldr	d5, [r3, #24]
 8018ba4:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8018ba8:	ee26 bb00 	vmul.f64	d11, d6, d0
 8018bac:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8018bb0:	eea6 5b04 	vfma.f64	d5, d6, d4
 8018bb4:	ee3a ab48 	vsub.f64	d10, d10, d8
 8018bb8:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8018bbc:	ee37 9b09 	vadd.f64	d9, d7, d9
 8018bc0:	ee3a ab00 	vadd.f64	d10, d10, d0
 8018bc4:	eea6 4b03 	vfma.f64	d4, d6, d3
 8018bc8:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8018bcc:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8018bd0:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8018bd4:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8018bd8:	eea0 4b03 	vfma.f64	d4, d0, d3
 8018bdc:	eea0 5b04 	vfma.f64	d5, d0, d4
 8018be0:	eeab ab05 	vfma.f64	d10, d11, d5
 8018be4:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8018be8:	ee21 7b06 	vmul.f64	d7, d1, d6
 8018bec:	ee17 3a90 	vmov	r3, s15
 8018bf0:	eeb0 5b47 	vmov.f64	d5, d7
 8018bf4:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8018bf8:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8018bfc:	18b2      	adds	r2, r6, r2
 8018bfe:	2a3e      	cmp	r2, #62	; 0x3e
 8018c00:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8018c04:	ee38 8b46 	vsub.f64	d8, d8, d6
 8018c08:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8018c0c:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8018c10:	d92b      	bls.n	8018c6a <pow+0x32a>
 8018c12:	2a00      	cmp	r2, #0
 8018c14:	da0b      	bge.n	8018c2e <pow+0x2ee>
 8018c16:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8018c1a:	ee37 0b00 	vadd.f64	d0, d7, d0
 8018c1e:	2800      	cmp	r0, #0
 8018c20:	f43f aef7 	beq.w	8018a12 <pow+0xd2>
 8018c24:	eeb1 0b40 	vneg.f64	d0, d0
 8018c28:	e6f3      	b.n	8018a12 <pow+0xd2>
 8018c2a:	2000      	movs	r0, #0
 8018c2c:	e77e      	b.n	8018b2c <pow+0x1ec>
 8018c2e:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8018c32:	d919      	bls.n	8018c68 <pow+0x328>
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	f6bf af63 	bge.w	8018b00 <pow+0x1c0>
 8018c3a:	b006      	add	sp, #24
 8018c3c:	ecbd 8b0a 	vpop	{d8-d12}
 8018c40:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c44:	f000 b910 	b.w	8018e68 <__math_uflow>
 8018c48:	00000000 	.word	0x00000000
 8018c4c:	43300000 	.word	0x43300000
 8018c50:	3ff00000 	.word	0x3ff00000
 8018c54:	fff00000 	.word	0xfff00000
 8018c58:	ffe00000 	.word	0xffe00000
 8018c5c:	7fe00000 	.word	0x7fe00000
 8018c60:	c0196aab 	.word	0xc0196aab
 8018c64:	080197a8 	.word	0x080197a8
 8018c68:	2600      	movs	r6, #0
 8018c6a:	495d      	ldr	r1, [pc, #372]	; (8018de0 <pow+0x4a0>)
 8018c6c:	ed91 4b02 	vldr	d4, [r1, #8]
 8018c70:	ed91 3b00 	vldr	d3, [r1]
 8018c74:	eeb0 6b44 	vmov.f64	d6, d4
 8018c78:	eea7 6b03 	vfma.f64	d6, d7, d3
 8018c7c:	ee16 5a10 	vmov	r5, s12
 8018c80:	ee36 6b44 	vsub.f64	d6, d6, d4
 8018c84:	ed91 4b04 	vldr	d4, [r1, #16]
 8018c88:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8018c8c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8018c90:	eeb0 0b47 	vmov.f64	d0, d7
 8018c94:	ed91 7b06 	vldr	d7, [r1, #24]
 8018c98:	18dc      	adds	r4, r3, r3
 8018c9a:	f104 030f 	add.w	r3, r4, #15
 8018c9e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8018ca2:	eea6 0b07 	vfma.f64	d0, d6, d7
 8018ca6:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8018caa:	ee35 0b00 	vadd.f64	d0, d5, d0
 8018cae:	ee20 6b00 	vmul.f64	d6, d0, d0
 8018cb2:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8018cb6:	ed91 5b08 	vldr	d5, [r1, #32]
 8018cba:	ee30 7b07 	vadd.f64	d7, d0, d7
 8018cbe:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8018cc2:	eea0 5b04 	vfma.f64	d5, d0, d4
 8018cc6:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8018cca:	eea6 7b05 	vfma.f64	d7, d6, d5
 8018cce:	ee26 6b06 	vmul.f64	d6, d6, d6
 8018cd2:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8018cd6:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8018cda:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8018cde:	eea0 5b04 	vfma.f64	d5, d0, d4
 8018ce2:	1940      	adds	r0, r0, r5
 8018ce4:	2700      	movs	r7, #0
 8018ce6:	eb17 020c 	adds.w	r2, r7, ip
 8018cea:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8018cee:	eea6 7b05 	vfma.f64	d7, d6, d5
 8018cf2:	2e00      	cmp	r6, #0
 8018cf4:	d15f      	bne.n	8018db6 <pow+0x476>
 8018cf6:	42bd      	cmp	r5, r7
 8018cf8:	db13      	blt.n	8018d22 <pow+0x3e2>
 8018cfa:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8018cfe:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8018d02:	4610      	mov	r0, r2
 8018d04:	ec41 0b10 	vmov	d0, r0, r1
 8018d08:	eea7 0b00 	vfma.f64	d0, d7, d0
 8018d0c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8018dc8 <pow+0x488>
 8018d10:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018d14:	b006      	add	sp, #24
 8018d16:	ecbd 8b0a 	vpop	{d8-d12}
 8018d1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d1e:	f000 b8e3 	b.w	8018ee8 <__math_check_oflow>
 8018d22:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8018d26:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8018d2a:	4610      	mov	r0, r2
 8018d2c:	ec41 0b15 	vmov	d5, r0, r1
 8018d30:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8018d34:	ee27 6b05 	vmul.f64	d6, d7, d5
 8018d38:	ee35 7b06 	vadd.f64	d7, d5, d6
 8018d3c:	eeb0 3bc7 	vabs.f64	d3, d7
 8018d40:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8018d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d48:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8018dd0 <pow+0x490>
 8018d4c:	d52a      	bpl.n	8018da4 <pow+0x464>
 8018d4e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8018d52:	ee35 5b47 	vsub.f64	d5, d5, d7
 8018d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d5a:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8018d5e:	ee35 6b06 	vadd.f64	d6, d5, d6
 8018d62:	bf48      	it	mi
 8018d64:	eeb0 4b43 	vmovmi.f64	d4, d3
 8018d68:	ee37 3b04 	vadd.f64	d3, d7, d4
 8018d6c:	ee34 5b43 	vsub.f64	d5, d4, d3
 8018d70:	ee35 7b07 	vadd.f64	d7, d5, d7
 8018d74:	ee37 7b06 	vadd.f64	d7, d7, d6
 8018d78:	ee37 7b03 	vadd.f64	d7, d7, d3
 8018d7c:	ee37 7b44 	vsub.f64	d7, d7, d4
 8018d80:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d88:	d104      	bne.n	8018d94 <pow+0x454>
 8018d8a:	4632      	mov	r2, r6
 8018d8c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8018d90:	ec43 2b17 	vmov	d7, r2, r3
 8018d94:	ed8d 0b02 	vstr	d0, [sp, #8]
 8018d98:	ed9d 6b02 	vldr	d6, [sp, #8]
 8018d9c:	ee26 6b00 	vmul.f64	d6, d6, d0
 8018da0:	ed8d 6b04 	vstr	d6, [sp, #16]
 8018da4:	ee27 0b00 	vmul.f64	d0, d7, d0
 8018da8:	b006      	add	sp, #24
 8018daa:	ecbd 8b0a 	vpop	{d8-d12}
 8018dae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018db2:	f000 b890 	b.w	8018ed6 <__math_check_uflow>
 8018db6:	ec43 2b10 	vmov	d0, r2, r3
 8018dba:	eea7 0b00 	vfma.f64	d0, d7, d0
 8018dbe:	e628      	b.n	8018a12 <pow+0xd2>
 8018dc0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8018dd8 <pow+0x498>
 8018dc4:	e625      	b.n	8018a12 <pow+0xd2>
 8018dc6:	bf00      	nop
 8018dc8:	00000000 	.word	0x00000000
 8018dcc:	7f000000 	.word	0x7f000000
 8018dd0:	00000000 	.word	0x00000000
 8018dd4:	00100000 	.word	0x00100000
	...
 8018de0:	0801a7f0 	.word	0x0801a7f0
 8018de4:	00000000 	.word	0x00000000

08018de8 <sqrt>:
 8018de8:	b508      	push	{r3, lr}
 8018dea:	ed2d 8b04 	vpush	{d8-d9}
 8018dee:	eeb0 8b40 	vmov.f64	d8, d0
 8018df2:	f000 f819 	bl	8018e28 <__ieee754_sqrt>
 8018df6:	eeb4 8b48 	vcmp.f64	d8, d8
 8018dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dfe:	d60c      	bvs.n	8018e1a <sqrt+0x32>
 8018e00:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8018e20 <sqrt+0x38>
 8018e04:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8018e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e0c:	d505      	bpl.n	8018e1a <sqrt+0x32>
 8018e0e:	f7fd fb45 	bl	801649c <__errno>
 8018e12:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8018e16:	2321      	movs	r3, #33	; 0x21
 8018e18:	6003      	str	r3, [r0, #0]
 8018e1a:	ecbd 8b04 	vpop	{d8-d9}
 8018e1e:	bd08      	pop	{r3, pc}
	...

08018e28 <__ieee754_sqrt>:
 8018e28:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8018e2c:	4770      	bx	lr

08018e2e <with_errno>:
 8018e2e:	b513      	push	{r0, r1, r4, lr}
 8018e30:	4604      	mov	r4, r0
 8018e32:	ed8d 0b00 	vstr	d0, [sp]
 8018e36:	f7fd fb31 	bl	801649c <__errno>
 8018e3a:	ed9d 0b00 	vldr	d0, [sp]
 8018e3e:	6004      	str	r4, [r0, #0]
 8018e40:	b002      	add	sp, #8
 8018e42:	bd10      	pop	{r4, pc}

08018e44 <xflow>:
 8018e44:	b082      	sub	sp, #8
 8018e46:	b158      	cbz	r0, 8018e60 <xflow+0x1c>
 8018e48:	eeb1 7b40 	vneg.f64	d7, d0
 8018e4c:	ed8d 7b00 	vstr	d7, [sp]
 8018e50:	ed9d 7b00 	vldr	d7, [sp]
 8018e54:	2022      	movs	r0, #34	; 0x22
 8018e56:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018e5a:	b002      	add	sp, #8
 8018e5c:	f7ff bfe7 	b.w	8018e2e <with_errno>
 8018e60:	eeb0 7b40 	vmov.f64	d7, d0
 8018e64:	e7f2      	b.n	8018e4c <xflow+0x8>
	...

08018e68 <__math_uflow>:
 8018e68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018e70 <__math_uflow+0x8>
 8018e6c:	f7ff bfea 	b.w	8018e44 <xflow>
 8018e70:	00000000 	.word	0x00000000
 8018e74:	10000000 	.word	0x10000000

08018e78 <__math_oflow>:
 8018e78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018e80 <__math_oflow+0x8>
 8018e7c:	f7ff bfe2 	b.w	8018e44 <xflow>
 8018e80:	00000000 	.word	0x00000000
 8018e84:	70000000 	.word	0x70000000

08018e88 <__math_divzero>:
 8018e88:	b082      	sub	sp, #8
 8018e8a:	2800      	cmp	r0, #0
 8018e8c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8018e90:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8018e94:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8018e98:	ed8d 7b00 	vstr	d7, [sp]
 8018e9c:	ed9d 0b00 	vldr	d0, [sp]
 8018ea0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8018eb0 <__math_divzero+0x28>
 8018ea4:	2022      	movs	r0, #34	; 0x22
 8018ea6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8018eaa:	b002      	add	sp, #8
 8018eac:	f7ff bfbf 	b.w	8018e2e <with_errno>
	...

08018eb8 <__math_invalid>:
 8018eb8:	eeb0 7b40 	vmov.f64	d7, d0
 8018ebc:	eeb4 7b47 	vcmp.f64	d7, d7
 8018ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ec4:	ee30 6b40 	vsub.f64	d6, d0, d0
 8018ec8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8018ecc:	d602      	bvs.n	8018ed4 <__math_invalid+0x1c>
 8018ece:	2021      	movs	r0, #33	; 0x21
 8018ed0:	f7ff bfad 	b.w	8018e2e <with_errno>
 8018ed4:	4770      	bx	lr

08018ed6 <__math_check_uflow>:
 8018ed6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8018eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ede:	d102      	bne.n	8018ee6 <__math_check_uflow+0x10>
 8018ee0:	2022      	movs	r0, #34	; 0x22
 8018ee2:	f7ff bfa4 	b.w	8018e2e <with_errno>
 8018ee6:	4770      	bx	lr

08018ee8 <__math_check_oflow>:
 8018ee8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8018f08 <__math_check_oflow+0x20>
 8018eec:	eeb0 7bc0 	vabs.f64	d7, d0
 8018ef0:	eeb4 7b46 	vcmp.f64	d7, d6
 8018ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ef8:	dd02      	ble.n	8018f00 <__math_check_oflow+0x18>
 8018efa:	2022      	movs	r0, #34	; 0x22
 8018efc:	f7ff bf97 	b.w	8018e2e <with_errno>
 8018f00:	4770      	bx	lr
 8018f02:	bf00      	nop
 8018f04:	f3af 8000 	nop.w
 8018f08:	ffffffff 	.word	0xffffffff
 8018f0c:	7fefffff 	.word	0x7fefffff

08018f10 <_close>:
 8018f10:	4b02      	ldr	r3, [pc, #8]	; (8018f1c <_close+0xc>)
 8018f12:	2258      	movs	r2, #88	; 0x58
 8018f14:	601a      	str	r2, [r3, #0]
 8018f16:	f04f 30ff 	mov.w	r0, #4294967295
 8018f1a:	4770      	bx	lr
 8018f1c:	20006638 	.word	0x20006638

08018f20 <_fstat>:
 8018f20:	4b02      	ldr	r3, [pc, #8]	; (8018f2c <_fstat+0xc>)
 8018f22:	2258      	movs	r2, #88	; 0x58
 8018f24:	601a      	str	r2, [r3, #0]
 8018f26:	f04f 30ff 	mov.w	r0, #4294967295
 8018f2a:	4770      	bx	lr
 8018f2c:	20006638 	.word	0x20006638

08018f30 <_getpid>:
 8018f30:	4b02      	ldr	r3, [pc, #8]	; (8018f3c <_getpid+0xc>)
 8018f32:	2258      	movs	r2, #88	; 0x58
 8018f34:	601a      	str	r2, [r3, #0]
 8018f36:	f04f 30ff 	mov.w	r0, #4294967295
 8018f3a:	4770      	bx	lr
 8018f3c:	20006638 	.word	0x20006638

08018f40 <_isatty>:
 8018f40:	4b02      	ldr	r3, [pc, #8]	; (8018f4c <_isatty+0xc>)
 8018f42:	2258      	movs	r2, #88	; 0x58
 8018f44:	601a      	str	r2, [r3, #0]
 8018f46:	2000      	movs	r0, #0
 8018f48:	4770      	bx	lr
 8018f4a:	bf00      	nop
 8018f4c:	20006638 	.word	0x20006638

08018f50 <_kill>:
 8018f50:	4b02      	ldr	r3, [pc, #8]	; (8018f5c <_kill+0xc>)
 8018f52:	2258      	movs	r2, #88	; 0x58
 8018f54:	601a      	str	r2, [r3, #0]
 8018f56:	f04f 30ff 	mov.w	r0, #4294967295
 8018f5a:	4770      	bx	lr
 8018f5c:	20006638 	.word	0x20006638

08018f60 <_lseek>:
 8018f60:	4b02      	ldr	r3, [pc, #8]	; (8018f6c <_lseek+0xc>)
 8018f62:	2258      	movs	r2, #88	; 0x58
 8018f64:	601a      	str	r2, [r3, #0]
 8018f66:	f04f 30ff 	mov.w	r0, #4294967295
 8018f6a:	4770      	bx	lr
 8018f6c:	20006638 	.word	0x20006638

08018f70 <_read>:
 8018f70:	4b02      	ldr	r3, [pc, #8]	; (8018f7c <_read+0xc>)
 8018f72:	2258      	movs	r2, #88	; 0x58
 8018f74:	601a      	str	r2, [r3, #0]
 8018f76:	f04f 30ff 	mov.w	r0, #4294967295
 8018f7a:	4770      	bx	lr
 8018f7c:	20006638 	.word	0x20006638

08018f80 <_sbrk>:
 8018f80:	4a04      	ldr	r2, [pc, #16]	; (8018f94 <_sbrk+0x14>)
 8018f82:	6811      	ldr	r1, [r2, #0]
 8018f84:	4603      	mov	r3, r0
 8018f86:	b909      	cbnz	r1, 8018f8c <_sbrk+0xc>
 8018f88:	4903      	ldr	r1, [pc, #12]	; (8018f98 <_sbrk+0x18>)
 8018f8a:	6011      	str	r1, [r2, #0]
 8018f8c:	6810      	ldr	r0, [r2, #0]
 8018f8e:	4403      	add	r3, r0
 8018f90:	6013      	str	r3, [r2, #0]
 8018f92:	4770      	bx	lr
 8018f94:	2000663c 	.word	0x2000663c
 8018f98:	20006640 	.word	0x20006640

08018f9c <_exit>:
 8018f9c:	e7fe      	b.n	8018f9c <_exit>
	...

08018fa0 <_init>:
 8018fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fa2:	bf00      	nop
 8018fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018fa6:	bc08      	pop	{r3}
 8018fa8:	469e      	mov	lr, r3
 8018faa:	4770      	bx	lr

08018fac <_fini>:
 8018fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fae:	bf00      	nop
 8018fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018fb2:	bc08      	pop	{r3}
 8018fb4:	469e      	mov	lr, r3
 8018fb6:	4770      	bx	lr
